
BelowGroundBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a934  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000418  0800a9f4  0800a9f4  0000b9f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae0c  0800ae0c  0000c0c0  2**0
                  CONTENTS
  4 .ARM          00000000  0800ae0c  0800ae0c  0000c0c0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ae0c  0800ae0c  0000c0c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae0c  0800ae0c  0000be0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ae10  0800ae10  0000be10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c0  20000000  0800ae14  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007e0  200000c0  0800aed4  0000c0c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008a0  0800aed4  0000c8a0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000c0c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a717  00000000  00000000  0000c0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003617  00000000  00000000  000267ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001818  00000000  00000000  00029e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012f6  00000000  00000000  0002b630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019c11  00000000  00000000  0002c926  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c6ba  00000000  00000000  00046537  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f1fc  00000000  00000000  00062bf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00101ded  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005910  00000000  00000000  00101e30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  00107740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000c0 	.word	0x200000c0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800a9dc 	.word	0x0800a9dc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000c4 	.word	0x200000c4
 8000104:	0800a9dc 	.word	0x0800a9dc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <HAL_I2C_MemTxCpltCallback>:
void bno055_delay(uint32_t time);
int8_t bno055_write(uint8_t *data, uint8_t len);
int8_t bno055_read(uint8_t reg, uint8_t *data, uint8_t len);

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
	i2c_tx_int = 1;
 80003fc:	4b03      	ldr	r3, [pc, #12]	@ (800040c <HAL_I2C_MemTxCpltCallback+0x18>)
 80003fe:	2201      	movs	r2, #1
 8000400:	701a      	strb	r2, [r3, #0]
}
 8000402:	46c0      	nop			@ (mov r8, r8)
 8000404:	46bd      	mov	sp, r7
 8000406:	b002      	add	sp, #8
 8000408:	bd80      	pop	{r7, pc}
 800040a:	46c0      	nop			@ (mov r8, r8)
 800040c:	2000000e 	.word	0x2000000e

08000410 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
	i2c_rx_int = 1;
 8000418:	4b03      	ldr	r3, [pc, #12]	@ (8000428 <HAL_I2C_MemRxCpltCallback+0x18>)
 800041a:	2201      	movs	r2, #1
 800041c:	701a      	strb	r2, [r3, #0]
}
 800041e:	46c0      	nop			@ (mov r8, r8)
 8000420:	46bd      	mov	sp, r7
 8000422:	b002      	add	sp, #8
 8000424:	bd80      	pop	{r7, pc}
 8000426:	46c0      	nop			@ (mov r8, r8)
 8000428:	2000000f 	.word	0x2000000f

0800042c <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
	i2c_tx_int = 1;
 8000434:	4b03      	ldr	r3, [pc, #12]	@ (8000444 <HAL_I2C_MasterTxCpltCallback+0x18>)
 8000436:	2201      	movs	r2, #1
 8000438:	701a      	strb	r2, [r3, #0]
}
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	46bd      	mov	sp, r7
 800043e:	b002      	add	sp, #8
 8000440:	bd80      	pop	{r7, pc}
 8000442:	46c0      	nop			@ (mov r8, r8)
 8000444:	2000000e 	.word	0x2000000e

08000448 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
	i2c_rx_int = 1;
 8000450:	4b03      	ldr	r3, [pc, #12]	@ (8000460 <HAL_I2C_MasterRxCpltCallback+0x18>)
 8000452:	2201      	movs	r2, #1
 8000454:	701a      	strb	r2, [r3, #0]
}
 8000456:	46c0      	nop			@ (mov r8, r8)
 8000458:	46bd      	mov	sp, r7
 800045a:	b002      	add	sp, #8
 800045c:	bd80      	pop	{r7, pc}
 800045e:	46c0      	nop			@ (mov r8, r8)
 8000460:	2000000f 	.word	0x2000000f

08000464 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
	// Do something
	i2c_err_int = 1;
 800046c:	4b07      	ldr	r3, [pc, #28]	@ (800048c <HAL_I2C_ErrorCallback+0x28>)
 800046e:	2201      	movs	r2, #1
 8000470:	701a      	strb	r2, [r3, #0]
	__HAL_I2C_DISABLE_IT(&hi2c1, I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI |
 8000472:	4b07      	ldr	r3, [pc, #28]	@ (8000490 <HAL_I2C_ErrorCallback+0x2c>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	681a      	ldr	r2, [r3, #0]
 8000478:	4b05      	ldr	r3, [pc, #20]	@ (8000490 <HAL_I2C_ErrorCallback+0x2c>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	21fe      	movs	r1, #254	@ 0xfe
 800047e:	438a      	bics	r2, r1
 8000480:	601a      	str	r2, [r3, #0]
										 I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI);
}
 8000482:	46c0      	nop			@ (mov r8, r8)
 8000484:	46bd      	mov	sp, r7
 8000486:	b002      	add	sp, #8
 8000488:	bd80      	pop	{r7, pc}
 800048a:	46c0      	nop			@ (mov r8, r8)
 800048c:	200002e8 	.word	0x200002e8
 8000490:	200002ec 	.word	0x200002ec

08000494 <bno055_delay>:


void bno055_delay(uint32_t time)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	0018      	movs	r0, r3
 80004a0:	f003 fc2e 	bl	8003d00 <HAL_Delay>
#endif
}
 80004a4:	46c0      	nop			@ (mov r8, r8)
 80004a6:	46bd      	mov	sp, r7
 80004a8:	b002      	add	sp, #8
 80004aa:	bd80      	pop	{r7, pc}

080004ac <bno055_init>:

int8_t bno055_init()
{
 80004ac:	b590      	push	{r4, r7, lr}
 80004ae:	b083      	sub	sp, #12
 80004b0:	af00      	add	r7, sp, #0
	int8_t status = HAL_OK;
 80004b2:	1dfb      	adds	r3, r7, #7
 80004b4:	2200      	movs	r2, #0
 80004b6:	701a      	strb	r2, [r3, #0]

	// Set up the local IMU
	bno055_address = BNO055_I2C_ADDR_LO << 1;
 80004b8:	4b1d      	ldr	r3, [pc, #116]	@ (8000530 <bno055_init+0x84>)
 80004ba:	2250      	movs	r2, #80	@ 0x50
 80004bc:	701a      	strb	r2, [r3, #0]
	status = bno055_setup();
 80004be:	1dfc      	adds	r4, r7, #7
 80004c0:	f000 f98a 	bl	80007d8 <bno055_setup>
 80004c4:	0003      	movs	r3, r0
 80004c6:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80004c8:	1dfb      	adds	r3, r7, #7
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	b25b      	sxtb	r3, r3
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d003      	beq.n	80004da <bno055_init+0x2e>
 80004d2:	1dfb      	adds	r3, r7, #7
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	b25b      	sxtb	r3, r3
 80004d8:	e026      	b.n	8000528 <bno055_init+0x7c>

	status = bno055_setOperationModeNDOF();
 80004da:	1dfc      	adds	r4, r7, #7
 80004dc:	f000 f895 	bl	800060a <bno055_setOperationModeNDOF>
 80004e0:	0003      	movs	r3, r0
 80004e2:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80004e4:	1dfb      	adds	r3, r7, #7
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	b25b      	sxtb	r3, r3
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d003      	beq.n	80004f6 <bno055_init+0x4a>
 80004ee:	1dfb      	adds	r3, r7, #7
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	b25b      	sxtb	r3, r3
 80004f4:	e018      	b.n	8000528 <bno055_init+0x7c>

	// Setup the remote IMU
	bno055_address = BNO055_I2C_ADDR_HI << 1;
 80004f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000530 <bno055_init+0x84>)
 80004f8:	2252      	movs	r2, #82	@ 0x52
 80004fa:	701a      	strb	r2, [r3, #0]
	status = bno055_setup();
 80004fc:	1dfc      	adds	r4, r7, #7
 80004fe:	f000 f96b 	bl	80007d8 <bno055_setup>
 8000502:	0003      	movs	r3, r0
 8000504:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8000506:	1dfb      	adds	r3, r7, #7
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	b25b      	sxtb	r3, r3
 800050c:	2b00      	cmp	r3, #0
 800050e:	d003      	beq.n	8000518 <bno055_init+0x6c>
 8000510:	1dfb      	adds	r3, r7, #7
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	b25b      	sxtb	r3, r3
 8000516:	e007      	b.n	8000528 <bno055_init+0x7c>

	status = bno055_setOperationModeNDOF();
 8000518:	1dfc      	adds	r4, r7, #7
 800051a:	f000 f876 	bl	800060a <bno055_setOperationModeNDOF>
 800051e:	0003      	movs	r3, r0
 8000520:	7023      	strb	r3, [r4, #0]
	return status;
 8000522:	1dfb      	adds	r3, r7, #7
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	b25b      	sxtb	r3, r3
}
 8000528:	0018      	movs	r0, r3
 800052a:	46bd      	mov	sp, r7
 800052c:	b003      	add	sp, #12
 800052e:	bd90      	pop	{r4, r7, pc}
 8000530:	200002dd 	.word	0x200002dd

08000534 <bno055_setPage>:

int8_t bno055_setPage(uint8_t page)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	0002      	movs	r2, r0
 800053c:	1dfb      	adds	r3, r7, #7
 800053e:	701a      	strb	r2, [r3, #0]
	i2c_tx_buffer[0] = BNO055_PAGE_ID;
 8000540:	4b08      	ldr	r3, [pc, #32]	@ (8000564 <bno055_setPage+0x30>)
 8000542:	2207      	movs	r2, #7
 8000544:	701a      	strb	r2, [r3, #0]
	i2c_tx_buffer[1] = page;
 8000546:	4b07      	ldr	r3, [pc, #28]	@ (8000564 <bno055_setPage+0x30>)
 8000548:	1dfa      	adds	r2, r7, #7
 800054a:	7812      	ldrb	r2, [r2, #0]
 800054c:	705a      	strb	r2, [r3, #1]
	return bno055_write(i2c_tx_buffer, 2);
 800054e:	4b05      	ldr	r3, [pc, #20]	@ (8000564 <bno055_setPage+0x30>)
 8000550:	2102      	movs	r1, #2
 8000552:	0018      	movs	r0, r3
 8000554:	f000 fab0 	bl	8000ab8 <bno055_write>
 8000558:	0003      	movs	r3, r0
}
 800055a:	0018      	movs	r0, r3
 800055c:	46bd      	mov	sp, r7
 800055e:	b002      	add	sp, #8
 8000560:	bd80      	pop	{r7, pc}
 8000562:	46c0      	nop			@ (mov r8, r8)
 8000564:	200000dc 	.word	0x200000dc

08000568 <bno055_setOperationMode>:
{
	return bno055_read(BNO055_OPR_MODE, mode, 1);
}

int8_t bno055_setOperationMode(bno055_opmode_t mode)
{
 8000568:	b5b0      	push	{r4, r5, r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af00      	add	r7, sp, #0
 800056e:	0002      	movs	r2, r0
 8000570:	1dfb      	adds	r3, r7, #7
 8000572:	701a      	strb	r2, [r3, #0]
	int8_t status = HAL_OK;
 8000574:	210f      	movs	r1, #15
 8000576:	187b      	adds	r3, r7, r1
 8000578:	2200      	movs	r2, #0
 800057a:	701a      	strb	r2, [r3, #0]
	i2c_tx_buffer[0] = BNO055_OPR_MODE;
 800057c:	4b1d      	ldr	r3, [pc, #116]	@ (80005f4 <bno055_setOperationMode+0x8c>)
 800057e:	223d      	movs	r2, #61	@ 0x3d
 8000580:	701a      	strb	r2, [r3, #0]
	i2c_tx_buffer[1] = mode;
 8000582:	4b1c      	ldr	r3, [pc, #112]	@ (80005f4 <bno055_setOperationMode+0x8c>)
 8000584:	1dfa      	adds	r2, r7, #7
 8000586:	7812      	ldrb	r2, [r2, #0]
 8000588:	705a      	strb	r2, [r3, #1]
	status = bno055_write(i2c_tx_buffer, 2);
 800058a:	000d      	movs	r5, r1
 800058c:	187c      	adds	r4, r7, r1
 800058e:	4b19      	ldr	r3, [pc, #100]	@ (80005f4 <bno055_setOperationMode+0x8c>)
 8000590:	2102      	movs	r1, #2
 8000592:	0018      	movs	r0, r3
 8000594:	f000 fa90 	bl	8000ab8 <bno055_write>
 8000598:	0003      	movs	r3, r0
 800059a:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800059c:	197b      	adds	r3, r7, r5
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	b25b      	sxtb	r3, r3
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d003      	beq.n	80005ae <bno055_setOperationMode+0x46>
 80005a6:	197b      	adds	r3, r7, r5
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	b25b      	sxtb	r3, r3
 80005ac:	e01e      	b.n	80005ec <bno055_setOperationMode+0x84>

	status = bno055_poll_transaction();
 80005ae:	250f      	movs	r5, #15
 80005b0:	197c      	adds	r4, r7, r5
 80005b2:	f000 f8bf 	bl	8000734 <bno055_poll_transaction>
 80005b6:	0003      	movs	r3, r0
 80005b8:	7023      	strb	r3, [r4, #0]
//	bno055_writeData(BNO055_OPR_MODE, mode);
	if(status != HAL_OK){return status;}
 80005ba:	002a      	movs	r2, r5
 80005bc:	18bb      	adds	r3, r7, r2
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	b25b      	sxtb	r3, r3
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d003      	beq.n	80005ce <bno055_setOperationMode+0x66>
 80005c6:	18bb      	adds	r3, r7, r2
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	b25b      	sxtb	r3, r3
 80005cc:	e00e      	b.n	80005ec <bno055_setOperationMode+0x84>

	if (mode == BNO055_OPERATION_MODE_CONFIG)
 80005ce:	1dfb      	adds	r3, r7, #7
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d103      	bne.n	80005de <bno055_setOperationMode+0x76>
	{
		bno055_delay(19);
 80005d6:	2013      	movs	r0, #19
 80005d8:	f7ff ff5c 	bl	8000494 <bno055_delay>
 80005dc:	e002      	b.n	80005e4 <bno055_setOperationMode+0x7c>
	}
	else
	{
		bno055_delay(7);
 80005de:	2007      	movs	r0, #7
 80005e0:	f7ff ff58 	bl	8000494 <bno055_delay>
	}
	return status;
 80005e4:	230f      	movs	r3, #15
 80005e6:	18fb      	adds	r3, r7, r3
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	b25b      	sxtb	r3, r3
}
 80005ec:	0018      	movs	r0, r3
 80005ee:	46bd      	mov	sp, r7
 80005f0:	b004      	add	sp, #16
 80005f2:	bdb0      	pop	{r4, r5, r7, pc}
 80005f4:	200000dc 	.word	0x200000dc

080005f8 <bno055_setOperationModeConfig>:

int8_t bno055_setOperationModeConfig()
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
	return bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 80005fc:	2000      	movs	r0, #0
 80005fe:	f7ff ffb3 	bl	8000568 <bno055_setOperationMode>
 8000602:	0003      	movs	r3, r0
}
 8000604:	0018      	movs	r0, r3
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}

0800060a <bno055_setOperationModeNDOF>:

int8_t bno055_setOperationModeNDOF()
{
 800060a:	b580      	push	{r7, lr}
 800060c:	af00      	add	r7, sp, #0
	return bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 800060e:	200c      	movs	r0, #12
 8000610:	f7ff ffaa 	bl	8000568 <bno055_setOperationMode>
 8000614:	0003      	movs	r3, r0
}
 8000616:	0018      	movs	r0, r3
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}

0800061c <bno055_setExternalCrystalUse>:

int8_t bno055_setExternalCrystalUse(uint8_t state)
{
 800061c:	b5b0      	push	{r4, r5, r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	0002      	movs	r2, r0
 8000624:	1dfb      	adds	r3, r7, #7
 8000626:	701a      	strb	r2, [r3, #0]
	int8_t status = HAL_OK;
 8000628:	250f      	movs	r5, #15
 800062a:	197b      	adds	r3, r7, r5
 800062c:	2200      	movs	r2, #0
 800062e:	701a      	strb	r2, [r3, #0]
	status = bno055_setPage(0);
 8000630:	197c      	adds	r4, r7, r5
 8000632:	2000      	movs	r0, #0
 8000634:	f7ff ff7e 	bl	8000534 <bno055_setPage>
 8000638:	0003      	movs	r3, r0
 800063a:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800063c:	002a      	movs	r2, r5
 800063e:	18bb      	adds	r3, r7, r2
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	b25b      	sxtb	r3, r3
 8000644:	2b00      	cmp	r3, #0
 8000646:	d003      	beq.n	8000650 <bno055_setExternalCrystalUse+0x34>
 8000648:	18bb      	adds	r3, r7, r2
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	b25b      	sxtb	r3, r3
 800064e:	e069      	b.n	8000724 <bno055_setExternalCrystalUse+0x108>

	status = bno055_poll_transaction();
 8000650:	250f      	movs	r5, #15
 8000652:	197c      	adds	r4, r7, r5
 8000654:	f000 f86e 	bl	8000734 <bno055_poll_transaction>
 8000658:	0003      	movs	r3, r0
 800065a:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800065c:	002a      	movs	r2, r5
 800065e:	18bb      	adds	r3, r7, r2
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	b25b      	sxtb	r3, r3
 8000664:	2b00      	cmp	r3, #0
 8000666:	d003      	beq.n	8000670 <bno055_setExternalCrystalUse+0x54>
 8000668:	18bb      	adds	r3, r7, r2
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	b25b      	sxtb	r3, r3
 800066e:	e059      	b.n	8000724 <bno055_setExternalCrystalUse+0x108>

	status = bno055_read(BNO055_SYS_TRIGGER, i2c_rx_buffer, 1);
 8000670:	250f      	movs	r5, #15
 8000672:	197c      	adds	r4, r7, r5
 8000674:	4b2d      	ldr	r3, [pc, #180]	@ (800072c <bno055_setExternalCrystalUse+0x110>)
 8000676:	2201      	movs	r2, #1
 8000678:	0019      	movs	r1, r3
 800067a:	203f      	movs	r0, #63	@ 0x3f
 800067c:	f000 fa56 	bl	8000b2c <bno055_read>
 8000680:	0003      	movs	r3, r0
 8000682:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8000684:	197b      	adds	r3, r7, r5
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	b25b      	sxtb	r3, r3
 800068a:	2b00      	cmp	r3, #0
 800068c:	d003      	beq.n	8000696 <bno055_setExternalCrystalUse+0x7a>
 800068e:	197b      	adds	r3, r7, r5
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	b25b      	sxtb	r3, r3
 8000694:	e046      	b.n	8000724 <bno055_setExternalCrystalUse+0x108>

	status = bno055_poll_transaction();
 8000696:	250f      	movs	r5, #15
 8000698:	197c      	adds	r4, r7, r5
 800069a:	f000 f84b 	bl	8000734 <bno055_poll_transaction>
 800069e:	0003      	movs	r3, r0
 80006a0:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80006a2:	002a      	movs	r2, r5
 80006a4:	18bb      	adds	r3, r7, r2
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	b25b      	sxtb	r3, r3
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d003      	beq.n	80006b6 <bno055_setExternalCrystalUse+0x9a>
 80006ae:	18bb      	adds	r3, r7, r2
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	b25b      	sxtb	r3, r3
 80006b4:	e036      	b.n	8000724 <bno055_setExternalCrystalUse+0x108>

	i2c_rx_buffer[0] |= (state == 1) ? 0x80 : 0x0;
 80006b6:	4b1d      	ldr	r3, [pc, #116]	@ (800072c <bno055_setExternalCrystalUse+0x110>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	b25a      	sxtb	r2, r3
 80006bc:	1dfb      	adds	r3, r7, #7
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d102      	bne.n	80006ca <bno055_setExternalCrystalUse+0xae>
 80006c4:	2380      	movs	r3, #128	@ 0x80
 80006c6:	425b      	negs	r3, r3
 80006c8:	e000      	b.n	80006cc <bno055_setExternalCrystalUse+0xb0>
 80006ca:	2300      	movs	r3, #0
 80006cc:	4313      	orrs	r3, r2
 80006ce:	b25b      	sxtb	r3, r3
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	4b16      	ldr	r3, [pc, #88]	@ (800072c <bno055_setExternalCrystalUse+0x110>)
 80006d4:	701a      	strb	r2, [r3, #0]
	i2c_tx_buffer[0] = BNO055_SYS_TRIGGER;
 80006d6:	4b16      	ldr	r3, [pc, #88]	@ (8000730 <bno055_setExternalCrystalUse+0x114>)
 80006d8:	223f      	movs	r2, #63	@ 0x3f
 80006da:	701a      	strb	r2, [r3, #0]
	i2c_tx_buffer[1] = i2c_rx_buffer[0];
 80006dc:	4b13      	ldr	r3, [pc, #76]	@ (800072c <bno055_setExternalCrystalUse+0x110>)
 80006de:	781a      	ldrb	r2, [r3, #0]
 80006e0:	4b13      	ldr	r3, [pc, #76]	@ (8000730 <bno055_setExternalCrystalUse+0x114>)
 80006e2:	705a      	strb	r2, [r3, #1]
	status = bno055_write(i2c_tx_buffer, 2);
 80006e4:	250f      	movs	r5, #15
 80006e6:	197c      	adds	r4, r7, r5
 80006e8:	4b11      	ldr	r3, [pc, #68]	@ (8000730 <bno055_setExternalCrystalUse+0x114>)
 80006ea:	2102      	movs	r1, #2
 80006ec:	0018      	movs	r0, r3
 80006ee:	f000 f9e3 	bl	8000ab8 <bno055_write>
 80006f2:	0003      	movs	r3, r0
 80006f4:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80006f6:	197b      	adds	r3, r7, r5
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	b25b      	sxtb	r3, r3
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d003      	beq.n	8000708 <bno055_setExternalCrystalUse+0xec>
 8000700:	197b      	adds	r3, r7, r5
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	b25b      	sxtb	r3, r3
 8000706:	e00d      	b.n	8000724 <bno055_setExternalCrystalUse+0x108>

	status = bno055_poll_transaction();
 8000708:	250f      	movs	r5, #15
 800070a:	197c      	adds	r4, r7, r5
 800070c:	f000 f812 	bl	8000734 <bno055_poll_transaction>
 8000710:	0003      	movs	r3, r0
 8000712:	7023      	strb	r3, [r4, #0]
	bno055_delay(700);
 8000714:	23af      	movs	r3, #175	@ 0xaf
 8000716:	009b      	lsls	r3, r3, #2
 8000718:	0018      	movs	r0, r3
 800071a:	f7ff febb 	bl	8000494 <bno055_delay>
	return status;
 800071e:	197b      	adds	r3, r7, r5
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	b25b      	sxtb	r3, r3
}
 8000724:	0018      	movs	r0, r3
 8000726:	46bd      	mov	sp, r7
 8000728:	b004      	add	sp, #16
 800072a:	bdb0      	pop	{r4, r5, r7, pc}
 800072c:	200001dc 	.word	0x200001dc
 8000730:	200000dc 	.word	0x200000dc

08000734 <bno055_poll_transaction>:

int8_t bno055_enableExternalCrystal() { return bno055_setExternalCrystalUse(1); }
int8_t bno055_disableExternalCrystal() { return bno055_setExternalCrystalUse(0); }

int8_t bno055_poll_transaction()
{
 8000734:	b590      	push	{r4, r7, lr}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
	int8_t status = HAL_BUSY;
 800073a:	1dfb      	adds	r3, r7, #7
 800073c:	2202      	movs	r2, #2
 800073e:	701a      	strb	r2, [r3, #0]

	while(status == HAL_BUSY)
 8000740:	e004      	b.n	800074c <bno055_poll_transaction+0x18>
	{
		status = monitor_i2c();
 8000742:	1dfc      	adds	r4, r7, #7
 8000744:	f000 f952 	bl	80009ec <monitor_i2c>
 8000748:	0003      	movs	r3, r0
 800074a:	7023      	strb	r3, [r4, #0]
	while(status == HAL_BUSY)
 800074c:	1dfb      	adds	r3, r7, #7
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	b25b      	sxtb	r3, r3
 8000752:	2b02      	cmp	r3, #2
 8000754:	d0f5      	beq.n	8000742 <bno055_poll_transaction+0xe>
	}

	return status;
 8000756:	1dfb      	adds	r3, r7, #7
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	b25b      	sxtb	r3, r3
}
 800075c:	0018      	movs	r0, r3
 800075e:	46bd      	mov	sp, r7
 8000760:	b003      	add	sp, #12
 8000762:	bd90      	pop	{r4, r7, pc}

08000764 <bno055_reset>:

int8_t bno055_reset()
{
 8000764:	b590      	push	{r4, r7, lr}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
	int8_t status = HAL_OK;
 800076a:	1dfb      	adds	r3, r7, #7
 800076c:	2200      	movs	r2, #0
 800076e:	701a      	strb	r2, [r3, #0]
	i2c_tx_buffer[0] = BNO055_SYS_TRIGGER;
 8000770:	4b18      	ldr	r3, [pc, #96]	@ (80007d4 <bno055_reset+0x70>)
 8000772:	223f      	movs	r2, #63	@ 0x3f
 8000774:	701a      	strb	r2, [r3, #0]
	i2c_tx_buffer[1] = 0x20;
 8000776:	4b17      	ldr	r3, [pc, #92]	@ (80007d4 <bno055_reset+0x70>)
 8000778:	2220      	movs	r2, #32
 800077a:	705a      	strb	r2, [r3, #1]
	status = bno055_write(i2c_tx_buffer, 2);
 800077c:	1dfc      	adds	r4, r7, #7
 800077e:	4b15      	ldr	r3, [pc, #84]	@ (80007d4 <bno055_reset+0x70>)
 8000780:	2102      	movs	r1, #2
 8000782:	0018      	movs	r0, r3
 8000784:	f000 f998 	bl	8000ab8 <bno055_write>
 8000788:	0003      	movs	r3, r0
 800078a:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800078c:	1dfb      	adds	r3, r7, #7
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	b25b      	sxtb	r3, r3
 8000792:	2b00      	cmp	r3, #0
 8000794:	d003      	beq.n	800079e <bno055_reset+0x3a>
 8000796:	1dfb      	adds	r3, r7, #7
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	b25b      	sxtb	r3, r3
 800079c:	e015      	b.n	80007ca <bno055_reset+0x66>

	status = bno055_poll_transaction();
 800079e:	1dfc      	adds	r4, r7, #7
 80007a0:	f7ff ffc8 	bl	8000734 <bno055_poll_transaction>
 80007a4:	0003      	movs	r3, r0
 80007a6:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80007a8:	1dfb      	adds	r3, r7, #7
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	b25b      	sxtb	r3, r3
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d003      	beq.n	80007ba <bno055_reset+0x56>
 80007b2:	1dfb      	adds	r3, r7, #7
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	b25b      	sxtb	r3, r3
 80007b8:	e007      	b.n	80007ca <bno055_reset+0x66>

	bno055_delay(700);
 80007ba:	23af      	movs	r3, #175	@ 0xaf
 80007bc:	009b      	lsls	r3, r3, #2
 80007be:	0018      	movs	r0, r3
 80007c0:	f7ff fe68 	bl	8000494 <bno055_delay>
	return status;
 80007c4:	1dfb      	adds	r3, r7, #7
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	b25b      	sxtb	r3, r3
}
 80007ca:	0018      	movs	r0, r3
 80007cc:	46bd      	mov	sp, r7
 80007ce:	b003      	add	sp, #12
 80007d0:	bd90      	pop	{r4, r7, pc}
 80007d2:	46c0      	nop			@ (mov r8, r8)
 80007d4:	200000dc 	.word	0x200000dc

080007d8 <bno055_setup>:

	return bno055_read(BNO055_TEMP, (uint8_t*) temp, 1);
}

int8_t bno055_setup()
{
 80007d8:	b590      	push	{r4, r7, lr}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
	int8_t status = HAL_OK;
 80007de:	1dfb      	adds	r3, r7, #7
 80007e0:	2200      	movs	r2, #0
 80007e2:	701a      	strb	r2, [r3, #0]
	read_index = 0;
 80007e4:	4b38      	ldr	r3, [pc, #224]	@ (80008c8 <bno055_setup+0xf0>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	701a      	strb	r2, [r3, #0]
	status = bno055_reset();
 80007ea:	1dfc      	adds	r4, r7, #7
 80007ec:	f7ff ffba 	bl	8000764 <bno055_reset>
 80007f0:	0003      	movs	r3, r0
 80007f2:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80007f4:	1dfb      	adds	r3, r7, #7
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	b25b      	sxtb	r3, r3
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d003      	beq.n	8000806 <bno055_setup+0x2e>
 80007fe:	1dfb      	adds	r3, r7, #7
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	b25b      	sxtb	r3, r3
 8000804:	e05c      	b.n	80008c0 <bno055_setup+0xe8>

	status = bno055_read(BNO055_CHIP_ID, i2c_rx_buffer, 1);
 8000806:	1dfc      	adds	r4, r7, #7
 8000808:	4b30      	ldr	r3, [pc, #192]	@ (80008cc <bno055_setup+0xf4>)
 800080a:	2201      	movs	r2, #1
 800080c:	0019      	movs	r1, r3
 800080e:	2000      	movs	r0, #0
 8000810:	f000 f98c 	bl	8000b2c <bno055_read>
 8000814:	0003      	movs	r3, r0
 8000816:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8000818:	1dfb      	adds	r3, r7, #7
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	b25b      	sxtb	r3, r3
 800081e:	2b00      	cmp	r3, #0
 8000820:	d003      	beq.n	800082a <bno055_setup+0x52>
 8000822:	1dfb      	adds	r3, r7, #7
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	b25b      	sxtb	r3, r3
 8000828:	e04a      	b.n	80008c0 <bno055_setup+0xe8>

	status = bno055_poll_transaction();
 800082a:	1dfc      	adds	r4, r7, #7
 800082c:	f7ff ff82 	bl	8000734 <bno055_poll_transaction>
 8000830:	0003      	movs	r3, r0
 8000832:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8000834:	1dfb      	adds	r3, r7, #7
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	b25b      	sxtb	r3, r3
 800083a:	2b00      	cmp	r3, #0
 800083c:	d003      	beq.n	8000846 <bno055_setup+0x6e>
 800083e:	1dfb      	adds	r3, r7, #7
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	b25b      	sxtb	r3, r3
 8000844:	e03c      	b.n	80008c0 <bno055_setup+0xe8>

	if(i2c_rx_buffer[0] != BNO055_ID)
 8000846:	4b21      	ldr	r3, [pc, #132]	@ (80008cc <bno055_setup+0xf4>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	2ba0      	cmp	r3, #160	@ 0xa0
 800084c:	d001      	beq.n	8000852 <bno055_setup+0x7a>
	{
		return HAL_ERROR;
 800084e:	2301      	movs	r3, #1
 8000850:	e036      	b.n	80008c0 <bno055_setup+0xe8>
	}
	status = bno055_setPage(0);
 8000852:	1dfc      	adds	r4, r7, #7
 8000854:	2000      	movs	r0, #0
 8000856:	f7ff fe6d 	bl	8000534 <bno055_setPage>
 800085a:	0003      	movs	r3, r0
 800085c:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800085e:	1dfb      	adds	r3, r7, #7
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	b25b      	sxtb	r3, r3
 8000864:	2b00      	cmp	r3, #0
 8000866:	d003      	beq.n	8000870 <bno055_setup+0x98>
 8000868:	1dfb      	adds	r3, r7, #7
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	b25b      	sxtb	r3, r3
 800086e:	e027      	b.n	80008c0 <bno055_setup+0xe8>

	status = bno055_poll_transaction();
 8000870:	1dfc      	adds	r4, r7, #7
 8000872:	f7ff ff5f 	bl	8000734 <bno055_poll_transaction>
 8000876:	0003      	movs	r3, r0
 8000878:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800087a:	1dfb      	adds	r3, r7, #7
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	b25b      	sxtb	r3, r3
 8000880:	2b00      	cmp	r3, #0
 8000882:	d003      	beq.n	800088c <bno055_setup+0xb4>
 8000884:	1dfb      	adds	r3, r7, #7
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	b25b      	sxtb	r3, r3
 800088a:	e019      	b.n	80008c0 <bno055_setup+0xe8>

	status = bno055_setExternalCrystalUse(0);
 800088c:	1dfc      	adds	r4, r7, #7
 800088e:	2000      	movs	r0, #0
 8000890:	f7ff fec4 	bl	800061c <bno055_setExternalCrystalUse>
 8000894:	0003      	movs	r3, r0
 8000896:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8000898:	1dfb      	adds	r3, r7, #7
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	b25b      	sxtb	r3, r3
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d003      	beq.n	80008aa <bno055_setup+0xd2>
 80008a2:	1dfb      	adds	r3, r7, #7
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	b25b      	sxtb	r3, r3
 80008a8:	e00a      	b.n	80008c0 <bno055_setup+0xe8>

	// Select BNO055 config mode
	status = bno055_setOperationModeConfig();
 80008aa:	1dfc      	adds	r4, r7, #7
 80008ac:	f7ff fea4 	bl	80005f8 <bno055_setOperationModeConfig>
 80008b0:	0003      	movs	r3, r0
 80008b2:	7023      	strb	r3, [r4, #0]
	bno055_delay(10);
 80008b4:	200a      	movs	r0, #10
 80008b6:	f7ff fded 	bl	8000494 <bno055_delay>
	return status;
 80008ba:	1dfb      	adds	r3, r7, #7
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	b25b      	sxtb	r3, r3
}
 80008c0:	0018      	movs	r0, r3
 80008c2:	46bd      	mov	sp, r7
 80008c4:	b003      	add	sp, #12
 80008c6:	bd90      	pop	{r4, r7, pc}
 80008c8:	200002dc 	.word	0x200002dc
 80008cc:	200001dc 	.word	0x200001dc

080008d0 <bno055_rx>:
		bno055_read(mem_read_map[i].reg, &buffer[6 * i], mem_read_map[i].reg_len);
	}
}

uint8_t bno055_rx()
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
	if(i2c_rx_int)
 80008d4:	4b07      	ldr	r3, [pc, #28]	@ (80008f4 <bno055_rx+0x24>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d004      	beq.n	80008e8 <bno055_rx+0x18>
	{
		i2c_rx_int = 0;
 80008de:	4b05      	ldr	r3, [pc, #20]	@ (80008f4 <bno055_rx+0x24>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	701a      	strb	r2, [r3, #0]
		return 1;
 80008e4:	2301      	movs	r3, #1
 80008e6:	e002      	b.n	80008ee <bno055_rx+0x1e>
	}
	return i2c_rx_int;
 80008e8:	4b02      	ldr	r3, [pc, #8]	@ (80008f4 <bno055_rx+0x24>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	b2db      	uxtb	r3, r3
}
 80008ee:	0018      	movs	r0, r3
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	2000000f 	.word	0x2000000f

080008f8 <bno055_queue_transaction>:

int8_t bno055_queue_transaction()
{
 80008f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008fa:	b085      	sub	sp, #20
 80008fc:	af02      	add	r7, sp, #8
	uint8_t status = HAL_OK;
 80008fe:	1d7b      	adds	r3, r7, #5
 8000900:	2200      	movs	r2, #0
 8000902:	701a      	strb	r2, [r3, #0]
	uint16_t start_register = 0;
 8000904:	1dbb      	adds	r3, r7, #6
 8000906:	2200      	movs	r2, #0
 8000908:	801a      	strh	r2, [r3, #0]
	if(bno055_address == BNO055_I2C_ADDR_LO << 1)
 800090a:	4b30      	ldr	r3, [pc, #192]	@ (80009cc <bno055_queue_transaction+0xd4>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	2b50      	cmp	r3, #80	@ 0x50
 8000910:	d103      	bne.n	800091a <bno055_queue_transaction+0x22>
	{
		start_register = ACCELEROMETER_X;
 8000912:	1dbb      	adds	r3, r7, #6
 8000914:	2212      	movs	r2, #18
 8000916:	801a      	strh	r2, [r3, #0]
 8000918:	e002      	b.n	8000920 <bno055_queue_transaction+0x28>
	}
	else
	{
		start_register = REMOTE_ACCELEROMETER_X;
 800091a:	1dbb      	adds	r3, r7, #6
 800091c:	2228      	movs	r2, #40	@ 0x28
 800091e:	801a      	strh	r2, [r3, #0]
	}
	i2c_rx_int = 0;
 8000920:	4b2b      	ldr	r3, [pc, #172]	@ (80009d0 <bno055_queue_transaction+0xd8>)
 8000922:	2200      	movs	r2, #0
 8000924:	701a      	strb	r2, [r3, #0]
	i2c_rx_time = HAL_GetTick();
 8000926:	f003 f9e1 	bl	8003cec <HAL_GetTick>
 800092a:	0002      	movs	r2, r0
 800092c:	4b29      	ldr	r3, [pc, #164]	@ (80009d4 <bno055_queue_transaction+0xdc>)
 800092e:	601a      	str	r2, [r3, #0]
	status = HAL_I2C_Mem_Read_DMA(&hi2c1, bno055_address, mem_read_map[read_index].reg,
 8000930:	4b26      	ldr	r3, [pc, #152]	@ (80009cc <bno055_queue_transaction+0xd4>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	001d      	movs	r5, r3
 8000936:	4b28      	ldr	r3, [pc, #160]	@ (80009d8 <bno055_queue_transaction+0xe0>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	001a      	movs	r2, r3
 800093c:	4b27      	ldr	r3, [pc, #156]	@ (80009dc <bno055_queue_transaction+0xe4>)
 800093e:	0052      	lsls	r2, r2, #1
 8000940:	5cd3      	ldrb	r3, [r2, r3]
 8000942:	001e      	movs	r6, r3
			I2C_MEMADD_SIZE_8BIT, (uint8_t*)(&holding_register_database[start_register + (3 * read_index)]),
 8000944:	1dbb      	adds	r3, r7, #6
 8000946:	881a      	ldrh	r2, [r3, #0]
 8000948:	4b23      	ldr	r3, [pc, #140]	@ (80009d8 <bno055_queue_transaction+0xe0>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	0019      	movs	r1, r3
 800094e:	000b      	movs	r3, r1
 8000950:	005b      	lsls	r3, r3, #1
 8000952:	185b      	adds	r3, r3, r1
 8000954:	18d3      	adds	r3, r2, r3
 8000956:	005a      	lsls	r2, r3, #1
 8000958:	4b21      	ldr	r3, [pc, #132]	@ (80009e0 <bno055_queue_transaction+0xe8>)
 800095a:	18d3      	adds	r3, r2, r3
			mem_read_map[read_index].reg_len);
 800095c:	4a1e      	ldr	r2, [pc, #120]	@ (80009d8 <bno055_queue_transaction+0xe0>)
 800095e:	7812      	ldrb	r2, [r2, #0]
 8000960:	491e      	ldr	r1, [pc, #120]	@ (80009dc <bno055_queue_transaction+0xe4>)
 8000962:	0052      	lsls	r2, r2, #1
 8000964:	188a      	adds	r2, r1, r2
 8000966:	3201      	adds	r2, #1
 8000968:	7812      	ldrb	r2, [r2, #0]
	status = HAL_I2C_Mem_Read_DMA(&hi2c1, bno055_address, mem_read_map[read_index].reg,
 800096a:	1d7c      	adds	r4, r7, #5
 800096c:	481d      	ldr	r0, [pc, #116]	@ (80009e4 <bno055_queue_transaction+0xec>)
 800096e:	9201      	str	r2, [sp, #4]
 8000970:	9300      	str	r3, [sp, #0]
 8000972:	2301      	movs	r3, #1
 8000974:	0032      	movs	r2, r6
 8000976:	0029      	movs	r1, r5
 8000978:	f004 fc72 	bl	8005260 <HAL_I2C_Mem_Read_DMA>
 800097c:	0003      	movs	r3, r0
 800097e:	7023      	strb	r3, [r4, #0]
	__HAL_DMA_DISABLE_IT(&hdma_i2c1_rx, DMA_IT_HT);
 8000980:	4b19      	ldr	r3, [pc, #100]	@ (80009e8 <bno055_queue_transaction+0xf0>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	681a      	ldr	r2, [r3, #0]
 8000986:	4b18      	ldr	r3, [pc, #96]	@ (80009e8 <bno055_queue_transaction+0xf0>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	2104      	movs	r1, #4
 800098c:	438a      	bics	r2, r1
 800098e:	601a      	str	r2, [r3, #0]

	if(read_index == NUM_VECTORS - 1)
 8000990:	4b11      	ldr	r3, [pc, #68]	@ (80009d8 <bno055_queue_transaction+0xe0>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	2b06      	cmp	r3, #6
 8000996:	d10c      	bne.n	80009b2 <bno055_queue_transaction+0xba>
	{
		// Reset the read index
		read_index = 0;
 8000998:	4b0f      	ldr	r3, [pc, #60]	@ (80009d8 <bno055_queue_transaction+0xe0>)
 800099a:	2200      	movs	r2, #0
 800099c:	701a      	strb	r2, [r3, #0]
		// Switch to the other IMU
		bno055_address = (bno055_address == (BNO055_I2C_ADDR_LO << 1))? (BNO055_I2C_ADDR_HI << 1): (BNO055_I2C_ADDR_LO << 1);
 800099e:	4b0b      	ldr	r3, [pc, #44]	@ (80009cc <bno055_queue_transaction+0xd4>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	2b50      	cmp	r3, #80	@ 0x50
 80009a4:	d101      	bne.n	80009aa <bno055_queue_transaction+0xb2>
 80009a6:	2252      	movs	r2, #82	@ 0x52
 80009a8:	e000      	b.n	80009ac <bno055_queue_transaction+0xb4>
 80009aa:	2250      	movs	r2, #80	@ 0x50
 80009ac:	4b07      	ldr	r3, [pc, #28]	@ (80009cc <bno055_queue_transaction+0xd4>)
 80009ae:	701a      	strb	r2, [r3, #0]
 80009b0:	e005      	b.n	80009be <bno055_queue_transaction+0xc6>
	}
	else
	{
		// Increment the read index to read the next vector on the next run
		read_index = read_index + 1;
 80009b2:	4b09      	ldr	r3, [pc, #36]	@ (80009d8 <bno055_queue_transaction+0xe0>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	3301      	adds	r3, #1
 80009b8:	b2da      	uxtb	r2, r3
 80009ba:	4b07      	ldr	r3, [pc, #28]	@ (80009d8 <bno055_queue_transaction+0xe0>)
 80009bc:	701a      	strb	r2, [r3, #0]
	}
	return status;
 80009be:	1d7b      	adds	r3, r7, #5
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	b25b      	sxtb	r3, r3
}
 80009c4:	0018      	movs	r0, r3
 80009c6:	46bd      	mov	sp, r7
 80009c8:	b003      	add	sp, #12
 80009ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009cc:	200002dd 	.word	0x200002dd
 80009d0:	2000000f 	.word	0x2000000f
 80009d4:	200002e4 	.word	0x200002e4
 80009d8:	200002dc 	.word	0x200002dc
 80009dc:	20000000 	.word	0x20000000
 80009e0:	20000010 	.word	0x20000010
 80009e4:	200002ec 	.word	0x200002ec
 80009e8:	20000340 	.word	0x20000340

080009ec <monitor_i2c>:
//	status = bno055_write(i2c_rx_buffer, 2);
//	status |= bno055_poll_transaction();
}

int8_t monitor_i2c()
{
 80009ec:	b590      	push	{r4, r7, lr}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
	int8_t status = HAL_OK;
 80009f2:	1dfb      	adds	r3, r7, #7
 80009f4:	2200      	movs	r2, #0
 80009f6:	701a      	strb	r2, [r3, #0]

	// I2C error handling
	if(i2c_err_int)
 80009f8:	4b2a      	ldr	r3, [pc, #168]	@ (8000aa4 <monitor_i2c+0xb8>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d018      	beq.n	8000a34 <monitor_i2c+0x48>
	{
		i2c_err_int = 0;
 8000a02:	4b28      	ldr	r3, [pc, #160]	@ (8000aa4 <monitor_i2c+0xb8>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	701a      	strb	r2, [r3, #0]
		status = i2c_reset();
 8000a08:	1dfc      	adds	r4, r7, #7
 8000a0a:	f000 f909 	bl	8000c20 <i2c_reset>
 8000a0e:	0003      	movs	r3, r0
 8000a10:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK)
 8000a12:	1dfb      	adds	r3, r7, #7
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	b25b      	sxtb	r3, r3
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d006      	beq.n	8000a2a <monitor_i2c+0x3e>
		{
			i2c_rx_int = 1;
 8000a1c:	4b22      	ldr	r3, [pc, #136]	@ (8000aa8 <monitor_i2c+0xbc>)
 8000a1e:	2201      	movs	r2, #1
 8000a20:	701a      	strb	r2, [r3, #0]
			return status;
 8000a22:	1dfb      	adds	r3, r7, #7
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	b25b      	sxtb	r3, r3
 8000a28:	e037      	b.n	8000a9a <monitor_i2c+0xae>
		}
		return handle_i2c_error(I2C_ERROR);
 8000a2a:	2018      	movs	r0, #24
 8000a2c:	f000 f956 	bl	8000cdc <handle_i2c_error>
 8000a30:	0003      	movs	r3, r0
 8000a32:	e032      	b.n	8000a9a <monitor_i2c+0xae>
	}

	// TX timeout handling
	if(!i2c_tx_int)
 8000a34:	4b1d      	ldr	r3, [pc, #116]	@ (8000aac <monitor_i2c+0xc0>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d112      	bne.n	8000a64 <monitor_i2c+0x78>
	{
		if(HAL_GetTick() - i2c_tx_time >= 20)
 8000a3e:	f003 f955 	bl	8003cec <HAL_GetTick>
 8000a42:	0002      	movs	r2, r0
 8000a44:	4b1a      	ldr	r3, [pc, #104]	@ (8000ab0 <monitor_i2c+0xc4>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	1ad3      	subs	r3, r2, r3
 8000a4a:	2b13      	cmp	r3, #19
 8000a4c:	d907      	bls.n	8000a5e <monitor_i2c+0x72>
		{
			i2c_tx_int = 1;
 8000a4e:	4b17      	ldr	r3, [pc, #92]	@ (8000aac <monitor_i2c+0xc0>)
 8000a50:	2201      	movs	r2, #1
 8000a52:	701a      	strb	r2, [r3, #0]
			return handle_i2c_error(I2C_TX_TIMEOUT);
 8000a54:	2016      	movs	r0, #22
 8000a56:	f000 f941 	bl	8000cdc <handle_i2c_error>
 8000a5a:	0003      	movs	r3, r0
 8000a5c:	e01d      	b.n	8000a9a <monitor_i2c+0xae>
		}
		status = HAL_BUSY;
 8000a5e:	1dfb      	adds	r3, r7, #7
 8000a60:	2202      	movs	r2, #2
 8000a62:	701a      	strb	r2, [r3, #0]
	}

	// RX timeout handling
	if(!i2c_rx_int)
 8000a64:	4b10      	ldr	r3, [pc, #64]	@ (8000aa8 <monitor_i2c+0xbc>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d112      	bne.n	8000a94 <monitor_i2c+0xa8>
	{
		if(HAL_GetTick() - i2c_rx_time >= 20)
 8000a6e:	f003 f93d 	bl	8003cec <HAL_GetTick>
 8000a72:	0002      	movs	r2, r0
 8000a74:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab4 <monitor_i2c+0xc8>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	1ad3      	subs	r3, r2, r3
 8000a7a:	2b13      	cmp	r3, #19
 8000a7c:	d907      	bls.n	8000a8e <monitor_i2c+0xa2>
		{
			i2c_rx_int = 1;
 8000a7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa8 <monitor_i2c+0xbc>)
 8000a80:	2201      	movs	r2, #1
 8000a82:	701a      	strb	r2, [r3, #0]
			return handle_i2c_error(I2C_RX_TIMEOUT);
 8000a84:	2017      	movs	r0, #23
 8000a86:	f000 f929 	bl	8000cdc <handle_i2c_error>
 8000a8a:	0003      	movs	r3, r0
 8000a8c:	e005      	b.n	8000a9a <monitor_i2c+0xae>
		}
		status = HAL_BUSY;
 8000a8e:	1dfb      	adds	r3, r7, #7
 8000a90:	2202      	movs	r2, #2
 8000a92:	701a      	strb	r2, [r3, #0]
	}

	return status;
 8000a94:	1dfb      	adds	r3, r7, #7
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	b25b      	sxtb	r3, r3
}
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	b003      	add	sp, #12
 8000aa0:	bd90      	pop	{r4, r7, pc}
 8000aa2:	46c0      	nop			@ (mov r8, r8)
 8000aa4:	200002e8 	.word	0x200002e8
 8000aa8:	2000000f 	.word	0x2000000f
 8000aac:	2000000e 	.word	0x2000000e
 8000ab0:	200002e0 	.word	0x200002e0
 8000ab4:	200002e4 	.word	0x200002e4

08000ab8 <bno055_write>:

int8_t bno055_write(uint8_t *data, uint8_t len)
{
 8000ab8:	b590      	push	{r4, r7, lr}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	000a      	movs	r2, r1
 8000ac2:	1cfb      	adds	r3, r7, #3
 8000ac4:	701a      	strb	r2, [r3, #0]
	int8_t status = HAL_OK;
 8000ac6:	240f      	movs	r4, #15
 8000ac8:	193b      	adds	r3, r7, r4
 8000aca:	2200      	movs	r2, #0
 8000acc:	701a      	strb	r2, [r3, #0]
	i2c_tx_int = 0;
 8000ace:	4b12      	ldr	r3, [pc, #72]	@ (8000b18 <bno055_write+0x60>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	701a      	strb	r2, [r3, #0]
	i2c_tx_time = HAL_GetTick();
 8000ad4:	f003 f90a 	bl	8003cec <HAL_GetTick>
 8000ad8:	0002      	movs	r2, r0
 8000ada:	4b10      	ldr	r3, [pc, #64]	@ (8000b1c <bno055_write+0x64>)
 8000adc:	601a      	str	r2, [r3, #0]
	status = HAL_I2C_Master_Transmit_DMA(&hi2c1, bno055_address, data, len);
 8000ade:	4b10      	ldr	r3, [pc, #64]	@ (8000b20 <bno055_write+0x68>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	0019      	movs	r1, r3
 8000ae4:	1cfb      	adds	r3, r7, #3
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	b29b      	uxth	r3, r3
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	480d      	ldr	r0, [pc, #52]	@ (8000b24 <bno055_write+0x6c>)
 8000aee:	f004 f987 	bl	8004e00 <HAL_I2C_Master_Transmit_DMA>
 8000af2:	0003      	movs	r3, r0
 8000af4:	001a      	movs	r2, r3
 8000af6:	193b      	adds	r3, r7, r4
 8000af8:	701a      	strb	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(&hdma_i2c1_tx, DMA_IT_HT);
 8000afa:	4b0b      	ldr	r3, [pc, #44]	@ (8000b28 <bno055_write+0x70>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	4b09      	ldr	r3, [pc, #36]	@ (8000b28 <bno055_write+0x70>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2104      	movs	r1, #4
 8000b06:	438a      	bics	r2, r1
 8000b08:	601a      	str	r2, [r3, #0]

	return status;
 8000b0a:	193b      	adds	r3, r7, r4
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	b25b      	sxtb	r3, r3
}
 8000b10:	0018      	movs	r0, r3
 8000b12:	46bd      	mov	sp, r7
 8000b14:	b005      	add	sp, #20
 8000b16:	bd90      	pop	{r4, r7, pc}
 8000b18:	2000000e 	.word	0x2000000e
 8000b1c:	200002e0 	.word	0x200002e0
 8000b20:	200002dd 	.word	0x200002dd
 8000b24:	200002ec 	.word	0x200002ec
 8000b28:	2000039c 	.word	0x2000039c

08000b2c <bno055_read>:

int8_t bno055_read(uint8_t reg, uint8_t *data, uint8_t len)
{
 8000b2c:	b5b0      	push	{r4, r5, r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6039      	str	r1, [r7, #0]
 8000b34:	0011      	movs	r1, r2
 8000b36:	1dfb      	adds	r3, r7, #7
 8000b38:	1c02      	adds	r2, r0, #0
 8000b3a:	701a      	strb	r2, [r3, #0]
 8000b3c:	1dbb      	adds	r3, r7, #6
 8000b3e:	1c0a      	adds	r2, r1, #0
 8000b40:	701a      	strb	r2, [r3, #0]
	int8_t status = HAL_OK;
 8000b42:	240f      	movs	r4, #15
 8000b44:	193b      	adds	r3, r7, r4
 8000b46:	2200      	movs	r2, #0
 8000b48:	701a      	strb	r2, [r3, #0]
	i2c_tx_int = 0;
 8000b4a:	4b2d      	ldr	r3, [pc, #180]	@ (8000c00 <bno055_read+0xd4>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	701a      	strb	r2, [r3, #0]
	i2c_tx_time = HAL_GetTick();
 8000b50:	f003 f8cc 	bl	8003cec <HAL_GetTick>
 8000b54:	0002      	movs	r2, r0
 8000b56:	4b2b      	ldr	r3, [pc, #172]	@ (8000c04 <bno055_read+0xd8>)
 8000b58:	601a      	str	r2, [r3, #0]
	status = HAL_I2C_Master_Transmit_DMA(&hi2c1, bno055_address, &reg, 1);
 8000b5a:	4b2b      	ldr	r3, [pc, #172]	@ (8000c08 <bno055_read+0xdc>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	0019      	movs	r1, r3
 8000b60:	1dfa      	adds	r2, r7, #7
 8000b62:	482a      	ldr	r0, [pc, #168]	@ (8000c0c <bno055_read+0xe0>)
 8000b64:	2301      	movs	r3, #1
 8000b66:	f004 f94b 	bl	8004e00 <HAL_I2C_Master_Transmit_DMA>
 8000b6a:	0003      	movs	r3, r0
 8000b6c:	001a      	movs	r2, r3
 8000b6e:	193b      	adds	r3, r7, r4
 8000b70:	701a      	strb	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(&hdma_i2c1_tx, DMA_IT_HT);
 8000b72:	4b27      	ldr	r3, [pc, #156]	@ (8000c10 <bno055_read+0xe4>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	4b25      	ldr	r3, [pc, #148]	@ (8000c10 <bno055_read+0xe4>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2104      	movs	r1, #4
 8000b7e:	438a      	bics	r2, r1
 8000b80:	601a      	str	r2, [r3, #0]
	if(status != HAL_OK){return status;}
 8000b82:	193b      	adds	r3, r7, r4
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	b25b      	sxtb	r3, r3
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d003      	beq.n	8000b94 <bno055_read+0x68>
 8000b8c:	193b      	adds	r3, r7, r4
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	b25b      	sxtb	r3, r3
 8000b92:	e031      	b.n	8000bf8 <bno055_read+0xcc>
	status = bno055_poll_transaction();
 8000b94:	250f      	movs	r5, #15
 8000b96:	197c      	adds	r4, r7, r5
 8000b98:	f7ff fdcc 	bl	8000734 <bno055_poll_transaction>
 8000b9c:	0003      	movs	r3, r0
 8000b9e:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8000ba0:	002a      	movs	r2, r5
 8000ba2:	18bb      	adds	r3, r7, r2
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	b25b      	sxtb	r3, r3
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d003      	beq.n	8000bb4 <bno055_read+0x88>
 8000bac:	18bb      	adds	r3, r7, r2
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	b25b      	sxtb	r3, r3
 8000bb2:	e021      	b.n	8000bf8 <bno055_read+0xcc>

	i2c_rx_int = 0;
 8000bb4:	4b17      	ldr	r3, [pc, #92]	@ (8000c14 <bno055_read+0xe8>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	701a      	strb	r2, [r3, #0]
	i2c_rx_time = HAL_GetTick();
 8000bba:	f003 f897 	bl	8003cec <HAL_GetTick>
 8000bbe:	0002      	movs	r2, r0
 8000bc0:	4b15      	ldr	r3, [pc, #84]	@ (8000c18 <bno055_read+0xec>)
 8000bc2:	601a      	str	r2, [r3, #0]
	status = HAL_I2C_Master_Receive_DMA(&hi2c1, bno055_address, data, len);
 8000bc4:	4b10      	ldr	r3, [pc, #64]	@ (8000c08 <bno055_read+0xdc>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	0019      	movs	r1, r3
 8000bca:	1dbb      	adds	r3, r7, #6
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	b29b      	uxth	r3, r3
 8000bd0:	683a      	ldr	r2, [r7, #0]
 8000bd2:	480e      	ldr	r0, [pc, #56]	@ (8000c0c <bno055_read+0xe0>)
 8000bd4:	f004 fa3e 	bl	8005054 <HAL_I2C_Master_Receive_DMA>
 8000bd8:	0003      	movs	r3, r0
 8000bda:	001a      	movs	r2, r3
 8000bdc:	200f      	movs	r0, #15
 8000bde:	183b      	adds	r3, r7, r0
 8000be0:	701a      	strb	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(&hdma_i2c1_rx, DMA_IT_HT);
 8000be2:	4b0e      	ldr	r3, [pc, #56]	@ (8000c1c <bno055_read+0xf0>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	4b0c      	ldr	r3, [pc, #48]	@ (8000c1c <bno055_read+0xf0>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2104      	movs	r1, #4
 8000bee:	438a      	bics	r2, r1
 8000bf0:	601a      	str	r2, [r3, #0]

	return status;
 8000bf2:	183b      	adds	r3, r7, r0
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	b25b      	sxtb	r3, r3
}
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	b004      	add	sp, #16
 8000bfe:	bdb0      	pop	{r4, r5, r7, pc}
 8000c00:	2000000e 	.word	0x2000000e
 8000c04:	200002e0 	.word	0x200002e0
 8000c08:	200002dd 	.word	0x200002dd
 8000c0c:	200002ec 	.word	0x200002ec
 8000c10:	2000039c 	.word	0x2000039c
 8000c14:	2000000f 	.word	0x2000000f
 8000c18:	200002e4 	.word	0x200002e4
 8000c1c:	20000340 	.word	0x20000340

08000c20 <i2c_reset>:

int8_t i2c_reset()
{
 8000c20:	b590      	push	{r4, r7, lr}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
	int8_t status = HAL_OK;
 8000c26:	1dfb      	adds	r3, r7, #7
 8000c28:	2200      	movs	r2, #0
 8000c2a:	701a      	strb	r2, [r3, #0]
	status = bno055_poll_transaction();
 8000c2c:	1dfc      	adds	r4, r7, #7
 8000c2e:	f7ff fd81 	bl	8000734 <bno055_poll_transaction>
 8000c32:	0003      	movs	r3, r0
 8000c34:	7023      	strb	r3, [r4, #0]
	status |= HAL_I2C_DeInit(&hi2c1);
 8000c36:	4b26      	ldr	r3, [pc, #152]	@ (8000cd0 <i2c_reset+0xb0>)
 8000c38:	0018      	movs	r0, r3
 8000c3a:	f004 f8b1 	bl	8004da0 <HAL_I2C_DeInit>
 8000c3e:	0003      	movs	r3, r0
 8000c40:	b259      	sxtb	r1, r3
 8000c42:	1dfb      	adds	r3, r7, #7
 8000c44:	1dfa      	adds	r2, r7, #7
 8000c46:	7812      	ldrb	r2, [r2, #0]
 8000c48:	430a      	orrs	r2, r1
 8000c4a:	701a      	strb	r2, [r3, #0]
	__I2C1_FORCE_RESET();
 8000c4c:	4b21      	ldr	r3, [pc, #132]	@ (8000cd4 <i2c_reset+0xb4>)
 8000c4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c50:	4b20      	ldr	r3, [pc, #128]	@ (8000cd4 <i2c_reset+0xb4>)
 8000c52:	2180      	movs	r1, #128	@ 0x80
 8000c54:	0389      	lsls	r1, r1, #14
 8000c56:	430a      	orrs	r2, r1
 8000c58:	62da      	str	r2, [r3, #44]	@ 0x2c
	HAL_Delay(100);
 8000c5a:	2064      	movs	r0, #100	@ 0x64
 8000c5c:	f003 f850 	bl	8003d00 <HAL_Delay>
	__I2C1_RELEASE_RESET();
 8000c60:	4b1c      	ldr	r3, [pc, #112]	@ (8000cd4 <i2c_reset+0xb4>)
 8000c62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c64:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd4 <i2c_reset+0xb4>)
 8000c66:	491c      	ldr	r1, [pc, #112]	@ (8000cd8 <i2c_reset+0xb8>)
 8000c68:	400a      	ands	r2, r1
 8000c6a:	62da      	str	r2, [r3, #44]	@ 0x2c
	status = HAL_I2C_Init(&hi2c1);
 8000c6c:	4b18      	ldr	r3, [pc, #96]	@ (8000cd0 <i2c_reset+0xb0>)
 8000c6e:	0018      	movs	r0, r3
 8000c70:	f003 fff0 	bl	8004c54 <HAL_I2C_Init>
 8000c74:	0003      	movs	r3, r0
 8000c76:	001a      	movs	r2, r3
 8000c78:	1dfb      	adds	r3, r7, #7
 8000c7a:	701a      	strb	r2, [r3, #0]
	status |= HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE);
 8000c7c:	4b14      	ldr	r3, [pc, #80]	@ (8000cd0 <i2c_reset+0xb0>)
 8000c7e:	2100      	movs	r1, #0
 8000c80:	0018      	movs	r0, r3
 8000c82:	f006 f91b 	bl	8006ebc <HAL_I2CEx_ConfigAnalogFilter>
 8000c86:	0003      	movs	r3, r0
 8000c88:	b259      	sxtb	r1, r3
 8000c8a:	1dfb      	adds	r3, r7, #7
 8000c8c:	1dfa      	adds	r2, r7, #7
 8000c8e:	7812      	ldrb	r2, [r2, #0]
 8000c90:	430a      	orrs	r2, r1
 8000c92:	701a      	strb	r2, [r3, #0]
	status |= HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0);
 8000c94:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd0 <i2c_reset+0xb0>)
 8000c96:	2100      	movs	r1, #0
 8000c98:	0018      	movs	r0, r3
 8000c9a:	f006 f95b 	bl	8006f54 <HAL_I2CEx_ConfigDigitalFilter>
 8000c9e:	0003      	movs	r3, r0
 8000ca0:	b259      	sxtb	r1, r3
 8000ca2:	1dfb      	adds	r3, r7, #7
 8000ca4:	1dfa      	adds	r2, r7, #7
 8000ca6:	7812      	ldrb	r2, [r2, #0]
 8000ca8:	430a      	orrs	r2, r1
 8000caa:	701a      	strb	r2, [r3, #0]
	if(status != HAL_OK)
 8000cac:	1dfb      	adds	r3, r7, #7
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	b25b      	sxtb	r3, r3
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d004      	beq.n	8000cc0 <i2c_reset+0xa0>
	{
		return handle_i2c_error(I2C_FATAL_ERROR);
 8000cb6:	2019      	movs	r0, #25
 8000cb8:	f000 f810 	bl	8000cdc <handle_i2c_error>
 8000cbc:	0003      	movs	r3, r0
 8000cbe:	e002      	b.n	8000cc6 <i2c_reset+0xa6>
	}
	return status;
 8000cc0:	1dfb      	adds	r3, r7, #7
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	b25b      	sxtb	r3, r3
}
 8000cc6:	0018      	movs	r0, r3
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	b003      	add	sp, #12
 8000ccc:	bd90      	pop	{r4, r7, pc}
 8000cce:	46c0      	nop			@ (mov r8, r8)
 8000cd0:	200002ec 	.word	0x200002ec
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	ffdfffff 	.word	0xffdfffff

08000cdc <handle_i2c_error>:

int8_t handle_i2c_error(int8_t error_code)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	0002      	movs	r2, r0
 8000ce4:	1dfb      	adds	r3, r7, #7
 8000ce6:	701a      	strb	r2, [r3, #0]
	holding_register_database[I2C_ERRORS] |= 1U << (error_code - I2C_TX_TIMEOUT);
 8000ce8:	4b0a      	ldr	r3, [pc, #40]	@ (8000d14 <handle_i2c_error+0x38>)
 8000cea:	895a      	ldrh	r2, [r3, #10]
 8000cec:	1dfb      	adds	r3, r7, #7
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	b25b      	sxtb	r3, r3
 8000cf2:	3b16      	subs	r3, #22
 8000cf4:	2101      	movs	r1, #1
 8000cf6:	4099      	lsls	r1, r3
 8000cf8:	000b      	movs	r3, r1
 8000cfa:	b29b      	uxth	r3, r3
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	b29a      	uxth	r2, r3
 8000d00:	4b04      	ldr	r3, [pc, #16]	@ (8000d14 <handle_i2c_error+0x38>)
 8000d02:	815a      	strh	r2, [r3, #10]
	return error_code;
 8000d04:	1dfb      	adds	r3, r7, #7
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	b25b      	sxtb	r3, r3
}
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	b002      	add	sp, #8
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	46c0      	nop			@ (mov r8, r8)
 8000d14:	20000010 	.word	0x20000010

08000d18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	0002      	movs	r2, r0
 8000d20:	1dfb      	adds	r3, r7, #7
 8000d22:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d24:	1dfb      	adds	r3, r7, #7
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	2b7f      	cmp	r3, #127	@ 0x7f
 8000d2a:	d809      	bhi.n	8000d40 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d2c:	1dfb      	adds	r3, r7, #7
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	001a      	movs	r2, r3
 8000d32:	231f      	movs	r3, #31
 8000d34:	401a      	ands	r2, r3
 8000d36:	4b04      	ldr	r3, [pc, #16]	@ (8000d48 <__NVIC_EnableIRQ+0x30>)
 8000d38:	2101      	movs	r1, #1
 8000d3a:	4091      	lsls	r1, r2
 8000d3c:	000a      	movs	r2, r1
 8000d3e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000d40:	46c0      	nop			@ (mov r8, r8)
 8000d42:	46bd      	mov	sp, r7
 8000d44:	b002      	add	sp, #8
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	e000e100 	.word	0xe000e100

08000d4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d4c:	b590      	push	{r4, r7, lr}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	0002      	movs	r2, r0
 8000d54:	6039      	str	r1, [r7, #0]
 8000d56:	1dfb      	adds	r3, r7, #7
 8000d58:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d5a:	1dfb      	adds	r3, r7, #7
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000d60:	d828      	bhi.n	8000db4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d62:	4a2f      	ldr	r2, [pc, #188]	@ (8000e20 <__NVIC_SetPriority+0xd4>)
 8000d64:	1dfb      	adds	r3, r7, #7
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	b25b      	sxtb	r3, r3
 8000d6a:	089b      	lsrs	r3, r3, #2
 8000d6c:	33c0      	adds	r3, #192	@ 0xc0
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	589b      	ldr	r3, [r3, r2]
 8000d72:	1dfa      	adds	r2, r7, #7
 8000d74:	7812      	ldrb	r2, [r2, #0]
 8000d76:	0011      	movs	r1, r2
 8000d78:	2203      	movs	r2, #3
 8000d7a:	400a      	ands	r2, r1
 8000d7c:	00d2      	lsls	r2, r2, #3
 8000d7e:	21ff      	movs	r1, #255	@ 0xff
 8000d80:	4091      	lsls	r1, r2
 8000d82:	000a      	movs	r2, r1
 8000d84:	43d2      	mvns	r2, r2
 8000d86:	401a      	ands	r2, r3
 8000d88:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	019b      	lsls	r3, r3, #6
 8000d8e:	22ff      	movs	r2, #255	@ 0xff
 8000d90:	401a      	ands	r2, r3
 8000d92:	1dfb      	adds	r3, r7, #7
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	0018      	movs	r0, r3
 8000d98:	2303      	movs	r3, #3
 8000d9a:	4003      	ands	r3, r0
 8000d9c:	00db      	lsls	r3, r3, #3
 8000d9e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000da0:	481f      	ldr	r0, [pc, #124]	@ (8000e20 <__NVIC_SetPriority+0xd4>)
 8000da2:	1dfb      	adds	r3, r7, #7
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	b25b      	sxtb	r3, r3
 8000da8:	089b      	lsrs	r3, r3, #2
 8000daa:	430a      	orrs	r2, r1
 8000dac:	33c0      	adds	r3, #192	@ 0xc0
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000db2:	e031      	b.n	8000e18 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000db4:	4a1b      	ldr	r2, [pc, #108]	@ (8000e24 <__NVIC_SetPriority+0xd8>)
 8000db6:	1dfb      	adds	r3, r7, #7
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	0019      	movs	r1, r3
 8000dbc:	230f      	movs	r3, #15
 8000dbe:	400b      	ands	r3, r1
 8000dc0:	3b08      	subs	r3, #8
 8000dc2:	089b      	lsrs	r3, r3, #2
 8000dc4:	3306      	adds	r3, #6
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	18d3      	adds	r3, r2, r3
 8000dca:	3304      	adds	r3, #4
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	1dfa      	adds	r2, r7, #7
 8000dd0:	7812      	ldrb	r2, [r2, #0]
 8000dd2:	0011      	movs	r1, r2
 8000dd4:	2203      	movs	r2, #3
 8000dd6:	400a      	ands	r2, r1
 8000dd8:	00d2      	lsls	r2, r2, #3
 8000dda:	21ff      	movs	r1, #255	@ 0xff
 8000ddc:	4091      	lsls	r1, r2
 8000dde:	000a      	movs	r2, r1
 8000de0:	43d2      	mvns	r2, r2
 8000de2:	401a      	ands	r2, r3
 8000de4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	019b      	lsls	r3, r3, #6
 8000dea:	22ff      	movs	r2, #255	@ 0xff
 8000dec:	401a      	ands	r2, r3
 8000dee:	1dfb      	adds	r3, r7, #7
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	0018      	movs	r0, r3
 8000df4:	2303      	movs	r3, #3
 8000df6:	4003      	ands	r3, r0
 8000df8:	00db      	lsls	r3, r3, #3
 8000dfa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dfc:	4809      	ldr	r0, [pc, #36]	@ (8000e24 <__NVIC_SetPriority+0xd8>)
 8000dfe:	1dfb      	adds	r3, r7, #7
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	001c      	movs	r4, r3
 8000e04:	230f      	movs	r3, #15
 8000e06:	4023      	ands	r3, r4
 8000e08:	3b08      	subs	r3, #8
 8000e0a:	089b      	lsrs	r3, r3, #2
 8000e0c:	430a      	orrs	r2, r1
 8000e0e:	3306      	adds	r3, #6
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	18c3      	adds	r3, r0, r3
 8000e14:	3304      	adds	r3, #4
 8000e16:	601a      	str	r2, [r3, #0]
}
 8000e18:	46c0      	nop			@ (mov r8, r8)
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	b003      	add	sp, #12
 8000e1e:	bd90      	pop	{r4, r7, pc}
 8000e20:	e000e100 	.word	0xe000e100
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <LL_ADC_DMA_GetRegAddr>:
  * @param  Register This parameter can be one of the following values:
  *         @arg @ref LL_ADC_DMA_REG_REGULAR_DATA
  * @retval ADC register address
  */
__STATIC_INLINE uint32_t LL_ADC_DMA_GetRegAddr(ADC_TypeDef *ADCx, uint32_t Register)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(Register);

  /* Retrieve address of register DR */
  return (uint32_t) &(ADCx->DR);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	3340      	adds	r3, #64	@ 0x40
}
 8000e36:	0018      	movs	r0, r3
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	b002      	add	sp, #8
 8000e3c:	bd80      	pop	{r7, pc}
	...

08000e40 <LL_ADC_SetTriggerFrequencyMode>:
  *         @arg @ref LL_ADC_TRIGGER_FREQ_HIGH
  *         @arg @ref LL_ADC_TRIGGER_FREQ_LOW
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetTriggerFrequencyMode(ADC_TypeDef *ADCx, uint32_t TriggerFrequencyMode)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_LFTRIG, TriggerFrequencyMode);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	691b      	ldr	r3, [r3, #16]
 8000e4e:	4a05      	ldr	r2, [pc, #20]	@ (8000e64 <LL_ADC_SetTriggerFrequencyMode+0x24>)
 8000e50:	401a      	ands	r2, r3
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	431a      	orrs	r2, r3
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	611a      	str	r2, [r3, #16]
}
 8000e5a:	46c0      	nop			@ (mov r8, r8)
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	b002      	add	sp, #8
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	46c0      	nop			@ (mov r8, r8)
 8000e64:	dfffffff 	.word	0xdfffffff

08000e68 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	695b      	ldr	r3, [r3, #20]
 8000e78:	68ba      	ldr	r2, [r7, #8]
 8000e7a:	2104      	movs	r1, #4
 8000e7c:	400a      	ands	r2, r1
 8000e7e:	2107      	movs	r1, #7
 8000e80:	4091      	lsls	r1, r2
 8000e82:	000a      	movs	r2, r1
 8000e84:	43d2      	mvns	r2, r2
 8000e86:	401a      	ands	r2, r3
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	2104      	movs	r1, #4
 8000e8c:	400b      	ands	r3, r1
 8000e8e:	6879      	ldr	r1, [r7, #4]
 8000e90:	4099      	lsls	r1, r3
 8000e92:	000b      	movs	r3, r1
 8000e94:	431a      	orrs	r2, r3
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000e9a:	46c0      	nop			@ (mov r8, r8)
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	b004      	add	sp, #16
 8000ea0:	bd80      	pop	{r7, pc}
	...

08000ea4 <LL_ADC_REG_SetSequencerConfigurable>:
  *         @arg @ref LL_ADC_REG_SEQ_FIXED
  *         @arg @ref LL_ADC_REG_SEQ_CONFIGURABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerConfigurable(ADC_TypeDef *ADCx, uint32_t Configurability)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_CHSELRMOD, Configurability);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	68db      	ldr	r3, [r3, #12]
 8000eb2:	4a05      	ldr	r2, [pc, #20]	@ (8000ec8 <LL_ADC_REG_SetSequencerConfigurable+0x24>)
 8000eb4:	401a      	ands	r2, r3
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	431a      	orrs	r2, r3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	60da      	str	r2, [r3, #12]
}
 8000ebe:	46c0      	nop			@ (mov r8, r8)
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	b002      	add	sp, #8
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	46c0      	nop			@ (mov r8, r8)
 8000ec8:	ffdfffff 	.word	0xffdfffff

08000ecc <LL_ADC_REG_SetSequencerScanDirection>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_FORWARD
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_BACKWARD
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerScanDirection(ADC_TypeDef *ADCx, uint32_t ScanDirection)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	68db      	ldr	r3, [r3, #12]
 8000eda:	2204      	movs	r2, #4
 8000edc:	4393      	bics	r3, r2
 8000ede:	001a      	movs	r2, r3
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	431a      	orrs	r2, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	60da      	str	r2, [r3, #12]
}
 8000ee8:	46c0      	nop			@ (mov r8, r8)
 8000eea:	46bd      	mov	sp, r7
 8000eec:	b002      	add	sp, #8
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	025b      	lsls	r3, r3, #9
 8000f02:	0a5b      	lsrs	r3, r3, #9
 8000f04:	431a      	orrs	r2, r3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000f0a:	46c0      	nop			@ (mov r8, r8)
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	b002      	add	sp, #8
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <LL_ADC_SetOverSamplingScope>:
  *         @arg @ref LL_ADC_OVS_DISABLE
  *         @arg @ref LL_ADC_OVS_GRP_REGULAR_CONTINUED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b082      	sub	sp, #8
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
 8000f1a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_OVSE, OvsScope);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	691b      	ldr	r3, [r3, #16]
 8000f20:	2201      	movs	r2, #1
 8000f22:	4393      	bics	r3, r2
 8000f24:	001a      	movs	r2, r3
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	431a      	orrs	r2, r3
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	611a      	str	r2, [r3, #16]
}
 8000f2e:	46c0      	nop			@ (mov r8, r8)
 8000f30:	46bd      	mov	sp, r7
 8000f32:	b002      	add	sp, #8
 8000f34:	bd80      	pop	{r7, pc}
	...

08000f38 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	4a05      	ldr	r2, [pc, #20]	@ (8000f5c <LL_ADC_EnableInternalRegulator+0x24>)
 8000f46:	4013      	ands	r3, r2
 8000f48:	2280      	movs	r2, #128	@ 0x80
 8000f4a:	0552      	lsls	r2, r2, #21
 8000f4c:	431a      	orrs	r2, r3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000f52:	46c0      	nop			@ (mov r8, r8)
 8000f54:	46bd      	mov	sp, r7
 8000f56:	b002      	add	sp, #8
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	46c0      	nop			@ (mov r8, r8)
 8000f5c:	6fffffe8 	.word	0x6fffffe8

08000f60 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	4013      	ands	r3, r2
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d101      	bne.n	8000f78 <LL_ADC_IsEnabled+0x18>
 8000f74:	2301      	movs	r3, #1
 8000f76:	e000      	b.n	8000f7a <LL_ADC_IsEnabled+0x1a>
 8000f78:	2300      	movs	r3, #0
}
 8000f7a:	0018      	movs	r0, r3
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	b002      	add	sp, #8
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b082      	sub	sp, #8
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	2202      	movs	r2, #2
 8000f90:	4013      	ands	r3, r2
 8000f92:	2b02      	cmp	r3, #2
 8000f94:	d101      	bne.n	8000f9a <LL_ADC_IsDisableOngoing+0x18>
 8000f96:	2301      	movs	r3, #1
 8000f98:	e000      	b.n	8000f9c <LL_ADC_IsDisableOngoing+0x1a>
 8000f9a:	2300      	movs	r3, #0
}
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	b002      	add	sp, #8
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	4a04      	ldr	r2, [pc, #16]	@ (8000fc4 <LL_ADC_REG_StartConversion+0x20>)
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	2204      	movs	r2, #4
 8000fb6:	431a      	orrs	r2, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000fbc:	46c0      	nop			@ (mov r8, r8)
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	b002      	add	sp, #8
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	7fffffe8 	.word	0x7fffffe8

08000fc8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	2204      	movs	r2, #4
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	2b04      	cmp	r3, #4
 8000fda:	d101      	bne.n	8000fe0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e000      	b.n	8000fe2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	b002      	add	sp, #8
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <LL_ADC_IsActiveFlag_CCRDY>:
  * @rmtoll ISR      CCRDY          LL_ADC_IsActiveFlag_CCRDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_CCRDY(ADC_TypeDef *ADCx)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b082      	sub	sp, #8
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_CCRDY) == (LL_ADC_FLAG_CCRDY)) ? 1UL : 0UL);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	2380      	movs	r3, #128	@ 0x80
 8000ff8:	019b      	lsls	r3, r3, #6
 8000ffa:	401a      	ands	r2, r3
 8000ffc:	2380      	movs	r3, #128	@ 0x80
 8000ffe:	019b      	lsls	r3, r3, #6
 8001000:	429a      	cmp	r2, r3
 8001002:	d101      	bne.n	8001008 <LL_ADC_IsActiveFlag_CCRDY+0x1e>
 8001004:	2301      	movs	r3, #1
 8001006:	e000      	b.n	800100a <LL_ADC_IsActiveFlag_CCRDY+0x20>
 8001008:	2300      	movs	r3, #0
}
 800100a:	0018      	movs	r0, r3
 800100c:	46bd      	mov	sp, r7
 800100e:	b002      	add	sp, #8
 8001010:	bd80      	pop	{r7, pc}

08001012 <LL_ADC_ClearFlag_CCRDY>:
  * @rmtoll ISR      CCRDY          LL_ADC_ClearFlag_CCRDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE void LL_ADC_ClearFlag_CCRDY(ADC_TypeDef *ADCx)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b082      	sub	sp, #8
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_CCRDY);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2280      	movs	r2, #128	@ 0x80
 800101e:	0192      	lsls	r2, r2, #6
 8001020:	601a      	str	r2, [r3, #0]
}
 8001022:	46c0      	nop			@ (mov r8, r8)
 8001024:	46bd      	mov	sp, r7
 8001026:	b002      	add	sp, #8
 8001028:	bd80      	pop	{r7, pc}

0800102a <LL_ADC_EnableIT_OVR>:
  * @rmtoll IER      OVRIE          LL_ADC_EnableIT_OVR
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_OVR(ADC_TypeDef *ADCx)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b082      	sub	sp, #8
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_OVR);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	2210      	movs	r2, #16
 8001038:	431a      	orrs	r2, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	605a      	str	r2, [r3, #4]
}
 800103e:	46c0      	nop			@ (mov r8, r8)
 8001040:	46bd      	mov	sp, r7
 8001042:	b002      	add	sp, #8
 8001044:	bd80      	pop	{r7, pc}

08001046 <LL_ADC_DisableIT_EOC>:
  * @rmtoll IER      EOCIE          LL_ADC_DisableIT_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b082      	sub	sp, #8
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	2204      	movs	r2, #4
 8001054:	4393      	bics	r3, r2
 8001056:	001a      	movs	r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	605a      	str	r2, [r3, #4]
}
 800105c:	46c0      	nop			@ (mov r8, r8)
 800105e:	46bd      	mov	sp, r7
 8001060:	b002      	add	sp, #8
 8001062:	bd80      	pop	{r7, pc}

08001064 <LL_ADC_DisableIT_EOS>:
  * @rmtoll IER      EOSIE          LL_ADC_DisableIT_EOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	2208      	movs	r2, #8
 8001072:	4393      	bics	r3, r2
 8001074:	001a      	movs	r2, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	605a      	str	r2, [r3, #4]
}
 800107a:	46c0      	nop			@ (mov r8, r8)
 800107c:	46bd      	mov	sp, r7
 800107e:	b002      	add	sp, #8
 8001080:	bd80      	pop	{r7, pc}
	...

08001084 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_TIM17
  *         @arg @ref LL_APB1_GRP2_PERIPH_ADC
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR2, Periphs);
 800108c:	4b07      	ldr	r3, [pc, #28]	@ (80010ac <LL_APB1_GRP2_EnableClock+0x28>)
 800108e:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8001090:	4b06      	ldr	r3, [pc, #24]	@ (80010ac <LL_APB1_GRP2_EnableClock+0x28>)
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	430a      	orrs	r2, r1
 8001096:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 8001098:	4b04      	ldr	r3, [pc, #16]	@ (80010ac <LL_APB1_GRP2_EnableClock+0x28>)
 800109a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800109c:	687a      	ldr	r2, [r7, #4]
 800109e:	4013      	ands	r3, r2
 80010a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010a2:	68fb      	ldr	r3, [r7, #12]
}
 80010a4:	46c0      	nop			@ (mov r8, r8)
 80010a6:	46bd      	mov	sp, r7
 80010a8:	b004      	add	sp, #16
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	40021000 	.word	0x40021000

080010b0 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOD
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 80010b8:	4b07      	ldr	r3, [pc, #28]	@ (80010d8 <LL_IOP_GRP1_EnableClock+0x28>)
 80010ba:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80010bc:	4b06      	ldr	r3, [pc, #24]	@ (80010d8 <LL_IOP_GRP1_EnableClock+0x28>)
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	430a      	orrs	r2, r1
 80010c2:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80010c4:	4b04      	ldr	r3, [pc, #16]	@ (80010d8 <LL_IOP_GRP1_EnableClock+0x28>)
 80010c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	4013      	ands	r3, r2
 80010cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010ce:	68fb      	ldr	r3, [r7, #12]
}
 80010d0:	46c0      	nop			@ (mov r8, r8)
 80010d2:	46bd      	mov	sp, r7
 80010d4:	b004      	add	sp, #16
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40021000 	.word	0x40021000

080010dc <LL_SYSTICK_IsActiveCounterFlag>:
  * @note   It can be used in timeout function on application side.
  * @rmtoll STK_CTRL     COUNTFLAG     LL_SYSTICK_IsActiveCounterFlag
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  return (((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk)) ? 1UL : 0UL);
 80010e0:	4b07      	ldr	r3, [pc, #28]	@ (8001100 <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	2380      	movs	r3, #128	@ 0x80
 80010e6:	025b      	lsls	r3, r3, #9
 80010e8:	401a      	ands	r2, r3
 80010ea:	2380      	movs	r3, #128	@ 0x80
 80010ec:	025b      	lsls	r3, r3, #9
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d101      	bne.n	80010f6 <LL_SYSTICK_IsActiveCounterFlag+0x1a>
 80010f2:	2301      	movs	r3, #1
 80010f4:	e000      	b.n	80010f8 <LL_SYSTICK_IsActiveCounterFlag+0x1c>
 80010f6:	2300      	movs	r3, #0
}
 80010f8:	0018      	movs	r0, r3
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	46c0      	nop			@ (mov r8, r8)
 8001100:	e000e010 	.word	0xe000e010

08001104 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_5 (*)
  * @note (*) Availability depends on devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_EN);
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	3b01      	subs	r3, #1
 8001116:	4a0a      	ldr	r2, [pc, #40]	@ (8001140 <LL_DMA_EnableChannel+0x3c>)
 8001118:	5cd3      	ldrb	r3, [r2, r3]
 800111a:	001a      	movs	r2, r3
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	18d3      	adds	r3, r2, r3
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	3b01      	subs	r3, #1
 8001126:	4906      	ldr	r1, [pc, #24]	@ (8001140 <LL_DMA_EnableChannel+0x3c>)
 8001128:	5ccb      	ldrb	r3, [r1, r3]
 800112a:	0019      	movs	r1, r3
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	18cb      	adds	r3, r1, r3
 8001130:	2101      	movs	r1, #1
 8001132:	430a      	orrs	r2, r1
 8001134:	601a      	str	r2, [r3, #0]
}
 8001136:	46c0      	nop			@ (mov r8, r8)
 8001138:	46bd      	mov	sp, r7
 800113a:	b004      	add	sp, #16
 800113c:	bd80      	pop	{r7, pc}
 800113e:	46c0      	nop			@ (mov r8, r8)
 8001140:	0800a9f4 	.word	0x0800a9f4

08001144 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR,
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	3b01      	subs	r3, #1
 8001158:	4a0b      	ldr	r2, [pc, #44]	@ (8001188 <LL_DMA_SetDataTransferDirection+0x44>)
 800115a:	5cd3      	ldrb	r3, [r2, r3]
 800115c:	001a      	movs	r2, r3
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	18d3      	adds	r3, r2, r3
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a09      	ldr	r2, [pc, #36]	@ (800118c <LL_DMA_SetDataTransferDirection+0x48>)
 8001166:	4013      	ands	r3, r2
 8001168:	0019      	movs	r1, r3
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	3b01      	subs	r3, #1
 800116e:	4a06      	ldr	r2, [pc, #24]	@ (8001188 <LL_DMA_SetDataTransferDirection+0x44>)
 8001170:	5cd3      	ldrb	r3, [r2, r3]
 8001172:	001a      	movs	r2, r3
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	18d3      	adds	r3, r2, r3
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	430a      	orrs	r2, r1
 800117c:	601a      	str	r2, [r3, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 800117e:	46c0      	nop			@ (mov r8, r8)
 8001180:	46bd      	mov	sp, r7
 8001182:	b006      	add	sp, #24
 8001184:	bd80      	pop	{r7, pc}
 8001186:	46c0      	nop			@ (mov r8, r8)
 8001188:	0800a9f4 	.word	0x0800a9f4
 800118c:	ffffbfef 	.word	0xffffbfef

08001190 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_CIRC,
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	4a0b      	ldr	r2, [pc, #44]	@ (80011d4 <LL_DMA_SetMode+0x44>)
 80011a6:	5cd3      	ldrb	r3, [r2, r3]
 80011a8:	001a      	movs	r2, r3
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	18d3      	adds	r3, r2, r3
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2220      	movs	r2, #32
 80011b2:	4393      	bics	r3, r2
 80011b4:	0019      	movs	r1, r3
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	3b01      	subs	r3, #1
 80011ba:	4a06      	ldr	r2, [pc, #24]	@ (80011d4 <LL_DMA_SetMode+0x44>)
 80011bc:	5cd3      	ldrb	r3, [r2, r3]
 80011be:	001a      	movs	r2, r3
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	18d3      	adds	r3, r2, r3
 80011c4:	687a      	ldr	r2, [r7, #4]
 80011c6:	430a      	orrs	r2, r1
 80011c8:	601a      	str	r2, [r3, #0]
             Mode);
}
 80011ca:	46c0      	nop			@ (mov r8, r8)
 80011cc:	46bd      	mov	sp, r7
 80011ce:	b006      	add	sp, #24
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	46c0      	nop			@ (mov r8, r8)
 80011d4:	0800a9f4 	.word	0x0800a9f4

080011d8 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_PINC,
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	3b01      	subs	r3, #1
 80011ec:	4a0b      	ldr	r2, [pc, #44]	@ (800121c <LL_DMA_SetPeriphIncMode+0x44>)
 80011ee:	5cd3      	ldrb	r3, [r2, r3]
 80011f0:	001a      	movs	r2, r3
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	18d3      	adds	r3, r2, r3
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2240      	movs	r2, #64	@ 0x40
 80011fa:	4393      	bics	r3, r2
 80011fc:	0019      	movs	r1, r3
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	3b01      	subs	r3, #1
 8001202:	4a06      	ldr	r2, [pc, #24]	@ (800121c <LL_DMA_SetPeriphIncMode+0x44>)
 8001204:	5cd3      	ldrb	r3, [r2, r3]
 8001206:	001a      	movs	r2, r3
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	18d3      	adds	r3, r2, r3
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	430a      	orrs	r2, r1
 8001210:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcIncMode);
}
 8001212:	46c0      	nop			@ (mov r8, r8)
 8001214:	46bd      	mov	sp, r7
 8001216:	b006      	add	sp, #24
 8001218:	bd80      	pop	{r7, pc}
 800121a:	46c0      	nop			@ (mov r8, r8)
 800121c:	0800a9f4 	.word	0x0800a9f4

08001220 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_MINC,
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	3b01      	subs	r3, #1
 8001234:	4a0b      	ldr	r2, [pc, #44]	@ (8001264 <LL_DMA_SetMemoryIncMode+0x44>)
 8001236:	5cd3      	ldrb	r3, [r2, r3]
 8001238:	001a      	movs	r2, r3
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	18d3      	adds	r3, r2, r3
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2280      	movs	r2, #128	@ 0x80
 8001242:	4393      	bics	r3, r2
 8001244:	0019      	movs	r1, r3
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	3b01      	subs	r3, #1
 800124a:	4a06      	ldr	r2, [pc, #24]	@ (8001264 <LL_DMA_SetMemoryIncMode+0x44>)
 800124c:	5cd3      	ldrb	r3, [r2, r3]
 800124e:	001a      	movs	r2, r3
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	18d3      	adds	r3, r2, r3
 8001254:	687a      	ldr	r2, [r7, #4]
 8001256:	430a      	orrs	r2, r1
 8001258:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstIncMode);
}
 800125a:	46c0      	nop			@ (mov r8, r8)
 800125c:	46bd      	mov	sp, r7
 800125e:	b006      	add	sp, #24
 8001260:	bd80      	pop	{r7, pc}
 8001262:	46c0      	nop			@ (mov r8, r8)
 8001264:	0800a9f4 	.word	0x0800a9f4

08001268 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_PSIZE,
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	3b01      	subs	r3, #1
 800127c:	4a0b      	ldr	r2, [pc, #44]	@ (80012ac <LL_DMA_SetPeriphSize+0x44>)
 800127e:	5cd3      	ldrb	r3, [r2, r3]
 8001280:	001a      	movs	r2, r3
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	18d3      	adds	r3, r2, r3
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a09      	ldr	r2, [pc, #36]	@ (80012b0 <LL_DMA_SetPeriphSize+0x48>)
 800128a:	4013      	ands	r3, r2
 800128c:	0019      	movs	r1, r3
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	3b01      	subs	r3, #1
 8001292:	4a06      	ldr	r2, [pc, #24]	@ (80012ac <LL_DMA_SetPeriphSize+0x44>)
 8001294:	5cd3      	ldrb	r3, [r2, r3]
 8001296:	001a      	movs	r2, r3
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	18d3      	adds	r3, r2, r3
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	430a      	orrs	r2, r1
 80012a0:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcDataSize);
}
 80012a2:	46c0      	nop			@ (mov r8, r8)
 80012a4:	46bd      	mov	sp, r7
 80012a6:	b006      	add	sp, #24
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	46c0      	nop			@ (mov r8, r8)
 80012ac:	0800a9f4 	.word	0x0800a9f4
 80012b0:	fffffcff 	.word	0xfffffcff

080012b4 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_MSIZE,
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	3b01      	subs	r3, #1
 80012c8:	4a0b      	ldr	r2, [pc, #44]	@ (80012f8 <LL_DMA_SetMemorySize+0x44>)
 80012ca:	5cd3      	ldrb	r3, [r2, r3]
 80012cc:	001a      	movs	r2, r3
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	18d3      	adds	r3, r2, r3
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a09      	ldr	r2, [pc, #36]	@ (80012fc <LL_DMA_SetMemorySize+0x48>)
 80012d6:	4013      	ands	r3, r2
 80012d8:	0019      	movs	r1, r3
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	3b01      	subs	r3, #1
 80012de:	4a06      	ldr	r2, [pc, #24]	@ (80012f8 <LL_DMA_SetMemorySize+0x44>)
 80012e0:	5cd3      	ldrb	r3, [r2, r3]
 80012e2:	001a      	movs	r2, r3
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	18d3      	adds	r3, r2, r3
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	430a      	orrs	r2, r1
 80012ec:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstDataSize);
}
 80012ee:	46c0      	nop			@ (mov r8, r8)
 80012f0:	46bd      	mov	sp, r7
 80012f2:	b006      	add	sp, #24
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	46c0      	nop			@ (mov r8, r8)
 80012f8:	0800a9f4 	.word	0x0800a9f4
 80012fc:	fffff3ff 	.word	0xfffff3ff

08001300 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_PL,
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	3b01      	subs	r3, #1
 8001314:	4a0b      	ldr	r2, [pc, #44]	@ (8001344 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8001316:	5cd3      	ldrb	r3, [r2, r3]
 8001318:	001a      	movs	r2, r3
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	18d3      	adds	r3, r2, r3
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a09      	ldr	r2, [pc, #36]	@ (8001348 <LL_DMA_SetChannelPriorityLevel+0x48>)
 8001322:	4013      	ands	r3, r2
 8001324:	0019      	movs	r1, r3
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	3b01      	subs	r3, #1
 800132a:	4a06      	ldr	r2, [pc, #24]	@ (8001344 <LL_DMA_SetChannelPriorityLevel+0x44>)
 800132c:	5cd3      	ldrb	r3, [r2, r3]
 800132e:	001a      	movs	r2, r3
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	18d3      	adds	r3, r2, r3
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	430a      	orrs	r2, r1
 8001338:	601a      	str	r2, [r3, #0]
             Priority);
}
 800133a:	46c0      	nop			@ (mov r8, r8)
 800133c:	46bd      	mov	sp, r7
 800133e:	b006      	add	sp, #24
 8001340:	bd80      	pop	{r7, pc}
 8001342:	46c0      	nop			@ (mov r8, r8)
 8001344:	0800a9f4 	.word	0x0800a9f4
 8001348:	ffffcfff 	.word	0xffffcfff

0800134c <LL_DMA_SetDataLength>:
  * @note (*) Availability depends on devices
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CNDTR,
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	3b01      	subs	r3, #1
 8001360:	4a0a      	ldr	r2, [pc, #40]	@ (800138c <LL_DMA_SetDataLength+0x40>)
 8001362:	5cd3      	ldrb	r3, [r2, r3]
 8001364:	001a      	movs	r2, r3
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	18d3      	adds	r3, r2, r3
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	0c1b      	lsrs	r3, r3, #16
 800136e:	0419      	lsls	r1, r3, #16
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	3b01      	subs	r3, #1
 8001374:	4a05      	ldr	r2, [pc, #20]	@ (800138c <LL_DMA_SetDataLength+0x40>)
 8001376:	5cd3      	ldrb	r3, [r2, r3]
 8001378:	001a      	movs	r2, r3
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	18d3      	adds	r3, r2, r3
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	430a      	orrs	r2, r1
 8001382:	605a      	str	r2, [r3, #4]
             DMA_CNDTR_NDT, NbData);
}
 8001384:	46c0      	nop			@ (mov r8, r8)
 8001386:	46bd      	mov	sp, r7
 8001388:	b006      	add	sp, #24
 800138a:	bd80      	pop	{r7, pc}
 800138c:	0800a9f4 	.word	0x0800a9f4

08001390 <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddress,
                                            uint32_t DstAddress, uint32_t Direction)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
 800139c:	603b      	str	r3, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	617b      	str	r3, [r7, #20]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 80013a2:	6a3b      	ldr	r3, [r7, #32]
 80013a4:	2b10      	cmp	r3, #16
 80013a6:	d112      	bne.n	80013ce <LL_DMA_ConfigAddresses+0x3e>
  {
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CMAR, SrcAddress);
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	3b01      	subs	r3, #1
 80013ac:	4a13      	ldr	r2, [pc, #76]	@ (80013fc <LL_DMA_ConfigAddresses+0x6c>)
 80013ae:	5cd3      	ldrb	r3, [r2, r3]
 80013b0:	001a      	movs	r2, r3
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	18d3      	adds	r3, r2, r3
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	60da      	str	r2, [r3, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CPAR, DstAddress);
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	3b01      	subs	r3, #1
 80013be:	4a0f      	ldr	r2, [pc, #60]	@ (80013fc <LL_DMA_ConfigAddresses+0x6c>)
 80013c0:	5cd3      	ldrb	r3, [r2, r3]
 80013c2:	001a      	movs	r2, r3
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	18d3      	adds	r3, r2, r3
 80013c8:	683a      	ldr	r2, [r7, #0]
 80013ca:	609a      	str	r2, [r3, #8]
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CPAR, SrcAddress);
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CMAR, DstAddress);
  }
}
 80013cc:	e011      	b.n	80013f2 <LL_DMA_ConfigAddresses+0x62>
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CPAR, SrcAddress);
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	3b01      	subs	r3, #1
 80013d2:	4a0a      	ldr	r2, [pc, #40]	@ (80013fc <LL_DMA_ConfigAddresses+0x6c>)
 80013d4:	5cd3      	ldrb	r3, [r2, r3]
 80013d6:	001a      	movs	r2, r3
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	18d3      	adds	r3, r2, r3
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	609a      	str	r2, [r3, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CMAR, DstAddress);
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	3b01      	subs	r3, #1
 80013e4:	4a05      	ldr	r2, [pc, #20]	@ (80013fc <LL_DMA_ConfigAddresses+0x6c>)
 80013e6:	5cd3      	ldrb	r3, [r2, r3]
 80013e8:	001a      	movs	r2, r3
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	18d3      	adds	r3, r2, r3
 80013ee:	683a      	ldr	r2, [r7, #0]
 80013f0:	60da      	str	r2, [r3, #12]
}
 80013f2:	46c0      	nop			@ (mov r8, r8)
 80013f4:	46bd      	mov	sp, r7
 80013f6:	b006      	add	sp, #24
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	46c0      	nop			@ (mov r8, r8)
 80013fc:	0800a9f4 	.word	0x0800a9f4

08001400 <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMAMUX_REQ_USART2_TX
  * @note (*) Availability depends on devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Request)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	607a      	str	r2, [r7, #4]
  (void)(DMAx);
  MODIFY_REG(((DMAMUX_Channel_TypeDef *)((uint32_t)DMAMUX1_Channel0 + (DMAMUX_CCR_SIZE * (Channel - 1UL))))->CCR,
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	4a0a      	ldr	r2, [pc, #40]	@ (8001438 <LL_DMA_SetPeriphRequest+0x38>)
 8001410:	4694      	mov	ip, r2
 8001412:	4463      	add	r3, ip
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	22ff      	movs	r2, #255	@ 0xff
 800141a:	4393      	bics	r3, r2
 800141c:	0019      	movs	r1, r3
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	4a05      	ldr	r2, [pc, #20]	@ (8001438 <LL_DMA_SetPeriphRequest+0x38>)
 8001422:	4694      	mov	ip, r2
 8001424:	4463      	add	r3, ip
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	430a      	orrs	r2, r1
 800142c:	601a      	str	r2, [r3, #0]
             DMAMUX_CxCR_DMAREQ_ID, Request);
}
 800142e:	46c0      	nop			@ (mov r8, r8)
 8001430:	46bd      	mov	sp, r7
 8001432:	b004      	add	sp, #16
 8001434:	bd80      	pop	{r7, pc}
 8001436:	46c0      	nop			@ (mov r8, r8)
 8001438:	100081ff 	.word	0x100081ff

0800143c <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_5 (*)
  * @note (*) Availability depends on devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_TCIE);
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	3b01      	subs	r3, #1
 800144e:	4a0a      	ldr	r2, [pc, #40]	@ (8001478 <LL_DMA_EnableIT_TC+0x3c>)
 8001450:	5cd3      	ldrb	r3, [r2, r3]
 8001452:	001a      	movs	r2, r3
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	18d3      	adds	r3, r2, r3
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	3b01      	subs	r3, #1
 800145e:	4906      	ldr	r1, [pc, #24]	@ (8001478 <LL_DMA_EnableIT_TC+0x3c>)
 8001460:	5ccb      	ldrb	r3, [r1, r3]
 8001462:	0019      	movs	r1, r3
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	18cb      	adds	r3, r1, r3
 8001468:	2102      	movs	r1, #2
 800146a:	430a      	orrs	r2, r1
 800146c:	601a      	str	r2, [r3, #0]
}
 800146e:	46c0      	nop			@ (mov r8, r8)
 8001470:	46bd      	mov	sp, r7
 8001472:	b004      	add	sp, #16
 8001474:	bd80      	pop	{r7, pc}
 8001476:	46c0      	nop			@ (mov r8, r8)
 8001478:	0800a9f4 	.word	0x0800a9f4

0800147c <LL_DMA_EnableIT_HT>:
  *         @arg @ref LL_DMA_CHANNEL_5 (*)
  * @note (*) Availability depends on devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_HTIE);
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	3b01      	subs	r3, #1
 800148e:	4a0a      	ldr	r2, [pc, #40]	@ (80014b8 <LL_DMA_EnableIT_HT+0x3c>)
 8001490:	5cd3      	ldrb	r3, [r2, r3]
 8001492:	001a      	movs	r2, r3
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	18d3      	adds	r3, r2, r3
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	3b01      	subs	r3, #1
 800149e:	4906      	ldr	r1, [pc, #24]	@ (80014b8 <LL_DMA_EnableIT_HT+0x3c>)
 80014a0:	5ccb      	ldrb	r3, [r1, r3]
 80014a2:	0019      	movs	r1, r3
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	18cb      	adds	r3, r1, r3
 80014a8:	2104      	movs	r1, #4
 80014aa:	430a      	orrs	r2, r1
 80014ac:	601a      	str	r2, [r3, #0]
}
 80014ae:	46c0      	nop			@ (mov r8, r8)
 80014b0:	46bd      	mov	sp, r7
 80014b2:	b004      	add	sp, #16
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	46c0      	nop			@ (mov r8, r8)
 80014b8:	0800a9f4 	.word	0x0800a9f4

080014bc <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_5 (*)
  * @note (*) Availability depends on devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_TEIE);
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	3b01      	subs	r3, #1
 80014ce:	4a0a      	ldr	r2, [pc, #40]	@ (80014f8 <LL_DMA_EnableIT_TE+0x3c>)
 80014d0:	5cd3      	ldrb	r3, [r2, r3]
 80014d2:	001a      	movs	r2, r3
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	18d3      	adds	r3, r2, r3
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	3b01      	subs	r3, #1
 80014de:	4906      	ldr	r1, [pc, #24]	@ (80014f8 <LL_DMA_EnableIT_TE+0x3c>)
 80014e0:	5ccb      	ldrb	r3, [r1, r3]
 80014e2:	0019      	movs	r1, r3
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	18cb      	adds	r3, r1, r3
 80014e8:	2108      	movs	r1, #8
 80014ea:	430a      	orrs	r2, r1
 80014ec:	601a      	str	r2, [r3, #0]
}
 80014ee:	46c0      	nop			@ (mov r8, r8)
 80014f0:	46bd      	mov	sp, r7
 80014f2:	b004      	add	sp, #16
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	46c0      	nop			@ (mov r8, r8)
 80014f8:	0800a9f4 	.word	0x0800a9f4

080014fc <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
	// Refresh the Encoder Speed (pulses / 10 minutes)
	holding_register_database[ENCODER_SPEED] = (int16_t)((((uint32_t)encoder_pulse)*600UL*10000UL) / (htim14.Init.Period + 1UL));
 8001504:	4b0b      	ldr	r3, [pc, #44]	@ (8001534 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	001a      	movs	r2, r3
 800150a:	4b0b      	ldr	r3, [pc, #44]	@ (8001538 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800150c:	435a      	muls	r2, r3
 800150e:	4b0b      	ldr	r3, [pc, #44]	@ (800153c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	3301      	adds	r3, #1
 8001514:	0019      	movs	r1, r3
 8001516:	0010      	movs	r0, r2
 8001518:	f7fe fdf6 	bl	8000108 <__udivsi3>
 800151c:	0003      	movs	r3, r0
 800151e:	b299      	uxth	r1, r3
 8001520:	4b07      	ldr	r3, [pc, #28]	@ (8001540 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001522:	227c      	movs	r2, #124	@ 0x7c
 8001524:	5299      	strh	r1, [r3, r2]
	encoder_pulse = 0;
 8001526:	4b03      	ldr	r3, [pc, #12]	@ (8001534 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
}
 800152c:	46c0      	nop			@ (mov r8, r8)
 800152e:	46bd      	mov	sp, r7
 8001530:	b002      	add	sp, #8
 8001532:	bd80      	pop	{r7, pc}
 8001534:	2000068c 	.word	0x2000068c
 8001538:	005b8d80 	.word	0x005b8d80
 800153c:	200004a8 	.word	0x200004a8
 8001540:	20000010 	.word	0x20000010

08001544 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8001544:	b5b0      	push	{r4, r5, r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	0002      	movs	r2, r0
 800154c:	1dbb      	adds	r3, r7, #6
 800154e:	801a      	strh	r2, [r3, #0]
	GPIO_PinState pulse_b = HAL_GPIO_ReadPin(Encoder_Pulse_B_GPIO_Port, Encoder_Pulse_B_Pin);
 8001550:	250f      	movs	r5, #15
 8001552:	197c      	adds	r4, r7, r5
 8001554:	2380      	movs	r3, #128	@ 0x80
 8001556:	01db      	lsls	r3, r3, #7
 8001558:	4a0c      	ldr	r2, [pc, #48]	@ (800158c <HAL_GPIO_EXTI_Rising_Callback+0x48>)
 800155a:	0019      	movs	r1, r3
 800155c:	0010      	movs	r0, r2
 800155e:	f003 fb0b 	bl	8004b78 <HAL_GPIO_ReadPin>
 8001562:	0003      	movs	r3, r0
 8001564:	7023      	strb	r3, [r4, #0]
	if(pulse_b == GPIO_PIN_SET)
 8001566:	197b      	adds	r3, r7, r5
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d105      	bne.n	800157a <HAL_GPIO_EXTI_Rising_Callback+0x36>
	{
		encoder_pulse++;
 800156e:	4b08      	ldr	r3, [pc, #32]	@ (8001590 <HAL_GPIO_EXTI_Rising_Callback+0x4c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	1c5a      	adds	r2, r3, #1
 8001574:	4b06      	ldr	r3, [pc, #24]	@ (8001590 <HAL_GPIO_EXTI_Rising_Callback+0x4c>)
 8001576:	601a      	str	r2, [r3, #0]
	}
	else
	{
		encoder_pulse--;
	}
}
 8001578:	e004      	b.n	8001584 <HAL_GPIO_EXTI_Rising_Callback+0x40>
		encoder_pulse--;
 800157a:	4b05      	ldr	r3, [pc, #20]	@ (8001590 <HAL_GPIO_EXTI_Rising_Callback+0x4c>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	1e5a      	subs	r2, r3, #1
 8001580:	4b03      	ldr	r3, [pc, #12]	@ (8001590 <HAL_GPIO_EXTI_Rising_Callback+0x4c>)
 8001582:	601a      	str	r2, [r3, #0]
}
 8001584:	46c0      	nop			@ (mov r8, r8)
 8001586:	46bd      	mov	sp, r7
 8001588:	b004      	add	sp, #16
 800158a:	bdb0      	pop	{r4, r5, r7, pc}
 800158c:	50000400 	.word	0x50000400
 8001590:	2000068c 	.word	0x2000068c

08001594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001594:	b590      	push	{r4, r7, lr}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	int8_t modbus_status = HAL_OK;
 800159a:	1dfb      	adds	r3, r7, #7
 800159c:	2200      	movs	r2, #0
 800159e:	701a      	strb	r2, [r3, #0]
	int8_t i2c_status = HAL_OK;
 80015a0:	1cbb      	adds	r3, r7, #2
 80015a2:	2200      	movs	r2, #0
 80015a4:	701a      	strb	r2, [r3, #0]
	int8_t adc_status = HAL_OK;
 80015a6:	1c7b      	adds	r3, r7, #1
 80015a8:	2200      	movs	r2, #0
 80015aa:	701a      	strb	r2, [r3, #0]
	uint8_t modbus_tx_len = 0;
 80015ac:	003b      	movs	r3, r7
 80015ae:	2200      	movs	r2, #0
 80015b0:	701a      	strb	r2, [r3, #0]
	uint16_t encoder_refresh = 10000;
 80015b2:	1d3b      	adds	r3, r7, #4
 80015b4:	4abf      	ldr	r2, [pc, #764]	@ (80018b4 <main+0x320>)
 80015b6:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015b8:	f002 fb25 	bl	8003c06 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015bc:	f000 fa1e 	bl	80019fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015c0:	f000 fdf2 	bl	80021a8 <MX_GPIO_Init>
  MX_DMA_Init();
 80015c4:	f000 fdc4 	bl	8002150 <MX_DMA_Init>
  MX_ADC1_Init();
 80015c8:	f000 fa56 	bl	8001a78 <MX_ADC1_Init>
  MX_I2C1_Init();
 80015cc:	f000 fc20 	bl	8001e10 <MX_I2C1_Init>
  MX_SPI1_Init();
 80015d0:	f000 fc5e 	bl	8001e90 <MX_SPI1_Init>
  MX_TIM1_Init();
 80015d4:	f000 fc9a 	bl	8001f0c <MX_TIM1_Init>
  MX_TIM14_Init();
 80015d8:	f000 fd42 	bl	8002060 <MX_TIM14_Init>
  MX_USART1_UART_Init();
 80015dc:	f000 fd68 	bl	80020b0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // Initialize the pin mapping table
  pin_map[0] = Actuator_A_EN_Pin;
 80015e0:	4bb5      	ldr	r3, [pc, #724]	@ (80018b8 <main+0x324>)
 80015e2:	2240      	movs	r2, #64	@ 0x40
 80015e4:	801a      	strh	r2, [r3, #0]
  pin_map[1] = Actuator_B_EN_Pin;
 80015e6:	4bb4      	ldr	r3, [pc, #720]	@ (80018b8 <main+0x324>)
 80015e8:	2280      	movs	r2, #128	@ 0x80
 80015ea:	805a      	strh	r2, [r3, #2]
  pin_map[2] = Actuator_C_EN_Pin;
 80015ec:	4bb2      	ldr	r3, [pc, #712]	@ (80018b8 <main+0x324>)
 80015ee:	2201      	movs	r2, #1
 80015f0:	809a      	strh	r2, [r3, #4]

  port_map[0] = Actuator_A_EN_GPIO_Port;
 80015f2:	4bb2      	ldr	r3, [pc, #712]	@ (80018bc <main+0x328>)
 80015f4:	4ab2      	ldr	r2, [pc, #712]	@ (80018c0 <main+0x32c>)
 80015f6:	601a      	str	r2, [r3, #0]
  port_map[1] = Actuator_B_EN_GPIO_Port;
 80015f8:	4bb0      	ldr	r3, [pc, #704]	@ (80018bc <main+0x328>)
 80015fa:	4ab1      	ldr	r2, [pc, #708]	@ (80018c0 <main+0x32c>)
 80015fc:	605a      	str	r2, [r3, #4]
  port_map[2] = Actuator_C_EN_GPIO_Port;
 80015fe:	4baf      	ldr	r3, [pc, #700]	@ (80018bc <main+0x328>)
 8001600:	4ab0      	ldr	r2, [pc, #704]	@ (80018c4 <main+0x330>)
 8001602:	609a      	str	r2, [r3, #8]

  // Initialize the PID constraints to defaults
  pid_constraints.Kp = 1;              // Proportional gain constant
 8001604:	4bb0      	ldr	r3, [pc, #704]	@ (80018c8 <main+0x334>)
 8001606:	22fe      	movs	r2, #254	@ 0xfe
 8001608:	0592      	lsls	r2, r2, #22
 800160a:	601a      	str	r2, [r3, #0]
  pid_constraints.Ki = 0.1;            // Integral gain constant
 800160c:	4bae      	ldr	r3, [pc, #696]	@ (80018c8 <main+0x334>)
 800160e:	4aaf      	ldr	r2, [pc, #700]	@ (80018cc <main+0x338>)
 8001610:	605a      	str	r2, [r3, #4]
  pid_constraints.Kd = 5;              // Derivative gain constant
 8001612:	4bad      	ldr	r3, [pc, #692]	@ (80018c8 <main+0x334>)
 8001614:	4aae      	ldr	r2, [pc, #696]	@ (80018d0 <main+0x33c>)
 8001616:	609a      	str	r2, [r3, #8]
  pid_constraints.Kaw = 0.1;           // Anti-windup gain constant
 8001618:	4bab      	ldr	r3, [pc, #684]	@ (80018c8 <main+0x334>)
 800161a:	4aac      	ldr	r2, [pc, #688]	@ (80018cc <main+0x338>)
 800161c:	60da      	str	r2, [r3, #12]
  pid_constraints.T_C = 1;             // Time constant for derivative filtering
 800161e:	4baa      	ldr	r3, [pc, #680]	@ (80018c8 <main+0x334>)
 8001620:	22fe      	movs	r2, #254	@ 0xfe
 8001622:	0592      	lsls	r2, r2, #22
 8001624:	611a      	str	r2, [r3, #16]
  pid_constraints.T = 100;             // Time step
 8001626:	4ba8      	ldr	r3, [pc, #672]	@ (80018c8 <main+0x334>)
 8001628:	4aaa      	ldr	r2, [pc, #680]	@ (80018d4 <main+0x340>)
 800162a:	615a      	str	r2, [r3, #20]
  pid_constraints.max = 100;           // Max command
 800162c:	4ba6      	ldr	r3, [pc, #664]	@ (80018c8 <main+0x334>)
 800162e:	4aa9      	ldr	r2, [pc, #676]	@ (80018d4 <main+0x340>)
 8001630:	619a      	str	r2, [r3, #24]
  pid_constraints.min = 15;            // Min command
 8001632:	4ba5      	ldr	r3, [pc, #660]	@ (80018c8 <main+0x334>)
 8001634:	4aa8      	ldr	r2, [pc, #672]	@ (80018d8 <main+0x344>)
 8001636:	61da      	str	r2, [r3, #28]
  pid_constraints.max_rate = 40;       // Max rate of change of the command
 8001638:	4ba3      	ldr	r3, [pc, #652]	@ (80018c8 <main+0x334>)
 800163a:	4aa8      	ldr	r2, [pc, #672]	@ (80018dc <main+0x348>)
 800163c:	621a      	str	r2, [r3, #32]
  pid_constraints.integral = 0;        // Integral term
 800163e:	4ba2      	ldr	r3, [pc, #648]	@ (80018c8 <main+0x334>)
 8001640:	2200      	movs	r2, #0
 8001642:	625a      	str	r2, [r3, #36]	@ 0x24
  pid_constraints.err_prev = 0;        // Previous error
 8001644:	4ba0      	ldr	r3, [pc, #640]	@ (80018c8 <main+0x334>)
 8001646:	2200      	movs	r2, #0
 8001648:	629a      	str	r2, [r3, #40]	@ 0x28
  pid_constraints.deriv_prev = 0;      // Previous derivative
 800164a:	4b9f      	ldr	r3, [pc, #636]	@ (80018c8 <main+0x334>)
 800164c:	2200      	movs	r2, #0
 800164e:	62da      	str	r2, [r3, #44]	@ 0x2c
  pid_constraints.command_sat_prev = 0;// Previous saturated command
 8001650:	4b9d      	ldr	r3, [pc, #628]	@ (80018c8 <main+0x334>)
 8001652:	2200      	movs	r2, #0
 8001654:	631a      	str	r2, [r3, #48]	@ 0x30
  pid_constraints.command_prev = 0;    // Previous command
 8001656:	4b9c      	ldr	r3, [pc, #624]	@ (80018c8 <main+0x334>)
 8001658:	2200      	movs	r2, #0
 800165a:	635a      	str	r2, [r3, #52]	@ 0x34

  if(modbus_set_rx() != HAL_OK)
 800165c:	f001 faac 	bl	8002bb8 <modbus_set_rx>
 8001660:	1e03      	subs	r3, r0, #0
 8001662:	d001      	beq.n	8001668 <main+0xd4>
  {
	  Error_Handler();
 8001664:	f000 fe7a 	bl	800235c <Error_Handler>
  }

  /* Perform ADC activation procedure to make it ready to convert. */
  ADC_Activate();
 8001668:	f001 fd26 	bl	80030b8 <ADC_Activate>
  if ((LL_ADC_IsEnabled(ADC1) == 1)               &&
 800166c:	4b9c      	ldr	r3, [pc, #624]	@ (80018e0 <main+0x34c>)
 800166e:	0018      	movs	r0, r3
 8001670:	f7ff fc76 	bl	8000f60 <LL_ADC_IsEnabled>
 8001674:	0003      	movs	r3, r0
 8001676:	2b01      	cmp	r3, #1
 8001678:	d10f      	bne.n	800169a <main+0x106>
	  (LL_ADC_IsDisableOngoing(ADC1) == 0)        &&
 800167a:	4b99      	ldr	r3, [pc, #612]	@ (80018e0 <main+0x34c>)
 800167c:	0018      	movs	r0, r3
 800167e:	f7ff fc80 	bl	8000f82 <LL_ADC_IsDisableOngoing>
 8001682:	1e03      	subs	r3, r0, #0
  if ((LL_ADC_IsEnabled(ADC1) == 1)               &&
 8001684:	d109      	bne.n	800169a <main+0x106>
	  (LL_ADC_REG_IsConversionOngoing(ADC1) == 0))
 8001686:	4b96      	ldr	r3, [pc, #600]	@ (80018e0 <main+0x34c>)
 8001688:	0018      	movs	r0, r3
 800168a:	f7ff fc9d 	bl	8000fc8 <LL_ADC_REG_IsConversionOngoing>
 800168e:	1e03      	subs	r3, r0, #0
	  (LL_ADC_IsDisableOngoing(ADC1) == 0)        &&
 8001690:	d103      	bne.n	800169a <main+0x106>
  {
	  LL_ADC_REG_StartConversion(ADC1);
 8001692:	4b93      	ldr	r3, [pc, #588]	@ (80018e0 <main+0x34c>)
 8001694:	0018      	movs	r0, r3
 8001696:	f7ff fc85 	bl	8000fa4 <LL_ADC_REG_StartConversion>
  }

  bno055_init();
 800169a:	f7fe ff07 	bl	80004ac <bno055_init>
  	actuate_complete[0] = 0;
  	actuate_complete[1] = 0;
  	actuate_complete[2] = 0;
#endif

  	HAL_TIM_Base_Start_IT(&htim14);
 800169e:	4b91      	ldr	r3, [pc, #580]	@ (80018e4 <main+0x350>)
 80016a0:	0018      	movs	r0, r3
 80016a2:	f006 fad9 	bl	8007c58 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */


  while (1)
  {
	  if(modbus_rx())
 80016a6:	f000 fee1 	bl	800246c <modbus_rx>
 80016aa:	1e03      	subs	r3, r0, #0
 80016ac:	d100      	bne.n	80016b0 <main+0x11c>
 80016ae:	e079      	b.n	80017a4 <main+0x210>
	  {
		  if(get_rx_buffer(0) == holding_register_database[MODBUS_ID]) // Check Slave ID
 80016b0:	2000      	movs	r0, #0
 80016b2:	f001 fb99 	bl	8002de8 <get_rx_buffer>
 80016b6:	0003      	movs	r3, r0
 80016b8:	001a      	movs	r2, r3
 80016ba:	4b8b      	ldr	r3, [pc, #556]	@ (80018e8 <main+0x354>)
 80016bc:	881b      	ldrh	r3, [r3, #0]
 80016be:	429a      	cmp	r2, r3
 80016c0:	d133      	bne.n	800172a <main+0x196>
		  {
			  switch(get_rx_buffer(1))
 80016c2:	2001      	movs	r0, #1
 80016c4:	f001 fb90 	bl	8002de8 <get_rx_buffer>
 80016c8:	0003      	movs	r3, r0
 80016ca:	2b03      	cmp	r3, #3
 80016cc:	d002      	beq.n	80016d4 <main+0x140>
 80016ce:	2b10      	cmp	r3, #16
 80016d0:	d008      	beq.n	80016e4 <main+0x150>
 80016d2:	e00f      	b.n	80016f4 <main+0x160>
			  {
				  case 0x03:
				  {
					  // Return holding registers
					  modbus_status = return_holding_registers(&modbus_tx_len);
 80016d4:	1dfc      	adds	r4, r7, #7
 80016d6:	003b      	movs	r3, r7
 80016d8:	0018      	movs	r0, r3
 80016da:	f000 fed9 	bl	8002490 <return_holding_registers>
 80016de:	0003      	movs	r3, r0
 80016e0:	7023      	strb	r3, [r4, #0]
					  break;
 80016e2:	e00e      	b.n	8001702 <main+0x16e>
				  }
				  case 0x10:
				  {
					  // Write holding registers
					  modbus_status = edit_multiple_registers(&modbus_tx_len);
 80016e4:	1dfc      	adds	r4, r7, #7
 80016e6:	003b      	movs	r3, r7
 80016e8:	0018      	movs	r0, r3
 80016ea:	f000 ff7d 	bl	80025e8 <edit_multiple_registers>
 80016ee:	0003      	movs	r3, r0
 80016f0:	7023      	strb	r3, [r4, #0]
					  break;
 80016f2:	e006      	b.n	8001702 <main+0x16e>
				  }
				  default:
				  {
					  modbus_status = modbus_exception(MB_ILLEGAL_FUNCTION);
 80016f4:	1dfc      	adds	r4, r7, #7
 80016f6:	2004      	movs	r0, #4
 80016f8:	f001 f87a 	bl	80027f0 <modbus_exception>
 80016fc:	0003      	movs	r3, r0
 80016fe:	7023      	strb	r3, [r4, #0]
					  break;
 8001700:	46c0      	nop			@ (mov r8, r8)
				  }
			  }
			  if(modbus_status != 0)
 8001702:	1dfb      	adds	r3, r7, #7
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	b25b      	sxtb	r3, r3
 8001708:	2b00      	cmp	r3, #0
 800170a:	d04b      	beq.n	80017a4 <main+0x210>
			  {
				  holding_register_database[MB_ERRORS] |= 1U << ((modbus_status) + (MB_FATAL_ERROR - RANGE_ERROR));
 800170c:	4b76      	ldr	r3, [pc, #472]	@ (80018e8 <main+0x354>)
 800170e:	891a      	ldrh	r2, [r3, #8]
 8001710:	1dfb      	adds	r3, r7, #7
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	b25b      	sxtb	r3, r3
 8001716:	3307      	adds	r3, #7
 8001718:	2101      	movs	r1, #1
 800171a:	4099      	lsls	r1, r3
 800171c:	000b      	movs	r3, r1
 800171e:	b29b      	uxth	r3, r3
 8001720:	4313      	orrs	r3, r2
 8001722:	b29a      	uxth	r2, r3
 8001724:	4b70      	ldr	r3, [pc, #448]	@ (80018e8 <main+0x354>)
 8001726:	811a      	strh	r2, [r3, #8]
 8001728:	e03c      	b.n	80017a4 <main+0x210>
			  }
		  }
		  // Special case where you retrieve the modbus ID
		  else if((get_rx_buffer(0) == 0xFF) && // modbus_id = 0xFF = 255
 800172a:	2000      	movs	r0, #0
 800172c:	f001 fb5c 	bl	8002de8 <get_rx_buffer>
 8001730:	0003      	movs	r3, r0
 8001732:	2bff      	cmp	r3, #255	@ 0xff
 8001734:	d136      	bne.n	80017a4 <main+0x210>
			(get_rx_buffer(1) == 0x03) && // Function code = read_holding_registers
 8001736:	2001      	movs	r0, #1
 8001738:	f001 fb56 	bl	8002de8 <get_rx_buffer>
 800173c:	0003      	movs	r3, r0
		  else if((get_rx_buffer(0) == 0xFF) && // modbus_id = 0xFF = 255
 800173e:	2b03      	cmp	r3, #3
 8001740:	d130      	bne.n	80017a4 <main+0x210>
			(((get_rx_buffer(2) << 8) | get_rx_buffer(3)) == 0x00) && // Address to read = 0
 8001742:	2002      	movs	r0, #2
 8001744:	f001 fb50 	bl	8002de8 <get_rx_buffer>
 8001748:	0003      	movs	r3, r0
 800174a:	021c      	lsls	r4, r3, #8
 800174c:	2003      	movs	r0, #3
 800174e:	f001 fb4b 	bl	8002de8 <get_rx_buffer>
 8001752:	0003      	movs	r3, r0
 8001754:	4323      	orrs	r3, r4
			(get_rx_buffer(1) == 0x03) && // Function code = read_holding_registers
 8001756:	d125      	bne.n	80017a4 <main+0x210>
			(((get_rx_buffer(4) << 8) | get_rx_buffer(5)) == 1)) // # of registers to read = 1
 8001758:	2004      	movs	r0, #4
 800175a:	f001 fb45 	bl	8002de8 <get_rx_buffer>
 800175e:	0003      	movs	r3, r0
 8001760:	021c      	lsls	r4, r3, #8
 8001762:	2005      	movs	r0, #5
 8001764:	f001 fb40 	bl	8002de8 <get_rx_buffer>
 8001768:	0003      	movs	r3, r0
 800176a:	4323      	orrs	r3, r4
			(((get_rx_buffer(2) << 8) | get_rx_buffer(3)) == 0x00) && // Address to read = 0
 800176c:	2b01      	cmp	r3, #1
 800176e:	d119      	bne.n	80017a4 <main+0x210>
		  {

			  modbus_status = return_holding_registers(&modbus_tx_len);
 8001770:	1dfc      	adds	r4, r7, #7
 8001772:	003b      	movs	r3, r7
 8001774:	0018      	movs	r0, r3
 8001776:	f000 fe8b 	bl	8002490 <return_holding_registers>
 800177a:	0003      	movs	r3, r0
 800177c:	7023      	strb	r3, [r4, #0]
			  if(modbus_status != 0)
 800177e:	1dfb      	adds	r3, r7, #7
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	b25b      	sxtb	r3, r3
 8001784:	2b00      	cmp	r3, #0
 8001786:	d00d      	beq.n	80017a4 <main+0x210>
			  {
				  holding_register_database[MB_ERRORS] |= 1U << ((modbus_status) + (MB_FATAL_ERROR - RANGE_ERROR));
 8001788:	4b57      	ldr	r3, [pc, #348]	@ (80018e8 <main+0x354>)
 800178a:	891a      	ldrh	r2, [r3, #8]
 800178c:	1dfb      	adds	r3, r7, #7
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	b25b      	sxtb	r3, r3
 8001792:	3307      	adds	r3, #7
 8001794:	2101      	movs	r1, #1
 8001796:	4099      	lsls	r1, r3
 8001798:	000b      	movs	r3, r1
 800179a:	b29b      	uxth	r3, r3
 800179c:	4313      	orrs	r3, r2
 800179e:	b29a      	uxth	r2, r3
 80017a0:	4b51      	ldr	r3, [pc, #324]	@ (80018e8 <main+0x354>)
 80017a2:	811a      	strh	r2, [r3, #8]
			  }
		  }
	  }
	  modbus_status = monitor_modbus();
 80017a4:	1dfc      	adds	r4, r7, #7
 80017a6:	f001 fa2b 	bl	8002c00 <monitor_modbus>
 80017aa:	0003      	movs	r3, r0
 80017ac:	7023      	strb	r3, [r4, #0]
	  if(modbus_status != HAL_OK && modbus_status != HAL_BUSY)
 80017ae:	1dfb      	adds	r3, r7, #7
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	b25b      	sxtb	r3, r3
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d100      	bne.n	80017ba <main+0x226>
 80017b8:	e076      	b.n	80018a8 <main+0x314>
 80017ba:	1dfb      	adds	r3, r7, #7
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	b25b      	sxtb	r3, r3
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d100      	bne.n	80017c6 <main+0x232>
 80017c4:	e070      	b.n	80018a8 <main+0x314>
	  {
		  switch(modbus_status)
 80017c6:	1dfb      	adds	r3, r7, #7
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	b25b      	sxtb	r3, r3
 80017cc:	2b15      	cmp	r3, #21
 80017ce:	d052      	beq.n	8001876 <main+0x2e2>
 80017d0:	dd00      	ble.n	80017d4 <main+0x240>
 80017d2:	e08c      	b.n	80018ee <main+0x35a>
 80017d4:	2b14      	cmp	r3, #20
 80017d6:	d035      	beq.n	8001844 <main+0x2b0>
 80017d8:	dd00      	ble.n	80017dc <main+0x248>
 80017da:	e088      	b.n	80018ee <main+0x35a>
 80017dc:	2b12      	cmp	r3, #18
 80017de:	d165      	bne.n	80018ac <main+0x318>
		  {
			  case MB_TX_TIMEOUT:
			  {
				  for(uint8_t i = 0; i < holding_register_database[MB_TRANSMIT_RETRIES]; i++)
 80017e0:	1cfb      	adds	r3, r7, #3
 80017e2:	2200      	movs	r2, #0
 80017e4:	701a      	strb	r2, [r3, #0]
 80017e6:	e025      	b.n	8001834 <main+0x2a0>
				  {
					  modbus_status = modbus_send(modbus_tx_len);
 80017e8:	003b      	movs	r3, r7
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	1dfc      	adds	r4, r7, #7
 80017ee:	0018      	movs	r0, r3
 80017f0:	f001 f90c 	bl	8002a0c <modbus_send>
 80017f4:	0003      	movs	r3, r0
 80017f6:	7023      	strb	r3, [r4, #0]
					  while(monitor_modbus() == HAL_BUSY);
 80017f8:	46c0      	nop			@ (mov r8, r8)
 80017fa:	f001 fa01 	bl	8002c00 <monitor_modbus>
 80017fe:	0003      	movs	r3, r0
 8001800:	2b02      	cmp	r3, #2
 8001802:	d0fa      	beq.n	80017fa <main+0x266>
					  if(modbus_status != HAL_OK)
 8001804:	1dfb      	adds	r3, r7, #7
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	b25b      	sxtb	r3, r3
 800180a:	2b00      	cmp	r3, #0
 800180c:	d00d      	beq.n	800182a <main+0x296>
					  {

						  holding_register_database[MB_ERRORS] |= 1U << ((modbus_status) + (MB_FATAL_ERROR - RANGE_ERROR));
 800180e:	4b36      	ldr	r3, [pc, #216]	@ (80018e8 <main+0x354>)
 8001810:	891a      	ldrh	r2, [r3, #8]
 8001812:	1dfb      	adds	r3, r7, #7
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	b25b      	sxtb	r3, r3
 8001818:	3307      	adds	r3, #7
 800181a:	2101      	movs	r1, #1
 800181c:	4099      	lsls	r1, r3
 800181e:	000b      	movs	r3, r1
 8001820:	b29b      	uxth	r3, r3
 8001822:	4313      	orrs	r3, r2
 8001824:	b29a      	uxth	r2, r3
 8001826:	4b30      	ldr	r3, [pc, #192]	@ (80018e8 <main+0x354>)
 8001828:	811a      	strh	r2, [r3, #8]
				  for(uint8_t i = 0; i < holding_register_database[MB_TRANSMIT_RETRIES]; i++)
 800182a:	1cfb      	adds	r3, r7, #3
 800182c:	781a      	ldrb	r2, [r3, #0]
 800182e:	1cfb      	adds	r3, r7, #3
 8001830:	3201      	adds	r2, #1
 8001832:	701a      	strb	r2, [r3, #0]
 8001834:	1cfb      	adds	r3, r7, #3
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	b29a      	uxth	r2, r3
 800183a:	4b2b      	ldr	r3, [pc, #172]	@ (80018e8 <main+0x354>)
 800183c:	88db      	ldrh	r3, [r3, #6]
 800183e:	429a      	cmp	r2, r3
 8001840:	d3d2      	bcc.n	80017e8 <main+0x254>
					  }
				  }
				  break;
 8001842:	e054      	b.n	80018ee <main+0x35a>
				  // Error only relates to Modbus Master Nodes
				  break;
			  }
			  case MB_UART_ERROR:
			  {
				  if(modbus_status != 0)
 8001844:	1dfb      	adds	r3, r7, #7
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	b25b      	sxtb	r3, r3
 800184a:	2b00      	cmp	r3, #0
 800184c:	d030      	beq.n	80018b0 <main+0x31c>
				  {
					  holding_register_database[MB_ERRORS] |= 1U << ((modbus_status) + (MB_FATAL_ERROR - RANGE_ERROR));
 800184e:	4b26      	ldr	r3, [pc, #152]	@ (80018e8 <main+0x354>)
 8001850:	891a      	ldrh	r2, [r3, #8]
 8001852:	1dfb      	adds	r3, r7, #7
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	b25b      	sxtb	r3, r3
 8001858:	3307      	adds	r3, #7
 800185a:	2101      	movs	r1, #1
 800185c:	4099      	lsls	r1, r3
 800185e:	000b      	movs	r3, r1
 8001860:	b29b      	uxth	r3, r3
 8001862:	4313      	orrs	r3, r2
 8001864:	b29a      	uxth	r2, r3
 8001866:	4b20      	ldr	r3, [pc, #128]	@ (80018e8 <main+0x354>)
 8001868:	811a      	strh	r2, [r3, #8]
				  }
				  break;
 800186a:	e021      	b.n	80018b0 <main+0x31c>
			  }
			  case MB_FATAL_ERROR:
			  {
				  while(modbus_status != HAL_OK)
				  {
					  modbus_status = modbus_reset();
 800186c:	1dfc      	adds	r4, r7, #7
 800186e:	f001 f923 	bl	8002ab8 <modbus_reset>
 8001872:	0003      	movs	r3, r0
 8001874:	7023      	strb	r3, [r4, #0]
				  while(modbus_status != HAL_OK)
 8001876:	1dfb      	adds	r3, r7, #7
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	b25b      	sxtb	r3, r3
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1f5      	bne.n	800186c <main+0x2d8>
				  }
				  if(modbus_status != 0)
 8001880:	1dfb      	adds	r3, r7, #7
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	b25b      	sxtb	r3, r3
 8001886:	2b00      	cmp	r3, #0
 8001888:	d030      	beq.n	80018ec <main+0x358>
				  {
					  holding_register_database[MB_ERRORS] |= 1U << ((modbus_status) + (MB_FATAL_ERROR - RANGE_ERROR));
 800188a:	4b17      	ldr	r3, [pc, #92]	@ (80018e8 <main+0x354>)
 800188c:	891a      	ldrh	r2, [r3, #8]
 800188e:	1dfb      	adds	r3, r7, #7
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	b25b      	sxtb	r3, r3
 8001894:	3307      	adds	r3, #7
 8001896:	2101      	movs	r1, #1
 8001898:	4099      	lsls	r1, r3
 800189a:	000b      	movs	r3, r1
 800189c:	b29b      	uxth	r3, r3
 800189e:	4313      	orrs	r3, r2
 80018a0:	b29a      	uxth	r2, r3
 80018a2:	4b11      	ldr	r3, [pc, #68]	@ (80018e8 <main+0x354>)
 80018a4:	811a      	strh	r2, [r3, #8]
				  }
				  break;
 80018a6:	e021      	b.n	80018ec <main+0x358>
			  }
			  default:
 80018a8:	46c0      	nop			@ (mov r8, r8)
 80018aa:	e020      	b.n	80018ee <main+0x35a>
				  break;
 80018ac:	46c0      	nop			@ (mov r8, r8)
 80018ae:	e01e      	b.n	80018ee <main+0x35a>
				  break;
 80018b0:	46c0      	nop			@ (mov r8, r8)
 80018b2:	e01c      	b.n	80018ee <main+0x35a>
 80018b4:	00002710 	.word	0x00002710
 80018b8:	20000678 	.word	0x20000678
 80018bc:	20000680 	.word	0x20000680
 80018c0:	50000800 	.word	0x50000800
 80018c4:	50000400 	.word	0x50000400
 80018c8:	20000640 	.word	0x20000640
 80018cc:	3dcccccd 	.word	0x3dcccccd
 80018d0:	40a00000 	.word	0x40a00000
 80018d4:	42c80000 	.word	0x42c80000
 80018d8:	41700000 	.word	0x41700000
 80018dc:	42200000 	.word	0x42200000
 80018e0:	40012400 	.word	0x40012400
 80018e4:	200004a8 	.word	0x200004a8
 80018e8:	20000010 	.word	0x20000010
				  break;
 80018ec:	46c0      	nop			@ (mov r8, r8)
				  // Unknown error
			  }
		  }
	  }

	  if(!holding_register_database[I2C_SHUTDOWN])
 80018ee:	4b3f      	ldr	r3, [pc, #252]	@ (80019ec <main+0x458>)
 80018f0:	899b      	ldrh	r3, [r3, #12]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d133      	bne.n	800195e <main+0x3ca>
	  {
		  if(bno055_rx())
 80018f6:	f7fe ffeb 	bl	80008d0 <bno055_rx>
 80018fa:	1e03      	subs	r3, r0, #0
 80018fc:	d017      	beq.n	800192e <main+0x39a>
		  {
			  i2c_status = bno055_queue_transaction();
 80018fe:	1cbc      	adds	r4, r7, #2
 8001900:	f7fe fffa 	bl	80008f8 <bno055_queue_transaction>
 8001904:	0003      	movs	r3, r0
 8001906:	7023      	strb	r3, [r4, #0]
			  if(i2c_status != 0)
 8001908:	1cbb      	adds	r3, r7, #2
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	b25b      	sxtb	r3, r3
 800190e:	2b00      	cmp	r3, #0
 8001910:	d00d      	beq.n	800192e <main+0x39a>
			  {
				  holding_register_database[I2C_ERRORS] |= 1U << ((i2c_status) + (I2C_FATAL_ERROR - I2C_TX_TIMEOUT));
 8001912:	4b36      	ldr	r3, [pc, #216]	@ (80019ec <main+0x458>)
 8001914:	895a      	ldrh	r2, [r3, #10]
 8001916:	1cbb      	adds	r3, r7, #2
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	b25b      	sxtb	r3, r3
 800191c:	3303      	adds	r3, #3
 800191e:	2101      	movs	r1, #1
 8001920:	4099      	lsls	r1, r3
 8001922:	000b      	movs	r3, r1
 8001924:	b29b      	uxth	r3, r3
 8001926:	4313      	orrs	r3, r2
 8001928:	b29a      	uxth	r2, r3
 800192a:	4b30      	ldr	r3, [pc, #192]	@ (80019ec <main+0x458>)
 800192c:	815a      	strh	r2, [r3, #10]
			  }
		  }

		  i2c_status = monitor_i2c();
 800192e:	1cbc      	adds	r4, r7, #2
 8001930:	f7ff f85c 	bl	80009ec <monitor_i2c>
 8001934:	0003      	movs	r3, r0
 8001936:	7023      	strb	r3, [r4, #0]
		  if(i2c_status != HAL_OK && i2c_status != HAL_BUSY)
 8001938:	1cbb      	adds	r3, r7, #2
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	b25b      	sxtb	r3, r3
 800193e:	2b00      	cmp	r3, #0
 8001940:	d00d      	beq.n	800195e <main+0x3ca>
 8001942:	1cbb      	adds	r3, r7, #2
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	b25b      	sxtb	r3, r3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d008      	beq.n	800195e <main+0x3ca>
		  {
			  switch(i2c_status)
 800194c:	1cbb      	adds	r3, r7, #2
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	b25b      	sxtb	r3, r3
 8001952:	2b19      	cmp	r3, #25
 8001954:	d104      	bne.n	8001960 <main+0x3cc>
					  break;
				  }
				  case I2C_FATAL_ERROR:
				  {
					  // Disable the I2C peripheral
					  holding_register_database[I2C_SHUTDOWN] = 1;
 8001956:	4b25      	ldr	r3, [pc, #148]	@ (80019ec <main+0x458>)
 8001958:	2201      	movs	r2, #1
 800195a:	819a      	strh	r2, [r3, #12]
					  break;
 800195c:	e000      	b.n	8001960 <main+0x3cc>
				  }
				  default:
 800195e:	46c0      	nop			@ (mov r8, r8)
	  }
	  actuate(target_actuator, holding_register_database[ADC_6 + target_actuator], holding_register_database[ACTUATOR_A_TARGET + target_actuator], &actuator_time);
#endif

	  // Monitor any ADC Errors
	  adc_status = monitor_adc();
 8001960:	1c7c      	adds	r4, r7, #1
 8001962:	f001 fc33 	bl	80031cc <monitor_adc>
 8001966:	0003      	movs	r3, r0
 8001968:	7023      	strb	r3, [r4, #0]
	  if(adc_status != HAL_OK)
 800196a:	1c7b      	adds	r3, r7, #1
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	b25b      	sxtb	r3, r3
 8001970:	2b00      	cmp	r3, #0
 8001972:	d002      	beq.n	800197a <main+0x3e6>
	  {
		  // An Overrun has occurred as shown in ADC1_IRQHandler in stm32c0xx_it.c. Log the error
		  holding_register_database[ADC_ERRORS] = 1;
 8001974:	4b1d      	ldr	r3, [pc, #116]	@ (80019ec <main+0x458>)
 8001976:	2201      	movs	r2, #1
 8001978:	81da      	strh	r2, [r3, #14]
	  }

	  // Handle the User changing the encoder refresh rate (does not log potential errors)
	  if(encoder_refresh != holding_register_database[ENCODER_REFRESH])
 800197a:	4b1c      	ldr	r3, [pc, #112]	@ (80019ec <main+0x458>)
 800197c:	227e      	movs	r2, #126	@ 0x7e
 800197e:	5a9b      	ldrh	r3, [r3, r2]
 8001980:	1d3a      	adds	r2, r7, #4
 8001982:	8812      	ldrh	r2, [r2, #0]
 8001984:	429a      	cmp	r2, r3
 8001986:	d100      	bne.n	800198a <main+0x3f6>
 8001988:	e68d      	b.n	80016a6 <main+0x112>
	  {
		  HAL_TIM_Base_Stop_IT(&htim14);
 800198a:	4b19      	ldr	r3, [pc, #100]	@ (80019f0 <main+0x45c>)
 800198c:	0018      	movs	r0, r3
 800198e:	f006 f9b7 	bl	8007d00 <HAL_TIM_Base_Stop_IT>
		  HAL_TIM_Base_DeInit(&htim14);
 8001992:	4b17      	ldr	r3, [pc, #92]	@ (80019f0 <main+0x45c>)
 8001994:	0018      	movs	r0, r3
 8001996:	f006 f901 	bl	8007b9c <HAL_TIM_Base_DeInit>
		  __HAL_RCC_TIM14_FORCE_RESET();
 800199a:	4b16      	ldr	r3, [pc, #88]	@ (80019f4 <main+0x460>)
 800199c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800199e:	4b15      	ldr	r3, [pc, #84]	@ (80019f4 <main+0x460>)
 80019a0:	2180      	movs	r1, #128	@ 0x80
 80019a2:	0209      	lsls	r1, r1, #8
 80019a4:	430a      	orrs	r2, r1
 80019a6:	631a      	str	r2, [r3, #48]	@ 0x30
		  HAL_Delay(10);
 80019a8:	200a      	movs	r0, #10
 80019aa:	f002 f9a9 	bl	8003d00 <HAL_Delay>
		  __HAL_RCC_TIM14_RELEASE_RESET();
 80019ae:	4b11      	ldr	r3, [pc, #68]	@ (80019f4 <main+0x460>)
 80019b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80019b2:	4b10      	ldr	r3, [pc, #64]	@ (80019f4 <main+0x460>)
 80019b4:	4910      	ldr	r1, [pc, #64]	@ (80019f8 <main+0x464>)
 80019b6:	400a      	ands	r2, r1
 80019b8:	631a      	str	r2, [r3, #48]	@ 0x30
		  HAL_Delay(10);
 80019ba:	200a      	movs	r0, #10
 80019bc:	f002 f9a0 	bl	8003d00 <HAL_Delay>
		  htim14.Init.Period = holding_register_database[ENCODER_REFRESH] - 1;
 80019c0:	4b0a      	ldr	r3, [pc, #40]	@ (80019ec <main+0x458>)
 80019c2:	227e      	movs	r2, #126	@ 0x7e
 80019c4:	5a9b      	ldrh	r3, [r3, r2]
 80019c6:	3b01      	subs	r3, #1
 80019c8:	001a      	movs	r2, r3
 80019ca:	4b09      	ldr	r3, [pc, #36]	@ (80019f0 <main+0x45c>)
 80019cc:	60da      	str	r2, [r3, #12]
		  HAL_TIM_Base_Init(&htim14);
 80019ce:	4b08      	ldr	r3, [pc, #32]	@ (80019f0 <main+0x45c>)
 80019d0:	0018      	movs	r0, r3
 80019d2:	f006 f88b 	bl	8007aec <HAL_TIM_Base_Init>
		  HAL_TIM_Base_Start_IT(&htim14);
 80019d6:	4b06      	ldr	r3, [pc, #24]	@ (80019f0 <main+0x45c>)
 80019d8:	0018      	movs	r0, r3
 80019da:	f006 f93d 	bl	8007c58 <HAL_TIM_Base_Start_IT>
		  encoder_refresh = holding_register_database[ENCODER_REFRESH];
 80019de:	1d3b      	adds	r3, r7, #4
 80019e0:	4a02      	ldr	r2, [pc, #8]	@ (80019ec <main+0x458>)
 80019e2:	217e      	movs	r1, #126	@ 0x7e
 80019e4:	5a52      	ldrh	r2, [r2, r1]
 80019e6:	801a      	strh	r2, [r3, #0]
	  if(modbus_rx())
 80019e8:	e65d      	b.n	80016a6 <main+0x112>
 80019ea:	46c0      	nop			@ (mov r8, r8)
 80019ec:	20000010 	.word	0x20000010
 80019f0:	200004a8 	.word	0x200004a8
 80019f4:	40021000 	.word	0x40021000
 80019f8:	ffff7fff 	.word	0xffff7fff

080019fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019fc:	b590      	push	{r4, r7, lr}
 80019fe:	b08f      	sub	sp, #60	@ 0x3c
 8001a00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a02:	2418      	movs	r4, #24
 8001a04:	193b      	adds	r3, r7, r4
 8001a06:	0018      	movs	r0, r3
 8001a08:	2320      	movs	r3, #32
 8001a0a:	001a      	movs	r2, r3
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	f008 ffb9 	bl	800a984 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a12:	1d3b      	adds	r3, r7, #4
 8001a14:	0018      	movs	r0, r3
 8001a16:	2314      	movs	r3, #20
 8001a18:	001a      	movs	r2, r3
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	f008 ffb2 	bl	800a984 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a20:	193b      	adds	r3, r7, r4
 8001a22:	2201      	movs	r2, #1
 8001a24:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a26:	193b      	adds	r3, r7, r4
 8001a28:	2280      	movs	r2, #128	@ 0x80
 8001a2a:	0252      	lsls	r2, r2, #9
 8001a2c:	605a      	str	r2, [r3, #4]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a2e:	193b      	adds	r3, r7, r4
 8001a30:	0018      	movs	r0, r3
 8001a32:	f005 fadb 	bl	8006fec <HAL_RCC_OscConfig>
 8001a36:	1e03      	subs	r3, r0, #0
 8001a38:	d001      	beq.n	8001a3e <SystemClock_Config+0x42>
  {
    Error_Handler();
 8001a3a:	f000 fc8f 	bl	800235c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a3e:	1d3b      	adds	r3, r7, #4
 8001a40:	2207      	movs	r2, #7
 8001a42:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001a44:	1d3b      	adds	r3, r7, #4
 8001a46:	2201      	movs	r2, #1
 8001a48:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001a4a:	1d3b      	adds	r3, r7, #4
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001a50:	1d3b      	adds	r3, r7, #4
 8001a52:	2200      	movs	r2, #0
 8001a54:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001a56:	1d3b      	adds	r3, r7, #4
 8001a58:	2200      	movs	r2, #0
 8001a5a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a5c:	1d3b      	adds	r3, r7, #4
 8001a5e:	2100      	movs	r1, #0
 8001a60:	0018      	movs	r0, r3
 8001a62:	f005 fce9 	bl	8007438 <HAL_RCC_ClockConfig>
 8001a66:	1e03      	subs	r3, r0, #0
 8001a68:	d001      	beq.n	8001a6e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001a6a:	f000 fc77 	bl	800235c <Error_Handler>
  }
}
 8001a6e:	46c0      	nop			@ (mov r8, r8)
 8001a70:	46bd      	mov	sp, r7
 8001a72:	b00f      	add	sp, #60	@ 0x3c
 8001a74:	bd90      	pop	{r4, r7, pc}
	...

08001a78 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a78:	b590      	push	{r4, r7, lr}
 8001a7a:	b09d      	sub	sp, #116	@ 0x74
 8001a7c:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8001a7e:	2350      	movs	r3, #80	@ 0x50
 8001a80:	18fb      	adds	r3, r7, r3
 8001a82:	0018      	movs	r0, r3
 8001a84:	2310      	movs	r3, #16
 8001a86:	001a      	movs	r2, r3
 8001a88:	2100      	movs	r1, #0
 8001a8a:	f008 ff7b 	bl	800a984 <memset>
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8001a8e:	2338      	movs	r3, #56	@ 0x38
 8001a90:	18fb      	adds	r3, r7, r3
 8001a92:	0018      	movs	r0, r3
 8001a94:	2318      	movs	r3, #24
 8001a96:	001a      	movs	r2, r3
 8001a98:	2100      	movs	r1, #0
 8001a9a:	f008 ff73 	bl	800a984 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a9e:	2320      	movs	r3, #32
 8001aa0:	18fb      	adds	r3, r7, r3
 8001aa2:	0018      	movs	r0, r3
 8001aa4:	2318      	movs	r3, #24
 8001aa6:	001a      	movs	r2, r3
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	f008 ff6b 	bl	800a984 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001aae:	003b      	movs	r3, r7
 8001ab0:	0018      	movs	r0, r3
 8001ab2:	2320      	movs	r3, #32
 8001ab4:	001a      	movs	r2, r3
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	f008 ff64 	bl	800a984 <memset>

  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001abc:	003b      	movs	r3, r7
 8001abe:	2220      	movs	r2, #32
 8001ac0:	601a      	str	r2, [r3, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8001ac2:	003b      	movs	r3, r7
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ac8:	003b      	movs	r3, r7
 8001aca:	0018      	movs	r0, r3
 8001acc:	f005 fe5a 	bl	8007784 <HAL_RCCEx_PeriphCLKConfig>
 8001ad0:	1e03      	subs	r3, r0, #0
 8001ad2:	d001      	beq.n	8001ad8 <MX_ADC1_Init+0x60>
  {
    Error_Handler();
 8001ad4:	f000 fc42 	bl	800235c <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC);
 8001ad8:	2380      	movs	r3, #128	@ 0x80
 8001ada:	035b      	lsls	r3, r3, #13
 8001adc:	0018      	movs	r0, r3
 8001ade:	f7ff fad1 	bl	8001084 <LL_APB1_GRP2_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8001ae2:	2001      	movs	r0, #1
 8001ae4:	f7ff fae4 	bl	80010b0 <LL_IOP_GRP1_EnableClock>
  PA5   ------> ADC1_IN5
  PA6   ------> ADC1_IN6
  PA7   ------> ADC1_IN7
  PA8   ------> ADC1_IN8
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8001ae8:	2420      	movs	r4, #32
 8001aea:	193b      	adds	r3, r7, r4
 8001aec:	2201      	movs	r2, #1
 8001aee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001af0:	193b      	adds	r3, r7, r4
 8001af2:	2203      	movs	r2, #3
 8001af4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001af6:	193b      	adds	r3, r7, r4
 8001af8:	2200      	movs	r2, #0
 8001afa:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001afc:	193a      	adds	r2, r7, r4
 8001afe:	23a0      	movs	r3, #160	@ 0xa0
 8001b00:	05db      	lsls	r3, r3, #23
 8001b02:	0011      	movs	r1, r2
 8001b04:	0018      	movs	r0, r3
 8001b06:	f008 fee2 	bl	800a8ce <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8001b0a:	193b      	adds	r3, r7, r4
 8001b0c:	2202      	movs	r2, #2
 8001b0e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001b10:	193b      	adds	r3, r7, r4
 8001b12:	2203      	movs	r2, #3
 8001b14:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b16:	193b      	adds	r3, r7, r4
 8001b18:	2200      	movs	r2, #0
 8001b1a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1c:	193a      	adds	r2, r7, r4
 8001b1e:	23a0      	movs	r3, #160	@ 0xa0
 8001b20:	05db      	lsls	r3, r3, #23
 8001b22:	0011      	movs	r1, r2
 8001b24:	0018      	movs	r0, r3
 8001b26:	f008 fed2 	bl	800a8ce <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8001b2a:	193b      	adds	r3, r7, r4
 8001b2c:	2204      	movs	r2, #4
 8001b2e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001b30:	193b      	adds	r3, r7, r4
 8001b32:	2203      	movs	r2, #3
 8001b34:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b36:	193b      	adds	r3, r7, r4
 8001b38:	2200      	movs	r2, #0
 8001b3a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3c:	193a      	adds	r2, r7, r4
 8001b3e:	23a0      	movs	r3, #160	@ 0xa0
 8001b40:	05db      	lsls	r3, r3, #23
 8001b42:	0011      	movs	r1, r2
 8001b44:	0018      	movs	r0, r3
 8001b46:	f008 fec2 	bl	800a8ce <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8001b4a:	193b      	adds	r3, r7, r4
 8001b4c:	2208      	movs	r2, #8
 8001b4e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001b50:	193b      	adds	r3, r7, r4
 8001b52:	2203      	movs	r2, #3
 8001b54:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b56:	193b      	adds	r3, r7, r4
 8001b58:	2200      	movs	r2, #0
 8001b5a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b5c:	193a      	adds	r2, r7, r4
 8001b5e:	23a0      	movs	r3, #160	@ 0xa0
 8001b60:	05db      	lsls	r3, r3, #23
 8001b62:	0011      	movs	r1, r2
 8001b64:	0018      	movs	r0, r3
 8001b66:	f008 feb2 	bl	800a8ce <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8001b6a:	193b      	adds	r3, r7, r4
 8001b6c:	2210      	movs	r2, #16
 8001b6e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001b70:	193b      	adds	r3, r7, r4
 8001b72:	2203      	movs	r2, #3
 8001b74:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b76:	193b      	adds	r3, r7, r4
 8001b78:	2200      	movs	r2, #0
 8001b7a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b7c:	193a      	adds	r2, r7, r4
 8001b7e:	23a0      	movs	r3, #160	@ 0xa0
 8001b80:	05db      	lsls	r3, r3, #23
 8001b82:	0011      	movs	r1, r2
 8001b84:	0018      	movs	r0, r3
 8001b86:	f008 fea2 	bl	800a8ce <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8001b8a:	193b      	adds	r3, r7, r4
 8001b8c:	2220      	movs	r2, #32
 8001b8e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001b90:	193b      	adds	r3, r7, r4
 8001b92:	2203      	movs	r2, #3
 8001b94:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b96:	193b      	adds	r3, r7, r4
 8001b98:	2200      	movs	r2, #0
 8001b9a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b9c:	193a      	adds	r2, r7, r4
 8001b9e:	23a0      	movs	r3, #160	@ 0xa0
 8001ba0:	05db      	lsls	r3, r3, #23
 8001ba2:	0011      	movs	r1, r2
 8001ba4:	0018      	movs	r0, r3
 8001ba6:	f008 fe92 	bl	800a8ce <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8001baa:	193b      	adds	r3, r7, r4
 8001bac:	2240      	movs	r2, #64	@ 0x40
 8001bae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001bb0:	193b      	adds	r3, r7, r4
 8001bb2:	2203      	movs	r2, #3
 8001bb4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001bb6:	193b      	adds	r3, r7, r4
 8001bb8:	2200      	movs	r2, #0
 8001bba:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bbc:	193a      	adds	r2, r7, r4
 8001bbe:	23a0      	movs	r3, #160	@ 0xa0
 8001bc0:	05db      	lsls	r3, r3, #23
 8001bc2:	0011      	movs	r1, r2
 8001bc4:	0018      	movs	r0, r3
 8001bc6:	f008 fe82 	bl	800a8ce <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8001bca:	193b      	adds	r3, r7, r4
 8001bcc:	2280      	movs	r2, #128	@ 0x80
 8001bce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001bd0:	193b      	adds	r3, r7, r4
 8001bd2:	2203      	movs	r2, #3
 8001bd4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001bd6:	193b      	adds	r3, r7, r4
 8001bd8:	2200      	movs	r2, #0
 8001bda:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bdc:	193a      	adds	r2, r7, r4
 8001bde:	23a0      	movs	r3, #160	@ 0xa0
 8001be0:	05db      	lsls	r3, r3, #23
 8001be2:	0011      	movs	r1, r2
 8001be4:	0018      	movs	r0, r3
 8001be6:	f008 fe72 	bl	800a8ce <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8001bea:	0021      	movs	r1, r4
 8001bec:	187b      	adds	r3, r7, r1
 8001bee:	2280      	movs	r2, #128	@ 0x80
 8001bf0:	0052      	lsls	r2, r2, #1
 8001bf2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001bf4:	187b      	adds	r3, r7, r1
 8001bf6:	2203      	movs	r2, #3
 8001bf8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001bfa:	187b      	adds	r3, r7, r1
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c00:	187a      	adds	r2, r7, r1
 8001c02:	23a0      	movs	r3, #160	@ 0xa0
 8001c04:	05db      	lsls	r3, r3, #23
 8001c06:	0011      	movs	r1, r2
 8001c08:	0018      	movs	r0, r3
 8001c0a:	f008 fe60 	bl	800a8ce <LL_GPIO_Init>

  /* ADC1 DMA Init */

  /* ADC1 Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_1, LL_DMAMUX_REQ_ADC1);
 8001c0e:	4b7a      	ldr	r3, [pc, #488]	@ (8001df8 <MX_ADC1_Init+0x380>)
 8001c10:	2205      	movs	r2, #5
 8001c12:	2101      	movs	r1, #1
 8001c14:	0018      	movs	r0, r3
 8001c16:	f7ff fbf3 	bl	8001400 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8001c1a:	4b77      	ldr	r3, [pc, #476]	@ (8001df8 <MX_ADC1_Init+0x380>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	2101      	movs	r1, #1
 8001c20:	0018      	movs	r0, r3
 8001c22:	f7ff fa8f 	bl	8001144 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_LOW);
 8001c26:	4b74      	ldr	r3, [pc, #464]	@ (8001df8 <MX_ADC1_Init+0x380>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	2101      	movs	r1, #1
 8001c2c:	0018      	movs	r0, r3
 8001c2e:	f7ff fb67 	bl	8001300 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_CIRCULAR);
 8001c32:	4b71      	ldr	r3, [pc, #452]	@ (8001df8 <MX_ADC1_Init+0x380>)
 8001c34:	2220      	movs	r2, #32
 8001c36:	2101      	movs	r1, #1
 8001c38:	0018      	movs	r0, r3
 8001c3a:	f7ff faa9 	bl	8001190 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 8001c3e:	4b6e      	ldr	r3, [pc, #440]	@ (8001df8 <MX_ADC1_Init+0x380>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	2101      	movs	r1, #1
 8001c44:	0018      	movs	r0, r3
 8001c46:	f7ff fac7 	bl	80011d8 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 8001c4a:	4b6b      	ldr	r3, [pc, #428]	@ (8001df8 <MX_ADC1_Init+0x380>)
 8001c4c:	2280      	movs	r2, #128	@ 0x80
 8001c4e:	2101      	movs	r1, #1
 8001c50:	0018      	movs	r0, r3
 8001c52:	f7ff fae5 	bl	8001220 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_HALFWORD);
 8001c56:	2380      	movs	r3, #128	@ 0x80
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	4867      	ldr	r0, [pc, #412]	@ (8001df8 <MX_ADC1_Init+0x380>)
 8001c5c:	001a      	movs	r2, r3
 8001c5e:	2101      	movs	r1, #1
 8001c60:	f7ff fb02 	bl	8001268 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_HALFWORD);
 8001c64:	2380      	movs	r3, #128	@ 0x80
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	4863      	ldr	r0, [pc, #396]	@ (8001df8 <MX_ADC1_Init+0x380>)
 8001c6a:	001a      	movs	r2, r3
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	f7ff fb21 	bl	80012b4 <LL_DMA_SetMemorySize>

  /* ADC1 interrupt Init */
  NVIC_SetPriority(ADC1_IRQn, 0);
 8001c72:	2100      	movs	r1, #0
 8001c74:	200c      	movs	r0, #12
 8001c76:	f7ff f869 	bl	8000d4c <__NVIC_SetPriority>
  NVIC_EnableIRQ(ADC1_IRQn);
 8001c7a:	200c      	movs	r0, #12
 8001c7c:	f7ff f84c 	bl	8000d18 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN ADC1_Init 1 */

  /* Set DMA transfer addresses of source and destination */
  LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_1, LL_ADC_DMA_GetRegAddr(ADC1, LL_ADC_DMA_REG_REGULAR_DATA),
 8001c80:	4b5e      	ldr	r3, [pc, #376]	@ (8001dfc <MX_ADC1_Init+0x384>)
 8001c82:	2100      	movs	r1, #0
 8001c84:	0018      	movs	r0, r3
 8001c86:	f7ff f8cf 	bl	8000e28 <LL_ADC_DMA_GetRegAddr>
 8001c8a:	0001      	movs	r1, r0
 8001c8c:	4b5c      	ldr	r3, [pc, #368]	@ (8001e00 <MX_ADC1_Init+0x388>)
 8001c8e:	485a      	ldr	r0, [pc, #360]	@ (8001df8 <MX_ADC1_Init+0x380>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	9200      	str	r2, [sp, #0]
 8001c94:	000a      	movs	r2, r1
 8001c96:	2101      	movs	r1, #1
 8001c98:	f7ff fb7a 	bl	8001390 <LL_DMA_ConfigAddresses>
		  (uint32_t)&holding_register_database[ADC_0],
		  LL_DMA_DIRECTION_PERIPH_TO_MEMORY);

  /* Set DMA transfer size */
  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_1, 9);
 8001c9c:	4b56      	ldr	r3, [pc, #344]	@ (8001df8 <MX_ADC1_Init+0x380>)
 8001c9e:	2209      	movs	r2, #9
 8001ca0:	2101      	movs	r1, #1
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	f7ff fb52 	bl	800134c <LL_DMA_SetDataLength>

  /* Enable DMA transfer interruption: transfer complete */
  LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_1);
 8001ca8:	4b53      	ldr	r3, [pc, #332]	@ (8001df8 <MX_ADC1_Init+0x380>)
 8001caa:	2101      	movs	r1, #1
 8001cac:	0018      	movs	r0, r3
 8001cae:	f7ff fbc5 	bl	800143c <LL_DMA_EnableIT_TC>

  /* Enable DMA transfer interruption: transfer half complete */
  LL_DMA_EnableIT_HT(DMA1, LL_DMA_CHANNEL_1);
 8001cb2:	4b51      	ldr	r3, [pc, #324]	@ (8001df8 <MX_ADC1_Init+0x380>)
 8001cb4:	2101      	movs	r1, #1
 8001cb6:	0018      	movs	r0, r3
 8001cb8:	f7ff fbe0 	bl	800147c <LL_DMA_EnableIT_HT>

  /* Enable DMA transfer interruption: transfer error */
  LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_1);
 8001cbc:	4b4e      	ldr	r3, [pc, #312]	@ (8001df8 <MX_ADC1_Init+0x380>)
 8001cbe:	2101      	movs	r1, #1
 8001cc0:	0018      	movs	r0, r3
 8001cc2:	f7ff fbfb 	bl	80014bc <LL_DMA_EnableIT_TE>

  /* Enable the DMA transfer */
  LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_1);
 8001cc6:	4b4c      	ldr	r3, [pc, #304]	@ (8001df8 <MX_ADC1_Init+0x380>)
 8001cc8:	2101      	movs	r1, #1
 8001cca:	0018      	movs	r0, r3
 8001ccc:	f7ff fa1a 	bl	8001104 <LL_DMA_EnableChannel>
   #define ADC_CHANNEL_CONF_RDY_TIMEOUT_MS ( 1U)
   #if (USE_TIMEOUT == 1)
   uint32_t Timeout ; /* Variable used for Timeout management */
   #endif /* USE_TIMEOUT */

  ADC_InitStruct.Clock = LL_ADC_CLOCK_SYNC_PCLK_DIV2;
 8001cd0:	2150      	movs	r1, #80	@ 0x50
 8001cd2:	187b      	adds	r3, r7, r1
 8001cd4:	2280      	movs	r2, #128	@ 0x80
 8001cd6:	05d2      	lsls	r2, r2, #23
 8001cd8:	601a      	str	r2, [r3, #0]
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8001cda:	187b      	adds	r3, r7, r1
 8001cdc:	2200      	movs	r2, #0
 8001cde:	605a      	str	r2, [r3, #4]
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8001ce0:	187b      	adds	r3, r7, r1
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	609a      	str	r2, [r3, #8]
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8001ce6:	187b      	adds	r3, r7, r1
 8001ce8:	2200      	movs	r2, #0
 8001cea:	60da      	str	r2, [r3, #12]
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8001cec:	187b      	adds	r3, r7, r1
 8001cee:	4a43      	ldr	r2, [pc, #268]	@ (8001dfc <MX_ADC1_Init+0x384>)
 8001cf0:	0019      	movs	r1, r3
 8001cf2:	0010      	movs	r0, r2
 8001cf4:	f008 fc98 	bl	800a628 <LL_ADC_Init>
  LL_ADC_REG_SetSequencerConfigurable(ADC1, LL_ADC_REG_SEQ_FIXED);
 8001cf8:	4b40      	ldr	r3, [pc, #256]	@ (8001dfc <MX_ADC1_Init+0x384>)
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	0018      	movs	r0, r3
 8001cfe:	f7ff f8d1 	bl	8000ea4 <LL_ADC_REG_SetSequencerConfigurable>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8001d02:	2138      	movs	r1, #56	@ 0x38
 8001d04:	187b      	adds	r3, r7, r1
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]
  ADC_REG_InitStruct.SequencerLength = 0;
 8001d0a:	187b      	adds	r3, r7, r1
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	605a      	str	r2, [r3, #4]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8001d10:	187b      	adds	r3, r7, r1
 8001d12:	2200      	movs	r2, #0
 8001d14:	609a      	str	r2, [r3, #8]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 8001d16:	187b      	adds	r3, r7, r1
 8001d18:	2280      	movs	r2, #128	@ 0x80
 8001d1a:	0192      	lsls	r2, r2, #6
 8001d1c:	60da      	str	r2, [r3, #12]
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 8001d1e:	187b      	adds	r3, r7, r1
 8001d20:	2203      	movs	r2, #3
 8001d22:	611a      	str	r2, [r3, #16]
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8001d24:	187b      	adds	r3, r7, r1
 8001d26:	2200      	movs	r2, #0
 8001d28:	615a      	str	r2, [r3, #20]
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8001d2a:	187b      	adds	r3, r7, r1
 8001d2c:	4a33      	ldr	r2, [pc, #204]	@ (8001dfc <MX_ADC1_Init+0x384>)
 8001d2e:	0019      	movs	r1, r3
 8001d30:	0010      	movs	r0, r2
 8001d32:	f008 fcaf 	bl	800a694 <LL_ADC_REG_Init>
  LL_ADC_REG_SetSequencerScanDirection(ADC1, LL_ADC_REG_SEQ_SCAN_DIR_FORWARD);
 8001d36:	4b31      	ldr	r3, [pc, #196]	@ (8001dfc <MX_ADC1_Init+0x384>)
 8001d38:	2100      	movs	r1, #0
 8001d3a:	0018      	movs	r0, r3
 8001d3c:	f7ff f8c6 	bl	8000ecc <LL_ADC_REG_SetSequencerScanDirection>
  LL_ADC_SetOverSamplingScope(ADC1, LL_ADC_OVS_DISABLE);
 8001d40:	4b2e      	ldr	r3, [pc, #184]	@ (8001dfc <MX_ADC1_Init+0x384>)
 8001d42:	2100      	movs	r1, #0
 8001d44:	0018      	movs	r0, r3
 8001d46:	f7ff f8e4 	bl	8000f12 <LL_ADC_SetOverSamplingScope>
  LL_ADC_SetTriggerFrequencyMode(ADC1, LL_ADC_CLOCK_FREQ_MODE_HIGH);
 8001d4a:	4b2c      	ldr	r3, [pc, #176]	@ (8001dfc <MX_ADC1_Init+0x384>)
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	0018      	movs	r0, r3
 8001d50:	f7ff f876 	bl	8000e40 <LL_ADC_SetTriggerFrequencyMode>
  LL_ADC_REG_SetSequencerChAdd(ADC1, LL_ADC_CHANNEL_0|LL_ADC_CHANNEL_1
 8001d54:	4a2b      	ldr	r2, [pc, #172]	@ (8001e04 <MX_ADC1_Init+0x38c>)
 8001d56:	4b29      	ldr	r3, [pc, #164]	@ (8001dfc <MX_ADC1_Init+0x384>)
 8001d58:	0011      	movs	r1, r2
 8001d5a:	0018      	movs	r0, r3
 8001d5c:	f7ff f8c8 	bl	8000ef0 <LL_ADC_REG_SetSequencerChAdd>
                              |LL_ADC_CHANNEL_6|LL_ADC_CHANNEL_7
                              |LL_ADC_CHANNEL_8);

   /* Poll for ADC channel configuration ready */
   #if (USE_TIMEOUT == 1)
   Timeout = ADC_CHANNEL_CONF_RDY_TIMEOUT_MS;
 8001d60:	2301      	movs	r3, #1
 8001d62:	667b      	str	r3, [r7, #100]	@ 0x64
   #endif /* USE_TIMEOUT */
   while (LL_ADC_IsActiveFlag_CCRDY(ADC1) == 0)
 8001d64:	e00a      	b.n	8001d7c <MX_ADC1_Init+0x304>
     {
   #if (USE_TIMEOUT == 1)
   /* Check Systick counter flag to decrement the time-out value */
   if (LL_SYSTICK_IsActiveCounterFlag())
 8001d66:	f7ff f9b9 	bl	80010dc <LL_SYSTICK_IsActiveCounterFlag>
 8001d6a:	1e03      	subs	r3, r0, #0
 8001d6c:	d006      	beq.n	8001d7c <MX_ADC1_Init+0x304>
     {
   if(Timeout-- == 0)
 8001d6e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001d70:	1e5a      	subs	r2, r3, #1
 8001d72:	667a      	str	r2, [r7, #100]	@ 0x64
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d101      	bne.n	8001d7c <MX_ADC1_Init+0x304>
         {
   Error_Handler();
 8001d78:	f000 faf0 	bl	800235c <Error_Handler>
   while (LL_ADC_IsActiveFlag_CCRDY(ADC1) == 0)
 8001d7c:	4b1f      	ldr	r3, [pc, #124]	@ (8001dfc <MX_ADC1_Init+0x384>)
 8001d7e:	0018      	movs	r0, r3
 8001d80:	f7ff f933 	bl	8000fea <LL_ADC_IsActiveFlag_CCRDY>
 8001d84:	1e03      	subs	r3, r0, #0
 8001d86:	d0ee      	beq.n	8001d66 <MX_ADC1_Init+0x2ee>
         }
     }
   #endif /* USE_TIMEOUT */
     }
   /* Clear flag ADC channel configuration ready */
   LL_ADC_ClearFlag_CCRDY(ADC1);
 8001d88:	4b1c      	ldr	r3, [pc, #112]	@ (8001dfc <MX_ADC1_Init+0x384>)
 8001d8a:	0018      	movs	r0, r3
 8001d8c:	f7ff f941 	bl	8001012 <LL_ADC_ClearFlag_CCRDY>
  LL_ADC_SetSamplingTimeCommonChannels(ADC1, LL_ADC_SAMPLINGTIME_COMMON_1, LL_ADC_SAMPLINGTIME_160CYCLES_5);
 8001d90:	4b1a      	ldr	r3, [pc, #104]	@ (8001dfc <MX_ADC1_Init+0x384>)
 8001d92:	2207      	movs	r2, #7
 8001d94:	2100      	movs	r1, #0
 8001d96:	0018      	movs	r0, r3
 8001d98:	f7ff f866 	bl	8000e68 <LL_ADC_SetSamplingTimeCommonChannels>
  LL_ADC_DisableIT_EOC(ADC1);
 8001d9c:	4b17      	ldr	r3, [pc, #92]	@ (8001dfc <MX_ADC1_Init+0x384>)
 8001d9e:	0018      	movs	r0, r3
 8001da0:	f7ff f951 	bl	8001046 <LL_ADC_DisableIT_EOC>
  LL_ADC_DisableIT_EOS(ADC1);
 8001da4:	4b15      	ldr	r3, [pc, #84]	@ (8001dfc <MX_ADC1_Init+0x384>)
 8001da6:	0018      	movs	r0, r3
 8001da8:	f7ff f95c 	bl	8001064 <LL_ADC_DisableIT_EOS>

   /* Enable ADC internal voltage regulator */
   LL_ADC_EnableInternalRegulator(ADC1);
 8001dac:	4b13      	ldr	r3, [pc, #76]	@ (8001dfc <MX_ADC1_Init+0x384>)
 8001dae:	0018      	movs	r0, r3
 8001db0:	f7ff f8c2 	bl	8000f38 <LL_ADC_EnableInternalRegulator>
   /* Note: Variable divided by 2 to compensate partially */
   /* CPU processing cycles (depends on compilation optimization). */
   /* Note: If system core clock frequency is below 200kHz, wait time */
   /* is only a few CPU processing cycles. */
   uint32_t wait_loop_index;
   wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8001db4:	4b14      	ldr	r3, [pc, #80]	@ (8001e08 <MX_ADC1_Init+0x390>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4914      	ldr	r1, [pc, #80]	@ (8001e0c <MX_ADC1_Init+0x394>)
 8001dba:	0018      	movs	r0, r3
 8001dbc:	f7fe f9a4 	bl	8000108 <__udivsi3>
 8001dc0:	0003      	movs	r3, r0
 8001dc2:	001a      	movs	r2, r3
 8001dc4:	0013      	movs	r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	189b      	adds	r3, r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	210a      	movs	r1, #10
 8001dce:	0018      	movs	r0, r3
 8001dd0:	f7fe f99a 	bl	8000108 <__udivsi3>
 8001dd4:	0003      	movs	r3, r0
 8001dd6:	663b      	str	r3, [r7, #96]	@ 0x60
   while(wait_loop_index != 0)
 8001dd8:	e002      	b.n	8001de0 <MX_ADC1_Init+0x368>
     {
   wait_loop_index--;
 8001dda:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	663b      	str	r3, [r7, #96]	@ 0x60
   while(wait_loop_index != 0)
 8001de0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1f9      	bne.n	8001dda <MX_ADC1_Init+0x362>
     }
  /* USER CODE BEGIN ADC1_Init 2 */

   LL_ADC_EnableIT_OVR(ADC1);
 8001de6:	4b05      	ldr	r3, [pc, #20]	@ (8001dfc <MX_ADC1_Init+0x384>)
 8001de8:	0018      	movs	r0, r3
 8001dea:	f7ff f91e 	bl	800102a <LL_ADC_EnableIT_OVR>

  /* USER CODE END ADC1_Init 2 */

}
 8001dee:	46c0      	nop			@ (mov r8, r8)
 8001df0:	46bd      	mov	sp, r7
 8001df2:	b01b      	add	sp, #108	@ 0x6c
 8001df4:	bd90      	pop	{r4, r7, pc}
 8001df6:	46c0      	nop			@ (mov r8, r8)
 8001df8:	40020000 	.word	0x40020000
 8001dfc:	40012400 	.word	0x40012400
 8001e00:	20000022 	.word	0x20000022
 8001e04:	3c0001ff 	.word	0x3c0001ff
 8001e08:	200000b4 	.word	0x200000b4
 8001e0c:	00030d40 	.word	0x00030d40

08001e10 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e14:	4b1b      	ldr	r3, [pc, #108]	@ (8001e84 <MX_I2C1_Init+0x74>)
 8001e16:	4a1c      	ldr	r2, [pc, #112]	@ (8001e88 <MX_I2C1_Init+0x78>)
 8001e18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010020B;
 8001e1a:	4b1a      	ldr	r3, [pc, #104]	@ (8001e84 <MX_I2C1_Init+0x74>)
 8001e1c:	4a1b      	ldr	r2, [pc, #108]	@ (8001e8c <MX_I2C1_Init+0x7c>)
 8001e1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001e20:	4b18      	ldr	r3, [pc, #96]	@ (8001e84 <MX_I2C1_Init+0x74>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e26:	4b17      	ldr	r3, [pc, #92]	@ (8001e84 <MX_I2C1_Init+0x74>)
 8001e28:	2201      	movs	r2, #1
 8001e2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e2c:	4b15      	ldr	r3, [pc, #84]	@ (8001e84 <MX_I2C1_Init+0x74>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001e32:	4b14      	ldr	r3, [pc, #80]	@ (8001e84 <MX_I2C1_Init+0x74>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001e38:	4b12      	ldr	r3, [pc, #72]	@ (8001e84 <MX_I2C1_Init+0x74>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e3e:	4b11      	ldr	r3, [pc, #68]	@ (8001e84 <MX_I2C1_Init+0x74>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e44:	4b0f      	ldr	r3, [pc, #60]	@ (8001e84 <MX_I2C1_Init+0x74>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001e84 <MX_I2C1_Init+0x74>)
 8001e4c:	0018      	movs	r0, r3
 8001e4e:	f002 ff01 	bl	8004c54 <HAL_I2C_Init>
 8001e52:	1e03      	subs	r3, r0, #0
 8001e54:	d001      	beq.n	8001e5a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001e56:	f000 fa81 	bl	800235c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e84 <MX_I2C1_Init+0x74>)
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	0018      	movs	r0, r3
 8001e60:	f005 f82c 	bl	8006ebc <HAL_I2CEx_ConfigAnalogFilter>
 8001e64:	1e03      	subs	r3, r0, #0
 8001e66:	d001      	beq.n	8001e6c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001e68:	f000 fa78 	bl	800235c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001e6c:	4b05      	ldr	r3, [pc, #20]	@ (8001e84 <MX_I2C1_Init+0x74>)
 8001e6e:	2100      	movs	r1, #0
 8001e70:	0018      	movs	r0, r3
 8001e72:	f005 f86f 	bl	8006f54 <HAL_I2CEx_ConfigDigitalFilter>
 8001e76:	1e03      	subs	r3, r0, #0
 8001e78:	d001      	beq.n	8001e7e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001e7a:	f000 fa6f 	bl	800235c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e7e:	46c0      	nop			@ (mov r8, r8)
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	200002ec 	.word	0x200002ec
 8001e88:	40005400 	.word	0x40005400
 8001e8c:	0010020b 	.word	0x0010020b

08001e90 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001e94:	4b1b      	ldr	r3, [pc, #108]	@ (8001f04 <MX_SPI1_Init+0x74>)
 8001e96:	4a1c      	ldr	r2, [pc, #112]	@ (8001f08 <MX_SPI1_Init+0x78>)
 8001e98:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e9a:	4b1a      	ldr	r3, [pc, #104]	@ (8001f04 <MX_SPI1_Init+0x74>)
 8001e9c:	2282      	movs	r2, #130	@ 0x82
 8001e9e:	0052      	lsls	r2, r2, #1
 8001ea0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ea2:	4b18      	ldr	r3, [pc, #96]	@ (8001f04 <MX_SPI1_Init+0x74>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ea8:	4b16      	ldr	r3, [pc, #88]	@ (8001f04 <MX_SPI1_Init+0x74>)
 8001eaa:	22e0      	movs	r2, #224	@ 0xe0
 8001eac:	00d2      	lsls	r2, r2, #3
 8001eae:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001eb0:	4b14      	ldr	r3, [pc, #80]	@ (8001f04 <MX_SPI1_Init+0x74>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001eb6:	4b13      	ldr	r3, [pc, #76]	@ (8001f04 <MX_SPI1_Init+0x74>)
 8001eb8:	2201      	movs	r2, #1
 8001eba:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ebc:	4b11      	ldr	r3, [pc, #68]	@ (8001f04 <MX_SPI1_Init+0x74>)
 8001ebe:	2280      	movs	r2, #128	@ 0x80
 8001ec0:	0092      	lsls	r2, r2, #2
 8001ec2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001ec4:	4b0f      	ldr	r3, [pc, #60]	@ (8001f04 <MX_SPI1_Init+0x74>)
 8001ec6:	2210      	movs	r2, #16
 8001ec8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001eca:	4b0e      	ldr	r3, [pc, #56]	@ (8001f04 <MX_SPI1_Init+0x74>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8001f04 <MX_SPI1_Init+0x74>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ed6:	4b0b      	ldr	r3, [pc, #44]	@ (8001f04 <MX_SPI1_Init+0x74>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001edc:	4b09      	ldr	r3, [pc, #36]	@ (8001f04 <MX_SPI1_Init+0x74>)
 8001ede:	2207      	movs	r2, #7
 8001ee0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001ee2:	4b08      	ldr	r3, [pc, #32]	@ (8001f04 <MX_SPI1_Init+0x74>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001ee8:	4b06      	ldr	r3, [pc, #24]	@ (8001f04 <MX_SPI1_Init+0x74>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001eee:	4b05      	ldr	r3, [pc, #20]	@ (8001f04 <MX_SPI1_Init+0x74>)
 8001ef0:	0018      	movs	r0, r3
 8001ef2:	f005 fd43 	bl	800797c <HAL_SPI_Init>
 8001ef6:	1e03      	subs	r3, r0, #0
 8001ef8:	d001      	beq.n	8001efe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001efa:	f000 fa2f 	bl	800235c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001efe:	46c0      	nop			@ (mov r8, r8)
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	200003f8 	.word	0x200003f8
 8001f08:	40013000 	.word	0x40013000

08001f0c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b098      	sub	sp, #96	@ 0x60
 8001f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f12:	2354      	movs	r3, #84	@ 0x54
 8001f14:	18fb      	adds	r3, r7, r3
 8001f16:	0018      	movs	r0, r3
 8001f18:	230c      	movs	r3, #12
 8001f1a:	001a      	movs	r2, r3
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	f008 fd31 	bl	800a984 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f22:	2338      	movs	r3, #56	@ 0x38
 8001f24:	18fb      	adds	r3, r7, r3
 8001f26:	0018      	movs	r0, r3
 8001f28:	231c      	movs	r3, #28
 8001f2a:	001a      	movs	r2, r3
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	f008 fd29 	bl	800a984 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f32:	1d3b      	adds	r3, r7, #4
 8001f34:	0018      	movs	r0, r3
 8001f36:	2334      	movs	r3, #52	@ 0x34
 8001f38:	001a      	movs	r2, r3
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	f008 fd22 	bl	800a984 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f40:	4b45      	ldr	r3, [pc, #276]	@ (8002058 <MX_TIM1_Init+0x14c>)
 8001f42:	4a46      	ldr	r2, [pc, #280]	@ (800205c <MX_TIM1_Init+0x150>)
 8001f44:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 8001f46:	4b44      	ldr	r3, [pc, #272]	@ (8002058 <MX_TIM1_Init+0x14c>)
 8001f48:	224f      	movs	r2, #79	@ 0x4f
 8001f4a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f4c:	4b42      	ldr	r3, [pc, #264]	@ (8002058 <MX_TIM1_Init+0x14c>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8001f52:	4b41      	ldr	r3, [pc, #260]	@ (8002058 <MX_TIM1_Init+0x14c>)
 8001f54:	2263      	movs	r2, #99	@ 0x63
 8001f56:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f58:	4b3f      	ldr	r3, [pc, #252]	@ (8002058 <MX_TIM1_Init+0x14c>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f5e:	4b3e      	ldr	r3, [pc, #248]	@ (8002058 <MX_TIM1_Init+0x14c>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f64:	4b3c      	ldr	r3, [pc, #240]	@ (8002058 <MX_TIM1_Init+0x14c>)
 8001f66:	2280      	movs	r2, #128	@ 0x80
 8001f68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001f6a:	4b3b      	ldr	r3, [pc, #236]	@ (8002058 <MX_TIM1_Init+0x14c>)
 8001f6c:	0018      	movs	r0, r3
 8001f6e:	f005 fef5 	bl	8007d5c <HAL_TIM_PWM_Init>
 8001f72:	1e03      	subs	r3, r0, #0
 8001f74:	d001      	beq.n	8001f7a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001f76:	f000 f9f1 	bl	800235c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f7a:	2154      	movs	r1, #84	@ 0x54
 8001f7c:	187b      	adds	r3, r7, r1
 8001f7e:	2200      	movs	r2, #0
 8001f80:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001f82:	187b      	adds	r3, r7, r1
 8001f84:	2200      	movs	r2, #0
 8001f86:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f88:	187b      	adds	r3, r7, r1
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f8e:	187a      	adds	r2, r7, r1
 8001f90:	4b31      	ldr	r3, [pc, #196]	@ (8002058 <MX_TIM1_Init+0x14c>)
 8001f92:	0011      	movs	r1, r2
 8001f94:	0018      	movs	r0, r3
 8001f96:	f006 fc81 	bl	800889c <HAL_TIMEx_MasterConfigSynchronization>
 8001f9a:	1e03      	subs	r3, r0, #0
 8001f9c:	d001      	beq.n	8001fa2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001f9e:	f000 f9dd 	bl	800235c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fa2:	2138      	movs	r1, #56	@ 0x38
 8001fa4:	187b      	adds	r3, r7, r1
 8001fa6:	2260      	movs	r2, #96	@ 0x60
 8001fa8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001faa:	187b      	adds	r3, r7, r1
 8001fac:	2200      	movs	r2, #0
 8001fae:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fb0:	187b      	adds	r3, r7, r1
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001fb6:	187b      	adds	r3, r7, r1
 8001fb8:	2200      	movs	r2, #0
 8001fba:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fbc:	187b      	adds	r3, r7, r1
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001fc2:	187b      	adds	r3, r7, r1
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001fc8:	187b      	adds	r3, r7, r1
 8001fca:	2200      	movs	r2, #0
 8001fcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fce:	1879      	adds	r1, r7, r1
 8001fd0:	4b21      	ldr	r3, [pc, #132]	@ (8002058 <MX_TIM1_Init+0x14c>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	0018      	movs	r0, r3
 8001fd6:	f006 f821 	bl	800801c <HAL_TIM_PWM_ConfigChannel>
 8001fda:	1e03      	subs	r3, r0, #0
 8001fdc:	d001      	beq.n	8001fe2 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001fde:	f000 f9bd 	bl	800235c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001fe2:	1d3b      	adds	r3, r7, #4
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001fe8:	1d3b      	adds	r3, r7, #4
 8001fea:	2200      	movs	r2, #0
 8001fec:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001fee:	1d3b      	adds	r3, r7, #4
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ff4:	1d3b      	adds	r3, r7, #4
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ffa:	1d3b      	adds	r3, r7, #4
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002000:	1d3b      	adds	r3, r7, #4
 8002002:	2280      	movs	r2, #128	@ 0x80
 8002004:	0192      	lsls	r2, r2, #6
 8002006:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002008:	1d3b      	adds	r3, r7, #4
 800200a:	2200      	movs	r2, #0
 800200c:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800200e:	1d3b      	adds	r3, r7, #4
 8002010:	2200      	movs	r2, #0
 8002012:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002014:	1d3b      	adds	r3, r7, #4
 8002016:	2200      	movs	r2, #0
 8002018:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800201a:	1d3b      	adds	r3, r7, #4
 800201c:	2280      	movs	r2, #128	@ 0x80
 800201e:	0492      	lsls	r2, r2, #18
 8002020:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002022:	1d3b      	adds	r3, r7, #4
 8002024:	2200      	movs	r2, #0
 8002026:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002028:	1d3b      	adds	r3, r7, #4
 800202a:	2200      	movs	r2, #0
 800202c:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800202e:	1d3b      	adds	r3, r7, #4
 8002030:	2200      	movs	r2, #0
 8002032:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002034:	1d3a      	adds	r2, r7, #4
 8002036:	4b08      	ldr	r3, [pc, #32]	@ (8002058 <MX_TIM1_Init+0x14c>)
 8002038:	0011      	movs	r1, r2
 800203a:	0018      	movs	r0, r3
 800203c:	f006 fc96 	bl	800896c <HAL_TIMEx_ConfigBreakDeadTime>
 8002040:	1e03      	subs	r3, r0, #0
 8002042:	d001      	beq.n	8002048 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8002044:	f000 f98a 	bl	800235c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002048:	4b03      	ldr	r3, [pc, #12]	@ (8002058 <MX_TIM1_Init+0x14c>)
 800204a:	0018      	movs	r0, r3
 800204c:	f001 fabe 	bl	80035cc <HAL_TIM_MspPostInit>

}
 8002050:	46c0      	nop			@ (mov r8, r8)
 8002052:	46bd      	mov	sp, r7
 8002054:	b018      	add	sp, #96	@ 0x60
 8002056:	bd80      	pop	{r7, pc}
 8002058:	2000045c 	.word	0x2000045c
 800205c:	40012c00 	.word	0x40012c00

08002060 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002064:	4b0e      	ldr	r3, [pc, #56]	@ (80020a0 <MX_TIM14_Init+0x40>)
 8002066:	4a0f      	ldr	r2, [pc, #60]	@ (80020a4 <MX_TIM14_Init+0x44>)
 8002068:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 800 - 1 ;
 800206a:	4b0d      	ldr	r3, [pc, #52]	@ (80020a0 <MX_TIM14_Init+0x40>)
 800206c:	4a0e      	ldr	r2, [pc, #56]	@ (80020a8 <MX_TIM14_Init+0x48>)
 800206e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002070:	4b0b      	ldr	r3, [pc, #44]	@ (80020a0 <MX_TIM14_Init+0x40>)
 8002072:	2200      	movs	r2, #0
 8002074:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000 - 1;
 8002076:	4b0a      	ldr	r3, [pc, #40]	@ (80020a0 <MX_TIM14_Init+0x40>)
 8002078:	4a0c      	ldr	r2, [pc, #48]	@ (80020ac <MX_TIM14_Init+0x4c>)
 800207a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800207c:	4b08      	ldr	r3, [pc, #32]	@ (80020a0 <MX_TIM14_Init+0x40>)
 800207e:	2200      	movs	r2, #0
 8002080:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002082:	4b07      	ldr	r3, [pc, #28]	@ (80020a0 <MX_TIM14_Init+0x40>)
 8002084:	2200      	movs	r2, #0
 8002086:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002088:	4b05      	ldr	r3, [pc, #20]	@ (80020a0 <MX_TIM14_Init+0x40>)
 800208a:	0018      	movs	r0, r3
 800208c:	f005 fd2e 	bl	8007aec <HAL_TIM_Base_Init>
 8002090:	1e03      	subs	r3, r0, #0
 8002092:	d001      	beq.n	8002098 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8002094:	f000 f962 	bl	800235c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8002098:	46c0      	nop			@ (mov r8, r8)
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	46c0      	nop			@ (mov r8, r8)
 80020a0:	200004a8 	.word	0x200004a8
 80020a4:	40002000 	.word	0x40002000
 80020a8:	0000031f 	.word	0x0000031f
 80020ac:	0000270f 	.word	0x0000270f

080020b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80020b4:	4b24      	ldr	r3, [pc, #144]	@ (8002148 <MX_USART1_UART_Init+0x98>)
 80020b6:	4a25      	ldr	r2, [pc, #148]	@ (800214c <MX_USART1_UART_Init+0x9c>)
 80020b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80020ba:	4b23      	ldr	r3, [pc, #140]	@ (8002148 <MX_USART1_UART_Init+0x98>)
 80020bc:	2296      	movs	r2, #150	@ 0x96
 80020be:	0192      	lsls	r2, r2, #6
 80020c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020c2:	4b21      	ldr	r3, [pc, #132]	@ (8002148 <MX_USART1_UART_Init+0x98>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80020c8:	4b1f      	ldr	r3, [pc, #124]	@ (8002148 <MX_USART1_UART_Init+0x98>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80020ce:	4b1e      	ldr	r3, [pc, #120]	@ (8002148 <MX_USART1_UART_Init+0x98>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80020d4:	4b1c      	ldr	r3, [pc, #112]	@ (8002148 <MX_USART1_UART_Init+0x98>)
 80020d6:	220c      	movs	r2, #12
 80020d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020da:	4b1b      	ldr	r3, [pc, #108]	@ (8002148 <MX_USART1_UART_Init+0x98>)
 80020dc:	2200      	movs	r2, #0
 80020de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80020e0:	4b19      	ldr	r3, [pc, #100]	@ (8002148 <MX_USART1_UART_Init+0x98>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020e6:	4b18      	ldr	r3, [pc, #96]	@ (8002148 <MX_USART1_UART_Init+0x98>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80020ec:	4b16      	ldr	r3, [pc, #88]	@ (8002148 <MX_USART1_UART_Init+0x98>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020f2:	4b15      	ldr	r3, [pc, #84]	@ (8002148 <MX_USART1_UART_Init+0x98>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80020f8:	4813      	ldr	r0, [pc, #76]	@ (8002148 <MX_USART1_UART_Init+0x98>)
 80020fa:	2300      	movs	r3, #0
 80020fc:	2200      	movs	r2, #0
 80020fe:	2100      	movs	r1, #0
 8002100:	f008 f858 	bl	800a1b4 <HAL_RS485Ex_Init>
 8002104:	1e03      	subs	r3, r0, #0
 8002106:	d001      	beq.n	800210c <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 8002108:	f000 f928 	bl	800235c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800210c:	4b0e      	ldr	r3, [pc, #56]	@ (8002148 <MX_USART1_UART_Init+0x98>)
 800210e:	2100      	movs	r1, #0
 8002110:	0018      	movs	r0, r3
 8002112:	f008 f913 	bl	800a33c <HAL_UARTEx_SetTxFifoThreshold>
 8002116:	1e03      	subs	r3, r0, #0
 8002118:	d001      	beq.n	800211e <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 800211a:	f000 f91f 	bl	800235c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800211e:	4b0a      	ldr	r3, [pc, #40]	@ (8002148 <MX_USART1_UART_Init+0x98>)
 8002120:	2100      	movs	r1, #0
 8002122:	0018      	movs	r0, r3
 8002124:	f008 f94a 	bl	800a3bc <HAL_UARTEx_SetRxFifoThreshold>
 8002128:	1e03      	subs	r3, r0, #0
 800212a:	d001      	beq.n	8002130 <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 800212c:	f000 f916 	bl	800235c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002130:	4b05      	ldr	r3, [pc, #20]	@ (8002148 <MX_USART1_UART_Init+0x98>)
 8002132:	0018      	movs	r0, r3
 8002134:	f008 f8c8 	bl	800a2c8 <HAL_UARTEx_DisableFifoMode>
 8002138:	1e03      	subs	r3, r0, #0
 800213a:	d001      	beq.n	8002140 <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 800213c:	f000 f90e 	bl	800235c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002140:	46c0      	nop			@ (mov r8, r8)
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	46c0      	nop			@ (mov r8, r8)
 8002148:	200004f4 	.word	0x200004f4
 800214c:	40013800 	.word	0x40013800

08002150 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002156:	4b13      	ldr	r3, [pc, #76]	@ (80021a4 <MX_DMA_Init+0x54>)
 8002158:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800215a:	4b12      	ldr	r3, [pc, #72]	@ (80021a4 <MX_DMA_Init+0x54>)
 800215c:	2101      	movs	r1, #1
 800215e:	430a      	orrs	r2, r1
 8002160:	639a      	str	r2, [r3, #56]	@ 0x38
 8002162:	4b10      	ldr	r3, [pc, #64]	@ (80021a4 <MX_DMA_Init+0x54>)
 8002164:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002166:	2201      	movs	r2, #1
 8002168:	4013      	ands	r3, r2
 800216a:	607b      	str	r3, [r7, #4]
 800216c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, 0);
 800216e:	2100      	movs	r1, #0
 8002170:	2009      	movs	r0, #9
 8002172:	f7fe fdeb 	bl	8000d4c <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002176:	2009      	movs	r0, #9
 8002178:	f7fe fdce 	bl	8000d18 <__NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800217c:	2200      	movs	r2, #0
 800217e:	2100      	movs	r1, #0
 8002180:	200a      	movs	r0, #10
 8002182:	f001 feaf 	bl	8003ee4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8002186:	200a      	movs	r0, #10
 8002188:	f001 fec1 	bl	8003f0e <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_DMA1_CH4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_DMA1_CH4_5_IRQn, 0, 0);
 800218c:	2200      	movs	r2, #0
 800218e:	2100      	movs	r1, #0
 8002190:	200b      	movs	r0, #11
 8002192:	f001 fea7 	bl	8003ee4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_DMA1_CH4_5_IRQn);
 8002196:	200b      	movs	r0, #11
 8002198:	f001 feb9 	bl	8003f0e <HAL_NVIC_EnableIRQ>

}
 800219c:	46c0      	nop			@ (mov r8, r8)
 800219e:	46bd      	mov	sp, r7
 80021a0:	b002      	add	sp, #8
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	40021000 	.word	0x40021000

080021a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021a8:	b590      	push	{r4, r7, lr}
 80021aa:	b08b      	sub	sp, #44	@ 0x2c
 80021ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ae:	2414      	movs	r4, #20
 80021b0:	193b      	adds	r3, r7, r4
 80021b2:	0018      	movs	r0, r3
 80021b4:	2314      	movs	r3, #20
 80021b6:	001a      	movs	r2, r3
 80021b8:	2100      	movs	r1, #0
 80021ba:	f008 fbe3 	bl	800a984 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021be:	4b62      	ldr	r3, [pc, #392]	@ (8002348 <MX_GPIO_Init+0x1a0>)
 80021c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021c2:	4b61      	ldr	r3, [pc, #388]	@ (8002348 <MX_GPIO_Init+0x1a0>)
 80021c4:	2104      	movs	r1, #4
 80021c6:	430a      	orrs	r2, r1
 80021c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80021ca:	4b5f      	ldr	r3, [pc, #380]	@ (8002348 <MX_GPIO_Init+0x1a0>)
 80021cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021ce:	2204      	movs	r2, #4
 80021d0:	4013      	ands	r3, r2
 80021d2:	613b      	str	r3, [r7, #16]
 80021d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80021d6:	4b5c      	ldr	r3, [pc, #368]	@ (8002348 <MX_GPIO_Init+0x1a0>)
 80021d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021da:	4b5b      	ldr	r3, [pc, #364]	@ (8002348 <MX_GPIO_Init+0x1a0>)
 80021dc:	2120      	movs	r1, #32
 80021de:	430a      	orrs	r2, r1
 80021e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80021e2:	4b59      	ldr	r3, [pc, #356]	@ (8002348 <MX_GPIO_Init+0x1a0>)
 80021e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021e6:	2220      	movs	r2, #32
 80021e8:	4013      	ands	r3, r2
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ee:	4b56      	ldr	r3, [pc, #344]	@ (8002348 <MX_GPIO_Init+0x1a0>)
 80021f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021f2:	4b55      	ldr	r3, [pc, #340]	@ (8002348 <MX_GPIO_Init+0x1a0>)
 80021f4:	2101      	movs	r1, #1
 80021f6:	430a      	orrs	r2, r1
 80021f8:	635a      	str	r2, [r3, #52]	@ 0x34
 80021fa:	4b53      	ldr	r3, [pc, #332]	@ (8002348 <MX_GPIO_Init+0x1a0>)
 80021fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021fe:	2201      	movs	r2, #1
 8002200:	4013      	ands	r3, r2
 8002202:	60bb      	str	r3, [r7, #8]
 8002204:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002206:	4b50      	ldr	r3, [pc, #320]	@ (8002348 <MX_GPIO_Init+0x1a0>)
 8002208:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800220a:	4b4f      	ldr	r3, [pc, #316]	@ (8002348 <MX_GPIO_Init+0x1a0>)
 800220c:	2102      	movs	r1, #2
 800220e:	430a      	orrs	r2, r1
 8002210:	635a      	str	r2, [r3, #52]	@ 0x34
 8002212:	4b4d      	ldr	r3, [pc, #308]	@ (8002348 <MX_GPIO_Init+0x1a0>)
 8002214:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002216:	2202      	movs	r2, #2
 8002218:	4013      	ands	r3, r2
 800221a:	607b      	str	r3, [r7, #4]
 800221c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800221e:	4b4a      	ldr	r3, [pc, #296]	@ (8002348 <MX_GPIO_Init+0x1a0>)
 8002220:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002222:	4b49      	ldr	r3, [pc, #292]	@ (8002348 <MX_GPIO_Init+0x1a0>)
 8002224:	2108      	movs	r1, #8
 8002226:	430a      	orrs	r2, r1
 8002228:	635a      	str	r2, [r3, #52]	@ 0x34
 800222a:	4b47      	ldr	r3, [pc, #284]	@ (8002348 <MX_GPIO_Init+0x1a0>)
 800222c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800222e:	2208      	movs	r2, #8
 8002230:	4013      	ands	r3, r2
 8002232:	603b      	str	r3, [r7, #0]
 8002234:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Actuator_C_EN_GPIO_Port, Actuator_C_EN_Pin, GPIO_PIN_RESET);
 8002236:	4b45      	ldr	r3, [pc, #276]	@ (800234c <MX_GPIO_Init+0x1a4>)
 8002238:	2200      	movs	r2, #0
 800223a:	2101      	movs	r1, #1
 800223c:	0018      	movs	r0, r3
 800223e:	f002 fcb8 	bl	8004bb2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Actuator_A_EN_Pin|Actuator_B_EN_Pin, GPIO_PIN_RESET);
 8002242:	4b43      	ldr	r3, [pc, #268]	@ (8002350 <MX_GPIO_Init+0x1a8>)
 8002244:	2200      	movs	r2, #0
 8002246:	21c0      	movs	r1, #192	@ 0xc0
 8002248:	0018      	movs	r0, r3
 800224a:	f002 fcb2 	bl	8004bb2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_SET);
 800224e:	4b41      	ldr	r3, [pc, #260]	@ (8002354 <MX_GPIO_Init+0x1ac>)
 8002250:	2201      	movs	r2, #1
 8002252:	2101      	movs	r1, #1
 8002254:	0018      	movs	r0, r3
 8002256:	f002 fcac 	bl	8004bb2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Actuator_C_EN_Pin */
  GPIO_InitStruct.Pin = Actuator_C_EN_Pin;
 800225a:	193b      	adds	r3, r7, r4
 800225c:	2201      	movs	r2, #1
 800225e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002260:	193b      	adds	r3, r7, r4
 8002262:	2201      	movs	r2, #1
 8002264:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002266:	193b      	adds	r3, r7, r4
 8002268:	2200      	movs	r2, #0
 800226a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800226c:	193b      	adds	r3, r7, r4
 800226e:	2200      	movs	r2, #0
 8002270:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Actuator_C_EN_GPIO_Port, &GPIO_InitStruct);
 8002272:	193b      	adds	r3, r7, r4
 8002274:	4a35      	ldr	r2, [pc, #212]	@ (800234c <MX_GPIO_Init+0x1a4>)
 8002276:	0019      	movs	r1, r3
 8002278:	0010      	movs	r0, r2
 800227a:	f002 fa33 	bl	80046e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Encoder_Pulse_A_Pin */
  GPIO_InitStruct.Pin = Encoder_Pulse_A_Pin;
 800227e:	0021      	movs	r1, r4
 8002280:	187b      	adds	r3, r7, r1
 8002282:	2280      	movs	r2, #128	@ 0x80
 8002284:	0192      	lsls	r2, r2, #6
 8002286:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002288:	000c      	movs	r4, r1
 800228a:	193b      	adds	r3, r7, r4
 800228c:	4a32      	ldr	r2, [pc, #200]	@ (8002358 <MX_GPIO_Init+0x1b0>)
 800228e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002290:	193b      	adds	r3, r7, r4
 8002292:	2200      	movs	r2, #0
 8002294:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Encoder_Pulse_A_GPIO_Port, &GPIO_InitStruct);
 8002296:	193b      	adds	r3, r7, r4
 8002298:	4a2c      	ldr	r2, [pc, #176]	@ (800234c <MX_GPIO_Init+0x1a4>)
 800229a:	0019      	movs	r1, r3
 800229c:	0010      	movs	r0, r2
 800229e:	f002 fa21 	bl	80046e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Encoder_Pulse_B_Pin */
  GPIO_InitStruct.Pin = Encoder_Pulse_B_Pin;
 80022a2:	0021      	movs	r1, r4
 80022a4:	187b      	adds	r3, r7, r1
 80022a6:	2280      	movs	r2, #128	@ 0x80
 80022a8:	01d2      	lsls	r2, r2, #7
 80022aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022ac:	000c      	movs	r4, r1
 80022ae:	193b      	adds	r3, r7, r4
 80022b0:	2200      	movs	r2, #0
 80022b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b4:	193b      	adds	r3, r7, r4
 80022b6:	2200      	movs	r2, #0
 80022b8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Encoder_Pulse_B_GPIO_Port, &GPIO_InitStruct);
 80022ba:	193b      	adds	r3, r7, r4
 80022bc:	4a23      	ldr	r2, [pc, #140]	@ (800234c <MX_GPIO_Init+0x1a4>)
 80022be:	0019      	movs	r1, r3
 80022c0:	0010      	movs	r0, r2
 80022c2:	f002 fa0f 	bl	80046e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Actuator_A_EN_Pin Actuator_B_EN_Pin */
  GPIO_InitStruct.Pin = Actuator_A_EN_Pin|Actuator_B_EN_Pin;
 80022c6:	193b      	adds	r3, r7, r4
 80022c8:	22c0      	movs	r2, #192	@ 0xc0
 80022ca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022cc:	193b      	adds	r3, r7, r4
 80022ce:	2201      	movs	r2, #1
 80022d0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d2:	193b      	adds	r3, r7, r4
 80022d4:	2200      	movs	r2, #0
 80022d6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d8:	193b      	adds	r3, r7, r4
 80022da:	2200      	movs	r2, #0
 80022dc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022de:	193b      	adds	r3, r7, r4
 80022e0:	4a1b      	ldr	r2, [pc, #108]	@ (8002350 <MX_GPIO_Init+0x1a8>)
 80022e2:	0019      	movs	r1, r3
 80022e4:	0010      	movs	r0, r2
 80022e6:	f002 f9fd 	bl	80046e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Actuator_CS_Pin */
  GPIO_InitStruct.Pin = Actuator_CS_Pin;
 80022ea:	193b      	adds	r3, r7, r4
 80022ec:	2201      	movs	r2, #1
 80022ee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022f0:	193b      	adds	r3, r7, r4
 80022f2:	2201      	movs	r2, #1
 80022f4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f6:	193b      	adds	r3, r7, r4
 80022f8:	2200      	movs	r2, #0
 80022fa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022fc:	193b      	adds	r3, r7, r4
 80022fe:	2203      	movs	r2, #3
 8002300:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Actuator_CS_GPIO_Port, &GPIO_InitStruct);
 8002302:	193b      	adds	r3, r7, r4
 8002304:	4a13      	ldr	r2, [pc, #76]	@ (8002354 <MX_GPIO_Init+0x1ac>)
 8002306:	0019      	movs	r1, r3
 8002308:	0010      	movs	r0, r2
 800230a:	f002 f9eb 	bl	80046e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_Reset_Pin */
  GPIO_InitStruct.Pin = IMU_Reset_Pin;
 800230e:	0021      	movs	r1, r4
 8002310:	187b      	adds	r3, r7, r1
 8002312:	2202      	movs	r2, #2
 8002314:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002316:	187b      	adds	r3, r7, r1
 8002318:	2200      	movs	r2, #0
 800231a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231c:	187b      	adds	r3, r7, r1
 800231e:	2200      	movs	r2, #0
 8002320:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(IMU_Reset_GPIO_Port, &GPIO_InitStruct);
 8002322:	187b      	adds	r3, r7, r1
 8002324:	4a0b      	ldr	r2, [pc, #44]	@ (8002354 <MX_GPIO_Init+0x1ac>)
 8002326:	0019      	movs	r1, r3
 8002328:	0010      	movs	r0, r2
 800232a:	f002 f9db 	bl	80046e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800232e:	2200      	movs	r2, #0
 8002330:	2100      	movs	r1, #0
 8002332:	2007      	movs	r0, #7
 8002334:	f001 fdd6 	bl	8003ee4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002338:	2007      	movs	r0, #7
 800233a:	f001 fde8 	bl	8003f0e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800233e:	46c0      	nop			@ (mov r8, r8)
 8002340:	46bd      	mov	sp, r7
 8002342:	b00b      	add	sp, #44	@ 0x2c
 8002344:	bd90      	pop	{r4, r7, pc}
 8002346:	46c0      	nop			@ (mov r8, r8)
 8002348:	40021000 	.word	0x40021000
 800234c:	50000400 	.word	0x50000400
 8002350:	50000800 	.word	0x50000800
 8002354:	50000c00 	.word	0x50000c00
 8002358:	10110000 	.word	0x10110000

0800235c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002360:	b672      	cpsid	i
}
 8002362:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002364:	46c0      	nop			@ (mov r8, r8)
 8002366:	e7fd      	b.n	8002364 <Error_Handler+0x8>

08002368 <HAL_UARTEx_RxEventCallback>:

/*
 * Modbus reception handler function
 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	000a      	movs	r2, r1
 8002372:	1cbb      	adds	r3, r7, #2
 8002374:	801a      	strh	r2, [r3, #0]
	if(modbus_header)
 8002376:	4b24      	ldr	r3, [pc, #144]	@ (8002408 <HAL_UARTEx_RxEventCallback+0xa0>)
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	b2db      	uxtb	r3, r3
 800237c:	2b00      	cmp	r3, #0
 800237e:	d026      	beq.n	80023ce <HAL_UARTEx_RxEventCallback+0x66>
	{
		// Log the time for chunk miss error handling
		chunk_time = HAL_GetTick();
 8002380:	f001 fcb4 	bl	8003cec <HAL_GetTick>
 8002384:	0002      	movs	r2, r0
 8002386:	4b21      	ldr	r3, [pc, #132]	@ (800240c <HAL_UARTEx_RxEventCallback+0xa4>)
 8002388:	601a      	str	r2, [r3, #0]
		modbus_header = 0;
 800238a:	4b1f      	ldr	r3, [pc, #124]	@ (8002408 <HAL_UARTEx_RxEventCallback+0xa0>)
 800238c:	2200      	movs	r2, #0
 800238e:	701a      	strb	r2, [r3, #0]

		// Setup the DMA to receive the # message bytes + crc + 1 in the event that the # bytes is in the message
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, &modbus_rx_buffer[6], (uint16_t)(((modbus_rx_buffer[4] << 8) | modbus_rx_buffer[5])*2 + 2 + 1));
 8002390:	4b1f      	ldr	r3, [pc, #124]	@ (8002410 <HAL_UARTEx_RxEventCallback+0xa8>)
 8002392:	791b      	ldrb	r3, [r3, #4]
 8002394:	021b      	lsls	r3, r3, #8
 8002396:	4a1e      	ldr	r2, [pc, #120]	@ (8002410 <HAL_UARTEx_RxEventCallback+0xa8>)
 8002398:	7952      	ldrb	r2, [r2, #5]
 800239a:	4313      	orrs	r3, r2
 800239c:	b29b      	uxth	r3, r3
 800239e:	3301      	adds	r3, #1
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	18db      	adds	r3, r3, r3
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	3301      	adds	r3, #1
 80023a8:	b29a      	uxth	r2, r3
 80023aa:	491a      	ldr	r1, [pc, #104]	@ (8002414 <HAL_UARTEx_RxEventCallback+0xac>)
 80023ac:	4b1a      	ldr	r3, [pc, #104]	@ (8002418 <HAL_UARTEx_RxEventCallback+0xb0>)
 80023ae:	0018      	movs	r0, r3
 80023b0:	f008 f846 	bl	800a440 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(huart1.hdmarx, DMA_IT_HT);
 80023b4:	4b18      	ldr	r3, [pc, #96]	@ (8002418 <HAL_UARTEx_RxEventCallback+0xb0>)
 80023b6:	2280      	movs	r2, #128	@ 0x80
 80023b8:	589b      	ldr	r3, [r3, r2]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	4b16      	ldr	r3, [pc, #88]	@ (8002418 <HAL_UARTEx_RxEventCallback+0xb0>)
 80023c0:	2180      	movs	r1, #128	@ 0x80
 80023c2:	585b      	ldr	r3, [r3, r1]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2104      	movs	r1, #4
 80023c8:	438a      	bics	r2, r1
 80023ca:	601a      	str	r2, [r3, #0]
#ifdef MB_SLAVE
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, modbus_rx_buffer, 6);
		__HAL_DMA_DISABLE_IT(huart1.hdmarx, DMA_IT_HT);
#endif
	}
}
 80023cc:	e017      	b.n	80023fe <HAL_UARTEx_RxEventCallback+0x96>
		modbus_header = 1;
 80023ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002408 <HAL_UARTEx_RxEventCallback+0xa0>)
 80023d0:	2201      	movs	r2, #1
 80023d2:	701a      	strb	r2, [r3, #0]
		uart_rx_int = 1;
 80023d4:	4b11      	ldr	r3, [pc, #68]	@ (800241c <HAL_UARTEx_RxEventCallback+0xb4>)
 80023d6:	2201      	movs	r2, #1
 80023d8:	701a      	strb	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, modbus_rx_buffer, 6);
 80023da:	490d      	ldr	r1, [pc, #52]	@ (8002410 <HAL_UARTEx_RxEventCallback+0xa8>)
 80023dc:	4b0e      	ldr	r3, [pc, #56]	@ (8002418 <HAL_UARTEx_RxEventCallback+0xb0>)
 80023de:	2206      	movs	r2, #6
 80023e0:	0018      	movs	r0, r3
 80023e2:	f008 f82d 	bl	800a440 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(huart1.hdmarx, DMA_IT_HT);
 80023e6:	4b0c      	ldr	r3, [pc, #48]	@ (8002418 <HAL_UARTEx_RxEventCallback+0xb0>)
 80023e8:	2280      	movs	r2, #128	@ 0x80
 80023ea:	589b      	ldr	r3, [r3, r2]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	4b09      	ldr	r3, [pc, #36]	@ (8002418 <HAL_UARTEx_RxEventCallback+0xb0>)
 80023f2:	2180      	movs	r1, #128	@ 0x80
 80023f4:	585b      	ldr	r3, [r3, r1]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2104      	movs	r1, #4
 80023fa:	438a      	bics	r2, r1
 80023fc:	601a      	str	r2, [r3, #0]
}
 80023fe:	46c0      	nop			@ (mov r8, r8)
 8002400:	46bd      	mov	sp, r7
 8002402:	b002      	add	sp, #8
 8002404:	bd80      	pop	{r7, pc}
 8002406:	46c0      	nop			@ (mov r8, r8)
 8002408:	200000b0 	.word	0x200000b0
 800240c:	20000894 	.word	0x20000894
 8002410:	20000690 	.word	0x20000690
 8002414:	20000696 	.word	0x20000696
 8002418:	200004f4 	.word	0x200004f4
 800241c:	20000898 	.word	0x20000898

08002420 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
	uart_tx_int = 1;
 8002428:	4b03      	ldr	r3, [pc, #12]	@ (8002438 <HAL_UART_TxCpltCallback+0x18>)
 800242a:	2201      	movs	r2, #1
 800242c:	701a      	strb	r2, [r3, #0]
}
 800242e:	46c0      	nop			@ (mov r8, r8)
 8002430:	46bd      	mov	sp, r7
 8002432:	b002      	add	sp, #8
 8002434:	bd80      	pop	{r7, pc}
 8002436:	46c0      	nop			@ (mov r8, r8)
 8002438:	200000b1 	.word	0x200000b1

0800243c <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
	uart_err_int = 1;
 8002444:	4b07      	ldr	r3, [pc, #28]	@ (8002464 <HAL_UART_ErrorCallback+0x28>)
 8002446:	2201      	movs	r2, #1
 8002448:	701a      	strb	r2, [r3, #0]
	__HAL_UART_DISABLE_IT(&huart1, UART_IT_MASK);
 800244a:	4b07      	ldr	r3, [pc, #28]	@ (8002468 <HAL_UART_ErrorCallback+0x2c>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	689a      	ldr	r2, [r3, #8]
 8002450:	4b05      	ldr	r3, [pc, #20]	@ (8002468 <HAL_UART_ErrorCallback+0x2c>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	0052      	lsls	r2, r2, #1
 8002456:	0852      	lsrs	r2, r2, #1
 8002458:	609a      	str	r2, [r3, #8]
}
 800245a:	46c0      	nop			@ (mov r8, r8)
 800245c:	46bd      	mov	sp, r7
 800245e:	b002      	add	sp, #8
 8002460:	bd80      	pop	{r7, pc}
 8002462:	46c0      	nop			@ (mov r8, r8)
 8002464:	20000899 	.word	0x20000899
 8002468:	200004f4 	.word	0x200004f4

0800246c <modbus_rx>:

// Modbus Slave Functions ---------------------------------------------------------------------

#ifdef MB_SLAVE
uint8_t modbus_rx()
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
	if(uart_rx_int)
 8002470:	4b06      	ldr	r3, [pc, #24]	@ (800248c <modbus_rx+0x20>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	d004      	beq.n	8002484 <modbus_rx+0x18>
	{
		uart_rx_int = 0;
 800247a:	4b04      	ldr	r3, [pc, #16]	@ (800248c <modbus_rx+0x20>)
 800247c:	2200      	movs	r2, #0
 800247e:	701a      	strb	r2, [r3, #0]
		return 1;
 8002480:	2301      	movs	r3, #1
 8002482:	e000      	b.n	8002486 <modbus_rx+0x1a>
	}
	return 0;
 8002484:	2300      	movs	r3, #0
}
 8002486:	0018      	movs	r0, r3
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	20000898 	.word	0x20000898

08002490 <return_holding_registers>:

int8_t return_holding_registers(uint8_t* tx_len)
{
 8002490:	b5b0      	push	{r4, r5, r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
	(*tx_len) = 0;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	701a      	strb	r2, [r3, #0]

	// Handle Error Checking
	uint16_t first_register_address = (get_rx_buffer(2) << 8) | get_rx_buffer(3);
 800249e:	2002      	movs	r0, #2
 80024a0:	f000 fca2 	bl	8002de8 <get_rx_buffer>
 80024a4:	0003      	movs	r3, r0
 80024a6:	021b      	lsls	r3, r3, #8
 80024a8:	b21c      	sxth	r4, r3
 80024aa:	2003      	movs	r0, #3
 80024ac:	f000 fc9c 	bl	8002de8 <get_rx_buffer>
 80024b0:	0003      	movs	r3, r0
 80024b2:	b21b      	sxth	r3, r3
 80024b4:	4323      	orrs	r3, r4
 80024b6:	b21a      	sxth	r2, r3
 80024b8:	230c      	movs	r3, #12
 80024ba:	18fb      	adds	r3, r7, r3
 80024bc:	801a      	strh	r2, [r3, #0]

	// Get the number of registers requested by the master
	uint16_t num_registers = (get_rx_buffer(4) << 8) | get_rx_buffer(5);
 80024be:	2004      	movs	r0, #4
 80024c0:	f000 fc92 	bl	8002de8 <get_rx_buffer>
 80024c4:	0003      	movs	r3, r0
 80024c6:	021b      	lsls	r3, r3, #8
 80024c8:	b21c      	sxth	r4, r3
 80024ca:	2005      	movs	r0, #5
 80024cc:	f000 fc8c 	bl	8002de8 <get_rx_buffer>
 80024d0:	0003      	movs	r3, r0
 80024d2:	b21b      	sxth	r3, r3
 80024d4:	4323      	orrs	r3, r4
 80024d6:	b21a      	sxth	r2, r3
 80024d8:	210a      	movs	r1, #10
 80024da:	187b      	adds	r3, r7, r1
 80024dc:	801a      	strh	r2, [r3, #0]

	if(num_registers > RX_BUFFER_SIZE || num_registers < 1) // 125 is the limit according to modbus protocol
 80024de:	000a      	movs	r2, r1
 80024e0:	18bb      	adds	r3, r7, r2
 80024e2:	881b      	ldrh	r3, [r3, #0]
 80024e4:	2b7d      	cmp	r3, #125	@ 0x7d
 80024e6:	d803      	bhi.n	80024f0 <return_holding_registers+0x60>
 80024e8:	18bb      	adds	r3, r7, r2
 80024ea:	881b      	ldrh	r3, [r3, #0]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d104      	bne.n	80024fa <return_holding_registers+0x6a>
	{
		return modbus_exception(MB_ILLEGAL_DATA_VALUE);
 80024f0:	2006      	movs	r0, #6
 80024f2:	f000 f97d 	bl	80027f0 <modbus_exception>
 80024f6:	0003      	movs	r3, r0
 80024f8:	e06e      	b.n	80025d8 <return_holding_registers+0x148>
	}

	uint16_t last_register_address = first_register_address + (num_registers - 1);
 80024fa:	230a      	movs	r3, #10
 80024fc:	18fa      	adds	r2, r7, r3
 80024fe:	230c      	movs	r3, #12
 8002500:	18fb      	adds	r3, r7, r3
 8002502:	8812      	ldrh	r2, [r2, #0]
 8002504:	881b      	ldrh	r3, [r3, #0]
 8002506:	18d3      	adds	r3, r2, r3
 8002508:	b29a      	uxth	r2, r3
 800250a:	2108      	movs	r1, #8
 800250c:	187b      	adds	r3, r7, r1
 800250e:	3a01      	subs	r2, #1
 8002510:	801a      	strh	r2, [r3, #0]

	if(last_register_address > NUM_HOLDING_REGISTERS)
 8002512:	187b      	adds	r3, r7, r1
 8002514:	881b      	ldrh	r3, [r3, #0]
 8002516:	2b50      	cmp	r3, #80	@ 0x50
 8002518:	d904      	bls.n	8002524 <return_holding_registers+0x94>
	{
		return modbus_exception(MB_ILLEGAL_DATA_ADDRESS);
 800251a:	2005      	movs	r0, #5
 800251c:	f000 f968 	bl	80027f0 <modbus_exception>
 8002520:	0003      	movs	r3, r0
 8002522:	e059      	b.n	80025d8 <return_holding_registers+0x148>
	}

	// Return register values
	modbus_tx_buffer[0] = get_rx_buffer(0); // Append Slave id
 8002524:	2000      	movs	r0, #0
 8002526:	f000 fc5f 	bl	8002de8 <get_rx_buffer>
 800252a:	0003      	movs	r3, r0
 800252c:	001a      	movs	r2, r3
 800252e:	4b2c      	ldr	r3, [pc, #176]	@ (80025e0 <return_holding_registers+0x150>)
 8002530:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = get_rx_buffer(1); // Append Function Code
 8002532:	2001      	movs	r0, #1
 8002534:	f000 fc58 	bl	8002de8 <get_rx_buffer>
 8002538:	0003      	movs	r3, r0
 800253a:	001a      	movs	r2, r3
 800253c:	4b28      	ldr	r3, [pc, #160]	@ (80025e0 <return_holding_registers+0x150>)
 800253e:	705a      	strb	r2, [r3, #1]
	modbus_tx_buffer[2] = num_registers * 2; // Append number of bytes
 8002540:	230a      	movs	r3, #10
 8002542:	18fb      	adds	r3, r7, r3
 8002544:	881b      	ldrh	r3, [r3, #0]
 8002546:	b2db      	uxtb	r3, r3
 8002548:	18db      	adds	r3, r3, r3
 800254a:	b2da      	uxtb	r2, r3
 800254c:	4b24      	ldr	r3, [pc, #144]	@ (80025e0 <return_holding_registers+0x150>)
 800254e:	709a      	strb	r2, [r3, #2]
	(*tx_len) = 3;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2203      	movs	r2, #3
 8002554:	701a      	strb	r2, [r3, #0]

	// Append the Register Values
	for(uint8_t i = 0; i < num_registers; i++)
 8002556:	230f      	movs	r3, #15
 8002558:	18fb      	adds	r3, r7, r3
 800255a:	2200      	movs	r2, #0
 800255c:	701a      	strb	r2, [r3, #0]
 800255e:	e02c      	b.n	80025ba <return_holding_registers+0x12a>
	{
		modbus_tx_buffer[(*tx_len)++] = high_byte(holding_register_database[first_register_address + i]);
 8002560:	250c      	movs	r5, #12
 8002562:	197b      	adds	r3, r7, r5
 8002564:	881a      	ldrh	r2, [r3, #0]
 8002566:	240f      	movs	r4, #15
 8002568:	193b      	adds	r3, r7, r4
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	18d2      	adds	r2, r2, r3
 800256e:	4b1d      	ldr	r3, [pc, #116]	@ (80025e4 <return_holding_registers+0x154>)
 8002570:	0052      	lsls	r2, r2, #1
 8002572:	5ad3      	ldrh	r3, [r2, r3]
 8002574:	0a1b      	lsrs	r3, r3, #8
 8002576:	b299      	uxth	r1, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	1c5a      	adds	r2, r3, #1
 800257e:	b2d0      	uxtb	r0, r2
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	7010      	strb	r0, [r2, #0]
 8002584:	001a      	movs	r2, r3
 8002586:	b2c9      	uxtb	r1, r1
 8002588:	4b15      	ldr	r3, [pc, #84]	@ (80025e0 <return_holding_registers+0x150>)
 800258a:	5499      	strb	r1, [r3, r2]
		modbus_tx_buffer[(*tx_len)++] = low_byte(holding_register_database[first_register_address + i]);
 800258c:	197b      	adds	r3, r7, r5
 800258e:	881a      	ldrh	r2, [r3, #0]
 8002590:	193b      	adds	r3, r7, r4
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	18d2      	adds	r2, r2, r3
 8002596:	4b13      	ldr	r3, [pc, #76]	@ (80025e4 <return_holding_registers+0x154>)
 8002598:	0052      	lsls	r2, r2, #1
 800259a:	5ad1      	ldrh	r1, [r2, r3]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	1c5a      	adds	r2, r3, #1
 80025a2:	b2d0      	uxtb	r0, r2
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	7010      	strb	r0, [r2, #0]
 80025a8:	001a      	movs	r2, r3
 80025aa:	b2c9      	uxtb	r1, r1
 80025ac:	4b0c      	ldr	r3, [pc, #48]	@ (80025e0 <return_holding_registers+0x150>)
 80025ae:	5499      	strb	r1, [r3, r2]
	for(uint8_t i = 0; i < num_registers; i++)
 80025b0:	193b      	adds	r3, r7, r4
 80025b2:	781a      	ldrb	r2, [r3, #0]
 80025b4:	193b      	adds	r3, r7, r4
 80025b6:	3201      	adds	r2, #1
 80025b8:	701a      	strb	r2, [r3, #0]
 80025ba:	230f      	movs	r3, #15
 80025bc:	18fb      	adds	r3, r7, r3
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	220a      	movs	r2, #10
 80025c4:	18ba      	adds	r2, r7, r2
 80025c6:	8812      	ldrh	r2, [r2, #0]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d8c9      	bhi.n	8002560 <return_holding_registers+0xd0>
	}
	return modbus_send((*tx_len));
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	0018      	movs	r0, r3
 80025d2:	f000 fa1b 	bl	8002a0c <modbus_send>
 80025d6:	0003      	movs	r3, r0
}
 80025d8:	0018      	movs	r0, r3
 80025da:	46bd      	mov	sp, r7
 80025dc:	b004      	add	sp, #16
 80025de:	bdb0      	pop	{r4, r5, r7, pc}
 80025e0:	20000790 	.word	0x20000790
 80025e4:	20000010 	.word	0x20000010

080025e8 <edit_multiple_registers>:

int8_t edit_multiple_registers(uint8_t *tx_len)
{
 80025e8:	b5b0      	push	{r4, r5, r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
	(*tx_len) = 0;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	701a      	strb	r2, [r3, #0]

	// Handle Error Checking
	uint16_t first_register_address = (get_rx_buffer(2) << 8) | get_rx_buffer(3);
 80025f6:	2002      	movs	r0, #2
 80025f8:	f000 fbf6 	bl	8002de8 <get_rx_buffer>
 80025fc:	0003      	movs	r3, r0
 80025fe:	021b      	lsls	r3, r3, #8
 8002600:	b21c      	sxth	r4, r3
 8002602:	2003      	movs	r0, #3
 8002604:	f000 fbf0 	bl	8002de8 <get_rx_buffer>
 8002608:	0003      	movs	r3, r0
 800260a:	b21b      	sxth	r3, r3
 800260c:	4323      	orrs	r3, r4
 800260e:	b21a      	sxth	r2, r3
 8002610:	2314      	movs	r3, #20
 8002612:	18fb      	adds	r3, r7, r3
 8002614:	801a      	strh	r2, [r3, #0]

	uint16_t num_registers = (get_rx_buffer(4) << 8) | get_rx_buffer(5);
 8002616:	2004      	movs	r0, #4
 8002618:	f000 fbe6 	bl	8002de8 <get_rx_buffer>
 800261c:	0003      	movs	r3, r0
 800261e:	021b      	lsls	r3, r3, #8
 8002620:	b21c      	sxth	r4, r3
 8002622:	2005      	movs	r0, #5
 8002624:	f000 fbe0 	bl	8002de8 <get_rx_buffer>
 8002628:	0003      	movs	r3, r0
 800262a:	b21b      	sxth	r3, r3
 800262c:	4323      	orrs	r3, r4
 800262e:	b21a      	sxth	r2, r3
 8002630:	2112      	movs	r1, #18
 8002632:	187b      	adds	r3, r7, r1
 8002634:	801a      	strh	r2, [r3, #0]

	if(num_registers > 125 || num_registers < 1) // 125 is the limit according to modbus protocol
 8002636:	000a      	movs	r2, r1
 8002638:	18bb      	adds	r3, r7, r2
 800263a:	881b      	ldrh	r3, [r3, #0]
 800263c:	2b7d      	cmp	r3, #125	@ 0x7d
 800263e:	d803      	bhi.n	8002648 <edit_multiple_registers+0x60>
 8002640:	18bb      	adds	r3, r7, r2
 8002642:	881b      	ldrh	r3, [r3, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d104      	bne.n	8002652 <edit_multiple_registers+0x6a>
	{
		return modbus_exception(MB_ILLEGAL_DATA_VALUE);
 8002648:	2006      	movs	r0, #6
 800264a:	f000 f8d1 	bl	80027f0 <modbus_exception>
 800264e:	0003      	movs	r3, r0
 8002650:	e0c6      	b.n	80027e0 <edit_multiple_registers+0x1f8>
	}

	uint16_t last_register_address = first_register_address + (num_registers - 1);
 8002652:	2312      	movs	r3, #18
 8002654:	18fa      	adds	r2, r7, r3
 8002656:	2314      	movs	r3, #20
 8002658:	18fb      	adds	r3, r7, r3
 800265a:	8812      	ldrh	r2, [r2, #0]
 800265c:	881b      	ldrh	r3, [r3, #0]
 800265e:	18d3      	adds	r3, r2, r3
 8002660:	b29a      	uxth	r2, r3
 8002662:	2110      	movs	r1, #16
 8002664:	187b      	adds	r3, r7, r1
 8002666:	3a01      	subs	r2, #1
 8002668:	801a      	strh	r2, [r3, #0]

	if(last_register_address > NUM_HOLDING_REGISTERS)
 800266a:	187b      	adds	r3, r7, r1
 800266c:	881b      	ldrh	r3, [r3, #0]
 800266e:	2b50      	cmp	r3, #80	@ 0x50
 8002670:	d904      	bls.n	800267c <edit_multiple_registers+0x94>
	{
		return modbus_exception(MB_ILLEGAL_DATA_ADDRESS);
 8002672:	2005      	movs	r0, #5
 8002674:	f000 f8bc 	bl	80027f0 <modbus_exception>
 8002678:	0003      	movs	r3, r0
 800267a:	e0b1      	b.n	80027e0 <edit_multiple_registers+0x1f8>
	}

	// Protect Read only values
	if(((first_register_address >= ADC_0) && (first_register_address <= ENCODER_SPEED)) ||
 800267c:	2214      	movs	r2, #20
 800267e:	18bb      	adds	r3, r7, r2
 8002680:	881b      	ldrh	r3, [r3, #0]
 8002682:	2b08      	cmp	r3, #8
 8002684:	d903      	bls.n	800268e <edit_multiple_registers+0xa6>
 8002686:	18bb      	adds	r3, r7, r2
 8002688:	881b      	ldrh	r3, [r3, #0]
 800268a:	2b3e      	cmp	r3, #62	@ 0x3e
 800268c:	d912      	bls.n	80026b4 <edit_multiple_registers+0xcc>
 800268e:	2210      	movs	r2, #16
 8002690:	18bb      	adds	r3, r7, r2
 8002692:	881b      	ldrh	r3, [r3, #0]
 8002694:	2b08      	cmp	r3, #8
 8002696:	d903      	bls.n	80026a0 <edit_multiple_registers+0xb8>
		 ((last_register_address >= ADC_0) && (last_register_address <= ENCODER_SPEED)) ||
 8002698:	18bb      	adds	r3, r7, r2
 800269a:	881b      	ldrh	r3, [r3, #0]
 800269c:	2b3e      	cmp	r3, #62	@ 0x3e
 800269e:	d909      	bls.n	80026b4 <edit_multiple_registers+0xcc>
 80026a0:	2314      	movs	r3, #20
 80026a2:	18fb      	adds	r3, r7, r3
 80026a4:	881b      	ldrh	r3, [r3, #0]
 80026a6:	2b08      	cmp	r3, #8
 80026a8:	d809      	bhi.n	80026be <edit_multiple_registers+0xd6>
		 ((first_register_address < ADC_0) && (last_register_address > ENCODER_SPEED)))
 80026aa:	2310      	movs	r3, #16
 80026ac:	18fb      	adds	r3, r7, r3
 80026ae:	881b      	ldrh	r3, [r3, #0]
 80026b0:	2b3e      	cmp	r3, #62	@ 0x3e
 80026b2:	d904      	bls.n	80026be <edit_multiple_registers+0xd6>
	{
		// Ensure that sensor values are restricted to read-only
		return modbus_exception(MB_ILLEGAL_FUNCTION);
 80026b4:	2004      	movs	r0, #4
 80026b6:	f000 f89b 	bl	80027f0 <modbus_exception>
 80026ba:	0003      	movs	r3, r0
 80026bc:	e090      	b.n	80027e0 <edit_multiple_registers+0x1f8>
	}

	// Edit holding registers
	modbus_tx_buffer[0] = get_rx_buffer(0); // Append Slave id
 80026be:	2000      	movs	r0, #0
 80026c0:	f000 fb92 	bl	8002de8 <get_rx_buffer>
 80026c4:	0003      	movs	r3, r0
 80026c6:	001a      	movs	r2, r3
 80026c8:	4b47      	ldr	r3, [pc, #284]	@ (80027e8 <edit_multiple_registers+0x200>)
 80026ca:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = get_rx_buffer(1); // Append Function Code
 80026cc:	2001      	movs	r0, #1
 80026ce:	f000 fb8b 	bl	8002de8 <get_rx_buffer>
 80026d2:	0003      	movs	r3, r0
 80026d4:	001a      	movs	r2, r3
 80026d6:	4b44      	ldr	r3, [pc, #272]	@ (80027e8 <edit_multiple_registers+0x200>)
 80026d8:	705a      	strb	r2, [r3, #1]
	// Append the Write Address (high byte then low byte)
	modbus_tx_buffer[2] = get_rx_buffer(2);
 80026da:	2002      	movs	r0, #2
 80026dc:	f000 fb84 	bl	8002de8 <get_rx_buffer>
 80026e0:	0003      	movs	r3, r0
 80026e2:	001a      	movs	r2, r3
 80026e4:	4b40      	ldr	r3, [pc, #256]	@ (80027e8 <edit_multiple_registers+0x200>)
 80026e6:	709a      	strb	r2, [r3, #2]
	modbus_tx_buffer[3] = get_rx_buffer(3);
 80026e8:	2003      	movs	r0, #3
 80026ea:	f000 fb7d 	bl	8002de8 <get_rx_buffer>
 80026ee:	0003      	movs	r3, r0
 80026f0:	001a      	movs	r2, r3
 80026f2:	4b3d      	ldr	r3, [pc, #244]	@ (80027e8 <edit_multiple_registers+0x200>)
 80026f4:	70da      	strb	r2, [r3, #3]
	// Append the quantity of registers to be written (high byte then low byte)
	modbus_tx_buffer[4] = get_rx_buffer(4);
 80026f6:	2004      	movs	r0, #4
 80026f8:	f000 fb76 	bl	8002de8 <get_rx_buffer>
 80026fc:	0003      	movs	r3, r0
 80026fe:	001a      	movs	r2, r3
 8002700:	4b39      	ldr	r3, [pc, #228]	@ (80027e8 <edit_multiple_registers+0x200>)
 8002702:	711a      	strb	r2, [r3, #4]
	modbus_tx_buffer[5] = get_rx_buffer(5);
 8002704:	2005      	movs	r0, #5
 8002706:	f000 fb6f 	bl	8002de8 <get_rx_buffer>
 800270a:	0003      	movs	r3, r0
 800270c:	001a      	movs	r2, r3
 800270e:	4b36      	ldr	r3, [pc, #216]	@ (80027e8 <edit_multiple_registers+0x200>)
 8002710:	715a      	strb	r2, [r3, #5]
	(*tx_len) = 6;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2206      	movs	r2, #6
 8002716:	701a      	strb	r2, [r3, #0]

	for(uint8_t i = 0; i < num_registers; i++)
 8002718:	2317      	movs	r3, #23
 800271a:	18fb      	adds	r3, r7, r3
 800271c:	2200      	movs	r2, #0
 800271e:	701a      	strb	r2, [r3, #0]
 8002720:	e032      	b.n	8002788 <edit_multiple_registers+0x1a0>
	{
		holding_register_database[first_register_address + i] = (get_rx_buffer(2 * i + 7) << 8) | get_rx_buffer(2 * i + 8);
 8002722:	2517      	movs	r5, #23
 8002724:	197b      	adds	r3, r7, r5
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	18db      	adds	r3, r3, r3
 800272a:	b2db      	uxtb	r3, r3
 800272c:	3307      	adds	r3, #7
 800272e:	b2db      	uxtb	r3, r3
 8002730:	0018      	movs	r0, r3
 8002732:	f000 fb59 	bl	8002de8 <get_rx_buffer>
 8002736:	0003      	movs	r3, r0
 8002738:	021b      	lsls	r3, r3, #8
 800273a:	b21c      	sxth	r4, r3
 800273c:	197b      	adds	r3, r7, r5
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	3304      	adds	r3, #4
 8002742:	b2db      	uxtb	r3, r3
 8002744:	18db      	adds	r3, r3, r3
 8002746:	b2db      	uxtb	r3, r3
 8002748:	0018      	movs	r0, r3
 800274a:	f000 fb4d 	bl	8002de8 <get_rx_buffer>
 800274e:	0003      	movs	r3, r0
 8002750:	b21b      	sxth	r3, r3
 8002752:	4323      	orrs	r3, r4
 8002754:	b219      	sxth	r1, r3
 8002756:	2014      	movs	r0, #20
 8002758:	183b      	adds	r3, r7, r0
 800275a:	881a      	ldrh	r2, [r3, #0]
 800275c:	197b      	adds	r3, r7, r5
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	18d2      	adds	r2, r2, r3
 8002762:	b289      	uxth	r1, r1
 8002764:	4b21      	ldr	r3, [pc, #132]	@ (80027ec <edit_multiple_registers+0x204>)
 8002766:	0052      	lsls	r2, r2, #1
 8002768:	52d1      	strh	r1, [r2, r3]

		// Handle the range boundaries of each writable register
		handle_range(first_register_address + i);
 800276a:	197b      	adds	r3, r7, r5
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	b29a      	uxth	r2, r3
 8002770:	183b      	adds	r3, r7, r0
 8002772:	881b      	ldrh	r3, [r3, #0]
 8002774:	18d3      	adds	r3, r2, r3
 8002776:	b29b      	uxth	r3, r3
 8002778:	0018      	movs	r0, r3
 800277a:	f000 f861 	bl	8002840 <handle_range>
	for(uint8_t i = 0; i < num_registers; i++)
 800277e:	197b      	adds	r3, r7, r5
 8002780:	781a      	ldrb	r2, [r3, #0]
 8002782:	197b      	adds	r3, r7, r5
 8002784:	3201      	adds	r2, #1
 8002786:	701a      	strb	r2, [r3, #0]
 8002788:	2317      	movs	r3, #23
 800278a:	18fb      	adds	r3, r7, r3
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	b29b      	uxth	r3, r3
 8002790:	2212      	movs	r2, #18
 8002792:	18ba      	adds	r2, r7, r2
 8002794:	8812      	ldrh	r2, [r2, #0]
 8002796:	429a      	cmp	r2, r3
 8002798:	d8c3      	bhi.n	8002722 <edit_multiple_registers+0x13a>
	}

	// TIMING WORKAROUND START
	HAL_Delay(1);
 800279a:	2001      	movs	r0, #1
 800279c:	f001 fab0 	bl	8003d00 <HAL_Delay>
	// TIMING WORKAROUND END

	int8_t status = modbus_send((*tx_len));
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	250f      	movs	r5, #15
 80027a6:	197c      	adds	r4, r7, r5
 80027a8:	0018      	movs	r0, r3
 80027aa:	f000 f92f 	bl	8002a0c <modbus_send>
 80027ae:	0003      	movs	r3, r0
 80027b0:	7023      	strb	r3, [r4, #0]

	if(status == MB_SUCCESS)
 80027b2:	197b      	adds	r3, r7, r5
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	b25b      	sxtb	r3, r3
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d10d      	bne.n	80027d8 <edit_multiple_registers+0x1f0>
	{
		// Special Case Modbus Baud Rate Modification
		if((first_register_address <= 1) && last_register_address >= 1)
 80027bc:	2314      	movs	r3, #20
 80027be:	18fb      	adds	r3, r7, r3
 80027c0:	881b      	ldrh	r3, [r3, #0]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d808      	bhi.n	80027d8 <edit_multiple_registers+0x1f0>
 80027c6:	2310      	movs	r3, #16
 80027c8:	18fb      	adds	r3, r7, r3
 80027ca:	881b      	ldrh	r3, [r3, #0]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d003      	beq.n	80027d8 <edit_multiple_registers+0x1f0>
		{
			return modbus_change_baud_rate();
 80027d0:	f000 fa7e 	bl	8002cd0 <modbus_change_baud_rate>
 80027d4:	0003      	movs	r3, r0
 80027d6:	e003      	b.n	80027e0 <edit_multiple_registers+0x1f8>
		}
	}
	return status;
 80027d8:	230f      	movs	r3, #15
 80027da:	18fb      	adds	r3, r7, r3
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	b25b      	sxtb	r3, r3
}
 80027e0:	0018      	movs	r0, r3
 80027e2:	46bd      	mov	sp, r7
 80027e4:	b006      	add	sp, #24
 80027e6:	bdb0      	pop	{r4, r5, r7, pc}
 80027e8:	20000790 	.word	0x20000790
 80027ec:	20000010 	.word	0x20000010

080027f0 <modbus_exception>:

int8_t modbus_exception(int8_t exception_code)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	0002      	movs	r2, r0
 80027f8:	1dfb      	adds	r3, r7, #7
 80027fa:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[0] = get_rx_buffer(0);
 80027fc:	2000      	movs	r0, #0
 80027fe:	f000 faf3 	bl	8002de8 <get_rx_buffer>
 8002802:	0003      	movs	r3, r0
 8002804:	001a      	movs	r2, r3
 8002806:	4b0d      	ldr	r3, [pc, #52]	@ (800283c <modbus_exception+0x4c>)
 8002808:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = get_rx_buffer(1) | 0x80;
 800280a:	2001      	movs	r0, #1
 800280c:	f000 faec 	bl	8002de8 <get_rx_buffer>
 8002810:	0003      	movs	r3, r0
 8002812:	001a      	movs	r2, r3
 8002814:	2380      	movs	r3, #128	@ 0x80
 8002816:	425b      	negs	r3, r3
 8002818:	4313      	orrs	r3, r2
 800281a:	b2da      	uxtb	r2, r3
 800281c:	4b07      	ldr	r3, [pc, #28]	@ (800283c <modbus_exception+0x4c>)
 800281e:	705a      	strb	r2, [r3, #1]
	modbus_tx_buffer[2] = exception_code - 3; // Subtract 3 to match the modbus defined error code value
 8002820:	1dfb      	adds	r3, r7, #7
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	3b03      	subs	r3, #3
 8002826:	b2da      	uxtb	r2, r3
 8002828:	4b04      	ldr	r3, [pc, #16]	@ (800283c <modbus_exception+0x4c>)
 800282a:	709a      	strb	r2, [r3, #2]

	return modbus_send(3);
 800282c:	2003      	movs	r0, #3
 800282e:	f000 f8ed 	bl	8002a0c <modbus_send>
 8002832:	0003      	movs	r3, r0
}
 8002834:	0018      	movs	r0, r3
 8002836:	46bd      	mov	sp, r7
 8002838:	b002      	add	sp, #8
 800283a:	bd80      	pop	{r7, pc}
 800283c:	20000790 	.word	0x20000790

08002840 <handle_range>:

void handle_range(uint16_t holding_register)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	0002      	movs	r2, r0
 8002848:	1dbb      	adds	r3, r7, #6
 800284a:	801a      	strh	r2, [r3, #0]
	switch(holding_register)
 800284c:	1dbb      	adds	r3, r7, #6
 800284e:	881b      	ldrh	r3, [r3, #0]
 8002850:	2b42      	cmp	r3, #66	@ 0x42
 8002852:	d900      	bls.n	8002856 <handle_range+0x16>
 8002854:	e0cc      	b.n	80029f0 <handle_range+0x1b0>
 8002856:	009a      	lsls	r2, r3, #2
 8002858:	4b67      	ldr	r3, [pc, #412]	@ (80029f8 <handle_range+0x1b8>)
 800285a:	18d3      	adds	r3, r2, r3
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	469f      	mov	pc, r3
	{
		case MODBUS_ID:
		{
			if(holding_register_database[holding_register] > 0xFF)
 8002860:	1dbb      	adds	r3, r7, #6
 8002862:	881a      	ldrh	r2, [r3, #0]
 8002864:	4b65      	ldr	r3, [pc, #404]	@ (80029fc <handle_range+0x1bc>)
 8002866:	0052      	lsls	r2, r2, #1
 8002868:	5ad3      	ldrh	r3, [r2, r3]
 800286a:	2bff      	cmp	r3, #255	@ 0xff
 800286c:	d800      	bhi.n	8002870 <handle_range+0x30>
 800286e:	e0ae      	b.n	80029ce <handle_range+0x18e>
			{
				holding_register_database[holding_register] = 0xFF;
 8002870:	1dbb      	adds	r3, r7, #6
 8002872:	881a      	ldrh	r2, [r3, #0]
 8002874:	4b61      	ldr	r3, [pc, #388]	@ (80029fc <handle_range+0x1bc>)
 8002876:	0052      	lsls	r2, r2, #1
 8002878:	21ff      	movs	r1, #255	@ 0xff
 800287a:	52d1      	strh	r1, [r2, r3]
			}
			break;
 800287c:	e0a7      	b.n	80029ce <handle_range+0x18e>
		}
		case MB_BAUD_RATE:
		{
			if(holding_register_database[holding_register] < BAUD_RATE_4800)
 800287e:	1dbb      	adds	r3, r7, #6
 8002880:	881a      	ldrh	r2, [r3, #0]
 8002882:	4b5e      	ldr	r3, [pc, #376]	@ (80029fc <handle_range+0x1bc>)
 8002884:	0052      	lsls	r2, r2, #1
 8002886:	5ad3      	ldrh	r3, [r2, r3]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d806      	bhi.n	800289a <handle_range+0x5a>
			{
				holding_register_database[holding_register] = BAUD_RATE_4800;
 800288c:	1dbb      	adds	r3, r7, #6
 800288e:	881a      	ldrh	r2, [r3, #0]
 8002890:	4b5a      	ldr	r3, [pc, #360]	@ (80029fc <handle_range+0x1bc>)
 8002892:	0052      	lsls	r2, r2, #1
 8002894:	2102      	movs	r1, #2
 8002896:	52d1      	strh	r1, [r2, r3]
			}
			else if(holding_register_database[holding_register] > BAUD_RATE_256000)
			{
				holding_register_database[holding_register] = BAUD_RATE_256000;
			}
			break;
 8002898:	e09b      	b.n	80029d2 <handle_range+0x192>
			else if(holding_register_database[holding_register] > BAUD_RATE_256000)
 800289a:	1dbb      	adds	r3, r7, #6
 800289c:	881a      	ldrh	r2, [r3, #0]
 800289e:	4b57      	ldr	r3, [pc, #348]	@ (80029fc <handle_range+0x1bc>)
 80028a0:	0052      	lsls	r2, r2, #1
 80028a2:	5ad3      	ldrh	r3, [r2, r3]
 80028a4:	2b09      	cmp	r3, #9
 80028a6:	d800      	bhi.n	80028aa <handle_range+0x6a>
 80028a8:	e093      	b.n	80029d2 <handle_range+0x192>
				holding_register_database[holding_register] = BAUD_RATE_256000;
 80028aa:	1dbb      	adds	r3, r7, #6
 80028ac:	881a      	ldrh	r2, [r3, #0]
 80028ae:	4b53      	ldr	r3, [pc, #332]	@ (80029fc <handle_range+0x1bc>)
 80028b0:	0052      	lsls	r2, r2, #1
 80028b2:	2109      	movs	r1, #9
 80028b4:	52d1      	strh	r1, [r2, r3]
			break;
 80028b6:	e08c      	b.n	80029d2 <handle_range+0x192>
		}
		case MB_TRANSMIT_TIMEOUT:
		{
			if(holding_register_database[holding_register] < 5)
 80028b8:	1dbb      	adds	r3, r7, #6
 80028ba:	881a      	ldrh	r2, [r3, #0]
 80028bc:	4b4f      	ldr	r3, [pc, #316]	@ (80029fc <handle_range+0x1bc>)
 80028be:	0052      	lsls	r2, r2, #1
 80028c0:	5ad3      	ldrh	r3, [r2, r3]
 80028c2:	2b04      	cmp	r3, #4
 80028c4:	d806      	bhi.n	80028d4 <handle_range+0x94>
			{
				holding_register_database[holding_register] = 5;
 80028c6:	1dbb      	adds	r3, r7, #6
 80028c8:	881a      	ldrh	r2, [r3, #0]
 80028ca:	4b4c      	ldr	r3, [pc, #304]	@ (80029fc <handle_range+0x1bc>)
 80028cc:	0052      	lsls	r2, r2, #1
 80028ce:	2105      	movs	r1, #5
 80028d0:	52d1      	strh	r1, [r2, r3]
			}
			else if(holding_register_database[holding_register] > 1000)
			{
				holding_register_database[holding_register] = 1000;
			}
			break;
 80028d2:	e080      	b.n	80029d6 <handle_range+0x196>
			else if(holding_register_database[holding_register] > 1000)
 80028d4:	1dbb      	adds	r3, r7, #6
 80028d6:	881a      	ldrh	r2, [r3, #0]
 80028d8:	4b48      	ldr	r3, [pc, #288]	@ (80029fc <handle_range+0x1bc>)
 80028da:	0052      	lsls	r2, r2, #1
 80028dc:	5ad2      	ldrh	r2, [r2, r3]
 80028de:	23fa      	movs	r3, #250	@ 0xfa
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d800      	bhi.n	80028e8 <handle_range+0xa8>
 80028e6:	e076      	b.n	80029d6 <handle_range+0x196>
				holding_register_database[holding_register] = 1000;
 80028e8:	1dbb      	adds	r3, r7, #6
 80028ea:	881a      	ldrh	r2, [r3, #0]
 80028ec:	4b43      	ldr	r3, [pc, #268]	@ (80029fc <handle_range+0x1bc>)
 80028ee:	0052      	lsls	r2, r2, #1
 80028f0:	21fa      	movs	r1, #250	@ 0xfa
 80028f2:	0089      	lsls	r1, r1, #2
 80028f4:	52d1      	strh	r1, [r2, r3]
			break;
 80028f6:	e06e      	b.n	80029d6 <handle_range+0x196>
		}
		case MB_TRANSMIT_RETRIES:
		{
			if(holding_register_database[holding_register] > 5)
 80028f8:	1dbb      	adds	r3, r7, #6
 80028fa:	881a      	ldrh	r2, [r3, #0]
 80028fc:	4b3f      	ldr	r3, [pc, #252]	@ (80029fc <handle_range+0x1bc>)
 80028fe:	0052      	lsls	r2, r2, #1
 8002900:	5ad3      	ldrh	r3, [r2, r3]
 8002902:	2b05      	cmp	r3, #5
 8002904:	d800      	bhi.n	8002908 <handle_range+0xc8>
 8002906:	e068      	b.n	80029da <handle_range+0x19a>
			{
				holding_register_database[holding_register] = 5;
 8002908:	1dbb      	adds	r3, r7, #6
 800290a:	881a      	ldrh	r2, [r3, #0]
 800290c:	4b3b      	ldr	r3, [pc, #236]	@ (80029fc <handle_range+0x1bc>)
 800290e:	0052      	lsls	r2, r2, #1
 8002910:	2105      	movs	r1, #5
 8002912:	52d1      	strh	r1, [r2, r3]
			}
			break;
 8002914:	e061      	b.n	80029da <handle_range+0x19a>
		}
		case MB_ERRORS:
		{
			if(holding_register_database[holding_register] > 0x3FF)
 8002916:	1dbb      	adds	r3, r7, #6
 8002918:	881a      	ldrh	r2, [r3, #0]
 800291a:	4b38      	ldr	r3, [pc, #224]	@ (80029fc <handle_range+0x1bc>)
 800291c:	0052      	lsls	r2, r2, #1
 800291e:	5ad2      	ldrh	r2, [r2, r3]
 8002920:	2380      	movs	r3, #128	@ 0x80
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	429a      	cmp	r2, r3
 8002926:	d35a      	bcc.n	80029de <handle_range+0x19e>
			{
				holding_register_database[holding_register] = 0x3FF;
 8002928:	1dbb      	adds	r3, r7, #6
 800292a:	881a      	ldrh	r2, [r3, #0]
 800292c:	4b33      	ldr	r3, [pc, #204]	@ (80029fc <handle_range+0x1bc>)
 800292e:	0052      	lsls	r2, r2, #1
 8002930:	4933      	ldr	r1, [pc, #204]	@ (8002a00 <handle_range+0x1c0>)
 8002932:	52d1      	strh	r1, [r2, r3]
			}
			break;
 8002934:	e053      	b.n	80029de <handle_range+0x19e>
		}
		case I2C_ERRORS:
		{
			if(holding_register_database[holding_register] > 0x7F)
 8002936:	1dbb      	adds	r3, r7, #6
 8002938:	881a      	ldrh	r2, [r3, #0]
 800293a:	4b30      	ldr	r3, [pc, #192]	@ (80029fc <handle_range+0x1bc>)
 800293c:	0052      	lsls	r2, r2, #1
 800293e:	5ad3      	ldrh	r3, [r2, r3]
 8002940:	2b7f      	cmp	r3, #127	@ 0x7f
 8002942:	d94e      	bls.n	80029e2 <handle_range+0x1a2>
			{
				holding_register_database[holding_register] = 0x7F;
 8002944:	1dbb      	adds	r3, r7, #6
 8002946:	881a      	ldrh	r2, [r3, #0]
 8002948:	4b2c      	ldr	r3, [pc, #176]	@ (80029fc <handle_range+0x1bc>)
 800294a:	0052      	lsls	r2, r2, #1
 800294c:	217f      	movs	r1, #127	@ 0x7f
 800294e:	52d1      	strh	r1, [r2, r3]
			}
			break;
 8002950:	e047      	b.n	80029e2 <handle_range+0x1a2>
		}
		case I2C_SHUTDOWN ... AUTOPILOT:
		{
			if(holding_register_database[holding_register] > 1)
 8002952:	1dbb      	adds	r3, r7, #6
 8002954:	881a      	ldrh	r2, [r3, #0]
 8002956:	4b29      	ldr	r3, [pc, #164]	@ (80029fc <handle_range+0x1bc>)
 8002958:	0052      	lsls	r2, r2, #1
 800295a:	5ad3      	ldrh	r3, [r2, r3]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d942      	bls.n	80029e6 <handle_range+0x1a6>
			{
				holding_register_database[holding_register] = 1;
 8002960:	1dbb      	adds	r3, r7, #6
 8002962:	881a      	ldrh	r2, [r3, #0]
 8002964:	4b25      	ldr	r3, [pc, #148]	@ (80029fc <handle_range+0x1bc>)
 8002966:	0052      	lsls	r2, r2, #1
 8002968:	2101      	movs	r1, #1
 800296a:	52d1      	strh	r1, [r2, r3]
			}
			break;
 800296c:	e03b      	b.n	80029e6 <handle_range+0x1a6>
		}
		case ENCODER_REFRESH:
		{
			if(holding_register_database[holding_register] < 1000)
 800296e:	1dbb      	adds	r3, r7, #6
 8002970:	881a      	ldrh	r2, [r3, #0]
 8002972:	4b22      	ldr	r3, [pc, #136]	@ (80029fc <handle_range+0x1bc>)
 8002974:	0052      	lsls	r2, r2, #1
 8002976:	5ad2      	ldrh	r2, [r2, r3]
 8002978:	23fa      	movs	r3, #250	@ 0xfa
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	429a      	cmp	r2, r3
 800297e:	d207      	bcs.n	8002990 <handle_range+0x150>
			{
				holding_register_database[holding_register] = 1000;
 8002980:	1dbb      	adds	r3, r7, #6
 8002982:	881a      	ldrh	r2, [r3, #0]
 8002984:	4b1d      	ldr	r3, [pc, #116]	@ (80029fc <handle_range+0x1bc>)
 8002986:	0052      	lsls	r2, r2, #1
 8002988:	21fa      	movs	r1, #250	@ 0xfa
 800298a:	0089      	lsls	r1, r1, #2
 800298c:	52d1      	strh	r1, [r2, r3]
			}
			else if(holding_register_database[holding_register] > 10000)
			{
				holding_register_database[holding_register] = 10000;
			}
			break;
 800298e:	e02c      	b.n	80029ea <handle_range+0x1aa>
			else if(holding_register_database[holding_register] > 10000)
 8002990:	1dbb      	adds	r3, r7, #6
 8002992:	881a      	ldrh	r2, [r3, #0]
 8002994:	4b19      	ldr	r3, [pc, #100]	@ (80029fc <handle_range+0x1bc>)
 8002996:	0052      	lsls	r2, r2, #1
 8002998:	5ad3      	ldrh	r3, [r2, r3]
 800299a:	4a1a      	ldr	r2, [pc, #104]	@ (8002a04 <handle_range+0x1c4>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d924      	bls.n	80029ea <handle_range+0x1aa>
				holding_register_database[holding_register] = 10000;
 80029a0:	1dbb      	adds	r3, r7, #6
 80029a2:	881a      	ldrh	r2, [r3, #0]
 80029a4:	4b15      	ldr	r3, [pc, #84]	@ (80029fc <handle_range+0x1bc>)
 80029a6:	0052      	lsls	r2, r2, #1
 80029a8:	4916      	ldr	r1, [pc, #88]	@ (8002a04 <handle_range+0x1c4>)
 80029aa:	52d1      	strh	r1, [r2, r3]
			break;
 80029ac:	e01d      	b.n	80029ea <handle_range+0x1aa>
		}
		case ACTUATOR_A_TARGET ... ACTUATOR_C_TARGET:
		{
			if(holding_register_database[holding_register] > 0x0FFF)
 80029ae:	1dbb      	adds	r3, r7, #6
 80029b0:	881a      	ldrh	r2, [r3, #0]
 80029b2:	4b12      	ldr	r3, [pc, #72]	@ (80029fc <handle_range+0x1bc>)
 80029b4:	0052      	lsls	r2, r2, #1
 80029b6:	5ad2      	ldrh	r2, [r2, r3]
 80029b8:	2380      	movs	r3, #128	@ 0x80
 80029ba:	015b      	lsls	r3, r3, #5
 80029bc:	429a      	cmp	r2, r3
 80029be:	d316      	bcc.n	80029ee <handle_range+0x1ae>
			{
				holding_register_database[holding_register] = 0x0FFF;
 80029c0:	1dbb      	adds	r3, r7, #6
 80029c2:	881a      	ldrh	r2, [r3, #0]
 80029c4:	4b0d      	ldr	r3, [pc, #52]	@ (80029fc <handle_range+0x1bc>)
 80029c6:	0052      	lsls	r2, r2, #1
 80029c8:	490f      	ldr	r1, [pc, #60]	@ (8002a08 <handle_range+0x1c8>)
 80029ca:	52d1      	strh	r1, [r2, r3]
			}
			break;
 80029cc:	e00f      	b.n	80029ee <handle_range+0x1ae>
			break;
 80029ce:	46c0      	nop			@ (mov r8, r8)
 80029d0:	e00e      	b.n	80029f0 <handle_range+0x1b0>
			break;
 80029d2:	46c0      	nop			@ (mov r8, r8)
 80029d4:	e00c      	b.n	80029f0 <handle_range+0x1b0>
			break;
 80029d6:	46c0      	nop			@ (mov r8, r8)
 80029d8:	e00a      	b.n	80029f0 <handle_range+0x1b0>
			break;
 80029da:	46c0      	nop			@ (mov r8, r8)
 80029dc:	e008      	b.n	80029f0 <handle_range+0x1b0>
			break;
 80029de:	46c0      	nop			@ (mov r8, r8)
 80029e0:	e006      	b.n	80029f0 <handle_range+0x1b0>
			break;
 80029e2:	46c0      	nop			@ (mov r8, r8)
 80029e4:	e004      	b.n	80029f0 <handle_range+0x1b0>
			break;
 80029e6:	46c0      	nop			@ (mov r8, r8)
 80029e8:	e002      	b.n	80029f0 <handle_range+0x1b0>
			break;
 80029ea:	46c0      	nop			@ (mov r8, r8)
 80029ec:	e000      	b.n	80029f0 <handle_range+0x1b0>
			break;
 80029ee:	46c0      	nop			@ (mov r8, r8)
		}
	}
}
 80029f0:	46c0      	nop			@ (mov r8, r8)
 80029f2:	46bd      	mov	sp, r7
 80029f4:	b002      	add	sp, #8
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	0800abfc 	.word	0x0800abfc
 80029fc:	20000010 	.word	0x20000010
 8002a00:	000003ff 	.word	0x000003ff
 8002a04:	00002710 	.word	0x00002710
 8002a08:	00000fff 	.word	0x00000fff

08002a0c <modbus_send>:
#endif // MB_SLAVE

// General Modbus Functions -------------------------------------------------------------------

int8_t modbus_send(uint8_t size)
{
 8002a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	0002      	movs	r2, r0
 8002a14:	1dfb      	adds	r3, r7, #7
 8002a16:	701a      	strb	r2, [r3, #0]
	int8_t status = HAL_OK;
 8002a18:	250f      	movs	r5, #15
 8002a1a:	197b      	adds	r3, r7, r5
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	701a      	strb	r2, [r3, #0]
	// Append CRC (low byte then high byte)
	uint16_t crc = crc_16(modbus_tx_buffer, size);
 8002a20:	260c      	movs	r6, #12
 8002a22:	19bc      	adds	r4, r7, r6
 8002a24:	1dfb      	adds	r3, r7, #7
 8002a26:	781a      	ldrb	r2, [r3, #0]
 8002a28:	4b1f      	ldr	r3, [pc, #124]	@ (8002aa8 <modbus_send+0x9c>)
 8002a2a:	0011      	movs	r1, r2
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	f000 fa09 	bl	8002e44 <crc_16>
 8002a32:	0003      	movs	r3, r0
 8002a34:	8023      	strh	r3, [r4, #0]
	modbus_tx_buffer[size] = low_byte(crc);
 8002a36:	1dfb      	adds	r3, r7, #7
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	19ba      	adds	r2, r7, r6
 8002a3c:	8812      	ldrh	r2, [r2, #0]
 8002a3e:	b2d1      	uxtb	r1, r2
 8002a40:	4a19      	ldr	r2, [pc, #100]	@ (8002aa8 <modbus_send+0x9c>)
 8002a42:	54d1      	strb	r1, [r2, r3]
	modbus_tx_buffer[size + 1] = high_byte(crc);
 8002a44:	19bb      	adds	r3, r7, r6
 8002a46:	881b      	ldrh	r3, [r3, #0]
 8002a48:	0a1b      	lsrs	r3, r3, #8
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	1dfb      	adds	r3, r7, #7
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	3301      	adds	r3, #1
 8002a52:	b2d1      	uxtb	r1, r2
 8002a54:	4a14      	ldr	r2, [pc, #80]	@ (8002aa8 <modbus_send+0x9c>)
 8002a56:	54d1      	strb	r1, [r2, r3]

	uart_tx_int = 0; // This will enable tx timeout monitoring
 8002a58:	4b14      	ldr	r3, [pc, #80]	@ (8002aac <modbus_send+0xa0>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	701a      	strb	r2, [r3, #0]
	tx_time = HAL_GetTick();
 8002a5e:	f001 f945 	bl	8003cec <HAL_GetTick>
 8002a62:	0002      	movs	r2, r0
 8002a64:	4b12      	ldr	r3, [pc, #72]	@ (8002ab0 <modbus_send+0xa4>)
 8002a66:	601a      	str	r2, [r3, #0]
	status = HAL_UART_Transmit_DMA(&huart1, modbus_tx_buffer, size + 2);
 8002a68:	1dfb      	adds	r3, r7, #7
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	3302      	adds	r3, #2
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	490d      	ldr	r1, [pc, #52]	@ (8002aa8 <modbus_send+0x9c>)
 8002a74:	4b0f      	ldr	r3, [pc, #60]	@ (8002ab4 <modbus_send+0xa8>)
 8002a76:	0018      	movs	r0, r3
 8002a78:	f006 f86c 	bl	8008b54 <HAL_UART_Transmit_DMA>
 8002a7c:	0003      	movs	r3, r0
 8002a7e:	001a      	movs	r2, r3
 8002a80:	197b      	adds	r3, r7, r5
 8002a82:	701a      	strb	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(huart1.hdmatx, DMA_IT_HT);
 8002a84:	4b0b      	ldr	r3, [pc, #44]	@ (8002ab4 <modbus_send+0xa8>)
 8002a86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	4b09      	ldr	r3, [pc, #36]	@ (8002ab4 <modbus_send+0xa8>)
 8002a8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2104      	movs	r1, #4
 8002a94:	438a      	bics	r2, r1
 8002a96:	601a      	str	r2, [r3, #0]
	return status;
 8002a98:	197b      	adds	r3, r7, r5
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	b25b      	sxtb	r3, r3
}
 8002a9e:	0018      	movs	r0, r3
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	b005      	add	sp, #20
 8002aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002aa6:	46c0      	nop			@ (mov r8, r8)
 8002aa8:	20000790 	.word	0x20000790
 8002aac:	200000b1 	.word	0x200000b1
 8002ab0:	20000890 	.word	0x20000890
 8002ab4:	200004f4 	.word	0x200004f4

08002ab8 <modbus_reset>:

int8_t modbus_reset()
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
	int8_t status = 0;
 8002abe:	1dfb      	adds	r3, r7, #7
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	701a      	strb	r2, [r3, #0]
	// Reset interrupt variables to default state
	uart_tx_int = 1;
 8002ac4:	4b37      	ldr	r3, [pc, #220]	@ (8002ba4 <modbus_reset+0xec>)
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	701a      	strb	r2, [r3, #0]
	uart_rx_int = 0;
 8002aca:	4b37      	ldr	r3, [pc, #220]	@ (8002ba8 <modbus_reset+0xf0>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	701a      	strb	r2, [r3, #0]
	status = HAL_UART_Abort(&huart1);
 8002ad0:	4b36      	ldr	r3, [pc, #216]	@ (8002bac <modbus_reset+0xf4>)
 8002ad2:	0018      	movs	r0, r3
 8002ad4:	f006 f8d0 	bl	8008c78 <HAL_UART_Abort>
 8002ad8:	0003      	movs	r3, r0
 8002ada:	001a      	movs	r2, r3
 8002adc:	1dfb      	adds	r3, r7, #7
 8002ade:	701a      	strb	r2, [r3, #0]
	status |= HAL_UART_DeInit(&huart1);
 8002ae0:	4b32      	ldr	r3, [pc, #200]	@ (8002bac <modbus_reset+0xf4>)
 8002ae2:	0018      	movs	r0, r3
 8002ae4:	f005 fff6 	bl	8008ad4 <HAL_UART_DeInit>
 8002ae8:	0003      	movs	r3, r0
 8002aea:	b259      	sxtb	r1, r3
 8002aec:	1dfb      	adds	r3, r7, #7
 8002aee:	1dfa      	adds	r2, r7, #7
 8002af0:	7812      	ldrb	r2, [r2, #0]
 8002af2:	430a      	orrs	r2, r1
 8002af4:	701a      	strb	r2, [r3, #0]
	__USART1_FORCE_RESET();
 8002af6:	4b2e      	ldr	r3, [pc, #184]	@ (8002bb0 <modbus_reset+0xf8>)
 8002af8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002afa:	4b2d      	ldr	r3, [pc, #180]	@ (8002bb0 <modbus_reset+0xf8>)
 8002afc:	2180      	movs	r1, #128	@ 0x80
 8002afe:	01c9      	lsls	r1, r1, #7
 8002b00:	430a      	orrs	r2, r1
 8002b02:	631a      	str	r2, [r3, #48]	@ 0x30
	HAL_Delay(100);
 8002b04:	2064      	movs	r0, #100	@ 0x64
 8002b06:	f001 f8fb 	bl	8003d00 <HAL_Delay>
	__USART1_RELEASE_RESET();
 8002b0a:	4b29      	ldr	r3, [pc, #164]	@ (8002bb0 <modbus_reset+0xf8>)
 8002b0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b0e:	4b28      	ldr	r3, [pc, #160]	@ (8002bb0 <modbus_reset+0xf8>)
 8002b10:	4928      	ldr	r1, [pc, #160]	@ (8002bb4 <modbus_reset+0xfc>)
 8002b12:	400a      	ands	r2, r1
 8002b14:	631a      	str	r2, [r3, #48]	@ 0x30
	status = HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0);
 8002b16:	4825      	ldr	r0, [pc, #148]	@ (8002bac <modbus_reset+0xf4>)
 8002b18:	2300      	movs	r3, #0
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	f007 fb49 	bl	800a1b4 <HAL_RS485Ex_Init>
 8002b22:	0003      	movs	r3, r0
 8002b24:	001a      	movs	r2, r3
 8002b26:	1dfb      	adds	r3, r7, #7
 8002b28:	701a      	strb	r2, [r3, #0]
	status |= HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8);
 8002b2a:	4b20      	ldr	r3, [pc, #128]	@ (8002bac <modbus_reset+0xf4>)
 8002b2c:	2100      	movs	r1, #0
 8002b2e:	0018      	movs	r0, r3
 8002b30:	f007 fc04 	bl	800a33c <HAL_UARTEx_SetTxFifoThreshold>
 8002b34:	0003      	movs	r3, r0
 8002b36:	b259      	sxtb	r1, r3
 8002b38:	1dfb      	adds	r3, r7, #7
 8002b3a:	1dfa      	adds	r2, r7, #7
 8002b3c:	7812      	ldrb	r2, [r2, #0]
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	701a      	strb	r2, [r3, #0]
	status |= HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8);
 8002b42:	4b1a      	ldr	r3, [pc, #104]	@ (8002bac <modbus_reset+0xf4>)
 8002b44:	2100      	movs	r1, #0
 8002b46:	0018      	movs	r0, r3
 8002b48:	f007 fc38 	bl	800a3bc <HAL_UARTEx_SetRxFifoThreshold>
 8002b4c:	0003      	movs	r3, r0
 8002b4e:	b259      	sxtb	r1, r3
 8002b50:	1dfb      	adds	r3, r7, #7
 8002b52:	1dfa      	adds	r2, r7, #7
 8002b54:	7812      	ldrb	r2, [r2, #0]
 8002b56:	430a      	orrs	r2, r1
 8002b58:	701a      	strb	r2, [r3, #0]
	status |= HAL_UARTEx_DisableFifoMode(&huart1);
 8002b5a:	4b14      	ldr	r3, [pc, #80]	@ (8002bac <modbus_reset+0xf4>)
 8002b5c:	0018      	movs	r0, r3
 8002b5e:	f007 fbb3 	bl	800a2c8 <HAL_UARTEx_DisableFifoMode>
 8002b62:	0003      	movs	r3, r0
 8002b64:	b259      	sxtb	r1, r3
 8002b66:	1dfb      	adds	r3, r7, #7
 8002b68:	1dfa      	adds	r2, r7, #7
 8002b6a:	7812      	ldrb	r2, [r2, #0]
 8002b6c:	430a      	orrs	r2, r1
 8002b6e:	701a      	strb	r2, [r3, #0]
	status |= modbus_set_rx();
 8002b70:	f000 f822 	bl	8002bb8 <modbus_set_rx>
 8002b74:	0003      	movs	r3, r0
 8002b76:	0019      	movs	r1, r3
 8002b78:	1dfb      	adds	r3, r7, #7
 8002b7a:	1dfa      	adds	r2, r7, #7
 8002b7c:	7812      	ldrb	r2, [r2, #0]
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	701a      	strb	r2, [r3, #0]
	if(status != HAL_OK)
 8002b82:	1dfb      	adds	r3, r7, #7
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	b25b      	sxtb	r3, r3
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d004      	beq.n	8002b96 <modbus_reset+0xde>
	{
		return handle_modbus_error(MB_FATAL_ERROR);
 8002b8c:	2015      	movs	r0, #21
 8002b8e:	f000 f93b 	bl	8002e08 <handle_modbus_error>
 8002b92:	0003      	movs	r3, r0
 8002b94:	e002      	b.n	8002b9c <modbus_reset+0xe4>
	}
	return status;
 8002b96:	1dfb      	adds	r3, r7, #7
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	b25b      	sxtb	r3, r3
}
 8002b9c:	0018      	movs	r0, r3
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	b002      	add	sp, #8
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	200000b1 	.word	0x200000b1
 8002ba8:	20000898 	.word	0x20000898
 8002bac:	200004f4 	.word	0x200004f4
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	ffffbfff 	.word	0xffffbfff

08002bb8 <modbus_set_rx>:

int8_t modbus_set_rx()
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
	int8_t status = HAL_UARTEx_ReceiveToIdle_DMA(&huart1, modbus_rx_buffer, 6);
 8002bbe:	490e      	ldr	r1, [pc, #56]	@ (8002bf8 <modbus_set_rx+0x40>)
 8002bc0:	4b0e      	ldr	r3, [pc, #56]	@ (8002bfc <modbus_set_rx+0x44>)
 8002bc2:	2206      	movs	r2, #6
 8002bc4:	0018      	movs	r0, r3
 8002bc6:	f007 fc3b 	bl	800a440 <HAL_UARTEx_ReceiveToIdle_DMA>
 8002bca:	0003      	movs	r3, r0
 8002bcc:	001a      	movs	r2, r3
 8002bce:	1dfb      	adds	r3, r7, #7
 8002bd0:	701a      	strb	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(huart1.hdmarx, DMA_IT_HT);
 8002bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8002bfc <modbus_set_rx+0x44>)
 8002bd4:	2280      	movs	r2, #128	@ 0x80
 8002bd6:	589b      	ldr	r3, [r3, r2]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	4b07      	ldr	r3, [pc, #28]	@ (8002bfc <modbus_set_rx+0x44>)
 8002bde:	2180      	movs	r1, #128	@ 0x80
 8002be0:	585b      	ldr	r3, [r3, r1]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2104      	movs	r1, #4
 8002be6:	438a      	bics	r2, r1
 8002be8:	601a      	str	r2, [r3, #0]

	return status;
 8002bea:	1dfb      	adds	r3, r7, #7
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	b25b      	sxtb	r3, r3
}
 8002bf0:	0018      	movs	r0, r3
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	b002      	add	sp, #8
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	20000690 	.word	0x20000690
 8002bfc:	200004f4 	.word	0x200004f4

08002c00 <monitor_modbus>:

int8_t monitor_modbus()
{
 8002c00:	b590      	push	{r4, r7, lr}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
	int8_t status = MB_SUCCESS;
 8002c06:	1dfb      	adds	r3, r7, #7
 8002c08:	2200      	movs	r2, #0
 8002c0a:	701a      	strb	r2, [r3, #0]

	// Chunk miss handling
	status = handle_chunk_miss();
 8002c0c:	1dfc      	adds	r4, r7, #7
 8002c0e:	f000 f95f 	bl	8002ed0 <handle_chunk_miss>
 8002c12:	0003      	movs	r3, r0
 8002c14:	7023      	strb	r3, [r4, #0]
	if(status != MB_SUCCESS)
 8002c16:	1dfb      	adds	r3, r7, #7
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	b25b      	sxtb	r3, r3
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d012      	beq.n	8002c46 <monitor_modbus+0x46>
	{
		status = modbus_reset();
 8002c20:	1dfc      	adds	r4, r7, #7
 8002c22:	f7ff ff49 	bl	8002ab8 <modbus_reset>
 8002c26:	0003      	movs	r3, r0
 8002c28:	7023      	strb	r3, [r4, #0]
		if(status != MB_SUCCESS)
 8002c2a:	1dfb      	adds	r3, r7, #7
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	b25b      	sxtb	r3, r3
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d003      	beq.n	8002c3c <monitor_modbus+0x3c>
		{
			return status;
 8002c34:	1dfb      	adds	r3, r7, #7
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	b25b      	sxtb	r3, r3
 8002c3a:	e03c      	b.n	8002cb6 <monitor_modbus+0xb6>
		}
		return handle_modbus_error(MB_UART_ERROR);
 8002c3c:	2014      	movs	r0, #20
 8002c3e:	f000 f8e3 	bl	8002e08 <handle_modbus_error>
 8002c42:	0003      	movs	r3, r0
 8002c44:	e037      	b.n	8002cb6 <monitor_modbus+0xb6>
	}

	// Uart error handling
	if(uart_err_int)
 8002c46:	4b1e      	ldr	r3, [pc, #120]	@ (8002cc0 <monitor_modbus+0xc0>)
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d015      	beq.n	8002c7c <monitor_modbus+0x7c>
	{
		uart_err_int = 0;
 8002c50:	4b1b      	ldr	r3, [pc, #108]	@ (8002cc0 <monitor_modbus+0xc0>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	701a      	strb	r2, [r3, #0]
		status = modbus_reset();
 8002c56:	1dfc      	adds	r4, r7, #7
 8002c58:	f7ff ff2e 	bl	8002ab8 <modbus_reset>
 8002c5c:	0003      	movs	r3, r0
 8002c5e:	7023      	strb	r3, [r4, #0]
		if(status != MB_SUCCESS)
 8002c60:	1dfb      	adds	r3, r7, #7
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	b25b      	sxtb	r3, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d003      	beq.n	8002c72 <monitor_modbus+0x72>
		{
			return status;
 8002c6a:	1dfb      	adds	r3, r7, #7
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	b25b      	sxtb	r3, r3
 8002c70:	e021      	b.n	8002cb6 <monitor_modbus+0xb6>
		}
		return handle_modbus_error(MB_UART_ERROR);
 8002c72:	2014      	movs	r0, #20
 8002c74:	f000 f8c8 	bl	8002e08 <handle_modbus_error>
 8002c78:	0003      	movs	r3, r0
 8002c7a:	e01c      	b.n	8002cb6 <monitor_modbus+0xb6>
	}

	// TX timeout handling
	if(!uart_tx_int)
 8002c7c:	4b11      	ldr	r3, [pc, #68]	@ (8002cc4 <monitor_modbus+0xc4>)
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d114      	bne.n	8002cb0 <monitor_modbus+0xb0>
	{
		if(HAL_GetTick() - tx_time >= holding_register_database[MB_TRANSMIT_TIMEOUT])
 8002c86:	f001 f831 	bl	8003cec <HAL_GetTick>
 8002c8a:	0002      	movs	r2, r0
 8002c8c:	4b0e      	ldr	r3, [pc, #56]	@ (8002cc8 <monitor_modbus+0xc8>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	4a0e      	ldr	r2, [pc, #56]	@ (8002ccc <monitor_modbus+0xcc>)
 8002c94:	8892      	ldrh	r2, [r2, #4]
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d307      	bcc.n	8002caa <monitor_modbus+0xaa>
		{
			uart_tx_int = 1;
 8002c9a:	4b0a      	ldr	r3, [pc, #40]	@ (8002cc4 <monitor_modbus+0xc4>)
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	701a      	strb	r2, [r3, #0]
			return handle_modbus_error(MB_TX_TIMEOUT);
 8002ca0:	2012      	movs	r0, #18
 8002ca2:	f000 f8b1 	bl	8002e08 <handle_modbus_error>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	e005      	b.n	8002cb6 <monitor_modbus+0xb6>
		}
		status = HAL_BUSY;
 8002caa:	1dfb      	adds	r3, r7, #7
 8002cac:	2202      	movs	r2, #2
 8002cae:	701a      	strb	r2, [r3, #0]
			}
			status = HAL_BUSY;
		}
	}
#endif
	return status;
 8002cb0:	1dfb      	adds	r3, r7, #7
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	b25b      	sxtb	r3, r3
}
 8002cb6:	0018      	movs	r0, r3
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	b003      	add	sp, #12
 8002cbc:	bd90      	pop	{r4, r7, pc}
 8002cbe:	46c0      	nop			@ (mov r8, r8)
 8002cc0:	20000899 	.word	0x20000899
 8002cc4:	200000b1 	.word	0x200000b1
 8002cc8:	20000890 	.word	0x20000890
 8002ccc:	20000010 	.word	0x20000010

08002cd0 <modbus_change_baud_rate>:

	return status;
}

int8_t modbus_change_baud_rate()
{
 8002cd0:	b590      	push	{r4, r7, lr}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
	int8_t status = 0;
 8002cd6:	1dfb      	adds	r3, r7, #7
 8002cd8:	2200      	movs	r2, #0
 8002cda:	701a      	strb	r2, [r3, #0]

	switch(holding_register_database[MB_BAUD_RATE])
 8002cdc:	4b3f      	ldr	r3, [pc, #252]	@ (8002ddc <modbus_change_baud_rate+0x10c>)
 8002cde:	885b      	ldrh	r3, [r3, #2]
 8002ce0:	2b09      	cmp	r3, #9
 8002ce2:	d831      	bhi.n	8002d48 <modbus_change_baud_rate+0x78>
 8002ce4:	009a      	lsls	r2, r3, #2
 8002ce6:	4b3e      	ldr	r3, [pc, #248]	@ (8002de0 <modbus_change_baud_rate+0x110>)
 8002ce8:	18d3      	adds	r3, r2, r3
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	469f      	mov	pc, r3
	{
		case BAUD_RATE_2400:
		{
			huart1.Init.BaudRate = 2400;
 8002cee:	4b3d      	ldr	r3, [pc, #244]	@ (8002de4 <modbus_change_baud_rate+0x114>)
 8002cf0:	2296      	movs	r2, #150	@ 0x96
 8002cf2:	0112      	lsls	r2, r2, #4
 8002cf4:	605a      	str	r2, [r3, #4]
			break;
 8002cf6:	e04e      	b.n	8002d96 <modbus_change_baud_rate+0xc6>
		}
		case BAUD_RATE_4800:
		{
			huart1.Init.BaudRate = 4800;
 8002cf8:	4b3a      	ldr	r3, [pc, #232]	@ (8002de4 <modbus_change_baud_rate+0x114>)
 8002cfa:	2296      	movs	r2, #150	@ 0x96
 8002cfc:	0152      	lsls	r2, r2, #5
 8002cfe:	605a      	str	r2, [r3, #4]
			break;
 8002d00:	e049      	b.n	8002d96 <modbus_change_baud_rate+0xc6>
		}
		case BAUD_RATE_9600:
		{
			huart1.Init.BaudRate = 9600;
 8002d02:	4b38      	ldr	r3, [pc, #224]	@ (8002de4 <modbus_change_baud_rate+0x114>)
 8002d04:	2296      	movs	r2, #150	@ 0x96
 8002d06:	0192      	lsls	r2, r2, #6
 8002d08:	605a      	str	r2, [r3, #4]
			break;
 8002d0a:	e044      	b.n	8002d96 <modbus_change_baud_rate+0xc6>
		}
		case BAUD_RATE_19200:
		{
			huart1.Init.BaudRate = 19200;
 8002d0c:	4b35      	ldr	r3, [pc, #212]	@ (8002de4 <modbus_change_baud_rate+0x114>)
 8002d0e:	2296      	movs	r2, #150	@ 0x96
 8002d10:	01d2      	lsls	r2, r2, #7
 8002d12:	605a      	str	r2, [r3, #4]
			break;
 8002d14:	e03f      	b.n	8002d96 <modbus_change_baud_rate+0xc6>
		}
		case BAUD_RATE_38400:
		{
			huart1.Init.BaudRate = 38400;
 8002d16:	4b33      	ldr	r3, [pc, #204]	@ (8002de4 <modbus_change_baud_rate+0x114>)
 8002d18:	2296      	movs	r2, #150	@ 0x96
 8002d1a:	0212      	lsls	r2, r2, #8
 8002d1c:	605a      	str	r2, [r3, #4]
			break;
 8002d1e:	e03a      	b.n	8002d96 <modbus_change_baud_rate+0xc6>
		}
		case BAUD_RATE_57600:
		{
			huart1.Init.BaudRate = 57600;
 8002d20:	4b30      	ldr	r3, [pc, #192]	@ (8002de4 <modbus_change_baud_rate+0x114>)
 8002d22:	22e1      	movs	r2, #225	@ 0xe1
 8002d24:	0212      	lsls	r2, r2, #8
 8002d26:	605a      	str	r2, [r3, #4]
			break;
 8002d28:	e035      	b.n	8002d96 <modbus_change_baud_rate+0xc6>
		}
		case BAUD_RATE_115200:
		{
			huart1.Init.BaudRate = 115200;
 8002d2a:	4b2e      	ldr	r3, [pc, #184]	@ (8002de4 <modbus_change_baud_rate+0x114>)
 8002d2c:	22e1      	movs	r2, #225	@ 0xe1
 8002d2e:	0252      	lsls	r2, r2, #9
 8002d30:	605a      	str	r2, [r3, #4]
			break;
 8002d32:	e030      	b.n	8002d96 <modbus_change_baud_rate+0xc6>
		}
		case BAUD_RATE_128000:
		{
			huart1.Init.BaudRate = 128000;
 8002d34:	4b2b      	ldr	r3, [pc, #172]	@ (8002de4 <modbus_change_baud_rate+0x114>)
 8002d36:	22fa      	movs	r2, #250	@ 0xfa
 8002d38:	0252      	lsls	r2, r2, #9
 8002d3a:	605a      	str	r2, [r3, #4]
			break;
 8002d3c:	e02b      	b.n	8002d96 <modbus_change_baud_rate+0xc6>
		}
		case BAUD_RATE_256000:
		{
			huart1.Init.BaudRate = 256000;
 8002d3e:	4b29      	ldr	r3, [pc, #164]	@ (8002de4 <modbus_change_baud_rate+0x114>)
 8002d40:	22fa      	movs	r2, #250	@ 0xfa
 8002d42:	0292      	lsls	r2, r2, #10
 8002d44:	605a      	str	r2, [r3, #4]
			break;
 8002d46:	e026      	b.n	8002d96 <modbus_change_baud_rate+0xc6>
		}
		default:
		{
			holding_register_database[MB_BAUD_RATE] = BAUD_RATE_9600;
 8002d48:	4b24      	ldr	r3, [pc, #144]	@ (8002ddc <modbus_change_baud_rate+0x10c>)
 8002d4a:	2203      	movs	r2, #3
 8002d4c:	805a      	strh	r2, [r3, #2]
			huart1.Init.BaudRate = 9600;
 8002d4e:	4b25      	ldr	r3, [pc, #148]	@ (8002de4 <modbus_change_baud_rate+0x114>)
 8002d50:	2296      	movs	r2, #150	@ 0x96
 8002d52:	0192      	lsls	r2, r2, #6
 8002d54:	605a      	str	r2, [r3, #4]
			status = UART_SetConfig(&huart1);
 8002d56:	4b23      	ldr	r3, [pc, #140]	@ (8002de4 <modbus_change_baud_rate+0x114>)
 8002d58:	0018      	movs	r0, r3
 8002d5a:	f006 fbf7 	bl	800954c <UART_SetConfig>
 8002d5e:	0003      	movs	r3, r0
 8002d60:	001a      	movs	r2, r3
 8002d62:	1dfb      	adds	r3, r7, #7
 8002d64:	701a      	strb	r2, [r3, #0]
			if(status == HAL_OK)
 8002d66:	1dfb      	adds	r3, r7, #7
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	b25b      	sxtb	r3, r3
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d10d      	bne.n	8002d8c <modbus_change_baud_rate+0xbc>
			{
				status = modbus_reset();
 8002d70:	1dfc      	adds	r4, r7, #7
 8002d72:	f7ff fea1 	bl	8002ab8 <modbus_reset>
 8002d76:	0003      	movs	r3, r0
 8002d78:	7023      	strb	r3, [r4, #0]
				if(status != HAL_OK)
 8002d7a:	1dfb      	adds	r3, r7, #7
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	b25b      	sxtb	r3, r3
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d003      	beq.n	8002d8c <modbus_change_baud_rate+0xbc>
				{
					return status;
 8002d84:	1dfb      	adds	r3, r7, #7
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	b25b      	sxtb	r3, r3
 8002d8a:	e022      	b.n	8002dd2 <modbus_change_baud_rate+0x102>
				}
			}
			return handle_modbus_error(RANGE_ERROR);
 8002d8c:	200e      	movs	r0, #14
 8002d8e:	f000 f83b 	bl	8002e08 <handle_modbus_error>
 8002d92:	0003      	movs	r3, r0
 8002d94:	e01d      	b.n	8002dd2 <modbus_change_baud_rate+0x102>
		}
	}
	status = UART_SetConfig(&huart1);
 8002d96:	4b13      	ldr	r3, [pc, #76]	@ (8002de4 <modbus_change_baud_rate+0x114>)
 8002d98:	0018      	movs	r0, r3
 8002d9a:	f006 fbd7 	bl	800954c <UART_SetConfig>
 8002d9e:	0003      	movs	r3, r0
 8002da0:	001a      	movs	r2, r3
 8002da2:	1dfb      	adds	r3, r7, #7
 8002da4:	701a      	strb	r2, [r3, #0]
	if(status == HAL_OK)
 8002da6:	1dfb      	adds	r3, r7, #7
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	b25b      	sxtb	r3, r3
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d10d      	bne.n	8002dcc <modbus_change_baud_rate+0xfc>
	{
		// Log error, reset UART
		status = modbus_reset();
 8002db0:	1dfc      	adds	r4, r7, #7
 8002db2:	f7ff fe81 	bl	8002ab8 <modbus_reset>
 8002db6:	0003      	movs	r3, r0
 8002db8:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK)
 8002dba:	1dfb      	adds	r3, r7, #7
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	b25b      	sxtb	r3, r3
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d003      	beq.n	8002dcc <modbus_change_baud_rate+0xfc>
		{
			return status;
 8002dc4:	1dfb      	adds	r3, r7, #7
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	b25b      	sxtb	r3, r3
 8002dca:	e002      	b.n	8002dd2 <modbus_change_baud_rate+0x102>
		}
	}

	return modbus_set_rx();
 8002dcc:	f7ff fef4 	bl	8002bb8 <modbus_set_rx>
 8002dd0:	0003      	movs	r3, r0
}
 8002dd2:	0018      	movs	r0, r3
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	b003      	add	sp, #12
 8002dd8:	bd90      	pop	{r4, r7, pc}
 8002dda:	46c0      	nop			@ (mov r8, r8)
 8002ddc:	20000010 	.word	0x20000010
 8002de0:	0800ad08 	.word	0x0800ad08
 8002de4:	200004f4 	.word	0x200004f4

08002de8 <get_rx_buffer>:
}


// Low Level Functions -------------------------------------------------------------------------
uint8_t get_rx_buffer(uint8_t index)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	0002      	movs	r2, r0
 8002df0:	1dfb      	adds	r3, r7, #7
 8002df2:	701a      	strb	r2, [r3, #0]
	if (index < MODBUS_RX_BUFFER_SIZE)
	{
		return modbus_rx_buffer[index];
 8002df4:	1dfb      	adds	r3, r7, #7
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	4a02      	ldr	r2, [pc, #8]	@ (8002e04 <get_rx_buffer+0x1c>)
 8002dfa:	5cd3      	ldrb	r3, [r2, r3]
	}
	return 0xFF;
}
 8002dfc:	0018      	movs	r0, r3
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	b002      	add	sp, #8
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	20000690 	.word	0x20000690

08002e08 <handle_modbus_error>:

int8_t handle_modbus_error(int8_t error_code)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	0002      	movs	r2, r0
 8002e10:	1dfb      	adds	r3, r7, #7
 8002e12:	701a      	strb	r2, [r3, #0]
	holding_register_database[MB_ERRORS] |= 1U << (error_code - RANGE_ERROR);
 8002e14:	4b0a      	ldr	r3, [pc, #40]	@ (8002e40 <handle_modbus_error+0x38>)
 8002e16:	891a      	ldrh	r2, [r3, #8]
 8002e18:	1dfb      	adds	r3, r7, #7
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	b25b      	sxtb	r3, r3
 8002e1e:	3b0e      	subs	r3, #14
 8002e20:	2101      	movs	r1, #1
 8002e22:	4099      	lsls	r1, r3
 8002e24:	000b      	movs	r3, r1
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	4b04      	ldr	r3, [pc, #16]	@ (8002e40 <handle_modbus_error+0x38>)
 8002e2e:	811a      	strh	r2, [r3, #8]
	return error_code;
 8002e30:	1dfb      	adds	r3, r7, #7
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	b25b      	sxtb	r3, r3
}
 8002e36:	0018      	movs	r0, r3
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	b002      	add	sp, #8
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	46c0      	nop			@ (mov r8, r8)
 8002e40:	20000010 	.word	0x20000010

08002e44 <crc_16>:

// Private Functions ---------------------------------------------------------------------------

uint16_t crc_16(uint8_t *data, uint8_t size)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	000a      	movs	r2, r1
 8002e4e:	1cfb      	adds	r3, r7, #3
 8002e50:	701a      	strb	r2, [r3, #0]
	uint8_t crc_hi = 0xFF;
 8002e52:	230f      	movs	r3, #15
 8002e54:	18fb      	adds	r3, r7, r3
 8002e56:	22ff      	movs	r2, #255	@ 0xff
 8002e58:	701a      	strb	r2, [r3, #0]
	uint8_t crc_low = 0xFF;
 8002e5a:	230e      	movs	r3, #14
 8002e5c:	18fb      	adds	r3, r7, r3
 8002e5e:	22ff      	movs	r2, #255	@ 0xff
 8002e60:	701a      	strb	r2, [r3, #0]
	 unsigned int i; /* will index into CRC lookup */

	/* pass through message buffer */
	while (size--)
 8002e62:	e019      	b.n	8002e98 <crc_16+0x54>
	{
		i = crc_low ^ *data++; /* calculate the CRC  */
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	1c5a      	adds	r2, r3, #1
 8002e68:	607a      	str	r2, [r7, #4]
 8002e6a:	781a      	ldrb	r2, [r3, #0]
 8002e6c:	200e      	movs	r0, #14
 8002e6e:	183b      	adds	r3, r7, r0
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	4053      	eors	r3, r2
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	60bb      	str	r3, [r7, #8]
		crc_low = crc_hi ^ table_crc_hi[i];
 8002e78:	4a13      	ldr	r2, [pc, #76]	@ (8002ec8 <crc_16+0x84>)
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	18d3      	adds	r3, r2, r3
 8002e7e:	7819      	ldrb	r1, [r3, #0]
 8002e80:	183b      	adds	r3, r7, r0
 8002e82:	200f      	movs	r0, #15
 8002e84:	183a      	adds	r2, r7, r0
 8002e86:	7812      	ldrb	r2, [r2, #0]
 8002e88:	404a      	eors	r2, r1
 8002e8a:	701a      	strb	r2, [r3, #0]
		crc_hi = table_crc_lo[i];
 8002e8c:	183b      	adds	r3, r7, r0
 8002e8e:	490f      	ldr	r1, [pc, #60]	@ (8002ecc <crc_16+0x88>)
 8002e90:	68ba      	ldr	r2, [r7, #8]
 8002e92:	188a      	adds	r2, r1, r2
 8002e94:	7812      	ldrb	r2, [r2, #0]
 8002e96:	701a      	strb	r2, [r3, #0]
	while (size--)
 8002e98:	1cfb      	adds	r3, r7, #3
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	1cfa      	adds	r2, r7, #3
 8002e9e:	1e59      	subs	r1, r3, #1
 8002ea0:	7011      	strb	r1, [r2, #0]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1de      	bne.n	8002e64 <crc_16+0x20>
	}

	return (crc_hi << 8 | crc_low);
 8002ea6:	230f      	movs	r3, #15
 8002ea8:	18fb      	adds	r3, r7, r3
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	021b      	lsls	r3, r3, #8
 8002eae:	b21a      	sxth	r2, r3
 8002eb0:	230e      	movs	r3, #14
 8002eb2:	18fb      	adds	r3, r7, r3
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	b21b      	sxth	r3, r3
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	b21b      	sxth	r3, r3
 8002ebc:	b29b      	uxth	r3, r3
}
 8002ebe:	0018      	movs	r0, r3
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	b004      	add	sp, #16
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	46c0      	nop			@ (mov r8, r8)
 8002ec8:	0800a9fc 	.word	0x0800a9fc
 8002ecc:	0800aafc 	.word	0x0800aafc

08002ed0 <handle_chunk_miss>:

int8_t handle_chunk_miss()
{
 8002ed0:	b590      	push	{r4, r7, lr}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
	if(modbus_header == 0)
 8002ed6:	4b15      	ldr	r3, [pc, #84]	@ (8002f2c <handle_chunk_miss+0x5c>)
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d120      	bne.n	8002f22 <handle_chunk_miss+0x52>
	{
		if(HAL_GetTick() - chunk_time > 10)
 8002ee0:	f000 ff04 	bl	8003cec <HAL_GetTick>
 8002ee4:	0002      	movs	r2, r0
 8002ee6:	4b12      	ldr	r3, [pc, #72]	@ (8002f30 <handle_chunk_miss+0x60>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	2b0a      	cmp	r3, #10
 8002eee:	d918      	bls.n	8002f22 <handle_chunk_miss+0x52>
		{
			modbus_header = 1;
 8002ef0:	4b0e      	ldr	r3, [pc, #56]	@ (8002f2c <handle_chunk_miss+0x5c>)
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	701a      	strb	r2, [r3, #0]
			int8_t status = HAL_UART_Abort(&huart1);
 8002ef6:	4b0f      	ldr	r3, [pc, #60]	@ (8002f34 <handle_chunk_miss+0x64>)
 8002ef8:	0018      	movs	r0, r3
 8002efa:	f005 febd 	bl	8008c78 <HAL_UART_Abort>
 8002efe:	0003      	movs	r3, r0
 8002f00:	001a      	movs	r2, r3
 8002f02:	1dfb      	adds	r3, r7, #7
 8002f04:	701a      	strb	r2, [r3, #0]
			if(status == HAL_OK)
 8002f06:	1dfb      	adds	r3, r7, #7
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	b25b      	sxtb	r3, r3
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d104      	bne.n	8002f1a <handle_chunk_miss+0x4a>
			{
				status = modbus_set_rx();
 8002f10:	1dfc      	adds	r4, r7, #7
 8002f12:	f7ff fe51 	bl	8002bb8 <modbus_set_rx>
 8002f16:	0003      	movs	r3, r0
 8002f18:	7023      	strb	r3, [r4, #0]
			}
			return status;
 8002f1a:	1dfb      	adds	r3, r7, #7
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	b25b      	sxtb	r3, r3
 8002f20:	e000      	b.n	8002f24 <handle_chunk_miss+0x54>
		}
	}
	return MB_SUCCESS;
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	0018      	movs	r0, r3
 8002f26:	46bd      	mov	sp, r7
 8002f28:	b003      	add	sp, #12
 8002f2a:	bd90      	pop	{r4, r7, pc}
 8002f2c:	200000b0 	.word	0x200000b0
 8002f30:	20000894 	.word	0x20000894
 8002f34:	200004f4 	.word	0x200004f4

08002f38 <LL_ADC_REG_SetDMATransfer>:
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	2203      	movs	r2, #3
 8002f48:	4393      	bics	r3, r2
 8002f4a:	001a      	movs	r2, r3
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	60da      	str	r2, [r3, #12]
}
 8002f54:	46c0      	nop			@ (mov r8, r8)
 8002f56:	46bd      	mov	sp, r7
 8002f58:	b002      	add	sp, #8
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <LL_ADC_REG_GetDMATransfer>:
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	2203      	movs	r2, #3
 8002f6a:	4013      	ands	r3, r2
}
 8002f6c:	0018      	movs	r0, r3
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	b002      	add	sp, #8
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <LL_ADC_EnableInternalRegulator>:
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	4a05      	ldr	r2, [pc, #20]	@ (8002f98 <LL_ADC_EnableInternalRegulator+0x24>)
 8002f82:	4013      	ands	r3, r2
 8002f84:	2280      	movs	r2, #128	@ 0x80
 8002f86:	0552      	lsls	r2, r2, #21
 8002f88:	431a      	orrs	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	609a      	str	r2, [r3, #8]
}
 8002f8e:	46c0      	nop			@ (mov r8, r8)
 8002f90:	46bd      	mov	sp, r7
 8002f92:	b002      	add	sp, #8
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	46c0      	nop			@ (mov r8, r8)
 8002f98:	6fffffe8 	.word	0x6fffffe8

08002f9c <LL_ADC_Enable>:
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	4a04      	ldr	r2, [pc, #16]	@ (8002fbc <LL_ADC_Enable+0x20>)
 8002faa:	4013      	ands	r3, r2
 8002fac:	2201      	movs	r2, #1
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	609a      	str	r2, [r3, #8]
}
 8002fb4:	46c0      	nop			@ (mov r8, r8)
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	b002      	add	sp, #8
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	7fffffe8 	.word	0x7fffffe8

08002fc0 <LL_ADC_IsEnabled>:
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	4013      	ands	r3, r2
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d101      	bne.n	8002fd8 <LL_ADC_IsEnabled+0x18>
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e000      	b.n	8002fda <LL_ADC_IsEnabled+0x1a>
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	0018      	movs	r0, r3
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	b002      	add	sp, #8
 8002fe0:	bd80      	pop	{r7, pc}
	...

08002fe4 <LL_ADC_StartCalibration>:
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	4a05      	ldr	r2, [pc, #20]	@ (8003008 <LL_ADC_StartCalibration+0x24>)
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	2280      	movs	r2, #128	@ 0x80
 8002ff6:	0612      	lsls	r2, r2, #24
 8002ff8:	431a      	orrs	r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	609a      	str	r2, [r3, #8]
}
 8002ffe:	46c0      	nop			@ (mov r8, r8)
 8003000:	46bd      	mov	sp, r7
 8003002:	b002      	add	sp, #8
 8003004:	bd80      	pop	{r7, pc}
 8003006:	46c0      	nop			@ (mov r8, r8)
 8003008:	7fffffe8 	.word	0x7fffffe8

0800300c <LL_ADC_IsCalibrationOnGoing>:
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	0fdb      	lsrs	r3, r3, #31
 800301a:	07da      	lsls	r2, r3, #31
 800301c:	2380      	movs	r3, #128	@ 0x80
 800301e:	061b      	lsls	r3, r3, #24
 8003020:	429a      	cmp	r2, r3
 8003022:	d101      	bne.n	8003028 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003024:	2301      	movs	r3, #1
 8003026:	e000      	b.n	800302a <LL_ADC_IsCalibrationOnGoing+0x1e>
 8003028:	2300      	movs	r3, #0
}
 800302a:	0018      	movs	r0, r3
 800302c:	46bd      	mov	sp, r7
 800302e:	b002      	add	sp, #8
 8003030:	bd80      	pop	{r7, pc}

08003032 <LL_ADC_IsActiveFlag_ADRDY>:
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b082      	sub	sp, #8
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2201      	movs	r2, #1
 8003040:	4013      	ands	r3, r2
 8003042:	2b01      	cmp	r3, #1
 8003044:	d101      	bne.n	800304a <LL_ADC_IsActiveFlag_ADRDY+0x18>
 8003046:	2301      	movs	r3, #1
 8003048:	e000      	b.n	800304c <LL_ADC_IsActiveFlag_ADRDY+0x1a>
 800304a:	2300      	movs	r3, #0
}
 800304c:	0018      	movs	r0, r3
 800304e:	46bd      	mov	sp, r7
 8003050:	b002      	add	sp, #8
 8003052:	bd80      	pop	{r7, pc}

08003054 <LL_SYSTICK_IsActiveCounterFlag>:
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
  return (((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk)) ? 1UL : 0UL);
 8003058:	4b07      	ldr	r3, [pc, #28]	@ (8003078 <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	2380      	movs	r3, #128	@ 0x80
 800305e:	025b      	lsls	r3, r3, #9
 8003060:	401a      	ands	r2, r3
 8003062:	2380      	movs	r3, #128	@ 0x80
 8003064:	025b      	lsls	r3, r3, #9
 8003066:	429a      	cmp	r2, r3
 8003068:	d101      	bne.n	800306e <LL_SYSTICK_IsActiveCounterFlag+0x1a>
 800306a:	2301      	movs	r3, #1
 800306c:	e000      	b.n	8003070 <LL_SYSTICK_IsActiveCounterFlag+0x1c>
 800306e:	2300      	movs	r3, #0
}
 8003070:	0018      	movs	r0, r3
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	46c0      	nop			@ (mov r8, r8)
 8003078:	e000e010 	.word	0xe000e010

0800307c <ADC_ConvCpltCallback>:
#define VAR_CONVERTED_DATA_INIT_VALUE    (__LL_ADC_DIGITAL_SCALE(LL_ADC_RESOLUTION_12B) + 1)

volatile uint8_t low_half_safe;
volatile uint8_t adc_err_int;
void ADC_ConvCpltCallback()
{
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0
	low_half_safe = 0;
 8003080:	4b02      	ldr	r3, [pc, #8]	@ (800308c <ADC_ConvCpltCallback+0x10>)
 8003082:	2200      	movs	r2, #0
 8003084:	701a      	strb	r2, [r3, #0]
}
 8003086:	46c0      	nop			@ (mov r8, r8)
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	2000089a 	.word	0x2000089a

08003090 <ADC_ConvHalfCpltCallback>:

void ADC_ConvHalfCpltCallback()
{
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
	low_half_safe = 1;
 8003094:	4b02      	ldr	r3, [pc, #8]	@ (80030a0 <ADC_ConvHalfCpltCallback+0x10>)
 8003096:	2201      	movs	r2, #1
 8003098:	701a      	strb	r2, [r3, #0]
}
 800309a:	46c0      	nop			@ (mov r8, r8)
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	2000089a 	.word	0x2000089a

080030a4 <ADC_ErrorCallback>:

void ADC_ErrorCallback()
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
	adc_err_int = 1;
 80030a8:	4b02      	ldr	r3, [pc, #8]	@ (80030b4 <ADC_ErrorCallback+0x10>)
 80030aa:	2201      	movs	r2, #1
 80030ac:	701a      	strb	r2, [r3, #0]
}
 80030ae:	46c0      	nop			@ (mov r8, r8)
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	2000089b 	.word	0x2000089b

080030b8 <ADC_Activate>:

void ADC_Activate()
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
	low_half_safe = 0;
 80030be:	4b3e      	ldr	r3, [pc, #248]	@ (80031b8 <ADC_Activate+0x100>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	701a      	strb	r2, [r3, #0]
	adc_err_int = 0;
 80030c4:	4b3d      	ldr	r3, [pc, #244]	@ (80031bc <ADC_Activate+0x104>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	701a      	strb	r2, [r3, #0]
	__IO uint32_t wait_loop_index = 0U;
 80030ca:	2300      	movs	r3, #0
 80030cc:	60bb      	str	r3, [r7, #8]
	__IO uint32_t backup_setting_adc_dma_transfer = 0U;
 80030ce:	2300      	movs	r3, #0
 80030d0:	607b      	str	r3, [r7, #4]
	#if (USE_TIMEOUT == 1)
	uint32_t Timeout = 0U; /* Variable used for timeout management */
 80030d2:	2300      	movs	r3, #0
 80030d4:	60fb      	str	r3, [r7, #12]
	/*       implemented anyway to show the best practice usages                */
	/*       corresponding to reference manual procedure.                       */
	/*       Software can be optimized by removing some of these checks, if     */
	/*       they are not relevant considering previous settings and actions    */
	/*       in user application.                                               */
	if (LL_ADC_IsEnabled(ADC1) == 0)
 80030d6:	4b3a      	ldr	r3, [pc, #232]	@ (80031c0 <ADC_Activate+0x108>)
 80030d8:	0018      	movs	r0, r3
 80030da:	f7ff ff71 	bl	8002fc0 <LL_ADC_IsEnabled>
 80030de:	1e03      	subs	r3, r0, #0
 80030e0:	d166      	bne.n	80031b0 <ADC_Activate+0xf8>
	{
		/* Enable ADC internal voltage regulator */
		LL_ADC_EnableInternalRegulator(ADC1);
 80030e2:	4b37      	ldr	r3, [pc, #220]	@ (80031c0 <ADC_Activate+0x108>)
 80030e4:	0018      	movs	r0, r3
 80030e6:	f7ff ff45 	bl	8002f74 <LL_ADC_EnableInternalRegulator>
		/* Compute number of CPU cycles to wait for, from delay in us.            */
		/* Note: Variable divided by 2 to compensate partially                    */
		/*       CPU processing cycles (depends on compilation optimization).     */
		/* Note: If system core clock frequency is below 200kHz, wait time        */
		/*       is only a few CPU processing cycles.                             */
		wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 80030ea:	4b36      	ldr	r3, [pc, #216]	@ (80031c4 <ADC_Activate+0x10c>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4936      	ldr	r1, [pc, #216]	@ (80031c8 <ADC_Activate+0x110>)
 80030f0:	0018      	movs	r0, r3
 80030f2:	f7fd f809 	bl	8000108 <__udivsi3>
 80030f6:	0003      	movs	r3, r0
 80030f8:	001a      	movs	r2, r3
 80030fa:	0013      	movs	r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	189b      	adds	r3, r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	210a      	movs	r1, #10
 8003104:	0018      	movs	r0, r3
 8003106:	f7fc ffff 	bl	8000108 <__udivsi3>
 800310a:	0003      	movs	r3, r0
 800310c:	60bb      	str	r3, [r7, #8]
		while(wait_loop_index != 0)
 800310e:	e002      	b.n	8003116 <ADC_Activate+0x5e>
		{
			wait_loop_index--;
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	3b01      	subs	r3, #1
 8003114:	60bb      	str	r3, [r7, #8]
		while(wait_loop_index != 0)
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d1f9      	bne.n	8003110 <ADC_Activate+0x58>
		/* Note: Specificity of this STM32 series: Calibration factor is           */
		/*       available in data register and also transferred by DMA.           */
		/*       To not insert ADC calibration factor among ADC conversion data   */
		/*       in DMA destination address, DMA transfer must be disabled during */
		/*       calibration.                                                     */
		backup_setting_adc_dma_transfer = LL_ADC_REG_GetDMATransfer(ADC1);
 800311c:	4b28      	ldr	r3, [pc, #160]	@ (80031c0 <ADC_Activate+0x108>)
 800311e:	0018      	movs	r0, r3
 8003120:	f7ff ff1c 	bl	8002f5c <LL_ADC_REG_GetDMATransfer>
 8003124:	0003      	movs	r3, r0
 8003126:	607b      	str	r3, [r7, #4]
		LL_ADC_REG_SetDMATransfer(ADC1, LL_ADC_REG_DMA_TRANSFER_NONE);
 8003128:	4b25      	ldr	r3, [pc, #148]	@ (80031c0 <ADC_Activate+0x108>)
 800312a:	2100      	movs	r1, #0
 800312c:	0018      	movs	r0, r3
 800312e:	f7ff ff03 	bl	8002f38 <LL_ADC_REG_SetDMATransfer>

		/* Run ADC self calibration */
		LL_ADC_StartCalibration(ADC1);
 8003132:	4b23      	ldr	r3, [pc, #140]	@ (80031c0 <ADC_Activate+0x108>)
 8003134:	0018      	movs	r0, r3
 8003136:	f7ff ff55 	bl	8002fe4 <LL_ADC_StartCalibration>

		/* Poll for ADC effectively calibrated */
#if (USE_TIMEOUT == 1)
		Timeout = ADC_CALIBRATION_TIMEOUT_MS;
 800313a:	2301      	movs	r3, #1
 800313c:	60fb      	str	r3, [r7, #12]
#endif /* USE_TIMEOUT */

		while (LL_ADC_IsCalibrationOnGoing(ADC1) != 0)
 800313e:	e00a      	b.n	8003156 <ADC_Activate+0x9e>
		{
#if (USE_TIMEOUT == 1)
			/* Check Systick counter flag to decrement the time-out value */
			if (LL_SYSTICK_IsActiveCounterFlag())
 8003140:	f7ff ff88 	bl	8003054 <LL_SYSTICK_IsActiveCounterFlag>
 8003144:	1e03      	subs	r3, r0, #0
 8003146:	d006      	beq.n	8003156 <ADC_Activate+0x9e>
			{
				if(Timeout-- == 0)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	1e5a      	subs	r2, r3, #1
 800314c:	60fa      	str	r2, [r7, #12]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <ADC_Activate+0x9e>
				{
					/* Error: Time-out */
					Error_Handler();
 8003152:	f7ff f903 	bl	800235c <Error_Handler>
		while (LL_ADC_IsCalibrationOnGoing(ADC1) != 0)
 8003156:	4b1a      	ldr	r3, [pc, #104]	@ (80031c0 <ADC_Activate+0x108>)
 8003158:	0018      	movs	r0, r3
 800315a:	f7ff ff57 	bl	800300c <LL_ADC_IsCalibrationOnGoing>
 800315e:	1e03      	subs	r3, r0, #0
 8003160:	d1ee      	bne.n	8003140 <ADC_Activate+0x88>
			}
#endif /* USE_TIMEOUT */
		}

		/* Restore ADC DMA transfer request after calibration */
		LL_ADC_REG_SetDMATransfer(ADC1, backup_setting_adc_dma_transfer);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a16      	ldr	r2, [pc, #88]	@ (80031c0 <ADC_Activate+0x108>)
 8003166:	0019      	movs	r1, r3
 8003168:	0010      	movs	r0, r2
 800316a:	f7ff fee5 	bl	8002f38 <LL_ADC_REG_SetDMATransfer>

		/* Delay between ADC end of calibration and ADC enable.                   */
		/* Note: Variable divided by 2 to compensate partially                    */
		/*       CPU processing cycles (depends on compilation optimization).     */
		wait_loop_index = (ADC_DELAY_CALIB_ENABLE_CPU_CYCLES >> 1);
 800316e:	2320      	movs	r3, #32
 8003170:	60bb      	str	r3, [r7, #8]
		while(wait_loop_index != 0)
 8003172:	e002      	b.n	800317a <ADC_Activate+0xc2>
		{
			wait_loop_index--;
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	3b01      	subs	r3, #1
 8003178:	60bb      	str	r3, [r7, #8]
		while(wait_loop_index != 0)
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d1f9      	bne.n	8003174 <ADC_Activate+0xbc>
		}

		/* Enable ADC */
		LL_ADC_Enable(ADC1);
 8003180:	4b0f      	ldr	r3, [pc, #60]	@ (80031c0 <ADC_Activate+0x108>)
 8003182:	0018      	movs	r0, r3
 8003184:	f7ff ff0a 	bl	8002f9c <LL_ADC_Enable>


		/* Poll for ADC ready to convert */
#if (USE_TIMEOUT == 1)
		Timeout = ADC_ENABLE_TIMEOUT_MS;
 8003188:	2301      	movs	r3, #1
 800318a:	60fb      	str	r3, [r7, #12]
#endif /* USE_TIMEOUT */

		while (LL_ADC_IsActiveFlag_ADRDY(ADC1) == 0)
 800318c:	e00a      	b.n	80031a4 <ADC_Activate+0xec>
		{
#if (USE_TIMEOUT == 1)
			/* Check Systick counter flag to decrement the time-out value */
			if (LL_SYSTICK_IsActiveCounterFlag())
 800318e:	f7ff ff61 	bl	8003054 <LL_SYSTICK_IsActiveCounterFlag>
 8003192:	1e03      	subs	r3, r0, #0
 8003194:	d006      	beq.n	80031a4 <ADC_Activate+0xec>
			{
				if(Timeout-- == 0)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	1e5a      	subs	r2, r3, #1
 800319a:	60fa      	str	r2, [r7, #12]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d101      	bne.n	80031a4 <ADC_Activate+0xec>
				{
					/* Error: Time-out */
					Error_Handler();
 80031a0:	f7ff f8dc 	bl	800235c <Error_Handler>
		while (LL_ADC_IsActiveFlag_ADRDY(ADC1) == 0)
 80031a4:	4b06      	ldr	r3, [pc, #24]	@ (80031c0 <ADC_Activate+0x108>)
 80031a6:	0018      	movs	r0, r3
 80031a8:	f7ff ff43 	bl	8003032 <LL_ADC_IsActiveFlag_ADRDY>
 80031ac:	1e03      	subs	r3, r0, #0
 80031ae:	d0ee      	beq.n	800318e <ADC_Activate+0xd6>
	/*       using function:                                                    */
	/*       "LL_ADC_REG_StartConversion();"                                    */

	/*## Operation on ADC hierarchical scope: ADC group injected ###############*/
	/* Note: Feature not available on this STM32 series */
}
 80031b0:	46c0      	nop			@ (mov r8, r8)
 80031b2:	46bd      	mov	sp, r7
 80031b4:	b004      	add	sp, #16
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	2000089a 	.word	0x2000089a
 80031bc:	2000089b 	.word	0x2000089b
 80031c0:	40012400 	.word	0x40012400
 80031c4:	200000b4 	.word	0x200000b4
 80031c8:	00030d40 	.word	0x00030d40

080031cc <monitor_adc>:

int8_t monitor_adc()
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	af00      	add	r7, sp, #0
	if(adc_err_int)
 80031d0:	4b06      	ldr	r3, [pc, #24]	@ (80031ec <monitor_adc+0x20>)
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d004      	beq.n	80031e4 <monitor_adc+0x18>
	{
		adc_err_int = 0;
 80031da:	4b04      	ldr	r3, [pc, #16]	@ (80031ec <monitor_adc+0x20>)
 80031dc:	2200      	movs	r2, #0
 80031de:	701a      	strb	r2, [r3, #0]
		return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e000      	b.n	80031e6 <monitor_adc+0x1a>
	}
	return HAL_OK;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	0018      	movs	r0, r3
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	2000089b 	.word	0x2000089b

080031f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031f6:	4b0f      	ldr	r3, [pc, #60]	@ (8003234 <HAL_MspInit+0x44>)
 80031f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031fa:	4b0e      	ldr	r3, [pc, #56]	@ (8003234 <HAL_MspInit+0x44>)
 80031fc:	2101      	movs	r1, #1
 80031fe:	430a      	orrs	r2, r1
 8003200:	641a      	str	r2, [r3, #64]	@ 0x40
 8003202:	4b0c      	ldr	r3, [pc, #48]	@ (8003234 <HAL_MspInit+0x44>)
 8003204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003206:	2201      	movs	r2, #1
 8003208:	4013      	ands	r3, r2
 800320a:	607b      	str	r3, [r7, #4]
 800320c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800320e:	4b09      	ldr	r3, [pc, #36]	@ (8003234 <HAL_MspInit+0x44>)
 8003210:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003212:	4b08      	ldr	r3, [pc, #32]	@ (8003234 <HAL_MspInit+0x44>)
 8003214:	2180      	movs	r1, #128	@ 0x80
 8003216:	0549      	lsls	r1, r1, #21
 8003218:	430a      	orrs	r2, r1
 800321a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800321c:	4b05      	ldr	r3, [pc, #20]	@ (8003234 <HAL_MspInit+0x44>)
 800321e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003220:	2380      	movs	r3, #128	@ 0x80
 8003222:	055b      	lsls	r3, r3, #21
 8003224:	4013      	ands	r3, r2
 8003226:	603b      	str	r3, [r7, #0]
 8003228:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800322a:	46c0      	nop			@ (mov r8, r8)
 800322c:	46bd      	mov	sp, r7
 800322e:	b002      	add	sp, #8
 8003230:	bd80      	pop	{r7, pc}
 8003232:	46c0      	nop			@ (mov r8, r8)
 8003234:	40021000 	.word	0x40021000

08003238 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003238:	b590      	push	{r4, r7, lr}
 800323a:	b093      	sub	sp, #76	@ 0x4c
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003240:	2334      	movs	r3, #52	@ 0x34
 8003242:	18fb      	adds	r3, r7, r3
 8003244:	0018      	movs	r0, r3
 8003246:	2314      	movs	r3, #20
 8003248:	001a      	movs	r2, r3
 800324a:	2100      	movs	r1, #0
 800324c:	f007 fb9a 	bl	800a984 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003250:	2414      	movs	r4, #20
 8003252:	193b      	adds	r3, r7, r4
 8003254:	0018      	movs	r0, r3
 8003256:	2320      	movs	r3, #32
 8003258:	001a      	movs	r2, r3
 800325a:	2100      	movs	r1, #0
 800325c:	f007 fb92 	bl	800a984 <memset>
  if(hi2c->Instance==I2C1)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a51      	ldr	r2, [pc, #324]	@ (80033ac <HAL_I2C_MspInit+0x174>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d000      	beq.n	800326c <HAL_I2C_MspInit+0x34>
 800326a:	e09a      	b.n	80033a2 <HAL_I2C_MspInit+0x16a>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800326c:	193b      	adds	r3, r7, r4
 800326e:	2202      	movs	r2, #2
 8003270:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003272:	193b      	adds	r3, r7, r4
 8003274:	2200      	movs	r2, #0
 8003276:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003278:	193b      	adds	r3, r7, r4
 800327a:	0018      	movs	r0, r3
 800327c:	f004 fa82 	bl	8007784 <HAL_RCCEx_PeriphCLKConfig>
 8003280:	1e03      	subs	r3, r0, #0
 8003282:	d001      	beq.n	8003288 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8003284:	f7ff f86a 	bl	800235c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003288:	4b49      	ldr	r3, [pc, #292]	@ (80033b0 <HAL_I2C_MspInit+0x178>)
 800328a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800328c:	4b48      	ldr	r3, [pc, #288]	@ (80033b0 <HAL_I2C_MspInit+0x178>)
 800328e:	2101      	movs	r1, #1
 8003290:	430a      	orrs	r2, r1
 8003292:	635a      	str	r2, [r3, #52]	@ 0x34
 8003294:	4b46      	ldr	r3, [pc, #280]	@ (80033b0 <HAL_I2C_MspInit+0x178>)
 8003296:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003298:	2201      	movs	r2, #1
 800329a:	4013      	ands	r3, r2
 800329c:	613b      	str	r3, [r7, #16]
 800329e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9 [PA11]     ------> I2C1_SCL
    PA10 [PA12]     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80032a0:	2134      	movs	r1, #52	@ 0x34
 80032a2:	187b      	adds	r3, r7, r1
 80032a4:	22c0      	movs	r2, #192	@ 0xc0
 80032a6:	00d2      	lsls	r2, r2, #3
 80032a8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80032aa:	187b      	adds	r3, r7, r1
 80032ac:	2212      	movs	r2, #18
 80032ae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b0:	187b      	adds	r3, r7, r1
 80032b2:	2200      	movs	r2, #0
 80032b4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032b6:	187b      	adds	r3, r7, r1
 80032b8:	2200      	movs	r2, #0
 80032ba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80032bc:	187b      	adds	r3, r7, r1
 80032be:	2206      	movs	r2, #6
 80032c0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032c2:	187a      	adds	r2, r7, r1
 80032c4:	23a0      	movs	r3, #160	@ 0xa0
 80032c6:	05db      	lsls	r3, r3, #23
 80032c8:	0011      	movs	r1, r2
 80032ca:	0018      	movs	r0, r3
 80032cc:	f001 fa0a 	bl	80046e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80032d0:	4b37      	ldr	r3, [pc, #220]	@ (80033b0 <HAL_I2C_MspInit+0x178>)
 80032d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80032d4:	4b36      	ldr	r3, [pc, #216]	@ (80033b0 <HAL_I2C_MspInit+0x178>)
 80032d6:	2180      	movs	r1, #128	@ 0x80
 80032d8:	0389      	lsls	r1, r1, #14
 80032da:	430a      	orrs	r2, r1
 80032dc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80032de:	4b34      	ldr	r3, [pc, #208]	@ (80033b0 <HAL_I2C_MspInit+0x178>)
 80032e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80032e2:	2380      	movs	r3, #128	@ 0x80
 80032e4:	039b      	lsls	r3, r3, #14
 80032e6:	4013      	ands	r3, r2
 80032e8:	60fb      	str	r3, [r7, #12]
 80032ea:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel4;
 80032ec:	4b31      	ldr	r3, [pc, #196]	@ (80033b4 <HAL_I2C_MspInit+0x17c>)
 80032ee:	4a32      	ldr	r2, [pc, #200]	@ (80033b8 <HAL_I2C_MspInit+0x180>)
 80032f0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 80032f2:	4b30      	ldr	r3, [pc, #192]	@ (80033b4 <HAL_I2C_MspInit+0x17c>)
 80032f4:	220a      	movs	r2, #10
 80032f6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80032f8:	4b2e      	ldr	r3, [pc, #184]	@ (80033b4 <HAL_I2C_MspInit+0x17c>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032fe:	4b2d      	ldr	r3, [pc, #180]	@ (80033b4 <HAL_I2C_MspInit+0x17c>)
 8003300:	2200      	movs	r2, #0
 8003302:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003304:	4b2b      	ldr	r3, [pc, #172]	@ (80033b4 <HAL_I2C_MspInit+0x17c>)
 8003306:	2280      	movs	r2, #128	@ 0x80
 8003308:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800330a:	4b2a      	ldr	r3, [pc, #168]	@ (80033b4 <HAL_I2C_MspInit+0x17c>)
 800330c:	2200      	movs	r2, #0
 800330e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003310:	4b28      	ldr	r3, [pc, #160]	@ (80033b4 <HAL_I2C_MspInit+0x17c>)
 8003312:	2200      	movs	r2, #0
 8003314:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8003316:	4b27      	ldr	r3, [pc, #156]	@ (80033b4 <HAL_I2C_MspInit+0x17c>)
 8003318:	2200      	movs	r2, #0
 800331a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800331c:	4b25      	ldr	r3, [pc, #148]	@ (80033b4 <HAL_I2C_MspInit+0x17c>)
 800331e:	2280      	movs	r2, #128	@ 0x80
 8003320:	0152      	lsls	r2, r2, #5
 8003322:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8003324:	4b23      	ldr	r3, [pc, #140]	@ (80033b4 <HAL_I2C_MspInit+0x17c>)
 8003326:	0018      	movs	r0, r3
 8003328:	f000 fe1e 	bl	8003f68 <HAL_DMA_Init>
 800332c:	1e03      	subs	r3, r0, #0
 800332e:	d001      	beq.n	8003334 <HAL_I2C_MspInit+0xfc>
    {
      Error_Handler();
 8003330:	f7ff f814 	bl	800235c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4a1f      	ldr	r2, [pc, #124]	@ (80033b4 <HAL_I2C_MspInit+0x17c>)
 8003338:	63da      	str	r2, [r3, #60]	@ 0x3c
 800333a:	4b1e      	ldr	r3, [pc, #120]	@ (80033b4 <HAL_I2C_MspInit+0x17c>)
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel5;
 8003340:	4b1e      	ldr	r3, [pc, #120]	@ (80033bc <HAL_I2C_MspInit+0x184>)
 8003342:	4a1f      	ldr	r2, [pc, #124]	@ (80033c0 <HAL_I2C_MspInit+0x188>)
 8003344:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8003346:	4b1d      	ldr	r3, [pc, #116]	@ (80033bc <HAL_I2C_MspInit+0x184>)
 8003348:	220b      	movs	r2, #11
 800334a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800334c:	4b1b      	ldr	r3, [pc, #108]	@ (80033bc <HAL_I2C_MspInit+0x184>)
 800334e:	2210      	movs	r2, #16
 8003350:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003352:	4b1a      	ldr	r3, [pc, #104]	@ (80033bc <HAL_I2C_MspInit+0x184>)
 8003354:	2200      	movs	r2, #0
 8003356:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003358:	4b18      	ldr	r3, [pc, #96]	@ (80033bc <HAL_I2C_MspInit+0x184>)
 800335a:	2280      	movs	r2, #128	@ 0x80
 800335c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800335e:	4b17      	ldr	r3, [pc, #92]	@ (80033bc <HAL_I2C_MspInit+0x184>)
 8003360:	2200      	movs	r2, #0
 8003362:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003364:	4b15      	ldr	r3, [pc, #84]	@ (80033bc <HAL_I2C_MspInit+0x184>)
 8003366:	2200      	movs	r2, #0
 8003368:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800336a:	4b14      	ldr	r3, [pc, #80]	@ (80033bc <HAL_I2C_MspInit+0x184>)
 800336c:	2200      	movs	r2, #0
 800336e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003370:	4b12      	ldr	r3, [pc, #72]	@ (80033bc <HAL_I2C_MspInit+0x184>)
 8003372:	2200      	movs	r2, #0
 8003374:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8003376:	4b11      	ldr	r3, [pc, #68]	@ (80033bc <HAL_I2C_MspInit+0x184>)
 8003378:	0018      	movs	r0, r3
 800337a:	f000 fdf5 	bl	8003f68 <HAL_DMA_Init>
 800337e:	1e03      	subs	r3, r0, #0
 8003380:	d001      	beq.n	8003386 <HAL_I2C_MspInit+0x14e>
    {
      Error_Handler();
 8003382:	f7fe ffeb 	bl	800235c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a0c      	ldr	r2, [pc, #48]	@ (80033bc <HAL_I2C_MspInit+0x184>)
 800338a:	639a      	str	r2, [r3, #56]	@ 0x38
 800338c:	4b0b      	ldr	r3, [pc, #44]	@ (80033bc <HAL_I2C_MspInit+0x184>)
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 3, 0);
 8003392:	2200      	movs	r2, #0
 8003394:	2103      	movs	r1, #3
 8003396:	2017      	movs	r0, #23
 8003398:	f000 fda4 	bl	8003ee4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 800339c:	2017      	movs	r0, #23
 800339e:	f000 fdb6 	bl	8003f0e <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80033a2:	46c0      	nop			@ (mov r8, r8)
 80033a4:	46bd      	mov	sp, r7
 80033a6:	b013      	add	sp, #76	@ 0x4c
 80033a8:	bd90      	pop	{r4, r7, pc}
 80033aa:	46c0      	nop			@ (mov r8, r8)
 80033ac:	40005400 	.word	0x40005400
 80033b0:	40021000 	.word	0x40021000
 80033b4:	20000340 	.word	0x20000340
 80033b8:	40020044 	.word	0x40020044
 80033bc:	2000039c 	.word	0x2000039c
 80033c0:	40020058 	.word	0x40020058

080033c4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a14      	ldr	r2, [pc, #80]	@ (8003424 <HAL_I2C_MspDeInit+0x60>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d122      	bne.n	800341c <HAL_I2C_MspDeInit+0x58>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80033d6:	4b14      	ldr	r3, [pc, #80]	@ (8003428 <HAL_I2C_MspDeInit+0x64>)
 80033d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80033da:	4b13      	ldr	r3, [pc, #76]	@ (8003428 <HAL_I2C_MspDeInit+0x64>)
 80033dc:	4913      	ldr	r1, [pc, #76]	@ (800342c <HAL_I2C_MspDeInit+0x68>)
 80033de:	400a      	ands	r2, r1
 80033e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /**I2C1 GPIO Configuration
    PA9 [PA11]     ------> I2C1_SCL
    PA10 [PA12]     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9);
 80033e2:	2380      	movs	r3, #128	@ 0x80
 80033e4:	009a      	lsls	r2, r3, #2
 80033e6:	23a0      	movs	r3, #160	@ 0xa0
 80033e8:	05db      	lsls	r3, r3, #23
 80033ea:	0011      	movs	r1, r2
 80033ec:	0018      	movs	r0, r3
 80033ee:	f001 faeb 	bl	80049c8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_10);
 80033f2:	2380      	movs	r3, #128	@ 0x80
 80033f4:	00da      	lsls	r2, r3, #3
 80033f6:	23a0      	movs	r3, #160	@ 0xa0
 80033f8:	05db      	lsls	r3, r3, #23
 80033fa:	0011      	movs	r1, r2
 80033fc:	0018      	movs	r0, r3
 80033fe:	f001 fae3 	bl	80049c8 <HAL_GPIO_DeInit>

    /* I2C1 DMA DeInit */
    HAL_DMA_DeInit(hi2c->hdmarx);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003406:	0018      	movs	r0, r3
 8003408:	f000 fe38 	bl	800407c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hi2c->hdmatx);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003410:	0018      	movs	r0, r3
 8003412:	f000 fe33 	bl	800407c <HAL_DMA_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_IRQn);
 8003416:	2017      	movs	r0, #23
 8003418:	f000 fd89 	bl	8003f2e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800341c:	46c0      	nop			@ (mov r8, r8)
 800341e:	46bd      	mov	sp, r7
 8003420:	b002      	add	sp, #8
 8003422:	bd80      	pop	{r7, pc}
 8003424:	40005400 	.word	0x40005400
 8003428:	40021000 	.word	0x40021000
 800342c:	ffdfffff 	.word	0xffdfffff

08003430 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003430:	b590      	push	{r4, r7, lr}
 8003432:	b093      	sub	sp, #76	@ 0x4c
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003438:	2334      	movs	r3, #52	@ 0x34
 800343a:	18fb      	adds	r3, r7, r3
 800343c:	0018      	movs	r0, r3
 800343e:	2314      	movs	r3, #20
 8003440:	001a      	movs	r2, r3
 8003442:	2100      	movs	r1, #0
 8003444:	f007 fa9e 	bl	800a984 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003448:	2414      	movs	r4, #20
 800344a:	193b      	adds	r3, r7, r4
 800344c:	0018      	movs	r0, r3
 800344e:	2320      	movs	r3, #32
 8003450:	001a      	movs	r2, r3
 8003452:	2100      	movs	r1, #0
 8003454:	f007 fa96 	bl	800a984 <memset>
  if(hspi->Instance==SPI1)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a34      	ldr	r2, [pc, #208]	@ (8003530 <HAL_SPI_MspInit+0x100>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d162      	bne.n	8003528 <HAL_SPI_MspInit+0xf8>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 8003462:	193b      	adds	r3, r7, r4
 8003464:	2204      	movs	r2, #4
 8003466:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 8003468:	193b      	adds	r3, r7, r4
 800346a:	2200      	movs	r2, #0
 800346c:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800346e:	193b      	adds	r3, r7, r4
 8003470:	0018      	movs	r0, r3
 8003472:	f004 f987 	bl	8007784 <HAL_RCCEx_PeriphCLKConfig>
 8003476:	1e03      	subs	r3, r0, #0
 8003478:	d001      	beq.n	800347e <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 800347a:	f7fe ff6f 	bl	800235c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800347e:	4b2d      	ldr	r3, [pc, #180]	@ (8003534 <HAL_SPI_MspInit+0x104>)
 8003480:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003482:	4b2c      	ldr	r3, [pc, #176]	@ (8003534 <HAL_SPI_MspInit+0x104>)
 8003484:	2180      	movs	r1, #128	@ 0x80
 8003486:	0149      	lsls	r1, r1, #5
 8003488:	430a      	orrs	r2, r1
 800348a:	641a      	str	r2, [r3, #64]	@ 0x40
 800348c:	4b29      	ldr	r3, [pc, #164]	@ (8003534 <HAL_SPI_MspInit+0x104>)
 800348e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003490:	2380      	movs	r3, #128	@ 0x80
 8003492:	015b      	lsls	r3, r3, #5
 8003494:	4013      	ands	r3, r2
 8003496:	613b      	str	r3, [r7, #16]
 8003498:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800349a:	4b26      	ldr	r3, [pc, #152]	@ (8003534 <HAL_SPI_MspInit+0x104>)
 800349c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800349e:	4b25      	ldr	r3, [pc, #148]	@ (8003534 <HAL_SPI_MspInit+0x104>)
 80034a0:	2101      	movs	r1, #1
 80034a2:	430a      	orrs	r2, r1
 80034a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80034a6:	4b23      	ldr	r3, [pc, #140]	@ (8003534 <HAL_SPI_MspInit+0x104>)
 80034a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034aa:	2201      	movs	r2, #1
 80034ac:	4013      	ands	r3, r2
 80034ae:	60fb      	str	r3, [r7, #12]
 80034b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034b2:	4b20      	ldr	r3, [pc, #128]	@ (8003534 <HAL_SPI_MspInit+0x104>)
 80034b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034b6:	4b1f      	ldr	r3, [pc, #124]	@ (8003534 <HAL_SPI_MspInit+0x104>)
 80034b8:	2102      	movs	r1, #2
 80034ba:	430a      	orrs	r2, r1
 80034bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80034be:	4b1d      	ldr	r3, [pc, #116]	@ (8003534 <HAL_SPI_MspInit+0x104>)
 80034c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034c2:	2202      	movs	r2, #2
 80034c4:	4013      	ands	r3, r2
 80034c6:	60bb      	str	r3, [r7, #8]
 80034c8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA11 [PA9]     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80034ca:	2134      	movs	r1, #52	@ 0x34
 80034cc:	187b      	adds	r3, r7, r1
 80034ce:	2280      	movs	r2, #128	@ 0x80
 80034d0:	0112      	lsls	r2, r2, #4
 80034d2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034d4:	000c      	movs	r4, r1
 80034d6:	193b      	adds	r3, r7, r4
 80034d8:	2202      	movs	r2, #2
 80034da:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034dc:	193b      	adds	r3, r7, r4
 80034de:	2200      	movs	r2, #0
 80034e0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034e2:	193b      	adds	r3, r7, r4
 80034e4:	2200      	movs	r2, #0
 80034e6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80034e8:	193b      	adds	r3, r7, r4
 80034ea:	2200      	movs	r2, #0
 80034ec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034ee:	193a      	adds	r2, r7, r4
 80034f0:	23a0      	movs	r3, #160	@ 0xa0
 80034f2:	05db      	lsls	r3, r3, #23
 80034f4:	0011      	movs	r1, r2
 80034f6:	0018      	movs	r0, r3
 80034f8:	f001 f8f4 	bl	80046e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80034fc:	0021      	movs	r1, r4
 80034fe:	187b      	adds	r3, r7, r1
 8003500:	2228      	movs	r2, #40	@ 0x28
 8003502:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003504:	187b      	adds	r3, r7, r1
 8003506:	2202      	movs	r2, #2
 8003508:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800350a:	187b      	adds	r3, r7, r1
 800350c:	2200      	movs	r2, #0
 800350e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003510:	187b      	adds	r3, r7, r1
 8003512:	2200      	movs	r2, #0
 8003514:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003516:	187b      	adds	r3, r7, r1
 8003518:	2200      	movs	r2, #0
 800351a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800351c:	187b      	adds	r3, r7, r1
 800351e:	4a06      	ldr	r2, [pc, #24]	@ (8003538 <HAL_SPI_MspInit+0x108>)
 8003520:	0019      	movs	r1, r3
 8003522:	0010      	movs	r0, r2
 8003524:	f001 f8de 	bl	80046e4 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8003528:	46c0      	nop			@ (mov r8, r8)
 800352a:	46bd      	mov	sp, r7
 800352c:	b013      	add	sp, #76	@ 0x4c
 800352e:	bd90      	pop	{r4, r7, pc}
 8003530:	40013000 	.word	0x40013000
 8003534:	40021000 	.word	0x40021000
 8003538:	50000400 	.word	0x50000400

0800353c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a0a      	ldr	r2, [pc, #40]	@ (8003574 <HAL_TIM_PWM_MspInit+0x38>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d10d      	bne.n	800356a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800354e:	4b0a      	ldr	r3, [pc, #40]	@ (8003578 <HAL_TIM_PWM_MspInit+0x3c>)
 8003550:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003552:	4b09      	ldr	r3, [pc, #36]	@ (8003578 <HAL_TIM_PWM_MspInit+0x3c>)
 8003554:	2180      	movs	r1, #128	@ 0x80
 8003556:	0109      	lsls	r1, r1, #4
 8003558:	430a      	orrs	r2, r1
 800355a:	641a      	str	r2, [r3, #64]	@ 0x40
 800355c:	4b06      	ldr	r3, [pc, #24]	@ (8003578 <HAL_TIM_PWM_MspInit+0x3c>)
 800355e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003560:	2380      	movs	r3, #128	@ 0x80
 8003562:	011b      	lsls	r3, r3, #4
 8003564:	4013      	ands	r3, r2
 8003566:	60fb      	str	r3, [r7, #12]
 8003568:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800356a:	46c0      	nop			@ (mov r8, r8)
 800356c:	46bd      	mov	sp, r7
 800356e:	b004      	add	sp, #16
 8003570:	bd80      	pop	{r7, pc}
 8003572:	46c0      	nop			@ (mov r8, r8)
 8003574:	40012c00 	.word	0x40012c00
 8003578:	40021000 	.word	0x40021000

0800357c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a0e      	ldr	r2, [pc, #56]	@ (80035c4 <HAL_TIM_Base_MspInit+0x48>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d115      	bne.n	80035ba <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 800358e:	4b0e      	ldr	r3, [pc, #56]	@ (80035c8 <HAL_TIM_Base_MspInit+0x4c>)
 8003590:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003592:	4b0d      	ldr	r3, [pc, #52]	@ (80035c8 <HAL_TIM_Base_MspInit+0x4c>)
 8003594:	2180      	movs	r1, #128	@ 0x80
 8003596:	0209      	lsls	r1, r1, #8
 8003598:	430a      	orrs	r2, r1
 800359a:	641a      	str	r2, [r3, #64]	@ 0x40
 800359c:	4b0a      	ldr	r3, [pc, #40]	@ (80035c8 <HAL_TIM_Base_MspInit+0x4c>)
 800359e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035a0:	2380      	movs	r3, #128	@ 0x80
 80035a2:	021b      	lsls	r3, r3, #8
 80035a4:	4013      	ands	r3, r2
 80035a6:	60fb      	str	r3, [r7, #12]
 80035a8:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 80035aa:	2200      	movs	r2, #0
 80035ac:	2100      	movs	r1, #0
 80035ae:	2013      	movs	r0, #19
 80035b0:	f000 fc98 	bl	8003ee4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80035b4:	2013      	movs	r0, #19
 80035b6:	f000 fcaa 	bl	8003f0e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM14_MspInit 1 */

  }

}
 80035ba:	46c0      	nop			@ (mov r8, r8)
 80035bc:	46bd      	mov	sp, r7
 80035be:	b004      	add	sp, #16
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	46c0      	nop			@ (mov r8, r8)
 80035c4:	40002000 	.word	0x40002000
 80035c8:	40021000 	.word	0x40021000

080035cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80035cc:	b590      	push	{r4, r7, lr}
 80035ce:	b089      	sub	sp, #36	@ 0x24
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035d4:	240c      	movs	r4, #12
 80035d6:	193b      	adds	r3, r7, r4
 80035d8:	0018      	movs	r0, r3
 80035da:	2314      	movs	r3, #20
 80035dc:	001a      	movs	r2, r3
 80035de:	2100      	movs	r1, #0
 80035e0:	f007 f9d0 	bl	800a984 <memset>
  if(htim->Instance==TIM1)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a15      	ldr	r2, [pc, #84]	@ (8003640 <HAL_TIM_MspPostInit+0x74>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d123      	bne.n	8003636 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035ee:	4b15      	ldr	r3, [pc, #84]	@ (8003644 <HAL_TIM_MspPostInit+0x78>)
 80035f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035f2:	4b14      	ldr	r3, [pc, #80]	@ (8003644 <HAL_TIM_MspPostInit+0x78>)
 80035f4:	2101      	movs	r1, #1
 80035f6:	430a      	orrs	r2, r1
 80035f8:	635a      	str	r2, [r3, #52]	@ 0x34
 80035fa:	4b12      	ldr	r3, [pc, #72]	@ (8003644 <HAL_TIM_MspPostInit+0x78>)
 80035fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035fe:	2201      	movs	r2, #1
 8003600:	4013      	ands	r3, r2
 8003602:	60bb      	str	r3, [r7, #8]
 8003604:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA15     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = Actuator_PWM_Pin;
 8003606:	193b      	adds	r3, r7, r4
 8003608:	2280      	movs	r2, #128	@ 0x80
 800360a:	0212      	lsls	r2, r2, #8
 800360c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800360e:	0021      	movs	r1, r4
 8003610:	187b      	adds	r3, r7, r1
 8003612:	2202      	movs	r2, #2
 8003614:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003616:	187b      	adds	r3, r7, r1
 8003618:	2200      	movs	r2, #0
 800361a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800361c:	187b      	adds	r3, r7, r1
 800361e:	2200      	movs	r2, #0
 8003620:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003622:	187b      	adds	r3, r7, r1
 8003624:	2202      	movs	r2, #2
 8003626:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(Actuator_PWM_GPIO_Port, &GPIO_InitStruct);
 8003628:	187a      	adds	r2, r7, r1
 800362a:	23a0      	movs	r3, #160	@ 0xa0
 800362c:	05db      	lsls	r3, r3, #23
 800362e:	0011      	movs	r1, r2
 8003630:	0018      	movs	r0, r3
 8003632:	f001 f857 	bl	80046e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003636:	46c0      	nop			@ (mov r8, r8)
 8003638:	46bd      	mov	sp, r7
 800363a:	b009      	add	sp, #36	@ 0x24
 800363c:	bd90      	pop	{r4, r7, pc}
 800363e:	46c0      	nop			@ (mov r8, r8)
 8003640:	40012c00 	.word	0x40012c00
 8003644:	40021000 	.word	0x40021000

08003648 <HAL_TIM_Base_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a07      	ldr	r2, [pc, #28]	@ (8003674 <HAL_TIM_Base_MspDeInit+0x2c>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d108      	bne.n	800366c <HAL_TIM_Base_MspDeInit+0x24>
  {
  /* USER CODE BEGIN TIM14_MspDeInit 0 */

  /* USER CODE END TIM14_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM14_CLK_DISABLE();
 800365a:	4b07      	ldr	r3, [pc, #28]	@ (8003678 <HAL_TIM_Base_MspDeInit+0x30>)
 800365c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800365e:	4b06      	ldr	r3, [pc, #24]	@ (8003678 <HAL_TIM_Base_MspDeInit+0x30>)
 8003660:	4906      	ldr	r1, [pc, #24]	@ (800367c <HAL_TIM_Base_MspDeInit+0x34>)
 8003662:	400a      	ands	r2, r1
 8003664:	641a      	str	r2, [r3, #64]	@ 0x40

    /* TIM14 interrupt DeInit */
    HAL_NVIC_DisableIRQ(TIM14_IRQn);
 8003666:	2013      	movs	r0, #19
 8003668:	f000 fc61 	bl	8003f2e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN TIM14_MspDeInit 1 */

  /* USER CODE END TIM14_MspDeInit 1 */
  }

}
 800366c:	46c0      	nop			@ (mov r8, r8)
 800366e:	46bd      	mov	sp, r7
 8003670:	b002      	add	sp, #8
 8003672:	bd80      	pop	{r7, pc}
 8003674:	40002000 	.word	0x40002000
 8003678:	40021000 	.word	0x40021000
 800367c:	ffff7fff 	.word	0xffff7fff

08003680 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003680:	b590      	push	{r4, r7, lr}
 8003682:	b095      	sub	sp, #84	@ 0x54
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003688:	233c      	movs	r3, #60	@ 0x3c
 800368a:	18fb      	adds	r3, r7, r3
 800368c:	0018      	movs	r0, r3
 800368e:	2314      	movs	r3, #20
 8003690:	001a      	movs	r2, r3
 8003692:	2100      	movs	r1, #0
 8003694:	f007 f976 	bl	800a984 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003698:	241c      	movs	r4, #28
 800369a:	193b      	adds	r3, r7, r4
 800369c:	0018      	movs	r0, r3
 800369e:	2320      	movs	r3, #32
 80036a0:	001a      	movs	r2, r3
 80036a2:	2100      	movs	r1, #0
 80036a4:	f007 f96e 	bl	800a984 <memset>
  if(huart->Instance==USART1)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a74      	ldr	r2, [pc, #464]	@ (8003880 <HAL_UART_MspInit+0x200>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d000      	beq.n	80036b4 <HAL_UART_MspInit+0x34>
 80036b2:	e0e1      	b.n	8003878 <HAL_UART_MspInit+0x1f8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80036b4:	193b      	adds	r3, r7, r4
 80036b6:	2201      	movs	r2, #1
 80036b8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80036ba:	193b      	adds	r3, r7, r4
 80036bc:	2200      	movs	r2, #0
 80036be:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80036c0:	193b      	adds	r3, r7, r4
 80036c2:	0018      	movs	r0, r3
 80036c4:	f004 f85e 	bl	8007784 <HAL_RCCEx_PeriphCLKConfig>
 80036c8:	1e03      	subs	r3, r0, #0
 80036ca:	d001      	beq.n	80036d0 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80036cc:	f7fe fe46 	bl	800235c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80036d0:	4b6c      	ldr	r3, [pc, #432]	@ (8003884 <HAL_UART_MspInit+0x204>)
 80036d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80036d4:	4b6b      	ldr	r3, [pc, #428]	@ (8003884 <HAL_UART_MspInit+0x204>)
 80036d6:	2180      	movs	r1, #128	@ 0x80
 80036d8:	01c9      	lsls	r1, r1, #7
 80036da:	430a      	orrs	r2, r1
 80036dc:	641a      	str	r2, [r3, #64]	@ 0x40
 80036de:	4b69      	ldr	r3, [pc, #420]	@ (8003884 <HAL_UART_MspInit+0x204>)
 80036e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80036e2:	2380      	movs	r3, #128	@ 0x80
 80036e4:	01db      	lsls	r3, r3, #7
 80036e6:	4013      	ands	r3, r2
 80036e8:	61bb      	str	r3, [r7, #24]
 80036ea:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036ec:	4b65      	ldr	r3, [pc, #404]	@ (8003884 <HAL_UART_MspInit+0x204>)
 80036ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036f0:	4b64      	ldr	r3, [pc, #400]	@ (8003884 <HAL_UART_MspInit+0x204>)
 80036f2:	2104      	movs	r1, #4
 80036f4:	430a      	orrs	r2, r1
 80036f6:	635a      	str	r2, [r3, #52]	@ 0x34
 80036f8:	4b62      	ldr	r3, [pc, #392]	@ (8003884 <HAL_UART_MspInit+0x204>)
 80036fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036fc:	2204      	movs	r2, #4
 80036fe:	4013      	ands	r3, r2
 8003700:	617b      	str	r3, [r7, #20]
 8003702:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003704:	4b5f      	ldr	r3, [pc, #380]	@ (8003884 <HAL_UART_MspInit+0x204>)
 8003706:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003708:	4b5e      	ldr	r3, [pc, #376]	@ (8003884 <HAL_UART_MspInit+0x204>)
 800370a:	2102      	movs	r1, #2
 800370c:	430a      	orrs	r2, r1
 800370e:	635a      	str	r2, [r3, #52]	@ 0x34
 8003710:	4b5c      	ldr	r3, [pc, #368]	@ (8003884 <HAL_UART_MspInit+0x204>)
 8003712:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003714:	2202      	movs	r2, #2
 8003716:	4013      	ands	r3, r2
 8003718:	613b      	str	r3, [r7, #16]
 800371a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800371c:	4b59      	ldr	r3, [pc, #356]	@ (8003884 <HAL_UART_MspInit+0x204>)
 800371e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003720:	4b58      	ldr	r3, [pc, #352]	@ (8003884 <HAL_UART_MspInit+0x204>)
 8003722:	2101      	movs	r1, #1
 8003724:	430a      	orrs	r2, r1
 8003726:	635a      	str	r2, [r3, #52]	@ 0x34
 8003728:	4b56      	ldr	r3, [pc, #344]	@ (8003884 <HAL_UART_MspInit+0x204>)
 800372a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800372c:	2201      	movs	r2, #1
 800372e:	4013      	ands	r3, r2
 8003730:	60fb      	str	r3, [r7, #12]
 8003732:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC14-OSCX_IN(PC14)     ------> USART1_TX
    PB2     ------> USART1_RX
    PA12 [PA10]     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003734:	213c      	movs	r1, #60	@ 0x3c
 8003736:	187b      	adds	r3, r7, r1
 8003738:	2280      	movs	r2, #128	@ 0x80
 800373a:	01d2      	lsls	r2, r2, #7
 800373c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800373e:	000c      	movs	r4, r1
 8003740:	193b      	adds	r3, r7, r4
 8003742:	2202      	movs	r2, #2
 8003744:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003746:	193b      	adds	r3, r7, r4
 8003748:	2200      	movs	r2, #0
 800374a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800374c:	193b      	adds	r3, r7, r4
 800374e:	2200      	movs	r2, #0
 8003750:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8003752:	193b      	adds	r3, r7, r4
 8003754:	2200      	movs	r2, #0
 8003756:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003758:	193b      	adds	r3, r7, r4
 800375a:	4a4b      	ldr	r2, [pc, #300]	@ (8003888 <HAL_UART_MspInit+0x208>)
 800375c:	0019      	movs	r1, r3
 800375e:	0010      	movs	r0, r2
 8003760:	f000 ffc0 	bl	80046e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003764:	193b      	adds	r3, r7, r4
 8003766:	2204      	movs	r2, #4
 8003768:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800376a:	193b      	adds	r3, r7, r4
 800376c:	2202      	movs	r2, #2
 800376e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003770:	193b      	adds	r3, r7, r4
 8003772:	2200      	movs	r2, #0
 8003774:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003776:	193b      	adds	r3, r7, r4
 8003778:	2200      	movs	r2, #0
 800377a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 800377c:	193b      	adds	r3, r7, r4
 800377e:	2200      	movs	r2, #0
 8003780:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003782:	193b      	adds	r3, r7, r4
 8003784:	4a41      	ldr	r2, [pc, #260]	@ (800388c <HAL_UART_MspInit+0x20c>)
 8003786:	0019      	movs	r1, r3
 8003788:	0010      	movs	r0, r2
 800378a:	f000 ffab 	bl	80046e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800378e:	0021      	movs	r1, r4
 8003790:	187b      	adds	r3, r7, r1
 8003792:	2280      	movs	r2, #128	@ 0x80
 8003794:	0152      	lsls	r2, r2, #5
 8003796:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003798:	187b      	adds	r3, r7, r1
 800379a:	2202      	movs	r2, #2
 800379c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800379e:	187b      	adds	r3, r7, r1
 80037a0:	2200      	movs	r2, #0
 80037a2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037a4:	187b      	adds	r3, r7, r1
 80037a6:	2200      	movs	r2, #0
 80037a8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80037aa:	187b      	adds	r3, r7, r1
 80037ac:	2201      	movs	r2, #1
 80037ae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037b0:	187a      	adds	r2, r7, r1
 80037b2:	23a0      	movs	r3, #160	@ 0xa0
 80037b4:	05db      	lsls	r3, r3, #23
 80037b6:	0011      	movs	r1, r2
 80037b8:	0018      	movs	r0, r3
 80037ba:	f000 ff93 	bl	80046e4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 80037be:	4b34      	ldr	r3, [pc, #208]	@ (8003890 <HAL_UART_MspInit+0x210>)
 80037c0:	4a34      	ldr	r2, [pc, #208]	@ (8003894 <HAL_UART_MspInit+0x214>)
 80037c2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80037c4:	4b32      	ldr	r3, [pc, #200]	@ (8003890 <HAL_UART_MspInit+0x210>)
 80037c6:	2232      	movs	r2, #50	@ 0x32
 80037c8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80037ca:	4b31      	ldr	r3, [pc, #196]	@ (8003890 <HAL_UART_MspInit+0x210>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037d0:	4b2f      	ldr	r3, [pc, #188]	@ (8003890 <HAL_UART_MspInit+0x210>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80037d6:	4b2e      	ldr	r3, [pc, #184]	@ (8003890 <HAL_UART_MspInit+0x210>)
 80037d8:	2280      	movs	r2, #128	@ 0x80
 80037da:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80037dc:	4b2c      	ldr	r3, [pc, #176]	@ (8003890 <HAL_UART_MspInit+0x210>)
 80037de:	2200      	movs	r2, #0
 80037e0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80037e2:	4b2b      	ldr	r3, [pc, #172]	@ (8003890 <HAL_UART_MspInit+0x210>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80037e8:	4b29      	ldr	r3, [pc, #164]	@ (8003890 <HAL_UART_MspInit+0x210>)
 80037ea:	2200      	movs	r2, #0
 80037ec:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80037ee:	4b28      	ldr	r3, [pc, #160]	@ (8003890 <HAL_UART_MspInit+0x210>)
 80037f0:	22c0      	movs	r2, #192	@ 0xc0
 80037f2:	0192      	lsls	r2, r2, #6
 80037f4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80037f6:	4b26      	ldr	r3, [pc, #152]	@ (8003890 <HAL_UART_MspInit+0x210>)
 80037f8:	0018      	movs	r0, r3
 80037fa:	f000 fbb5 	bl	8003f68 <HAL_DMA_Init>
 80037fe:	1e03      	subs	r3, r0, #0
 8003800:	d001      	beq.n	8003806 <HAL_UART_MspInit+0x186>
    {
      Error_Handler();
 8003802:	f7fe fdab 	bl	800235c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2180      	movs	r1, #128	@ 0x80
 800380a:	4a21      	ldr	r2, [pc, #132]	@ (8003890 <HAL_UART_MspInit+0x210>)
 800380c:	505a      	str	r2, [r3, r1]
 800380e:	4b20      	ldr	r3, [pc, #128]	@ (8003890 <HAL_UART_MspInit+0x210>)
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel3;
 8003814:	4b20      	ldr	r3, [pc, #128]	@ (8003898 <HAL_UART_MspInit+0x218>)
 8003816:	4a21      	ldr	r2, [pc, #132]	@ (800389c <HAL_UART_MspInit+0x21c>)
 8003818:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800381a:	4b1f      	ldr	r3, [pc, #124]	@ (8003898 <HAL_UART_MspInit+0x218>)
 800381c:	2233      	movs	r2, #51	@ 0x33
 800381e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003820:	4b1d      	ldr	r3, [pc, #116]	@ (8003898 <HAL_UART_MspInit+0x218>)
 8003822:	2210      	movs	r2, #16
 8003824:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003826:	4b1c      	ldr	r3, [pc, #112]	@ (8003898 <HAL_UART_MspInit+0x218>)
 8003828:	2200      	movs	r2, #0
 800382a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800382c:	4b1a      	ldr	r3, [pc, #104]	@ (8003898 <HAL_UART_MspInit+0x218>)
 800382e:	2280      	movs	r2, #128	@ 0x80
 8003830:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003832:	4b19      	ldr	r3, [pc, #100]	@ (8003898 <HAL_UART_MspInit+0x218>)
 8003834:	2200      	movs	r2, #0
 8003836:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003838:	4b17      	ldr	r3, [pc, #92]	@ (8003898 <HAL_UART_MspInit+0x218>)
 800383a:	2200      	movs	r2, #0
 800383c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800383e:	4b16      	ldr	r3, [pc, #88]	@ (8003898 <HAL_UART_MspInit+0x218>)
 8003840:	2200      	movs	r2, #0
 8003842:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8003844:	4b14      	ldr	r3, [pc, #80]	@ (8003898 <HAL_UART_MspInit+0x218>)
 8003846:	2280      	movs	r2, #128	@ 0x80
 8003848:	0192      	lsls	r2, r2, #6
 800384a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800384c:	4b12      	ldr	r3, [pc, #72]	@ (8003898 <HAL_UART_MspInit+0x218>)
 800384e:	0018      	movs	r0, r3
 8003850:	f000 fb8a 	bl	8003f68 <HAL_DMA_Init>
 8003854:	1e03      	subs	r3, r0, #0
 8003856:	d001      	beq.n	800385c <HAL_UART_MspInit+0x1dc>
    {
      Error_Handler();
 8003858:	f7fe fd80 	bl	800235c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4a0e      	ldr	r2, [pc, #56]	@ (8003898 <HAL_UART_MspInit+0x218>)
 8003860:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003862:	4b0d      	ldr	r3, [pc, #52]	@ (8003898 <HAL_UART_MspInit+0x218>)
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003868:	2200      	movs	r2, #0
 800386a:	2100      	movs	r1, #0
 800386c:	201b      	movs	r0, #27
 800386e:	f000 fb39 	bl	8003ee4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003872:	201b      	movs	r0, #27
 8003874:	f000 fb4b 	bl	8003f0e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8003878:	46c0      	nop			@ (mov r8, r8)
 800387a:	46bd      	mov	sp, r7
 800387c:	b015      	add	sp, #84	@ 0x54
 800387e:	bd90      	pop	{r4, r7, pc}
 8003880:	40013800 	.word	0x40013800
 8003884:	40021000 	.word	0x40021000
 8003888:	50000800 	.word	0x50000800
 800388c:	50000400 	.word	0x50000400
 8003890:	20000588 	.word	0x20000588
 8003894:	4002001c 	.word	0x4002001c
 8003898:	200005e4 	.word	0x200005e4
 800389c:	40020030 	.word	0x40020030

080038a0 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a17      	ldr	r2, [pc, #92]	@ (800390c <HAL_UART_MspDeInit+0x6c>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d127      	bne.n	8003902 <HAL_UART_MspDeInit+0x62>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80038b2:	4b17      	ldr	r3, [pc, #92]	@ (8003910 <HAL_UART_MspDeInit+0x70>)
 80038b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80038b6:	4b16      	ldr	r3, [pc, #88]	@ (8003910 <HAL_UART_MspDeInit+0x70>)
 80038b8:	4916      	ldr	r1, [pc, #88]	@ (8003914 <HAL_UART_MspDeInit+0x74>)
 80038ba:	400a      	ands	r2, r1
 80038bc:	641a      	str	r2, [r3, #64]	@ 0x40
    /**USART1 GPIO Configuration
    PC14-OSCX_IN(PC14)     ------> USART1_TX
    PB2     ------> USART1_RX
    PA12 [PA10]     ------> USART1_DE
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_14);
 80038be:	2380      	movs	r3, #128	@ 0x80
 80038c0:	01db      	lsls	r3, r3, #7
 80038c2:	4a15      	ldr	r2, [pc, #84]	@ (8003918 <HAL_UART_MspDeInit+0x78>)
 80038c4:	0019      	movs	r1, r3
 80038c6:	0010      	movs	r0, r2
 80038c8:	f001 f87e 	bl	80049c8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2);
 80038cc:	4b13      	ldr	r3, [pc, #76]	@ (800391c <HAL_UART_MspDeInit+0x7c>)
 80038ce:	2104      	movs	r1, #4
 80038d0:	0018      	movs	r0, r3
 80038d2:	f001 f879 	bl	80049c8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_12);
 80038d6:	2380      	movs	r3, #128	@ 0x80
 80038d8:	015a      	lsls	r2, r3, #5
 80038da:	23a0      	movs	r3, #160	@ 0xa0
 80038dc:	05db      	lsls	r3, r3, #23
 80038de:	0011      	movs	r1, r2
 80038e0:	0018      	movs	r0, r3
 80038e2:	f001 f871 	bl	80049c8 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2280      	movs	r2, #128	@ 0x80
 80038ea:	589b      	ldr	r3, [r3, r2]
 80038ec:	0018      	movs	r0, r3
 80038ee:	f000 fbc5 	bl	800407c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80038f6:	0018      	movs	r0, r3
 80038f8:	f000 fbc0 	bl	800407c <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80038fc:	201b      	movs	r0, #27
 80038fe:	f000 fb16 	bl	8003f2e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8003902:	46c0      	nop			@ (mov r8, r8)
 8003904:	46bd      	mov	sp, r7
 8003906:	b002      	add	sp, #8
 8003908:	bd80      	pop	{r7, pc}
 800390a:	46c0      	nop			@ (mov r8, r8)
 800390c:	40013800 	.word	0x40013800
 8003910:	40021000 	.word	0x40021000
 8003914:	ffffbfff 	.word	0xffffbfff
 8003918:	50000800 	.word	0x50000800
 800391c:	50000400 	.word	0x50000400

08003920 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8003924:	f3bf 8f4f 	dsb	sy
}
 8003928:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800392a:	4b04      	ldr	r3, [pc, #16]	@ (800393c <__NVIC_SystemReset+0x1c>)
 800392c:	4a04      	ldr	r2, [pc, #16]	@ (8003940 <__NVIC_SystemReset+0x20>)
 800392e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003930:	f3bf 8f4f 	dsb	sy
}
 8003934:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003936:	46c0      	nop			@ (mov r8, r8)
 8003938:	e7fd      	b.n	8003936 <__NVIC_SystemReset+0x16>
 800393a:	46c0      	nop			@ (mov r8, r8)
 800393c:	e000ed00 	.word	0xe000ed00
 8003940:	05fa0004 	.word	0x05fa0004

08003944 <LL_ADC_IsActiveFlag_OVR>:
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_OVR) == (LL_ADC_FLAG_OVR)) ? 1UL : 0UL);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2210      	movs	r2, #16
 8003952:	4013      	ands	r3, r2
 8003954:	2b10      	cmp	r3, #16
 8003956:	d101      	bne.n	800395c <LL_ADC_IsActiveFlag_OVR+0x18>
 8003958:	2301      	movs	r3, #1
 800395a:	e000      	b.n	800395e <LL_ADC_IsActiveFlag_OVR+0x1a>
 800395c:	2300      	movs	r3, #0
}
 800395e:	0018      	movs	r0, r3
 8003960:	46bd      	mov	sp, r7
 8003962:	b002      	add	sp, #8
 8003964:	bd80      	pop	{r7, pc}

08003966 <LL_ADC_ClearFlag_OVR>:
{
 8003966:	b580      	push	{r7, lr}
 8003968:	b082      	sub	sp, #8
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_OVR);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2210      	movs	r2, #16
 8003972:	601a      	str	r2, [r3, #0]
}
 8003974:	46c0      	nop			@ (mov r8, r8)
 8003976:	46bd      	mov	sp, r7
 8003978:	b002      	add	sp, #8
 800397a:	bd80      	pop	{r7, pc}

0800397c <LL_DMA_IsActiveFlag_TC1>:
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF1) == (DMA_ISR_TCIF1)) ? 1UL : 0UL);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2202      	movs	r2, #2
 800398a:	4013      	ands	r3, r2
 800398c:	2b02      	cmp	r3, #2
 800398e:	d101      	bne.n	8003994 <LL_DMA_IsActiveFlag_TC1+0x18>
 8003990:	2301      	movs	r3, #1
 8003992:	e000      	b.n	8003996 <LL_DMA_IsActiveFlag_TC1+0x1a>
 8003994:	2300      	movs	r3, #0
}
 8003996:	0018      	movs	r0, r3
 8003998:	46bd      	mov	sp, r7
 800399a:	b002      	add	sp, #8
 800399c:	bd80      	pop	{r7, pc}

0800399e <LL_DMA_IsActiveFlag_HT1>:
{
 800399e:	b580      	push	{r7, lr}
 80039a0:	b082      	sub	sp, #8
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF1) == (DMA_ISR_HTIF1)) ? 1UL : 0UL);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2204      	movs	r2, #4
 80039ac:	4013      	ands	r3, r2
 80039ae:	2b04      	cmp	r3, #4
 80039b0:	d101      	bne.n	80039b6 <LL_DMA_IsActiveFlag_HT1+0x18>
 80039b2:	2301      	movs	r3, #1
 80039b4:	e000      	b.n	80039b8 <LL_DMA_IsActiveFlag_HT1+0x1a>
 80039b6:	2300      	movs	r3, #0
}
 80039b8:	0018      	movs	r0, r3
 80039ba:	46bd      	mov	sp, r7
 80039bc:	b002      	add	sp, #8
 80039be:	bd80      	pop	{r7, pc}

080039c0 <LL_DMA_IsActiveFlag_TE1>:
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF1) == (DMA_ISR_TEIF1)) ? 1UL : 0UL);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2208      	movs	r2, #8
 80039ce:	4013      	ands	r3, r2
 80039d0:	2b08      	cmp	r3, #8
 80039d2:	d101      	bne.n	80039d8 <LL_DMA_IsActiveFlag_TE1+0x18>
 80039d4:	2301      	movs	r3, #1
 80039d6:	e000      	b.n	80039da <LL_DMA_IsActiveFlag_TE1+0x1a>
 80039d8:	2300      	movs	r3, #0
}
 80039da:	0018      	movs	r0, r3
 80039dc:	46bd      	mov	sp, r7
 80039de:	b002      	add	sp, #8
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <LL_DMA_ClearFlag_TC1>:
{
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b082      	sub	sp, #8
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2202      	movs	r2, #2
 80039ee:	605a      	str	r2, [r3, #4]
}
 80039f0:	46c0      	nop			@ (mov r8, r8)
 80039f2:	46bd      	mov	sp, r7
 80039f4:	b002      	add	sp, #8
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <LL_DMA_ClearFlag_HT1>:
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF1);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2204      	movs	r2, #4
 8003a04:	605a      	str	r2, [r3, #4]
}
 8003a06:	46c0      	nop			@ (mov r8, r8)
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	b002      	add	sp, #8
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <LL_DMA_ClearFlag_TE1>:
{
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	b082      	sub	sp, #8
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF1);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2208      	movs	r2, #8
 8003a1a:	605a      	str	r2, [r3, #4]
}
 8003a1c:	46c0      	nop			@ (mov r8, r8)
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	b002      	add	sp, #8
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003a28:	46c0      	nop			@ (mov r8, r8)
 8003a2a:	e7fd      	b.n	8003a28 <NMI_Handler+0x4>

08003a2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  NVIC_SystemReset();
 8003a30:	f7ff ff76 	bl	8003920 <__NVIC_SystemReset>

08003a34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a38:	46c0      	nop			@ (mov r8, r8)
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a42:	46c0      	nop			@ (mov r8, r8)
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a4c:	f000 f93c 	bl	8003cc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a50:	46c0      	nop			@ (mov r8, r8)
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encoder_Pulse_A_Pin);
 8003a5a:	2380      	movs	r3, #128	@ 0x80
 8003a5c:	019b      	lsls	r3, r3, #6
 8003a5e:	0018      	movs	r0, r3
 8003a60:	f001 f8c4 	bl	8004bec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8003a64:	46c0      	nop			@ (mov r8, r8)
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
	...

08003a6c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
  /* Check whether DMA transfer complete caused the DMA interruption */
  if(LL_DMA_IsActiveFlag_TC1(DMA1) == 1)
 8003a70:	4b15      	ldr	r3, [pc, #84]	@ (8003ac8 <DMA1_Channel1_IRQHandler+0x5c>)
 8003a72:	0018      	movs	r0, r3
 8003a74:	f7ff ff82 	bl	800397c <LL_DMA_IsActiveFlag_TC1>
 8003a78:	0003      	movs	r3, r0
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d106      	bne.n	8003a8c <DMA1_Channel1_IRQHandler+0x20>
  {
	/* Clear flag DMA transfer complete */
	LL_DMA_ClearFlag_TC1(DMA1);
 8003a7e:	4b12      	ldr	r3, [pc, #72]	@ (8003ac8 <DMA1_Channel1_IRQHandler+0x5c>)
 8003a80:	0018      	movs	r0, r3
 8003a82:	f7ff ffae 	bl	80039e2 <LL_DMA_ClearFlag_TC1>

	/* Call interruption treatment function */
	ADC_ConvCpltCallback();
 8003a86:	f7ff faf9 	bl	800307c <ADC_ConvCpltCallback>
 8003a8a:	e00c      	b.n	8003aa6 <DMA1_Channel1_IRQHandler+0x3a>
  }
  else if(LL_DMA_IsActiveFlag_HT1(DMA1) == 1)
 8003a8c:	4b0e      	ldr	r3, [pc, #56]	@ (8003ac8 <DMA1_Channel1_IRQHandler+0x5c>)
 8003a8e:	0018      	movs	r0, r3
 8003a90:	f7ff ff85 	bl	800399e <LL_DMA_IsActiveFlag_HT1>
 8003a94:	0003      	movs	r3, r0
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d105      	bne.n	8003aa6 <DMA1_Channel1_IRQHandler+0x3a>
  {
	  /* Clear flag DMA half transfer complete */
	  LL_DMA_ClearFlag_HT1(DMA1);
 8003a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8003ac8 <DMA1_Channel1_IRQHandler+0x5c>)
 8003a9c:	0018      	movs	r0, r3
 8003a9e:	f7ff ffab 	bl	80039f8 <LL_DMA_ClearFlag_HT1>

	  /* Call interruption treatment function */
	  ADC_ConvHalfCpltCallback();
 8003aa2:	f7ff faf5 	bl	8003090 <ADC_ConvHalfCpltCallback>
  }
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
  /* Check whether DMA transfer error caused the DMA interruption */
  if(LL_DMA_IsActiveFlag_TE1(DMA1) == 1)
 8003aa6:	4b08      	ldr	r3, [pc, #32]	@ (8003ac8 <DMA1_Channel1_IRQHandler+0x5c>)
 8003aa8:	0018      	movs	r0, r3
 8003aaa:	f7ff ff89 	bl	80039c0 <LL_DMA_IsActiveFlag_TE1>
 8003aae:	0003      	movs	r3, r0
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d105      	bne.n	8003ac0 <DMA1_Channel1_IRQHandler+0x54>
  {
	  /* Clear flag DMA transfer error */
	  LL_DMA_ClearFlag_TE1(DMA1);
 8003ab4:	4b04      	ldr	r3, [pc, #16]	@ (8003ac8 <DMA1_Channel1_IRQHandler+0x5c>)
 8003ab6:	0018      	movs	r0, r3
 8003ab8:	f7ff ffa9 	bl	8003a0e <LL_DMA_ClearFlag_TE1>

	  /* Call interruption treatment function */
	  ADC_ErrorCallback();
 8003abc:	f7ff faf2 	bl	80030a4 <ADC_ErrorCallback>
  }
  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003ac0:	46c0      	nop			@ (mov r8, r8)
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	46c0      	nop			@ (mov r8, r8)
 8003ac8:	40020000 	.word	0x40020000

08003acc <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003ad0:	4b05      	ldr	r3, [pc, #20]	@ (8003ae8 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8003ad2:	0018      	movs	r0, r3
 8003ad4:	f000 fcae 	bl	8004434 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003ad8:	4b04      	ldr	r3, [pc, #16]	@ (8003aec <DMA1_Channel2_3_IRQHandler+0x20>)
 8003ada:	0018      	movs	r0, r3
 8003adc:	f000 fcaa 	bl	8004434 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8003ae0:	46c0      	nop			@ (mov r8, r8)
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	46c0      	nop			@ (mov r8, r8)
 8003ae8:	20000588 	.word	0x20000588
 8003aec:	200005e4 	.word	0x200005e4

08003af0 <DMAMUX1_DMA1_CH4_5_IRQHandler>:

/**
  * @brief This function handles DMAMUX1, DMA1 Channel 4 and 5.
  */
void DMAMUX1_DMA1_CH4_5_IRQHandler(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_DMA1_CH4_5_IRQn 0 */

  /* USER CODE END DMAMUX1_DMA1_CH4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003af4:	4b05      	ldr	r3, [pc, #20]	@ (8003b0c <DMAMUX1_DMA1_CH4_5_IRQHandler+0x1c>)
 8003af6:	0018      	movs	r0, r3
 8003af8:	f000 fc9c 	bl	8004434 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8003afc:	4b04      	ldr	r3, [pc, #16]	@ (8003b10 <DMAMUX1_DMA1_CH4_5_IRQHandler+0x20>)
 8003afe:	0018      	movs	r0, r3
 8003b00:	f000 fc98 	bl	8004434 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_DMA1_CH4_5_IRQn 1 */

  /* USER CODE END DMAMUX1_DMA1_CH4_5_IRQn 1 */
}
 8003b04:	46c0      	nop			@ (mov r8, r8)
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	46c0      	nop			@ (mov r8, r8)
 8003b0c:	20000340 	.word	0x20000340
 8003b10:	2000039c 	.word	0x2000039c

08003b14 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */
  /* Check whether ADC group regular overrun caused the ADC interruption */
  if(LL_ADC_IsActiveFlag_OVR(ADC1) != 0)
 8003b18:	4b07      	ldr	r3, [pc, #28]	@ (8003b38 <ADC1_IRQHandler+0x24>)
 8003b1a:	0018      	movs	r0, r3
 8003b1c:	f7ff ff12 	bl	8003944 <LL_ADC_IsActiveFlag_OVR>
 8003b20:	1e03      	subs	r3, r0, #0
 8003b22:	d005      	beq.n	8003b30 <ADC1_IRQHandler+0x1c>
  {
	/* Clear flag ADC group regular overrun */
	LL_ADC_ClearFlag_OVR(ADC1);
 8003b24:	4b04      	ldr	r3, [pc, #16]	@ (8003b38 <ADC1_IRQHandler+0x24>)
 8003b26:	0018      	movs	r0, r3
 8003b28:	f7ff ff1d 	bl	8003966 <LL_ADC_ClearFlag_OVR>

	/* Call interruption treatment function */
	ADC_ErrorCallback();
 8003b2c:	f7ff faba 	bl	80030a4 <ADC_ErrorCallback>
  }
  /* USER CODE END ADC1_IRQn 0 */
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8003b30:	46c0      	nop			@ (mov r8, r8)
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	46c0      	nop			@ (mov r8, r8)
 8003b38:	40012400 	.word	0x40012400

08003b3c <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8003b40:	4b03      	ldr	r3, [pc, #12]	@ (8003b50 <TIM14_IRQHandler+0x14>)
 8003b42:	0018      	movs	r0, r3
 8003b44:	f004 f962 	bl	8007e0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8003b48:	46c0      	nop			@ (mov r8, r8)
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	46c0      	nop			@ (mov r8, r8)
 8003b50:	200004a8 	.word	0x200004a8

08003b54 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 interrupt (combined with EXTI 23).
  */
void I2C1_IRQHandler(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8003b58:	4b09      	ldr	r3, [pc, #36]	@ (8003b80 <I2C1_IRQHandler+0x2c>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	699a      	ldr	r2, [r3, #24]
 8003b5e:	23e0      	movs	r3, #224	@ 0xe0
 8003b60:	00db      	lsls	r3, r3, #3
 8003b62:	4013      	ands	r3, r2
 8003b64:	d004      	beq.n	8003b70 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8003b66:	4b06      	ldr	r3, [pc, #24]	@ (8003b80 <I2C1_IRQHandler+0x2c>)
 8003b68:	0018      	movs	r0, r3
 8003b6a:	f001 fc93 	bl	8005494 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8003b6e:	e003      	b.n	8003b78 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8003b70:	4b03      	ldr	r3, [pc, #12]	@ (8003b80 <I2C1_IRQHandler+0x2c>)
 8003b72:	0018      	movs	r0, r3
 8003b74:	f001 fc74 	bl	8005460 <HAL_I2C_EV_IRQHandler>
}
 8003b78:	46c0      	nop			@ (mov r8, r8)
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	46c0      	nop			@ (mov r8, r8)
 8003b80:	200002ec 	.word	0x200002ec

08003b84 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 interrupt.
  */
void USART1_IRQHandler(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003b88:	4b03      	ldr	r3, [pc, #12]	@ (8003b98 <USART1_IRQHandler+0x14>)
 8003b8a:	0018      	movs	r0, r3
 8003b8c:	f005 f980 	bl	8008e90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003b90:	46c0      	nop			@ (mov r8, r8)
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	46c0      	nop			@ (mov r8, r8)
 8003b98:	200004f4 	.word	0x200004f4

08003b9c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003ba0:	4b03      	ldr	r3, [pc, #12]	@ (8003bb0 <SystemInit+0x14>)
 8003ba2:	2280      	movs	r2, #128	@ 0x80
 8003ba4:	0512      	lsls	r2, r2, #20
 8003ba6:	609a      	str	r2, [r3, #8]
#endif
}
 8003ba8:	46c0      	nop			@ (mov r8, r8)
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	46c0      	nop			@ (mov r8, r8)
 8003bb0:	e000ed00 	.word	0xe000ed00

08003bb4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003bb4:	480d      	ldr	r0, [pc, #52]	@ (8003bec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003bb6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003bb8:	f7ff fff0 	bl	8003b9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003bbc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003bbe:	e003      	b.n	8003bc8 <LoopCopyDataInit>

08003bc0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8003bf0 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8003bc2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003bc4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003bc6:	3104      	adds	r1, #4

08003bc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003bc8:	480a      	ldr	r0, [pc, #40]	@ (8003bf4 <LoopForever+0xa>)
  ldr r3, =_edata
 8003bca:	4b0b      	ldr	r3, [pc, #44]	@ (8003bf8 <LoopForever+0xe>)
  adds r2, r0, r1
 8003bcc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003bce:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003bd0:	d3f6      	bcc.n	8003bc0 <CopyDataInit>
  ldr r2, =_sbss
 8003bd2:	4a0a      	ldr	r2, [pc, #40]	@ (8003bfc <LoopForever+0x12>)
  b LoopFillZerobss
 8003bd4:	e002      	b.n	8003bdc <LoopFillZerobss>

08003bd6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003bd6:	2300      	movs	r3, #0
  str  r3, [r2]
 8003bd8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003bda:	3204      	adds	r2, #4

08003bdc <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8003bdc:	4b08      	ldr	r3, [pc, #32]	@ (8003c00 <LoopForever+0x16>)
  cmp r2, r3
 8003bde:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003be0:	d3f9      	bcc.n	8003bd6 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8003be2:	f006 fed7 	bl	800a994 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003be6:	f7fd fcd5 	bl	8001594 <main>

08003bea <LoopForever>:

LoopForever:
    b LoopForever
 8003bea:	e7fe      	b.n	8003bea <LoopForever>
  ldr   r0, =_estack
 8003bec:	20006000 	.word	0x20006000
  ldr r3, =_sidata
 8003bf0:	0800ae14 	.word	0x0800ae14
  ldr r0, =_sdata
 8003bf4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003bf8:	200000c0 	.word	0x200000c0
  ldr r2, =_sbss
 8003bfc:	200000c0 	.word	0x200000c0
  ldr r3, = _ebss
 8003c00:	200008a0 	.word	0x200008a0

08003c04 <EXTI0_1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003c04:	e7fe      	b.n	8003c04 <EXTI0_1_IRQHandler>

08003c06 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c06:	b580      	push	{r7, lr}
 8003c08:	b082      	sub	sp, #8
 8003c0a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003c0c:	1dfb      	adds	r3, r7, #7
 8003c0e:	2200      	movs	r2, #0
 8003c10:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003c12:	2003      	movs	r0, #3
 8003c14:	f000 f80e 	bl	8003c34 <HAL_InitTick>
 8003c18:	1e03      	subs	r3, r0, #0
 8003c1a:	d003      	beq.n	8003c24 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8003c1c:	1dfb      	adds	r3, r7, #7
 8003c1e:	2201      	movs	r2, #1
 8003c20:	701a      	strb	r2, [r3, #0]
 8003c22:	e001      	b.n	8003c28 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003c24:	f7ff fae4 	bl	80031f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003c28:	1dfb      	adds	r3, r7, #7
 8003c2a:	781b      	ldrb	r3, [r3, #0]
}
 8003c2c:	0018      	movs	r0, r3
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	b002      	add	sp, #8
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c34:	b590      	push	{r4, r7, lr}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003c3c:	230f      	movs	r3, #15
 8003c3e:	18fb      	adds	r3, r7, r3
 8003c40:	2200      	movs	r2, #0
 8003c42:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8003c44:	4b1d      	ldr	r3, [pc, #116]	@ (8003cbc <HAL_InitTick+0x88>)
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d02b      	beq.n	8003ca4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8003c4c:	4b1c      	ldr	r3, [pc, #112]	@ (8003cc0 <HAL_InitTick+0x8c>)
 8003c4e:	681c      	ldr	r4, [r3, #0]
 8003c50:	4b1a      	ldr	r3, [pc, #104]	@ (8003cbc <HAL_InitTick+0x88>)
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	0019      	movs	r1, r3
 8003c56:	23fa      	movs	r3, #250	@ 0xfa
 8003c58:	0098      	lsls	r0, r3, #2
 8003c5a:	f7fc fa55 	bl	8000108 <__udivsi3>
 8003c5e:	0003      	movs	r3, r0
 8003c60:	0019      	movs	r1, r3
 8003c62:	0020      	movs	r0, r4
 8003c64:	f7fc fa50 	bl	8000108 <__udivsi3>
 8003c68:	0003      	movs	r3, r0
 8003c6a:	0018      	movs	r0, r3
 8003c6c:	f000 f96f 	bl	8003f4e <HAL_SYSTICK_Config>
 8003c70:	1e03      	subs	r3, r0, #0
 8003c72:	d112      	bne.n	8003c9a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2b03      	cmp	r3, #3
 8003c78:	d80a      	bhi.n	8003c90 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c7a:	6879      	ldr	r1, [r7, #4]
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	425b      	negs	r3, r3
 8003c80:	2200      	movs	r2, #0
 8003c82:	0018      	movs	r0, r3
 8003c84:	f000 f92e 	bl	8003ee4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003c88:	4b0e      	ldr	r3, [pc, #56]	@ (8003cc4 <HAL_InitTick+0x90>)
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	601a      	str	r2, [r3, #0]
 8003c8e:	e00d      	b.n	8003cac <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003c90:	230f      	movs	r3, #15
 8003c92:	18fb      	adds	r3, r7, r3
 8003c94:	2201      	movs	r2, #1
 8003c96:	701a      	strb	r2, [r3, #0]
 8003c98:	e008      	b.n	8003cac <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003c9a:	230f      	movs	r3, #15
 8003c9c:	18fb      	adds	r3, r7, r3
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	701a      	strb	r2, [r3, #0]
 8003ca2:	e003      	b.n	8003cac <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003ca4:	230f      	movs	r3, #15
 8003ca6:	18fb      	adds	r3, r7, r3
 8003ca8:	2201      	movs	r2, #1
 8003caa:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003cac:	230f      	movs	r3, #15
 8003cae:	18fb      	adds	r3, r7, r3
 8003cb0:	781b      	ldrb	r3, [r3, #0]
}
 8003cb2:	0018      	movs	r0, r3
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	b005      	add	sp, #20
 8003cb8:	bd90      	pop	{r4, r7, pc}
 8003cba:	46c0      	nop			@ (mov r8, r8)
 8003cbc:	200000bc 	.word	0x200000bc
 8003cc0:	200000b4 	.word	0x200000b4
 8003cc4:	200000b8 	.word	0x200000b8

08003cc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003ccc:	4b05      	ldr	r3, [pc, #20]	@ (8003ce4 <HAL_IncTick+0x1c>)
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	001a      	movs	r2, r3
 8003cd2:	4b05      	ldr	r3, [pc, #20]	@ (8003ce8 <HAL_IncTick+0x20>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	18d2      	adds	r2, r2, r3
 8003cd8:	4b03      	ldr	r3, [pc, #12]	@ (8003ce8 <HAL_IncTick+0x20>)
 8003cda:	601a      	str	r2, [r3, #0]
}
 8003cdc:	46c0      	nop			@ (mov r8, r8)
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	46c0      	nop			@ (mov r8, r8)
 8003ce4:	200000bc 	.word	0x200000bc
 8003ce8:	2000089c 	.word	0x2000089c

08003cec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	af00      	add	r7, sp, #0
  return uwTick;
 8003cf0:	4b02      	ldr	r3, [pc, #8]	@ (8003cfc <HAL_GetTick+0x10>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
}
 8003cf4:	0018      	movs	r0, r3
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	46c0      	nop			@ (mov r8, r8)
 8003cfc:	2000089c 	.word	0x2000089c

08003d00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d08:	f7ff fff0 	bl	8003cec <HAL_GetTick>
 8003d0c:	0003      	movs	r3, r0
 8003d0e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	3301      	adds	r3, #1
 8003d18:	d005      	beq.n	8003d26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d1a:	4b0a      	ldr	r3, [pc, #40]	@ (8003d44 <HAL_Delay+0x44>)
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	001a      	movs	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	189b      	adds	r3, r3, r2
 8003d24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003d26:	46c0      	nop			@ (mov r8, r8)
 8003d28:	f7ff ffe0 	bl	8003cec <HAL_GetTick>
 8003d2c:	0002      	movs	r2, r0
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	68fa      	ldr	r2, [r7, #12]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d8f7      	bhi.n	8003d28 <HAL_Delay+0x28>
  {
  }
}
 8003d38:	46c0      	nop			@ (mov r8, r8)
 8003d3a:	46c0      	nop			@ (mov r8, r8)
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	b004      	add	sp, #16
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	46c0      	nop			@ (mov r8, r8)
 8003d44:	200000bc 	.word	0x200000bc

08003d48 <__NVIC_EnableIRQ>:
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	0002      	movs	r2, r0
 8003d50:	1dfb      	adds	r3, r7, #7
 8003d52:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003d54:	1dfb      	adds	r3, r7, #7
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	2b7f      	cmp	r3, #127	@ 0x7f
 8003d5a:	d809      	bhi.n	8003d70 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d5c:	1dfb      	adds	r3, r7, #7
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	001a      	movs	r2, r3
 8003d62:	231f      	movs	r3, #31
 8003d64:	401a      	ands	r2, r3
 8003d66:	4b04      	ldr	r3, [pc, #16]	@ (8003d78 <__NVIC_EnableIRQ+0x30>)
 8003d68:	2101      	movs	r1, #1
 8003d6a:	4091      	lsls	r1, r2
 8003d6c:	000a      	movs	r2, r1
 8003d6e:	601a      	str	r2, [r3, #0]
}
 8003d70:	46c0      	nop			@ (mov r8, r8)
 8003d72:	46bd      	mov	sp, r7
 8003d74:	b002      	add	sp, #8
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	e000e100 	.word	0xe000e100

08003d7c <__NVIC_DisableIRQ>:
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	0002      	movs	r2, r0
 8003d84:	1dfb      	adds	r3, r7, #7
 8003d86:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003d88:	1dfb      	adds	r3, r7, #7
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	2b7f      	cmp	r3, #127	@ 0x7f
 8003d8e:	d810      	bhi.n	8003db2 <__NVIC_DisableIRQ+0x36>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d90:	1dfb      	adds	r3, r7, #7
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	001a      	movs	r2, r3
 8003d96:	231f      	movs	r3, #31
 8003d98:	4013      	ands	r3, r2
 8003d9a:	4908      	ldr	r1, [pc, #32]	@ (8003dbc <__NVIC_DisableIRQ+0x40>)
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	409a      	lsls	r2, r3
 8003da0:	0013      	movs	r3, r2
 8003da2:	2280      	movs	r2, #128	@ 0x80
 8003da4:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003da6:	f3bf 8f4f 	dsb	sy
}
 8003daa:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8003dac:	f3bf 8f6f 	isb	sy
}
 8003db0:	46c0      	nop			@ (mov r8, r8)
}
 8003db2:	46c0      	nop			@ (mov r8, r8)
 8003db4:	46bd      	mov	sp, r7
 8003db6:	b002      	add	sp, #8
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	46c0      	nop			@ (mov r8, r8)
 8003dbc:	e000e100 	.word	0xe000e100

08003dc0 <__NVIC_SetPriority>:
{
 8003dc0:	b590      	push	{r4, r7, lr}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	0002      	movs	r2, r0
 8003dc8:	6039      	str	r1, [r7, #0]
 8003dca:	1dfb      	adds	r3, r7, #7
 8003dcc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003dce:	1dfb      	adds	r3, r7, #7
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	2b7f      	cmp	r3, #127	@ 0x7f
 8003dd4:	d828      	bhi.n	8003e28 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003dd6:	4a2f      	ldr	r2, [pc, #188]	@ (8003e94 <__NVIC_SetPriority+0xd4>)
 8003dd8:	1dfb      	adds	r3, r7, #7
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	b25b      	sxtb	r3, r3
 8003dde:	089b      	lsrs	r3, r3, #2
 8003de0:	33c0      	adds	r3, #192	@ 0xc0
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	589b      	ldr	r3, [r3, r2]
 8003de6:	1dfa      	adds	r2, r7, #7
 8003de8:	7812      	ldrb	r2, [r2, #0]
 8003dea:	0011      	movs	r1, r2
 8003dec:	2203      	movs	r2, #3
 8003dee:	400a      	ands	r2, r1
 8003df0:	00d2      	lsls	r2, r2, #3
 8003df2:	21ff      	movs	r1, #255	@ 0xff
 8003df4:	4091      	lsls	r1, r2
 8003df6:	000a      	movs	r2, r1
 8003df8:	43d2      	mvns	r2, r2
 8003dfa:	401a      	ands	r2, r3
 8003dfc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	019b      	lsls	r3, r3, #6
 8003e02:	22ff      	movs	r2, #255	@ 0xff
 8003e04:	401a      	ands	r2, r3
 8003e06:	1dfb      	adds	r3, r7, #7
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	0018      	movs	r0, r3
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	4003      	ands	r3, r0
 8003e10:	00db      	lsls	r3, r3, #3
 8003e12:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e14:	481f      	ldr	r0, [pc, #124]	@ (8003e94 <__NVIC_SetPriority+0xd4>)
 8003e16:	1dfb      	adds	r3, r7, #7
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	b25b      	sxtb	r3, r3
 8003e1c:	089b      	lsrs	r3, r3, #2
 8003e1e:	430a      	orrs	r2, r1
 8003e20:	33c0      	adds	r3, #192	@ 0xc0
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	501a      	str	r2, [r3, r0]
}
 8003e26:	e031      	b.n	8003e8c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e28:	4a1b      	ldr	r2, [pc, #108]	@ (8003e98 <__NVIC_SetPriority+0xd8>)
 8003e2a:	1dfb      	adds	r3, r7, #7
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	0019      	movs	r1, r3
 8003e30:	230f      	movs	r3, #15
 8003e32:	400b      	ands	r3, r1
 8003e34:	3b08      	subs	r3, #8
 8003e36:	089b      	lsrs	r3, r3, #2
 8003e38:	3306      	adds	r3, #6
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	18d3      	adds	r3, r2, r3
 8003e3e:	3304      	adds	r3, #4
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	1dfa      	adds	r2, r7, #7
 8003e44:	7812      	ldrb	r2, [r2, #0]
 8003e46:	0011      	movs	r1, r2
 8003e48:	2203      	movs	r2, #3
 8003e4a:	400a      	ands	r2, r1
 8003e4c:	00d2      	lsls	r2, r2, #3
 8003e4e:	21ff      	movs	r1, #255	@ 0xff
 8003e50:	4091      	lsls	r1, r2
 8003e52:	000a      	movs	r2, r1
 8003e54:	43d2      	mvns	r2, r2
 8003e56:	401a      	ands	r2, r3
 8003e58:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	019b      	lsls	r3, r3, #6
 8003e5e:	22ff      	movs	r2, #255	@ 0xff
 8003e60:	401a      	ands	r2, r3
 8003e62:	1dfb      	adds	r3, r7, #7
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	0018      	movs	r0, r3
 8003e68:	2303      	movs	r3, #3
 8003e6a:	4003      	ands	r3, r0
 8003e6c:	00db      	lsls	r3, r3, #3
 8003e6e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e70:	4809      	ldr	r0, [pc, #36]	@ (8003e98 <__NVIC_SetPriority+0xd8>)
 8003e72:	1dfb      	adds	r3, r7, #7
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	001c      	movs	r4, r3
 8003e78:	230f      	movs	r3, #15
 8003e7a:	4023      	ands	r3, r4
 8003e7c:	3b08      	subs	r3, #8
 8003e7e:	089b      	lsrs	r3, r3, #2
 8003e80:	430a      	orrs	r2, r1
 8003e82:	3306      	adds	r3, #6
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	18c3      	adds	r3, r0, r3
 8003e88:	3304      	adds	r3, #4
 8003e8a:	601a      	str	r2, [r3, #0]
}
 8003e8c:	46c0      	nop			@ (mov r8, r8)
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	b003      	add	sp, #12
 8003e92:	bd90      	pop	{r4, r7, pc}
 8003e94:	e000e100 	.word	0xe000e100
 8003e98:	e000ed00 	.word	0xe000ed00

08003e9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	1e5a      	subs	r2, r3, #1
 8003ea8:	2380      	movs	r3, #128	@ 0x80
 8003eaa:	045b      	lsls	r3, r3, #17
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d301      	bcc.n	8003eb4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e010      	b.n	8003ed6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003eb4:	4b0a      	ldr	r3, [pc, #40]	@ (8003ee0 <SysTick_Config+0x44>)
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	3a01      	subs	r2, #1
 8003eba:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	425b      	negs	r3, r3
 8003ec0:	2103      	movs	r1, #3
 8003ec2:	0018      	movs	r0, r3
 8003ec4:	f7ff ff7c 	bl	8003dc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ec8:	4b05      	ldr	r3, [pc, #20]	@ (8003ee0 <SysTick_Config+0x44>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ece:	4b04      	ldr	r3, [pc, #16]	@ (8003ee0 <SysTick_Config+0x44>)
 8003ed0:	2207      	movs	r2, #7
 8003ed2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	0018      	movs	r0, r3
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	b002      	add	sp, #8
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	46c0      	nop			@ (mov r8, r8)
 8003ee0:	e000e010 	.word	0xe000e010

08003ee4 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60b9      	str	r1, [r7, #8]
 8003eec:	607a      	str	r2, [r7, #4]
 8003eee:	210f      	movs	r1, #15
 8003ef0:	187b      	adds	r3, r7, r1
 8003ef2:	1c02      	adds	r2, r0, #0
 8003ef4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003ef6:	68ba      	ldr	r2, [r7, #8]
 8003ef8:	187b      	adds	r3, r7, r1
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	b25b      	sxtb	r3, r3
 8003efe:	0011      	movs	r1, r2
 8003f00:	0018      	movs	r0, r3
 8003f02:	f7ff ff5d 	bl	8003dc0 <__NVIC_SetPriority>
}
 8003f06:	46c0      	nop			@ (mov r8, r8)
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	b004      	add	sp, #16
 8003f0c:	bd80      	pop	{r7, pc}

08003f0e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b082      	sub	sp, #8
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	0002      	movs	r2, r0
 8003f16:	1dfb      	adds	r3, r7, #7
 8003f18:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f1a:	1dfb      	adds	r3, r7, #7
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	b25b      	sxtb	r3, r3
 8003f20:	0018      	movs	r0, r3
 8003f22:	f7ff ff11 	bl	8003d48 <__NVIC_EnableIRQ>
}
 8003f26:	46c0      	nop			@ (mov r8, r8)
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	b002      	add	sp, #8
 8003f2c:	bd80      	pop	{r7, pc}

08003f2e <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b082      	sub	sp, #8
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	0002      	movs	r2, r0
 8003f36:	1dfb      	adds	r3, r7, #7
 8003f38:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003f3a:	1dfb      	adds	r3, r7, #7
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	b25b      	sxtb	r3, r3
 8003f40:	0018      	movs	r0, r3
 8003f42:	f7ff ff1b 	bl	8003d7c <__NVIC_DisableIRQ>
}
 8003f46:	46c0      	nop			@ (mov r8, r8)
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	b002      	add	sp, #8
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b082      	sub	sp, #8
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	0018      	movs	r0, r3
 8003f5a:	f7ff ff9f 	bl	8003e9c <SysTick_Config>
 8003f5e:	0003      	movs	r3, r0
}
 8003f60:	0018      	movs	r0, r3
 8003f62:	46bd      	mov	sp, r7
 8003f64:	b002      	add	sp, #8
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d101      	bne.n	8003f7a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e077      	b.n	800406a <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a3d      	ldr	r2, [pc, #244]	@ (8004074 <HAL_DMA_Init+0x10c>)
 8003f80:	4694      	mov	ip, r2
 8003f82:	4463      	add	r3, ip
 8003f84:	2114      	movs	r1, #20
 8003f86:	0018      	movs	r0, r3
 8003f88:	f7fc f8be 	bl	8000108 <__udivsi3>
 8003f8c:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 8003f8e:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2225      	movs	r2, #37	@ 0x25
 8003f98:	2102      	movs	r1, #2
 8003f9a:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4934      	ldr	r1, [pc, #208]	@ (8004078 <HAL_DMA_Init+0x110>)
 8003fa8:	400a      	ands	r2, r1
 8003faa:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	6819      	ldr	r1, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	689a      	ldr	r2, [r3, #8]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	431a      	orrs	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	431a      	orrs	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	431a      	orrs	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	699b      	ldr	r3, [r3, #24]
 8003fcc:	431a      	orrs	r2, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	69db      	ldr	r3, [r3, #28]
 8003fd2:	431a      	orrs	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a1b      	ldr	r3, [r3, #32]
 8003fd8:	431a      	orrs	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	430a      	orrs	r2, r1
 8003fe0:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	0018      	movs	r0, r3
 8003fe6:	f000 fb2d 	bl	8004644 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	689a      	ldr	r2, [r3, #8]
 8003fee:	2380      	movs	r3, #128	@ 0x80
 8003ff0:	01db      	lsls	r3, r3, #7
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d102      	bne.n	8003ffc <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685a      	ldr	r2, [r3, #4]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004004:	21ff      	movs	r1, #255	@ 0xff
 8004006:	400a      	ands	r2, r1
 8004008:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004012:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d011      	beq.n	8004040 <HAL_DMA_Init+0xd8>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	2b04      	cmp	r3, #4
 8004022:	d80d      	bhi.n	8004040 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	0018      	movs	r0, r3
 8004028:	f000 fb38 	bl	800469c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004030:	2200      	movs	r2, #0
 8004032:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800403c:	605a      	str	r2, [r3, #4]
 800403e:	e008      	b.n	8004052 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2225      	movs	r2, #37	@ 0x25
 800405c:	2101      	movs	r1, #1
 800405e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2224      	movs	r2, #36	@ 0x24
 8004064:	2100      	movs	r1, #0
 8004066:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	0018      	movs	r0, r3
 800406c:	46bd      	mov	sp, r7
 800406e:	b002      	add	sp, #8
 8004070:	bd80      	pop	{r7, pc}
 8004072:	46c0      	nop			@ (mov r8, r8)
 8004074:	bffdfff8 	.word	0xbffdfff8
 8004078:	ffff800f 	.word	0xffff800f

0800407c <HAL_DMA_DeInit>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d101      	bne.n	800408e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e066      	b.n	800415c <HAL_DMA_DeInit+0xe0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2101      	movs	r1, #1
 800409a:	438a      	bics	r2, r1
 800409c:	601a      	str	r2, [r3, #0]

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a30      	ldr	r2, [pc, #192]	@ (8004164 <HAL_DMA_DeInit+0xe8>)
 80040a4:	4694      	mov	ip, r2
 80040a6:	4463      	add	r3, ip
 80040a8:	2114      	movs	r1, #20
 80040aa:	0018      	movs	r0, r3
 80040ac:	f7fc f82c 	bl	8000108 <__udivsi3>
 80040b0:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 80040b2:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2200      	movs	r2, #0
 80040be:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 80040c0:	4b29      	ldr	r3, [pc, #164]	@ (8004168 <HAL_DMA_DeInit+0xec>)
 80040c2:	6859      	ldr	r1, [r3, #4]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c8:	221c      	movs	r2, #28
 80040ca:	4013      	ands	r3, r2
 80040cc:	2201      	movs	r2, #1
 80040ce:	409a      	lsls	r2, r3
 80040d0:	4b25      	ldr	r3, [pc, #148]	@ (8004168 <HAL_DMA_DeInit+0xec>)
 80040d2:	430a      	orrs	r2, r1
 80040d4:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	0018      	movs	r0, r3
 80040da:	f000 fab3 	bl	8004644 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040e2:	2200      	movs	r2, #0
 80040e4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80040ee:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d010      	beq.n	800411a <HAL_DMA_DeInit+0x9e>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	2b04      	cmp	r3, #4
 80040fe:	d80c      	bhi.n	800411a <HAL_DMA_DeInit+0x9e>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	0018      	movs	r0, r3
 8004104:	f000 faca 	bl	800469c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800410c:	2200      	movs	r2, #0
 800410e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8004118:	605a      	str	r2, [r3, #4]
  }

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	639a      	str	r2, [r3, #56]	@ 0x38

  hdma->DMAmuxRequestGen = 0U;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma->DMAmuxRequestGenStatus = 0U;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 0U;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2225      	movs	r2, #37	@ 0x25
 800414e:	2100      	movs	r1, #0
 8004150:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2224      	movs	r2, #36	@ 0x24
 8004156:	2100      	movs	r1, #0
 8004158:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800415a:	2300      	movs	r3, #0
}
 800415c:	0018      	movs	r0, r3
 800415e:	46bd      	mov	sp, r7
 8004160:	b002      	add	sp, #8
 8004162:	bd80      	pop	{r7, pc}
 8004164:	bffdfff8 	.word	0xbffdfff8
 8004168:	40020000 	.word	0x40020000

0800416c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b086      	sub	sp, #24
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
 8004178:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800417a:	2317      	movs	r3, #23
 800417c:	18fb      	adds	r3, r7, r3
 800417e:	2200      	movs	r2, #0
 8004180:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2224      	movs	r2, #36	@ 0x24
 8004186:	5c9b      	ldrb	r3, [r3, r2]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d101      	bne.n	8004190 <HAL_DMA_Start_IT+0x24>
 800418c:	2302      	movs	r3, #2
 800418e:	e070      	b.n	8004272 <HAL_DMA_Start_IT+0x106>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2224      	movs	r2, #36	@ 0x24
 8004194:	2101      	movs	r1, #1
 8004196:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2225      	movs	r2, #37	@ 0x25
 800419c:	5c9b      	ldrb	r3, [r3, r2]
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d157      	bne.n	8004254 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2225      	movs	r2, #37	@ 0x25
 80041a8:	2102      	movs	r1, #2
 80041aa:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2200      	movs	r2, #0
 80041b0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2101      	movs	r1, #1
 80041be:	438a      	bics	r2, r1
 80041c0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	68b9      	ldr	r1, [r7, #8]
 80041c8:	68f8      	ldr	r0, [r7, #12]
 80041ca:	f000 f9fb 	bl	80045c4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d008      	beq.n	80041e8 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	210e      	movs	r1, #14
 80041e2:	430a      	orrs	r2, r1
 80041e4:	601a      	str	r2, [r3, #0]
 80041e6:	e00f      	b.n	8004208 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2104      	movs	r1, #4
 80041f4:	438a      	bics	r2, r1
 80041f6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	210a      	movs	r1, #10
 8004204:	430a      	orrs	r2, r1
 8004206:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	2380      	movs	r3, #128	@ 0x80
 8004210:	025b      	lsls	r3, r3, #9
 8004212:	4013      	ands	r3, r2
 8004214:	d008      	beq.n	8004228 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004220:	2180      	movs	r1, #128	@ 0x80
 8004222:	0049      	lsls	r1, r1, #1
 8004224:	430a      	orrs	r2, r1
 8004226:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800422c:	2b00      	cmp	r3, #0
 800422e:	d008      	beq.n	8004242 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800423a:	2180      	movs	r1, #128	@ 0x80
 800423c:	0049      	lsls	r1, r1, #1
 800423e:	430a      	orrs	r2, r1
 8004240:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2101      	movs	r1, #1
 800424e:	430a      	orrs	r2, r1
 8004250:	601a      	str	r2, [r3, #0]
 8004252:	e007      	b.n	8004264 <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2224      	movs	r2, #36	@ 0x24
 8004258:	2100      	movs	r1, #0
 800425a:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800425c:	2317      	movs	r3, #23
 800425e:	18fb      	adds	r3, r7, r3
 8004260:	2202      	movs	r2, #2
 8004262:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2224      	movs	r2, #36	@ 0x24
 8004268:	2100      	movs	r1, #0
 800426a:	5499      	strb	r1, [r3, r2]

  return status;
 800426c:	2317      	movs	r3, #23
 800426e:	18fb      	adds	r3, r7, r3
 8004270:	781b      	ldrb	r3, [r3, #0]
}
 8004272:	0018      	movs	r0, r3
 8004274:	46bd      	mov	sp, r7
 8004276:	b006      	add	sp, #24
 8004278:	bd80      	pop	{r7, pc}
	...

0800427c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d101      	bne.n	800428e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e050      	b.n	8004330 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2225      	movs	r2, #37	@ 0x25
 8004292:	5c9b      	ldrb	r3, [r3, r2]
 8004294:	b2db      	uxtb	r3, r3
 8004296:	2b02      	cmp	r3, #2
 8004298:	d008      	beq.n	80042ac <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2204      	movs	r2, #4
 800429e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2224      	movs	r2, #36	@ 0x24
 80042a4:	2100      	movs	r1, #0
 80042a6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e041      	b.n	8004330 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	210e      	movs	r1, #14
 80042b8:	438a      	bics	r2, r1
 80042ba:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042c6:	491c      	ldr	r1, [pc, #112]	@ (8004338 <HAL_DMA_Abort+0xbc>)
 80042c8:	400a      	ands	r2, r1
 80042ca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2101      	movs	r1, #1
 80042d8:	438a      	bics	r2, r1
 80042da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 80042dc:	4b17      	ldr	r3, [pc, #92]	@ (800433c <HAL_DMA_Abort+0xc0>)
 80042de:	6859      	ldr	r1, [r3, #4]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e4:	221c      	movs	r2, #28
 80042e6:	4013      	ands	r3, r2
 80042e8:	2201      	movs	r2, #1
 80042ea:	409a      	lsls	r2, r3
 80042ec:	4b13      	ldr	r3, [pc, #76]	@ (800433c <HAL_DMA_Abort+0xc0>)
 80042ee:	430a      	orrs	r2, r1
 80042f0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80042fa:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004300:	2b00      	cmp	r3, #0
 8004302:	d00c      	beq.n	800431e <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800430e:	490a      	ldr	r1, [pc, #40]	@ (8004338 <HAL_DMA_Abort+0xbc>)
 8004310:	400a      	ands	r2, r1
 8004312:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800431c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2225      	movs	r2, #37	@ 0x25
 8004322:	2101      	movs	r1, #1
 8004324:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2224      	movs	r2, #36	@ 0x24
 800432a:	2100      	movs	r1, #0
 800432c:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800432e:	2300      	movs	r3, #0
}
 8004330:	0018      	movs	r0, r3
 8004332:	46bd      	mov	sp, r7
 8004334:	b002      	add	sp, #8
 8004336:	bd80      	pop	{r7, pc}
 8004338:	fffffeff 	.word	0xfffffeff
 800433c:	40020000 	.word	0x40020000

08004340 <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004348:	230f      	movs	r3, #15
 800434a:	18fb      	adds	r3, r7, r3
 800434c:	2200      	movs	r2, #0
 800434e:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2224      	movs	r2, #36	@ 0x24
 8004354:	2100      	movs	r1, #0
 8004356:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2224      	movs	r2, #36	@ 0x24
 800435c:	5c9b      	ldrb	r3, [r3, r2]
 800435e:	2b01      	cmp	r3, #1
 8004360:	d101      	bne.n	8004366 <HAL_DMA_Abort_IT+0x26>
 8004362:	2302      	movs	r3, #2
 8004364:	e05e      	b.n	8004424 <HAL_DMA_Abort_IT+0xe4>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2224      	movs	r2, #36	@ 0x24
 800436a:	2101      	movs	r1, #1
 800436c:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2225      	movs	r2, #37	@ 0x25
 8004372:	5c9b      	ldrb	r3, [r3, r2]
 8004374:	b2db      	uxtb	r3, r3
 8004376:	2b02      	cmp	r3, #2
 8004378:	d007      	beq.n	800438a <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2204      	movs	r2, #4
 800437e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004380:	230f      	movs	r3, #15
 8004382:	18fb      	adds	r3, r7, r3
 8004384:	2201      	movs	r2, #1
 8004386:	701a      	strb	r2, [r3, #0]
 8004388:	e049      	b.n	800441e <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	210e      	movs	r1, #14
 8004396:	438a      	bics	r2, r1
 8004398:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2101      	movs	r1, #1
 80043a6:	438a      	bics	r2, r1
 80043a8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043b4:	491d      	ldr	r1, [pc, #116]	@ (800442c <HAL_DMA_Abort_IT+0xec>)
 80043b6:	400a      	ands	r2, r1
 80043b8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 80043ba:	4b1d      	ldr	r3, [pc, #116]	@ (8004430 <HAL_DMA_Abort_IT+0xf0>)
 80043bc:	6859      	ldr	r1, [r3, #4]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c2:	221c      	movs	r2, #28
 80043c4:	4013      	ands	r3, r2
 80043c6:	2201      	movs	r2, #1
 80043c8:	409a      	lsls	r2, r3
 80043ca:	4b19      	ldr	r3, [pc, #100]	@ (8004430 <HAL_DMA_Abort_IT+0xf0>)
 80043cc:	430a      	orrs	r2, r1
 80043ce:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80043d8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00c      	beq.n	80043fc <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043ec:	490f      	ldr	r1, [pc, #60]	@ (800442c <HAL_DMA_Abort_IT+0xec>)
 80043ee:	400a      	ands	r2, r1
 80043f0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80043fa:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2225      	movs	r2, #37	@ 0x25
 8004400:	2101      	movs	r1, #1
 8004402:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2224      	movs	r2, #36	@ 0x24
 8004408:	2100      	movs	r1, #0
 800440a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004410:	2b00      	cmp	r3, #0
 8004412:	d004      	beq.n	800441e <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	0010      	movs	r0, r2
 800441c:	4798      	blx	r3
    }
  }
  return status;
 800441e:	230f      	movs	r3, #15
 8004420:	18fb      	adds	r3, r7, r3
 8004422:	781b      	ldrb	r3, [r3, #0]
}
 8004424:	0018      	movs	r0, r3
 8004426:	46bd      	mov	sp, r7
 8004428:	b004      	add	sp, #16
 800442a:	bd80      	pop	{r7, pc}
 800442c:	fffffeff 	.word	0xfffffeff
 8004430:	40020000 	.word	0x40020000

08004434 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 800443c:	4b55      	ldr	r3, [pc, #340]	@ (8004594 <HAL_DMA_IRQHandler+0x160>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800444e:	221c      	movs	r2, #28
 8004450:	4013      	ands	r3, r2
 8004452:	2204      	movs	r2, #4
 8004454:	409a      	lsls	r2, r3
 8004456:	0013      	movs	r3, r2
 8004458:	68fa      	ldr	r2, [r7, #12]
 800445a:	4013      	ands	r3, r2
 800445c:	d027      	beq.n	80044ae <HAL_DMA_IRQHandler+0x7a>
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	2204      	movs	r2, #4
 8004462:	4013      	ands	r3, r2
 8004464:	d023      	beq.n	80044ae <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2220      	movs	r2, #32
 800446e:	4013      	ands	r3, r2
 8004470:	d107      	bne.n	8004482 <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2104      	movs	r1, #4
 800447e:	438a      	bics	r2, r1
 8004480:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 8004482:	4b44      	ldr	r3, [pc, #272]	@ (8004594 <HAL_DMA_IRQHandler+0x160>)
 8004484:	6859      	ldr	r1, [r3, #4]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800448a:	221c      	movs	r2, #28
 800448c:	4013      	ands	r3, r2
 800448e:	2204      	movs	r2, #4
 8004490:	409a      	lsls	r2, r3
 8004492:	4b40      	ldr	r3, [pc, #256]	@ (8004594 <HAL_DMA_IRQHandler+0x160>)
 8004494:	430a      	orrs	r2, r1
 8004496:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800449c:	2b00      	cmp	r3, #0
 800449e:	d100      	bne.n	80044a2 <HAL_DMA_IRQHandler+0x6e>
 80044a0:	e073      	b.n	800458a <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	0010      	movs	r0, r2
 80044aa:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80044ac:	e06d      	b.n	800458a <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b2:	221c      	movs	r2, #28
 80044b4:	4013      	ands	r3, r2
 80044b6:	2202      	movs	r2, #2
 80044b8:	409a      	lsls	r2, r3
 80044ba:	0013      	movs	r3, r2
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	4013      	ands	r3, r2
 80044c0:	d02e      	beq.n	8004520 <HAL_DMA_IRQHandler+0xec>
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	2202      	movs	r2, #2
 80044c6:	4013      	ands	r3, r2
 80044c8:	d02a      	beq.n	8004520 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2220      	movs	r2, #32
 80044d2:	4013      	ands	r3, r2
 80044d4:	d10b      	bne.n	80044ee <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	210a      	movs	r1, #10
 80044e2:	438a      	bics	r2, r1
 80044e4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2225      	movs	r2, #37	@ 0x25
 80044ea:	2101      	movs	r1, #1
 80044ec:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 80044ee:	4b29      	ldr	r3, [pc, #164]	@ (8004594 <HAL_DMA_IRQHandler+0x160>)
 80044f0:	6859      	ldr	r1, [r3, #4]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f6:	221c      	movs	r2, #28
 80044f8:	4013      	ands	r3, r2
 80044fa:	2202      	movs	r2, #2
 80044fc:	409a      	lsls	r2, r3
 80044fe:	4b25      	ldr	r3, [pc, #148]	@ (8004594 <HAL_DMA_IRQHandler+0x160>)
 8004500:	430a      	orrs	r2, r1
 8004502:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2224      	movs	r2, #36	@ 0x24
 8004508:	2100      	movs	r1, #0
 800450a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004510:	2b00      	cmp	r3, #0
 8004512:	d03a      	beq.n	800458a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	0010      	movs	r0, r2
 800451c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800451e:	e034      	b.n	800458a <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004524:	221c      	movs	r2, #28
 8004526:	4013      	ands	r3, r2
 8004528:	2208      	movs	r2, #8
 800452a:	409a      	lsls	r2, r3
 800452c:	0013      	movs	r3, r2
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	4013      	ands	r3, r2
 8004532:	d02b      	beq.n	800458c <HAL_DMA_IRQHandler+0x158>
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	2208      	movs	r2, #8
 8004538:	4013      	ands	r3, r2
 800453a:	d027      	beq.n	800458c <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	210e      	movs	r1, #14
 8004548:	438a      	bics	r2, r1
 800454a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 800454c:	4b11      	ldr	r3, [pc, #68]	@ (8004594 <HAL_DMA_IRQHandler+0x160>)
 800454e:	6859      	ldr	r1, [r3, #4]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004554:	221c      	movs	r2, #28
 8004556:	4013      	ands	r3, r2
 8004558:	2201      	movs	r2, #1
 800455a:	409a      	lsls	r2, r3
 800455c:	4b0d      	ldr	r3, [pc, #52]	@ (8004594 <HAL_DMA_IRQHandler+0x160>)
 800455e:	430a      	orrs	r2, r1
 8004560:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2201      	movs	r2, #1
 8004566:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2225      	movs	r2, #37	@ 0x25
 800456c:	2101      	movs	r1, #1
 800456e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2224      	movs	r2, #36	@ 0x24
 8004574:	2100      	movs	r1, #0
 8004576:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800457c:	2b00      	cmp	r3, #0
 800457e:	d005      	beq.n	800458c <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	0010      	movs	r0, r2
 8004588:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800458a:	46c0      	nop			@ (mov r8, r8)
 800458c:	46c0      	nop			@ (mov r8, r8)
}
 800458e:	46bd      	mov	sp, r7
 8004590:	b004      	add	sp, #16
 8004592:	bd80      	pop	{r7, pc}
 8004594:	40020000 	.word	0x40020000

08004598 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2225      	movs	r2, #37	@ 0x25
 80045a4:	5c9b      	ldrb	r3, [r3, r2]
 80045a6:	b2db      	uxtb	r3, r3
}
 80045a8:	0018      	movs	r0, r3
 80045aa:	46bd      	mov	sp, r7
 80045ac:	b002      	add	sp, #8
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <HAL_DMA_GetError>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 80045bc:	0018      	movs	r0, r3
 80045be:	46bd      	mov	sp, r7
 80045c0:	b002      	add	sp, #8
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	607a      	str	r2, [r7, #4]
 80045d0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80045da:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d004      	beq.n	80045ee <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045e8:	68fa      	ldr	r2, [r7, #12]
 80045ea:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80045ec:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 80045ee:	4b14      	ldr	r3, [pc, #80]	@ (8004640 <DMA_SetConfig+0x7c>)
 80045f0:	6859      	ldr	r1, [r3, #4]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f6:	221c      	movs	r2, #28
 80045f8:	4013      	ands	r3, r2
 80045fa:	2201      	movs	r2, #1
 80045fc:	409a      	lsls	r2, r3
 80045fe:	4b10      	ldr	r3, [pc, #64]	@ (8004640 <DMA_SetConfig+0x7c>)
 8004600:	430a      	orrs	r2, r1
 8004602:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	683a      	ldr	r2, [r7, #0]
 800460a:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	2b10      	cmp	r3, #16
 8004612:	d108      	bne.n	8004626 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68ba      	ldr	r2, [r7, #8]
 8004622:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004624:	e007      	b.n	8004636 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68ba      	ldr	r2, [r7, #8]
 800462c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	60da      	str	r2, [r3, #12]
}
 8004636:	46c0      	nop			@ (mov r8, r8)
 8004638:	46bd      	mov	sp, r7
 800463a:	b004      	add	sp, #16
 800463c:	bd80      	pop	{r7, pc}
 800463e:	46c0      	nop			@ (mov r8, r8)
 8004640:	40020000 	.word	0x40020000

08004644 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	001a      	movs	r2, r3
 8004652:	23ff      	movs	r3, #255	@ 0xff
 8004654:	4013      	ands	r3, r2
 8004656:	3b08      	subs	r3, #8
 8004658:	2114      	movs	r1, #20
 800465a:	0018      	movs	r0, r3
 800465c:	f7fb fd54 	bl	8000108 <__udivsi3>
 8004660:	0003      	movs	r3, r0
 8004662:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004668:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 800466a:	4a0a      	ldr	r2, [pc, #40]	@ (8004694 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 800466c:	4694      	mov	ip, r2
 800466e:	4463      	add	r3, ip
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	001a      	movs	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	645a      	str	r2, [r3, #68]	@ 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a07      	ldr	r2, [pc, #28]	@ (8004698 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800467c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	221c      	movs	r2, #28
 8004682:	4013      	ands	r3, r2
 8004684:	2201      	movs	r2, #1
 8004686:	409a      	lsls	r2, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 800468c:	46c0      	nop			@ (mov r8, r8)
 800468e:	46bd      	mov	sp, r7
 8004690:	b004      	add	sp, #16
 8004692:	bd80      	pop	{r7, pc}
 8004694:	10008200 	.word	0x10008200
 8004698:	40020880 	.word	0x40020880

0800469c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	22ff      	movs	r2, #255	@ 0xff
 80046aa:	4013      	ands	r3, r2
 80046ac:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	4a0a      	ldr	r2, [pc, #40]	@ (80046dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80046b2:	4694      	mov	ip, r2
 80046b4:	4463      	add	r3, ip
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	001a      	movs	r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	651a      	str	r2, [r3, #80]	@ 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a07      	ldr	r2, [pc, #28]	@ (80046e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80046c2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	3b01      	subs	r3, #1
 80046c8:	2203      	movs	r2, #3
 80046ca:	4013      	ands	r3, r2
 80046cc:	2201      	movs	r2, #1
 80046ce:	409a      	lsls	r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80046d4:	46c0      	nop			@ (mov r8, r8)
 80046d6:	46bd      	mov	sp, r7
 80046d8:	b004      	add	sp, #16
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	1000823f 	.word	0x1000823f
 80046e0:	40020940 	.word	0x40020940

080046e4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b086      	sub	sp, #24
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80046ee:	2300      	movs	r3, #0
 80046f0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80046f2:	e153      	b.n	800499c <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2101      	movs	r1, #1
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	4091      	lsls	r1, r2
 80046fe:	000a      	movs	r2, r1
 8004700:	4013      	ands	r3, r2
 8004702:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d100      	bne.n	800470c <HAL_GPIO_Init+0x28>
 800470a:	e144      	b.n	8004996 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	2b02      	cmp	r3, #2
 8004712:	d003      	beq.n	800471c <HAL_GPIO_Init+0x38>
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	2b12      	cmp	r3, #18
 800471a:	d125      	bne.n	8004768 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	08da      	lsrs	r2, r3, #3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	3208      	adds	r2, #8
 8004724:	0092      	lsls	r2, r2, #2
 8004726:	58d3      	ldr	r3, [r2, r3]
 8004728:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	2207      	movs	r2, #7
 800472e:	4013      	ands	r3, r2
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	220f      	movs	r2, #15
 8004734:	409a      	lsls	r2, r3
 8004736:	0013      	movs	r3, r2
 8004738:	43da      	mvns	r2, r3
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	4013      	ands	r3, r2
 800473e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	691b      	ldr	r3, [r3, #16]
 8004744:	220f      	movs	r2, #15
 8004746:	401a      	ands	r2, r3
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	2107      	movs	r1, #7
 800474c:	400b      	ands	r3, r1
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	409a      	lsls	r2, r3
 8004752:	0013      	movs	r3, r2
 8004754:	697a      	ldr	r2, [r7, #20]
 8004756:	4313      	orrs	r3, r2
 8004758:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	08da      	lsrs	r2, r3, #3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	3208      	adds	r2, #8
 8004762:	0092      	lsls	r2, r2, #2
 8004764:	6979      	ldr	r1, [r7, #20]
 8004766:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	005b      	lsls	r3, r3, #1
 8004772:	2203      	movs	r2, #3
 8004774:	409a      	lsls	r2, r3
 8004776:	0013      	movs	r3, r2
 8004778:	43da      	mvns	r2, r3
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	4013      	ands	r3, r2
 800477e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	2203      	movs	r2, #3
 8004786:	401a      	ands	r2, r3
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	005b      	lsls	r3, r3, #1
 800478c:	409a      	lsls	r2, r3
 800478e:	0013      	movs	r3, r2
 8004790:	697a      	ldr	r2, [r7, #20]
 8004792:	4313      	orrs	r3, r2
 8004794:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	697a      	ldr	r2, [r7, #20]
 800479a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d00b      	beq.n	80047bc <HAL_GPIO_Init+0xd8>
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d007      	beq.n	80047bc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80047b0:	2b11      	cmp	r3, #17
 80047b2:	d003      	beq.n	80047bc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	2b12      	cmp	r3, #18
 80047ba:	d130      	bne.n	800481e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	005b      	lsls	r3, r3, #1
 80047c6:	2203      	movs	r2, #3
 80047c8:	409a      	lsls	r2, r3
 80047ca:	0013      	movs	r3, r2
 80047cc:	43da      	mvns	r2, r3
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	4013      	ands	r3, r2
 80047d2:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	68da      	ldr	r2, [r3, #12]
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	005b      	lsls	r3, r3, #1
 80047dc:	409a      	lsls	r2, r3
 80047de:	0013      	movs	r3, r2
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	697a      	ldr	r2, [r7, #20]
 80047ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80047f2:	2201      	movs	r2, #1
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	409a      	lsls	r2, r3
 80047f8:	0013      	movs	r3, r2
 80047fa:	43da      	mvns	r2, r3
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	4013      	ands	r3, r2
 8004800:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	091b      	lsrs	r3, r3, #4
 8004808:	2201      	movs	r2, #1
 800480a:	401a      	ands	r2, r3
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	409a      	lsls	r2, r3
 8004810:	0013      	movs	r3, r2
 8004812:	697a      	ldr	r2, [r7, #20]
 8004814:	4313      	orrs	r3, r2
 8004816:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	697a      	ldr	r2, [r7, #20]
 800481c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	2b03      	cmp	r3, #3
 8004824:	d017      	beq.n	8004856 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	005b      	lsls	r3, r3, #1
 8004830:	2203      	movs	r2, #3
 8004832:	409a      	lsls	r2, r3
 8004834:	0013      	movs	r3, r2
 8004836:	43da      	mvns	r2, r3
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	4013      	ands	r3, r2
 800483c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	689a      	ldr	r2, [r3, #8]
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	005b      	lsls	r3, r3, #1
 8004846:	409a      	lsls	r2, r3
 8004848:	0013      	movs	r3, r2
 800484a:	697a      	ldr	r2, [r7, #20]
 800484c:	4313      	orrs	r3, r2
 800484e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	697a      	ldr	r2, [r7, #20]
 8004854:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	685a      	ldr	r2, [r3, #4]
 800485a:	2380      	movs	r3, #128	@ 0x80
 800485c:	055b      	lsls	r3, r3, #21
 800485e:	4013      	ands	r3, r2
 8004860:	d100      	bne.n	8004864 <HAL_GPIO_Init+0x180>
 8004862:	e098      	b.n	8004996 <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8004864:	4a53      	ldr	r2, [pc, #332]	@ (80049b4 <HAL_GPIO_Init+0x2d0>)
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	089b      	lsrs	r3, r3, #2
 800486a:	3318      	adds	r3, #24
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	589b      	ldr	r3, [r3, r2]
 8004870:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	2203      	movs	r2, #3
 8004876:	4013      	ands	r3, r2
 8004878:	00db      	lsls	r3, r3, #3
 800487a:	220f      	movs	r2, #15
 800487c:	409a      	lsls	r2, r3
 800487e:	0013      	movs	r3, r2
 8004880:	43da      	mvns	r2, r3
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	4013      	ands	r3, r2
 8004886:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	23a0      	movs	r3, #160	@ 0xa0
 800488c:	05db      	lsls	r3, r3, #23
 800488e:	429a      	cmp	r2, r3
 8004890:	d019      	beq.n	80048c6 <HAL_GPIO_Init+0x1e2>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a48      	ldr	r2, [pc, #288]	@ (80049b8 <HAL_GPIO_Init+0x2d4>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d013      	beq.n	80048c2 <HAL_GPIO_Init+0x1de>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a47      	ldr	r2, [pc, #284]	@ (80049bc <HAL_GPIO_Init+0x2d8>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d00d      	beq.n	80048be <HAL_GPIO_Init+0x1da>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a46      	ldr	r2, [pc, #280]	@ (80049c0 <HAL_GPIO_Init+0x2dc>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d007      	beq.n	80048ba <HAL_GPIO_Init+0x1d6>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a45      	ldr	r2, [pc, #276]	@ (80049c4 <HAL_GPIO_Init+0x2e0>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d101      	bne.n	80048b6 <HAL_GPIO_Init+0x1d2>
 80048b2:	2305      	movs	r3, #5
 80048b4:	e008      	b.n	80048c8 <HAL_GPIO_Init+0x1e4>
 80048b6:	2306      	movs	r3, #6
 80048b8:	e006      	b.n	80048c8 <HAL_GPIO_Init+0x1e4>
 80048ba:	2303      	movs	r3, #3
 80048bc:	e004      	b.n	80048c8 <HAL_GPIO_Init+0x1e4>
 80048be:	2302      	movs	r3, #2
 80048c0:	e002      	b.n	80048c8 <HAL_GPIO_Init+0x1e4>
 80048c2:	2301      	movs	r3, #1
 80048c4:	e000      	b.n	80048c8 <HAL_GPIO_Init+0x1e4>
 80048c6:	2300      	movs	r3, #0
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	2103      	movs	r1, #3
 80048cc:	400a      	ands	r2, r1
 80048ce:	00d2      	lsls	r2, r2, #3
 80048d0:	4093      	lsls	r3, r2
 80048d2:	697a      	ldr	r2, [r7, #20]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80048d8:	4936      	ldr	r1, [pc, #216]	@ (80049b4 <HAL_GPIO_Init+0x2d0>)
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	089b      	lsrs	r3, r3, #2
 80048de:	3318      	adds	r3, #24
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	697a      	ldr	r2, [r7, #20]
 80048e4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 80048e6:	4a33      	ldr	r2, [pc, #204]	@ (80049b4 <HAL_GPIO_Init+0x2d0>)
 80048e8:	2380      	movs	r3, #128	@ 0x80
 80048ea:	58d3      	ldr	r3, [r2, r3]
 80048ec:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	43da      	mvns	r2, r3
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	4013      	ands	r3, r2
 80048f6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	685a      	ldr	r2, [r3, #4]
 80048fc:	2380      	movs	r3, #128	@ 0x80
 80048fe:	025b      	lsls	r3, r3, #9
 8004900:	4013      	ands	r3, r2
 8004902:	d003      	beq.n	800490c <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8004904:	697a      	ldr	r2, [r7, #20]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	4313      	orrs	r3, r2
 800490a:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 800490c:	4929      	ldr	r1, [pc, #164]	@ (80049b4 <HAL_GPIO_Init+0x2d0>)
 800490e:	2280      	movs	r2, #128	@ 0x80
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8004914:	4a27      	ldr	r2, [pc, #156]	@ (80049b4 <HAL_GPIO_Init+0x2d0>)
 8004916:	2384      	movs	r3, #132	@ 0x84
 8004918:	58d3      	ldr	r3, [r2, r3]
 800491a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	43da      	mvns	r2, r3
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	4013      	ands	r3, r2
 8004924:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	685a      	ldr	r2, [r3, #4]
 800492a:	2380      	movs	r3, #128	@ 0x80
 800492c:	029b      	lsls	r3, r3, #10
 800492e:	4013      	ands	r3, r2
 8004930:	d003      	beq.n	800493a <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 8004932:	697a      	ldr	r2, [r7, #20]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	4313      	orrs	r3, r2
 8004938:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800493a:	491e      	ldr	r1, [pc, #120]	@ (80049b4 <HAL_GPIO_Init+0x2d0>)
 800493c:	2284      	movs	r2, #132	@ 0x84
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8004942:	4b1c      	ldr	r3, [pc, #112]	@ (80049b4 <HAL_GPIO_Init+0x2d0>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	43da      	mvns	r2, r3
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	4013      	ands	r3, r2
 8004950:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	685a      	ldr	r2, [r3, #4]
 8004956:	2380      	movs	r3, #128	@ 0x80
 8004958:	035b      	lsls	r3, r3, #13
 800495a:	4013      	ands	r3, r2
 800495c:	d003      	beq.n	8004966 <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 800495e:	697a      	ldr	r2, [r7, #20]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	4313      	orrs	r3, r2
 8004964:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8004966:	4b13      	ldr	r3, [pc, #76]	@ (80049b4 <HAL_GPIO_Init+0x2d0>)
 8004968:	697a      	ldr	r2, [r7, #20]
 800496a:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 800496c:	4b11      	ldr	r3, [pc, #68]	@ (80049b4 <HAL_GPIO_Init+0x2d0>)
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	43da      	mvns	r2, r3
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	4013      	ands	r3, r2
 800497a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	685a      	ldr	r2, [r3, #4]
 8004980:	2380      	movs	r3, #128	@ 0x80
 8004982:	039b      	lsls	r3, r3, #14
 8004984:	4013      	ands	r3, r2
 8004986:	d003      	beq.n	8004990 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8004988:	697a      	ldr	r2, [r7, #20]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	4313      	orrs	r3, r2
 800498e:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8004990:	4b08      	ldr	r3, [pc, #32]	@ (80049b4 <HAL_GPIO_Init+0x2d0>)
 8004992:	697a      	ldr	r2, [r7, #20]
 8004994:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	3301      	adds	r3, #1
 800499a:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	40da      	lsrs	r2, r3
 80049a4:	1e13      	subs	r3, r2, #0
 80049a6:	d000      	beq.n	80049aa <HAL_GPIO_Init+0x2c6>
 80049a8:	e6a4      	b.n	80046f4 <HAL_GPIO_Init+0x10>
  }
}
 80049aa:	46c0      	nop			@ (mov r8, r8)
 80049ac:	46c0      	nop			@ (mov r8, r8)
 80049ae:	46bd      	mov	sp, r7
 80049b0:	b006      	add	sp, #24
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	40021800 	.word	0x40021800
 80049b8:	50000400 	.word	0x50000400
 80049bc:	50000800 	.word	0x50000800
 80049c0:	50000c00 	.word	0x50000c00
 80049c4:	50001400 	.word	0x50001400

080049c8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b086      	sub	sp, #24
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80049d2:	2300      	movs	r3, #0
 80049d4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 80049d6:	e0ba      	b.n	8004b4e <HAL_GPIO_DeInit+0x186>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 80049d8:	2201      	movs	r2, #1
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	409a      	lsls	r2, r3
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	4013      	ands	r3, r2
 80049e2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0U)
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d100      	bne.n	80049ec <HAL_GPIO_DeInit+0x24>
 80049ea:	e0ad      	b.n	8004b48 <HAL_GPIO_DeInit+0x180>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = EXTI->EXTICR[position >> 2U];
 80049ec:	4a5d      	ldr	r2, [pc, #372]	@ (8004b64 <HAL_GPIO_DeInit+0x19c>)
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	089b      	lsrs	r3, r3, #2
 80049f2:	3318      	adds	r3, #24
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	589b      	ldr	r3, [r3, r2]
 80049f8:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	2203      	movs	r2, #3
 80049fe:	4013      	ands	r3, r2
 8004a00:	00db      	lsls	r3, r3, #3
 8004a02:	220f      	movs	r2, #15
 8004a04:	409a      	lsls	r2, r3
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	4013      	ands	r3, r2
 8004a0a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos)))
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	23a0      	movs	r3, #160	@ 0xa0
 8004a10:	05db      	lsls	r3, r3, #23
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d019      	beq.n	8004a4a <HAL_GPIO_DeInit+0x82>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a53      	ldr	r2, [pc, #332]	@ (8004b68 <HAL_GPIO_DeInit+0x1a0>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d013      	beq.n	8004a46 <HAL_GPIO_DeInit+0x7e>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a52      	ldr	r2, [pc, #328]	@ (8004b6c <HAL_GPIO_DeInit+0x1a4>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d00d      	beq.n	8004a42 <HAL_GPIO_DeInit+0x7a>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a51      	ldr	r2, [pc, #324]	@ (8004b70 <HAL_GPIO_DeInit+0x1a8>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d007      	beq.n	8004a3e <HAL_GPIO_DeInit+0x76>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a50      	ldr	r2, [pc, #320]	@ (8004b74 <HAL_GPIO_DeInit+0x1ac>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d101      	bne.n	8004a3a <HAL_GPIO_DeInit+0x72>
 8004a36:	2305      	movs	r3, #5
 8004a38:	e008      	b.n	8004a4c <HAL_GPIO_DeInit+0x84>
 8004a3a:	2306      	movs	r3, #6
 8004a3c:	e006      	b.n	8004a4c <HAL_GPIO_DeInit+0x84>
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e004      	b.n	8004a4c <HAL_GPIO_DeInit+0x84>
 8004a42:	2302      	movs	r3, #2
 8004a44:	e002      	b.n	8004a4c <HAL_GPIO_DeInit+0x84>
 8004a46:	2301      	movs	r3, #1
 8004a48:	e000      	b.n	8004a4c <HAL_GPIO_DeInit+0x84>
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	697a      	ldr	r2, [r7, #20]
 8004a4e:	2103      	movs	r1, #3
 8004a50:	400a      	ands	r2, r1
 8004a52:	00d2      	lsls	r2, r2, #3
 8004a54:	4093      	lsls	r3, r2
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d136      	bne.n	8004aca <HAL_GPIO_DeInit+0x102>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8004a5c:	4a41      	ldr	r2, [pc, #260]	@ (8004b64 <HAL_GPIO_DeInit+0x19c>)
 8004a5e:	2380      	movs	r3, #128	@ 0x80
 8004a60:	58d3      	ldr	r3, [r2, r3]
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	43d2      	mvns	r2, r2
 8004a66:	493f      	ldr	r1, [pc, #252]	@ (8004b64 <HAL_GPIO_DeInit+0x19c>)
 8004a68:	4013      	ands	r3, r2
 8004a6a:	2280      	movs	r2, #128	@ 0x80
 8004a6c:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 8004a6e:	4a3d      	ldr	r2, [pc, #244]	@ (8004b64 <HAL_GPIO_DeInit+0x19c>)
 8004a70:	2384      	movs	r3, #132	@ 0x84
 8004a72:	58d3      	ldr	r3, [r2, r3]
 8004a74:	693a      	ldr	r2, [r7, #16]
 8004a76:	43d2      	mvns	r2, r2
 8004a78:	493a      	ldr	r1, [pc, #232]	@ (8004b64 <HAL_GPIO_DeInit+0x19c>)
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	2284      	movs	r2, #132	@ 0x84
 8004a7e:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8004a80:	4b38      	ldr	r3, [pc, #224]	@ (8004b64 <HAL_GPIO_DeInit+0x19c>)
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	43d9      	mvns	r1, r3
 8004a88:	4b36      	ldr	r3, [pc, #216]	@ (8004b64 <HAL_GPIO_DeInit+0x19c>)
 8004a8a:	400a      	ands	r2, r1
 8004a8c:	601a      	str	r2, [r3, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8004a8e:	4b35      	ldr	r3, [pc, #212]	@ (8004b64 <HAL_GPIO_DeInit+0x19c>)
 8004a90:	685a      	ldr	r2, [r3, #4]
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	43d9      	mvns	r1, r3
 8004a96:	4b33      	ldr	r3, [pc, #204]	@ (8004b64 <HAL_GPIO_DeInit+0x19c>)
 8004a98:	400a      	ands	r2, r1
 8004a9a:	605a      	str	r2, [r3, #4]

        tmp = (0x0FUL) << (8U * (position & 0x03U));
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	2203      	movs	r2, #3
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	00db      	lsls	r3, r3, #3
 8004aa4:	220f      	movs	r2, #15
 8004aa6:	409a      	lsls	r2, r3
 8004aa8:	0013      	movs	r3, r2
 8004aaa:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2U] &= ~tmp;
 8004aac:	4a2d      	ldr	r2, [pc, #180]	@ (8004b64 <HAL_GPIO_DeInit+0x19c>)
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	089b      	lsrs	r3, r3, #2
 8004ab2:	3318      	adds	r3, #24
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	589a      	ldr	r2, [r3, r2]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	43d9      	mvns	r1, r3
 8004abc:	4829      	ldr	r0, [pc, #164]	@ (8004b64 <HAL_GPIO_DeInit+0x19c>)
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	089b      	lsrs	r3, r3, #2
 8004ac2:	400a      	ands	r2, r1
 8004ac4:	3318      	adds	r3, #24
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	005b      	lsls	r3, r3, #1
 8004ad2:	2103      	movs	r1, #3
 8004ad4:	4099      	lsls	r1, r3
 8004ad6:	000b      	movs	r3, r1
 8004ad8:	431a      	orrs	r2, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	08da      	lsrs	r2, r3, #3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	3208      	adds	r2, #8
 8004ae6:	0092      	lsls	r2, r2, #2
 8004ae8:	58d3      	ldr	r3, [r2, r3]
 8004aea:	697a      	ldr	r2, [r7, #20]
 8004aec:	2107      	movs	r1, #7
 8004aee:	400a      	ands	r2, r1
 8004af0:	0092      	lsls	r2, r2, #2
 8004af2:	210f      	movs	r1, #15
 8004af4:	4091      	lsls	r1, r2
 8004af6:	000a      	movs	r2, r1
 8004af8:	43d1      	mvns	r1, r2
 8004afa:	697a      	ldr	r2, [r7, #20]
 8004afc:	08d2      	lsrs	r2, r2, #3
 8004afe:	4019      	ands	r1, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	3208      	adds	r2, #8
 8004b04:	0092      	lsls	r2, r2, #2
 8004b06:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	697a      	ldr	r2, [r7, #20]
 8004b0e:	0052      	lsls	r2, r2, #1
 8004b10:	2103      	movs	r1, #3
 8004b12:	4091      	lsls	r1, r2
 8004b14:	000a      	movs	r2, r1
 8004b16:	43d2      	mvns	r2, r2
 8004b18:	401a      	ands	r2, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	2101      	movs	r1, #1
 8004b24:	697a      	ldr	r2, [r7, #20]
 8004b26:	4091      	lsls	r1, r2
 8004b28:	000a      	movs	r2, r1
 8004b2a:	43d2      	mvns	r2, r2
 8004b2c:	401a      	ands	r2, r3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	0052      	lsls	r2, r2, #1
 8004b3a:	2103      	movs	r1, #3
 8004b3c:	4091      	lsls	r1, r2
 8004b3e:	000a      	movs	r2, r1
 8004b40:	43d2      	mvns	r2, r2
 8004b42:	401a      	ands	r2, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	60da      	str	r2, [r3, #12]
    }

    position++;
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 8004b4e:	683a      	ldr	r2, [r7, #0]
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	40da      	lsrs	r2, r3
 8004b54:	1e13      	subs	r3, r2, #0
 8004b56:	d000      	beq.n	8004b5a <HAL_GPIO_DeInit+0x192>
 8004b58:	e73e      	b.n	80049d8 <HAL_GPIO_DeInit+0x10>
  }
}
 8004b5a:	46c0      	nop			@ (mov r8, r8)
 8004b5c:	46c0      	nop			@ (mov r8, r8)
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	b006      	add	sp, #24
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	40021800 	.word	0x40021800
 8004b68:	50000400 	.word	0x50000400
 8004b6c:	50000800 	.word	0x50000800
 8004b70:	50000c00 	.word	0x50000c00
 8004b74:	50001400 	.word	0x50001400

08004b78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	000a      	movs	r2, r1
 8004b82:	1cbb      	adds	r3, r7, #2
 8004b84:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	1cba      	adds	r2, r7, #2
 8004b8c:	8812      	ldrh	r2, [r2, #0]
 8004b8e:	4013      	ands	r3, r2
 8004b90:	d004      	beq.n	8004b9c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004b92:	230f      	movs	r3, #15
 8004b94:	18fb      	adds	r3, r7, r3
 8004b96:	2201      	movs	r2, #1
 8004b98:	701a      	strb	r2, [r3, #0]
 8004b9a:	e003      	b.n	8004ba4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004b9c:	230f      	movs	r3, #15
 8004b9e:	18fb      	adds	r3, r7, r3
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004ba4:	230f      	movs	r3, #15
 8004ba6:	18fb      	adds	r3, r7, r3
 8004ba8:	781b      	ldrb	r3, [r3, #0]
}
 8004baa:	0018      	movs	r0, r3
 8004bac:	46bd      	mov	sp, r7
 8004bae:	b004      	add	sp, #16
 8004bb0:	bd80      	pop	{r7, pc}

08004bb2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bb2:	b580      	push	{r7, lr}
 8004bb4:	b082      	sub	sp, #8
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
 8004bba:	0008      	movs	r0, r1
 8004bbc:	0011      	movs	r1, r2
 8004bbe:	1cbb      	adds	r3, r7, #2
 8004bc0:	1c02      	adds	r2, r0, #0
 8004bc2:	801a      	strh	r2, [r3, #0]
 8004bc4:	1c7b      	adds	r3, r7, #1
 8004bc6:	1c0a      	adds	r2, r1, #0
 8004bc8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004bca:	1c7b      	adds	r3, r7, #1
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d004      	beq.n	8004bdc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004bd2:	1cbb      	adds	r3, r7, #2
 8004bd4:	881a      	ldrh	r2, [r3, #0]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004bda:	e003      	b.n	8004be4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004bdc:	1cbb      	adds	r3, r7, #2
 8004bde:	881a      	ldrh	r2, [r3, #0]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004be4:	46c0      	nop			@ (mov r8, r8)
 8004be6:	46bd      	mov	sp, r7
 8004be8:	b002      	add	sp, #8
 8004bea:	bd80      	pop	{r7, pc}

08004bec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	0002      	movs	r2, r0
 8004bf4:	1dbb      	adds	r3, r7, #6
 8004bf6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8004bf8:	4b10      	ldr	r3, [pc, #64]	@ (8004c3c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	1dba      	adds	r2, r7, #6
 8004bfe:	8812      	ldrh	r2, [r2, #0]
 8004c00:	4013      	ands	r3, r2
 8004c02:	d008      	beq.n	8004c16 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8004c04:	4b0d      	ldr	r3, [pc, #52]	@ (8004c3c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004c06:	1dba      	adds	r2, r7, #6
 8004c08:	8812      	ldrh	r2, [r2, #0]
 8004c0a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8004c0c:	1dbb      	adds	r3, r7, #6
 8004c0e:	881b      	ldrh	r3, [r3, #0]
 8004c10:	0018      	movs	r0, r3
 8004c12:	f7fc fc97 	bl	8001544 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8004c16:	4b09      	ldr	r3, [pc, #36]	@ (8004c3c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	1dba      	adds	r2, r7, #6
 8004c1c:	8812      	ldrh	r2, [r2, #0]
 8004c1e:	4013      	ands	r3, r2
 8004c20:	d008      	beq.n	8004c34 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8004c22:	4b06      	ldr	r3, [pc, #24]	@ (8004c3c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004c24:	1dba      	adds	r2, r7, #6
 8004c26:	8812      	ldrh	r2, [r2, #0]
 8004c28:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8004c2a:	1dbb      	adds	r3, r7, #6
 8004c2c:	881b      	ldrh	r3, [r3, #0]
 8004c2e:	0018      	movs	r0, r3
 8004c30:	f000 f806 	bl	8004c40 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8004c34:	46c0      	nop			@ (mov r8, r8)
 8004c36:	46bd      	mov	sp, r7
 8004c38:	b002      	add	sp, #8
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	40021800 	.word	0x40021800

08004c40 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	0002      	movs	r2, r0
 8004c48:	1dbb      	adds	r3, r7, #6
 8004c4a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8004c4c:	46c0      	nop			@ (mov r8, r8)
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	b002      	add	sp, #8
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d101      	bne.n	8004c66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e08f      	b.n	8004d86 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2241      	movs	r2, #65	@ 0x41
 8004c6a:	5c9b      	ldrb	r3, [r3, r2]
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d107      	bne.n	8004c82 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2240      	movs	r2, #64	@ 0x40
 8004c76:	2100      	movs	r1, #0
 8004c78:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	0018      	movs	r0, r3
 8004c7e:	f7fe fadb 	bl	8003238 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2241      	movs	r2, #65	@ 0x41
 8004c86:	2124      	movs	r1, #36	@ 0x24
 8004c88:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2101      	movs	r1, #1
 8004c96:	438a      	bics	r2, r1
 8004c98:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	685a      	ldr	r2, [r3, #4]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	493b      	ldr	r1, [pc, #236]	@ (8004d90 <HAL_I2C_Init+0x13c>)
 8004ca4:	400a      	ands	r2, r1
 8004ca6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	689a      	ldr	r2, [r3, #8]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4938      	ldr	r1, [pc, #224]	@ (8004d94 <HAL_I2C_Init+0x140>)
 8004cb4:	400a      	ands	r2, r1
 8004cb6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d108      	bne.n	8004cd2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	689a      	ldr	r2, [r3, #8]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2180      	movs	r1, #128	@ 0x80
 8004cca:	0209      	lsls	r1, r1, #8
 8004ccc:	430a      	orrs	r2, r1
 8004cce:	609a      	str	r2, [r3, #8]
 8004cd0:	e007      	b.n	8004ce2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	689a      	ldr	r2, [r3, #8]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2184      	movs	r1, #132	@ 0x84
 8004cdc:	0209      	lsls	r1, r1, #8
 8004cde:	430a      	orrs	r2, r1
 8004ce0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d109      	bne.n	8004cfe <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	685a      	ldr	r2, [r3, #4]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2180      	movs	r1, #128	@ 0x80
 8004cf6:	0109      	lsls	r1, r1, #4
 8004cf8:	430a      	orrs	r2, r1
 8004cfa:	605a      	str	r2, [r3, #4]
 8004cfc:	e007      	b.n	8004d0e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	685a      	ldr	r2, [r3, #4]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4923      	ldr	r1, [pc, #140]	@ (8004d98 <HAL_I2C_Init+0x144>)
 8004d0a:	400a      	ands	r2, r1
 8004d0c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	685a      	ldr	r2, [r3, #4]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4920      	ldr	r1, [pc, #128]	@ (8004d9c <HAL_I2C_Init+0x148>)
 8004d1a:	430a      	orrs	r2, r1
 8004d1c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68da      	ldr	r2, [r3, #12]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	491a      	ldr	r1, [pc, #104]	@ (8004d94 <HAL_I2C_Init+0x140>)
 8004d2a:	400a      	ands	r2, r1
 8004d2c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	691a      	ldr	r2, [r3, #16]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	431a      	orrs	r2, r3
 8004d38:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	699b      	ldr	r3, [r3, #24]
 8004d3e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	430a      	orrs	r2, r1
 8004d46:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	69d9      	ldr	r1, [r3, #28]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a1a      	ldr	r2, [r3, #32]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	430a      	orrs	r2, r1
 8004d56:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2101      	movs	r1, #1
 8004d64:	430a      	orrs	r2, r1
 8004d66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2241      	movs	r2, #65	@ 0x41
 8004d72:	2120      	movs	r1, #32
 8004d74:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2242      	movs	r2, #66	@ 0x42
 8004d80:	2100      	movs	r1, #0
 8004d82:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	0018      	movs	r0, r3
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	b002      	add	sp, #8
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	46c0      	nop			@ (mov r8, r8)
 8004d90:	f0ffffff 	.word	0xf0ffffff
 8004d94:	ffff7fff 	.word	0xffff7fff
 8004d98:	fffff7ff 	.word	0xfffff7ff
 8004d9c:	02008000 	.word	0x02008000

08004da0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b082      	sub	sp, #8
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d101      	bne.n	8004db2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e022      	b.n	8004df8 <HAL_I2C_DeInit+0x58>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2241      	movs	r2, #65	@ 0x41
 8004db6:	2124      	movs	r1, #36	@ 0x24
 8004db8:	5499      	strb	r1, [r3, r2]

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2101      	movs	r1, #1
 8004dc6:	438a      	bics	r2, r1
 8004dc8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	0018      	movs	r0, r3
 8004dce:	f7fe faf9 	bl	80033c4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2241      	movs	r2, #65	@ 0x41
 8004ddc:	2100      	movs	r1, #0
 8004dde:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2242      	movs	r2, #66	@ 0x42
 8004dea:	2100      	movs	r1, #0
 8004dec:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2240      	movs	r2, #64	@ 0x40
 8004df2:	2100      	movs	r1, #0
 8004df4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004df6:	2300      	movs	r3, #0
}
 8004df8:	0018      	movs	r0, r3
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	b002      	add	sp, #8
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8004e00:	b5b0      	push	{r4, r5, r7, lr}
 8004e02:	b08a      	sub	sp, #40	@ 0x28
 8004e04:	af02      	add	r7, sp, #8
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	0008      	movs	r0, r1
 8004e0a:	607a      	str	r2, [r7, #4]
 8004e0c:	0019      	movs	r1, r3
 8004e0e:	230a      	movs	r3, #10
 8004e10:	18fb      	adds	r3, r7, r3
 8004e12:	1c02      	adds	r2, r0, #0
 8004e14:	801a      	strh	r2, [r3, #0]
 8004e16:	2308      	movs	r3, #8
 8004e18:	18fb      	adds	r3, r7, r3
 8004e1a:	1c0a      	adds	r2, r1, #0
 8004e1c:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2241      	movs	r2, #65	@ 0x41
 8004e26:	5c9b      	ldrb	r3, [r3, r2]
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	2b20      	cmp	r3, #32
 8004e2c:	d000      	beq.n	8004e30 <HAL_I2C_Master_Transmit_DMA+0x30>
 8004e2e:	e0ff      	b.n	8005030 <HAL_I2C_Master_Transmit_DMA+0x230>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	699a      	ldr	r2, [r3, #24]
 8004e36:	2380      	movs	r3, #128	@ 0x80
 8004e38:	021b      	lsls	r3, r3, #8
 8004e3a:	401a      	ands	r2, r3
 8004e3c:	2380      	movs	r3, #128	@ 0x80
 8004e3e:	021b      	lsls	r3, r3, #8
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d101      	bne.n	8004e48 <HAL_I2C_Master_Transmit_DMA+0x48>
    {
      return HAL_BUSY;
 8004e44:	2302      	movs	r3, #2
 8004e46:	e0f4      	b.n	8005032 <HAL_I2C_Master_Transmit_DMA+0x232>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2240      	movs	r2, #64	@ 0x40
 8004e4c:	5c9b      	ldrb	r3, [r3, r2]
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d101      	bne.n	8004e56 <HAL_I2C_Master_Transmit_DMA+0x56>
 8004e52:	2302      	movs	r3, #2
 8004e54:	e0ed      	b.n	8005032 <HAL_I2C_Master_Transmit_DMA+0x232>
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2240      	movs	r2, #64	@ 0x40
 8004e5a:	2101      	movs	r1, #1
 8004e5c:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2241      	movs	r2, #65	@ 0x41
 8004e62:	2121      	movs	r1, #33	@ 0x21
 8004e64:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2242      	movs	r2, #66	@ 0x42
 8004e6a:	2110      	movs	r1, #16
 8004e6c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2200      	movs	r2, #0
 8004e72:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2208      	movs	r2, #8
 8004e7e:	18ba      	adds	r2, r7, r2
 8004e80:	8812      	ldrh	r2, [r2, #0]
 8004e82:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	4a6d      	ldr	r2, [pc, #436]	@ (800503c <HAL_I2C_Master_Transmit_DMA+0x23c>)
 8004e88:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	4a6c      	ldr	r2, [pc, #432]	@ (8005040 <HAL_I2C_Master_Transmit_DMA+0x240>)
 8004e8e:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	2bff      	cmp	r3, #255	@ 0xff
 8004e98:	d906      	bls.n	8004ea8 <HAL_I2C_Master_Transmit_DMA+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	22ff      	movs	r2, #255	@ 0xff
 8004e9e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004ea0:	2380      	movs	r3, #128	@ 0x80
 8004ea2:	045b      	lsls	r3, r3, #17
 8004ea4:	61fb      	str	r3, [r7, #28]
 8004ea6:	e007      	b.n	8004eb8 <HAL_I2C_Master_Transmit_DMA+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004eac:	b29a      	uxth	r2, r3
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004eb2:	2380      	movs	r3, #128	@ 0x80
 8004eb4:	049b      	lsls	r3, r3, #18
 8004eb6:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d01a      	beq.n	8004ef6 <HAL_I2C_Master_Transmit_DMA+0xf6>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec4:	781a      	ldrb	r2, [r3, #0]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed0:	1c5a      	adds	r2, r3, #1
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004eda:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	b29a      	uxth	r2, r3
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004eee:	3b01      	subs	r3, #1
 8004ef0:	b29a      	uxth	r2, r3
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d100      	bne.n	8004f00 <HAL_I2C_Master_Transmit_DMA+0x100>
 8004efe:	e07c      	b.n	8004ffa <HAL_I2C_Master_Transmit_DMA+0x1fa>
    {
      if (hi2c->hdmatx != NULL)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d025      	beq.n	8004f54 <HAL_I2C_Master_Transmit_DMA+0x154>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f0c:	4a4d      	ldr	r2, [pc, #308]	@ (8005044 <HAL_I2C_Master_Transmit_DMA+0x244>)
 8004f0e:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f14:	4a4c      	ldr	r2, [pc, #304]	@ (8005048 <HAL_I2C_Master_Transmit_DMA+0x248>)
 8004f16:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f24:	2200      	movs	r2, #0
 8004f26:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f30:	0019      	movs	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8004f38:	001a      	movs	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8004f3e:	2517      	movs	r5, #23
 8004f40:	197c      	adds	r4, r7, r5
 8004f42:	f7ff f913 	bl	800416c <HAL_DMA_Start_IT>
 8004f46:	0003      	movs	r3, r0
 8004f48:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8004f4a:	197b      	adds	r3, r7, r5
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d13f      	bne.n	8004fd2 <HAL_I2C_Master_Transmit_DMA+0x1d2>
 8004f52:	e013      	b.n	8004f7c <HAL_I2C_Master_Transmit_DMA+0x17c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2241      	movs	r2, #65	@ 0x41
 8004f58:	2120      	movs	r1, #32
 8004f5a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2242      	movs	r2, #66	@ 0x42
 8004f60:	2100      	movs	r1, #0
 8004f62:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f68:	2280      	movs	r2, #128	@ 0x80
 8004f6a:	431a      	orrs	r2, r3
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2240      	movs	r2, #64	@ 0x40
 8004f74:	2100      	movs	r1, #0
 8004f76:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e05a      	b.n	8005032 <HAL_I2C_Master_Transmit_DMA+0x232>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	3301      	adds	r3, #1
 8004f84:	b2da      	uxtb	r2, r3
 8004f86:	69fc      	ldr	r4, [r7, #28]
 8004f88:	230a      	movs	r3, #10
 8004f8a:	18fb      	adds	r3, r7, r3
 8004f8c:	8819      	ldrh	r1, [r3, #0]
 8004f8e:	68f8      	ldr	r0, [r7, #12]
 8004f90:	4b2e      	ldr	r3, [pc, #184]	@ (800504c <HAL_I2C_Master_Transmit_DMA+0x24c>)
 8004f92:	9300      	str	r3, [sp, #0]
 8004f94:	0023      	movs	r3, r4
 8004f96:	f001 fe69 	bl	8006c6c <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f9e:	b29a      	uxth	r2, r3
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	b29a      	uxth	r2, r3
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2240      	movs	r2, #64	@ 0x40
 8004fb0:	2100      	movs	r1, #0
 8004fb2:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2110      	movs	r1, #16
 8004fb8:	0018      	movs	r0, r3
 8004fba:	f001 fe91 	bl	8006ce0 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2180      	movs	r1, #128	@ 0x80
 8004fca:	01c9      	lsls	r1, r1, #7
 8004fcc:	430a      	orrs	r2, r1
 8004fce:	601a      	str	r2, [r3, #0]
 8004fd0:	e02c      	b.n	800502c <HAL_I2C_Master_Transmit_DMA+0x22c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2241      	movs	r2, #65	@ 0x41
 8004fd6:	2120      	movs	r1, #32
 8004fd8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2242      	movs	r2, #66	@ 0x42
 8004fde:	2100      	movs	r1, #0
 8004fe0:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fe6:	2210      	movs	r2, #16
 8004fe8:	431a      	orrs	r2, r3
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2240      	movs	r2, #64	@ 0x40
 8004ff2:	2100      	movs	r1, #0
 8004ff4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e01b      	b.n	8005032 <HAL_I2C_Master_Transmit_DMA+0x232>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	4a14      	ldr	r2, [pc, #80]	@ (8005050 <HAL_I2C_Master_Transmit_DMA+0x250>)
 8004ffe:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	b2da      	uxtb	r2, r3
 8005004:	2380      	movs	r3, #128	@ 0x80
 8005006:	049c      	lsls	r4, r3, #18
 8005008:	230a      	movs	r3, #10
 800500a:	18fb      	adds	r3, r7, r3
 800500c:	8819      	ldrh	r1, [r3, #0]
 800500e:	68f8      	ldr	r0, [r7, #12]
 8005010:	4b0e      	ldr	r3, [pc, #56]	@ (800504c <HAL_I2C_Master_Transmit_DMA+0x24c>)
 8005012:	9300      	str	r3, [sp, #0]
 8005014:	0023      	movs	r3, r4
 8005016:	f001 fe29 	bl	8006c6c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2240      	movs	r2, #64	@ 0x40
 800501e:	2100      	movs	r1, #0
 8005020:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2101      	movs	r1, #1
 8005026:	0018      	movs	r0, r3
 8005028:	f001 fe5a 	bl	8006ce0 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800502c:	2300      	movs	r3, #0
 800502e:	e000      	b.n	8005032 <HAL_I2C_Master_Transmit_DMA+0x232>
  }
  else
  {
    return HAL_BUSY;
 8005030:	2302      	movs	r3, #2
  }
}
 8005032:	0018      	movs	r0, r3
 8005034:	46bd      	mov	sp, r7
 8005036:	b008      	add	sp, #32
 8005038:	bdb0      	pop	{r4, r5, r7, pc}
 800503a:	46c0      	nop			@ (mov r8, r8)
 800503c:	ffff0000 	.word	0xffff0000
 8005040:	08005a11 	.word	0x08005a11
 8005044:	08006abd 	.word	0x08006abd
 8005048:	08006bfd 	.word	0x08006bfd
 800504c:	80002000 	.word	0x80002000
 8005050:	080055a9 	.word	0x080055a9

08005054 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8005054:	b5b0      	push	{r4, r5, r7, lr}
 8005056:	b088      	sub	sp, #32
 8005058:	af02      	add	r7, sp, #8
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	0008      	movs	r0, r1
 800505e:	607a      	str	r2, [r7, #4]
 8005060:	0019      	movs	r1, r3
 8005062:	230a      	movs	r3, #10
 8005064:	18fb      	adds	r3, r7, r3
 8005066:	1c02      	adds	r2, r0, #0
 8005068:	801a      	strh	r2, [r3, #0]
 800506a:	2308      	movs	r3, #8
 800506c:	18fb      	adds	r3, r7, r3
 800506e:	1c0a      	adds	r2, r1, #0
 8005070:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2241      	movs	r2, #65	@ 0x41
 8005076:	5c9b      	ldrb	r3, [r3, r2]
 8005078:	b2db      	uxtb	r3, r3
 800507a:	2b20      	cmp	r3, #32
 800507c:	d000      	beq.n	8005080 <HAL_I2C_Master_Receive_DMA+0x2c>
 800507e:	e0dd      	b.n	800523c <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	699a      	ldr	r2, [r3, #24]
 8005086:	2380      	movs	r3, #128	@ 0x80
 8005088:	021b      	lsls	r3, r3, #8
 800508a:	401a      	ands	r2, r3
 800508c:	2380      	movs	r3, #128	@ 0x80
 800508e:	021b      	lsls	r3, r3, #8
 8005090:	429a      	cmp	r2, r3
 8005092:	d101      	bne.n	8005098 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 8005094:	2302      	movs	r3, #2
 8005096:	e0d2      	b.n	800523e <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2240      	movs	r2, #64	@ 0x40
 800509c:	5c9b      	ldrb	r3, [r3, r2]
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d101      	bne.n	80050a6 <HAL_I2C_Master_Receive_DMA+0x52>
 80050a2:	2302      	movs	r3, #2
 80050a4:	e0cb      	b.n	800523e <HAL_I2C_Master_Receive_DMA+0x1ea>
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2240      	movs	r2, #64	@ 0x40
 80050aa:	2101      	movs	r1, #1
 80050ac:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2241      	movs	r2, #65	@ 0x41
 80050b2:	2122      	movs	r1, #34	@ 0x22
 80050b4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2242      	movs	r2, #66	@ 0x42
 80050ba:	2110      	movs	r1, #16
 80050bc:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2200      	movs	r2, #0
 80050c2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2208      	movs	r2, #8
 80050ce:	18ba      	adds	r2, r7, r2
 80050d0:	8812      	ldrh	r2, [r2, #0]
 80050d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	4a5c      	ldr	r2, [pc, #368]	@ (8005248 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 80050d8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	4a5b      	ldr	r2, [pc, #364]	@ (800524c <HAL_I2C_Master_Receive_DMA+0x1f8>)
 80050de:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	2bff      	cmp	r3, #255	@ 0xff
 80050e8:	d906      	bls.n	80050f8 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	22ff      	movs	r2, #255	@ 0xff
 80050ee:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80050f0:	2380      	movs	r3, #128	@ 0x80
 80050f2:	045b      	lsls	r3, r3, #17
 80050f4:	617b      	str	r3, [r7, #20]
 80050f6:	e007      	b.n	8005108 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050fc:	b29a      	uxth	r2, r3
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005102:	2380      	movs	r3, #128	@ 0x80
 8005104:	049b      	lsls	r3, r3, #18
 8005106:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800510c:	2b00      	cmp	r3, #0
 800510e:	d100      	bne.n	8005112 <HAL_I2C_Master_Receive_DMA+0xbe>
 8005110:	e078      	b.n	8005204 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005116:	2b00      	cmp	r3, #0
 8005118:	d023      	beq.n	8005162 <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800511e:	4a4c      	ldr	r2, [pc, #304]	@ (8005250 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 8005120:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005126:	4a4b      	ldr	r2, [pc, #300]	@ (8005254 <HAL_I2C_Master_Receive_DMA+0x200>)
 8005128:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800512e:	2200      	movs	r2, #0
 8005130:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005136:	2200      	movs	r2, #0
 8005138:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	3324      	adds	r3, #36	@ 0x24
 8005144:	0019      	movs	r1, r3
 8005146:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800514c:	2513      	movs	r5, #19
 800514e:	197c      	adds	r4, r7, r5
 8005150:	f7ff f80c 	bl	800416c <HAL_DMA_Start_IT>
 8005154:	0003      	movs	r3, r0
 8005156:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005158:	197b      	adds	r3, r7, r5
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d13d      	bne.n	80051dc <HAL_I2C_Master_Receive_DMA+0x188>
 8005160:	e013      	b.n	800518a <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2241      	movs	r2, #65	@ 0x41
 8005166:	2120      	movs	r1, #32
 8005168:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2242      	movs	r2, #66	@ 0x42
 800516e:	2100      	movs	r1, #0
 8005170:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005176:	2280      	movs	r2, #128	@ 0x80
 8005178:	431a      	orrs	r2, r3
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2240      	movs	r2, #64	@ 0x40
 8005182:	2100      	movs	r1, #0
 8005184:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e059      	b.n	800523e <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800518e:	b2da      	uxtb	r2, r3
 8005190:	697c      	ldr	r4, [r7, #20]
 8005192:	230a      	movs	r3, #10
 8005194:	18fb      	adds	r3, r7, r3
 8005196:	8819      	ldrh	r1, [r3, #0]
 8005198:	68f8      	ldr	r0, [r7, #12]
 800519a:	4b2f      	ldr	r3, [pc, #188]	@ (8005258 <HAL_I2C_Master_Receive_DMA+0x204>)
 800519c:	9300      	str	r3, [sp, #0]
 800519e:	0023      	movs	r3, r4
 80051a0:	f001 fd64 	bl	8006c6c <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051a8:	b29a      	uxth	r2, r3
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	b29a      	uxth	r2, r3
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2240      	movs	r2, #64	@ 0x40
 80051ba:	2100      	movs	r1, #0
 80051bc:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2110      	movs	r1, #16
 80051c2:	0018      	movs	r0, r3
 80051c4:	f001 fd8c 	bl	8006ce0 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2180      	movs	r1, #128	@ 0x80
 80051d4:	0209      	lsls	r1, r1, #8
 80051d6:	430a      	orrs	r2, r1
 80051d8:	601a      	str	r2, [r3, #0]
 80051da:	e02d      	b.n	8005238 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2241      	movs	r2, #65	@ 0x41
 80051e0:	2120      	movs	r1, #32
 80051e2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2242      	movs	r2, #66	@ 0x42
 80051e8:	2100      	movs	r1, #0
 80051ea:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051f0:	2210      	movs	r2, #16
 80051f2:	431a      	orrs	r2, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2240      	movs	r2, #64	@ 0x40
 80051fc:	2100      	movs	r1, #0
 80051fe:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e01c      	b.n	800523e <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	4a15      	ldr	r2, [pc, #84]	@ (800525c <HAL_I2C_Master_Receive_DMA+0x208>)
 8005208:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800520e:	b2da      	uxtb	r2, r3
 8005210:	2380      	movs	r3, #128	@ 0x80
 8005212:	049c      	lsls	r4, r3, #18
 8005214:	230a      	movs	r3, #10
 8005216:	18fb      	adds	r3, r7, r3
 8005218:	8819      	ldrh	r1, [r3, #0]
 800521a:	68f8      	ldr	r0, [r7, #12]
 800521c:	4b0e      	ldr	r3, [pc, #56]	@ (8005258 <HAL_I2C_Master_Receive_DMA+0x204>)
 800521e:	9300      	str	r3, [sp, #0]
 8005220:	0023      	movs	r3, r4
 8005222:	f001 fd23 	bl	8006c6c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2240      	movs	r2, #64	@ 0x40
 800522a:	2100      	movs	r1, #0
 800522c:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2102      	movs	r1, #2
 8005232:	0018      	movs	r0, r3
 8005234:	f001 fd54 	bl	8006ce0 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8005238:	2300      	movs	r3, #0
 800523a:	e000      	b.n	800523e <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800523c:	2302      	movs	r3, #2
  }
}
 800523e:	0018      	movs	r0, r3
 8005240:	46bd      	mov	sp, r7
 8005242:	b006      	add	sp, #24
 8005244:	bdb0      	pop	{r4, r5, r7, pc}
 8005246:	46c0      	nop			@ (mov r8, r8)
 8005248:	ffff0000 	.word	0xffff0000
 800524c:	08005a11 	.word	0x08005a11
 8005250:	08006b5d 	.word	0x08006b5d
 8005254:	08006bfd 	.word	0x08006bfd
 8005258:	80002400 	.word	0x80002400
 800525c:	080055a9 	.word	0x080055a9

08005260 <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8005260:	b5b0      	push	{r4, r5, r7, lr}
 8005262:	b088      	sub	sp, #32
 8005264:	af02      	add	r7, sp, #8
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	000c      	movs	r4, r1
 800526a:	0010      	movs	r0, r2
 800526c:	0019      	movs	r1, r3
 800526e:	230a      	movs	r3, #10
 8005270:	18fb      	adds	r3, r7, r3
 8005272:	1c22      	adds	r2, r4, #0
 8005274:	801a      	strh	r2, [r3, #0]
 8005276:	2308      	movs	r3, #8
 8005278:	18fb      	adds	r3, r7, r3
 800527a:	1c02      	adds	r2, r0, #0
 800527c:	801a      	strh	r2, [r3, #0]
 800527e:	1dbb      	adds	r3, r7, #6
 8005280:	1c0a      	adds	r2, r1, #0
 8005282:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2241      	movs	r2, #65	@ 0x41
 8005288:	5c9b      	ldrb	r3, [r3, r2]
 800528a:	b2db      	uxtb	r3, r3
 800528c:	2b20      	cmp	r3, #32
 800528e:	d000      	beq.n	8005292 <HAL_I2C_Mem_Read_DMA+0x32>
 8005290:	e0d6      	b.n	8005440 <HAL_I2C_Mem_Read_DMA+0x1e0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005294:	2b00      	cmp	r3, #0
 8005296:	d004      	beq.n	80052a2 <HAL_I2C_Mem_Read_DMA+0x42>
 8005298:	232c      	movs	r3, #44	@ 0x2c
 800529a:	18fb      	adds	r3, r7, r3
 800529c:	881b      	ldrh	r3, [r3, #0]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d105      	bne.n	80052ae <HAL_I2C_Mem_Read_DMA+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2280      	movs	r2, #128	@ 0x80
 80052a6:	0092      	lsls	r2, r2, #2
 80052a8:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e0c9      	b.n	8005442 <HAL_I2C_Mem_Read_DMA+0x1e2>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	699a      	ldr	r2, [r3, #24]
 80052b4:	2380      	movs	r3, #128	@ 0x80
 80052b6:	021b      	lsls	r3, r3, #8
 80052b8:	401a      	ands	r2, r3
 80052ba:	2380      	movs	r3, #128	@ 0x80
 80052bc:	021b      	lsls	r3, r3, #8
 80052be:	429a      	cmp	r2, r3
 80052c0:	d101      	bne.n	80052c6 <HAL_I2C_Mem_Read_DMA+0x66>
    {
      return HAL_BUSY;
 80052c2:	2302      	movs	r3, #2
 80052c4:	e0bd      	b.n	8005442 <HAL_I2C_Mem_Read_DMA+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2240      	movs	r2, #64	@ 0x40
 80052ca:	5c9b      	ldrb	r3, [r3, r2]
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d101      	bne.n	80052d4 <HAL_I2C_Mem_Read_DMA+0x74>
 80052d0:	2302      	movs	r3, #2
 80052d2:	e0b6      	b.n	8005442 <HAL_I2C_Mem_Read_DMA+0x1e2>
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2240      	movs	r2, #64	@ 0x40
 80052d8:	2101      	movs	r1, #1
 80052da:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2241      	movs	r2, #65	@ 0x41
 80052e0:	2122      	movs	r1, #34	@ 0x22
 80052e2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2242      	movs	r2, #66	@ 0x42
 80052e8:	2140      	movs	r1, #64	@ 0x40
 80052ea:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2200      	movs	r2, #0
 80052f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052f6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	222c      	movs	r2, #44	@ 0x2c
 80052fc:	18ba      	adds	r2, r7, r2
 80052fe:	8812      	ldrh	r2, [r2, #0]
 8005300:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	4a51      	ldr	r2, [pc, #324]	@ (800544c <HAL_I2C_Mem_Read_DMA+0x1ec>)
 8005306:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	4a51      	ldr	r2, [pc, #324]	@ (8005450 <HAL_I2C_Mem_Read_DMA+0x1f0>)
 800530c:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 800530e:	230a      	movs	r3, #10
 8005310:	18fb      	adds	r3, r7, r3
 8005312:	881a      	ldrh	r2, [r3, #0]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	64da      	str	r2, [r3, #76]	@ 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800531c:	b29b      	uxth	r3, r3
 800531e:	2bff      	cmp	r3, #255	@ 0xff
 8005320:	d903      	bls.n	800532a <HAL_I2C_Mem_Read_DMA+0xca>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	22ff      	movs	r2, #255	@ 0xff
 8005326:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005328:	e004      	b.n	8005334 <HAL_I2C_Mem_Read_DMA+0xd4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800532e:	b29a      	uxth	r2, r3
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005334:	1dbb      	adds	r3, r7, #6
 8005336:	881b      	ldrh	r3, [r3, #0]
 8005338:	2b01      	cmp	r3, #1
 800533a:	d10b      	bne.n	8005354 <HAL_I2C_Mem_Read_DMA+0xf4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800533c:	2308      	movs	r3, #8
 800533e:	18fb      	adds	r3, r7, r3
 8005340:	881b      	ldrh	r3, [r3, #0]
 8005342:	b2da      	uxtb	r2, r3
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2201      	movs	r2, #1
 800534e:	4252      	negs	r2, r2
 8005350:	651a      	str	r2, [r3, #80]	@ 0x50
 8005352:	e00e      	b.n	8005372 <HAL_I2C_Mem_Read_DMA+0x112>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005354:	2108      	movs	r1, #8
 8005356:	187b      	adds	r3, r7, r1
 8005358:	881b      	ldrh	r3, [r3, #0]
 800535a:	0a1b      	lsrs	r3, r3, #8
 800535c:	b29b      	uxth	r3, r3
 800535e:	b2da      	uxtb	r2, r3
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8005366:	187b      	adds	r3, r7, r1
 8005368:	881b      	ldrh	r3, [r3, #0]
 800536a:	b2db      	uxtb	r3, r3
 800536c:	001a      	movs	r2, r3
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if (hi2c->hdmarx != NULL)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005376:	2b00      	cmp	r3, #0
 8005378:	d023      	beq.n	80053c2 <HAL_I2C_Mem_Read_DMA+0x162>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800537e:	4a35      	ldr	r2, [pc, #212]	@ (8005454 <HAL_I2C_Mem_Read_DMA+0x1f4>)
 8005380:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005386:	4a34      	ldr	r2, [pc, #208]	@ (8005458 <HAL_I2C_Mem_Read_DMA+0x1f8>)
 8005388:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800538e:	2200      	movs	r2, #0
 8005390:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->hdmarx->XferAbortCallback = NULL;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005396:	2200      	movs	r2, #0
 8005398:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	3324      	adds	r3, #36	@ 0x24
 80053a4:	0019      	movs	r1, r3
 80053a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
                                       hi2c->XferSize);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80053ac:	2517      	movs	r5, #23
 80053ae:	197c      	adds	r4, r7, r5
 80053b0:	f7fe fedc 	bl	800416c <HAL_DMA_Start_IT>
 80053b4:	0003      	movs	r3, r0
 80053b6:	7023      	strb	r3, [r4, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 80053b8:	197b      	adds	r3, r7, r5
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d12b      	bne.n	8005418 <HAL_I2C_Mem_Read_DMA+0x1b8>
 80053c0:	e013      	b.n	80053ea <HAL_I2C_Mem_Read_DMA+0x18a>
      hi2c->State     = HAL_I2C_STATE_READY;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2241      	movs	r2, #65	@ 0x41
 80053c6:	2120      	movs	r1, #32
 80053c8:	5499      	strb	r1, [r3, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2242      	movs	r2, #66	@ 0x42
 80053ce:	2100      	movs	r1, #0
 80053d0:	5499      	strb	r1, [r3, r2]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053d6:	2280      	movs	r2, #128	@ 0x80
 80053d8:	431a      	orrs	r2, r3
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2240      	movs	r2, #64	@ 0x40
 80053e2:	2100      	movs	r1, #0
 80053e4:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e02b      	b.n	8005442 <HAL_I2C_Mem_Read_DMA+0x1e2>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80053ea:	1dbb      	adds	r3, r7, #6
 80053ec:	881b      	ldrh	r3, [r3, #0]
 80053ee:	b2da      	uxtb	r2, r3
 80053f0:	230a      	movs	r3, #10
 80053f2:	18fb      	adds	r3, r7, r3
 80053f4:	8819      	ldrh	r1, [r3, #0]
 80053f6:	68f8      	ldr	r0, [r7, #12]
 80053f8:	4b18      	ldr	r3, [pc, #96]	@ (800545c <HAL_I2C_Mem_Read_DMA+0x1fc>)
 80053fa:	9300      	str	r3, [sp, #0]
 80053fc:	2300      	movs	r3, #0
 80053fe:	f001 fc35 	bl	8006c6c <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2240      	movs	r2, #64	@ 0x40
 8005406:	2100      	movs	r1, #0
 8005408:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2101      	movs	r1, #1
 800540e:	0018      	movs	r0, r3
 8005410:	f001 fc66 	bl	8006ce0 <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8005414:	2300      	movs	r3, #0
 8005416:	e014      	b.n	8005442 <HAL_I2C_Mem_Read_DMA+0x1e2>
      hi2c->State     = HAL_I2C_STATE_READY;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2241      	movs	r2, #65	@ 0x41
 800541c:	2120      	movs	r1, #32
 800541e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2242      	movs	r2, #66	@ 0x42
 8005424:	2100      	movs	r1, #0
 8005426:	5499      	strb	r1, [r3, r2]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800542c:	2210      	movs	r2, #16
 800542e:	431a      	orrs	r2, r3
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2240      	movs	r2, #64	@ 0x40
 8005438:	2100      	movs	r1, #0
 800543a:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e000      	b.n	8005442 <HAL_I2C_Mem_Read_DMA+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005440:	2302      	movs	r3, #2
  }
}
 8005442:	0018      	movs	r0, r3
 8005444:	46bd      	mov	sp, r7
 8005446:	b006      	add	sp, #24
 8005448:	bdb0      	pop	{r4, r5, r7, pc}
 800544a:	46c0      	nop			@ (mov r8, r8)
 800544c:	ffff0000 	.word	0xffff0000
 8005450:	08005c09 	.word	0x08005c09
 8005454:	08006b5d 	.word	0x08006b5d
 8005458:	08006bfd 	.word	0x08006bfd
 800545c:	80002000 	.word	0x80002000

08005460 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	699b      	ldr	r3, [r3, #24]
 800546e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800547c:	2b00      	cmp	r3, #0
 800547e:	d005      	beq.n	800548c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005484:	68ba      	ldr	r2, [r7, #8]
 8005486:	68f9      	ldr	r1, [r7, #12]
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	4798      	blx	r3
  }
}
 800548c:	46c0      	nop			@ (mov r8, r8)
 800548e:	46bd      	mov	sp, r7
 8005490:	b004      	add	sp, #16
 8005492:	bd80      	pop	{r7, pc}

08005494 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b086      	sub	sp, #24
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80054ac:	697a      	ldr	r2, [r7, #20]
 80054ae:	2380      	movs	r3, #128	@ 0x80
 80054b0:	005b      	lsls	r3, r3, #1
 80054b2:	4013      	ands	r3, r2
 80054b4:	d00e      	beq.n	80054d4 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	2280      	movs	r2, #128	@ 0x80
 80054ba:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80054bc:	d00a      	beq.n	80054d4 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054c2:	2201      	movs	r2, #1
 80054c4:	431a      	orrs	r2, r3
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2280      	movs	r2, #128	@ 0x80
 80054d0:	0052      	lsls	r2, r2, #1
 80054d2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80054d4:	697a      	ldr	r2, [r7, #20]
 80054d6:	2380      	movs	r3, #128	@ 0x80
 80054d8:	00db      	lsls	r3, r3, #3
 80054da:	4013      	ands	r3, r2
 80054dc:	d00e      	beq.n	80054fc <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	2280      	movs	r2, #128	@ 0x80
 80054e2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80054e4:	d00a      	beq.n	80054fc <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ea:	2208      	movs	r2, #8
 80054ec:	431a      	orrs	r2, r3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2280      	movs	r2, #128	@ 0x80
 80054f8:	00d2      	lsls	r2, r2, #3
 80054fa:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80054fc:	697a      	ldr	r2, [r7, #20]
 80054fe:	2380      	movs	r3, #128	@ 0x80
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	4013      	ands	r3, r2
 8005504:	d00e      	beq.n	8005524 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	2280      	movs	r2, #128	@ 0x80
 800550a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800550c:	d00a      	beq.n	8005524 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005512:	2202      	movs	r2, #2
 8005514:	431a      	orrs	r2, r3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2280      	movs	r2, #128	@ 0x80
 8005520:	0092      	lsls	r2, r2, #2
 8005522:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005528:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	220b      	movs	r2, #11
 800552e:	4013      	ands	r3, r2
 8005530:	d005      	beq.n	800553e <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	0011      	movs	r1, r2
 8005538:	0018      	movs	r0, r3
 800553a:	f001 f971 	bl	8006820 <I2C_ITError>
  }
}
 800553e:	46c0      	nop			@ (mov r8, r8)
 8005540:	46bd      	mov	sp, r7
 8005542:	b006      	add	sp, #24
 8005544:	bd80      	pop	{r7, pc}

08005546 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005546:	b580      	push	{r7, lr}
 8005548:	b082      	sub	sp, #8
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800554e:	46c0      	nop			@ (mov r8, r8)
 8005550:	46bd      	mov	sp, r7
 8005552:	b002      	add	sp, #8
 8005554:	bd80      	pop	{r7, pc}

08005556 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005556:	b580      	push	{r7, lr}
 8005558:	b082      	sub	sp, #8
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800555e:	46c0      	nop			@ (mov r8, r8)
 8005560:	46bd      	mov	sp, r7
 8005562:	b002      	add	sp, #8
 8005564:	bd80      	pop	{r7, pc}

08005566 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005566:	b580      	push	{r7, lr}
 8005568:	b082      	sub	sp, #8
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
 800556e:	0008      	movs	r0, r1
 8005570:	0011      	movs	r1, r2
 8005572:	1cfb      	adds	r3, r7, #3
 8005574:	1c02      	adds	r2, r0, #0
 8005576:	701a      	strb	r2, [r3, #0]
 8005578:	003b      	movs	r3, r7
 800557a:	1c0a      	adds	r2, r1, #0
 800557c:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800557e:	46c0      	nop			@ (mov r8, r8)
 8005580:	46bd      	mov	sp, r7
 8005582:	b002      	add	sp, #8
 8005584:	bd80      	pop	{r7, pc}

08005586 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005586:	b580      	push	{r7, lr}
 8005588:	b082      	sub	sp, #8
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800558e:	46c0      	nop			@ (mov r8, r8)
 8005590:	46bd      	mov	sp, r7
 8005592:	b002      	add	sp, #8
 8005594:	bd80      	pop	{r7, pc}

08005596 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005596:	b580      	push	{r7, lr}
 8005598:	b082      	sub	sp, #8
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800559e:	46c0      	nop			@ (mov r8, r8)
 80055a0:	46bd      	mov	sp, r7
 80055a2:	b002      	add	sp, #8
 80055a4:	bd80      	pop	{r7, pc}
	...

080055a8 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80055a8:	b590      	push	{r4, r7, lr}
 80055aa:	b089      	sub	sp, #36	@ 0x24
 80055ac:	af02      	add	r7, sp, #8
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2240      	movs	r2, #64	@ 0x40
 80055bc:	5c9b      	ldrb	r3, [r3, r2]
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d101      	bne.n	80055c6 <I2C_Master_ISR_IT+0x1e>
 80055c2:	2302      	movs	r3, #2
 80055c4:	e11d      	b.n	8005802 <I2C_Master_ISR_IT+0x25a>
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2240      	movs	r2, #64	@ 0x40
 80055ca:	2101      	movs	r1, #1
 80055cc:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	2210      	movs	r2, #16
 80055d2:	4013      	ands	r3, r2
 80055d4:	d012      	beq.n	80055fc <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2210      	movs	r2, #16
 80055da:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80055dc:	d00e      	beq.n	80055fc <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2210      	movs	r2, #16
 80055e4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055ea:	2204      	movs	r2, #4
 80055ec:	431a      	orrs	r2, r3
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	0018      	movs	r0, r3
 80055f6:	f001 fa3e 	bl	8006a76 <I2C_Flush_TXDR>
 80055fa:	e0ef      	b.n	80057dc <I2C_Master_ISR_IT+0x234>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	2204      	movs	r2, #4
 8005600:	4013      	ands	r3, r2
 8005602:	d021      	beq.n	8005648 <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2204      	movs	r2, #4
 8005608:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800560a:	d01d      	beq.n	8005648 <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	2204      	movs	r2, #4
 8005610:	4393      	bics	r3, r2
 8005612:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800561e:	b2d2      	uxtb	r2, r2
 8005620:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005626:	1c5a      	adds	r2, r3, #1
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005630:	3b01      	subs	r3, #1
 8005632:	b29a      	uxth	r2, r3
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800563c:	b29b      	uxth	r3, r3
 800563e:	3b01      	subs	r3, #1
 8005640:	b29a      	uxth	r2, r3
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005646:	e0c9      	b.n	80057dc <I2C_Master_ISR_IT+0x234>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	2240      	movs	r2, #64	@ 0x40
 800564c:	4013      	ands	r3, r2
 800564e:	d126      	bne.n	800569e <I2C_Master_ISR_IT+0xf6>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	2202      	movs	r2, #2
 8005654:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8005656:	d022      	beq.n	800569e <I2C_Master_ISR_IT+0xf6>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2202      	movs	r2, #2
 800565c:	4013      	ands	r3, r2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800565e:	d01e      	beq.n	800569e <I2C_Master_ISR_IT+0xf6>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005664:	b29b      	uxth	r3, r3
 8005666:	2b00      	cmp	r3, #0
 8005668:	d100      	bne.n	800566c <I2C_Master_ISR_IT+0xc4>
 800566a:	e0b7      	b.n	80057dc <I2C_Master_ISR_IT+0x234>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005670:	781a      	ldrb	r2, [r3, #0]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800567c:	1c5a      	adds	r2, r3, #1
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005686:	3b01      	subs	r3, #1
 8005688:	b29a      	uxth	r2, r3
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005692:	b29b      	uxth	r3, r3
 8005694:	3b01      	subs	r3, #1
 8005696:	b29a      	uxth	r2, r3
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 800569c:	e09e      	b.n	80057dc <I2C_Master_ISR_IT+0x234>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	2280      	movs	r2, #128	@ 0x80
 80056a2:	4013      	ands	r3, r2
 80056a4:	d100      	bne.n	80056a8 <I2C_Master_ISR_IT+0x100>
 80056a6:	e069      	b.n	800577c <I2C_Master_ISR_IT+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2240      	movs	r2, #64	@ 0x40
 80056ac:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80056ae:	d065      	beq.n	800577c <I2C_Master_ISR_IT+0x1d4>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d04a      	beq.n	8005750 <I2C_Master_ISR_IT+0x1a8>
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d146      	bne.n	8005750 <I2C_Master_ISR_IT+0x1a8>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	b29a      	uxth	r2, r3
 80056ca:	2112      	movs	r1, #18
 80056cc:	187b      	adds	r3, r7, r1
 80056ce:	0592      	lsls	r2, r2, #22
 80056d0:	0d92      	lsrs	r2, r2, #22
 80056d2:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056d8:	b29b      	uxth	r3, r3
 80056da:	2bff      	cmp	r3, #255	@ 0xff
 80056dc:	d910      	bls.n	8005700 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	22ff      	movs	r2, #255	@ 0xff
 80056e2:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056e8:	b2da      	uxtb	r2, r3
 80056ea:	2380      	movs	r3, #128	@ 0x80
 80056ec:	045c      	lsls	r4, r3, #17
 80056ee:	187b      	adds	r3, r7, r1
 80056f0:	8819      	ldrh	r1, [r3, #0]
 80056f2:	68f8      	ldr	r0, [r7, #12]
 80056f4:	2300      	movs	r3, #0
 80056f6:	9300      	str	r3, [sp, #0]
 80056f8:	0023      	movs	r3, r4
 80056fa:	f001 fab7 	bl	8006c6c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80056fe:	e03c      	b.n	800577a <I2C_Master_ISR_IT+0x1d2>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005704:	b29a      	uxth	r2, r3
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800570e:	4a3f      	ldr	r2, [pc, #252]	@ (800580c <I2C_Master_ISR_IT+0x264>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d00e      	beq.n	8005732 <I2C_Master_ISR_IT+0x18a>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005718:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800571e:	2312      	movs	r3, #18
 8005720:	18fb      	adds	r3, r7, r3
 8005722:	8819      	ldrh	r1, [r3, #0]
 8005724:	68f8      	ldr	r0, [r7, #12]
 8005726:	2300      	movs	r3, #0
 8005728:	9300      	str	r3, [sp, #0]
 800572a:	0023      	movs	r3, r4
 800572c:	f001 fa9e 	bl	8006c6c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005730:	e023      	b.n	800577a <I2C_Master_ISR_IT+0x1d2>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005736:	b2da      	uxtb	r2, r3
 8005738:	2380      	movs	r3, #128	@ 0x80
 800573a:	049c      	lsls	r4, r3, #18
 800573c:	2312      	movs	r3, #18
 800573e:	18fb      	adds	r3, r7, r3
 8005740:	8819      	ldrh	r1, [r3, #0]
 8005742:	68f8      	ldr	r0, [r7, #12]
 8005744:	2300      	movs	r3, #0
 8005746:	9300      	str	r3, [sp, #0]
 8005748:	0023      	movs	r3, r4
 800574a:	f001 fa8f 	bl	8006c6c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800574e:	e014      	b.n	800577a <I2C_Master_ISR_IT+0x1d2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	685a      	ldr	r2, [r3, #4]
 8005756:	2380      	movs	r3, #128	@ 0x80
 8005758:	049b      	lsls	r3, r3, #18
 800575a:	401a      	ands	r2, r3
 800575c:	2380      	movs	r3, #128	@ 0x80
 800575e:	049b      	lsls	r3, r3, #18
 8005760:	429a      	cmp	r2, r3
 8005762:	d004      	beq.n	800576e <I2C_Master_ISR_IT+0x1c6>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	0018      	movs	r0, r3
 8005768:	f000 fd06 	bl	8006178 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800576c:	e036      	b.n	80057dc <I2C_Master_ISR_IT+0x234>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2140      	movs	r1, #64	@ 0x40
 8005772:	0018      	movs	r0, r3
 8005774:	f001 f854 	bl	8006820 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005778:	e030      	b.n	80057dc <I2C_Master_ISR_IT+0x234>
 800577a:	e02f      	b.n	80057dc <I2C_Master_ISR_IT+0x234>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	2240      	movs	r2, #64	@ 0x40
 8005780:	4013      	ands	r3, r2
 8005782:	d02b      	beq.n	80057dc <I2C_Master_ISR_IT+0x234>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2240      	movs	r2, #64	@ 0x40
 8005788:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800578a:	d027      	beq.n	80057dc <I2C_Master_ISR_IT+0x234>
  {
    if (hi2c->XferCount == 0U)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005790:	b29b      	uxth	r3, r3
 8005792:	2b00      	cmp	r3, #0
 8005794:	d11d      	bne.n	80057d2 <I2C_Master_ISR_IT+0x22a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	685a      	ldr	r2, [r3, #4]
 800579c:	2380      	movs	r3, #128	@ 0x80
 800579e:	049b      	lsls	r3, r3, #18
 80057a0:	401a      	ands	r2, r3
 80057a2:	2380      	movs	r3, #128	@ 0x80
 80057a4:	049b      	lsls	r3, r3, #18
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d018      	beq.n	80057dc <I2C_Master_ISR_IT+0x234>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ae:	4a17      	ldr	r2, [pc, #92]	@ (800580c <I2C_Master_ISR_IT+0x264>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d109      	bne.n	80057c8 <I2C_Master_ISR_IT+0x220>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	685a      	ldr	r2, [r3, #4]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2180      	movs	r1, #128	@ 0x80
 80057c0:	01c9      	lsls	r1, r1, #7
 80057c2:	430a      	orrs	r2, r1
 80057c4:	605a      	str	r2, [r3, #4]
 80057c6:	e009      	b.n	80057dc <I2C_Master_ISR_IT+0x234>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	0018      	movs	r0, r3
 80057cc:	f000 fcd4 	bl	8006178 <I2C_ITMasterSeqCplt>
 80057d0:	e004      	b.n	80057dc <I2C_Master_ISR_IT+0x234>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2140      	movs	r1, #64	@ 0x40
 80057d6:	0018      	movs	r0, r3
 80057d8:	f001 f822 	bl	8006820 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	2220      	movs	r2, #32
 80057e0:	4013      	ands	r3, r2
 80057e2:	d009      	beq.n	80057f8 <I2C_Master_ISR_IT+0x250>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2220      	movs	r2, #32
 80057e8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80057ea:	d005      	beq.n	80057f8 <I2C_Master_ISR_IT+0x250>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80057ec:	697a      	ldr	r2, [r7, #20]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	0011      	movs	r1, r2
 80057f2:	0018      	movs	r0, r3
 80057f4:	f000 fd66 	bl	80062c4 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2240      	movs	r2, #64	@ 0x40
 80057fc:	2100      	movs	r1, #0
 80057fe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005800:	2300      	movs	r3, #0
}
 8005802:	0018      	movs	r0, r3
 8005804:	46bd      	mov	sp, r7
 8005806:	b007      	add	sp, #28
 8005808:	bd90      	pop	{r4, r7, pc}
 800580a:	46c0      	nop			@ (mov r8, r8)
 800580c:	ffff0000 	.word	0xffff0000

08005810 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b086      	sub	sp, #24
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005820:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2240      	movs	r2, #64	@ 0x40
 800582a:	5c9b      	ldrb	r3, [r3, r2]
 800582c:	2b01      	cmp	r3, #1
 800582e:	d101      	bne.n	8005834 <I2C_Slave_ISR_IT+0x24>
 8005830:	2302      	movs	r3, #2
 8005832:	e0e7      	b.n	8005a04 <I2C_Slave_ISR_IT+0x1f4>
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2240      	movs	r2, #64	@ 0x40
 8005838:	2101      	movs	r1, #1
 800583a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	2220      	movs	r2, #32
 8005840:	4013      	ands	r3, r2
 8005842:	d00a      	beq.n	800585a <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2220      	movs	r2, #32
 8005848:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800584a:	d006      	beq.n	800585a <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800584c:	693a      	ldr	r2, [r7, #16]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	0011      	movs	r1, r2
 8005852:	0018      	movs	r0, r3
 8005854:	f000 fe04 	bl	8006460 <I2C_ITSlaveCplt>
 8005858:	e0cf      	b.n	80059fa <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	2210      	movs	r2, #16
 800585e:	4013      	ands	r3, r2
 8005860:	d052      	beq.n	8005908 <I2C_Slave_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2210      	movs	r2, #16
 8005866:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005868:	d04e      	beq.n	8005908 <I2C_Slave_ISR_IT+0xf8>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800586e:	b29b      	uxth	r3, r3
 8005870:	2b00      	cmp	r3, #0
 8005872:	d12d      	bne.n	80058d0 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2241      	movs	r2, #65	@ 0x41
 8005878:	5c9b      	ldrb	r3, [r3, r2]
 800587a:	b2db      	uxtb	r3, r3
 800587c:	2b28      	cmp	r3, #40	@ 0x28
 800587e:	d10b      	bne.n	8005898 <I2C_Slave_ISR_IT+0x88>
 8005880:	697a      	ldr	r2, [r7, #20]
 8005882:	2380      	movs	r3, #128	@ 0x80
 8005884:	049b      	lsls	r3, r3, #18
 8005886:	429a      	cmp	r2, r3
 8005888:	d106      	bne.n	8005898 <I2C_Slave_ISR_IT+0x88>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800588a:	693a      	ldr	r2, [r7, #16]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	0011      	movs	r1, r2
 8005890:	0018      	movs	r0, r3
 8005892:	f000 ff6d 	bl	8006770 <I2C_ITListenCplt>
 8005896:	e036      	b.n	8005906 <I2C_Slave_ISR_IT+0xf6>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2241      	movs	r2, #65	@ 0x41
 800589c:	5c9b      	ldrb	r3, [r3, r2]
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	2b29      	cmp	r3, #41	@ 0x29
 80058a2:	d110      	bne.n	80058c6 <I2C_Slave_ISR_IT+0xb6>
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	4a59      	ldr	r2, [pc, #356]	@ (8005a0c <I2C_Slave_ISR_IT+0x1fc>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d00c      	beq.n	80058c6 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2210      	movs	r2, #16
 80058b2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	0018      	movs	r0, r3
 80058b8:	f001 f8dd 	bl	8006a76 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	0018      	movs	r0, r3
 80058c0:	f000 fc9c 	bl	80061fc <I2C_ITSlaveSeqCplt>
 80058c4:	e01f      	b.n	8005906 <I2C_Slave_ISR_IT+0xf6>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	2210      	movs	r2, #16
 80058cc:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80058ce:	e091      	b.n	80059f4 <I2C_Slave_ISR_IT+0x1e4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2210      	movs	r2, #16
 80058d6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058dc:	2204      	movs	r2, #4
 80058de:	431a      	orrs	r2, r3
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d005      	beq.n	80058f6 <I2C_Slave_ISR_IT+0xe6>
 80058ea:	697a      	ldr	r2, [r7, #20]
 80058ec:	2380      	movs	r3, #128	@ 0x80
 80058ee:	045b      	lsls	r3, r3, #17
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d000      	beq.n	80058f6 <I2C_Slave_ISR_IT+0xe6>
 80058f4:	e07e      	b.n	80059f4 <I2C_Slave_ISR_IT+0x1e4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	0011      	movs	r1, r2
 80058fe:	0018      	movs	r0, r3
 8005900:	f000 ff8e 	bl	8006820 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005904:	e076      	b.n	80059f4 <I2C_Slave_ISR_IT+0x1e4>
 8005906:	e075      	b.n	80059f4 <I2C_Slave_ISR_IT+0x1e4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	2204      	movs	r2, #4
 800590c:	4013      	ands	r3, r2
 800590e:	d02f      	beq.n	8005970 <I2C_Slave_ISR_IT+0x160>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2204      	movs	r2, #4
 8005914:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005916:	d02b      	beq.n	8005970 <I2C_Slave_ISR_IT+0x160>
  {
    if (hi2c->XferCount > 0U)
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800591c:	b29b      	uxth	r3, r3
 800591e:	2b00      	cmp	r3, #0
 8005920:	d018      	beq.n	8005954 <I2C_Slave_ISR_IT+0x144>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800592c:	b2d2      	uxtb	r2, r2
 800592e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005934:	1c5a      	adds	r2, r3, #1
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800593e:	3b01      	subs	r3, #1
 8005940:	b29a      	uxth	r2, r3
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800594a:	b29b      	uxth	r3, r3
 800594c:	3b01      	subs	r3, #1
 800594e:	b29a      	uxth	r2, r3
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005958:	b29b      	uxth	r3, r3
 800595a:	2b00      	cmp	r3, #0
 800595c:	d14c      	bne.n	80059f8 <I2C_Slave_ISR_IT+0x1e8>
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	4a2a      	ldr	r2, [pc, #168]	@ (8005a0c <I2C_Slave_ISR_IT+0x1fc>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d048      	beq.n	80059f8 <I2C_Slave_ISR_IT+0x1e8>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	0018      	movs	r0, r3
 800596a:	f000 fc47 	bl	80061fc <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800596e:	e043      	b.n	80059f8 <I2C_Slave_ISR_IT+0x1e8>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	2208      	movs	r2, #8
 8005974:	4013      	ands	r3, r2
 8005976:	d00a      	beq.n	800598e <I2C_Slave_ISR_IT+0x17e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2208      	movs	r2, #8
 800597c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800597e:	d006      	beq.n	800598e <I2C_Slave_ISR_IT+0x17e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005980:	693a      	ldr	r2, [r7, #16]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	0011      	movs	r1, r2
 8005986:	0018      	movs	r0, r3
 8005988:	f000 fb52 	bl	8006030 <I2C_ITAddrCplt>
 800598c:	e035      	b.n	80059fa <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	2202      	movs	r2, #2
 8005992:	4013      	ands	r3, r2
 8005994:	d031      	beq.n	80059fa <I2C_Slave_ISR_IT+0x1ea>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2202      	movs	r2, #2
 800599a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800599c:	d02d      	beq.n	80059fa <I2C_Slave_ISR_IT+0x1ea>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d018      	beq.n	80059da <I2C_Slave_ISR_IT+0x1ca>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ac:	781a      	ldrb	r2, [r3, #0]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059b8:	1c5a      	adds	r2, r3, #1
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	3b01      	subs	r3, #1
 80059c6:	b29a      	uxth	r2, r3
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059d0:	3b01      	subs	r3, #1
 80059d2:	b29a      	uxth	r2, r3
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	851a      	strh	r2, [r3, #40]	@ 0x28
 80059d8:	e00f      	b.n	80059fa <I2C_Slave_ISR_IT+0x1ea>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80059da:	697a      	ldr	r2, [r7, #20]
 80059dc:	2380      	movs	r3, #128	@ 0x80
 80059de:	045b      	lsls	r3, r3, #17
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d002      	beq.n	80059ea <I2C_Slave_ISR_IT+0x1da>
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d107      	bne.n	80059fa <I2C_Slave_ISR_IT+0x1ea>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	0018      	movs	r0, r3
 80059ee:	f000 fc05 	bl	80061fc <I2C_ITSlaveSeqCplt>
 80059f2:	e002      	b.n	80059fa <I2C_Slave_ISR_IT+0x1ea>
    if (hi2c->XferCount == 0U)
 80059f4:	46c0      	nop			@ (mov r8, r8)
 80059f6:	e000      	b.n	80059fa <I2C_Slave_ISR_IT+0x1ea>
    if ((hi2c->XferCount == 0U) && \
 80059f8:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2240      	movs	r2, #64	@ 0x40
 80059fe:	2100      	movs	r1, #0
 8005a00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a02:	2300      	movs	r3, #0
}
 8005a04:	0018      	movs	r0, r3
 8005a06:	46bd      	mov	sp, r7
 8005a08:	b006      	add	sp, #24
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	ffff0000 	.word	0xffff0000

08005a10 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8005a10:	b590      	push	{r4, r7, lr}
 8005a12:	b089      	sub	sp, #36	@ 0x24
 8005a14:	af02      	add	r7, sp, #8
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	60b9      	str	r1, [r7, #8]
 8005a1a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2240      	movs	r2, #64	@ 0x40
 8005a20:	5c9b      	ldrb	r3, [r3, r2]
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d101      	bne.n	8005a2a <I2C_Master_ISR_DMA+0x1a>
 8005a26:	2302      	movs	r3, #2
 8005a28:	e0e7      	b.n	8005bfa <I2C_Master_ISR_DMA+0x1ea>
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2240      	movs	r2, #64	@ 0x40
 8005a2e:	2101      	movs	r1, #1
 8005a30:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	2210      	movs	r2, #16
 8005a36:	4013      	ands	r3, r2
 8005a38:	d017      	beq.n	8005a6a <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2210      	movs	r2, #16
 8005a3e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005a40:	d013      	beq.n	8005a6a <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2210      	movs	r2, #16
 8005a48:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a4e:	2204      	movs	r2, #4
 8005a50:	431a      	orrs	r2, r3
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2120      	movs	r1, #32
 8005a5a:	0018      	movs	r0, r3
 8005a5c:	f001 f940 	bl	8006ce0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	0018      	movs	r0, r3
 8005a64:	f001 f807 	bl	8006a76 <I2C_Flush_TXDR>
 8005a68:	e0c2      	b.n	8005bf0 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	2280      	movs	r2, #128	@ 0x80
 8005a6e:	4013      	ands	r3, r2
 8005a70:	d100      	bne.n	8005a74 <I2C_Master_ISR_DMA+0x64>
 8005a72:	e07c      	b.n	8005b6e <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2240      	movs	r2, #64	@ 0x40
 8005a78:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005a7a:	d100      	bne.n	8005a7e <I2C_Master_ISR_DMA+0x6e>
 8005a7c:	e077      	b.n	8005b6e <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2140      	movs	r1, #64	@ 0x40
 8005a8a:	438a      	bics	r2, r1
 8005a8c:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d055      	beq.n	8005b44 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	b29a      	uxth	r2, r3
 8005aa0:	2312      	movs	r3, #18
 8005aa2:	18fb      	adds	r3, r7, r3
 8005aa4:	0592      	lsls	r2, r2, #22
 8005aa6:	0d92      	lsrs	r2, r2, #22
 8005aa8:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	2bff      	cmp	r3, #255	@ 0xff
 8005ab2:	d906      	bls.n	8005ac2 <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	22ff      	movs	r2, #255	@ 0xff
 8005ab8:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8005aba:	2380      	movs	r3, #128	@ 0x80
 8005abc:	045b      	lsls	r3, r3, #17
 8005abe:	617b      	str	r3, [r7, #20]
 8005ac0:	e010      	b.n	8005ae4 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ac6:	b29a      	uxth	r2, r3
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ad0:	4a4c      	ldr	r2, [pc, #304]	@ (8005c04 <I2C_Master_ISR_DMA+0x1f4>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d003      	beq.n	8005ade <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ada:	617b      	str	r3, [r7, #20]
 8005adc:	e002      	b.n	8005ae4 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8005ade:	2380      	movs	r3, #128	@ 0x80
 8005ae0:	049b      	lsls	r3, r3, #18
 8005ae2:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ae8:	b2da      	uxtb	r2, r3
 8005aea:	697c      	ldr	r4, [r7, #20]
 8005aec:	2312      	movs	r3, #18
 8005aee:	18fb      	adds	r3, r7, r3
 8005af0:	8819      	ldrh	r1, [r3, #0]
 8005af2:	68f8      	ldr	r0, [r7, #12]
 8005af4:	2300      	movs	r3, #0
 8005af6:	9300      	str	r3, [sp, #0]
 8005af8:	0023      	movs	r3, r4
 8005afa:	f001 f8b7 	bl	8006c6c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b02:	b29a      	uxth	r2, r3
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	b29a      	uxth	r2, r3
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2241      	movs	r2, #65	@ 0x41
 8005b14:	5c9b      	ldrb	r3, [r3, r2]
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	2b22      	cmp	r3, #34	@ 0x22
 8005b1a:	d109      	bne.n	8005b30 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	2180      	movs	r1, #128	@ 0x80
 8005b28:	0209      	lsls	r1, r1, #8
 8005b2a:	430a      	orrs	r2, r1
 8005b2c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005b2e:	e05f      	b.n	8005bf0 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	2180      	movs	r1, #128	@ 0x80
 8005b3c:	01c9      	lsls	r1, r1, #7
 8005b3e:	430a      	orrs	r2, r1
 8005b40:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005b42:	e055      	b.n	8005bf0 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	685a      	ldr	r2, [r3, #4]
 8005b4a:	2380      	movs	r3, #128	@ 0x80
 8005b4c:	049b      	lsls	r3, r3, #18
 8005b4e:	401a      	ands	r2, r3
 8005b50:	2380      	movs	r3, #128	@ 0x80
 8005b52:	049b      	lsls	r3, r3, #18
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d004      	beq.n	8005b62 <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	0018      	movs	r0, r3
 8005b5c:	f000 fb0c 	bl	8006178 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8005b60:	e046      	b.n	8005bf0 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2140      	movs	r1, #64	@ 0x40
 8005b66:	0018      	movs	r0, r3
 8005b68:	f000 fe5a 	bl	8006820 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8005b6c:	e040      	b.n	8005bf0 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	2240      	movs	r2, #64	@ 0x40
 8005b72:	4013      	ands	r3, r2
 8005b74:	d02c      	beq.n	8005bd0 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2240      	movs	r2, #64	@ 0x40
 8005b7a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005b7c:	d028      	beq.n	8005bd0 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d11d      	bne.n	8005bc4 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	685a      	ldr	r2, [r3, #4]
 8005b8e:	2380      	movs	r3, #128	@ 0x80
 8005b90:	049b      	lsls	r3, r3, #18
 8005b92:	401a      	ands	r2, r3
 8005b94:	2380      	movs	r3, #128	@ 0x80
 8005b96:	049b      	lsls	r3, r3, #18
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d028      	beq.n	8005bee <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ba0:	4a18      	ldr	r2, [pc, #96]	@ (8005c04 <I2C_Master_ISR_DMA+0x1f4>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d109      	bne.n	8005bba <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	685a      	ldr	r2, [r3, #4]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2180      	movs	r1, #128	@ 0x80
 8005bb2:	01c9      	lsls	r1, r1, #7
 8005bb4:	430a      	orrs	r2, r1
 8005bb6:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8005bb8:	e019      	b.n	8005bee <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	0018      	movs	r0, r3
 8005bbe:	f000 fadb 	bl	8006178 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8005bc2:	e014      	b.n	8005bee <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2140      	movs	r1, #64	@ 0x40
 8005bc8:	0018      	movs	r0, r3
 8005bca:	f000 fe29 	bl	8006820 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005bce:	e00e      	b.n	8005bee <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	2220      	movs	r2, #32
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	d00b      	beq.n	8005bf0 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2220      	movs	r2, #32
 8005bdc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005bde:	d007      	beq.n	8005bf0 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8005be0:	68ba      	ldr	r2, [r7, #8]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	0011      	movs	r1, r2
 8005be6:	0018      	movs	r0, r3
 8005be8:	f000 fb6c 	bl	80062c4 <I2C_ITMasterCplt>
 8005bec:	e000      	b.n	8005bf0 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 8005bee:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2240      	movs	r2, #64	@ 0x40
 8005bf4:	2100      	movs	r1, #0
 8005bf6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	0018      	movs	r0, r3
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	b007      	add	sp, #28
 8005c00:	bd90      	pop	{r4, r7, pc}
 8005c02:	46c0      	nop			@ (mov r8, r8)
 8005c04:	ffff0000 	.word	0xffff0000

08005c08 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8005c08:	b590      	push	{r4, r7, lr}
 8005c0a:	b089      	sub	sp, #36	@ 0x24
 8005c0c:	af02      	add	r7, sp, #8
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8005c14:	4b90      	ldr	r3, [pc, #576]	@ (8005e58 <I2C_Mem_ISR_DMA+0x250>)
 8005c16:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2240      	movs	r2, #64	@ 0x40
 8005c1c:	5c9b      	ldrb	r3, [r3, r2]
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d101      	bne.n	8005c26 <I2C_Mem_ISR_DMA+0x1e>
 8005c22:	2302      	movs	r3, #2
 8005c24:	e113      	b.n	8005e4e <I2C_Mem_ISR_DMA+0x246>
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2240      	movs	r2, #64	@ 0x40
 8005c2a:	2101      	movs	r1, #1
 8005c2c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	2210      	movs	r2, #16
 8005c32:	4013      	ands	r3, r2
 8005c34:	d017      	beq.n	8005c66 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2210      	movs	r2, #16
 8005c3a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005c3c:	d013      	beq.n	8005c66 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	2210      	movs	r2, #16
 8005c44:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c4a:	2204      	movs	r2, #4
 8005c4c:	431a      	orrs	r2, r3
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2120      	movs	r1, #32
 8005c56:	0018      	movs	r0, r3
 8005c58:	f001 f842 	bl	8006ce0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	0018      	movs	r0, r3
 8005c60:	f000 ff09 	bl	8006a76 <I2C_Flush_TXDR>
 8005c64:	e0ee      	b.n	8005e44 <I2C_Mem_ISR_DMA+0x23c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	2202      	movs	r2, #2
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	d00d      	beq.n	8005c8a <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2202      	movs	r2, #2
 8005c72:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005c74:	d009      	beq.n	8005c8a <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	68fa      	ldr	r2, [r7, #12]
 8005c7c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005c7e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2201      	movs	r2, #1
 8005c84:	4252      	negs	r2, r2
 8005c86:	651a      	str	r2, [r3, #80]	@ 0x50
 8005c88:	e0dc      	b.n	8005e44 <I2C_Mem_ISR_DMA+0x23c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	2280      	movs	r2, #128	@ 0x80
 8005c8e:	4013      	ands	r3, r2
 8005c90:	d063      	beq.n	8005d5a <I2C_Mem_ISR_DMA+0x152>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2240      	movs	r2, #64	@ 0x40
 8005c96:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005c98:	d05f      	beq.n	8005d5a <I2C_Mem_ISR_DMA+0x152>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2101      	movs	r1, #1
 8005c9e:	0018      	movs	r0, r3
 8005ca0:	f001 f8a8 	bl	8006df4 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2110      	movs	r1, #16
 8005ca8:	0018      	movs	r0, r3
 8005caa:	f001 f819 	bl	8006ce0 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d04a      	beq.n	8005d4e <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	2bff      	cmp	r3, #255	@ 0xff
 8005cc0:	d910      	bls.n	8005ce4 <I2C_Mem_ISR_DMA+0xdc>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	22ff      	movs	r2, #255	@ 0xff
 8005cc6:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ccc:	b299      	uxth	r1, r3
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cd2:	b2da      	uxtb	r2, r3
 8005cd4:	2380      	movs	r3, #128	@ 0x80
 8005cd6:	045b      	lsls	r3, r3, #17
 8005cd8:	68f8      	ldr	r0, [r7, #12]
 8005cda:	2400      	movs	r4, #0
 8005cdc:	9400      	str	r4, [sp, #0]
 8005cde:	f000 ffc5 	bl	8006c6c <I2C_TransferConfig>
 8005ce2:	e011      	b.n	8005d08 <I2C_Mem_ISR_DMA+0x100>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ce8:	b29a      	uxth	r2, r3
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cf2:	b299      	uxth	r1, r3
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cf8:	b2da      	uxtb	r2, r3
 8005cfa:	2380      	movs	r3, #128	@ 0x80
 8005cfc:	049b      	lsls	r3, r3, #18
 8005cfe:	68f8      	ldr	r0, [r7, #12]
 8005d00:	2400      	movs	r4, #0
 8005d02:	9400      	str	r4, [sp, #0]
 8005d04:	f000 ffb2 	bl	8006c6c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d0c:	b29a      	uxth	r2, r3
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d12:	1ad3      	subs	r3, r2, r3
 8005d14:	b29a      	uxth	r2, r3
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2241      	movs	r2, #65	@ 0x41
 8005d1e:	5c9b      	ldrb	r3, [r3, r2]
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	2b22      	cmp	r3, #34	@ 0x22
 8005d24:	d109      	bne.n	8005d3a <I2C_Mem_ISR_DMA+0x132>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2180      	movs	r1, #128	@ 0x80
 8005d32:	0209      	lsls	r1, r1, #8
 8005d34:	430a      	orrs	r2, r1
 8005d36:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005d38:	e084      	b.n	8005e44 <I2C_Mem_ISR_DMA+0x23c>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2180      	movs	r1, #128	@ 0x80
 8005d46:	01c9      	lsls	r1, r1, #7
 8005d48:	430a      	orrs	r2, r1
 8005d4a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005d4c:	e07a      	b.n	8005e44 <I2C_Mem_ISR_DMA+0x23c>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2140      	movs	r1, #64	@ 0x40
 8005d52:	0018      	movs	r0, r3
 8005d54:	f000 fd64 	bl	8006820 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8005d58:	e074      	b.n	8005e44 <I2C_Mem_ISR_DMA+0x23c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	2240      	movs	r2, #64	@ 0x40
 8005d5e:	4013      	ands	r3, r2
 8005d60:	d062      	beq.n	8005e28 <I2C_Mem_ISR_DMA+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2240      	movs	r2, #64	@ 0x40
 8005d66:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005d68:	d05e      	beq.n	8005e28 <I2C_Mem_ISR_DMA+0x220>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2101      	movs	r1, #1
 8005d6e:	0018      	movs	r0, r3
 8005d70:	f001 f840 	bl	8006df4 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2110      	movs	r1, #16
 8005d78:	0018      	movs	r0, r3
 8005d7a:	f000 ffb1 	bl	8006ce0 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2241      	movs	r2, #65	@ 0x41
 8005d82:	5c9b      	ldrb	r3, [r3, r2]
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	2b22      	cmp	r3, #34	@ 0x22
 8005d88:	d101      	bne.n	8005d8e <I2C_Mem_ISR_DMA+0x186>
    {
      direction = I2C_GENERATE_START_READ;
 8005d8a:	4b34      	ldr	r3, [pc, #208]	@ (8005e5c <I2C_Mem_ISR_DMA+0x254>)
 8005d8c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	2bff      	cmp	r3, #255	@ 0xff
 8005d96:	d911      	bls.n	8005dbc <I2C_Mem_ISR_DMA+0x1b4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	22ff      	movs	r2, #255	@ 0xff
 8005d9c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005da2:	b299      	uxth	r1, r3
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005da8:	b2da      	uxtb	r2, r3
 8005daa:	2380      	movs	r3, #128	@ 0x80
 8005dac:	045c      	lsls	r4, r3, #17
 8005dae:	68f8      	ldr	r0, [r7, #12]
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	9300      	str	r3, [sp, #0]
 8005db4:	0023      	movs	r3, r4
 8005db6:	f000 ff59 	bl	8006c6c <I2C_TransferConfig>
 8005dba:	e012      	b.n	8005de2 <I2C_Mem_ISR_DMA+0x1da>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dc0:	b29a      	uxth	r2, r3
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dca:	b299      	uxth	r1, r3
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dd0:	b2da      	uxtb	r2, r3
 8005dd2:	2380      	movs	r3, #128	@ 0x80
 8005dd4:	049c      	lsls	r4, r3, #18
 8005dd6:	68f8      	ldr	r0, [r7, #12]
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	9300      	str	r3, [sp, #0]
 8005ddc:	0023      	movs	r3, r4
 8005dde:	f000 ff45 	bl	8006c6c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005de6:	b29a      	uxth	r2, r3
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dec:	1ad3      	subs	r3, r2, r3
 8005dee:	b29a      	uxth	r2, r3
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2241      	movs	r2, #65	@ 0x41
 8005df8:	5c9b      	ldrb	r3, [r3, r2]
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	2b22      	cmp	r3, #34	@ 0x22
 8005dfe:	d109      	bne.n	8005e14 <I2C_Mem_ISR_DMA+0x20c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	2180      	movs	r1, #128	@ 0x80
 8005e0c:	0209      	lsls	r1, r1, #8
 8005e0e:	430a      	orrs	r2, r1
 8005e10:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005e12:	e017      	b.n	8005e44 <I2C_Mem_ISR_DMA+0x23c>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2180      	movs	r1, #128	@ 0x80
 8005e20:	01c9      	lsls	r1, r1, #7
 8005e22:	430a      	orrs	r2, r1
 8005e24:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005e26:	e00d      	b.n	8005e44 <I2C_Mem_ISR_DMA+0x23c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	2220      	movs	r2, #32
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	d009      	beq.n	8005e44 <I2C_Mem_ISR_DMA+0x23c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2220      	movs	r2, #32
 8005e34:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005e36:	d005      	beq.n	8005e44 <I2C_Mem_ISR_DMA+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8005e38:	68ba      	ldr	r2, [r7, #8]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	0011      	movs	r1, r2
 8005e3e:	0018      	movs	r0, r3
 8005e40:	f000 fa40 	bl	80062c4 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2240      	movs	r2, #64	@ 0x40
 8005e48:	2100      	movs	r1, #0
 8005e4a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e4c:	2300      	movs	r3, #0
}
 8005e4e:	0018      	movs	r0, r3
 8005e50:	46bd      	mov	sp, r7
 8005e52:	b007      	add	sp, #28
 8005e54:	bd90      	pop	{r4, r7, pc}
 8005e56:	46c0      	nop			@ (mov r8, r8)
 8005e58:	80002000 	.word	0x80002000
 8005e5c:	80002400 	.word	0x80002400

08005e60 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b088      	sub	sp, #32
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e70:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8005e72:	2300      	movs	r3, #0
 8005e74:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2240      	movs	r2, #64	@ 0x40
 8005e7a:	5c9b      	ldrb	r3, [r3, r2]
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d101      	bne.n	8005e84 <I2C_Slave_ISR_DMA+0x24>
 8005e80:	2302      	movs	r3, #2
 8005e82:	e0ce      	b.n	8006022 <I2C_Slave_ISR_DMA+0x1c2>
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2240      	movs	r2, #64	@ 0x40
 8005e88:	2101      	movs	r1, #1
 8005e8a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	2220      	movs	r2, #32
 8005e90:	4013      	ands	r3, r2
 8005e92:	d00a      	beq.n	8005eaa <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2220      	movs	r2, #32
 8005e98:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005e9a:	d006      	beq.n	8005eaa <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8005e9c:	68ba      	ldr	r2, [r7, #8]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	0011      	movs	r1, r2
 8005ea2:	0018      	movs	r0, r3
 8005ea4:	f000 fadc 	bl	8006460 <I2C_ITSlaveCplt>
 8005ea8:	e0b6      	b.n	8006018 <I2C_Slave_ISR_DMA+0x1b8>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	2210      	movs	r2, #16
 8005eae:	4013      	ands	r3, r2
 8005eb0:	d100      	bne.n	8005eb4 <I2C_Slave_ISR_DMA+0x54>
 8005eb2:	e0a3      	b.n	8005ffc <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2210      	movs	r2, #16
 8005eb8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005eba:	d100      	bne.n	8005ebe <I2C_Slave_ISR_DMA+0x5e>
 8005ebc:	e09e      	b.n	8005ffc <I2C_Slave_ISR_DMA+0x19c>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	2380      	movs	r3, #128	@ 0x80
 8005ec2:	01db      	lsls	r3, r3, #7
 8005ec4:	4013      	ands	r3, r2
 8005ec6:	d105      	bne.n	8005ed4 <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	2380      	movs	r3, #128	@ 0x80
 8005ecc:	021b      	lsls	r3, r3, #8
 8005ece:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005ed0:	d100      	bne.n	8005ed4 <I2C_Slave_ISR_DMA+0x74>
 8005ed2:	e08c      	b.n	8005fee <I2C_Slave_ISR_DMA+0x18e>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d00c      	beq.n	8005ef6 <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	2380      	movs	r3, #128	@ 0x80
 8005ee0:	021b      	lsls	r3, r3, #8
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	d007      	beq.n	8005ef6 <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d101      	bne.n	8005ef6 <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00c      	beq.n	8005f18 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	2380      	movs	r3, #128	@ 0x80
 8005f02:	01db      	lsls	r3, r3, #7
 8005f04:	4013      	ands	r3, r2
 8005f06:	d007      	beq.n	8005f18 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d101      	bne.n	8005f18 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 8005f14:	2301      	movs	r3, #1
 8005f16:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d12d      	bne.n	8005f7a <I2C_Slave_ISR_DMA+0x11a>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2241      	movs	r2, #65	@ 0x41
 8005f22:	5c9b      	ldrb	r3, [r3, r2]
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	2b28      	cmp	r3, #40	@ 0x28
 8005f28:	d10b      	bne.n	8005f42 <I2C_Slave_ISR_DMA+0xe2>
 8005f2a:	69ba      	ldr	r2, [r7, #24]
 8005f2c:	2380      	movs	r3, #128	@ 0x80
 8005f2e:	049b      	lsls	r3, r3, #18
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d106      	bne.n	8005f42 <I2C_Slave_ISR_DMA+0xe2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8005f34:	68ba      	ldr	r2, [r7, #8]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	0011      	movs	r1, r2
 8005f3a:	0018      	movs	r0, r3
 8005f3c:	f000 fc18 	bl	8006770 <I2C_ITListenCplt>
 8005f40:	e054      	b.n	8005fec <I2C_Slave_ISR_DMA+0x18c>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2241      	movs	r2, #65	@ 0x41
 8005f46:	5c9b      	ldrb	r3, [r3, r2]
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	2b29      	cmp	r3, #41	@ 0x29
 8005f4c:	d110      	bne.n	8005f70 <I2C_Slave_ISR_DMA+0x110>
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	4a36      	ldr	r2, [pc, #216]	@ (800602c <I2C_Slave_ISR_DMA+0x1cc>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d00c      	beq.n	8005f70 <I2C_Slave_ISR_DMA+0x110>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2210      	movs	r2, #16
 8005f5c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	0018      	movs	r0, r3
 8005f62:	f000 fd88 	bl	8006a76 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	0018      	movs	r0, r3
 8005f6a:	f000 f947 	bl	80061fc <I2C_ITSlaveSeqCplt>
 8005f6e:	e03d      	b.n	8005fec <I2C_Slave_ISR_DMA+0x18c>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	2210      	movs	r2, #16
 8005f76:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8005f78:	e03e      	b.n	8005ff8 <I2C_Slave_ISR_DMA+0x198>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2210      	movs	r2, #16
 8005f80:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f86:	2204      	movs	r2, #4
 8005f88:	431a      	orrs	r2, r3
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8005f8e:	2317      	movs	r3, #23
 8005f90:	18fb      	adds	r3, r7, r3
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	2141      	movs	r1, #65	@ 0x41
 8005f96:	5c52      	ldrb	r2, [r2, r1]
 8005f98:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d004      	beq.n	8005faa <I2C_Slave_ISR_DMA+0x14a>
 8005fa0:	69ba      	ldr	r2, [r7, #24]
 8005fa2:	2380      	movs	r3, #128	@ 0x80
 8005fa4:	045b      	lsls	r3, r3, #17
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d126      	bne.n	8005ff8 <I2C_Slave_ISR_DMA+0x198>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005faa:	2217      	movs	r2, #23
 8005fac:	18bb      	adds	r3, r7, r2
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	2b21      	cmp	r3, #33	@ 0x21
 8005fb2:	d003      	beq.n	8005fbc <I2C_Slave_ISR_DMA+0x15c>
 8005fb4:	18bb      	adds	r3, r7, r2
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	2b29      	cmp	r3, #41	@ 0x29
 8005fba:	d103      	bne.n	8005fc4 <I2C_Slave_ISR_DMA+0x164>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2221      	movs	r2, #33	@ 0x21
 8005fc0:	631a      	str	r2, [r3, #48]	@ 0x30
 8005fc2:	e00b      	b.n	8005fdc <I2C_Slave_ISR_DMA+0x17c>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005fc4:	2217      	movs	r2, #23
 8005fc6:	18bb      	adds	r3, r7, r2
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	2b22      	cmp	r3, #34	@ 0x22
 8005fcc:	d003      	beq.n	8005fd6 <I2C_Slave_ISR_DMA+0x176>
 8005fce:	18bb      	adds	r3, r7, r2
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	2b2a      	cmp	r3, #42	@ 0x2a
 8005fd4:	d102      	bne.n	8005fdc <I2C_Slave_ISR_DMA+0x17c>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2222      	movs	r2, #34	@ 0x22
 8005fda:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	0011      	movs	r1, r2
 8005fe4:	0018      	movs	r0, r3
 8005fe6:	f000 fc1b 	bl	8006820 <I2C_ITError>
      if (treatdmanack == 1U)
 8005fea:	e005      	b.n	8005ff8 <I2C_Slave_ISR_DMA+0x198>
 8005fec:	e004      	b.n	8005ff8 <I2C_Slave_ISR_DMA+0x198>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2210      	movs	r2, #16
 8005ff4:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005ff6:	e00f      	b.n	8006018 <I2C_Slave_ISR_DMA+0x1b8>
      if (treatdmanack == 1U)
 8005ff8:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005ffa:	e00d      	b.n	8006018 <I2C_Slave_ISR_DMA+0x1b8>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	2208      	movs	r2, #8
 8006000:	4013      	ands	r3, r2
 8006002:	d009      	beq.n	8006018 <I2C_Slave_ISR_DMA+0x1b8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2208      	movs	r2, #8
 8006008:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800600a:	d005      	beq.n	8006018 <I2C_Slave_ISR_DMA+0x1b8>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800600c:	68ba      	ldr	r2, [r7, #8]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	0011      	movs	r1, r2
 8006012:	0018      	movs	r0, r3
 8006014:	f000 f80c 	bl	8006030 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2240      	movs	r2, #64	@ 0x40
 800601c:	2100      	movs	r1, #0
 800601e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	0018      	movs	r0, r3
 8006024:	46bd      	mov	sp, r7
 8006026:	b008      	add	sp, #32
 8006028:	bd80      	pop	{r7, pc}
 800602a:	46c0      	nop			@ (mov r8, r8)
 800602c:	ffff0000 	.word	0xffff0000

08006030 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006030:	b5b0      	push	{r4, r5, r7, lr}
 8006032:	b084      	sub	sp, #16
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2241      	movs	r2, #65	@ 0x41
 800603e:	5c9b      	ldrb	r3, [r3, r2]
 8006040:	b2db      	uxtb	r3, r3
 8006042:	001a      	movs	r2, r3
 8006044:	2328      	movs	r3, #40	@ 0x28
 8006046:	4013      	ands	r3, r2
 8006048:	2b28      	cmp	r3, #40	@ 0x28
 800604a:	d000      	beq.n	800604e <I2C_ITAddrCplt+0x1e>
 800604c:	e088      	b.n	8006160 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	699b      	ldr	r3, [r3, #24]
 8006054:	0c1b      	lsrs	r3, r3, #16
 8006056:	b2da      	uxtb	r2, r3
 8006058:	250f      	movs	r5, #15
 800605a:	197b      	adds	r3, r7, r5
 800605c:	2101      	movs	r1, #1
 800605e:	400a      	ands	r2, r1
 8006060:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	699b      	ldr	r3, [r3, #24]
 8006068:	0c1b      	lsrs	r3, r3, #16
 800606a:	b29a      	uxth	r2, r3
 800606c:	200c      	movs	r0, #12
 800606e:	183b      	adds	r3, r7, r0
 8006070:	21fe      	movs	r1, #254	@ 0xfe
 8006072:	400a      	ands	r2, r1
 8006074:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	b29a      	uxth	r2, r3
 800607e:	240a      	movs	r4, #10
 8006080:	193b      	adds	r3, r7, r4
 8006082:	0592      	lsls	r2, r2, #22
 8006084:	0d92      	lsrs	r2, r2, #22
 8006086:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	b29a      	uxth	r2, r3
 8006090:	2308      	movs	r3, #8
 8006092:	18fb      	adds	r3, r7, r3
 8006094:	21fe      	movs	r1, #254	@ 0xfe
 8006096:	400a      	ands	r2, r1
 8006098:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	68db      	ldr	r3, [r3, #12]
 800609e:	2b02      	cmp	r3, #2
 80060a0:	d148      	bne.n	8006134 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80060a2:	0021      	movs	r1, r4
 80060a4:	187b      	adds	r3, r7, r1
 80060a6:	881b      	ldrh	r3, [r3, #0]
 80060a8:	09db      	lsrs	r3, r3, #7
 80060aa:	b29a      	uxth	r2, r3
 80060ac:	183b      	adds	r3, r7, r0
 80060ae:	881b      	ldrh	r3, [r3, #0]
 80060b0:	4053      	eors	r3, r2
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	001a      	movs	r2, r3
 80060b6:	2306      	movs	r3, #6
 80060b8:	4013      	ands	r3, r2
 80060ba:	d120      	bne.n	80060fe <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 80060bc:	183b      	adds	r3, r7, r0
 80060be:	187a      	adds	r2, r7, r1
 80060c0:	8812      	ldrh	r2, [r2, #0]
 80060c2:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060c8:	1c5a      	adds	r2, r3, #1
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060d2:	2b02      	cmp	r3, #2
 80060d4:	d14c      	bne.n	8006170 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2208      	movs	r2, #8
 80060e2:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2240      	movs	r2, #64	@ 0x40
 80060e8:	2100      	movs	r1, #0
 80060ea:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80060ec:	183b      	adds	r3, r7, r0
 80060ee:	881a      	ldrh	r2, [r3, #0]
 80060f0:	197b      	adds	r3, r7, r5
 80060f2:	7819      	ldrb	r1, [r3, #0]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	0018      	movs	r0, r3
 80060f8:	f7ff fa35 	bl	8005566 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80060fc:	e038      	b.n	8006170 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 80060fe:	240c      	movs	r4, #12
 8006100:	193b      	adds	r3, r7, r4
 8006102:	2208      	movs	r2, #8
 8006104:	18ba      	adds	r2, r7, r2
 8006106:	8812      	ldrh	r2, [r2, #0]
 8006108:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800610a:	2380      	movs	r3, #128	@ 0x80
 800610c:	021a      	lsls	r2, r3, #8
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	0011      	movs	r1, r2
 8006112:	0018      	movs	r0, r3
 8006114:	f000 fe6e 	bl	8006df4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2240      	movs	r2, #64	@ 0x40
 800611c:	2100      	movs	r1, #0
 800611e:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006120:	193b      	adds	r3, r7, r4
 8006122:	881a      	ldrh	r2, [r3, #0]
 8006124:	230f      	movs	r3, #15
 8006126:	18fb      	adds	r3, r7, r3
 8006128:	7819      	ldrb	r1, [r3, #0]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	0018      	movs	r0, r3
 800612e:	f7ff fa1a 	bl	8005566 <HAL_I2C_AddrCallback>
}
 8006132:	e01d      	b.n	8006170 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006134:	2380      	movs	r3, #128	@ 0x80
 8006136:	021a      	lsls	r2, r3, #8
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	0011      	movs	r1, r2
 800613c:	0018      	movs	r0, r3
 800613e:	f000 fe59 	bl	8006df4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2240      	movs	r2, #64	@ 0x40
 8006146:	2100      	movs	r1, #0
 8006148:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800614a:	230c      	movs	r3, #12
 800614c:	18fb      	adds	r3, r7, r3
 800614e:	881a      	ldrh	r2, [r3, #0]
 8006150:	230f      	movs	r3, #15
 8006152:	18fb      	adds	r3, r7, r3
 8006154:	7819      	ldrb	r1, [r3, #0]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	0018      	movs	r0, r3
 800615a:	f7ff fa04 	bl	8005566 <HAL_I2C_AddrCallback>
}
 800615e:	e007      	b.n	8006170 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	2208      	movs	r2, #8
 8006166:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2240      	movs	r2, #64	@ 0x40
 800616c:	2100      	movs	r1, #0
 800616e:	5499      	strb	r1, [r3, r2]
}
 8006170:	46c0      	nop			@ (mov r8, r8)
 8006172:	46bd      	mov	sp, r7
 8006174:	b004      	add	sp, #16
 8006176:	bdb0      	pop	{r4, r5, r7, pc}

08006178 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b082      	sub	sp, #8
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2242      	movs	r2, #66	@ 0x42
 8006184:	2100      	movs	r1, #0
 8006186:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2241      	movs	r2, #65	@ 0x41
 800618c:	5c9b      	ldrb	r3, [r3, r2]
 800618e:	b2db      	uxtb	r3, r3
 8006190:	2b21      	cmp	r3, #33	@ 0x21
 8006192:	d117      	bne.n	80061c4 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2241      	movs	r2, #65	@ 0x41
 8006198:	2120      	movs	r1, #32
 800619a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2211      	movs	r2, #17
 80061a0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2101      	movs	r1, #1
 80061ac:	0018      	movs	r0, r3
 80061ae:	f000 fe21 	bl	8006df4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2240      	movs	r2, #64	@ 0x40
 80061b6:	2100      	movs	r1, #0
 80061b8:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	0018      	movs	r0, r3
 80061be:	f7fa f935 	bl	800042c <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80061c2:	e016      	b.n	80061f2 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2241      	movs	r2, #65	@ 0x41
 80061c8:	2120      	movs	r1, #32
 80061ca:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2212      	movs	r2, #18
 80061d0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2102      	movs	r1, #2
 80061dc:	0018      	movs	r0, r3
 80061de:	f000 fe09 	bl	8006df4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2240      	movs	r2, #64	@ 0x40
 80061e6:	2100      	movs	r1, #0
 80061e8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	0018      	movs	r0, r3
 80061ee:	f7fa f92b 	bl	8000448 <HAL_I2C_MasterRxCpltCallback>
}
 80061f2:	46c0      	nop			@ (mov r8, r8)
 80061f4:	46bd      	mov	sp, r7
 80061f6:	b002      	add	sp, #8
 80061f8:	bd80      	pop	{r7, pc}
	...

080061fc <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2242      	movs	r2, #66	@ 0x42
 8006210:	2100      	movs	r1, #0
 8006212:	5499      	strb	r1, [r3, r2]

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	2380      	movs	r3, #128	@ 0x80
 8006218:	01db      	lsls	r3, r3, #7
 800621a:	4013      	ands	r3, r2
 800621c:	d008      	beq.n	8006230 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4924      	ldr	r1, [pc, #144]	@ (80062bc <I2C_ITSlaveSeqCplt+0xc0>)
 800622a:	400a      	ands	r2, r1
 800622c:	601a      	str	r2, [r3, #0]
 800622e:	e00c      	b.n	800624a <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006230:	68fa      	ldr	r2, [r7, #12]
 8006232:	2380      	movs	r3, #128	@ 0x80
 8006234:	021b      	lsls	r3, r3, #8
 8006236:	4013      	ands	r3, r2
 8006238:	d007      	beq.n	800624a <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	491e      	ldr	r1, [pc, #120]	@ (80062c0 <I2C_ITSlaveSeqCplt+0xc4>)
 8006246:	400a      	ands	r2, r1
 8006248:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2241      	movs	r2, #65	@ 0x41
 800624e:	5c9b      	ldrb	r3, [r3, r2]
 8006250:	b2db      	uxtb	r3, r3
 8006252:	2b29      	cmp	r3, #41	@ 0x29
 8006254:	d114      	bne.n	8006280 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2241      	movs	r2, #65	@ 0x41
 800625a:	2128      	movs	r1, #40	@ 0x28
 800625c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2221      	movs	r2, #33	@ 0x21
 8006262:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2101      	movs	r1, #1
 8006268:	0018      	movs	r0, r3
 800626a:	f000 fdc3 	bl	8006df4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2240      	movs	r2, #64	@ 0x40
 8006272:	2100      	movs	r1, #0
 8006274:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	0018      	movs	r0, r3
 800627a:	f7ff f964 	bl	8005546 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800627e:	e019      	b.n	80062b4 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2241      	movs	r2, #65	@ 0x41
 8006284:	5c9b      	ldrb	r3, [r3, r2]
 8006286:	b2db      	uxtb	r3, r3
 8006288:	2b2a      	cmp	r3, #42	@ 0x2a
 800628a:	d113      	bne.n	80062b4 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2241      	movs	r2, #65	@ 0x41
 8006290:	2128      	movs	r1, #40	@ 0x28
 8006292:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2222      	movs	r2, #34	@ 0x22
 8006298:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2102      	movs	r1, #2
 800629e:	0018      	movs	r0, r3
 80062a0:	f000 fda8 	bl	8006df4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2240      	movs	r2, #64	@ 0x40
 80062a8:	2100      	movs	r1, #0
 80062aa:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	0018      	movs	r0, r3
 80062b0:	f7ff f951 	bl	8005556 <HAL_I2C_SlaveRxCpltCallback>
}
 80062b4:	46c0      	nop			@ (mov r8, r8)
 80062b6:	46bd      	mov	sp, r7
 80062b8:	b004      	add	sp, #16
 80062ba:	bd80      	pop	{r7, pc}
 80062bc:	ffffbfff 	.word	0xffffbfff
 80062c0:	ffff7fff 	.word	0xffff7fff

080062c4 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b086      	sub	sp, #24
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	2220      	movs	r2, #32
 80062d8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2241      	movs	r2, #65	@ 0x41
 80062de:	5c9b      	ldrb	r3, [r3, r2]
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	2b21      	cmp	r3, #33	@ 0x21
 80062e4:	d108      	bne.n	80062f8 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2101      	movs	r1, #1
 80062ea:	0018      	movs	r0, r3
 80062ec:	f000 fd82 	bl	8006df4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2211      	movs	r2, #17
 80062f4:	631a      	str	r2, [r3, #48]	@ 0x30
 80062f6:	e00d      	b.n	8006314 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2241      	movs	r2, #65	@ 0x41
 80062fc:	5c9b      	ldrb	r3, [r3, r2]
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	2b22      	cmp	r3, #34	@ 0x22
 8006302:	d107      	bne.n	8006314 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2102      	movs	r1, #2
 8006308:	0018      	movs	r0, r3
 800630a:	f000 fd73 	bl	8006df4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2212      	movs	r2, #18
 8006312:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	685a      	ldr	r2, [r3, #4]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	494e      	ldr	r1, [pc, #312]	@ (8006458 <I2C_ITMasterCplt+0x194>)
 8006320:	400a      	ands	r2, r1
 8006322:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2200      	movs	r2, #0
 8006328:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4a4b      	ldr	r2, [pc, #300]	@ (800645c <I2C_ITMasterCplt+0x198>)
 800632e:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	2210      	movs	r2, #16
 8006334:	4013      	ands	r3, r2
 8006336:	d009      	beq.n	800634c <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2210      	movs	r2, #16
 800633e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006344:	2204      	movs	r2, #4
 8006346:	431a      	orrs	r2, r3
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2241      	movs	r2, #65	@ 0x41
 8006350:	5c9b      	ldrb	r3, [r3, r2]
 8006352:	b2db      	uxtb	r3, r3
 8006354:	2b60      	cmp	r3, #96	@ 0x60
 8006356:	d109      	bne.n	800636c <I2C_ITMasterCplt+0xa8>
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	2204      	movs	r2, #4
 800635c:	4013      	ands	r3, r2
 800635e:	d005      	beq.n	800636c <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006366:	b2db      	uxtb	r3, r3
 8006368:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800636a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	0018      	movs	r0, r3
 8006370:	f000 fb81 	bl	8006a76 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006378:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2241      	movs	r2, #65	@ 0x41
 800637e:	5c9b      	ldrb	r3, [r3, r2]
 8006380:	b2db      	uxtb	r3, r3
 8006382:	2b60      	cmp	r3, #96	@ 0x60
 8006384:	d002      	beq.n	800638c <I2C_ITMasterCplt+0xc8>
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d007      	beq.n	800639c <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	0011      	movs	r1, r2
 8006394:	0018      	movs	r0, r3
 8006396:	f000 fa43 	bl	8006820 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800639a:	e058      	b.n	800644e <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2241      	movs	r2, #65	@ 0x41
 80063a0:	5c9b      	ldrb	r3, [r3, r2]
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	2b21      	cmp	r3, #33	@ 0x21
 80063a6:	d126      	bne.n	80063f6 <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2241      	movs	r2, #65	@ 0x41
 80063ac:	2120      	movs	r1, #32
 80063ae:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2242      	movs	r2, #66	@ 0x42
 80063ba:	5c9b      	ldrb	r3, [r3, r2]
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	2b40      	cmp	r3, #64	@ 0x40
 80063c0:	d10c      	bne.n	80063dc <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2242      	movs	r2, #66	@ 0x42
 80063c6:	2100      	movs	r1, #0
 80063c8:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2240      	movs	r2, #64	@ 0x40
 80063ce:	2100      	movs	r1, #0
 80063d0:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	0018      	movs	r0, r3
 80063d6:	f7fa f80d 	bl	80003f4 <HAL_I2C_MemTxCpltCallback>
}
 80063da:	e038      	b.n	800644e <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2242      	movs	r2, #66	@ 0x42
 80063e0:	2100      	movs	r1, #0
 80063e2:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2240      	movs	r2, #64	@ 0x40
 80063e8:	2100      	movs	r1, #0
 80063ea:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	0018      	movs	r0, r3
 80063f0:	f7fa f81c 	bl	800042c <HAL_I2C_MasterTxCpltCallback>
}
 80063f4:	e02b      	b.n	800644e <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2241      	movs	r2, #65	@ 0x41
 80063fa:	5c9b      	ldrb	r3, [r3, r2]
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	2b22      	cmp	r3, #34	@ 0x22
 8006400:	d125      	bne.n	800644e <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2241      	movs	r2, #65	@ 0x41
 8006406:	2120      	movs	r1, #32
 8006408:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2242      	movs	r2, #66	@ 0x42
 8006414:	5c9b      	ldrb	r3, [r3, r2]
 8006416:	b2db      	uxtb	r3, r3
 8006418:	2b40      	cmp	r3, #64	@ 0x40
 800641a:	d10c      	bne.n	8006436 <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2242      	movs	r2, #66	@ 0x42
 8006420:	2100      	movs	r1, #0
 8006422:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2240      	movs	r2, #64	@ 0x40
 8006428:	2100      	movs	r1, #0
 800642a:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	0018      	movs	r0, r3
 8006430:	f7f9 ffee 	bl	8000410 <HAL_I2C_MemRxCpltCallback>
}
 8006434:	e00b      	b.n	800644e <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2242      	movs	r2, #66	@ 0x42
 800643a:	2100      	movs	r1, #0
 800643c:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2240      	movs	r2, #64	@ 0x40
 8006442:	2100      	movs	r1, #0
 8006444:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	0018      	movs	r0, r3
 800644a:	f7f9 fffd 	bl	8000448 <HAL_I2C_MasterRxCpltCallback>
}
 800644e:	46c0      	nop			@ (mov r8, r8)
 8006450:	46bd      	mov	sp, r7
 8006452:	b006      	add	sp, #24
 8006454:	bd80      	pop	{r7, pc}
 8006456:	46c0      	nop			@ (mov r8, r8)
 8006458:	fe00e800 	.word	0xfe00e800
 800645c:	ffff0000 	.word	0xffff0000

08006460 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b086      	sub	sp, #24
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800647a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800647c:	200b      	movs	r0, #11
 800647e:	183b      	adds	r3, r7, r0
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	2141      	movs	r1, #65	@ 0x41
 8006484:	5c52      	ldrb	r2, [r2, r1]
 8006486:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2220      	movs	r2, #32
 800648e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006490:	183b      	adds	r3, r7, r0
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	2b21      	cmp	r3, #33	@ 0x21
 8006496:	d003      	beq.n	80064a0 <I2C_ITSlaveCplt+0x40>
 8006498:	183b      	adds	r3, r7, r0
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	2b29      	cmp	r3, #41	@ 0x29
 800649e:	d109      	bne.n	80064b4 <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80064a0:	4aac      	ldr	r2, [pc, #688]	@ (8006754 <I2C_ITSlaveCplt+0x2f4>)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	0011      	movs	r1, r2
 80064a6:	0018      	movs	r0, r3
 80064a8:	f000 fca4 	bl	8006df4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2221      	movs	r2, #33	@ 0x21
 80064b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80064b2:	e020      	b.n	80064f6 <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80064b4:	220b      	movs	r2, #11
 80064b6:	18bb      	adds	r3, r7, r2
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	2b22      	cmp	r3, #34	@ 0x22
 80064bc:	d003      	beq.n	80064c6 <I2C_ITSlaveCplt+0x66>
 80064be:	18bb      	adds	r3, r7, r2
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80064c4:	d109      	bne.n	80064da <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80064c6:	4aa4      	ldr	r2, [pc, #656]	@ (8006758 <I2C_ITSlaveCplt+0x2f8>)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	0011      	movs	r1, r2
 80064cc:	0018      	movs	r0, r3
 80064ce:	f000 fc91 	bl	8006df4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2222      	movs	r2, #34	@ 0x22
 80064d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80064d8:	e00d      	b.n	80064f6 <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80064da:	230b      	movs	r3, #11
 80064dc:	18fb      	adds	r3, r7, r3
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	2b28      	cmp	r3, #40	@ 0x28
 80064e2:	d108      	bne.n	80064f6 <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80064e4:	4a9d      	ldr	r2, [pc, #628]	@ (800675c <I2C_ITSlaveCplt+0x2fc>)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	0011      	movs	r1, r2
 80064ea:	0018      	movs	r0, r3
 80064ec:	f000 fc82 	bl	8006df4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	685a      	ldr	r2, [r3, #4]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	2180      	movs	r1, #128	@ 0x80
 8006502:	0209      	lsls	r1, r1, #8
 8006504:	430a      	orrs	r2, r1
 8006506:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	685a      	ldr	r2, [r3, #4]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4993      	ldr	r1, [pc, #588]	@ (8006760 <I2C_ITSlaveCplt+0x300>)
 8006514:	400a      	ands	r2, r1
 8006516:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	0018      	movs	r0, r3
 800651c:	f000 faab 	bl	8006a76 <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006520:	693a      	ldr	r2, [r7, #16]
 8006522:	2380      	movs	r3, #128	@ 0x80
 8006524:	01db      	lsls	r3, r3, #7
 8006526:	4013      	ands	r3, r2
 8006528:	d013      	beq.n	8006552 <I2C_ITSlaveCplt+0xf2>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	498b      	ldr	r1, [pc, #556]	@ (8006764 <I2C_ITSlaveCplt+0x304>)
 8006536:	400a      	ands	r2, r1
 8006538:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800653e:	2b00      	cmp	r3, #0
 8006540:	d01f      	beq.n	8006582 <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	b29a      	uxth	r2, r3
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006550:	e017      	b.n	8006582 <I2C_ITSlaveCplt+0x122>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006552:	693a      	ldr	r2, [r7, #16]
 8006554:	2380      	movs	r3, #128	@ 0x80
 8006556:	021b      	lsls	r3, r3, #8
 8006558:	4013      	ands	r3, r2
 800655a:	d012      	beq.n	8006582 <I2C_ITSlaveCplt+0x122>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4980      	ldr	r1, [pc, #512]	@ (8006768 <I2C_ITSlaveCplt+0x308>)
 8006568:	400a      	ands	r2, r1
 800656a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006570:	2b00      	cmp	r3, #0
 8006572:	d006      	beq.n	8006582 <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	b29a      	uxth	r2, r3
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	2204      	movs	r2, #4
 8006586:	4013      	ands	r3, r2
 8006588:	d020      	beq.n	80065cc <I2C_ITSlaveCplt+0x16c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	2204      	movs	r2, #4
 800658e:	4393      	bics	r3, r2
 8006590:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800659c:	b2d2      	uxtb	r2, r2
 800659e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065a4:	1c5a      	adds	r2, r3, #1
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d00c      	beq.n	80065cc <I2C_ITSlaveCplt+0x16c>
    {
      hi2c->XferSize--;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065b6:	3b01      	subs	r3, #1
 80065b8:	b29a      	uxth	r2, r3
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	3b01      	subs	r3, #1
 80065c6:	b29a      	uxth	r2, r3
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d005      	beq.n	80065e2 <I2C_ITSlaveCplt+0x182>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065da:	2204      	movs	r2, #4
 80065dc:	431a      	orrs	r2, r3
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	2210      	movs	r2, #16
 80065e6:	4013      	ands	r3, r2
 80065e8:	d04f      	beq.n	800668a <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	2210      	movs	r2, #16
 80065ee:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80065f0:	d04b      	beq.n	800668a <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d12d      	bne.n	8006658 <I2C_ITSlaveCplt+0x1f8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2241      	movs	r2, #65	@ 0x41
 8006600:	5c9b      	ldrb	r3, [r3, r2]
 8006602:	b2db      	uxtb	r3, r3
 8006604:	2b28      	cmp	r3, #40	@ 0x28
 8006606:	d10b      	bne.n	8006620 <I2C_ITSlaveCplt+0x1c0>
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	2380      	movs	r3, #128	@ 0x80
 800660c:	049b      	lsls	r3, r3, #18
 800660e:	429a      	cmp	r2, r3
 8006610:	d106      	bne.n	8006620 <I2C_ITSlaveCplt+0x1c0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006612:	697a      	ldr	r2, [r7, #20]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	0011      	movs	r1, r2
 8006618:	0018      	movs	r0, r3
 800661a:	f000 f8a9 	bl	8006770 <I2C_ITListenCplt>
 800661e:	e034      	b.n	800668a <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2241      	movs	r2, #65	@ 0x41
 8006624:	5c9b      	ldrb	r3, [r3, r2]
 8006626:	b2db      	uxtb	r3, r3
 8006628:	2b29      	cmp	r3, #41	@ 0x29
 800662a:	d110      	bne.n	800664e <I2C_ITSlaveCplt+0x1ee>
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	4a4f      	ldr	r2, [pc, #316]	@ (800676c <I2C_ITSlaveCplt+0x30c>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d00c      	beq.n	800664e <I2C_ITSlaveCplt+0x1ee>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	2210      	movs	r2, #16
 800663a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	0018      	movs	r0, r3
 8006640:	f000 fa19 	bl	8006a76 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	0018      	movs	r0, r3
 8006648:	f7ff fdd8 	bl	80061fc <I2C_ITSlaveSeqCplt>
 800664c:	e01d      	b.n	800668a <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	2210      	movs	r2, #16
 8006654:	61da      	str	r2, [r3, #28]
 8006656:	e018      	b.n	800668a <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	2210      	movs	r2, #16
 800665e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006664:	2204      	movs	r2, #4
 8006666:	431a      	orrs	r2, r3
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d004      	beq.n	800667c <I2C_ITSlaveCplt+0x21c>
 8006672:	68fa      	ldr	r2, [r7, #12]
 8006674:	2380      	movs	r3, #128	@ 0x80
 8006676:	045b      	lsls	r3, r3, #17
 8006678:	429a      	cmp	r2, r3
 800667a:	d106      	bne.n	800668a <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	0011      	movs	r1, r2
 8006684:	0018      	movs	r0, r3
 8006686:	f000 f8cb 	bl	8006820 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2242      	movs	r2, #66	@ 0x42
 800668e:	2100      	movs	r1, #0
 8006690:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2200      	movs	r2, #0
 8006696:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800669c:	2b00      	cmp	r3, #0
 800669e:	d013      	beq.n	80066c8 <I2C_ITSlaveCplt+0x268>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	0011      	movs	r1, r2
 80066a8:	0018      	movs	r0, r3
 80066aa:	f000 f8b9 	bl	8006820 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2241      	movs	r2, #65	@ 0x41
 80066b2:	5c9b      	ldrb	r3, [r3, r2]
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	2b28      	cmp	r3, #40	@ 0x28
 80066b8:	d147      	bne.n	800674a <I2C_ITSlaveCplt+0x2ea>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80066ba:	697a      	ldr	r2, [r7, #20]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	0011      	movs	r1, r2
 80066c0:	0018      	movs	r0, r3
 80066c2:	f000 f855 	bl	8006770 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80066c6:	e040      	b.n	800674a <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066cc:	4a27      	ldr	r2, [pc, #156]	@ (800676c <I2C_ITSlaveCplt+0x30c>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d016      	beq.n	8006700 <I2C_ITSlaveCplt+0x2a0>
    I2C_ITSlaveSeqCplt(hi2c);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	0018      	movs	r0, r3
 80066d6:	f7ff fd91 	bl	80061fc <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4a23      	ldr	r2, [pc, #140]	@ (800676c <I2C_ITSlaveCplt+0x30c>)
 80066de:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2241      	movs	r2, #65	@ 0x41
 80066e4:	2120      	movs	r1, #32
 80066e6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2240      	movs	r2, #64	@ 0x40
 80066f2:	2100      	movs	r1, #0
 80066f4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	0018      	movs	r0, r3
 80066fa:	f7fe ff44 	bl	8005586 <HAL_I2C_ListenCpltCallback>
}
 80066fe:	e024      	b.n	800674a <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2241      	movs	r2, #65	@ 0x41
 8006704:	5c9b      	ldrb	r3, [r3, r2]
 8006706:	b2db      	uxtb	r3, r3
 8006708:	2b22      	cmp	r3, #34	@ 0x22
 800670a:	d10f      	bne.n	800672c <I2C_ITSlaveCplt+0x2cc>
    hi2c->State = HAL_I2C_STATE_READY;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2241      	movs	r2, #65	@ 0x41
 8006710:	2120      	movs	r1, #32
 8006712:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2240      	movs	r2, #64	@ 0x40
 800671e:	2100      	movs	r1, #0
 8006720:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	0018      	movs	r0, r3
 8006726:	f7fe ff16 	bl	8005556 <HAL_I2C_SlaveRxCpltCallback>
}
 800672a:	e00e      	b.n	800674a <I2C_ITSlaveCplt+0x2ea>
    hi2c->State = HAL_I2C_STATE_READY;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2241      	movs	r2, #65	@ 0x41
 8006730:	2120      	movs	r1, #32
 8006732:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2240      	movs	r2, #64	@ 0x40
 800673e:	2100      	movs	r1, #0
 8006740:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	0018      	movs	r0, r3
 8006746:	f7fe fefe 	bl	8005546 <HAL_I2C_SlaveTxCpltCallback>
}
 800674a:	46c0      	nop			@ (mov r8, r8)
 800674c:	46bd      	mov	sp, r7
 800674e:	b006      	add	sp, #24
 8006750:	bd80      	pop	{r7, pc}
 8006752:	46c0      	nop			@ (mov r8, r8)
 8006754:	00008001 	.word	0x00008001
 8006758:	00008002 	.word	0x00008002
 800675c:	00008003 	.word	0x00008003
 8006760:	fe00e800 	.word	0xfe00e800
 8006764:	ffffbfff 	.word	0xffffbfff
 8006768:	ffff7fff 	.word	0xffff7fff
 800676c:	ffff0000 	.word	0xffff0000

08006770 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b082      	sub	sp, #8
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a26      	ldr	r2, [pc, #152]	@ (8006818 <I2C_ITListenCplt+0xa8>)
 800677e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2241      	movs	r2, #65	@ 0x41
 800678a:	2120      	movs	r1, #32
 800678c:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2242      	movs	r2, #66	@ 0x42
 8006792:	2100      	movs	r1, #0
 8006794:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2200      	movs	r2, #0
 800679a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	2204      	movs	r2, #4
 80067a0:	4013      	ands	r3, r2
 80067a2:	d022      	beq.n	80067ea <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ae:	b2d2      	uxtb	r2, r2
 80067b0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067b6:	1c5a      	adds	r2, r3, #1
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d012      	beq.n	80067ea <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067c8:	3b01      	subs	r3, #1
 80067ca:	b29a      	uxth	r2, r3
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	3b01      	subs	r3, #1
 80067d8:	b29a      	uxth	r2, r3
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067e2:	2204      	movs	r2, #4
 80067e4:	431a      	orrs	r2, r3
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80067ea:	4a0c      	ldr	r2, [pc, #48]	@ (800681c <I2C_ITListenCplt+0xac>)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	0011      	movs	r1, r2
 80067f0:	0018      	movs	r0, r3
 80067f2:	f000 faff 	bl	8006df4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	2210      	movs	r2, #16
 80067fc:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2240      	movs	r2, #64	@ 0x40
 8006802:	2100      	movs	r1, #0
 8006804:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	0018      	movs	r0, r3
 800680a:	f7fe febc 	bl	8005586 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800680e:	46c0      	nop			@ (mov r8, r8)
 8006810:	46bd      	mov	sp, r7
 8006812:	b002      	add	sp, #8
 8006814:	bd80      	pop	{r7, pc}
 8006816:	46c0      	nop			@ (mov r8, r8)
 8006818:	ffff0000 	.word	0xffff0000
 800681c:	00008003 	.word	0x00008003

08006820 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800682a:	200f      	movs	r0, #15
 800682c:	183b      	adds	r3, r7, r0
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	2141      	movs	r1, #65	@ 0x41
 8006832:	5c52      	ldrb	r2, [r2, r1]
 8006834:	701a      	strb	r2, [r3, #0]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2242      	movs	r2, #66	@ 0x42
 800683a:	2100      	movs	r1, #0
 800683c:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4a72      	ldr	r2, [pc, #456]	@ (8006a0c <I2C_ITError+0x1ec>)
 8006842:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	431a      	orrs	r2, r3
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006856:	183b      	adds	r3, r7, r0
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	2b28      	cmp	r3, #40	@ 0x28
 800685c:	d007      	beq.n	800686e <I2C_ITError+0x4e>
 800685e:	183b      	adds	r3, r7, r0
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	2b29      	cmp	r3, #41	@ 0x29
 8006864:	d003      	beq.n	800686e <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8006866:	183b      	adds	r3, r7, r0
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	2b2a      	cmp	r3, #42	@ 0x2a
 800686c:	d10c      	bne.n	8006888 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2103      	movs	r1, #3
 8006872:	0018      	movs	r0, r3
 8006874:	f000 fabe 	bl	8006df4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2241      	movs	r2, #65	@ 0x41
 800687c:	2128      	movs	r1, #40	@ 0x28
 800687e:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a63      	ldr	r2, [pc, #396]	@ (8006a10 <I2C_ITError+0x1f0>)
 8006884:	635a      	str	r2, [r3, #52]	@ 0x34
 8006886:	e032      	b.n	80068ee <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006888:	4a62      	ldr	r2, [pc, #392]	@ (8006a14 <I2C_ITError+0x1f4>)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	0011      	movs	r1, r2
 800688e:	0018      	movs	r0, r3
 8006890:	f000 fab0 	bl	8006df4 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	0018      	movs	r0, r3
 8006898:	f000 f8ed 	bl	8006a76 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2241      	movs	r2, #65	@ 0x41
 80068a0:	5c9b      	ldrb	r3, [r3, r2]
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	2b60      	cmp	r3, #96	@ 0x60
 80068a6:	d01f      	beq.n	80068e8 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2241      	movs	r2, #65	@ 0x41
 80068ac:	2120      	movs	r1, #32
 80068ae:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	699b      	ldr	r3, [r3, #24]
 80068b6:	2220      	movs	r2, #32
 80068b8:	4013      	ands	r3, r2
 80068ba:	2b20      	cmp	r3, #32
 80068bc:	d114      	bne.n	80068e8 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	699b      	ldr	r3, [r3, #24]
 80068c4:	2210      	movs	r2, #16
 80068c6:	4013      	ands	r3, r2
 80068c8:	2b10      	cmp	r3, #16
 80068ca:	d109      	bne.n	80068e0 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	2210      	movs	r2, #16
 80068d2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068d8:	2204      	movs	r2, #4
 80068da:	431a      	orrs	r2, r3
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2220      	movs	r2, #32
 80068e6:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068f2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d03b      	beq.n	8006974 <I2C_ITError+0x154>
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	2b11      	cmp	r3, #17
 8006900:	d002      	beq.n	8006908 <I2C_ITError+0xe8>
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	2b21      	cmp	r3, #33	@ 0x21
 8006906:	d135      	bne.n	8006974 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	2380      	movs	r3, #128	@ 0x80
 8006910:	01db      	lsls	r3, r3, #7
 8006912:	401a      	ands	r2, r3
 8006914:	2380      	movs	r3, #128	@ 0x80
 8006916:	01db      	lsls	r3, r3, #7
 8006918:	429a      	cmp	r2, r3
 800691a:	d107      	bne.n	800692c <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	493c      	ldr	r1, [pc, #240]	@ (8006a18 <I2C_ITError+0x1f8>)
 8006928:	400a      	ands	r2, r1
 800692a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006930:	0018      	movs	r0, r3
 8006932:	f7fd fe31 	bl	8004598 <HAL_DMA_GetState>
 8006936:	0003      	movs	r3, r0
 8006938:	2b01      	cmp	r3, #1
 800693a:	d016      	beq.n	800696a <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006940:	4a36      	ldr	r2, [pc, #216]	@ (8006a1c <I2C_ITError+0x1fc>)
 8006942:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2240      	movs	r2, #64	@ 0x40
 8006948:	2100      	movs	r1, #0
 800694a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006950:	0018      	movs	r0, r3
 8006952:	f7fd fcf5 	bl	8004340 <HAL_DMA_Abort_IT>
 8006956:	1e03      	subs	r3, r0, #0
 8006958:	d051      	beq.n	80069fe <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800695e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006964:	0018      	movs	r0, r3
 8006966:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006968:	e049      	b.n	80069fe <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	0018      	movs	r0, r3
 800696e:	f000 f859 	bl	8006a24 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006972:	e044      	b.n	80069fe <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006978:	2b00      	cmp	r3, #0
 800697a:	d03b      	beq.n	80069f4 <I2C_ITError+0x1d4>
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	2b12      	cmp	r3, #18
 8006980:	d002      	beq.n	8006988 <I2C_ITError+0x168>
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	2b22      	cmp	r3, #34	@ 0x22
 8006986:	d135      	bne.n	80069f4 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	2380      	movs	r3, #128	@ 0x80
 8006990:	021b      	lsls	r3, r3, #8
 8006992:	401a      	ands	r2, r3
 8006994:	2380      	movs	r3, #128	@ 0x80
 8006996:	021b      	lsls	r3, r3, #8
 8006998:	429a      	cmp	r2, r3
 800699a:	d107      	bne.n	80069ac <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	491e      	ldr	r1, [pc, #120]	@ (8006a20 <I2C_ITError+0x200>)
 80069a8:	400a      	ands	r2, r1
 80069aa:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069b0:	0018      	movs	r0, r3
 80069b2:	f7fd fdf1 	bl	8004598 <HAL_DMA_GetState>
 80069b6:	0003      	movs	r3, r0
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d016      	beq.n	80069ea <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069c0:	4a16      	ldr	r2, [pc, #88]	@ (8006a1c <I2C_ITError+0x1fc>)
 80069c2:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2240      	movs	r2, #64	@ 0x40
 80069c8:	2100      	movs	r1, #0
 80069ca:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069d0:	0018      	movs	r0, r3
 80069d2:	f7fd fcb5 	bl	8004340 <HAL_DMA_Abort_IT>
 80069d6:	1e03      	subs	r3, r0, #0
 80069d8:	d013      	beq.n	8006a02 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069e4:	0018      	movs	r0, r3
 80069e6:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80069e8:	e00b      	b.n	8006a02 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	0018      	movs	r0, r3
 80069ee:	f000 f819 	bl	8006a24 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80069f2:	e006      	b.n	8006a02 <I2C_ITError+0x1e2>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	0018      	movs	r0, r3
 80069f8:	f000 f814 	bl	8006a24 <I2C_TreatErrorCallback>
  }
}
 80069fc:	e002      	b.n	8006a04 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80069fe:	46c0      	nop			@ (mov r8, r8)
 8006a00:	e000      	b.n	8006a04 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006a02:	46c0      	nop			@ (mov r8, r8)
}
 8006a04:	46c0      	nop			@ (mov r8, r8)
 8006a06:	46bd      	mov	sp, r7
 8006a08:	b004      	add	sp, #16
 8006a0a:	bd80      	pop	{r7, pc}
 8006a0c:	ffff0000 	.word	0xffff0000
 8006a10:	08005811 	.word	0x08005811
 8006a14:	00008003 	.word	0x00008003
 8006a18:	ffffbfff 	.word	0xffffbfff
 8006a1c:	08006c2f 	.word	0x08006c2f
 8006a20:	ffff7fff 	.word	0xffff7fff

08006a24 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b082      	sub	sp, #8
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2241      	movs	r2, #65	@ 0x41
 8006a30:	5c9b      	ldrb	r3, [r3, r2]
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	2b60      	cmp	r3, #96	@ 0x60
 8006a36:	d10f      	bne.n	8006a58 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2241      	movs	r2, #65	@ 0x41
 8006a3c:	2120      	movs	r1, #32
 8006a3e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2240      	movs	r2, #64	@ 0x40
 8006a4a:	2100      	movs	r1, #0
 8006a4c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	0018      	movs	r0, r3
 8006a52:	f7fe fda0 	bl	8005596 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006a56:	e00a      	b.n	8006a6e <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2240      	movs	r2, #64	@ 0x40
 8006a62:	2100      	movs	r1, #0
 8006a64:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	0018      	movs	r0, r3
 8006a6a:	f7f9 fcfb 	bl	8000464 <HAL_I2C_ErrorCallback>
}
 8006a6e:	46c0      	nop			@ (mov r8, r8)
 8006a70:	46bd      	mov	sp, r7
 8006a72:	b002      	add	sp, #8
 8006a74:	bd80      	pop	{r7, pc}

08006a76 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006a76:	b580      	push	{r7, lr}
 8006a78:	b082      	sub	sp, #8
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	699b      	ldr	r3, [r3, #24]
 8006a84:	2202      	movs	r2, #2
 8006a86:	4013      	ands	r3, r2
 8006a88:	2b02      	cmp	r3, #2
 8006a8a:	d103      	bne.n	8006a94 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	2200      	movs	r2, #0
 8006a92:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	699b      	ldr	r3, [r3, #24]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	4013      	ands	r3, r2
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d007      	beq.n	8006ab2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	699a      	ldr	r2, [r3, #24]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	2101      	movs	r1, #1
 8006aae:	430a      	orrs	r2, r1
 8006ab0:	619a      	str	r2, [r3, #24]
  }
}
 8006ab2:	46c0      	nop			@ (mov r8, r8)
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	b002      	add	sp, #8
 8006ab8:	bd80      	pop	{r7, pc}
	...

08006abc <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ac8:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4920      	ldr	r1, [pc, #128]	@ (8006b58 <I2C_DMAMasterTransmitCplt+0x9c>)
 8006ad6:	400a      	ands	r2, r1
 8006ad8:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d105      	bne.n	8006af0 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2120      	movs	r1, #32
 8006ae8:	0018      	movs	r0, r3
 8006aea:	f000 f8f9 	bl	8006ce0 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8006aee:	e02e      	b.n	8006b4e <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006af4:	68fa      	ldr	r2, [r7, #12]
 8006af6:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8006af8:	189a      	adds	r2, r3, r2
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	2bff      	cmp	r3, #255	@ 0xff
 8006b06:	d903      	bls.n	8006b10 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	22ff      	movs	r2, #255	@ 0xff
 8006b0c:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006b0e:	e004      	b.n	8006b1a <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b14:	b29a      	uxth	r2, r3
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b22:	0019      	movs	r1, r3
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	3328      	adds	r3, #40	@ 0x28
 8006b2a:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8006b30:	f7fd fb1c 	bl	800416c <HAL_DMA_Start_IT>
 8006b34:	1e03      	subs	r3, r0, #0
 8006b36:	d005      	beq.n	8006b44 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2110      	movs	r1, #16
 8006b3c:	0018      	movs	r0, r3
 8006b3e:	f7ff fe6f 	bl	8006820 <I2C_ITError>
}
 8006b42:	e004      	b.n	8006b4e <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2140      	movs	r1, #64	@ 0x40
 8006b48:	0018      	movs	r0, r3
 8006b4a:	f000 f8c9 	bl	8006ce0 <I2C_Enable_IRQ>
}
 8006b4e:	46c0      	nop			@ (mov r8, r8)
 8006b50:	46bd      	mov	sp, r7
 8006b52:	b004      	add	sp, #16
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	46c0      	nop			@ (mov r8, r8)
 8006b58:	ffffbfff 	.word	0xffffbfff

08006b5c <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b084      	sub	sp, #16
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b68:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4920      	ldr	r1, [pc, #128]	@ (8006bf8 <I2C_DMAMasterReceiveCplt+0x9c>)
 8006b76:	400a      	ands	r2, r1
 8006b78:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d105      	bne.n	8006b90 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2120      	movs	r1, #32
 8006b88:	0018      	movs	r0, r3
 8006b8a:	f000 f8a9 	bl	8006ce0 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8006b8e:	e02e      	b.n	8006bee <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b94:	68fa      	ldr	r2, [r7, #12]
 8006b96:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8006b98:	189a      	adds	r2, r3, r2
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	2bff      	cmp	r3, #255	@ 0xff
 8006ba6:	d903      	bls.n	8006bb0 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	22ff      	movs	r2, #255	@ 0xff
 8006bac:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006bae:	e004      	b.n	8006bba <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bb4:	b29a      	uxth	r2, r3
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	3324      	adds	r3, #36	@ 0x24
 8006bc4:	0019      	movs	r1, r3
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bca:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8006bd0:	f7fd facc 	bl	800416c <HAL_DMA_Start_IT>
 8006bd4:	1e03      	subs	r3, r0, #0
 8006bd6:	d005      	beq.n	8006be4 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2110      	movs	r1, #16
 8006bdc:	0018      	movs	r0, r3
 8006bde:	f7ff fe1f 	bl	8006820 <I2C_ITError>
}
 8006be2:	e004      	b.n	8006bee <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2140      	movs	r1, #64	@ 0x40
 8006be8:	0018      	movs	r0, r3
 8006bea:	f000 f879 	bl	8006ce0 <I2C_Enable_IRQ>
}
 8006bee:	46c0      	nop			@ (mov r8, r8)
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	b004      	add	sp, #16
 8006bf4:	bd80      	pop	{r7, pc}
 8006bf6:	46c0      	nop			@ (mov r8, r8)
 8006bf8:	ffff7fff 	.word	0xffff7fff

08006bfc <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b084      	sub	sp, #16
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c08:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	685a      	ldr	r2, [r3, #4]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	2180      	movs	r1, #128	@ 0x80
 8006c16:	0209      	lsls	r1, r1, #8
 8006c18:	430a      	orrs	r2, r1
 8006c1a:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2110      	movs	r1, #16
 8006c20:	0018      	movs	r0, r3
 8006c22:	f7ff fdfd 	bl	8006820 <I2C_ITError>
}
 8006c26:	46c0      	nop			@ (mov r8, r8)
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	b004      	add	sp, #16
 8006c2c:	bd80      	pop	{r7, pc}

08006c2e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006c2e:	b580      	push	{r7, lr}
 8006c30:	b084      	sub	sp, #16
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c3a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d003      	beq.n	8006c4c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c48:	2200      	movs	r2, #0
 8006c4a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d003      	beq.n	8006c5c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c58:	2200      	movs	r2, #0
 8006c5a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	0018      	movs	r0, r3
 8006c60:	f7ff fee0 	bl	8006a24 <I2C_TreatErrorCallback>
}
 8006c64:	46c0      	nop			@ (mov r8, r8)
 8006c66:	46bd      	mov	sp, r7
 8006c68:	b004      	add	sp, #16
 8006c6a:	bd80      	pop	{r7, pc}

08006c6c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006c6c:	b590      	push	{r4, r7, lr}
 8006c6e:	b087      	sub	sp, #28
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	0008      	movs	r0, r1
 8006c76:	0011      	movs	r1, r2
 8006c78:	607b      	str	r3, [r7, #4]
 8006c7a:	240a      	movs	r4, #10
 8006c7c:	193b      	adds	r3, r7, r4
 8006c7e:	1c02      	adds	r2, r0, #0
 8006c80:	801a      	strh	r2, [r3, #0]
 8006c82:	2009      	movs	r0, #9
 8006c84:	183b      	adds	r3, r7, r0
 8006c86:	1c0a      	adds	r2, r1, #0
 8006c88:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006c8a:	193b      	adds	r3, r7, r4
 8006c8c:	881b      	ldrh	r3, [r3, #0]
 8006c8e:	059b      	lsls	r3, r3, #22
 8006c90:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006c92:	183b      	adds	r3, r7, r0
 8006c94:	781b      	ldrb	r3, [r3, #0]
 8006c96:	0419      	lsls	r1, r3, #16
 8006c98:	23ff      	movs	r3, #255	@ 0xff
 8006c9a:	041b      	lsls	r3, r3, #16
 8006c9c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006c9e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	005b      	lsls	r3, r3, #1
 8006caa:	085b      	lsrs	r3, r3, #1
 8006cac:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006cb6:	0d51      	lsrs	r1, r2, #21
 8006cb8:	2280      	movs	r2, #128	@ 0x80
 8006cba:	00d2      	lsls	r2, r2, #3
 8006cbc:	400a      	ands	r2, r1
 8006cbe:	4907      	ldr	r1, [pc, #28]	@ (8006cdc <I2C_TransferConfig+0x70>)
 8006cc0:	430a      	orrs	r2, r1
 8006cc2:	43d2      	mvns	r2, r2
 8006cc4:	401a      	ands	r2, r3
 8006cc6:	0011      	movs	r1, r2
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	697a      	ldr	r2, [r7, #20]
 8006cce:	430a      	orrs	r2, r1
 8006cd0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006cd2:	46c0      	nop			@ (mov r8, r8)
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	b007      	add	sp, #28
 8006cd8:	bd90      	pop	{r4, r7, pc}
 8006cda:	46c0      	nop			@ (mov r8, r8)
 8006cdc:	03ff63ff 	.word	0x03ff63ff

08006ce0 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	000a      	movs	r2, r1
 8006cea:	1cbb      	adds	r3, r7, #2
 8006cec:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	60fb      	str	r3, [r7, #12]

#if defined(HAL_DMA_MODULE_ENABLED)
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006cf6:	4b3c      	ldr	r3, [pc, #240]	@ (8006de8 <I2C_Enable_IRQ+0x108>)
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d035      	beq.n	8006d68 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8006d00:	4b3a      	ldr	r3, [pc, #232]	@ (8006dec <I2C_Enable_IRQ+0x10c>)
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d030      	beq.n	8006d68 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8006d0a:	4b39      	ldr	r3, [pc, #228]	@ (8006df0 <I2C_Enable_IRQ+0x110>)
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d02b      	beq.n	8006d68 <I2C_Enable_IRQ+0x88>
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006d10:	1cbb      	adds	r3, r7, #2
 8006d12:	2200      	movs	r2, #0
 8006d14:	5e9b      	ldrsh	r3, [r3, r2]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	da03      	bge.n	8006d22 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	22b8      	movs	r2, #184	@ 0xb8
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006d22:	1cbb      	adds	r3, r7, #2
 8006d24:	881b      	ldrh	r3, [r3, #0]
 8006d26:	2201      	movs	r2, #1
 8006d28:	4013      	ands	r3, r2
 8006d2a:	d003      	beq.n	8006d34 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	22f2      	movs	r2, #242	@ 0xf2
 8006d30:	4313      	orrs	r3, r2
 8006d32:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006d34:	1cbb      	adds	r3, r7, #2
 8006d36:	881b      	ldrh	r3, [r3, #0]
 8006d38:	2202      	movs	r2, #2
 8006d3a:	4013      	ands	r3, r2
 8006d3c:	d003      	beq.n	8006d46 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	22f4      	movs	r2, #244	@ 0xf4
 8006d42:	4313      	orrs	r3, r2
 8006d44:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006d46:	1cbb      	adds	r3, r7, #2
 8006d48:	881b      	ldrh	r3, [r3, #0]
 8006d4a:	2b10      	cmp	r3, #16
 8006d4c:	d103      	bne.n	8006d56 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2290      	movs	r2, #144	@ 0x90
 8006d52:	4313      	orrs	r3, r2
 8006d54:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006d56:	1cbb      	adds	r3, r7, #2
 8006d58:	881b      	ldrh	r3, [r3, #0]
 8006d5a:	2b20      	cmp	r3, #32
 8006d5c:	d137      	bne.n	8006dce <I2C_Enable_IRQ+0xee>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2220      	movs	r2, #32
 8006d62:	4313      	orrs	r3, r2
 8006d64:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006d66:	e032      	b.n	8006dce <I2C_Enable_IRQ+0xee>
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006d68:	1cbb      	adds	r3, r7, #2
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	5e9b      	ldrsh	r3, [r3, r2]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	da03      	bge.n	8006d7a <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	22b8      	movs	r2, #184	@ 0xb8
 8006d76:	4313      	orrs	r3, r2
 8006d78:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006d7a:	1cbb      	adds	r3, r7, #2
 8006d7c:	881b      	ldrh	r3, [r3, #0]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	4013      	ands	r3, r2
 8006d82:	d003      	beq.n	8006d8c <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	22f2      	movs	r2, #242	@ 0xf2
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006d8c:	1cbb      	adds	r3, r7, #2
 8006d8e:	881b      	ldrh	r3, [r3, #0]
 8006d90:	2202      	movs	r2, #2
 8006d92:	4013      	ands	r3, r2
 8006d94:	d003      	beq.n	8006d9e <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	22f4      	movs	r2, #244	@ 0xf4
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006d9e:	1cbb      	adds	r3, r7, #2
 8006da0:	881b      	ldrh	r3, [r3, #0]
 8006da2:	2b10      	cmp	r3, #16
 8006da4:	d103      	bne.n	8006dae <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2290      	movs	r2, #144	@ 0x90
 8006daa:	4313      	orrs	r3, r2
 8006dac:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006dae:	1cbb      	adds	r3, r7, #2
 8006db0:	881b      	ldrh	r3, [r3, #0]
 8006db2:	2b20      	cmp	r3, #32
 8006db4:	d103      	bne.n	8006dbe <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2260      	movs	r2, #96	@ 0x60
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006dbe:	1cbb      	adds	r3, r7, #2
 8006dc0:	881b      	ldrh	r3, [r3, #0]
 8006dc2:	2b40      	cmp	r3, #64	@ 0x40
 8006dc4:	d103      	bne.n	8006dce <I2C_Enable_IRQ+0xee>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2240      	movs	r2, #64	@ 0x40
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	60fb      	str	r3, [r7, #12]
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	6819      	ldr	r1, [r3, #0]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	68fa      	ldr	r2, [r7, #12]
 8006dda:	430a      	orrs	r2, r1
 8006ddc:	601a      	str	r2, [r3, #0]
}
 8006dde:	46c0      	nop			@ (mov r8, r8)
 8006de0:	46bd      	mov	sp, r7
 8006de2:	b004      	add	sp, #16
 8006de4:	bd80      	pop	{r7, pc}
 8006de6:	46c0      	nop			@ (mov r8, r8)
 8006de8:	08005a11 	.word	0x08005a11
 8006dec:	08005e61 	.word	0x08005e61
 8006df0:	08005c09 	.word	0x08005c09

08006df4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b084      	sub	sp, #16
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	000a      	movs	r2, r1
 8006dfe:	1cbb      	adds	r3, r7, #2
 8006e00:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8006e02:	2300      	movs	r3, #0
 8006e04:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006e06:	1cbb      	adds	r3, r7, #2
 8006e08:	881b      	ldrh	r3, [r3, #0]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	4013      	ands	r3, r2
 8006e0e:	d010      	beq.n	8006e32 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2242      	movs	r2, #66	@ 0x42
 8006e14:	4313      	orrs	r3, r2
 8006e16:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2241      	movs	r2, #65	@ 0x41
 8006e1c:	5c9b      	ldrb	r3, [r3, r2]
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	001a      	movs	r2, r3
 8006e22:	2328      	movs	r3, #40	@ 0x28
 8006e24:	4013      	ands	r3, r2
 8006e26:	2b28      	cmp	r3, #40	@ 0x28
 8006e28:	d003      	beq.n	8006e32 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	22b0      	movs	r2, #176	@ 0xb0
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006e32:	1cbb      	adds	r3, r7, #2
 8006e34:	881b      	ldrh	r3, [r3, #0]
 8006e36:	2202      	movs	r2, #2
 8006e38:	4013      	ands	r3, r2
 8006e3a:	d010      	beq.n	8006e5e <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2244      	movs	r2, #68	@ 0x44
 8006e40:	4313      	orrs	r3, r2
 8006e42:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2241      	movs	r2, #65	@ 0x41
 8006e48:	5c9b      	ldrb	r3, [r3, r2]
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	001a      	movs	r2, r3
 8006e4e:	2328      	movs	r3, #40	@ 0x28
 8006e50:	4013      	ands	r3, r2
 8006e52:	2b28      	cmp	r3, #40	@ 0x28
 8006e54:	d003      	beq.n	8006e5e <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	22b0      	movs	r2, #176	@ 0xb0
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006e5e:	1cbb      	adds	r3, r7, #2
 8006e60:	2200      	movs	r2, #0
 8006e62:	5e9b      	ldrsh	r3, [r3, r2]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	da03      	bge.n	8006e70 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	22b8      	movs	r2, #184	@ 0xb8
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006e70:	1cbb      	adds	r3, r7, #2
 8006e72:	881b      	ldrh	r3, [r3, #0]
 8006e74:	2b10      	cmp	r3, #16
 8006e76:	d103      	bne.n	8006e80 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2290      	movs	r2, #144	@ 0x90
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006e80:	1cbb      	adds	r3, r7, #2
 8006e82:	881b      	ldrh	r3, [r3, #0]
 8006e84:	2b20      	cmp	r3, #32
 8006e86:	d103      	bne.n	8006e90 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2220      	movs	r2, #32
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006e90:	1cbb      	adds	r3, r7, #2
 8006e92:	881b      	ldrh	r3, [r3, #0]
 8006e94:	2b40      	cmp	r3, #64	@ 0x40
 8006e96:	d103      	bne.n	8006ea0 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2240      	movs	r2, #64	@ 0x40
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	43d9      	mvns	r1, r3
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	400a      	ands	r2, r1
 8006eb0:	601a      	str	r2, [r3, #0]
}
 8006eb2:	46c0      	nop			@ (mov r8, r8)
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	b004      	add	sp, #16
 8006eb8:	bd80      	pop	{r7, pc}
	...

08006ebc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2241      	movs	r2, #65	@ 0x41
 8006eca:	5c9b      	ldrb	r3, [r3, r2]
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	2b20      	cmp	r3, #32
 8006ed0:	d138      	bne.n	8006f44 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2240      	movs	r2, #64	@ 0x40
 8006ed6:	5c9b      	ldrb	r3, [r3, r2]
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d101      	bne.n	8006ee0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006edc:	2302      	movs	r3, #2
 8006ede:	e032      	b.n	8006f46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2240      	movs	r2, #64	@ 0x40
 8006ee4:	2101      	movs	r1, #1
 8006ee6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2241      	movs	r2, #65	@ 0x41
 8006eec:	2124      	movs	r1, #36	@ 0x24
 8006eee:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	2101      	movs	r1, #1
 8006efc:	438a      	bics	r2, r1
 8006efe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4911      	ldr	r1, [pc, #68]	@ (8006f50 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8006f0c:	400a      	ands	r2, r1
 8006f0e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	6819      	ldr	r1, [r3, #0]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	683a      	ldr	r2, [r7, #0]
 8006f1c:	430a      	orrs	r2, r1
 8006f1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	2101      	movs	r1, #1
 8006f2c:	430a      	orrs	r2, r1
 8006f2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2241      	movs	r2, #65	@ 0x41
 8006f34:	2120      	movs	r1, #32
 8006f36:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2240      	movs	r2, #64	@ 0x40
 8006f3c:	2100      	movs	r1, #0
 8006f3e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006f40:	2300      	movs	r3, #0
 8006f42:	e000      	b.n	8006f46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006f44:	2302      	movs	r3, #2
  }
}
 8006f46:	0018      	movs	r0, r3
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	b002      	add	sp, #8
 8006f4c:	bd80      	pop	{r7, pc}
 8006f4e:	46c0      	nop			@ (mov r8, r8)
 8006f50:	ffffefff 	.word	0xffffefff

08006f54 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
 8006f5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2241      	movs	r2, #65	@ 0x41
 8006f62:	5c9b      	ldrb	r3, [r3, r2]
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	2b20      	cmp	r3, #32
 8006f68:	d139      	bne.n	8006fde <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2240      	movs	r2, #64	@ 0x40
 8006f6e:	5c9b      	ldrb	r3, [r3, r2]
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d101      	bne.n	8006f78 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006f74:	2302      	movs	r3, #2
 8006f76:	e033      	b.n	8006fe0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2240      	movs	r2, #64	@ 0x40
 8006f7c:	2101      	movs	r1, #1
 8006f7e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2241      	movs	r2, #65	@ 0x41
 8006f84:	2124      	movs	r1, #36	@ 0x24
 8006f86:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	681a      	ldr	r2, [r3, #0]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	2101      	movs	r1, #1
 8006f94:	438a      	bics	r2, r1
 8006f96:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	4a11      	ldr	r2, [pc, #68]	@ (8006fe8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8006fa4:	4013      	ands	r3, r2
 8006fa6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	021b      	lsls	r3, r3, #8
 8006fac:	68fa      	ldr	r2, [r7, #12]
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	68fa      	ldr	r2, [r7, #12]
 8006fb8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	681a      	ldr	r2, [r3, #0]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	2101      	movs	r1, #1
 8006fc6:	430a      	orrs	r2, r1
 8006fc8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2241      	movs	r2, #65	@ 0x41
 8006fce:	2120      	movs	r1, #32
 8006fd0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2240      	movs	r2, #64	@ 0x40
 8006fd6:	2100      	movs	r1, #0
 8006fd8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	e000      	b.n	8006fe0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006fde:	2302      	movs	r3, #2
  }
}
 8006fe0:	0018      	movs	r0, r3
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	b004      	add	sp, #16
 8006fe6:	bd80      	pop	{r7, pc}
 8006fe8:	fffff0ff 	.word	0xfffff0ff

08006fec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b086      	sub	sp, #24
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d101      	bne.n	8006ffe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e20f      	b.n	800741e <HAL_RCC_OscConfig+0x432>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	2201      	movs	r2, #1
 8007004:	4013      	ands	r3, r2
 8007006:	d100      	bne.n	800700a <HAL_RCC_OscConfig+0x1e>
 8007008:	e069      	b.n	80070de <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800700a:	4bc8      	ldr	r3, [pc, #800]	@ (800732c <HAL_RCC_OscConfig+0x340>)
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	2238      	movs	r2, #56	@ 0x38
 8007010:	4013      	ands	r3, r2
 8007012:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	2b08      	cmp	r3, #8
 8007018:	d105      	bne.n	8007026 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d15d      	bne.n	80070de <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8007022:	2301      	movs	r3, #1
 8007024:	e1fb      	b.n	800741e <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	685a      	ldr	r2, [r3, #4]
 800702a:	2380      	movs	r3, #128	@ 0x80
 800702c:	025b      	lsls	r3, r3, #9
 800702e:	429a      	cmp	r2, r3
 8007030:	d107      	bne.n	8007042 <HAL_RCC_OscConfig+0x56>
 8007032:	4bbe      	ldr	r3, [pc, #760]	@ (800732c <HAL_RCC_OscConfig+0x340>)
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	4bbd      	ldr	r3, [pc, #756]	@ (800732c <HAL_RCC_OscConfig+0x340>)
 8007038:	2180      	movs	r1, #128	@ 0x80
 800703a:	0249      	lsls	r1, r1, #9
 800703c:	430a      	orrs	r2, r1
 800703e:	601a      	str	r2, [r3, #0]
 8007040:	e020      	b.n	8007084 <HAL_RCC_OscConfig+0x98>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	685a      	ldr	r2, [r3, #4]
 8007046:	23a0      	movs	r3, #160	@ 0xa0
 8007048:	02db      	lsls	r3, r3, #11
 800704a:	429a      	cmp	r2, r3
 800704c:	d10e      	bne.n	800706c <HAL_RCC_OscConfig+0x80>
 800704e:	4bb7      	ldr	r3, [pc, #732]	@ (800732c <HAL_RCC_OscConfig+0x340>)
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	4bb6      	ldr	r3, [pc, #728]	@ (800732c <HAL_RCC_OscConfig+0x340>)
 8007054:	2180      	movs	r1, #128	@ 0x80
 8007056:	02c9      	lsls	r1, r1, #11
 8007058:	430a      	orrs	r2, r1
 800705a:	601a      	str	r2, [r3, #0]
 800705c:	4bb3      	ldr	r3, [pc, #716]	@ (800732c <HAL_RCC_OscConfig+0x340>)
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	4bb2      	ldr	r3, [pc, #712]	@ (800732c <HAL_RCC_OscConfig+0x340>)
 8007062:	2180      	movs	r1, #128	@ 0x80
 8007064:	0249      	lsls	r1, r1, #9
 8007066:	430a      	orrs	r2, r1
 8007068:	601a      	str	r2, [r3, #0]
 800706a:	e00b      	b.n	8007084 <HAL_RCC_OscConfig+0x98>
 800706c:	4baf      	ldr	r3, [pc, #700]	@ (800732c <HAL_RCC_OscConfig+0x340>)
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	4bae      	ldr	r3, [pc, #696]	@ (800732c <HAL_RCC_OscConfig+0x340>)
 8007072:	49af      	ldr	r1, [pc, #700]	@ (8007330 <HAL_RCC_OscConfig+0x344>)
 8007074:	400a      	ands	r2, r1
 8007076:	601a      	str	r2, [r3, #0]
 8007078:	4bac      	ldr	r3, [pc, #688]	@ (800732c <HAL_RCC_OscConfig+0x340>)
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	4bab      	ldr	r3, [pc, #684]	@ (800732c <HAL_RCC_OscConfig+0x340>)
 800707e:	49ad      	ldr	r1, [pc, #692]	@ (8007334 <HAL_RCC_OscConfig+0x348>)
 8007080:	400a      	ands	r2, r1
 8007082:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d014      	beq.n	80070b6 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800708c:	f7fc fe2e 	bl	8003cec <HAL_GetTick>
 8007090:	0003      	movs	r3, r0
 8007092:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007094:	e008      	b.n	80070a8 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8007096:	f7fc fe29 	bl	8003cec <HAL_GetTick>
 800709a:	0002      	movs	r2, r0
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	1ad3      	subs	r3, r2, r3
 80070a0:	2b64      	cmp	r3, #100	@ 0x64
 80070a2:	d901      	bls.n	80070a8 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80070a4:	2303      	movs	r3, #3
 80070a6:	e1ba      	b.n	800741e <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80070a8:	4ba0      	ldr	r3, [pc, #640]	@ (800732c <HAL_RCC_OscConfig+0x340>)
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	2380      	movs	r3, #128	@ 0x80
 80070ae:	029b      	lsls	r3, r3, #10
 80070b0:	4013      	ands	r3, r2
 80070b2:	d0f0      	beq.n	8007096 <HAL_RCC_OscConfig+0xaa>
 80070b4:	e013      	b.n	80070de <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070b6:	f7fc fe19 	bl	8003cec <HAL_GetTick>
 80070ba:	0003      	movs	r3, r0
 80070bc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80070be:	e008      	b.n	80070d2 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80070c0:	f7fc fe14 	bl	8003cec <HAL_GetTick>
 80070c4:	0002      	movs	r2, r0
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	1ad3      	subs	r3, r2, r3
 80070ca:	2b64      	cmp	r3, #100	@ 0x64
 80070cc:	d901      	bls.n	80070d2 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 80070ce:	2303      	movs	r3, #3
 80070d0:	e1a5      	b.n	800741e <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80070d2:	4b96      	ldr	r3, [pc, #600]	@ (800732c <HAL_RCC_OscConfig+0x340>)
 80070d4:	681a      	ldr	r2, [r3, #0]
 80070d6:	2380      	movs	r3, #128	@ 0x80
 80070d8:	029b      	lsls	r3, r3, #10
 80070da:	4013      	ands	r3, r2
 80070dc:	d1f0      	bne.n	80070c0 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	2202      	movs	r2, #2
 80070e4:	4013      	ands	r3, r2
 80070e6:	d100      	bne.n	80070ea <HAL_RCC_OscConfig+0xfe>
 80070e8:	e086      	b.n	80071f8 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80070ea:	4b90      	ldr	r3, [pc, #576]	@ (800732c <HAL_RCC_OscConfig+0x340>)
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	2238      	movs	r2, #56	@ 0x38
 80070f0:	4013      	ands	r3, r2
 80070f2:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d12f      	bne.n	800715a <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	68db      	ldr	r3, [r3, #12]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d101      	bne.n	8007106 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	e18b      	b.n	800741e <HAL_RCC_OscConfig+0x432>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007106:	4b89      	ldr	r3, [pc, #548]	@ (800732c <HAL_RCC_OscConfig+0x340>)
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	4a8b      	ldr	r2, [pc, #556]	@ (8007338 <HAL_RCC_OscConfig+0x34c>)
 800710c:	4013      	ands	r3, r2
 800710e:	0019      	movs	r1, r3
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	695b      	ldr	r3, [r3, #20]
 8007114:	021a      	lsls	r2, r3, #8
 8007116:	4b85      	ldr	r3, [pc, #532]	@ (800732c <HAL_RCC_OscConfig+0x340>)
 8007118:	430a      	orrs	r2, r1
 800711a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d112      	bne.n	8007148 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8007122:	4b82      	ldr	r3, [pc, #520]	@ (800732c <HAL_RCC_OscConfig+0x340>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a85      	ldr	r2, [pc, #532]	@ (800733c <HAL_RCC_OscConfig+0x350>)
 8007128:	4013      	ands	r3, r2
 800712a:	0019      	movs	r1, r3
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	691a      	ldr	r2, [r3, #16]
 8007130:	4b7e      	ldr	r3, [pc, #504]	@ (800732c <HAL_RCC_OscConfig+0x340>)
 8007132:	430a      	orrs	r2, r1
 8007134:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8007136:	4b7d      	ldr	r3, [pc, #500]	@ (800732c <HAL_RCC_OscConfig+0x340>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	0adb      	lsrs	r3, r3, #11
 800713c:	2207      	movs	r2, #7
 800713e:	4013      	ands	r3, r2
 8007140:	4a7f      	ldr	r2, [pc, #508]	@ (8007340 <HAL_RCC_OscConfig+0x354>)
 8007142:	40da      	lsrs	r2, r3
 8007144:	4b7f      	ldr	r3, [pc, #508]	@ (8007344 <HAL_RCC_OscConfig+0x358>)
 8007146:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007148:	4b7f      	ldr	r3, [pc, #508]	@ (8007348 <HAL_RCC_OscConfig+0x35c>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	0018      	movs	r0, r3
 800714e:	f7fc fd71 	bl	8003c34 <HAL_InitTick>
 8007152:	1e03      	subs	r3, r0, #0
 8007154:	d050      	beq.n	80071f8 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8007156:	2301      	movs	r3, #1
 8007158:	e161      	b.n	800741e <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	68db      	ldr	r3, [r3, #12]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d030      	beq.n	80071c4 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8007162:	4b72      	ldr	r3, [pc, #456]	@ (800732c <HAL_RCC_OscConfig+0x340>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a75      	ldr	r2, [pc, #468]	@ (800733c <HAL_RCC_OscConfig+0x350>)
 8007168:	4013      	ands	r3, r2
 800716a:	0019      	movs	r1, r3
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	691a      	ldr	r2, [r3, #16]
 8007170:	4b6e      	ldr	r3, [pc, #440]	@ (800732c <HAL_RCC_OscConfig+0x340>)
 8007172:	430a      	orrs	r2, r1
 8007174:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8007176:	4b6d      	ldr	r3, [pc, #436]	@ (800732c <HAL_RCC_OscConfig+0x340>)
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	4b6c      	ldr	r3, [pc, #432]	@ (800732c <HAL_RCC_OscConfig+0x340>)
 800717c:	2180      	movs	r1, #128	@ 0x80
 800717e:	0049      	lsls	r1, r1, #1
 8007180:	430a      	orrs	r2, r1
 8007182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007184:	f7fc fdb2 	bl	8003cec <HAL_GetTick>
 8007188:	0003      	movs	r3, r0
 800718a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800718c:	e008      	b.n	80071a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800718e:	f7fc fdad 	bl	8003cec <HAL_GetTick>
 8007192:	0002      	movs	r2, r0
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	1ad3      	subs	r3, r2, r3
 8007198:	2b02      	cmp	r3, #2
 800719a:	d901      	bls.n	80071a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800719c:	2303      	movs	r3, #3
 800719e:	e13e      	b.n	800741e <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80071a0:	4b62      	ldr	r3, [pc, #392]	@ (800732c <HAL_RCC_OscConfig+0x340>)
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	2380      	movs	r3, #128	@ 0x80
 80071a6:	00db      	lsls	r3, r3, #3
 80071a8:	4013      	ands	r3, r2
 80071aa:	d0f0      	beq.n	800718e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071ac:	4b5f      	ldr	r3, [pc, #380]	@ (800732c <HAL_RCC_OscConfig+0x340>)
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	4a61      	ldr	r2, [pc, #388]	@ (8007338 <HAL_RCC_OscConfig+0x34c>)
 80071b2:	4013      	ands	r3, r2
 80071b4:	0019      	movs	r1, r3
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	695b      	ldr	r3, [r3, #20]
 80071ba:	021a      	lsls	r2, r3, #8
 80071bc:	4b5b      	ldr	r3, [pc, #364]	@ (800732c <HAL_RCC_OscConfig+0x340>)
 80071be:	430a      	orrs	r2, r1
 80071c0:	605a      	str	r2, [r3, #4]
 80071c2:	e019      	b.n	80071f8 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 80071c4:	4b59      	ldr	r3, [pc, #356]	@ (800732c <HAL_RCC_OscConfig+0x340>)
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	4b58      	ldr	r3, [pc, #352]	@ (800732c <HAL_RCC_OscConfig+0x340>)
 80071ca:	4960      	ldr	r1, [pc, #384]	@ (800734c <HAL_RCC_OscConfig+0x360>)
 80071cc:	400a      	ands	r2, r1
 80071ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071d0:	f7fc fd8c 	bl	8003cec <HAL_GetTick>
 80071d4:	0003      	movs	r3, r0
 80071d6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80071d8:	e008      	b.n	80071ec <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80071da:	f7fc fd87 	bl	8003cec <HAL_GetTick>
 80071de:	0002      	movs	r2, r0
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	1ad3      	subs	r3, r2, r3
 80071e4:	2b02      	cmp	r3, #2
 80071e6:	d901      	bls.n	80071ec <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80071e8:	2303      	movs	r3, #3
 80071ea:	e118      	b.n	800741e <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80071ec:	4b4f      	ldr	r3, [pc, #316]	@ (800732c <HAL_RCC_OscConfig+0x340>)
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	2380      	movs	r3, #128	@ 0x80
 80071f2:	00db      	lsls	r3, r3, #3
 80071f4:	4013      	ands	r3, r2
 80071f6:	d1f0      	bne.n	80071da <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	2208      	movs	r2, #8
 80071fe:	4013      	ands	r3, r2
 8007200:	d042      	beq.n	8007288 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8007202:	4b4a      	ldr	r3, [pc, #296]	@ (800732c <HAL_RCC_OscConfig+0x340>)
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	2238      	movs	r2, #56	@ 0x38
 8007208:	4013      	ands	r3, r2
 800720a:	2b18      	cmp	r3, #24
 800720c:	d105      	bne.n	800721a <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	699b      	ldr	r3, [r3, #24]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d138      	bne.n	8007288 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8007216:	2301      	movs	r3, #1
 8007218:	e101      	b.n	800741e <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	699b      	ldr	r3, [r3, #24]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d019      	beq.n	8007256 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8007222:	4b42      	ldr	r3, [pc, #264]	@ (800732c <HAL_RCC_OscConfig+0x340>)
 8007224:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007226:	4b41      	ldr	r3, [pc, #260]	@ (800732c <HAL_RCC_OscConfig+0x340>)
 8007228:	2101      	movs	r1, #1
 800722a:	430a      	orrs	r2, r1
 800722c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800722e:	f7fc fd5d 	bl	8003cec <HAL_GetTick>
 8007232:	0003      	movs	r3, r0
 8007234:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8007236:	e008      	b.n	800724a <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8007238:	f7fc fd58 	bl	8003cec <HAL_GetTick>
 800723c:	0002      	movs	r2, r0
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	1ad3      	subs	r3, r2, r3
 8007242:	2b02      	cmp	r3, #2
 8007244:	d901      	bls.n	800724a <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8007246:	2303      	movs	r3, #3
 8007248:	e0e9      	b.n	800741e <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800724a:	4b38      	ldr	r3, [pc, #224]	@ (800732c <HAL_RCC_OscConfig+0x340>)
 800724c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800724e:	2202      	movs	r2, #2
 8007250:	4013      	ands	r3, r2
 8007252:	d0f1      	beq.n	8007238 <HAL_RCC_OscConfig+0x24c>
 8007254:	e018      	b.n	8007288 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8007256:	4b35      	ldr	r3, [pc, #212]	@ (800732c <HAL_RCC_OscConfig+0x340>)
 8007258:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800725a:	4b34      	ldr	r3, [pc, #208]	@ (800732c <HAL_RCC_OscConfig+0x340>)
 800725c:	2101      	movs	r1, #1
 800725e:	438a      	bics	r2, r1
 8007260:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007262:	f7fc fd43 	bl	8003cec <HAL_GetTick>
 8007266:	0003      	movs	r3, r0
 8007268:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800726a:	e008      	b.n	800727e <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800726c:	f7fc fd3e 	bl	8003cec <HAL_GetTick>
 8007270:	0002      	movs	r2, r0
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	1ad3      	subs	r3, r2, r3
 8007276:	2b02      	cmp	r3, #2
 8007278:	d901      	bls.n	800727e <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 800727a:	2303      	movs	r3, #3
 800727c:	e0cf      	b.n	800741e <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800727e:	4b2b      	ldr	r3, [pc, #172]	@ (800732c <HAL_RCC_OscConfig+0x340>)
 8007280:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007282:	2202      	movs	r2, #2
 8007284:	4013      	ands	r3, r2
 8007286:	d1f1      	bne.n	800726c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	2204      	movs	r2, #4
 800728e:	4013      	ands	r3, r2
 8007290:	d100      	bne.n	8007294 <HAL_RCC_OscConfig+0x2a8>
 8007292:	e084      	b.n	800739e <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007294:	230f      	movs	r3, #15
 8007296:	18fb      	adds	r3, r7, r3
 8007298:	2200      	movs	r2, #0
 800729a:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800729c:	4b23      	ldr	r3, [pc, #140]	@ (800732c <HAL_RCC_OscConfig+0x340>)
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	2238      	movs	r2, #56	@ 0x38
 80072a2:	4013      	ands	r3, r2
 80072a4:	2b20      	cmp	r3, #32
 80072a6:	d106      	bne.n	80072b6 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d000      	beq.n	80072b2 <HAL_RCC_OscConfig+0x2c6>
 80072b0:	e075      	b.n	800739e <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	e0b3      	b.n	800741e <HAL_RCC_OscConfig+0x432>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	689b      	ldr	r3, [r3, #8]
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d106      	bne.n	80072cc <HAL_RCC_OscConfig+0x2e0>
 80072be:	4b1b      	ldr	r3, [pc, #108]	@ (800732c <HAL_RCC_OscConfig+0x340>)
 80072c0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80072c2:	4b1a      	ldr	r3, [pc, #104]	@ (800732c <HAL_RCC_OscConfig+0x340>)
 80072c4:	2101      	movs	r1, #1
 80072c6:	430a      	orrs	r2, r1
 80072c8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80072ca:	e01c      	b.n	8007306 <HAL_RCC_OscConfig+0x31a>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	2b05      	cmp	r3, #5
 80072d2:	d10c      	bne.n	80072ee <HAL_RCC_OscConfig+0x302>
 80072d4:	4b15      	ldr	r3, [pc, #84]	@ (800732c <HAL_RCC_OscConfig+0x340>)
 80072d6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80072d8:	4b14      	ldr	r3, [pc, #80]	@ (800732c <HAL_RCC_OscConfig+0x340>)
 80072da:	2104      	movs	r1, #4
 80072dc:	430a      	orrs	r2, r1
 80072de:	65da      	str	r2, [r3, #92]	@ 0x5c
 80072e0:	4b12      	ldr	r3, [pc, #72]	@ (800732c <HAL_RCC_OscConfig+0x340>)
 80072e2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80072e4:	4b11      	ldr	r3, [pc, #68]	@ (800732c <HAL_RCC_OscConfig+0x340>)
 80072e6:	2101      	movs	r1, #1
 80072e8:	430a      	orrs	r2, r1
 80072ea:	65da      	str	r2, [r3, #92]	@ 0x5c
 80072ec:	e00b      	b.n	8007306 <HAL_RCC_OscConfig+0x31a>
 80072ee:	4b0f      	ldr	r3, [pc, #60]	@ (800732c <HAL_RCC_OscConfig+0x340>)
 80072f0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80072f2:	4b0e      	ldr	r3, [pc, #56]	@ (800732c <HAL_RCC_OscConfig+0x340>)
 80072f4:	2101      	movs	r1, #1
 80072f6:	438a      	bics	r2, r1
 80072f8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80072fa:	4b0c      	ldr	r3, [pc, #48]	@ (800732c <HAL_RCC_OscConfig+0x340>)
 80072fc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80072fe:	4b0b      	ldr	r3, [pc, #44]	@ (800732c <HAL_RCC_OscConfig+0x340>)
 8007300:	2104      	movs	r1, #4
 8007302:	438a      	bics	r2, r1
 8007304:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	689b      	ldr	r3, [r3, #8]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d028      	beq.n	8007360 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800730e:	f7fc fced 	bl	8003cec <HAL_GetTick>
 8007312:	0003      	movs	r3, r0
 8007314:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8007316:	e01d      	b.n	8007354 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007318:	f7fc fce8 	bl	8003cec <HAL_GetTick>
 800731c:	0002      	movs	r2, r0
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	1ad3      	subs	r3, r2, r3
 8007322:	4a0b      	ldr	r2, [pc, #44]	@ (8007350 <HAL_RCC_OscConfig+0x364>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d915      	bls.n	8007354 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8007328:	2303      	movs	r3, #3
 800732a:	e078      	b.n	800741e <HAL_RCC_OscConfig+0x432>
 800732c:	40021000 	.word	0x40021000
 8007330:	fffeffff 	.word	0xfffeffff
 8007334:	fffbffff 	.word	0xfffbffff
 8007338:	ffff80ff 	.word	0xffff80ff
 800733c:	ffffc7ff 	.word	0xffffc7ff
 8007340:	02dc6c00 	.word	0x02dc6c00
 8007344:	200000b4 	.word	0x200000b4
 8007348:	200000b8 	.word	0x200000b8
 800734c:	fffffeff 	.word	0xfffffeff
 8007350:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8007354:	4b34      	ldr	r3, [pc, #208]	@ (8007428 <HAL_RCC_OscConfig+0x43c>)
 8007356:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007358:	2202      	movs	r2, #2
 800735a:	4013      	ands	r3, r2
 800735c:	d0dc      	beq.n	8007318 <HAL_RCC_OscConfig+0x32c>
 800735e:	e013      	b.n	8007388 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007360:	f7fc fcc4 	bl	8003cec <HAL_GetTick>
 8007364:	0003      	movs	r3, r0
 8007366:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8007368:	e009      	b.n	800737e <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800736a:	f7fc fcbf 	bl	8003cec <HAL_GetTick>
 800736e:	0002      	movs	r2, r0
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	1ad3      	subs	r3, r2, r3
 8007374:	4a2d      	ldr	r2, [pc, #180]	@ (800742c <HAL_RCC_OscConfig+0x440>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d901      	bls.n	800737e <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 800737a:	2303      	movs	r3, #3
 800737c:	e04f      	b.n	800741e <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800737e:	4b2a      	ldr	r3, [pc, #168]	@ (8007428 <HAL_RCC_OscConfig+0x43c>)
 8007380:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007382:	2202      	movs	r2, #2
 8007384:	4013      	ands	r3, r2
 8007386:	d1f0      	bne.n	800736a <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8007388:	230f      	movs	r3, #15
 800738a:	18fb      	adds	r3, r7, r3
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	2b01      	cmp	r3, #1
 8007390:	d105      	bne.n	800739e <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8007392:	4b25      	ldr	r3, [pc, #148]	@ (8007428 <HAL_RCC_OscConfig+0x43c>)
 8007394:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007396:	4b24      	ldr	r3, [pc, #144]	@ (8007428 <HAL_RCC_OscConfig+0x43c>)
 8007398:	4925      	ldr	r1, [pc, #148]	@ (8007430 <HAL_RCC_OscConfig+0x444>)
 800739a:	400a      	ands	r2, r1
 800739c:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_CR_HSIUSB48ON)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	2210      	movs	r2, #16
 80073a4:	4013      	ands	r3, r2
 80073a6:	d039      	beq.n	800741c <HAL_RCC_OscConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	69db      	ldr	r3, [r3, #28]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d01b      	beq.n	80073e8 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80073b0:	4b1d      	ldr	r3, [pc, #116]	@ (8007428 <HAL_RCC_OscConfig+0x43c>)
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	4b1c      	ldr	r3, [pc, #112]	@ (8007428 <HAL_RCC_OscConfig+0x43c>)
 80073b6:	2180      	movs	r1, #128	@ 0x80
 80073b8:	03c9      	lsls	r1, r1, #15
 80073ba:	430a      	orrs	r2, r1
 80073bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073be:	f7fc fc95 	bl	8003cec <HAL_GetTick>
 80073c2:	0003      	movs	r3, r0
 80073c4:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 80073c6:	e008      	b.n	80073da <HAL_RCC_OscConfig+0x3ee>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80073c8:	f7fc fc90 	bl	8003cec <HAL_GetTick>
 80073cc:	0002      	movs	r2, r0
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	1ad3      	subs	r3, r2, r3
 80073d2:	2b02      	cmp	r3, #2
 80073d4:	d901      	bls.n	80073da <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 80073d6:	2303      	movs	r3, #3
 80073d8:	e021      	b.n	800741e <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 80073da:	4b13      	ldr	r3, [pc, #76]	@ (8007428 <HAL_RCC_OscConfig+0x43c>)
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	2380      	movs	r3, #128	@ 0x80
 80073e0:	041b      	lsls	r3, r3, #16
 80073e2:	4013      	ands	r3, r2
 80073e4:	d0f0      	beq.n	80073c8 <HAL_RCC_OscConfig+0x3dc>
 80073e6:	e019      	b.n	800741c <HAL_RCC_OscConfig+0x430>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80073e8:	4b0f      	ldr	r3, [pc, #60]	@ (8007428 <HAL_RCC_OscConfig+0x43c>)
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	4b0e      	ldr	r3, [pc, #56]	@ (8007428 <HAL_RCC_OscConfig+0x43c>)
 80073ee:	4911      	ldr	r1, [pc, #68]	@ (8007434 <HAL_RCC_OscConfig+0x448>)
 80073f0:	400a      	ands	r2, r1
 80073f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073f4:	f7fc fc7a 	bl	8003cec <HAL_GetTick>
 80073f8:	0003      	movs	r3, r0
 80073fa:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 80073fc:	e008      	b.n	8007410 <HAL_RCC_OscConfig+0x424>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80073fe:	f7fc fc75 	bl	8003cec <HAL_GetTick>
 8007402:	0002      	movs	r2, r0
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	1ad3      	subs	r3, r2, r3
 8007408:	2b02      	cmp	r3, #2
 800740a:	d901      	bls.n	8007410 <HAL_RCC_OscConfig+0x424>
        {
          return HAL_TIMEOUT;
 800740c:	2303      	movs	r3, #3
 800740e:	e006      	b.n	800741e <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 8007410:	4b05      	ldr	r3, [pc, #20]	@ (8007428 <HAL_RCC_OscConfig+0x43c>)
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	2380      	movs	r3, #128	@ 0x80
 8007416:	041b      	lsls	r3, r3, #16
 8007418:	4013      	ands	r3, r2
 800741a:	d1f0      	bne.n	80073fe <HAL_RCC_OscConfig+0x412>
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 800741c:	2300      	movs	r3, #0
}
 800741e:	0018      	movs	r0, r3
 8007420:	46bd      	mov	sp, r7
 8007422:	b006      	add	sp, #24
 8007424:	bd80      	pop	{r7, pc}
 8007426:	46c0      	nop			@ (mov r8, r8)
 8007428:	40021000 	.word	0x40021000
 800742c:	00001388 	.word	0x00001388
 8007430:	efffffff 	.word	0xefffffff
 8007434:	ffbfffff 	.word	0xffbfffff

08007438 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b084      	sub	sp, #16
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d101      	bne.n	800744c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007448:	2301      	movs	r3, #1
 800744a:	e0f6      	b.n	800763a <HAL_RCC_ClockConfig+0x202>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800744c:	4b7d      	ldr	r3, [pc, #500]	@ (8007644 <HAL_RCC_ClockConfig+0x20c>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	2207      	movs	r2, #7
 8007452:	4013      	ands	r3, r2
 8007454:	683a      	ldr	r2, [r7, #0]
 8007456:	429a      	cmp	r2, r3
 8007458:	d91e      	bls.n	8007498 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800745a:	4b7a      	ldr	r3, [pc, #488]	@ (8007644 <HAL_RCC_ClockConfig+0x20c>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	2207      	movs	r2, #7
 8007460:	4393      	bics	r3, r2
 8007462:	0019      	movs	r1, r3
 8007464:	4b77      	ldr	r3, [pc, #476]	@ (8007644 <HAL_RCC_ClockConfig+0x20c>)
 8007466:	683a      	ldr	r2, [r7, #0]
 8007468:	430a      	orrs	r2, r1
 800746a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800746c:	f7fc fc3e 	bl	8003cec <HAL_GetTick>
 8007470:	0003      	movs	r3, r0
 8007472:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007474:	e009      	b.n	800748a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8007476:	f7fc fc39 	bl	8003cec <HAL_GetTick>
 800747a:	0002      	movs	r2, r0
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	1ad3      	subs	r3, r2, r3
 8007480:	4a71      	ldr	r2, [pc, #452]	@ (8007648 <HAL_RCC_ClockConfig+0x210>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d901      	bls.n	800748a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8007486:	2303      	movs	r3, #3
 8007488:	e0d7      	b.n	800763a <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800748a:	4b6e      	ldr	r3, [pc, #440]	@ (8007644 <HAL_RCC_ClockConfig+0x20c>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	2207      	movs	r2, #7
 8007490:	4013      	ands	r3, r2
 8007492:	683a      	ldr	r2, [r7, #0]
 8007494:	429a      	cmp	r2, r3
 8007496:	d1ee      	bne.n	8007476 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	2202      	movs	r2, #2
 800749e:	4013      	ands	r3, r2
 80074a0:	d017      	beq.n	80074d2 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	2204      	movs	r2, #4
 80074a8:	4013      	ands	r3, r2
 80074aa:	d008      	beq.n	80074be <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80074ac:	4b67      	ldr	r3, [pc, #412]	@ (800764c <HAL_RCC_ClockConfig+0x214>)
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	4a67      	ldr	r2, [pc, #412]	@ (8007650 <HAL_RCC_ClockConfig+0x218>)
 80074b2:	401a      	ands	r2, r3
 80074b4:	4b65      	ldr	r3, [pc, #404]	@ (800764c <HAL_RCC_ClockConfig+0x214>)
 80074b6:	21b0      	movs	r1, #176	@ 0xb0
 80074b8:	0109      	lsls	r1, r1, #4
 80074ba:	430a      	orrs	r2, r1
 80074bc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80074be:	4b63      	ldr	r3, [pc, #396]	@ (800764c <HAL_RCC_ClockConfig+0x214>)
 80074c0:	689b      	ldr	r3, [r3, #8]
 80074c2:	4a64      	ldr	r2, [pc, #400]	@ (8007654 <HAL_RCC_ClockConfig+0x21c>)
 80074c4:	4013      	ands	r3, r2
 80074c6:	0019      	movs	r1, r3
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	68da      	ldr	r2, [r3, #12]
 80074cc:	4b5f      	ldr	r3, [pc, #380]	@ (800764c <HAL_RCC_ClockConfig+0x214>)
 80074ce:	430a      	orrs	r2, r1
 80074d0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	2201      	movs	r2, #1
 80074d8:	4013      	ands	r3, r2
 80074da:	d100      	bne.n	80074de <HAL_RCC_ClockConfig+0xa6>
 80074dc:	e061      	b.n	80075a2 <HAL_RCC_ClockConfig+0x16a>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 80074de:	4b5b      	ldr	r3, [pc, #364]	@ (800764c <HAL_RCC_ClockConfig+0x214>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	221c      	movs	r2, #28
 80074e4:	4393      	bics	r3, r2
 80074e6:	0019      	movs	r1, r3
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	689a      	ldr	r2, [r3, #8]
 80074ec:	4b57      	ldr	r3, [pc, #348]	@ (800764c <HAL_RCC_ClockConfig+0x214>)
 80074ee:	430a      	orrs	r2, r1
 80074f0:	601a      	str	r2, [r3, #0]
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d107      	bne.n	800750a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80074fa:	4b54      	ldr	r3, [pc, #336]	@ (800764c <HAL_RCC_ClockConfig+0x214>)
 80074fc:	681a      	ldr	r2, [r3, #0]
 80074fe:	2380      	movs	r3, #128	@ 0x80
 8007500:	029b      	lsls	r3, r3, #10
 8007502:	4013      	ands	r3, r2
 8007504:	d12b      	bne.n	800755e <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	e097      	b.n	800763a <HAL_RCC_ClockConfig+0x202>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d107      	bne.n	8007522 <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007512:	4b4e      	ldr	r3, [pc, #312]	@ (800764c <HAL_RCC_ClockConfig+0x214>)
 8007514:	681a      	ldr	r2, [r3, #0]
 8007516:	2380      	movs	r3, #128	@ 0x80
 8007518:	00db      	lsls	r3, r3, #3
 800751a:	4013      	ands	r3, r2
 800751c:	d11f      	bne.n	800755e <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 800751e:	2301      	movs	r3, #1
 8007520:	e08b      	b.n	800763a <HAL_RCC_ClockConfig+0x202>
      }
    }
#if defined(RCC_HSI48_SUPPORT)
    /* HSIUSB48 is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSIUSB48)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	2b02      	cmp	r3, #2
 8007528:	d107      	bne.n	800753a <HAL_RCC_ClockConfig+0x102>
    {
      /* Check the HSIUSB48 ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 800752a:	4b48      	ldr	r3, [pc, #288]	@ (800764c <HAL_RCC_ClockConfig+0x214>)
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	2380      	movs	r3, #128	@ 0x80
 8007530:	041b      	lsls	r3, r3, #16
 8007532:	4013      	ands	r3, r2
 8007534:	d113      	bne.n	800755e <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8007536:	2301      	movs	r3, #1
 8007538:	e07f      	b.n	800763a <HAL_RCC_ClockConfig+0x202>
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	2b03      	cmp	r3, #3
 8007540:	d106      	bne.n	8007550 <HAL_RCC_ClockConfig+0x118>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8007542:	4b42      	ldr	r3, [pc, #264]	@ (800764c <HAL_RCC_ClockConfig+0x214>)
 8007544:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007546:	2202      	movs	r2, #2
 8007548:	4013      	ands	r3, r2
 800754a:	d108      	bne.n	800755e <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 800754c:	2301      	movs	r3, #1
 800754e:	e074      	b.n	800763a <HAL_RCC_ClockConfig+0x202>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8007550:	4b3e      	ldr	r3, [pc, #248]	@ (800764c <HAL_RCC_ClockConfig+0x214>)
 8007552:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007554:	2202      	movs	r2, #2
 8007556:	4013      	ands	r3, r2
 8007558:	d101      	bne.n	800755e <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 800755a:	2301      	movs	r3, #1
 800755c:	e06d      	b.n	800763a <HAL_RCC_ClockConfig+0x202>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800755e:	4b3b      	ldr	r3, [pc, #236]	@ (800764c <HAL_RCC_ClockConfig+0x214>)
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	2207      	movs	r2, #7
 8007564:	4393      	bics	r3, r2
 8007566:	0019      	movs	r1, r3
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	685a      	ldr	r2, [r3, #4]
 800756c:	4b37      	ldr	r3, [pc, #220]	@ (800764c <HAL_RCC_ClockConfig+0x214>)
 800756e:	430a      	orrs	r2, r1
 8007570:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007572:	f7fc fbbb 	bl	8003cec <HAL_GetTick>
 8007576:	0003      	movs	r3, r0
 8007578:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800757a:	e009      	b.n	8007590 <HAL_RCC_ClockConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800757c:	f7fc fbb6 	bl	8003cec <HAL_GetTick>
 8007580:	0002      	movs	r2, r0
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	1ad3      	subs	r3, r2, r3
 8007586:	4a30      	ldr	r2, [pc, #192]	@ (8007648 <HAL_RCC_ClockConfig+0x210>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d901      	bls.n	8007590 <HAL_RCC_ClockConfig+0x158>
      {
        return HAL_TIMEOUT;
 800758c:	2303      	movs	r3, #3
 800758e:	e054      	b.n	800763a <HAL_RCC_ClockConfig+0x202>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007590:	4b2e      	ldr	r3, [pc, #184]	@ (800764c <HAL_RCC_ClockConfig+0x214>)
 8007592:	689b      	ldr	r3, [r3, #8]
 8007594:	2238      	movs	r2, #56	@ 0x38
 8007596:	401a      	ands	r2, r3
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	685b      	ldr	r3, [r3, #4]
 800759c:	00db      	lsls	r3, r3, #3
 800759e:	429a      	cmp	r2, r3
 80075a0:	d1ec      	bne.n	800757c <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80075a2:	4b28      	ldr	r3, [pc, #160]	@ (8007644 <HAL_RCC_ClockConfig+0x20c>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	2207      	movs	r2, #7
 80075a8:	4013      	ands	r3, r2
 80075aa:	683a      	ldr	r2, [r7, #0]
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d21e      	bcs.n	80075ee <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075b0:	4b24      	ldr	r3, [pc, #144]	@ (8007644 <HAL_RCC_ClockConfig+0x20c>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	2207      	movs	r2, #7
 80075b6:	4393      	bics	r3, r2
 80075b8:	0019      	movs	r1, r3
 80075ba:	4b22      	ldr	r3, [pc, #136]	@ (8007644 <HAL_RCC_ClockConfig+0x20c>)
 80075bc:	683a      	ldr	r2, [r7, #0]
 80075be:	430a      	orrs	r2, r1
 80075c0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80075c2:	f7fc fb93 	bl	8003cec <HAL_GetTick>
 80075c6:	0003      	movs	r3, r0
 80075c8:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80075ca:	e009      	b.n	80075e0 <HAL_RCC_ClockConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80075cc:	f7fc fb8e 	bl	8003cec <HAL_GetTick>
 80075d0:	0002      	movs	r2, r0
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	1ad3      	subs	r3, r2, r3
 80075d6:	4a1c      	ldr	r2, [pc, #112]	@ (8007648 <HAL_RCC_ClockConfig+0x210>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d901      	bls.n	80075e0 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_TIMEOUT;
 80075dc:	2303      	movs	r3, #3
 80075de:	e02c      	b.n	800763a <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80075e0:	4b18      	ldr	r3, [pc, #96]	@ (8007644 <HAL_RCC_ClockConfig+0x20c>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	2207      	movs	r2, #7
 80075e6:	4013      	ands	r3, r2
 80075e8:	683a      	ldr	r2, [r7, #0]
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d1ee      	bne.n	80075cc <HAL_RCC_ClockConfig+0x194>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	2204      	movs	r2, #4
 80075f4:	4013      	ands	r3, r2
 80075f6:	d009      	beq.n	800760c <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80075f8:	4b14      	ldr	r3, [pc, #80]	@ (800764c <HAL_RCC_ClockConfig+0x214>)
 80075fa:	689b      	ldr	r3, [r3, #8]
 80075fc:	4a16      	ldr	r2, [pc, #88]	@ (8007658 <HAL_RCC_ClockConfig+0x220>)
 80075fe:	4013      	ands	r3, r2
 8007600:	0019      	movs	r1, r3
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	691a      	ldr	r2, [r3, #16]
 8007606:	4b11      	ldr	r3, [pc, #68]	@ (800764c <HAL_RCC_ClockConfig+0x214>)
 8007608:	430a      	orrs	r2, r1
 800760a:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800760c:	f000 f82c 	bl	8007668 <HAL_RCC_GetSysClockFreq>
 8007610:	0001      	movs	r1, r0
 8007612:	4b0e      	ldr	r3, [pc, #56]	@ (800764c <HAL_RCC_ClockConfig+0x214>)
 8007614:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8007616:	0a1b      	lsrs	r3, r3, #8
 8007618:	220f      	movs	r2, #15
 800761a:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800761c:	4b0f      	ldr	r3, [pc, #60]	@ (800765c <HAL_RCC_ClockConfig+0x224>)
 800761e:	0092      	lsls	r2, r2, #2
 8007620:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8007622:	221f      	movs	r2, #31
 8007624:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8007626:	000a      	movs	r2, r1
 8007628:	40da      	lsrs	r2, r3
 800762a:	4b0d      	ldr	r3, [pc, #52]	@ (8007660 <HAL_RCC_ClockConfig+0x228>)
 800762c:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800762e:	4b0d      	ldr	r3, [pc, #52]	@ (8007664 <HAL_RCC_ClockConfig+0x22c>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	0018      	movs	r0, r3
 8007634:	f7fc fafe 	bl	8003c34 <HAL_InitTick>
 8007638:	0003      	movs	r3, r0
}
 800763a:	0018      	movs	r0, r3
 800763c:	46bd      	mov	sp, r7
 800763e:	b004      	add	sp, #16
 8007640:	bd80      	pop	{r7, pc}
 8007642:	46c0      	nop			@ (mov r8, r8)
 8007644:	40022000 	.word	0x40022000
 8007648:	00001388 	.word	0x00001388
 800764c:	40021000 	.word	0x40021000
 8007650:	ffff84ff 	.word	0xffff84ff
 8007654:	fffff0ff 	.word	0xfffff0ff
 8007658:	ffff8fff 	.word	0xffff8fff
 800765c:	0800ad30 	.word	0x0800ad30
 8007660:	200000b4 	.word	0x200000b4
 8007664:	200000b8 	.word	0x200000b8

08007668 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b084      	sub	sp, #16
 800766c:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 800766e:	4b27      	ldr	r3, [pc, #156]	@ (800770c <HAL_RCC_GetSysClockFreq+0xa4>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	089b      	lsrs	r3, r3, #2
 8007674:	2207      	movs	r2, #7
 8007676:	4013      	ands	r3, r2
 8007678:	3301      	adds	r3, #1
 800767a:	60bb      	str	r3, [r7, #8]
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800767c:	4b23      	ldr	r3, [pc, #140]	@ (800770c <HAL_RCC_GetSysClockFreq+0xa4>)
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	2238      	movs	r2, #56	@ 0x38
 8007682:	4013      	ands	r3, r2
 8007684:	d10f      	bne.n	80076a6 <HAL_RCC_GetSysClockFreq+0x3e>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8007686:	4b21      	ldr	r3, [pc, #132]	@ (800770c <HAL_RCC_GetSysClockFreq+0xa4>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	0adb      	lsrs	r3, r3, #11
 800768c:	2207      	movs	r2, #7
 800768e:	4013      	ands	r3, r2
 8007690:	2201      	movs	r2, #1
 8007692:	409a      	lsls	r2, r3
 8007694:	0013      	movs	r3, r2
 8007696:	607b      	str	r3, [r7, #4]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8007698:	6879      	ldr	r1, [r7, #4]
 800769a:	481d      	ldr	r0, [pc, #116]	@ (8007710 <HAL_RCC_GetSysClockFreq+0xa8>)
 800769c:	f7f8 fd34 	bl	8000108 <__udivsi3>
 80076a0:	0003      	movs	r3, r0
 80076a2:	60fb      	str	r3, [r7, #12]
 80076a4:	e027      	b.n	80076f6 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80076a6:	4b19      	ldr	r3, [pc, #100]	@ (800770c <HAL_RCC_GetSysClockFreq+0xa4>)
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	2238      	movs	r2, #56	@ 0x38
 80076ac:	4013      	ands	r3, r2
 80076ae:	2b08      	cmp	r3, #8
 80076b0:	d102      	bne.n	80076b8 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80076b2:	4b18      	ldr	r3, [pc, #96]	@ (8007714 <HAL_RCC_GetSysClockFreq+0xac>)
 80076b4:	60fb      	str	r3, [r7, #12]
 80076b6:	e01e      	b.n	80076f6 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80076b8:	4b14      	ldr	r3, [pc, #80]	@ (800770c <HAL_RCC_GetSysClockFreq+0xa4>)
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	2238      	movs	r2, #56	@ 0x38
 80076be:	4013      	ands	r3, r2
 80076c0:	2b20      	cmp	r3, #32
 80076c2:	d103      	bne.n	80076cc <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80076c4:	2380      	movs	r3, #128	@ 0x80
 80076c6:	021b      	lsls	r3, r3, #8
 80076c8:	60fb      	str	r3, [r7, #12]
 80076ca:	e014      	b.n	80076f6 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80076cc:	4b0f      	ldr	r3, [pc, #60]	@ (800770c <HAL_RCC_GetSysClockFreq+0xa4>)
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	2238      	movs	r2, #56	@ 0x38
 80076d2:	4013      	ands	r3, r2
 80076d4:	2b18      	cmp	r3, #24
 80076d6:	d103      	bne.n	80076e0 <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80076d8:	23fa      	movs	r3, #250	@ 0xfa
 80076da:	01db      	lsls	r3, r3, #7
 80076dc:	60fb      	str	r3, [r7, #12]
 80076de:	e00a      	b.n	80076f6 <HAL_RCC_GetSysClockFreq+0x8e>
  }
#if defined(RCC_HSI48_SUPPORT)
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI48)
 80076e0:	4b0a      	ldr	r3, [pc, #40]	@ (800770c <HAL_RCC_GetSysClockFreq+0xa4>)
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	2238      	movs	r2, #56	@ 0x38
 80076e6:	4013      	ands	r3, r2
 80076e8:	2b10      	cmp	r3, #16
 80076ea:	d102      	bne.n	80076f2 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    /* HSI48 used as system clock source */
    sysclockfreq = HSI48_VALUE;
 80076ec:	4b08      	ldr	r3, [pc, #32]	@ (8007710 <HAL_RCC_GetSysClockFreq+0xa8>)
 80076ee:	60fb      	str	r3, [r7, #12]
 80076f0:	e001      	b.n	80076f6 <HAL_RCC_GetSysClockFreq+0x8e>
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 80076f2:	2300      	movs	r3, #0
 80076f4:	60fb      	str	r3, [r7, #12]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 80076f6:	68b9      	ldr	r1, [r7, #8]
 80076f8:	68f8      	ldr	r0, [r7, #12]
 80076fa:	f7f8 fd05 	bl	8000108 <__udivsi3>
 80076fe:	0003      	movs	r3, r0
 8007700:	60fb      	str	r3, [r7, #12]
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 8007702:	68fb      	ldr	r3, [r7, #12]
}
 8007704:	0018      	movs	r0, r3
 8007706:	46bd      	mov	sp, r7
 8007708:	b004      	add	sp, #16
 800770a:	bd80      	pop	{r7, pc}
 800770c:	40021000 	.word	0x40021000
 8007710:	02dc6c00 	.word	0x02dc6c00
 8007714:	007a1200 	.word	0x007a1200

08007718 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800771c:	f7ff ffa4 	bl	8007668 <HAL_RCC_GetSysClockFreq>
 8007720:	0001      	movs	r1, r0
 8007722:	4b09      	ldr	r3, [pc, #36]	@ (8007748 <HAL_RCC_GetHCLKFreq+0x30>)
 8007724:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8007726:	0a1b      	lsrs	r3, r3, #8
 8007728:	220f      	movs	r2, #15
 800772a:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800772c:	4b07      	ldr	r3, [pc, #28]	@ (800774c <HAL_RCC_GetHCLKFreq+0x34>)
 800772e:	0092      	lsls	r2, r2, #2
 8007730:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8007732:	221f      	movs	r2, #31
 8007734:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8007736:	000a      	movs	r2, r1
 8007738:	40da      	lsrs	r2, r3
 800773a:	4b05      	ldr	r3, [pc, #20]	@ (8007750 <HAL_RCC_GetHCLKFreq+0x38>)
 800773c:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 800773e:	4b04      	ldr	r3, [pc, #16]	@ (8007750 <HAL_RCC_GetHCLKFreq+0x38>)
 8007740:	681b      	ldr	r3, [r3, #0]
}
 8007742:	0018      	movs	r0, r3
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}
 8007748:	40021000 	.word	0x40021000
 800774c:	0800ad30 	.word	0x0800ad30
 8007750:	200000b4 	.word	0x200000b4

08007754 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8007758:	f7ff ffde 	bl	8007718 <HAL_RCC_GetHCLKFreq>
 800775c:	0001      	movs	r1, r0
 800775e:	4b07      	ldr	r3, [pc, #28]	@ (800777c <HAL_RCC_GetPCLK1Freq+0x28>)
 8007760:	689b      	ldr	r3, [r3, #8]
 8007762:	0b1b      	lsrs	r3, r3, #12
 8007764:	2207      	movs	r2, #7
 8007766:	401a      	ands	r2, r3
 8007768:	4b05      	ldr	r3, [pc, #20]	@ (8007780 <HAL_RCC_GetPCLK1Freq+0x2c>)
 800776a:	0092      	lsls	r2, r2, #2
 800776c:	58d3      	ldr	r3, [r2, r3]
 800776e:	221f      	movs	r2, #31
 8007770:	4013      	ands	r3, r2
 8007772:	40d9      	lsrs	r1, r3
 8007774:	000b      	movs	r3, r1
}
 8007776:	0018      	movs	r0, r3
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}
 800777c:	40021000 	.word	0x40021000
 8007780:	0800ad70 	.word	0x0800ad70

08007784 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b086      	sub	sp, #24
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800778c:	2313      	movs	r3, #19
 800778e:	18fb      	adds	r3, r7, r3
 8007790:	2200      	movs	r2, #0
 8007792:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007794:	2312      	movs	r3, #18
 8007796:	18fb      	adds	r3, r7, r3
 8007798:	2200      	movs	r2, #0
 800779a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	2240      	movs	r2, #64	@ 0x40
 80077a2:	4013      	ands	r3, r2
 80077a4:	d100      	bne.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0x24>
 80077a6:	e079      	b.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 80077a8:	2011      	movs	r0, #17
 80077aa:	183b      	adds	r3, r7, r0
 80077ac:	2200      	movs	r2, #0
 80077ae:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80077b0:	4b6a      	ldr	r3, [pc, #424]	@ (800795c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80077b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80077b4:	2380      	movs	r3, #128	@ 0x80
 80077b6:	055b      	lsls	r3, r3, #21
 80077b8:	4013      	ands	r3, r2
 80077ba:	d110      	bne.n	80077de <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80077bc:	4b67      	ldr	r3, [pc, #412]	@ (800795c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80077be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80077c0:	4b66      	ldr	r3, [pc, #408]	@ (800795c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80077c2:	2180      	movs	r1, #128	@ 0x80
 80077c4:	0549      	lsls	r1, r1, #21
 80077c6:	430a      	orrs	r2, r1
 80077c8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80077ca:	4b64      	ldr	r3, [pc, #400]	@ (800795c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80077cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80077ce:	2380      	movs	r3, #128	@ 0x80
 80077d0:	055b      	lsls	r3, r3, #21
 80077d2:	4013      	ands	r3, r2
 80077d4:	60bb      	str	r3, [r7, #8]
 80077d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80077d8:	183b      	adds	r3, r7, r0
 80077da:	2201      	movs	r2, #1
 80077dc:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 80077de:	4b5f      	ldr	r3, [pc, #380]	@ (800795c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80077e0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80077e2:	23c0      	movs	r3, #192	@ 0xc0
 80077e4:	009b      	lsls	r3, r3, #2
 80077e6:	4013      	ands	r3, r2
 80077e8:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d019      	beq.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	69db      	ldr	r3, [r3, #28]
 80077f4:	697a      	ldr	r2, [r7, #20]
 80077f6:	429a      	cmp	r2, r3
 80077f8:	d014      	beq.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 80077fa:	4b58      	ldr	r3, [pc, #352]	@ (800795c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80077fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077fe:	4a58      	ldr	r2, [pc, #352]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8007800:	4013      	ands	r3, r2
 8007802:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007804:	4b55      	ldr	r3, [pc, #340]	@ (800795c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007806:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007808:	4b54      	ldr	r3, [pc, #336]	@ (800795c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800780a:	2180      	movs	r1, #128	@ 0x80
 800780c:	0249      	lsls	r1, r1, #9
 800780e:	430a      	orrs	r2, r1
 8007810:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007812:	4b52      	ldr	r3, [pc, #328]	@ (800795c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007814:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007816:	4b51      	ldr	r3, [pc, #324]	@ (800795c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007818:	4952      	ldr	r1, [pc, #328]	@ (8007964 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800781a:	400a      	ands	r2, r1
 800781c:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 800781e:	4b4f      	ldr	r3, [pc, #316]	@ (800795c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007820:	697a      	ldr	r2, [r7, #20]
 8007822:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	2201      	movs	r2, #1
 8007828:	4013      	ands	r3, r2
 800782a:	d016      	beq.n	800785a <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800782c:	f7fc fa5e 	bl	8003cec <HAL_GetTick>
 8007830:	0003      	movs	r3, r0
 8007832:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8007834:	e00c      	b.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007836:	f7fc fa59 	bl	8003cec <HAL_GetTick>
 800783a:	0002      	movs	r2, r0
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	1ad3      	subs	r3, r2, r3
 8007840:	4a49      	ldr	r2, [pc, #292]	@ (8007968 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d904      	bls.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 8007846:	2313      	movs	r3, #19
 8007848:	18fb      	adds	r3, r7, r3
 800784a:	2203      	movs	r2, #3
 800784c:	701a      	strb	r2, [r3, #0]
          break;
 800784e:	e004      	b.n	800785a <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8007850:	4b42      	ldr	r3, [pc, #264]	@ (800795c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007852:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007854:	2202      	movs	r2, #2
 8007856:	4013      	ands	r3, r2
 8007858:	d0ed      	beq.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 800785a:	2313      	movs	r3, #19
 800785c:	18fb      	adds	r3, r7, r3
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d10a      	bne.n	800787a <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007864:	4b3d      	ldr	r3, [pc, #244]	@ (800795c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007866:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007868:	4a3d      	ldr	r2, [pc, #244]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800786a:	4013      	ands	r3, r2
 800786c:	0019      	movs	r1, r3
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	69da      	ldr	r2, [r3, #28]
 8007872:	4b3a      	ldr	r3, [pc, #232]	@ (800795c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007874:	430a      	orrs	r2, r1
 8007876:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007878:	e005      	b.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800787a:	2312      	movs	r3, #18
 800787c:	18fb      	adds	r3, r7, r3
 800787e:	2213      	movs	r2, #19
 8007880:	18ba      	adds	r2, r7, r2
 8007882:	7812      	ldrb	r2, [r2, #0]
 8007884:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007886:	2311      	movs	r3, #17
 8007888:	18fb      	adds	r3, r7, r3
 800788a:	781b      	ldrb	r3, [r3, #0]
 800788c:	2b01      	cmp	r3, #1
 800788e:	d105      	bne.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007890:	4b32      	ldr	r3, [pc, #200]	@ (800795c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007892:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007894:	4b31      	ldr	r3, [pc, #196]	@ (800795c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007896:	4935      	ldr	r1, [pc, #212]	@ (800796c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8007898:	400a      	ands	r2, r1
 800789a:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	2201      	movs	r2, #1
 80078a2:	4013      	ands	r3, r2
 80078a4:	d009      	beq.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80078a6:	4b2d      	ldr	r3, [pc, #180]	@ (800795c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80078a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078aa:	2203      	movs	r2, #3
 80078ac:	4393      	bics	r3, r2
 80078ae:	0019      	movs	r1, r3
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	689a      	ldr	r2, [r3, #8]
 80078b4:	4b29      	ldr	r3, [pc, #164]	@ (800795c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80078b6:	430a      	orrs	r2, r1
 80078b8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	2202      	movs	r2, #2
 80078c0:	4013      	ands	r3, r2
 80078c2:	d009      	beq.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80078c4:	4b25      	ldr	r3, [pc, #148]	@ (800795c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80078c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078c8:	4a29      	ldr	r2, [pc, #164]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80078ca:	4013      	ands	r3, r2
 80078cc:	0019      	movs	r1, r3
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	68da      	ldr	r2, [r3, #12]
 80078d2:	4b22      	ldr	r3, [pc, #136]	@ (800795c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80078d4:	430a      	orrs	r2, r1
 80078d6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	2220      	movs	r2, #32
 80078de:	4013      	ands	r3, r2
 80078e0:	d008      	beq.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80078e2:	4b1e      	ldr	r3, [pc, #120]	@ (800795c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80078e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078e6:	009b      	lsls	r3, r3, #2
 80078e8:	0899      	lsrs	r1, r3, #2
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	699a      	ldr	r2, [r3, #24]
 80078ee:	4b1b      	ldr	r3, [pc, #108]	@ (800795c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80078f0:	430a      	orrs	r2, r1
 80078f2:	655a      	str	r2, [r3, #84]	@ 0x54

  }
#if defined (USB_DRD_FS)
  /*-------------------------- USB clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	2208      	movs	r2, #8
 80078fa:	4013      	ands	r3, r2
 80078fc:	d009      	beq.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80078fe:	4b17      	ldr	r3, [pc, #92]	@ (800795c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007902:	4a1c      	ldr	r2, [pc, #112]	@ (8007974 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8007904:	4013      	ands	r3, r2
 8007906:	0019      	movs	r1, r3
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	695a      	ldr	r2, [r3, #20]
 800790c:	4b13      	ldr	r3, [pc, #76]	@ (800795c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800790e:	430a      	orrs	r2, r1
 8007910:	659a      	str	r2, [r3, #88]	@ 0x58

  }
#endif /* USB_DRD_FS */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	2204      	movs	r2, #4
 8007918:	4013      	ands	r3, r2
 800791a:	d009      	beq.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800791c:	4b0f      	ldr	r3, [pc, #60]	@ (800795c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800791e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007920:	4a15      	ldr	r2, [pc, #84]	@ (8007978 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8007922:	4013      	ands	r3, r2
 8007924:	0019      	movs	r1, r3
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	691a      	ldr	r2, [r3, #16]
 800792a:	4b0c      	ldr	r3, [pc, #48]	@ (800795c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800792c:	430a      	orrs	r2, r1
 800792e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	2280      	movs	r2, #128	@ 0x80
 8007936:	4013      	ands	r3, r2
 8007938:	d009      	beq.n	800794e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 800793a:	4b08      	ldr	r3, [pc, #32]	@ (800795c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	22e0      	movs	r2, #224	@ 0xe0
 8007940:	4393      	bics	r3, r2
 8007942:	0019      	movs	r1, r3
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	685a      	ldr	r2, [r3, #4]
 8007948:	4b04      	ldr	r3, [pc, #16]	@ (800795c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800794a:	430a      	orrs	r2, r1
 800794c:	601a      	str	r2, [r3, #0]
  }
  return status;
 800794e:	2312      	movs	r3, #18
 8007950:	18fb      	adds	r3, r7, r3
 8007952:	781b      	ldrb	r3, [r3, #0]
}
 8007954:	0018      	movs	r0, r3
 8007956:	46bd      	mov	sp, r7
 8007958:	b006      	add	sp, #24
 800795a:	bd80      	pop	{r7, pc}
 800795c:	40021000 	.word	0x40021000
 8007960:	fffffcff 	.word	0xfffffcff
 8007964:	fffeffff 	.word	0xfffeffff
 8007968:	00001388 	.word	0x00001388
 800796c:	efffffff 	.word	0xefffffff
 8007970:	ffffcfff 	.word	0xffffcfff
 8007974:	ffffefff 	.word	0xffffefff
 8007978:	ffff3fff 	.word	0xffff3fff

0800797c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b084      	sub	sp, #16
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d101      	bne.n	800798e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800798a:	2301      	movs	r3, #1
 800798c:	e0a8      	b.n	8007ae0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007992:	2b00      	cmp	r3, #0
 8007994:	d109      	bne.n	80079aa <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	685a      	ldr	r2, [r3, #4]
 800799a:	2382      	movs	r3, #130	@ 0x82
 800799c:	005b      	lsls	r3, r3, #1
 800799e:	429a      	cmp	r2, r3
 80079a0:	d009      	beq.n	80079b6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	61da      	str	r2, [r3, #28]
 80079a8:	e005      	b.n	80079b6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2200      	movs	r2, #0
 80079ae:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2200      	movs	r2, #0
 80079b4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2200      	movs	r2, #0
 80079ba:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	225d      	movs	r2, #93	@ 0x5d
 80079c0:	5c9b      	ldrb	r3, [r3, r2]
 80079c2:	b2db      	uxtb	r3, r3
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d107      	bne.n	80079d8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	225c      	movs	r2, #92	@ 0x5c
 80079cc:	2100      	movs	r1, #0
 80079ce:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	0018      	movs	r0, r3
 80079d4:	f7fb fd2c 	bl	8003430 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	225d      	movs	r2, #93	@ 0x5d
 80079dc:	2102      	movs	r1, #2
 80079de:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	681a      	ldr	r2, [r3, #0]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	2140      	movs	r1, #64	@ 0x40
 80079ec:	438a      	bics	r2, r1
 80079ee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	68da      	ldr	r2, [r3, #12]
 80079f4:	23e0      	movs	r3, #224	@ 0xe0
 80079f6:	00db      	lsls	r3, r3, #3
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d902      	bls.n	8007a02 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80079fc:	2300      	movs	r3, #0
 80079fe:	60fb      	str	r3, [r7, #12]
 8007a00:	e002      	b.n	8007a08 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007a02:	2380      	movs	r3, #128	@ 0x80
 8007a04:	015b      	lsls	r3, r3, #5
 8007a06:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	68da      	ldr	r2, [r3, #12]
 8007a0c:	23f0      	movs	r3, #240	@ 0xf0
 8007a0e:	011b      	lsls	r3, r3, #4
 8007a10:	429a      	cmp	r2, r3
 8007a12:	d008      	beq.n	8007a26 <HAL_SPI_Init+0xaa>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	68da      	ldr	r2, [r3, #12]
 8007a18:	23e0      	movs	r3, #224	@ 0xe0
 8007a1a:	00db      	lsls	r3, r3, #3
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d002      	beq.n	8007a26 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2200      	movs	r2, #0
 8007a24:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	685a      	ldr	r2, [r3, #4]
 8007a2a:	2382      	movs	r3, #130	@ 0x82
 8007a2c:	005b      	lsls	r3, r3, #1
 8007a2e:	401a      	ands	r2, r3
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6899      	ldr	r1, [r3, #8]
 8007a34:	2384      	movs	r3, #132	@ 0x84
 8007a36:	021b      	lsls	r3, r3, #8
 8007a38:	400b      	ands	r3, r1
 8007a3a:	431a      	orrs	r2, r3
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	691b      	ldr	r3, [r3, #16]
 8007a40:	2102      	movs	r1, #2
 8007a42:	400b      	ands	r3, r1
 8007a44:	431a      	orrs	r2, r3
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	695b      	ldr	r3, [r3, #20]
 8007a4a:	2101      	movs	r1, #1
 8007a4c:	400b      	ands	r3, r1
 8007a4e:	431a      	orrs	r2, r3
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6999      	ldr	r1, [r3, #24]
 8007a54:	2380      	movs	r3, #128	@ 0x80
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	400b      	ands	r3, r1
 8007a5a:	431a      	orrs	r2, r3
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	69db      	ldr	r3, [r3, #28]
 8007a60:	2138      	movs	r1, #56	@ 0x38
 8007a62:	400b      	ands	r3, r1
 8007a64:	431a      	orrs	r2, r3
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6a1b      	ldr	r3, [r3, #32]
 8007a6a:	2180      	movs	r1, #128	@ 0x80
 8007a6c:	400b      	ands	r3, r1
 8007a6e:	431a      	orrs	r2, r3
 8007a70:	0011      	movs	r1, r2
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007a76:	2380      	movs	r3, #128	@ 0x80
 8007a78:	019b      	lsls	r3, r3, #6
 8007a7a:	401a      	ands	r2, r3
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	430a      	orrs	r2, r1
 8007a82:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	699b      	ldr	r3, [r3, #24]
 8007a88:	0c1b      	lsrs	r3, r3, #16
 8007a8a:	2204      	movs	r2, #4
 8007a8c:	401a      	ands	r2, r3
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a92:	2110      	movs	r1, #16
 8007a94:	400b      	ands	r3, r1
 8007a96:	431a      	orrs	r2, r3
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a9c:	2108      	movs	r1, #8
 8007a9e:	400b      	ands	r3, r1
 8007aa0:	431a      	orrs	r2, r3
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	68d9      	ldr	r1, [r3, #12]
 8007aa6:	23f0      	movs	r3, #240	@ 0xf0
 8007aa8:	011b      	lsls	r3, r3, #4
 8007aaa:	400b      	ands	r3, r1
 8007aac:	431a      	orrs	r2, r3
 8007aae:	0011      	movs	r1, r2
 8007ab0:	68fa      	ldr	r2, [r7, #12]
 8007ab2:	2380      	movs	r3, #128	@ 0x80
 8007ab4:	015b      	lsls	r3, r3, #5
 8007ab6:	401a      	ands	r2, r3
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	430a      	orrs	r2, r1
 8007abe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	69da      	ldr	r2, [r3, #28]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4907      	ldr	r1, [pc, #28]	@ (8007ae8 <HAL_SPI_Init+0x16c>)
 8007acc:	400a      	ands	r2, r1
 8007ace:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	225d      	movs	r2, #93	@ 0x5d
 8007ada:	2101      	movs	r1, #1
 8007adc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007ade:	2300      	movs	r3, #0
}
 8007ae0:	0018      	movs	r0, r3
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	b004      	add	sp, #16
 8007ae6:	bd80      	pop	{r7, pc}
 8007ae8:	fffff7ff 	.word	0xfffff7ff

08007aec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b082      	sub	sp, #8
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d101      	bne.n	8007afe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007afa:	2301      	movs	r3, #1
 8007afc:	e04a      	b.n	8007b94 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	223d      	movs	r2, #61	@ 0x3d
 8007b02:	5c9b      	ldrb	r3, [r3, r2]
 8007b04:	b2db      	uxtb	r3, r3
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d107      	bne.n	8007b1a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	223c      	movs	r2, #60	@ 0x3c
 8007b0e:	2100      	movs	r1, #0
 8007b10:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	0018      	movs	r0, r3
 8007b16:	f7fb fd31 	bl	800357c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	223d      	movs	r2, #61	@ 0x3d
 8007b1e:	2102      	movs	r1, #2
 8007b20:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681a      	ldr	r2, [r3, #0]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	3304      	adds	r3, #4
 8007b2a:	0019      	movs	r1, r3
 8007b2c:	0010      	movs	r0, r2
 8007b2e:	f000 fb95 	bl	800825c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2248      	movs	r2, #72	@ 0x48
 8007b36:	2101      	movs	r1, #1
 8007b38:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	223e      	movs	r2, #62	@ 0x3e
 8007b3e:	2101      	movs	r1, #1
 8007b40:	5499      	strb	r1, [r3, r2]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	223f      	movs	r2, #63	@ 0x3f
 8007b46:	2101      	movs	r1, #1
 8007b48:	5499      	strb	r1, [r3, r2]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2240      	movs	r2, #64	@ 0x40
 8007b4e:	2101      	movs	r1, #1
 8007b50:	5499      	strb	r1, [r3, r2]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2241      	movs	r2, #65	@ 0x41
 8007b56:	2101      	movs	r1, #1
 8007b58:	5499      	strb	r1, [r3, r2]
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2242      	movs	r2, #66	@ 0x42
 8007b5e:	2101      	movs	r1, #1
 8007b60:	5499      	strb	r1, [r3, r2]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2243      	movs	r2, #67	@ 0x43
 8007b66:	2101      	movs	r1, #1
 8007b68:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2244      	movs	r2, #68	@ 0x44
 8007b6e:	2101      	movs	r1, #1
 8007b70:	5499      	strb	r1, [r3, r2]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2245      	movs	r2, #69	@ 0x45
 8007b76:	2101      	movs	r1, #1
 8007b78:	5499      	strb	r1, [r3, r2]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2246      	movs	r2, #70	@ 0x46
 8007b7e:	2101      	movs	r1, #1
 8007b80:	5499      	strb	r1, [r3, r2]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2247      	movs	r2, #71	@ 0x47
 8007b86:	2101      	movs	r1, #1
 8007b88:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	223d      	movs	r2, #61	@ 0x3d
 8007b8e:	2101      	movs	r1, #1
 8007b90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007b92:	2300      	movs	r3, #0
}
 8007b94:	0018      	movs	r0, r3
 8007b96:	46bd      	mov	sp, r7
 8007b98:	b002      	add	sp, #8
 8007b9a:	bd80      	pop	{r7, pc}

08007b9c <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b082      	sub	sp, #8
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	223d      	movs	r2, #61	@ 0x3d
 8007ba8:	2102      	movs	r1, #2
 8007baa:	5499      	strb	r1, [r3, r2]

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	6a1b      	ldr	r3, [r3, #32]
 8007bb2:	4a27      	ldr	r2, [pc, #156]	@ (8007c50 <HAL_TIM_Base_DeInit+0xb4>)
 8007bb4:	4013      	ands	r3, r2
 8007bb6:	d10d      	bne.n	8007bd4 <HAL_TIM_Base_DeInit+0x38>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	6a1b      	ldr	r3, [r3, #32]
 8007bbe:	4a25      	ldr	r2, [pc, #148]	@ (8007c54 <HAL_TIM_Base_DeInit+0xb8>)
 8007bc0:	4013      	ands	r3, r2
 8007bc2:	d107      	bne.n	8007bd4 <HAL_TIM_Base_DeInit+0x38>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	2101      	movs	r1, #1
 8007bd0:	438a      	bics	r2, r1
 8007bd2:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	0018      	movs	r0, r3
 8007bd8:	f7fb fd36 	bl	8003648 <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2248      	movs	r2, #72	@ 0x48
 8007be0:	2100      	movs	r1, #0
 8007be2:	5499      	strb	r1, [r3, r2]

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	223e      	movs	r2, #62	@ 0x3e
 8007be8:	2100      	movs	r1, #0
 8007bea:	5499      	strb	r1, [r3, r2]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	223f      	movs	r2, #63	@ 0x3f
 8007bf0:	2100      	movs	r1, #0
 8007bf2:	5499      	strb	r1, [r3, r2]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2240      	movs	r2, #64	@ 0x40
 8007bf8:	2100      	movs	r1, #0
 8007bfa:	5499      	strb	r1, [r3, r2]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2241      	movs	r2, #65	@ 0x41
 8007c00:	2100      	movs	r1, #0
 8007c02:	5499      	strb	r1, [r3, r2]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2242      	movs	r2, #66	@ 0x42
 8007c08:	2100      	movs	r1, #0
 8007c0a:	5499      	strb	r1, [r3, r2]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2243      	movs	r2, #67	@ 0x43
 8007c10:	2100      	movs	r1, #0
 8007c12:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2244      	movs	r2, #68	@ 0x44
 8007c18:	2100      	movs	r1, #0
 8007c1a:	5499      	strb	r1, [r3, r2]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2245      	movs	r2, #69	@ 0x45
 8007c20:	2100      	movs	r1, #0
 8007c22:	5499      	strb	r1, [r3, r2]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2246      	movs	r2, #70	@ 0x46
 8007c28:	2100      	movs	r1, #0
 8007c2a:	5499      	strb	r1, [r3, r2]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2247      	movs	r2, #71	@ 0x47
 8007c30:	2100      	movs	r1, #0
 8007c32:	5499      	strb	r1, [r3, r2]

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	223d      	movs	r2, #61	@ 0x3d
 8007c38:	2100      	movs	r1, #0
 8007c3a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	223c      	movs	r2, #60	@ 0x3c
 8007c40:	2100      	movs	r1, #0
 8007c42:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007c44:	2300      	movs	r3, #0
}
 8007c46:	0018      	movs	r0, r3
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	b002      	add	sp, #8
 8007c4c:	bd80      	pop	{r7, pc}
 8007c4e:	46c0      	nop			@ (mov r8, r8)
 8007c50:	00001111 	.word	0x00001111
 8007c54:	00000444 	.word	0x00000444

08007c58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b084      	sub	sp, #16
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	223d      	movs	r2, #61	@ 0x3d
 8007c64:	5c9b      	ldrb	r3, [r3, r2]
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d001      	beq.n	8007c70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	e03d      	b.n	8007cec <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	223d      	movs	r2, #61	@ 0x3d
 8007c74:	2102      	movs	r1, #2
 8007c76:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	68da      	ldr	r2, [r3, #12]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	2101      	movs	r1, #1
 8007c84:	430a      	orrs	r2, r1
 8007c86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4a19      	ldr	r2, [pc, #100]	@ (8007cf4 <HAL_TIM_Base_Start_IT+0x9c>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d00a      	beq.n	8007ca8 <HAL_TIM_Base_Start_IT+0x50>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681a      	ldr	r2, [r3, #0]
 8007c96:	2380      	movs	r3, #128	@ 0x80
 8007c98:	05db      	lsls	r3, r3, #23
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	d004      	beq.n	8007ca8 <HAL_TIM_Base_Start_IT+0x50>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a15      	ldr	r2, [pc, #84]	@ (8007cf8 <HAL_TIM_Base_Start_IT+0xa0>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d116      	bne.n	8007cd6 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	4a13      	ldr	r2, [pc, #76]	@ (8007cfc <HAL_TIM_Base_Start_IT+0xa4>)
 8007cb0:	4013      	ands	r3, r2
 8007cb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	2b06      	cmp	r3, #6
 8007cb8:	d016      	beq.n	8007ce8 <HAL_TIM_Base_Start_IT+0x90>
 8007cba:	68fa      	ldr	r2, [r7, #12]
 8007cbc:	2380      	movs	r3, #128	@ 0x80
 8007cbe:	025b      	lsls	r3, r3, #9
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	d011      	beq.n	8007ce8 <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	681a      	ldr	r2, [r3, #0]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	2101      	movs	r1, #1
 8007cd0:	430a      	orrs	r2, r1
 8007cd2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cd4:	e008      	b.n	8007ce8 <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	681a      	ldr	r2, [r3, #0]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	2101      	movs	r1, #1
 8007ce2:	430a      	orrs	r2, r1
 8007ce4:	601a      	str	r2, [r3, #0]
 8007ce6:	e000      	b.n	8007cea <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ce8:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8007cea:	2300      	movs	r3, #0
}
 8007cec:	0018      	movs	r0, r3
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	b004      	add	sp, #16
 8007cf2:	bd80      	pop	{r7, pc}
 8007cf4:	40012c00 	.word	0x40012c00
 8007cf8:	40000400 	.word	0x40000400
 8007cfc:	00010007 	.word	0x00010007

08007d00 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b082      	sub	sp, #8
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	68da      	ldr	r2, [r3, #12]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	2101      	movs	r1, #1
 8007d14:	438a      	bics	r2, r1
 8007d16:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	6a1b      	ldr	r3, [r3, #32]
 8007d1e:	4a0d      	ldr	r2, [pc, #52]	@ (8007d54 <HAL_TIM_Base_Stop_IT+0x54>)
 8007d20:	4013      	ands	r3, r2
 8007d22:	d10d      	bne.n	8007d40 <HAL_TIM_Base_Stop_IT+0x40>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	6a1b      	ldr	r3, [r3, #32]
 8007d2a:	4a0b      	ldr	r2, [pc, #44]	@ (8007d58 <HAL_TIM_Base_Stop_IT+0x58>)
 8007d2c:	4013      	ands	r3, r2
 8007d2e:	d107      	bne.n	8007d40 <HAL_TIM_Base_Stop_IT+0x40>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	681a      	ldr	r2, [r3, #0]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	2101      	movs	r1, #1
 8007d3c:	438a      	bics	r2, r1
 8007d3e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	223d      	movs	r2, #61	@ 0x3d
 8007d44:	2101      	movs	r1, #1
 8007d46:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8007d48:	2300      	movs	r3, #0
}
 8007d4a:	0018      	movs	r0, r3
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	b002      	add	sp, #8
 8007d50:	bd80      	pop	{r7, pc}
 8007d52:	46c0      	nop			@ (mov r8, r8)
 8007d54:	00001111 	.word	0x00001111
 8007d58:	00000444 	.word	0x00000444

08007d5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b082      	sub	sp, #8
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d101      	bne.n	8007d6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	e04a      	b.n	8007e04 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	223d      	movs	r2, #61	@ 0x3d
 8007d72:	5c9b      	ldrb	r3, [r3, r2]
 8007d74:	b2db      	uxtb	r3, r3
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d107      	bne.n	8007d8a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	223c      	movs	r2, #60	@ 0x3c
 8007d7e:	2100      	movs	r1, #0
 8007d80:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	0018      	movs	r0, r3
 8007d86:	f7fb fbd9 	bl	800353c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	223d      	movs	r2, #61	@ 0x3d
 8007d8e:	2102      	movs	r1, #2
 8007d90:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	3304      	adds	r3, #4
 8007d9a:	0019      	movs	r1, r3
 8007d9c:	0010      	movs	r0, r2
 8007d9e:	f000 fa5d 	bl	800825c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2248      	movs	r2, #72	@ 0x48
 8007da6:	2101      	movs	r1, #1
 8007da8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	223e      	movs	r2, #62	@ 0x3e
 8007dae:	2101      	movs	r1, #1
 8007db0:	5499      	strb	r1, [r3, r2]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	223f      	movs	r2, #63	@ 0x3f
 8007db6:	2101      	movs	r1, #1
 8007db8:	5499      	strb	r1, [r3, r2]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2240      	movs	r2, #64	@ 0x40
 8007dbe:	2101      	movs	r1, #1
 8007dc0:	5499      	strb	r1, [r3, r2]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2241      	movs	r2, #65	@ 0x41
 8007dc6:	2101      	movs	r1, #1
 8007dc8:	5499      	strb	r1, [r3, r2]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2242      	movs	r2, #66	@ 0x42
 8007dce:	2101      	movs	r1, #1
 8007dd0:	5499      	strb	r1, [r3, r2]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2243      	movs	r2, #67	@ 0x43
 8007dd6:	2101      	movs	r1, #1
 8007dd8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2244      	movs	r2, #68	@ 0x44
 8007dde:	2101      	movs	r1, #1
 8007de0:	5499      	strb	r1, [r3, r2]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2245      	movs	r2, #69	@ 0x45
 8007de6:	2101      	movs	r1, #1
 8007de8:	5499      	strb	r1, [r3, r2]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2246      	movs	r2, #70	@ 0x46
 8007dee:	2101      	movs	r1, #1
 8007df0:	5499      	strb	r1, [r3, r2]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2247      	movs	r2, #71	@ 0x47
 8007df6:	2101      	movs	r1, #1
 8007df8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	223d      	movs	r2, #61	@ 0x3d
 8007dfe:	2101      	movs	r1, #1
 8007e00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007e02:	2300      	movs	r3, #0
}
 8007e04:	0018      	movs	r0, r3
 8007e06:	46bd      	mov	sp, r7
 8007e08:	b002      	add	sp, #8
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b084      	sub	sp, #16
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	68db      	ldr	r3, [r3, #12]
 8007e1a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	691b      	ldr	r3, [r3, #16]
 8007e22:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	2202      	movs	r2, #2
 8007e28:	4013      	ands	r3, r2
 8007e2a:	d021      	beq.n	8007e70 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	2202      	movs	r2, #2
 8007e30:	4013      	ands	r3, r2
 8007e32:	d01d      	beq.n	8007e70 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	2203      	movs	r2, #3
 8007e3a:	4252      	negs	r2, r2
 8007e3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2201      	movs	r2, #1
 8007e42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	699b      	ldr	r3, [r3, #24]
 8007e4a:	2203      	movs	r2, #3
 8007e4c:	4013      	ands	r3, r2
 8007e4e:	d004      	beq.n	8007e5a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	0018      	movs	r0, r3
 8007e54:	f000 f9ea 	bl	800822c <HAL_TIM_IC_CaptureCallback>
 8007e58:	e007      	b.n	8007e6a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	0018      	movs	r0, r3
 8007e5e:	f000 f9dd 	bl	800821c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	0018      	movs	r0, r3
 8007e66:	f000 f9e9 	bl	800823c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	2204      	movs	r2, #4
 8007e74:	4013      	ands	r3, r2
 8007e76:	d022      	beq.n	8007ebe <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	2204      	movs	r2, #4
 8007e7c:	4013      	ands	r3, r2
 8007e7e:	d01e      	beq.n	8007ebe <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	2205      	movs	r2, #5
 8007e86:	4252      	negs	r2, r2
 8007e88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2202      	movs	r2, #2
 8007e8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	699a      	ldr	r2, [r3, #24]
 8007e96:	23c0      	movs	r3, #192	@ 0xc0
 8007e98:	009b      	lsls	r3, r3, #2
 8007e9a:	4013      	ands	r3, r2
 8007e9c:	d004      	beq.n	8007ea8 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	0018      	movs	r0, r3
 8007ea2:	f000 f9c3 	bl	800822c <HAL_TIM_IC_CaptureCallback>
 8007ea6:	e007      	b.n	8007eb8 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	0018      	movs	r0, r3
 8007eac:	f000 f9b6 	bl	800821c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	0018      	movs	r0, r3
 8007eb4:	f000 f9c2 	bl	800823c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	2208      	movs	r2, #8
 8007ec2:	4013      	ands	r3, r2
 8007ec4:	d021      	beq.n	8007f0a <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2208      	movs	r2, #8
 8007eca:	4013      	ands	r3, r2
 8007ecc:	d01d      	beq.n	8007f0a <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	2209      	movs	r2, #9
 8007ed4:	4252      	negs	r2, r2
 8007ed6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2204      	movs	r2, #4
 8007edc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	69db      	ldr	r3, [r3, #28]
 8007ee4:	2203      	movs	r2, #3
 8007ee6:	4013      	ands	r3, r2
 8007ee8:	d004      	beq.n	8007ef4 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	0018      	movs	r0, r3
 8007eee:	f000 f99d 	bl	800822c <HAL_TIM_IC_CaptureCallback>
 8007ef2:	e007      	b.n	8007f04 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	0018      	movs	r0, r3
 8007ef8:	f000 f990 	bl	800821c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	0018      	movs	r0, r3
 8007f00:	f000 f99c 	bl	800823c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2200      	movs	r2, #0
 8007f08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	2210      	movs	r2, #16
 8007f0e:	4013      	ands	r3, r2
 8007f10:	d022      	beq.n	8007f58 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2210      	movs	r2, #16
 8007f16:	4013      	ands	r3, r2
 8007f18:	d01e      	beq.n	8007f58 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	2211      	movs	r2, #17
 8007f20:	4252      	negs	r2, r2
 8007f22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2208      	movs	r2, #8
 8007f28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	69da      	ldr	r2, [r3, #28]
 8007f30:	23c0      	movs	r3, #192	@ 0xc0
 8007f32:	009b      	lsls	r3, r3, #2
 8007f34:	4013      	ands	r3, r2
 8007f36:	d004      	beq.n	8007f42 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	0018      	movs	r0, r3
 8007f3c:	f000 f976 	bl	800822c <HAL_TIM_IC_CaptureCallback>
 8007f40:	e007      	b.n	8007f52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	0018      	movs	r0, r3
 8007f46:	f000 f969 	bl	800821c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	0018      	movs	r0, r3
 8007f4e:	f000 f975 	bl	800823c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2200      	movs	r2, #0
 8007f56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	4013      	ands	r3, r2
 8007f5e:	d00c      	beq.n	8007f7a <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2201      	movs	r2, #1
 8007f64:	4013      	ands	r3, r2
 8007f66:	d008      	beq.n	8007f7a <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	2202      	movs	r2, #2
 8007f6e:	4252      	negs	r2, r2
 8007f70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	0018      	movs	r0, r3
 8007f76:	f7f9 fac1 	bl	80014fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	2280      	movs	r2, #128	@ 0x80
 8007f7e:	4013      	ands	r3, r2
 8007f80:	d104      	bne.n	8007f8c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007f82:	68ba      	ldr	r2, [r7, #8]
 8007f84:	2380      	movs	r3, #128	@ 0x80
 8007f86:	019b      	lsls	r3, r3, #6
 8007f88:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007f8a:	d00b      	beq.n	8007fa4 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2280      	movs	r2, #128	@ 0x80
 8007f90:	4013      	ands	r3, r2
 8007f92:	d007      	beq.n	8007fa4 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a1e      	ldr	r2, [pc, #120]	@ (8008014 <HAL_TIM_IRQHandler+0x208>)
 8007f9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	0018      	movs	r0, r3
 8007fa0:	f000 fd88 	bl	8008ab4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007fa4:	68ba      	ldr	r2, [r7, #8]
 8007fa6:	2380      	movs	r3, #128	@ 0x80
 8007fa8:	005b      	lsls	r3, r3, #1
 8007faa:	4013      	ands	r3, r2
 8007fac:	d00b      	beq.n	8007fc6 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2280      	movs	r2, #128	@ 0x80
 8007fb2:	4013      	ands	r3, r2
 8007fb4:	d007      	beq.n	8007fc6 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a17      	ldr	r2, [pc, #92]	@ (8008018 <HAL_TIM_IRQHandler+0x20c>)
 8007fbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	0018      	movs	r0, r3
 8007fc2:	f000 fd7f 	bl	8008ac4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	2240      	movs	r2, #64	@ 0x40
 8007fca:	4013      	ands	r3, r2
 8007fcc:	d00c      	beq.n	8007fe8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2240      	movs	r2, #64	@ 0x40
 8007fd2:	4013      	ands	r3, r2
 8007fd4:	d008      	beq.n	8007fe8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	2241      	movs	r2, #65	@ 0x41
 8007fdc:	4252      	negs	r2, r2
 8007fde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	0018      	movs	r0, r3
 8007fe4:	f000 f932 	bl	800824c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	2220      	movs	r2, #32
 8007fec:	4013      	ands	r3, r2
 8007fee:	d00c      	beq.n	800800a <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2220      	movs	r2, #32
 8007ff4:	4013      	ands	r3, r2
 8007ff6:	d008      	beq.n	800800a <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	2221      	movs	r2, #33	@ 0x21
 8007ffe:	4252      	negs	r2, r2
 8008000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	0018      	movs	r0, r3
 8008006:	f000 fd4d 	bl	8008aa4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800800a:	46c0      	nop			@ (mov r8, r8)
 800800c:	46bd      	mov	sp, r7
 800800e:	b004      	add	sp, #16
 8008010:	bd80      	pop	{r7, pc}
 8008012:	46c0      	nop			@ (mov r8, r8)
 8008014:	ffffdf7f 	.word	0xffffdf7f
 8008018:	fffffeff 	.word	0xfffffeff

0800801c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b086      	sub	sp, #24
 8008020:	af00      	add	r7, sp, #0
 8008022:	60f8      	str	r0, [r7, #12]
 8008024:	60b9      	str	r1, [r7, #8]
 8008026:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008028:	2317      	movs	r3, #23
 800802a:	18fb      	adds	r3, r7, r3
 800802c:	2200      	movs	r2, #0
 800802e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	223c      	movs	r2, #60	@ 0x3c
 8008034:	5c9b      	ldrb	r3, [r3, r2]
 8008036:	2b01      	cmp	r3, #1
 8008038:	d101      	bne.n	800803e <HAL_TIM_PWM_ConfigChannel+0x22>
 800803a:	2302      	movs	r3, #2
 800803c:	e0e5      	b.n	800820a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	223c      	movs	r2, #60	@ 0x3c
 8008042:	2101      	movs	r1, #1
 8008044:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2b14      	cmp	r3, #20
 800804a:	d900      	bls.n	800804e <HAL_TIM_PWM_ConfigChannel+0x32>
 800804c:	e0d1      	b.n	80081f2 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	009a      	lsls	r2, r3, #2
 8008052:	4b70      	ldr	r3, [pc, #448]	@ (8008214 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8008054:	18d3      	adds	r3, r2, r3
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	68ba      	ldr	r2, [r7, #8]
 8008060:	0011      	movs	r1, r2
 8008062:	0018      	movs	r0, r3
 8008064:	f000 f97e 	bl	8008364 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	699a      	ldr	r2, [r3, #24]
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	2108      	movs	r1, #8
 8008074:	430a      	orrs	r2, r1
 8008076:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	699a      	ldr	r2, [r3, #24]
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	2104      	movs	r1, #4
 8008084:	438a      	bics	r2, r1
 8008086:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	6999      	ldr	r1, [r3, #24]
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	691a      	ldr	r2, [r3, #16]
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	430a      	orrs	r2, r1
 8008098:	619a      	str	r2, [r3, #24]
      break;
 800809a:	e0af      	b.n	80081fc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	68ba      	ldr	r2, [r7, #8]
 80080a2:	0011      	movs	r1, r2
 80080a4:	0018      	movs	r0, r3
 80080a6:	f000 f9dd 	bl	8008464 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	699a      	ldr	r2, [r3, #24]
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	2180      	movs	r1, #128	@ 0x80
 80080b6:	0109      	lsls	r1, r1, #4
 80080b8:	430a      	orrs	r2, r1
 80080ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	699a      	ldr	r2, [r3, #24]
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4954      	ldr	r1, [pc, #336]	@ (8008218 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80080c8:	400a      	ands	r2, r1
 80080ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	6999      	ldr	r1, [r3, #24]
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	691b      	ldr	r3, [r3, #16]
 80080d6:	021a      	lsls	r2, r3, #8
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	430a      	orrs	r2, r1
 80080de:	619a      	str	r2, [r3, #24]
      break;
 80080e0:	e08c      	b.n	80081fc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	68ba      	ldr	r2, [r7, #8]
 80080e8:	0011      	movs	r1, r2
 80080ea:	0018      	movs	r0, r3
 80080ec:	f000 fa38 	bl	8008560 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	69da      	ldr	r2, [r3, #28]
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	2108      	movs	r1, #8
 80080fc:	430a      	orrs	r2, r1
 80080fe:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	69da      	ldr	r2, [r3, #28]
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	2104      	movs	r1, #4
 800810c:	438a      	bics	r2, r1
 800810e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	69d9      	ldr	r1, [r3, #28]
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	691a      	ldr	r2, [r3, #16]
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	430a      	orrs	r2, r1
 8008120:	61da      	str	r2, [r3, #28]
      break;
 8008122:	e06b      	b.n	80081fc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	68ba      	ldr	r2, [r7, #8]
 800812a:	0011      	movs	r1, r2
 800812c:	0018      	movs	r0, r3
 800812e:	f000 fa99 	bl	8008664 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	69da      	ldr	r2, [r3, #28]
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	2180      	movs	r1, #128	@ 0x80
 800813e:	0109      	lsls	r1, r1, #4
 8008140:	430a      	orrs	r2, r1
 8008142:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	69da      	ldr	r2, [r3, #28]
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4932      	ldr	r1, [pc, #200]	@ (8008218 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8008150:	400a      	ands	r2, r1
 8008152:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	69d9      	ldr	r1, [r3, #28]
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	691b      	ldr	r3, [r3, #16]
 800815e:	021a      	lsls	r2, r3, #8
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	430a      	orrs	r2, r1
 8008166:	61da      	str	r2, [r3, #28]
      break;
 8008168:	e048      	b.n	80081fc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	68ba      	ldr	r2, [r7, #8]
 8008170:	0011      	movs	r1, r2
 8008172:	0018      	movs	r0, r3
 8008174:	f000 fada 	bl	800872c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	2108      	movs	r1, #8
 8008184:	430a      	orrs	r2, r1
 8008186:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	2104      	movs	r1, #4
 8008194:	438a      	bics	r2, r1
 8008196:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	691a      	ldr	r2, [r3, #16]
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	430a      	orrs	r2, r1
 80081a8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80081aa:	e027      	b.n	80081fc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	68ba      	ldr	r2, [r7, #8]
 80081b2:	0011      	movs	r1, r2
 80081b4:	0018      	movs	r0, r3
 80081b6:	f000 fb13 	bl	80087e0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	2180      	movs	r1, #128	@ 0x80
 80081c6:	0109      	lsls	r1, r1, #4
 80081c8:	430a      	orrs	r2, r1
 80081ca:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4910      	ldr	r1, [pc, #64]	@ (8008218 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80081d8:	400a      	ands	r2, r1
 80081da:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	691b      	ldr	r3, [r3, #16]
 80081e6:	021a      	lsls	r2, r3, #8
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	430a      	orrs	r2, r1
 80081ee:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80081f0:	e004      	b.n	80081fc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80081f2:	2317      	movs	r3, #23
 80081f4:	18fb      	adds	r3, r7, r3
 80081f6:	2201      	movs	r2, #1
 80081f8:	701a      	strb	r2, [r3, #0]
      break;
 80081fa:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	223c      	movs	r2, #60	@ 0x3c
 8008200:	2100      	movs	r1, #0
 8008202:	5499      	strb	r1, [r3, r2]

  return status;
 8008204:	2317      	movs	r3, #23
 8008206:	18fb      	adds	r3, r7, r3
 8008208:	781b      	ldrb	r3, [r3, #0]
}
 800820a:	0018      	movs	r0, r3
 800820c:	46bd      	mov	sp, r7
 800820e:	b006      	add	sp, #24
 8008210:	bd80      	pop	{r7, pc}
 8008212:	46c0      	nop			@ (mov r8, r8)
 8008214:	0800ad90 	.word	0x0800ad90
 8008218:	fffffbff 	.word	0xfffffbff

0800821c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b082      	sub	sp, #8
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008224:	46c0      	nop			@ (mov r8, r8)
 8008226:	46bd      	mov	sp, r7
 8008228:	b002      	add	sp, #8
 800822a:	bd80      	pop	{r7, pc}

0800822c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b082      	sub	sp, #8
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008234:	46c0      	nop			@ (mov r8, r8)
 8008236:	46bd      	mov	sp, r7
 8008238:	b002      	add	sp, #8
 800823a:	bd80      	pop	{r7, pc}

0800823c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b082      	sub	sp, #8
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008244:	46c0      	nop			@ (mov r8, r8)
 8008246:	46bd      	mov	sp, r7
 8008248:	b002      	add	sp, #8
 800824a:	bd80      	pop	{r7, pc}

0800824c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b082      	sub	sp, #8
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008254:	46c0      	nop			@ (mov r8, r8)
 8008256:	46bd      	mov	sp, r7
 8008258:	b002      	add	sp, #8
 800825a:	bd80      	pop	{r7, pc}

0800825c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b084      	sub	sp, #16
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	4a37      	ldr	r2, [pc, #220]	@ (800834c <TIM_Base_SetConfig+0xf0>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d008      	beq.n	8008286 <TIM_Base_SetConfig+0x2a>
 8008274:	687a      	ldr	r2, [r7, #4]
 8008276:	2380      	movs	r3, #128	@ 0x80
 8008278:	05db      	lsls	r3, r3, #23
 800827a:	429a      	cmp	r2, r3
 800827c:	d003      	beq.n	8008286 <TIM_Base_SetConfig+0x2a>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	4a33      	ldr	r2, [pc, #204]	@ (8008350 <TIM_Base_SetConfig+0xf4>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d108      	bne.n	8008298 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2270      	movs	r2, #112	@ 0x70
 800828a:	4393      	bics	r3, r2
 800828c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	68fa      	ldr	r2, [r7, #12]
 8008294:	4313      	orrs	r3, r2
 8008296:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	4a2c      	ldr	r2, [pc, #176]	@ (800834c <TIM_Base_SetConfig+0xf0>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d014      	beq.n	80082ca <TIM_Base_SetConfig+0x6e>
 80082a0:	687a      	ldr	r2, [r7, #4]
 80082a2:	2380      	movs	r3, #128	@ 0x80
 80082a4:	05db      	lsls	r3, r3, #23
 80082a6:	429a      	cmp	r2, r3
 80082a8:	d00f      	beq.n	80082ca <TIM_Base_SetConfig+0x6e>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	4a28      	ldr	r2, [pc, #160]	@ (8008350 <TIM_Base_SetConfig+0xf4>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d00b      	beq.n	80082ca <TIM_Base_SetConfig+0x6e>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	4a27      	ldr	r2, [pc, #156]	@ (8008354 <TIM_Base_SetConfig+0xf8>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d007      	beq.n	80082ca <TIM_Base_SetConfig+0x6e>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	4a26      	ldr	r2, [pc, #152]	@ (8008358 <TIM_Base_SetConfig+0xfc>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d003      	beq.n	80082ca <TIM_Base_SetConfig+0x6e>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	4a25      	ldr	r2, [pc, #148]	@ (800835c <TIM_Base_SetConfig+0x100>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d108      	bne.n	80082dc <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	4a24      	ldr	r2, [pc, #144]	@ (8008360 <TIM_Base_SetConfig+0x104>)
 80082ce:	4013      	ands	r3, r2
 80082d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	68db      	ldr	r3, [r3, #12]
 80082d6:	68fa      	ldr	r2, [r7, #12]
 80082d8:	4313      	orrs	r3, r2
 80082da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2280      	movs	r2, #128	@ 0x80
 80082e0:	4393      	bics	r3, r2
 80082e2:	001a      	movs	r2, r3
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	695b      	ldr	r3, [r3, #20]
 80082e8:	4313      	orrs	r3, r2
 80082ea:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	68fa      	ldr	r2, [r7, #12]
 80082f0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	689a      	ldr	r2, [r3, #8]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	681a      	ldr	r2, [r3, #0]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	4a11      	ldr	r2, [pc, #68]	@ (800834c <TIM_Base_SetConfig+0xf0>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d007      	beq.n	800831a <TIM_Base_SetConfig+0xbe>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	4a12      	ldr	r2, [pc, #72]	@ (8008358 <TIM_Base_SetConfig+0xfc>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d003      	beq.n	800831a <TIM_Base_SetConfig+0xbe>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	4a11      	ldr	r2, [pc, #68]	@ (800835c <TIM_Base_SetConfig+0x100>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d103      	bne.n	8008322 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	691a      	ldr	r2, [r3, #16]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2201      	movs	r2, #1
 8008326:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	691b      	ldr	r3, [r3, #16]
 800832c:	2201      	movs	r2, #1
 800832e:	4013      	ands	r3, r2
 8008330:	2b01      	cmp	r3, #1
 8008332:	d106      	bne.n	8008342 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	691b      	ldr	r3, [r3, #16]
 8008338:	2201      	movs	r2, #1
 800833a:	4393      	bics	r3, r2
 800833c:	001a      	movs	r2, r3
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	611a      	str	r2, [r3, #16]
  }
}
 8008342:	46c0      	nop			@ (mov r8, r8)
 8008344:	46bd      	mov	sp, r7
 8008346:	b004      	add	sp, #16
 8008348:	bd80      	pop	{r7, pc}
 800834a:	46c0      	nop			@ (mov r8, r8)
 800834c:	40012c00 	.word	0x40012c00
 8008350:	40000400 	.word	0x40000400
 8008354:	40002000 	.word	0x40002000
 8008358:	40014400 	.word	0x40014400
 800835c:	40014800 	.word	0x40014800
 8008360:	fffffcff 	.word	0xfffffcff

08008364 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b086      	sub	sp, #24
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6a1b      	ldr	r3, [r3, #32]
 8008372:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6a1b      	ldr	r3, [r3, #32]
 8008378:	2201      	movs	r2, #1
 800837a:	4393      	bics	r3, r2
 800837c:	001a      	movs	r2, r3
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	685b      	ldr	r3, [r3, #4]
 8008386:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	699b      	ldr	r3, [r3, #24]
 800838c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	4a2e      	ldr	r2, [pc, #184]	@ (800844c <TIM_OC1_SetConfig+0xe8>)
 8008392:	4013      	ands	r3, r2
 8008394:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	2203      	movs	r2, #3
 800839a:	4393      	bics	r3, r2
 800839c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	68fa      	ldr	r2, [r7, #12]
 80083a4:	4313      	orrs	r3, r2
 80083a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	2202      	movs	r2, #2
 80083ac:	4393      	bics	r3, r2
 80083ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	689b      	ldr	r3, [r3, #8]
 80083b4:	697a      	ldr	r2, [r7, #20]
 80083b6:	4313      	orrs	r3, r2
 80083b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	4a24      	ldr	r2, [pc, #144]	@ (8008450 <TIM_OC1_SetConfig+0xec>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d007      	beq.n	80083d2 <TIM_OC1_SetConfig+0x6e>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	4a23      	ldr	r2, [pc, #140]	@ (8008454 <TIM_OC1_SetConfig+0xf0>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d003      	beq.n	80083d2 <TIM_OC1_SetConfig+0x6e>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	4a22      	ldr	r2, [pc, #136]	@ (8008458 <TIM_OC1_SetConfig+0xf4>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d10c      	bne.n	80083ec <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	2208      	movs	r2, #8
 80083d6:	4393      	bics	r3, r2
 80083d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	68db      	ldr	r3, [r3, #12]
 80083de:	697a      	ldr	r2, [r7, #20]
 80083e0:	4313      	orrs	r3, r2
 80083e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	2204      	movs	r2, #4
 80083e8:	4393      	bics	r3, r2
 80083ea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	4a18      	ldr	r2, [pc, #96]	@ (8008450 <TIM_OC1_SetConfig+0xec>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d007      	beq.n	8008404 <TIM_OC1_SetConfig+0xa0>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	4a17      	ldr	r2, [pc, #92]	@ (8008454 <TIM_OC1_SetConfig+0xf0>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d003      	beq.n	8008404 <TIM_OC1_SetConfig+0xa0>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	4a16      	ldr	r2, [pc, #88]	@ (8008458 <TIM_OC1_SetConfig+0xf4>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d111      	bne.n	8008428 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008404:	693b      	ldr	r3, [r7, #16]
 8008406:	4a15      	ldr	r2, [pc, #84]	@ (800845c <TIM_OC1_SetConfig+0xf8>)
 8008408:	4013      	ands	r3, r2
 800840a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	4a14      	ldr	r2, [pc, #80]	@ (8008460 <TIM_OC1_SetConfig+0xfc>)
 8008410:	4013      	ands	r3, r2
 8008412:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	695b      	ldr	r3, [r3, #20]
 8008418:	693a      	ldr	r2, [r7, #16]
 800841a:	4313      	orrs	r3, r2
 800841c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	699b      	ldr	r3, [r3, #24]
 8008422:	693a      	ldr	r2, [r7, #16]
 8008424:	4313      	orrs	r3, r2
 8008426:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	693a      	ldr	r2, [r7, #16]
 800842c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	68fa      	ldr	r2, [r7, #12]
 8008432:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	685a      	ldr	r2, [r3, #4]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	697a      	ldr	r2, [r7, #20]
 8008440:	621a      	str	r2, [r3, #32]
}
 8008442:	46c0      	nop			@ (mov r8, r8)
 8008444:	46bd      	mov	sp, r7
 8008446:	b006      	add	sp, #24
 8008448:	bd80      	pop	{r7, pc}
 800844a:	46c0      	nop			@ (mov r8, r8)
 800844c:	fffeff8f 	.word	0xfffeff8f
 8008450:	40012c00 	.word	0x40012c00
 8008454:	40014400 	.word	0x40014400
 8008458:	40014800 	.word	0x40014800
 800845c:	fffffeff 	.word	0xfffffeff
 8008460:	fffffdff 	.word	0xfffffdff

08008464 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b086      	sub	sp, #24
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6a1b      	ldr	r3, [r3, #32]
 8008472:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6a1b      	ldr	r3, [r3, #32]
 8008478:	2210      	movs	r2, #16
 800847a:	4393      	bics	r3, r2
 800847c:	001a      	movs	r2, r3
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	699b      	ldr	r3, [r3, #24]
 800848c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	4a2c      	ldr	r2, [pc, #176]	@ (8008544 <TIM_OC2_SetConfig+0xe0>)
 8008492:	4013      	ands	r3, r2
 8008494:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	4a2b      	ldr	r2, [pc, #172]	@ (8008548 <TIM_OC2_SetConfig+0xe4>)
 800849a:	4013      	ands	r3, r2
 800849c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	021b      	lsls	r3, r3, #8
 80084a4:	68fa      	ldr	r2, [r7, #12]
 80084a6:	4313      	orrs	r3, r2
 80084a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	2220      	movs	r2, #32
 80084ae:	4393      	bics	r3, r2
 80084b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	689b      	ldr	r3, [r3, #8]
 80084b6:	011b      	lsls	r3, r3, #4
 80084b8:	697a      	ldr	r2, [r7, #20]
 80084ba:	4313      	orrs	r3, r2
 80084bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	4a22      	ldr	r2, [pc, #136]	@ (800854c <TIM_OC2_SetConfig+0xe8>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d10d      	bne.n	80084e2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	2280      	movs	r2, #128	@ 0x80
 80084ca:	4393      	bics	r3, r2
 80084cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	68db      	ldr	r3, [r3, #12]
 80084d2:	011b      	lsls	r3, r3, #4
 80084d4:	697a      	ldr	r2, [r7, #20]
 80084d6:	4313      	orrs	r3, r2
 80084d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	2240      	movs	r2, #64	@ 0x40
 80084de:	4393      	bics	r3, r2
 80084e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	4a19      	ldr	r2, [pc, #100]	@ (800854c <TIM_OC2_SetConfig+0xe8>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d007      	beq.n	80084fa <TIM_OC2_SetConfig+0x96>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	4a18      	ldr	r2, [pc, #96]	@ (8008550 <TIM_OC2_SetConfig+0xec>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d003      	beq.n	80084fa <TIM_OC2_SetConfig+0x96>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	4a17      	ldr	r2, [pc, #92]	@ (8008554 <TIM_OC2_SetConfig+0xf0>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d113      	bne.n	8008522 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	4a16      	ldr	r2, [pc, #88]	@ (8008558 <TIM_OC2_SetConfig+0xf4>)
 80084fe:	4013      	ands	r3, r2
 8008500:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	4a15      	ldr	r2, [pc, #84]	@ (800855c <TIM_OC2_SetConfig+0xf8>)
 8008506:	4013      	ands	r3, r2
 8008508:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	695b      	ldr	r3, [r3, #20]
 800850e:	009b      	lsls	r3, r3, #2
 8008510:	693a      	ldr	r2, [r7, #16]
 8008512:	4313      	orrs	r3, r2
 8008514:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	699b      	ldr	r3, [r3, #24]
 800851a:	009b      	lsls	r3, r3, #2
 800851c:	693a      	ldr	r2, [r7, #16]
 800851e:	4313      	orrs	r3, r2
 8008520:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	693a      	ldr	r2, [r7, #16]
 8008526:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	68fa      	ldr	r2, [r7, #12]
 800852c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	685a      	ldr	r2, [r3, #4]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	697a      	ldr	r2, [r7, #20]
 800853a:	621a      	str	r2, [r3, #32]
}
 800853c:	46c0      	nop			@ (mov r8, r8)
 800853e:	46bd      	mov	sp, r7
 8008540:	b006      	add	sp, #24
 8008542:	bd80      	pop	{r7, pc}
 8008544:	feff8fff 	.word	0xfeff8fff
 8008548:	fffffcff 	.word	0xfffffcff
 800854c:	40012c00 	.word	0x40012c00
 8008550:	40014400 	.word	0x40014400
 8008554:	40014800 	.word	0x40014800
 8008558:	fffffbff 	.word	0xfffffbff
 800855c:	fffff7ff 	.word	0xfffff7ff

08008560 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b086      	sub	sp, #24
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6a1b      	ldr	r3, [r3, #32]
 800856e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6a1b      	ldr	r3, [r3, #32]
 8008574:	4a31      	ldr	r2, [pc, #196]	@ (800863c <TIM_OC3_SetConfig+0xdc>)
 8008576:	401a      	ands	r2, r3
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	69db      	ldr	r3, [r3, #28]
 8008586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	4a2d      	ldr	r2, [pc, #180]	@ (8008640 <TIM_OC3_SetConfig+0xe0>)
 800858c:	4013      	ands	r3, r2
 800858e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2203      	movs	r2, #3
 8008594:	4393      	bics	r3, r2
 8008596:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	68fa      	ldr	r2, [r7, #12]
 800859e:	4313      	orrs	r3, r2
 80085a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	4a27      	ldr	r2, [pc, #156]	@ (8008644 <TIM_OC3_SetConfig+0xe4>)
 80085a6:	4013      	ands	r3, r2
 80085a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	689b      	ldr	r3, [r3, #8]
 80085ae:	021b      	lsls	r3, r3, #8
 80085b0:	697a      	ldr	r2, [r7, #20]
 80085b2:	4313      	orrs	r3, r2
 80085b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	4a23      	ldr	r2, [pc, #140]	@ (8008648 <TIM_OC3_SetConfig+0xe8>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d10d      	bne.n	80085da <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	4a22      	ldr	r2, [pc, #136]	@ (800864c <TIM_OC3_SetConfig+0xec>)
 80085c2:	4013      	ands	r3, r2
 80085c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	68db      	ldr	r3, [r3, #12]
 80085ca:	021b      	lsls	r3, r3, #8
 80085cc:	697a      	ldr	r2, [r7, #20]
 80085ce:	4313      	orrs	r3, r2
 80085d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	4a1e      	ldr	r2, [pc, #120]	@ (8008650 <TIM_OC3_SetConfig+0xf0>)
 80085d6:	4013      	ands	r3, r2
 80085d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	4a1a      	ldr	r2, [pc, #104]	@ (8008648 <TIM_OC3_SetConfig+0xe8>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d007      	beq.n	80085f2 <TIM_OC3_SetConfig+0x92>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	4a1b      	ldr	r2, [pc, #108]	@ (8008654 <TIM_OC3_SetConfig+0xf4>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d003      	beq.n	80085f2 <TIM_OC3_SetConfig+0x92>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	4a1a      	ldr	r2, [pc, #104]	@ (8008658 <TIM_OC3_SetConfig+0xf8>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d113      	bne.n	800861a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	4a19      	ldr	r2, [pc, #100]	@ (800865c <TIM_OC3_SetConfig+0xfc>)
 80085f6:	4013      	ands	r3, r2
 80085f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	4a18      	ldr	r2, [pc, #96]	@ (8008660 <TIM_OC3_SetConfig+0x100>)
 80085fe:	4013      	ands	r3, r2
 8008600:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	695b      	ldr	r3, [r3, #20]
 8008606:	011b      	lsls	r3, r3, #4
 8008608:	693a      	ldr	r2, [r7, #16]
 800860a:	4313      	orrs	r3, r2
 800860c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	699b      	ldr	r3, [r3, #24]
 8008612:	011b      	lsls	r3, r3, #4
 8008614:	693a      	ldr	r2, [r7, #16]
 8008616:	4313      	orrs	r3, r2
 8008618:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	693a      	ldr	r2, [r7, #16]
 800861e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	68fa      	ldr	r2, [r7, #12]
 8008624:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	685a      	ldr	r2, [r3, #4]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	697a      	ldr	r2, [r7, #20]
 8008632:	621a      	str	r2, [r3, #32]
}
 8008634:	46c0      	nop			@ (mov r8, r8)
 8008636:	46bd      	mov	sp, r7
 8008638:	b006      	add	sp, #24
 800863a:	bd80      	pop	{r7, pc}
 800863c:	fffffeff 	.word	0xfffffeff
 8008640:	fffeff8f 	.word	0xfffeff8f
 8008644:	fffffdff 	.word	0xfffffdff
 8008648:	40012c00 	.word	0x40012c00
 800864c:	fffff7ff 	.word	0xfffff7ff
 8008650:	fffffbff 	.word	0xfffffbff
 8008654:	40014400 	.word	0x40014400
 8008658:	40014800 	.word	0x40014800
 800865c:	ffffefff 	.word	0xffffefff
 8008660:	ffffdfff 	.word	0xffffdfff

08008664 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b086      	sub	sp, #24
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6a1b      	ldr	r3, [r3, #32]
 8008672:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6a1b      	ldr	r3, [r3, #32]
 8008678:	4a24      	ldr	r2, [pc, #144]	@ (800870c <TIM_OC4_SetConfig+0xa8>)
 800867a:	401a      	ands	r2, r3
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	69db      	ldr	r3, [r3, #28]
 800868a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	4a20      	ldr	r2, [pc, #128]	@ (8008710 <TIM_OC4_SetConfig+0xac>)
 8008690:	4013      	ands	r3, r2
 8008692:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	4a1f      	ldr	r2, [pc, #124]	@ (8008714 <TIM_OC4_SetConfig+0xb0>)
 8008698:	4013      	ands	r3, r2
 800869a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	021b      	lsls	r3, r3, #8
 80086a2:	68fa      	ldr	r2, [r7, #12]
 80086a4:	4313      	orrs	r3, r2
 80086a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	4a1b      	ldr	r2, [pc, #108]	@ (8008718 <TIM_OC4_SetConfig+0xb4>)
 80086ac:	4013      	ands	r3, r2
 80086ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	689b      	ldr	r3, [r3, #8]
 80086b4:	031b      	lsls	r3, r3, #12
 80086b6:	693a      	ldr	r2, [r7, #16]
 80086b8:	4313      	orrs	r3, r2
 80086ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	4a17      	ldr	r2, [pc, #92]	@ (800871c <TIM_OC4_SetConfig+0xb8>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d007      	beq.n	80086d4 <TIM_OC4_SetConfig+0x70>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	4a16      	ldr	r2, [pc, #88]	@ (8008720 <TIM_OC4_SetConfig+0xbc>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d003      	beq.n	80086d4 <TIM_OC4_SetConfig+0x70>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	4a15      	ldr	r2, [pc, #84]	@ (8008724 <TIM_OC4_SetConfig+0xc0>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d109      	bne.n	80086e8 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	4a14      	ldr	r2, [pc, #80]	@ (8008728 <TIM_OC4_SetConfig+0xc4>)
 80086d8:	4013      	ands	r3, r2
 80086da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	695b      	ldr	r3, [r3, #20]
 80086e0:	019b      	lsls	r3, r3, #6
 80086e2:	697a      	ldr	r2, [r7, #20]
 80086e4:	4313      	orrs	r3, r2
 80086e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	697a      	ldr	r2, [r7, #20]
 80086ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	68fa      	ldr	r2, [r7, #12]
 80086f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	685a      	ldr	r2, [r3, #4]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	693a      	ldr	r2, [r7, #16]
 8008700:	621a      	str	r2, [r3, #32]
}
 8008702:	46c0      	nop			@ (mov r8, r8)
 8008704:	46bd      	mov	sp, r7
 8008706:	b006      	add	sp, #24
 8008708:	bd80      	pop	{r7, pc}
 800870a:	46c0      	nop			@ (mov r8, r8)
 800870c:	ffffefff 	.word	0xffffefff
 8008710:	feff8fff 	.word	0xfeff8fff
 8008714:	fffffcff 	.word	0xfffffcff
 8008718:	ffffdfff 	.word	0xffffdfff
 800871c:	40012c00 	.word	0x40012c00
 8008720:	40014400 	.word	0x40014400
 8008724:	40014800 	.word	0x40014800
 8008728:	ffffbfff 	.word	0xffffbfff

0800872c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b086      	sub	sp, #24
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6a1b      	ldr	r3, [r3, #32]
 800873a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6a1b      	ldr	r3, [r3, #32]
 8008740:	4a21      	ldr	r2, [pc, #132]	@ (80087c8 <TIM_OC5_SetConfig+0x9c>)
 8008742:	401a      	ands	r2, r3
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	4a1d      	ldr	r2, [pc, #116]	@ (80087cc <TIM_OC5_SetConfig+0xa0>)
 8008758:	4013      	ands	r3, r2
 800875a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	68fa      	ldr	r2, [r7, #12]
 8008762:	4313      	orrs	r3, r2
 8008764:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	4a19      	ldr	r2, [pc, #100]	@ (80087d0 <TIM_OC5_SetConfig+0xa4>)
 800876a:	4013      	ands	r3, r2
 800876c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	689b      	ldr	r3, [r3, #8]
 8008772:	041b      	lsls	r3, r3, #16
 8008774:	693a      	ldr	r2, [r7, #16]
 8008776:	4313      	orrs	r3, r2
 8008778:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	4a15      	ldr	r2, [pc, #84]	@ (80087d4 <TIM_OC5_SetConfig+0xa8>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d007      	beq.n	8008792 <TIM_OC5_SetConfig+0x66>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	4a14      	ldr	r2, [pc, #80]	@ (80087d8 <TIM_OC5_SetConfig+0xac>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d003      	beq.n	8008792 <TIM_OC5_SetConfig+0x66>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	4a13      	ldr	r2, [pc, #76]	@ (80087dc <TIM_OC5_SetConfig+0xb0>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d109      	bne.n	80087a6 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	4a0c      	ldr	r2, [pc, #48]	@ (80087c8 <TIM_OC5_SetConfig+0x9c>)
 8008796:	4013      	ands	r3, r2
 8008798:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	695b      	ldr	r3, [r3, #20]
 800879e:	021b      	lsls	r3, r3, #8
 80087a0:	697a      	ldr	r2, [r7, #20]
 80087a2:	4313      	orrs	r3, r2
 80087a4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	697a      	ldr	r2, [r7, #20]
 80087aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	68fa      	ldr	r2, [r7, #12]
 80087b0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	685a      	ldr	r2, [r3, #4]
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	693a      	ldr	r2, [r7, #16]
 80087be:	621a      	str	r2, [r3, #32]
}
 80087c0:	46c0      	nop			@ (mov r8, r8)
 80087c2:	46bd      	mov	sp, r7
 80087c4:	b006      	add	sp, #24
 80087c6:	bd80      	pop	{r7, pc}
 80087c8:	fffeffff 	.word	0xfffeffff
 80087cc:	fffeff8f 	.word	0xfffeff8f
 80087d0:	fffdffff 	.word	0xfffdffff
 80087d4:	40012c00 	.word	0x40012c00
 80087d8:	40014400 	.word	0x40014400
 80087dc:	40014800 	.word	0x40014800

080087e0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b086      	sub	sp, #24
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6a1b      	ldr	r3, [r3, #32]
 80087ee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6a1b      	ldr	r3, [r3, #32]
 80087f4:	4a22      	ldr	r2, [pc, #136]	@ (8008880 <TIM_OC6_SetConfig+0xa0>)
 80087f6:	401a      	ands	r2, r3
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	4a1e      	ldr	r2, [pc, #120]	@ (8008884 <TIM_OC6_SetConfig+0xa4>)
 800880c:	4013      	ands	r3, r2
 800880e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	021b      	lsls	r3, r3, #8
 8008816:	68fa      	ldr	r2, [r7, #12]
 8008818:	4313      	orrs	r3, r2
 800881a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	4a1a      	ldr	r2, [pc, #104]	@ (8008888 <TIM_OC6_SetConfig+0xa8>)
 8008820:	4013      	ands	r3, r2
 8008822:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	689b      	ldr	r3, [r3, #8]
 8008828:	051b      	lsls	r3, r3, #20
 800882a:	693a      	ldr	r2, [r7, #16]
 800882c:	4313      	orrs	r3, r2
 800882e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	4a16      	ldr	r2, [pc, #88]	@ (800888c <TIM_OC6_SetConfig+0xac>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d007      	beq.n	8008848 <TIM_OC6_SetConfig+0x68>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	4a15      	ldr	r2, [pc, #84]	@ (8008890 <TIM_OC6_SetConfig+0xb0>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d003      	beq.n	8008848 <TIM_OC6_SetConfig+0x68>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	4a14      	ldr	r2, [pc, #80]	@ (8008894 <TIM_OC6_SetConfig+0xb4>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d109      	bne.n	800885c <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	4a13      	ldr	r2, [pc, #76]	@ (8008898 <TIM_OC6_SetConfig+0xb8>)
 800884c:	4013      	ands	r3, r2
 800884e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	695b      	ldr	r3, [r3, #20]
 8008854:	029b      	lsls	r3, r3, #10
 8008856:	697a      	ldr	r2, [r7, #20]
 8008858:	4313      	orrs	r3, r2
 800885a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	697a      	ldr	r2, [r7, #20]
 8008860:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	68fa      	ldr	r2, [r7, #12]
 8008866:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	685a      	ldr	r2, [r3, #4]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	693a      	ldr	r2, [r7, #16]
 8008874:	621a      	str	r2, [r3, #32]
}
 8008876:	46c0      	nop			@ (mov r8, r8)
 8008878:	46bd      	mov	sp, r7
 800887a:	b006      	add	sp, #24
 800887c:	bd80      	pop	{r7, pc}
 800887e:	46c0      	nop			@ (mov r8, r8)
 8008880:	ffefffff 	.word	0xffefffff
 8008884:	feff8fff 	.word	0xfeff8fff
 8008888:	ffdfffff 	.word	0xffdfffff
 800888c:	40012c00 	.word	0x40012c00
 8008890:	40014400 	.word	0x40014400
 8008894:	40014800 	.word	0x40014800
 8008898:	fffbffff 	.word	0xfffbffff

0800889c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b084      	sub	sp, #16
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	223c      	movs	r2, #60	@ 0x3c
 80088aa:	5c9b      	ldrb	r3, [r3, r2]
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	d101      	bne.n	80088b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80088b0:	2302      	movs	r3, #2
 80088b2:	e050      	b.n	8008956 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	223c      	movs	r2, #60	@ 0x3c
 80088b8:	2101      	movs	r1, #1
 80088ba:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	223d      	movs	r2, #61	@ 0x3d
 80088c0:	2102      	movs	r1, #2
 80088c2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	685b      	ldr	r3, [r3, #4]
 80088ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	689b      	ldr	r3, [r3, #8]
 80088d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4a21      	ldr	r2, [pc, #132]	@ (8008960 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d108      	bne.n	80088f0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	4a20      	ldr	r2, [pc, #128]	@ (8008964 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80088e2:	4013      	ands	r3, r2
 80088e4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	685b      	ldr	r3, [r3, #4]
 80088ea:	68fa      	ldr	r2, [r7, #12]
 80088ec:	4313      	orrs	r3, r2
 80088ee:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2270      	movs	r2, #112	@ 0x70
 80088f4:	4393      	bics	r3, r2
 80088f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	68fa      	ldr	r2, [r7, #12]
 80088fe:	4313      	orrs	r3, r2
 8008900:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	68fa      	ldr	r2, [r7, #12]
 8008908:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4a14      	ldr	r2, [pc, #80]	@ (8008960 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008910:	4293      	cmp	r3, r2
 8008912:	d00a      	beq.n	800892a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681a      	ldr	r2, [r3, #0]
 8008918:	2380      	movs	r3, #128	@ 0x80
 800891a:	05db      	lsls	r3, r3, #23
 800891c:	429a      	cmp	r2, r3
 800891e:	d004      	beq.n	800892a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4a10      	ldr	r2, [pc, #64]	@ (8008968 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d10c      	bne.n	8008944 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	2280      	movs	r2, #128	@ 0x80
 800892e:	4393      	bics	r3, r2
 8008930:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	689b      	ldr	r3, [r3, #8]
 8008936:	68ba      	ldr	r2, [r7, #8]
 8008938:	4313      	orrs	r3, r2
 800893a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	68ba      	ldr	r2, [r7, #8]
 8008942:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	223d      	movs	r2, #61	@ 0x3d
 8008948:	2101      	movs	r1, #1
 800894a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	223c      	movs	r2, #60	@ 0x3c
 8008950:	2100      	movs	r1, #0
 8008952:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008954:	2300      	movs	r3, #0
}
 8008956:	0018      	movs	r0, r3
 8008958:	46bd      	mov	sp, r7
 800895a:	b004      	add	sp, #16
 800895c:	bd80      	pop	{r7, pc}
 800895e:	46c0      	nop			@ (mov r8, r8)
 8008960:	40012c00 	.word	0x40012c00
 8008964:	ff0fffff 	.word	0xff0fffff
 8008968:	40000400 	.word	0x40000400

0800896c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b084      	sub	sp, #16
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008976:	2300      	movs	r3, #0
 8008978:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	223c      	movs	r2, #60	@ 0x3c
 800897e:	5c9b      	ldrb	r3, [r3, r2]
 8008980:	2b01      	cmp	r3, #1
 8008982:	d101      	bne.n	8008988 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008984:	2302      	movs	r3, #2
 8008986:	e06f      	b.n	8008a68 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	223c      	movs	r2, #60	@ 0x3c
 800898c:	2101      	movs	r1, #1
 800898e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	22ff      	movs	r2, #255	@ 0xff
 8008994:	4393      	bics	r3, r2
 8008996:	001a      	movs	r2, r3
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	68db      	ldr	r3, [r3, #12]
 800899c:	4313      	orrs	r3, r2
 800899e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	4a33      	ldr	r2, [pc, #204]	@ (8008a70 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 80089a4:	401a      	ands	r2, r3
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	689b      	ldr	r3, [r3, #8]
 80089aa:	4313      	orrs	r3, r2
 80089ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	4a30      	ldr	r2, [pc, #192]	@ (8008a74 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 80089b2:	401a      	ands	r2, r3
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	4313      	orrs	r3, r2
 80089ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	4a2e      	ldr	r2, [pc, #184]	@ (8008a78 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 80089c0:	401a      	ands	r2, r3
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4313      	orrs	r3, r2
 80089c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	4a2b      	ldr	r2, [pc, #172]	@ (8008a7c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80089ce:	401a      	ands	r2, r3
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	691b      	ldr	r3, [r3, #16]
 80089d4:	4313      	orrs	r3, r2
 80089d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	4a29      	ldr	r2, [pc, #164]	@ (8008a80 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80089dc:	401a      	ands	r2, r3
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	695b      	ldr	r3, [r3, #20]
 80089e2:	4313      	orrs	r3, r2
 80089e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	4a26      	ldr	r2, [pc, #152]	@ (8008a84 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80089ea:	401a      	ands	r2, r3
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089f0:	4313      	orrs	r3, r2
 80089f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	4a24      	ldr	r2, [pc, #144]	@ (8008a88 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80089f8:	401a      	ands	r2, r3
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	699b      	ldr	r3, [r3, #24]
 80089fe:	041b      	lsls	r3, r3, #16
 8008a00:	4313      	orrs	r3, r2
 8008a02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	4a21      	ldr	r2, [pc, #132]	@ (8008a8c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8008a08:	401a      	ands	r2, r3
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	69db      	ldr	r3, [r3, #28]
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4a1e      	ldr	r2, [pc, #120]	@ (8008a90 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d11c      	bne.n	8008a56 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	4a1d      	ldr	r2, [pc, #116]	@ (8008a94 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8008a20:	401a      	ands	r2, r3
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a26:	051b      	lsls	r3, r3, #20
 8008a28:	4313      	orrs	r3, r2
 8008a2a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	4a1a      	ldr	r2, [pc, #104]	@ (8008a98 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8008a30:	401a      	ands	r2, r3
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	6a1b      	ldr	r3, [r3, #32]
 8008a36:	4313      	orrs	r3, r2
 8008a38:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	4a17      	ldr	r2, [pc, #92]	@ (8008a9c <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8008a3e:	401a      	ands	r2, r3
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a44:	4313      	orrs	r3, r2
 8008a46:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	4a15      	ldr	r2, [pc, #84]	@ (8008aa0 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8008a4c:	401a      	ands	r2, r3
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a52:	4313      	orrs	r3, r2
 8008a54:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	68fa      	ldr	r2, [r7, #12]
 8008a5c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	223c      	movs	r2, #60	@ 0x3c
 8008a62:	2100      	movs	r1, #0
 8008a64:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008a66:	2300      	movs	r3, #0
}
 8008a68:	0018      	movs	r0, r3
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	b004      	add	sp, #16
 8008a6e:	bd80      	pop	{r7, pc}
 8008a70:	fffffcff 	.word	0xfffffcff
 8008a74:	fffffbff 	.word	0xfffffbff
 8008a78:	fffff7ff 	.word	0xfffff7ff
 8008a7c:	ffffefff 	.word	0xffffefff
 8008a80:	ffffdfff 	.word	0xffffdfff
 8008a84:	ffffbfff 	.word	0xffffbfff
 8008a88:	fff0ffff 	.word	0xfff0ffff
 8008a8c:	efffffff 	.word	0xefffffff
 8008a90:	40012c00 	.word	0x40012c00
 8008a94:	ff0fffff 	.word	0xff0fffff
 8008a98:	feffffff 	.word	0xfeffffff
 8008a9c:	fdffffff 	.word	0xfdffffff
 8008aa0:	dfffffff 	.word	0xdfffffff

08008aa4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b082      	sub	sp, #8
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008aac:	46c0      	nop			@ (mov r8, r8)
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	b002      	add	sp, #8
 8008ab2:	bd80      	pop	{r7, pc}

08008ab4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b082      	sub	sp, #8
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008abc:	46c0      	nop			@ (mov r8, r8)
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	b002      	add	sp, #8
 8008ac2:	bd80      	pop	{r7, pc}

08008ac4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b082      	sub	sp, #8
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008acc:	46c0      	nop			@ (mov r8, r8)
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	b002      	add	sp, #8
 8008ad2:	bd80      	pop	{r7, pc}

08008ad4 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b082      	sub	sp, #8
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d101      	bne.n	8008ae6 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	e032      	b.n	8008b4c <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2288      	movs	r2, #136	@ 0x88
 8008aea:	2124      	movs	r1, #36	@ 0x24
 8008aec:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	681a      	ldr	r2, [r3, #0]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	2101      	movs	r1, #1
 8008afa:	438a      	bics	r2, r1
 8008afc:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	2200      	movs	r2, #0
 8008b04:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	2200      	movs	r2, #0
 8008b14:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	0018      	movs	r0, r3
 8008b1a:	f7fa fec1 	bl	80038a0 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2290      	movs	r2, #144	@ 0x90
 8008b22:	2100      	movs	r1, #0
 8008b24:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2288      	movs	r2, #136	@ 0x88
 8008b2a:	2100      	movs	r1, #0
 8008b2c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	228c      	movs	r2, #140	@ 0x8c
 8008b32:	2100      	movs	r1, #0
 8008b34:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2284      	movs	r2, #132	@ 0x84
 8008b46:	2100      	movs	r1, #0
 8008b48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008b4a:	2300      	movs	r3, #0
}
 8008b4c:	0018      	movs	r0, r3
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	b002      	add	sp, #8
 8008b52:	bd80      	pop	{r7, pc}

08008b54 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b088      	sub	sp, #32
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	60f8      	str	r0, [r7, #12]
 8008b5c:	60b9      	str	r1, [r7, #8]
 8008b5e:	1dbb      	adds	r3, r7, #6
 8008b60:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	2288      	movs	r2, #136	@ 0x88
 8008b66:	589b      	ldr	r3, [r3, r2]
 8008b68:	2b20      	cmp	r3, #32
 8008b6a:	d000      	beq.n	8008b6e <HAL_UART_Transmit_DMA+0x1a>
 8008b6c:	e079      	b.n	8008c62 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d003      	beq.n	8008b7c <HAL_UART_Transmit_DMA+0x28>
 8008b74:	1dbb      	adds	r3, r7, #6
 8008b76:	881b      	ldrh	r3, [r3, #0]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d101      	bne.n	8008b80 <HAL_UART_Transmit_DMA+0x2c>
    {
      return HAL_ERROR;
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	e071      	b.n	8008c64 <HAL_UART_Transmit_DMA+0x110>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	689a      	ldr	r2, [r3, #8]
 8008b84:	2380      	movs	r3, #128	@ 0x80
 8008b86:	015b      	lsls	r3, r3, #5
 8008b88:	429a      	cmp	r2, r3
 8008b8a:	d109      	bne.n	8008ba0 <HAL_UART_Transmit_DMA+0x4c>
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	691b      	ldr	r3, [r3, #16]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d105      	bne.n	8008ba0 <HAL_UART_Transmit_DMA+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	2201      	movs	r2, #1
 8008b98:	4013      	ands	r3, r2
 8008b9a:	d001      	beq.n	8008ba0 <HAL_UART_Transmit_DMA+0x4c>
      {
        return  HAL_ERROR;
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	e061      	b.n	8008c64 <HAL_UART_Transmit_DMA+0x110>
      }
    }

    huart->pTxBuffPtr  = pData;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	68ba      	ldr	r2, [r7, #8]
 8008ba4:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	1dba      	adds	r2, r7, #6
 8008baa:	2154      	movs	r1, #84	@ 0x54
 8008bac:	8812      	ldrh	r2, [r2, #0]
 8008bae:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	1dba      	adds	r2, r7, #6
 8008bb4:	2156      	movs	r1, #86	@ 0x56
 8008bb6:	8812      	ldrh	r2, [r2, #0]
 8008bb8:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2290      	movs	r2, #144	@ 0x90
 8008bbe:	2100      	movs	r1, #0
 8008bc0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	2288      	movs	r2, #136	@ 0x88
 8008bc6:	2121      	movs	r1, #33	@ 0x21
 8008bc8:	5099      	str	r1, [r3, r2]

    if (huart->hdmatx != NULL)
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d028      	beq.n	8008c24 <HAL_UART_Transmit_DMA+0xd0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008bd6:	4a25      	ldr	r2, [pc, #148]	@ (8008c6c <HAL_UART_Transmit_DMA+0x118>)
 8008bd8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008bde:	4a24      	ldr	r2, [pc, #144]	@ (8008c70 <HAL_UART_Transmit_DMA+0x11c>)
 8008be0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008be6:	4a23      	ldr	r2, [pc, #140]	@ (8008c74 <HAL_UART_Transmit_DMA+0x120>)
 8008be8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008bee:	2200      	movs	r2, #0
 8008bf0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008bfa:	0019      	movs	r1, r3
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	3328      	adds	r3, #40	@ 0x28
 8008c02:	001a      	movs	r2, r3
 8008c04:	1dbb      	adds	r3, r7, #6
 8008c06:	881b      	ldrh	r3, [r3, #0]
 8008c08:	f7fb fab0 	bl	800416c <HAL_DMA_Start_IT>
 8008c0c:	1e03      	subs	r3, r0, #0
 8008c0e:	d009      	beq.n	8008c24 <HAL_UART_Transmit_DMA+0xd0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	2290      	movs	r2, #144	@ 0x90
 8008c14:	2110      	movs	r1, #16
 8008c16:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	2288      	movs	r2, #136	@ 0x88
 8008c1c:	2120      	movs	r1, #32
 8008c1e:	5099      	str	r1, [r3, r2]

        return HAL_ERROR;
 8008c20:	2301      	movs	r3, #1
 8008c22:	e01f      	b.n	8008c64 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	2240      	movs	r2, #64	@ 0x40
 8008c2a:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008c2c:	f3ef 8310 	mrs	r3, PRIMASK
 8008c30:	613b      	str	r3, [r7, #16]
  return(result);
 8008c32:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008c34:	61fb      	str	r3, [r7, #28]
 8008c36:	2301      	movs	r3, #1
 8008c38:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	f383 8810 	msr	PRIMASK, r3
}
 8008c40:	46c0      	nop			@ (mov r8, r8)
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	689a      	ldr	r2, [r3, #8]
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	2180      	movs	r1, #128	@ 0x80
 8008c4e:	430a      	orrs	r2, r1
 8008c50:	609a      	str	r2, [r3, #8]
 8008c52:	69fb      	ldr	r3, [r7, #28]
 8008c54:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c56:	69bb      	ldr	r3, [r7, #24]
 8008c58:	f383 8810 	msr	PRIMASK, r3
}
 8008c5c:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	e000      	b.n	8008c64 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8008c62:	2302      	movs	r3, #2
  }
}
 8008c64:	0018      	movs	r0, r3
 8008c66:	46bd      	mov	sp, r7
 8008c68:	b008      	add	sp, #32
 8008c6a:	bd80      	pop	{r7, pc}
 8008c6c:	08009e7d 	.word	0x08009e7d
 8008c70:	08009f15 	.word	0x08009f15
 8008c74:	0800a0a7 	.word	0x0800a0a7

08008c78 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b096      	sub	sp, #88	@ 0x58
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008c80:	f3ef 8310 	mrs	r3, PRIMASK
 8008c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8008c86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008c88:	657b      	str	r3, [r7, #84]	@ 0x54
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c90:	f383 8810 	msr	PRIMASK, r3
}
 8008c94:	46c0      	nop			@ (mov r8, r8)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	681a      	ldr	r2, [r3, #0]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4979      	ldr	r1, [pc, #484]	@ (8008e88 <HAL_UART_Abort+0x210>)
 8008ca2:	400a      	ands	r2, r1
 8008ca4:	601a      	str	r2, [r3, #0]
 8008ca6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ca8:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008caa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cac:	f383 8810 	msr	PRIMASK, r3
}
 8008cb0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008cb2:	f3ef 8310 	mrs	r3, PRIMASK
 8008cb6:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 8008cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 8008cba:	653b      	str	r3, [r7, #80]	@ 0x50
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008cc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cc2:	f383 8810 	msr	PRIMASK, r3
}
 8008cc6:	46c0      	nop			@ (mov r8, r8)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	689a      	ldr	r2, [r3, #8]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	496e      	ldr	r1, [pc, #440]	@ (8008e8c <HAL_UART_Abort+0x214>)
 8008cd4:	400a      	ands	r2, r1
 8008cd6:	609a      	str	r2, [r3, #8]
 8008cd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008cda:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008cdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008cde:	f383 8810 	msr	PRIMASK, r3
}
 8008ce2:	46c0      	nop			@ (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ce8:	2b01      	cmp	r3, #1
 8008cea:	d118      	bne.n	8008d1e <HAL_UART_Abort+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008cec:	f3ef 8310 	mrs	r3, PRIMASK
 8008cf0:	623b      	str	r3, [r7, #32]
  return(result);
 8008cf2:	6a3b      	ldr	r3, [r7, #32]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8008cf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cfc:	f383 8810 	msr	PRIMASK, r3
}
 8008d00:	46c0      	nop			@ (mov r8, r8)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	681a      	ldr	r2, [r3, #0]
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	2110      	movs	r1, #16
 8008d0e:	438a      	bics	r2, r1
 8008d10:	601a      	str	r2, [r3, #0]
 8008d12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d14:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d18:	f383 8810 	msr	PRIMASK, r3
}
 8008d1c:	46c0      	nop			@ (mov r8, r8)
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	689b      	ldr	r3, [r3, #8]
 8008d24:	2280      	movs	r2, #128	@ 0x80
 8008d26:	4013      	ands	r3, r2
 8008d28:	2b80      	cmp	r3, #128	@ 0x80
 8008d2a:	d135      	bne.n	8008d98 <HAL_UART_Abort+0x120>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008d2c:	f3ef 8310 	mrs	r3, PRIMASK
 8008d30:	617b      	str	r3, [r7, #20]
  return(result);
 8008d32:	697b      	ldr	r3, [r7, #20]
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008d34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d36:	2301      	movs	r3, #1
 8008d38:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d3a:	69bb      	ldr	r3, [r7, #24]
 8008d3c:	f383 8810 	msr	PRIMASK, r3
}
 8008d40:	46c0      	nop			@ (mov r8, r8)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	689a      	ldr	r2, [r3, #8]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	2180      	movs	r1, #128	@ 0x80
 8008d4e:	438a      	bics	r2, r1
 8008d50:	609a      	str	r2, [r3, #8]
 8008d52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008d54:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d56:	69fb      	ldr	r3, [r7, #28]
 8008d58:	f383 8810 	msr	PRIMASK, r3
}
 8008d5c:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d018      	beq.n	8008d98 <HAL_UART_Abort+0x120>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008d72:	0018      	movs	r0, r3
 8008d74:	f7fb fa82 	bl	800427c <HAL_DMA_Abort>
 8008d78:	1e03      	subs	r3, r0, #0
 8008d7a:	d00d      	beq.n	8008d98 <HAL_UART_Abort+0x120>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008d80:	0018      	movs	r0, r3
 8008d82:	f7fb fc15 	bl	80045b0 <HAL_DMA_GetError>
 8008d86:	0003      	movs	r3, r0
 8008d88:	2b20      	cmp	r3, #32
 8008d8a:	d105      	bne.n	8008d98 <HAL_UART_Abort+0x120>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2290      	movs	r2, #144	@ 0x90
 8008d90:	2110      	movs	r1, #16
 8008d92:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008d94:	2303      	movs	r3, #3
 8008d96:	e072      	b.n	8008e7e <HAL_UART_Abort+0x206>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	689b      	ldr	r3, [r3, #8]
 8008d9e:	2240      	movs	r2, #64	@ 0x40
 8008da0:	4013      	ands	r3, r2
 8008da2:	2b40      	cmp	r3, #64	@ 0x40
 8008da4:	d139      	bne.n	8008e1a <HAL_UART_Abort+0x1a2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008da6:	f3ef 8310 	mrs	r3, PRIMASK
 8008daa:	60bb      	str	r3, [r7, #8]
  return(result);
 8008dac:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008dae:	647b      	str	r3, [r7, #68]	@ 0x44
 8008db0:	2301      	movs	r3, #1
 8008db2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	f383 8810 	msr	PRIMASK, r3
}
 8008dba:	46c0      	nop			@ (mov r8, r8)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	689a      	ldr	r2, [r3, #8]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	2140      	movs	r1, #64	@ 0x40
 8008dc8:	438a      	bics	r2, r1
 8008dca:	609a      	str	r2, [r3, #8]
 8008dcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008dce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	f383 8810 	msr	PRIMASK, r3
}
 8008dd6:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2280      	movs	r2, #128	@ 0x80
 8008ddc:	589b      	ldr	r3, [r3, r2]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d01b      	beq.n	8008e1a <HAL_UART_Abort+0x1a2>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2280      	movs	r2, #128	@ 0x80
 8008de6:	589b      	ldr	r3, [r3, r2]
 8008de8:	2200      	movs	r2, #0
 8008dea:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2280      	movs	r2, #128	@ 0x80
 8008df0:	589b      	ldr	r3, [r3, r2]
 8008df2:	0018      	movs	r0, r3
 8008df4:	f7fb fa42 	bl	800427c <HAL_DMA_Abort>
 8008df8:	1e03      	subs	r3, r0, #0
 8008dfa:	d00e      	beq.n	8008e1a <HAL_UART_Abort+0x1a2>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2280      	movs	r2, #128	@ 0x80
 8008e00:	589b      	ldr	r3, [r3, r2]
 8008e02:	0018      	movs	r0, r3
 8008e04:	f7fb fbd4 	bl	80045b0 <HAL_DMA_GetError>
 8008e08:	0003      	movs	r3, r0
 8008e0a:	2b20      	cmp	r3, #32
 8008e0c:	d105      	bne.n	8008e1a <HAL_UART_Abort+0x1a2>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2290      	movs	r2, #144	@ 0x90
 8008e12:	2110      	movs	r1, #16
 8008e14:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008e16:	2303      	movs	r3, #3
 8008e18:	e031      	b.n	8008e7e <HAL_UART_Abort+0x206>
    }
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2256      	movs	r2, #86	@ 0x56
 8008e1e:	2100      	movs	r1, #0
 8008e20:	5299      	strh	r1, [r3, r2]
  huart->RxXferCount = 0U;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	225e      	movs	r2, #94	@ 0x5e
 8008e26:	2100      	movs	r1, #0
 8008e28:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	220f      	movs	r2, #15
 8008e30:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008e36:	2380      	movs	r3, #128	@ 0x80
 8008e38:	059b      	lsls	r3, r3, #22
 8008e3a:	429a      	cmp	r2, r3
 8008e3c:	d107      	bne.n	8008e4e <HAL_UART_Abort+0x1d6>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	699a      	ldr	r2, [r3, #24]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	2110      	movs	r1, #16
 8008e4a:	430a      	orrs	r2, r1
 8008e4c:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	699a      	ldr	r2, [r3, #24]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	2108      	movs	r1, #8
 8008e5a:	430a      	orrs	r2, r1
 8008e5c:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2288      	movs	r2, #136	@ 0x88
 8008e62:	2120      	movs	r1, #32
 8008e64:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	228c      	movs	r2, #140	@ 0x8c
 8008e6a:	2120      	movs	r1, #32
 8008e6c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2200      	movs	r2, #0
 8008e72:	66da      	str	r2, [r3, #108]	@ 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2290      	movs	r2, #144	@ 0x90
 8008e78:	2100      	movs	r1, #0
 8008e7a:	5099      	str	r1, [r3, r2]

  return HAL_OK;
 8008e7c:	2300      	movs	r3, #0
}
 8008e7e:	0018      	movs	r0, r3
 8008e80:	46bd      	mov	sp, r7
 8008e82:	b016      	add	sp, #88	@ 0x58
 8008e84:	bd80      	pop	{r7, pc}
 8008e86:	46c0      	nop			@ (mov r8, r8)
 8008e88:	fffffe1f 	.word	0xfffffe1f
 8008e8c:	ef7ffffe 	.word	0xef7ffffe

08008e90 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008e90:	b5b0      	push	{r4, r5, r7, lr}
 8008e92:	b0aa      	sub	sp, #168	@ 0xa8
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	69db      	ldr	r3, [r3, #28]
 8008e9e:	22a4      	movs	r2, #164	@ 0xa4
 8008ea0:	18b9      	adds	r1, r7, r2
 8008ea2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	20a0      	movs	r0, #160	@ 0xa0
 8008eac:	1839      	adds	r1, r7, r0
 8008eae:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	689b      	ldr	r3, [r3, #8]
 8008eb6:	249c      	movs	r4, #156	@ 0x9c
 8008eb8:	1939      	adds	r1, r7, r4
 8008eba:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008ebc:	0011      	movs	r1, r2
 8008ebe:	18bb      	adds	r3, r7, r2
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4aa2      	ldr	r2, [pc, #648]	@ (800914c <HAL_UART_IRQHandler+0x2bc>)
 8008ec4:	4013      	ands	r3, r2
 8008ec6:	2298      	movs	r2, #152	@ 0x98
 8008ec8:	18bd      	adds	r5, r7, r2
 8008eca:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8008ecc:	18bb      	adds	r3, r7, r2
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d11a      	bne.n	8008f0a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008ed4:	187b      	adds	r3, r7, r1
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	2220      	movs	r2, #32
 8008eda:	4013      	ands	r3, r2
 8008edc:	d015      	beq.n	8008f0a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008ede:	183b      	adds	r3, r7, r0
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	2220      	movs	r2, #32
 8008ee4:	4013      	ands	r3, r2
 8008ee6:	d105      	bne.n	8008ef4 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008ee8:	193b      	adds	r3, r7, r4
 8008eea:	681a      	ldr	r2, [r3, #0]
 8008eec:	2380      	movs	r3, #128	@ 0x80
 8008eee:	055b      	lsls	r3, r3, #21
 8008ef0:	4013      	ands	r3, r2
 8008ef2:	d00a      	beq.n	8008f0a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d100      	bne.n	8008efe <HAL_UART_IRQHandler+0x6e>
 8008efc:	e2fb      	b.n	80094f6 <HAL_UART_IRQHandler+0x666>
      {
        huart->RxISR(huart);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008f02:	687a      	ldr	r2, [r7, #4]
 8008f04:	0010      	movs	r0, r2
 8008f06:	4798      	blx	r3
      }
      return;
 8008f08:	e2f5      	b.n	80094f6 <HAL_UART_IRQHandler+0x666>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008f0a:	2398      	movs	r3, #152	@ 0x98
 8008f0c:	18fb      	adds	r3, r7, r3
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d100      	bne.n	8008f16 <HAL_UART_IRQHandler+0x86>
 8008f14:	e122      	b.n	800915c <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008f16:	239c      	movs	r3, #156	@ 0x9c
 8008f18:	18fb      	adds	r3, r7, r3
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4a8c      	ldr	r2, [pc, #560]	@ (8009150 <HAL_UART_IRQHandler+0x2c0>)
 8008f1e:	4013      	ands	r3, r2
 8008f20:	d106      	bne.n	8008f30 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008f22:	23a0      	movs	r3, #160	@ 0xa0
 8008f24:	18fb      	adds	r3, r7, r3
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	4a8a      	ldr	r2, [pc, #552]	@ (8009154 <HAL_UART_IRQHandler+0x2c4>)
 8008f2a:	4013      	ands	r3, r2
 8008f2c:	d100      	bne.n	8008f30 <HAL_UART_IRQHandler+0xa0>
 8008f2e:	e115      	b.n	800915c <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008f30:	23a4      	movs	r3, #164	@ 0xa4
 8008f32:	18fb      	adds	r3, r7, r3
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	2201      	movs	r2, #1
 8008f38:	4013      	ands	r3, r2
 8008f3a:	d012      	beq.n	8008f62 <HAL_UART_IRQHandler+0xd2>
 8008f3c:	23a0      	movs	r3, #160	@ 0xa0
 8008f3e:	18fb      	adds	r3, r7, r3
 8008f40:	681a      	ldr	r2, [r3, #0]
 8008f42:	2380      	movs	r3, #128	@ 0x80
 8008f44:	005b      	lsls	r3, r3, #1
 8008f46:	4013      	ands	r3, r2
 8008f48:	d00b      	beq.n	8008f62 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	2201      	movs	r2, #1
 8008f50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2290      	movs	r2, #144	@ 0x90
 8008f56:	589b      	ldr	r3, [r3, r2]
 8008f58:	2201      	movs	r2, #1
 8008f5a:	431a      	orrs	r2, r3
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2190      	movs	r1, #144	@ 0x90
 8008f60:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f62:	23a4      	movs	r3, #164	@ 0xa4
 8008f64:	18fb      	adds	r3, r7, r3
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	2202      	movs	r2, #2
 8008f6a:	4013      	ands	r3, r2
 8008f6c:	d011      	beq.n	8008f92 <HAL_UART_IRQHandler+0x102>
 8008f6e:	239c      	movs	r3, #156	@ 0x9c
 8008f70:	18fb      	adds	r3, r7, r3
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	2201      	movs	r2, #1
 8008f76:	4013      	ands	r3, r2
 8008f78:	d00b      	beq.n	8008f92 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	2202      	movs	r2, #2
 8008f80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2290      	movs	r2, #144	@ 0x90
 8008f86:	589b      	ldr	r3, [r3, r2]
 8008f88:	2204      	movs	r2, #4
 8008f8a:	431a      	orrs	r2, r3
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2190      	movs	r1, #144	@ 0x90
 8008f90:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f92:	23a4      	movs	r3, #164	@ 0xa4
 8008f94:	18fb      	adds	r3, r7, r3
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	2204      	movs	r2, #4
 8008f9a:	4013      	ands	r3, r2
 8008f9c:	d011      	beq.n	8008fc2 <HAL_UART_IRQHandler+0x132>
 8008f9e:	239c      	movs	r3, #156	@ 0x9c
 8008fa0:	18fb      	adds	r3, r7, r3
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	2201      	movs	r2, #1
 8008fa6:	4013      	ands	r3, r2
 8008fa8:	d00b      	beq.n	8008fc2 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	2204      	movs	r2, #4
 8008fb0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2290      	movs	r2, #144	@ 0x90
 8008fb6:	589b      	ldr	r3, [r3, r2]
 8008fb8:	2202      	movs	r2, #2
 8008fba:	431a      	orrs	r2, r3
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2190      	movs	r1, #144	@ 0x90
 8008fc0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008fc2:	23a4      	movs	r3, #164	@ 0xa4
 8008fc4:	18fb      	adds	r3, r7, r3
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	2208      	movs	r2, #8
 8008fca:	4013      	ands	r3, r2
 8008fcc:	d017      	beq.n	8008ffe <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008fce:	23a0      	movs	r3, #160	@ 0xa0
 8008fd0:	18fb      	adds	r3, r7, r3
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	2220      	movs	r2, #32
 8008fd6:	4013      	ands	r3, r2
 8008fd8:	d105      	bne.n	8008fe6 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008fda:	239c      	movs	r3, #156	@ 0x9c
 8008fdc:	18fb      	adds	r3, r7, r3
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	4a5b      	ldr	r2, [pc, #364]	@ (8009150 <HAL_UART_IRQHandler+0x2c0>)
 8008fe2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008fe4:	d00b      	beq.n	8008ffe <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	2208      	movs	r2, #8
 8008fec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2290      	movs	r2, #144	@ 0x90
 8008ff2:	589b      	ldr	r3, [r3, r2]
 8008ff4:	2208      	movs	r2, #8
 8008ff6:	431a      	orrs	r2, r3
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2190      	movs	r1, #144	@ 0x90
 8008ffc:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008ffe:	23a4      	movs	r3, #164	@ 0xa4
 8009000:	18fb      	adds	r3, r7, r3
 8009002:	681a      	ldr	r2, [r3, #0]
 8009004:	2380      	movs	r3, #128	@ 0x80
 8009006:	011b      	lsls	r3, r3, #4
 8009008:	4013      	ands	r3, r2
 800900a:	d013      	beq.n	8009034 <HAL_UART_IRQHandler+0x1a4>
 800900c:	23a0      	movs	r3, #160	@ 0xa0
 800900e:	18fb      	adds	r3, r7, r3
 8009010:	681a      	ldr	r2, [r3, #0]
 8009012:	2380      	movs	r3, #128	@ 0x80
 8009014:	04db      	lsls	r3, r3, #19
 8009016:	4013      	ands	r3, r2
 8009018:	d00c      	beq.n	8009034 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	2280      	movs	r2, #128	@ 0x80
 8009020:	0112      	lsls	r2, r2, #4
 8009022:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2290      	movs	r2, #144	@ 0x90
 8009028:	589b      	ldr	r3, [r3, r2]
 800902a:	2220      	movs	r2, #32
 800902c:	431a      	orrs	r2, r3
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2190      	movs	r1, #144	@ 0x90
 8009032:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2290      	movs	r2, #144	@ 0x90
 8009038:	589b      	ldr	r3, [r3, r2]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d100      	bne.n	8009040 <HAL_UART_IRQHandler+0x1b0>
 800903e:	e25c      	b.n	80094fa <HAL_UART_IRQHandler+0x66a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009040:	23a4      	movs	r3, #164	@ 0xa4
 8009042:	18fb      	adds	r3, r7, r3
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	2220      	movs	r2, #32
 8009048:	4013      	ands	r3, r2
 800904a:	d015      	beq.n	8009078 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800904c:	23a0      	movs	r3, #160	@ 0xa0
 800904e:	18fb      	adds	r3, r7, r3
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	2220      	movs	r2, #32
 8009054:	4013      	ands	r3, r2
 8009056:	d106      	bne.n	8009066 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009058:	239c      	movs	r3, #156	@ 0x9c
 800905a:	18fb      	adds	r3, r7, r3
 800905c:	681a      	ldr	r2, [r3, #0]
 800905e:	2380      	movs	r3, #128	@ 0x80
 8009060:	055b      	lsls	r3, r3, #21
 8009062:	4013      	ands	r3, r2
 8009064:	d008      	beq.n	8009078 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800906a:	2b00      	cmp	r3, #0
 800906c:	d004      	beq.n	8009078 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009072:	687a      	ldr	r2, [r7, #4]
 8009074:	0010      	movs	r0, r2
 8009076:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2290      	movs	r2, #144	@ 0x90
 800907c:	589b      	ldr	r3, [r3, r2]
 800907e:	2194      	movs	r1, #148	@ 0x94
 8009080:	187a      	adds	r2, r7, r1
 8009082:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	689b      	ldr	r3, [r3, #8]
 800908a:	2240      	movs	r2, #64	@ 0x40
 800908c:	4013      	ands	r3, r2
 800908e:	2b40      	cmp	r3, #64	@ 0x40
 8009090:	d004      	beq.n	800909c <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009092:	187b      	adds	r3, r7, r1
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	2228      	movs	r2, #40	@ 0x28
 8009098:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800909a:	d04c      	beq.n	8009136 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	0018      	movs	r0, r3
 80090a0:	f000 fe86 	bl	8009db0 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	689b      	ldr	r3, [r3, #8]
 80090aa:	2240      	movs	r2, #64	@ 0x40
 80090ac:	4013      	ands	r3, r2
 80090ae:	2b40      	cmp	r3, #64	@ 0x40
 80090b0:	d13c      	bne.n	800912c <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80090b2:	f3ef 8310 	mrs	r3, PRIMASK
 80090b6:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80090b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090ba:	2090      	movs	r0, #144	@ 0x90
 80090bc:	183a      	adds	r2, r7, r0
 80090be:	6013      	str	r3, [r2, #0]
 80090c0:	2301      	movs	r3, #1
 80090c2:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80090c6:	f383 8810 	msr	PRIMASK, r3
}
 80090ca:	46c0      	nop			@ (mov r8, r8)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	689a      	ldr	r2, [r3, #8]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	2140      	movs	r1, #64	@ 0x40
 80090d8:	438a      	bics	r2, r1
 80090da:	609a      	str	r2, [r3, #8]
 80090dc:	183b      	adds	r3, r7, r0
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80090e4:	f383 8810 	msr	PRIMASK, r3
}
 80090e8:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2280      	movs	r2, #128	@ 0x80
 80090ee:	589b      	ldr	r3, [r3, r2]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d016      	beq.n	8009122 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2280      	movs	r2, #128	@ 0x80
 80090f8:	589b      	ldr	r3, [r3, r2]
 80090fa:	4a17      	ldr	r2, [pc, #92]	@ (8009158 <HAL_UART_IRQHandler+0x2c8>)
 80090fc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2280      	movs	r2, #128	@ 0x80
 8009102:	589b      	ldr	r3, [r3, r2]
 8009104:	0018      	movs	r0, r3
 8009106:	f7fb f91b 	bl	8004340 <HAL_DMA_Abort_IT>
 800910a:	1e03      	subs	r3, r0, #0
 800910c:	d01c      	beq.n	8009148 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2280      	movs	r2, #128	@ 0x80
 8009112:	589b      	ldr	r3, [r3, r2]
 8009114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009116:	687a      	ldr	r2, [r7, #4]
 8009118:	2180      	movs	r1, #128	@ 0x80
 800911a:	5852      	ldr	r2, [r2, r1]
 800911c:	0010      	movs	r0, r2
 800911e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009120:	e012      	b.n	8009148 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	0018      	movs	r0, r3
 8009126:	f7f9 f989 	bl	800243c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800912a:	e00d      	b.n	8009148 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	0018      	movs	r0, r3
 8009130:	f7f9 f984 	bl	800243c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009134:	e008      	b.n	8009148 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	0018      	movs	r0, r3
 800913a:	f7f9 f97f 	bl	800243c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2290      	movs	r2, #144	@ 0x90
 8009142:	2100      	movs	r1, #0
 8009144:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8009146:	e1d8      	b.n	80094fa <HAL_UART_IRQHandler+0x66a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009148:	46c0      	nop			@ (mov r8, r8)
    return;
 800914a:	e1d6      	b.n	80094fa <HAL_UART_IRQHandler+0x66a>
 800914c:	0000080f 	.word	0x0000080f
 8009150:	10000001 	.word	0x10000001
 8009154:	04000120 	.word	0x04000120
 8009158:	0800a12d 	.word	0x0800a12d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009160:	2b01      	cmp	r3, #1
 8009162:	d000      	beq.n	8009166 <HAL_UART_IRQHandler+0x2d6>
 8009164:	e15d      	b.n	8009422 <HAL_UART_IRQHandler+0x592>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009166:	23a4      	movs	r3, #164	@ 0xa4
 8009168:	18fb      	adds	r3, r7, r3
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	2210      	movs	r2, #16
 800916e:	4013      	ands	r3, r2
 8009170:	d100      	bne.n	8009174 <HAL_UART_IRQHandler+0x2e4>
 8009172:	e156      	b.n	8009422 <HAL_UART_IRQHandler+0x592>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009174:	23a0      	movs	r3, #160	@ 0xa0
 8009176:	18fb      	adds	r3, r7, r3
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	2210      	movs	r2, #16
 800917c:	4013      	ands	r3, r2
 800917e:	d100      	bne.n	8009182 <HAL_UART_IRQHandler+0x2f2>
 8009180:	e14f      	b.n	8009422 <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	2210      	movs	r2, #16
 8009188:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	689b      	ldr	r3, [r3, #8]
 8009190:	2240      	movs	r2, #64	@ 0x40
 8009192:	4013      	ands	r3, r2
 8009194:	2b40      	cmp	r3, #64	@ 0x40
 8009196:	d000      	beq.n	800919a <HAL_UART_IRQHandler+0x30a>
 8009198:	e0c3      	b.n	8009322 <HAL_UART_IRQHandler+0x492>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2280      	movs	r2, #128	@ 0x80
 800919e:	589b      	ldr	r3, [r3, r2]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	685a      	ldr	r2, [r3, #4]
 80091a4:	217e      	movs	r1, #126	@ 0x7e
 80091a6:	187b      	adds	r3, r7, r1
 80091a8:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80091aa:	187b      	adds	r3, r7, r1
 80091ac:	881b      	ldrh	r3, [r3, #0]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d100      	bne.n	80091b4 <HAL_UART_IRQHandler+0x324>
 80091b2:	e097      	b.n	80092e4 <HAL_UART_IRQHandler+0x454>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	225c      	movs	r2, #92	@ 0x5c
 80091b8:	5a9b      	ldrh	r3, [r3, r2]
 80091ba:	187a      	adds	r2, r7, r1
 80091bc:	8812      	ldrh	r2, [r2, #0]
 80091be:	429a      	cmp	r2, r3
 80091c0:	d300      	bcc.n	80091c4 <HAL_UART_IRQHandler+0x334>
 80091c2:	e08f      	b.n	80092e4 <HAL_UART_IRQHandler+0x454>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	187a      	adds	r2, r7, r1
 80091c8:	215e      	movs	r1, #94	@ 0x5e
 80091ca:	8812      	ldrh	r2, [r2, #0]
 80091cc:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2280      	movs	r2, #128	@ 0x80
 80091d2:	589b      	ldr	r3, [r3, r2]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	2220      	movs	r2, #32
 80091da:	4013      	ands	r3, r2
 80091dc:	d170      	bne.n	80092c0 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80091de:	f3ef 8310 	mrs	r3, PRIMASK
 80091e2:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80091e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80091e6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80091e8:	2301      	movs	r3, #1
 80091ea:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091ee:	f383 8810 	msr	PRIMASK, r3
}
 80091f2:	46c0      	nop			@ (mov r8, r8)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	681a      	ldr	r2, [r3, #0]
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	49c4      	ldr	r1, [pc, #784]	@ (8009510 <HAL_UART_IRQHandler+0x680>)
 8009200:	400a      	ands	r2, r1
 8009202:	601a      	str	r2, [r3, #0]
 8009204:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009206:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800920a:	f383 8810 	msr	PRIMASK, r3
}
 800920e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009210:	f3ef 8310 	mrs	r3, PRIMASK
 8009214:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8009216:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009218:	677b      	str	r3, [r7, #116]	@ 0x74
 800921a:	2301      	movs	r3, #1
 800921c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800921e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009220:	f383 8810 	msr	PRIMASK, r3
}
 8009224:	46c0      	nop			@ (mov r8, r8)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	689a      	ldr	r2, [r3, #8]
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	2101      	movs	r1, #1
 8009232:	438a      	bics	r2, r1
 8009234:	609a      	str	r2, [r3, #8]
 8009236:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009238:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800923a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800923c:	f383 8810 	msr	PRIMASK, r3
}
 8009240:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009242:	f3ef 8310 	mrs	r3, PRIMASK
 8009246:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8009248:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800924a:	673b      	str	r3, [r7, #112]	@ 0x70
 800924c:	2301      	movs	r3, #1
 800924e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009250:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009252:	f383 8810 	msr	PRIMASK, r3
}
 8009256:	46c0      	nop			@ (mov r8, r8)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	689a      	ldr	r2, [r3, #8]
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	2140      	movs	r1, #64	@ 0x40
 8009264:	438a      	bics	r2, r1
 8009266:	609a      	str	r2, [r3, #8]
 8009268:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800926a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800926c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800926e:	f383 8810 	msr	PRIMASK, r3
}
 8009272:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	228c      	movs	r2, #140	@ 0x8c
 8009278:	2120      	movs	r1, #32
 800927a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2200      	movs	r2, #0
 8009280:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009282:	f3ef 8310 	mrs	r3, PRIMASK
 8009286:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8009288:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800928a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800928c:	2301      	movs	r3, #1
 800928e:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009290:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009292:	f383 8810 	msr	PRIMASK, r3
}
 8009296:	46c0      	nop			@ (mov r8, r8)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	681a      	ldr	r2, [r3, #0]
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	2110      	movs	r1, #16
 80092a4:	438a      	bics	r2, r1
 80092a6:	601a      	str	r2, [r3, #0]
 80092a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80092aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80092ae:	f383 8810 	msr	PRIMASK, r3
}
 80092b2:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2280      	movs	r2, #128	@ 0x80
 80092b8:	589b      	ldr	r3, [r3, r2]
 80092ba:	0018      	movs	r0, r3
 80092bc:	f7fa ffde 	bl	800427c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2202      	movs	r2, #2
 80092c4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	225c      	movs	r2, #92	@ 0x5c
 80092ca:	5a9a      	ldrh	r2, [r3, r2]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	215e      	movs	r1, #94	@ 0x5e
 80092d0:	5a5b      	ldrh	r3, [r3, r1]
 80092d2:	b29b      	uxth	r3, r3
 80092d4:	1ad3      	subs	r3, r2, r3
 80092d6:	b29a      	uxth	r2, r3
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	0011      	movs	r1, r2
 80092dc:	0018      	movs	r0, r3
 80092de:	f7f9 f843 	bl	8002368 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80092e2:	e10c      	b.n	80094fe <HAL_UART_IRQHandler+0x66e>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	225c      	movs	r2, #92	@ 0x5c
 80092e8:	5a9b      	ldrh	r3, [r3, r2]
 80092ea:	227e      	movs	r2, #126	@ 0x7e
 80092ec:	18ba      	adds	r2, r7, r2
 80092ee:	8812      	ldrh	r2, [r2, #0]
 80092f0:	429a      	cmp	r2, r3
 80092f2:	d000      	beq.n	80092f6 <HAL_UART_IRQHandler+0x466>
 80092f4:	e103      	b.n	80094fe <HAL_UART_IRQHandler+0x66e>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2280      	movs	r2, #128	@ 0x80
 80092fa:	589b      	ldr	r3, [r3, r2]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	2220      	movs	r2, #32
 8009302:	4013      	ands	r3, r2
 8009304:	2b20      	cmp	r3, #32
 8009306:	d000      	beq.n	800930a <HAL_UART_IRQHandler+0x47a>
 8009308:	e0f9      	b.n	80094fe <HAL_UART_IRQHandler+0x66e>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2202      	movs	r2, #2
 800930e:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	225c      	movs	r2, #92	@ 0x5c
 8009314:	5a9a      	ldrh	r2, [r3, r2]
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	0011      	movs	r1, r2
 800931a:	0018      	movs	r0, r3
 800931c:	f7f9 f824 	bl	8002368 <HAL_UARTEx_RxEventCallback>
      return;
 8009320:	e0ed      	b.n	80094fe <HAL_UART_IRQHandler+0x66e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	225c      	movs	r2, #92	@ 0x5c
 8009326:	5a99      	ldrh	r1, [r3, r2]
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	225e      	movs	r2, #94	@ 0x5e
 800932c:	5a9b      	ldrh	r3, [r3, r2]
 800932e:	b29a      	uxth	r2, r3
 8009330:	208e      	movs	r0, #142	@ 0x8e
 8009332:	183b      	adds	r3, r7, r0
 8009334:	1a8a      	subs	r2, r1, r2
 8009336:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	225e      	movs	r2, #94	@ 0x5e
 800933c:	5a9b      	ldrh	r3, [r3, r2]
 800933e:	b29b      	uxth	r3, r3
 8009340:	2b00      	cmp	r3, #0
 8009342:	d100      	bne.n	8009346 <HAL_UART_IRQHandler+0x4b6>
 8009344:	e0dd      	b.n	8009502 <HAL_UART_IRQHandler+0x672>
          && (nb_rx_data > 0U))
 8009346:	183b      	adds	r3, r7, r0
 8009348:	881b      	ldrh	r3, [r3, #0]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d100      	bne.n	8009350 <HAL_UART_IRQHandler+0x4c0>
 800934e:	e0d8      	b.n	8009502 <HAL_UART_IRQHandler+0x672>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009350:	f3ef 8310 	mrs	r3, PRIMASK
 8009354:	60fb      	str	r3, [r7, #12]
  return(result);
 8009356:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009358:	2488      	movs	r4, #136	@ 0x88
 800935a:	193a      	adds	r2, r7, r4
 800935c:	6013      	str	r3, [r2, #0]
 800935e:	2301      	movs	r3, #1
 8009360:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009362:	693b      	ldr	r3, [r7, #16]
 8009364:	f383 8810 	msr	PRIMASK, r3
}
 8009368:	46c0      	nop			@ (mov r8, r8)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	681a      	ldr	r2, [r3, #0]
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	4967      	ldr	r1, [pc, #412]	@ (8009514 <HAL_UART_IRQHandler+0x684>)
 8009376:	400a      	ands	r2, r1
 8009378:	601a      	str	r2, [r3, #0]
 800937a:	193b      	adds	r3, r7, r4
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	f383 8810 	msr	PRIMASK, r3
}
 8009386:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009388:	f3ef 8310 	mrs	r3, PRIMASK
 800938c:	61bb      	str	r3, [r7, #24]
  return(result);
 800938e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009390:	2484      	movs	r4, #132	@ 0x84
 8009392:	193a      	adds	r2, r7, r4
 8009394:	6013      	str	r3, [r2, #0]
 8009396:	2301      	movs	r3, #1
 8009398:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800939a:	69fb      	ldr	r3, [r7, #28]
 800939c:	f383 8810 	msr	PRIMASK, r3
}
 80093a0:	46c0      	nop			@ (mov r8, r8)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	689a      	ldr	r2, [r3, #8]
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	495a      	ldr	r1, [pc, #360]	@ (8009518 <HAL_UART_IRQHandler+0x688>)
 80093ae:	400a      	ands	r2, r1
 80093b0:	609a      	str	r2, [r3, #8]
 80093b2:	193b      	adds	r3, r7, r4
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093b8:	6a3b      	ldr	r3, [r7, #32]
 80093ba:	f383 8810 	msr	PRIMASK, r3
}
 80093be:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	228c      	movs	r2, #140	@ 0x8c
 80093c4:	2120      	movs	r1, #32
 80093c6:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2200      	movs	r2, #0
 80093cc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2200      	movs	r2, #0
 80093d2:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80093d4:	f3ef 8310 	mrs	r3, PRIMASK
 80093d8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80093da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093dc:	2480      	movs	r4, #128	@ 0x80
 80093de:	193a      	adds	r2, r7, r4
 80093e0:	6013      	str	r3, [r2, #0]
 80093e2:	2301      	movs	r3, #1
 80093e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093e8:	f383 8810 	msr	PRIMASK, r3
}
 80093ec:	46c0      	nop			@ (mov r8, r8)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	681a      	ldr	r2, [r3, #0]
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	2110      	movs	r1, #16
 80093fa:	438a      	bics	r2, r1
 80093fc:	601a      	str	r2, [r3, #0]
 80093fe:	193b      	adds	r3, r7, r4
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009406:	f383 8810 	msr	PRIMASK, r3
}
 800940a:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2202      	movs	r2, #2
 8009410:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009412:	183b      	adds	r3, r7, r0
 8009414:	881a      	ldrh	r2, [r3, #0]
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	0011      	movs	r1, r2
 800941a:	0018      	movs	r0, r3
 800941c:	f7f8 ffa4 	bl	8002368 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009420:	e06f      	b.n	8009502 <HAL_UART_IRQHandler+0x672>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009422:	23a4      	movs	r3, #164	@ 0xa4
 8009424:	18fb      	adds	r3, r7, r3
 8009426:	681a      	ldr	r2, [r3, #0]
 8009428:	2380      	movs	r3, #128	@ 0x80
 800942a:	035b      	lsls	r3, r3, #13
 800942c:	4013      	ands	r3, r2
 800942e:	d010      	beq.n	8009452 <HAL_UART_IRQHandler+0x5c2>
 8009430:	239c      	movs	r3, #156	@ 0x9c
 8009432:	18fb      	adds	r3, r7, r3
 8009434:	681a      	ldr	r2, [r3, #0]
 8009436:	2380      	movs	r3, #128	@ 0x80
 8009438:	03db      	lsls	r3, r3, #15
 800943a:	4013      	ands	r3, r2
 800943c:	d009      	beq.n	8009452 <HAL_UART_IRQHandler+0x5c2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	2280      	movs	r2, #128	@ 0x80
 8009444:	0352      	lsls	r2, r2, #13
 8009446:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	0018      	movs	r0, r3
 800944c:	f000 ff24 	bl	800a298 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009450:	e05a      	b.n	8009508 <HAL_UART_IRQHandler+0x678>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009452:	23a4      	movs	r3, #164	@ 0xa4
 8009454:	18fb      	adds	r3, r7, r3
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	2280      	movs	r2, #128	@ 0x80
 800945a:	4013      	ands	r3, r2
 800945c:	d016      	beq.n	800948c <HAL_UART_IRQHandler+0x5fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800945e:	23a0      	movs	r3, #160	@ 0xa0
 8009460:	18fb      	adds	r3, r7, r3
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	2280      	movs	r2, #128	@ 0x80
 8009466:	4013      	ands	r3, r2
 8009468:	d106      	bne.n	8009478 <HAL_UART_IRQHandler+0x5e8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800946a:	239c      	movs	r3, #156	@ 0x9c
 800946c:	18fb      	adds	r3, r7, r3
 800946e:	681a      	ldr	r2, [r3, #0]
 8009470:	2380      	movs	r3, #128	@ 0x80
 8009472:	041b      	lsls	r3, r3, #16
 8009474:	4013      	ands	r3, r2
 8009476:	d009      	beq.n	800948c <HAL_UART_IRQHandler+0x5fc>
  {
    if (huart->TxISR != NULL)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800947c:	2b00      	cmp	r3, #0
 800947e:	d042      	beq.n	8009506 <HAL_UART_IRQHandler+0x676>
    {
      huart->TxISR(huart);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009484:	687a      	ldr	r2, [r7, #4]
 8009486:	0010      	movs	r0, r2
 8009488:	4798      	blx	r3
    }
    return;
 800948a:	e03c      	b.n	8009506 <HAL_UART_IRQHandler+0x676>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800948c:	23a4      	movs	r3, #164	@ 0xa4
 800948e:	18fb      	adds	r3, r7, r3
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	2240      	movs	r2, #64	@ 0x40
 8009494:	4013      	ands	r3, r2
 8009496:	d00a      	beq.n	80094ae <HAL_UART_IRQHandler+0x61e>
 8009498:	23a0      	movs	r3, #160	@ 0xa0
 800949a:	18fb      	adds	r3, r7, r3
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	2240      	movs	r2, #64	@ 0x40
 80094a0:	4013      	ands	r3, r2
 80094a2:	d004      	beq.n	80094ae <HAL_UART_IRQHandler+0x61e>
  {
    UART_EndTransmit_IT(huart);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	0018      	movs	r0, r3
 80094a8:	f000 fe57 	bl	800a15a <UART_EndTransmit_IT>
    return;
 80094ac:	e02c      	b.n	8009508 <HAL_UART_IRQHandler+0x678>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80094ae:	23a4      	movs	r3, #164	@ 0xa4
 80094b0:	18fb      	adds	r3, r7, r3
 80094b2:	681a      	ldr	r2, [r3, #0]
 80094b4:	2380      	movs	r3, #128	@ 0x80
 80094b6:	041b      	lsls	r3, r3, #16
 80094b8:	4013      	ands	r3, r2
 80094ba:	d00b      	beq.n	80094d4 <HAL_UART_IRQHandler+0x644>
 80094bc:	23a0      	movs	r3, #160	@ 0xa0
 80094be:	18fb      	adds	r3, r7, r3
 80094c0:	681a      	ldr	r2, [r3, #0]
 80094c2:	2380      	movs	r3, #128	@ 0x80
 80094c4:	05db      	lsls	r3, r3, #23
 80094c6:	4013      	ands	r3, r2
 80094c8:	d004      	beq.n	80094d4 <HAL_UART_IRQHandler+0x644>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	0018      	movs	r0, r3
 80094ce:	f000 fef3 	bl	800a2b8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80094d2:	e019      	b.n	8009508 <HAL_UART_IRQHandler+0x678>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80094d4:	23a4      	movs	r3, #164	@ 0xa4
 80094d6:	18fb      	adds	r3, r7, r3
 80094d8:	681a      	ldr	r2, [r3, #0]
 80094da:	2380      	movs	r3, #128	@ 0x80
 80094dc:	045b      	lsls	r3, r3, #17
 80094de:	4013      	ands	r3, r2
 80094e0:	d012      	beq.n	8009508 <HAL_UART_IRQHandler+0x678>
 80094e2:	23a0      	movs	r3, #160	@ 0xa0
 80094e4:	18fb      	adds	r3, r7, r3
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	da0d      	bge.n	8009508 <HAL_UART_IRQHandler+0x678>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	0018      	movs	r0, r3
 80094f0:	f000 feda 	bl	800a2a8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80094f4:	e008      	b.n	8009508 <HAL_UART_IRQHandler+0x678>
      return;
 80094f6:	46c0      	nop			@ (mov r8, r8)
 80094f8:	e006      	b.n	8009508 <HAL_UART_IRQHandler+0x678>
    return;
 80094fa:	46c0      	nop			@ (mov r8, r8)
 80094fc:	e004      	b.n	8009508 <HAL_UART_IRQHandler+0x678>
      return;
 80094fe:	46c0      	nop			@ (mov r8, r8)
 8009500:	e002      	b.n	8009508 <HAL_UART_IRQHandler+0x678>
      return;
 8009502:	46c0      	nop			@ (mov r8, r8)
 8009504:	e000      	b.n	8009508 <HAL_UART_IRQHandler+0x678>
    return;
 8009506:	46c0      	nop			@ (mov r8, r8)
  }
}
 8009508:	46bd      	mov	sp, r7
 800950a:	b02a      	add	sp, #168	@ 0xa8
 800950c:	bdb0      	pop	{r4, r5, r7, pc}
 800950e:	46c0      	nop			@ (mov r8, r8)
 8009510:	fffffeff 	.word	0xfffffeff
 8009514:	fffffedf 	.word	0xfffffedf
 8009518:	effffffe 	.word	0xeffffffe

0800951c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b082      	sub	sp, #8
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009524:	46c0      	nop			@ (mov r8, r8)
 8009526:	46bd      	mov	sp, r7
 8009528:	b002      	add	sp, #8
 800952a:	bd80      	pop	{r7, pc}

0800952c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b082      	sub	sp, #8
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009534:	46c0      	nop			@ (mov r8, r8)
 8009536:	46bd      	mov	sp, r7
 8009538:	b002      	add	sp, #8
 800953a:	bd80      	pop	{r7, pc}

0800953c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b082      	sub	sp, #8
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009544:	46c0      	nop			@ (mov r8, r8)
 8009546:	46bd      	mov	sp, r7
 8009548:	b002      	add	sp, #8
 800954a:	bd80      	pop	{r7, pc}

0800954c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b088      	sub	sp, #32
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009554:	231e      	movs	r3, #30
 8009556:	18fb      	adds	r3, r7, r3
 8009558:	2200      	movs	r2, #0
 800955a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	689a      	ldr	r2, [r3, #8]
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	691b      	ldr	r3, [r3, #16]
 8009564:	431a      	orrs	r2, r3
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	695b      	ldr	r3, [r3, #20]
 800956a:	431a      	orrs	r2, r3
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	69db      	ldr	r3, [r3, #28]
 8009570:	4313      	orrs	r3, r2
 8009572:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	4aab      	ldr	r2, [pc, #684]	@ (8009828 <UART_SetConfig+0x2dc>)
 800957c:	4013      	ands	r3, r2
 800957e:	0019      	movs	r1, r3
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	697a      	ldr	r2, [r7, #20]
 8009586:	430a      	orrs	r2, r1
 8009588:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	4aa6      	ldr	r2, [pc, #664]	@ (800982c <UART_SetConfig+0x2e0>)
 8009592:	4013      	ands	r3, r2
 8009594:	0019      	movs	r1, r3
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	68da      	ldr	r2, [r3, #12]
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	430a      	orrs	r2, r1
 80095a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	699b      	ldr	r3, [r3, #24]
 80095a6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6a1b      	ldr	r3, [r3, #32]
 80095ac:	697a      	ldr	r2, [r7, #20]
 80095ae:	4313      	orrs	r3, r2
 80095b0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	689b      	ldr	r3, [r3, #8]
 80095b8:	4a9d      	ldr	r2, [pc, #628]	@ (8009830 <UART_SetConfig+0x2e4>)
 80095ba:	4013      	ands	r3, r2
 80095bc:	0019      	movs	r1, r3
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	697a      	ldr	r2, [r7, #20]
 80095c4:	430a      	orrs	r2, r1
 80095c6:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095ce:	220f      	movs	r2, #15
 80095d0:	4393      	bics	r3, r2
 80095d2:	0019      	movs	r1, r3
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	430a      	orrs	r2, r1
 80095de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4a93      	ldr	r2, [pc, #588]	@ (8009834 <UART_SetConfig+0x2e8>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d127      	bne.n	800963a <UART_SetConfig+0xee>
 80095ea:	4b93      	ldr	r3, [pc, #588]	@ (8009838 <UART_SetConfig+0x2ec>)
 80095ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095ee:	2203      	movs	r2, #3
 80095f0:	4013      	ands	r3, r2
 80095f2:	2b03      	cmp	r3, #3
 80095f4:	d017      	beq.n	8009626 <UART_SetConfig+0xda>
 80095f6:	d81b      	bhi.n	8009630 <UART_SetConfig+0xe4>
 80095f8:	2b02      	cmp	r3, #2
 80095fa:	d00a      	beq.n	8009612 <UART_SetConfig+0xc6>
 80095fc:	d818      	bhi.n	8009630 <UART_SetConfig+0xe4>
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d002      	beq.n	8009608 <UART_SetConfig+0xbc>
 8009602:	2b01      	cmp	r3, #1
 8009604:	d00a      	beq.n	800961c <UART_SetConfig+0xd0>
 8009606:	e013      	b.n	8009630 <UART_SetConfig+0xe4>
 8009608:	231f      	movs	r3, #31
 800960a:	18fb      	adds	r3, r7, r3
 800960c:	2200      	movs	r2, #0
 800960e:	701a      	strb	r2, [r3, #0]
 8009610:	e021      	b.n	8009656 <UART_SetConfig+0x10a>
 8009612:	231f      	movs	r3, #31
 8009614:	18fb      	adds	r3, r7, r3
 8009616:	2202      	movs	r2, #2
 8009618:	701a      	strb	r2, [r3, #0]
 800961a:	e01c      	b.n	8009656 <UART_SetConfig+0x10a>
 800961c:	231f      	movs	r3, #31
 800961e:	18fb      	adds	r3, r7, r3
 8009620:	2204      	movs	r2, #4
 8009622:	701a      	strb	r2, [r3, #0]
 8009624:	e017      	b.n	8009656 <UART_SetConfig+0x10a>
 8009626:	231f      	movs	r3, #31
 8009628:	18fb      	adds	r3, r7, r3
 800962a:	2208      	movs	r2, #8
 800962c:	701a      	strb	r2, [r3, #0]
 800962e:	e012      	b.n	8009656 <UART_SetConfig+0x10a>
 8009630:	231f      	movs	r3, #31
 8009632:	18fb      	adds	r3, r7, r3
 8009634:	2210      	movs	r2, #16
 8009636:	701a      	strb	r2, [r3, #0]
 8009638:	e00d      	b.n	8009656 <UART_SetConfig+0x10a>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	4a7f      	ldr	r2, [pc, #508]	@ (800983c <UART_SetConfig+0x2f0>)
 8009640:	4293      	cmp	r3, r2
 8009642:	d104      	bne.n	800964e <UART_SetConfig+0x102>
 8009644:	231f      	movs	r3, #31
 8009646:	18fb      	adds	r3, r7, r3
 8009648:	2200      	movs	r2, #0
 800964a:	701a      	strb	r2, [r3, #0]
 800964c:	e003      	b.n	8009656 <UART_SetConfig+0x10a>
 800964e:	231f      	movs	r3, #31
 8009650:	18fb      	adds	r3, r7, r3
 8009652:	2210      	movs	r2, #16
 8009654:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	69da      	ldr	r2, [r3, #28]
 800965a:	2380      	movs	r3, #128	@ 0x80
 800965c:	021b      	lsls	r3, r3, #8
 800965e:	429a      	cmp	r2, r3
 8009660:	d000      	beq.n	8009664 <UART_SetConfig+0x118>
 8009662:	e06f      	b.n	8009744 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8009664:	231f      	movs	r3, #31
 8009666:	18fb      	adds	r3, r7, r3
 8009668:	781b      	ldrb	r3, [r3, #0]
 800966a:	2b08      	cmp	r3, #8
 800966c:	d01f      	beq.n	80096ae <UART_SetConfig+0x162>
 800966e:	dc22      	bgt.n	80096b6 <UART_SetConfig+0x16a>
 8009670:	2b04      	cmp	r3, #4
 8009672:	d017      	beq.n	80096a4 <UART_SetConfig+0x158>
 8009674:	dc1f      	bgt.n	80096b6 <UART_SetConfig+0x16a>
 8009676:	2b00      	cmp	r3, #0
 8009678:	d002      	beq.n	8009680 <UART_SetConfig+0x134>
 800967a:	2b02      	cmp	r3, #2
 800967c:	d005      	beq.n	800968a <UART_SetConfig+0x13e>
 800967e:	e01a      	b.n	80096b6 <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009680:	f7fe f868 	bl	8007754 <HAL_RCC_GetPCLK1Freq>
 8009684:	0003      	movs	r3, r0
 8009686:	61bb      	str	r3, [r7, #24]
        break;
 8009688:	e01c      	b.n	80096c4 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 800968a:	4b6b      	ldr	r3, [pc, #428]	@ (8009838 <UART_SetConfig+0x2ec>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	095b      	lsrs	r3, r3, #5
 8009690:	2207      	movs	r2, #7
 8009692:	4013      	ands	r3, r2
 8009694:	3301      	adds	r3, #1
 8009696:	0019      	movs	r1, r3
 8009698:	4869      	ldr	r0, [pc, #420]	@ (8009840 <UART_SetConfig+0x2f4>)
 800969a:	f7f6 fd35 	bl	8000108 <__udivsi3>
 800969e:	0003      	movs	r3, r0
 80096a0:	61bb      	str	r3, [r7, #24]
        break;
 80096a2:	e00f      	b.n	80096c4 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80096a4:	f7fd ffe0 	bl	8007668 <HAL_RCC_GetSysClockFreq>
 80096a8:	0003      	movs	r3, r0
 80096aa:	61bb      	str	r3, [r7, #24]
        break;
 80096ac:	e00a      	b.n	80096c4 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80096ae:	2380      	movs	r3, #128	@ 0x80
 80096b0:	021b      	lsls	r3, r3, #8
 80096b2:	61bb      	str	r3, [r7, #24]
        break;
 80096b4:	e006      	b.n	80096c4 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 80096b6:	2300      	movs	r3, #0
 80096b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80096ba:	231e      	movs	r3, #30
 80096bc:	18fb      	adds	r3, r7, r3
 80096be:	2201      	movs	r2, #1
 80096c0:	701a      	strb	r2, [r3, #0]
        break;
 80096c2:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80096c4:	69bb      	ldr	r3, [r7, #24]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d100      	bne.n	80096cc <UART_SetConfig+0x180>
 80096ca:	e097      	b.n	80097fc <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80096d0:	4b5c      	ldr	r3, [pc, #368]	@ (8009844 <UART_SetConfig+0x2f8>)
 80096d2:	0052      	lsls	r2, r2, #1
 80096d4:	5ad3      	ldrh	r3, [r2, r3]
 80096d6:	0019      	movs	r1, r3
 80096d8:	69b8      	ldr	r0, [r7, #24]
 80096da:	f7f6 fd15 	bl	8000108 <__udivsi3>
 80096de:	0003      	movs	r3, r0
 80096e0:	005a      	lsls	r2, r3, #1
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	685b      	ldr	r3, [r3, #4]
 80096e6:	085b      	lsrs	r3, r3, #1
 80096e8:	18d2      	adds	r2, r2, r3
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	685b      	ldr	r3, [r3, #4]
 80096ee:	0019      	movs	r1, r3
 80096f0:	0010      	movs	r0, r2
 80096f2:	f7f6 fd09 	bl	8000108 <__udivsi3>
 80096f6:	0003      	movs	r3, r0
 80096f8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80096fa:	693b      	ldr	r3, [r7, #16]
 80096fc:	2b0f      	cmp	r3, #15
 80096fe:	d91c      	bls.n	800973a <UART_SetConfig+0x1ee>
 8009700:	693a      	ldr	r2, [r7, #16]
 8009702:	2380      	movs	r3, #128	@ 0x80
 8009704:	025b      	lsls	r3, r3, #9
 8009706:	429a      	cmp	r2, r3
 8009708:	d217      	bcs.n	800973a <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800970a:	693b      	ldr	r3, [r7, #16]
 800970c:	b29a      	uxth	r2, r3
 800970e:	200e      	movs	r0, #14
 8009710:	183b      	adds	r3, r7, r0
 8009712:	210f      	movs	r1, #15
 8009714:	438a      	bics	r2, r1
 8009716:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009718:	693b      	ldr	r3, [r7, #16]
 800971a:	085b      	lsrs	r3, r3, #1
 800971c:	b29b      	uxth	r3, r3
 800971e:	2207      	movs	r2, #7
 8009720:	4013      	ands	r3, r2
 8009722:	b299      	uxth	r1, r3
 8009724:	183b      	adds	r3, r7, r0
 8009726:	183a      	adds	r2, r7, r0
 8009728:	8812      	ldrh	r2, [r2, #0]
 800972a:	430a      	orrs	r2, r1
 800972c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	183a      	adds	r2, r7, r0
 8009734:	8812      	ldrh	r2, [r2, #0]
 8009736:	60da      	str	r2, [r3, #12]
 8009738:	e060      	b.n	80097fc <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 800973a:	231e      	movs	r3, #30
 800973c:	18fb      	adds	r3, r7, r3
 800973e:	2201      	movs	r2, #1
 8009740:	701a      	strb	r2, [r3, #0]
 8009742:	e05b      	b.n	80097fc <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009744:	231f      	movs	r3, #31
 8009746:	18fb      	adds	r3, r7, r3
 8009748:	781b      	ldrb	r3, [r3, #0]
 800974a:	2b08      	cmp	r3, #8
 800974c:	d01f      	beq.n	800978e <UART_SetConfig+0x242>
 800974e:	dc22      	bgt.n	8009796 <UART_SetConfig+0x24a>
 8009750:	2b04      	cmp	r3, #4
 8009752:	d017      	beq.n	8009784 <UART_SetConfig+0x238>
 8009754:	dc1f      	bgt.n	8009796 <UART_SetConfig+0x24a>
 8009756:	2b00      	cmp	r3, #0
 8009758:	d002      	beq.n	8009760 <UART_SetConfig+0x214>
 800975a:	2b02      	cmp	r3, #2
 800975c:	d005      	beq.n	800976a <UART_SetConfig+0x21e>
 800975e:	e01a      	b.n	8009796 <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009760:	f7fd fff8 	bl	8007754 <HAL_RCC_GetPCLK1Freq>
 8009764:	0003      	movs	r3, r0
 8009766:	61bb      	str	r3, [r7, #24]
        break;
 8009768:	e01c      	b.n	80097a4 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 800976a:	4b33      	ldr	r3, [pc, #204]	@ (8009838 <UART_SetConfig+0x2ec>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	095b      	lsrs	r3, r3, #5
 8009770:	2207      	movs	r2, #7
 8009772:	4013      	ands	r3, r2
 8009774:	3301      	adds	r3, #1
 8009776:	0019      	movs	r1, r3
 8009778:	4831      	ldr	r0, [pc, #196]	@ (8009840 <UART_SetConfig+0x2f4>)
 800977a:	f7f6 fcc5 	bl	8000108 <__udivsi3>
 800977e:	0003      	movs	r3, r0
 8009780:	61bb      	str	r3, [r7, #24]
        break;
 8009782:	e00f      	b.n	80097a4 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009784:	f7fd ff70 	bl	8007668 <HAL_RCC_GetSysClockFreq>
 8009788:	0003      	movs	r3, r0
 800978a:	61bb      	str	r3, [r7, #24]
        break;
 800978c:	e00a      	b.n	80097a4 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800978e:	2380      	movs	r3, #128	@ 0x80
 8009790:	021b      	lsls	r3, r3, #8
 8009792:	61bb      	str	r3, [r7, #24]
        break;
 8009794:	e006      	b.n	80097a4 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8009796:	2300      	movs	r3, #0
 8009798:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800979a:	231e      	movs	r3, #30
 800979c:	18fb      	adds	r3, r7, r3
 800979e:	2201      	movs	r2, #1
 80097a0:	701a      	strb	r2, [r3, #0]
        break;
 80097a2:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80097a4:	69bb      	ldr	r3, [r7, #24]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d028      	beq.n	80097fc <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80097ae:	4b25      	ldr	r3, [pc, #148]	@ (8009844 <UART_SetConfig+0x2f8>)
 80097b0:	0052      	lsls	r2, r2, #1
 80097b2:	5ad3      	ldrh	r3, [r2, r3]
 80097b4:	0019      	movs	r1, r3
 80097b6:	69b8      	ldr	r0, [r7, #24]
 80097b8:	f7f6 fca6 	bl	8000108 <__udivsi3>
 80097bc:	0003      	movs	r3, r0
 80097be:	001a      	movs	r2, r3
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	685b      	ldr	r3, [r3, #4]
 80097c4:	085b      	lsrs	r3, r3, #1
 80097c6:	18d2      	adds	r2, r2, r3
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	685b      	ldr	r3, [r3, #4]
 80097cc:	0019      	movs	r1, r3
 80097ce:	0010      	movs	r0, r2
 80097d0:	f7f6 fc9a 	bl	8000108 <__udivsi3>
 80097d4:	0003      	movs	r3, r0
 80097d6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80097d8:	693b      	ldr	r3, [r7, #16]
 80097da:	2b0f      	cmp	r3, #15
 80097dc:	d90a      	bls.n	80097f4 <UART_SetConfig+0x2a8>
 80097de:	693a      	ldr	r2, [r7, #16]
 80097e0:	2380      	movs	r3, #128	@ 0x80
 80097e2:	025b      	lsls	r3, r3, #9
 80097e4:	429a      	cmp	r2, r3
 80097e6:	d205      	bcs.n	80097f4 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	b29a      	uxth	r2, r3
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	60da      	str	r2, [r3, #12]
 80097f2:	e003      	b.n	80097fc <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 80097f4:	231e      	movs	r3, #30
 80097f6:	18fb      	adds	r3, r7, r3
 80097f8:	2201      	movs	r2, #1
 80097fa:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	226a      	movs	r2, #106	@ 0x6a
 8009800:	2101      	movs	r1, #1
 8009802:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2268      	movs	r2, #104	@ 0x68
 8009808:	2101      	movs	r1, #1
 800980a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2200      	movs	r2, #0
 8009810:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2200      	movs	r2, #0
 8009816:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009818:	231e      	movs	r3, #30
 800981a:	18fb      	adds	r3, r7, r3
 800981c:	781b      	ldrb	r3, [r3, #0]
}
 800981e:	0018      	movs	r0, r3
 8009820:	46bd      	mov	sp, r7
 8009822:	b008      	add	sp, #32
 8009824:	bd80      	pop	{r7, pc}
 8009826:	46c0      	nop			@ (mov r8, r8)
 8009828:	cfff69f3 	.word	0xcfff69f3
 800982c:	ffffcfff 	.word	0xffffcfff
 8009830:	11fff4ff 	.word	0x11fff4ff
 8009834:	40013800 	.word	0x40013800
 8009838:	40021000 	.word	0x40021000
 800983c:	40004400 	.word	0x40004400
 8009840:	02dc6c00 	.word	0x02dc6c00
 8009844:	0800ade4 	.word	0x0800ade4

08009848 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b082      	sub	sp, #8
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009854:	2208      	movs	r2, #8
 8009856:	4013      	ands	r3, r2
 8009858:	d00b      	beq.n	8009872 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	685b      	ldr	r3, [r3, #4]
 8009860:	4a4a      	ldr	r2, [pc, #296]	@ (800998c <UART_AdvFeatureConfig+0x144>)
 8009862:	4013      	ands	r3, r2
 8009864:	0019      	movs	r1, r3
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	430a      	orrs	r2, r1
 8009870:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009876:	2201      	movs	r2, #1
 8009878:	4013      	ands	r3, r2
 800987a:	d00b      	beq.n	8009894 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	685b      	ldr	r3, [r3, #4]
 8009882:	4a43      	ldr	r2, [pc, #268]	@ (8009990 <UART_AdvFeatureConfig+0x148>)
 8009884:	4013      	ands	r3, r2
 8009886:	0019      	movs	r1, r3
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	430a      	orrs	r2, r1
 8009892:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009898:	2202      	movs	r2, #2
 800989a:	4013      	ands	r3, r2
 800989c:	d00b      	beq.n	80098b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	685b      	ldr	r3, [r3, #4]
 80098a4:	4a3b      	ldr	r2, [pc, #236]	@ (8009994 <UART_AdvFeatureConfig+0x14c>)
 80098a6:	4013      	ands	r3, r2
 80098a8:	0019      	movs	r1, r3
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	430a      	orrs	r2, r1
 80098b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098ba:	2204      	movs	r2, #4
 80098bc:	4013      	ands	r3, r2
 80098be:	d00b      	beq.n	80098d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	685b      	ldr	r3, [r3, #4]
 80098c6:	4a34      	ldr	r2, [pc, #208]	@ (8009998 <UART_AdvFeatureConfig+0x150>)
 80098c8:	4013      	ands	r3, r2
 80098ca:	0019      	movs	r1, r3
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	430a      	orrs	r2, r1
 80098d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098dc:	2210      	movs	r2, #16
 80098de:	4013      	ands	r3, r2
 80098e0:	d00b      	beq.n	80098fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	689b      	ldr	r3, [r3, #8]
 80098e8:	4a2c      	ldr	r2, [pc, #176]	@ (800999c <UART_AdvFeatureConfig+0x154>)
 80098ea:	4013      	ands	r3, r2
 80098ec:	0019      	movs	r1, r3
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	430a      	orrs	r2, r1
 80098f8:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098fe:	2220      	movs	r2, #32
 8009900:	4013      	ands	r3, r2
 8009902:	d00b      	beq.n	800991c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	689b      	ldr	r3, [r3, #8]
 800990a:	4a25      	ldr	r2, [pc, #148]	@ (80099a0 <UART_AdvFeatureConfig+0x158>)
 800990c:	4013      	ands	r3, r2
 800990e:	0019      	movs	r1, r3
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	430a      	orrs	r2, r1
 800991a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009920:	2240      	movs	r2, #64	@ 0x40
 8009922:	4013      	ands	r3, r2
 8009924:	d01d      	beq.n	8009962 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	685b      	ldr	r3, [r3, #4]
 800992c:	4a1d      	ldr	r2, [pc, #116]	@ (80099a4 <UART_AdvFeatureConfig+0x15c>)
 800992e:	4013      	ands	r3, r2
 8009930:	0019      	movs	r1, r3
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	430a      	orrs	r2, r1
 800993c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009942:	2380      	movs	r3, #128	@ 0x80
 8009944:	035b      	lsls	r3, r3, #13
 8009946:	429a      	cmp	r2, r3
 8009948:	d10b      	bne.n	8009962 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	685b      	ldr	r3, [r3, #4]
 8009950:	4a15      	ldr	r2, [pc, #84]	@ (80099a8 <UART_AdvFeatureConfig+0x160>)
 8009952:	4013      	ands	r3, r2
 8009954:	0019      	movs	r1, r3
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	430a      	orrs	r2, r1
 8009960:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009966:	2280      	movs	r2, #128	@ 0x80
 8009968:	4013      	ands	r3, r2
 800996a:	d00b      	beq.n	8009984 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	685b      	ldr	r3, [r3, #4]
 8009972:	4a0e      	ldr	r2, [pc, #56]	@ (80099ac <UART_AdvFeatureConfig+0x164>)
 8009974:	4013      	ands	r3, r2
 8009976:	0019      	movs	r1, r3
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	430a      	orrs	r2, r1
 8009982:	605a      	str	r2, [r3, #4]
  }
}
 8009984:	46c0      	nop			@ (mov r8, r8)
 8009986:	46bd      	mov	sp, r7
 8009988:	b002      	add	sp, #8
 800998a:	bd80      	pop	{r7, pc}
 800998c:	ffff7fff 	.word	0xffff7fff
 8009990:	fffdffff 	.word	0xfffdffff
 8009994:	fffeffff 	.word	0xfffeffff
 8009998:	fffbffff 	.word	0xfffbffff
 800999c:	ffffefff 	.word	0xffffefff
 80099a0:	ffffdfff 	.word	0xffffdfff
 80099a4:	ffefffff 	.word	0xffefffff
 80099a8:	ff9fffff 	.word	0xff9fffff
 80099ac:	fff7ffff 	.word	0xfff7ffff

080099b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b092      	sub	sp, #72	@ 0x48
 80099b4:	af02      	add	r7, sp, #8
 80099b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2290      	movs	r2, #144	@ 0x90
 80099bc:	2100      	movs	r1, #0
 80099be:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80099c0:	f7fa f994 	bl	8003cec <HAL_GetTick>
 80099c4:	0003      	movs	r3, r0
 80099c6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	2208      	movs	r2, #8
 80099d0:	4013      	ands	r3, r2
 80099d2:	2b08      	cmp	r3, #8
 80099d4:	d12d      	bne.n	8009a32 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80099d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099d8:	2280      	movs	r2, #128	@ 0x80
 80099da:	0391      	lsls	r1, r2, #14
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	4a47      	ldr	r2, [pc, #284]	@ (8009afc <UART_CheckIdleState+0x14c>)
 80099e0:	9200      	str	r2, [sp, #0]
 80099e2:	2200      	movs	r2, #0
 80099e4:	f000 f88e 	bl	8009b04 <UART_WaitOnFlagUntilTimeout>
 80099e8:	1e03      	subs	r3, r0, #0
 80099ea:	d022      	beq.n	8009a32 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80099ec:	f3ef 8310 	mrs	r3, PRIMASK
 80099f0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80099f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80099f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80099f6:	2301      	movs	r3, #1
 80099f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80099fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099fc:	f383 8810 	msr	PRIMASK, r3
}
 8009a00:	46c0      	nop			@ (mov r8, r8)
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	681a      	ldr	r2, [r3, #0]
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	2180      	movs	r1, #128	@ 0x80
 8009a0e:	438a      	bics	r2, r1
 8009a10:	601a      	str	r2, [r3, #0]
 8009a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a18:	f383 8810 	msr	PRIMASK, r3
}
 8009a1c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2288      	movs	r2, #136	@ 0x88
 8009a22:	2120      	movs	r1, #32
 8009a24:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2284      	movs	r2, #132	@ 0x84
 8009a2a:	2100      	movs	r1, #0
 8009a2c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009a2e:	2303      	movs	r3, #3
 8009a30:	e060      	b.n	8009af4 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	2204      	movs	r2, #4
 8009a3a:	4013      	ands	r3, r2
 8009a3c:	2b04      	cmp	r3, #4
 8009a3e:	d146      	bne.n	8009ace <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009a40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a42:	2280      	movs	r2, #128	@ 0x80
 8009a44:	03d1      	lsls	r1, r2, #15
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	4a2c      	ldr	r2, [pc, #176]	@ (8009afc <UART_CheckIdleState+0x14c>)
 8009a4a:	9200      	str	r2, [sp, #0]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	f000 f859 	bl	8009b04 <UART_WaitOnFlagUntilTimeout>
 8009a52:	1e03      	subs	r3, r0, #0
 8009a54:	d03b      	beq.n	8009ace <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009a56:	f3ef 8310 	mrs	r3, PRIMASK
 8009a5a:	60fb      	str	r3, [r7, #12]
  return(result);
 8009a5c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009a5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a60:	2301      	movs	r3, #1
 8009a62:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a64:	693b      	ldr	r3, [r7, #16]
 8009a66:	f383 8810 	msr	PRIMASK, r3
}
 8009a6a:	46c0      	nop			@ (mov r8, r8)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	681a      	ldr	r2, [r3, #0]
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	4922      	ldr	r1, [pc, #136]	@ (8009b00 <UART_CheckIdleState+0x150>)
 8009a78:	400a      	ands	r2, r1
 8009a7a:	601a      	str	r2, [r3, #0]
 8009a7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a7e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a80:	697b      	ldr	r3, [r7, #20]
 8009a82:	f383 8810 	msr	PRIMASK, r3
}
 8009a86:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009a88:	f3ef 8310 	mrs	r3, PRIMASK
 8009a8c:	61bb      	str	r3, [r7, #24]
  return(result);
 8009a8e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a90:	633b      	str	r3, [r7, #48]	@ 0x30
 8009a92:	2301      	movs	r3, #1
 8009a94:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a96:	69fb      	ldr	r3, [r7, #28]
 8009a98:	f383 8810 	msr	PRIMASK, r3
}
 8009a9c:	46c0      	nop			@ (mov r8, r8)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	689a      	ldr	r2, [r3, #8]
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	2101      	movs	r1, #1
 8009aaa:	438a      	bics	r2, r1
 8009aac:	609a      	str	r2, [r3, #8]
 8009aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ab0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ab2:	6a3b      	ldr	r3, [r7, #32]
 8009ab4:	f383 8810 	msr	PRIMASK, r3
}
 8009ab8:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	228c      	movs	r2, #140	@ 0x8c
 8009abe:	2120      	movs	r1, #32
 8009ac0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2284      	movs	r2, #132	@ 0x84
 8009ac6:	2100      	movs	r1, #0
 8009ac8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009aca:	2303      	movs	r3, #3
 8009acc:	e012      	b.n	8009af4 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2288      	movs	r2, #136	@ 0x88
 8009ad2:	2120      	movs	r1, #32
 8009ad4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	228c      	movs	r2, #140	@ 0x8c
 8009ada:	2120      	movs	r1, #32
 8009adc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2284      	movs	r2, #132	@ 0x84
 8009aee:	2100      	movs	r1, #0
 8009af0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009af2:	2300      	movs	r3, #0
}
 8009af4:	0018      	movs	r0, r3
 8009af6:	46bd      	mov	sp, r7
 8009af8:	b010      	add	sp, #64	@ 0x40
 8009afa:	bd80      	pop	{r7, pc}
 8009afc:	01ffffff 	.word	0x01ffffff
 8009b00:	fffffedf 	.word	0xfffffedf

08009b04 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b084      	sub	sp, #16
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	60f8      	str	r0, [r7, #12]
 8009b0c:	60b9      	str	r1, [r7, #8]
 8009b0e:	603b      	str	r3, [r7, #0]
 8009b10:	1dfb      	adds	r3, r7, #7
 8009b12:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b14:	e051      	b.n	8009bba <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b16:	69bb      	ldr	r3, [r7, #24]
 8009b18:	3301      	adds	r3, #1
 8009b1a:	d04e      	beq.n	8009bba <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b1c:	f7fa f8e6 	bl	8003cec <HAL_GetTick>
 8009b20:	0002      	movs	r2, r0
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	1ad3      	subs	r3, r2, r3
 8009b26:	69ba      	ldr	r2, [r7, #24]
 8009b28:	429a      	cmp	r2, r3
 8009b2a:	d302      	bcc.n	8009b32 <UART_WaitOnFlagUntilTimeout+0x2e>
 8009b2c:	69bb      	ldr	r3, [r7, #24]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d101      	bne.n	8009b36 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8009b32:	2303      	movs	r3, #3
 8009b34:	e051      	b.n	8009bda <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	2204      	movs	r2, #4
 8009b3e:	4013      	ands	r3, r2
 8009b40:	d03b      	beq.n	8009bba <UART_WaitOnFlagUntilTimeout+0xb6>
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	2b80      	cmp	r3, #128	@ 0x80
 8009b46:	d038      	beq.n	8009bba <UART_WaitOnFlagUntilTimeout+0xb6>
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	2b40      	cmp	r3, #64	@ 0x40
 8009b4c:	d035      	beq.n	8009bba <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	69db      	ldr	r3, [r3, #28]
 8009b54:	2208      	movs	r2, #8
 8009b56:	4013      	ands	r3, r2
 8009b58:	2b08      	cmp	r3, #8
 8009b5a:	d111      	bne.n	8009b80 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	2208      	movs	r2, #8
 8009b62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	0018      	movs	r0, r3
 8009b68:	f000 f922 	bl	8009db0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	2290      	movs	r2, #144	@ 0x90
 8009b70:	2108      	movs	r1, #8
 8009b72:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	2284      	movs	r2, #132	@ 0x84
 8009b78:	2100      	movs	r1, #0
 8009b7a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8009b7c:	2301      	movs	r3, #1
 8009b7e:	e02c      	b.n	8009bda <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	69da      	ldr	r2, [r3, #28]
 8009b86:	2380      	movs	r3, #128	@ 0x80
 8009b88:	011b      	lsls	r3, r3, #4
 8009b8a:	401a      	ands	r2, r3
 8009b8c:	2380      	movs	r3, #128	@ 0x80
 8009b8e:	011b      	lsls	r3, r3, #4
 8009b90:	429a      	cmp	r2, r3
 8009b92:	d112      	bne.n	8009bba <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	2280      	movs	r2, #128	@ 0x80
 8009b9a:	0112      	lsls	r2, r2, #4
 8009b9c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	0018      	movs	r0, r3
 8009ba2:	f000 f905 	bl	8009db0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	2290      	movs	r2, #144	@ 0x90
 8009baa:	2120      	movs	r1, #32
 8009bac:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	2284      	movs	r2, #132	@ 0x84
 8009bb2:	2100      	movs	r1, #0
 8009bb4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8009bb6:	2303      	movs	r3, #3
 8009bb8:	e00f      	b.n	8009bda <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	69db      	ldr	r3, [r3, #28]
 8009bc0:	68ba      	ldr	r2, [r7, #8]
 8009bc2:	4013      	ands	r3, r2
 8009bc4:	68ba      	ldr	r2, [r7, #8]
 8009bc6:	1ad3      	subs	r3, r2, r3
 8009bc8:	425a      	negs	r2, r3
 8009bca:	4153      	adcs	r3, r2
 8009bcc:	b2db      	uxtb	r3, r3
 8009bce:	001a      	movs	r2, r3
 8009bd0:	1dfb      	adds	r3, r7, #7
 8009bd2:	781b      	ldrb	r3, [r3, #0]
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	d09e      	beq.n	8009b16 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009bd8:	2300      	movs	r3, #0
}
 8009bda:	0018      	movs	r0, r3
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	b004      	add	sp, #16
 8009be0:	bd80      	pop	{r7, pc}
	...

08009be4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b090      	sub	sp, #64	@ 0x40
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	60f8      	str	r0, [r7, #12]
 8009bec:	60b9      	str	r1, [r7, #8]
 8009bee:	1dbb      	adds	r3, r7, #6
 8009bf0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	68ba      	ldr	r2, [r7, #8]
 8009bf6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	1dba      	adds	r2, r7, #6
 8009bfc:	215c      	movs	r1, #92	@ 0x5c
 8009bfe:	8812      	ldrh	r2, [r2, #0]
 8009c00:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	2290      	movs	r2, #144	@ 0x90
 8009c06:	2100      	movs	r1, #0
 8009c08:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	228c      	movs	r2, #140	@ 0x8c
 8009c0e:	2122      	movs	r1, #34	@ 0x22
 8009c10:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	2280      	movs	r2, #128	@ 0x80
 8009c16:	589b      	ldr	r3, [r3, r2]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d02d      	beq.n	8009c78 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	2280      	movs	r2, #128	@ 0x80
 8009c20:	589b      	ldr	r3, [r3, r2]
 8009c22:	4a40      	ldr	r2, [pc, #256]	@ (8009d24 <UART_Start_Receive_DMA+0x140>)
 8009c24:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	2280      	movs	r2, #128	@ 0x80
 8009c2a:	589b      	ldr	r3, [r3, r2]
 8009c2c:	4a3e      	ldr	r2, [pc, #248]	@ (8009d28 <UART_Start_Receive_DMA+0x144>)
 8009c2e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	2280      	movs	r2, #128	@ 0x80
 8009c34:	589b      	ldr	r3, [r3, r2]
 8009c36:	4a3d      	ldr	r2, [pc, #244]	@ (8009d2c <UART_Start_Receive_DMA+0x148>)
 8009c38:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	2280      	movs	r2, #128	@ 0x80
 8009c3e:	589b      	ldr	r3, [r3, r2]
 8009c40:	2200      	movs	r2, #0
 8009c42:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	2280      	movs	r2, #128	@ 0x80
 8009c48:	5898      	ldr	r0, [r3, r2]
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	3324      	adds	r3, #36	@ 0x24
 8009c50:	0019      	movs	r1, r3
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c56:	001a      	movs	r2, r3
 8009c58:	1dbb      	adds	r3, r7, #6
 8009c5a:	881b      	ldrh	r3, [r3, #0]
 8009c5c:	f7fa fa86 	bl	800416c <HAL_DMA_Start_IT>
 8009c60:	1e03      	subs	r3, r0, #0
 8009c62:	d009      	beq.n	8009c78 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	2290      	movs	r2, #144	@ 0x90
 8009c68:	2110      	movs	r1, #16
 8009c6a:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	228c      	movs	r2, #140	@ 0x8c
 8009c70:	2120      	movs	r1, #32
 8009c72:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8009c74:	2301      	movs	r3, #1
 8009c76:	e050      	b.n	8009d1a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	691b      	ldr	r3, [r3, #16]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d019      	beq.n	8009cb4 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009c80:	f3ef 8310 	mrs	r3, PRIMASK
 8009c84:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8009c86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009c88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c90:	f383 8810 	msr	PRIMASK, r3
}
 8009c94:	46c0      	nop			@ (mov r8, r8)
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	681a      	ldr	r2, [r3, #0]
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	2180      	movs	r1, #128	@ 0x80
 8009ca2:	0049      	lsls	r1, r1, #1
 8009ca4:	430a      	orrs	r2, r1
 8009ca6:	601a      	str	r2, [r3, #0]
 8009ca8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009caa:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cae:	f383 8810 	msr	PRIMASK, r3
}
 8009cb2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009cb4:	f3ef 8310 	mrs	r3, PRIMASK
 8009cb8:	613b      	str	r3, [r7, #16]
  return(result);
 8009cba:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cbc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009cc2:	697b      	ldr	r3, [r7, #20]
 8009cc4:	f383 8810 	msr	PRIMASK, r3
}
 8009cc8:	46c0      	nop			@ (mov r8, r8)
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	689a      	ldr	r2, [r3, #8]
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	2101      	movs	r1, #1
 8009cd6:	430a      	orrs	r2, r1
 8009cd8:	609a      	str	r2, [r3, #8]
 8009cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cdc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009cde:	69bb      	ldr	r3, [r7, #24]
 8009ce0:	f383 8810 	msr	PRIMASK, r3
}
 8009ce4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009ce6:	f3ef 8310 	mrs	r3, PRIMASK
 8009cea:	61fb      	str	r3, [r7, #28]
  return(result);
 8009cec:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009cee:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009cf4:	6a3b      	ldr	r3, [r7, #32]
 8009cf6:	f383 8810 	msr	PRIMASK, r3
}
 8009cfa:	46c0      	nop			@ (mov r8, r8)
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	689a      	ldr	r2, [r3, #8]
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	2140      	movs	r1, #64	@ 0x40
 8009d08:	430a      	orrs	r2, r1
 8009d0a:	609a      	str	r2, [r3, #8]
 8009d0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d0e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d12:	f383 8810 	msr	PRIMASK, r3
}
 8009d16:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8009d18:	2300      	movs	r3, #0
}
 8009d1a:	0018      	movs	r0, r3
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	b010      	add	sp, #64	@ 0x40
 8009d20:	bd80      	pop	{r7, pc}
 8009d22:	46c0      	nop			@ (mov r8, r8)
 8009d24:	08009f35 	.word	0x08009f35
 8009d28:	0800a065 	.word	0x0800a065
 8009d2c:	0800a0a7 	.word	0x0800a0a7

08009d30 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b08a      	sub	sp, #40	@ 0x28
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009d38:	f3ef 8310 	mrs	r3, PRIMASK
 8009d3c:	60bb      	str	r3, [r7, #8]
  return(result);
 8009d3e:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009d40:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d42:	2301      	movs	r3, #1
 8009d44:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	f383 8810 	msr	PRIMASK, r3
}
 8009d4c:	46c0      	nop			@ (mov r8, r8)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	681a      	ldr	r2, [r3, #0]
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	21c0      	movs	r1, #192	@ 0xc0
 8009d5a:	438a      	bics	r2, r1
 8009d5c:	601a      	str	r2, [r3, #0]
 8009d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d60:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d62:	693b      	ldr	r3, [r7, #16]
 8009d64:	f383 8810 	msr	PRIMASK, r3
}
 8009d68:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009d6a:	f3ef 8310 	mrs	r3, PRIMASK
 8009d6e:	617b      	str	r3, [r7, #20]
  return(result);
 8009d70:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009d72:	623b      	str	r3, [r7, #32]
 8009d74:	2301      	movs	r3, #1
 8009d76:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d78:	69bb      	ldr	r3, [r7, #24]
 8009d7a:	f383 8810 	msr	PRIMASK, r3
}
 8009d7e:	46c0      	nop			@ (mov r8, r8)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	689a      	ldr	r2, [r3, #8]
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	4908      	ldr	r1, [pc, #32]	@ (8009dac <UART_EndTxTransfer+0x7c>)
 8009d8c:	400a      	ands	r2, r1
 8009d8e:	609a      	str	r2, [r3, #8]
 8009d90:	6a3b      	ldr	r3, [r7, #32]
 8009d92:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d94:	69fb      	ldr	r3, [r7, #28]
 8009d96:	f383 8810 	msr	PRIMASK, r3
}
 8009d9a:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2288      	movs	r2, #136	@ 0x88
 8009da0:	2120      	movs	r1, #32
 8009da2:	5099      	str	r1, [r3, r2]
}
 8009da4:	46c0      	nop			@ (mov r8, r8)
 8009da6:	46bd      	mov	sp, r7
 8009da8:	b00a      	add	sp, #40	@ 0x28
 8009daa:	bd80      	pop	{r7, pc}
 8009dac:	ff7fffff 	.word	0xff7fffff

08009db0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b08e      	sub	sp, #56	@ 0x38
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009db8:	f3ef 8310 	mrs	r3, PRIMASK
 8009dbc:	617b      	str	r3, [r7, #20]
  return(result);
 8009dbe:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009dc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009dc6:	69bb      	ldr	r3, [r7, #24]
 8009dc8:	f383 8810 	msr	PRIMASK, r3
}
 8009dcc:	46c0      	nop			@ (mov r8, r8)
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	681a      	ldr	r2, [r3, #0]
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	4926      	ldr	r1, [pc, #152]	@ (8009e74 <UART_EndRxTransfer+0xc4>)
 8009dda:	400a      	ands	r2, r1
 8009ddc:	601a      	str	r2, [r3, #0]
 8009dde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009de0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009de2:	69fb      	ldr	r3, [r7, #28]
 8009de4:	f383 8810 	msr	PRIMASK, r3
}
 8009de8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009dea:	f3ef 8310 	mrs	r3, PRIMASK
 8009dee:	623b      	str	r3, [r7, #32]
  return(result);
 8009df0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009df2:	633b      	str	r3, [r7, #48]	@ 0x30
 8009df4:	2301      	movs	r3, #1
 8009df6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dfa:	f383 8810 	msr	PRIMASK, r3
}
 8009dfe:	46c0      	nop			@ (mov r8, r8)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	689a      	ldr	r2, [r3, #8]
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	491b      	ldr	r1, [pc, #108]	@ (8009e78 <UART_EndRxTransfer+0xc8>)
 8009e0c:	400a      	ands	r2, r1
 8009e0e:	609a      	str	r2, [r3, #8]
 8009e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e12:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e16:	f383 8810 	msr	PRIMASK, r3
}
 8009e1a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e20:	2b01      	cmp	r3, #1
 8009e22:	d118      	bne.n	8009e56 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009e24:	f3ef 8310 	mrs	r3, PRIMASK
 8009e28:	60bb      	str	r3, [r7, #8]
  return(result);
 8009e2a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009e2e:	2301      	movs	r3, #1
 8009e30:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	f383 8810 	msr	PRIMASK, r3
}
 8009e38:	46c0      	nop			@ (mov r8, r8)
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	681a      	ldr	r2, [r3, #0]
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	2110      	movs	r1, #16
 8009e46:	438a      	bics	r2, r1
 8009e48:	601a      	str	r2, [r3, #0]
 8009e4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e4c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e4e:	693b      	ldr	r3, [r7, #16]
 8009e50:	f383 8810 	msr	PRIMASK, r3
}
 8009e54:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	228c      	movs	r2, #140	@ 0x8c
 8009e5a:	2120      	movs	r1, #32
 8009e5c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2200      	movs	r2, #0
 8009e62:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2200      	movs	r2, #0
 8009e68:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009e6a:	46c0      	nop			@ (mov r8, r8)
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	b00e      	add	sp, #56	@ 0x38
 8009e70:	bd80      	pop	{r7, pc}
 8009e72:	46c0      	nop			@ (mov r8, r8)
 8009e74:	fffffedf 	.word	0xfffffedf
 8009e78:	effffffe 	.word	0xeffffffe

08009e7c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b08c      	sub	sp, #48	@ 0x30
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e88:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	2220      	movs	r2, #32
 8009e92:	4013      	ands	r3, r2
 8009e94:	d135      	bne.n	8009f02 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8009e96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e98:	2256      	movs	r2, #86	@ 0x56
 8009e9a:	2100      	movs	r1, #0
 8009e9c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009e9e:	f3ef 8310 	mrs	r3, PRIMASK
 8009ea2:	60fb      	str	r3, [r7, #12]
  return(result);
 8009ea4:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009eac:	693b      	ldr	r3, [r7, #16]
 8009eae:	f383 8810 	msr	PRIMASK, r3
}
 8009eb2:	46c0      	nop			@ (mov r8, r8)
 8009eb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	689a      	ldr	r2, [r3, #8]
 8009eba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	2180      	movs	r1, #128	@ 0x80
 8009ec0:	438a      	bics	r2, r1
 8009ec2:	609a      	str	r2, [r3, #8]
 8009ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ec6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	f383 8810 	msr	PRIMASK, r3
}
 8009ece:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009ed0:	f3ef 8310 	mrs	r3, PRIMASK
 8009ed4:	61bb      	str	r3, [r7, #24]
  return(result);
 8009ed6:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009ed8:	627b      	str	r3, [r7, #36]	@ 0x24
 8009eda:	2301      	movs	r3, #1
 8009edc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ede:	69fb      	ldr	r3, [r7, #28]
 8009ee0:	f383 8810 	msr	PRIMASK, r3
}
 8009ee4:	46c0      	nop			@ (mov r8, r8)
 8009ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	681a      	ldr	r2, [r3, #0]
 8009eec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	2140      	movs	r1, #64	@ 0x40
 8009ef2:	430a      	orrs	r2, r1
 8009ef4:	601a      	str	r2, [r3, #0]
 8009ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ef8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009efa:	6a3b      	ldr	r3, [r7, #32]
 8009efc:	f383 8810 	msr	PRIMASK, r3
}
 8009f00:	e004      	b.n	8009f0c <UART_DMATransmitCplt+0x90>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 8009f02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f04:	0018      	movs	r0, r3
 8009f06:	f7f8 fa8b 	bl	8002420 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009f0a:	46c0      	nop			@ (mov r8, r8)
 8009f0c:	46c0      	nop			@ (mov r8, r8)
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	b00c      	add	sp, #48	@ 0x30
 8009f12:	bd80      	pop	{r7, pc}

08009f14 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b084      	sub	sp, #16
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f20:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	0018      	movs	r0, r3
 8009f26:	f7ff faf9 	bl	800951c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f2a:	46c0      	nop			@ (mov r8, r8)
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	b004      	add	sp, #16
 8009f30:	bd80      	pop	{r7, pc}
	...

08009f34 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b094      	sub	sp, #80	@ 0x50
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f40:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	2220      	movs	r2, #32
 8009f4a:	4013      	ands	r3, r2
 8009f4c:	d16f      	bne.n	800a02e <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8009f4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f50:	225e      	movs	r2, #94	@ 0x5e
 8009f52:	2100      	movs	r1, #0
 8009f54:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009f56:	f3ef 8310 	mrs	r3, PRIMASK
 8009f5a:	61bb      	str	r3, [r7, #24]
  return(result);
 8009f5c:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009f60:	2301      	movs	r3, #1
 8009f62:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f64:	69fb      	ldr	r3, [r7, #28]
 8009f66:	f383 8810 	msr	PRIMASK, r3
}
 8009f6a:	46c0      	nop			@ (mov r8, r8)
 8009f6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	681a      	ldr	r2, [r3, #0]
 8009f72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	493a      	ldr	r1, [pc, #232]	@ (800a060 <UART_DMAReceiveCplt+0x12c>)
 8009f78:	400a      	ands	r2, r1
 8009f7a:	601a      	str	r2, [r3, #0]
 8009f7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009f7e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f80:	6a3b      	ldr	r3, [r7, #32]
 8009f82:	f383 8810 	msr	PRIMASK, r3
}
 8009f86:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009f88:	f3ef 8310 	mrs	r3, PRIMASK
 8009f8c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8009f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f90:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f92:	2301      	movs	r3, #1
 8009f94:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f98:	f383 8810 	msr	PRIMASK, r3
}
 8009f9c:	46c0      	nop			@ (mov r8, r8)
 8009f9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	689a      	ldr	r2, [r3, #8]
 8009fa4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	2101      	movs	r1, #1
 8009faa:	438a      	bics	r2, r1
 8009fac:	609a      	str	r2, [r3, #8]
 8009fae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009fb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fb4:	f383 8810 	msr	PRIMASK, r3
}
 8009fb8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009fba:	f3ef 8310 	mrs	r3, PRIMASK
 8009fbe:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8009fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009fc2:	643b      	str	r3, [r7, #64]	@ 0x40
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009fc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fca:	f383 8810 	msr	PRIMASK, r3
}
 8009fce:	46c0      	nop			@ (mov r8, r8)
 8009fd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	689a      	ldr	r2, [r3, #8]
 8009fd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	2140      	movs	r1, #64	@ 0x40
 8009fdc:	438a      	bics	r2, r1
 8009fde:	609a      	str	r2, [r3, #8]
 8009fe0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009fe2:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009fe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fe6:	f383 8810 	msr	PRIMASK, r3
}
 8009fea:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009fec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009fee:	228c      	movs	r2, #140	@ 0x8c
 8009ff0:	2120      	movs	r1, #32
 8009ff2:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ff4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ff6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ff8:	2b01      	cmp	r3, #1
 8009ffa:	d118      	bne.n	800a02e <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009ffc:	f3ef 8310 	mrs	r3, PRIMASK
 800a000:	60fb      	str	r3, [r7, #12]
  return(result);
 800a002:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a004:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a006:	2301      	movs	r3, #1
 800a008:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a00a:	693b      	ldr	r3, [r7, #16]
 800a00c:	f383 8810 	msr	PRIMASK, r3
}
 800a010:	46c0      	nop			@ (mov r8, r8)
 800a012:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	681a      	ldr	r2, [r3, #0]
 800a018:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	2110      	movs	r1, #16
 800a01e:	438a      	bics	r2, r1
 800a020:	601a      	str	r2, [r3, #0]
 800a022:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a024:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a026:	697b      	ldr	r3, [r7, #20]
 800a028:	f383 8810 	msr	PRIMASK, r3
}
 800a02c:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a02e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a030:	2200      	movs	r2, #0
 800a032:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a034:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a036:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a038:	2b01      	cmp	r3, #1
 800a03a:	d108      	bne.n	800a04e <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a03c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a03e:	225c      	movs	r2, #92	@ 0x5c
 800a040:	5a9a      	ldrh	r2, [r3, r2]
 800a042:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a044:	0011      	movs	r1, r2
 800a046:	0018      	movs	r0, r3
 800a048:	f7f8 f98e 	bl	8002368 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a04c:	e003      	b.n	800a056 <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 800a04e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a050:	0018      	movs	r0, r3
 800a052:	f7ff fa6b 	bl	800952c <HAL_UART_RxCpltCallback>
}
 800a056:	46c0      	nop			@ (mov r8, r8)
 800a058:	46bd      	mov	sp, r7
 800a05a:	b014      	add	sp, #80	@ 0x50
 800a05c:	bd80      	pop	{r7, pc}
 800a05e:	46c0      	nop			@ (mov r8, r8)
 800a060:	fffffeff 	.word	0xfffffeff

0800a064 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b084      	sub	sp, #16
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a070:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	2201      	movs	r2, #1
 800a076:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a07c:	2b01      	cmp	r3, #1
 800a07e:	d10a      	bne.n	800a096 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	225c      	movs	r2, #92	@ 0x5c
 800a084:	5a9b      	ldrh	r3, [r3, r2]
 800a086:	085b      	lsrs	r3, r3, #1
 800a088:	b29a      	uxth	r2, r3
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	0011      	movs	r1, r2
 800a08e:	0018      	movs	r0, r3
 800a090:	f7f8 f96a 	bl	8002368 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a094:	e003      	b.n	800a09e <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	0018      	movs	r0, r3
 800a09a:	f7ff fa4f 	bl	800953c <HAL_UART_RxHalfCpltCallback>
}
 800a09e:	46c0      	nop			@ (mov r8, r8)
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	b004      	add	sp, #16
 800a0a4:	bd80      	pop	{r7, pc}

0800a0a6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a0a6:	b580      	push	{r7, lr}
 800a0a8:	b086      	sub	sp, #24
 800a0aa:	af00      	add	r7, sp, #0
 800a0ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0b2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a0b4:	697b      	ldr	r3, [r7, #20]
 800a0b6:	2288      	movs	r2, #136	@ 0x88
 800a0b8:	589b      	ldr	r3, [r3, r2]
 800a0ba:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a0bc:	697b      	ldr	r3, [r7, #20]
 800a0be:	228c      	movs	r2, #140	@ 0x8c
 800a0c0:	589b      	ldr	r3, [r3, r2]
 800a0c2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a0c4:	697b      	ldr	r3, [r7, #20]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	689b      	ldr	r3, [r3, #8]
 800a0ca:	2280      	movs	r2, #128	@ 0x80
 800a0cc:	4013      	ands	r3, r2
 800a0ce:	2b80      	cmp	r3, #128	@ 0x80
 800a0d0:	d10a      	bne.n	800a0e8 <UART_DMAError+0x42>
 800a0d2:	693b      	ldr	r3, [r7, #16]
 800a0d4:	2b21      	cmp	r3, #33	@ 0x21
 800a0d6:	d107      	bne.n	800a0e8 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a0d8:	697b      	ldr	r3, [r7, #20]
 800a0da:	2256      	movs	r2, #86	@ 0x56
 800a0dc:	2100      	movs	r1, #0
 800a0de:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	0018      	movs	r0, r3
 800a0e4:	f7ff fe24 	bl	8009d30 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a0e8:	697b      	ldr	r3, [r7, #20]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	689b      	ldr	r3, [r3, #8]
 800a0ee:	2240      	movs	r2, #64	@ 0x40
 800a0f0:	4013      	ands	r3, r2
 800a0f2:	2b40      	cmp	r3, #64	@ 0x40
 800a0f4:	d10a      	bne.n	800a10c <UART_DMAError+0x66>
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	2b22      	cmp	r3, #34	@ 0x22
 800a0fa:	d107      	bne.n	800a10c <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a0fc:	697b      	ldr	r3, [r7, #20]
 800a0fe:	225e      	movs	r2, #94	@ 0x5e
 800a100:	2100      	movs	r1, #0
 800a102:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	0018      	movs	r0, r3
 800a108:	f7ff fe52 	bl	8009db0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a10c:	697b      	ldr	r3, [r7, #20]
 800a10e:	2290      	movs	r2, #144	@ 0x90
 800a110:	589b      	ldr	r3, [r3, r2]
 800a112:	2210      	movs	r2, #16
 800a114:	431a      	orrs	r2, r3
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	2190      	movs	r1, #144	@ 0x90
 800a11a:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a11c:	697b      	ldr	r3, [r7, #20]
 800a11e:	0018      	movs	r0, r3
 800a120:	f7f8 f98c 	bl	800243c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a124:	46c0      	nop			@ (mov r8, r8)
 800a126:	46bd      	mov	sp, r7
 800a128:	b006      	add	sp, #24
 800a12a:	bd80      	pop	{r7, pc}

0800a12c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b084      	sub	sp, #16
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a138:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	225e      	movs	r2, #94	@ 0x5e
 800a13e:	2100      	movs	r1, #0
 800a140:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	2256      	movs	r2, #86	@ 0x56
 800a146:	2100      	movs	r1, #0
 800a148:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	0018      	movs	r0, r3
 800a14e:	f7f8 f975 	bl	800243c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a152:	46c0      	nop			@ (mov r8, r8)
 800a154:	46bd      	mov	sp, r7
 800a156:	b004      	add	sp, #16
 800a158:	bd80      	pop	{r7, pc}

0800a15a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a15a:	b580      	push	{r7, lr}
 800a15c:	b086      	sub	sp, #24
 800a15e:	af00      	add	r7, sp, #0
 800a160:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a162:	f3ef 8310 	mrs	r3, PRIMASK
 800a166:	60bb      	str	r3, [r7, #8]
  return(result);
 800a168:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a16a:	617b      	str	r3, [r7, #20]
 800a16c:	2301      	movs	r3, #1
 800a16e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	f383 8810 	msr	PRIMASK, r3
}
 800a176:	46c0      	nop			@ (mov r8, r8)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	681a      	ldr	r2, [r3, #0]
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	2140      	movs	r1, #64	@ 0x40
 800a184:	438a      	bics	r2, r1
 800a186:	601a      	str	r2, [r3, #0]
 800a188:	697b      	ldr	r3, [r7, #20]
 800a18a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a18c:	693b      	ldr	r3, [r7, #16]
 800a18e:	f383 8810 	msr	PRIMASK, r3
}
 800a192:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2288      	movs	r2, #136	@ 0x88
 800a198:	2120      	movs	r1, #32
 800a19a:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	0018      	movs	r0, r3
 800a1a6:	f7f8 f93b 	bl	8002420 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a1aa:	46c0      	nop			@ (mov r8, r8)
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	b006      	add	sp, #24
 800a1b0:	bd80      	pop	{r7, pc}
	...

0800a1b4 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b086      	sub	sp, #24
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	60f8      	str	r0, [r7, #12]
 800a1bc:	60b9      	str	r1, [r7, #8]
 800a1be:	607a      	str	r2, [r7, #4]
 800a1c0:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d101      	bne.n	800a1cc <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 800a1c8:	2301      	movs	r3, #1
 800a1ca:	e05d      	b.n	800a288 <HAL_RS485Ex_Init+0xd4>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	2288      	movs	r2, #136	@ 0x88
 800a1d0:	589b      	ldr	r3, [r3, r2]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d107      	bne.n	800a1e6 <HAL_RS485Ex_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	2284      	movs	r2, #132	@ 0x84
 800a1da:	2100      	movs	r1, #0
 800a1dc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	0018      	movs	r0, r3
 800a1e2:	f7f9 fa4d 	bl	8003680 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	2288      	movs	r2, #136	@ 0x88
 800a1ea:	2124      	movs	r1, #36	@ 0x24
 800a1ec:	5099      	str	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	681a      	ldr	r2, [r3, #0]
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	2101      	movs	r1, #1
 800a1fa:	438a      	bics	r2, r1
 800a1fc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a202:	2b00      	cmp	r3, #0
 800a204:	d003      	beq.n	800a20e <HAL_RS485Ex_Init+0x5a>
  {
    UART_AdvFeatureConfig(huart);
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	0018      	movs	r0, r3
 800a20a:	f7ff fb1d 	bl	8009848 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	0018      	movs	r0, r3
 800a212:	f7ff f99b 	bl	800954c <UART_SetConfig>
 800a216:	0003      	movs	r3, r0
 800a218:	2b01      	cmp	r3, #1
 800a21a:	d101      	bne.n	800a220 <HAL_RS485Ex_Init+0x6c>
  {
    return HAL_ERROR;
 800a21c:	2301      	movs	r3, #1
 800a21e:	e033      	b.n	800a288 <HAL_RS485Ex_Init+0xd4>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	689a      	ldr	r2, [r3, #8]
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	2180      	movs	r1, #128	@ 0x80
 800a22c:	01c9      	lsls	r1, r1, #7
 800a22e:	430a      	orrs	r2, r1
 800a230:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	689b      	ldr	r3, [r3, #8]
 800a238:	4a15      	ldr	r2, [pc, #84]	@ (800a290 <HAL_RS485Ex_Init+0xdc>)
 800a23a:	4013      	ands	r3, r2
 800a23c:	0019      	movs	r1, r3
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	68ba      	ldr	r2, [r7, #8]
 800a244:	430a      	orrs	r2, r1
 800a246:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	055b      	lsls	r3, r3, #21
 800a24c:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	041b      	lsls	r3, r3, #16
 800a252:	697a      	ldr	r2, [r7, #20]
 800a254:	4313      	orrs	r3, r2
 800a256:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	4a0d      	ldr	r2, [pc, #52]	@ (800a294 <HAL_RS485Ex_Init+0xe0>)
 800a260:	4013      	ands	r3, r2
 800a262:	0019      	movs	r1, r3
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	697a      	ldr	r2, [r7, #20]
 800a26a:	430a      	orrs	r2, r1
 800a26c:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	681a      	ldr	r2, [r3, #0]
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	2101      	movs	r1, #1
 800a27a:	430a      	orrs	r2, r1
 800a27c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	0018      	movs	r0, r3
 800a282:	f7ff fb95 	bl	80099b0 <UART_CheckIdleState>
 800a286:	0003      	movs	r3, r0
}
 800a288:	0018      	movs	r0, r3
 800a28a:	46bd      	mov	sp, r7
 800a28c:	b006      	add	sp, #24
 800a28e:	bd80      	pop	{r7, pc}
 800a290:	ffff7fff 	.word	0xffff7fff
 800a294:	fc00ffff 	.word	0xfc00ffff

0800a298 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b082      	sub	sp, #8
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a2a0:	46c0      	nop			@ (mov r8, r8)
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	b002      	add	sp, #8
 800a2a6:	bd80      	pop	{r7, pc}

0800a2a8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b082      	sub	sp, #8
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a2b0:	46c0      	nop			@ (mov r8, r8)
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	b002      	add	sp, #8
 800a2b6:	bd80      	pop	{r7, pc}

0800a2b8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b082      	sub	sp, #8
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a2c0:	46c0      	nop			@ (mov r8, r8)
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	b002      	add	sp, #8
 800a2c6:	bd80      	pop	{r7, pc}

0800a2c8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b084      	sub	sp, #16
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2284      	movs	r2, #132	@ 0x84
 800a2d4:	5c9b      	ldrb	r3, [r3, r2]
 800a2d6:	2b01      	cmp	r3, #1
 800a2d8:	d101      	bne.n	800a2de <HAL_UARTEx_DisableFifoMode+0x16>
 800a2da:	2302      	movs	r3, #2
 800a2dc:	e027      	b.n	800a32e <HAL_UARTEx_DisableFifoMode+0x66>
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	2284      	movs	r2, #132	@ 0x84
 800a2e2:	2101      	movs	r1, #1
 800a2e4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2288      	movs	r2, #136	@ 0x88
 800a2ea:	2124      	movs	r1, #36	@ 0x24
 800a2ec:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	681a      	ldr	r2, [r3, #0]
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	2101      	movs	r1, #1
 800a302:	438a      	bics	r2, r1
 800a304:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	4a0b      	ldr	r2, [pc, #44]	@ (800a338 <HAL_UARTEx_DisableFifoMode+0x70>)
 800a30a:	4013      	ands	r3, r2
 800a30c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2200      	movs	r2, #0
 800a312:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	68fa      	ldr	r2, [r7, #12]
 800a31a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2288      	movs	r2, #136	@ 0x88
 800a320:	2120      	movs	r1, #32
 800a322:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2284      	movs	r2, #132	@ 0x84
 800a328:	2100      	movs	r1, #0
 800a32a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a32c:	2300      	movs	r3, #0
}
 800a32e:	0018      	movs	r0, r3
 800a330:	46bd      	mov	sp, r7
 800a332:	b004      	add	sp, #16
 800a334:	bd80      	pop	{r7, pc}
 800a336:	46c0      	nop			@ (mov r8, r8)
 800a338:	dfffffff 	.word	0xdfffffff

0800a33c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b084      	sub	sp, #16
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
 800a344:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2284      	movs	r2, #132	@ 0x84
 800a34a:	5c9b      	ldrb	r3, [r3, r2]
 800a34c:	2b01      	cmp	r3, #1
 800a34e:	d101      	bne.n	800a354 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a350:	2302      	movs	r3, #2
 800a352:	e02e      	b.n	800a3b2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2284      	movs	r2, #132	@ 0x84
 800a358:	2101      	movs	r1, #1
 800a35a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2288      	movs	r2, #136	@ 0x88
 800a360:	2124      	movs	r1, #36	@ 0x24
 800a362:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	681a      	ldr	r2, [r3, #0]
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	2101      	movs	r1, #1
 800a378:	438a      	bics	r2, r1
 800a37a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	689b      	ldr	r3, [r3, #8]
 800a382:	00db      	lsls	r3, r3, #3
 800a384:	08d9      	lsrs	r1, r3, #3
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	683a      	ldr	r2, [r7, #0]
 800a38c:	430a      	orrs	r2, r1
 800a38e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	0018      	movs	r0, r3
 800a394:	f000 f8bc 	bl	800a510 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	68fa      	ldr	r2, [r7, #12]
 800a39e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2288      	movs	r2, #136	@ 0x88
 800a3a4:	2120      	movs	r1, #32
 800a3a6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2284      	movs	r2, #132	@ 0x84
 800a3ac:	2100      	movs	r1, #0
 800a3ae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a3b0:	2300      	movs	r3, #0
}
 800a3b2:	0018      	movs	r0, r3
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	b004      	add	sp, #16
 800a3b8:	bd80      	pop	{r7, pc}
	...

0800a3bc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b084      	sub	sp, #16
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
 800a3c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2284      	movs	r2, #132	@ 0x84
 800a3ca:	5c9b      	ldrb	r3, [r3, r2]
 800a3cc:	2b01      	cmp	r3, #1
 800a3ce:	d101      	bne.n	800a3d4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a3d0:	2302      	movs	r3, #2
 800a3d2:	e02f      	b.n	800a434 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2284      	movs	r2, #132	@ 0x84
 800a3d8:	2101      	movs	r1, #1
 800a3da:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2288      	movs	r2, #136	@ 0x88
 800a3e0:	2124      	movs	r1, #36	@ 0x24
 800a3e2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	681a      	ldr	r2, [r3, #0]
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	2101      	movs	r1, #1
 800a3f8:	438a      	bics	r2, r1
 800a3fa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	689b      	ldr	r3, [r3, #8]
 800a402:	4a0e      	ldr	r2, [pc, #56]	@ (800a43c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800a404:	4013      	ands	r3, r2
 800a406:	0019      	movs	r1, r3
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	683a      	ldr	r2, [r7, #0]
 800a40e:	430a      	orrs	r2, r1
 800a410:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	0018      	movs	r0, r3
 800a416:	f000 f87b 	bl	800a510 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	68fa      	ldr	r2, [r7, #12]
 800a420:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2288      	movs	r2, #136	@ 0x88
 800a426:	2120      	movs	r1, #32
 800a428:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2284      	movs	r2, #132	@ 0x84
 800a42e:	2100      	movs	r1, #0
 800a430:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a432:	2300      	movs	r3, #0
}
 800a434:	0018      	movs	r0, r3
 800a436:	46bd      	mov	sp, r7
 800a438:	b004      	add	sp, #16
 800a43a:	bd80      	pop	{r7, pc}
 800a43c:	f1ffffff 	.word	0xf1ffffff

0800a440 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a440:	b5b0      	push	{r4, r5, r7, lr}
 800a442:	b08a      	sub	sp, #40	@ 0x28
 800a444:	af00      	add	r7, sp, #0
 800a446:	60f8      	str	r0, [r7, #12]
 800a448:	60b9      	str	r1, [r7, #8]
 800a44a:	1dbb      	adds	r3, r7, #6
 800a44c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	228c      	movs	r2, #140	@ 0x8c
 800a452:	589b      	ldr	r3, [r3, r2]
 800a454:	2b20      	cmp	r3, #32
 800a456:	d156      	bne.n	800a506 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d003      	beq.n	800a466 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800a45e:	1dbb      	adds	r3, r7, #6
 800a460:	881b      	ldrh	r3, [r3, #0]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d101      	bne.n	800a46a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800a466:	2301      	movs	r3, #1
 800a468:	e04e      	b.n	800a508 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	689a      	ldr	r2, [r3, #8]
 800a46e:	2380      	movs	r3, #128	@ 0x80
 800a470:	015b      	lsls	r3, r3, #5
 800a472:	429a      	cmp	r2, r3
 800a474:	d109      	bne.n	800a48a <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	691b      	ldr	r3, [r3, #16]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d105      	bne.n	800a48a <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	2201      	movs	r2, #1
 800a482:	4013      	ands	r3, r2
 800a484:	d001      	beq.n	800a48a <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 800a486:	2301      	movs	r3, #1
 800a488:	e03e      	b.n	800a508 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	2201      	movs	r2, #1
 800a48e:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	2200      	movs	r2, #0
 800a494:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800a496:	2527      	movs	r5, #39	@ 0x27
 800a498:	197c      	adds	r4, r7, r5
 800a49a:	1dbb      	adds	r3, r7, #6
 800a49c:	881a      	ldrh	r2, [r3, #0]
 800a49e:	68b9      	ldr	r1, [r7, #8]
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	0018      	movs	r0, r3
 800a4a4:	f7ff fb9e 	bl	8009be4 <UART_Start_Receive_DMA>
 800a4a8:	0003      	movs	r3, r0
 800a4aa:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800a4ac:	197b      	adds	r3, r7, r5
 800a4ae:	781b      	ldrb	r3, [r3, #0]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d124      	bne.n	800a4fe <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a4b8:	2b01      	cmp	r3, #1
 800a4ba:	d11c      	bne.n	800a4f6 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	2210      	movs	r2, #16
 800a4c2:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a4c4:	f3ef 8310 	mrs	r3, PRIMASK
 800a4c8:	617b      	str	r3, [r7, #20]
  return(result);
 800a4ca:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4cc:	623b      	str	r3, [r7, #32]
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4d2:	69bb      	ldr	r3, [r7, #24]
 800a4d4:	f383 8810 	msr	PRIMASK, r3
}
 800a4d8:	46c0      	nop			@ (mov r8, r8)
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	681a      	ldr	r2, [r3, #0]
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	2110      	movs	r1, #16
 800a4e6:	430a      	orrs	r2, r1
 800a4e8:	601a      	str	r2, [r3, #0]
 800a4ea:	6a3b      	ldr	r3, [r7, #32]
 800a4ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4ee:	69fb      	ldr	r3, [r7, #28]
 800a4f0:	f383 8810 	msr	PRIMASK, r3
}
 800a4f4:	e003      	b.n	800a4fe <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800a4f6:	2327      	movs	r3, #39	@ 0x27
 800a4f8:	18fb      	adds	r3, r7, r3
 800a4fa:	2201      	movs	r2, #1
 800a4fc:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 800a4fe:	2327      	movs	r3, #39	@ 0x27
 800a500:	18fb      	adds	r3, r7, r3
 800a502:	781b      	ldrb	r3, [r3, #0]
 800a504:	e000      	b.n	800a508 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 800a506:	2302      	movs	r3, #2
  }
}
 800a508:	0018      	movs	r0, r3
 800a50a:	46bd      	mov	sp, r7
 800a50c:	b00a      	add	sp, #40	@ 0x28
 800a50e:	bdb0      	pop	{r4, r5, r7, pc}

0800a510 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a510:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a512:	b085      	sub	sp, #20
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d108      	bne.n	800a532 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	226a      	movs	r2, #106	@ 0x6a
 800a524:	2101      	movs	r1, #1
 800a526:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2268      	movs	r2, #104	@ 0x68
 800a52c:	2101      	movs	r1, #1
 800a52e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a530:	e043      	b.n	800a5ba <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a532:	260f      	movs	r6, #15
 800a534:	19bb      	adds	r3, r7, r6
 800a536:	2208      	movs	r2, #8
 800a538:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a53a:	200e      	movs	r0, #14
 800a53c:	183b      	adds	r3, r7, r0
 800a53e:	2208      	movs	r2, #8
 800a540:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	689b      	ldr	r3, [r3, #8]
 800a548:	0e5b      	lsrs	r3, r3, #25
 800a54a:	b2da      	uxtb	r2, r3
 800a54c:	240d      	movs	r4, #13
 800a54e:	193b      	adds	r3, r7, r4
 800a550:	2107      	movs	r1, #7
 800a552:	400a      	ands	r2, r1
 800a554:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	689b      	ldr	r3, [r3, #8]
 800a55c:	0f5b      	lsrs	r3, r3, #29
 800a55e:	b2da      	uxtb	r2, r3
 800a560:	250c      	movs	r5, #12
 800a562:	197b      	adds	r3, r7, r5
 800a564:	2107      	movs	r1, #7
 800a566:	400a      	ands	r2, r1
 800a568:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a56a:	183b      	adds	r3, r7, r0
 800a56c:	781b      	ldrb	r3, [r3, #0]
 800a56e:	197a      	adds	r2, r7, r5
 800a570:	7812      	ldrb	r2, [r2, #0]
 800a572:	4914      	ldr	r1, [pc, #80]	@ (800a5c4 <UARTEx_SetNbDataToProcess+0xb4>)
 800a574:	5c8a      	ldrb	r2, [r1, r2]
 800a576:	435a      	muls	r2, r3
 800a578:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800a57a:	197b      	adds	r3, r7, r5
 800a57c:	781b      	ldrb	r3, [r3, #0]
 800a57e:	4a12      	ldr	r2, [pc, #72]	@ (800a5c8 <UARTEx_SetNbDataToProcess+0xb8>)
 800a580:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a582:	0019      	movs	r1, r3
 800a584:	f7f5 fe4a 	bl	800021c <__divsi3>
 800a588:	0003      	movs	r3, r0
 800a58a:	b299      	uxth	r1, r3
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	226a      	movs	r2, #106	@ 0x6a
 800a590:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a592:	19bb      	adds	r3, r7, r6
 800a594:	781b      	ldrb	r3, [r3, #0]
 800a596:	193a      	adds	r2, r7, r4
 800a598:	7812      	ldrb	r2, [r2, #0]
 800a59a:	490a      	ldr	r1, [pc, #40]	@ (800a5c4 <UARTEx_SetNbDataToProcess+0xb4>)
 800a59c:	5c8a      	ldrb	r2, [r1, r2]
 800a59e:	435a      	muls	r2, r3
 800a5a0:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800a5a2:	193b      	adds	r3, r7, r4
 800a5a4:	781b      	ldrb	r3, [r3, #0]
 800a5a6:	4a08      	ldr	r2, [pc, #32]	@ (800a5c8 <UARTEx_SetNbDataToProcess+0xb8>)
 800a5a8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a5aa:	0019      	movs	r1, r3
 800a5ac:	f7f5 fe36 	bl	800021c <__divsi3>
 800a5b0:	0003      	movs	r3, r0
 800a5b2:	b299      	uxth	r1, r3
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2268      	movs	r2, #104	@ 0x68
 800a5b8:	5299      	strh	r1, [r3, r2]
}
 800a5ba:	46c0      	nop			@ (mov r8, r8)
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	b005      	add	sp, #20
 800a5c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5c2:	46c0      	nop			@ (mov r8, r8)
 800a5c4:	0800adfc 	.word	0x0800adfc
 800a5c8:	0800ae04 	.word	0x0800ae04

0800a5cc <LL_ADC_REG_GetSequencerConfigurable>:
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b082      	sub	sp, #8
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_CHSELRMOD));
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	68da      	ldr	r2, [r3, #12]
 800a5d8:	2380      	movs	r3, #128	@ 0x80
 800a5da:	039b      	lsls	r3, r3, #14
 800a5dc:	4013      	ands	r3, r2
}
 800a5de:	0018      	movs	r0, r3
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	b002      	add	sp, #8
 800a5e4:	bd80      	pop	{r7, pc}

0800a5e6 <LL_ADC_REG_SetSequencerLength>:
{
 800a5e6:	b580      	push	{r7, lr}
 800a5e8:	b082      	sub	sp, #8
 800a5ea:	af00      	add	r7, sp, #0
 800a5ec:	6078      	str	r0, [r7, #4]
 800a5ee:	6039      	str	r1, [r7, #0]
  SET_BIT(ADCx->CHSELR, SequencerNbRanks);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	431a      	orrs	r2, r3
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800a5fc:	46c0      	nop			@ (mov r8, r8)
 800a5fe:	46bd      	mov	sp, r7
 800a600:	b002      	add	sp, #8
 800a602:	bd80      	pop	{r7, pc}

0800a604 <LL_ADC_IsEnabled>:
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b082      	sub	sp, #8
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	689b      	ldr	r3, [r3, #8]
 800a610:	2201      	movs	r2, #1
 800a612:	4013      	ands	r3, r2
 800a614:	2b01      	cmp	r3, #1
 800a616:	d101      	bne.n	800a61c <LL_ADC_IsEnabled+0x18>
 800a618:	2301      	movs	r3, #1
 800a61a:	e000      	b.n	800a61e <LL_ADC_IsEnabled+0x1a>
 800a61c:	2300      	movs	r3, #0
}
 800a61e:	0018      	movs	r0, r3
 800a620:	46bd      	mov	sp, r7
 800a622:	b002      	add	sp, #8
 800a624:	bd80      	pop	{r7, pc}
	...

0800a628 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b084      	sub	sp, #16
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
 800a630:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800a632:	230f      	movs	r3, #15
 800a634:	18fb      	adds	r3, r7, r3
 800a636:	2200      	movs	r2, #0
 800a638:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	0018      	movs	r0, r3
 800a63e:	f7ff ffe1 	bl	800a604 <LL_ADC_IsEnabled>
 800a642:	1e03      	subs	r3, r0, #0
 800a644:	d118      	bne.n	800a678 <LL_ADC_Init+0x50>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR1,
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	68db      	ldr	r3, [r3, #12]
 800a64a:	4a11      	ldr	r2, [pc, #68]	@ (800a690 <LL_ADC_Init+0x68>)
 800a64c:	401a      	ands	r2, r3
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	6859      	ldr	r1, [r3, #4]
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	689b      	ldr	r3, [r3, #8]
 800a656:	4319      	orrs	r1, r3
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	68db      	ldr	r3, [r3, #12]
 800a65c:	430b      	orrs	r3, r1
 800a65e:	431a      	orrs	r2, r3
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	60da      	str	r2, [r3, #12]
               ADC_InitStruct->Resolution
               | ADC_InitStruct->DataAlignment
               | ADC_InitStruct->LowPowerMode
              );

    MODIFY_REG(ADCx->CFGR2,
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	691b      	ldr	r3, [r3, #16]
 800a668:	009b      	lsls	r3, r3, #2
 800a66a:	089a      	lsrs	r2, r3, #2
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	431a      	orrs	r2, r3
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	611a      	str	r2, [r3, #16]
 800a676:	e003      	b.n	800a680 <LL_ADC_Init+0x58>
              );
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800a678:	230f      	movs	r3, #15
 800a67a:	18fb      	adds	r3, r7, r3
 800a67c:	2201      	movs	r2, #1
 800a67e:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800a680:	230f      	movs	r3, #15
 800a682:	18fb      	adds	r3, r7, r3
 800a684:	781b      	ldrb	r3, [r3, #0]
}
 800a686:	0018      	movs	r0, r3
 800a688:	46bd      	mov	sp, r7
 800a68a:	b004      	add	sp, #16
 800a68c:	bd80      	pop	{r7, pc}
 800a68e:	46c0      	nop			@ (mov r8, r8)
 800a690:	ffff3fc7 	.word	0xffff3fc7

0800a694 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b084      	sub	sp, #16
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
 800a69c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800a69e:	230f      	movs	r3, #15
 800a6a0:	18fb      	adds	r3, r7, r3
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_ADC_REG_TRIG_SOURCE(ADC_REG_InitStruct->TriggerSource));
  assert_param(IS_LL_ADC_REG_CONTINUOUS_MODE(ADC_REG_InitStruct->ContinuousMode));
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));

  if (LL_ADC_REG_GetSequencerConfigurable(ADCx) != LL_ADC_REG_SEQ_FIXED)
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	0018      	movs	r0, r3
 800a6aa:	f7ff ff8f 	bl	800a5cc <LL_ADC_REG_GetSequencerConfigurable>
  {
    assert_param(IS_LL_ADC_REG_SEQ_SCAN_LENGTH(ADC_REG_InitStruct->SequencerLength));
  }

  if ((LL_ADC_REG_GetSequencerConfigurable(ADCx) == LL_ADC_REG_SEQ_FIXED)
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	0018      	movs	r0, r3
 800a6b2:	f7ff ff8b 	bl	800a5cc <LL_ADC_REG_GetSequencerConfigurable>
                 || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  }

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	0018      	movs	r0, r3
 800a6ba:	f7ff ffa3 	bl	800a604 <LL_ADC_IsEnabled>
 800a6be:	1e03      	subs	r3, r0, #0
 800a6c0:	d13f      	bne.n	800a742 <LL_ADC_REG_Init+0xae>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by    */
    /*       setting of trigger source to SW start.                           */
    if ((LL_ADC_REG_GetSequencerConfigurable(ADCx) == LL_ADC_REG_SEQ_FIXED)
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	0018      	movs	r0, r3
 800a6c6:	f7ff ff81 	bl	800a5cc <LL_ADC_REG_GetSequencerConfigurable>
 800a6ca:	1e03      	subs	r3, r0, #0
 800a6cc:	d003      	beq.n	800a6d6 <LL_ADC_REG_Init+0x42>
        || (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	685b      	ldr	r3, [r3, #4]
 800a6d2:	2bf0      	cmp	r3, #240	@ 0xf0
 800a6d4:	d015      	beq.n	800a702 <LL_ADC_REG_Init+0x6e>
       )
    {
      /* Case of sequencer mode fixed
         or sequencer length >= 2 ranks with sequencer mode fully configurable:
         discontinuous mode configured */
      MODIFY_REG(ADCx->CFGR1,
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	68db      	ldr	r3, [r3, #12]
 800a6da:	4a1f      	ldr	r2, [pc, #124]	@ (800a758 <LL_ADC_REG_Init+0xc4>)
 800a6dc:	401a      	ands	r2, r3
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	6819      	ldr	r1, [r3, #0]
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	689b      	ldr	r3, [r3, #8]
 800a6e6:	4319      	orrs	r1, r3
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	68db      	ldr	r3, [r3, #12]
 800a6ec:	4319      	orrs	r1, r3
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	691b      	ldr	r3, [r3, #16]
 800a6f2:	4319      	orrs	r1, r3
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	695b      	ldr	r3, [r3, #20]
 800a6f8:	430b      	orrs	r3, r1
 800a6fa:	431a      	orrs	r2, r3
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	60da      	str	r2, [r3, #12]
 800a700:	e011      	b.n	800a726 <LL_ADC_REG_Init+0x92>
    else
    {
      /* Case of sequencer mode fully configurable
         and sequencer length 1 rank (sequencer disabled):
         discontinuous mode discarded (fixed to disable) */
      MODIFY_REG(ADCx->CFGR1,
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	68db      	ldr	r3, [r3, #12]
 800a706:	4a14      	ldr	r2, [pc, #80]	@ (800a758 <LL_ADC_REG_Init+0xc4>)
 800a708:	401a      	ands	r2, r3
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	6819      	ldr	r1, [r3, #0]
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	68db      	ldr	r3, [r3, #12]
 800a712:	4319      	orrs	r1, r3
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	691b      	ldr	r3, [r3, #16]
 800a718:	4319      	orrs	r1, r3
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	695b      	ldr	r3, [r3, #20]
 800a71e:	430b      	orrs	r3, r1
 800a720:	431a      	orrs	r2, r3
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	60da      	str	r2, [r3, #12]
                 | ADC_REG_InitStruct->Overrun
                );
    }

    /* Set ADC group regular sequencer length */
    if (LL_ADC_REG_GetSequencerConfigurable(ADCx) != LL_ADC_REG_SEQ_FIXED)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	0018      	movs	r0, r3
 800a72a:	f7ff ff4f 	bl	800a5cc <LL_ADC_REG_GetSequencerConfigurable>
 800a72e:	1e03      	subs	r3, r0, #0
 800a730:	d00b      	beq.n	800a74a <LL_ADC_REG_Init+0xb6>
    {
      LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	685a      	ldr	r2, [r3, #4]
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	0011      	movs	r1, r2
 800a73a:	0018      	movs	r0, r3
 800a73c:	f7ff ff53 	bl	800a5e6 <LL_ADC_REG_SetSequencerLength>
 800a740:	e003      	b.n	800a74a <LL_ADC_REG_Init+0xb6>
    }
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800a742:	230f      	movs	r3, #15
 800a744:	18fb      	adds	r3, r7, r3
 800a746:	2201      	movs	r2, #1
 800a748:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800a74a:	230f      	movs	r3, #15
 800a74c:	18fb      	adds	r3, r7, r3
 800a74e:	781b      	ldrb	r3, [r3, #0]
}
 800a750:	0018      	movs	r0, r3
 800a752:	46bd      	mov	sp, r7
 800a754:	b004      	add	sp, #16
 800a756:	bd80      	pop	{r7, pc}
 800a758:	fffec23c 	.word	0xfffec23c

0800a75c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b084      	sub	sp, #16
 800a760:	af00      	add	r7, sp, #0
 800a762:	60f8      	str	r0, [r7, #12]
 800a764:	60b9      	str	r1, [r7, #8]
 800a766:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	6819      	ldr	r1, [r3, #0]
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	435b      	muls	r3, r3
 800a770:	001a      	movs	r2, r3
 800a772:	0013      	movs	r3, r2
 800a774:	005b      	lsls	r3, r3, #1
 800a776:	189b      	adds	r3, r3, r2
 800a778:	43db      	mvns	r3, r3
 800a77a:	400b      	ands	r3, r1
 800a77c:	001a      	movs	r2, r3
 800a77e:	68bb      	ldr	r3, [r7, #8]
 800a780:	435b      	muls	r3, r3
 800a782:	6879      	ldr	r1, [r7, #4]
 800a784:	434b      	muls	r3, r1
 800a786:	431a      	orrs	r2, r3
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	601a      	str	r2, [r3, #0]
}
 800a78c:	46c0      	nop			@ (mov r8, r8)
 800a78e:	46bd      	mov	sp, r7
 800a790:	b004      	add	sp, #16
 800a792:	bd80      	pop	{r7, pc}

0800a794 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b084      	sub	sp, #16
 800a798:	af00      	add	r7, sp, #0
 800a79a:	60f8      	str	r0, [r7, #12]
 800a79c:	60b9      	str	r1, [r7, #8]
 800a79e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	685b      	ldr	r3, [r3, #4]
 800a7a4:	68ba      	ldr	r2, [r7, #8]
 800a7a6:	43d2      	mvns	r2, r2
 800a7a8:	401a      	ands	r2, r3
 800a7aa:	68bb      	ldr	r3, [r7, #8]
 800a7ac:	6879      	ldr	r1, [r7, #4]
 800a7ae:	434b      	muls	r3, r1
 800a7b0:	431a      	orrs	r2, r3
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	605a      	str	r2, [r3, #4]
}
 800a7b6:	46c0      	nop			@ (mov r8, r8)
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	b004      	add	sp, #16
 800a7bc:	bd80      	pop	{r7, pc}

0800a7be <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800a7be:	b580      	push	{r7, lr}
 800a7c0:	b084      	sub	sp, #16
 800a7c2:	af00      	add	r7, sp, #0
 800a7c4:	60f8      	str	r0, [r7, #12]
 800a7c6:	60b9      	str	r1, [r7, #8]
 800a7c8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	6899      	ldr	r1, [r3, #8]
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	435b      	muls	r3, r3
 800a7d2:	001a      	movs	r2, r3
 800a7d4:	0013      	movs	r3, r2
 800a7d6:	005b      	lsls	r3, r3, #1
 800a7d8:	189b      	adds	r3, r3, r2
 800a7da:	43db      	mvns	r3, r3
 800a7dc:	400b      	ands	r3, r1
 800a7de:	001a      	movs	r2, r3
 800a7e0:	68bb      	ldr	r3, [r7, #8]
 800a7e2:	435b      	muls	r3, r3
 800a7e4:	6879      	ldr	r1, [r7, #4]
 800a7e6:	434b      	muls	r3, r1
 800a7e8:	431a      	orrs	r2, r3
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	609a      	str	r2, [r3, #8]
}
 800a7ee:	46c0      	nop			@ (mov r8, r8)
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	b004      	add	sp, #16
 800a7f4:	bd80      	pop	{r7, pc}

0800a7f6 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800a7f6:	b580      	push	{r7, lr}
 800a7f8:	b084      	sub	sp, #16
 800a7fa:	af00      	add	r7, sp, #0
 800a7fc:	60f8      	str	r0, [r7, #12]
 800a7fe:	60b9      	str	r1, [r7, #8]
 800a800:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	68d9      	ldr	r1, [r3, #12]
 800a806:	68bb      	ldr	r3, [r7, #8]
 800a808:	435b      	muls	r3, r3
 800a80a:	001a      	movs	r2, r3
 800a80c:	0013      	movs	r3, r2
 800a80e:	005b      	lsls	r3, r3, #1
 800a810:	189b      	adds	r3, r3, r2
 800a812:	43db      	mvns	r3, r3
 800a814:	400b      	ands	r3, r1
 800a816:	001a      	movs	r2, r3
 800a818:	68bb      	ldr	r3, [r7, #8]
 800a81a:	435b      	muls	r3, r3
 800a81c:	6879      	ldr	r1, [r7, #4]
 800a81e:	434b      	muls	r3, r1
 800a820:	431a      	orrs	r2, r3
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	60da      	str	r2, [r3, #12]
}
 800a826:	46c0      	nop			@ (mov r8, r8)
 800a828:	46bd      	mov	sp, r7
 800a82a:	b004      	add	sp, #16
 800a82c:	bd80      	pop	{r7, pc}

0800a82e <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800a82e:	b580      	push	{r7, lr}
 800a830:	b084      	sub	sp, #16
 800a832:	af00      	add	r7, sp, #0
 800a834:	60f8      	str	r0, [r7, #12]
 800a836:	60b9      	str	r1, [r7, #8]
 800a838:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	6a19      	ldr	r1, [r3, #32]
 800a83e:	68bb      	ldr	r3, [r7, #8]
 800a840:	435b      	muls	r3, r3
 800a842:	68ba      	ldr	r2, [r7, #8]
 800a844:	4353      	muls	r3, r2
 800a846:	68ba      	ldr	r2, [r7, #8]
 800a848:	435a      	muls	r2, r3
 800a84a:	0013      	movs	r3, r2
 800a84c:	011b      	lsls	r3, r3, #4
 800a84e:	1a9b      	subs	r3, r3, r2
 800a850:	43db      	mvns	r3, r3
 800a852:	400b      	ands	r3, r1
 800a854:	001a      	movs	r2, r3
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	435b      	muls	r3, r3
 800a85a:	68b9      	ldr	r1, [r7, #8]
 800a85c:	434b      	muls	r3, r1
 800a85e:	68b9      	ldr	r1, [r7, #8]
 800a860:	434b      	muls	r3, r1
 800a862:	6879      	ldr	r1, [r7, #4]
 800a864:	434b      	muls	r3, r1
 800a866:	431a      	orrs	r2, r3
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	621a      	str	r2, [r3, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 800a86c:	46c0      	nop			@ (mov r8, r8)
 800a86e:	46bd      	mov	sp, r7
 800a870:	b004      	add	sp, #16
 800a872:	bd80      	pop	{r7, pc}

0800a874 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b084      	sub	sp, #16
 800a878:	af00      	add	r7, sp, #0
 800a87a:	60f8      	str	r0, [r7, #12]
 800a87c:	60b9      	str	r1, [r7, #8]
 800a87e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800a884:	68bb      	ldr	r3, [r7, #8]
 800a886:	0a1b      	lsrs	r3, r3, #8
 800a888:	68ba      	ldr	r2, [r7, #8]
 800a88a:	0a12      	lsrs	r2, r2, #8
 800a88c:	4353      	muls	r3, r2
 800a88e:	68ba      	ldr	r2, [r7, #8]
 800a890:	0a12      	lsrs	r2, r2, #8
 800a892:	4353      	muls	r3, r2
 800a894:	68ba      	ldr	r2, [r7, #8]
 800a896:	0a12      	lsrs	r2, r2, #8
 800a898:	435a      	muls	r2, r3
 800a89a:	0013      	movs	r3, r2
 800a89c:	011b      	lsls	r3, r3, #4
 800a89e:	1a9b      	subs	r3, r3, r2
 800a8a0:	43db      	mvns	r3, r3
 800a8a2:	400b      	ands	r3, r1
 800a8a4:	001a      	movs	r2, r3
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	0a1b      	lsrs	r3, r3, #8
 800a8aa:	68b9      	ldr	r1, [r7, #8]
 800a8ac:	0a09      	lsrs	r1, r1, #8
 800a8ae:	434b      	muls	r3, r1
 800a8b0:	68b9      	ldr	r1, [r7, #8]
 800a8b2:	0a09      	lsrs	r1, r1, #8
 800a8b4:	434b      	muls	r3, r1
 800a8b6:	68b9      	ldr	r1, [r7, #8]
 800a8b8:	0a09      	lsrs	r1, r1, #8
 800a8ba:	434b      	muls	r3, r1
 800a8bc:	6879      	ldr	r1, [r7, #4]
 800a8be:	434b      	muls	r3, r1
 800a8c0:	431a      	orrs	r2, r3
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	625a      	str	r2, [r3, #36]	@ 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 800a8c6:	46c0      	nop			@ (mov r8, r8)
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	b004      	add	sp, #16
 800a8cc:	bd80      	pop	{r7, pc}

0800a8ce <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800a8ce:	b580      	push	{r7, lr}
 800a8d0:	b084      	sub	sp, #16
 800a8d2:	af00      	add	r7, sp, #0
 800a8d4:	6078      	str	r0, [r7, #4]
 800a8d6:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 800a8d8:	2300      	movs	r3, #0
 800a8da:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800a8dc:	e047      	b.n	800a96e <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	2101      	movs	r1, #1
 800a8e4:	68fa      	ldr	r2, [r7, #12]
 800a8e6:	4091      	lsls	r1, r2
 800a8e8:	000a      	movs	r2, r1
 800a8ea:	4013      	ands	r3, r2
 800a8ec:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 800a8ee:	68bb      	ldr	r3, [r7, #8]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d039      	beq.n	800a968 <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	685b      	ldr	r3, [r3, #4]
 800a8f8:	2b01      	cmp	r3, #1
 800a8fa:	d003      	beq.n	800a904 <LL_GPIO_Init+0x36>
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	685b      	ldr	r3, [r3, #4]
 800a900:	2b02      	cmp	r3, #2
 800a902:	d10d      	bne.n	800a920 <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	689a      	ldr	r2, [r3, #8]
 800a908:	68b9      	ldr	r1, [r7, #8]
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	0018      	movs	r0, r3
 800a90e:	f7ff ff56 	bl	800a7be <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	68da      	ldr	r2, [r3, #12]
 800a916:	68b9      	ldr	r1, [r7, #8]
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	0018      	movs	r0, r3
 800a91c:	f7ff ff3a 	bl	800a794 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	691a      	ldr	r2, [r3, #16]
 800a924:	68b9      	ldr	r1, [r7, #8]
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	0018      	movs	r0, r3
 800a92a:	f7ff ff64 	bl	800a7f6 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	685b      	ldr	r3, [r3, #4]
 800a932:	2b02      	cmp	r3, #2
 800a934:	d111      	bne.n	800a95a <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800a936:	68bb      	ldr	r3, [r7, #8]
 800a938:	2bff      	cmp	r3, #255	@ 0xff
 800a93a:	d807      	bhi.n	800a94c <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	695a      	ldr	r2, [r3, #20]
 800a940:	68b9      	ldr	r1, [r7, #8]
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	0018      	movs	r0, r3
 800a946:	f7ff ff72 	bl	800a82e <LL_GPIO_SetAFPin_0_7>
 800a94a:	e006      	b.n	800a95a <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	695a      	ldr	r2, [r3, #20]
 800a950:	68b9      	ldr	r1, [r7, #8]
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	0018      	movs	r0, r3
 800a956:	f7ff ff8d 	bl	800a874 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	685a      	ldr	r2, [r3, #4]
 800a95e:	68b9      	ldr	r1, [r7, #8]
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	0018      	movs	r0, r3
 800a964:	f7ff fefa 	bl	800a75c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	3301      	adds	r3, #1
 800a96c:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	681a      	ldr	r2, [r3, #0]
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	40da      	lsrs	r2, r3
 800a976:	1e13      	subs	r3, r2, #0
 800a978:	d1b1      	bne.n	800a8de <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 800a97a:	2300      	movs	r3, #0
}
 800a97c:	0018      	movs	r0, r3
 800a97e:	46bd      	mov	sp, r7
 800a980:	b004      	add	sp, #16
 800a982:	bd80      	pop	{r7, pc}

0800a984 <memset>:
 800a984:	0003      	movs	r3, r0
 800a986:	1882      	adds	r2, r0, r2
 800a988:	4293      	cmp	r3, r2
 800a98a:	d100      	bne.n	800a98e <memset+0xa>
 800a98c:	4770      	bx	lr
 800a98e:	7019      	strb	r1, [r3, #0]
 800a990:	3301      	adds	r3, #1
 800a992:	e7f9      	b.n	800a988 <memset+0x4>

0800a994 <__libc_init_array>:
 800a994:	b570      	push	{r4, r5, r6, lr}
 800a996:	2600      	movs	r6, #0
 800a998:	4c0c      	ldr	r4, [pc, #48]	@ (800a9cc <__libc_init_array+0x38>)
 800a99a:	4d0d      	ldr	r5, [pc, #52]	@ (800a9d0 <__libc_init_array+0x3c>)
 800a99c:	1b64      	subs	r4, r4, r5
 800a99e:	10a4      	asrs	r4, r4, #2
 800a9a0:	42a6      	cmp	r6, r4
 800a9a2:	d109      	bne.n	800a9b8 <__libc_init_array+0x24>
 800a9a4:	2600      	movs	r6, #0
 800a9a6:	f000 f819 	bl	800a9dc <_init>
 800a9aa:	4c0a      	ldr	r4, [pc, #40]	@ (800a9d4 <__libc_init_array+0x40>)
 800a9ac:	4d0a      	ldr	r5, [pc, #40]	@ (800a9d8 <__libc_init_array+0x44>)
 800a9ae:	1b64      	subs	r4, r4, r5
 800a9b0:	10a4      	asrs	r4, r4, #2
 800a9b2:	42a6      	cmp	r6, r4
 800a9b4:	d105      	bne.n	800a9c2 <__libc_init_array+0x2e>
 800a9b6:	bd70      	pop	{r4, r5, r6, pc}
 800a9b8:	00b3      	lsls	r3, r6, #2
 800a9ba:	58eb      	ldr	r3, [r5, r3]
 800a9bc:	4798      	blx	r3
 800a9be:	3601      	adds	r6, #1
 800a9c0:	e7ee      	b.n	800a9a0 <__libc_init_array+0xc>
 800a9c2:	00b3      	lsls	r3, r6, #2
 800a9c4:	58eb      	ldr	r3, [r5, r3]
 800a9c6:	4798      	blx	r3
 800a9c8:	3601      	adds	r6, #1
 800a9ca:	e7f2      	b.n	800a9b2 <__libc_init_array+0x1e>
 800a9cc:	0800ae0c 	.word	0x0800ae0c
 800a9d0:	0800ae0c 	.word	0x0800ae0c
 800a9d4:	0800ae10 	.word	0x0800ae10
 800a9d8:	0800ae0c 	.word	0x0800ae0c

0800a9dc <_init>:
 800a9dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9de:	46c0      	nop			@ (mov r8, r8)
 800a9e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9e2:	bc08      	pop	{r3}
 800a9e4:	469e      	mov	lr, r3
 800a9e6:	4770      	bx	lr

0800a9e8 <_fini>:
 800a9e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9ea:	46c0      	nop			@ (mov r8, r8)
 800a9ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9ee:	bc08      	pop	{r3}
 800a9f0:	469e      	mov	lr, r3
 800a9f2:	4770      	bx	lr
