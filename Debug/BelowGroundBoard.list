
BelowGroundBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091b4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  08009274  08009274  0000a274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009684  08009684  0000b0a8  2**0
                  CONTENTS
  4 .ARM          00000000  08009684  08009684  0000b0a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009684  08009684  0000b0a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009684  08009684  0000a684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009688  08009688  0000a688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a8  20000000  0800968c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006dc  200000a8  08009734  0000b0a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000784  08009734  0000b784  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000b0a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ba3f  00000000  00000000  0000b0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038ab  00000000  00000000  00026b0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001880  00000000  00000000  0002a3c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000134d  00000000  00000000  0002bc40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019fe9  00000000  00000000  0002cf8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d366  00000000  00000000  00046f76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f5a0  00000000  00000000  000642dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010387c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005aa4  00000000  00000000  001038c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  00109364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000a8 	.word	0x200000a8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800925c 	.word	0x0800925c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000ac 	.word	0x200000ac
 8000104:	0800925c 	.word	0x0800925c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <HAL_I2C_ErrorCallback>:
{
	i2c_rx_int = 1;
}

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
	// Do something
	i2c_err_int = 1;
 80003fc:	4b07      	ldr	r3, [pc, #28]	@ (800041c <HAL_I2C_ErrorCallback+0x28>)
 80003fe:	2201      	movs	r2, #1
 8000400:	701a      	strb	r2, [r3, #0]
	__HAL_I2C_DISABLE_IT(&hi2c1, I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI |
 8000402:	4b07      	ldr	r3, [pc, #28]	@ (8000420 <HAL_I2C_ErrorCallback+0x2c>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	681a      	ldr	r2, [r3, #0]
 8000408:	4b05      	ldr	r3, [pc, #20]	@ (8000420 <HAL_I2C_ErrorCallback+0x2c>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	21fe      	movs	r1, #254	@ 0xfe
 800040e:	438a      	bics	r2, r1
 8000410:	601a      	str	r2, [r3, #0]
										 I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI);
}
 8000412:	46c0      	nop			@ (mov r8, r8)
 8000414:	46bd      	mov	sp, r7
 8000416:	b002      	add	sp, #8
 8000418:	bd80      	pop	{r7, pc}
 800041a:	46c0      	nop			@ (mov r8, r8)
 800041c:	200000c4 	.word	0x200000c4
 8000420:	200000d0 	.word	0x200000d0

08000424 <DRV_Init>:

    return command_sat;
}

int8_t DRV_Init(uint8_t device_id)
{
 8000424:	b5b0      	push	{r4, r5, r7, lr}
 8000426:	b084      	sub	sp, #16
 8000428:	af00      	add	r7, sp, #0
 800042a:	0002      	movs	r2, r0
 800042c:	1dfb      	adds	r3, r7, #7
 800042e:	701a      	strb	r2, [r3, #0]
	int8_t status = HAL_OK;
 8000430:	240f      	movs	r4, #15
 8000432:	193b      	adds	r3, r7, r4
 8000434:	2200      	movs	r2, #0
 8000436:	701a      	strb	r2, [r3, #0]

	// Initialize the PWM signal
	TIM1->CCR1 = 0;
 8000438:	4b46      	ldr	r3, [pc, #280]	@ (8000554 <DRV_Init+0x130>)
 800043a:	2200      	movs	r2, #0
 800043c:	635a      	str	r2, [r3, #52]	@ 0x34
	status = HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800043e:	4b46      	ldr	r3, [pc, #280]	@ (8000558 <DRV_Init+0x134>)
 8000440:	2100      	movs	r1, #0
 8000442:	0018      	movs	r0, r3
 8000444:	f006 f956 	bl	80066f4 <HAL_TIM_PWM_Start>
 8000448:	0003      	movs	r3, r0
 800044a:	001a      	movs	r2, r3
 800044c:	193b      	adds	r3, r7, r4
 800044e:	701a      	strb	r2, [r3, #0]
	if(status != HAL_OK){return status;}
 8000450:	193b      	adds	r3, r7, r4
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	b25b      	sxtb	r3, r3
 8000456:	2b00      	cmp	r3, #0
 8000458:	d003      	beq.n	8000462 <DRV_Init+0x3e>
 800045a:	193b      	adds	r3, r7, r4
 800045c:	781b      	ldrb	r3, [r3, #0]
 800045e:	b25b      	sxtb	r3, r3
 8000460:	e074      	b.n	800054c <DRV_Init+0x128>

	// Test communication by reading the Device ID
	uint8_t dev_id = 0;
 8000462:	210e      	movs	r1, #14
 8000464:	187b      	adds	r3, r7, r1
 8000466:	2200      	movs	r2, #0
 8000468:	701a      	strb	r2, [r3, #0]
	status = DRV_GetDeviceId(&dev_id);
 800046a:	250f      	movs	r5, #15
 800046c:	197c      	adds	r4, r7, r5
 800046e:	187b      	adds	r3, r7, r1
 8000470:	0018      	movs	r0, r3
 8000472:	f000 f873 	bl	800055c <DRV_GetDeviceId>
 8000476:	0003      	movs	r3, r0
 8000478:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800047a:	197b      	adds	r3, r7, r5
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	b25b      	sxtb	r3, r3
 8000480:	2b00      	cmp	r3, #0
 8000482:	d003      	beq.n	800048c <DRV_Init+0x68>
 8000484:	197b      	adds	r3, r7, r5
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	b25b      	sxtb	r3, r3
 800048a:	e05f      	b.n	800054c <DRV_Init+0x128>

	if(dev_id == device_id)
 800048c:	230e      	movs	r3, #14
 800048e:	18fb      	adds	r3, r7, r3
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	1dfa      	adds	r2, r7, #7
 8000494:	7812      	ldrb	r2, [r2, #0]
 8000496:	429a      	cmp	r2, r3
 8000498:	d157      	bne.n	800054a <DRV_Init+0x126>
	{
		// Unlock the Config Registers, clear the fault register. Refer to section 8.6.1.5
		drv_command_t command;
		command.clr_flt = 1;
 800049a:	200c      	movs	r0, #12
 800049c:	183b      	adds	r3, r7, r0
 800049e:	781a      	ldrb	r2, [r3, #0]
 80004a0:	2180      	movs	r1, #128	@ 0x80
 80004a2:	4249      	negs	r1, r1
 80004a4:	430a      	orrs	r2, r1
 80004a6:	701a      	strb	r2, [r3, #0]
		command.reg_lock = REG_UNLOCK;
 80004a8:	183b      	adds	r3, r7, r0
 80004aa:	781a      	ldrb	r2, [r3, #0]
 80004ac:	2103      	movs	r1, #3
 80004ae:	438a      	bics	r2, r1
 80004b0:	1c11      	adds	r1, r2, #0
 80004b2:	2201      	movs	r2, #1
 80004b4:	430a      	orrs	r2, r1
 80004b6:	701a      	strb	r2, [r3, #0]
		status = DRV_SetCommand(&command);
 80004b8:	250f      	movs	r5, #15
 80004ba:	197c      	adds	r4, r7, r5
 80004bc:	183b      	adds	r3, r7, r0
 80004be:	0018      	movs	r0, r3
 80004c0:	f000 f974 	bl	80007ac <DRV_SetCommand>
 80004c4:	0003      	movs	r3, r0
 80004c6:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK){return status;}
 80004c8:	197b      	adds	r3, r7, r5
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	b25b      	sxtb	r3, r3
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d003      	beq.n	80004da <DRV_Init+0xb6>
 80004d2:	197b      	adds	r3, r7, r5
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	b25b      	sxtb	r3, r3
 80004d8:	e038      	b.n	800054c <DRV_Init+0x128>

		// Configure independent mode
		drv_config_3_t config_3;
		config_3.s_mode = S_MODE_INDEPENDENT;
 80004da:	2008      	movs	r0, #8
 80004dc:	183b      	adds	r3, r7, r0
 80004de:	781a      	ldrb	r2, [r3, #0]
 80004e0:	2103      	movs	r1, #3
 80004e2:	438a      	bics	r2, r1
 80004e4:	1c11      	adds	r1, r2, #0
 80004e6:	2201      	movs	r2, #1
 80004e8:	430a      	orrs	r2, r1
 80004ea:	701a      	strb	r2, [r3, #0]
		config_3.toff = TOFF_40US;
 80004ec:	183b      	adds	r3, r7, r0
 80004ee:	781a      	ldrb	r2, [r3, #0]
 80004f0:	213f      	movs	r1, #63	@ 0x3f
 80004f2:	400a      	ands	r2, r1
 80004f4:	1c11      	adds	r1, r2, #0
 80004f6:	2280      	movs	r2, #128	@ 0x80
 80004f8:	4252      	negs	r2, r2
 80004fa:	430a      	orrs	r2, r1
 80004fc:	701a      	strb	r2, [r3, #0]
		status = DRV_SetConfig3(&config_3);
 80004fe:	250f      	movs	r5, #15
 8000500:	197c      	adds	r4, r7, r5
 8000502:	183b      	adds	r3, r7, r0
 8000504:	0018      	movs	r0, r3
 8000506:	f000 f9fd 	bl	8000904 <DRV_SetConfig3>
 800050a:	0003      	movs	r3, r0
 800050c:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK){return status;}
 800050e:	197b      	adds	r3, r7, r5
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	b25b      	sxtb	r3, r3
 8000514:	2b00      	cmp	r3, #0
 8000516:	d003      	beq.n	8000520 <DRV_Init+0xfc>
 8000518:	197b      	adds	r3, r7, r5
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	b25b      	sxtb	r3, r3
 800051e:	e015      	b.n	800054c <DRV_Init+0x128>

		// Lock the Config Registers. Refer to section 8.6.1.5
		command.reg_lock = REG_LOCK;
 8000520:	200c      	movs	r0, #12
 8000522:	183b      	adds	r3, r7, r0
 8000524:	781a      	ldrb	r2, [r3, #0]
 8000526:	2103      	movs	r1, #3
 8000528:	438a      	bics	r2, r1
 800052a:	1c11      	adds	r1, r2, #0
 800052c:	2202      	movs	r2, #2
 800052e:	430a      	orrs	r2, r1
 8000530:	701a      	strb	r2, [r3, #0]
		status = DRV_SetCommand(&command);
 8000532:	250f      	movs	r5, #15
 8000534:	197c      	adds	r4, r7, r5
 8000536:	183b      	adds	r3, r7, r0
 8000538:	0018      	movs	r0, r3
 800053a:	f000 f937 	bl	80007ac <DRV_SetCommand>
 800053e:	0003      	movs	r3, r0
 8000540:	7023      	strb	r3, [r4, #0]
	}
	else
	{
		return HAL_ERROR;
	}
	return status;
 8000542:	197b      	adds	r3, r7, r5
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	b25b      	sxtb	r3, r3
 8000548:	e000      	b.n	800054c <DRV_Init+0x128>
		return HAL_ERROR;
 800054a:	2301      	movs	r3, #1
}
 800054c:	0018      	movs	r0, r3
 800054e:	46bd      	mov	sp, r7
 8000550:	b004      	add	sp, #16
 8000552:	bdb0      	pop	{r4, r5, r7, pc}
 8000554:	40012c00 	.word	0x40012c00
 8000558:	20000240 	.word	0x20000240

0800055c <DRV_GetDeviceId>:

int8_t DRV_GetDeviceId(uint8_t* device_id)
{
 800055c:	b590      	push	{r4, r7, lr}
 800055e:	b087      	sub	sp, #28
 8000560:	af02      	add	r7, sp, #8
 8000562:	6078      	str	r0, [r7, #4]
	int8_t status = HAL_OK;
 8000564:	240f      	movs	r4, #15
 8000566:	193b      	adds	r3, r7, r4
 8000568:	2200      	movs	r2, #0
 800056a:	701a      	strb	r2, [r3, #0]
	tx_data[0] = (DEVICE_ID | READ_MASK);
 800056c:	4b1c      	ldr	r3, [pc, #112]	@ (80005e0 <DRV_GetDeviceId+0x84>)
 800056e:	2240      	movs	r2, #64	@ 0x40
 8000570:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0;
 8000572:	4b1b      	ldr	r3, [pc, #108]	@ (80005e0 <DRV_GetDeviceId+0x84>)
 8000574:	2200      	movs	r2, #0
 8000576:	705a      	strb	r2, [r3, #1]
	rx_data[0] = 0;
 8000578:	4b1a      	ldr	r3, [pc, #104]	@ (80005e4 <DRV_GetDeviceId+0x88>)
 800057a:	2200      	movs	r2, #0
 800057c:	701a      	strb	r2, [r3, #0]
	rx_data[0] = 0;
 800057e:	4b19      	ldr	r3, [pc, #100]	@ (80005e4 <DRV_GetDeviceId+0x88>)
 8000580:	2200      	movs	r2, #0
 8000582:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_RESET);
 8000584:	4b18      	ldr	r3, [pc, #96]	@ (80005e8 <DRV_GetDeviceId+0x8c>)
 8000586:	2200      	movs	r2, #0
 8000588:	2101      	movs	r1, #1
 800058a:	0018      	movs	r0, r3
 800058c:	f003 ff16 	bl	80043bc <HAL_GPIO_WritePin>
	status = HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 100);
 8000590:	4a14      	ldr	r2, [pc, #80]	@ (80005e4 <DRV_GetDeviceId+0x88>)
 8000592:	4913      	ldr	r1, [pc, #76]	@ (80005e0 <DRV_GetDeviceId+0x84>)
 8000594:	4815      	ldr	r0, [pc, #84]	@ (80005ec <DRV_GetDeviceId+0x90>)
 8000596:	2364      	movs	r3, #100	@ 0x64
 8000598:	9300      	str	r3, [sp, #0]
 800059a:	2302      	movs	r3, #2
 800059c:	f005 fc46 	bl	8005e2c <HAL_SPI_TransmitReceive>
 80005a0:	0003      	movs	r3, r0
 80005a2:	001a      	movs	r2, r3
 80005a4:	193b      	adds	r3, r7, r4
 80005a6:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_SET);
 80005a8:	4b0f      	ldr	r3, [pc, #60]	@ (80005e8 <DRV_GetDeviceId+0x8c>)
 80005aa:	2201      	movs	r2, #1
 80005ac:	2101      	movs	r1, #1
 80005ae:	0018      	movs	r0, r3
 80005b0:	f003 ff04 	bl	80043bc <HAL_GPIO_WritePin>
	if(status != HAL_OK){return status;}
 80005b4:	193b      	adds	r3, r7, r4
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	b25b      	sxtb	r3, r3
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d003      	beq.n	80005c6 <DRV_GetDeviceId+0x6a>
 80005be:	193b      	adds	r3, r7, r4
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	b25b      	sxtb	r3, r3
 80005c4:	e007      	b.n	80005d6 <DRV_GetDeviceId+0x7a>

	(*device_id) = rx_data[1];
 80005c6:	4b07      	ldr	r3, [pc, #28]	@ (80005e4 <DRV_GetDeviceId+0x88>)
 80005c8:	785a      	ldrb	r2, [r3, #1]
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	701a      	strb	r2, [r3, #0]
	return status;
 80005ce:	230f      	movs	r3, #15
 80005d0:	18fb      	adds	r3, r7, r3
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	b25b      	sxtb	r3, r3
}
 80005d6:	0018      	movs	r0, r3
 80005d8:	46bd      	mov	sp, r7
 80005da:	b005      	add	sp, #20
 80005dc:	bd90      	pop	{r4, r7, pc}
 80005de:	46c0      	nop			@ (mov r8, r8)
 80005e0:	200000c8 	.word	0x200000c8
 80005e4:	200000cc 	.word	0x200000cc
 80005e8:	50000c00 	.word	0x50000c00
 80005ec:	200001dc 	.word	0x200001dc

080005f0 <DRV_GetFaultSummary>:

int8_t DRV_GetFaultSummary(drv_fault_summary_t* fault_summary)
{
 80005f0:	b590      	push	{r4, r7, lr}
 80005f2:	b087      	sub	sp, #28
 80005f4:	af02      	add	r7, sp, #8
 80005f6:	6078      	str	r0, [r7, #4]
	int8_t status = HAL_OK;
 80005f8:	240f      	movs	r4, #15
 80005fa:	193b      	adds	r3, r7, r4
 80005fc:	2200      	movs	r2, #0
 80005fe:	701a      	strb	r2, [r3, #0]
	tx_data[0] = (FAULT_SUMMARY | READ_MASK);
 8000600:	4b1c      	ldr	r3, [pc, #112]	@ (8000674 <DRV_GetFaultSummary+0x84>)
 8000602:	2241      	movs	r2, #65	@ 0x41
 8000604:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0;
 8000606:	4b1b      	ldr	r3, [pc, #108]	@ (8000674 <DRV_GetFaultSummary+0x84>)
 8000608:	2200      	movs	r2, #0
 800060a:	705a      	strb	r2, [r3, #1]
	rx_data[0] = 0;
 800060c:	4b1a      	ldr	r3, [pc, #104]	@ (8000678 <DRV_GetFaultSummary+0x88>)
 800060e:	2200      	movs	r2, #0
 8000610:	701a      	strb	r2, [r3, #0]
	rx_data[1] = 0;
 8000612:	4b19      	ldr	r3, [pc, #100]	@ (8000678 <DRV_GetFaultSummary+0x88>)
 8000614:	2200      	movs	r2, #0
 8000616:	705a      	strb	r2, [r3, #1]

	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_RESET);
 8000618:	4b18      	ldr	r3, [pc, #96]	@ (800067c <DRV_GetFaultSummary+0x8c>)
 800061a:	2200      	movs	r2, #0
 800061c:	2101      	movs	r1, #1
 800061e:	0018      	movs	r0, r3
 8000620:	f003 fecc 	bl	80043bc <HAL_GPIO_WritePin>
	status = HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 100);
 8000624:	4a14      	ldr	r2, [pc, #80]	@ (8000678 <DRV_GetFaultSummary+0x88>)
 8000626:	4913      	ldr	r1, [pc, #76]	@ (8000674 <DRV_GetFaultSummary+0x84>)
 8000628:	4815      	ldr	r0, [pc, #84]	@ (8000680 <DRV_GetFaultSummary+0x90>)
 800062a:	2364      	movs	r3, #100	@ 0x64
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	2302      	movs	r3, #2
 8000630:	f005 fbfc 	bl	8005e2c <HAL_SPI_TransmitReceive>
 8000634:	0003      	movs	r3, r0
 8000636:	001a      	movs	r2, r3
 8000638:	193b      	adds	r3, r7, r4
 800063a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_SET);
 800063c:	4b0f      	ldr	r3, [pc, #60]	@ (800067c <DRV_GetFaultSummary+0x8c>)
 800063e:	2201      	movs	r2, #1
 8000640:	2101      	movs	r1, #1
 8000642:	0018      	movs	r0, r3
 8000644:	f003 feba 	bl	80043bc <HAL_GPIO_WritePin>
	if(status != HAL_OK){return status;}
 8000648:	193b      	adds	r3, r7, r4
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	b25b      	sxtb	r3, r3
 800064e:	2b00      	cmp	r3, #0
 8000650:	d003      	beq.n	800065a <DRV_GetFaultSummary+0x6a>
 8000652:	193b      	adds	r3, r7, r4
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	b25b      	sxtb	r3, r3
 8000658:	e007      	b.n	800066a <DRV_GetFaultSummary+0x7a>

	fault_summary->raw_data = rx_data[1];
 800065a:	4b07      	ldr	r3, [pc, #28]	@ (8000678 <DRV_GetFaultSummary+0x88>)
 800065c:	785a      	ldrb	r2, [r3, #1]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	701a      	strb	r2, [r3, #0]
	return status;
 8000662:	230f      	movs	r3, #15
 8000664:	18fb      	adds	r3, r7, r3
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	b25b      	sxtb	r3, r3
}
 800066a:	0018      	movs	r0, r3
 800066c:	46bd      	mov	sp, r7
 800066e:	b005      	add	sp, #20
 8000670:	bd90      	pop	{r4, r7, pc}
 8000672:	46c0      	nop			@ (mov r8, r8)
 8000674:	200000c8 	.word	0x200000c8
 8000678:	200000cc 	.word	0x200000cc
 800067c:	50000c00 	.word	0x50000c00
 8000680:	200001dc 	.word	0x200001dc

08000684 <DRV_GetStatus2>:
	status_1->raw_data = rx_data[1];
	return status;
}

int8_t DRV_GetStatus2(drv_status_2_t* status_2)
{
 8000684:	b590      	push	{r4, r7, lr}
 8000686:	b087      	sub	sp, #28
 8000688:	af02      	add	r7, sp, #8
 800068a:	6078      	str	r0, [r7, #4]
	int8_t status = HAL_OK;
 800068c:	240f      	movs	r4, #15
 800068e:	193b      	adds	r3, r7, r4
 8000690:	2200      	movs	r2, #0
 8000692:	701a      	strb	r2, [r3, #0]
	tx_data[0] = (STATUS_2 | READ_MASK);
 8000694:	4b1c      	ldr	r3, [pc, #112]	@ (8000708 <DRV_GetStatus2+0x84>)
 8000696:	2243      	movs	r2, #67	@ 0x43
 8000698:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0;
 800069a:	4b1b      	ldr	r3, [pc, #108]	@ (8000708 <DRV_GetStatus2+0x84>)
 800069c:	2200      	movs	r2, #0
 800069e:	705a      	strb	r2, [r3, #1]
	rx_data[0] = 0;
 80006a0:	4b1a      	ldr	r3, [pc, #104]	@ (800070c <DRV_GetStatus2+0x88>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
	rx_data[1] = 0;
 80006a6:	4b19      	ldr	r3, [pc, #100]	@ (800070c <DRV_GetStatus2+0x88>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	705a      	strb	r2, [r3, #1]

	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_RESET);
 80006ac:	4b18      	ldr	r3, [pc, #96]	@ (8000710 <DRV_GetStatus2+0x8c>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	2101      	movs	r1, #1
 80006b2:	0018      	movs	r0, r3
 80006b4:	f003 fe82 	bl	80043bc <HAL_GPIO_WritePin>
	status = HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 100);
 80006b8:	4a14      	ldr	r2, [pc, #80]	@ (800070c <DRV_GetStatus2+0x88>)
 80006ba:	4913      	ldr	r1, [pc, #76]	@ (8000708 <DRV_GetStatus2+0x84>)
 80006bc:	4815      	ldr	r0, [pc, #84]	@ (8000714 <DRV_GetStatus2+0x90>)
 80006be:	2364      	movs	r3, #100	@ 0x64
 80006c0:	9300      	str	r3, [sp, #0]
 80006c2:	2302      	movs	r3, #2
 80006c4:	f005 fbb2 	bl	8005e2c <HAL_SPI_TransmitReceive>
 80006c8:	0003      	movs	r3, r0
 80006ca:	001a      	movs	r2, r3
 80006cc:	193b      	adds	r3, r7, r4
 80006ce:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_SET);
 80006d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000710 <DRV_GetStatus2+0x8c>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	2101      	movs	r1, #1
 80006d6:	0018      	movs	r0, r3
 80006d8:	f003 fe70 	bl	80043bc <HAL_GPIO_WritePin>
	if(status != HAL_OK){return status;}
 80006dc:	193b      	adds	r3, r7, r4
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	b25b      	sxtb	r3, r3
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d003      	beq.n	80006ee <DRV_GetStatus2+0x6a>
 80006e6:	193b      	adds	r3, r7, r4
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	b25b      	sxtb	r3, r3
 80006ec:	e007      	b.n	80006fe <DRV_GetStatus2+0x7a>

	status_2->raw_data = rx_data[1];
 80006ee:	4b07      	ldr	r3, [pc, #28]	@ (800070c <DRV_GetStatus2+0x88>)
 80006f0:	785a      	ldrb	r2, [r3, #1]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	701a      	strb	r2, [r3, #0]
	return status;
 80006f6:	230f      	movs	r3, #15
 80006f8:	18fb      	adds	r3, r7, r3
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	b25b      	sxtb	r3, r3
}
 80006fe:	0018      	movs	r0, r3
 8000700:	46bd      	mov	sp, r7
 8000702:	b005      	add	sp, #20
 8000704:	bd90      	pop	{r4, r7, pc}
 8000706:	46c0      	nop			@ (mov r8, r8)
 8000708:	200000c8 	.word	0x200000c8
 800070c:	200000cc 	.word	0x200000cc
 8000710:	50000c00 	.word	0x50000c00
 8000714:	200001dc 	.word	0x200001dc

08000718 <DRV_GetCommand>:

int8_t DRV_GetCommand(drv_command_t* command)
{
 8000718:	b590      	push	{r4, r7, lr}
 800071a:	b087      	sub	sp, #28
 800071c:	af02      	add	r7, sp, #8
 800071e:	6078      	str	r0, [r7, #4]
	int8_t status = HAL_OK;
 8000720:	240f      	movs	r4, #15
 8000722:	193b      	adds	r3, r7, r4
 8000724:	2200      	movs	r2, #0
 8000726:	701a      	strb	r2, [r3, #0]
	tx_data[0] = (COMMAND | READ_MASK);
 8000728:	4b1c      	ldr	r3, [pc, #112]	@ (800079c <DRV_GetCommand+0x84>)
 800072a:	2248      	movs	r2, #72	@ 0x48
 800072c:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0;
 800072e:	4b1b      	ldr	r3, [pc, #108]	@ (800079c <DRV_GetCommand+0x84>)
 8000730:	2200      	movs	r2, #0
 8000732:	705a      	strb	r2, [r3, #1]
	rx_data[0] = 0;
 8000734:	4b1a      	ldr	r3, [pc, #104]	@ (80007a0 <DRV_GetCommand+0x88>)
 8000736:	2200      	movs	r2, #0
 8000738:	701a      	strb	r2, [r3, #0]
	rx_data[1] = 0;
 800073a:	4b19      	ldr	r3, [pc, #100]	@ (80007a0 <DRV_GetCommand+0x88>)
 800073c:	2200      	movs	r2, #0
 800073e:	705a      	strb	r2, [r3, #1]

	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_RESET);
 8000740:	4b18      	ldr	r3, [pc, #96]	@ (80007a4 <DRV_GetCommand+0x8c>)
 8000742:	2200      	movs	r2, #0
 8000744:	2101      	movs	r1, #1
 8000746:	0018      	movs	r0, r3
 8000748:	f003 fe38 	bl	80043bc <HAL_GPIO_WritePin>
	status = HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 100);
 800074c:	4a14      	ldr	r2, [pc, #80]	@ (80007a0 <DRV_GetCommand+0x88>)
 800074e:	4913      	ldr	r1, [pc, #76]	@ (800079c <DRV_GetCommand+0x84>)
 8000750:	4815      	ldr	r0, [pc, #84]	@ (80007a8 <DRV_GetCommand+0x90>)
 8000752:	2364      	movs	r3, #100	@ 0x64
 8000754:	9300      	str	r3, [sp, #0]
 8000756:	2302      	movs	r3, #2
 8000758:	f005 fb68 	bl	8005e2c <HAL_SPI_TransmitReceive>
 800075c:	0003      	movs	r3, r0
 800075e:	001a      	movs	r2, r3
 8000760:	193b      	adds	r3, r7, r4
 8000762:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_SET);
 8000764:	4b0f      	ldr	r3, [pc, #60]	@ (80007a4 <DRV_GetCommand+0x8c>)
 8000766:	2201      	movs	r2, #1
 8000768:	2101      	movs	r1, #1
 800076a:	0018      	movs	r0, r3
 800076c:	f003 fe26 	bl	80043bc <HAL_GPIO_WritePin>
	if(status != HAL_OK){return status;}
 8000770:	193b      	adds	r3, r7, r4
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	b25b      	sxtb	r3, r3
 8000776:	2b00      	cmp	r3, #0
 8000778:	d003      	beq.n	8000782 <DRV_GetCommand+0x6a>
 800077a:	193b      	adds	r3, r7, r4
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	b25b      	sxtb	r3, r3
 8000780:	e007      	b.n	8000792 <DRV_GetCommand+0x7a>

	command->raw_data = rx_data[1];
 8000782:	4b07      	ldr	r3, [pc, #28]	@ (80007a0 <DRV_GetCommand+0x88>)
 8000784:	785a      	ldrb	r2, [r3, #1]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	701a      	strb	r2, [r3, #0]
	return status;
 800078a:	230f      	movs	r3, #15
 800078c:	18fb      	adds	r3, r7, r3
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	b25b      	sxtb	r3, r3
}
 8000792:	0018      	movs	r0, r3
 8000794:	46bd      	mov	sp, r7
 8000796:	b005      	add	sp, #20
 8000798:	bd90      	pop	{r4, r7, pc}
 800079a:	46c0      	nop			@ (mov r8, r8)
 800079c:	200000c8 	.word	0x200000c8
 80007a0:	200000cc 	.word	0x200000cc
 80007a4:	50000c00 	.word	0x50000c00
 80007a8:	200001dc 	.word	0x200001dc

080007ac <DRV_SetCommand>:

int8_t DRV_SetCommand(drv_command_t* command)
{
 80007ac:	b590      	push	{r4, r7, lr}
 80007ae:	b087      	sub	sp, #28
 80007b0:	af02      	add	r7, sp, #8
 80007b2:	6078      	str	r0, [r7, #4]
	int8_t status = HAL_OK;
 80007b4:	240f      	movs	r4, #15
 80007b6:	193b      	adds	r3, r7, r4
 80007b8:	2200      	movs	r2, #0
 80007ba:	701a      	strb	r2, [r3, #0]

	tx_data[0] = COMMAND;
 80007bc:	4b12      	ldr	r3, [pc, #72]	@ (8000808 <DRV_SetCommand+0x5c>)
 80007be:	2208      	movs	r2, #8
 80007c0:	701a      	strb	r2, [r3, #0]
	tx_data[1] = command->raw_data;
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	781a      	ldrb	r2, [r3, #0]
 80007c6:	4b10      	ldr	r3, [pc, #64]	@ (8000808 <DRV_SetCommand+0x5c>)
 80007c8:	705a      	strb	r2, [r3, #1]

	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_RESET);
 80007ca:	4b10      	ldr	r3, [pc, #64]	@ (800080c <DRV_SetCommand+0x60>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	2101      	movs	r1, #1
 80007d0:	0018      	movs	r0, r3
 80007d2:	f003 fdf3 	bl	80043bc <HAL_GPIO_WritePin>
	status = HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 100);
 80007d6:	4a0e      	ldr	r2, [pc, #56]	@ (8000810 <DRV_SetCommand+0x64>)
 80007d8:	490b      	ldr	r1, [pc, #44]	@ (8000808 <DRV_SetCommand+0x5c>)
 80007da:	480e      	ldr	r0, [pc, #56]	@ (8000814 <DRV_SetCommand+0x68>)
 80007dc:	2364      	movs	r3, #100	@ 0x64
 80007de:	9300      	str	r3, [sp, #0]
 80007e0:	2302      	movs	r3, #2
 80007e2:	f005 fb23 	bl	8005e2c <HAL_SPI_TransmitReceive>
 80007e6:	0003      	movs	r3, r0
 80007e8:	001a      	movs	r2, r3
 80007ea:	193b      	adds	r3, r7, r4
 80007ec:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_SET);
 80007ee:	4b07      	ldr	r3, [pc, #28]	@ (800080c <DRV_SetCommand+0x60>)
 80007f0:	2201      	movs	r2, #1
 80007f2:	2101      	movs	r1, #1
 80007f4:	0018      	movs	r0, r3
 80007f6:	f003 fde1 	bl	80043bc <HAL_GPIO_WritePin>
	return status;
 80007fa:	193b      	adds	r3, r7, r4
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	b25b      	sxtb	r3, r3
}
 8000800:	0018      	movs	r0, r3
 8000802:	46bd      	mov	sp, r7
 8000804:	b005      	add	sp, #20
 8000806:	bd90      	pop	{r4, r7, pc}
 8000808:	200000c8 	.word	0x200000c8
 800080c:	50000c00 	.word	0x50000c00
 8000810:	200000cc 	.word	0x200000cc
 8000814:	200001dc 	.word	0x200001dc

08000818 <DRV_GetSpiIn>:

int8_t DRV_GetSpiIn(drv_spi_in_t* spi_in)
{
 8000818:	b590      	push	{r4, r7, lr}
 800081a:	b087      	sub	sp, #28
 800081c:	af02      	add	r7, sp, #8
 800081e:	6078      	str	r0, [r7, #4]
	int8_t status = HAL_OK;
 8000820:	240f      	movs	r4, #15
 8000822:	193b      	adds	r3, r7, r4
 8000824:	2200      	movs	r2, #0
 8000826:	701a      	strb	r2, [r3, #0]

	tx_data[0] = (SPI_IN | READ_MASK);
 8000828:	4b17      	ldr	r3, [pc, #92]	@ (8000888 <DRV_GetSpiIn+0x70>)
 800082a:	2249      	movs	r2, #73	@ 0x49
 800082c:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0;
 800082e:	4b16      	ldr	r3, [pc, #88]	@ (8000888 <DRV_GetSpiIn+0x70>)
 8000830:	2200      	movs	r2, #0
 8000832:	705a      	strb	r2, [r3, #1]
	rx_data[0] = 0;
 8000834:	4b15      	ldr	r3, [pc, #84]	@ (800088c <DRV_GetSpiIn+0x74>)
 8000836:	2200      	movs	r2, #0
 8000838:	701a      	strb	r2, [r3, #0]
	rx_data[1] = 0;
 800083a:	4b14      	ldr	r3, [pc, #80]	@ (800088c <DRV_GetSpiIn+0x74>)
 800083c:	2200      	movs	r2, #0
 800083e:	705a      	strb	r2, [r3, #1]

	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_RESET);
 8000840:	4b13      	ldr	r3, [pc, #76]	@ (8000890 <DRV_GetSpiIn+0x78>)
 8000842:	2200      	movs	r2, #0
 8000844:	2101      	movs	r1, #1
 8000846:	0018      	movs	r0, r3
 8000848:	f003 fdb8 	bl	80043bc <HAL_GPIO_WritePin>
	status = HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 100);
 800084c:	4a0f      	ldr	r2, [pc, #60]	@ (800088c <DRV_GetSpiIn+0x74>)
 800084e:	490e      	ldr	r1, [pc, #56]	@ (8000888 <DRV_GetSpiIn+0x70>)
 8000850:	4810      	ldr	r0, [pc, #64]	@ (8000894 <DRV_GetSpiIn+0x7c>)
 8000852:	2364      	movs	r3, #100	@ 0x64
 8000854:	9300      	str	r3, [sp, #0]
 8000856:	2302      	movs	r3, #2
 8000858:	f005 fae8 	bl	8005e2c <HAL_SPI_TransmitReceive>
 800085c:	0003      	movs	r3, r0
 800085e:	001a      	movs	r2, r3
 8000860:	193b      	adds	r3, r7, r4
 8000862:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_SET);
 8000864:	4b0a      	ldr	r3, [pc, #40]	@ (8000890 <DRV_GetSpiIn+0x78>)
 8000866:	2201      	movs	r2, #1
 8000868:	2101      	movs	r1, #1
 800086a:	0018      	movs	r0, r3
 800086c:	f003 fda6 	bl	80043bc <HAL_GPIO_WritePin>

	spi_in->raw_data = rx_data[1];
 8000870:	4b06      	ldr	r3, [pc, #24]	@ (800088c <DRV_GetSpiIn+0x74>)
 8000872:	785a      	ldrb	r2, [r3, #1]
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	701a      	strb	r2, [r3, #0]
	return status;
 8000878:	193b      	adds	r3, r7, r4
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	b25b      	sxtb	r3, r3
}
 800087e:	0018      	movs	r0, r3
 8000880:	46bd      	mov	sp, r7
 8000882:	b005      	add	sp, #20
 8000884:	bd90      	pop	{r4, r7, pc}
 8000886:	46c0      	nop			@ (mov r8, r8)
 8000888:	200000c8 	.word	0x200000c8
 800088c:	200000cc 	.word	0x200000cc
 8000890:	50000c00 	.word	0x50000c00
 8000894:	200001dc 	.word	0x200001dc

08000898 <DRV_SetSpiIn>:

int8_t DRV_SetSpiIn(drv_spi_in_t* spi_in)
{
 8000898:	b590      	push	{r4, r7, lr}
 800089a:	b087      	sub	sp, #28
 800089c:	af02      	add	r7, sp, #8
 800089e:	6078      	str	r0, [r7, #4]
	int8_t status = HAL_OK;
 80008a0:	240f      	movs	r4, #15
 80008a2:	193b      	adds	r3, r7, r4
 80008a4:	2200      	movs	r2, #0
 80008a6:	701a      	strb	r2, [r3, #0]

	tx_data[0] = SPI_IN;
 80008a8:	4b12      	ldr	r3, [pc, #72]	@ (80008f4 <DRV_SetSpiIn+0x5c>)
 80008aa:	2209      	movs	r2, #9
 80008ac:	701a      	strb	r2, [r3, #0]
	tx_data[1] = spi_in->raw_data;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	781a      	ldrb	r2, [r3, #0]
 80008b2:	4b10      	ldr	r3, [pc, #64]	@ (80008f4 <DRV_SetSpiIn+0x5c>)
 80008b4:	705a      	strb	r2, [r3, #1]

	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_RESET);
 80008b6:	4b10      	ldr	r3, [pc, #64]	@ (80008f8 <DRV_SetSpiIn+0x60>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	2101      	movs	r1, #1
 80008bc:	0018      	movs	r0, r3
 80008be:	f003 fd7d 	bl	80043bc <HAL_GPIO_WritePin>
	status = HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 100);
 80008c2:	4a0e      	ldr	r2, [pc, #56]	@ (80008fc <DRV_SetSpiIn+0x64>)
 80008c4:	490b      	ldr	r1, [pc, #44]	@ (80008f4 <DRV_SetSpiIn+0x5c>)
 80008c6:	480e      	ldr	r0, [pc, #56]	@ (8000900 <DRV_SetSpiIn+0x68>)
 80008c8:	2364      	movs	r3, #100	@ 0x64
 80008ca:	9300      	str	r3, [sp, #0]
 80008cc:	2302      	movs	r3, #2
 80008ce:	f005 faad 	bl	8005e2c <HAL_SPI_TransmitReceive>
 80008d2:	0003      	movs	r3, r0
 80008d4:	001a      	movs	r2, r3
 80008d6:	193b      	adds	r3, r7, r4
 80008d8:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_SET);
 80008da:	4b07      	ldr	r3, [pc, #28]	@ (80008f8 <DRV_SetSpiIn+0x60>)
 80008dc:	2201      	movs	r2, #1
 80008de:	2101      	movs	r1, #1
 80008e0:	0018      	movs	r0, r3
 80008e2:	f003 fd6b 	bl	80043bc <HAL_GPIO_WritePin>
	return status;
 80008e6:	193b      	adds	r3, r7, r4
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	b25b      	sxtb	r3, r3
}
 80008ec:	0018      	movs	r0, r3
 80008ee:	46bd      	mov	sp, r7
 80008f0:	b005      	add	sp, #20
 80008f2:	bd90      	pop	{r4, r7, pc}
 80008f4:	200000c8 	.word	0x200000c8
 80008f8:	50000c00 	.word	0x50000c00
 80008fc:	200000cc 	.word	0x200000cc
 8000900:	200001dc 	.word	0x200001dc

08000904 <DRV_SetConfig3>:
	config_3->raw_data = rx_data[1];
	return status;
}

int8_t DRV_SetConfig3(drv_config_3_t* config_3)
{
 8000904:	b590      	push	{r4, r7, lr}
 8000906:	b087      	sub	sp, #28
 8000908:	af02      	add	r7, sp, #8
 800090a:	6078      	str	r0, [r7, #4]
	int8_t status = HAL_OK;
 800090c:	240f      	movs	r4, #15
 800090e:	193b      	adds	r3, r7, r4
 8000910:	2200      	movs	r2, #0
 8000912:	701a      	strb	r2, [r3, #0]

	tx_data[0] = CONFIG_3;
 8000914:	4b12      	ldr	r3, [pc, #72]	@ (8000960 <DRV_SetConfig3+0x5c>)
 8000916:	220c      	movs	r2, #12
 8000918:	701a      	strb	r2, [r3, #0]
	tx_data[1] = config_3->raw_data;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	781a      	ldrb	r2, [r3, #0]
 800091e:	4b10      	ldr	r3, [pc, #64]	@ (8000960 <DRV_SetConfig3+0x5c>)
 8000920:	705a      	strb	r2, [r3, #1]

	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_RESET);
 8000922:	4b10      	ldr	r3, [pc, #64]	@ (8000964 <DRV_SetConfig3+0x60>)
 8000924:	2200      	movs	r2, #0
 8000926:	2101      	movs	r1, #1
 8000928:	0018      	movs	r0, r3
 800092a:	f003 fd47 	bl	80043bc <HAL_GPIO_WritePin>
	status = HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 100);
 800092e:	4a0e      	ldr	r2, [pc, #56]	@ (8000968 <DRV_SetConfig3+0x64>)
 8000930:	490b      	ldr	r1, [pc, #44]	@ (8000960 <DRV_SetConfig3+0x5c>)
 8000932:	480e      	ldr	r0, [pc, #56]	@ (800096c <DRV_SetConfig3+0x68>)
 8000934:	2364      	movs	r3, #100	@ 0x64
 8000936:	9300      	str	r3, [sp, #0]
 8000938:	2302      	movs	r3, #2
 800093a:	f005 fa77 	bl	8005e2c <HAL_SPI_TransmitReceive>
 800093e:	0003      	movs	r3, r0
 8000940:	001a      	movs	r2, r3
 8000942:	193b      	adds	r3, r7, r4
 8000944:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_SET);
 8000946:	4b07      	ldr	r3, [pc, #28]	@ (8000964 <DRV_SetConfig3+0x60>)
 8000948:	2201      	movs	r2, #1
 800094a:	2101      	movs	r1, #1
 800094c:	0018      	movs	r0, r3
 800094e:	f003 fd35 	bl	80043bc <HAL_GPIO_WritePin>
	return status;
 8000952:	193b      	adds	r3, r7, r4
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	b25b      	sxtb	r3, r3
}
 8000958:	0018      	movs	r0, r3
 800095a:	46bd      	mov	sp, r7
 800095c:	b005      	add	sp, #20
 800095e:	bd90      	pop	{r4, r7, pc}
 8000960:	200000c8 	.word	0x200000c8
 8000964:	50000c00 	.word	0x50000c00
 8000968:	200000cc 	.word	0x200000cc
 800096c:	200001dc 	.word	0x200001dc

08000970 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	0002      	movs	r2, r0
 8000978:	1dfb      	adds	r3, r7, #7
 800097a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800097c:	1dfb      	adds	r3, r7, #7
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	2b7f      	cmp	r3, #127	@ 0x7f
 8000982:	d809      	bhi.n	8000998 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000984:	1dfb      	adds	r3, r7, #7
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	001a      	movs	r2, r3
 800098a:	231f      	movs	r3, #31
 800098c:	401a      	ands	r2, r3
 800098e:	4b04      	ldr	r3, [pc, #16]	@ (80009a0 <__NVIC_EnableIRQ+0x30>)
 8000990:	2101      	movs	r1, #1
 8000992:	4091      	lsls	r1, r2
 8000994:	000a      	movs	r2, r1
 8000996:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000998:	46c0      	nop			@ (mov r8, r8)
 800099a:	46bd      	mov	sp, r7
 800099c:	b002      	add	sp, #8
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	e000e100 	.word	0xe000e100

080009a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009a4:	b590      	push	{r4, r7, lr}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	0002      	movs	r2, r0
 80009ac:	6039      	str	r1, [r7, #0]
 80009ae:	1dfb      	adds	r3, r7, #7
 80009b0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009b2:	1dfb      	adds	r3, r7, #7
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	2b7f      	cmp	r3, #127	@ 0x7f
 80009b8:	d828      	bhi.n	8000a0c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009ba:	4a2f      	ldr	r2, [pc, #188]	@ (8000a78 <__NVIC_SetPriority+0xd4>)
 80009bc:	1dfb      	adds	r3, r7, #7
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	b25b      	sxtb	r3, r3
 80009c2:	089b      	lsrs	r3, r3, #2
 80009c4:	33c0      	adds	r3, #192	@ 0xc0
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	589b      	ldr	r3, [r3, r2]
 80009ca:	1dfa      	adds	r2, r7, #7
 80009cc:	7812      	ldrb	r2, [r2, #0]
 80009ce:	0011      	movs	r1, r2
 80009d0:	2203      	movs	r2, #3
 80009d2:	400a      	ands	r2, r1
 80009d4:	00d2      	lsls	r2, r2, #3
 80009d6:	21ff      	movs	r1, #255	@ 0xff
 80009d8:	4091      	lsls	r1, r2
 80009da:	000a      	movs	r2, r1
 80009dc:	43d2      	mvns	r2, r2
 80009de:	401a      	ands	r2, r3
 80009e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	019b      	lsls	r3, r3, #6
 80009e6:	22ff      	movs	r2, #255	@ 0xff
 80009e8:	401a      	ands	r2, r3
 80009ea:	1dfb      	adds	r3, r7, #7
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	0018      	movs	r0, r3
 80009f0:	2303      	movs	r3, #3
 80009f2:	4003      	ands	r3, r0
 80009f4:	00db      	lsls	r3, r3, #3
 80009f6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009f8:	481f      	ldr	r0, [pc, #124]	@ (8000a78 <__NVIC_SetPriority+0xd4>)
 80009fa:	1dfb      	adds	r3, r7, #7
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	b25b      	sxtb	r3, r3
 8000a00:	089b      	lsrs	r3, r3, #2
 8000a02:	430a      	orrs	r2, r1
 8000a04:	33c0      	adds	r3, #192	@ 0xc0
 8000a06:	009b      	lsls	r3, r3, #2
 8000a08:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a0a:	e031      	b.n	8000a70 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a0c:	4a1b      	ldr	r2, [pc, #108]	@ (8000a7c <__NVIC_SetPriority+0xd8>)
 8000a0e:	1dfb      	adds	r3, r7, #7
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	0019      	movs	r1, r3
 8000a14:	230f      	movs	r3, #15
 8000a16:	400b      	ands	r3, r1
 8000a18:	3b08      	subs	r3, #8
 8000a1a:	089b      	lsrs	r3, r3, #2
 8000a1c:	3306      	adds	r3, #6
 8000a1e:	009b      	lsls	r3, r3, #2
 8000a20:	18d3      	adds	r3, r2, r3
 8000a22:	3304      	adds	r3, #4
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	1dfa      	adds	r2, r7, #7
 8000a28:	7812      	ldrb	r2, [r2, #0]
 8000a2a:	0011      	movs	r1, r2
 8000a2c:	2203      	movs	r2, #3
 8000a2e:	400a      	ands	r2, r1
 8000a30:	00d2      	lsls	r2, r2, #3
 8000a32:	21ff      	movs	r1, #255	@ 0xff
 8000a34:	4091      	lsls	r1, r2
 8000a36:	000a      	movs	r2, r1
 8000a38:	43d2      	mvns	r2, r2
 8000a3a:	401a      	ands	r2, r3
 8000a3c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	019b      	lsls	r3, r3, #6
 8000a42:	22ff      	movs	r2, #255	@ 0xff
 8000a44:	401a      	ands	r2, r3
 8000a46:	1dfb      	adds	r3, r7, #7
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	4003      	ands	r3, r0
 8000a50:	00db      	lsls	r3, r3, #3
 8000a52:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a54:	4809      	ldr	r0, [pc, #36]	@ (8000a7c <__NVIC_SetPriority+0xd8>)
 8000a56:	1dfb      	adds	r3, r7, #7
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	001c      	movs	r4, r3
 8000a5c:	230f      	movs	r3, #15
 8000a5e:	4023      	ands	r3, r4
 8000a60:	3b08      	subs	r3, #8
 8000a62:	089b      	lsrs	r3, r3, #2
 8000a64:	430a      	orrs	r2, r1
 8000a66:	3306      	adds	r3, #6
 8000a68:	009b      	lsls	r3, r3, #2
 8000a6a:	18c3      	adds	r3, r0, r3
 8000a6c:	3304      	adds	r3, #4
 8000a6e:	601a      	str	r2, [r3, #0]
}
 8000a70:	46c0      	nop			@ (mov r8, r8)
 8000a72:	46bd      	mov	sp, r7
 8000a74:	b003      	add	sp, #12
 8000a76:	bd90      	pop	{r4, r7, pc}
 8000a78:	e000e100 	.word	0xe000e100
 8000a7c:	e000ed00 	.word	0xe000ed00

08000a80 <LL_ADC_DMA_GetRegAddr>:
  * @param  Register This parameter can be one of the following values:
  *         @arg @ref LL_ADC_DMA_REG_REGULAR_DATA
  * @retval ADC register address
  */
__STATIC_INLINE uint32_t LL_ADC_DMA_GetRegAddr(ADC_TypeDef *ADCx, uint32_t Register)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(Register);

  /* Retrieve address of register DR */
  return (uint32_t) &(ADCx->DR);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	3340      	adds	r3, #64	@ 0x40
}
 8000a8e:	0018      	movs	r0, r3
 8000a90:	46bd      	mov	sp, r7
 8000a92:	b002      	add	sp, #8
 8000a94:	bd80      	pop	{r7, pc}
	...

08000a98 <LL_ADC_SetTriggerFrequencyMode>:
  *         @arg @ref LL_ADC_TRIGGER_FREQ_HIGH
  *         @arg @ref LL_ADC_TRIGGER_FREQ_LOW
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetTriggerFrequencyMode(ADC_TypeDef *ADCx, uint32_t TriggerFrequencyMode)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_LFTRIG, TriggerFrequencyMode);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	691b      	ldr	r3, [r3, #16]
 8000aa6:	4a05      	ldr	r2, [pc, #20]	@ (8000abc <LL_ADC_SetTriggerFrequencyMode+0x24>)
 8000aa8:	401a      	ands	r2, r3
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	431a      	orrs	r2, r3
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	611a      	str	r2, [r3, #16]
}
 8000ab2:	46c0      	nop			@ (mov r8, r8)
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	b002      	add	sp, #8
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	46c0      	nop			@ (mov r8, r8)
 8000abc:	dfffffff 	.word	0xdfffffff

08000ac0 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	60f8      	str	r0, [r7, #12]
 8000ac8:	60b9      	str	r1, [r7, #8]
 8000aca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	695b      	ldr	r3, [r3, #20]
 8000ad0:	68ba      	ldr	r2, [r7, #8]
 8000ad2:	2104      	movs	r1, #4
 8000ad4:	400a      	ands	r2, r1
 8000ad6:	2107      	movs	r1, #7
 8000ad8:	4091      	lsls	r1, r2
 8000ada:	000a      	movs	r2, r1
 8000adc:	43d2      	mvns	r2, r2
 8000ade:	401a      	ands	r2, r3
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	2104      	movs	r1, #4
 8000ae4:	400b      	ands	r3, r1
 8000ae6:	6879      	ldr	r1, [r7, #4]
 8000ae8:	4099      	lsls	r1, r3
 8000aea:	000b      	movs	r3, r1
 8000aec:	431a      	orrs	r2, r3
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000af2:	46c0      	nop			@ (mov r8, r8)
 8000af4:	46bd      	mov	sp, r7
 8000af6:	b004      	add	sp, #16
 8000af8:	bd80      	pop	{r7, pc}
	...

08000afc <LL_ADC_REG_SetSequencerConfigurable>:
  *         @arg @ref LL_ADC_REG_SEQ_FIXED
  *         @arg @ref LL_ADC_REG_SEQ_CONFIGURABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerConfigurable(ADC_TypeDef *ADCx, uint32_t Configurability)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_CHSELRMOD, Configurability);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	68db      	ldr	r3, [r3, #12]
 8000b0a:	4a05      	ldr	r2, [pc, #20]	@ (8000b20 <LL_ADC_REG_SetSequencerConfigurable+0x24>)
 8000b0c:	401a      	ands	r2, r3
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	431a      	orrs	r2, r3
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	60da      	str	r2, [r3, #12]
}
 8000b16:	46c0      	nop			@ (mov r8, r8)
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	b002      	add	sp, #8
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	46c0      	nop			@ (mov r8, r8)
 8000b20:	ffdfffff 	.word	0xffdfffff

08000b24 <LL_ADC_REG_SetSequencerScanDirection>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_FORWARD
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_BACKWARD
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerScanDirection(ADC_TypeDef *ADCx, uint32_t ScanDirection)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	68db      	ldr	r3, [r3, #12]
 8000b32:	2204      	movs	r2, #4
 8000b34:	4393      	bics	r3, r2
 8000b36:	001a      	movs	r2, r3
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	431a      	orrs	r2, r3
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	60da      	str	r2, [r3, #12]
}
 8000b40:	46c0      	nop			@ (mov r8, r8)
 8000b42:	46bd      	mov	sp, r7
 8000b44:	b002      	add	sp, #8
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	025b      	lsls	r3, r3, #9
 8000b5a:	0a5b      	lsrs	r3, r3, #9
 8000b5c:	431a      	orrs	r2, r3
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000b62:	46c0      	nop			@ (mov r8, r8)
 8000b64:	46bd      	mov	sp, r7
 8000b66:	b002      	add	sp, #8
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <LL_ADC_SetOverSamplingScope>:
  *         @arg @ref LL_ADC_OVS_DISABLE
  *         @arg @ref LL_ADC_OVS_GRP_REGULAR_CONTINUED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b082      	sub	sp, #8
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
 8000b72:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_OVSE, OvsScope);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	691b      	ldr	r3, [r3, #16]
 8000b78:	2201      	movs	r2, #1
 8000b7a:	4393      	bics	r3, r2
 8000b7c:	001a      	movs	r2, r3
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	431a      	orrs	r2, r3
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	611a      	str	r2, [r3, #16]
}
 8000b86:	46c0      	nop			@ (mov r8, r8)
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	b002      	add	sp, #8
 8000b8c:	bd80      	pop	{r7, pc}
	...

08000b90 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	689b      	ldr	r3, [r3, #8]
 8000b9c:	4a05      	ldr	r2, [pc, #20]	@ (8000bb4 <LL_ADC_EnableInternalRegulator+0x24>)
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	2280      	movs	r2, #128	@ 0x80
 8000ba2:	0552      	lsls	r2, r2, #21
 8000ba4:	431a      	orrs	r2, r3
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000baa:	46c0      	nop			@ (mov r8, r8)
 8000bac:	46bd      	mov	sp, r7
 8000bae:	b002      	add	sp, #8
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	46c0      	nop			@ (mov r8, r8)
 8000bb4:	6fffffe8 	.word	0x6fffffe8

08000bb8 <LL_ADC_IsActiveFlag_CCRDY>:
  * @rmtoll ISR      CCRDY          LL_ADC_IsActiveFlag_CCRDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_CCRDY(ADC_TypeDef *ADCx)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_CCRDY) == (LL_ADC_FLAG_CCRDY)) ? 1UL : 0UL);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	2380      	movs	r3, #128	@ 0x80
 8000bc6:	019b      	lsls	r3, r3, #6
 8000bc8:	401a      	ands	r2, r3
 8000bca:	2380      	movs	r3, #128	@ 0x80
 8000bcc:	019b      	lsls	r3, r3, #6
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d101      	bne.n	8000bd6 <LL_ADC_IsActiveFlag_CCRDY+0x1e>
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	e000      	b.n	8000bd8 <LL_ADC_IsActiveFlag_CCRDY+0x20>
 8000bd6:	2300      	movs	r3, #0
}
 8000bd8:	0018      	movs	r0, r3
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	b002      	add	sp, #8
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <LL_ADC_ClearFlag_CCRDY>:
  * @rmtoll ISR      CCRDY          LL_ADC_ClearFlag_CCRDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE void LL_ADC_ClearFlag_CCRDY(ADC_TypeDef *ADCx)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_CCRDY);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2280      	movs	r2, #128	@ 0x80
 8000bec:	0192      	lsls	r2, r2, #6
 8000bee:	601a      	str	r2, [r3, #0]
}
 8000bf0:	46c0      	nop			@ (mov r8, r8)
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	b002      	add	sp, #8
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <LL_ADC_EnableIT_OVR>:
  * @rmtoll IER      OVRIE          LL_ADC_EnableIT_OVR
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_OVR(ADC_TypeDef *ADCx)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_OVR);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	2210      	movs	r2, #16
 8000c06:	431a      	orrs	r2, r3
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	605a      	str	r2, [r3, #4]
}
 8000c0c:	46c0      	nop			@ (mov r8, r8)
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	b002      	add	sp, #8
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <LL_ADC_DisableIT_EOC>:
  * @rmtoll IER      EOCIE          LL_ADC_DisableIT_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	2204      	movs	r2, #4
 8000c22:	4393      	bics	r3, r2
 8000c24:	001a      	movs	r2, r3
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	605a      	str	r2, [r3, #4]
}
 8000c2a:	46c0      	nop			@ (mov r8, r8)
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	b002      	add	sp, #8
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <LL_ADC_DisableIT_EOS>:
  * @rmtoll IER      EOSIE          LL_ADC_DisableIT_EOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b082      	sub	sp, #8
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	2208      	movs	r2, #8
 8000c40:	4393      	bics	r3, r2
 8000c42:	001a      	movs	r2, r3
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	605a      	str	r2, [r3, #4]
}
 8000c48:	46c0      	nop			@ (mov r8, r8)
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	b002      	add	sp, #8
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_TIM17
  *         @arg @ref LL_APB1_GRP2_PERIPH_ADC
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR2, Periphs);
 8000c58:	4b07      	ldr	r3, [pc, #28]	@ (8000c78 <LL_APB1_GRP2_EnableClock+0x28>)
 8000c5a:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8000c5c:	4b06      	ldr	r3, [pc, #24]	@ (8000c78 <LL_APB1_GRP2_EnableClock+0x28>)
 8000c5e:	687a      	ldr	r2, [r7, #4]
 8000c60:	430a      	orrs	r2, r1
 8000c62:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 8000c64:	4b04      	ldr	r3, [pc, #16]	@ (8000c78 <LL_APB1_GRP2_EnableClock+0x28>)
 8000c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c68:	687a      	ldr	r2, [r7, #4]
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c6e:	68fb      	ldr	r3, [r7, #12]
}
 8000c70:	46c0      	nop			@ (mov r8, r8)
 8000c72:	46bd      	mov	sp, r7
 8000c74:	b004      	add	sp, #16
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40021000 	.word	0x40021000

08000c7c <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOD
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000c84:	4b07      	ldr	r3, [pc, #28]	@ (8000ca4 <LL_IOP_GRP1_EnableClock+0x28>)
 8000c86:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000c88:	4b06      	ldr	r3, [pc, #24]	@ (8000ca4 <LL_IOP_GRP1_EnableClock+0x28>)
 8000c8a:	687a      	ldr	r2, [r7, #4]
 8000c8c:	430a      	orrs	r2, r1
 8000c8e:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000c90:	4b04      	ldr	r3, [pc, #16]	@ (8000ca4 <LL_IOP_GRP1_EnableClock+0x28>)
 8000c92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c94:	687a      	ldr	r2, [r7, #4]
 8000c96:	4013      	ands	r3, r2
 8000c98:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c9a:	68fb      	ldr	r3, [r7, #12]
}
 8000c9c:	46c0      	nop			@ (mov r8, r8)
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	b004      	add	sp, #16
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40021000 	.word	0x40021000

08000ca8 <LL_SYSTICK_IsActiveCounterFlag>:
  * @note   It can be used in timeout function on application side.
  * @rmtoll STK_CTRL     COUNTFLAG     LL_SYSTICK_IsActiveCounterFlag
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  return (((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk)) ? 1UL : 0UL);
 8000cac:	4b07      	ldr	r3, [pc, #28]	@ (8000ccc <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	2380      	movs	r3, #128	@ 0x80
 8000cb2:	025b      	lsls	r3, r3, #9
 8000cb4:	401a      	ands	r2, r3
 8000cb6:	2380      	movs	r3, #128	@ 0x80
 8000cb8:	025b      	lsls	r3, r3, #9
 8000cba:	429a      	cmp	r2, r3
 8000cbc:	d101      	bne.n	8000cc2 <LL_SYSTICK_IsActiveCounterFlag+0x1a>
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e000      	b.n	8000cc4 <LL_SYSTICK_IsActiveCounterFlag+0x1c>
 8000cc2:	2300      	movs	r3, #0
}
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	46c0      	nop			@ (mov r8, r8)
 8000ccc:	e000e010 	.word	0xe000e010

08000cd0 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_5 (*)
  * @note (*) Availability depends on devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
 8000cd8:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_EN);
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	3b01      	subs	r3, #1
 8000ce2:	4a0a      	ldr	r2, [pc, #40]	@ (8000d0c <LL_DMA_EnableChannel+0x3c>)
 8000ce4:	5cd3      	ldrb	r3, [r2, r3]
 8000ce6:	001a      	movs	r2, r3
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	18d3      	adds	r3, r2, r3
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	3b01      	subs	r3, #1
 8000cf2:	4906      	ldr	r1, [pc, #24]	@ (8000d0c <LL_DMA_EnableChannel+0x3c>)
 8000cf4:	5ccb      	ldrb	r3, [r1, r3]
 8000cf6:	0019      	movs	r1, r3
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	18cb      	adds	r3, r1, r3
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	430a      	orrs	r2, r1
 8000d00:	601a      	str	r2, [r3, #0]
}
 8000d02:	46c0      	nop			@ (mov r8, r8)
 8000d04:	46bd      	mov	sp, r7
 8000d06:	b004      	add	sp, #16
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	46c0      	nop			@ (mov r8, r8)
 8000d0c:	08009278 	.word	0x08009278

08000d10 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR,
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	3b01      	subs	r3, #1
 8000d24:	4a0b      	ldr	r2, [pc, #44]	@ (8000d54 <LL_DMA_SetDataTransferDirection+0x44>)
 8000d26:	5cd3      	ldrb	r3, [r2, r3]
 8000d28:	001a      	movs	r2, r3
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	18d3      	adds	r3, r2, r3
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a09      	ldr	r2, [pc, #36]	@ (8000d58 <LL_DMA_SetDataTransferDirection+0x48>)
 8000d32:	4013      	ands	r3, r2
 8000d34:	0019      	movs	r1, r3
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	3b01      	subs	r3, #1
 8000d3a:	4a06      	ldr	r2, [pc, #24]	@ (8000d54 <LL_DMA_SetDataTransferDirection+0x44>)
 8000d3c:	5cd3      	ldrb	r3, [r2, r3]
 8000d3e:	001a      	movs	r2, r3
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	18d3      	adds	r3, r2, r3
 8000d44:	687a      	ldr	r2, [r7, #4]
 8000d46:	430a      	orrs	r2, r1
 8000d48:	601a      	str	r2, [r3, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 8000d4a:	46c0      	nop			@ (mov r8, r8)
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	b006      	add	sp, #24
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	46c0      	nop			@ (mov r8, r8)
 8000d54:	08009278 	.word	0x08009278
 8000d58:	ffffbfef 	.word	0xffffbfef

08000d5c <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_CIRC,
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	3b01      	subs	r3, #1
 8000d70:	4a0b      	ldr	r2, [pc, #44]	@ (8000da0 <LL_DMA_SetMode+0x44>)
 8000d72:	5cd3      	ldrb	r3, [r2, r3]
 8000d74:	001a      	movs	r2, r3
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	18d3      	adds	r3, r2, r3
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2220      	movs	r2, #32
 8000d7e:	4393      	bics	r3, r2
 8000d80:	0019      	movs	r1, r3
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	3b01      	subs	r3, #1
 8000d86:	4a06      	ldr	r2, [pc, #24]	@ (8000da0 <LL_DMA_SetMode+0x44>)
 8000d88:	5cd3      	ldrb	r3, [r2, r3]
 8000d8a:	001a      	movs	r2, r3
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	18d3      	adds	r3, r2, r3
 8000d90:	687a      	ldr	r2, [r7, #4]
 8000d92:	430a      	orrs	r2, r1
 8000d94:	601a      	str	r2, [r3, #0]
             Mode);
}
 8000d96:	46c0      	nop			@ (mov r8, r8)
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	b006      	add	sp, #24
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	46c0      	nop			@ (mov r8, r8)
 8000da0:	08009278 	.word	0x08009278

08000da4 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_PINC,
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	3b01      	subs	r3, #1
 8000db8:	4a0b      	ldr	r2, [pc, #44]	@ (8000de8 <LL_DMA_SetPeriphIncMode+0x44>)
 8000dba:	5cd3      	ldrb	r3, [r2, r3]
 8000dbc:	001a      	movs	r2, r3
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	18d3      	adds	r3, r2, r3
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2240      	movs	r2, #64	@ 0x40
 8000dc6:	4393      	bics	r3, r2
 8000dc8:	0019      	movs	r1, r3
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	3b01      	subs	r3, #1
 8000dce:	4a06      	ldr	r2, [pc, #24]	@ (8000de8 <LL_DMA_SetPeriphIncMode+0x44>)
 8000dd0:	5cd3      	ldrb	r3, [r2, r3]
 8000dd2:	001a      	movs	r2, r3
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	18d3      	adds	r3, r2, r3
 8000dd8:	687a      	ldr	r2, [r7, #4]
 8000dda:	430a      	orrs	r2, r1
 8000ddc:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcIncMode);
}
 8000dde:	46c0      	nop			@ (mov r8, r8)
 8000de0:	46bd      	mov	sp, r7
 8000de2:	b006      	add	sp, #24
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	46c0      	nop			@ (mov r8, r8)
 8000de8:	08009278 	.word	0x08009278

08000dec <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_MINC,
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	3b01      	subs	r3, #1
 8000e00:	4a0b      	ldr	r2, [pc, #44]	@ (8000e30 <LL_DMA_SetMemoryIncMode+0x44>)
 8000e02:	5cd3      	ldrb	r3, [r2, r3]
 8000e04:	001a      	movs	r2, r3
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	18d3      	adds	r3, r2, r3
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2280      	movs	r2, #128	@ 0x80
 8000e0e:	4393      	bics	r3, r2
 8000e10:	0019      	movs	r1, r3
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	3b01      	subs	r3, #1
 8000e16:	4a06      	ldr	r2, [pc, #24]	@ (8000e30 <LL_DMA_SetMemoryIncMode+0x44>)
 8000e18:	5cd3      	ldrb	r3, [r2, r3]
 8000e1a:	001a      	movs	r2, r3
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	18d3      	adds	r3, r2, r3
 8000e20:	687a      	ldr	r2, [r7, #4]
 8000e22:	430a      	orrs	r2, r1
 8000e24:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstIncMode);
}
 8000e26:	46c0      	nop			@ (mov r8, r8)
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	b006      	add	sp, #24
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	46c0      	nop			@ (mov r8, r8)
 8000e30:	08009278 	.word	0x08009278

08000e34 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_PSIZE,
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	3b01      	subs	r3, #1
 8000e48:	4a0b      	ldr	r2, [pc, #44]	@ (8000e78 <LL_DMA_SetPeriphSize+0x44>)
 8000e4a:	5cd3      	ldrb	r3, [r2, r3]
 8000e4c:	001a      	movs	r2, r3
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	18d3      	adds	r3, r2, r3
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a09      	ldr	r2, [pc, #36]	@ (8000e7c <LL_DMA_SetPeriphSize+0x48>)
 8000e56:	4013      	ands	r3, r2
 8000e58:	0019      	movs	r1, r3
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	3b01      	subs	r3, #1
 8000e5e:	4a06      	ldr	r2, [pc, #24]	@ (8000e78 <LL_DMA_SetPeriphSize+0x44>)
 8000e60:	5cd3      	ldrb	r3, [r2, r3]
 8000e62:	001a      	movs	r2, r3
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	18d3      	adds	r3, r2, r3
 8000e68:	687a      	ldr	r2, [r7, #4]
 8000e6a:	430a      	orrs	r2, r1
 8000e6c:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcDataSize);
}
 8000e6e:	46c0      	nop			@ (mov r8, r8)
 8000e70:	46bd      	mov	sp, r7
 8000e72:	b006      	add	sp, #24
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	46c0      	nop			@ (mov r8, r8)
 8000e78:	08009278 	.word	0x08009278
 8000e7c:	fffffcff 	.word	0xfffffcff

08000e80 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_MSIZE,
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	3b01      	subs	r3, #1
 8000e94:	4a0b      	ldr	r2, [pc, #44]	@ (8000ec4 <LL_DMA_SetMemorySize+0x44>)
 8000e96:	5cd3      	ldrb	r3, [r2, r3]
 8000e98:	001a      	movs	r2, r3
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	18d3      	adds	r3, r2, r3
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a09      	ldr	r2, [pc, #36]	@ (8000ec8 <LL_DMA_SetMemorySize+0x48>)
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	0019      	movs	r1, r3
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	3b01      	subs	r3, #1
 8000eaa:	4a06      	ldr	r2, [pc, #24]	@ (8000ec4 <LL_DMA_SetMemorySize+0x44>)
 8000eac:	5cd3      	ldrb	r3, [r2, r3]
 8000eae:	001a      	movs	r2, r3
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	18d3      	adds	r3, r2, r3
 8000eb4:	687a      	ldr	r2, [r7, #4]
 8000eb6:	430a      	orrs	r2, r1
 8000eb8:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstDataSize);
}
 8000eba:	46c0      	nop			@ (mov r8, r8)
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	b006      	add	sp, #24
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	46c0      	nop			@ (mov r8, r8)
 8000ec4:	08009278 	.word	0x08009278
 8000ec8:	fffff3ff 	.word	0xfffff3ff

08000ecc <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_PL,
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	4a0b      	ldr	r2, [pc, #44]	@ (8000f10 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8000ee2:	5cd3      	ldrb	r3, [r2, r3]
 8000ee4:	001a      	movs	r2, r3
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	18d3      	adds	r3, r2, r3
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a09      	ldr	r2, [pc, #36]	@ (8000f14 <LL_DMA_SetChannelPriorityLevel+0x48>)
 8000eee:	4013      	ands	r3, r2
 8000ef0:	0019      	movs	r1, r3
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	3b01      	subs	r3, #1
 8000ef6:	4a06      	ldr	r2, [pc, #24]	@ (8000f10 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8000ef8:	5cd3      	ldrb	r3, [r2, r3]
 8000efa:	001a      	movs	r2, r3
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	18d3      	adds	r3, r2, r3
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	430a      	orrs	r2, r1
 8000f04:	601a      	str	r2, [r3, #0]
             Priority);
}
 8000f06:	46c0      	nop			@ (mov r8, r8)
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	b006      	add	sp, #24
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	46c0      	nop			@ (mov r8, r8)
 8000f10:	08009278 	.word	0x08009278
 8000f14:	ffffcfff 	.word	0xffffcfff

08000f18 <LL_DMA_SetDataLength>:
  * @note (*) Availability depends on devices
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CNDTR,
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	4a0a      	ldr	r2, [pc, #40]	@ (8000f58 <LL_DMA_SetDataLength+0x40>)
 8000f2e:	5cd3      	ldrb	r3, [r2, r3]
 8000f30:	001a      	movs	r2, r3
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	18d3      	adds	r3, r2, r3
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	0c1b      	lsrs	r3, r3, #16
 8000f3a:	0419      	lsls	r1, r3, #16
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	4a05      	ldr	r2, [pc, #20]	@ (8000f58 <LL_DMA_SetDataLength+0x40>)
 8000f42:	5cd3      	ldrb	r3, [r2, r3]
 8000f44:	001a      	movs	r2, r3
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	18d3      	adds	r3, r2, r3
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	430a      	orrs	r2, r1
 8000f4e:	605a      	str	r2, [r3, #4]
             DMA_CNDTR_NDT, NbData);
}
 8000f50:	46c0      	nop			@ (mov r8, r8)
 8000f52:	46bd      	mov	sp, r7
 8000f54:	b006      	add	sp, #24
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	08009278 	.word	0x08009278

08000f5c <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddress,
                                            uint32_t DstAddress, uint32_t Direction)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	607a      	str	r2, [r7, #4]
 8000f68:	603b      	str	r3, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	617b      	str	r3, [r7, #20]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 8000f6e:	6a3b      	ldr	r3, [r7, #32]
 8000f70:	2b10      	cmp	r3, #16
 8000f72:	d112      	bne.n	8000f9a <LL_DMA_ConfigAddresses+0x3e>
  {
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CMAR, SrcAddress);
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	3b01      	subs	r3, #1
 8000f78:	4a13      	ldr	r2, [pc, #76]	@ (8000fc8 <LL_DMA_ConfigAddresses+0x6c>)
 8000f7a:	5cd3      	ldrb	r3, [r2, r3]
 8000f7c:	001a      	movs	r2, r3
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	18d3      	adds	r3, r2, r3
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	60da      	str	r2, [r3, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CPAR, DstAddress);
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	3b01      	subs	r3, #1
 8000f8a:	4a0f      	ldr	r2, [pc, #60]	@ (8000fc8 <LL_DMA_ConfigAddresses+0x6c>)
 8000f8c:	5cd3      	ldrb	r3, [r2, r3]
 8000f8e:	001a      	movs	r2, r3
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	18d3      	adds	r3, r2, r3
 8000f94:	683a      	ldr	r2, [r7, #0]
 8000f96:	609a      	str	r2, [r3, #8]
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CPAR, SrcAddress);
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CMAR, DstAddress);
  }
}
 8000f98:	e011      	b.n	8000fbe <LL_DMA_ConfigAddresses+0x62>
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CPAR, SrcAddress);
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	3b01      	subs	r3, #1
 8000f9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000fc8 <LL_DMA_ConfigAddresses+0x6c>)
 8000fa0:	5cd3      	ldrb	r3, [r2, r3]
 8000fa2:	001a      	movs	r2, r3
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	18d3      	adds	r3, r2, r3
 8000fa8:	687a      	ldr	r2, [r7, #4]
 8000faa:	609a      	str	r2, [r3, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CMAR, DstAddress);
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	3b01      	subs	r3, #1
 8000fb0:	4a05      	ldr	r2, [pc, #20]	@ (8000fc8 <LL_DMA_ConfigAddresses+0x6c>)
 8000fb2:	5cd3      	ldrb	r3, [r2, r3]
 8000fb4:	001a      	movs	r2, r3
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	18d3      	adds	r3, r2, r3
 8000fba:	683a      	ldr	r2, [r7, #0]
 8000fbc:	60da      	str	r2, [r3, #12]
}
 8000fbe:	46c0      	nop			@ (mov r8, r8)
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	b006      	add	sp, #24
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	46c0      	nop			@ (mov r8, r8)
 8000fc8:	08009278 	.word	0x08009278

08000fcc <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMAMUX_REQ_USART2_TX
  * @note (*) Availability depends on devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Request)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	607a      	str	r2, [r7, #4]
  (void)(DMAx);
  MODIFY_REG(((DMAMUX_Channel_TypeDef *)((uint32_t)DMAMUX1_Channel0 + (DMAMUX_CCR_SIZE * (Channel - 1UL))))->CCR,
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	4a0a      	ldr	r2, [pc, #40]	@ (8001004 <LL_DMA_SetPeriphRequest+0x38>)
 8000fdc:	4694      	mov	ip, r2
 8000fde:	4463      	add	r3, ip
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	22ff      	movs	r2, #255	@ 0xff
 8000fe6:	4393      	bics	r3, r2
 8000fe8:	0019      	movs	r1, r3
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	4a05      	ldr	r2, [pc, #20]	@ (8001004 <LL_DMA_SetPeriphRequest+0x38>)
 8000fee:	4694      	mov	ip, r2
 8000ff0:	4463      	add	r3, ip
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	430a      	orrs	r2, r1
 8000ff8:	601a      	str	r2, [r3, #0]
             DMAMUX_CxCR_DMAREQ_ID, Request);
}
 8000ffa:	46c0      	nop			@ (mov r8, r8)
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	b004      	add	sp, #16
 8001000:	bd80      	pop	{r7, pc}
 8001002:	46c0      	nop			@ (mov r8, r8)
 8001004:	100081ff 	.word	0x100081ff

08001008 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_5 (*)
  * @note (*) Availability depends on devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_TCIE);
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	3b01      	subs	r3, #1
 800101a:	4a0a      	ldr	r2, [pc, #40]	@ (8001044 <LL_DMA_EnableIT_TC+0x3c>)
 800101c:	5cd3      	ldrb	r3, [r2, r3]
 800101e:	001a      	movs	r2, r3
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	18d3      	adds	r3, r2, r3
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	3b01      	subs	r3, #1
 800102a:	4906      	ldr	r1, [pc, #24]	@ (8001044 <LL_DMA_EnableIT_TC+0x3c>)
 800102c:	5ccb      	ldrb	r3, [r1, r3]
 800102e:	0019      	movs	r1, r3
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	18cb      	adds	r3, r1, r3
 8001034:	2102      	movs	r1, #2
 8001036:	430a      	orrs	r2, r1
 8001038:	601a      	str	r2, [r3, #0]
}
 800103a:	46c0      	nop			@ (mov r8, r8)
 800103c:	46bd      	mov	sp, r7
 800103e:	b004      	add	sp, #16
 8001040:	bd80      	pop	{r7, pc}
 8001042:	46c0      	nop			@ (mov r8, r8)
 8001044:	08009278 	.word	0x08009278

08001048 <LL_DMA_EnableIT_HT>:
  *         @arg @ref LL_DMA_CHANNEL_5 (*)
  * @note (*) Availability depends on devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_HTIE);
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	3b01      	subs	r3, #1
 800105a:	4a0a      	ldr	r2, [pc, #40]	@ (8001084 <LL_DMA_EnableIT_HT+0x3c>)
 800105c:	5cd3      	ldrb	r3, [r2, r3]
 800105e:	001a      	movs	r2, r3
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	18d3      	adds	r3, r2, r3
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	3b01      	subs	r3, #1
 800106a:	4906      	ldr	r1, [pc, #24]	@ (8001084 <LL_DMA_EnableIT_HT+0x3c>)
 800106c:	5ccb      	ldrb	r3, [r1, r3]
 800106e:	0019      	movs	r1, r3
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	18cb      	adds	r3, r1, r3
 8001074:	2104      	movs	r1, #4
 8001076:	430a      	orrs	r2, r1
 8001078:	601a      	str	r2, [r3, #0]
}
 800107a:	46c0      	nop			@ (mov r8, r8)
 800107c:	46bd      	mov	sp, r7
 800107e:	b004      	add	sp, #16
 8001080:	bd80      	pop	{r7, pc}
 8001082:	46c0      	nop			@ (mov r8, r8)
 8001084:	08009278 	.word	0x08009278

08001088 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_5 (*)
  * @note (*) Availability depends on devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_TEIE);
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	3b01      	subs	r3, #1
 800109a:	4a0a      	ldr	r2, [pc, #40]	@ (80010c4 <LL_DMA_EnableIT_TE+0x3c>)
 800109c:	5cd3      	ldrb	r3, [r2, r3]
 800109e:	001a      	movs	r2, r3
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	18d3      	adds	r3, r2, r3
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	3b01      	subs	r3, #1
 80010aa:	4906      	ldr	r1, [pc, #24]	@ (80010c4 <LL_DMA_EnableIT_TE+0x3c>)
 80010ac:	5ccb      	ldrb	r3, [r1, r3]
 80010ae:	0019      	movs	r1, r3
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	18cb      	adds	r3, r1, r3
 80010b4:	2108      	movs	r1, #8
 80010b6:	430a      	orrs	r2, r1
 80010b8:	601a      	str	r2, [r3, #0]
}
 80010ba:	46c0      	nop			@ (mov r8, r8)
 80010bc:	46bd      	mov	sp, r7
 80010be:	b004      	add	sp, #16
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	46c0      	nop			@ (mov r8, r8)
 80010c4:	08009278 	.word	0x08009278

080010c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010ca:	b089      	sub	sp, #36	@ 0x24
 80010cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	int8_t modbus_status = HAL_OK;
 80010ce:	231f      	movs	r3, #31
 80010d0:	18fb      	adds	r3, r7, r3
 80010d2:	2200      	movs	r2, #0
 80010d4:	701a      	strb	r2, [r3, #0]
	int8_t i2c_status = HAL_OK;
 80010d6:	231d      	movs	r3, #29
 80010d8:	18fb      	adds	r3, r7, r3
 80010da:	2200      	movs	r2, #0
 80010dc:	701a      	strb	r2, [r3, #0]
	int8_t spi_status = HAL_OK;
 80010de:	231c      	movs	r3, #28
 80010e0:	18fb      	adds	r3, r7, r3
 80010e2:	2200      	movs	r2, #0
 80010e4:	701a      	strb	r2, [r3, #0]
	drv_command_t command = DEFAULT_DRV_COMMAND;
 80010e6:	2018      	movs	r0, #24
 80010e8:	183b      	adds	r3, r7, r0
 80010ea:	2200      	movs	r2, #0
 80010ec:	701a      	strb	r2, [r3, #0]
 80010ee:	183b      	adds	r3, r7, r0
 80010f0:	781a      	ldrb	r2, [r3, #0]
 80010f2:	2103      	movs	r1, #3
 80010f4:	438a      	bics	r2, r1
 80010f6:	1c11      	adds	r1, r2, #0
 80010f8:	2201      	movs	r2, #1
 80010fa:	430a      	orrs	r2, r1
 80010fc:	701a      	strb	r2, [r3, #0]
 80010fe:	183b      	adds	r3, r7, r0
 8001100:	781a      	ldrb	r2, [r3, #0]
 8001102:	2118      	movs	r1, #24
 8001104:	438a      	bics	r2, r1
 8001106:	1c11      	adds	r1, r2, #0
 8001108:	2208      	movs	r2, #8
 800110a:	430a      	orrs	r2, r1
 800110c:	701a      	strb	r2, [r3, #0]
	drv_spi_in_t spi_in = DEFAULT_DRV_SPI_IN;
 800110e:	2314      	movs	r3, #20
 8001110:	18fb      	adds	r3, r7, r3
 8001112:	4ac1      	ldr	r2, [pc, #772]	@ (8001418 <main+0x350>)
 8001114:	7812      	ldrb	r2, [r2, #0]
 8001116:	701a      	strb	r2, [r3, #0]
	uint8_t modbus_tx_len = 0;
 8001118:	2313      	movs	r3, #19
 800111a:	18fb      	adds	r3, r7, r3
 800111c:	2200      	movs	r2, #0
 800111e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001120:	f002 f993 	bl	800344a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001124:	f000 fa2e 	bl	8001584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001128:	f000 fe02 	bl	8001d30 <MX_GPIO_Init>
  MX_DMA_Init();
 800112c:	f000 fdd4 	bl	8001cd8 <MX_DMA_Init>
  MX_ADC1_Init();
 8001130:	f000 fa66 	bl	8001600 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001134:	f000 fc32 	bl	800199c <MX_I2C1_Init>
  MX_SPI1_Init();
 8001138:	f000 fc70 	bl	8001a1c <MX_SPI1_Init>
  MX_TIM1_Init();
 800113c:	f000 fcac 	bl	8001a98 <MX_TIM1_Init>
  MX_TIM14_Init();
 8001140:	f000 fd54 	bl	8001bec <MX_TIM14_Init>
  MX_USART1_UART_Init();
 8001144:	f000 fd78 	bl	8001c38 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // Initialize the pin mapping table
  pin_map[0] = Actuator_A_EN_Pin;
 8001148:	4bb4      	ldr	r3, [pc, #720]	@ (800141c <main+0x354>)
 800114a:	2240      	movs	r2, #64	@ 0x40
 800114c:	801a      	strh	r2, [r3, #0]
  pin_map[1] = Actuator_B_EN_Pin;
 800114e:	4bb3      	ldr	r3, [pc, #716]	@ (800141c <main+0x354>)
 8001150:	2280      	movs	r2, #128	@ 0x80
 8001152:	805a      	strh	r2, [r3, #2]
  pin_map[2] = Actuator_C_EN_Pin;
 8001154:	4bb1      	ldr	r3, [pc, #708]	@ (800141c <main+0x354>)
 8001156:	2201      	movs	r2, #1
 8001158:	809a      	strh	r2, [r3, #4]

  port_map[0] = Actuator_A_EN_GPIO_Port;
 800115a:	4bb1      	ldr	r3, [pc, #708]	@ (8001420 <main+0x358>)
 800115c:	4ab1      	ldr	r2, [pc, #708]	@ (8001424 <main+0x35c>)
 800115e:	601a      	str	r2, [r3, #0]
  port_map[1] = Actuator_B_EN_GPIO_Port;
 8001160:	4baf      	ldr	r3, [pc, #700]	@ (8001420 <main+0x358>)
 8001162:	4ab0      	ldr	r2, [pc, #704]	@ (8001424 <main+0x35c>)
 8001164:	605a      	str	r2, [r3, #4]
  port_map[2] = Actuator_C_EN_GPIO_Port;
 8001166:	4bae      	ldr	r3, [pc, #696]	@ (8001420 <main+0x358>)
 8001168:	4aaf      	ldr	r2, [pc, #700]	@ (8001428 <main+0x360>)
 800116a:	609a      	str	r2, [r3, #8]

  // Initialize the PID constraints to defaults
  pid_constraints.Kp = 1;              // Proportional gain constant
 800116c:	4baf      	ldr	r3, [pc, #700]	@ (800142c <main+0x364>)
 800116e:	22fe      	movs	r2, #254	@ 0xfe
 8001170:	0592      	lsls	r2, r2, #22
 8001172:	601a      	str	r2, [r3, #0]
  pid_constraints.Ki = 0.1;            // Integral gain constant
 8001174:	4bad      	ldr	r3, [pc, #692]	@ (800142c <main+0x364>)
 8001176:	4aae      	ldr	r2, [pc, #696]	@ (8001430 <main+0x368>)
 8001178:	605a      	str	r2, [r3, #4]
  pid_constraints.Kd = 5;              // Derivative gain constant
 800117a:	4bac      	ldr	r3, [pc, #688]	@ (800142c <main+0x364>)
 800117c:	4aad      	ldr	r2, [pc, #692]	@ (8001434 <main+0x36c>)
 800117e:	609a      	str	r2, [r3, #8]
  pid_constraints.Kaw = 0.1;           // Anti-windup gain constant
 8001180:	4baa      	ldr	r3, [pc, #680]	@ (800142c <main+0x364>)
 8001182:	4aab      	ldr	r2, [pc, #684]	@ (8001430 <main+0x368>)
 8001184:	60da      	str	r2, [r3, #12]
  pid_constraints.T_C = 1;             // Time constant for derivative filtering
 8001186:	4ba9      	ldr	r3, [pc, #676]	@ (800142c <main+0x364>)
 8001188:	22fe      	movs	r2, #254	@ 0xfe
 800118a:	0592      	lsls	r2, r2, #22
 800118c:	611a      	str	r2, [r3, #16]
  pid_constraints.T = 100;             // Time step
 800118e:	4ba7      	ldr	r3, [pc, #668]	@ (800142c <main+0x364>)
 8001190:	4aa9      	ldr	r2, [pc, #676]	@ (8001438 <main+0x370>)
 8001192:	615a      	str	r2, [r3, #20]
  pid_constraints.max = 100;           // Max command
 8001194:	4ba5      	ldr	r3, [pc, #660]	@ (800142c <main+0x364>)
 8001196:	4aa8      	ldr	r2, [pc, #672]	@ (8001438 <main+0x370>)
 8001198:	619a      	str	r2, [r3, #24]
  pid_constraints.min = 0;             // Min command
 800119a:	4ba4      	ldr	r3, [pc, #656]	@ (800142c <main+0x364>)
 800119c:	2200      	movs	r2, #0
 800119e:	61da      	str	r2, [r3, #28]
  pid_constraints.max_rate = 40;       // Max rate of change of the command
 80011a0:	4ba2      	ldr	r3, [pc, #648]	@ (800142c <main+0x364>)
 80011a2:	4aa6      	ldr	r2, [pc, #664]	@ (800143c <main+0x374>)
 80011a4:	621a      	str	r2, [r3, #32]
  pid_constraints.integral = 0;        // Integral term
 80011a6:	4ba1      	ldr	r3, [pc, #644]	@ (800142c <main+0x364>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	625a      	str	r2, [r3, #36]	@ 0x24
  pid_constraints.err_prev = 0;        // Previous error
 80011ac:	4b9f      	ldr	r3, [pc, #636]	@ (800142c <main+0x364>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	629a      	str	r2, [r3, #40]	@ 0x28
  pid_constraints.deriv_prev = 0;      // Previous derivative
 80011b2:	4b9e      	ldr	r3, [pc, #632]	@ (800142c <main+0x364>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  pid_constraints.command_sat_prev = 0;// Previous saturated command
 80011b8:	4b9c      	ldr	r3, [pc, #624]	@ (800142c <main+0x364>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	631a      	str	r2, [r3, #48]	@ 0x30
  pid_constraints.command_prev = 0;    // Previous command
 80011be:	4b9b      	ldr	r3, [pc, #620]	@ (800142c <main+0x364>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	635a      	str	r2, [r3, #52]	@ 0x34

  if(modbus_set_rx() != HAL_OK)
 80011c4:	f001 fac8 	bl	8002758 <modbus_set_rx>
 80011c8:	1e03      	subs	r3, r0, #0
 80011ca:	d001      	beq.n	80011d0 <main+0x108>
  {
	  Error_Handler();
 80011cc:	f000 fe82 	bl	8001ed4 <Error_Handler>
//	  LL_ADC_REG_StartConversion(ADC1);
//  }
//  bno055_init();


  	if(DRV_Init(DRV8244P_Q1) != HAL_OK)
 80011d0:	2046      	movs	r0, #70	@ 0x46
 80011d2:	f7ff f927 	bl	8000424 <DRV_Init>
 80011d6:	1e03      	subs	r3, r0, #0
 80011d8:	d001      	beq.n	80011de <main+0x116>
  	{
  		Error_Handler();
 80011da:	f000 fe7b 	bl	8001ed4 <Error_Handler>
   */
//  uint8_t target_actuator = 0;

  while (1)
  {
	  if(modbus_rx())
 80011de:	f000 ff4f 	bl	8002080 <modbus_rx>
 80011e2:	1e03      	subs	r3, r0, #0
 80011e4:	d100      	bne.n	80011e8 <main+0x120>
 80011e6:	e09b      	b.n	8001320 <main+0x258>
	  {
		  if(get_rx_buffer(0) == holding_register_database[0]) // Check Slave ID
 80011e8:	2000      	movs	r0, #0
 80011ea:	f001 fbc1 	bl	8002970 <get_rx_buffer>
 80011ee:	0003      	movs	r3, r0
 80011f0:	001a      	movs	r2, r3
 80011f2:	4b93      	ldr	r3, [pc, #588]	@ (8001440 <main+0x378>)
 80011f4:	881b      	ldrh	r3, [r3, #0]
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d139      	bne.n	800126e <main+0x1a6>
		  {
			  switch(get_rx_buffer(1))
 80011fa:	2001      	movs	r0, #1
 80011fc:	f001 fbb8 	bl	8002970 <get_rx_buffer>
 8001200:	0003      	movs	r3, r0
 8001202:	2b03      	cmp	r3, #3
 8001204:	d002      	beq.n	800120c <main+0x144>
 8001206:	2b10      	cmp	r3, #16
 8001208:	d00a      	beq.n	8001220 <main+0x158>
 800120a:	e013      	b.n	8001234 <main+0x16c>
			  {
				  case 0x03:
				  {
					  // Return holding registers
					  modbus_status = return_holding_registers(&modbus_tx_len);
 800120c:	231f      	movs	r3, #31
 800120e:	18fc      	adds	r4, r7, r3
 8001210:	2313      	movs	r3, #19
 8001212:	18fb      	adds	r3, r7, r3
 8001214:	0018      	movs	r0, r3
 8001216:	f000 ff45 	bl	80020a4 <return_holding_registers>
 800121a:	0003      	movs	r3, r0
 800121c:	7023      	strb	r3, [r4, #0]
					  break;
 800121e:	e011      	b.n	8001244 <main+0x17c>
				  }
				  case 0x10:
				  {
					  // Write holding registers
					  modbus_status = edit_multiple_registers(&modbus_tx_len);
 8001220:	231f      	movs	r3, #31
 8001222:	18fc      	adds	r4, r7, r3
 8001224:	2313      	movs	r3, #19
 8001226:	18fb      	adds	r3, r7, r3
 8001228:	0018      	movs	r0, r3
 800122a:	f000 ffe7 	bl	80021fc <edit_multiple_registers>
 800122e:	0003      	movs	r3, r0
 8001230:	7023      	strb	r3, [r4, #0]
					  break;
 8001232:	e007      	b.n	8001244 <main+0x17c>
				  }
				  default:
				  {
					  modbus_status = modbus_exception(MB_ILLEGAL_FUNCTION);
 8001234:	231f      	movs	r3, #31
 8001236:	18fc      	adds	r4, r7, r3
 8001238:	2004      	movs	r0, #4
 800123a:	f001 f8e1 	bl	8002400 <modbus_exception>
 800123e:	0003      	movs	r3, r0
 8001240:	7023      	strb	r3, [r4, #0]
					  break;
 8001242:	46c0      	nop			@ (mov r8, r8)
				  }
			  }
			  if(modbus_status != 0)
 8001244:	211f      	movs	r1, #31
 8001246:	187b      	adds	r3, r7, r1
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	b25b      	sxtb	r3, r3
 800124c:	2b00      	cmp	r3, #0
 800124e:	d04d      	beq.n	80012ec <main+0x224>
			  {
				  holding_register_database[MB_ERRORS] |= 1U << (modbus_status + (MB_FATAL_ERROR - 1));
 8001250:	4b7b      	ldr	r3, [pc, #492]	@ (8001440 <main+0x378>)
 8001252:	891a      	ldrh	r2, [r3, #8]
 8001254:	187b      	adds	r3, r7, r1
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	b25b      	sxtb	r3, r3
 800125a:	3314      	adds	r3, #20
 800125c:	2101      	movs	r1, #1
 800125e:	4099      	lsls	r1, r3
 8001260:	000b      	movs	r3, r1
 8001262:	b29b      	uxth	r3, r3
 8001264:	4313      	orrs	r3, r2
 8001266:	b29a      	uxth	r2, r3
 8001268:	4b75      	ldr	r3, [pc, #468]	@ (8001440 <main+0x378>)
 800126a:	811a      	strh	r2, [r3, #8]
 800126c:	e03e      	b.n	80012ec <main+0x224>
			  }
		  }
		  // Special case where you retrieve the modbus ID
		  else if((get_rx_buffer(0) == 0xFF) && // modbus_id = 0xFF = 255
 800126e:	2000      	movs	r0, #0
 8001270:	f001 fb7e 	bl	8002970 <get_rx_buffer>
 8001274:	0003      	movs	r3, r0
 8001276:	2bff      	cmp	r3, #255	@ 0xff
 8001278:	d138      	bne.n	80012ec <main+0x224>
			(get_rx_buffer(1) == 0x03) && // Function code = read_holding_registers
 800127a:	2001      	movs	r0, #1
 800127c:	f001 fb78 	bl	8002970 <get_rx_buffer>
 8001280:	0003      	movs	r3, r0
		  else if((get_rx_buffer(0) == 0xFF) && // modbus_id = 0xFF = 255
 8001282:	2b03      	cmp	r3, #3
 8001284:	d132      	bne.n	80012ec <main+0x224>
			(((get_rx_buffer(2) << 8) | get_rx_buffer(3)) == 0x00) && // Address to read = 0
 8001286:	2002      	movs	r0, #2
 8001288:	f001 fb72 	bl	8002970 <get_rx_buffer>
 800128c:	0003      	movs	r3, r0
 800128e:	021c      	lsls	r4, r3, #8
 8001290:	2003      	movs	r0, #3
 8001292:	f001 fb6d 	bl	8002970 <get_rx_buffer>
 8001296:	0003      	movs	r3, r0
 8001298:	4323      	orrs	r3, r4
			(get_rx_buffer(1) == 0x03) && // Function code = read_holding_registers
 800129a:	d127      	bne.n	80012ec <main+0x224>
			(((get_rx_buffer(4) << 8) | get_rx_buffer(5)) == 1)) // # of registers to read = 1
 800129c:	2004      	movs	r0, #4
 800129e:	f001 fb67 	bl	8002970 <get_rx_buffer>
 80012a2:	0003      	movs	r3, r0
 80012a4:	021c      	lsls	r4, r3, #8
 80012a6:	2005      	movs	r0, #5
 80012a8:	f001 fb62 	bl	8002970 <get_rx_buffer>
 80012ac:	0003      	movs	r3, r0
 80012ae:	4323      	orrs	r3, r4
			(((get_rx_buffer(2) << 8) | get_rx_buffer(3)) == 0x00) && // Address to read = 0
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d11b      	bne.n	80012ec <main+0x224>
		  {

			  modbus_status = return_holding_registers(&modbus_tx_len);
 80012b4:	251f      	movs	r5, #31
 80012b6:	197c      	adds	r4, r7, r5
 80012b8:	2313      	movs	r3, #19
 80012ba:	18fb      	adds	r3, r7, r3
 80012bc:	0018      	movs	r0, r3
 80012be:	f000 fef1 	bl	80020a4 <return_holding_registers>
 80012c2:	0003      	movs	r3, r0
 80012c4:	7023      	strb	r3, [r4, #0]
			  if(modbus_status != 0)
 80012c6:	197b      	adds	r3, r7, r5
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	b25b      	sxtb	r3, r3
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d00d      	beq.n	80012ec <main+0x224>
			  {
				  holding_register_database[MB_ERRORS] |= 1U << ((modbus_status - 1) + MB_FATAL_ERROR);
 80012d0:	4b5b      	ldr	r3, [pc, #364]	@ (8001440 <main+0x378>)
 80012d2:	891a      	ldrh	r2, [r3, #8]
 80012d4:	197b      	adds	r3, r7, r5
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	b25b      	sxtb	r3, r3
 80012da:	3314      	adds	r3, #20
 80012dc:	2101      	movs	r1, #1
 80012de:	4099      	lsls	r1, r3
 80012e0:	000b      	movs	r3, r1
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	4313      	orrs	r3, r2
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	4b55      	ldr	r3, [pc, #340]	@ (8001440 <main+0x378>)
 80012ea:	811a      	strh	r2, [r3, #8]
			  }
		  }
		  modbus_status = modbus_set_rx();
 80012ec:	251f      	movs	r5, #31
 80012ee:	197c      	adds	r4, r7, r5
 80012f0:	f001 fa32 	bl	8002758 <modbus_set_rx>
 80012f4:	0003      	movs	r3, r0
 80012f6:	7023      	strb	r3, [r4, #0]
		  if(modbus_status != 0)
 80012f8:	0029      	movs	r1, r5
 80012fa:	187b      	adds	r3, r7, r1
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	b25b      	sxtb	r3, r3
 8001300:	2b00      	cmp	r3, #0
 8001302:	d00d      	beq.n	8001320 <main+0x258>
		  {
			  holding_register_database[MB_ERRORS] |= 1U << ((modbus_status - 1) + MB_FATAL_ERROR);
 8001304:	4b4e      	ldr	r3, [pc, #312]	@ (8001440 <main+0x378>)
 8001306:	891a      	ldrh	r2, [r3, #8]
 8001308:	187b      	adds	r3, r7, r1
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	b25b      	sxtb	r3, r3
 800130e:	3314      	adds	r3, #20
 8001310:	2101      	movs	r1, #1
 8001312:	4099      	lsls	r1, r3
 8001314:	000b      	movs	r3, r1
 8001316:	b29b      	uxth	r3, r3
 8001318:	4313      	orrs	r3, r2
 800131a:	b29a      	uxth	r2, r3
 800131c:	4b48      	ldr	r3, [pc, #288]	@ (8001440 <main+0x378>)
 800131e:	811a      	strh	r2, [r3, #8]
		  }
	  }
	  modbus_status = monitor_modbus();
 8001320:	251f      	movs	r5, #31
 8001322:	197c      	adds	r4, r7, r5
 8001324:	f001 fa3a 	bl	800279c <monitor_modbus>
 8001328:	0003      	movs	r3, r0
 800132a:	7023      	strb	r3, [r4, #0]
	  if(modbus_status != HAL_OK && modbus_status != HAL_BUSY)
 800132c:	197b      	adds	r3, r7, r5
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	b25b      	sxtb	r3, r3
 8001332:	2b00      	cmp	r3, #0
 8001334:	d100      	bne.n	8001338 <main+0x270>
 8001336:	e06b      	b.n	8001410 <main+0x348>
 8001338:	197b      	adds	r3, r7, r5
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	b25b      	sxtb	r3, r3
 800133e:	2b02      	cmp	r3, #2
 8001340:	d066      	beq.n	8001410 <main+0x348>
	  {
		  switch(modbus_status)
 8001342:	197b      	adds	r3, r7, r5
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	b25b      	sxtb	r3, r3
 8001348:	2b15      	cmp	r3, #21
 800134a:	d05a      	beq.n	8001402 <main+0x33a>
 800134c:	dd00      	ble.n	8001350 <main+0x288>
 800134e:	e07a      	b.n	8001446 <main+0x37e>
 8001350:	2b14      	cmp	r3, #20
 8001352:	d035      	beq.n	80013c0 <main+0x2f8>
 8001354:	dd00      	ble.n	8001358 <main+0x290>
 8001356:	e076      	b.n	8001446 <main+0x37e>
 8001358:	2b12      	cmp	r3, #18
 800135a:	d15b      	bne.n	8001414 <main+0x34c>
		  {
			  case MB_TX_TIMEOUT:
			  {
				  for(uint8_t i = 0; i < holding_register_database[MB_TRANSMIT_RETRIES]; i++)
 800135c:	231e      	movs	r3, #30
 800135e:	18fb      	adds	r3, r7, r3
 8001360:	2200      	movs	r2, #0
 8001362:	701a      	strb	r2, [r3, #0]
 8001364:	e023      	b.n	80013ae <main+0x2e6>
				  {
					  modbus_status = modbus_send(modbus_tx_len);
 8001366:	2313      	movs	r3, #19
 8001368:	18fb      	adds	r3, r7, r3
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	251f      	movs	r5, #31
 800136e:	197c      	adds	r4, r7, r5
 8001370:	0018      	movs	r0, r3
 8001372:	f001 f92d 	bl	80025d0 <modbus_send>
 8001376:	0003      	movs	r3, r0
 8001378:	7023      	strb	r3, [r4, #0]
					  if(modbus_status != HAL_OK)
 800137a:	0029      	movs	r1, r5
 800137c:	187b      	adds	r3, r7, r1
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	b25b      	sxtb	r3, r3
 8001382:	2b00      	cmp	r3, #0
 8001384:	d00d      	beq.n	80013a2 <main+0x2da>
					  {
						  holding_register_database[MB_ERRORS] |= 1U << ((modbus_status - 1) + MB_FATAL_ERROR);
 8001386:	4b2e      	ldr	r3, [pc, #184]	@ (8001440 <main+0x378>)
 8001388:	891a      	ldrh	r2, [r3, #8]
 800138a:	187b      	adds	r3, r7, r1
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	b25b      	sxtb	r3, r3
 8001390:	3314      	adds	r3, #20
 8001392:	2101      	movs	r1, #1
 8001394:	4099      	lsls	r1, r3
 8001396:	000b      	movs	r3, r1
 8001398:	b29b      	uxth	r3, r3
 800139a:	4313      	orrs	r3, r2
 800139c:	b29a      	uxth	r2, r3
 800139e:	4b28      	ldr	r3, [pc, #160]	@ (8001440 <main+0x378>)
 80013a0:	811a      	strh	r2, [r3, #8]
				  for(uint8_t i = 0; i < holding_register_database[MB_TRANSMIT_RETRIES]; i++)
 80013a2:	211e      	movs	r1, #30
 80013a4:	187b      	adds	r3, r7, r1
 80013a6:	781a      	ldrb	r2, [r3, #0]
 80013a8:	187b      	adds	r3, r7, r1
 80013aa:	3201      	adds	r2, #1
 80013ac:	701a      	strb	r2, [r3, #0]
 80013ae:	231e      	movs	r3, #30
 80013b0:	18fb      	adds	r3, r7, r3
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	b29a      	uxth	r2, r3
 80013b6:	4b22      	ldr	r3, [pc, #136]	@ (8001440 <main+0x378>)
 80013b8:	88db      	ldrh	r3, [r3, #6]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d3d3      	bcc.n	8001366 <main+0x29e>
					  }
				  }
				  break;
 80013be:	e042      	b.n	8001446 <main+0x37e>
				  // Error only relates to Modbus Master Nodes
				  break;
			  }
			  case MB_UART_ERROR:
			  {
				  modbus_status = modbus_set_rx();
 80013c0:	251f      	movs	r5, #31
 80013c2:	197c      	adds	r4, r7, r5
 80013c4:	f001 f9c8 	bl	8002758 <modbus_set_rx>
 80013c8:	0003      	movs	r3, r0
 80013ca:	7023      	strb	r3, [r4, #0]
				  if(modbus_status != 0)
 80013cc:	0029      	movs	r1, r5
 80013ce:	187b      	adds	r3, r7, r1
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	b25b      	sxtb	r3, r3
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d035      	beq.n	8001444 <main+0x37c>
				  {
					  holding_register_database[MB_ERRORS] |= 1U << ((modbus_status - 1) + MB_FATAL_ERROR);
 80013d8:	4b19      	ldr	r3, [pc, #100]	@ (8001440 <main+0x378>)
 80013da:	891a      	ldrh	r2, [r3, #8]
 80013dc:	187b      	adds	r3, r7, r1
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	b25b      	sxtb	r3, r3
 80013e2:	3314      	adds	r3, #20
 80013e4:	2101      	movs	r1, #1
 80013e6:	4099      	lsls	r1, r3
 80013e8:	000b      	movs	r3, r1
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	4313      	orrs	r3, r2
 80013ee:	b29a      	uxth	r2, r3
 80013f0:	4b13      	ldr	r3, [pc, #76]	@ (8001440 <main+0x378>)
 80013f2:	811a      	strh	r2, [r3, #8]
				  }
				  break;
 80013f4:	e026      	b.n	8001444 <main+0x37c>
			  }
			  case MB_FATAL_ERROR:
			  {
				  while(modbus_status != HAL_OK)
				  {
					  modbus_status = modbus_reset();
 80013f6:	231f      	movs	r3, #31
 80013f8:	18fc      	adds	r4, r7, r3
 80013fa:	f001 f93f 	bl	800267c <modbus_reset>
 80013fe:	0003      	movs	r3, r0
 8001400:	7023      	strb	r3, [r4, #0]
				  while(modbus_status != HAL_OK)
 8001402:	231f      	movs	r3, #31
 8001404:	18fb      	adds	r3, r7, r3
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	b25b      	sxtb	r3, r3
 800140a:	2b00      	cmp	r3, #0
 800140c:	d1f3      	bne.n	80013f6 <main+0x32e>
				  }
				  break;
 800140e:	e01a      	b.n	8001446 <main+0x37e>
			  }
			  default:
 8001410:	46c0      	nop			@ (mov r8, r8)
 8001412:	e018      	b.n	8001446 <main+0x37e>
				  break;
 8001414:	46c0      	nop			@ (mov r8, r8)
 8001416:	e016      	b.n	8001446 <main+0x37e>
 8001418:	08009274 	.word	0x08009274
 800141c:	2000045c 	.word	0x2000045c
 8001420:	20000464 	.word	0x20000464
 8001424:	50000800 	.word	0x50000800
 8001428:	50000400 	.word	0x50000400
 800142c:	20000424 	.word	0x20000424
 8001430:	3dcccccd 	.word	0x3dcccccd
 8001434:	40a00000 	.word	0x40a00000
 8001438:	42c80000 	.word	0x42c80000
 800143c:	42200000 	.word	0x42200000
 8001440:	20000000 	.word	0x20000000
				  break;
 8001444:	46c0      	nop			@ (mov r8, r8)
	  // TEST CODE START

	  // DRV8244 Testing
	  // PWM Actuator Test
//	  HAL_GPIO_WritePin(Actuator_A_EN_GPIO_Port, Actuator_A_EN_Pin, GPIO_PIN_SET);
	  TIM1->CCR1 = 10;
 8001446:	4b4b      	ldr	r3, [pc, #300]	@ (8001574 <main+0x4ac>)
 8001448:	220a      	movs	r2, #10
 800144a:	635a      	str	r2, [r3, #52]	@ 0x34
	  uint8_t tx_data[2];
	  uint8_t rx_data[2];

		// Independent Mode Test
		// Unlock the SPI_IN register. Refer to section 8.6.1.5
		command.spi_in_lock = SPI_IN_UNLOCK;
 800144c:	2018      	movs	r0, #24
 800144e:	183b      	adds	r3, r7, r0
 8001450:	781a      	ldrb	r2, [r3, #0]
 8001452:	2118      	movs	r1, #24
 8001454:	438a      	bics	r2, r1
 8001456:	1c11      	adds	r1, r2, #0
 8001458:	2210      	movs	r2, #16
 800145a:	430a      	orrs	r2, r1
 800145c:	701a      	strb	r2, [r3, #0]
		spi_status = DRV_SetCommand(&command);
 800145e:	251c      	movs	r5, #28
 8001460:	197c      	adds	r4, r7, r5
 8001462:	0006      	movs	r6, r0
 8001464:	183b      	adds	r3, r7, r0
 8001466:	0018      	movs	r0, r3
 8001468:	f7ff f9a0 	bl	80007ac <DRV_SetCommand>
 800146c:	0003      	movs	r3, r0
 800146e:	7023      	strb	r3, [r4, #0]
		spi_status |= DRV_GetCommand(&command);
 8001470:	0034      	movs	r4, r6
 8001472:	193b      	adds	r3, r7, r4
 8001474:	0018      	movs	r0, r3
 8001476:	f7ff f94f 	bl	8000718 <DRV_GetCommand>
 800147a:	0003      	movs	r3, r0
 800147c:	0019      	movs	r1, r3
 800147e:	197b      	adds	r3, r7, r5
 8001480:	197a      	adds	r2, r7, r5
 8001482:	7812      	ldrb	r2, [r2, #0]
 8001484:	430a      	orrs	r2, r1
 8001486:	701a      	strb	r2, [r3, #0]

		if(spi_status == HAL_OK && command.spi_in_lock == SPI_IN_UNLOCK)
 8001488:	197b      	adds	r3, r7, r5
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	b25b      	sxtb	r3, r3
 800148e:	2b00      	cmp	r3, #0
 8001490:	d132      	bne.n	80014f8 <main+0x430>
 8001492:	193b      	adds	r3, r7, r4
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	2218      	movs	r2, #24
 8001498:	4013      	ands	r3, r2
 800149a:	b2db      	uxtb	r3, r3
 800149c:	2b10      	cmp	r3, #16
 800149e:	d12b      	bne.n	80014f8 <main+0x430>
		{
			// Forwards
			spi_in.s_en_in1 = 1;
 80014a0:	2014      	movs	r0, #20
 80014a2:	183b      	adds	r3, r7, r0
 80014a4:	781a      	ldrb	r2, [r3, #0]
 80014a6:	2102      	movs	r1, #2
 80014a8:	430a      	orrs	r2, r1
 80014aa:	701a      	strb	r2, [r3, #0]
			spi_status = DRV_SetSpiIn(&spi_in);
 80014ac:	197c      	adds	r4, r7, r5
 80014ae:	0006      	movs	r6, r0
 80014b0:	183b      	adds	r3, r7, r0
 80014b2:	0018      	movs	r0, r3
 80014b4:	f7ff f9f0 	bl	8000898 <DRV_SetSpiIn>
 80014b8:	0003      	movs	r3, r0
 80014ba:	7023      	strb	r3, [r4, #0]
			spi_status |= DRV_GetSpiIn(&spi_in);
 80014bc:	19bb      	adds	r3, r7, r6
 80014be:	0018      	movs	r0, r3
 80014c0:	f7ff f9aa 	bl	8000818 <DRV_GetSpiIn>
 80014c4:	0003      	movs	r3, r0
 80014c6:	0019      	movs	r1, r3
 80014c8:	197b      	adds	r3, r7, r5
 80014ca:	197a      	adds	r2, r7, r5
 80014cc:	7812      	ldrb	r2, [r2, #0]
 80014ce:	430a      	orrs	r2, r1
 80014d0:	701a      	strb	r2, [r3, #0]

			drv_fault_summary_t fault_summary;
			spi_status = DRV_GetFaultSummary(&fault_summary);
 80014d2:	197c      	adds	r4, r7, r5
 80014d4:	2308      	movs	r3, #8
 80014d6:	18fb      	adds	r3, r7, r3
 80014d8:	0018      	movs	r0, r3
 80014da:	f7ff f889 	bl	80005f0 <DRV_GetFaultSummary>
 80014de:	0003      	movs	r3, r0
 80014e0:	7023      	strb	r3, [r4, #0]
			drv_status_2_t status_2;
			spi_status |= DRV_GetStatus2(&status_2);
 80014e2:	1d3b      	adds	r3, r7, #4
 80014e4:	0018      	movs	r0, r3
 80014e6:	f7ff f8cd 	bl	8000684 <DRV_GetStatus2>
 80014ea:	0003      	movs	r3, r0
 80014ec:	0019      	movs	r1, r3
 80014ee:	197b      	adds	r3, r7, r5
 80014f0:	197a      	adds	r2, r7, r5
 80014f2:	7812      	ldrb	r2, [r2, #0]
 80014f4:	430a      	orrs	r2, r1
 80014f6:	701a      	strb	r2, [r3, #0]
		}

		HAL_Delay(1000);
 80014f8:	23fa      	movs	r3, #250	@ 0xfa
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	0018      	movs	r0, r3
 80014fe:	f002 f821 	bl	8003544 <HAL_Delay>

		// Turn off the DRV8244
		spi_in = DEFAULT_DRV_SPI_IN;
 8001502:	2114      	movs	r1, #20
 8001504:	187b      	adds	r3, r7, r1
 8001506:	4a1c      	ldr	r2, [pc, #112]	@ (8001578 <main+0x4b0>)
 8001508:	7812      	ldrb	r2, [r2, #0]
 800150a:	701a      	strb	r2, [r3, #0]
		spi_status = DRV_SetSpiIn(&spi_in);
 800150c:	251c      	movs	r5, #28
 800150e:	197c      	adds	r4, r7, r5
 8001510:	187b      	adds	r3, r7, r1
 8001512:	0018      	movs	r0, r3
 8001514:	f7ff f9c0 	bl	8000898 <DRV_SetSpiIn>
 8001518:	0003      	movs	r3, r0
 800151a:	7023      	strb	r3, [r4, #0]

		// Lock the SPI_IN register. Refer to section 8.6.1.5
		command = DEFAULT_DRV_COMMAND;
 800151c:	2018      	movs	r0, #24
 800151e:	183b      	adds	r3, r7, r0
 8001520:	2200      	movs	r2, #0
 8001522:	701a      	strb	r2, [r3, #0]
 8001524:	183b      	adds	r3, r7, r0
 8001526:	781a      	ldrb	r2, [r3, #0]
 8001528:	2103      	movs	r1, #3
 800152a:	438a      	bics	r2, r1
 800152c:	1c11      	adds	r1, r2, #0
 800152e:	2201      	movs	r2, #1
 8001530:	430a      	orrs	r2, r1
 8001532:	701a      	strb	r2, [r3, #0]
 8001534:	183b      	adds	r3, r7, r0
 8001536:	781a      	ldrb	r2, [r3, #0]
 8001538:	2118      	movs	r1, #24
 800153a:	438a      	bics	r2, r1
 800153c:	1c11      	adds	r1, r2, #0
 800153e:	2208      	movs	r2, #8
 8001540:	430a      	orrs	r2, r1
 8001542:	701a      	strb	r2, [r3, #0]
		spi_status = DRV_SetCommand(&command);
 8001544:	197c      	adds	r4, r7, r5
 8001546:	183b      	adds	r3, r7, r0
 8001548:	0018      	movs	r0, r3
 800154a:	f7ff f92f 	bl	80007ac <DRV_SetCommand>
 800154e:	0003      	movs	r3, r0
 8001550:	7023      	strb	r3, [r4, #0]

		TIM1->CCR1 = 0;
 8001552:	4b08      	ldr	r3, [pc, #32]	@ (8001574 <main+0x4ac>)
 8001554:	2200      	movs	r2, #0
 8001556:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_Delay(100);
 8001558:	2064      	movs	r0, #100	@ 0x64
 800155a:	f001 fff3 	bl	8003544 <HAL_Delay>
		HAL_GPIO_WritePin(Actuator_A_EN_GPIO_Port, Actuator_A_EN_Pin, GPIO_PIN_RESET);
 800155e:	4b07      	ldr	r3, [pc, #28]	@ (800157c <main+0x4b4>)
 8001560:	2200      	movs	r2, #0
 8001562:	2140      	movs	r1, #64	@ 0x40
 8001564:	0018      	movs	r0, r3
 8001566:	f002 ff29 	bl	80043bc <HAL_GPIO_WritePin>

		HAL_Delay(10000);
 800156a:	4b05      	ldr	r3, [pc, #20]	@ (8001580 <main+0x4b8>)
 800156c:	0018      	movs	r0, r3
 800156e:	f001 ffe9 	bl	8003544 <HAL_Delay>
  {
 8001572:	e634      	b.n	80011de <main+0x116>
 8001574:	40012c00 	.word	0x40012c00
 8001578:	08009274 	.word	0x08009274
 800157c:	50000800 	.word	0x50000800
 8001580:	00002710 	.word	0x00002710

08001584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001584:	b590      	push	{r4, r7, lr}
 8001586:	b08f      	sub	sp, #60	@ 0x3c
 8001588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800158a:	2418      	movs	r4, #24
 800158c:	193b      	adds	r3, r7, r4
 800158e:	0018      	movs	r0, r3
 8001590:	2320      	movs	r3, #32
 8001592:	001a      	movs	r2, r3
 8001594:	2100      	movs	r1, #0
 8001596:	f007 fe2b 	bl	80091f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800159a:	1d3b      	adds	r3, r7, #4
 800159c:	0018      	movs	r0, r3
 800159e:	2314      	movs	r3, #20
 80015a0:	001a      	movs	r2, r3
 80015a2:	2100      	movs	r1, #0
 80015a4:	f007 fe24 	bl	80091f0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015a8:	193b      	adds	r3, r7, r4
 80015aa:	2201      	movs	r2, #1
 80015ac:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015ae:	193b      	adds	r3, r7, r4
 80015b0:	2280      	movs	r2, #128	@ 0x80
 80015b2:	0252      	lsls	r2, r2, #9
 80015b4:	605a      	str	r2, [r3, #4]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015b6:	193b      	adds	r3, r7, r4
 80015b8:	0018      	movs	r0, r3
 80015ba:	f003 feb7 	bl	800532c <HAL_RCC_OscConfig>
 80015be:	1e03      	subs	r3, r0, #0
 80015c0:	d001      	beq.n	80015c6 <SystemClock_Config+0x42>
  {
    Error_Handler();
 80015c2:	f000 fc87 	bl	8001ed4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015c6:	1d3b      	adds	r3, r7, #4
 80015c8:	2207      	movs	r2, #7
 80015ca:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80015cc:	1d3b      	adds	r3, r7, #4
 80015ce:	2201      	movs	r2, #1
 80015d0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80015d2:	1d3b      	adds	r3, r7, #4
 80015d4:	2200      	movs	r2, #0
 80015d6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80015d8:	1d3b      	adds	r3, r7, #4
 80015da:	2200      	movs	r2, #0
 80015dc:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80015de:	1d3b      	adds	r3, r7, #4
 80015e0:	2200      	movs	r2, #0
 80015e2:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015e4:	1d3b      	adds	r3, r7, #4
 80015e6:	2100      	movs	r1, #0
 80015e8:	0018      	movs	r0, r3
 80015ea:	f004 f8c5 	bl	8005778 <HAL_RCC_ClockConfig>
 80015ee:	1e03      	subs	r3, r0, #0
 80015f0:	d001      	beq.n	80015f6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80015f2:	f000 fc6f 	bl	8001ed4 <Error_Handler>
  }
}
 80015f6:	46c0      	nop			@ (mov r8, r8)
 80015f8:	46bd      	mov	sp, r7
 80015fa:	b00f      	add	sp, #60	@ 0x3c
 80015fc:	bd90      	pop	{r4, r7, pc}
	...

08001600 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001600:	b590      	push	{r4, r7, lr}
 8001602:	b09d      	sub	sp, #116	@ 0x74
 8001604:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8001606:	2350      	movs	r3, #80	@ 0x50
 8001608:	18fb      	adds	r3, r7, r3
 800160a:	0018      	movs	r0, r3
 800160c:	2310      	movs	r3, #16
 800160e:	001a      	movs	r2, r3
 8001610:	2100      	movs	r1, #0
 8001612:	f007 fded 	bl	80091f0 <memset>
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8001616:	2338      	movs	r3, #56	@ 0x38
 8001618:	18fb      	adds	r3, r7, r3
 800161a:	0018      	movs	r0, r3
 800161c:	2318      	movs	r3, #24
 800161e:	001a      	movs	r2, r3
 8001620:	2100      	movs	r1, #0
 8001622:	f007 fde5 	bl	80091f0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001626:	2320      	movs	r3, #32
 8001628:	18fb      	adds	r3, r7, r3
 800162a:	0018      	movs	r0, r3
 800162c:	2318      	movs	r3, #24
 800162e:	001a      	movs	r2, r3
 8001630:	2100      	movs	r1, #0
 8001632:	f007 fddd 	bl	80091f0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001636:	003b      	movs	r3, r7
 8001638:	0018      	movs	r0, r3
 800163a:	2320      	movs	r3, #32
 800163c:	001a      	movs	r2, r3
 800163e:	2100      	movs	r1, #0
 8001640:	f007 fdd6 	bl	80091f0 <memset>

  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001644:	003b      	movs	r3, r7
 8001646:	2220      	movs	r2, #32
 8001648:	601a      	str	r2, [r3, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800164a:	003b      	movs	r3, r7
 800164c:	2200      	movs	r2, #0
 800164e:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001650:	003b      	movs	r3, r7
 8001652:	0018      	movs	r0, r3
 8001654:	f004 fa36 	bl	8005ac4 <HAL_RCCEx_PeriphCLKConfig>
 8001658:	1e03      	subs	r3, r0, #0
 800165a:	d001      	beq.n	8001660 <MX_ADC1_Init+0x60>
  {
    Error_Handler();
 800165c:	f000 fc3a 	bl	8001ed4 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC);
 8001660:	2380      	movs	r3, #128	@ 0x80
 8001662:	035b      	lsls	r3, r3, #13
 8001664:	0018      	movs	r0, r3
 8001666:	f7ff faf3 	bl	8000c50 <LL_APB1_GRP2_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 800166a:	2001      	movs	r0, #1
 800166c:	f7ff fb06 	bl	8000c7c <LL_IOP_GRP1_EnableClock>
  PA5   ------> ADC1_IN5
  PA6   ------> ADC1_IN6
  PA7   ------> ADC1_IN7
  PA8   ------> ADC1_IN8
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8001670:	2420      	movs	r4, #32
 8001672:	193b      	adds	r3, r7, r4
 8001674:	2201      	movs	r2, #1
 8001676:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001678:	193b      	adds	r3, r7, r4
 800167a:	2203      	movs	r2, #3
 800167c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800167e:	193b      	adds	r3, r7, r4
 8001680:	2200      	movs	r2, #0
 8001682:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001684:	193a      	adds	r2, r7, r4
 8001686:	23a0      	movs	r3, #160	@ 0xa0
 8001688:	05db      	lsls	r3, r3, #23
 800168a:	0011      	movs	r1, r2
 800168c:	0018      	movs	r0, r3
 800168e:	f007 fd54 	bl	800913a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8001692:	193b      	adds	r3, r7, r4
 8001694:	2202      	movs	r2, #2
 8001696:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001698:	193b      	adds	r3, r7, r4
 800169a:	2203      	movs	r2, #3
 800169c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800169e:	193b      	adds	r3, r7, r4
 80016a0:	2200      	movs	r2, #0
 80016a2:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a4:	193a      	adds	r2, r7, r4
 80016a6:	23a0      	movs	r3, #160	@ 0xa0
 80016a8:	05db      	lsls	r3, r3, #23
 80016aa:	0011      	movs	r1, r2
 80016ac:	0018      	movs	r0, r3
 80016ae:	f007 fd44 	bl	800913a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 80016b2:	193b      	adds	r3, r7, r4
 80016b4:	2204      	movs	r2, #4
 80016b6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80016b8:	193b      	adds	r3, r7, r4
 80016ba:	2203      	movs	r2, #3
 80016bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80016be:	193b      	adds	r3, r7, r4
 80016c0:	2200      	movs	r2, #0
 80016c2:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c4:	193a      	adds	r2, r7, r4
 80016c6:	23a0      	movs	r3, #160	@ 0xa0
 80016c8:	05db      	lsls	r3, r3, #23
 80016ca:	0011      	movs	r1, r2
 80016cc:	0018      	movs	r0, r3
 80016ce:	f007 fd34 	bl	800913a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 80016d2:	193b      	adds	r3, r7, r4
 80016d4:	2208      	movs	r2, #8
 80016d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80016d8:	193b      	adds	r3, r7, r4
 80016da:	2203      	movs	r2, #3
 80016dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80016de:	193b      	adds	r3, r7, r4
 80016e0:	2200      	movs	r2, #0
 80016e2:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e4:	193a      	adds	r2, r7, r4
 80016e6:	23a0      	movs	r3, #160	@ 0xa0
 80016e8:	05db      	lsls	r3, r3, #23
 80016ea:	0011      	movs	r1, r2
 80016ec:	0018      	movs	r0, r3
 80016ee:	f007 fd24 	bl	800913a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 80016f2:	193b      	adds	r3, r7, r4
 80016f4:	2210      	movs	r2, #16
 80016f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80016f8:	193b      	adds	r3, r7, r4
 80016fa:	2203      	movs	r2, #3
 80016fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80016fe:	193b      	adds	r3, r7, r4
 8001700:	2200      	movs	r2, #0
 8001702:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001704:	193a      	adds	r2, r7, r4
 8001706:	23a0      	movs	r3, #160	@ 0xa0
 8001708:	05db      	lsls	r3, r3, #23
 800170a:	0011      	movs	r1, r2
 800170c:	0018      	movs	r0, r3
 800170e:	f007 fd14 	bl	800913a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8001712:	193b      	adds	r3, r7, r4
 8001714:	2220      	movs	r2, #32
 8001716:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001718:	193b      	adds	r3, r7, r4
 800171a:	2203      	movs	r2, #3
 800171c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800171e:	193b      	adds	r3, r7, r4
 8001720:	2200      	movs	r2, #0
 8001722:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001724:	193a      	adds	r2, r7, r4
 8001726:	23a0      	movs	r3, #160	@ 0xa0
 8001728:	05db      	lsls	r3, r3, #23
 800172a:	0011      	movs	r1, r2
 800172c:	0018      	movs	r0, r3
 800172e:	f007 fd04 	bl	800913a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8001732:	193b      	adds	r3, r7, r4
 8001734:	2240      	movs	r2, #64	@ 0x40
 8001736:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001738:	193b      	adds	r3, r7, r4
 800173a:	2203      	movs	r2, #3
 800173c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800173e:	193b      	adds	r3, r7, r4
 8001740:	2200      	movs	r2, #0
 8001742:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001744:	193a      	adds	r2, r7, r4
 8001746:	23a0      	movs	r3, #160	@ 0xa0
 8001748:	05db      	lsls	r3, r3, #23
 800174a:	0011      	movs	r1, r2
 800174c:	0018      	movs	r0, r3
 800174e:	f007 fcf4 	bl	800913a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8001752:	193b      	adds	r3, r7, r4
 8001754:	2280      	movs	r2, #128	@ 0x80
 8001756:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001758:	193b      	adds	r3, r7, r4
 800175a:	2203      	movs	r2, #3
 800175c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800175e:	193b      	adds	r3, r7, r4
 8001760:	2200      	movs	r2, #0
 8001762:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001764:	193a      	adds	r2, r7, r4
 8001766:	23a0      	movs	r3, #160	@ 0xa0
 8001768:	05db      	lsls	r3, r3, #23
 800176a:	0011      	movs	r1, r2
 800176c:	0018      	movs	r0, r3
 800176e:	f007 fce4 	bl	800913a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8001772:	0021      	movs	r1, r4
 8001774:	187b      	adds	r3, r7, r1
 8001776:	2280      	movs	r2, #128	@ 0x80
 8001778:	0052      	lsls	r2, r2, #1
 800177a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800177c:	187b      	adds	r3, r7, r1
 800177e:	2203      	movs	r2, #3
 8001780:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001782:	187b      	adds	r3, r7, r1
 8001784:	2200      	movs	r2, #0
 8001786:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001788:	187a      	adds	r2, r7, r1
 800178a:	23a0      	movs	r3, #160	@ 0xa0
 800178c:	05db      	lsls	r3, r3, #23
 800178e:	0011      	movs	r1, r2
 8001790:	0018      	movs	r0, r3
 8001792:	f007 fcd2 	bl	800913a <LL_GPIO_Init>

  /* ADC1 DMA Init */

  /* ADC1 Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_1, LL_DMAMUX_REQ_ADC1);
 8001796:	4b7b      	ldr	r3, [pc, #492]	@ (8001984 <MX_ADC1_Init+0x384>)
 8001798:	2205      	movs	r2, #5
 800179a:	2101      	movs	r1, #1
 800179c:	0018      	movs	r0, r3
 800179e:	f7ff fc15 	bl	8000fcc <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80017a2:	4b78      	ldr	r3, [pc, #480]	@ (8001984 <MX_ADC1_Init+0x384>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	2101      	movs	r1, #1
 80017a8:	0018      	movs	r0, r3
 80017aa:	f7ff fab1 	bl	8000d10 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_LOW);
 80017ae:	4b75      	ldr	r3, [pc, #468]	@ (8001984 <MX_ADC1_Init+0x384>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	2101      	movs	r1, #1
 80017b4:	0018      	movs	r0, r3
 80017b6:	f7ff fb89 	bl	8000ecc <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_CIRCULAR);
 80017ba:	4b72      	ldr	r3, [pc, #456]	@ (8001984 <MX_ADC1_Init+0x384>)
 80017bc:	2220      	movs	r2, #32
 80017be:	2101      	movs	r1, #1
 80017c0:	0018      	movs	r0, r3
 80017c2:	f7ff facb 	bl	8000d5c <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 80017c6:	4b6f      	ldr	r3, [pc, #444]	@ (8001984 <MX_ADC1_Init+0x384>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	2101      	movs	r1, #1
 80017cc:	0018      	movs	r0, r3
 80017ce:	f7ff fae9 	bl	8000da4 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 80017d2:	4b6c      	ldr	r3, [pc, #432]	@ (8001984 <MX_ADC1_Init+0x384>)
 80017d4:	2280      	movs	r2, #128	@ 0x80
 80017d6:	2101      	movs	r1, #1
 80017d8:	0018      	movs	r0, r3
 80017da:	f7ff fb07 	bl	8000dec <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_HALFWORD);
 80017de:	2380      	movs	r3, #128	@ 0x80
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	4868      	ldr	r0, [pc, #416]	@ (8001984 <MX_ADC1_Init+0x384>)
 80017e4:	001a      	movs	r2, r3
 80017e6:	2101      	movs	r1, #1
 80017e8:	f7ff fb24 	bl	8000e34 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_HALFWORD);
 80017ec:	2380      	movs	r3, #128	@ 0x80
 80017ee:	00db      	lsls	r3, r3, #3
 80017f0:	4864      	ldr	r0, [pc, #400]	@ (8001984 <MX_ADC1_Init+0x384>)
 80017f2:	001a      	movs	r2, r3
 80017f4:	2101      	movs	r1, #1
 80017f6:	f7ff fb43 	bl	8000e80 <LL_DMA_SetMemorySize>

  /* ADC1 interrupt Init */
  NVIC_SetPriority(ADC1_IRQn, 0);
 80017fa:	2100      	movs	r1, #0
 80017fc:	200c      	movs	r0, #12
 80017fe:	f7ff f8d1 	bl	80009a4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(ADC1_IRQn);
 8001802:	200c      	movs	r0, #12
 8001804:	f7ff f8b4 	bl	8000970 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN ADC1_Init 1 */

  /* Set DMA transfer addresses of source and destination */
  LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_1, LL_ADC_DMA_GetRegAddr(ADC1, LL_ADC_DMA_REG_REGULAR_DATA),
 8001808:	4b5f      	ldr	r3, [pc, #380]	@ (8001988 <MX_ADC1_Init+0x388>)
 800180a:	2100      	movs	r1, #0
 800180c:	0018      	movs	r0, r3
 800180e:	f7ff f937 	bl	8000a80 <LL_ADC_DMA_GetRegAddr>
 8001812:	0001      	movs	r1, r0
 8001814:	4b5d      	ldr	r3, [pc, #372]	@ (800198c <MX_ADC1_Init+0x38c>)
 8001816:	485b      	ldr	r0, [pc, #364]	@ (8001984 <MX_ADC1_Init+0x384>)
 8001818:	2200      	movs	r2, #0
 800181a:	9200      	str	r2, [sp, #0]
 800181c:	000a      	movs	r2, r1
 800181e:	2101      	movs	r1, #1
 8001820:	f7ff fb9c 	bl	8000f5c <LL_DMA_ConfigAddresses>
		  (uint32_t)&holding_register_database[ADC_0],
		  LL_DMA_DIRECTION_PERIPH_TO_MEMORY);

  /* Set DMA transfer size */
  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_1, 9);
 8001824:	4b57      	ldr	r3, [pc, #348]	@ (8001984 <MX_ADC1_Init+0x384>)
 8001826:	2209      	movs	r2, #9
 8001828:	2101      	movs	r1, #1
 800182a:	0018      	movs	r0, r3
 800182c:	f7ff fb74 	bl	8000f18 <LL_DMA_SetDataLength>

  /* Enable DMA transfer interruption: transfer complete */
  LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_1);
 8001830:	4b54      	ldr	r3, [pc, #336]	@ (8001984 <MX_ADC1_Init+0x384>)
 8001832:	2101      	movs	r1, #1
 8001834:	0018      	movs	r0, r3
 8001836:	f7ff fbe7 	bl	8001008 <LL_DMA_EnableIT_TC>

  /* Enable DMA transfer interruption: transfer half complete */
  LL_DMA_EnableIT_HT(DMA1, LL_DMA_CHANNEL_1);
 800183a:	4b52      	ldr	r3, [pc, #328]	@ (8001984 <MX_ADC1_Init+0x384>)
 800183c:	2101      	movs	r1, #1
 800183e:	0018      	movs	r0, r3
 8001840:	f7ff fc02 	bl	8001048 <LL_DMA_EnableIT_HT>

  /* Enable DMA transfer interruption: transfer error */
  LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_1);
 8001844:	4b4f      	ldr	r3, [pc, #316]	@ (8001984 <MX_ADC1_Init+0x384>)
 8001846:	2101      	movs	r1, #1
 8001848:	0018      	movs	r0, r3
 800184a:	f7ff fc1d 	bl	8001088 <LL_DMA_EnableIT_TE>

  /* Enable the DMA transfer */
  LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_1);
 800184e:	4b4d      	ldr	r3, [pc, #308]	@ (8001984 <MX_ADC1_Init+0x384>)
 8001850:	2101      	movs	r1, #1
 8001852:	0018      	movs	r0, r3
 8001854:	f7ff fa3c 	bl	8000cd0 <LL_DMA_EnableChannel>
   #define ADC_CHANNEL_CONF_RDY_TIMEOUT_MS ( 1U)
   #if (USE_TIMEOUT == 1)
   uint32_t Timeout ; /* Variable used for Timeout management */
   #endif /* USE_TIMEOUT */

  ADC_InitStruct.Clock = LL_ADC_CLOCK_SYNC_PCLK_DIV2;
 8001858:	2150      	movs	r1, #80	@ 0x50
 800185a:	187b      	adds	r3, r7, r1
 800185c:	2280      	movs	r2, #128	@ 0x80
 800185e:	05d2      	lsls	r2, r2, #23
 8001860:	601a      	str	r2, [r3, #0]
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8001862:	187b      	adds	r3, r7, r1
 8001864:	2200      	movs	r2, #0
 8001866:	605a      	str	r2, [r3, #4]
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8001868:	187b      	adds	r3, r7, r1
 800186a:	2200      	movs	r2, #0
 800186c:	609a      	str	r2, [r3, #8]
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 800186e:	187b      	adds	r3, r7, r1
 8001870:	2200      	movs	r2, #0
 8001872:	60da      	str	r2, [r3, #12]
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8001874:	187b      	adds	r3, r7, r1
 8001876:	4a44      	ldr	r2, [pc, #272]	@ (8001988 <MX_ADC1_Init+0x388>)
 8001878:	0019      	movs	r1, r3
 800187a:	0010      	movs	r0, r2
 800187c:	f007 fb0a 	bl	8008e94 <LL_ADC_Init>
  LL_ADC_REG_SetSequencerConfigurable(ADC1, LL_ADC_REG_SEQ_FIXED);
 8001880:	4b41      	ldr	r3, [pc, #260]	@ (8001988 <MX_ADC1_Init+0x388>)
 8001882:	2100      	movs	r1, #0
 8001884:	0018      	movs	r0, r3
 8001886:	f7ff f939 	bl	8000afc <LL_ADC_REG_SetSequencerConfigurable>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 800188a:	2138      	movs	r1, #56	@ 0x38
 800188c:	187b      	adds	r3, r7, r1
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
  ADC_REG_InitStruct.SequencerLength = 0;
 8001892:	187b      	adds	r3, r7, r1
 8001894:	2200      	movs	r2, #0
 8001896:	605a      	str	r2, [r3, #4]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8001898:	187b      	adds	r3, r7, r1
 800189a:	2200      	movs	r2, #0
 800189c:	609a      	str	r2, [r3, #8]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 800189e:	187b      	adds	r3, r7, r1
 80018a0:	2280      	movs	r2, #128	@ 0x80
 80018a2:	0192      	lsls	r2, r2, #6
 80018a4:	60da      	str	r2, [r3, #12]
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 80018a6:	187b      	adds	r3, r7, r1
 80018a8:	2203      	movs	r2, #3
 80018aa:	611a      	str	r2, [r3, #16]
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_OVERWRITTEN;
 80018ac:	187b      	adds	r3, r7, r1
 80018ae:	2280      	movs	r2, #128	@ 0x80
 80018b0:	0152      	lsls	r2, r2, #5
 80018b2:	615a      	str	r2, [r3, #20]
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80018b4:	187b      	adds	r3, r7, r1
 80018b6:	4a34      	ldr	r2, [pc, #208]	@ (8001988 <MX_ADC1_Init+0x388>)
 80018b8:	0019      	movs	r1, r3
 80018ba:	0010      	movs	r0, r2
 80018bc:	f007 fb20 	bl	8008f00 <LL_ADC_REG_Init>
  LL_ADC_REG_SetSequencerScanDirection(ADC1, LL_ADC_REG_SEQ_SCAN_DIR_FORWARD);
 80018c0:	4b31      	ldr	r3, [pc, #196]	@ (8001988 <MX_ADC1_Init+0x388>)
 80018c2:	2100      	movs	r1, #0
 80018c4:	0018      	movs	r0, r3
 80018c6:	f7ff f92d 	bl	8000b24 <LL_ADC_REG_SetSequencerScanDirection>
  LL_ADC_SetOverSamplingScope(ADC1, LL_ADC_OVS_DISABLE);
 80018ca:	4b2f      	ldr	r3, [pc, #188]	@ (8001988 <MX_ADC1_Init+0x388>)
 80018cc:	2100      	movs	r1, #0
 80018ce:	0018      	movs	r0, r3
 80018d0:	f7ff f94b 	bl	8000b6a <LL_ADC_SetOverSamplingScope>
  LL_ADC_SetTriggerFrequencyMode(ADC1, LL_ADC_CLOCK_FREQ_MODE_LOW);
 80018d4:	2380      	movs	r3, #128	@ 0x80
 80018d6:	059b      	lsls	r3, r3, #22
 80018d8:	4a2b      	ldr	r2, [pc, #172]	@ (8001988 <MX_ADC1_Init+0x388>)
 80018da:	0019      	movs	r1, r3
 80018dc:	0010      	movs	r0, r2
 80018de:	f7ff f8db 	bl	8000a98 <LL_ADC_SetTriggerFrequencyMode>
  LL_ADC_REG_SetSequencerChAdd(ADC1, LL_ADC_CHANNEL_0|LL_ADC_CHANNEL_1
 80018e2:	4a2b      	ldr	r2, [pc, #172]	@ (8001990 <MX_ADC1_Init+0x390>)
 80018e4:	4b28      	ldr	r3, [pc, #160]	@ (8001988 <MX_ADC1_Init+0x388>)
 80018e6:	0011      	movs	r1, r2
 80018e8:	0018      	movs	r0, r3
 80018ea:	f7ff f92d 	bl	8000b48 <LL_ADC_REG_SetSequencerChAdd>
                              |LL_ADC_CHANNEL_6|LL_ADC_CHANNEL_7
                              |LL_ADC_CHANNEL_8);

   /* Poll for ADC channel configuration ready */
   #if (USE_TIMEOUT == 1)
   Timeout = ADC_CHANNEL_CONF_RDY_TIMEOUT_MS;
 80018ee:	2301      	movs	r3, #1
 80018f0:	667b      	str	r3, [r7, #100]	@ 0x64
   #endif /* USE_TIMEOUT */
   while (LL_ADC_IsActiveFlag_CCRDY(ADC1) == 0)
 80018f2:	e00a      	b.n	800190a <MX_ADC1_Init+0x30a>
     {
   #if (USE_TIMEOUT == 1)
   /* Check Systick counter flag to decrement the time-out value */
   if (LL_SYSTICK_IsActiveCounterFlag())
 80018f4:	f7ff f9d8 	bl	8000ca8 <LL_SYSTICK_IsActiveCounterFlag>
 80018f8:	1e03      	subs	r3, r0, #0
 80018fa:	d006      	beq.n	800190a <MX_ADC1_Init+0x30a>
     {
   if(Timeout-- == 0)
 80018fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80018fe:	1e5a      	subs	r2, r3, #1
 8001900:	667a      	str	r2, [r7, #100]	@ 0x64
 8001902:	2b00      	cmp	r3, #0
 8001904:	d101      	bne.n	800190a <MX_ADC1_Init+0x30a>
         {
   Error_Handler();
 8001906:	f000 fae5 	bl	8001ed4 <Error_Handler>
   while (LL_ADC_IsActiveFlag_CCRDY(ADC1) == 0)
 800190a:	4b1f      	ldr	r3, [pc, #124]	@ (8001988 <MX_ADC1_Init+0x388>)
 800190c:	0018      	movs	r0, r3
 800190e:	f7ff f953 	bl	8000bb8 <LL_ADC_IsActiveFlag_CCRDY>
 8001912:	1e03      	subs	r3, r0, #0
 8001914:	d0ee      	beq.n	80018f4 <MX_ADC1_Init+0x2f4>
         }
     }
   #endif /* USE_TIMEOUT */
     }
   /* Clear flag ADC channel configuration ready */
   LL_ADC_ClearFlag_CCRDY(ADC1);
 8001916:	4b1c      	ldr	r3, [pc, #112]	@ (8001988 <MX_ADC1_Init+0x388>)
 8001918:	0018      	movs	r0, r3
 800191a:	f7ff f961 	bl	8000be0 <LL_ADC_ClearFlag_CCRDY>
  LL_ADC_SetSamplingTimeCommonChannels(ADC1, LL_ADC_SAMPLINGTIME_COMMON_1, LL_ADC_SAMPLINGTIME_160CYCLES_5);
 800191e:	4b1a      	ldr	r3, [pc, #104]	@ (8001988 <MX_ADC1_Init+0x388>)
 8001920:	2207      	movs	r2, #7
 8001922:	2100      	movs	r1, #0
 8001924:	0018      	movs	r0, r3
 8001926:	f7ff f8cb 	bl	8000ac0 <LL_ADC_SetSamplingTimeCommonChannels>
  LL_ADC_DisableIT_EOC(ADC1);
 800192a:	4b17      	ldr	r3, [pc, #92]	@ (8001988 <MX_ADC1_Init+0x388>)
 800192c:	0018      	movs	r0, r3
 800192e:	f7ff f971 	bl	8000c14 <LL_ADC_DisableIT_EOC>
  LL_ADC_DisableIT_EOS(ADC1);
 8001932:	4b15      	ldr	r3, [pc, #84]	@ (8001988 <MX_ADC1_Init+0x388>)
 8001934:	0018      	movs	r0, r3
 8001936:	f7ff f97c 	bl	8000c32 <LL_ADC_DisableIT_EOS>

   /* Enable ADC internal voltage regulator */
   LL_ADC_EnableInternalRegulator(ADC1);
 800193a:	4b13      	ldr	r3, [pc, #76]	@ (8001988 <MX_ADC1_Init+0x388>)
 800193c:	0018      	movs	r0, r3
 800193e:	f7ff f927 	bl	8000b90 <LL_ADC_EnableInternalRegulator>
   /* Note: Variable divided by 2 to compensate partially */
   /* CPU processing cycles (depends on compilation optimization). */
   /* Note: If system core clock frequency is below 200kHz, wait time */
   /* is only a few CPU processing cycles. */
   uint32_t wait_loop_index;
   wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8001942:	4b14      	ldr	r3, [pc, #80]	@ (8001994 <MX_ADC1_Init+0x394>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4914      	ldr	r1, [pc, #80]	@ (8001998 <MX_ADC1_Init+0x398>)
 8001948:	0018      	movs	r0, r3
 800194a:	f7fe fbdd 	bl	8000108 <__udivsi3>
 800194e:	0003      	movs	r3, r0
 8001950:	001a      	movs	r2, r3
 8001952:	0013      	movs	r3, r2
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	189b      	adds	r3, r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	210a      	movs	r1, #10
 800195c:	0018      	movs	r0, r3
 800195e:	f7fe fbd3 	bl	8000108 <__udivsi3>
 8001962:	0003      	movs	r3, r0
 8001964:	663b      	str	r3, [r7, #96]	@ 0x60
   while(wait_loop_index != 0)
 8001966:	e002      	b.n	800196e <MX_ADC1_Init+0x36e>
     {
   wait_loop_index--;
 8001968:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800196a:	3b01      	subs	r3, #1
 800196c:	663b      	str	r3, [r7, #96]	@ 0x60
   while(wait_loop_index != 0)
 800196e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001970:	2b00      	cmp	r3, #0
 8001972:	d1f9      	bne.n	8001968 <MX_ADC1_Init+0x368>
     }
  /* USER CODE BEGIN ADC1_Init 2 */

   LL_ADC_EnableIT_OVR(ADC1);
 8001974:	4b04      	ldr	r3, [pc, #16]	@ (8001988 <MX_ADC1_Init+0x388>)
 8001976:	0018      	movs	r0, r3
 8001978:	f7ff f93e 	bl	8000bf8 <LL_ADC_EnableIT_OVR>

  /* USER CODE END ADC1_Init 2 */

}
 800197c:	46c0      	nop			@ (mov r8, r8)
 800197e:	46bd      	mov	sp, r7
 8001980:	b01b      	add	sp, #108	@ 0x6c
 8001982:	bd90      	pop	{r4, r7, pc}
 8001984:	40020000 	.word	0x40020000
 8001988:	40012400 	.word	0x40012400
 800198c:	20000010 	.word	0x20000010
 8001990:	3c0001ff 	.word	0x3c0001ff
 8001994:	2000009c 	.word	0x2000009c
 8001998:	00030d40 	.word	0x00030d40

0800199c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001a10 <MX_I2C1_Init+0x74>)
 80019a2:	4a1c      	ldr	r2, [pc, #112]	@ (8001a14 <MX_I2C1_Init+0x78>)
 80019a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2C;
 80019a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001a10 <MX_I2C1_Init+0x74>)
 80019a8:	4a1b      	ldr	r2, [pc, #108]	@ (8001a18 <MX_I2C1_Init+0x7c>)
 80019aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80019ac:	4b18      	ldr	r3, [pc, #96]	@ (8001a10 <MX_I2C1_Init+0x74>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019b2:	4b17      	ldr	r3, [pc, #92]	@ (8001a10 <MX_I2C1_Init+0x74>)
 80019b4:	2201      	movs	r2, #1
 80019b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019b8:	4b15      	ldr	r3, [pc, #84]	@ (8001a10 <MX_I2C1_Init+0x74>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80019be:	4b14      	ldr	r3, [pc, #80]	@ (8001a10 <MX_I2C1_Init+0x74>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80019c4:	4b12      	ldr	r3, [pc, #72]	@ (8001a10 <MX_I2C1_Init+0x74>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019ca:	4b11      	ldr	r3, [pc, #68]	@ (8001a10 <MX_I2C1_Init+0x74>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001a10 <MX_I2C1_Init+0x74>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001a10 <MX_I2C1_Init+0x74>)
 80019d8:	0018      	movs	r0, r3
 80019da:	f002 fd0d 	bl	80043f8 <HAL_I2C_Init>
 80019de:	1e03      	subs	r3, r0, #0
 80019e0:	d001      	beq.n	80019e6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80019e2:	f000 fa77 	bl	8001ed4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80019e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001a10 <MX_I2C1_Init+0x74>)
 80019e8:	2100      	movs	r1, #0
 80019ea:	0018      	movs	r0, r3
 80019ec:	f003 fc06 	bl	80051fc <HAL_I2CEx_ConfigAnalogFilter>
 80019f0:	1e03      	subs	r3, r0, #0
 80019f2:	d001      	beq.n	80019f8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80019f4:	f000 fa6e 	bl	8001ed4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80019f8:	4b05      	ldr	r3, [pc, #20]	@ (8001a10 <MX_I2C1_Init+0x74>)
 80019fa:	2100      	movs	r1, #0
 80019fc:	0018      	movs	r0, r3
 80019fe:	f003 fc49 	bl	8005294 <HAL_I2CEx_ConfigDigitalFilter>
 8001a02:	1e03      	subs	r3, r0, #0
 8001a04:	d001      	beq.n	8001a0a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001a06:	f000 fa65 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a0a:	46c0      	nop			@ (mov r8, r8)
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	200000d0 	.word	0x200000d0
 8001a14:	40005400 	.word	0x40005400
 8001a18:	00201d2c 	.word	0x00201d2c

08001a1c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a20:	4b1b      	ldr	r3, [pc, #108]	@ (8001a90 <MX_SPI1_Init+0x74>)
 8001a22:	4a1c      	ldr	r2, [pc, #112]	@ (8001a94 <MX_SPI1_Init+0x78>)
 8001a24:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a26:	4b1a      	ldr	r3, [pc, #104]	@ (8001a90 <MX_SPI1_Init+0x74>)
 8001a28:	2282      	movs	r2, #130	@ 0x82
 8001a2a:	0052      	lsls	r2, r2, #1
 8001a2c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a2e:	4b18      	ldr	r3, [pc, #96]	@ (8001a90 <MX_SPI1_Init+0x74>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a34:	4b16      	ldr	r3, [pc, #88]	@ (8001a90 <MX_SPI1_Init+0x74>)
 8001a36:	22e0      	movs	r2, #224	@ 0xe0
 8001a38:	00d2      	lsls	r2, r2, #3
 8001a3a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a3c:	4b14      	ldr	r3, [pc, #80]	@ (8001a90 <MX_SPI1_Init+0x74>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001a42:	4b13      	ldr	r3, [pc, #76]	@ (8001a90 <MX_SPI1_Init+0x74>)
 8001a44:	2201      	movs	r2, #1
 8001a46:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a48:	4b11      	ldr	r3, [pc, #68]	@ (8001a90 <MX_SPI1_Init+0x74>)
 8001a4a:	2280      	movs	r2, #128	@ 0x80
 8001a4c:	0092      	lsls	r2, r2, #2
 8001a4e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001a50:	4b0f      	ldr	r3, [pc, #60]	@ (8001a90 <MX_SPI1_Init+0x74>)
 8001a52:	2210      	movs	r2, #16
 8001a54:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a56:	4b0e      	ldr	r3, [pc, #56]	@ (8001a90 <MX_SPI1_Init+0x74>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a90 <MX_SPI1_Init+0x74>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a62:	4b0b      	ldr	r3, [pc, #44]	@ (8001a90 <MX_SPI1_Init+0x74>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001a68:	4b09      	ldr	r3, [pc, #36]	@ (8001a90 <MX_SPI1_Init+0x74>)
 8001a6a:	2207      	movs	r2, #7
 8001a6c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a6e:	4b08      	ldr	r3, [pc, #32]	@ (8001a90 <MX_SPI1_Init+0x74>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001a74:	4b06      	ldr	r3, [pc, #24]	@ (8001a90 <MX_SPI1_Init+0x74>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a7a:	4b05      	ldr	r3, [pc, #20]	@ (8001a90 <MX_SPI1_Init+0x74>)
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	f004 f91d 	bl	8005cbc <HAL_SPI_Init>
 8001a82:	1e03      	subs	r3, r0, #0
 8001a84:	d001      	beq.n	8001a8a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001a86:	f000 fa25 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a8a:	46c0      	nop			@ (mov r8, r8)
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	200001dc 	.word	0x200001dc
 8001a94:	40013000 	.word	0x40013000

08001a98 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b098      	sub	sp, #96	@ 0x60
 8001a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a9e:	2354      	movs	r3, #84	@ 0x54
 8001aa0:	18fb      	adds	r3, r7, r3
 8001aa2:	0018      	movs	r0, r3
 8001aa4:	230c      	movs	r3, #12
 8001aa6:	001a      	movs	r2, r3
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	f007 fba1 	bl	80091f0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001aae:	2338      	movs	r3, #56	@ 0x38
 8001ab0:	18fb      	adds	r3, r7, r3
 8001ab2:	0018      	movs	r0, r3
 8001ab4:	231c      	movs	r3, #28
 8001ab6:	001a      	movs	r2, r3
 8001ab8:	2100      	movs	r1, #0
 8001aba:	f007 fb99 	bl	80091f0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001abe:	1d3b      	adds	r3, r7, #4
 8001ac0:	0018      	movs	r0, r3
 8001ac2:	2334      	movs	r3, #52	@ 0x34
 8001ac4:	001a      	movs	r2, r3
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	f007 fb92 	bl	80091f0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001acc:	4b45      	ldr	r3, [pc, #276]	@ (8001be4 <MX_TIM1_Init+0x14c>)
 8001ace:	4a46      	ldr	r2, [pc, #280]	@ (8001be8 <MX_TIM1_Init+0x150>)
 8001ad0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10-1;
 8001ad2:	4b44      	ldr	r3, [pc, #272]	@ (8001be4 <MX_TIM1_Init+0x14c>)
 8001ad4:	2209      	movs	r2, #9
 8001ad6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ad8:	4b42      	ldr	r3, [pc, #264]	@ (8001be4 <MX_TIM1_Init+0x14c>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8001ade:	4b41      	ldr	r3, [pc, #260]	@ (8001be4 <MX_TIM1_Init+0x14c>)
 8001ae0:	2263      	movs	r2, #99	@ 0x63
 8001ae2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ae4:	4b3f      	ldr	r3, [pc, #252]	@ (8001be4 <MX_TIM1_Init+0x14c>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001aea:	4b3e      	ldr	r3, [pc, #248]	@ (8001be4 <MX_TIM1_Init+0x14c>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001af0:	4b3c      	ldr	r3, [pc, #240]	@ (8001be4 <MX_TIM1_Init+0x14c>)
 8001af2:	2280      	movs	r2, #128	@ 0x80
 8001af4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001af6:	4b3b      	ldr	r3, [pc, #236]	@ (8001be4 <MX_TIM1_Init+0x14c>)
 8001af8:	0018      	movs	r0, r3
 8001afa:	f004 fda3 	bl	8006644 <HAL_TIM_PWM_Init>
 8001afe:	1e03      	subs	r3, r0, #0
 8001b00:	d001      	beq.n	8001b06 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001b02:	f000 f9e7 	bl	8001ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b06:	2154      	movs	r1, #84	@ 0x54
 8001b08:	187b      	adds	r3, r7, r1
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b0e:	187b      	adds	r3, r7, r1
 8001b10:	2200      	movs	r2, #0
 8001b12:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b14:	187b      	adds	r3, r7, r1
 8001b16:	2200      	movs	r2, #0
 8001b18:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b1a:	187a      	adds	r2, r7, r1
 8001b1c:	4b31      	ldr	r3, [pc, #196]	@ (8001be4 <MX_TIM1_Init+0x14c>)
 8001b1e:	0011      	movs	r1, r2
 8001b20:	0018      	movs	r0, r3
 8001b22:	f005 fb09 	bl	8007138 <HAL_TIMEx_MasterConfigSynchronization>
 8001b26:	1e03      	subs	r3, r0, #0
 8001b28:	d001      	beq.n	8001b2e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001b2a:	f000 f9d3 	bl	8001ed4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b2e:	2138      	movs	r1, #56	@ 0x38
 8001b30:	187b      	adds	r3, r7, r1
 8001b32:	2260      	movs	r2, #96	@ 0x60
 8001b34:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001b36:	187b      	adds	r3, r7, r1
 8001b38:	2200      	movs	r2, #0
 8001b3a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b3c:	187b      	adds	r3, r7, r1
 8001b3e:	2200      	movs	r2, #0
 8001b40:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b42:	187b      	adds	r3, r7, r1
 8001b44:	2200      	movs	r2, #0
 8001b46:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b48:	187b      	adds	r3, r7, r1
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b4e:	187b      	adds	r3, r7, r1
 8001b50:	2200      	movs	r2, #0
 8001b52:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b54:	187b      	adds	r3, r7, r1
 8001b56:	2200      	movs	r2, #0
 8001b58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b5a:	1879      	adds	r1, r7, r1
 8001b5c:	4b21      	ldr	r3, [pc, #132]	@ (8001be4 <MX_TIM1_Init+0x14c>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	0018      	movs	r0, r3
 8001b62:	f004 fea5 	bl	80068b0 <HAL_TIM_PWM_ConfigChannel>
 8001b66:	1e03      	subs	r3, r0, #0
 8001b68:	d001      	beq.n	8001b6e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001b6a:	f000 f9b3 	bl	8001ed4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b6e:	1d3b      	adds	r3, r7, #4
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b74:	1d3b      	adds	r3, r7, #4
 8001b76:	2200      	movs	r2, #0
 8001b78:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b7a:	1d3b      	adds	r3, r7, #4
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b80:	1d3b      	adds	r3, r7, #4
 8001b82:	2200      	movs	r2, #0
 8001b84:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b86:	1d3b      	adds	r3, r7, #4
 8001b88:	2200      	movs	r2, #0
 8001b8a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b8c:	1d3b      	adds	r3, r7, #4
 8001b8e:	2280      	movs	r2, #128	@ 0x80
 8001b90:	0192      	lsls	r2, r2, #6
 8001b92:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001b94:	1d3b      	adds	r3, r7, #4
 8001b96:	2200      	movs	r2, #0
 8001b98:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001b9a:	1d3b      	adds	r3, r7, #4
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001ba0:	1d3b      	adds	r3, r7, #4
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001ba6:	1d3b      	adds	r3, r7, #4
 8001ba8:	2280      	movs	r2, #128	@ 0x80
 8001baa:	0492      	lsls	r2, r2, #18
 8001bac:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001bae:	1d3b      	adds	r3, r7, #4
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001bb4:	1d3b      	adds	r3, r7, #4
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bba:	1d3b      	adds	r3, r7, #4
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001bc0:	1d3a      	adds	r2, r7, #4
 8001bc2:	4b08      	ldr	r3, [pc, #32]	@ (8001be4 <MX_TIM1_Init+0x14c>)
 8001bc4:	0011      	movs	r1, r2
 8001bc6:	0018      	movs	r0, r3
 8001bc8:	f005 fb1e 	bl	8007208 <HAL_TIMEx_ConfigBreakDeadTime>
 8001bcc:	1e03      	subs	r3, r0, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8001bd0:	f000 f980 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001bd4:	4b03      	ldr	r3, [pc, #12]	@ (8001be4 <MX_TIM1_Init+0x14c>)
 8001bd6:	0018      	movs	r0, r3
 8001bd8:	f001 f95e 	bl	8002e98 <HAL_TIM_MspPostInit>

}
 8001bdc:	46c0      	nop			@ (mov r8, r8)
 8001bde:	46bd      	mov	sp, r7
 8001be0:	b018      	add	sp, #96	@ 0x60
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	20000240 	.word	0x20000240
 8001be8:	40012c00 	.word	0x40012c00

08001bec <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001bf0:	4b0e      	ldr	r3, [pc, #56]	@ (8001c2c <MX_TIM14_Init+0x40>)
 8001bf2:	4a0f      	ldr	r2, [pc, #60]	@ (8001c30 <MX_TIM14_Init+0x44>)
 8001bf4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 12 - 1 ;
 8001bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8001c2c <MX_TIM14_Init+0x40>)
 8001bf8:	220b      	movs	r2, #11
 8001bfa:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8001c2c <MX_TIM14_Init+0x40>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8001c02:	4b0a      	ldr	r3, [pc, #40]	@ (8001c2c <MX_TIM14_Init+0x40>)
 8001c04:	4a0b      	ldr	r2, [pc, #44]	@ (8001c34 <MX_TIM14_Init+0x48>)
 8001c06:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c08:	4b08      	ldr	r3, [pc, #32]	@ (8001c2c <MX_TIM14_Init+0x40>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c0e:	4b07      	ldr	r3, [pc, #28]	@ (8001c2c <MX_TIM14_Init+0x40>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001c14:	4b05      	ldr	r3, [pc, #20]	@ (8001c2c <MX_TIM14_Init+0x40>)
 8001c16:	0018      	movs	r0, r3
 8001c18:	f004 fcbc 	bl	8006594 <HAL_TIM_Base_Init>
 8001c1c:	1e03      	subs	r3, r0, #0
 8001c1e:	d001      	beq.n	8001c24 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8001c20:	f000 f958 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001c24:	46c0      	nop			@ (mov r8, r8)
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	46c0      	nop			@ (mov r8, r8)
 8001c2c:	2000028c 	.word	0x2000028c
 8001c30:	40002000 	.word	0x40002000
 8001c34:	0000ffff 	.word	0x0000ffff

08001c38 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c3c:	4b24      	ldr	r3, [pc, #144]	@ (8001cd0 <MX_USART1_UART_Init+0x98>)
 8001c3e:	4a25      	ldr	r2, [pc, #148]	@ (8001cd4 <MX_USART1_UART_Init+0x9c>)
 8001c40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001c42:	4b23      	ldr	r3, [pc, #140]	@ (8001cd0 <MX_USART1_UART_Init+0x98>)
 8001c44:	2296      	movs	r2, #150	@ 0x96
 8001c46:	0192      	lsls	r2, r2, #6
 8001c48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c4a:	4b21      	ldr	r3, [pc, #132]	@ (8001cd0 <MX_USART1_UART_Init+0x98>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c50:	4b1f      	ldr	r3, [pc, #124]	@ (8001cd0 <MX_USART1_UART_Init+0x98>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c56:	4b1e      	ldr	r3, [pc, #120]	@ (8001cd0 <MX_USART1_UART_Init+0x98>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c5c:	4b1c      	ldr	r3, [pc, #112]	@ (8001cd0 <MX_USART1_UART_Init+0x98>)
 8001c5e:	220c      	movs	r2, #12
 8001c60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c62:	4b1b      	ldr	r3, [pc, #108]	@ (8001cd0 <MX_USART1_UART_Init+0x98>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c68:	4b19      	ldr	r3, [pc, #100]	@ (8001cd0 <MX_USART1_UART_Init+0x98>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c6e:	4b18      	ldr	r3, [pc, #96]	@ (8001cd0 <MX_USART1_UART_Init+0x98>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c74:	4b16      	ldr	r3, [pc, #88]	@ (8001cd0 <MX_USART1_UART_Init+0x98>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c7a:	4b15      	ldr	r3, [pc, #84]	@ (8001cd0 <MX_USART1_UART_Init+0x98>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8001c80:	4813      	ldr	r0, [pc, #76]	@ (8001cd0 <MX_USART1_UART_Init+0x98>)
 8001c82:	2300      	movs	r3, #0
 8001c84:	2200      	movs	r2, #0
 8001c86:	2100      	movs	r1, #0
 8001c88:	f006 feca 	bl	8008a20 <HAL_RS485Ex_Init>
 8001c8c:	1e03      	subs	r3, r0, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 8001c90:	f000 f920 	bl	8001ed4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c94:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd0 <MX_USART1_UART_Init+0x98>)
 8001c96:	2100      	movs	r1, #0
 8001c98:	0018      	movs	r0, r3
 8001c9a:	f006 ff85 	bl	8008ba8 <HAL_UARTEx_SetTxFifoThreshold>
 8001c9e:	1e03      	subs	r3, r0, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 8001ca2:	f000 f917 	bl	8001ed4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd0 <MX_USART1_UART_Init+0x98>)
 8001ca8:	2100      	movs	r1, #0
 8001caa:	0018      	movs	r0, r3
 8001cac:	f006 ffbc 	bl	8008c28 <HAL_UARTEx_SetRxFifoThreshold>
 8001cb0:	1e03      	subs	r3, r0, #0
 8001cb2:	d001      	beq.n	8001cb8 <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 8001cb4:	f000 f90e 	bl	8001ed4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001cb8:	4b05      	ldr	r3, [pc, #20]	@ (8001cd0 <MX_USART1_UART_Init+0x98>)
 8001cba:	0018      	movs	r0, r3
 8001cbc:	f006 ff3a 	bl	8008b34 <HAL_UARTEx_DisableFifoMode>
 8001cc0:	1e03      	subs	r3, r0, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 8001cc4:	f000 f906 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001cc8:	46c0      	nop			@ (mov r8, r8)
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	46c0      	nop			@ (mov r8, r8)
 8001cd0:	200002d8 	.word	0x200002d8
 8001cd4:	40013800 	.word	0x40013800

08001cd8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001cde:	4b13      	ldr	r3, [pc, #76]	@ (8001d2c <MX_DMA_Init+0x54>)
 8001ce0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001ce2:	4b12      	ldr	r3, [pc, #72]	@ (8001d2c <MX_DMA_Init+0x54>)
 8001ce4:	2101      	movs	r1, #1
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	639a      	str	r2, [r3, #56]	@ 0x38
 8001cea:	4b10      	ldr	r3, [pc, #64]	@ (8001d2c <MX_DMA_Init+0x54>)
 8001cec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cee:	2201      	movs	r2, #1
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	607b      	str	r3, [r7, #4]
 8001cf4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, 0);
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	2009      	movs	r0, #9
 8001cfa:	f7fe fe53 	bl	80009a4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001cfe:	2009      	movs	r0, #9
 8001d00:	f7fe fe36 	bl	8000970 <__NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8001d04:	2200      	movs	r2, #0
 8001d06:	2100      	movs	r1, #0
 8001d08:	200a      	movs	r0, #10
 8001d0a:	f001 fd0d 	bl	8003728 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001d0e:	200a      	movs	r0, #10
 8001d10:	f001 fd1f 	bl	8003752 <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_DMA1_CH4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_DMA1_CH4_5_IRQn, 0, 0);
 8001d14:	2200      	movs	r2, #0
 8001d16:	2100      	movs	r1, #0
 8001d18:	200b      	movs	r0, #11
 8001d1a:	f001 fd05 	bl	8003728 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_DMA1_CH4_5_IRQn);
 8001d1e:	200b      	movs	r0, #11
 8001d20:	f001 fd17 	bl	8003752 <HAL_NVIC_EnableIRQ>

}
 8001d24:	46c0      	nop			@ (mov r8, r8)
 8001d26:	46bd      	mov	sp, r7
 8001d28:	b002      	add	sp, #8
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40021000 	.word	0x40021000

08001d30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d30:	b590      	push	{r4, r7, lr}
 8001d32:	b08b      	sub	sp, #44	@ 0x2c
 8001d34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d36:	2414      	movs	r4, #20
 8001d38:	193b      	adds	r3, r7, r4
 8001d3a:	0018      	movs	r0, r3
 8001d3c:	2314      	movs	r3, #20
 8001d3e:	001a      	movs	r2, r3
 8001d40:	2100      	movs	r1, #0
 8001d42:	f007 fa55 	bl	80091f0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d46:	4b5e      	ldr	r3, [pc, #376]	@ (8001ec0 <MX_GPIO_Init+0x190>)
 8001d48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d4a:	4b5d      	ldr	r3, [pc, #372]	@ (8001ec0 <MX_GPIO_Init+0x190>)
 8001d4c:	2104      	movs	r1, #4
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d52:	4b5b      	ldr	r3, [pc, #364]	@ (8001ec0 <MX_GPIO_Init+0x190>)
 8001d54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d56:	2204      	movs	r2, #4
 8001d58:	4013      	ands	r3, r2
 8001d5a:	613b      	str	r3, [r7, #16]
 8001d5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d5e:	4b58      	ldr	r3, [pc, #352]	@ (8001ec0 <MX_GPIO_Init+0x190>)
 8001d60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d62:	4b57      	ldr	r3, [pc, #348]	@ (8001ec0 <MX_GPIO_Init+0x190>)
 8001d64:	2120      	movs	r1, #32
 8001d66:	430a      	orrs	r2, r1
 8001d68:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d6a:	4b55      	ldr	r3, [pc, #340]	@ (8001ec0 <MX_GPIO_Init+0x190>)
 8001d6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d6e:	2220      	movs	r2, #32
 8001d70:	4013      	ands	r3, r2
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d76:	4b52      	ldr	r3, [pc, #328]	@ (8001ec0 <MX_GPIO_Init+0x190>)
 8001d78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d7a:	4b51      	ldr	r3, [pc, #324]	@ (8001ec0 <MX_GPIO_Init+0x190>)
 8001d7c:	2101      	movs	r1, #1
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d82:	4b4f      	ldr	r3, [pc, #316]	@ (8001ec0 <MX_GPIO_Init+0x190>)
 8001d84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d86:	2201      	movs	r2, #1
 8001d88:	4013      	ands	r3, r2
 8001d8a:	60bb      	str	r3, [r7, #8]
 8001d8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d8e:	4b4c      	ldr	r3, [pc, #304]	@ (8001ec0 <MX_GPIO_Init+0x190>)
 8001d90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d92:	4b4b      	ldr	r3, [pc, #300]	@ (8001ec0 <MX_GPIO_Init+0x190>)
 8001d94:	2102      	movs	r1, #2
 8001d96:	430a      	orrs	r2, r1
 8001d98:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d9a:	4b49      	ldr	r3, [pc, #292]	@ (8001ec0 <MX_GPIO_Init+0x190>)
 8001d9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d9e:	2202      	movs	r2, #2
 8001da0:	4013      	ands	r3, r2
 8001da2:	607b      	str	r3, [r7, #4]
 8001da4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001da6:	4b46      	ldr	r3, [pc, #280]	@ (8001ec0 <MX_GPIO_Init+0x190>)
 8001da8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001daa:	4b45      	ldr	r3, [pc, #276]	@ (8001ec0 <MX_GPIO_Init+0x190>)
 8001dac:	2108      	movs	r1, #8
 8001dae:	430a      	orrs	r2, r1
 8001db0:	635a      	str	r2, [r3, #52]	@ 0x34
 8001db2:	4b43      	ldr	r3, [pc, #268]	@ (8001ec0 <MX_GPIO_Init+0x190>)
 8001db4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001db6:	2208      	movs	r2, #8
 8001db8:	4013      	ands	r3, r2
 8001dba:	603b      	str	r3, [r7, #0]
 8001dbc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Actuator_C_EN_GPIO_Port, Actuator_C_EN_Pin, GPIO_PIN_RESET);
 8001dbe:	4b41      	ldr	r3, [pc, #260]	@ (8001ec4 <MX_GPIO_Init+0x194>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	2101      	movs	r1, #1
 8001dc4:	0018      	movs	r0, r3
 8001dc6:	f002 faf9 	bl	80043bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Actuator_A_EN_Pin|Actuator_B_EN_Pin, GPIO_PIN_RESET);
 8001dca:	4b3f      	ldr	r3, [pc, #252]	@ (8001ec8 <MX_GPIO_Init+0x198>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	21c0      	movs	r1, #192	@ 0xc0
 8001dd0:	0018      	movs	r0, r3
 8001dd2:	f002 faf3 	bl	80043bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_SET);
 8001dd6:	4b3d      	ldr	r3, [pc, #244]	@ (8001ecc <MX_GPIO_Init+0x19c>)
 8001dd8:	2201      	movs	r2, #1
 8001dda:	2101      	movs	r1, #1
 8001ddc:	0018      	movs	r0, r3
 8001dde:	f002 faed 	bl	80043bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Actuator_C_EN_Pin */
  GPIO_InitStruct.Pin = Actuator_C_EN_Pin;
 8001de2:	193b      	adds	r3, r7, r4
 8001de4:	2201      	movs	r2, #1
 8001de6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001de8:	193b      	adds	r3, r7, r4
 8001dea:	2201      	movs	r2, #1
 8001dec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dee:	193b      	adds	r3, r7, r4
 8001df0:	2200      	movs	r2, #0
 8001df2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df4:	193b      	adds	r3, r7, r4
 8001df6:	2200      	movs	r2, #0
 8001df8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Actuator_C_EN_GPIO_Port, &GPIO_InitStruct);
 8001dfa:	193b      	adds	r3, r7, r4
 8001dfc:	4a31      	ldr	r2, [pc, #196]	@ (8001ec4 <MX_GPIO_Init+0x194>)
 8001dfe:	0019      	movs	r1, r3
 8001e00:	0010      	movs	r0, r2
 8001e02:	f002 f891 	bl	8003f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : Encoder_Pulse_A_Pin */
  GPIO_InitStruct.Pin = Encoder_Pulse_A_Pin;
 8001e06:	0021      	movs	r1, r4
 8001e08:	187b      	adds	r3, r7, r1
 8001e0a:	2280      	movs	r2, #128	@ 0x80
 8001e0c:	0192      	lsls	r2, r2, #6
 8001e0e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e10:	000c      	movs	r4, r1
 8001e12:	193b      	adds	r3, r7, r4
 8001e14:	4a2e      	ldr	r2, [pc, #184]	@ (8001ed0 <MX_GPIO_Init+0x1a0>)
 8001e16:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e18:	193b      	adds	r3, r7, r4
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Encoder_Pulse_A_GPIO_Port, &GPIO_InitStruct);
 8001e1e:	193b      	adds	r3, r7, r4
 8001e20:	4a28      	ldr	r2, [pc, #160]	@ (8001ec4 <MX_GPIO_Init+0x194>)
 8001e22:	0019      	movs	r1, r3
 8001e24:	0010      	movs	r0, r2
 8001e26:	f002 f87f 	bl	8003f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : Encoder_Pulse_B_Pin */
  GPIO_InitStruct.Pin = Encoder_Pulse_B_Pin;
 8001e2a:	0021      	movs	r1, r4
 8001e2c:	187b      	adds	r3, r7, r1
 8001e2e:	2280      	movs	r2, #128	@ 0x80
 8001e30:	01d2      	lsls	r2, r2, #7
 8001e32:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e34:	000c      	movs	r4, r1
 8001e36:	193b      	adds	r3, r7, r4
 8001e38:	2200      	movs	r2, #0
 8001e3a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3c:	193b      	adds	r3, r7, r4
 8001e3e:	2200      	movs	r2, #0
 8001e40:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Encoder_Pulse_B_GPIO_Port, &GPIO_InitStruct);
 8001e42:	193b      	adds	r3, r7, r4
 8001e44:	4a1f      	ldr	r2, [pc, #124]	@ (8001ec4 <MX_GPIO_Init+0x194>)
 8001e46:	0019      	movs	r1, r3
 8001e48:	0010      	movs	r0, r2
 8001e4a:	f002 f86d 	bl	8003f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : Actuator_A_EN_Pin Actuator_B_EN_Pin */
  GPIO_InitStruct.Pin = Actuator_A_EN_Pin|Actuator_B_EN_Pin;
 8001e4e:	193b      	adds	r3, r7, r4
 8001e50:	22c0      	movs	r2, #192	@ 0xc0
 8001e52:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e54:	193b      	adds	r3, r7, r4
 8001e56:	2201      	movs	r2, #1
 8001e58:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5a:	193b      	adds	r3, r7, r4
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e60:	193b      	adds	r3, r7, r4
 8001e62:	2200      	movs	r2, #0
 8001e64:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e66:	193b      	adds	r3, r7, r4
 8001e68:	4a17      	ldr	r2, [pc, #92]	@ (8001ec8 <MX_GPIO_Init+0x198>)
 8001e6a:	0019      	movs	r1, r3
 8001e6c:	0010      	movs	r0, r2
 8001e6e:	f002 f85b 	bl	8003f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : Actuator_CS_Pin */
  GPIO_InitStruct.Pin = Actuator_CS_Pin;
 8001e72:	193b      	adds	r3, r7, r4
 8001e74:	2201      	movs	r2, #1
 8001e76:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e78:	193b      	adds	r3, r7, r4
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7e:	193b      	adds	r3, r7, r4
 8001e80:	2200      	movs	r2, #0
 8001e82:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e84:	193b      	adds	r3, r7, r4
 8001e86:	2203      	movs	r2, #3
 8001e88:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Actuator_CS_GPIO_Port, &GPIO_InitStruct);
 8001e8a:	193b      	adds	r3, r7, r4
 8001e8c:	4a0f      	ldr	r2, [pc, #60]	@ (8001ecc <MX_GPIO_Init+0x19c>)
 8001e8e:	0019      	movs	r1, r3
 8001e90:	0010      	movs	r0, r2
 8001e92:	f002 f849 	bl	8003f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_Reset_Pin */
  GPIO_InitStruct.Pin = IMU_Reset_Pin;
 8001e96:	0021      	movs	r1, r4
 8001e98:	187b      	adds	r3, r7, r1
 8001e9a:	2202      	movs	r2, #2
 8001e9c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e9e:	187b      	adds	r3, r7, r1
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea4:	187b      	adds	r3, r7, r1
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(IMU_Reset_GPIO_Port, &GPIO_InitStruct);
 8001eaa:	187b      	adds	r3, r7, r1
 8001eac:	4a07      	ldr	r2, [pc, #28]	@ (8001ecc <MX_GPIO_Init+0x19c>)
 8001eae:	0019      	movs	r1, r3
 8001eb0:	0010      	movs	r0, r2
 8001eb2:	f002 f839 	bl	8003f28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001eb6:	46c0      	nop			@ (mov r8, r8)
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	b00b      	add	sp, #44	@ 0x2c
 8001ebc:	bd90      	pop	{r4, r7, pc}
 8001ebe:	46c0      	nop			@ (mov r8, r8)
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	50000400 	.word	0x50000400
 8001ec8:	50000800 	.word	0x50000800
 8001ecc:	50000c00 	.word	0x50000c00
 8001ed0:	10110000 	.word	0x10110000

08001ed4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ed8:	b672      	cpsid	i
}
 8001eda:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001edc:	46c0      	nop			@ (mov r8, r8)
 8001ede:	e7fd      	b.n	8001edc <Error_Handler+0x8>

08001ee0 <HAL_UARTEx_RxEventCallback>:

/*
 * Modbus reception handler function
 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001ee0:	b590      	push	{r4, r7, lr}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	000a      	movs	r2, r1
 8001eea:	1cbb      	adds	r3, r7, #2
 8001eec:	801a      	strh	r2, [r3, #0]
	if(huart->Instance == USART1)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a45      	ldr	r2, [pc, #276]	@ (8002008 <HAL_UARTEx_RxEventCallback+0x128>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d000      	beq.n	8001efa <HAL_UARTEx_RxEventCallback+0x1a>
 8001ef8:	e081      	b.n	8001ffe <HAL_UARTEx_RxEventCallback+0x11e>
	{
		chunk_start_i = chunk_end_i;  // Update the last position before copying new data
 8001efa:	4b44      	ldr	r3, [pc, #272]	@ (800200c <HAL_UARTEx_RxEventCallback+0x12c>)
 8001efc:	881b      	ldrh	r3, [r3, #0]
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	4b43      	ldr	r3, [pc, #268]	@ (8002010 <HAL_UARTEx_RxEventCallback+0x130>)
 8001f02:	801a      	strh	r2, [r3, #0]
		/*
		 * If the data is large and it is about to exceed the buffer size, we have to route it to the start of the buffer
		 * This is to maintain the circular buffer
		 * The old data in the main buffer will be overlapped
		 */
		if (chunk_start_i + Size > MODBUS_RX_BUFFER_SIZE)  // If the current position + new data size is greater than the main buffer
 8001f04:	4b42      	ldr	r3, [pc, #264]	@ (8002010 <HAL_UARTEx_RxEventCallback+0x130>)
 8001f06:	881b      	ldrh	r3, [r3, #0]
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	001a      	movs	r2, r3
 8001f0c:	1cbb      	adds	r3, r7, #2
 8001f0e:	881b      	ldrh	r3, [r3, #0]
 8001f10:	18d2      	adds	r2, r2, r3
 8001f12:	2380      	movs	r3, #128	@ 0x80
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	429a      	cmp	r2, r3
 8001f18:	dd29      	ble.n	8001f6e <HAL_UARTEx_RxEventCallback+0x8e>
		{
			uint16_t datatocopy = MODBUS_RX_BUFFER_SIZE - chunk_start_i;  // find out how much space is left in the main buffer
 8001f1a:	4b3d      	ldr	r3, [pc, #244]	@ (8002010 <HAL_UARTEx_RxEventCallback+0x130>)
 8001f1c:	881b      	ldrh	r3, [r3, #0]
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	240e      	movs	r4, #14
 8001f22:	193b      	adds	r3, r7, r4
 8001f24:	2180      	movs	r1, #128	@ 0x80
 8001f26:	0049      	lsls	r1, r1, #1
 8001f28:	1a8a      	subs	r2, r1, r2
 8001f2a:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)(modbus_rx_buffer + chunk_start_i), rx_chunk, datatocopy);  // copy data in that remaining space
 8001f2c:	4b38      	ldr	r3, [pc, #224]	@ (8002010 <HAL_UARTEx_RxEventCallback+0x130>)
 8001f2e:	881b      	ldrh	r3, [r3, #0]
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	001a      	movs	r2, r3
 8001f34:	4b37      	ldr	r3, [pc, #220]	@ (8002014 <HAL_UARTEx_RxEventCallback+0x134>)
 8001f36:	18d0      	adds	r0, r2, r3
 8001f38:	193b      	adds	r3, r7, r4
 8001f3a:	881a      	ldrh	r2, [r3, #0]
 8001f3c:	4b36      	ldr	r3, [pc, #216]	@ (8002018 <HAL_UARTEx_RxEventCallback+0x138>)
 8001f3e:	0019      	movs	r1, r3
 8001f40:	f007 f982 	bl	8009248 <memcpy>

			chunk_end_i = (Size - datatocopy);  // update the position
 8001f44:	1cba      	adds	r2, r7, #2
 8001f46:	193b      	adds	r3, r7, r4
 8001f48:	8812      	ldrh	r2, [r2, #0]
 8001f4a:	881b      	ldrh	r3, [r3, #0]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	4b2e      	ldr	r3, [pc, #184]	@ (800200c <HAL_UARTEx_RxEventCallback+0x12c>)
 8001f52:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)modbus_rx_buffer, (uint8_t *)(rx_chunk + datatocopy), chunk_end_i);  // copy the remaining data
 8001f54:	193b      	adds	r3, r7, r4
 8001f56:	881a      	ldrh	r2, [r3, #0]
 8001f58:	4b2f      	ldr	r3, [pc, #188]	@ (8002018 <HAL_UARTEx_RxEventCallback+0x138>)
 8001f5a:	18d1      	adds	r1, r2, r3
 8001f5c:	4b2b      	ldr	r3, [pc, #172]	@ (800200c <HAL_UARTEx_RxEventCallback+0x12c>)
 8001f5e:	881b      	ldrh	r3, [r3, #0]
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	001a      	movs	r2, r3
 8001f64:	4b2b      	ldr	r3, [pc, #172]	@ (8002014 <HAL_UARTEx_RxEventCallback+0x134>)
 8001f66:	0018      	movs	r0, r3
 8001f68:	f007 f96e 	bl	8009248 <memcpy>
 8001f6c:	e014      	b.n	8001f98 <HAL_UARTEx_RxEventCallback+0xb8>
		 * If the current position + new data size is less than the main buffer
		 * we will simply copy the data into the buffer and update the position
		 */
		else
		{
			memcpy ((uint8_t *)(modbus_rx_buffer + chunk_start_i), rx_chunk, Size);
 8001f6e:	4b28      	ldr	r3, [pc, #160]	@ (8002010 <HAL_UARTEx_RxEventCallback+0x130>)
 8001f70:	881b      	ldrh	r3, [r3, #0]
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	001a      	movs	r2, r3
 8001f76:	4b27      	ldr	r3, [pc, #156]	@ (8002014 <HAL_UARTEx_RxEventCallback+0x134>)
 8001f78:	18d0      	adds	r0, r2, r3
 8001f7a:	1cbb      	adds	r3, r7, #2
 8001f7c:	881a      	ldrh	r2, [r3, #0]
 8001f7e:	4b26      	ldr	r3, [pc, #152]	@ (8002018 <HAL_UARTEx_RxEventCallback+0x138>)
 8001f80:	0019      	movs	r1, r3
 8001f82:	f007 f961 	bl	8009248 <memcpy>
			chunk_end_i = Size + chunk_start_i;
 8001f86:	4b22      	ldr	r3, [pc, #136]	@ (8002010 <HAL_UARTEx_RxEventCallback+0x130>)
 8001f88:	881b      	ldrh	r3, [r3, #0]
 8001f8a:	b29a      	uxth	r2, r3
 8001f8c:	1cbb      	adds	r3, r7, #2
 8001f8e:	881b      	ldrh	r3, [r3, #0]
 8001f90:	18d3      	adds	r3, r2, r3
 8001f92:	b29a      	uxth	r2, r3
 8001f94:	4b1d      	ldr	r3, [pc, #116]	@ (800200c <HAL_UARTEx_RxEventCallback+0x12c>)
 8001f96:	801a      	strh	r2, [r3, #0]
		}

		if(modbus_header)
 8001f98:	4b20      	ldr	r3, [pc, #128]	@ (800201c <HAL_UARTEx_RxEventCallback+0x13c>)
 8001f9a:	881b      	ldrh	r3, [r3, #0]
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d027      	beq.n	8001ff2 <HAL_UARTEx_RxEventCallback+0x112>
		{
			// Log the time for chunk miss error handling
			chunk_time = HAL_GetTick();
 8001fa2:	f001 fac5 	bl	8003530 <HAL_GetTick>
 8001fa6:	0002      	movs	r2, r0
 8001fa8:	4b1d      	ldr	r3, [pc, #116]	@ (8002020 <HAL_UARTEx_RxEventCallback+0x140>)
 8001faa:	601a      	str	r2, [r3, #0]

			start_index = chunk_start_i;
 8001fac:	4b18      	ldr	r3, [pc, #96]	@ (8002010 <HAL_UARTEx_RxEventCallback+0x130>)
 8001fae:	881b      	ldrh	r3, [r3, #0]
 8001fb0:	b29a      	uxth	r2, r3
 8001fb2:	4b1c      	ldr	r3, [pc, #112]	@ (8002024 <HAL_UARTEx_RxEventCallback+0x144>)
 8001fb4:	801a      	strh	r2, [r3, #0]
			modbus_header = 0;
 8001fb6:	4b19      	ldr	r3, [pc, #100]	@ (800201c <HAL_UARTEx_RxEventCallback+0x13c>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	801a      	strh	r2, [r3, #0]

			// Setup the DMA to receive the # message bytes + crc + 1 in the event that the # bytes is in the message
			HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rx_chunk, (uint16_t)(((rx_chunk[4] << 8) | rx_chunk[5])*2 + 2 + 1));
 8001fbc:	4b16      	ldr	r3, [pc, #88]	@ (8002018 <HAL_UARTEx_RxEventCallback+0x138>)
 8001fbe:	791b      	ldrb	r3, [r3, #4]
 8001fc0:	021b      	lsls	r3, r3, #8
 8001fc2:	4a15      	ldr	r2, [pc, #84]	@ (8002018 <HAL_UARTEx_RxEventCallback+0x138>)
 8001fc4:	7952      	ldrb	r2, [r2, #5]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	3301      	adds	r3, #1
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	18db      	adds	r3, r3, r3
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	b29a      	uxth	r2, r3
 8001fd6:	4910      	ldr	r1, [pc, #64]	@ (8002018 <HAL_UARTEx_RxEventCallback+0x138>)
 8001fd8:	4b13      	ldr	r3, [pc, #76]	@ (8002028 <HAL_UARTEx_RxEventCallback+0x148>)
 8001fda:	0018      	movs	r0, r3
 8001fdc:	f006 fe66 	bl	8008cac <HAL_UARTEx_ReceiveToIdle_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001fe0:	4b12      	ldr	r3, [pc, #72]	@ (800202c <HAL_UARTEx_RxEventCallback+0x14c>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	4b11      	ldr	r3, [pc, #68]	@ (800202c <HAL_UARTEx_RxEventCallback+0x14c>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2104      	movs	r1, #4
 8001fec:	438a      	bics	r2, r1
 8001fee:	601a      	str	r2, [r3, #0]
			 */
			modbus_header = 1;
			uart_rx_int = 1;
		}
	}
}
 8001ff0:	e005      	b.n	8001ffe <HAL_UARTEx_RxEventCallback+0x11e>
			modbus_header = 1;
 8001ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800201c <HAL_UARTEx_RxEventCallback+0x13c>)
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	801a      	strh	r2, [r3, #0]
			uart_rx_int = 1;
 8001ff8:	4b0d      	ldr	r3, [pc, #52]	@ (8002030 <HAL_UARTEx_RxEventCallback+0x150>)
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	701a      	strb	r2, [r3, #0]
}
 8001ffe:	46c0      	nop			@ (mov r8, r8)
 8002000:	46bd      	mov	sp, r7
 8002002:	b005      	add	sp, #20
 8002004:	bd90      	pop	{r4, r7, pc}
 8002006:	46c0      	nop			@ (mov r8, r8)
 8002008:	40013800 	.word	0x40013800
 800200c:	20000778 	.word	0x20000778
 8002010:	20000776 	.word	0x20000776
 8002014:	20000470 	.word	0x20000470
 8002018:	20000670 	.word	0x20000670
 800201c:	20000098 	.word	0x20000098
 8002020:	20000770 	.word	0x20000770
 8002024:	20000774 	.word	0x20000774
 8002028:	200002d8 	.word	0x200002d8
 800202c:	2000036c 	.word	0x2000036c
 8002030:	2000077a 	.word	0x2000077a

08002034 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
	uart_tx_int = 1;
 800203c:	4b03      	ldr	r3, [pc, #12]	@ (800204c <HAL_UART_TxCpltCallback+0x18>)
 800203e:	2201      	movs	r2, #1
 8002040:	701a      	strb	r2, [r3, #0]
}
 8002042:	46c0      	nop			@ (mov r8, r8)
 8002044:	46bd      	mov	sp, r7
 8002046:	b002      	add	sp, #8
 8002048:	bd80      	pop	{r7, pc}
 800204a:	46c0      	nop			@ (mov r8, r8)
 800204c:	2000009a 	.word	0x2000009a

08002050 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
	uart_err_int = 1;
 8002058:	4b07      	ldr	r3, [pc, #28]	@ (8002078 <HAL_UART_ErrorCallback+0x28>)
 800205a:	2201      	movs	r2, #1
 800205c:	701a      	strb	r2, [r3, #0]
	__HAL_UART_DISABLE_IT(&huart1, UART_IT_MASK);
 800205e:	4b07      	ldr	r3, [pc, #28]	@ (800207c <HAL_UART_ErrorCallback+0x2c>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	689a      	ldr	r2, [r3, #8]
 8002064:	4b05      	ldr	r3, [pc, #20]	@ (800207c <HAL_UART_ErrorCallback+0x2c>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	0052      	lsls	r2, r2, #1
 800206a:	0852      	lsrs	r2, r2, #1
 800206c:	609a      	str	r2, [r3, #8]
}
 800206e:	46c0      	nop			@ (mov r8, r8)
 8002070:	46bd      	mov	sp, r7
 8002072:	b002      	add	sp, #8
 8002074:	bd80      	pop	{r7, pc}
 8002076:	46c0      	nop			@ (mov r8, r8)
 8002078:	2000077b 	.word	0x2000077b
 800207c:	200002d8 	.word	0x200002d8

08002080 <modbus_rx>:

// Modbus Slave Functions ---------------------------------------------------------------------

#ifdef MB_SLAVE
uint8_t modbus_rx()
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
	if(uart_rx_int)
 8002084:	4b06      	ldr	r3, [pc, #24]	@ (80020a0 <modbus_rx+0x20>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b00      	cmp	r3, #0
 800208c:	d004      	beq.n	8002098 <modbus_rx+0x18>
	{
		uart_rx_int = 0;
 800208e:	4b04      	ldr	r3, [pc, #16]	@ (80020a0 <modbus_rx+0x20>)
 8002090:	2200      	movs	r2, #0
 8002092:	701a      	strb	r2, [r3, #0]
		return 1;
 8002094:	2301      	movs	r3, #1
 8002096:	e000      	b.n	800209a <modbus_rx+0x1a>
	}
	return 0;
 8002098:	2300      	movs	r3, #0
}
 800209a:	0018      	movs	r0, r3
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	2000077a 	.word	0x2000077a

080020a4 <return_holding_registers>:

int8_t return_holding_registers(uint8_t* tx_len)
{
 80020a4:	b5b0      	push	{r4, r5, r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
	(*tx_len) = 0;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	701a      	strb	r2, [r3, #0]
	// Handle Error Checking
	uint16_t first_register_address = (get_rx_buffer(2) << 8) | get_rx_buffer(3);
 80020b2:	2002      	movs	r0, #2
 80020b4:	f000 fc5c 	bl	8002970 <get_rx_buffer>
 80020b8:	0003      	movs	r3, r0
 80020ba:	021b      	lsls	r3, r3, #8
 80020bc:	b21c      	sxth	r4, r3
 80020be:	2003      	movs	r0, #3
 80020c0:	f000 fc56 	bl	8002970 <get_rx_buffer>
 80020c4:	0003      	movs	r3, r0
 80020c6:	b21b      	sxth	r3, r3
 80020c8:	4323      	orrs	r3, r4
 80020ca:	b21a      	sxth	r2, r3
 80020cc:	230c      	movs	r3, #12
 80020ce:	18fb      	adds	r3, r7, r3
 80020d0:	801a      	strh	r2, [r3, #0]

	// Get the number of registers requested by the master
	uint16_t num_registers = (get_rx_buffer(4) << 8) | get_rx_buffer(5);
 80020d2:	2004      	movs	r0, #4
 80020d4:	f000 fc4c 	bl	8002970 <get_rx_buffer>
 80020d8:	0003      	movs	r3, r0
 80020da:	021b      	lsls	r3, r3, #8
 80020dc:	b21c      	sxth	r4, r3
 80020de:	2005      	movs	r0, #5
 80020e0:	f000 fc46 	bl	8002970 <get_rx_buffer>
 80020e4:	0003      	movs	r3, r0
 80020e6:	b21b      	sxth	r3, r3
 80020e8:	4323      	orrs	r3, r4
 80020ea:	b21a      	sxth	r2, r3
 80020ec:	210a      	movs	r1, #10
 80020ee:	187b      	adds	r3, r7, r1
 80020f0:	801a      	strh	r2, [r3, #0]

	if(num_registers > RX_BUFFER_SIZE || num_registers < 1) // 125 is the limit according to modbus protocol
 80020f2:	000a      	movs	r2, r1
 80020f4:	18bb      	adds	r3, r7, r2
 80020f6:	881b      	ldrh	r3, [r3, #0]
 80020f8:	2b7d      	cmp	r3, #125	@ 0x7d
 80020fa:	d803      	bhi.n	8002104 <return_holding_registers+0x60>
 80020fc:	18bb      	adds	r3, r7, r2
 80020fe:	881b      	ldrh	r3, [r3, #0]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d104      	bne.n	800210e <return_holding_registers+0x6a>
	{
		return modbus_exception(MB_ILLEGAL_DATA_VALUE);
 8002104:	2006      	movs	r0, #6
 8002106:	f000 f97b 	bl	8002400 <modbus_exception>
 800210a:	0003      	movs	r3, r0
 800210c:	e06e      	b.n	80021ec <return_holding_registers+0x148>
	}

	uint16_t last_register_address = first_register_address + (num_registers - 1);
 800210e:	230a      	movs	r3, #10
 8002110:	18fa      	adds	r2, r7, r3
 8002112:	230c      	movs	r3, #12
 8002114:	18fb      	adds	r3, r7, r3
 8002116:	8812      	ldrh	r2, [r2, #0]
 8002118:	881b      	ldrh	r3, [r3, #0]
 800211a:	18d3      	adds	r3, r2, r3
 800211c:	b29a      	uxth	r2, r3
 800211e:	2108      	movs	r1, #8
 8002120:	187b      	adds	r3, r7, r1
 8002122:	3a01      	subs	r2, #1
 8002124:	801a      	strh	r2, [r3, #0]

	if(last_register_address > NUM_HOLDING_REGISTERS)
 8002126:	187b      	adds	r3, r7, r1
 8002128:	881b      	ldrh	r3, [r3, #0]
 800212a:	2b4c      	cmp	r3, #76	@ 0x4c
 800212c:	d904      	bls.n	8002138 <return_holding_registers+0x94>
	{
		return modbus_exception(MB_ILLEGAL_DATA_ADDRESS);
 800212e:	2005      	movs	r0, #5
 8002130:	f000 f966 	bl	8002400 <modbus_exception>
 8002134:	0003      	movs	r3, r0
 8002136:	e059      	b.n	80021ec <return_holding_registers+0x148>
	}

	// Return register values

	modbus_tx_buffer[0] = get_rx_buffer(0); // Append Slave id
 8002138:	2000      	movs	r0, #0
 800213a:	f000 fc19 	bl	8002970 <get_rx_buffer>
 800213e:	0003      	movs	r3, r0
 8002140:	001a      	movs	r2, r3
 8002142:	4b2c      	ldr	r3, [pc, #176]	@ (80021f4 <return_holding_registers+0x150>)
 8002144:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = get_rx_buffer(1); // Append Function Code
 8002146:	2001      	movs	r0, #1
 8002148:	f000 fc12 	bl	8002970 <get_rx_buffer>
 800214c:	0003      	movs	r3, r0
 800214e:	001a      	movs	r2, r3
 8002150:	4b28      	ldr	r3, [pc, #160]	@ (80021f4 <return_holding_registers+0x150>)
 8002152:	705a      	strb	r2, [r3, #1]
	modbus_tx_buffer[2] = num_registers * 2; // Append number of bytes
 8002154:	230a      	movs	r3, #10
 8002156:	18fb      	adds	r3, r7, r3
 8002158:	881b      	ldrh	r3, [r3, #0]
 800215a:	b2db      	uxtb	r3, r3
 800215c:	18db      	adds	r3, r3, r3
 800215e:	b2da      	uxtb	r2, r3
 8002160:	4b24      	ldr	r3, [pc, #144]	@ (80021f4 <return_holding_registers+0x150>)
 8002162:	709a      	strb	r2, [r3, #2]
	(*tx_len) = 3;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2203      	movs	r2, #3
 8002168:	701a      	strb	r2, [r3, #0]
//		prim = __get_PRIMASK();
//		__disable_irq();
	}

	// Append the Register Values
	for(uint8_t i = 0; i < num_registers; i++)
 800216a:	230f      	movs	r3, #15
 800216c:	18fb      	adds	r3, r7, r3
 800216e:	2200      	movs	r2, #0
 8002170:	701a      	strb	r2, [r3, #0]
 8002172:	e02c      	b.n	80021ce <return_holding_registers+0x12a>
	{
		modbus_tx_buffer[(*tx_len)++] = high_byte(holding_register_database[first_register_address + i]);
 8002174:	250c      	movs	r5, #12
 8002176:	197b      	adds	r3, r7, r5
 8002178:	881a      	ldrh	r2, [r3, #0]
 800217a:	240f      	movs	r4, #15
 800217c:	193b      	adds	r3, r7, r4
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	18d2      	adds	r2, r2, r3
 8002182:	4b1d      	ldr	r3, [pc, #116]	@ (80021f8 <return_holding_registers+0x154>)
 8002184:	0052      	lsls	r2, r2, #1
 8002186:	5ad3      	ldrh	r3, [r2, r3]
 8002188:	0a1b      	lsrs	r3, r3, #8
 800218a:	b299      	uxth	r1, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	1c5a      	adds	r2, r3, #1
 8002192:	b2d0      	uxtb	r0, r2
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	7010      	strb	r0, [r2, #0]
 8002198:	001a      	movs	r2, r3
 800219a:	b2c9      	uxtb	r1, r1
 800219c:	4b15      	ldr	r3, [pc, #84]	@ (80021f4 <return_holding_registers+0x150>)
 800219e:	5499      	strb	r1, [r3, r2]
		modbus_tx_buffer[(*tx_len)++] = low_byte(holding_register_database[first_register_address + i]);
 80021a0:	197b      	adds	r3, r7, r5
 80021a2:	881a      	ldrh	r2, [r3, #0]
 80021a4:	193b      	adds	r3, r7, r4
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	18d2      	adds	r2, r2, r3
 80021aa:	4b13      	ldr	r3, [pc, #76]	@ (80021f8 <return_holding_registers+0x154>)
 80021ac:	0052      	lsls	r2, r2, #1
 80021ae:	5ad1      	ldrh	r1, [r2, r3]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	1c5a      	adds	r2, r3, #1
 80021b6:	b2d0      	uxtb	r0, r2
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	7010      	strb	r0, [r2, #0]
 80021bc:	001a      	movs	r2, r3
 80021be:	b2c9      	uxtb	r1, r1
 80021c0:	4b0c      	ldr	r3, [pc, #48]	@ (80021f4 <return_holding_registers+0x150>)
 80021c2:	5499      	strb	r1, [r3, r2]
	for(uint8_t i = 0; i < num_registers; i++)
 80021c4:	193b      	adds	r3, r7, r4
 80021c6:	781a      	ldrb	r2, [r3, #0]
 80021c8:	193b      	adds	r3, r7, r4
 80021ca:	3201      	adds	r2, #1
 80021cc:	701a      	strb	r2, [r3, #0]
 80021ce:	230f      	movs	r3, #15
 80021d0:	18fb      	adds	r3, r7, r3
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	220a      	movs	r2, #10
 80021d8:	18ba      	adds	r2, r7, r2
 80021da:	8812      	ldrh	r2, [r2, #0]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d8c9      	bhi.n	8002174 <return_holding_registers+0xd0>
//		if(prim == 0)
//		{
//			__enable_irq();
//		}
	}
	return modbus_send((*tx_len));
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	0018      	movs	r0, r3
 80021e6:	f000 f9f3 	bl	80025d0 <modbus_send>
 80021ea:	0003      	movs	r3, r0
}
 80021ec:	0018      	movs	r0, r3
 80021ee:	46bd      	mov	sp, r7
 80021f0:	b004      	add	sp, #16
 80021f2:	bdb0      	pop	{r4, r5, r7, pc}
 80021f4:	20000570 	.word	0x20000570
 80021f8:	20000000 	.word	0x20000000

080021fc <edit_multiple_registers>:

int8_t edit_multiple_registers(uint8_t *tx_len)
{
 80021fc:	b5b0      	push	{r4, r5, r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
	(*tx_len) = 0;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	701a      	strb	r2, [r3, #0]
	// Handle Error Checking
	uint16_t first_register_address = (get_rx_buffer(2) << 8) | get_rx_buffer(3);
 800220a:	2002      	movs	r0, #2
 800220c:	f000 fbb0 	bl	8002970 <get_rx_buffer>
 8002210:	0003      	movs	r3, r0
 8002212:	021b      	lsls	r3, r3, #8
 8002214:	b21c      	sxth	r4, r3
 8002216:	2003      	movs	r0, #3
 8002218:	f000 fbaa 	bl	8002970 <get_rx_buffer>
 800221c:	0003      	movs	r3, r0
 800221e:	b21b      	sxth	r3, r3
 8002220:	4323      	orrs	r3, r4
 8002222:	b21a      	sxth	r2, r3
 8002224:	2314      	movs	r3, #20
 8002226:	18fb      	adds	r3, r7, r3
 8002228:	801a      	strh	r2, [r3, #0]

	uint16_t num_registers = (get_rx_buffer(4) << 8) | get_rx_buffer(5);
 800222a:	2004      	movs	r0, #4
 800222c:	f000 fba0 	bl	8002970 <get_rx_buffer>
 8002230:	0003      	movs	r3, r0
 8002232:	021b      	lsls	r3, r3, #8
 8002234:	b21c      	sxth	r4, r3
 8002236:	2005      	movs	r0, #5
 8002238:	f000 fb9a 	bl	8002970 <get_rx_buffer>
 800223c:	0003      	movs	r3, r0
 800223e:	b21b      	sxth	r3, r3
 8002240:	4323      	orrs	r3, r4
 8002242:	b21a      	sxth	r2, r3
 8002244:	2112      	movs	r1, #18
 8002246:	187b      	adds	r3, r7, r1
 8002248:	801a      	strh	r2, [r3, #0]

	if(num_registers > 125 || num_registers < 1) // 125 is the limit according to modbus protocol
 800224a:	000a      	movs	r2, r1
 800224c:	18bb      	adds	r3, r7, r2
 800224e:	881b      	ldrh	r3, [r3, #0]
 8002250:	2b7d      	cmp	r3, #125	@ 0x7d
 8002252:	d803      	bhi.n	800225c <edit_multiple_registers+0x60>
 8002254:	18bb      	adds	r3, r7, r2
 8002256:	881b      	ldrh	r3, [r3, #0]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d104      	bne.n	8002266 <edit_multiple_registers+0x6a>
	{
		return modbus_exception(MB_ILLEGAL_DATA_VALUE);
 800225c:	2006      	movs	r0, #6
 800225e:	f000 f8cf 	bl	8002400 <modbus_exception>
 8002262:	0003      	movs	r3, r0
 8002264:	e0c3      	b.n	80023ee <edit_multiple_registers+0x1f2>
	}

	uint16_t last_register_address = first_register_address + (num_registers - 1);
 8002266:	2312      	movs	r3, #18
 8002268:	18fa      	adds	r2, r7, r3
 800226a:	2314      	movs	r3, #20
 800226c:	18fb      	adds	r3, r7, r3
 800226e:	8812      	ldrh	r2, [r2, #0]
 8002270:	881b      	ldrh	r3, [r3, #0]
 8002272:	18d3      	adds	r3, r2, r3
 8002274:	b29a      	uxth	r2, r3
 8002276:	2110      	movs	r1, #16
 8002278:	187b      	adds	r3, r7, r1
 800227a:	3a01      	subs	r2, #1
 800227c:	801a      	strh	r2, [r3, #0]

	if(last_register_address > NUM_HOLDING_REGISTERS)
 800227e:	187b      	adds	r3, r7, r1
 8002280:	881b      	ldrh	r3, [r3, #0]
 8002282:	2b4c      	cmp	r3, #76	@ 0x4c
 8002284:	d904      	bls.n	8002290 <edit_multiple_registers+0x94>
	{
		return modbus_exception(MB_ILLEGAL_DATA_ADDRESS);
 8002286:	2005      	movs	r0, #5
 8002288:	f000 f8ba 	bl	8002400 <modbus_exception>
 800228c:	0003      	movs	r3, r0
 800228e:	e0ae      	b.n	80023ee <edit_multiple_registers+0x1f2>
	}

	// Protect Read only values
	if(((first_register_address >= ADC_0) && (first_register_address <= REMOTE_QUARTERNION_Z)) ||
 8002290:	2214      	movs	r2, #20
 8002292:	18bb      	adds	r3, r7, r2
 8002294:	881b      	ldrh	r3, [r3, #0]
 8002296:	2b07      	cmp	r3, #7
 8002298:	d903      	bls.n	80022a2 <edit_multiple_registers+0xa6>
 800229a:	18bb      	adds	r3, r7, r2
 800229c:	881b      	ldrh	r3, [r3, #0]
 800229e:	2b3c      	cmp	r3, #60	@ 0x3c
 80022a0:	d912      	bls.n	80022c8 <edit_multiple_registers+0xcc>
 80022a2:	2210      	movs	r2, #16
 80022a4:	18bb      	adds	r3, r7, r2
 80022a6:	881b      	ldrh	r3, [r3, #0]
 80022a8:	2b07      	cmp	r3, #7
 80022aa:	d903      	bls.n	80022b4 <edit_multiple_registers+0xb8>
		 ((last_register_address >= ADC_0) && (last_register_address <= REMOTE_QUARTERNION_Z)) ||
 80022ac:	18bb      	adds	r3, r7, r2
 80022ae:	881b      	ldrh	r3, [r3, #0]
 80022b0:	2b3c      	cmp	r3, #60	@ 0x3c
 80022b2:	d909      	bls.n	80022c8 <edit_multiple_registers+0xcc>
 80022b4:	2314      	movs	r3, #20
 80022b6:	18fb      	adds	r3, r7, r3
 80022b8:	881b      	ldrh	r3, [r3, #0]
 80022ba:	2b07      	cmp	r3, #7
 80022bc:	d809      	bhi.n	80022d2 <edit_multiple_registers+0xd6>
		 ((first_register_address < ADC_0) && (last_register_address > REMOTE_QUARTERNION_Z)))
 80022be:	2310      	movs	r3, #16
 80022c0:	18fb      	adds	r3, r7, r3
 80022c2:	881b      	ldrh	r3, [r3, #0]
 80022c4:	2b3c      	cmp	r3, #60	@ 0x3c
 80022c6:	d904      	bls.n	80022d2 <edit_multiple_registers+0xd6>
	{
		// Ensure that sensor values are restricted to read-only
		return modbus_exception(MB_ILLEGAL_FUNCTION);
 80022c8:	2004      	movs	r0, #4
 80022ca:	f000 f899 	bl	8002400 <modbus_exception>
 80022ce:	0003      	movs	r3, r0
 80022d0:	e08d      	b.n	80023ee <edit_multiple_registers+0x1f2>
	}

	// Edit holding registers
	modbus_tx_buffer[0] = get_rx_buffer(0); // Append Slave id
 80022d2:	2000      	movs	r0, #0
 80022d4:	f000 fb4c 	bl	8002970 <get_rx_buffer>
 80022d8:	0003      	movs	r3, r0
 80022da:	001a      	movs	r2, r3
 80022dc:	4b46      	ldr	r3, [pc, #280]	@ (80023f8 <edit_multiple_registers+0x1fc>)
 80022de:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = get_rx_buffer(1); // Append Function Code
 80022e0:	2001      	movs	r0, #1
 80022e2:	f000 fb45 	bl	8002970 <get_rx_buffer>
 80022e6:	0003      	movs	r3, r0
 80022e8:	001a      	movs	r2, r3
 80022ea:	4b43      	ldr	r3, [pc, #268]	@ (80023f8 <edit_multiple_registers+0x1fc>)
 80022ec:	705a      	strb	r2, [r3, #1]
	// Append the Write Address (high byte then low byte)
	modbus_tx_buffer[2] = get_rx_buffer(2);
 80022ee:	2002      	movs	r0, #2
 80022f0:	f000 fb3e 	bl	8002970 <get_rx_buffer>
 80022f4:	0003      	movs	r3, r0
 80022f6:	001a      	movs	r2, r3
 80022f8:	4b3f      	ldr	r3, [pc, #252]	@ (80023f8 <edit_multiple_registers+0x1fc>)
 80022fa:	709a      	strb	r2, [r3, #2]
	modbus_tx_buffer[3] = get_rx_buffer(3);
 80022fc:	2003      	movs	r0, #3
 80022fe:	f000 fb37 	bl	8002970 <get_rx_buffer>
 8002302:	0003      	movs	r3, r0
 8002304:	001a      	movs	r2, r3
 8002306:	4b3c      	ldr	r3, [pc, #240]	@ (80023f8 <edit_multiple_registers+0x1fc>)
 8002308:	70da      	strb	r2, [r3, #3]
	// Append the quantity of registers to be written (high byte then low byte)
	modbus_tx_buffer[4] = get_rx_buffer(4);
 800230a:	2004      	movs	r0, #4
 800230c:	f000 fb30 	bl	8002970 <get_rx_buffer>
 8002310:	0003      	movs	r3, r0
 8002312:	001a      	movs	r2, r3
 8002314:	4b38      	ldr	r3, [pc, #224]	@ (80023f8 <edit_multiple_registers+0x1fc>)
 8002316:	711a      	strb	r2, [r3, #4]
	modbus_tx_buffer[5] = get_rx_buffer(5);
 8002318:	2005      	movs	r0, #5
 800231a:	f000 fb29 	bl	8002970 <get_rx_buffer>
 800231e:	0003      	movs	r3, r0
 8002320:	001a      	movs	r2, r3
 8002322:	4b35      	ldr	r3, [pc, #212]	@ (80023f8 <edit_multiple_registers+0x1fc>)
 8002324:	715a      	strb	r2, [r3, #5]
	(*tx_len) = 6;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2206      	movs	r2, #6
 800232a:	701a      	strb	r2, [r3, #0]

	for(uint8_t i = 0; i < num_registers; i++)
 800232c:	2317      	movs	r3, #23
 800232e:	18fb      	adds	r3, r7, r3
 8002330:	2200      	movs	r2, #0
 8002332:	701a      	strb	r2, [r3, #0]
 8002334:	e032      	b.n	800239c <edit_multiple_registers+0x1a0>
	{
		holding_register_database[first_register_address + i] = (get_rx_buffer(2 * i + 7) << 8) | get_rx_buffer(2 * i + 8);
 8002336:	2517      	movs	r5, #23
 8002338:	197b      	adds	r3, r7, r5
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	18db      	adds	r3, r3, r3
 800233e:	b2db      	uxtb	r3, r3
 8002340:	3307      	adds	r3, #7
 8002342:	b2db      	uxtb	r3, r3
 8002344:	0018      	movs	r0, r3
 8002346:	f000 fb13 	bl	8002970 <get_rx_buffer>
 800234a:	0003      	movs	r3, r0
 800234c:	021b      	lsls	r3, r3, #8
 800234e:	b21c      	sxth	r4, r3
 8002350:	197b      	adds	r3, r7, r5
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	3304      	adds	r3, #4
 8002356:	b2db      	uxtb	r3, r3
 8002358:	18db      	adds	r3, r3, r3
 800235a:	b2db      	uxtb	r3, r3
 800235c:	0018      	movs	r0, r3
 800235e:	f000 fb07 	bl	8002970 <get_rx_buffer>
 8002362:	0003      	movs	r3, r0
 8002364:	b21b      	sxth	r3, r3
 8002366:	4323      	orrs	r3, r4
 8002368:	b219      	sxth	r1, r3
 800236a:	2014      	movs	r0, #20
 800236c:	183b      	adds	r3, r7, r0
 800236e:	881a      	ldrh	r2, [r3, #0]
 8002370:	197b      	adds	r3, r7, r5
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	18d2      	adds	r2, r2, r3
 8002376:	b289      	uxth	r1, r1
 8002378:	4b20      	ldr	r3, [pc, #128]	@ (80023fc <edit_multiple_registers+0x200>)
 800237a:	0052      	lsls	r2, r2, #1
 800237c:	52d1      	strh	r1, [r2, r3]

		// Handle the range boundaries of each writable register
		handle_range(first_register_address + i);
 800237e:	197b      	adds	r3, r7, r5
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	b29a      	uxth	r2, r3
 8002384:	183b      	adds	r3, r7, r0
 8002386:	881b      	ldrh	r3, [r3, #0]
 8002388:	18d3      	adds	r3, r2, r3
 800238a:	b29b      	uxth	r3, r3
 800238c:	0018      	movs	r0, r3
 800238e:	f000 f85f 	bl	8002450 <handle_range>
	for(uint8_t i = 0; i < num_registers; i++)
 8002392:	197b      	adds	r3, r7, r5
 8002394:	781a      	ldrb	r2, [r3, #0]
 8002396:	197b      	adds	r3, r7, r5
 8002398:	3201      	adds	r2, #1
 800239a:	701a      	strb	r2, [r3, #0]
 800239c:	2317      	movs	r3, #23
 800239e:	18fb      	adds	r3, r7, r3
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	2212      	movs	r2, #18
 80023a6:	18ba      	adds	r2, r7, r2
 80023a8:	8812      	ldrh	r2, [r2, #0]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d8c3      	bhi.n	8002336 <edit_multiple_registers+0x13a>

	// TIMING WORKAROUND START
//	HAL_Delay(1);
	// TIMING WORKAROUND END

	int8_t status = modbus_send((*tx_len));
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	250f      	movs	r5, #15
 80023b4:	197c      	adds	r4, r7, r5
 80023b6:	0018      	movs	r0, r3
 80023b8:	f000 f90a 	bl	80025d0 <modbus_send>
 80023bc:	0003      	movs	r3, r0
 80023be:	7023      	strb	r3, [r4, #0]

	if(status == MB_SUCCESS)
 80023c0:	197b      	adds	r3, r7, r5
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	b25b      	sxtb	r3, r3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d10d      	bne.n	80023e6 <edit_multiple_registers+0x1ea>
	{
		// Special Case Modbus Baud Rate Modification
		if((first_register_address <= 1) && last_register_address >= 1)
 80023ca:	2314      	movs	r3, #20
 80023cc:	18fb      	adds	r3, r7, r3
 80023ce:	881b      	ldrh	r3, [r3, #0]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d808      	bhi.n	80023e6 <edit_multiple_registers+0x1ea>
 80023d4:	2310      	movs	r3, #16
 80023d6:	18fb      	adds	r3, r7, r3
 80023d8:	881b      	ldrh	r3, [r3, #0]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d003      	beq.n	80023e6 <edit_multiple_registers+0x1ea>
		{
			return modbus_change_baud_rate();
 80023de:	f000 fa41 	bl	8002864 <modbus_change_baud_rate>
 80023e2:	0003      	movs	r3, r0
 80023e4:	e003      	b.n	80023ee <edit_multiple_registers+0x1f2>
		}
	}
	return status;
 80023e6:	230f      	movs	r3, #15
 80023e8:	18fb      	adds	r3, r7, r3
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	b25b      	sxtb	r3, r3
}
 80023ee:	0018      	movs	r0, r3
 80023f0:	46bd      	mov	sp, r7
 80023f2:	b006      	add	sp, #24
 80023f4:	bdb0      	pop	{r4, r5, r7, pc}
 80023f6:	46c0      	nop			@ (mov r8, r8)
 80023f8:	20000570 	.word	0x20000570
 80023fc:	20000000 	.word	0x20000000

08002400 <modbus_exception>:

int8_t modbus_exception(int8_t exception_code)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	0002      	movs	r2, r0
 8002408:	1dfb      	adds	r3, r7, #7
 800240a:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[0] = get_rx_buffer(0);
 800240c:	2000      	movs	r0, #0
 800240e:	f000 faaf 	bl	8002970 <get_rx_buffer>
 8002412:	0003      	movs	r3, r0
 8002414:	001a      	movs	r2, r3
 8002416:	4b0d      	ldr	r3, [pc, #52]	@ (800244c <modbus_exception+0x4c>)
 8002418:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = get_rx_buffer(1) | 0x80;
 800241a:	2001      	movs	r0, #1
 800241c:	f000 faa8 	bl	8002970 <get_rx_buffer>
 8002420:	0003      	movs	r3, r0
 8002422:	001a      	movs	r2, r3
 8002424:	2380      	movs	r3, #128	@ 0x80
 8002426:	425b      	negs	r3, r3
 8002428:	4313      	orrs	r3, r2
 800242a:	b2da      	uxtb	r2, r3
 800242c:	4b07      	ldr	r3, [pc, #28]	@ (800244c <modbus_exception+0x4c>)
 800242e:	705a      	strb	r2, [r3, #1]
	modbus_tx_buffer[2] = exception_code - 3; // Subtract 3 to match the modbus defined error code value
 8002430:	1dfb      	adds	r3, r7, #7
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	3b03      	subs	r3, #3
 8002436:	b2da      	uxtb	r2, r3
 8002438:	4b04      	ldr	r3, [pc, #16]	@ (800244c <modbus_exception+0x4c>)
 800243a:	709a      	strb	r2, [r3, #2]

	return modbus_send(3);
 800243c:	2003      	movs	r0, #3
 800243e:	f000 f8c7 	bl	80025d0 <modbus_send>
 8002442:	0003      	movs	r3, r0
}
 8002444:	0018      	movs	r0, r3
 8002446:	46bd      	mov	sp, r7
 8002448:	b002      	add	sp, #8
 800244a:	bd80      	pop	{r7, pc}
 800244c:	20000570 	.word	0x20000570

08002450 <handle_range>:

void handle_range(uint16_t holding_register)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	0002      	movs	r2, r0
 8002458:	1dbb      	adds	r3, r7, #6
 800245a:	801a      	strh	r2, [r3, #0]
	switch(holding_register)
 800245c:	1dbb      	adds	r3, r7, #6
 800245e:	881b      	ldrh	r3, [r3, #0]
 8002460:	2b3f      	cmp	r3, #63	@ 0x3f
 8002462:	d900      	bls.n	8002466 <handle_range+0x16>
 8002464:	e0a8      	b.n	80025b8 <handle_range+0x168>
 8002466:	009a      	lsls	r2, r3, #2
 8002468:	4b55      	ldr	r3, [pc, #340]	@ (80025c0 <handle_range+0x170>)
 800246a:	18d3      	adds	r3, r2, r3
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	469f      	mov	pc, r3
	{
		case MODBUS_ID:
		{
			if(holding_register_database[holding_register] > 0xFF)
 8002470:	1dbb      	adds	r3, r7, #6
 8002472:	881a      	ldrh	r2, [r3, #0]
 8002474:	4b53      	ldr	r3, [pc, #332]	@ (80025c4 <handle_range+0x174>)
 8002476:	0052      	lsls	r2, r2, #1
 8002478:	5ad3      	ldrh	r3, [r2, r3]
 800247a:	2bff      	cmp	r3, #255	@ 0xff
 800247c:	d800      	bhi.n	8002480 <handle_range+0x30>
 800247e:	e08c      	b.n	800259a <handle_range+0x14a>
			{
				holding_register_database[holding_register] = 0xFF;
 8002480:	1dbb      	adds	r3, r7, #6
 8002482:	881a      	ldrh	r2, [r3, #0]
 8002484:	4b4f      	ldr	r3, [pc, #316]	@ (80025c4 <handle_range+0x174>)
 8002486:	0052      	lsls	r2, r2, #1
 8002488:	21ff      	movs	r1, #255	@ 0xff
 800248a:	52d1      	strh	r1, [r2, r3]
			}
			break;
 800248c:	e085      	b.n	800259a <handle_range+0x14a>
		}
		case MB_BAUD_RATE:
		{
			if(holding_register_database[holding_register] < BAUD_RATE_4800)
 800248e:	1dbb      	adds	r3, r7, #6
 8002490:	881a      	ldrh	r2, [r3, #0]
 8002492:	4b4c      	ldr	r3, [pc, #304]	@ (80025c4 <handle_range+0x174>)
 8002494:	0052      	lsls	r2, r2, #1
 8002496:	5ad3      	ldrh	r3, [r2, r3]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d806      	bhi.n	80024aa <handle_range+0x5a>
			{
				holding_register_database[holding_register] = BAUD_RATE_4800;
 800249c:	1dbb      	adds	r3, r7, #6
 800249e:	881a      	ldrh	r2, [r3, #0]
 80024a0:	4b48      	ldr	r3, [pc, #288]	@ (80025c4 <handle_range+0x174>)
 80024a2:	0052      	lsls	r2, r2, #1
 80024a4:	2102      	movs	r1, #2
 80024a6:	52d1      	strh	r1, [r2, r3]
			}
			else if(holding_register_database[holding_register] > BAUD_RATE_256000)
			{
				holding_register_database[holding_register] = BAUD_RATE_256000;
			}
			break;
 80024a8:	e079      	b.n	800259e <handle_range+0x14e>
			else if(holding_register_database[holding_register] > BAUD_RATE_256000)
 80024aa:	1dbb      	adds	r3, r7, #6
 80024ac:	881a      	ldrh	r2, [r3, #0]
 80024ae:	4b45      	ldr	r3, [pc, #276]	@ (80025c4 <handle_range+0x174>)
 80024b0:	0052      	lsls	r2, r2, #1
 80024b2:	5ad3      	ldrh	r3, [r2, r3]
 80024b4:	2b09      	cmp	r3, #9
 80024b6:	d800      	bhi.n	80024ba <handle_range+0x6a>
 80024b8:	e071      	b.n	800259e <handle_range+0x14e>
				holding_register_database[holding_register] = BAUD_RATE_256000;
 80024ba:	1dbb      	adds	r3, r7, #6
 80024bc:	881a      	ldrh	r2, [r3, #0]
 80024be:	4b41      	ldr	r3, [pc, #260]	@ (80025c4 <handle_range+0x174>)
 80024c0:	0052      	lsls	r2, r2, #1
 80024c2:	2109      	movs	r1, #9
 80024c4:	52d1      	strh	r1, [r2, r3]
			break;
 80024c6:	e06a      	b.n	800259e <handle_range+0x14e>
		}
		case MB_TRANSMIT_TIMEOUT:
		{
			if(holding_register_database[holding_register] < 5)
 80024c8:	1dbb      	adds	r3, r7, #6
 80024ca:	881a      	ldrh	r2, [r3, #0]
 80024cc:	4b3d      	ldr	r3, [pc, #244]	@ (80025c4 <handle_range+0x174>)
 80024ce:	0052      	lsls	r2, r2, #1
 80024d0:	5ad3      	ldrh	r3, [r2, r3]
 80024d2:	2b04      	cmp	r3, #4
 80024d4:	d806      	bhi.n	80024e4 <handle_range+0x94>
			{
				holding_register_database[holding_register] = 5;
 80024d6:	1dbb      	adds	r3, r7, #6
 80024d8:	881a      	ldrh	r2, [r3, #0]
 80024da:	4b3a      	ldr	r3, [pc, #232]	@ (80025c4 <handle_range+0x174>)
 80024dc:	0052      	lsls	r2, r2, #1
 80024de:	2105      	movs	r1, #5
 80024e0:	52d1      	strh	r1, [r2, r3]
			}
			else if(holding_register_database[holding_register] > 1000)
			{
				holding_register_database[holding_register] = 1000;
			}
			break;
 80024e2:	e05e      	b.n	80025a2 <handle_range+0x152>
			else if(holding_register_database[holding_register] > 1000)
 80024e4:	1dbb      	adds	r3, r7, #6
 80024e6:	881a      	ldrh	r2, [r3, #0]
 80024e8:	4b36      	ldr	r3, [pc, #216]	@ (80025c4 <handle_range+0x174>)
 80024ea:	0052      	lsls	r2, r2, #1
 80024ec:	5ad2      	ldrh	r2, [r2, r3]
 80024ee:	23fa      	movs	r3, #250	@ 0xfa
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d955      	bls.n	80025a2 <handle_range+0x152>
				holding_register_database[holding_register] = 1000;
 80024f6:	1dbb      	adds	r3, r7, #6
 80024f8:	881a      	ldrh	r2, [r3, #0]
 80024fa:	4b32      	ldr	r3, [pc, #200]	@ (80025c4 <handle_range+0x174>)
 80024fc:	0052      	lsls	r2, r2, #1
 80024fe:	21fa      	movs	r1, #250	@ 0xfa
 8002500:	0089      	lsls	r1, r1, #2
 8002502:	52d1      	strh	r1, [r2, r3]
			break;
 8002504:	e04d      	b.n	80025a2 <handle_range+0x152>
		}
		case MB_TRANSMIT_RETRIES:
		{
			if(holding_register_database[holding_register] > 5)
 8002506:	1dbb      	adds	r3, r7, #6
 8002508:	881a      	ldrh	r2, [r3, #0]
 800250a:	4b2e      	ldr	r3, [pc, #184]	@ (80025c4 <handle_range+0x174>)
 800250c:	0052      	lsls	r2, r2, #1
 800250e:	5ad3      	ldrh	r3, [r2, r3]
 8002510:	2b05      	cmp	r3, #5
 8002512:	d948      	bls.n	80025a6 <handle_range+0x156>
			{
				holding_register_database[holding_register] = 5;
 8002514:	1dbb      	adds	r3, r7, #6
 8002516:	881a      	ldrh	r2, [r3, #0]
 8002518:	4b2a      	ldr	r3, [pc, #168]	@ (80025c4 <handle_range+0x174>)
 800251a:	0052      	lsls	r2, r2, #1
 800251c:	2105      	movs	r1, #5
 800251e:	52d1      	strh	r1, [r2, r3]
			}
			break;
 8002520:	e041      	b.n	80025a6 <handle_range+0x156>
		}
		case MB_ERRORS:
		{
			if(holding_register_database[holding_register] > 0x3FF)
 8002522:	1dbb      	adds	r3, r7, #6
 8002524:	881a      	ldrh	r2, [r3, #0]
 8002526:	4b27      	ldr	r3, [pc, #156]	@ (80025c4 <handle_range+0x174>)
 8002528:	0052      	lsls	r2, r2, #1
 800252a:	5ad2      	ldrh	r2, [r2, r3]
 800252c:	2380      	movs	r3, #128	@ 0x80
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	429a      	cmp	r2, r3
 8002532:	d33a      	bcc.n	80025aa <handle_range+0x15a>
			{
				holding_register_database[holding_register] = 0x3FF;
 8002534:	1dbb      	adds	r3, r7, #6
 8002536:	881a      	ldrh	r2, [r3, #0]
 8002538:	4b22      	ldr	r3, [pc, #136]	@ (80025c4 <handle_range+0x174>)
 800253a:	0052      	lsls	r2, r2, #1
 800253c:	4922      	ldr	r1, [pc, #136]	@ (80025c8 <handle_range+0x178>)
 800253e:	52d1      	strh	r1, [r2, r3]
			}
			break;
 8002540:	e033      	b.n	80025aa <handle_range+0x15a>
		}
		case I2C_ERRORS:
		{
			if(holding_register_database[holding_register] > 0x7F)
 8002542:	1dbb      	adds	r3, r7, #6
 8002544:	881a      	ldrh	r2, [r3, #0]
 8002546:	4b1f      	ldr	r3, [pc, #124]	@ (80025c4 <handle_range+0x174>)
 8002548:	0052      	lsls	r2, r2, #1
 800254a:	5ad3      	ldrh	r3, [r2, r3]
 800254c:	2b7f      	cmp	r3, #127	@ 0x7f
 800254e:	d92e      	bls.n	80025ae <handle_range+0x15e>
			{
				holding_register_database[holding_register] = 0x7F;
 8002550:	1dbb      	adds	r3, r7, #6
 8002552:	881a      	ldrh	r2, [r3, #0]
 8002554:	4b1b      	ldr	r3, [pc, #108]	@ (80025c4 <handle_range+0x174>)
 8002556:	0052      	lsls	r2, r2, #1
 8002558:	217f      	movs	r1, #127	@ 0x7f
 800255a:	52d1      	strh	r1, [r2, r3]
			}
			break;
 800255c:	e027      	b.n	80025ae <handle_range+0x15e>
		}
		case I2C_SHUTDOWN ... AUTOPILOT:
		{
			if(holding_register_database[holding_register] > 1)
 800255e:	1dbb      	adds	r3, r7, #6
 8002560:	881a      	ldrh	r2, [r3, #0]
 8002562:	4b18      	ldr	r3, [pc, #96]	@ (80025c4 <handle_range+0x174>)
 8002564:	0052      	lsls	r2, r2, #1
 8002566:	5ad3      	ldrh	r3, [r2, r3]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d922      	bls.n	80025b2 <handle_range+0x162>
			{
				holding_register_database[holding_register] = 1;
 800256c:	1dbb      	adds	r3, r7, #6
 800256e:	881a      	ldrh	r2, [r3, #0]
 8002570:	4b14      	ldr	r3, [pc, #80]	@ (80025c4 <handle_range+0x174>)
 8002572:	0052      	lsls	r2, r2, #1
 8002574:	2101      	movs	r1, #1
 8002576:	52d1      	strh	r1, [r2, r3]
			}
			break;
 8002578:	e01b      	b.n	80025b2 <handle_range+0x162>
		}
		case ACTUATOR_A_TARGET ... ACTUATOR_C_TARGET:
		{
			if(holding_register_database[holding_register] > 0x0FFF)
 800257a:	1dbb      	adds	r3, r7, #6
 800257c:	881a      	ldrh	r2, [r3, #0]
 800257e:	4b11      	ldr	r3, [pc, #68]	@ (80025c4 <handle_range+0x174>)
 8002580:	0052      	lsls	r2, r2, #1
 8002582:	5ad2      	ldrh	r2, [r2, r3]
 8002584:	2380      	movs	r3, #128	@ 0x80
 8002586:	015b      	lsls	r3, r3, #5
 8002588:	429a      	cmp	r2, r3
 800258a:	d314      	bcc.n	80025b6 <handle_range+0x166>
			{
				holding_register_database[holding_register] = 0x0FFF;
 800258c:	1dbb      	adds	r3, r7, #6
 800258e:	881a      	ldrh	r2, [r3, #0]
 8002590:	4b0c      	ldr	r3, [pc, #48]	@ (80025c4 <handle_range+0x174>)
 8002592:	0052      	lsls	r2, r2, #1
 8002594:	490d      	ldr	r1, [pc, #52]	@ (80025cc <handle_range+0x17c>)
 8002596:	52d1      	strh	r1, [r2, r3]
			}
			break;
 8002598:	e00d      	b.n	80025b6 <handle_range+0x166>
			break;
 800259a:	46c0      	nop			@ (mov r8, r8)
 800259c:	e00c      	b.n	80025b8 <handle_range+0x168>
			break;
 800259e:	46c0      	nop			@ (mov r8, r8)
 80025a0:	e00a      	b.n	80025b8 <handle_range+0x168>
			break;
 80025a2:	46c0      	nop			@ (mov r8, r8)
 80025a4:	e008      	b.n	80025b8 <handle_range+0x168>
			break;
 80025a6:	46c0      	nop			@ (mov r8, r8)
 80025a8:	e006      	b.n	80025b8 <handle_range+0x168>
			break;
 80025aa:	46c0      	nop			@ (mov r8, r8)
 80025ac:	e004      	b.n	80025b8 <handle_range+0x168>
			break;
 80025ae:	46c0      	nop			@ (mov r8, r8)
 80025b0:	e002      	b.n	80025b8 <handle_range+0x168>
			break;
 80025b2:	46c0      	nop			@ (mov r8, r8)
 80025b4:	e000      	b.n	80025b8 <handle_range+0x168>
			break;
 80025b6:	46c0      	nop			@ (mov r8, r8)
		}
	}
}
 80025b8:	46c0      	nop			@ (mov r8, r8)
 80025ba:	46bd      	mov	sp, r7
 80025bc:	b002      	add	sp, #8
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	08009480 	.word	0x08009480
 80025c4:	20000000 	.word	0x20000000
 80025c8:	000003ff 	.word	0x000003ff
 80025cc:	00000fff 	.word	0x00000fff

080025d0 <modbus_send>:
#endif // MB_SLAVE

// General Modbus Functions -------------------------------------------------------------------

int8_t modbus_send(uint8_t size)
{
 80025d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	0002      	movs	r2, r0
 80025d8:	1dfb      	adds	r3, r7, #7
 80025da:	701a      	strb	r2, [r3, #0]
	int8_t status = HAL_OK;
 80025dc:	250f      	movs	r5, #15
 80025de:	197b      	adds	r3, r7, r5
 80025e0:	2200      	movs	r2, #0
 80025e2:	701a      	strb	r2, [r3, #0]
	// Append CRC (low byte then high byte)
	uint16_t crc = crc_16(modbus_tx_buffer, size);
 80025e4:	260c      	movs	r6, #12
 80025e6:	19bc      	adds	r4, r7, r6
 80025e8:	1dfb      	adds	r3, r7, #7
 80025ea:	781a      	ldrb	r2, [r3, #0]
 80025ec:	4b1e      	ldr	r3, [pc, #120]	@ (8002668 <modbus_send+0x98>)
 80025ee:	0011      	movs	r1, r2
 80025f0:	0018      	movs	r0, r3
 80025f2:	f000 fa0d 	bl	8002a10 <crc_16>
 80025f6:	0003      	movs	r3, r0
 80025f8:	8023      	strh	r3, [r4, #0]
	modbus_tx_buffer[size] = low_byte(crc);
 80025fa:	1dfb      	adds	r3, r7, #7
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	19ba      	adds	r2, r7, r6
 8002600:	8812      	ldrh	r2, [r2, #0]
 8002602:	b2d1      	uxtb	r1, r2
 8002604:	4a18      	ldr	r2, [pc, #96]	@ (8002668 <modbus_send+0x98>)
 8002606:	54d1      	strb	r1, [r2, r3]
	modbus_tx_buffer[size + 1] = high_byte(crc);
 8002608:	19bb      	adds	r3, r7, r6
 800260a:	881b      	ldrh	r3, [r3, #0]
 800260c:	0a1b      	lsrs	r3, r3, #8
 800260e:	b29a      	uxth	r2, r3
 8002610:	1dfb      	adds	r3, r7, #7
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	3301      	adds	r3, #1
 8002616:	b2d1      	uxtb	r1, r2
 8002618:	4a13      	ldr	r2, [pc, #76]	@ (8002668 <modbus_send+0x98>)
 800261a:	54d1      	strb	r1, [r2, r3]

	uart_tx_int = 0; // This will enable tx timeout monitoring
 800261c:	4b13      	ldr	r3, [pc, #76]	@ (800266c <modbus_send+0x9c>)
 800261e:	2200      	movs	r2, #0
 8002620:	701a      	strb	r2, [r3, #0]
	tx_time = HAL_GetTick();
 8002622:	f000 ff85 	bl	8003530 <HAL_GetTick>
 8002626:	0002      	movs	r2, r0
 8002628:	4b11      	ldr	r3, [pc, #68]	@ (8002670 <modbus_send+0xa0>)
 800262a:	601a      	str	r2, [r3, #0]
	status = HAL_UART_Transmit_DMA(&huart1, modbus_tx_buffer, size + 2);
 800262c:	1dfb      	adds	r3, r7, #7
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	b29b      	uxth	r3, r3
 8002632:	3302      	adds	r3, #2
 8002634:	b29a      	uxth	r2, r3
 8002636:	490c      	ldr	r1, [pc, #48]	@ (8002668 <modbus_send+0x98>)
 8002638:	4b0e      	ldr	r3, [pc, #56]	@ (8002674 <modbus_send+0xa4>)
 800263a:	0018      	movs	r0, r3
 800263c:	f004 fec0 	bl	80073c0 <HAL_UART_Transmit_DMA>
 8002640:	0003      	movs	r3, r0
 8002642:	001a      	movs	r2, r3
 8002644:	197b      	adds	r3, r7, r5
 8002646:	701a      	strb	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(&hdma_usart1_tx, DMA_IT_HT);
 8002648:	4b0b      	ldr	r3, [pc, #44]	@ (8002678 <modbus_send+0xa8>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	4b0a      	ldr	r3, [pc, #40]	@ (8002678 <modbus_send+0xa8>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2104      	movs	r1, #4
 8002654:	438a      	bics	r2, r1
 8002656:	601a      	str	r2, [r3, #0]
	return status;
 8002658:	197b      	adds	r3, r7, r5
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	b25b      	sxtb	r3, r3
}
 800265e:	0018      	movs	r0, r3
 8002660:	46bd      	mov	sp, r7
 8002662:	b005      	add	sp, #20
 8002664:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002666:	46c0      	nop			@ (mov r8, r8)
 8002668:	20000570 	.word	0x20000570
 800266c:	2000009a 	.word	0x2000009a
 8002670:	2000076c 	.word	0x2000076c
 8002674:	200002d8 	.word	0x200002d8
 8002678:	200003c8 	.word	0x200003c8

0800267c <modbus_reset>:

int8_t modbus_reset()
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
	int8_t status = 0;
 8002682:	1dfb      	adds	r3, r7, #7
 8002684:	2200      	movs	r2, #0
 8002686:	701a      	strb	r2, [r3, #0]
	status = HAL_UART_Abort(&huart1);
 8002688:	4b30      	ldr	r3, [pc, #192]	@ (800274c <modbus_reset+0xd0>)
 800268a:	0018      	movs	r0, r3
 800268c:	f004 ff2a 	bl	80074e4 <HAL_UART_Abort>
 8002690:	0003      	movs	r3, r0
 8002692:	001a      	movs	r2, r3
 8002694:	1dfb      	adds	r3, r7, #7
 8002696:	701a      	strb	r2, [r3, #0]
	status |= HAL_UART_DeInit(&huart1);
 8002698:	4b2c      	ldr	r3, [pc, #176]	@ (800274c <modbus_reset+0xd0>)
 800269a:	0018      	movs	r0, r3
 800269c:	f004 fe50 	bl	8007340 <HAL_UART_DeInit>
 80026a0:	0003      	movs	r3, r0
 80026a2:	b259      	sxtb	r1, r3
 80026a4:	1dfb      	adds	r3, r7, #7
 80026a6:	1dfa      	adds	r2, r7, #7
 80026a8:	7812      	ldrb	r2, [r2, #0]
 80026aa:	430a      	orrs	r2, r1
 80026ac:	701a      	strb	r2, [r3, #0]
	__USART1_FORCE_RESET();
 80026ae:	4b28      	ldr	r3, [pc, #160]	@ (8002750 <modbus_reset+0xd4>)
 80026b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80026b2:	4b27      	ldr	r3, [pc, #156]	@ (8002750 <modbus_reset+0xd4>)
 80026b4:	2180      	movs	r1, #128	@ 0x80
 80026b6:	01c9      	lsls	r1, r1, #7
 80026b8:	430a      	orrs	r2, r1
 80026ba:	631a      	str	r2, [r3, #48]	@ 0x30
	HAL_Delay(100);
 80026bc:	2064      	movs	r0, #100	@ 0x64
 80026be:	f000 ff41 	bl	8003544 <HAL_Delay>
	__USART1_RELEASE_RESET();
 80026c2:	4b23      	ldr	r3, [pc, #140]	@ (8002750 <modbus_reset+0xd4>)
 80026c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80026c6:	4b22      	ldr	r3, [pc, #136]	@ (8002750 <modbus_reset+0xd4>)
 80026c8:	4922      	ldr	r1, [pc, #136]	@ (8002754 <modbus_reset+0xd8>)
 80026ca:	400a      	ands	r2, r1
 80026cc:	631a      	str	r2, [r3, #48]	@ 0x30
	status = HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0);
 80026ce:	481f      	ldr	r0, [pc, #124]	@ (800274c <modbus_reset+0xd0>)
 80026d0:	2300      	movs	r3, #0
 80026d2:	2200      	movs	r2, #0
 80026d4:	2100      	movs	r1, #0
 80026d6:	f006 f9a3 	bl	8008a20 <HAL_RS485Ex_Init>
 80026da:	0003      	movs	r3, r0
 80026dc:	001a      	movs	r2, r3
 80026de:	1dfb      	adds	r3, r7, #7
 80026e0:	701a      	strb	r2, [r3, #0]
	status |= HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8);
 80026e2:	4b1a      	ldr	r3, [pc, #104]	@ (800274c <modbus_reset+0xd0>)
 80026e4:	2100      	movs	r1, #0
 80026e6:	0018      	movs	r0, r3
 80026e8:	f006 fa5e 	bl	8008ba8 <HAL_UARTEx_SetTxFifoThreshold>
 80026ec:	0003      	movs	r3, r0
 80026ee:	b259      	sxtb	r1, r3
 80026f0:	1dfb      	adds	r3, r7, #7
 80026f2:	1dfa      	adds	r2, r7, #7
 80026f4:	7812      	ldrb	r2, [r2, #0]
 80026f6:	430a      	orrs	r2, r1
 80026f8:	701a      	strb	r2, [r3, #0]
	status |= HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8);
 80026fa:	4b14      	ldr	r3, [pc, #80]	@ (800274c <modbus_reset+0xd0>)
 80026fc:	2100      	movs	r1, #0
 80026fe:	0018      	movs	r0, r3
 8002700:	f006 fa92 	bl	8008c28 <HAL_UARTEx_SetRxFifoThreshold>
 8002704:	0003      	movs	r3, r0
 8002706:	b259      	sxtb	r1, r3
 8002708:	1dfb      	adds	r3, r7, #7
 800270a:	1dfa      	adds	r2, r7, #7
 800270c:	7812      	ldrb	r2, [r2, #0]
 800270e:	430a      	orrs	r2, r1
 8002710:	701a      	strb	r2, [r3, #0]
	status |= HAL_UARTEx_DisableFifoMode(&huart1);
 8002712:	4b0e      	ldr	r3, [pc, #56]	@ (800274c <modbus_reset+0xd0>)
 8002714:	0018      	movs	r0, r3
 8002716:	f006 fa0d 	bl	8008b34 <HAL_UARTEx_DisableFifoMode>
 800271a:	0003      	movs	r3, r0
 800271c:	b259      	sxtb	r1, r3
 800271e:	1dfb      	adds	r3, r7, #7
 8002720:	1dfa      	adds	r2, r7, #7
 8002722:	7812      	ldrb	r2, [r2, #0]
 8002724:	430a      	orrs	r2, r1
 8002726:	701a      	strb	r2, [r3, #0]
	if(status != HAL_OK)
 8002728:	1dfb      	adds	r3, r7, #7
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	b25b      	sxtb	r3, r3
 800272e:	2b00      	cmp	r3, #0
 8002730:	d004      	beq.n	800273c <modbus_reset+0xc0>
	{
		return handle_modbus_error(MB_FATAL_ERROR);
 8002732:	2015      	movs	r0, #21
 8002734:	f000 f94e 	bl	80029d4 <handle_modbus_error>
 8002738:	0003      	movs	r3, r0
 800273a:	e002      	b.n	8002742 <modbus_reset+0xc6>
	}
	return status;
 800273c:	1dfb      	adds	r3, r7, #7
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	b25b      	sxtb	r3, r3
}
 8002742:	0018      	movs	r0, r3
 8002744:	46bd      	mov	sp, r7
 8002746:	b002      	add	sp, #8
 8002748:	bd80      	pop	{r7, pc}
 800274a:	46c0      	nop			@ (mov r8, r8)
 800274c:	200002d8 	.word	0x200002d8
 8002750:	40021000 	.word	0x40021000
 8002754:	ffffbfff 	.word	0xffffbfff

08002758 <modbus_set_rx>:

int8_t modbus_set_rx()
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
	int8_t status = HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rx_chunk, 6);
 800275e:	490c      	ldr	r1, [pc, #48]	@ (8002790 <modbus_set_rx+0x38>)
 8002760:	4b0c      	ldr	r3, [pc, #48]	@ (8002794 <modbus_set_rx+0x3c>)
 8002762:	2206      	movs	r2, #6
 8002764:	0018      	movs	r0, r3
 8002766:	f006 faa1 	bl	8008cac <HAL_UARTEx_ReceiveToIdle_DMA>
 800276a:	0003      	movs	r3, r0
 800276c:	001a      	movs	r2, r3
 800276e:	1dfb      	adds	r3, r7, #7
 8002770:	701a      	strb	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8002772:	4b09      	ldr	r3, [pc, #36]	@ (8002798 <modbus_set_rx+0x40>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	4b07      	ldr	r3, [pc, #28]	@ (8002798 <modbus_set_rx+0x40>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2104      	movs	r1, #4
 800277e:	438a      	bics	r2, r1
 8002780:	601a      	str	r2, [r3, #0]

	return status;
 8002782:	1dfb      	adds	r3, r7, #7
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	b25b      	sxtb	r3, r3
}
 8002788:	0018      	movs	r0, r3
 800278a:	46bd      	mov	sp, r7
 800278c:	b002      	add	sp, #8
 800278e:	bd80      	pop	{r7, pc}
 8002790:	20000670 	.word	0x20000670
 8002794:	200002d8 	.word	0x200002d8
 8002798:	2000036c 	.word	0x2000036c

0800279c <monitor_modbus>:

int8_t monitor_modbus()
{
 800279c:	b590      	push	{r4, r7, lr}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
	int8_t status = MB_SUCCESS;
 80027a2:	1dfb      	adds	r3, r7, #7
 80027a4:	2200      	movs	r2, #0
 80027a6:	701a      	strb	r2, [r3, #0]

	// Chunk miss handling
	status = handle_chunk_miss();
 80027a8:	1dfc      	adds	r4, r7, #7
 80027aa:	f000 f977 	bl	8002a9c <handle_chunk_miss>
 80027ae:	0003      	movs	r3, r0
 80027b0:	7023      	strb	r3, [r4, #0]
	if(status != MB_SUCCESS)
 80027b2:	1dfb      	adds	r3, r7, #7
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	b25b      	sxtb	r3, r3
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d012      	beq.n	80027e2 <monitor_modbus+0x46>
	{
		status = modbus_reset();
 80027bc:	1dfc      	adds	r4, r7, #7
 80027be:	f7ff ff5d 	bl	800267c <modbus_reset>
 80027c2:	0003      	movs	r3, r0
 80027c4:	7023      	strb	r3, [r4, #0]
		if(status != MB_SUCCESS)
 80027c6:	1dfb      	adds	r3, r7, #7
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	b25b      	sxtb	r3, r3
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d003      	beq.n	80027d8 <monitor_modbus+0x3c>
		{
			return status;
 80027d0:	1dfb      	adds	r3, r7, #7
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	b25b      	sxtb	r3, r3
 80027d6:	e039      	b.n	800284c <monitor_modbus+0xb0>
		}
		return handle_modbus_error(MB_UART_ERROR);
 80027d8:	2014      	movs	r0, #20
 80027da:	f000 f8fb 	bl	80029d4 <handle_modbus_error>
 80027de:	0003      	movs	r3, r0
 80027e0:	e034      	b.n	800284c <monitor_modbus+0xb0>
	}

	// Uart error handling
	if(uart_err_int)
 80027e2:	4b1c      	ldr	r3, [pc, #112]	@ (8002854 <monitor_modbus+0xb8>)
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d015      	beq.n	8002818 <monitor_modbus+0x7c>
	{
		uart_err_int = 0;
 80027ec:	4b19      	ldr	r3, [pc, #100]	@ (8002854 <monitor_modbus+0xb8>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	701a      	strb	r2, [r3, #0]
		status = modbus_reset();
 80027f2:	1dfc      	adds	r4, r7, #7
 80027f4:	f7ff ff42 	bl	800267c <modbus_reset>
 80027f8:	0003      	movs	r3, r0
 80027fa:	7023      	strb	r3, [r4, #0]
		if(status != MB_SUCCESS)
 80027fc:	1dfb      	adds	r3, r7, #7
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	b25b      	sxtb	r3, r3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d003      	beq.n	800280e <monitor_modbus+0x72>
		{
			return status;
 8002806:	1dfb      	adds	r3, r7, #7
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	b25b      	sxtb	r3, r3
 800280c:	e01e      	b.n	800284c <monitor_modbus+0xb0>
		}
		return handle_modbus_error(MB_UART_ERROR);
 800280e:	2014      	movs	r0, #20
 8002810:	f000 f8e0 	bl	80029d4 <handle_modbus_error>
 8002814:	0003      	movs	r3, r0
 8002816:	e019      	b.n	800284c <monitor_modbus+0xb0>
	}

	// TX timeout handling
	if(!uart_tx_int)
 8002818:	4b0f      	ldr	r3, [pc, #60]	@ (8002858 <monitor_modbus+0xbc>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	d111      	bne.n	8002846 <monitor_modbus+0xaa>
	{
		if(HAL_GetTick() - tx_time >= holding_register_database[MB_TRANSMIT_TIMEOUT])
 8002822:	f000 fe85 	bl	8003530 <HAL_GetTick>
 8002826:	0002      	movs	r2, r0
 8002828:	4b0c      	ldr	r3, [pc, #48]	@ (800285c <monitor_modbus+0xc0>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	4a0c      	ldr	r2, [pc, #48]	@ (8002860 <monitor_modbus+0xc4>)
 8002830:	8892      	ldrh	r2, [r2, #4]
 8002832:	4293      	cmp	r3, r2
 8002834:	d304      	bcc.n	8002840 <monitor_modbus+0xa4>
		{
			return handle_modbus_error(MB_TX_TIMEOUT);
 8002836:	2012      	movs	r0, #18
 8002838:	f000 f8cc 	bl	80029d4 <handle_modbus_error>
 800283c:	0003      	movs	r3, r0
 800283e:	e005      	b.n	800284c <monitor_modbus+0xb0>
		}
		status = HAL_BUSY;
 8002840:	1dfb      	adds	r3, r7, #7
 8002842:	2202      	movs	r2, #2
 8002844:	701a      	strb	r2, [r3, #0]
			}
			status = HAL_BUSY;
		}
	}
#endif
	return status;
 8002846:	1dfb      	adds	r3, r7, #7
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	b25b      	sxtb	r3, r3
}
 800284c:	0018      	movs	r0, r3
 800284e:	46bd      	mov	sp, r7
 8002850:	b003      	add	sp, #12
 8002852:	bd90      	pop	{r4, r7, pc}
 8002854:	2000077b 	.word	0x2000077b
 8002858:	2000009a 	.word	0x2000009a
 800285c:	2000076c 	.word	0x2000076c
 8002860:	20000000 	.word	0x20000000

08002864 <modbus_change_baud_rate>:

	return status;
}

int8_t modbus_change_baud_rate()
{
 8002864:	b590      	push	{r4, r7, lr}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
	int8_t status = 0;
 800286a:	1dfb      	adds	r3, r7, #7
 800286c:	2200      	movs	r2, #0
 800286e:	701a      	strb	r2, [r3, #0]

	switch(holding_register_database[MB_BAUD_RATE])
 8002870:	4b3c      	ldr	r3, [pc, #240]	@ (8002964 <modbus_change_baud_rate+0x100>)
 8002872:	885b      	ldrh	r3, [r3, #2]
 8002874:	2b09      	cmp	r3, #9
 8002876:	d82c      	bhi.n	80028d2 <modbus_change_baud_rate+0x6e>
 8002878:	009a      	lsls	r2, r3, #2
 800287a:	4b3b      	ldr	r3, [pc, #236]	@ (8002968 <modbus_change_baud_rate+0x104>)
 800287c:	18d3      	adds	r3, r2, r3
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	469f      	mov	pc, r3
	{
		case BAUD_RATE_4800:
		{
			huart1.Init.BaudRate = 4800;
 8002882:	4b3a      	ldr	r3, [pc, #232]	@ (800296c <modbus_change_baud_rate+0x108>)
 8002884:	2296      	movs	r2, #150	@ 0x96
 8002886:	0152      	lsls	r2, r2, #5
 8002888:	605a      	str	r2, [r3, #4]
			break;
 800288a:	e049      	b.n	8002920 <modbus_change_baud_rate+0xbc>
		}
		case BAUD_RATE_9600:
		{
			huart1.Init.BaudRate = 9600;
 800288c:	4b37      	ldr	r3, [pc, #220]	@ (800296c <modbus_change_baud_rate+0x108>)
 800288e:	2296      	movs	r2, #150	@ 0x96
 8002890:	0192      	lsls	r2, r2, #6
 8002892:	605a      	str	r2, [r3, #4]
			break;
 8002894:	e044      	b.n	8002920 <modbus_change_baud_rate+0xbc>
		}
		case BAUD_RATE_19200:
		{
			huart1.Init.BaudRate = 19200;
 8002896:	4b35      	ldr	r3, [pc, #212]	@ (800296c <modbus_change_baud_rate+0x108>)
 8002898:	2296      	movs	r2, #150	@ 0x96
 800289a:	01d2      	lsls	r2, r2, #7
 800289c:	605a      	str	r2, [r3, #4]
			break;
 800289e:	e03f      	b.n	8002920 <modbus_change_baud_rate+0xbc>
		}
		case BAUD_RATE_38400:
		{
			huart1.Init.BaudRate = 38400;
 80028a0:	4b32      	ldr	r3, [pc, #200]	@ (800296c <modbus_change_baud_rate+0x108>)
 80028a2:	2296      	movs	r2, #150	@ 0x96
 80028a4:	0212      	lsls	r2, r2, #8
 80028a6:	605a      	str	r2, [r3, #4]
			break;
 80028a8:	e03a      	b.n	8002920 <modbus_change_baud_rate+0xbc>
		}
		case BAUD_RATE_57600:
		{
			huart1.Init.BaudRate = 57600;
 80028aa:	4b30      	ldr	r3, [pc, #192]	@ (800296c <modbus_change_baud_rate+0x108>)
 80028ac:	22e1      	movs	r2, #225	@ 0xe1
 80028ae:	0212      	lsls	r2, r2, #8
 80028b0:	605a      	str	r2, [r3, #4]
			break;
 80028b2:	e035      	b.n	8002920 <modbus_change_baud_rate+0xbc>
		}
		case BAUD_RATE_115200:
		{
			huart1.Init.BaudRate = 115200;
 80028b4:	4b2d      	ldr	r3, [pc, #180]	@ (800296c <modbus_change_baud_rate+0x108>)
 80028b6:	22e1      	movs	r2, #225	@ 0xe1
 80028b8:	0252      	lsls	r2, r2, #9
 80028ba:	605a      	str	r2, [r3, #4]
			break;
 80028bc:	e030      	b.n	8002920 <modbus_change_baud_rate+0xbc>
		}
		case BAUD_RATE_128000:
		{
			huart1.Init.BaudRate = 128000;
 80028be:	4b2b      	ldr	r3, [pc, #172]	@ (800296c <modbus_change_baud_rate+0x108>)
 80028c0:	22fa      	movs	r2, #250	@ 0xfa
 80028c2:	0252      	lsls	r2, r2, #9
 80028c4:	605a      	str	r2, [r3, #4]
			break;
 80028c6:	e02b      	b.n	8002920 <modbus_change_baud_rate+0xbc>
		}
		case BAUD_RATE_256000:
		{
			huart1.Init.BaudRate = 256000;
 80028c8:	4b28      	ldr	r3, [pc, #160]	@ (800296c <modbus_change_baud_rate+0x108>)
 80028ca:	22fa      	movs	r2, #250	@ 0xfa
 80028cc:	0292      	lsls	r2, r2, #10
 80028ce:	605a      	str	r2, [r3, #4]
			break;
 80028d0:	e026      	b.n	8002920 <modbus_change_baud_rate+0xbc>
		}
		default:
		{
			holding_register_database[MB_BAUD_RATE] = BAUD_RATE_9600;
 80028d2:	4b24      	ldr	r3, [pc, #144]	@ (8002964 <modbus_change_baud_rate+0x100>)
 80028d4:	2203      	movs	r2, #3
 80028d6:	805a      	strh	r2, [r3, #2]
			huart1.Init.BaudRate = 9600;
 80028d8:	4b24      	ldr	r3, [pc, #144]	@ (800296c <modbus_change_baud_rate+0x108>)
 80028da:	2296      	movs	r2, #150	@ 0x96
 80028dc:	0192      	lsls	r2, r2, #6
 80028de:	605a      	str	r2, [r3, #4]
			status = UART_SetConfig(&huart1);
 80028e0:	4b22      	ldr	r3, [pc, #136]	@ (800296c <modbus_change_baud_rate+0x108>)
 80028e2:	0018      	movs	r0, r3
 80028e4:	f005 fa68 	bl	8007db8 <UART_SetConfig>
 80028e8:	0003      	movs	r3, r0
 80028ea:	001a      	movs	r2, r3
 80028ec:	1dfb      	adds	r3, r7, #7
 80028ee:	701a      	strb	r2, [r3, #0]
			if(status == HAL_OK)
 80028f0:	1dfb      	adds	r3, r7, #7
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	b25b      	sxtb	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d10d      	bne.n	8002916 <modbus_change_baud_rate+0xb2>
			{
				status = modbus_reset();
 80028fa:	1dfc      	adds	r4, r7, #7
 80028fc:	f7ff febe 	bl	800267c <modbus_reset>
 8002900:	0003      	movs	r3, r0
 8002902:	7023      	strb	r3, [r4, #0]
				if(status != HAL_OK)
 8002904:	1dfb      	adds	r3, r7, #7
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	b25b      	sxtb	r3, r3
 800290a:	2b00      	cmp	r3, #0
 800290c:	d003      	beq.n	8002916 <modbus_change_baud_rate+0xb2>
				{
					return status;
 800290e:	1dfb      	adds	r3, r7, #7
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	b25b      	sxtb	r3, r3
 8002914:	e022      	b.n	800295c <modbus_change_baud_rate+0xf8>
				}
			}
			return handle_modbus_error(RANGE_ERROR);
 8002916:	200e      	movs	r0, #14
 8002918:	f000 f85c 	bl	80029d4 <handle_modbus_error>
 800291c:	0003      	movs	r3, r0
 800291e:	e01d      	b.n	800295c <modbus_change_baud_rate+0xf8>
		}
	}
	status = UART_SetConfig(&huart1);
 8002920:	4b12      	ldr	r3, [pc, #72]	@ (800296c <modbus_change_baud_rate+0x108>)
 8002922:	0018      	movs	r0, r3
 8002924:	f005 fa48 	bl	8007db8 <UART_SetConfig>
 8002928:	0003      	movs	r3, r0
 800292a:	001a      	movs	r2, r3
 800292c:	1dfb      	adds	r3, r7, #7
 800292e:	701a      	strb	r2, [r3, #0]
	if(status == HAL_OK)
 8002930:	1dfb      	adds	r3, r7, #7
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	b25b      	sxtb	r3, r3
 8002936:	2b00      	cmp	r3, #0
 8002938:	d10d      	bne.n	8002956 <modbus_change_baud_rate+0xf2>
	{
		// Log error, reset UART
		status = modbus_reset();
 800293a:	1dfc      	adds	r4, r7, #7
 800293c:	f7ff fe9e 	bl	800267c <modbus_reset>
 8002940:	0003      	movs	r3, r0
 8002942:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK)
 8002944:	1dfb      	adds	r3, r7, #7
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	b25b      	sxtb	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d003      	beq.n	8002956 <modbus_change_baud_rate+0xf2>
		{
			return status;
 800294e:	1dfb      	adds	r3, r7, #7
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	b25b      	sxtb	r3, r3
 8002954:	e002      	b.n	800295c <modbus_change_baud_rate+0xf8>
		}
	}

	return modbus_set_rx();
 8002956:	f7ff feff 	bl	8002758 <modbus_set_rx>
 800295a:	0003      	movs	r3, r0
}
 800295c:	0018      	movs	r0, r3
 800295e:	46bd      	mov	sp, r7
 8002960:	b003      	add	sp, #12
 8002962:	bd90      	pop	{r4, r7, pc}
 8002964:	20000000 	.word	0x20000000
 8002968:	08009580 	.word	0x08009580
 800296c:	200002d8 	.word	0x200002d8

08002970 <get_rx_buffer>:
}


// Low Level Functions -------------------------------------------------------------------------
uint8_t get_rx_buffer(uint8_t index)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	0002      	movs	r2, r0
 8002978:	1dfb      	adds	r3, r7, #7
 800297a:	701a      	strb	r2, [r3, #0]
	if (index < MODBUS_RX_BUFFER_SIZE - 1)
 800297c:	1dfb      	adds	r3, r7, #7
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	2bff      	cmp	r3, #255	@ 0xff
 8002982:	d01e      	beq.n	80029c2 <get_rx_buffer+0x52>
	{
		return ((start_index + index) > (MODBUS_RX_BUFFER_SIZE - 1))?
 8002984:	4b11      	ldr	r3, [pc, #68]	@ (80029cc <get_rx_buffer+0x5c>)
 8002986:	881b      	ldrh	r3, [r3, #0]
 8002988:	b29b      	uxth	r3, r3
 800298a:	001a      	movs	r2, r3
 800298c:	1dfb      	adds	r3, r7, #7
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	18d3      	adds	r3, r2, r3
				modbus_rx_buffer[(start_index + index) - MODBUS_RX_BUFFER_SIZE] :
 8002992:	2bff      	cmp	r3, #255	@ 0xff
 8002994:	dd0b      	ble.n	80029ae <get_rx_buffer+0x3e>
 8002996:	4b0d      	ldr	r3, [pc, #52]	@ (80029cc <get_rx_buffer+0x5c>)
 8002998:	881b      	ldrh	r3, [r3, #0]
 800299a:	b29b      	uxth	r3, r3
 800299c:	001a      	movs	r2, r3
 800299e:	1dfb      	adds	r3, r7, #7
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	18d3      	adds	r3, r2, r3
 80029a4:	3b01      	subs	r3, #1
 80029a6:	3bff      	subs	r3, #255	@ 0xff
 80029a8:	4a09      	ldr	r2, [pc, #36]	@ (80029d0 <get_rx_buffer+0x60>)
 80029aa:	5cd3      	ldrb	r3, [r2, r3]
 80029ac:	e00a      	b.n	80029c4 <get_rx_buffer+0x54>
				modbus_rx_buffer[start_index + index];
 80029ae:	4b07      	ldr	r3, [pc, #28]	@ (80029cc <get_rx_buffer+0x5c>)
 80029b0:	881b      	ldrh	r3, [r3, #0]
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	001a      	movs	r2, r3
 80029b6:	1dfb      	adds	r3, r7, #7
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	18d3      	adds	r3, r2, r3
				modbus_rx_buffer[(start_index + index) - MODBUS_RX_BUFFER_SIZE] :
 80029bc:	4a04      	ldr	r2, [pc, #16]	@ (80029d0 <get_rx_buffer+0x60>)
 80029be:	5cd3      	ldrb	r3, [r2, r3]
 80029c0:	e000      	b.n	80029c4 <get_rx_buffer+0x54>
	}
	return 0xFF;
 80029c2:	23ff      	movs	r3, #255	@ 0xff
}
 80029c4:	0018      	movs	r0, r3
 80029c6:	46bd      	mov	sp, r7
 80029c8:	b002      	add	sp, #8
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	20000774 	.word	0x20000774
 80029d0:	20000470 	.word	0x20000470

080029d4 <handle_modbus_error>:

int8_t handle_modbus_error(int8_t error_code)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	0002      	movs	r2, r0
 80029dc:	1dfb      	adds	r3, r7, #7
 80029de:	701a      	strb	r2, [r3, #0]
	holding_register_database[MB_ERRORS] |= 1U << (error_code - RANGE_ERROR);
 80029e0:	4b0a      	ldr	r3, [pc, #40]	@ (8002a0c <handle_modbus_error+0x38>)
 80029e2:	891a      	ldrh	r2, [r3, #8]
 80029e4:	1dfb      	adds	r3, r7, #7
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	b25b      	sxtb	r3, r3
 80029ea:	3b0e      	subs	r3, #14
 80029ec:	2101      	movs	r1, #1
 80029ee:	4099      	lsls	r1, r3
 80029f0:	000b      	movs	r3, r1
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	4313      	orrs	r3, r2
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	4b04      	ldr	r3, [pc, #16]	@ (8002a0c <handle_modbus_error+0x38>)
 80029fa:	811a      	strh	r2, [r3, #8]
	return error_code;
 80029fc:	1dfb      	adds	r3, r7, #7
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	b25b      	sxtb	r3, r3
}
 8002a02:	0018      	movs	r0, r3
 8002a04:	46bd      	mov	sp, r7
 8002a06:	b002      	add	sp, #8
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	46c0      	nop			@ (mov r8, r8)
 8002a0c:	20000000 	.word	0x20000000

08002a10 <crc_16>:

// Private Functions ---------------------------------------------------------------------------

uint16_t crc_16(uint8_t *data, uint8_t size)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	000a      	movs	r2, r1
 8002a1a:	1cfb      	adds	r3, r7, #3
 8002a1c:	701a      	strb	r2, [r3, #0]
	uint8_t crc_hi = 0xFF;
 8002a1e:	230f      	movs	r3, #15
 8002a20:	18fb      	adds	r3, r7, r3
 8002a22:	22ff      	movs	r2, #255	@ 0xff
 8002a24:	701a      	strb	r2, [r3, #0]
	uint8_t crc_low = 0xFF;
 8002a26:	230e      	movs	r3, #14
 8002a28:	18fb      	adds	r3, r7, r3
 8002a2a:	22ff      	movs	r2, #255	@ 0xff
 8002a2c:	701a      	strb	r2, [r3, #0]
	 unsigned int i; /* will index into CRC lookup */

	/* pass through message buffer */
	while (size--)
 8002a2e:	e019      	b.n	8002a64 <crc_16+0x54>
	{
		i = crc_low ^ *data++; /* calculate the CRC  */
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	1c5a      	adds	r2, r3, #1
 8002a34:	607a      	str	r2, [r7, #4]
 8002a36:	781a      	ldrb	r2, [r3, #0]
 8002a38:	200e      	movs	r0, #14
 8002a3a:	183b      	adds	r3, r7, r0
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	4053      	eors	r3, r2
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	60bb      	str	r3, [r7, #8]
		crc_low = crc_hi ^ table_crc_hi[i];
 8002a44:	4a13      	ldr	r2, [pc, #76]	@ (8002a94 <crc_16+0x84>)
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	18d3      	adds	r3, r2, r3
 8002a4a:	7819      	ldrb	r1, [r3, #0]
 8002a4c:	183b      	adds	r3, r7, r0
 8002a4e:	200f      	movs	r0, #15
 8002a50:	183a      	adds	r2, r7, r0
 8002a52:	7812      	ldrb	r2, [r2, #0]
 8002a54:	404a      	eors	r2, r1
 8002a56:	701a      	strb	r2, [r3, #0]
		crc_hi = table_crc_lo[i];
 8002a58:	183b      	adds	r3, r7, r0
 8002a5a:	490f      	ldr	r1, [pc, #60]	@ (8002a98 <crc_16+0x88>)
 8002a5c:	68ba      	ldr	r2, [r7, #8]
 8002a5e:	188a      	adds	r2, r1, r2
 8002a60:	7812      	ldrb	r2, [r2, #0]
 8002a62:	701a      	strb	r2, [r3, #0]
	while (size--)
 8002a64:	1cfb      	adds	r3, r7, #3
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	1cfa      	adds	r2, r7, #3
 8002a6a:	1e59      	subs	r1, r3, #1
 8002a6c:	7011      	strb	r1, [r2, #0]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1de      	bne.n	8002a30 <crc_16+0x20>
	}

	return (crc_hi << 8 | crc_low);
 8002a72:	230f      	movs	r3, #15
 8002a74:	18fb      	adds	r3, r7, r3
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	021b      	lsls	r3, r3, #8
 8002a7a:	b21a      	sxth	r2, r3
 8002a7c:	230e      	movs	r3, #14
 8002a7e:	18fb      	adds	r3, r7, r3
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	b21b      	sxth	r3, r3
 8002a84:	4313      	orrs	r3, r2
 8002a86:	b21b      	sxth	r3, r3
 8002a88:	b29b      	uxth	r3, r3
}
 8002a8a:	0018      	movs	r0, r3
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	b004      	add	sp, #16
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	46c0      	nop			@ (mov r8, r8)
 8002a94:	08009280 	.word	0x08009280
 8002a98:	08009380 	.word	0x08009380

08002a9c <handle_chunk_miss>:

int8_t handle_chunk_miss()
{
 8002a9c:	b590      	push	{r4, r7, lr}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
	if(modbus_header == 0)
 8002aa2:	4b15      	ldr	r3, [pc, #84]	@ (8002af8 <handle_chunk_miss+0x5c>)
 8002aa4:	881b      	ldrh	r3, [r3, #0]
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d120      	bne.n	8002aee <handle_chunk_miss+0x52>
	{
		if(HAL_GetTick() - chunk_time > 10)
 8002aac:	f000 fd40 	bl	8003530 <HAL_GetTick>
 8002ab0:	0002      	movs	r2, r0
 8002ab2:	4b12      	ldr	r3, [pc, #72]	@ (8002afc <handle_chunk_miss+0x60>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	2b0a      	cmp	r3, #10
 8002aba:	d918      	bls.n	8002aee <handle_chunk_miss+0x52>
		{
			modbus_header = 1;
 8002abc:	4b0e      	ldr	r3, [pc, #56]	@ (8002af8 <handle_chunk_miss+0x5c>)
 8002abe:	2201      	movs	r2, #1
 8002ac0:	801a      	strh	r2, [r3, #0]
			int8_t status = HAL_UART_Abort(&huart1);
 8002ac2:	4b0f      	ldr	r3, [pc, #60]	@ (8002b00 <handle_chunk_miss+0x64>)
 8002ac4:	0018      	movs	r0, r3
 8002ac6:	f004 fd0d 	bl	80074e4 <HAL_UART_Abort>
 8002aca:	0003      	movs	r3, r0
 8002acc:	001a      	movs	r2, r3
 8002ace:	1dfb      	adds	r3, r7, #7
 8002ad0:	701a      	strb	r2, [r3, #0]
			if(status == HAL_OK)
 8002ad2:	1dfb      	adds	r3, r7, #7
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	b25b      	sxtb	r3, r3
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d104      	bne.n	8002ae6 <handle_chunk_miss+0x4a>
			{
				status = modbus_set_rx();
 8002adc:	1dfc      	adds	r4, r7, #7
 8002ade:	f7ff fe3b 	bl	8002758 <modbus_set_rx>
 8002ae2:	0003      	movs	r3, r0
 8002ae4:	7023      	strb	r3, [r4, #0]
			}
			return status;
 8002ae6:	1dfb      	adds	r3, r7, #7
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	b25b      	sxtb	r3, r3
 8002aec:	e000      	b.n	8002af0 <handle_chunk_miss+0x54>
		}
	}
	return MB_SUCCESS;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	0018      	movs	r0, r3
 8002af2:	46bd      	mov	sp, r7
 8002af4:	b003      	add	sp, #12
 8002af6:	bd90      	pop	{r4, r7, pc}
 8002af8:	20000098 	.word	0x20000098
 8002afc:	20000770 	.word	0x20000770
 8002b00:	200002d8 	.word	0x200002d8

08002b04 <ADC_ConvCpltCallback>:
#define VAR_CONVERTED_DATA_INIT_VALUE    (__LL_ADC_DIGITAL_SCALE(LL_ADC_RESOLUTION_12B) + 1)

volatile uint8_t low_half_safe;

void ADC_ConvCpltCallback()
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
	low_half_safe = 0;
 8002b08:	4b02      	ldr	r3, [pc, #8]	@ (8002b14 <ADC_ConvCpltCallback+0x10>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	701a      	strb	r2, [r3, #0]

//	for(uint8_t i = 0; i < 9; i++)
//	{
//		holding_register_database[i + 3] = (uint16_t)raw_data[i];
//	}
}
 8002b0e:	46c0      	nop			@ (mov r8, r8)
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	2000077c 	.word	0x2000077c

08002b18 <ADC_ConvHalfCpltCallback>:

void ADC_ConvHalfCpltCallback()
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
	low_half_safe = 1;
 8002b1c:	4b02      	ldr	r3, [pc, #8]	@ (8002b28 <ADC_ConvHalfCpltCallback+0x10>)
 8002b1e:	2201      	movs	r2, #1
 8002b20:	701a      	strb	r2, [r3, #0]
}
 8002b22:	46c0      	nop			@ (mov r8, r8)
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	2000077c 	.word	0x2000077c

08002b2c <ADC_ErrorCallback>:

void ADC_ErrorCallback()
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0

}
 8002b30:	46c0      	nop			@ (mov r8, r8)
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
	...

08002b38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b3e:	4b0f      	ldr	r3, [pc, #60]	@ (8002b7c <HAL_MspInit+0x44>)
 8002b40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b42:	4b0e      	ldr	r3, [pc, #56]	@ (8002b7c <HAL_MspInit+0x44>)
 8002b44:	2101      	movs	r1, #1
 8002b46:	430a      	orrs	r2, r1
 8002b48:	641a      	str	r2, [r3, #64]	@ 0x40
 8002b4a:	4b0c      	ldr	r3, [pc, #48]	@ (8002b7c <HAL_MspInit+0x44>)
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4e:	2201      	movs	r2, #1
 8002b50:	4013      	ands	r3, r2
 8002b52:	607b      	str	r3, [r7, #4]
 8002b54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b56:	4b09      	ldr	r3, [pc, #36]	@ (8002b7c <HAL_MspInit+0x44>)
 8002b58:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b5a:	4b08      	ldr	r3, [pc, #32]	@ (8002b7c <HAL_MspInit+0x44>)
 8002b5c:	2180      	movs	r1, #128	@ 0x80
 8002b5e:	0549      	lsls	r1, r1, #21
 8002b60:	430a      	orrs	r2, r1
 8002b62:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002b64:	4b05      	ldr	r3, [pc, #20]	@ (8002b7c <HAL_MspInit+0x44>)
 8002b66:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b68:	2380      	movs	r3, #128	@ 0x80
 8002b6a:	055b      	lsls	r3, r3, #21
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	603b      	str	r3, [r7, #0]
 8002b70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b72:	46c0      	nop			@ (mov r8, r8)
 8002b74:	46bd      	mov	sp, r7
 8002b76:	b002      	add	sp, #8
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	46c0      	nop			@ (mov r8, r8)
 8002b7c:	40021000 	.word	0x40021000

08002b80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b80:	b590      	push	{r4, r7, lr}
 8002b82:	b093      	sub	sp, #76	@ 0x4c
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b88:	2334      	movs	r3, #52	@ 0x34
 8002b8a:	18fb      	adds	r3, r7, r3
 8002b8c:	0018      	movs	r0, r3
 8002b8e:	2314      	movs	r3, #20
 8002b90:	001a      	movs	r2, r3
 8002b92:	2100      	movs	r1, #0
 8002b94:	f006 fb2c 	bl	80091f0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b98:	2414      	movs	r4, #20
 8002b9a:	193b      	adds	r3, r7, r4
 8002b9c:	0018      	movs	r0, r3
 8002b9e:	2320      	movs	r3, #32
 8002ba0:	001a      	movs	r2, r3
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	f006 fb24 	bl	80091f0 <memset>
  if(hi2c->Instance==I2C1)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a51      	ldr	r2, [pc, #324]	@ (8002cf4 <HAL_I2C_MspInit+0x174>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d000      	beq.n	8002bb4 <HAL_I2C_MspInit+0x34>
 8002bb2:	e09a      	b.n	8002cea <HAL_I2C_MspInit+0x16a>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002bb4:	193b      	adds	r3, r7, r4
 8002bb6:	2202      	movs	r2, #2
 8002bb8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002bba:	193b      	adds	r3, r7, r4
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002bc0:	193b      	adds	r3, r7, r4
 8002bc2:	0018      	movs	r0, r3
 8002bc4:	f002 ff7e 	bl	8005ac4 <HAL_RCCEx_PeriphCLKConfig>
 8002bc8:	1e03      	subs	r3, r0, #0
 8002bca:	d001      	beq.n	8002bd0 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8002bcc:	f7ff f982 	bl	8001ed4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bd0:	4b49      	ldr	r3, [pc, #292]	@ (8002cf8 <HAL_I2C_MspInit+0x178>)
 8002bd2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002bd4:	4b48      	ldr	r3, [pc, #288]	@ (8002cf8 <HAL_I2C_MspInit+0x178>)
 8002bd6:	2101      	movs	r1, #1
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	635a      	str	r2, [r3, #52]	@ 0x34
 8002bdc:	4b46      	ldr	r3, [pc, #280]	@ (8002cf8 <HAL_I2C_MspInit+0x178>)
 8002bde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002be0:	2201      	movs	r2, #1
 8002be2:	4013      	ands	r3, r2
 8002be4:	613b      	str	r3, [r7, #16]
 8002be6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9 [PA11]     ------> I2C1_SCL
    PA10 [PA12]     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002be8:	2134      	movs	r1, #52	@ 0x34
 8002bea:	187b      	adds	r3, r7, r1
 8002bec:	22c0      	movs	r2, #192	@ 0xc0
 8002bee:	00d2      	lsls	r2, r2, #3
 8002bf0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bf2:	187b      	adds	r3, r7, r1
 8002bf4:	2212      	movs	r2, #18
 8002bf6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf8:	187b      	adds	r3, r7, r1
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bfe:	187b      	adds	r3, r7, r1
 8002c00:	2200      	movs	r2, #0
 8002c02:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8002c04:	187b      	adds	r3, r7, r1
 8002c06:	2206      	movs	r2, #6
 8002c08:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c0a:	187a      	adds	r2, r7, r1
 8002c0c:	23a0      	movs	r3, #160	@ 0xa0
 8002c0e:	05db      	lsls	r3, r3, #23
 8002c10:	0011      	movs	r1, r2
 8002c12:	0018      	movs	r0, r3
 8002c14:	f001 f988 	bl	8003f28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c18:	4b37      	ldr	r3, [pc, #220]	@ (8002cf8 <HAL_I2C_MspInit+0x178>)
 8002c1a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c1c:	4b36      	ldr	r3, [pc, #216]	@ (8002cf8 <HAL_I2C_MspInit+0x178>)
 8002c1e:	2180      	movs	r1, #128	@ 0x80
 8002c20:	0389      	lsls	r1, r1, #14
 8002c22:	430a      	orrs	r2, r1
 8002c24:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002c26:	4b34      	ldr	r3, [pc, #208]	@ (8002cf8 <HAL_I2C_MspInit+0x178>)
 8002c28:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c2a:	2380      	movs	r3, #128	@ 0x80
 8002c2c:	039b      	lsls	r3, r3, #14
 8002c2e:	4013      	ands	r3, r2
 8002c30:	60fb      	str	r3, [r7, #12]
 8002c32:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel4;
 8002c34:	4b31      	ldr	r3, [pc, #196]	@ (8002cfc <HAL_I2C_MspInit+0x17c>)
 8002c36:	4a32      	ldr	r2, [pc, #200]	@ (8002d00 <HAL_I2C_MspInit+0x180>)
 8002c38:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8002c3a:	4b30      	ldr	r3, [pc, #192]	@ (8002cfc <HAL_I2C_MspInit+0x17c>)
 8002c3c:	220a      	movs	r2, #10
 8002c3e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c40:	4b2e      	ldr	r3, [pc, #184]	@ (8002cfc <HAL_I2C_MspInit+0x17c>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c46:	4b2d      	ldr	r3, [pc, #180]	@ (8002cfc <HAL_I2C_MspInit+0x17c>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c4c:	4b2b      	ldr	r3, [pc, #172]	@ (8002cfc <HAL_I2C_MspInit+0x17c>)
 8002c4e:	2280      	movs	r2, #128	@ 0x80
 8002c50:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c52:	4b2a      	ldr	r3, [pc, #168]	@ (8002cfc <HAL_I2C_MspInit+0x17c>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c58:	4b28      	ldr	r3, [pc, #160]	@ (8002cfc <HAL_I2C_MspInit+0x17c>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002c5e:	4b27      	ldr	r3, [pc, #156]	@ (8002cfc <HAL_I2C_MspInit+0x17c>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002c64:	4b25      	ldr	r3, [pc, #148]	@ (8002cfc <HAL_I2C_MspInit+0x17c>)
 8002c66:	2280      	movs	r2, #128	@ 0x80
 8002c68:	0152      	lsls	r2, r2, #5
 8002c6a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002c6c:	4b23      	ldr	r3, [pc, #140]	@ (8002cfc <HAL_I2C_MspInit+0x17c>)
 8002c6e:	0018      	movs	r0, r3
 8002c70:	f000 fd9c 	bl	80037ac <HAL_DMA_Init>
 8002c74:	1e03      	subs	r3, r0, #0
 8002c76:	d001      	beq.n	8002c7c <HAL_I2C_MspInit+0xfc>
    {
      Error_Handler();
 8002c78:	f7ff f92c 	bl	8001ed4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4a1f      	ldr	r2, [pc, #124]	@ (8002cfc <HAL_I2C_MspInit+0x17c>)
 8002c80:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002c82:	4b1e      	ldr	r3, [pc, #120]	@ (8002cfc <HAL_I2C_MspInit+0x17c>)
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel5;
 8002c88:	4b1e      	ldr	r3, [pc, #120]	@ (8002d04 <HAL_I2C_MspInit+0x184>)
 8002c8a:	4a1f      	ldr	r2, [pc, #124]	@ (8002d08 <HAL_I2C_MspInit+0x188>)
 8002c8c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8002c8e:	4b1d      	ldr	r3, [pc, #116]	@ (8002d04 <HAL_I2C_MspInit+0x184>)
 8002c90:	220b      	movs	r2, #11
 8002c92:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c94:	4b1b      	ldr	r3, [pc, #108]	@ (8002d04 <HAL_I2C_MspInit+0x184>)
 8002c96:	2210      	movs	r2, #16
 8002c98:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c9a:	4b1a      	ldr	r3, [pc, #104]	@ (8002d04 <HAL_I2C_MspInit+0x184>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ca0:	4b18      	ldr	r3, [pc, #96]	@ (8002d04 <HAL_I2C_MspInit+0x184>)
 8002ca2:	2280      	movs	r2, #128	@ 0x80
 8002ca4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ca6:	4b17      	ldr	r3, [pc, #92]	@ (8002d04 <HAL_I2C_MspInit+0x184>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cac:	4b15      	ldr	r3, [pc, #84]	@ (8002d04 <HAL_I2C_MspInit+0x184>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002cb2:	4b14      	ldr	r3, [pc, #80]	@ (8002d04 <HAL_I2C_MspInit+0x184>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002cb8:	4b12      	ldr	r3, [pc, #72]	@ (8002d04 <HAL_I2C_MspInit+0x184>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002cbe:	4b11      	ldr	r3, [pc, #68]	@ (8002d04 <HAL_I2C_MspInit+0x184>)
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	f000 fd73 	bl	80037ac <HAL_DMA_Init>
 8002cc6:	1e03      	subs	r3, r0, #0
 8002cc8:	d001      	beq.n	8002cce <HAL_I2C_MspInit+0x14e>
    {
      Error_Handler();
 8002cca:	f7ff f903 	bl	8001ed4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a0c      	ldr	r2, [pc, #48]	@ (8002d04 <HAL_I2C_MspInit+0x184>)
 8002cd2:	639a      	str	r2, [r3, #56]	@ 0x38
 8002cd4:	4b0b      	ldr	r3, [pc, #44]	@ (8002d04 <HAL_I2C_MspInit+0x184>)
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 3, 0);
 8002cda:	2200      	movs	r2, #0
 8002cdc:	2103      	movs	r1, #3
 8002cde:	2017      	movs	r0, #23
 8002ce0:	f000 fd22 	bl	8003728 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8002ce4:	2017      	movs	r0, #23
 8002ce6:	f000 fd34 	bl	8003752 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002cea:	46c0      	nop			@ (mov r8, r8)
 8002cec:	46bd      	mov	sp, r7
 8002cee:	b013      	add	sp, #76	@ 0x4c
 8002cf0:	bd90      	pop	{r4, r7, pc}
 8002cf2:	46c0      	nop			@ (mov r8, r8)
 8002cf4:	40005400 	.word	0x40005400
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	20000124 	.word	0x20000124
 8002d00:	40020044 	.word	0x40020044
 8002d04:	20000180 	.word	0x20000180
 8002d08:	40020058 	.word	0x40020058

08002d0c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002d0c:	b590      	push	{r4, r7, lr}
 8002d0e:	b093      	sub	sp, #76	@ 0x4c
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d14:	2334      	movs	r3, #52	@ 0x34
 8002d16:	18fb      	adds	r3, r7, r3
 8002d18:	0018      	movs	r0, r3
 8002d1a:	2314      	movs	r3, #20
 8002d1c:	001a      	movs	r2, r3
 8002d1e:	2100      	movs	r1, #0
 8002d20:	f006 fa66 	bl	80091f0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d24:	2414      	movs	r4, #20
 8002d26:	193b      	adds	r3, r7, r4
 8002d28:	0018      	movs	r0, r3
 8002d2a:	2320      	movs	r3, #32
 8002d2c:	001a      	movs	r2, r3
 8002d2e:	2100      	movs	r1, #0
 8002d30:	f006 fa5e 	bl	80091f0 <memset>
  if(hspi->Instance==SPI1)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a34      	ldr	r2, [pc, #208]	@ (8002e0c <HAL_SPI_MspInit+0x100>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d162      	bne.n	8002e04 <HAL_SPI_MspInit+0xf8>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 8002d3e:	193b      	adds	r3, r7, r4
 8002d40:	2204      	movs	r2, #4
 8002d42:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 8002d44:	193b      	adds	r3, r7, r4
 8002d46:	2200      	movs	r2, #0
 8002d48:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d4a:	193b      	adds	r3, r7, r4
 8002d4c:	0018      	movs	r0, r3
 8002d4e:	f002 feb9 	bl	8005ac4 <HAL_RCCEx_PeriphCLKConfig>
 8002d52:	1e03      	subs	r3, r0, #0
 8002d54:	d001      	beq.n	8002d5a <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8002d56:	f7ff f8bd 	bl	8001ed4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d5a:	4b2d      	ldr	r3, [pc, #180]	@ (8002e10 <HAL_SPI_MspInit+0x104>)
 8002d5c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d5e:	4b2c      	ldr	r3, [pc, #176]	@ (8002e10 <HAL_SPI_MspInit+0x104>)
 8002d60:	2180      	movs	r1, #128	@ 0x80
 8002d62:	0149      	lsls	r1, r1, #5
 8002d64:	430a      	orrs	r2, r1
 8002d66:	641a      	str	r2, [r3, #64]	@ 0x40
 8002d68:	4b29      	ldr	r3, [pc, #164]	@ (8002e10 <HAL_SPI_MspInit+0x104>)
 8002d6a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d6c:	2380      	movs	r3, #128	@ 0x80
 8002d6e:	015b      	lsls	r3, r3, #5
 8002d70:	4013      	ands	r3, r2
 8002d72:	613b      	str	r3, [r7, #16]
 8002d74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d76:	4b26      	ldr	r3, [pc, #152]	@ (8002e10 <HAL_SPI_MspInit+0x104>)
 8002d78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d7a:	4b25      	ldr	r3, [pc, #148]	@ (8002e10 <HAL_SPI_MspInit+0x104>)
 8002d7c:	2101      	movs	r1, #1
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	635a      	str	r2, [r3, #52]	@ 0x34
 8002d82:	4b23      	ldr	r3, [pc, #140]	@ (8002e10 <HAL_SPI_MspInit+0x104>)
 8002d84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d86:	2201      	movs	r2, #1
 8002d88:	4013      	ands	r3, r2
 8002d8a:	60fb      	str	r3, [r7, #12]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d8e:	4b20      	ldr	r3, [pc, #128]	@ (8002e10 <HAL_SPI_MspInit+0x104>)
 8002d90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d92:	4b1f      	ldr	r3, [pc, #124]	@ (8002e10 <HAL_SPI_MspInit+0x104>)
 8002d94:	2102      	movs	r1, #2
 8002d96:	430a      	orrs	r2, r1
 8002d98:	635a      	str	r2, [r3, #52]	@ 0x34
 8002d9a:	4b1d      	ldr	r3, [pc, #116]	@ (8002e10 <HAL_SPI_MspInit+0x104>)
 8002d9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d9e:	2202      	movs	r2, #2
 8002da0:	4013      	ands	r3, r2
 8002da2:	60bb      	str	r3, [r7, #8]
 8002da4:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA11 [PA9]     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002da6:	2134      	movs	r1, #52	@ 0x34
 8002da8:	187b      	adds	r3, r7, r1
 8002daa:	2280      	movs	r2, #128	@ 0x80
 8002dac:	0112      	lsls	r2, r2, #4
 8002dae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db0:	000c      	movs	r4, r1
 8002db2:	193b      	adds	r3, r7, r4
 8002db4:	2202      	movs	r2, #2
 8002db6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db8:	193b      	adds	r3, r7, r4
 8002dba:	2200      	movs	r2, #0
 8002dbc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dbe:	193b      	adds	r3, r7, r4
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002dc4:	193b      	adds	r3, r7, r4
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dca:	193a      	adds	r2, r7, r4
 8002dcc:	23a0      	movs	r3, #160	@ 0xa0
 8002dce:	05db      	lsls	r3, r3, #23
 8002dd0:	0011      	movs	r1, r2
 8002dd2:	0018      	movs	r0, r3
 8002dd4:	f001 f8a8 	bl	8003f28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8002dd8:	0021      	movs	r1, r4
 8002dda:	187b      	adds	r3, r7, r1
 8002ddc:	2228      	movs	r2, #40	@ 0x28
 8002dde:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de0:	187b      	adds	r3, r7, r1
 8002de2:	2202      	movs	r2, #2
 8002de4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de6:	187b      	adds	r3, r7, r1
 8002de8:	2200      	movs	r2, #0
 8002dea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dec:	187b      	adds	r3, r7, r1
 8002dee:	2200      	movs	r2, #0
 8002df0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002df2:	187b      	adds	r3, r7, r1
 8002df4:	2200      	movs	r2, #0
 8002df6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002df8:	187b      	adds	r3, r7, r1
 8002dfa:	4a06      	ldr	r2, [pc, #24]	@ (8002e14 <HAL_SPI_MspInit+0x108>)
 8002dfc:	0019      	movs	r1, r3
 8002dfe:	0010      	movs	r0, r2
 8002e00:	f001 f892 	bl	8003f28 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002e04:	46c0      	nop			@ (mov r8, r8)
 8002e06:	46bd      	mov	sp, r7
 8002e08:	b013      	add	sp, #76	@ 0x4c
 8002e0a:	bd90      	pop	{r4, r7, pc}
 8002e0c:	40013000 	.word	0x40013000
 8002e10:	40021000 	.word	0x40021000
 8002e14:	50000400 	.word	0x50000400

08002e18 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a0a      	ldr	r2, [pc, #40]	@ (8002e50 <HAL_TIM_PWM_MspInit+0x38>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d10d      	bne.n	8002e46 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002e2a:	4b0a      	ldr	r3, [pc, #40]	@ (8002e54 <HAL_TIM_PWM_MspInit+0x3c>)
 8002e2c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e2e:	4b09      	ldr	r3, [pc, #36]	@ (8002e54 <HAL_TIM_PWM_MspInit+0x3c>)
 8002e30:	2180      	movs	r1, #128	@ 0x80
 8002e32:	0109      	lsls	r1, r1, #4
 8002e34:	430a      	orrs	r2, r1
 8002e36:	641a      	str	r2, [r3, #64]	@ 0x40
 8002e38:	4b06      	ldr	r3, [pc, #24]	@ (8002e54 <HAL_TIM_PWM_MspInit+0x3c>)
 8002e3a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e3c:	2380      	movs	r3, #128	@ 0x80
 8002e3e:	011b      	lsls	r3, r3, #4
 8002e40:	4013      	ands	r3, r2
 8002e42:	60fb      	str	r3, [r7, #12]
 8002e44:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8002e46:	46c0      	nop			@ (mov r8, r8)
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	b004      	add	sp, #16
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	46c0      	nop			@ (mov r8, r8)
 8002e50:	40012c00 	.word	0x40012c00
 8002e54:	40021000 	.word	0x40021000

08002e58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a0a      	ldr	r2, [pc, #40]	@ (8002e90 <HAL_TIM_Base_MspInit+0x38>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d10d      	bne.n	8002e86 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002e6a:	4b0a      	ldr	r3, [pc, #40]	@ (8002e94 <HAL_TIM_Base_MspInit+0x3c>)
 8002e6c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e6e:	4b09      	ldr	r3, [pc, #36]	@ (8002e94 <HAL_TIM_Base_MspInit+0x3c>)
 8002e70:	2180      	movs	r1, #128	@ 0x80
 8002e72:	0209      	lsls	r1, r1, #8
 8002e74:	430a      	orrs	r2, r1
 8002e76:	641a      	str	r2, [r3, #64]	@ 0x40
 8002e78:	4b06      	ldr	r3, [pc, #24]	@ (8002e94 <HAL_TIM_Base_MspInit+0x3c>)
 8002e7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e7c:	2380      	movs	r3, #128	@ 0x80
 8002e7e:	021b      	lsls	r3, r3, #8
 8002e80:	4013      	ands	r3, r2
 8002e82:	60fb      	str	r3, [r7, #12]
 8002e84:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM14_MspInit 1 */

  }

}
 8002e86:	46c0      	nop			@ (mov r8, r8)
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	b004      	add	sp, #16
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	46c0      	nop			@ (mov r8, r8)
 8002e90:	40002000 	.word	0x40002000
 8002e94:	40021000 	.word	0x40021000

08002e98 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002e98:	b590      	push	{r4, r7, lr}
 8002e9a:	b089      	sub	sp, #36	@ 0x24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ea0:	240c      	movs	r4, #12
 8002ea2:	193b      	adds	r3, r7, r4
 8002ea4:	0018      	movs	r0, r3
 8002ea6:	2314      	movs	r3, #20
 8002ea8:	001a      	movs	r2, r3
 8002eaa:	2100      	movs	r1, #0
 8002eac:	f006 f9a0 	bl	80091f0 <memset>
  if(htim->Instance==TIM1)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a15      	ldr	r2, [pc, #84]	@ (8002f0c <HAL_TIM_MspPostInit+0x74>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d123      	bne.n	8002f02 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eba:	4b15      	ldr	r3, [pc, #84]	@ (8002f10 <HAL_TIM_MspPostInit+0x78>)
 8002ebc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ebe:	4b14      	ldr	r3, [pc, #80]	@ (8002f10 <HAL_TIM_MspPostInit+0x78>)
 8002ec0:	2101      	movs	r1, #1
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	635a      	str	r2, [r3, #52]	@ 0x34
 8002ec6:	4b12      	ldr	r3, [pc, #72]	@ (8002f10 <HAL_TIM_MspPostInit+0x78>)
 8002ec8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002eca:	2201      	movs	r2, #1
 8002ecc:	4013      	ands	r3, r2
 8002ece:	60bb      	str	r3, [r7, #8]
 8002ed0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA15     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = Actuator_PWM_Pin;
 8002ed2:	193b      	adds	r3, r7, r4
 8002ed4:	2280      	movs	r2, #128	@ 0x80
 8002ed6:	0212      	lsls	r2, r2, #8
 8002ed8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eda:	0021      	movs	r1, r4
 8002edc:	187b      	adds	r3, r7, r1
 8002ede:	2202      	movs	r2, #2
 8002ee0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee2:	187b      	adds	r3, r7, r1
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ee8:	187b      	adds	r3, r7, r1
 8002eea:	2200      	movs	r2, #0
 8002eec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002eee:	187b      	adds	r3, r7, r1
 8002ef0:	2202      	movs	r2, #2
 8002ef2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(Actuator_PWM_GPIO_Port, &GPIO_InitStruct);
 8002ef4:	187a      	adds	r2, r7, r1
 8002ef6:	23a0      	movs	r3, #160	@ 0xa0
 8002ef8:	05db      	lsls	r3, r3, #23
 8002efa:	0011      	movs	r1, r2
 8002efc:	0018      	movs	r0, r3
 8002efe:	f001 f813 	bl	8003f28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002f02:	46c0      	nop			@ (mov r8, r8)
 8002f04:	46bd      	mov	sp, r7
 8002f06:	b009      	add	sp, #36	@ 0x24
 8002f08:	bd90      	pop	{r4, r7, pc}
 8002f0a:	46c0      	nop			@ (mov r8, r8)
 8002f0c:	40012c00 	.word	0x40012c00
 8002f10:	40021000 	.word	0x40021000

08002f14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f14:	b590      	push	{r4, r7, lr}
 8002f16:	b095      	sub	sp, #84	@ 0x54
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f1c:	233c      	movs	r3, #60	@ 0x3c
 8002f1e:	18fb      	adds	r3, r7, r3
 8002f20:	0018      	movs	r0, r3
 8002f22:	2314      	movs	r3, #20
 8002f24:	001a      	movs	r2, r3
 8002f26:	2100      	movs	r1, #0
 8002f28:	f006 f962 	bl	80091f0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f2c:	241c      	movs	r4, #28
 8002f2e:	193b      	adds	r3, r7, r4
 8002f30:	0018      	movs	r0, r3
 8002f32:	2320      	movs	r3, #32
 8002f34:	001a      	movs	r2, r3
 8002f36:	2100      	movs	r1, #0
 8002f38:	f006 f95a 	bl	80091f0 <memset>
  if(huart->Instance==USART1)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a74      	ldr	r2, [pc, #464]	@ (8003114 <HAL_UART_MspInit+0x200>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d000      	beq.n	8002f48 <HAL_UART_MspInit+0x34>
 8002f46:	e0e1      	b.n	800310c <HAL_UART_MspInit+0x1f8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002f48:	193b      	adds	r3, r7, r4
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002f4e:	193b      	adds	r3, r7, r4
 8002f50:	2200      	movs	r2, #0
 8002f52:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f54:	193b      	adds	r3, r7, r4
 8002f56:	0018      	movs	r0, r3
 8002f58:	f002 fdb4 	bl	8005ac4 <HAL_RCCEx_PeriphCLKConfig>
 8002f5c:	1e03      	subs	r3, r0, #0
 8002f5e:	d001      	beq.n	8002f64 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8002f60:	f7fe ffb8 	bl	8001ed4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f64:	4b6c      	ldr	r3, [pc, #432]	@ (8003118 <HAL_UART_MspInit+0x204>)
 8002f66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f68:	4b6b      	ldr	r3, [pc, #428]	@ (8003118 <HAL_UART_MspInit+0x204>)
 8002f6a:	2180      	movs	r1, #128	@ 0x80
 8002f6c:	01c9      	lsls	r1, r1, #7
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	641a      	str	r2, [r3, #64]	@ 0x40
 8002f72:	4b69      	ldr	r3, [pc, #420]	@ (8003118 <HAL_UART_MspInit+0x204>)
 8002f74:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f76:	2380      	movs	r3, #128	@ 0x80
 8002f78:	01db      	lsls	r3, r3, #7
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	61bb      	str	r3, [r7, #24]
 8002f7e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f80:	4b65      	ldr	r3, [pc, #404]	@ (8003118 <HAL_UART_MspInit+0x204>)
 8002f82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f84:	4b64      	ldr	r3, [pc, #400]	@ (8003118 <HAL_UART_MspInit+0x204>)
 8002f86:	2104      	movs	r1, #4
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	635a      	str	r2, [r3, #52]	@ 0x34
 8002f8c:	4b62      	ldr	r3, [pc, #392]	@ (8003118 <HAL_UART_MspInit+0x204>)
 8002f8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f90:	2204      	movs	r2, #4
 8002f92:	4013      	ands	r3, r2
 8002f94:	617b      	str	r3, [r7, #20]
 8002f96:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f98:	4b5f      	ldr	r3, [pc, #380]	@ (8003118 <HAL_UART_MspInit+0x204>)
 8002f9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f9c:	4b5e      	ldr	r3, [pc, #376]	@ (8003118 <HAL_UART_MspInit+0x204>)
 8002f9e:	2102      	movs	r1, #2
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	635a      	str	r2, [r3, #52]	@ 0x34
 8002fa4:	4b5c      	ldr	r3, [pc, #368]	@ (8003118 <HAL_UART_MspInit+0x204>)
 8002fa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fa8:	2202      	movs	r2, #2
 8002faa:	4013      	ands	r3, r2
 8002fac:	613b      	str	r3, [r7, #16]
 8002fae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fb0:	4b59      	ldr	r3, [pc, #356]	@ (8003118 <HAL_UART_MspInit+0x204>)
 8002fb2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002fb4:	4b58      	ldr	r3, [pc, #352]	@ (8003118 <HAL_UART_MspInit+0x204>)
 8002fb6:	2101      	movs	r1, #1
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	635a      	str	r2, [r3, #52]	@ 0x34
 8002fbc:	4b56      	ldr	r3, [pc, #344]	@ (8003118 <HAL_UART_MspInit+0x204>)
 8002fbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	60fb      	str	r3, [r7, #12]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC14-OSCX_IN(PC14)     ------> USART1_TX
    PB2     ------> USART1_RX
    PA12 [PA10]     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002fc8:	213c      	movs	r1, #60	@ 0x3c
 8002fca:	187b      	adds	r3, r7, r1
 8002fcc:	2280      	movs	r2, #128	@ 0x80
 8002fce:	01d2      	lsls	r2, r2, #7
 8002fd0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd2:	000c      	movs	r4, r1
 8002fd4:	193b      	adds	r3, r7, r4
 8002fd6:	2202      	movs	r2, #2
 8002fd8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fda:	193b      	adds	r3, r7, r4
 8002fdc:	2200      	movs	r2, #0
 8002fde:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fe0:	193b      	adds	r3, r7, r4
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8002fe6:	193b      	adds	r3, r7, r4
 8002fe8:	2200      	movs	r2, #0
 8002fea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fec:	193b      	adds	r3, r7, r4
 8002fee:	4a4b      	ldr	r2, [pc, #300]	@ (800311c <HAL_UART_MspInit+0x208>)
 8002ff0:	0019      	movs	r1, r3
 8002ff2:	0010      	movs	r0, r2
 8002ff4:	f000 ff98 	bl	8003f28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002ff8:	193b      	adds	r3, r7, r4
 8002ffa:	2204      	movs	r2, #4
 8002ffc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ffe:	193b      	adds	r3, r7, r4
 8003000:	2202      	movs	r2, #2
 8003002:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003004:	193b      	adds	r3, r7, r4
 8003006:	2200      	movs	r2, #0
 8003008:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800300a:	193b      	adds	r3, r7, r4
 800300c:	2200      	movs	r2, #0
 800300e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8003010:	193b      	adds	r3, r7, r4
 8003012:	2200      	movs	r2, #0
 8003014:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003016:	193b      	adds	r3, r7, r4
 8003018:	4a41      	ldr	r2, [pc, #260]	@ (8003120 <HAL_UART_MspInit+0x20c>)
 800301a:	0019      	movs	r1, r3
 800301c:	0010      	movs	r0, r2
 800301e:	f000 ff83 	bl	8003f28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003022:	0021      	movs	r1, r4
 8003024:	187b      	adds	r3, r7, r1
 8003026:	2280      	movs	r2, #128	@ 0x80
 8003028:	0152      	lsls	r2, r2, #5
 800302a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800302c:	187b      	adds	r3, r7, r1
 800302e:	2202      	movs	r2, #2
 8003030:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003032:	187b      	adds	r3, r7, r1
 8003034:	2200      	movs	r2, #0
 8003036:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003038:	187b      	adds	r3, r7, r1
 800303a:	2200      	movs	r2, #0
 800303c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800303e:	187b      	adds	r3, r7, r1
 8003040:	2201      	movs	r2, #1
 8003042:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003044:	187a      	adds	r2, r7, r1
 8003046:	23a0      	movs	r3, #160	@ 0xa0
 8003048:	05db      	lsls	r3, r3, #23
 800304a:	0011      	movs	r1, r2
 800304c:	0018      	movs	r0, r3
 800304e:	f000 ff6b 	bl	8003f28 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8003052:	4b34      	ldr	r3, [pc, #208]	@ (8003124 <HAL_UART_MspInit+0x210>)
 8003054:	4a34      	ldr	r2, [pc, #208]	@ (8003128 <HAL_UART_MspInit+0x214>)
 8003056:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8003058:	4b32      	ldr	r3, [pc, #200]	@ (8003124 <HAL_UART_MspInit+0x210>)
 800305a:	2232      	movs	r2, #50	@ 0x32
 800305c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800305e:	4b31      	ldr	r3, [pc, #196]	@ (8003124 <HAL_UART_MspInit+0x210>)
 8003060:	2200      	movs	r2, #0
 8003062:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003064:	4b2f      	ldr	r3, [pc, #188]	@ (8003124 <HAL_UART_MspInit+0x210>)
 8003066:	2200      	movs	r2, #0
 8003068:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800306a:	4b2e      	ldr	r3, [pc, #184]	@ (8003124 <HAL_UART_MspInit+0x210>)
 800306c:	2280      	movs	r2, #128	@ 0x80
 800306e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003070:	4b2c      	ldr	r3, [pc, #176]	@ (8003124 <HAL_UART_MspInit+0x210>)
 8003072:	2200      	movs	r2, #0
 8003074:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003076:	4b2b      	ldr	r3, [pc, #172]	@ (8003124 <HAL_UART_MspInit+0x210>)
 8003078:	2200      	movs	r2, #0
 800307a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800307c:	4b29      	ldr	r3, [pc, #164]	@ (8003124 <HAL_UART_MspInit+0x210>)
 800307e:	2200      	movs	r2, #0
 8003080:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003082:	4b28      	ldr	r3, [pc, #160]	@ (8003124 <HAL_UART_MspInit+0x210>)
 8003084:	22c0      	movs	r2, #192	@ 0xc0
 8003086:	0192      	lsls	r2, r2, #6
 8003088:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800308a:	4b26      	ldr	r3, [pc, #152]	@ (8003124 <HAL_UART_MspInit+0x210>)
 800308c:	0018      	movs	r0, r3
 800308e:	f000 fb8d 	bl	80037ac <HAL_DMA_Init>
 8003092:	1e03      	subs	r3, r0, #0
 8003094:	d001      	beq.n	800309a <HAL_UART_MspInit+0x186>
    {
      Error_Handler();
 8003096:	f7fe ff1d 	bl	8001ed4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2180      	movs	r1, #128	@ 0x80
 800309e:	4a21      	ldr	r2, [pc, #132]	@ (8003124 <HAL_UART_MspInit+0x210>)
 80030a0:	505a      	str	r2, [r3, r1]
 80030a2:	4b20      	ldr	r3, [pc, #128]	@ (8003124 <HAL_UART_MspInit+0x210>)
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel3;
 80030a8:	4b20      	ldr	r3, [pc, #128]	@ (800312c <HAL_UART_MspInit+0x218>)
 80030aa:	4a21      	ldr	r2, [pc, #132]	@ (8003130 <HAL_UART_MspInit+0x21c>)
 80030ac:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80030ae:	4b1f      	ldr	r3, [pc, #124]	@ (800312c <HAL_UART_MspInit+0x218>)
 80030b0:	2233      	movs	r2, #51	@ 0x33
 80030b2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030b4:	4b1d      	ldr	r3, [pc, #116]	@ (800312c <HAL_UART_MspInit+0x218>)
 80030b6:	2210      	movs	r2, #16
 80030b8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030ba:	4b1c      	ldr	r3, [pc, #112]	@ (800312c <HAL_UART_MspInit+0x218>)
 80030bc:	2200      	movs	r2, #0
 80030be:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80030c0:	4b1a      	ldr	r3, [pc, #104]	@ (800312c <HAL_UART_MspInit+0x218>)
 80030c2:	2280      	movs	r2, #128	@ 0x80
 80030c4:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030c6:	4b19      	ldr	r3, [pc, #100]	@ (800312c <HAL_UART_MspInit+0x218>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030cc:	4b17      	ldr	r3, [pc, #92]	@ (800312c <HAL_UART_MspInit+0x218>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80030d2:	4b16      	ldr	r3, [pc, #88]	@ (800312c <HAL_UART_MspInit+0x218>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80030d8:	4b14      	ldr	r3, [pc, #80]	@ (800312c <HAL_UART_MspInit+0x218>)
 80030da:	2280      	movs	r2, #128	@ 0x80
 80030dc:	0192      	lsls	r2, r2, #6
 80030de:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80030e0:	4b12      	ldr	r3, [pc, #72]	@ (800312c <HAL_UART_MspInit+0x218>)
 80030e2:	0018      	movs	r0, r3
 80030e4:	f000 fb62 	bl	80037ac <HAL_DMA_Init>
 80030e8:	1e03      	subs	r3, r0, #0
 80030ea:	d001      	beq.n	80030f0 <HAL_UART_MspInit+0x1dc>
    {
      Error_Handler();
 80030ec:	f7fe fef2 	bl	8001ed4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a0e      	ldr	r2, [pc, #56]	@ (800312c <HAL_UART_MspInit+0x218>)
 80030f4:	67da      	str	r2, [r3, #124]	@ 0x7c
 80030f6:	4b0d      	ldr	r3, [pc, #52]	@ (800312c <HAL_UART_MspInit+0x218>)
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80030fc:	2200      	movs	r2, #0
 80030fe:	2100      	movs	r1, #0
 8003100:	201b      	movs	r0, #27
 8003102:	f000 fb11 	bl	8003728 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003106:	201b      	movs	r0, #27
 8003108:	f000 fb23 	bl	8003752 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800310c:	46c0      	nop			@ (mov r8, r8)
 800310e:	46bd      	mov	sp, r7
 8003110:	b015      	add	sp, #84	@ 0x54
 8003112:	bd90      	pop	{r4, r7, pc}
 8003114:	40013800 	.word	0x40013800
 8003118:	40021000 	.word	0x40021000
 800311c:	50000800 	.word	0x50000800
 8003120:	50000400 	.word	0x50000400
 8003124:	2000036c 	.word	0x2000036c
 8003128:	4002001c 	.word	0x4002001c
 800312c:	200003c8 	.word	0x200003c8
 8003130:	40020030 	.word	0x40020030

08003134 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a17      	ldr	r2, [pc, #92]	@ (80031a0 <HAL_UART_MspDeInit+0x6c>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d127      	bne.n	8003196 <HAL_UART_MspDeInit+0x62>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8003146:	4b17      	ldr	r3, [pc, #92]	@ (80031a4 <HAL_UART_MspDeInit+0x70>)
 8003148:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800314a:	4b16      	ldr	r3, [pc, #88]	@ (80031a4 <HAL_UART_MspDeInit+0x70>)
 800314c:	4916      	ldr	r1, [pc, #88]	@ (80031a8 <HAL_UART_MspDeInit+0x74>)
 800314e:	400a      	ands	r2, r1
 8003150:	641a      	str	r2, [r3, #64]	@ 0x40
    /**USART1 GPIO Configuration
    PC14-OSCX_IN(PC14)     ------> USART1_TX
    PB2     ------> USART1_RX
    PA12 [PA10]     ------> USART1_DE
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_14);
 8003152:	2380      	movs	r3, #128	@ 0x80
 8003154:	01db      	lsls	r3, r3, #7
 8003156:	4a15      	ldr	r2, [pc, #84]	@ (80031ac <HAL_UART_MspDeInit+0x78>)
 8003158:	0019      	movs	r1, r3
 800315a:	0010      	movs	r0, r2
 800315c:	f001 f856 	bl	800420c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2);
 8003160:	4b13      	ldr	r3, [pc, #76]	@ (80031b0 <HAL_UART_MspDeInit+0x7c>)
 8003162:	2104      	movs	r1, #4
 8003164:	0018      	movs	r0, r3
 8003166:	f001 f851 	bl	800420c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_12);
 800316a:	2380      	movs	r3, #128	@ 0x80
 800316c:	015a      	lsls	r2, r3, #5
 800316e:	23a0      	movs	r3, #160	@ 0xa0
 8003170:	05db      	lsls	r3, r3, #23
 8003172:	0011      	movs	r1, r2
 8003174:	0018      	movs	r0, r3
 8003176:	f001 f849 	bl	800420c <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2280      	movs	r2, #128	@ 0x80
 800317e:	589b      	ldr	r3, [r3, r2]
 8003180:	0018      	movs	r0, r3
 8003182:	f000 fb9d 	bl	80038c0 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800318a:	0018      	movs	r0, r3
 800318c:	f000 fb98 	bl	80038c0 <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8003190:	201b      	movs	r0, #27
 8003192:	f000 faee 	bl	8003772 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8003196:	46c0      	nop			@ (mov r8, r8)
 8003198:	46bd      	mov	sp, r7
 800319a:	b002      	add	sp, #8
 800319c:	bd80      	pop	{r7, pc}
 800319e:	46c0      	nop			@ (mov r8, r8)
 80031a0:	40013800 	.word	0x40013800
 80031a4:	40021000 	.word	0x40021000
 80031a8:	ffffbfff 	.word	0xffffbfff
 80031ac:	50000800 	.word	0x50000800
 80031b0:	50000400 	.word	0x50000400

080031b4 <LL_ADC_IsActiveFlag_OVR>:
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_OVR) == (LL_ADC_FLAG_OVR)) ? 1UL : 0UL);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2210      	movs	r2, #16
 80031c2:	4013      	ands	r3, r2
 80031c4:	2b10      	cmp	r3, #16
 80031c6:	d101      	bne.n	80031cc <LL_ADC_IsActiveFlag_OVR+0x18>
 80031c8:	2301      	movs	r3, #1
 80031ca:	e000      	b.n	80031ce <LL_ADC_IsActiveFlag_OVR+0x1a>
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	0018      	movs	r0, r3
 80031d0:	46bd      	mov	sp, r7
 80031d2:	b002      	add	sp, #8
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <LL_ADC_ClearFlag_OVR>:
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b082      	sub	sp, #8
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_OVR);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2210      	movs	r2, #16
 80031e2:	601a      	str	r2, [r3, #0]
}
 80031e4:	46c0      	nop			@ (mov r8, r8)
 80031e6:	46bd      	mov	sp, r7
 80031e8:	b002      	add	sp, #8
 80031ea:	bd80      	pop	{r7, pc}

080031ec <LL_DMA_IsActiveFlag_TC1>:
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF1) == (DMA_ISR_TCIF1)) ? 1UL : 0UL);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2202      	movs	r2, #2
 80031fa:	4013      	ands	r3, r2
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d101      	bne.n	8003204 <LL_DMA_IsActiveFlag_TC1+0x18>
 8003200:	2301      	movs	r3, #1
 8003202:	e000      	b.n	8003206 <LL_DMA_IsActiveFlag_TC1+0x1a>
 8003204:	2300      	movs	r3, #0
}
 8003206:	0018      	movs	r0, r3
 8003208:	46bd      	mov	sp, r7
 800320a:	b002      	add	sp, #8
 800320c:	bd80      	pop	{r7, pc}

0800320e <LL_DMA_IsActiveFlag_HT1>:
{
 800320e:	b580      	push	{r7, lr}
 8003210:	b082      	sub	sp, #8
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF1) == (DMA_ISR_HTIF1)) ? 1UL : 0UL);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2204      	movs	r2, #4
 800321c:	4013      	ands	r3, r2
 800321e:	2b04      	cmp	r3, #4
 8003220:	d101      	bne.n	8003226 <LL_DMA_IsActiveFlag_HT1+0x18>
 8003222:	2301      	movs	r3, #1
 8003224:	e000      	b.n	8003228 <LL_DMA_IsActiveFlag_HT1+0x1a>
 8003226:	2300      	movs	r3, #0
}
 8003228:	0018      	movs	r0, r3
 800322a:	46bd      	mov	sp, r7
 800322c:	b002      	add	sp, #8
 800322e:	bd80      	pop	{r7, pc}

08003230 <LL_DMA_IsActiveFlag_TE1>:
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF1) == (DMA_ISR_TEIF1)) ? 1UL : 0UL);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2208      	movs	r2, #8
 800323e:	4013      	ands	r3, r2
 8003240:	2b08      	cmp	r3, #8
 8003242:	d101      	bne.n	8003248 <LL_DMA_IsActiveFlag_TE1+0x18>
 8003244:	2301      	movs	r3, #1
 8003246:	e000      	b.n	800324a <LL_DMA_IsActiveFlag_TE1+0x1a>
 8003248:	2300      	movs	r3, #0
}
 800324a:	0018      	movs	r0, r3
 800324c:	46bd      	mov	sp, r7
 800324e:	b002      	add	sp, #8
 8003250:	bd80      	pop	{r7, pc}

08003252 <LL_DMA_ClearFlag_TC1>:
{
 8003252:	b580      	push	{r7, lr}
 8003254:	b082      	sub	sp, #8
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2202      	movs	r2, #2
 800325e:	605a      	str	r2, [r3, #4]
}
 8003260:	46c0      	nop			@ (mov r8, r8)
 8003262:	46bd      	mov	sp, r7
 8003264:	b002      	add	sp, #8
 8003266:	bd80      	pop	{r7, pc}

08003268 <LL_DMA_ClearFlag_HT1>:
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF1);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2204      	movs	r2, #4
 8003274:	605a      	str	r2, [r3, #4]
}
 8003276:	46c0      	nop			@ (mov r8, r8)
 8003278:	46bd      	mov	sp, r7
 800327a:	b002      	add	sp, #8
 800327c:	bd80      	pop	{r7, pc}

0800327e <LL_DMA_ClearFlag_TE1>:
{
 800327e:	b580      	push	{r7, lr}
 8003280:	b082      	sub	sp, #8
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF1);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2208      	movs	r2, #8
 800328a:	605a      	str	r2, [r3, #4]
}
 800328c:	46c0      	nop			@ (mov r8, r8)
 800328e:	46bd      	mov	sp, r7
 8003290:	b002      	add	sp, #8
 8003292:	bd80      	pop	{r7, pc}

08003294 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003298:	46c0      	nop			@ (mov r8, r8)
 800329a:	e7fd      	b.n	8003298 <NMI_Handler+0x4>

0800329c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032a0:	46c0      	nop			@ (mov r8, r8)
 80032a2:	e7fd      	b.n	80032a0 <HardFault_Handler+0x4>

080032a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032a8:	46c0      	nop			@ (mov r8, r8)
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032ae:	b580      	push	{r7, lr}
 80032b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032b2:	46c0      	nop			@ (mov r8, r8)
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032bc:	f000 f926 	bl	800350c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032c0:	46c0      	nop			@ (mov r8, r8)
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
	...

080032c8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
  /* Check whether DMA transfer complete caused the DMA interruption */
  if(LL_DMA_IsActiveFlag_TC1(DMA1) == 1)
 80032cc:	4b15      	ldr	r3, [pc, #84]	@ (8003324 <DMA1_Channel1_IRQHandler+0x5c>)
 80032ce:	0018      	movs	r0, r3
 80032d0:	f7ff ff8c 	bl	80031ec <LL_DMA_IsActiveFlag_TC1>
 80032d4:	0003      	movs	r3, r0
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d106      	bne.n	80032e8 <DMA1_Channel1_IRQHandler+0x20>
  {
	/* Clear flag DMA transfer complete */
	LL_DMA_ClearFlag_TC1(DMA1);
 80032da:	4b12      	ldr	r3, [pc, #72]	@ (8003324 <DMA1_Channel1_IRQHandler+0x5c>)
 80032dc:	0018      	movs	r0, r3
 80032de:	f7ff ffb8 	bl	8003252 <LL_DMA_ClearFlag_TC1>

	/* Call interruption treatment function */
	ADC_ConvCpltCallback();
 80032e2:	f7ff fc0f 	bl	8002b04 <ADC_ConvCpltCallback>
 80032e6:	e00c      	b.n	8003302 <DMA1_Channel1_IRQHandler+0x3a>
  }
  else if(LL_DMA_IsActiveFlag_HT1(DMA1) == 1)
 80032e8:	4b0e      	ldr	r3, [pc, #56]	@ (8003324 <DMA1_Channel1_IRQHandler+0x5c>)
 80032ea:	0018      	movs	r0, r3
 80032ec:	f7ff ff8f 	bl	800320e <LL_DMA_IsActiveFlag_HT1>
 80032f0:	0003      	movs	r3, r0
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d105      	bne.n	8003302 <DMA1_Channel1_IRQHandler+0x3a>
  {
	  /* Clear flag DMA half transfer complete */
	  LL_DMA_ClearFlag_HT1(DMA1);
 80032f6:	4b0b      	ldr	r3, [pc, #44]	@ (8003324 <DMA1_Channel1_IRQHandler+0x5c>)
 80032f8:	0018      	movs	r0, r3
 80032fa:	f7ff ffb5 	bl	8003268 <LL_DMA_ClearFlag_HT1>

	  /* Call interruption treatment function */
	  ADC_ConvHalfCpltCallback();
 80032fe:	f7ff fc0b 	bl	8002b18 <ADC_ConvHalfCpltCallback>
  }
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
  /* Check whether DMA transfer error caused the DMA interruption */
  if(LL_DMA_IsActiveFlag_TE1(DMA1) == 1)
 8003302:	4b08      	ldr	r3, [pc, #32]	@ (8003324 <DMA1_Channel1_IRQHandler+0x5c>)
 8003304:	0018      	movs	r0, r3
 8003306:	f7ff ff93 	bl	8003230 <LL_DMA_IsActiveFlag_TE1>
 800330a:	0003      	movs	r3, r0
 800330c:	2b01      	cmp	r3, #1
 800330e:	d105      	bne.n	800331c <DMA1_Channel1_IRQHandler+0x54>
  {
	  /* Clear flag DMA transfer error */
	  LL_DMA_ClearFlag_TE1(DMA1);
 8003310:	4b04      	ldr	r3, [pc, #16]	@ (8003324 <DMA1_Channel1_IRQHandler+0x5c>)
 8003312:	0018      	movs	r0, r3
 8003314:	f7ff ffb3 	bl	800327e <LL_DMA_ClearFlag_TE1>

	  /* Call interruption treatment function */
	  ADC_ErrorCallback();
 8003318:	f7ff fc08 	bl	8002b2c <ADC_ErrorCallback>
  }
  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800331c:	46c0      	nop			@ (mov r8, r8)
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	46c0      	nop			@ (mov r8, r8)
 8003324:	40020000 	.word	0x40020000

08003328 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800332c:	4b05      	ldr	r3, [pc, #20]	@ (8003344 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800332e:	0018      	movs	r0, r3
 8003330:	f000 fca2 	bl	8003c78 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003334:	4b04      	ldr	r3, [pc, #16]	@ (8003348 <DMA1_Channel2_3_IRQHandler+0x20>)
 8003336:	0018      	movs	r0, r3
 8003338:	f000 fc9e 	bl	8003c78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800333c:	46c0      	nop			@ (mov r8, r8)
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	46c0      	nop			@ (mov r8, r8)
 8003344:	2000036c 	.word	0x2000036c
 8003348:	200003c8 	.word	0x200003c8

0800334c <DMAMUX1_DMA1_CH4_5_IRQHandler>:

/**
  * @brief This function handles DMAMUX1, DMA1 Channel 4 and 5.
  */
void DMAMUX1_DMA1_CH4_5_IRQHandler(void)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_DMA1_CH4_5_IRQn 0 */

  /* USER CODE END DMAMUX1_DMA1_CH4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003350:	4b05      	ldr	r3, [pc, #20]	@ (8003368 <DMAMUX1_DMA1_CH4_5_IRQHandler+0x1c>)
 8003352:	0018      	movs	r0, r3
 8003354:	f000 fc90 	bl	8003c78 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8003358:	4b04      	ldr	r3, [pc, #16]	@ (800336c <DMAMUX1_DMA1_CH4_5_IRQHandler+0x20>)
 800335a:	0018      	movs	r0, r3
 800335c:	f000 fc8c 	bl	8003c78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_DMA1_CH4_5_IRQn 1 */

  /* USER CODE END DMAMUX1_DMA1_CH4_5_IRQn 1 */
}
 8003360:	46c0      	nop			@ (mov r8, r8)
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	46c0      	nop			@ (mov r8, r8)
 8003368:	20000124 	.word	0x20000124
 800336c:	20000180 	.word	0x20000180

08003370 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */
  /* Check whether ADC group regular overrun caused the ADC interruption */
  if(LL_ADC_IsActiveFlag_OVR(ADC1) != 0)
 8003374:	4b07      	ldr	r3, [pc, #28]	@ (8003394 <ADC1_IRQHandler+0x24>)
 8003376:	0018      	movs	r0, r3
 8003378:	f7ff ff1c 	bl	80031b4 <LL_ADC_IsActiveFlag_OVR>
 800337c:	1e03      	subs	r3, r0, #0
 800337e:	d005      	beq.n	800338c <ADC1_IRQHandler+0x1c>
  {
	/* Clear flag ADC group regular overrun */
	LL_ADC_ClearFlag_OVR(ADC1);
 8003380:	4b04      	ldr	r3, [pc, #16]	@ (8003394 <ADC1_IRQHandler+0x24>)
 8003382:	0018      	movs	r0, r3
 8003384:	f7ff ff27 	bl	80031d6 <LL_ADC_ClearFlag_OVR>

	/* Call interruption treatment function */
	ADC_ErrorCallback();
 8003388:	f7ff fbd0 	bl	8002b2c <ADC_ErrorCallback>
  }
  /* USER CODE END ADC1_IRQn 0 */
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800338c:	46c0      	nop			@ (mov r8, r8)
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	46c0      	nop			@ (mov r8, r8)
 8003394:	40012400 	.word	0x40012400

08003398 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 interrupt (combined with EXTI 23).
  */
void I2C1_IRQHandler(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 800339c:	4b09      	ldr	r3, [pc, #36]	@ (80033c4 <I2C1_IRQHandler+0x2c>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	699a      	ldr	r2, [r3, #24]
 80033a2:	23e0      	movs	r3, #224	@ 0xe0
 80033a4:	00db      	lsls	r3, r3, #3
 80033a6:	4013      	ands	r3, r2
 80033a8:	d004      	beq.n	80033b4 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 80033aa:	4b06      	ldr	r3, [pc, #24]	@ (80033c4 <I2C1_IRQHandler+0x2c>)
 80033ac:	0018      	movs	r0, r3
 80033ae:	f001 f8e3 	bl	8004578 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 80033b2:	e003      	b.n	80033bc <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 80033b4:	4b03      	ldr	r3, [pc, #12]	@ (80033c4 <I2C1_IRQHandler+0x2c>)
 80033b6:	0018      	movs	r0, r3
 80033b8:	f001 f8c4 	bl	8004544 <HAL_I2C_EV_IRQHandler>
}
 80033bc:	46c0      	nop			@ (mov r8, r8)
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	46c0      	nop			@ (mov r8, r8)
 80033c4:	200000d0 	.word	0x200000d0

080033c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 interrupt.
  */
void USART1_IRQHandler(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80033cc:	4b03      	ldr	r3, [pc, #12]	@ (80033dc <USART1_IRQHandler+0x14>)
 80033ce:	0018      	movs	r0, r3
 80033d0:	f004 f994 	bl	80076fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80033d4:	46c0      	nop			@ (mov r8, r8)
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	46c0      	nop			@ (mov r8, r8)
 80033dc:	200002d8 	.word	0x200002d8

080033e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80033e4:	4b03      	ldr	r3, [pc, #12]	@ (80033f4 <SystemInit+0x14>)
 80033e6:	2280      	movs	r2, #128	@ 0x80
 80033e8:	0512      	lsls	r2, r2, #20
 80033ea:	609a      	str	r2, [r3, #8]
#endif
}
 80033ec:	46c0      	nop			@ (mov r8, r8)
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	46c0      	nop			@ (mov r8, r8)
 80033f4:	e000ed00 	.word	0xe000ed00

080033f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80033f8:	480d      	ldr	r0, [pc, #52]	@ (8003430 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80033fa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80033fc:	f7ff fff0 	bl	80033e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003400:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003402:	e003      	b.n	800340c <LoopCopyDataInit>

08003404 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003404:	4b0b      	ldr	r3, [pc, #44]	@ (8003434 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8003406:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003408:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800340a:	3104      	adds	r1, #4

0800340c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800340c:	480a      	ldr	r0, [pc, #40]	@ (8003438 <LoopForever+0xa>)
  ldr r3, =_edata
 800340e:	4b0b      	ldr	r3, [pc, #44]	@ (800343c <LoopForever+0xe>)
  adds r2, r0, r1
 8003410:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003412:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003414:	d3f6      	bcc.n	8003404 <CopyDataInit>
  ldr r2, =_sbss
 8003416:	4a0a      	ldr	r2, [pc, #40]	@ (8003440 <LoopForever+0x12>)
  b LoopFillZerobss
 8003418:	e002      	b.n	8003420 <LoopFillZerobss>

0800341a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800341a:	2300      	movs	r3, #0
  str  r3, [r2]
 800341c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800341e:	3204      	adds	r2, #4

08003420 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8003420:	4b08      	ldr	r3, [pc, #32]	@ (8003444 <LoopForever+0x16>)
  cmp r2, r3
 8003422:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003424:	d3f9      	bcc.n	800341a <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8003426:	f005 feeb 	bl	8009200 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800342a:	f7fd fe4d 	bl	80010c8 <main>

0800342e <LoopForever>:

LoopForever:
    b LoopForever
 800342e:	e7fe      	b.n	800342e <LoopForever>
  ldr   r0, =_estack
 8003430:	20006000 	.word	0x20006000
  ldr r3, =_sidata
 8003434:	0800968c 	.word	0x0800968c
  ldr r0, =_sdata
 8003438:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800343c:	200000a8 	.word	0x200000a8
  ldr r2, =_sbss
 8003440:	200000a8 	.word	0x200000a8
  ldr r3, = _ebss
 8003444:	20000784 	.word	0x20000784

08003448 <EXTI0_1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003448:	e7fe      	b.n	8003448 <EXTI0_1_IRQHandler>

0800344a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800344a:	b580      	push	{r7, lr}
 800344c:	b082      	sub	sp, #8
 800344e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003450:	1dfb      	adds	r3, r7, #7
 8003452:	2200      	movs	r2, #0
 8003454:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003456:	2003      	movs	r0, #3
 8003458:	f000 f80e 	bl	8003478 <HAL_InitTick>
 800345c:	1e03      	subs	r3, r0, #0
 800345e:	d003      	beq.n	8003468 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8003460:	1dfb      	adds	r3, r7, #7
 8003462:	2201      	movs	r2, #1
 8003464:	701a      	strb	r2, [r3, #0]
 8003466:	e001      	b.n	800346c <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003468:	f7ff fb66 	bl	8002b38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800346c:	1dfb      	adds	r3, r7, #7
 800346e:	781b      	ldrb	r3, [r3, #0]
}
 8003470:	0018      	movs	r0, r3
 8003472:	46bd      	mov	sp, r7
 8003474:	b002      	add	sp, #8
 8003476:	bd80      	pop	{r7, pc}

08003478 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003478:	b590      	push	{r4, r7, lr}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003480:	230f      	movs	r3, #15
 8003482:	18fb      	adds	r3, r7, r3
 8003484:	2200      	movs	r2, #0
 8003486:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8003488:	4b1d      	ldr	r3, [pc, #116]	@ (8003500 <HAL_InitTick+0x88>)
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d02b      	beq.n	80034e8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8003490:	4b1c      	ldr	r3, [pc, #112]	@ (8003504 <HAL_InitTick+0x8c>)
 8003492:	681c      	ldr	r4, [r3, #0]
 8003494:	4b1a      	ldr	r3, [pc, #104]	@ (8003500 <HAL_InitTick+0x88>)
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	0019      	movs	r1, r3
 800349a:	23fa      	movs	r3, #250	@ 0xfa
 800349c:	0098      	lsls	r0, r3, #2
 800349e:	f7fc fe33 	bl	8000108 <__udivsi3>
 80034a2:	0003      	movs	r3, r0
 80034a4:	0019      	movs	r1, r3
 80034a6:	0020      	movs	r0, r4
 80034a8:	f7fc fe2e 	bl	8000108 <__udivsi3>
 80034ac:	0003      	movs	r3, r0
 80034ae:	0018      	movs	r0, r3
 80034b0:	f000 f96f 	bl	8003792 <HAL_SYSTICK_Config>
 80034b4:	1e03      	subs	r3, r0, #0
 80034b6:	d112      	bne.n	80034de <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2b03      	cmp	r3, #3
 80034bc:	d80a      	bhi.n	80034d4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034be:	6879      	ldr	r1, [r7, #4]
 80034c0:	2301      	movs	r3, #1
 80034c2:	425b      	negs	r3, r3
 80034c4:	2200      	movs	r2, #0
 80034c6:	0018      	movs	r0, r3
 80034c8:	f000 f92e 	bl	8003728 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80034cc:	4b0e      	ldr	r3, [pc, #56]	@ (8003508 <HAL_InitTick+0x90>)
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	601a      	str	r2, [r3, #0]
 80034d2:	e00d      	b.n	80034f0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80034d4:	230f      	movs	r3, #15
 80034d6:	18fb      	adds	r3, r7, r3
 80034d8:	2201      	movs	r2, #1
 80034da:	701a      	strb	r2, [r3, #0]
 80034dc:	e008      	b.n	80034f0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80034de:	230f      	movs	r3, #15
 80034e0:	18fb      	adds	r3, r7, r3
 80034e2:	2201      	movs	r2, #1
 80034e4:	701a      	strb	r2, [r3, #0]
 80034e6:	e003      	b.n	80034f0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80034e8:	230f      	movs	r3, #15
 80034ea:	18fb      	adds	r3, r7, r3
 80034ec:	2201      	movs	r2, #1
 80034ee:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80034f0:	230f      	movs	r3, #15
 80034f2:	18fb      	adds	r3, r7, r3
 80034f4:	781b      	ldrb	r3, [r3, #0]
}
 80034f6:	0018      	movs	r0, r3
 80034f8:	46bd      	mov	sp, r7
 80034fa:	b005      	add	sp, #20
 80034fc:	bd90      	pop	{r4, r7, pc}
 80034fe:	46c0      	nop			@ (mov r8, r8)
 8003500:	200000a4 	.word	0x200000a4
 8003504:	2000009c 	.word	0x2000009c
 8003508:	200000a0 	.word	0x200000a0

0800350c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003510:	4b05      	ldr	r3, [pc, #20]	@ (8003528 <HAL_IncTick+0x1c>)
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	001a      	movs	r2, r3
 8003516:	4b05      	ldr	r3, [pc, #20]	@ (800352c <HAL_IncTick+0x20>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	18d2      	adds	r2, r2, r3
 800351c:	4b03      	ldr	r3, [pc, #12]	@ (800352c <HAL_IncTick+0x20>)
 800351e:	601a      	str	r2, [r3, #0]
}
 8003520:	46c0      	nop			@ (mov r8, r8)
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	46c0      	nop			@ (mov r8, r8)
 8003528:	200000a4 	.word	0x200000a4
 800352c:	20000780 	.word	0x20000780

08003530 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	af00      	add	r7, sp, #0
  return uwTick;
 8003534:	4b02      	ldr	r3, [pc, #8]	@ (8003540 <HAL_GetTick+0x10>)
 8003536:	681b      	ldr	r3, [r3, #0]
}
 8003538:	0018      	movs	r0, r3
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	46c0      	nop			@ (mov r8, r8)
 8003540:	20000780 	.word	0x20000780

08003544 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800354c:	f7ff fff0 	bl	8003530 <HAL_GetTick>
 8003550:	0003      	movs	r3, r0
 8003552:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	3301      	adds	r3, #1
 800355c:	d005      	beq.n	800356a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800355e:	4b0a      	ldr	r3, [pc, #40]	@ (8003588 <HAL_Delay+0x44>)
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	001a      	movs	r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	189b      	adds	r3, r3, r2
 8003568:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800356a:	46c0      	nop			@ (mov r8, r8)
 800356c:	f7ff ffe0 	bl	8003530 <HAL_GetTick>
 8003570:	0002      	movs	r2, r0
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	429a      	cmp	r2, r3
 800357a:	d8f7      	bhi.n	800356c <HAL_Delay+0x28>
  {
  }
}
 800357c:	46c0      	nop			@ (mov r8, r8)
 800357e:	46c0      	nop			@ (mov r8, r8)
 8003580:	46bd      	mov	sp, r7
 8003582:	b004      	add	sp, #16
 8003584:	bd80      	pop	{r7, pc}
 8003586:	46c0      	nop			@ (mov r8, r8)
 8003588:	200000a4 	.word	0x200000a4

0800358c <__NVIC_EnableIRQ>:
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	0002      	movs	r2, r0
 8003594:	1dfb      	adds	r3, r7, #7
 8003596:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003598:	1dfb      	adds	r3, r7, #7
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	2b7f      	cmp	r3, #127	@ 0x7f
 800359e:	d809      	bhi.n	80035b4 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035a0:	1dfb      	adds	r3, r7, #7
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	001a      	movs	r2, r3
 80035a6:	231f      	movs	r3, #31
 80035a8:	401a      	ands	r2, r3
 80035aa:	4b04      	ldr	r3, [pc, #16]	@ (80035bc <__NVIC_EnableIRQ+0x30>)
 80035ac:	2101      	movs	r1, #1
 80035ae:	4091      	lsls	r1, r2
 80035b0:	000a      	movs	r2, r1
 80035b2:	601a      	str	r2, [r3, #0]
}
 80035b4:	46c0      	nop			@ (mov r8, r8)
 80035b6:	46bd      	mov	sp, r7
 80035b8:	b002      	add	sp, #8
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	e000e100 	.word	0xe000e100

080035c0 <__NVIC_DisableIRQ>:
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	0002      	movs	r2, r0
 80035c8:	1dfb      	adds	r3, r7, #7
 80035ca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80035cc:	1dfb      	adds	r3, r7, #7
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80035d2:	d810      	bhi.n	80035f6 <__NVIC_DisableIRQ+0x36>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035d4:	1dfb      	adds	r3, r7, #7
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	001a      	movs	r2, r3
 80035da:	231f      	movs	r3, #31
 80035dc:	4013      	ands	r3, r2
 80035de:	4908      	ldr	r1, [pc, #32]	@ (8003600 <__NVIC_DisableIRQ+0x40>)
 80035e0:	2201      	movs	r2, #1
 80035e2:	409a      	lsls	r2, r3
 80035e4:	0013      	movs	r3, r2
 80035e6:	2280      	movs	r2, #128	@ 0x80
 80035e8:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
 80035ea:	f3bf 8f4f 	dsb	sy
}
 80035ee:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 80035f0:	f3bf 8f6f 	isb	sy
}
 80035f4:	46c0      	nop			@ (mov r8, r8)
}
 80035f6:	46c0      	nop			@ (mov r8, r8)
 80035f8:	46bd      	mov	sp, r7
 80035fa:	b002      	add	sp, #8
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	46c0      	nop			@ (mov r8, r8)
 8003600:	e000e100 	.word	0xe000e100

08003604 <__NVIC_SetPriority>:
{
 8003604:	b590      	push	{r4, r7, lr}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	0002      	movs	r2, r0
 800360c:	6039      	str	r1, [r7, #0]
 800360e:	1dfb      	adds	r3, r7, #7
 8003610:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003612:	1dfb      	adds	r3, r7, #7
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	2b7f      	cmp	r3, #127	@ 0x7f
 8003618:	d828      	bhi.n	800366c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800361a:	4a2f      	ldr	r2, [pc, #188]	@ (80036d8 <__NVIC_SetPriority+0xd4>)
 800361c:	1dfb      	adds	r3, r7, #7
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	b25b      	sxtb	r3, r3
 8003622:	089b      	lsrs	r3, r3, #2
 8003624:	33c0      	adds	r3, #192	@ 0xc0
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	589b      	ldr	r3, [r3, r2]
 800362a:	1dfa      	adds	r2, r7, #7
 800362c:	7812      	ldrb	r2, [r2, #0]
 800362e:	0011      	movs	r1, r2
 8003630:	2203      	movs	r2, #3
 8003632:	400a      	ands	r2, r1
 8003634:	00d2      	lsls	r2, r2, #3
 8003636:	21ff      	movs	r1, #255	@ 0xff
 8003638:	4091      	lsls	r1, r2
 800363a:	000a      	movs	r2, r1
 800363c:	43d2      	mvns	r2, r2
 800363e:	401a      	ands	r2, r3
 8003640:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	019b      	lsls	r3, r3, #6
 8003646:	22ff      	movs	r2, #255	@ 0xff
 8003648:	401a      	ands	r2, r3
 800364a:	1dfb      	adds	r3, r7, #7
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	0018      	movs	r0, r3
 8003650:	2303      	movs	r3, #3
 8003652:	4003      	ands	r3, r0
 8003654:	00db      	lsls	r3, r3, #3
 8003656:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003658:	481f      	ldr	r0, [pc, #124]	@ (80036d8 <__NVIC_SetPriority+0xd4>)
 800365a:	1dfb      	adds	r3, r7, #7
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	b25b      	sxtb	r3, r3
 8003660:	089b      	lsrs	r3, r3, #2
 8003662:	430a      	orrs	r2, r1
 8003664:	33c0      	adds	r3, #192	@ 0xc0
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	501a      	str	r2, [r3, r0]
}
 800366a:	e031      	b.n	80036d0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800366c:	4a1b      	ldr	r2, [pc, #108]	@ (80036dc <__NVIC_SetPriority+0xd8>)
 800366e:	1dfb      	adds	r3, r7, #7
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	0019      	movs	r1, r3
 8003674:	230f      	movs	r3, #15
 8003676:	400b      	ands	r3, r1
 8003678:	3b08      	subs	r3, #8
 800367a:	089b      	lsrs	r3, r3, #2
 800367c:	3306      	adds	r3, #6
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	18d3      	adds	r3, r2, r3
 8003682:	3304      	adds	r3, #4
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	1dfa      	adds	r2, r7, #7
 8003688:	7812      	ldrb	r2, [r2, #0]
 800368a:	0011      	movs	r1, r2
 800368c:	2203      	movs	r2, #3
 800368e:	400a      	ands	r2, r1
 8003690:	00d2      	lsls	r2, r2, #3
 8003692:	21ff      	movs	r1, #255	@ 0xff
 8003694:	4091      	lsls	r1, r2
 8003696:	000a      	movs	r2, r1
 8003698:	43d2      	mvns	r2, r2
 800369a:	401a      	ands	r2, r3
 800369c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	019b      	lsls	r3, r3, #6
 80036a2:	22ff      	movs	r2, #255	@ 0xff
 80036a4:	401a      	ands	r2, r3
 80036a6:	1dfb      	adds	r3, r7, #7
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	0018      	movs	r0, r3
 80036ac:	2303      	movs	r3, #3
 80036ae:	4003      	ands	r3, r0
 80036b0:	00db      	lsls	r3, r3, #3
 80036b2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80036b4:	4809      	ldr	r0, [pc, #36]	@ (80036dc <__NVIC_SetPriority+0xd8>)
 80036b6:	1dfb      	adds	r3, r7, #7
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	001c      	movs	r4, r3
 80036bc:	230f      	movs	r3, #15
 80036be:	4023      	ands	r3, r4
 80036c0:	3b08      	subs	r3, #8
 80036c2:	089b      	lsrs	r3, r3, #2
 80036c4:	430a      	orrs	r2, r1
 80036c6:	3306      	adds	r3, #6
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	18c3      	adds	r3, r0, r3
 80036cc:	3304      	adds	r3, #4
 80036ce:	601a      	str	r2, [r3, #0]
}
 80036d0:	46c0      	nop			@ (mov r8, r8)
 80036d2:	46bd      	mov	sp, r7
 80036d4:	b003      	add	sp, #12
 80036d6:	bd90      	pop	{r4, r7, pc}
 80036d8:	e000e100 	.word	0xe000e100
 80036dc:	e000ed00 	.word	0xe000ed00

080036e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	1e5a      	subs	r2, r3, #1
 80036ec:	2380      	movs	r3, #128	@ 0x80
 80036ee:	045b      	lsls	r3, r3, #17
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d301      	bcc.n	80036f8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036f4:	2301      	movs	r3, #1
 80036f6:	e010      	b.n	800371a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036f8:	4b0a      	ldr	r3, [pc, #40]	@ (8003724 <SysTick_Config+0x44>)
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	3a01      	subs	r2, #1
 80036fe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003700:	2301      	movs	r3, #1
 8003702:	425b      	negs	r3, r3
 8003704:	2103      	movs	r1, #3
 8003706:	0018      	movs	r0, r3
 8003708:	f7ff ff7c 	bl	8003604 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800370c:	4b05      	ldr	r3, [pc, #20]	@ (8003724 <SysTick_Config+0x44>)
 800370e:	2200      	movs	r2, #0
 8003710:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003712:	4b04      	ldr	r3, [pc, #16]	@ (8003724 <SysTick_Config+0x44>)
 8003714:	2207      	movs	r2, #7
 8003716:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003718:	2300      	movs	r3, #0
}
 800371a:	0018      	movs	r0, r3
 800371c:	46bd      	mov	sp, r7
 800371e:	b002      	add	sp, #8
 8003720:	bd80      	pop	{r7, pc}
 8003722:	46c0      	nop			@ (mov r8, r8)
 8003724:	e000e010 	.word	0xe000e010

08003728 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	60b9      	str	r1, [r7, #8]
 8003730:	607a      	str	r2, [r7, #4]
 8003732:	210f      	movs	r1, #15
 8003734:	187b      	adds	r3, r7, r1
 8003736:	1c02      	adds	r2, r0, #0
 8003738:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800373a:	68ba      	ldr	r2, [r7, #8]
 800373c:	187b      	adds	r3, r7, r1
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	b25b      	sxtb	r3, r3
 8003742:	0011      	movs	r1, r2
 8003744:	0018      	movs	r0, r3
 8003746:	f7ff ff5d 	bl	8003604 <__NVIC_SetPriority>
}
 800374a:	46c0      	nop			@ (mov r8, r8)
 800374c:	46bd      	mov	sp, r7
 800374e:	b004      	add	sp, #16
 8003750:	bd80      	pop	{r7, pc}

08003752 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003752:	b580      	push	{r7, lr}
 8003754:	b082      	sub	sp, #8
 8003756:	af00      	add	r7, sp, #0
 8003758:	0002      	movs	r2, r0
 800375a:	1dfb      	adds	r3, r7, #7
 800375c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800375e:	1dfb      	adds	r3, r7, #7
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	b25b      	sxtb	r3, r3
 8003764:	0018      	movs	r0, r3
 8003766:	f7ff ff11 	bl	800358c <__NVIC_EnableIRQ>
}
 800376a:	46c0      	nop			@ (mov r8, r8)
 800376c:	46bd      	mov	sp, r7
 800376e:	b002      	add	sp, #8
 8003770:	bd80      	pop	{r7, pc}

08003772 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003772:	b580      	push	{r7, lr}
 8003774:	b082      	sub	sp, #8
 8003776:	af00      	add	r7, sp, #0
 8003778:	0002      	movs	r2, r0
 800377a:	1dfb      	adds	r3, r7, #7
 800377c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800377e:	1dfb      	adds	r3, r7, #7
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	b25b      	sxtb	r3, r3
 8003784:	0018      	movs	r0, r3
 8003786:	f7ff ff1b 	bl	80035c0 <__NVIC_DisableIRQ>
}
 800378a:	46c0      	nop			@ (mov r8, r8)
 800378c:	46bd      	mov	sp, r7
 800378e:	b002      	add	sp, #8
 8003790:	bd80      	pop	{r7, pc}

08003792 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003792:	b580      	push	{r7, lr}
 8003794:	b082      	sub	sp, #8
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	0018      	movs	r0, r3
 800379e:	f7ff ff9f 	bl	80036e0 <SysTick_Config>
 80037a2:	0003      	movs	r3, r0
}
 80037a4:	0018      	movs	r0, r3
 80037a6:	46bd      	mov	sp, r7
 80037a8:	b002      	add	sp, #8
 80037aa:	bd80      	pop	{r7, pc}

080037ac <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d101      	bne.n	80037be <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e077      	b.n	80038ae <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a3d      	ldr	r2, [pc, #244]	@ (80038b8 <HAL_DMA_Init+0x10c>)
 80037c4:	4694      	mov	ip, r2
 80037c6:	4463      	add	r3, ip
 80037c8:	2114      	movs	r1, #20
 80037ca:	0018      	movs	r0, r3
 80037cc:	f7fc fc9c 	bl	8000108 <__udivsi3>
 80037d0:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 80037d2:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2225      	movs	r2, #37	@ 0x25
 80037dc:	2102      	movs	r1, #2
 80037de:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4934      	ldr	r1, [pc, #208]	@ (80038bc <HAL_DMA_Init+0x110>)
 80037ec:	400a      	ands	r2, r1
 80037ee:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	6819      	ldr	r1, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	689a      	ldr	r2, [r3, #8]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	431a      	orrs	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	431a      	orrs	r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	695b      	ldr	r3, [r3, #20]
 800380a:	431a      	orrs	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	431a      	orrs	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	69db      	ldr	r3, [r3, #28]
 8003816:	431a      	orrs	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a1b      	ldr	r3, [r3, #32]
 800381c:	431a      	orrs	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	430a      	orrs	r2, r1
 8003824:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	0018      	movs	r0, r3
 800382a:	f000 fb2d 	bl	8003e88 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	689a      	ldr	r2, [r3, #8]
 8003832:	2380      	movs	r3, #128	@ 0x80
 8003834:	01db      	lsls	r3, r3, #7
 8003836:	429a      	cmp	r2, r3
 8003838:	d102      	bne.n	8003840 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685a      	ldr	r2, [r3, #4]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003848:	21ff      	movs	r1, #255	@ 0xff
 800384a:	400a      	ands	r2, r1
 800384c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003856:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d011      	beq.n	8003884 <HAL_DMA_Init+0xd8>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	2b04      	cmp	r3, #4
 8003866:	d80d      	bhi.n	8003884 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	0018      	movs	r0, r3
 800386c:	f000 fb38 	bl	8003ee0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003874:	2200      	movs	r2, #0
 8003876:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003880:	605a      	str	r2, [r3, #4]
 8003882:	e008      	b.n	8003896 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2225      	movs	r2, #37	@ 0x25
 80038a0:	2101      	movs	r1, #1
 80038a2:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2224      	movs	r2, #36	@ 0x24
 80038a8:	2100      	movs	r1, #0
 80038aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	0018      	movs	r0, r3
 80038b0:	46bd      	mov	sp, r7
 80038b2:	b002      	add	sp, #8
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	46c0      	nop			@ (mov r8, r8)
 80038b8:	bffdfff8 	.word	0xbffdfff8
 80038bc:	ffff800f 	.word	0xffff800f

080038c0 <HAL_DMA_DeInit>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d101      	bne.n	80038d2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e066      	b.n	80039a0 <HAL_DMA_DeInit+0xe0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2101      	movs	r1, #1
 80038de:	438a      	bics	r2, r1
 80038e0:	601a      	str	r2, [r3, #0]

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a30      	ldr	r2, [pc, #192]	@ (80039a8 <HAL_DMA_DeInit+0xe8>)
 80038e8:	4694      	mov	ip, r2
 80038ea:	4463      	add	r3, ip
 80038ec:	2114      	movs	r1, #20
 80038ee:	0018      	movs	r0, r3
 80038f0:	f7fc fc0a 	bl	8000108 <__udivsi3>
 80038f4:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 80038f6:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2200      	movs	r2, #0
 8003902:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8003904:	4b29      	ldr	r3, [pc, #164]	@ (80039ac <HAL_DMA_DeInit+0xec>)
 8003906:	6859      	ldr	r1, [r3, #4]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800390c:	221c      	movs	r2, #28
 800390e:	4013      	ands	r3, r2
 8003910:	2201      	movs	r2, #1
 8003912:	409a      	lsls	r2, r3
 8003914:	4b25      	ldr	r3, [pc, #148]	@ (80039ac <HAL_DMA_DeInit+0xec>)
 8003916:	430a      	orrs	r2, r1
 8003918:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	0018      	movs	r0, r3
 800391e:	f000 fab3 	bl	8003e88 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003926:	2200      	movs	r2, #0
 8003928:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003932:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d010      	beq.n	800395e <HAL_DMA_DeInit+0x9e>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	2b04      	cmp	r3, #4
 8003942:	d80c      	bhi.n	800395e <HAL_DMA_DeInit+0x9e>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	0018      	movs	r0, r3
 8003948:	f000 faca 	bl	8003ee0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003950:	2200      	movs	r2, #0
 8003952:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800395c:	605a      	str	r2, [r3, #4]
  }

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	639a      	str	r2, [r3, #56]	@ 0x38

  hdma->DMAmuxRequestGen = 0U;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma->DMAmuxRequestGenStatus = 0U;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2225      	movs	r2, #37	@ 0x25
 8003992:	2100      	movs	r1, #0
 8003994:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2224      	movs	r2, #36	@ 0x24
 800399a:	2100      	movs	r1, #0
 800399c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	0018      	movs	r0, r3
 80039a2:	46bd      	mov	sp, r7
 80039a4:	b002      	add	sp, #8
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	bffdfff8 	.word	0xbffdfff8
 80039ac:	40020000 	.word	0x40020000

080039b0 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b086      	sub	sp, #24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	607a      	str	r2, [r7, #4]
 80039bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039be:	2317      	movs	r3, #23
 80039c0:	18fb      	adds	r3, r7, r3
 80039c2:	2200      	movs	r2, #0
 80039c4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2224      	movs	r2, #36	@ 0x24
 80039ca:	5c9b      	ldrb	r3, [r3, r2]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d101      	bne.n	80039d4 <HAL_DMA_Start_IT+0x24>
 80039d0:	2302      	movs	r3, #2
 80039d2:	e070      	b.n	8003ab6 <HAL_DMA_Start_IT+0x106>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2224      	movs	r2, #36	@ 0x24
 80039d8:	2101      	movs	r1, #1
 80039da:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2225      	movs	r2, #37	@ 0x25
 80039e0:	5c9b      	ldrb	r3, [r3, r2]
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d157      	bne.n	8003a98 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2225      	movs	r2, #37	@ 0x25
 80039ec:	2102      	movs	r1, #2
 80039ee:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2200      	movs	r2, #0
 80039f4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2101      	movs	r1, #1
 8003a02:	438a      	bics	r2, r1
 8003a04:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	68b9      	ldr	r1, [r7, #8]
 8003a0c:	68f8      	ldr	r0, [r7, #12]
 8003a0e:	f000 f9fb 	bl	8003e08 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d008      	beq.n	8003a2c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	210e      	movs	r1, #14
 8003a26:	430a      	orrs	r2, r1
 8003a28:	601a      	str	r2, [r3, #0]
 8003a2a:	e00f      	b.n	8003a4c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2104      	movs	r1, #4
 8003a38:	438a      	bics	r2, r1
 8003a3a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	210a      	movs	r1, #10
 8003a48:	430a      	orrs	r2, r1
 8003a4a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	2380      	movs	r3, #128	@ 0x80
 8003a54:	025b      	lsls	r3, r3, #9
 8003a56:	4013      	ands	r3, r2
 8003a58:	d008      	beq.n	8003a6c <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a64:	2180      	movs	r1, #128	@ 0x80
 8003a66:	0049      	lsls	r1, r1, #1
 8003a68:	430a      	orrs	r2, r1
 8003a6a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d008      	beq.n	8003a86 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a7e:	2180      	movs	r1, #128	@ 0x80
 8003a80:	0049      	lsls	r1, r1, #1
 8003a82:	430a      	orrs	r2, r1
 8003a84:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2101      	movs	r1, #1
 8003a92:	430a      	orrs	r2, r1
 8003a94:	601a      	str	r2, [r3, #0]
 8003a96:	e007      	b.n	8003aa8 <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2224      	movs	r2, #36	@ 0x24
 8003a9c:	2100      	movs	r1, #0
 8003a9e:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003aa0:	2317      	movs	r3, #23
 8003aa2:	18fb      	adds	r3, r7, r3
 8003aa4:	2202      	movs	r2, #2
 8003aa6:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2224      	movs	r2, #36	@ 0x24
 8003aac:	2100      	movs	r1, #0
 8003aae:	5499      	strb	r1, [r3, r2]

  return status;
 8003ab0:	2317      	movs	r3, #23
 8003ab2:	18fb      	adds	r3, r7, r3
 8003ab4:	781b      	ldrb	r3, [r3, #0]
}
 8003ab6:	0018      	movs	r0, r3
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	b006      	add	sp, #24
 8003abc:	bd80      	pop	{r7, pc}
	...

08003ac0 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d101      	bne.n	8003ad2 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e050      	b.n	8003b74 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2225      	movs	r2, #37	@ 0x25
 8003ad6:	5c9b      	ldrb	r3, [r3, r2]
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d008      	beq.n	8003af0 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2204      	movs	r2, #4
 8003ae2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2224      	movs	r2, #36	@ 0x24
 8003ae8:	2100      	movs	r1, #0
 8003aea:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e041      	b.n	8003b74 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	210e      	movs	r1, #14
 8003afc:	438a      	bics	r2, r1
 8003afe:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b0a:	491c      	ldr	r1, [pc, #112]	@ (8003b7c <HAL_DMA_Abort+0xbc>)
 8003b0c:	400a      	ands	r2, r1
 8003b0e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2101      	movs	r1, #1
 8003b1c:	438a      	bics	r2, r1
 8003b1e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 8003b20:	4b17      	ldr	r3, [pc, #92]	@ (8003b80 <HAL_DMA_Abort+0xc0>)
 8003b22:	6859      	ldr	r1, [r3, #4]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b28:	221c      	movs	r2, #28
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	409a      	lsls	r2, r3
 8003b30:	4b13      	ldr	r3, [pc, #76]	@ (8003b80 <HAL_DMA_Abort+0xc0>)
 8003b32:	430a      	orrs	r2, r1
 8003b34:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003b3e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d00c      	beq.n	8003b62 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b52:	490a      	ldr	r1, [pc, #40]	@ (8003b7c <HAL_DMA_Abort+0xbc>)
 8003b54:	400a      	ands	r2, r1
 8003b56:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003b60:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2225      	movs	r2, #37	@ 0x25
 8003b66:	2101      	movs	r1, #1
 8003b68:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2224      	movs	r2, #36	@ 0x24
 8003b6e:	2100      	movs	r1, #0
 8003b70:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	0018      	movs	r0, r3
 8003b76:	46bd      	mov	sp, r7
 8003b78:	b002      	add	sp, #8
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	fffffeff 	.word	0xfffffeff
 8003b80:	40020000 	.word	0x40020000

08003b84 <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b8c:	230f      	movs	r3, #15
 8003b8e:	18fb      	adds	r3, r7, r3
 8003b90:	2200      	movs	r2, #0
 8003b92:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2224      	movs	r2, #36	@ 0x24
 8003b98:	2100      	movs	r1, #0
 8003b9a:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2224      	movs	r2, #36	@ 0x24
 8003ba0:	5c9b      	ldrb	r3, [r3, r2]
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d101      	bne.n	8003baa <HAL_DMA_Abort_IT+0x26>
 8003ba6:	2302      	movs	r3, #2
 8003ba8:	e05e      	b.n	8003c68 <HAL_DMA_Abort_IT+0xe4>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2224      	movs	r2, #36	@ 0x24
 8003bae:	2101      	movs	r1, #1
 8003bb0:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2225      	movs	r2, #37	@ 0x25
 8003bb6:	5c9b      	ldrb	r3, [r3, r2]
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d007      	beq.n	8003bce <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2204      	movs	r2, #4
 8003bc2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003bc4:	230f      	movs	r3, #15
 8003bc6:	18fb      	adds	r3, r7, r3
 8003bc8:	2201      	movs	r2, #1
 8003bca:	701a      	strb	r2, [r3, #0]
 8003bcc:	e049      	b.n	8003c62 <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	210e      	movs	r1, #14
 8003bda:	438a      	bics	r2, r1
 8003bdc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2101      	movs	r1, #1
 8003bea:	438a      	bics	r2, r1
 8003bec:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bf8:	491d      	ldr	r1, [pc, #116]	@ (8003c70 <HAL_DMA_Abort_IT+0xec>)
 8003bfa:	400a      	ands	r2, r1
 8003bfc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 8003bfe:	4b1d      	ldr	r3, [pc, #116]	@ (8003c74 <HAL_DMA_Abort_IT+0xf0>)
 8003c00:	6859      	ldr	r1, [r3, #4]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c06:	221c      	movs	r2, #28
 8003c08:	4013      	ands	r3, r2
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	409a      	lsls	r2, r3
 8003c0e:	4b19      	ldr	r3, [pc, #100]	@ (8003c74 <HAL_DMA_Abort_IT+0xf0>)
 8003c10:	430a      	orrs	r2, r1
 8003c12:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003c1c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d00c      	beq.n	8003c40 <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c30:	490f      	ldr	r1, [pc, #60]	@ (8003c70 <HAL_DMA_Abort_IT+0xec>)
 8003c32:	400a      	ands	r2, r1
 8003c34:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003c3e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2225      	movs	r2, #37	@ 0x25
 8003c44:	2101      	movs	r1, #1
 8003c46:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2224      	movs	r2, #36	@ 0x24
 8003c4c:	2100      	movs	r1, #0
 8003c4e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d004      	beq.n	8003c62 <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	0010      	movs	r0, r2
 8003c60:	4798      	blx	r3
    }
  }
  return status;
 8003c62:	230f      	movs	r3, #15
 8003c64:	18fb      	adds	r3, r7, r3
 8003c66:	781b      	ldrb	r3, [r3, #0]
}
 8003c68:	0018      	movs	r0, r3
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	b004      	add	sp, #16
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	fffffeff 	.word	0xfffffeff
 8003c74:	40020000 	.word	0x40020000

08003c78 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 8003c80:	4b55      	ldr	r3, [pc, #340]	@ (8003dd8 <HAL_DMA_IRQHandler+0x160>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c92:	221c      	movs	r2, #28
 8003c94:	4013      	ands	r3, r2
 8003c96:	2204      	movs	r2, #4
 8003c98:	409a      	lsls	r2, r3
 8003c9a:	0013      	movs	r3, r2
 8003c9c:	68fa      	ldr	r2, [r7, #12]
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	d027      	beq.n	8003cf2 <HAL_DMA_IRQHandler+0x7a>
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	2204      	movs	r2, #4
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	d023      	beq.n	8003cf2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2220      	movs	r2, #32
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	d107      	bne.n	8003cc6 <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2104      	movs	r1, #4
 8003cc2:	438a      	bics	r2, r1
 8003cc4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 8003cc6:	4b44      	ldr	r3, [pc, #272]	@ (8003dd8 <HAL_DMA_IRQHandler+0x160>)
 8003cc8:	6859      	ldr	r1, [r3, #4]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cce:	221c      	movs	r2, #28
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	2204      	movs	r2, #4
 8003cd4:	409a      	lsls	r2, r3
 8003cd6:	4b40      	ldr	r3, [pc, #256]	@ (8003dd8 <HAL_DMA_IRQHandler+0x160>)
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d100      	bne.n	8003ce6 <HAL_DMA_IRQHandler+0x6e>
 8003ce4:	e073      	b.n	8003dce <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	0010      	movs	r0, r2
 8003cee:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003cf0:	e06d      	b.n	8003dce <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf6:	221c      	movs	r2, #28
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	2202      	movs	r2, #2
 8003cfc:	409a      	lsls	r2, r3
 8003cfe:	0013      	movs	r3, r2
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	4013      	ands	r3, r2
 8003d04:	d02e      	beq.n	8003d64 <HAL_DMA_IRQHandler+0xec>
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	2202      	movs	r2, #2
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	d02a      	beq.n	8003d64 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2220      	movs	r2, #32
 8003d16:	4013      	ands	r3, r2
 8003d18:	d10b      	bne.n	8003d32 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	210a      	movs	r1, #10
 8003d26:	438a      	bics	r2, r1
 8003d28:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2225      	movs	r2, #37	@ 0x25
 8003d2e:	2101      	movs	r1, #1
 8003d30:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 8003d32:	4b29      	ldr	r3, [pc, #164]	@ (8003dd8 <HAL_DMA_IRQHandler+0x160>)
 8003d34:	6859      	ldr	r1, [r3, #4]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d3a:	221c      	movs	r2, #28
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	2202      	movs	r2, #2
 8003d40:	409a      	lsls	r2, r3
 8003d42:	4b25      	ldr	r3, [pc, #148]	@ (8003dd8 <HAL_DMA_IRQHandler+0x160>)
 8003d44:	430a      	orrs	r2, r1
 8003d46:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2224      	movs	r2, #36	@ 0x24
 8003d4c:	2100      	movs	r1, #0
 8003d4e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d03a      	beq.n	8003dce <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	0010      	movs	r0, r2
 8003d60:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003d62:	e034      	b.n	8003dce <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d68:	221c      	movs	r2, #28
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	2208      	movs	r2, #8
 8003d6e:	409a      	lsls	r2, r3
 8003d70:	0013      	movs	r3, r2
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	4013      	ands	r3, r2
 8003d76:	d02b      	beq.n	8003dd0 <HAL_DMA_IRQHandler+0x158>
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	2208      	movs	r2, #8
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	d027      	beq.n	8003dd0 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	210e      	movs	r1, #14
 8003d8c:	438a      	bics	r2, r1
 8003d8e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8003d90:	4b11      	ldr	r3, [pc, #68]	@ (8003dd8 <HAL_DMA_IRQHandler+0x160>)
 8003d92:	6859      	ldr	r1, [r3, #4]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d98:	221c      	movs	r2, #28
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	409a      	lsls	r2, r3
 8003da0:	4b0d      	ldr	r3, [pc, #52]	@ (8003dd8 <HAL_DMA_IRQHandler+0x160>)
 8003da2:	430a      	orrs	r2, r1
 8003da4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2201      	movs	r2, #1
 8003daa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2225      	movs	r2, #37	@ 0x25
 8003db0:	2101      	movs	r1, #1
 8003db2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2224      	movs	r2, #36	@ 0x24
 8003db8:	2100      	movs	r1, #0
 8003dba:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d005      	beq.n	8003dd0 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	0010      	movs	r0, r2
 8003dcc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003dce:	46c0      	nop			@ (mov r8, r8)
 8003dd0:	46c0      	nop			@ (mov r8, r8)
}
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	b004      	add	sp, #16
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	40020000 	.word	0x40020000

08003ddc <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2225      	movs	r2, #37	@ 0x25
 8003de8:	5c9b      	ldrb	r3, [r3, r2]
 8003dea:	b2db      	uxtb	r3, r3
}
 8003dec:	0018      	movs	r0, r3
 8003dee:	46bd      	mov	sp, r7
 8003df0:	b002      	add	sp, #8
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <HAL_DMA_GetError>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8003e00:	0018      	movs	r0, r3
 8003e02:	46bd      	mov	sp, r7
 8003e04:	b002      	add	sp, #8
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
 8003e14:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003e1e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d004      	beq.n	8003e32 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003e30:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8003e32:	4b14      	ldr	r3, [pc, #80]	@ (8003e84 <DMA_SetConfig+0x7c>)
 8003e34:	6859      	ldr	r1, [r3, #4]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e3a:	221c      	movs	r2, #28
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	2201      	movs	r2, #1
 8003e40:	409a      	lsls	r2, r3
 8003e42:	4b10      	ldr	r3, [pc, #64]	@ (8003e84 <DMA_SetConfig+0x7c>)
 8003e44:	430a      	orrs	r2, r1
 8003e46:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	683a      	ldr	r2, [r7, #0]
 8003e4e:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	2b10      	cmp	r3, #16
 8003e56:	d108      	bne.n	8003e6a <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68ba      	ldr	r2, [r7, #8]
 8003e66:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003e68:	e007      	b.n	8003e7a <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68ba      	ldr	r2, [r7, #8]
 8003e70:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	60da      	str	r2, [r3, #12]
}
 8003e7a:	46c0      	nop			@ (mov r8, r8)
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	b004      	add	sp, #16
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	46c0      	nop			@ (mov r8, r8)
 8003e84:	40020000 	.word	0x40020000

08003e88 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	001a      	movs	r2, r3
 8003e96:	23ff      	movs	r3, #255	@ 0xff
 8003e98:	4013      	ands	r3, r2
 8003e9a:	3b08      	subs	r3, #8
 8003e9c:	2114      	movs	r1, #20
 8003e9e:	0018      	movs	r0, r3
 8003ea0:	f7fc f932 	bl	8000108 <__udivsi3>
 8003ea4:	0003      	movs	r3, r0
 8003ea6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eac:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8003eae:	4a0a      	ldr	r2, [pc, #40]	@ (8003ed8 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8003eb0:	4694      	mov	ip, r2
 8003eb2:	4463      	add	r3, ip
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	001a      	movs	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	645a      	str	r2, [r3, #68]	@ 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a07      	ldr	r2, [pc, #28]	@ (8003edc <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003ec0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	221c      	movs	r2, #28
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	2201      	movs	r2, #1
 8003eca:	409a      	lsls	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8003ed0:	46c0      	nop			@ (mov r8, r8)
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	b004      	add	sp, #16
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	10008200 	.word	0x10008200
 8003edc:	40020880 	.word	0x40020880

08003ee0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	22ff      	movs	r2, #255	@ 0xff
 8003eee:	4013      	ands	r3, r2
 8003ef0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	4a0a      	ldr	r2, [pc, #40]	@ (8003f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003ef6:	4694      	mov	ip, r2
 8003ef8:	4463      	add	r3, ip
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	001a      	movs	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	651a      	str	r2, [r3, #80]	@ 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a07      	ldr	r2, [pc, #28]	@ (8003f24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003f06:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	2203      	movs	r2, #3
 8003f0e:	4013      	ands	r3, r2
 8003f10:	2201      	movs	r2, #1
 8003f12:	409a      	lsls	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8003f18:	46c0      	nop			@ (mov r8, r8)
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	b004      	add	sp, #16
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	1000823f 	.word	0x1000823f
 8003f24:	40020940 	.word	0x40020940

08003f28 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b086      	sub	sp, #24
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8003f32:	2300      	movs	r3, #0
 8003f34:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003f36:	e153      	b.n	80041e0 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2101      	movs	r1, #1
 8003f3e:	693a      	ldr	r2, [r7, #16]
 8003f40:	4091      	lsls	r1, r2
 8003f42:	000a      	movs	r2, r1
 8003f44:	4013      	ands	r3, r2
 8003f46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d100      	bne.n	8003f50 <HAL_GPIO_Init+0x28>
 8003f4e:	e144      	b.n	80041da <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d003      	beq.n	8003f60 <HAL_GPIO_Init+0x38>
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	2b12      	cmp	r3, #18
 8003f5e:	d125      	bne.n	8003fac <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	08da      	lsrs	r2, r3, #3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	3208      	adds	r2, #8
 8003f68:	0092      	lsls	r2, r2, #2
 8003f6a:	58d3      	ldr	r3, [r2, r3]
 8003f6c:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	2207      	movs	r2, #7
 8003f72:	4013      	ands	r3, r2
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	220f      	movs	r2, #15
 8003f78:	409a      	lsls	r2, r3
 8003f7a:	0013      	movs	r3, r2
 8003f7c:	43da      	mvns	r2, r3
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	4013      	ands	r3, r2
 8003f82:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	691b      	ldr	r3, [r3, #16]
 8003f88:	220f      	movs	r2, #15
 8003f8a:	401a      	ands	r2, r3
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	2107      	movs	r1, #7
 8003f90:	400b      	ands	r3, r1
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	409a      	lsls	r2, r3
 8003f96:	0013      	movs	r3, r2
 8003f98:	697a      	ldr	r2, [r7, #20]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	08da      	lsrs	r2, r3, #3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	3208      	adds	r2, #8
 8003fa6:	0092      	lsls	r2, r2, #2
 8003fa8:	6979      	ldr	r1, [r7, #20]
 8003faa:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	005b      	lsls	r3, r3, #1
 8003fb6:	2203      	movs	r2, #3
 8003fb8:	409a      	lsls	r2, r3
 8003fba:	0013      	movs	r3, r2
 8003fbc:	43da      	mvns	r2, r3
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	2203      	movs	r2, #3
 8003fca:	401a      	ands	r2, r3
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	005b      	lsls	r3, r3, #1
 8003fd0:	409a      	lsls	r2, r3
 8003fd2:	0013      	movs	r3, r2
 8003fd4:	697a      	ldr	r2, [r7, #20]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	697a      	ldr	r2, [r7, #20]
 8003fde:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d00b      	beq.n	8004000 <HAL_GPIO_Init+0xd8>
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d007      	beq.n	8004000 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003ff4:	2b11      	cmp	r3, #17
 8003ff6:	d003      	beq.n	8004000 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	2b12      	cmp	r3, #18
 8003ffe:	d130      	bne.n	8004062 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	005b      	lsls	r3, r3, #1
 800400a:	2203      	movs	r2, #3
 800400c:	409a      	lsls	r2, r3
 800400e:	0013      	movs	r3, r2
 8004010:	43da      	mvns	r2, r3
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	4013      	ands	r3, r2
 8004016:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	68da      	ldr	r2, [r3, #12]
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	005b      	lsls	r3, r3, #1
 8004020:	409a      	lsls	r2, r3
 8004022:	0013      	movs	r3, r2
 8004024:	697a      	ldr	r2, [r7, #20]
 8004026:	4313      	orrs	r3, r2
 8004028:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	697a      	ldr	r2, [r7, #20]
 800402e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004036:	2201      	movs	r2, #1
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	409a      	lsls	r2, r3
 800403c:	0013      	movs	r3, r2
 800403e:	43da      	mvns	r2, r3
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	4013      	ands	r3, r2
 8004044:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	091b      	lsrs	r3, r3, #4
 800404c:	2201      	movs	r2, #1
 800404e:	401a      	ands	r2, r3
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	409a      	lsls	r2, r3
 8004054:	0013      	movs	r3, r2
 8004056:	697a      	ldr	r2, [r7, #20]
 8004058:	4313      	orrs	r3, r2
 800405a:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	697a      	ldr	r2, [r7, #20]
 8004060:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	2b03      	cmp	r3, #3
 8004068:	d017      	beq.n	800409a <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	005b      	lsls	r3, r3, #1
 8004074:	2203      	movs	r2, #3
 8004076:	409a      	lsls	r2, r3
 8004078:	0013      	movs	r3, r2
 800407a:	43da      	mvns	r2, r3
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	4013      	ands	r3, r2
 8004080:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	689a      	ldr	r2, [r3, #8]
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	005b      	lsls	r3, r3, #1
 800408a:	409a      	lsls	r2, r3
 800408c:	0013      	movs	r3, r2
 800408e:	697a      	ldr	r2, [r7, #20]
 8004090:	4313      	orrs	r3, r2
 8004092:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	697a      	ldr	r2, [r7, #20]
 8004098:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	685a      	ldr	r2, [r3, #4]
 800409e:	2380      	movs	r3, #128	@ 0x80
 80040a0:	055b      	lsls	r3, r3, #21
 80040a2:	4013      	ands	r3, r2
 80040a4:	d100      	bne.n	80040a8 <HAL_GPIO_Init+0x180>
 80040a6:	e098      	b.n	80041da <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80040a8:	4a53      	ldr	r2, [pc, #332]	@ (80041f8 <HAL_GPIO_Init+0x2d0>)
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	089b      	lsrs	r3, r3, #2
 80040ae:	3318      	adds	r3, #24
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	589b      	ldr	r3, [r3, r2]
 80040b4:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	2203      	movs	r2, #3
 80040ba:	4013      	ands	r3, r2
 80040bc:	00db      	lsls	r3, r3, #3
 80040be:	220f      	movs	r2, #15
 80040c0:	409a      	lsls	r2, r3
 80040c2:	0013      	movs	r3, r2
 80040c4:	43da      	mvns	r2, r3
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	4013      	ands	r3, r2
 80040ca:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	23a0      	movs	r3, #160	@ 0xa0
 80040d0:	05db      	lsls	r3, r3, #23
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d019      	beq.n	800410a <HAL_GPIO_Init+0x1e2>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a48      	ldr	r2, [pc, #288]	@ (80041fc <HAL_GPIO_Init+0x2d4>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d013      	beq.n	8004106 <HAL_GPIO_Init+0x1de>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a47      	ldr	r2, [pc, #284]	@ (8004200 <HAL_GPIO_Init+0x2d8>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d00d      	beq.n	8004102 <HAL_GPIO_Init+0x1da>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a46      	ldr	r2, [pc, #280]	@ (8004204 <HAL_GPIO_Init+0x2dc>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d007      	beq.n	80040fe <HAL_GPIO_Init+0x1d6>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a45      	ldr	r2, [pc, #276]	@ (8004208 <HAL_GPIO_Init+0x2e0>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d101      	bne.n	80040fa <HAL_GPIO_Init+0x1d2>
 80040f6:	2305      	movs	r3, #5
 80040f8:	e008      	b.n	800410c <HAL_GPIO_Init+0x1e4>
 80040fa:	2306      	movs	r3, #6
 80040fc:	e006      	b.n	800410c <HAL_GPIO_Init+0x1e4>
 80040fe:	2303      	movs	r3, #3
 8004100:	e004      	b.n	800410c <HAL_GPIO_Init+0x1e4>
 8004102:	2302      	movs	r3, #2
 8004104:	e002      	b.n	800410c <HAL_GPIO_Init+0x1e4>
 8004106:	2301      	movs	r3, #1
 8004108:	e000      	b.n	800410c <HAL_GPIO_Init+0x1e4>
 800410a:	2300      	movs	r3, #0
 800410c:	693a      	ldr	r2, [r7, #16]
 800410e:	2103      	movs	r1, #3
 8004110:	400a      	ands	r2, r1
 8004112:	00d2      	lsls	r2, r2, #3
 8004114:	4093      	lsls	r3, r2
 8004116:	697a      	ldr	r2, [r7, #20]
 8004118:	4313      	orrs	r3, r2
 800411a:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 800411c:	4936      	ldr	r1, [pc, #216]	@ (80041f8 <HAL_GPIO_Init+0x2d0>)
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	089b      	lsrs	r3, r3, #2
 8004122:	3318      	adds	r3, #24
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 800412a:	4a33      	ldr	r2, [pc, #204]	@ (80041f8 <HAL_GPIO_Init+0x2d0>)
 800412c:	2380      	movs	r3, #128	@ 0x80
 800412e:	58d3      	ldr	r3, [r2, r3]
 8004130:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	43da      	mvns	r2, r3
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	4013      	ands	r3, r2
 800413a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	685a      	ldr	r2, [r3, #4]
 8004140:	2380      	movs	r3, #128	@ 0x80
 8004142:	025b      	lsls	r3, r3, #9
 8004144:	4013      	ands	r3, r2
 8004146:	d003      	beq.n	8004150 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8004148:	697a      	ldr	r2, [r7, #20]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	4313      	orrs	r3, r2
 800414e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8004150:	4929      	ldr	r1, [pc, #164]	@ (80041f8 <HAL_GPIO_Init+0x2d0>)
 8004152:	2280      	movs	r2, #128	@ 0x80
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8004158:	4a27      	ldr	r2, [pc, #156]	@ (80041f8 <HAL_GPIO_Init+0x2d0>)
 800415a:	2384      	movs	r3, #132	@ 0x84
 800415c:	58d3      	ldr	r3, [r2, r3]
 800415e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	43da      	mvns	r2, r3
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	4013      	ands	r3, r2
 8004168:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	685a      	ldr	r2, [r3, #4]
 800416e:	2380      	movs	r3, #128	@ 0x80
 8004170:	029b      	lsls	r3, r3, #10
 8004172:	4013      	ands	r3, r2
 8004174:	d003      	beq.n	800417e <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 8004176:	697a      	ldr	r2, [r7, #20]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	4313      	orrs	r3, r2
 800417c:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800417e:	491e      	ldr	r1, [pc, #120]	@ (80041f8 <HAL_GPIO_Init+0x2d0>)
 8004180:	2284      	movs	r2, #132	@ 0x84
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8004186:	4b1c      	ldr	r3, [pc, #112]	@ (80041f8 <HAL_GPIO_Init+0x2d0>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	43da      	mvns	r2, r3
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	4013      	ands	r3, r2
 8004194:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	685a      	ldr	r2, [r3, #4]
 800419a:	2380      	movs	r3, #128	@ 0x80
 800419c:	035b      	lsls	r3, r3, #13
 800419e:	4013      	ands	r3, r2
 80041a0:	d003      	beq.n	80041aa <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80041aa:	4b13      	ldr	r3, [pc, #76]	@ (80041f8 <HAL_GPIO_Init+0x2d0>)
 80041ac:	697a      	ldr	r2, [r7, #20]
 80041ae:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 80041b0:	4b11      	ldr	r3, [pc, #68]	@ (80041f8 <HAL_GPIO_Init+0x2d0>)
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	43da      	mvns	r2, r3
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	4013      	ands	r3, r2
 80041be:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	685a      	ldr	r2, [r3, #4]
 80041c4:	2380      	movs	r3, #128	@ 0x80
 80041c6:	039b      	lsls	r3, r3, #14
 80041c8:	4013      	ands	r3, r2
 80041ca:	d003      	beq.n	80041d4 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 80041cc:	697a      	ldr	r2, [r7, #20]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80041d4:	4b08      	ldr	r3, [pc, #32]	@ (80041f8 <HAL_GPIO_Init+0x2d0>)
 80041d6:	697a      	ldr	r2, [r7, #20]
 80041d8:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	3301      	adds	r3, #1
 80041de:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	40da      	lsrs	r2, r3
 80041e8:	1e13      	subs	r3, r2, #0
 80041ea:	d000      	beq.n	80041ee <HAL_GPIO_Init+0x2c6>
 80041ec:	e6a4      	b.n	8003f38 <HAL_GPIO_Init+0x10>
  }
}
 80041ee:	46c0      	nop			@ (mov r8, r8)
 80041f0:	46c0      	nop			@ (mov r8, r8)
 80041f2:	46bd      	mov	sp, r7
 80041f4:	b006      	add	sp, #24
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	40021800 	.word	0x40021800
 80041fc:	50000400 	.word	0x50000400
 8004200:	50000800 	.word	0x50000800
 8004204:	50000c00 	.word	0x50000c00
 8004208:	50001400 	.word	0x50001400

0800420c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b086      	sub	sp, #24
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8004216:	2300      	movs	r3, #0
 8004218:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 800421a:	e0ba      	b.n	8004392 <HAL_GPIO_DeInit+0x186>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 800421c:	2201      	movs	r2, #1
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	409a      	lsls	r2, r3
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	4013      	ands	r3, r2
 8004226:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0U)
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d100      	bne.n	8004230 <HAL_GPIO_DeInit+0x24>
 800422e:	e0ad      	b.n	800438c <HAL_GPIO_DeInit+0x180>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = EXTI->EXTICR[position >> 2U];
 8004230:	4a5d      	ldr	r2, [pc, #372]	@ (80043a8 <HAL_GPIO_DeInit+0x19c>)
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	089b      	lsrs	r3, r3, #2
 8004236:	3318      	adds	r3, #24
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	589b      	ldr	r3, [r3, r2]
 800423c:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	2203      	movs	r2, #3
 8004242:	4013      	ands	r3, r2
 8004244:	00db      	lsls	r3, r3, #3
 8004246:	220f      	movs	r2, #15
 8004248:	409a      	lsls	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	4013      	ands	r3, r2
 800424e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos)))
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	23a0      	movs	r3, #160	@ 0xa0
 8004254:	05db      	lsls	r3, r3, #23
 8004256:	429a      	cmp	r2, r3
 8004258:	d019      	beq.n	800428e <HAL_GPIO_DeInit+0x82>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a53      	ldr	r2, [pc, #332]	@ (80043ac <HAL_GPIO_DeInit+0x1a0>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d013      	beq.n	800428a <HAL_GPIO_DeInit+0x7e>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a52      	ldr	r2, [pc, #328]	@ (80043b0 <HAL_GPIO_DeInit+0x1a4>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d00d      	beq.n	8004286 <HAL_GPIO_DeInit+0x7a>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a51      	ldr	r2, [pc, #324]	@ (80043b4 <HAL_GPIO_DeInit+0x1a8>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d007      	beq.n	8004282 <HAL_GPIO_DeInit+0x76>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a50      	ldr	r2, [pc, #320]	@ (80043b8 <HAL_GPIO_DeInit+0x1ac>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d101      	bne.n	800427e <HAL_GPIO_DeInit+0x72>
 800427a:	2305      	movs	r3, #5
 800427c:	e008      	b.n	8004290 <HAL_GPIO_DeInit+0x84>
 800427e:	2306      	movs	r3, #6
 8004280:	e006      	b.n	8004290 <HAL_GPIO_DeInit+0x84>
 8004282:	2303      	movs	r3, #3
 8004284:	e004      	b.n	8004290 <HAL_GPIO_DeInit+0x84>
 8004286:	2302      	movs	r3, #2
 8004288:	e002      	b.n	8004290 <HAL_GPIO_DeInit+0x84>
 800428a:	2301      	movs	r3, #1
 800428c:	e000      	b.n	8004290 <HAL_GPIO_DeInit+0x84>
 800428e:	2300      	movs	r3, #0
 8004290:	697a      	ldr	r2, [r7, #20]
 8004292:	2103      	movs	r1, #3
 8004294:	400a      	ands	r2, r1
 8004296:	00d2      	lsls	r2, r2, #3
 8004298:	4093      	lsls	r3, r2
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	429a      	cmp	r2, r3
 800429e:	d136      	bne.n	800430e <HAL_GPIO_DeInit+0x102>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80042a0:	4a41      	ldr	r2, [pc, #260]	@ (80043a8 <HAL_GPIO_DeInit+0x19c>)
 80042a2:	2380      	movs	r3, #128	@ 0x80
 80042a4:	58d3      	ldr	r3, [r2, r3]
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	43d2      	mvns	r2, r2
 80042aa:	493f      	ldr	r1, [pc, #252]	@ (80043a8 <HAL_GPIO_DeInit+0x19c>)
 80042ac:	4013      	ands	r3, r2
 80042ae:	2280      	movs	r2, #128	@ 0x80
 80042b0:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 80042b2:	4a3d      	ldr	r2, [pc, #244]	@ (80043a8 <HAL_GPIO_DeInit+0x19c>)
 80042b4:	2384      	movs	r3, #132	@ 0x84
 80042b6:	58d3      	ldr	r3, [r2, r3]
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	43d2      	mvns	r2, r2
 80042bc:	493a      	ldr	r1, [pc, #232]	@ (80043a8 <HAL_GPIO_DeInit+0x19c>)
 80042be:	4013      	ands	r3, r2
 80042c0:	2284      	movs	r2, #132	@ 0x84
 80042c2:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80042c4:	4b38      	ldr	r3, [pc, #224]	@ (80043a8 <HAL_GPIO_DeInit+0x19c>)
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	43d9      	mvns	r1, r3
 80042cc:	4b36      	ldr	r3, [pc, #216]	@ (80043a8 <HAL_GPIO_DeInit+0x19c>)
 80042ce:	400a      	ands	r2, r1
 80042d0:	601a      	str	r2, [r3, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80042d2:	4b35      	ldr	r3, [pc, #212]	@ (80043a8 <HAL_GPIO_DeInit+0x19c>)
 80042d4:	685a      	ldr	r2, [r3, #4]
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	43d9      	mvns	r1, r3
 80042da:	4b33      	ldr	r3, [pc, #204]	@ (80043a8 <HAL_GPIO_DeInit+0x19c>)
 80042dc:	400a      	ands	r2, r1
 80042de:	605a      	str	r2, [r3, #4]

        tmp = (0x0FUL) << (8U * (position & 0x03U));
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	2203      	movs	r2, #3
 80042e4:	4013      	ands	r3, r2
 80042e6:	00db      	lsls	r3, r3, #3
 80042e8:	220f      	movs	r2, #15
 80042ea:	409a      	lsls	r2, r3
 80042ec:	0013      	movs	r3, r2
 80042ee:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2U] &= ~tmp;
 80042f0:	4a2d      	ldr	r2, [pc, #180]	@ (80043a8 <HAL_GPIO_DeInit+0x19c>)
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	089b      	lsrs	r3, r3, #2
 80042f6:	3318      	adds	r3, #24
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	589a      	ldr	r2, [r3, r2]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	43d9      	mvns	r1, r3
 8004300:	4829      	ldr	r0, [pc, #164]	@ (80043a8 <HAL_GPIO_DeInit+0x19c>)
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	089b      	lsrs	r3, r3, #2
 8004306:	400a      	ands	r2, r1
 8004308:	3318      	adds	r3, #24
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	005b      	lsls	r3, r3, #1
 8004316:	2103      	movs	r1, #3
 8004318:	4099      	lsls	r1, r3
 800431a:	000b      	movs	r3, r1
 800431c:	431a      	orrs	r2, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	08da      	lsrs	r2, r3, #3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	3208      	adds	r2, #8
 800432a:	0092      	lsls	r2, r2, #2
 800432c:	58d3      	ldr	r3, [r2, r3]
 800432e:	697a      	ldr	r2, [r7, #20]
 8004330:	2107      	movs	r1, #7
 8004332:	400a      	ands	r2, r1
 8004334:	0092      	lsls	r2, r2, #2
 8004336:	210f      	movs	r1, #15
 8004338:	4091      	lsls	r1, r2
 800433a:	000a      	movs	r2, r1
 800433c:	43d1      	mvns	r1, r2
 800433e:	697a      	ldr	r2, [r7, #20]
 8004340:	08d2      	lsrs	r2, r2, #3
 8004342:	4019      	ands	r1, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	3208      	adds	r2, #8
 8004348:	0092      	lsls	r2, r2, #2
 800434a:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	697a      	ldr	r2, [r7, #20]
 8004352:	0052      	lsls	r2, r2, #1
 8004354:	2103      	movs	r1, #3
 8004356:	4091      	lsls	r1, r2
 8004358:	000a      	movs	r2, r1
 800435a:	43d2      	mvns	r2, r2
 800435c:	401a      	ands	r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	2101      	movs	r1, #1
 8004368:	697a      	ldr	r2, [r7, #20]
 800436a:	4091      	lsls	r1, r2
 800436c:	000a      	movs	r2, r1
 800436e:	43d2      	mvns	r2, r2
 8004370:	401a      	ands	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	697a      	ldr	r2, [r7, #20]
 800437c:	0052      	lsls	r2, r2, #1
 800437e:	2103      	movs	r1, #3
 8004380:	4091      	lsls	r1, r2
 8004382:	000a      	movs	r2, r1
 8004384:	43d2      	mvns	r2, r2
 8004386:	401a      	ands	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	60da      	str	r2, [r3, #12]
    }

    position++;
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	3301      	adds	r3, #1
 8004390:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 8004392:	683a      	ldr	r2, [r7, #0]
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	40da      	lsrs	r2, r3
 8004398:	1e13      	subs	r3, r2, #0
 800439a:	d000      	beq.n	800439e <HAL_GPIO_DeInit+0x192>
 800439c:	e73e      	b.n	800421c <HAL_GPIO_DeInit+0x10>
  }
}
 800439e:	46c0      	nop			@ (mov r8, r8)
 80043a0:	46c0      	nop			@ (mov r8, r8)
 80043a2:	46bd      	mov	sp, r7
 80043a4:	b006      	add	sp, #24
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	40021800 	.word	0x40021800
 80043ac:	50000400 	.word	0x50000400
 80043b0:	50000800 	.word	0x50000800
 80043b4:	50000c00 	.word	0x50000c00
 80043b8:	50001400 	.word	0x50001400

080043bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	0008      	movs	r0, r1
 80043c6:	0011      	movs	r1, r2
 80043c8:	1cbb      	adds	r3, r7, #2
 80043ca:	1c02      	adds	r2, r0, #0
 80043cc:	801a      	strh	r2, [r3, #0]
 80043ce:	1c7b      	adds	r3, r7, #1
 80043d0:	1c0a      	adds	r2, r1, #0
 80043d2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80043d4:	1c7b      	adds	r3, r7, #1
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d004      	beq.n	80043e6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80043dc:	1cbb      	adds	r3, r7, #2
 80043de:	881a      	ldrh	r2, [r3, #0]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80043e4:	e003      	b.n	80043ee <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80043e6:	1cbb      	adds	r3, r7, #2
 80043e8:	881a      	ldrh	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80043ee:	46c0      	nop			@ (mov r8, r8)
 80043f0:	46bd      	mov	sp, r7
 80043f2:	b002      	add	sp, #8
 80043f4:	bd80      	pop	{r7, pc}
	...

080043f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d101      	bne.n	800440a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e08f      	b.n	800452a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2241      	movs	r2, #65	@ 0x41
 800440e:	5c9b      	ldrb	r3, [r3, r2]
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b00      	cmp	r3, #0
 8004414:	d107      	bne.n	8004426 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2240      	movs	r2, #64	@ 0x40
 800441a:	2100      	movs	r1, #0
 800441c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	0018      	movs	r0, r3
 8004422:	f7fe fbad 	bl	8002b80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2241      	movs	r2, #65	@ 0x41
 800442a:	2124      	movs	r1, #36	@ 0x24
 800442c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2101      	movs	r1, #1
 800443a:	438a      	bics	r2, r1
 800443c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685a      	ldr	r2, [r3, #4]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	493b      	ldr	r1, [pc, #236]	@ (8004534 <HAL_I2C_Init+0x13c>)
 8004448:	400a      	ands	r2, r1
 800444a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	689a      	ldr	r2, [r3, #8]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4938      	ldr	r1, [pc, #224]	@ (8004538 <HAL_I2C_Init+0x140>)
 8004458:	400a      	ands	r2, r1
 800445a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	2b01      	cmp	r3, #1
 8004462:	d108      	bne.n	8004476 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	689a      	ldr	r2, [r3, #8]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2180      	movs	r1, #128	@ 0x80
 800446e:	0209      	lsls	r1, r1, #8
 8004470:	430a      	orrs	r2, r1
 8004472:	609a      	str	r2, [r3, #8]
 8004474:	e007      	b.n	8004486 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	689a      	ldr	r2, [r3, #8]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2184      	movs	r1, #132	@ 0x84
 8004480:	0209      	lsls	r1, r1, #8
 8004482:	430a      	orrs	r2, r1
 8004484:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	2b02      	cmp	r3, #2
 800448c:	d109      	bne.n	80044a2 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	685a      	ldr	r2, [r3, #4]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2180      	movs	r1, #128	@ 0x80
 800449a:	0109      	lsls	r1, r1, #4
 800449c:	430a      	orrs	r2, r1
 800449e:	605a      	str	r2, [r3, #4]
 80044a0:	e007      	b.n	80044b2 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	685a      	ldr	r2, [r3, #4]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4923      	ldr	r1, [pc, #140]	@ (800453c <HAL_I2C_Init+0x144>)
 80044ae:	400a      	ands	r2, r1
 80044b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	685a      	ldr	r2, [r3, #4]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4920      	ldr	r1, [pc, #128]	@ (8004540 <HAL_I2C_Init+0x148>)
 80044be:	430a      	orrs	r2, r1
 80044c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68da      	ldr	r2, [r3, #12]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	491a      	ldr	r1, [pc, #104]	@ (8004538 <HAL_I2C_Init+0x140>)
 80044ce:	400a      	ands	r2, r1
 80044d0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	691a      	ldr	r2, [r3, #16]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	695b      	ldr	r3, [r3, #20]
 80044da:	431a      	orrs	r2, r3
 80044dc:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	699b      	ldr	r3, [r3, #24]
 80044e2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	430a      	orrs	r2, r1
 80044ea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	69d9      	ldr	r1, [r3, #28]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a1a      	ldr	r2, [r3, #32]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	430a      	orrs	r2, r1
 80044fa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2101      	movs	r1, #1
 8004508:	430a      	orrs	r2, r1
 800450a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2241      	movs	r2, #65	@ 0x41
 8004516:	2120      	movs	r1, #32
 8004518:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2242      	movs	r2, #66	@ 0x42
 8004524:	2100      	movs	r1, #0
 8004526:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	0018      	movs	r0, r3
 800452c:	46bd      	mov	sp, r7
 800452e:	b002      	add	sp, #8
 8004530:	bd80      	pop	{r7, pc}
 8004532:	46c0      	nop			@ (mov r8, r8)
 8004534:	f0ffffff 	.word	0xf0ffffff
 8004538:	ffff7fff 	.word	0xffff7fff
 800453c:	fffff7ff 	.word	0xfffff7ff
 8004540:	02008000 	.word	0x02008000

08004544 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004560:	2b00      	cmp	r3, #0
 8004562:	d005      	beq.n	8004570 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004568:	68ba      	ldr	r2, [r7, #8]
 800456a:	68f9      	ldr	r1, [r7, #12]
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	4798      	blx	r3
  }
}
 8004570:	46c0      	nop			@ (mov r8, r8)
 8004572:	46bd      	mov	sp, r7
 8004574:	b004      	add	sp, #16
 8004576:	bd80      	pop	{r7, pc}

08004578 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b086      	sub	sp, #24
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004590:	697a      	ldr	r2, [r7, #20]
 8004592:	2380      	movs	r3, #128	@ 0x80
 8004594:	005b      	lsls	r3, r3, #1
 8004596:	4013      	ands	r3, r2
 8004598:	d00e      	beq.n	80045b8 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	2280      	movs	r2, #128	@ 0x80
 800459e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80045a0:	d00a      	beq.n	80045b8 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045a6:	2201      	movs	r2, #1
 80045a8:	431a      	orrs	r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2280      	movs	r2, #128	@ 0x80
 80045b4:	0052      	lsls	r2, r2, #1
 80045b6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80045b8:	697a      	ldr	r2, [r7, #20]
 80045ba:	2380      	movs	r3, #128	@ 0x80
 80045bc:	00db      	lsls	r3, r3, #3
 80045be:	4013      	ands	r3, r2
 80045c0:	d00e      	beq.n	80045e0 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	2280      	movs	r2, #128	@ 0x80
 80045c6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80045c8:	d00a      	beq.n	80045e0 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045ce:	2208      	movs	r2, #8
 80045d0:	431a      	orrs	r2, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2280      	movs	r2, #128	@ 0x80
 80045dc:	00d2      	lsls	r2, r2, #3
 80045de:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	2380      	movs	r3, #128	@ 0x80
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	4013      	ands	r3, r2
 80045e8:	d00e      	beq.n	8004608 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	2280      	movs	r2, #128	@ 0x80
 80045ee:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80045f0:	d00a      	beq.n	8004608 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045f6:	2202      	movs	r2, #2
 80045f8:	431a      	orrs	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2280      	movs	r2, #128	@ 0x80
 8004604:	0092      	lsls	r2, r2, #2
 8004606:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800460c:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	220b      	movs	r2, #11
 8004612:	4013      	ands	r3, r2
 8004614:	d005      	beq.n	8004622 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	0011      	movs	r1, r2
 800461c:	0018      	movs	r0, r3
 800461e:	f000 fc1d 	bl	8004e5c <I2C_ITError>
  }
}
 8004622:	46c0      	nop			@ (mov r8, r8)
 8004624:	46bd      	mov	sp, r7
 8004626:	b006      	add	sp, #24
 8004628:	bd80      	pop	{r7, pc}

0800462a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800462a:	b580      	push	{r7, lr}
 800462c:	b082      	sub	sp, #8
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004632:	46c0      	nop			@ (mov r8, r8)
 8004634:	46bd      	mov	sp, r7
 8004636:	b002      	add	sp, #8
 8004638:	bd80      	pop	{r7, pc}

0800463a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800463a:	b580      	push	{r7, lr}
 800463c:	b082      	sub	sp, #8
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004642:	46c0      	nop			@ (mov r8, r8)
 8004644:	46bd      	mov	sp, r7
 8004646:	b002      	add	sp, #8
 8004648:	bd80      	pop	{r7, pc}

0800464a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800464a:	b580      	push	{r7, lr}
 800464c:	b082      	sub	sp, #8
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
 8004652:	0008      	movs	r0, r1
 8004654:	0011      	movs	r1, r2
 8004656:	1cfb      	adds	r3, r7, #3
 8004658:	1c02      	adds	r2, r0, #0
 800465a:	701a      	strb	r2, [r3, #0]
 800465c:	003b      	movs	r3, r7
 800465e:	1c0a      	adds	r2, r1, #0
 8004660:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004662:	46c0      	nop			@ (mov r8, r8)
 8004664:	46bd      	mov	sp, r7
 8004666:	b002      	add	sp, #8
 8004668:	bd80      	pop	{r7, pc}

0800466a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800466a:	b580      	push	{r7, lr}
 800466c:	b082      	sub	sp, #8
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004672:	46c0      	nop			@ (mov r8, r8)
 8004674:	46bd      	mov	sp, r7
 8004676:	b002      	add	sp, #8
 8004678:	bd80      	pop	{r7, pc}

0800467a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800467a:	b580      	push	{r7, lr}
 800467c:	b082      	sub	sp, #8
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004682:	46c0      	nop			@ (mov r8, r8)
 8004684:	46bd      	mov	sp, r7
 8004686:	b002      	add	sp, #8
 8004688:	bd80      	pop	{r7, pc}
	...

0800468c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b086      	sub	sp, #24
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800469c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2240      	movs	r2, #64	@ 0x40
 80046a6:	5c9b      	ldrb	r3, [r3, r2]
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d101      	bne.n	80046b0 <I2C_Slave_ISR_IT+0x24>
 80046ac:	2302      	movs	r3, #2
 80046ae:	e0e7      	b.n	8004880 <I2C_Slave_ISR_IT+0x1f4>
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2240      	movs	r2, #64	@ 0x40
 80046b4:	2101      	movs	r1, #1
 80046b6:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	2220      	movs	r2, #32
 80046bc:	4013      	ands	r3, r2
 80046be:	d00a      	beq.n	80046d6 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2220      	movs	r2, #32
 80046c4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80046c6:	d006      	beq.n	80046d6 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80046c8:	693a      	ldr	r2, [r7, #16]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	0011      	movs	r1, r2
 80046ce:	0018      	movs	r0, r3
 80046d0:	f000 f9e4 	bl	8004a9c <I2C_ITSlaveCplt>
 80046d4:	e0cf      	b.n	8004876 <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	2210      	movs	r2, #16
 80046da:	4013      	ands	r3, r2
 80046dc:	d052      	beq.n	8004784 <I2C_Slave_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2210      	movs	r2, #16
 80046e2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80046e4:	d04e      	beq.n	8004784 <I2C_Slave_ISR_IT+0xf8>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d12d      	bne.n	800474c <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2241      	movs	r2, #65	@ 0x41
 80046f4:	5c9b      	ldrb	r3, [r3, r2]
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	2b28      	cmp	r3, #40	@ 0x28
 80046fa:	d10b      	bne.n	8004714 <I2C_Slave_ISR_IT+0x88>
 80046fc:	697a      	ldr	r2, [r7, #20]
 80046fe:	2380      	movs	r3, #128	@ 0x80
 8004700:	049b      	lsls	r3, r3, #18
 8004702:	429a      	cmp	r2, r3
 8004704:	d106      	bne.n	8004714 <I2C_Slave_ISR_IT+0x88>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	0011      	movs	r1, r2
 800470c:	0018      	movs	r0, r3
 800470e:	f000 fb4d 	bl	8004dac <I2C_ITListenCplt>
 8004712:	e036      	b.n	8004782 <I2C_Slave_ISR_IT+0xf6>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2241      	movs	r2, #65	@ 0x41
 8004718:	5c9b      	ldrb	r3, [r3, r2]
 800471a:	b2db      	uxtb	r3, r3
 800471c:	2b29      	cmp	r3, #41	@ 0x29
 800471e:	d110      	bne.n	8004742 <I2C_Slave_ISR_IT+0xb6>
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	4a59      	ldr	r2, [pc, #356]	@ (8004888 <I2C_Slave_ISR_IT+0x1fc>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d00c      	beq.n	8004742 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2210      	movs	r2, #16
 800472e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	0018      	movs	r0, r3
 8004734:	f000 fcbd 	bl	80050b2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	0018      	movs	r0, r3
 800473c:	f000 f94a 	bl	80049d4 <I2C_ITSlaveSeqCplt>
 8004740:	e01f      	b.n	8004782 <I2C_Slave_ISR_IT+0xf6>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2210      	movs	r2, #16
 8004748:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800474a:	e091      	b.n	8004870 <I2C_Slave_ISR_IT+0x1e4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2210      	movs	r2, #16
 8004752:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004758:	2204      	movs	r2, #4
 800475a:	431a      	orrs	r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d005      	beq.n	8004772 <I2C_Slave_ISR_IT+0xe6>
 8004766:	697a      	ldr	r2, [r7, #20]
 8004768:	2380      	movs	r3, #128	@ 0x80
 800476a:	045b      	lsls	r3, r3, #17
 800476c:	429a      	cmp	r2, r3
 800476e:	d000      	beq.n	8004772 <I2C_Slave_ISR_IT+0xe6>
 8004770:	e07e      	b.n	8004870 <I2C_Slave_ISR_IT+0x1e4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	0011      	movs	r1, r2
 800477a:	0018      	movs	r0, r3
 800477c:	f000 fb6e 	bl	8004e5c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004780:	e076      	b.n	8004870 <I2C_Slave_ISR_IT+0x1e4>
 8004782:	e075      	b.n	8004870 <I2C_Slave_ISR_IT+0x1e4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	2204      	movs	r2, #4
 8004788:	4013      	ands	r3, r2
 800478a:	d02f      	beq.n	80047ec <I2C_Slave_ISR_IT+0x160>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2204      	movs	r2, #4
 8004790:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004792:	d02b      	beq.n	80047ec <I2C_Slave_ISR_IT+0x160>
  {
    if (hi2c->XferCount > 0U)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004798:	b29b      	uxth	r3, r3
 800479a:	2b00      	cmp	r3, #0
 800479c:	d018      	beq.n	80047d0 <I2C_Slave_ISR_IT+0x144>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a8:	b2d2      	uxtb	r2, r2
 80047aa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b0:	1c5a      	adds	r2, r3, #1
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047ba:	3b01      	subs	r3, #1
 80047bc:	b29a      	uxth	r2, r3
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	3b01      	subs	r3, #1
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d14c      	bne.n	8004874 <I2C_Slave_ISR_IT+0x1e8>
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	4a2a      	ldr	r2, [pc, #168]	@ (8004888 <I2C_Slave_ISR_IT+0x1fc>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d048      	beq.n	8004874 <I2C_Slave_ISR_IT+0x1e8>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	0018      	movs	r0, r3
 80047e6:	f000 f8f5 	bl	80049d4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80047ea:	e043      	b.n	8004874 <I2C_Slave_ISR_IT+0x1e8>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	2208      	movs	r2, #8
 80047f0:	4013      	ands	r3, r2
 80047f2:	d00a      	beq.n	800480a <I2C_Slave_ISR_IT+0x17e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2208      	movs	r2, #8
 80047f8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80047fa:	d006      	beq.n	800480a <I2C_Slave_ISR_IT+0x17e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80047fc:	693a      	ldr	r2, [r7, #16]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	0011      	movs	r1, r2
 8004802:	0018      	movs	r0, r3
 8004804:	f000 f842 	bl	800488c <I2C_ITAddrCplt>
 8004808:	e035      	b.n	8004876 <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	2202      	movs	r2, #2
 800480e:	4013      	ands	r3, r2
 8004810:	d031      	beq.n	8004876 <I2C_Slave_ISR_IT+0x1ea>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2202      	movs	r2, #2
 8004816:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004818:	d02d      	beq.n	8004876 <I2C_Slave_ISR_IT+0x1ea>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800481e:	b29b      	uxth	r3, r3
 8004820:	2b00      	cmp	r3, #0
 8004822:	d018      	beq.n	8004856 <I2C_Slave_ISR_IT+0x1ca>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004828:	781a      	ldrb	r2, [r3, #0]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004834:	1c5a      	adds	r2, r3, #1
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800483e:	b29b      	uxth	r3, r3
 8004840:	3b01      	subs	r3, #1
 8004842:	b29a      	uxth	r2, r3
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800484c:	3b01      	subs	r3, #1
 800484e:	b29a      	uxth	r2, r3
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004854:	e00f      	b.n	8004876 <I2C_Slave_ISR_IT+0x1ea>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004856:	697a      	ldr	r2, [r7, #20]
 8004858:	2380      	movs	r3, #128	@ 0x80
 800485a:	045b      	lsls	r3, r3, #17
 800485c:	429a      	cmp	r2, r3
 800485e:	d002      	beq.n	8004866 <I2C_Slave_ISR_IT+0x1da>
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d107      	bne.n	8004876 <I2C_Slave_ISR_IT+0x1ea>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	0018      	movs	r0, r3
 800486a:	f000 f8b3 	bl	80049d4 <I2C_ITSlaveSeqCplt>
 800486e:	e002      	b.n	8004876 <I2C_Slave_ISR_IT+0x1ea>
    if (hi2c->XferCount == 0U)
 8004870:	46c0      	nop			@ (mov r8, r8)
 8004872:	e000      	b.n	8004876 <I2C_Slave_ISR_IT+0x1ea>
    if ((hi2c->XferCount == 0U) && \
 8004874:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2240      	movs	r2, #64	@ 0x40
 800487a:	2100      	movs	r1, #0
 800487c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800487e:	2300      	movs	r3, #0
}
 8004880:	0018      	movs	r0, r3
 8004882:	46bd      	mov	sp, r7
 8004884:	b006      	add	sp, #24
 8004886:	bd80      	pop	{r7, pc}
 8004888:	ffff0000 	.word	0xffff0000

0800488c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800488c:	b5b0      	push	{r4, r5, r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2241      	movs	r2, #65	@ 0x41
 800489a:	5c9b      	ldrb	r3, [r3, r2]
 800489c:	b2db      	uxtb	r3, r3
 800489e:	001a      	movs	r2, r3
 80048a0:	2328      	movs	r3, #40	@ 0x28
 80048a2:	4013      	ands	r3, r2
 80048a4:	2b28      	cmp	r3, #40	@ 0x28
 80048a6:	d000      	beq.n	80048aa <I2C_ITAddrCplt+0x1e>
 80048a8:	e088      	b.n	80049bc <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	699b      	ldr	r3, [r3, #24]
 80048b0:	0c1b      	lsrs	r3, r3, #16
 80048b2:	b2da      	uxtb	r2, r3
 80048b4:	250f      	movs	r5, #15
 80048b6:	197b      	adds	r3, r7, r5
 80048b8:	2101      	movs	r1, #1
 80048ba:	400a      	ands	r2, r1
 80048bc:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	699b      	ldr	r3, [r3, #24]
 80048c4:	0c1b      	lsrs	r3, r3, #16
 80048c6:	b29a      	uxth	r2, r3
 80048c8:	200c      	movs	r0, #12
 80048ca:	183b      	adds	r3, r7, r0
 80048cc:	21fe      	movs	r1, #254	@ 0xfe
 80048ce:	400a      	ands	r2, r1
 80048d0:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	b29a      	uxth	r2, r3
 80048da:	240a      	movs	r4, #10
 80048dc:	193b      	adds	r3, r7, r4
 80048de:	0592      	lsls	r2, r2, #22
 80048e0:	0d92      	lsrs	r2, r2, #22
 80048e2:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	b29a      	uxth	r2, r3
 80048ec:	2308      	movs	r3, #8
 80048ee:	18fb      	adds	r3, r7, r3
 80048f0:	21fe      	movs	r1, #254	@ 0xfe
 80048f2:	400a      	ands	r2, r1
 80048f4:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d148      	bne.n	8004990 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80048fe:	0021      	movs	r1, r4
 8004900:	187b      	adds	r3, r7, r1
 8004902:	881b      	ldrh	r3, [r3, #0]
 8004904:	09db      	lsrs	r3, r3, #7
 8004906:	b29a      	uxth	r2, r3
 8004908:	183b      	adds	r3, r7, r0
 800490a:	881b      	ldrh	r3, [r3, #0]
 800490c:	4053      	eors	r3, r2
 800490e:	b29b      	uxth	r3, r3
 8004910:	001a      	movs	r2, r3
 8004912:	2306      	movs	r3, #6
 8004914:	4013      	ands	r3, r2
 8004916:	d120      	bne.n	800495a <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8004918:	183b      	adds	r3, r7, r0
 800491a:	187a      	adds	r2, r7, r1
 800491c:	8812      	ldrh	r2, [r2, #0]
 800491e:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004924:	1c5a      	adds	r2, r3, #1
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800492e:	2b02      	cmp	r3, #2
 8004930:	d14c      	bne.n	80049cc <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2208      	movs	r2, #8
 800493e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2240      	movs	r2, #64	@ 0x40
 8004944:	2100      	movs	r1, #0
 8004946:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004948:	183b      	adds	r3, r7, r0
 800494a:	881a      	ldrh	r2, [r3, #0]
 800494c:	197b      	adds	r3, r7, r5
 800494e:	7819      	ldrb	r1, [r3, #0]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	0018      	movs	r0, r3
 8004954:	f7ff fe79 	bl	800464a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004958:	e038      	b.n	80049cc <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 800495a:	240c      	movs	r4, #12
 800495c:	193b      	adds	r3, r7, r4
 800495e:	2208      	movs	r2, #8
 8004960:	18ba      	adds	r2, r7, r2
 8004962:	8812      	ldrh	r2, [r2, #0]
 8004964:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004966:	2380      	movs	r3, #128	@ 0x80
 8004968:	021a      	lsls	r2, r3, #8
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	0011      	movs	r1, r2
 800496e:	0018      	movs	r0, r3
 8004970:	f000 fbe0 	bl	8005134 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2240      	movs	r2, #64	@ 0x40
 8004978:	2100      	movs	r1, #0
 800497a:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800497c:	193b      	adds	r3, r7, r4
 800497e:	881a      	ldrh	r2, [r3, #0]
 8004980:	230f      	movs	r3, #15
 8004982:	18fb      	adds	r3, r7, r3
 8004984:	7819      	ldrb	r1, [r3, #0]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	0018      	movs	r0, r3
 800498a:	f7ff fe5e 	bl	800464a <HAL_I2C_AddrCallback>
}
 800498e:	e01d      	b.n	80049cc <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004990:	2380      	movs	r3, #128	@ 0x80
 8004992:	021a      	lsls	r2, r3, #8
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	0011      	movs	r1, r2
 8004998:	0018      	movs	r0, r3
 800499a:	f000 fbcb 	bl	8005134 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2240      	movs	r2, #64	@ 0x40
 80049a2:	2100      	movs	r1, #0
 80049a4:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80049a6:	230c      	movs	r3, #12
 80049a8:	18fb      	adds	r3, r7, r3
 80049aa:	881a      	ldrh	r2, [r3, #0]
 80049ac:	230f      	movs	r3, #15
 80049ae:	18fb      	adds	r3, r7, r3
 80049b0:	7819      	ldrb	r1, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	0018      	movs	r0, r3
 80049b6:	f7ff fe48 	bl	800464a <HAL_I2C_AddrCallback>
}
 80049ba:	e007      	b.n	80049cc <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2208      	movs	r2, #8
 80049c2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2240      	movs	r2, #64	@ 0x40
 80049c8:	2100      	movs	r1, #0
 80049ca:	5499      	strb	r1, [r3, r2]
}
 80049cc:	46c0      	nop			@ (mov r8, r8)
 80049ce:	46bd      	mov	sp, r7
 80049d0:	b004      	add	sp, #16
 80049d2:	bdb0      	pop	{r4, r5, r7, pc}

080049d4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2242      	movs	r2, #66	@ 0x42
 80049e8:	2100      	movs	r1, #0
 80049ea:	5499      	strb	r1, [r3, r2]

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80049ec:	68fa      	ldr	r2, [r7, #12]
 80049ee:	2380      	movs	r3, #128	@ 0x80
 80049f0:	01db      	lsls	r3, r3, #7
 80049f2:	4013      	ands	r3, r2
 80049f4:	d008      	beq.n	8004a08 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4924      	ldr	r1, [pc, #144]	@ (8004a94 <I2C_ITSlaveSeqCplt+0xc0>)
 8004a02:	400a      	ands	r2, r1
 8004a04:	601a      	str	r2, [r3, #0]
 8004a06:	e00c      	b.n	8004a22 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004a08:	68fa      	ldr	r2, [r7, #12]
 8004a0a:	2380      	movs	r3, #128	@ 0x80
 8004a0c:	021b      	lsls	r3, r3, #8
 8004a0e:	4013      	ands	r3, r2
 8004a10:	d007      	beq.n	8004a22 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	491e      	ldr	r1, [pc, #120]	@ (8004a98 <I2C_ITSlaveSeqCplt+0xc4>)
 8004a1e:	400a      	ands	r2, r1
 8004a20:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2241      	movs	r2, #65	@ 0x41
 8004a26:	5c9b      	ldrb	r3, [r3, r2]
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	2b29      	cmp	r3, #41	@ 0x29
 8004a2c:	d114      	bne.n	8004a58 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2241      	movs	r2, #65	@ 0x41
 8004a32:	2128      	movs	r1, #40	@ 0x28
 8004a34:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2221      	movs	r2, #33	@ 0x21
 8004a3a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2101      	movs	r1, #1
 8004a40:	0018      	movs	r0, r3
 8004a42:	f000 fb77 	bl	8005134 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2240      	movs	r2, #64	@ 0x40
 8004a4a:	2100      	movs	r1, #0
 8004a4c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	0018      	movs	r0, r3
 8004a52:	f7ff fdea 	bl	800462a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004a56:	e019      	b.n	8004a8c <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2241      	movs	r2, #65	@ 0x41
 8004a5c:	5c9b      	ldrb	r3, [r3, r2]
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a62:	d113      	bne.n	8004a8c <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2241      	movs	r2, #65	@ 0x41
 8004a68:	2128      	movs	r1, #40	@ 0x28
 8004a6a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2222      	movs	r2, #34	@ 0x22
 8004a70:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2102      	movs	r1, #2
 8004a76:	0018      	movs	r0, r3
 8004a78:	f000 fb5c 	bl	8005134 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2240      	movs	r2, #64	@ 0x40
 8004a80:	2100      	movs	r1, #0
 8004a82:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	0018      	movs	r0, r3
 8004a88:	f7ff fdd7 	bl	800463a <HAL_I2C_SlaveRxCpltCallback>
}
 8004a8c:	46c0      	nop			@ (mov r8, r8)
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	b004      	add	sp, #16
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	ffffbfff 	.word	0xffffbfff
 8004a98:	ffff7fff 	.word	0xffff7fff

08004a9c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b086      	sub	sp, #24
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ab6:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004ab8:	200b      	movs	r0, #11
 8004aba:	183b      	adds	r3, r7, r0
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	2141      	movs	r1, #65	@ 0x41
 8004ac0:	5c52      	ldrb	r2, [r2, r1]
 8004ac2:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2220      	movs	r2, #32
 8004aca:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004acc:	183b      	adds	r3, r7, r0
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	2b21      	cmp	r3, #33	@ 0x21
 8004ad2:	d003      	beq.n	8004adc <I2C_ITSlaveCplt+0x40>
 8004ad4:	183b      	adds	r3, r7, r0
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	2b29      	cmp	r3, #41	@ 0x29
 8004ada:	d109      	bne.n	8004af0 <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004adc:	4aac      	ldr	r2, [pc, #688]	@ (8004d90 <I2C_ITSlaveCplt+0x2f4>)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	0011      	movs	r1, r2
 8004ae2:	0018      	movs	r0, r3
 8004ae4:	f000 fb26 	bl	8005134 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2221      	movs	r2, #33	@ 0x21
 8004aec:	631a      	str	r2, [r3, #48]	@ 0x30
 8004aee:	e020      	b.n	8004b32 <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004af0:	220b      	movs	r2, #11
 8004af2:	18bb      	adds	r3, r7, r2
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	2b22      	cmp	r3, #34	@ 0x22
 8004af8:	d003      	beq.n	8004b02 <I2C_ITSlaveCplt+0x66>
 8004afa:	18bb      	adds	r3, r7, r2
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b00:	d109      	bne.n	8004b16 <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004b02:	4aa4      	ldr	r2, [pc, #656]	@ (8004d94 <I2C_ITSlaveCplt+0x2f8>)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	0011      	movs	r1, r2
 8004b08:	0018      	movs	r0, r3
 8004b0a:	f000 fb13 	bl	8005134 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2222      	movs	r2, #34	@ 0x22
 8004b12:	631a      	str	r2, [r3, #48]	@ 0x30
 8004b14:	e00d      	b.n	8004b32 <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8004b16:	230b      	movs	r3, #11
 8004b18:	18fb      	adds	r3, r7, r3
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	2b28      	cmp	r3, #40	@ 0x28
 8004b1e:	d108      	bne.n	8004b32 <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8004b20:	4a9d      	ldr	r2, [pc, #628]	@ (8004d98 <I2C_ITSlaveCplt+0x2fc>)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	0011      	movs	r1, r2
 8004b26:	0018      	movs	r0, r3
 8004b28:	f000 fb04 	bl	8005134 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	685a      	ldr	r2, [r3, #4]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2180      	movs	r1, #128	@ 0x80
 8004b3e:	0209      	lsls	r1, r1, #8
 8004b40:	430a      	orrs	r2, r1
 8004b42:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	685a      	ldr	r2, [r3, #4]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4993      	ldr	r1, [pc, #588]	@ (8004d9c <I2C_ITSlaveCplt+0x300>)
 8004b50:	400a      	ands	r2, r1
 8004b52:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	0018      	movs	r0, r3
 8004b58:	f000 faab 	bl	80050b2 <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004b5c:	693a      	ldr	r2, [r7, #16]
 8004b5e:	2380      	movs	r3, #128	@ 0x80
 8004b60:	01db      	lsls	r3, r3, #7
 8004b62:	4013      	ands	r3, r2
 8004b64:	d013      	beq.n	8004b8e <I2C_ITSlaveCplt+0xf2>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	498b      	ldr	r1, [pc, #556]	@ (8004da0 <I2C_ITSlaveCplt+0x304>)
 8004b72:	400a      	ands	r2, r1
 8004b74:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d01f      	beq.n	8004bbe <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	b29a      	uxth	r2, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004b8c:	e017      	b.n	8004bbe <I2C_ITSlaveCplt+0x122>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004b8e:	693a      	ldr	r2, [r7, #16]
 8004b90:	2380      	movs	r3, #128	@ 0x80
 8004b92:	021b      	lsls	r3, r3, #8
 8004b94:	4013      	ands	r3, r2
 8004b96:	d012      	beq.n	8004bbe <I2C_ITSlaveCplt+0x122>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4980      	ldr	r1, [pc, #512]	@ (8004da4 <I2C_ITSlaveCplt+0x308>)
 8004ba4:	400a      	ands	r2, r1
 8004ba6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d006      	beq.n	8004bbe <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	2204      	movs	r2, #4
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	d020      	beq.n	8004c08 <I2C_ITSlaveCplt+0x16c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	2204      	movs	r2, #4
 8004bca:	4393      	bics	r3, r2
 8004bcc:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bd8:	b2d2      	uxtb	r2, r2
 8004bda:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004be0:	1c5a      	adds	r2, r3, #1
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00c      	beq.n	8004c08 <I2C_ITSlaveCplt+0x16c>
    {
      hi2c->XferSize--;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bf2:	3b01      	subs	r3, #1
 8004bf4:	b29a      	uxth	r2, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	3b01      	subs	r3, #1
 8004c02:	b29a      	uxth	r2, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d005      	beq.n	8004c1e <I2C_ITSlaveCplt+0x182>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c16:	2204      	movs	r2, #4
 8004c18:	431a      	orrs	r2, r3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	2210      	movs	r2, #16
 8004c22:	4013      	ands	r3, r2
 8004c24:	d04f      	beq.n	8004cc6 <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	2210      	movs	r2, #16
 8004c2a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004c2c:	d04b      	beq.n	8004cc6 <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d12d      	bne.n	8004c94 <I2C_ITSlaveCplt+0x1f8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2241      	movs	r2, #65	@ 0x41
 8004c3c:	5c9b      	ldrb	r3, [r3, r2]
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	2b28      	cmp	r3, #40	@ 0x28
 8004c42:	d10b      	bne.n	8004c5c <I2C_ITSlaveCplt+0x1c0>
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	2380      	movs	r3, #128	@ 0x80
 8004c48:	049b      	lsls	r3, r3, #18
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d106      	bne.n	8004c5c <I2C_ITSlaveCplt+0x1c0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004c4e:	697a      	ldr	r2, [r7, #20]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	0011      	movs	r1, r2
 8004c54:	0018      	movs	r0, r3
 8004c56:	f000 f8a9 	bl	8004dac <I2C_ITListenCplt>
 8004c5a:	e034      	b.n	8004cc6 <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2241      	movs	r2, #65	@ 0x41
 8004c60:	5c9b      	ldrb	r3, [r3, r2]
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	2b29      	cmp	r3, #41	@ 0x29
 8004c66:	d110      	bne.n	8004c8a <I2C_ITSlaveCplt+0x1ee>
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	4a4f      	ldr	r2, [pc, #316]	@ (8004da8 <I2C_ITSlaveCplt+0x30c>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d00c      	beq.n	8004c8a <I2C_ITSlaveCplt+0x1ee>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2210      	movs	r2, #16
 8004c76:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	0018      	movs	r0, r3
 8004c7c:	f000 fa19 	bl	80050b2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	0018      	movs	r0, r3
 8004c84:	f7ff fea6 	bl	80049d4 <I2C_ITSlaveSeqCplt>
 8004c88:	e01d      	b.n	8004cc6 <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2210      	movs	r2, #16
 8004c90:	61da      	str	r2, [r3, #28]
 8004c92:	e018      	b.n	8004cc6 <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2210      	movs	r2, #16
 8004c9a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ca0:	2204      	movs	r2, #4
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d004      	beq.n	8004cb8 <I2C_ITSlaveCplt+0x21c>
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	2380      	movs	r3, #128	@ 0x80
 8004cb2:	045b      	lsls	r3, r3, #17
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d106      	bne.n	8004cc6 <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	0011      	movs	r1, r2
 8004cc0:	0018      	movs	r0, r3
 8004cc2:	f000 f8cb 	bl	8004e5c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2242      	movs	r2, #66	@ 0x42
 8004cca:	2100      	movs	r1, #0
 8004ccc:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d013      	beq.n	8004d04 <I2C_ITSlaveCplt+0x268>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	0011      	movs	r1, r2
 8004ce4:	0018      	movs	r0, r3
 8004ce6:	f000 f8b9 	bl	8004e5c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2241      	movs	r2, #65	@ 0x41
 8004cee:	5c9b      	ldrb	r3, [r3, r2]
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b28      	cmp	r3, #40	@ 0x28
 8004cf4:	d147      	bne.n	8004d86 <I2C_ITSlaveCplt+0x2ea>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	0011      	movs	r1, r2
 8004cfc:	0018      	movs	r0, r3
 8004cfe:	f000 f855 	bl	8004dac <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004d02:	e040      	b.n	8004d86 <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d08:	4a27      	ldr	r2, [pc, #156]	@ (8004da8 <I2C_ITSlaveCplt+0x30c>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d016      	beq.n	8004d3c <I2C_ITSlaveCplt+0x2a0>
    I2C_ITSlaveSeqCplt(hi2c);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	0018      	movs	r0, r3
 8004d12:	f7ff fe5f 	bl	80049d4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a23      	ldr	r2, [pc, #140]	@ (8004da8 <I2C_ITSlaveCplt+0x30c>)
 8004d1a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2241      	movs	r2, #65	@ 0x41
 8004d20:	2120      	movs	r1, #32
 8004d22:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2240      	movs	r2, #64	@ 0x40
 8004d2e:	2100      	movs	r1, #0
 8004d30:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	0018      	movs	r0, r3
 8004d36:	f7ff fc98 	bl	800466a <HAL_I2C_ListenCpltCallback>
}
 8004d3a:	e024      	b.n	8004d86 <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2241      	movs	r2, #65	@ 0x41
 8004d40:	5c9b      	ldrb	r3, [r3, r2]
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	2b22      	cmp	r3, #34	@ 0x22
 8004d46:	d10f      	bne.n	8004d68 <I2C_ITSlaveCplt+0x2cc>
    hi2c->State = HAL_I2C_STATE_READY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2241      	movs	r2, #65	@ 0x41
 8004d4c:	2120      	movs	r1, #32
 8004d4e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2240      	movs	r2, #64	@ 0x40
 8004d5a:	2100      	movs	r1, #0
 8004d5c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	0018      	movs	r0, r3
 8004d62:	f7ff fc6a 	bl	800463a <HAL_I2C_SlaveRxCpltCallback>
}
 8004d66:	e00e      	b.n	8004d86 <I2C_ITSlaveCplt+0x2ea>
    hi2c->State = HAL_I2C_STATE_READY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2241      	movs	r2, #65	@ 0x41
 8004d6c:	2120      	movs	r1, #32
 8004d6e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2240      	movs	r2, #64	@ 0x40
 8004d7a:	2100      	movs	r1, #0
 8004d7c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	0018      	movs	r0, r3
 8004d82:	f7ff fc52 	bl	800462a <HAL_I2C_SlaveTxCpltCallback>
}
 8004d86:	46c0      	nop			@ (mov r8, r8)
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	b006      	add	sp, #24
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	46c0      	nop			@ (mov r8, r8)
 8004d90:	00008001 	.word	0x00008001
 8004d94:	00008002 	.word	0x00008002
 8004d98:	00008003 	.word	0x00008003
 8004d9c:	fe00e800 	.word	0xfe00e800
 8004da0:	ffffbfff 	.word	0xffffbfff
 8004da4:	ffff7fff 	.word	0xffff7fff
 8004da8:	ffff0000 	.word	0xffff0000

08004dac <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a26      	ldr	r2, [pc, #152]	@ (8004e54 <I2C_ITListenCplt+0xa8>)
 8004dba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2241      	movs	r2, #65	@ 0x41
 8004dc6:	2120      	movs	r1, #32
 8004dc8:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2242      	movs	r2, #66	@ 0x42
 8004dce:	2100      	movs	r1, #0
 8004dd0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	2204      	movs	r2, #4
 8004ddc:	4013      	ands	r3, r2
 8004dde:	d022      	beq.n	8004e26 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dea:	b2d2      	uxtb	r2, r2
 8004dec:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df2:	1c5a      	adds	r2, r3, #1
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d012      	beq.n	8004e26 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e04:	3b01      	subs	r3, #1
 8004e06:	b29a      	uxth	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	3b01      	subs	r3, #1
 8004e14:	b29a      	uxth	r2, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e1e:	2204      	movs	r2, #4
 8004e20:	431a      	orrs	r2, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004e26:	4a0c      	ldr	r2, [pc, #48]	@ (8004e58 <I2C_ITListenCplt+0xac>)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	0011      	movs	r1, r2
 8004e2c:	0018      	movs	r0, r3
 8004e2e:	f000 f981 	bl	8005134 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2210      	movs	r2, #16
 8004e38:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2240      	movs	r2, #64	@ 0x40
 8004e3e:	2100      	movs	r1, #0
 8004e40:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	0018      	movs	r0, r3
 8004e46:	f7ff fc10 	bl	800466a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004e4a:	46c0      	nop			@ (mov r8, r8)
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	b002      	add	sp, #8
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	46c0      	nop			@ (mov r8, r8)
 8004e54:	ffff0000 	.word	0xffff0000
 8004e58:	00008003 	.word	0x00008003

08004e5c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004e66:	200f      	movs	r0, #15
 8004e68:	183b      	adds	r3, r7, r0
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	2141      	movs	r1, #65	@ 0x41
 8004e6e:	5c52      	ldrb	r2, [r2, r1]
 8004e70:	701a      	strb	r2, [r3, #0]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2242      	movs	r2, #66	@ 0x42
 8004e76:	2100      	movs	r1, #0
 8004e78:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a72      	ldr	r2, [pc, #456]	@ (8005048 <I2C_ITError+0x1ec>)
 8004e7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	431a      	orrs	r2, r3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004e92:	183b      	adds	r3, r7, r0
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	2b28      	cmp	r3, #40	@ 0x28
 8004e98:	d007      	beq.n	8004eaa <I2C_ITError+0x4e>
 8004e9a:	183b      	adds	r3, r7, r0
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	2b29      	cmp	r3, #41	@ 0x29
 8004ea0:	d003      	beq.n	8004eaa <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004ea2:	183b      	adds	r3, r7, r0
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ea8:	d10c      	bne.n	8004ec4 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2103      	movs	r1, #3
 8004eae:	0018      	movs	r0, r3
 8004eb0:	f000 f940 	bl	8005134 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2241      	movs	r2, #65	@ 0x41
 8004eb8:	2128      	movs	r1, #40	@ 0x28
 8004eba:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	4a63      	ldr	r2, [pc, #396]	@ (800504c <I2C_ITError+0x1f0>)
 8004ec0:	635a      	str	r2, [r3, #52]	@ 0x34
 8004ec2:	e032      	b.n	8004f2a <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004ec4:	4a62      	ldr	r2, [pc, #392]	@ (8005050 <I2C_ITError+0x1f4>)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	0011      	movs	r1, r2
 8004eca:	0018      	movs	r0, r3
 8004ecc:	f000 f932 	bl	8005134 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	0018      	movs	r0, r3
 8004ed4:	f000 f8ed 	bl	80050b2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2241      	movs	r2, #65	@ 0x41
 8004edc:	5c9b      	ldrb	r3, [r3, r2]
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	2b60      	cmp	r3, #96	@ 0x60
 8004ee2:	d01f      	beq.n	8004f24 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2241      	movs	r2, #65	@ 0x41
 8004ee8:	2120      	movs	r1, #32
 8004eea:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	699b      	ldr	r3, [r3, #24]
 8004ef2:	2220      	movs	r2, #32
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	2b20      	cmp	r3, #32
 8004ef8:	d114      	bne.n	8004f24 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	699b      	ldr	r3, [r3, #24]
 8004f00:	2210      	movs	r2, #16
 8004f02:	4013      	ands	r3, r2
 8004f04:	2b10      	cmp	r3, #16
 8004f06:	d109      	bne.n	8004f1c <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2210      	movs	r2, #16
 8004f0e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f14:	2204      	movs	r2, #4
 8004f16:	431a      	orrs	r2, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2220      	movs	r2, #32
 8004f22:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f2e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d03b      	beq.n	8004fb0 <I2C_ITError+0x154>
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	2b11      	cmp	r3, #17
 8004f3c:	d002      	beq.n	8004f44 <I2C_ITError+0xe8>
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	2b21      	cmp	r3, #33	@ 0x21
 8004f42:	d135      	bne.n	8004fb0 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	2380      	movs	r3, #128	@ 0x80
 8004f4c:	01db      	lsls	r3, r3, #7
 8004f4e:	401a      	ands	r2, r3
 8004f50:	2380      	movs	r3, #128	@ 0x80
 8004f52:	01db      	lsls	r3, r3, #7
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d107      	bne.n	8004f68 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	493c      	ldr	r1, [pc, #240]	@ (8005054 <I2C_ITError+0x1f8>)
 8004f64:	400a      	ands	r2, r1
 8004f66:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f6c:	0018      	movs	r0, r3
 8004f6e:	f7fe ff35 	bl	8003ddc <HAL_DMA_GetState>
 8004f72:	0003      	movs	r3, r0
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d016      	beq.n	8004fa6 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f7c:	4a36      	ldr	r2, [pc, #216]	@ (8005058 <I2C_ITError+0x1fc>)
 8004f7e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2240      	movs	r2, #64	@ 0x40
 8004f84:	2100      	movs	r1, #0
 8004f86:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f8c:	0018      	movs	r0, r3
 8004f8e:	f7fe fdf9 	bl	8003b84 <HAL_DMA_Abort_IT>
 8004f92:	1e03      	subs	r3, r0, #0
 8004f94:	d051      	beq.n	800503a <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fa0:	0018      	movs	r0, r3
 8004fa2:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004fa4:	e049      	b.n	800503a <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	0018      	movs	r0, r3
 8004faa:	f000 f859 	bl	8005060 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004fae:	e044      	b.n	800503a <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d03b      	beq.n	8005030 <I2C_ITError+0x1d4>
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	2b12      	cmp	r3, #18
 8004fbc:	d002      	beq.n	8004fc4 <I2C_ITError+0x168>
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	2b22      	cmp	r3, #34	@ 0x22
 8004fc2:	d135      	bne.n	8005030 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	2380      	movs	r3, #128	@ 0x80
 8004fcc:	021b      	lsls	r3, r3, #8
 8004fce:	401a      	ands	r2, r3
 8004fd0:	2380      	movs	r3, #128	@ 0x80
 8004fd2:	021b      	lsls	r3, r3, #8
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d107      	bne.n	8004fe8 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	491e      	ldr	r1, [pc, #120]	@ (800505c <I2C_ITError+0x200>)
 8004fe4:	400a      	ands	r2, r1
 8004fe6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fec:	0018      	movs	r0, r3
 8004fee:	f7fe fef5 	bl	8003ddc <HAL_DMA_GetState>
 8004ff2:	0003      	movs	r3, r0
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d016      	beq.n	8005026 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ffc:	4a16      	ldr	r2, [pc, #88]	@ (8005058 <I2C_ITError+0x1fc>)
 8004ffe:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2240      	movs	r2, #64	@ 0x40
 8005004:	2100      	movs	r1, #0
 8005006:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800500c:	0018      	movs	r0, r3
 800500e:	f7fe fdb9 	bl	8003b84 <HAL_DMA_Abort_IT>
 8005012:	1e03      	subs	r3, r0, #0
 8005014:	d013      	beq.n	800503e <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800501a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005020:	0018      	movs	r0, r3
 8005022:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005024:	e00b      	b.n	800503e <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	0018      	movs	r0, r3
 800502a:	f000 f819 	bl	8005060 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800502e:	e006      	b.n	800503e <I2C_ITError+0x1e2>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	0018      	movs	r0, r3
 8005034:	f000 f814 	bl	8005060 <I2C_TreatErrorCallback>
  }
}
 8005038:	e002      	b.n	8005040 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800503a:	46c0      	nop			@ (mov r8, r8)
 800503c:	e000      	b.n	8005040 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800503e:	46c0      	nop			@ (mov r8, r8)
}
 8005040:	46c0      	nop			@ (mov r8, r8)
 8005042:	46bd      	mov	sp, r7
 8005044:	b004      	add	sp, #16
 8005046:	bd80      	pop	{r7, pc}
 8005048:	ffff0000 	.word	0xffff0000
 800504c:	0800468d 	.word	0x0800468d
 8005050:	00008003 	.word	0x00008003
 8005054:	ffffbfff 	.word	0xffffbfff
 8005058:	080050f7 	.word	0x080050f7
 800505c:	ffff7fff 	.word	0xffff7fff

08005060 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b082      	sub	sp, #8
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2241      	movs	r2, #65	@ 0x41
 800506c:	5c9b      	ldrb	r3, [r3, r2]
 800506e:	b2db      	uxtb	r3, r3
 8005070:	2b60      	cmp	r3, #96	@ 0x60
 8005072:	d10f      	bne.n	8005094 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2241      	movs	r2, #65	@ 0x41
 8005078:	2120      	movs	r1, #32
 800507a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2240      	movs	r2, #64	@ 0x40
 8005086:	2100      	movs	r1, #0
 8005088:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	0018      	movs	r0, r3
 800508e:	f7ff faf4 	bl	800467a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005092:	e00a      	b.n	80050aa <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2240      	movs	r2, #64	@ 0x40
 800509e:	2100      	movs	r1, #0
 80050a0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	0018      	movs	r0, r3
 80050a6:	f7fb f9a5 	bl	80003f4 <HAL_I2C_ErrorCallback>
}
 80050aa:	46c0      	nop			@ (mov r8, r8)
 80050ac:	46bd      	mov	sp, r7
 80050ae:	b002      	add	sp, #8
 80050b0:	bd80      	pop	{r7, pc}

080050b2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80050b2:	b580      	push	{r7, lr}
 80050b4:	b082      	sub	sp, #8
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	699b      	ldr	r3, [r3, #24]
 80050c0:	2202      	movs	r2, #2
 80050c2:	4013      	ands	r3, r2
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	d103      	bne.n	80050d0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2200      	movs	r2, #0
 80050ce:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	2201      	movs	r2, #1
 80050d8:	4013      	ands	r3, r2
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d007      	beq.n	80050ee <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	699a      	ldr	r2, [r3, #24]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2101      	movs	r1, #1
 80050ea:	430a      	orrs	r2, r1
 80050ec:	619a      	str	r2, [r3, #24]
  }
}
 80050ee:	46c0      	nop			@ (mov r8, r8)
 80050f0:	46bd      	mov	sp, r7
 80050f2:	b002      	add	sp, #8
 80050f4:	bd80      	pop	{r7, pc}

080050f6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80050f6:	b580      	push	{r7, lr}
 80050f8:	b084      	sub	sp, #16
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005102:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005108:	2b00      	cmp	r3, #0
 800510a:	d003      	beq.n	8005114 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005110:	2200      	movs	r2, #0
 8005112:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005118:	2b00      	cmp	r3, #0
 800511a:	d003      	beq.n	8005124 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005120:	2200      	movs	r2, #0
 8005122:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	0018      	movs	r0, r3
 8005128:	f7ff ff9a 	bl	8005060 <I2C_TreatErrorCallback>
}
 800512c:	46c0      	nop			@ (mov r8, r8)
 800512e:	46bd      	mov	sp, r7
 8005130:	b004      	add	sp, #16
 8005132:	bd80      	pop	{r7, pc}

08005134 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	000a      	movs	r2, r1
 800513e:	1cbb      	adds	r3, r7, #2
 8005140:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8005142:	2300      	movs	r3, #0
 8005144:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005146:	1cbb      	adds	r3, r7, #2
 8005148:	881b      	ldrh	r3, [r3, #0]
 800514a:	2201      	movs	r2, #1
 800514c:	4013      	ands	r3, r2
 800514e:	d010      	beq.n	8005172 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2242      	movs	r2, #66	@ 0x42
 8005154:	4313      	orrs	r3, r2
 8005156:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2241      	movs	r2, #65	@ 0x41
 800515c:	5c9b      	ldrb	r3, [r3, r2]
 800515e:	b2db      	uxtb	r3, r3
 8005160:	001a      	movs	r2, r3
 8005162:	2328      	movs	r3, #40	@ 0x28
 8005164:	4013      	ands	r3, r2
 8005166:	2b28      	cmp	r3, #40	@ 0x28
 8005168:	d003      	beq.n	8005172 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	22b0      	movs	r2, #176	@ 0xb0
 800516e:	4313      	orrs	r3, r2
 8005170:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005172:	1cbb      	adds	r3, r7, #2
 8005174:	881b      	ldrh	r3, [r3, #0]
 8005176:	2202      	movs	r2, #2
 8005178:	4013      	ands	r3, r2
 800517a:	d010      	beq.n	800519e <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2244      	movs	r2, #68	@ 0x44
 8005180:	4313      	orrs	r3, r2
 8005182:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2241      	movs	r2, #65	@ 0x41
 8005188:	5c9b      	ldrb	r3, [r3, r2]
 800518a:	b2db      	uxtb	r3, r3
 800518c:	001a      	movs	r2, r3
 800518e:	2328      	movs	r3, #40	@ 0x28
 8005190:	4013      	ands	r3, r2
 8005192:	2b28      	cmp	r3, #40	@ 0x28
 8005194:	d003      	beq.n	800519e <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	22b0      	movs	r2, #176	@ 0xb0
 800519a:	4313      	orrs	r3, r2
 800519c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800519e:	1cbb      	adds	r3, r7, #2
 80051a0:	2200      	movs	r2, #0
 80051a2:	5e9b      	ldrsh	r3, [r3, r2]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	da03      	bge.n	80051b0 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	22b8      	movs	r2, #184	@ 0xb8
 80051ac:	4313      	orrs	r3, r2
 80051ae:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80051b0:	1cbb      	adds	r3, r7, #2
 80051b2:	881b      	ldrh	r3, [r3, #0]
 80051b4:	2b10      	cmp	r3, #16
 80051b6:	d103      	bne.n	80051c0 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2290      	movs	r2, #144	@ 0x90
 80051bc:	4313      	orrs	r3, r2
 80051be:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80051c0:	1cbb      	adds	r3, r7, #2
 80051c2:	881b      	ldrh	r3, [r3, #0]
 80051c4:	2b20      	cmp	r3, #32
 80051c6:	d103      	bne.n	80051d0 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2220      	movs	r2, #32
 80051cc:	4313      	orrs	r3, r2
 80051ce:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80051d0:	1cbb      	adds	r3, r7, #2
 80051d2:	881b      	ldrh	r3, [r3, #0]
 80051d4:	2b40      	cmp	r3, #64	@ 0x40
 80051d6:	d103      	bne.n	80051e0 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2240      	movs	r2, #64	@ 0x40
 80051dc:	4313      	orrs	r3, r2
 80051de:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	43d9      	mvns	r1, r3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	400a      	ands	r2, r1
 80051f0:	601a      	str	r2, [r3, #0]
}
 80051f2:	46c0      	nop			@ (mov r8, r8)
 80051f4:	46bd      	mov	sp, r7
 80051f6:	b004      	add	sp, #16
 80051f8:	bd80      	pop	{r7, pc}
	...

080051fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b082      	sub	sp, #8
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2241      	movs	r2, #65	@ 0x41
 800520a:	5c9b      	ldrb	r3, [r3, r2]
 800520c:	b2db      	uxtb	r3, r3
 800520e:	2b20      	cmp	r3, #32
 8005210:	d138      	bne.n	8005284 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2240      	movs	r2, #64	@ 0x40
 8005216:	5c9b      	ldrb	r3, [r3, r2]
 8005218:	2b01      	cmp	r3, #1
 800521a:	d101      	bne.n	8005220 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800521c:	2302      	movs	r3, #2
 800521e:	e032      	b.n	8005286 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2240      	movs	r2, #64	@ 0x40
 8005224:	2101      	movs	r1, #1
 8005226:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2241      	movs	r2, #65	@ 0x41
 800522c:	2124      	movs	r1, #36	@ 0x24
 800522e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2101      	movs	r1, #1
 800523c:	438a      	bics	r2, r1
 800523e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4911      	ldr	r1, [pc, #68]	@ (8005290 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800524c:	400a      	ands	r2, r1
 800524e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	6819      	ldr	r1, [r3, #0]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	683a      	ldr	r2, [r7, #0]
 800525c:	430a      	orrs	r2, r1
 800525e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2101      	movs	r1, #1
 800526c:	430a      	orrs	r2, r1
 800526e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2241      	movs	r2, #65	@ 0x41
 8005274:	2120      	movs	r1, #32
 8005276:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2240      	movs	r2, #64	@ 0x40
 800527c:	2100      	movs	r1, #0
 800527e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005280:	2300      	movs	r3, #0
 8005282:	e000      	b.n	8005286 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005284:	2302      	movs	r3, #2
  }
}
 8005286:	0018      	movs	r0, r3
 8005288:	46bd      	mov	sp, r7
 800528a:	b002      	add	sp, #8
 800528c:	bd80      	pop	{r7, pc}
 800528e:	46c0      	nop			@ (mov r8, r8)
 8005290:	ffffefff 	.word	0xffffefff

08005294 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2241      	movs	r2, #65	@ 0x41
 80052a2:	5c9b      	ldrb	r3, [r3, r2]
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	2b20      	cmp	r3, #32
 80052a8:	d139      	bne.n	800531e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2240      	movs	r2, #64	@ 0x40
 80052ae:	5c9b      	ldrb	r3, [r3, r2]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d101      	bne.n	80052b8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80052b4:	2302      	movs	r3, #2
 80052b6:	e033      	b.n	8005320 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2240      	movs	r2, #64	@ 0x40
 80052bc:	2101      	movs	r1, #1
 80052be:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2241      	movs	r2, #65	@ 0x41
 80052c4:	2124      	movs	r1, #36	@ 0x24
 80052c6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2101      	movs	r1, #1
 80052d4:	438a      	bics	r2, r1
 80052d6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	4a11      	ldr	r2, [pc, #68]	@ (8005328 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80052e4:	4013      	ands	r3, r2
 80052e6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	021b      	lsls	r3, r3, #8
 80052ec:	68fa      	ldr	r2, [r7, #12]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2101      	movs	r1, #1
 8005306:	430a      	orrs	r2, r1
 8005308:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2241      	movs	r2, #65	@ 0x41
 800530e:	2120      	movs	r1, #32
 8005310:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2240      	movs	r2, #64	@ 0x40
 8005316:	2100      	movs	r1, #0
 8005318:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800531a:	2300      	movs	r3, #0
 800531c:	e000      	b.n	8005320 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800531e:	2302      	movs	r3, #2
  }
}
 8005320:	0018      	movs	r0, r3
 8005322:	46bd      	mov	sp, r7
 8005324:	b004      	add	sp, #16
 8005326:	bd80      	pop	{r7, pc}
 8005328:	fffff0ff 	.word	0xfffff0ff

0800532c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b086      	sub	sp, #24
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d101      	bne.n	800533e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e20f      	b.n	800575e <HAL_RCC_OscConfig+0x432>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2201      	movs	r2, #1
 8005344:	4013      	ands	r3, r2
 8005346:	d100      	bne.n	800534a <HAL_RCC_OscConfig+0x1e>
 8005348:	e069      	b.n	800541e <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800534a:	4bc8      	ldr	r3, [pc, #800]	@ (800566c <HAL_RCC_OscConfig+0x340>)
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	2238      	movs	r2, #56	@ 0x38
 8005350:	4013      	ands	r3, r2
 8005352:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	2b08      	cmp	r3, #8
 8005358:	d105      	bne.n	8005366 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d15d      	bne.n	800541e <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e1fb      	b.n	800575e <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	685a      	ldr	r2, [r3, #4]
 800536a:	2380      	movs	r3, #128	@ 0x80
 800536c:	025b      	lsls	r3, r3, #9
 800536e:	429a      	cmp	r2, r3
 8005370:	d107      	bne.n	8005382 <HAL_RCC_OscConfig+0x56>
 8005372:	4bbe      	ldr	r3, [pc, #760]	@ (800566c <HAL_RCC_OscConfig+0x340>)
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	4bbd      	ldr	r3, [pc, #756]	@ (800566c <HAL_RCC_OscConfig+0x340>)
 8005378:	2180      	movs	r1, #128	@ 0x80
 800537a:	0249      	lsls	r1, r1, #9
 800537c:	430a      	orrs	r2, r1
 800537e:	601a      	str	r2, [r3, #0]
 8005380:	e020      	b.n	80053c4 <HAL_RCC_OscConfig+0x98>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	685a      	ldr	r2, [r3, #4]
 8005386:	23a0      	movs	r3, #160	@ 0xa0
 8005388:	02db      	lsls	r3, r3, #11
 800538a:	429a      	cmp	r2, r3
 800538c:	d10e      	bne.n	80053ac <HAL_RCC_OscConfig+0x80>
 800538e:	4bb7      	ldr	r3, [pc, #732]	@ (800566c <HAL_RCC_OscConfig+0x340>)
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	4bb6      	ldr	r3, [pc, #728]	@ (800566c <HAL_RCC_OscConfig+0x340>)
 8005394:	2180      	movs	r1, #128	@ 0x80
 8005396:	02c9      	lsls	r1, r1, #11
 8005398:	430a      	orrs	r2, r1
 800539a:	601a      	str	r2, [r3, #0]
 800539c:	4bb3      	ldr	r3, [pc, #716]	@ (800566c <HAL_RCC_OscConfig+0x340>)
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	4bb2      	ldr	r3, [pc, #712]	@ (800566c <HAL_RCC_OscConfig+0x340>)
 80053a2:	2180      	movs	r1, #128	@ 0x80
 80053a4:	0249      	lsls	r1, r1, #9
 80053a6:	430a      	orrs	r2, r1
 80053a8:	601a      	str	r2, [r3, #0]
 80053aa:	e00b      	b.n	80053c4 <HAL_RCC_OscConfig+0x98>
 80053ac:	4baf      	ldr	r3, [pc, #700]	@ (800566c <HAL_RCC_OscConfig+0x340>)
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	4bae      	ldr	r3, [pc, #696]	@ (800566c <HAL_RCC_OscConfig+0x340>)
 80053b2:	49af      	ldr	r1, [pc, #700]	@ (8005670 <HAL_RCC_OscConfig+0x344>)
 80053b4:	400a      	ands	r2, r1
 80053b6:	601a      	str	r2, [r3, #0]
 80053b8:	4bac      	ldr	r3, [pc, #688]	@ (800566c <HAL_RCC_OscConfig+0x340>)
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	4bab      	ldr	r3, [pc, #684]	@ (800566c <HAL_RCC_OscConfig+0x340>)
 80053be:	49ad      	ldr	r1, [pc, #692]	@ (8005674 <HAL_RCC_OscConfig+0x348>)
 80053c0:	400a      	ands	r2, r1
 80053c2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d014      	beq.n	80053f6 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053cc:	f7fe f8b0 	bl	8003530 <HAL_GetTick>
 80053d0:	0003      	movs	r3, r0
 80053d2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053d4:	e008      	b.n	80053e8 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80053d6:	f7fe f8ab 	bl	8003530 <HAL_GetTick>
 80053da:	0002      	movs	r2, r0
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	2b64      	cmp	r3, #100	@ 0x64
 80053e2:	d901      	bls.n	80053e8 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e1ba      	b.n	800575e <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053e8:	4ba0      	ldr	r3, [pc, #640]	@ (800566c <HAL_RCC_OscConfig+0x340>)
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	2380      	movs	r3, #128	@ 0x80
 80053ee:	029b      	lsls	r3, r3, #10
 80053f0:	4013      	ands	r3, r2
 80053f2:	d0f0      	beq.n	80053d6 <HAL_RCC_OscConfig+0xaa>
 80053f4:	e013      	b.n	800541e <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053f6:	f7fe f89b 	bl	8003530 <HAL_GetTick>
 80053fa:	0003      	movs	r3, r0
 80053fc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80053fe:	e008      	b.n	8005412 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8005400:	f7fe f896 	bl	8003530 <HAL_GetTick>
 8005404:	0002      	movs	r2, r0
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	2b64      	cmp	r3, #100	@ 0x64
 800540c:	d901      	bls.n	8005412 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	e1a5      	b.n	800575e <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005412:	4b96      	ldr	r3, [pc, #600]	@ (800566c <HAL_RCC_OscConfig+0x340>)
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	2380      	movs	r3, #128	@ 0x80
 8005418:	029b      	lsls	r3, r3, #10
 800541a:	4013      	ands	r3, r2
 800541c:	d1f0      	bne.n	8005400 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	2202      	movs	r2, #2
 8005424:	4013      	ands	r3, r2
 8005426:	d100      	bne.n	800542a <HAL_RCC_OscConfig+0xfe>
 8005428:	e086      	b.n	8005538 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800542a:	4b90      	ldr	r3, [pc, #576]	@ (800566c <HAL_RCC_OscConfig+0x340>)
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	2238      	movs	r2, #56	@ 0x38
 8005430:	4013      	ands	r3, r2
 8005432:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d12f      	bne.n	800549a <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d101      	bne.n	8005446 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e18b      	b.n	800575e <HAL_RCC_OscConfig+0x432>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005446:	4b89      	ldr	r3, [pc, #548]	@ (800566c <HAL_RCC_OscConfig+0x340>)
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	4a8b      	ldr	r2, [pc, #556]	@ (8005678 <HAL_RCC_OscConfig+0x34c>)
 800544c:	4013      	ands	r3, r2
 800544e:	0019      	movs	r1, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	695b      	ldr	r3, [r3, #20]
 8005454:	021a      	lsls	r2, r3, #8
 8005456:	4b85      	ldr	r3, [pc, #532]	@ (800566c <HAL_RCC_OscConfig+0x340>)
 8005458:	430a      	orrs	r2, r1
 800545a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d112      	bne.n	8005488 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005462:	4b82      	ldr	r3, [pc, #520]	@ (800566c <HAL_RCC_OscConfig+0x340>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a85      	ldr	r2, [pc, #532]	@ (800567c <HAL_RCC_OscConfig+0x350>)
 8005468:	4013      	ands	r3, r2
 800546a:	0019      	movs	r1, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	691a      	ldr	r2, [r3, #16]
 8005470:	4b7e      	ldr	r3, [pc, #504]	@ (800566c <HAL_RCC_OscConfig+0x340>)
 8005472:	430a      	orrs	r2, r1
 8005474:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8005476:	4b7d      	ldr	r3, [pc, #500]	@ (800566c <HAL_RCC_OscConfig+0x340>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	0adb      	lsrs	r3, r3, #11
 800547c:	2207      	movs	r2, #7
 800547e:	4013      	ands	r3, r2
 8005480:	4a7f      	ldr	r2, [pc, #508]	@ (8005680 <HAL_RCC_OscConfig+0x354>)
 8005482:	40da      	lsrs	r2, r3
 8005484:	4b7f      	ldr	r3, [pc, #508]	@ (8005684 <HAL_RCC_OscConfig+0x358>)
 8005486:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005488:	4b7f      	ldr	r3, [pc, #508]	@ (8005688 <HAL_RCC_OscConfig+0x35c>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	0018      	movs	r0, r3
 800548e:	f7fd fff3 	bl	8003478 <HAL_InitTick>
 8005492:	1e03      	subs	r3, r0, #0
 8005494:	d050      	beq.n	8005538 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e161      	b.n	800575e <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d030      	beq.n	8005504 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80054a2:	4b72      	ldr	r3, [pc, #456]	@ (800566c <HAL_RCC_OscConfig+0x340>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a75      	ldr	r2, [pc, #468]	@ (800567c <HAL_RCC_OscConfig+0x350>)
 80054a8:	4013      	ands	r3, r2
 80054aa:	0019      	movs	r1, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	691a      	ldr	r2, [r3, #16]
 80054b0:	4b6e      	ldr	r3, [pc, #440]	@ (800566c <HAL_RCC_OscConfig+0x340>)
 80054b2:	430a      	orrs	r2, r1
 80054b4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 80054b6:	4b6d      	ldr	r3, [pc, #436]	@ (800566c <HAL_RCC_OscConfig+0x340>)
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	4b6c      	ldr	r3, [pc, #432]	@ (800566c <HAL_RCC_OscConfig+0x340>)
 80054bc:	2180      	movs	r1, #128	@ 0x80
 80054be:	0049      	lsls	r1, r1, #1
 80054c0:	430a      	orrs	r2, r1
 80054c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054c4:	f7fe f834 	bl	8003530 <HAL_GetTick>
 80054c8:	0003      	movs	r3, r0
 80054ca:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80054cc:	e008      	b.n	80054e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80054ce:	f7fe f82f 	bl	8003530 <HAL_GetTick>
 80054d2:	0002      	movs	r2, r0
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	2b02      	cmp	r3, #2
 80054da:	d901      	bls.n	80054e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	e13e      	b.n	800575e <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80054e0:	4b62      	ldr	r3, [pc, #392]	@ (800566c <HAL_RCC_OscConfig+0x340>)
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	2380      	movs	r3, #128	@ 0x80
 80054e6:	00db      	lsls	r3, r3, #3
 80054e8:	4013      	ands	r3, r2
 80054ea:	d0f0      	beq.n	80054ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054ec:	4b5f      	ldr	r3, [pc, #380]	@ (800566c <HAL_RCC_OscConfig+0x340>)
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	4a61      	ldr	r2, [pc, #388]	@ (8005678 <HAL_RCC_OscConfig+0x34c>)
 80054f2:	4013      	ands	r3, r2
 80054f4:	0019      	movs	r1, r3
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	695b      	ldr	r3, [r3, #20]
 80054fa:	021a      	lsls	r2, r3, #8
 80054fc:	4b5b      	ldr	r3, [pc, #364]	@ (800566c <HAL_RCC_OscConfig+0x340>)
 80054fe:	430a      	orrs	r2, r1
 8005500:	605a      	str	r2, [r3, #4]
 8005502:	e019      	b.n	8005538 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8005504:	4b59      	ldr	r3, [pc, #356]	@ (800566c <HAL_RCC_OscConfig+0x340>)
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	4b58      	ldr	r3, [pc, #352]	@ (800566c <HAL_RCC_OscConfig+0x340>)
 800550a:	4960      	ldr	r1, [pc, #384]	@ (800568c <HAL_RCC_OscConfig+0x360>)
 800550c:	400a      	ands	r2, r1
 800550e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005510:	f7fe f80e 	bl	8003530 <HAL_GetTick>
 8005514:	0003      	movs	r3, r0
 8005516:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005518:	e008      	b.n	800552c <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800551a:	f7fe f809 	bl	8003530 <HAL_GetTick>
 800551e:	0002      	movs	r2, r0
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	1ad3      	subs	r3, r2, r3
 8005524:	2b02      	cmp	r3, #2
 8005526:	d901      	bls.n	800552c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8005528:	2303      	movs	r3, #3
 800552a:	e118      	b.n	800575e <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800552c:	4b4f      	ldr	r3, [pc, #316]	@ (800566c <HAL_RCC_OscConfig+0x340>)
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	2380      	movs	r3, #128	@ 0x80
 8005532:	00db      	lsls	r3, r3, #3
 8005534:	4013      	ands	r3, r2
 8005536:	d1f0      	bne.n	800551a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2208      	movs	r2, #8
 800553e:	4013      	ands	r3, r2
 8005540:	d042      	beq.n	80055c8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8005542:	4b4a      	ldr	r3, [pc, #296]	@ (800566c <HAL_RCC_OscConfig+0x340>)
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	2238      	movs	r2, #56	@ 0x38
 8005548:	4013      	ands	r3, r2
 800554a:	2b18      	cmp	r3, #24
 800554c:	d105      	bne.n	800555a <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	699b      	ldr	r3, [r3, #24]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d138      	bne.n	80055c8 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e101      	b.n	800575e <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	699b      	ldr	r3, [r3, #24]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d019      	beq.n	8005596 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8005562:	4b42      	ldr	r3, [pc, #264]	@ (800566c <HAL_RCC_OscConfig+0x340>)
 8005564:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005566:	4b41      	ldr	r3, [pc, #260]	@ (800566c <HAL_RCC_OscConfig+0x340>)
 8005568:	2101      	movs	r1, #1
 800556a:	430a      	orrs	r2, r1
 800556c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800556e:	f7fd ffdf 	bl	8003530 <HAL_GetTick>
 8005572:	0003      	movs	r3, r0
 8005574:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8005576:	e008      	b.n	800558a <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8005578:	f7fd ffda 	bl	8003530 <HAL_GetTick>
 800557c:	0002      	movs	r2, r0
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	2b02      	cmp	r3, #2
 8005584:	d901      	bls.n	800558a <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	e0e9      	b.n	800575e <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800558a:	4b38      	ldr	r3, [pc, #224]	@ (800566c <HAL_RCC_OscConfig+0x340>)
 800558c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800558e:	2202      	movs	r2, #2
 8005590:	4013      	ands	r3, r2
 8005592:	d0f1      	beq.n	8005578 <HAL_RCC_OscConfig+0x24c>
 8005594:	e018      	b.n	80055c8 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005596:	4b35      	ldr	r3, [pc, #212]	@ (800566c <HAL_RCC_OscConfig+0x340>)
 8005598:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800559a:	4b34      	ldr	r3, [pc, #208]	@ (800566c <HAL_RCC_OscConfig+0x340>)
 800559c:	2101      	movs	r1, #1
 800559e:	438a      	bics	r2, r1
 80055a0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a2:	f7fd ffc5 	bl	8003530 <HAL_GetTick>
 80055a6:	0003      	movs	r3, r0
 80055a8:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80055aa:	e008      	b.n	80055be <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80055ac:	f7fd ffc0 	bl	8003530 <HAL_GetTick>
 80055b0:	0002      	movs	r2, r0
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d901      	bls.n	80055be <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	e0cf      	b.n	800575e <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80055be:	4b2b      	ldr	r3, [pc, #172]	@ (800566c <HAL_RCC_OscConfig+0x340>)
 80055c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055c2:	2202      	movs	r2, #2
 80055c4:	4013      	ands	r3, r2
 80055c6:	d1f1      	bne.n	80055ac <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2204      	movs	r2, #4
 80055ce:	4013      	ands	r3, r2
 80055d0:	d100      	bne.n	80055d4 <HAL_RCC_OscConfig+0x2a8>
 80055d2:	e084      	b.n	80056de <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055d4:	230f      	movs	r3, #15
 80055d6:	18fb      	adds	r3, r7, r3
 80055d8:	2200      	movs	r2, #0
 80055da:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80055dc:	4b23      	ldr	r3, [pc, #140]	@ (800566c <HAL_RCC_OscConfig+0x340>)
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	2238      	movs	r2, #56	@ 0x38
 80055e2:	4013      	ands	r3, r2
 80055e4:	2b20      	cmp	r3, #32
 80055e6:	d106      	bne.n	80055f6 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d000      	beq.n	80055f2 <HAL_RCC_OscConfig+0x2c6>
 80055f0:	e075      	b.n	80056de <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e0b3      	b.n	800575e <HAL_RCC_OscConfig+0x432>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d106      	bne.n	800560c <HAL_RCC_OscConfig+0x2e0>
 80055fe:	4b1b      	ldr	r3, [pc, #108]	@ (800566c <HAL_RCC_OscConfig+0x340>)
 8005600:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005602:	4b1a      	ldr	r3, [pc, #104]	@ (800566c <HAL_RCC_OscConfig+0x340>)
 8005604:	2101      	movs	r1, #1
 8005606:	430a      	orrs	r2, r1
 8005608:	65da      	str	r2, [r3, #92]	@ 0x5c
 800560a:	e01c      	b.n	8005646 <HAL_RCC_OscConfig+0x31a>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	2b05      	cmp	r3, #5
 8005612:	d10c      	bne.n	800562e <HAL_RCC_OscConfig+0x302>
 8005614:	4b15      	ldr	r3, [pc, #84]	@ (800566c <HAL_RCC_OscConfig+0x340>)
 8005616:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005618:	4b14      	ldr	r3, [pc, #80]	@ (800566c <HAL_RCC_OscConfig+0x340>)
 800561a:	2104      	movs	r1, #4
 800561c:	430a      	orrs	r2, r1
 800561e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005620:	4b12      	ldr	r3, [pc, #72]	@ (800566c <HAL_RCC_OscConfig+0x340>)
 8005622:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005624:	4b11      	ldr	r3, [pc, #68]	@ (800566c <HAL_RCC_OscConfig+0x340>)
 8005626:	2101      	movs	r1, #1
 8005628:	430a      	orrs	r2, r1
 800562a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800562c:	e00b      	b.n	8005646 <HAL_RCC_OscConfig+0x31a>
 800562e:	4b0f      	ldr	r3, [pc, #60]	@ (800566c <HAL_RCC_OscConfig+0x340>)
 8005630:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005632:	4b0e      	ldr	r3, [pc, #56]	@ (800566c <HAL_RCC_OscConfig+0x340>)
 8005634:	2101      	movs	r1, #1
 8005636:	438a      	bics	r2, r1
 8005638:	65da      	str	r2, [r3, #92]	@ 0x5c
 800563a:	4b0c      	ldr	r3, [pc, #48]	@ (800566c <HAL_RCC_OscConfig+0x340>)
 800563c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800563e:	4b0b      	ldr	r3, [pc, #44]	@ (800566c <HAL_RCC_OscConfig+0x340>)
 8005640:	2104      	movs	r1, #4
 8005642:	438a      	bics	r2, r1
 8005644:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d028      	beq.n	80056a0 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800564e:	f7fd ff6f 	bl	8003530 <HAL_GetTick>
 8005652:	0003      	movs	r3, r0
 8005654:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8005656:	e01d      	b.n	8005694 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005658:	f7fd ff6a 	bl	8003530 <HAL_GetTick>
 800565c:	0002      	movs	r2, r0
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	4a0b      	ldr	r2, [pc, #44]	@ (8005690 <HAL_RCC_OscConfig+0x364>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d915      	bls.n	8005694 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	e078      	b.n	800575e <HAL_RCC_OscConfig+0x432>
 800566c:	40021000 	.word	0x40021000
 8005670:	fffeffff 	.word	0xfffeffff
 8005674:	fffbffff 	.word	0xfffbffff
 8005678:	ffff80ff 	.word	0xffff80ff
 800567c:	ffffc7ff 	.word	0xffffc7ff
 8005680:	02dc6c00 	.word	0x02dc6c00
 8005684:	2000009c 	.word	0x2000009c
 8005688:	200000a0 	.word	0x200000a0
 800568c:	fffffeff 	.word	0xfffffeff
 8005690:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8005694:	4b34      	ldr	r3, [pc, #208]	@ (8005768 <HAL_RCC_OscConfig+0x43c>)
 8005696:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005698:	2202      	movs	r2, #2
 800569a:	4013      	ands	r3, r2
 800569c:	d0dc      	beq.n	8005658 <HAL_RCC_OscConfig+0x32c>
 800569e:	e013      	b.n	80056c8 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056a0:	f7fd ff46 	bl	8003530 <HAL_GetTick>
 80056a4:	0003      	movs	r3, r0
 80056a6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80056a8:	e009      	b.n	80056be <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056aa:	f7fd ff41 	bl	8003530 <HAL_GetTick>
 80056ae:	0002      	movs	r2, r0
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	1ad3      	subs	r3, r2, r3
 80056b4:	4a2d      	ldr	r2, [pc, #180]	@ (800576c <HAL_RCC_OscConfig+0x440>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d901      	bls.n	80056be <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e04f      	b.n	800575e <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80056be:	4b2a      	ldr	r3, [pc, #168]	@ (8005768 <HAL_RCC_OscConfig+0x43c>)
 80056c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056c2:	2202      	movs	r2, #2
 80056c4:	4013      	ands	r3, r2
 80056c6:	d1f0      	bne.n	80056aa <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80056c8:	230f      	movs	r3, #15
 80056ca:	18fb      	adds	r3, r7, r3
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d105      	bne.n	80056de <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80056d2:	4b25      	ldr	r3, [pc, #148]	@ (8005768 <HAL_RCC_OscConfig+0x43c>)
 80056d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80056d6:	4b24      	ldr	r3, [pc, #144]	@ (8005768 <HAL_RCC_OscConfig+0x43c>)
 80056d8:	4925      	ldr	r1, [pc, #148]	@ (8005770 <HAL_RCC_OscConfig+0x444>)
 80056da:	400a      	ands	r2, r1
 80056dc:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_CR_HSIUSB48ON)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	2210      	movs	r2, #16
 80056e4:	4013      	ands	r3, r2
 80056e6:	d039      	beq.n	800575c <HAL_RCC_OscConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	69db      	ldr	r3, [r3, #28]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d01b      	beq.n	8005728 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80056f0:	4b1d      	ldr	r3, [pc, #116]	@ (8005768 <HAL_RCC_OscConfig+0x43c>)
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	4b1c      	ldr	r3, [pc, #112]	@ (8005768 <HAL_RCC_OscConfig+0x43c>)
 80056f6:	2180      	movs	r1, #128	@ 0x80
 80056f8:	03c9      	lsls	r1, r1, #15
 80056fa:	430a      	orrs	r2, r1
 80056fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056fe:	f7fd ff17 	bl	8003530 <HAL_GetTick>
 8005702:	0003      	movs	r3, r0
 8005704:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 8005706:	e008      	b.n	800571a <HAL_RCC_OscConfig+0x3ee>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005708:	f7fd ff12 	bl	8003530 <HAL_GetTick>
 800570c:	0002      	movs	r2, r0
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	2b02      	cmp	r3, #2
 8005714:	d901      	bls.n	800571a <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 8005716:	2303      	movs	r3, #3
 8005718:	e021      	b.n	800575e <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 800571a:	4b13      	ldr	r3, [pc, #76]	@ (8005768 <HAL_RCC_OscConfig+0x43c>)
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	2380      	movs	r3, #128	@ 0x80
 8005720:	041b      	lsls	r3, r3, #16
 8005722:	4013      	ands	r3, r2
 8005724:	d0f0      	beq.n	8005708 <HAL_RCC_OscConfig+0x3dc>
 8005726:	e019      	b.n	800575c <HAL_RCC_OscConfig+0x430>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005728:	4b0f      	ldr	r3, [pc, #60]	@ (8005768 <HAL_RCC_OscConfig+0x43c>)
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	4b0e      	ldr	r3, [pc, #56]	@ (8005768 <HAL_RCC_OscConfig+0x43c>)
 800572e:	4911      	ldr	r1, [pc, #68]	@ (8005774 <HAL_RCC_OscConfig+0x448>)
 8005730:	400a      	ands	r2, r1
 8005732:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005734:	f7fd fefc 	bl	8003530 <HAL_GetTick>
 8005738:	0003      	movs	r3, r0
 800573a:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 800573c:	e008      	b.n	8005750 <HAL_RCC_OscConfig+0x424>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800573e:	f7fd fef7 	bl	8003530 <HAL_GetTick>
 8005742:	0002      	movs	r2, r0
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	1ad3      	subs	r3, r2, r3
 8005748:	2b02      	cmp	r3, #2
 800574a:	d901      	bls.n	8005750 <HAL_RCC_OscConfig+0x424>
        {
          return HAL_TIMEOUT;
 800574c:	2303      	movs	r3, #3
 800574e:	e006      	b.n	800575e <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 8005750:	4b05      	ldr	r3, [pc, #20]	@ (8005768 <HAL_RCC_OscConfig+0x43c>)
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	2380      	movs	r3, #128	@ 0x80
 8005756:	041b      	lsls	r3, r3, #16
 8005758:	4013      	ands	r3, r2
 800575a:	d1f0      	bne.n	800573e <HAL_RCC_OscConfig+0x412>
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 800575c:	2300      	movs	r3, #0
}
 800575e:	0018      	movs	r0, r3
 8005760:	46bd      	mov	sp, r7
 8005762:	b006      	add	sp, #24
 8005764:	bd80      	pop	{r7, pc}
 8005766:	46c0      	nop			@ (mov r8, r8)
 8005768:	40021000 	.word	0x40021000
 800576c:	00001388 	.word	0x00001388
 8005770:	efffffff 	.word	0xefffffff
 8005774:	ffbfffff 	.word	0xffbfffff

08005778 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d101      	bne.n	800578c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e0f6      	b.n	800597a <HAL_RCC_ClockConfig+0x202>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800578c:	4b7d      	ldr	r3, [pc, #500]	@ (8005984 <HAL_RCC_ClockConfig+0x20c>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2207      	movs	r2, #7
 8005792:	4013      	ands	r3, r2
 8005794:	683a      	ldr	r2, [r7, #0]
 8005796:	429a      	cmp	r2, r3
 8005798:	d91e      	bls.n	80057d8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800579a:	4b7a      	ldr	r3, [pc, #488]	@ (8005984 <HAL_RCC_ClockConfig+0x20c>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2207      	movs	r2, #7
 80057a0:	4393      	bics	r3, r2
 80057a2:	0019      	movs	r1, r3
 80057a4:	4b77      	ldr	r3, [pc, #476]	@ (8005984 <HAL_RCC_ClockConfig+0x20c>)
 80057a6:	683a      	ldr	r2, [r7, #0]
 80057a8:	430a      	orrs	r2, r1
 80057aa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80057ac:	f7fd fec0 	bl	8003530 <HAL_GetTick>
 80057b0:	0003      	movs	r3, r0
 80057b2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80057b4:	e009      	b.n	80057ca <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80057b6:	f7fd febb 	bl	8003530 <HAL_GetTick>
 80057ba:	0002      	movs	r2, r0
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	1ad3      	subs	r3, r2, r3
 80057c0:	4a71      	ldr	r2, [pc, #452]	@ (8005988 <HAL_RCC_ClockConfig+0x210>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d901      	bls.n	80057ca <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80057c6:	2303      	movs	r3, #3
 80057c8:	e0d7      	b.n	800597a <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80057ca:	4b6e      	ldr	r3, [pc, #440]	@ (8005984 <HAL_RCC_ClockConfig+0x20c>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2207      	movs	r2, #7
 80057d0:	4013      	ands	r3, r2
 80057d2:	683a      	ldr	r2, [r7, #0]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d1ee      	bne.n	80057b6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2202      	movs	r2, #2
 80057de:	4013      	ands	r3, r2
 80057e0:	d017      	beq.n	8005812 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	2204      	movs	r2, #4
 80057e8:	4013      	ands	r3, r2
 80057ea:	d008      	beq.n	80057fe <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80057ec:	4b67      	ldr	r3, [pc, #412]	@ (800598c <HAL_RCC_ClockConfig+0x214>)
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	4a67      	ldr	r2, [pc, #412]	@ (8005990 <HAL_RCC_ClockConfig+0x218>)
 80057f2:	401a      	ands	r2, r3
 80057f4:	4b65      	ldr	r3, [pc, #404]	@ (800598c <HAL_RCC_ClockConfig+0x214>)
 80057f6:	21b0      	movs	r1, #176	@ 0xb0
 80057f8:	0109      	lsls	r1, r1, #4
 80057fa:	430a      	orrs	r2, r1
 80057fc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057fe:	4b63      	ldr	r3, [pc, #396]	@ (800598c <HAL_RCC_ClockConfig+0x214>)
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	4a64      	ldr	r2, [pc, #400]	@ (8005994 <HAL_RCC_ClockConfig+0x21c>)
 8005804:	4013      	ands	r3, r2
 8005806:	0019      	movs	r1, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	68da      	ldr	r2, [r3, #12]
 800580c:	4b5f      	ldr	r3, [pc, #380]	@ (800598c <HAL_RCC_ClockConfig+0x214>)
 800580e:	430a      	orrs	r2, r1
 8005810:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	2201      	movs	r2, #1
 8005818:	4013      	ands	r3, r2
 800581a:	d100      	bne.n	800581e <HAL_RCC_ClockConfig+0xa6>
 800581c:	e061      	b.n	80058e2 <HAL_RCC_ClockConfig+0x16a>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 800581e:	4b5b      	ldr	r3, [pc, #364]	@ (800598c <HAL_RCC_ClockConfig+0x214>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	221c      	movs	r2, #28
 8005824:	4393      	bics	r3, r2
 8005826:	0019      	movs	r1, r3
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	689a      	ldr	r2, [r3, #8]
 800582c:	4b57      	ldr	r3, [pc, #348]	@ (800598c <HAL_RCC_ClockConfig+0x214>)
 800582e:	430a      	orrs	r2, r1
 8005830:	601a      	str	r2, [r3, #0]
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	2b01      	cmp	r3, #1
 8005838:	d107      	bne.n	800584a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800583a:	4b54      	ldr	r3, [pc, #336]	@ (800598c <HAL_RCC_ClockConfig+0x214>)
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	2380      	movs	r3, #128	@ 0x80
 8005840:	029b      	lsls	r3, r3, #10
 8005842:	4013      	ands	r3, r2
 8005844:	d12b      	bne.n	800589e <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e097      	b.n	800597a <HAL_RCC_ClockConfig+0x202>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d107      	bne.n	8005862 <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005852:	4b4e      	ldr	r3, [pc, #312]	@ (800598c <HAL_RCC_ClockConfig+0x214>)
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	2380      	movs	r3, #128	@ 0x80
 8005858:	00db      	lsls	r3, r3, #3
 800585a:	4013      	ands	r3, r2
 800585c:	d11f      	bne.n	800589e <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e08b      	b.n	800597a <HAL_RCC_ClockConfig+0x202>
      }
    }
#if defined(RCC_HSI48_SUPPORT)
    /* HSIUSB48 is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSIUSB48)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	2b02      	cmp	r3, #2
 8005868:	d107      	bne.n	800587a <HAL_RCC_ClockConfig+0x102>
    {
      /* Check the HSIUSB48 ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 800586a:	4b48      	ldr	r3, [pc, #288]	@ (800598c <HAL_RCC_ClockConfig+0x214>)
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	2380      	movs	r3, #128	@ 0x80
 8005870:	041b      	lsls	r3, r3, #16
 8005872:	4013      	ands	r3, r2
 8005874:	d113      	bne.n	800589e <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e07f      	b.n	800597a <HAL_RCC_ClockConfig+0x202>
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	2b03      	cmp	r3, #3
 8005880:	d106      	bne.n	8005890 <HAL_RCC_ClockConfig+0x118>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8005882:	4b42      	ldr	r3, [pc, #264]	@ (800598c <HAL_RCC_ClockConfig+0x214>)
 8005884:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005886:	2202      	movs	r2, #2
 8005888:	4013      	ands	r3, r2
 800588a:	d108      	bne.n	800589e <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	e074      	b.n	800597a <HAL_RCC_ClockConfig+0x202>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8005890:	4b3e      	ldr	r3, [pc, #248]	@ (800598c <HAL_RCC_ClockConfig+0x214>)
 8005892:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005894:	2202      	movs	r2, #2
 8005896:	4013      	ands	r3, r2
 8005898:	d101      	bne.n	800589e <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e06d      	b.n	800597a <HAL_RCC_ClockConfig+0x202>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800589e:	4b3b      	ldr	r3, [pc, #236]	@ (800598c <HAL_RCC_ClockConfig+0x214>)
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	2207      	movs	r2, #7
 80058a4:	4393      	bics	r3, r2
 80058a6:	0019      	movs	r1, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	685a      	ldr	r2, [r3, #4]
 80058ac:	4b37      	ldr	r3, [pc, #220]	@ (800598c <HAL_RCC_ClockConfig+0x214>)
 80058ae:	430a      	orrs	r2, r1
 80058b0:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058b2:	f7fd fe3d 	bl	8003530 <HAL_GetTick>
 80058b6:	0003      	movs	r3, r0
 80058b8:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058ba:	e009      	b.n	80058d0 <HAL_RCC_ClockConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80058bc:	f7fd fe38 	bl	8003530 <HAL_GetTick>
 80058c0:	0002      	movs	r2, r0
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	4a30      	ldr	r2, [pc, #192]	@ (8005988 <HAL_RCC_ClockConfig+0x210>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d901      	bls.n	80058d0 <HAL_RCC_ClockConfig+0x158>
      {
        return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e054      	b.n	800597a <HAL_RCC_ClockConfig+0x202>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058d0:	4b2e      	ldr	r3, [pc, #184]	@ (800598c <HAL_RCC_ClockConfig+0x214>)
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	2238      	movs	r2, #56	@ 0x38
 80058d6:	401a      	ands	r2, r3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	00db      	lsls	r3, r3, #3
 80058de:	429a      	cmp	r2, r3
 80058e0:	d1ec      	bne.n	80058bc <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80058e2:	4b28      	ldr	r3, [pc, #160]	@ (8005984 <HAL_RCC_ClockConfig+0x20c>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2207      	movs	r2, #7
 80058e8:	4013      	ands	r3, r2
 80058ea:	683a      	ldr	r2, [r7, #0]
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d21e      	bcs.n	800592e <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058f0:	4b24      	ldr	r3, [pc, #144]	@ (8005984 <HAL_RCC_ClockConfig+0x20c>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2207      	movs	r2, #7
 80058f6:	4393      	bics	r3, r2
 80058f8:	0019      	movs	r1, r3
 80058fa:	4b22      	ldr	r3, [pc, #136]	@ (8005984 <HAL_RCC_ClockConfig+0x20c>)
 80058fc:	683a      	ldr	r2, [r7, #0]
 80058fe:	430a      	orrs	r2, r1
 8005900:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005902:	f7fd fe15 	bl	8003530 <HAL_GetTick>
 8005906:	0003      	movs	r3, r0
 8005908:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800590a:	e009      	b.n	8005920 <HAL_RCC_ClockConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800590c:	f7fd fe10 	bl	8003530 <HAL_GetTick>
 8005910:	0002      	movs	r2, r0
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	4a1c      	ldr	r2, [pc, #112]	@ (8005988 <HAL_RCC_ClockConfig+0x210>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d901      	bls.n	8005920 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_TIMEOUT;
 800591c:	2303      	movs	r3, #3
 800591e:	e02c      	b.n	800597a <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005920:	4b18      	ldr	r3, [pc, #96]	@ (8005984 <HAL_RCC_ClockConfig+0x20c>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2207      	movs	r2, #7
 8005926:	4013      	ands	r3, r2
 8005928:	683a      	ldr	r2, [r7, #0]
 800592a:	429a      	cmp	r2, r3
 800592c:	d1ee      	bne.n	800590c <HAL_RCC_ClockConfig+0x194>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2204      	movs	r2, #4
 8005934:	4013      	ands	r3, r2
 8005936:	d009      	beq.n	800594c <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005938:	4b14      	ldr	r3, [pc, #80]	@ (800598c <HAL_RCC_ClockConfig+0x214>)
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	4a16      	ldr	r2, [pc, #88]	@ (8005998 <HAL_RCC_ClockConfig+0x220>)
 800593e:	4013      	ands	r3, r2
 8005940:	0019      	movs	r1, r3
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	691a      	ldr	r2, [r3, #16]
 8005946:	4b11      	ldr	r3, [pc, #68]	@ (800598c <HAL_RCC_ClockConfig+0x214>)
 8005948:	430a      	orrs	r2, r1
 800594a:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800594c:	f000 f82c 	bl	80059a8 <HAL_RCC_GetSysClockFreq>
 8005950:	0001      	movs	r1, r0
 8005952:	4b0e      	ldr	r3, [pc, #56]	@ (800598c <HAL_RCC_ClockConfig+0x214>)
 8005954:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005956:	0a1b      	lsrs	r3, r3, #8
 8005958:	220f      	movs	r2, #15
 800595a:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800595c:	4b0f      	ldr	r3, [pc, #60]	@ (800599c <HAL_RCC_ClockConfig+0x224>)
 800595e:	0092      	lsls	r2, r2, #2
 8005960:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005962:	221f      	movs	r2, #31
 8005964:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8005966:	000a      	movs	r2, r1
 8005968:	40da      	lsrs	r2, r3
 800596a:	4b0d      	ldr	r3, [pc, #52]	@ (80059a0 <HAL_RCC_ClockConfig+0x228>)
 800596c:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800596e:	4b0d      	ldr	r3, [pc, #52]	@ (80059a4 <HAL_RCC_ClockConfig+0x22c>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	0018      	movs	r0, r3
 8005974:	f7fd fd80 	bl	8003478 <HAL_InitTick>
 8005978:	0003      	movs	r3, r0
}
 800597a:	0018      	movs	r0, r3
 800597c:	46bd      	mov	sp, r7
 800597e:	b004      	add	sp, #16
 8005980:	bd80      	pop	{r7, pc}
 8005982:	46c0      	nop			@ (mov r8, r8)
 8005984:	40022000 	.word	0x40022000
 8005988:	00001388 	.word	0x00001388
 800598c:	40021000 	.word	0x40021000
 8005990:	ffff84ff 	.word	0xffff84ff
 8005994:	fffff0ff 	.word	0xfffff0ff
 8005998:	ffff8fff 	.word	0xffff8fff
 800599c:	080095a8 	.word	0x080095a8
 80059a0:	2000009c 	.word	0x2000009c
 80059a4:	200000a0 	.word	0x200000a0

080059a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 80059ae:	4b27      	ldr	r3, [pc, #156]	@ (8005a4c <HAL_RCC_GetSysClockFreq+0xa4>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	089b      	lsrs	r3, r3, #2
 80059b4:	2207      	movs	r2, #7
 80059b6:	4013      	ands	r3, r2
 80059b8:	3301      	adds	r3, #1
 80059ba:	60bb      	str	r3, [r7, #8]
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80059bc:	4b23      	ldr	r3, [pc, #140]	@ (8005a4c <HAL_RCC_GetSysClockFreq+0xa4>)
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	2238      	movs	r2, #56	@ 0x38
 80059c2:	4013      	ands	r3, r2
 80059c4:	d10f      	bne.n	80059e6 <HAL_RCC_GetSysClockFreq+0x3e>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80059c6:	4b21      	ldr	r3, [pc, #132]	@ (8005a4c <HAL_RCC_GetSysClockFreq+0xa4>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	0adb      	lsrs	r3, r3, #11
 80059cc:	2207      	movs	r2, #7
 80059ce:	4013      	ands	r3, r2
 80059d0:	2201      	movs	r2, #1
 80059d2:	409a      	lsls	r2, r3
 80059d4:	0013      	movs	r3, r2
 80059d6:	607b      	str	r3, [r7, #4]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80059d8:	6879      	ldr	r1, [r7, #4]
 80059da:	481d      	ldr	r0, [pc, #116]	@ (8005a50 <HAL_RCC_GetSysClockFreq+0xa8>)
 80059dc:	f7fa fb94 	bl	8000108 <__udivsi3>
 80059e0:	0003      	movs	r3, r0
 80059e2:	60fb      	str	r3, [r7, #12]
 80059e4:	e027      	b.n	8005a36 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80059e6:	4b19      	ldr	r3, [pc, #100]	@ (8005a4c <HAL_RCC_GetSysClockFreq+0xa4>)
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	2238      	movs	r2, #56	@ 0x38
 80059ec:	4013      	ands	r3, r2
 80059ee:	2b08      	cmp	r3, #8
 80059f0:	d102      	bne.n	80059f8 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80059f2:	4b18      	ldr	r3, [pc, #96]	@ (8005a54 <HAL_RCC_GetSysClockFreq+0xac>)
 80059f4:	60fb      	str	r3, [r7, #12]
 80059f6:	e01e      	b.n	8005a36 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80059f8:	4b14      	ldr	r3, [pc, #80]	@ (8005a4c <HAL_RCC_GetSysClockFreq+0xa4>)
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	2238      	movs	r2, #56	@ 0x38
 80059fe:	4013      	ands	r3, r2
 8005a00:	2b20      	cmp	r3, #32
 8005a02:	d103      	bne.n	8005a0c <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005a04:	2380      	movs	r3, #128	@ 0x80
 8005a06:	021b      	lsls	r3, r3, #8
 8005a08:	60fb      	str	r3, [r7, #12]
 8005a0a:	e014      	b.n	8005a36 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8005a0c:	4b0f      	ldr	r3, [pc, #60]	@ (8005a4c <HAL_RCC_GetSysClockFreq+0xa4>)
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	2238      	movs	r2, #56	@ 0x38
 8005a12:	4013      	ands	r3, r2
 8005a14:	2b18      	cmp	r3, #24
 8005a16:	d103      	bne.n	8005a20 <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005a18:	23fa      	movs	r3, #250	@ 0xfa
 8005a1a:	01db      	lsls	r3, r3, #7
 8005a1c:	60fb      	str	r3, [r7, #12]
 8005a1e:	e00a      	b.n	8005a36 <HAL_RCC_GetSysClockFreq+0x8e>
  }
#if defined(RCC_HSI48_SUPPORT)
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI48)
 8005a20:	4b0a      	ldr	r3, [pc, #40]	@ (8005a4c <HAL_RCC_GetSysClockFreq+0xa4>)
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	2238      	movs	r2, #56	@ 0x38
 8005a26:	4013      	ands	r3, r2
 8005a28:	2b10      	cmp	r3, #16
 8005a2a:	d102      	bne.n	8005a32 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    /* HSI48 used as system clock source */
    sysclockfreq = HSI48_VALUE;
 8005a2c:	4b08      	ldr	r3, [pc, #32]	@ (8005a50 <HAL_RCC_GetSysClockFreq+0xa8>)
 8005a2e:	60fb      	str	r3, [r7, #12]
 8005a30:	e001      	b.n	8005a36 <HAL_RCC_GetSysClockFreq+0x8e>
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 8005a32:	2300      	movs	r3, #0
 8005a34:	60fb      	str	r3, [r7, #12]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 8005a36:	68b9      	ldr	r1, [r7, #8]
 8005a38:	68f8      	ldr	r0, [r7, #12]
 8005a3a:	f7fa fb65 	bl	8000108 <__udivsi3>
 8005a3e:	0003      	movs	r3, r0
 8005a40:	60fb      	str	r3, [r7, #12]
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 8005a42:	68fb      	ldr	r3, [r7, #12]
}
 8005a44:	0018      	movs	r0, r3
 8005a46:	46bd      	mov	sp, r7
 8005a48:	b004      	add	sp, #16
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	40021000 	.word	0x40021000
 8005a50:	02dc6c00 	.word	0x02dc6c00
 8005a54:	007a1200 	.word	0x007a1200

08005a58 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8005a5c:	f7ff ffa4 	bl	80059a8 <HAL_RCC_GetSysClockFreq>
 8005a60:	0001      	movs	r1, r0
 8005a62:	4b09      	ldr	r3, [pc, #36]	@ (8005a88 <HAL_RCC_GetHCLKFreq+0x30>)
 8005a64:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005a66:	0a1b      	lsrs	r3, r3, #8
 8005a68:	220f      	movs	r2, #15
 8005a6a:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8005a6c:	4b07      	ldr	r3, [pc, #28]	@ (8005a8c <HAL_RCC_GetHCLKFreq+0x34>)
 8005a6e:	0092      	lsls	r2, r2, #2
 8005a70:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005a72:	221f      	movs	r2, #31
 8005a74:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8005a76:	000a      	movs	r2, r1
 8005a78:	40da      	lsrs	r2, r3
 8005a7a:	4b05      	ldr	r3, [pc, #20]	@ (8005a90 <HAL_RCC_GetHCLKFreq+0x38>)
 8005a7c:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 8005a7e:	4b04      	ldr	r3, [pc, #16]	@ (8005a90 <HAL_RCC_GetHCLKFreq+0x38>)
 8005a80:	681b      	ldr	r3, [r3, #0]
}
 8005a82:	0018      	movs	r0, r3
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}
 8005a88:	40021000 	.word	0x40021000
 8005a8c:	080095a8 	.word	0x080095a8
 8005a90:	2000009c 	.word	0x2000009c

08005a94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8005a98:	f7ff ffde 	bl	8005a58 <HAL_RCC_GetHCLKFreq>
 8005a9c:	0001      	movs	r1, r0
 8005a9e:	4b07      	ldr	r3, [pc, #28]	@ (8005abc <HAL_RCC_GetPCLK1Freq+0x28>)
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	0b1b      	lsrs	r3, r3, #12
 8005aa4:	2207      	movs	r2, #7
 8005aa6:	401a      	ands	r2, r3
 8005aa8:	4b05      	ldr	r3, [pc, #20]	@ (8005ac0 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8005aaa:	0092      	lsls	r2, r2, #2
 8005aac:	58d3      	ldr	r3, [r2, r3]
 8005aae:	221f      	movs	r2, #31
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	40d9      	lsrs	r1, r3
 8005ab4:	000b      	movs	r3, r1
}
 8005ab6:	0018      	movs	r0, r3
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	40021000 	.word	0x40021000
 8005ac0:	080095e8 	.word	0x080095e8

08005ac4 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b086      	sub	sp, #24
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005acc:	2313      	movs	r3, #19
 8005ace:	18fb      	adds	r3, r7, r3
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ad4:	2312      	movs	r3, #18
 8005ad6:	18fb      	adds	r3, r7, r3
 8005ad8:	2200      	movs	r2, #0
 8005ada:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	2240      	movs	r2, #64	@ 0x40
 8005ae2:	4013      	ands	r3, r2
 8005ae4:	d100      	bne.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x24>
 8005ae6:	e079      	b.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ae8:	2011      	movs	r0, #17
 8005aea:	183b      	adds	r3, r7, r0
 8005aec:	2200      	movs	r2, #0
 8005aee:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005af0:	4b6a      	ldr	r3, [pc, #424]	@ (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005af2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005af4:	2380      	movs	r3, #128	@ 0x80
 8005af6:	055b      	lsls	r3, r3, #21
 8005af8:	4013      	ands	r3, r2
 8005afa:	d110      	bne.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005afc:	4b67      	ldr	r3, [pc, #412]	@ (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005afe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b00:	4b66      	ldr	r3, [pc, #408]	@ (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005b02:	2180      	movs	r1, #128	@ 0x80
 8005b04:	0549      	lsls	r1, r1, #21
 8005b06:	430a      	orrs	r2, r1
 8005b08:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005b0a:	4b64      	ldr	r3, [pc, #400]	@ (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005b0c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b0e:	2380      	movs	r3, #128	@ 0x80
 8005b10:	055b      	lsls	r3, r3, #21
 8005b12:	4013      	ands	r3, r2
 8005b14:	60bb      	str	r3, [r7, #8]
 8005b16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b18:	183b      	adds	r3, r7, r0
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8005b1e:	4b5f      	ldr	r3, [pc, #380]	@ (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005b20:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005b22:	23c0      	movs	r3, #192	@ 0xc0
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	4013      	ands	r3, r2
 8005b28:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d019      	beq.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	69db      	ldr	r3, [r3, #28]
 8005b34:	697a      	ldr	r2, [r7, #20]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d014      	beq.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8005b3a:	4b58      	ldr	r3, [pc, #352]	@ (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005b3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b3e:	4a58      	ldr	r2, [pc, #352]	@ (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005b40:	4013      	ands	r3, r2
 8005b42:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b44:	4b55      	ldr	r3, [pc, #340]	@ (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005b46:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005b48:	4b54      	ldr	r3, [pc, #336]	@ (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005b4a:	2180      	movs	r1, #128	@ 0x80
 8005b4c:	0249      	lsls	r1, r1, #9
 8005b4e:	430a      	orrs	r2, r1
 8005b50:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b52:	4b52      	ldr	r3, [pc, #328]	@ (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005b54:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005b56:	4b51      	ldr	r3, [pc, #324]	@ (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005b58:	4952      	ldr	r1, [pc, #328]	@ (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005b5a:	400a      	ands	r2, r1
 8005b5c:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8005b5e:	4b4f      	ldr	r3, [pc, #316]	@ (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005b60:	697a      	ldr	r2, [r7, #20]
 8005b62:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	2201      	movs	r2, #1
 8005b68:	4013      	ands	r3, r2
 8005b6a:	d016      	beq.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b6c:	f7fd fce0 	bl	8003530 <HAL_GetTick>
 8005b70:	0003      	movs	r3, r0
 8005b72:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8005b74:	e00c      	b.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b76:	f7fd fcdb 	bl	8003530 <HAL_GetTick>
 8005b7a:	0002      	movs	r2, r0
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	1ad3      	subs	r3, r2, r3
 8005b80:	4a49      	ldr	r2, [pc, #292]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d904      	bls.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 8005b86:	2313      	movs	r3, #19
 8005b88:	18fb      	adds	r3, r7, r3
 8005b8a:	2203      	movs	r2, #3
 8005b8c:	701a      	strb	r2, [r3, #0]
          break;
 8005b8e:	e004      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8005b90:	4b42      	ldr	r3, [pc, #264]	@ (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005b92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b94:	2202      	movs	r2, #2
 8005b96:	4013      	ands	r3, r2
 8005b98:	d0ed      	beq.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 8005b9a:	2313      	movs	r3, #19
 8005b9c:	18fb      	adds	r3, r7, r3
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d10a      	bne.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ba4:	4b3d      	ldr	r3, [pc, #244]	@ (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005ba6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ba8:	4a3d      	ldr	r2, [pc, #244]	@ (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005baa:	4013      	ands	r3, r2
 8005bac:	0019      	movs	r1, r3
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	69da      	ldr	r2, [r3, #28]
 8005bb2:	4b3a      	ldr	r3, [pc, #232]	@ (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005bb4:	430a      	orrs	r2, r1
 8005bb6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005bb8:	e005      	b.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bba:	2312      	movs	r3, #18
 8005bbc:	18fb      	adds	r3, r7, r3
 8005bbe:	2213      	movs	r2, #19
 8005bc0:	18ba      	adds	r2, r7, r2
 8005bc2:	7812      	ldrb	r2, [r2, #0]
 8005bc4:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005bc6:	2311      	movs	r3, #17
 8005bc8:	18fb      	adds	r3, r7, r3
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d105      	bne.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bd0:	4b32      	ldr	r3, [pc, #200]	@ (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005bd2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005bd4:	4b31      	ldr	r3, [pc, #196]	@ (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005bd6:	4935      	ldr	r1, [pc, #212]	@ (8005cac <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8005bd8:	400a      	ands	r2, r1
 8005bda:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	2201      	movs	r2, #1
 8005be2:	4013      	ands	r3, r2
 8005be4:	d009      	beq.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005be6:	4b2d      	ldr	r3, [pc, #180]	@ (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005be8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bea:	2203      	movs	r2, #3
 8005bec:	4393      	bics	r3, r2
 8005bee:	0019      	movs	r1, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	689a      	ldr	r2, [r3, #8]
 8005bf4:	4b29      	ldr	r3, [pc, #164]	@ (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005bf6:	430a      	orrs	r2, r1
 8005bf8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	2202      	movs	r2, #2
 8005c00:	4013      	ands	r3, r2
 8005c02:	d009      	beq.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c04:	4b25      	ldr	r3, [pc, #148]	@ (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005c06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c08:	4a29      	ldr	r2, [pc, #164]	@ (8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	0019      	movs	r1, r3
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	68da      	ldr	r2, [r3, #12]
 8005c12:	4b22      	ldr	r3, [pc, #136]	@ (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005c14:	430a      	orrs	r2, r1
 8005c16:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2220      	movs	r2, #32
 8005c1e:	4013      	ands	r3, r2
 8005c20:	d008      	beq.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005c22:	4b1e      	ldr	r3, [pc, #120]	@ (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005c24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	0899      	lsrs	r1, r3, #2
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	699a      	ldr	r2, [r3, #24]
 8005c2e:	4b1b      	ldr	r3, [pc, #108]	@ (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005c30:	430a      	orrs	r2, r1
 8005c32:	655a      	str	r2, [r3, #84]	@ 0x54

  }
#if defined (USB_DRD_FS)
  /*-------------------------- USB clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2208      	movs	r2, #8
 8005c3a:	4013      	ands	r3, r2
 8005c3c:	d009      	beq.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005c3e:	4b17      	ldr	r3, [pc, #92]	@ (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005c40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c42:	4a1c      	ldr	r2, [pc, #112]	@ (8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005c44:	4013      	ands	r3, r2
 8005c46:	0019      	movs	r1, r3
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	695a      	ldr	r2, [r3, #20]
 8005c4c:	4b13      	ldr	r3, [pc, #76]	@ (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005c4e:	430a      	orrs	r2, r1
 8005c50:	659a      	str	r2, [r3, #88]	@ 0x58

  }
#endif /* USB_DRD_FS */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	2204      	movs	r2, #4
 8005c58:	4013      	ands	r3, r2
 8005c5a:	d009      	beq.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005c5c:	4b0f      	ldr	r3, [pc, #60]	@ (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005c5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c60:	4a15      	ldr	r2, [pc, #84]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8005c62:	4013      	ands	r3, r2
 8005c64:	0019      	movs	r1, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	691a      	ldr	r2, [r3, #16]
 8005c6a:	4b0c      	ldr	r3, [pc, #48]	@ (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005c6c:	430a      	orrs	r2, r1
 8005c6e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	2280      	movs	r2, #128	@ 0x80
 8005c76:	4013      	ands	r3, r2
 8005c78:	d009      	beq.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8005c7a:	4b08      	ldr	r3, [pc, #32]	@ (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	22e0      	movs	r2, #224	@ 0xe0
 8005c80:	4393      	bics	r3, r2
 8005c82:	0019      	movs	r1, r3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	685a      	ldr	r2, [r3, #4]
 8005c88:	4b04      	ldr	r3, [pc, #16]	@ (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005c8a:	430a      	orrs	r2, r1
 8005c8c:	601a      	str	r2, [r3, #0]
  }
  return status;
 8005c8e:	2312      	movs	r3, #18
 8005c90:	18fb      	adds	r3, r7, r3
 8005c92:	781b      	ldrb	r3, [r3, #0]
}
 8005c94:	0018      	movs	r0, r3
 8005c96:	46bd      	mov	sp, r7
 8005c98:	b006      	add	sp, #24
 8005c9a:	bd80      	pop	{r7, pc}
 8005c9c:	40021000 	.word	0x40021000
 8005ca0:	fffffcff 	.word	0xfffffcff
 8005ca4:	fffeffff 	.word	0xfffeffff
 8005ca8:	00001388 	.word	0x00001388
 8005cac:	efffffff 	.word	0xefffffff
 8005cb0:	ffffcfff 	.word	0xffffcfff
 8005cb4:	ffffefff 	.word	0xffffefff
 8005cb8:	ffff3fff 	.word	0xffff3fff

08005cbc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d101      	bne.n	8005cce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e0a8      	b.n	8005e20 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d109      	bne.n	8005cea <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	685a      	ldr	r2, [r3, #4]
 8005cda:	2382      	movs	r3, #130	@ 0x82
 8005cdc:	005b      	lsls	r3, r3, #1
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d009      	beq.n	8005cf6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	61da      	str	r2, [r3, #28]
 8005ce8:	e005      	b.n	8005cf6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	225d      	movs	r2, #93	@ 0x5d
 8005d00:	5c9b      	ldrb	r3, [r3, r2]
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d107      	bne.n	8005d18 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	225c      	movs	r2, #92	@ 0x5c
 8005d0c:	2100      	movs	r1, #0
 8005d0e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	0018      	movs	r0, r3
 8005d14:	f7fc fffa 	bl	8002d0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	225d      	movs	r2, #93	@ 0x5d
 8005d1c:	2102      	movs	r1, #2
 8005d1e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2140      	movs	r1, #64	@ 0x40
 8005d2c:	438a      	bics	r2, r1
 8005d2e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	68da      	ldr	r2, [r3, #12]
 8005d34:	23e0      	movs	r3, #224	@ 0xe0
 8005d36:	00db      	lsls	r3, r3, #3
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d902      	bls.n	8005d42 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	60fb      	str	r3, [r7, #12]
 8005d40:	e002      	b.n	8005d48 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005d42:	2380      	movs	r3, #128	@ 0x80
 8005d44:	015b      	lsls	r3, r3, #5
 8005d46:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	68da      	ldr	r2, [r3, #12]
 8005d4c:	23f0      	movs	r3, #240	@ 0xf0
 8005d4e:	011b      	lsls	r3, r3, #4
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d008      	beq.n	8005d66 <HAL_SPI_Init+0xaa>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	68da      	ldr	r2, [r3, #12]
 8005d58:	23e0      	movs	r3, #224	@ 0xe0
 8005d5a:	00db      	lsls	r3, r3, #3
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d002      	beq.n	8005d66 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	685a      	ldr	r2, [r3, #4]
 8005d6a:	2382      	movs	r3, #130	@ 0x82
 8005d6c:	005b      	lsls	r3, r3, #1
 8005d6e:	401a      	ands	r2, r3
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6899      	ldr	r1, [r3, #8]
 8005d74:	2384      	movs	r3, #132	@ 0x84
 8005d76:	021b      	lsls	r3, r3, #8
 8005d78:	400b      	ands	r3, r1
 8005d7a:	431a      	orrs	r2, r3
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	691b      	ldr	r3, [r3, #16]
 8005d80:	2102      	movs	r1, #2
 8005d82:	400b      	ands	r3, r1
 8005d84:	431a      	orrs	r2, r3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	695b      	ldr	r3, [r3, #20]
 8005d8a:	2101      	movs	r1, #1
 8005d8c:	400b      	ands	r3, r1
 8005d8e:	431a      	orrs	r2, r3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6999      	ldr	r1, [r3, #24]
 8005d94:	2380      	movs	r3, #128	@ 0x80
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	400b      	ands	r3, r1
 8005d9a:	431a      	orrs	r2, r3
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	69db      	ldr	r3, [r3, #28]
 8005da0:	2138      	movs	r1, #56	@ 0x38
 8005da2:	400b      	ands	r3, r1
 8005da4:	431a      	orrs	r2, r3
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a1b      	ldr	r3, [r3, #32]
 8005daa:	2180      	movs	r1, #128	@ 0x80
 8005dac:	400b      	ands	r3, r1
 8005dae:	431a      	orrs	r2, r3
 8005db0:	0011      	movs	r1, r2
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005db6:	2380      	movs	r3, #128	@ 0x80
 8005db8:	019b      	lsls	r3, r3, #6
 8005dba:	401a      	ands	r2, r3
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	430a      	orrs	r2, r1
 8005dc2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	699b      	ldr	r3, [r3, #24]
 8005dc8:	0c1b      	lsrs	r3, r3, #16
 8005dca:	2204      	movs	r2, #4
 8005dcc:	401a      	ands	r2, r3
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dd2:	2110      	movs	r1, #16
 8005dd4:	400b      	ands	r3, r1
 8005dd6:	431a      	orrs	r2, r3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ddc:	2108      	movs	r1, #8
 8005dde:	400b      	ands	r3, r1
 8005de0:	431a      	orrs	r2, r3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	68d9      	ldr	r1, [r3, #12]
 8005de6:	23f0      	movs	r3, #240	@ 0xf0
 8005de8:	011b      	lsls	r3, r3, #4
 8005dea:	400b      	ands	r3, r1
 8005dec:	431a      	orrs	r2, r3
 8005dee:	0011      	movs	r1, r2
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	2380      	movs	r3, #128	@ 0x80
 8005df4:	015b      	lsls	r3, r3, #5
 8005df6:	401a      	ands	r2, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	430a      	orrs	r2, r1
 8005dfe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	69da      	ldr	r2, [r3, #28]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4907      	ldr	r1, [pc, #28]	@ (8005e28 <HAL_SPI_Init+0x16c>)
 8005e0c:	400a      	ands	r2, r1
 8005e0e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	225d      	movs	r2, #93	@ 0x5d
 8005e1a:	2101      	movs	r1, #1
 8005e1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e1e:	2300      	movs	r3, #0
}
 8005e20:	0018      	movs	r0, r3
 8005e22:	46bd      	mov	sp, r7
 8005e24:	b004      	add	sp, #16
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	fffff7ff 	.word	0xfffff7ff

08005e2c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b08a      	sub	sp, #40	@ 0x28
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	60f8      	str	r0, [r7, #12]
 8005e34:	60b9      	str	r1, [r7, #8]
 8005e36:	607a      	str	r2, [r7, #4]
 8005e38:	001a      	movs	r2, r3
 8005e3a:	1cbb      	adds	r3, r7, #2
 8005e3c:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e42:	f7fd fb75 	bl	8003530 <HAL_GetTick>
 8005e46:	0003      	movs	r3, r0
 8005e48:	623b      	str	r3, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005e4a:	201f      	movs	r0, #31
 8005e4c:	183b      	adds	r3, r7, r0
 8005e4e:	68fa      	ldr	r2, [r7, #12]
 8005e50:	215d      	movs	r1, #93	@ 0x5d
 8005e52:	5c52      	ldrb	r2, [r2, r1]
 8005e54:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005e5c:	2316      	movs	r3, #22
 8005e5e:	18fb      	adds	r3, r7, r3
 8005e60:	1cba      	adds	r2, r7, #2
 8005e62:	8812      	ldrh	r2, [r2, #0]
 8005e64:	801a      	strh	r2, [r3, #0]
  initial_RxXferCount = Size;
 8005e66:	2314      	movs	r3, #20
 8005e68:	18fb      	adds	r3, r7, r3
 8005e6a:	1cba      	adds	r2, r7, #2
 8005e6c:	8812      	ldrh	r2, [r2, #0]
 8005e6e:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005e70:	183b      	adds	r3, r7, r0
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d00e      	beq.n	8005e96 <HAL_SPI_TransmitReceive+0x6a>
 8005e78:	69ba      	ldr	r2, [r7, #24]
 8005e7a:	2382      	movs	r3, #130	@ 0x82
 8005e7c:	005b      	lsls	r3, r3, #1
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d107      	bne.n	8005e92 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d103      	bne.n	8005e92 <HAL_SPI_TransmitReceive+0x66>
 8005e8a:	183b      	adds	r3, r7, r0
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	2b04      	cmp	r3, #4
 8005e90:	d001      	beq.n	8005e96 <HAL_SPI_TransmitReceive+0x6a>
  {
    return HAL_BUSY;
 8005e92:	2302      	movs	r3, #2
 8005e94:	e203      	b.n	800629e <HAL_SPI_TransmitReceive+0x472>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d006      	beq.n	8005eaa <HAL_SPI_TransmitReceive+0x7e>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d003      	beq.n	8005eaa <HAL_SPI_TransmitReceive+0x7e>
 8005ea2:	1cbb      	adds	r3, r7, #2
 8005ea4:	881b      	ldrh	r3, [r3, #0]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d101      	bne.n	8005eae <HAL_SPI_TransmitReceive+0x82>
  {
    return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e1f7      	b.n	800629e <HAL_SPI_TransmitReceive+0x472>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	225c      	movs	r2, #92	@ 0x5c
 8005eb2:	5c9b      	ldrb	r3, [r3, r2]
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d101      	bne.n	8005ebc <HAL_SPI_TransmitReceive+0x90>
 8005eb8:	2302      	movs	r3, #2
 8005eba:	e1f0      	b.n	800629e <HAL_SPI_TransmitReceive+0x472>
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	225c      	movs	r2, #92	@ 0x5c
 8005ec0:	2101      	movs	r1, #1
 8005ec2:	5499      	strb	r1, [r3, r2]

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	225d      	movs	r2, #93	@ 0x5d
 8005ec8:	5c9b      	ldrb	r3, [r3, r2]
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	2b04      	cmp	r3, #4
 8005ece:	d003      	beq.n	8005ed8 <HAL_SPI_TransmitReceive+0xac>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	225d      	movs	r2, #93	@ 0x5d
 8005ed4:	2105      	movs	r1, #5
 8005ed6:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2200      	movs	r2, #0
 8005edc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	1cba      	adds	r2, r7, #2
 8005ee8:	2146      	movs	r1, #70	@ 0x46
 8005eea:	8812      	ldrh	r2, [r2, #0]
 8005eec:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	1cba      	adds	r2, r7, #2
 8005ef2:	2144      	movs	r1, #68	@ 0x44
 8005ef4:	8812      	ldrh	r2, [r2, #0]
 8005ef6:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	68ba      	ldr	r2, [r7, #8]
 8005efc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	1cba      	adds	r2, r7, #2
 8005f02:	8812      	ldrh	r2, [r2, #0]
 8005f04:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	1cba      	adds	r2, r7, #2
 8005f0a:	8812      	ldrh	r2, [r2, #0]
 8005f0c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2200      	movs	r2, #0
 8005f12:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2200      	movs	r2, #0
 8005f18:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	68da      	ldr	r2, [r3, #12]
 8005f1e:	23e0      	movs	r3, #224	@ 0xe0
 8005f20:	00db      	lsls	r3, r3, #3
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d804      	bhi.n	8005f30 <HAL_SPI_TransmitReceive+0x104>
 8005f26:	2314      	movs	r3, #20
 8005f28:	18fb      	adds	r3, r7, r3
 8005f2a:	881b      	ldrh	r3, [r3, #0]
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d908      	bls.n	8005f42 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	685a      	ldr	r2, [r3, #4]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	49c1      	ldr	r1, [pc, #772]	@ (8006240 <HAL_SPI_TransmitReceive+0x414>)
 8005f3c:	400a      	ands	r2, r1
 8005f3e:	605a      	str	r2, [r3, #4]
 8005f40:	e008      	b.n	8005f54 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	685a      	ldr	r2, [r3, #4]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2180      	movs	r1, #128	@ 0x80
 8005f4e:	0149      	lsls	r1, r1, #5
 8005f50:	430a      	orrs	r2, r1
 8005f52:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2240      	movs	r2, #64	@ 0x40
 8005f5c:	4013      	ands	r3, r2
 8005f5e:	2b40      	cmp	r3, #64	@ 0x40
 8005f60:	d007      	beq.n	8005f72 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	2140      	movs	r1, #64	@ 0x40
 8005f6e:	430a      	orrs	r2, r1
 8005f70:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	68da      	ldr	r2, [r3, #12]
 8005f76:	23e0      	movs	r3, #224	@ 0xe0
 8005f78:	00db      	lsls	r3, r3, #3
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d800      	bhi.n	8005f80 <HAL_SPI_TransmitReceive+0x154>
 8005f7e:	e084      	b.n	800608a <HAL_SPI_TransmitReceive+0x25e>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d005      	beq.n	8005f94 <HAL_SPI_TransmitReceive+0x168>
 8005f88:	2316      	movs	r3, #22
 8005f8a:	18fb      	adds	r3, r7, r3
 8005f8c:	881b      	ldrh	r3, [r3, #0]
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d000      	beq.n	8005f94 <HAL_SPI_TransmitReceive+0x168>
 8005f92:	e06e      	b.n	8006072 <HAL_SPI_TransmitReceive+0x246>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f98:	881a      	ldrh	r2, [r3, #0]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fa4:	1c9a      	adds	r2, r3, #2
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	3b01      	subs	r3, #1
 8005fb2:	b29a      	uxth	r2, r3
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fb8:	e05b      	b.n	8006072 <HAL_SPI_TransmitReceive+0x246>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	2202      	movs	r2, #2
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	2b02      	cmp	r3, #2
 8005fc6:	d11b      	bne.n	8006000 <HAL_SPI_TransmitReceive+0x1d4>
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d016      	beq.n	8006000 <HAL_SPI_TransmitReceive+0x1d4>
 8005fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d113      	bne.n	8006000 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fdc:	881a      	ldrh	r2, [r3, #0]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fe8:	1c9a      	adds	r2, r3, #2
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	3b01      	subs	r3, #1
 8005ff6:	b29a      	uxth	r2, r3
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	2201      	movs	r2, #1
 8006008:	4013      	ands	r3, r2
 800600a:	2b01      	cmp	r3, #1
 800600c:	d11c      	bne.n	8006048 <HAL_SPI_TransmitReceive+0x21c>
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2246      	movs	r2, #70	@ 0x46
 8006012:	5a9b      	ldrh	r3, [r3, r2]
 8006014:	b29b      	uxth	r3, r3
 8006016:	2b00      	cmp	r3, #0
 8006018:	d016      	beq.n	8006048 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	68da      	ldr	r2, [r3, #12]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006024:	b292      	uxth	r2, r2
 8006026:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800602c:	1c9a      	adds	r2, r3, #2
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2246      	movs	r2, #70	@ 0x46
 8006036:	5a9b      	ldrh	r3, [r3, r2]
 8006038:	b29b      	uxth	r3, r3
 800603a:	3b01      	subs	r3, #1
 800603c:	b299      	uxth	r1, r3
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2246      	movs	r2, #70	@ 0x46
 8006042:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006044:	2301      	movs	r3, #1
 8006046:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006048:	f7fd fa72 	bl	8003530 <HAL_GetTick>
 800604c:	0002      	movs	r2, r0
 800604e:	6a3b      	ldr	r3, [r7, #32]
 8006050:	1ad3      	subs	r3, r2, r3
 8006052:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006054:	429a      	cmp	r2, r3
 8006056:	d80c      	bhi.n	8006072 <HAL_SPI_TransmitReceive+0x246>
 8006058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800605a:	3301      	adds	r3, #1
 800605c:	d009      	beq.n	8006072 <HAL_SPI_TransmitReceive+0x246>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	225d      	movs	r2, #93	@ 0x5d
 8006062:	2101      	movs	r1, #1
 8006064:	5499      	strb	r1, [r3, r2]
        __HAL_UNLOCK(hspi);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	225c      	movs	r2, #92	@ 0x5c
 800606a:	2100      	movs	r1, #0
 800606c:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 800606e:	2303      	movs	r3, #3
 8006070:	e115      	b.n	800629e <HAL_SPI_TransmitReceive+0x472>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006076:	b29b      	uxth	r3, r3
 8006078:	2b00      	cmp	r3, #0
 800607a:	d19e      	bne.n	8005fba <HAL_SPI_TransmitReceive+0x18e>
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2246      	movs	r2, #70	@ 0x46
 8006080:	5a9b      	ldrh	r3, [r3, r2]
 8006082:	b29b      	uxth	r3, r3
 8006084:	2b00      	cmp	r3, #0
 8006086:	d198      	bne.n	8005fba <HAL_SPI_TransmitReceive+0x18e>
 8006088:	e0e9      	b.n	800625e <HAL_SPI_TransmitReceive+0x432>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d005      	beq.n	800609e <HAL_SPI_TransmitReceive+0x272>
 8006092:	2316      	movs	r3, #22
 8006094:	18fb      	adds	r3, r7, r3
 8006096:	881b      	ldrh	r3, [r3, #0]
 8006098:	2b01      	cmp	r3, #1
 800609a:	d000      	beq.n	800609e <HAL_SPI_TransmitReceive+0x272>
 800609c:	e0d2      	b.n	8006244 <HAL_SPI_TransmitReceive+0x418>
    {
      if (hspi->TxXferCount > 1U)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d912      	bls.n	80060ce <HAL_SPI_TransmitReceive+0x2a2>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060ac:	881a      	ldrh	r2, [r3, #0]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060b8:	1c9a      	adds	r2, r3, #2
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	3b02      	subs	r3, #2
 80060c6:	b29a      	uxth	r2, r3
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80060cc:	e0ba      	b.n	8006244 <HAL_SPI_TransmitReceive+0x418>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	330c      	adds	r3, #12
 80060d8:	7812      	ldrb	r2, [r2, #0]
 80060da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060e0:	1c5a      	adds	r2, r3, #1
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	3b01      	subs	r3, #1
 80060ee:	b29a      	uxth	r2, r3
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060f4:	e0a6      	b.n	8006244 <HAL_SPI_TransmitReceive+0x418>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	2202      	movs	r2, #2
 80060fe:	4013      	ands	r3, r2
 8006100:	2b02      	cmp	r3, #2
 8006102:	d134      	bne.n	800616e <HAL_SPI_TransmitReceive+0x342>
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006108:	b29b      	uxth	r3, r3
 800610a:	2b00      	cmp	r3, #0
 800610c:	d02f      	beq.n	800616e <HAL_SPI_TransmitReceive+0x342>
 800610e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006110:	2b01      	cmp	r3, #1
 8006112:	d12c      	bne.n	800616e <HAL_SPI_TransmitReceive+0x342>
      {
        if (hspi->TxXferCount > 1U)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006118:	b29b      	uxth	r3, r3
 800611a:	2b01      	cmp	r3, #1
 800611c:	d912      	bls.n	8006144 <HAL_SPI_TransmitReceive+0x318>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006122:	881a      	ldrh	r2, [r3, #0]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800612e:	1c9a      	adds	r2, r3, #2
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006138:	b29b      	uxth	r3, r3
 800613a:	3b02      	subs	r3, #2
 800613c:	b29a      	uxth	r2, r3
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006142:	e012      	b.n	800616a <HAL_SPI_TransmitReceive+0x33e>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	330c      	adds	r3, #12
 800614e:	7812      	ldrb	r2, [r2, #0]
 8006150:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006156:	1c5a      	adds	r2, r3, #1
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006160:	b29b      	uxth	r3, r3
 8006162:	3b01      	subs	r3, #1
 8006164:	b29a      	uxth	r2, r3
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800616a:	2300      	movs	r3, #0
 800616c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	2201      	movs	r2, #1
 8006176:	4013      	ands	r3, r2
 8006178:	2b01      	cmp	r3, #1
 800617a:	d149      	bne.n	8006210 <HAL_SPI_TransmitReceive+0x3e4>
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2246      	movs	r2, #70	@ 0x46
 8006180:	5a9b      	ldrh	r3, [r3, r2]
 8006182:	b29b      	uxth	r3, r3
 8006184:	2b00      	cmp	r3, #0
 8006186:	d043      	beq.n	8006210 <HAL_SPI_TransmitReceive+0x3e4>
      {
        if (hspi->RxXferCount > 1U)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2246      	movs	r2, #70	@ 0x46
 800618c:	5a9b      	ldrh	r3, [r3, r2]
 800618e:	b29b      	uxth	r3, r3
 8006190:	2b01      	cmp	r3, #1
 8006192:	d924      	bls.n	80061de <HAL_SPI_TransmitReceive+0x3b2>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	68da      	ldr	r2, [r3, #12]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800619e:	b292      	uxth	r2, r2
 80061a0:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061a6:	1c9a      	adds	r2, r3, #2
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2246      	movs	r2, #70	@ 0x46
 80061b0:	5a9b      	ldrh	r3, [r3, r2]
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	3b02      	subs	r3, #2
 80061b6:	b299      	uxth	r1, r3
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2246      	movs	r2, #70	@ 0x46
 80061bc:	5299      	strh	r1, [r3, r2]
          if (hspi->RxXferCount <= 1U)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2246      	movs	r2, #70	@ 0x46
 80061c2:	5a9b      	ldrh	r3, [r3, r2]
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d820      	bhi.n	800620c <HAL_SPI_TransmitReceive+0x3e0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	685a      	ldr	r2, [r3, #4]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	2180      	movs	r1, #128	@ 0x80
 80061d6:	0149      	lsls	r1, r1, #5
 80061d8:	430a      	orrs	r2, r1
 80061da:	605a      	str	r2, [r3, #4]
 80061dc:	e016      	b.n	800620c <HAL_SPI_TransmitReceive+0x3e0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	330c      	adds	r3, #12
 80061e4:	001a      	movs	r2, r3
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061ea:	7812      	ldrb	r2, [r2, #0]
 80061ec:	b2d2      	uxtb	r2, r2
 80061ee:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061f4:	1c5a      	adds	r2, r3, #1
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2246      	movs	r2, #70	@ 0x46
 80061fe:	5a9b      	ldrh	r3, [r3, r2]
 8006200:	b29b      	uxth	r3, r3
 8006202:	3b01      	subs	r3, #1
 8006204:	b299      	uxth	r1, r3
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2246      	movs	r2, #70	@ 0x46
 800620a:	5299      	strh	r1, [r3, r2]
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800620c:	2301      	movs	r3, #1
 800620e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006210:	f7fd f98e 	bl	8003530 <HAL_GetTick>
 8006214:	0002      	movs	r2, r0
 8006216:	6a3b      	ldr	r3, [r7, #32]
 8006218:	1ad3      	subs	r3, r2, r3
 800621a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800621c:	429a      	cmp	r2, r3
 800621e:	d802      	bhi.n	8006226 <HAL_SPI_TransmitReceive+0x3fa>
 8006220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006222:	3301      	adds	r3, #1
 8006224:	d102      	bne.n	800622c <HAL_SPI_TransmitReceive+0x400>
 8006226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006228:	2b00      	cmp	r3, #0
 800622a:	d10b      	bne.n	8006244 <HAL_SPI_TransmitReceive+0x418>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	225d      	movs	r2, #93	@ 0x5d
 8006230:	2101      	movs	r1, #1
 8006232:	5499      	strb	r1, [r3, r2]
        __HAL_UNLOCK(hspi);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	225c      	movs	r2, #92	@ 0x5c
 8006238:	2100      	movs	r1, #0
 800623a:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 800623c:	2303      	movs	r3, #3
 800623e:	e02e      	b.n	800629e <HAL_SPI_TransmitReceive+0x472>
 8006240:	ffffefff 	.word	0xffffefff
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006248:	b29b      	uxth	r3, r3
 800624a:	2b00      	cmp	r3, #0
 800624c:	d000      	beq.n	8006250 <HAL_SPI_TransmitReceive+0x424>
 800624e:	e752      	b.n	80060f6 <HAL_SPI_TransmitReceive+0x2ca>
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2246      	movs	r2, #70	@ 0x46
 8006254:	5a9b      	ldrh	r3, [r3, r2]
 8006256:	b29b      	uxth	r3, r3
 8006258:	2b00      	cmp	r3, #0
 800625a:	d000      	beq.n	800625e <HAL_SPI_TransmitReceive+0x432>
 800625c:	e74b      	b.n	80060f6 <HAL_SPI_TransmitReceive+0x2ca>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800625e:	6a3a      	ldr	r2, [r7, #32]
 8006260:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	0018      	movs	r0, r3
 8006266:	f000 f94f 	bl	8006508 <SPI_EndRxTxTransaction>
 800626a:	1e03      	subs	r3, r0, #0
 800626c:	d008      	beq.n	8006280 <HAL_SPI_TransmitReceive+0x454>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2220      	movs	r2, #32
 8006272:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	225c      	movs	r2, #92	@ 0x5c
 8006278:	2100      	movs	r1, #0
 800627a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	e00e      	b.n	800629e <HAL_SPI_TransmitReceive+0x472>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	225d      	movs	r2, #93	@ 0x5d
 8006284:	2101      	movs	r1, #1
 8006286:	5499      	strb	r1, [r3, r2]
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	225c      	movs	r2, #92	@ 0x5c
 800628c:	2100      	movs	r1, #0
 800628e:	5499      	strb	r1, [r3, r2]

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006294:	2b00      	cmp	r3, #0
 8006296:	d001      	beq.n	800629c <HAL_SPI_TransmitReceive+0x470>
  {
    return HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	e000      	b.n	800629e <HAL_SPI_TransmitReceive+0x472>
  }
  else
  {
    return HAL_OK;
 800629c:	2300      	movs	r3, #0
  }
}
 800629e:	0018      	movs	r0, r3
 80062a0:	46bd      	mov	sp, r7
 80062a2:	b00a      	add	sp, #40	@ 0x28
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	46c0      	nop			@ (mov r8, r8)

080062a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b088      	sub	sp, #32
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	603b      	str	r3, [r7, #0]
 80062b4:	1dfb      	adds	r3, r7, #7
 80062b6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80062b8:	f7fd f93a 	bl	8003530 <HAL_GetTick>
 80062bc:	0002      	movs	r2, r0
 80062be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062c0:	1a9b      	subs	r3, r3, r2
 80062c2:	683a      	ldr	r2, [r7, #0]
 80062c4:	18d3      	adds	r3, r2, r3
 80062c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80062c8:	f7fd f932 	bl	8003530 <HAL_GetTick>
 80062cc:	0003      	movs	r3, r0
 80062ce:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80062d0:	4b3a      	ldr	r3, [pc, #232]	@ (80063bc <SPI_WaitFlagStateUntilTimeout+0x114>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	015b      	lsls	r3, r3, #5
 80062d6:	0d1b      	lsrs	r3, r3, #20
 80062d8:	69fa      	ldr	r2, [r7, #28]
 80062da:	4353      	muls	r3, r2
 80062dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80062de:	e058      	b.n	8006392 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	3301      	adds	r3, #1
 80062e4:	d055      	beq.n	8006392 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80062e6:	f7fd f923 	bl	8003530 <HAL_GetTick>
 80062ea:	0002      	movs	r2, r0
 80062ec:	69bb      	ldr	r3, [r7, #24]
 80062ee:	1ad3      	subs	r3, r2, r3
 80062f0:	69fa      	ldr	r2, [r7, #28]
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d902      	bls.n	80062fc <SPI_WaitFlagStateUntilTimeout+0x54>
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d142      	bne.n	8006382 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	685a      	ldr	r2, [r3, #4]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	21e0      	movs	r1, #224	@ 0xe0
 8006308:	438a      	bics	r2, r1
 800630a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	685a      	ldr	r2, [r3, #4]
 8006310:	2382      	movs	r3, #130	@ 0x82
 8006312:	005b      	lsls	r3, r3, #1
 8006314:	429a      	cmp	r2, r3
 8006316:	d113      	bne.n	8006340 <SPI_WaitFlagStateUntilTimeout+0x98>
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	689a      	ldr	r2, [r3, #8]
 800631c:	2380      	movs	r3, #128	@ 0x80
 800631e:	021b      	lsls	r3, r3, #8
 8006320:	429a      	cmp	r2, r3
 8006322:	d005      	beq.n	8006330 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	689a      	ldr	r2, [r3, #8]
 8006328:	2380      	movs	r3, #128	@ 0x80
 800632a:	00db      	lsls	r3, r3, #3
 800632c:	429a      	cmp	r2, r3
 800632e:	d107      	bne.n	8006340 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	2140      	movs	r1, #64	@ 0x40
 800633c:	438a      	bics	r2, r1
 800633e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006344:	2380      	movs	r3, #128	@ 0x80
 8006346:	019b      	lsls	r3, r3, #6
 8006348:	429a      	cmp	r2, r3
 800634a:	d110      	bne.n	800636e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	491a      	ldr	r1, [pc, #104]	@ (80063c0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8006358:	400a      	ands	r2, r1
 800635a:	601a      	str	r2, [r3, #0]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	2180      	movs	r1, #128	@ 0x80
 8006368:	0189      	lsls	r1, r1, #6
 800636a:	430a      	orrs	r2, r1
 800636c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	225d      	movs	r2, #93	@ 0x5d
 8006372:	2101      	movs	r1, #1
 8006374:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	225c      	movs	r2, #92	@ 0x5c
 800637a:	2100      	movs	r1, #0
 800637c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800637e:	2303      	movs	r3, #3
 8006380:	e017      	b.n	80063b2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d101      	bne.n	800638c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8006388:	2300      	movs	r3, #0
 800638a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	3b01      	subs	r3, #1
 8006390:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	68ba      	ldr	r2, [r7, #8]
 800639a:	4013      	ands	r3, r2
 800639c:	68ba      	ldr	r2, [r7, #8]
 800639e:	1ad3      	subs	r3, r2, r3
 80063a0:	425a      	negs	r2, r3
 80063a2:	4153      	adcs	r3, r2
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	001a      	movs	r2, r3
 80063a8:	1dfb      	adds	r3, r7, #7
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d197      	bne.n	80062e0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	0018      	movs	r0, r3
 80063b4:	46bd      	mov	sp, r7
 80063b6:	b008      	add	sp, #32
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	46c0      	nop			@ (mov r8, r8)
 80063bc:	2000009c 	.word	0x2000009c
 80063c0:	ffffdfff 	.word	0xffffdfff

080063c4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b08a      	sub	sp, #40	@ 0x28
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	60f8      	str	r0, [r7, #12]
 80063cc:	60b9      	str	r1, [r7, #8]
 80063ce:	607a      	str	r2, [r7, #4]
 80063d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80063d2:	2317      	movs	r3, #23
 80063d4:	18fb      	adds	r3, r7, r3
 80063d6:	2200      	movs	r2, #0
 80063d8:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80063da:	f7fd f8a9 	bl	8003530 <HAL_GetTick>
 80063de:	0002      	movs	r2, r0
 80063e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063e2:	1a9b      	subs	r3, r3, r2
 80063e4:	683a      	ldr	r2, [r7, #0]
 80063e6:	18d3      	adds	r3, r2, r3
 80063e8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80063ea:	f7fd f8a1 	bl	8003530 <HAL_GetTick>
 80063ee:	0003      	movs	r3, r0
 80063f0:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	330c      	adds	r3, #12
 80063f8:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80063fa:	4b41      	ldr	r3, [pc, #260]	@ (8006500 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	0013      	movs	r3, r2
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	189b      	adds	r3, r3, r2
 8006404:	00da      	lsls	r2, r3, #3
 8006406:	1ad3      	subs	r3, r2, r3
 8006408:	0d1b      	lsrs	r3, r3, #20
 800640a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800640c:	4353      	muls	r3, r2
 800640e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006410:	e068      	b.n	80064e4 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006412:	68ba      	ldr	r2, [r7, #8]
 8006414:	23c0      	movs	r3, #192	@ 0xc0
 8006416:	00db      	lsls	r3, r3, #3
 8006418:	429a      	cmp	r2, r3
 800641a:	d10a      	bne.n	8006432 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d107      	bne.n	8006432 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006422:	69fb      	ldr	r3, [r7, #28]
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	b2da      	uxtb	r2, r3
 8006428:	2117      	movs	r1, #23
 800642a:	187b      	adds	r3, r7, r1
 800642c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800642e:	187b      	adds	r3, r7, r1
 8006430:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	3301      	adds	r3, #1
 8006436:	d055      	beq.n	80064e4 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006438:	f7fd f87a 	bl	8003530 <HAL_GetTick>
 800643c:	0002      	movs	r2, r0
 800643e:	6a3b      	ldr	r3, [r7, #32]
 8006440:	1ad3      	subs	r3, r2, r3
 8006442:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006444:	429a      	cmp	r2, r3
 8006446:	d902      	bls.n	800644e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8006448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800644a:	2b00      	cmp	r3, #0
 800644c:	d142      	bne.n	80064d4 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	685a      	ldr	r2, [r3, #4]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	21e0      	movs	r1, #224	@ 0xe0
 800645a:	438a      	bics	r2, r1
 800645c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	685a      	ldr	r2, [r3, #4]
 8006462:	2382      	movs	r3, #130	@ 0x82
 8006464:	005b      	lsls	r3, r3, #1
 8006466:	429a      	cmp	r2, r3
 8006468:	d113      	bne.n	8006492 <SPI_WaitFifoStateUntilTimeout+0xce>
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	689a      	ldr	r2, [r3, #8]
 800646e:	2380      	movs	r3, #128	@ 0x80
 8006470:	021b      	lsls	r3, r3, #8
 8006472:	429a      	cmp	r2, r3
 8006474:	d005      	beq.n	8006482 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	689a      	ldr	r2, [r3, #8]
 800647a:	2380      	movs	r3, #128	@ 0x80
 800647c:	00db      	lsls	r3, r3, #3
 800647e:	429a      	cmp	r2, r3
 8006480:	d107      	bne.n	8006492 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2140      	movs	r1, #64	@ 0x40
 800648e:	438a      	bics	r2, r1
 8006490:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006496:	2380      	movs	r3, #128	@ 0x80
 8006498:	019b      	lsls	r3, r3, #6
 800649a:	429a      	cmp	r2, r3
 800649c:	d110      	bne.n	80064c0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4916      	ldr	r1, [pc, #88]	@ (8006504 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80064aa:	400a      	ands	r2, r1
 80064ac:	601a      	str	r2, [r3, #0]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	2180      	movs	r1, #128	@ 0x80
 80064ba:	0189      	lsls	r1, r1, #6
 80064bc:	430a      	orrs	r2, r1
 80064be:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	225d      	movs	r2, #93	@ 0x5d
 80064c4:	2101      	movs	r1, #1
 80064c6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	225c      	movs	r2, #92	@ 0x5c
 80064cc:	2100      	movs	r1, #0
 80064ce:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80064d0:	2303      	movs	r3, #3
 80064d2:	e010      	b.n	80064f6 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80064d4:	69bb      	ldr	r3, [r7, #24]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d101      	bne.n	80064de <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80064da:	2300      	movs	r3, #0
 80064dc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80064de:	69bb      	ldr	r3, [r7, #24]
 80064e0:	3b01      	subs	r3, #1
 80064e2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	68ba      	ldr	r2, [r7, #8]
 80064ec:	4013      	ands	r3, r2
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d18e      	bne.n	8006412 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	0018      	movs	r0, r3
 80064f8:	46bd      	mov	sp, r7
 80064fa:	b00a      	add	sp, #40	@ 0x28
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	46c0      	nop			@ (mov r8, r8)
 8006500:	2000009c 	.word	0x2000009c
 8006504:	ffffdfff 	.word	0xffffdfff

08006508 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b086      	sub	sp, #24
 800650c:	af02      	add	r7, sp, #8
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	60b9      	str	r1, [r7, #8]
 8006512:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006514:	68ba      	ldr	r2, [r7, #8]
 8006516:	23c0      	movs	r3, #192	@ 0xc0
 8006518:	0159      	lsls	r1, r3, #5
 800651a:	68f8      	ldr	r0, [r7, #12]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	9300      	str	r3, [sp, #0]
 8006520:	0013      	movs	r3, r2
 8006522:	2200      	movs	r2, #0
 8006524:	f7ff ff4e 	bl	80063c4 <SPI_WaitFifoStateUntilTimeout>
 8006528:	1e03      	subs	r3, r0, #0
 800652a:	d007      	beq.n	800653c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006530:	2220      	movs	r2, #32
 8006532:	431a      	orrs	r2, r3
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006538:	2303      	movs	r3, #3
 800653a:	e027      	b.n	800658c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800653c:	68ba      	ldr	r2, [r7, #8]
 800653e:	68f8      	ldr	r0, [r7, #12]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	9300      	str	r3, [sp, #0]
 8006544:	0013      	movs	r3, r2
 8006546:	2200      	movs	r2, #0
 8006548:	2180      	movs	r1, #128	@ 0x80
 800654a:	f7ff fead 	bl	80062a8 <SPI_WaitFlagStateUntilTimeout>
 800654e:	1e03      	subs	r3, r0, #0
 8006550:	d007      	beq.n	8006562 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006556:	2220      	movs	r2, #32
 8006558:	431a      	orrs	r2, r3
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800655e:	2303      	movs	r3, #3
 8006560:	e014      	b.n	800658c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006562:	68ba      	ldr	r2, [r7, #8]
 8006564:	23c0      	movs	r3, #192	@ 0xc0
 8006566:	00d9      	lsls	r1, r3, #3
 8006568:	68f8      	ldr	r0, [r7, #12]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	9300      	str	r3, [sp, #0]
 800656e:	0013      	movs	r3, r2
 8006570:	2200      	movs	r2, #0
 8006572:	f7ff ff27 	bl	80063c4 <SPI_WaitFifoStateUntilTimeout>
 8006576:	1e03      	subs	r3, r0, #0
 8006578:	d007      	beq.n	800658a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800657e:	2220      	movs	r2, #32
 8006580:	431a      	orrs	r2, r3
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006586:	2303      	movs	r3, #3
 8006588:	e000      	b.n	800658c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800658a:	2300      	movs	r3, #0
}
 800658c:	0018      	movs	r0, r3
 800658e:	46bd      	mov	sp, r7
 8006590:	b004      	add	sp, #16
 8006592:	bd80      	pop	{r7, pc}

08006594 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b082      	sub	sp, #8
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d101      	bne.n	80065a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	e04a      	b.n	800663c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	223d      	movs	r2, #61	@ 0x3d
 80065aa:	5c9b      	ldrb	r3, [r3, r2]
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d107      	bne.n	80065c2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	223c      	movs	r2, #60	@ 0x3c
 80065b6:	2100      	movs	r1, #0
 80065b8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	0018      	movs	r0, r3
 80065be:	f7fc fc4b 	bl	8002e58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	223d      	movs	r2, #61	@ 0x3d
 80065c6:	2102      	movs	r1, #2
 80065c8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	3304      	adds	r3, #4
 80065d2:	0019      	movs	r1, r3
 80065d4:	0010      	movs	r0, r2
 80065d6:	f000 fa6b 	bl	8006ab0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2248      	movs	r2, #72	@ 0x48
 80065de:	2101      	movs	r1, #1
 80065e0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	223e      	movs	r2, #62	@ 0x3e
 80065e6:	2101      	movs	r1, #1
 80065e8:	5499      	strb	r1, [r3, r2]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	223f      	movs	r2, #63	@ 0x3f
 80065ee:	2101      	movs	r1, #1
 80065f0:	5499      	strb	r1, [r3, r2]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2240      	movs	r2, #64	@ 0x40
 80065f6:	2101      	movs	r1, #1
 80065f8:	5499      	strb	r1, [r3, r2]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2241      	movs	r2, #65	@ 0x41
 80065fe:	2101      	movs	r1, #1
 8006600:	5499      	strb	r1, [r3, r2]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2242      	movs	r2, #66	@ 0x42
 8006606:	2101      	movs	r1, #1
 8006608:	5499      	strb	r1, [r3, r2]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2243      	movs	r2, #67	@ 0x43
 800660e:	2101      	movs	r1, #1
 8006610:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2244      	movs	r2, #68	@ 0x44
 8006616:	2101      	movs	r1, #1
 8006618:	5499      	strb	r1, [r3, r2]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2245      	movs	r2, #69	@ 0x45
 800661e:	2101      	movs	r1, #1
 8006620:	5499      	strb	r1, [r3, r2]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2246      	movs	r2, #70	@ 0x46
 8006626:	2101      	movs	r1, #1
 8006628:	5499      	strb	r1, [r3, r2]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2247      	movs	r2, #71	@ 0x47
 800662e:	2101      	movs	r1, #1
 8006630:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	223d      	movs	r2, #61	@ 0x3d
 8006636:	2101      	movs	r1, #1
 8006638:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800663a:	2300      	movs	r3, #0
}
 800663c:	0018      	movs	r0, r3
 800663e:	46bd      	mov	sp, r7
 8006640:	b002      	add	sp, #8
 8006642:	bd80      	pop	{r7, pc}

08006644 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b082      	sub	sp, #8
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d101      	bne.n	8006656 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	e04a      	b.n	80066ec <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	223d      	movs	r2, #61	@ 0x3d
 800665a:	5c9b      	ldrb	r3, [r3, r2]
 800665c:	b2db      	uxtb	r3, r3
 800665e:	2b00      	cmp	r3, #0
 8006660:	d107      	bne.n	8006672 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	223c      	movs	r2, #60	@ 0x3c
 8006666:	2100      	movs	r1, #0
 8006668:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	0018      	movs	r0, r3
 800666e:	f7fc fbd3 	bl	8002e18 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	223d      	movs	r2, #61	@ 0x3d
 8006676:	2102      	movs	r1, #2
 8006678:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681a      	ldr	r2, [r3, #0]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	3304      	adds	r3, #4
 8006682:	0019      	movs	r1, r3
 8006684:	0010      	movs	r0, r2
 8006686:	f000 fa13 	bl	8006ab0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2248      	movs	r2, #72	@ 0x48
 800668e:	2101      	movs	r1, #1
 8006690:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	223e      	movs	r2, #62	@ 0x3e
 8006696:	2101      	movs	r1, #1
 8006698:	5499      	strb	r1, [r3, r2]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	223f      	movs	r2, #63	@ 0x3f
 800669e:	2101      	movs	r1, #1
 80066a0:	5499      	strb	r1, [r3, r2]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2240      	movs	r2, #64	@ 0x40
 80066a6:	2101      	movs	r1, #1
 80066a8:	5499      	strb	r1, [r3, r2]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2241      	movs	r2, #65	@ 0x41
 80066ae:	2101      	movs	r1, #1
 80066b0:	5499      	strb	r1, [r3, r2]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2242      	movs	r2, #66	@ 0x42
 80066b6:	2101      	movs	r1, #1
 80066b8:	5499      	strb	r1, [r3, r2]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2243      	movs	r2, #67	@ 0x43
 80066be:	2101      	movs	r1, #1
 80066c0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2244      	movs	r2, #68	@ 0x44
 80066c6:	2101      	movs	r1, #1
 80066c8:	5499      	strb	r1, [r3, r2]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2245      	movs	r2, #69	@ 0x45
 80066ce:	2101      	movs	r1, #1
 80066d0:	5499      	strb	r1, [r3, r2]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2246      	movs	r2, #70	@ 0x46
 80066d6:	2101      	movs	r1, #1
 80066d8:	5499      	strb	r1, [r3, r2]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2247      	movs	r2, #71	@ 0x47
 80066de:	2101      	movs	r1, #1
 80066e0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	223d      	movs	r2, #61	@ 0x3d
 80066e6:	2101      	movs	r1, #1
 80066e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80066ea:	2300      	movs	r3, #0
}
 80066ec:	0018      	movs	r0, r3
 80066ee:	46bd      	mov	sp, r7
 80066f0:	b002      	add	sp, #8
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b084      	sub	sp, #16
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d108      	bne.n	8006716 <HAL_TIM_PWM_Start+0x22>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	223e      	movs	r2, #62	@ 0x3e
 8006708:	5c9b      	ldrb	r3, [r3, r2]
 800670a:	b2db      	uxtb	r3, r3
 800670c:	3b01      	subs	r3, #1
 800670e:	1e5a      	subs	r2, r3, #1
 8006710:	4193      	sbcs	r3, r2
 8006712:	b2db      	uxtb	r3, r3
 8006714:	e037      	b.n	8006786 <HAL_TIM_PWM_Start+0x92>
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	2b04      	cmp	r3, #4
 800671a:	d108      	bne.n	800672e <HAL_TIM_PWM_Start+0x3a>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	223f      	movs	r2, #63	@ 0x3f
 8006720:	5c9b      	ldrb	r3, [r3, r2]
 8006722:	b2db      	uxtb	r3, r3
 8006724:	3b01      	subs	r3, #1
 8006726:	1e5a      	subs	r2, r3, #1
 8006728:	4193      	sbcs	r3, r2
 800672a:	b2db      	uxtb	r3, r3
 800672c:	e02b      	b.n	8006786 <HAL_TIM_PWM_Start+0x92>
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	2b08      	cmp	r3, #8
 8006732:	d108      	bne.n	8006746 <HAL_TIM_PWM_Start+0x52>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2240      	movs	r2, #64	@ 0x40
 8006738:	5c9b      	ldrb	r3, [r3, r2]
 800673a:	b2db      	uxtb	r3, r3
 800673c:	3b01      	subs	r3, #1
 800673e:	1e5a      	subs	r2, r3, #1
 8006740:	4193      	sbcs	r3, r2
 8006742:	b2db      	uxtb	r3, r3
 8006744:	e01f      	b.n	8006786 <HAL_TIM_PWM_Start+0x92>
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	2b0c      	cmp	r3, #12
 800674a:	d108      	bne.n	800675e <HAL_TIM_PWM_Start+0x6a>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2241      	movs	r2, #65	@ 0x41
 8006750:	5c9b      	ldrb	r3, [r3, r2]
 8006752:	b2db      	uxtb	r3, r3
 8006754:	3b01      	subs	r3, #1
 8006756:	1e5a      	subs	r2, r3, #1
 8006758:	4193      	sbcs	r3, r2
 800675a:	b2db      	uxtb	r3, r3
 800675c:	e013      	b.n	8006786 <HAL_TIM_PWM_Start+0x92>
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	2b10      	cmp	r3, #16
 8006762:	d108      	bne.n	8006776 <HAL_TIM_PWM_Start+0x82>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2242      	movs	r2, #66	@ 0x42
 8006768:	5c9b      	ldrb	r3, [r3, r2]
 800676a:	b2db      	uxtb	r3, r3
 800676c:	3b01      	subs	r3, #1
 800676e:	1e5a      	subs	r2, r3, #1
 8006770:	4193      	sbcs	r3, r2
 8006772:	b2db      	uxtb	r3, r3
 8006774:	e007      	b.n	8006786 <HAL_TIM_PWM_Start+0x92>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2243      	movs	r2, #67	@ 0x43
 800677a:	5c9b      	ldrb	r3, [r3, r2]
 800677c:	b2db      	uxtb	r3, r3
 800677e:	3b01      	subs	r3, #1
 8006780:	1e5a      	subs	r2, r3, #1
 8006782:	4193      	sbcs	r3, r2
 8006784:	b2db      	uxtb	r3, r3
 8006786:	2b00      	cmp	r3, #0
 8006788:	d001      	beq.n	800678e <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	e081      	b.n	8006892 <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d104      	bne.n	800679e <HAL_TIM_PWM_Start+0xaa>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	223e      	movs	r2, #62	@ 0x3e
 8006798:	2102      	movs	r1, #2
 800679a:	5499      	strb	r1, [r3, r2]
 800679c:	e023      	b.n	80067e6 <HAL_TIM_PWM_Start+0xf2>
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	2b04      	cmp	r3, #4
 80067a2:	d104      	bne.n	80067ae <HAL_TIM_PWM_Start+0xba>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	223f      	movs	r2, #63	@ 0x3f
 80067a8:	2102      	movs	r1, #2
 80067aa:	5499      	strb	r1, [r3, r2]
 80067ac:	e01b      	b.n	80067e6 <HAL_TIM_PWM_Start+0xf2>
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	2b08      	cmp	r3, #8
 80067b2:	d104      	bne.n	80067be <HAL_TIM_PWM_Start+0xca>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2240      	movs	r2, #64	@ 0x40
 80067b8:	2102      	movs	r1, #2
 80067ba:	5499      	strb	r1, [r3, r2]
 80067bc:	e013      	b.n	80067e6 <HAL_TIM_PWM_Start+0xf2>
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	2b0c      	cmp	r3, #12
 80067c2:	d104      	bne.n	80067ce <HAL_TIM_PWM_Start+0xda>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2241      	movs	r2, #65	@ 0x41
 80067c8:	2102      	movs	r1, #2
 80067ca:	5499      	strb	r1, [r3, r2]
 80067cc:	e00b      	b.n	80067e6 <HAL_TIM_PWM_Start+0xf2>
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	2b10      	cmp	r3, #16
 80067d2:	d104      	bne.n	80067de <HAL_TIM_PWM_Start+0xea>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2242      	movs	r2, #66	@ 0x42
 80067d8:	2102      	movs	r1, #2
 80067da:	5499      	strb	r1, [r3, r2]
 80067dc:	e003      	b.n	80067e6 <HAL_TIM_PWM_Start+0xf2>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2243      	movs	r2, #67	@ 0x43
 80067e2:	2102      	movs	r1, #2
 80067e4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	6839      	ldr	r1, [r7, #0]
 80067ec:	2201      	movs	r2, #1
 80067ee:	0018      	movs	r0, r3
 80067f0:	f000 fc7e 	bl	80070f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a28      	ldr	r2, [pc, #160]	@ (800689c <HAL_TIM_PWM_Start+0x1a8>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d009      	beq.n	8006812 <HAL_TIM_PWM_Start+0x11e>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a27      	ldr	r2, [pc, #156]	@ (80068a0 <HAL_TIM_PWM_Start+0x1ac>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d004      	beq.n	8006812 <HAL_TIM_PWM_Start+0x11e>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a25      	ldr	r2, [pc, #148]	@ (80068a4 <HAL_TIM_PWM_Start+0x1b0>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d101      	bne.n	8006816 <HAL_TIM_PWM_Start+0x122>
 8006812:	2301      	movs	r3, #1
 8006814:	e000      	b.n	8006818 <HAL_TIM_PWM_Start+0x124>
 8006816:	2300      	movs	r3, #0
 8006818:	2b00      	cmp	r3, #0
 800681a:	d008      	beq.n	800682e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	2180      	movs	r1, #128	@ 0x80
 8006828:	0209      	lsls	r1, r1, #8
 800682a:	430a      	orrs	r2, r1
 800682c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a1a      	ldr	r2, [pc, #104]	@ (800689c <HAL_TIM_PWM_Start+0x1a8>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d00a      	beq.n	800684e <HAL_TIM_PWM_Start+0x15a>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	2380      	movs	r3, #128	@ 0x80
 800683e:	05db      	lsls	r3, r3, #23
 8006840:	429a      	cmp	r2, r3
 8006842:	d004      	beq.n	800684e <HAL_TIM_PWM_Start+0x15a>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a17      	ldr	r2, [pc, #92]	@ (80068a8 <HAL_TIM_PWM_Start+0x1b4>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d116      	bne.n	800687c <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	4a15      	ldr	r2, [pc, #84]	@ (80068ac <HAL_TIM_PWM_Start+0x1b8>)
 8006856:	4013      	ands	r3, r2
 8006858:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2b06      	cmp	r3, #6
 800685e:	d016      	beq.n	800688e <HAL_TIM_PWM_Start+0x19a>
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	2380      	movs	r3, #128	@ 0x80
 8006864:	025b      	lsls	r3, r3, #9
 8006866:	429a      	cmp	r2, r3
 8006868:	d011      	beq.n	800688e <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	2101      	movs	r1, #1
 8006876:	430a      	orrs	r2, r1
 8006878:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800687a:	e008      	b.n	800688e <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	2101      	movs	r1, #1
 8006888:	430a      	orrs	r2, r1
 800688a:	601a      	str	r2, [r3, #0]
 800688c:	e000      	b.n	8006890 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800688e:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8006890:	2300      	movs	r3, #0
}
 8006892:	0018      	movs	r0, r3
 8006894:	46bd      	mov	sp, r7
 8006896:	b004      	add	sp, #16
 8006898:	bd80      	pop	{r7, pc}
 800689a:	46c0      	nop			@ (mov r8, r8)
 800689c:	40012c00 	.word	0x40012c00
 80068a0:	40014400 	.word	0x40014400
 80068a4:	40014800 	.word	0x40014800
 80068a8:	40000400 	.word	0x40000400
 80068ac:	00010007 	.word	0x00010007

080068b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b086      	sub	sp, #24
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	60b9      	str	r1, [r7, #8]
 80068ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068bc:	2317      	movs	r3, #23
 80068be:	18fb      	adds	r3, r7, r3
 80068c0:	2200      	movs	r2, #0
 80068c2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	223c      	movs	r2, #60	@ 0x3c
 80068c8:	5c9b      	ldrb	r3, [r3, r2]
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d101      	bne.n	80068d2 <HAL_TIM_PWM_ConfigChannel+0x22>
 80068ce:	2302      	movs	r3, #2
 80068d0:	e0e5      	b.n	8006a9e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	223c      	movs	r2, #60	@ 0x3c
 80068d6:	2101      	movs	r1, #1
 80068d8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2b14      	cmp	r3, #20
 80068de:	d900      	bls.n	80068e2 <HAL_TIM_PWM_ConfigChannel+0x32>
 80068e0:	e0d1      	b.n	8006a86 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	009a      	lsls	r2, r3, #2
 80068e6:	4b70      	ldr	r3, [pc, #448]	@ (8006aa8 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80068e8:	18d3      	adds	r3, r2, r3
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	68ba      	ldr	r2, [r7, #8]
 80068f4:	0011      	movs	r1, r2
 80068f6:	0018      	movs	r0, r3
 80068f8:	f000 f95e 	bl	8006bb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	699a      	ldr	r2, [r3, #24]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	2108      	movs	r1, #8
 8006908:	430a      	orrs	r2, r1
 800690a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	699a      	ldr	r2, [r3, #24]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	2104      	movs	r1, #4
 8006918:	438a      	bics	r2, r1
 800691a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	6999      	ldr	r1, [r3, #24]
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	691a      	ldr	r2, [r3, #16]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	430a      	orrs	r2, r1
 800692c:	619a      	str	r2, [r3, #24]
      break;
 800692e:	e0af      	b.n	8006a90 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	68ba      	ldr	r2, [r7, #8]
 8006936:	0011      	movs	r1, r2
 8006938:	0018      	movs	r0, r3
 800693a:	f000 f9bd 	bl	8006cb8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	699a      	ldr	r2, [r3, #24]
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	2180      	movs	r1, #128	@ 0x80
 800694a:	0109      	lsls	r1, r1, #4
 800694c:	430a      	orrs	r2, r1
 800694e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	699a      	ldr	r2, [r3, #24]
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4954      	ldr	r1, [pc, #336]	@ (8006aac <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800695c:	400a      	ands	r2, r1
 800695e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	6999      	ldr	r1, [r3, #24]
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	021a      	lsls	r2, r3, #8
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	430a      	orrs	r2, r1
 8006972:	619a      	str	r2, [r3, #24]
      break;
 8006974:	e08c      	b.n	8006a90 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	68ba      	ldr	r2, [r7, #8]
 800697c:	0011      	movs	r1, r2
 800697e:	0018      	movs	r0, r3
 8006980:	f000 fa18 	bl	8006db4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	69da      	ldr	r2, [r3, #28]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	2108      	movs	r1, #8
 8006990:	430a      	orrs	r2, r1
 8006992:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	69da      	ldr	r2, [r3, #28]
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	2104      	movs	r1, #4
 80069a0:	438a      	bics	r2, r1
 80069a2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	69d9      	ldr	r1, [r3, #28]
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	691a      	ldr	r2, [r3, #16]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	430a      	orrs	r2, r1
 80069b4:	61da      	str	r2, [r3, #28]
      break;
 80069b6:	e06b      	b.n	8006a90 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	68ba      	ldr	r2, [r7, #8]
 80069be:	0011      	movs	r1, r2
 80069c0:	0018      	movs	r0, r3
 80069c2:	f000 fa79 	bl	8006eb8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	69da      	ldr	r2, [r3, #28]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	2180      	movs	r1, #128	@ 0x80
 80069d2:	0109      	lsls	r1, r1, #4
 80069d4:	430a      	orrs	r2, r1
 80069d6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	69da      	ldr	r2, [r3, #28]
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4932      	ldr	r1, [pc, #200]	@ (8006aac <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80069e4:	400a      	ands	r2, r1
 80069e6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	69d9      	ldr	r1, [r3, #28]
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	691b      	ldr	r3, [r3, #16]
 80069f2:	021a      	lsls	r2, r3, #8
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	430a      	orrs	r2, r1
 80069fa:	61da      	str	r2, [r3, #28]
      break;
 80069fc:	e048      	b.n	8006a90 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	68ba      	ldr	r2, [r7, #8]
 8006a04:	0011      	movs	r1, r2
 8006a06:	0018      	movs	r0, r3
 8006a08:	f000 faba 	bl	8006f80 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	2108      	movs	r1, #8
 8006a18:	430a      	orrs	r2, r1
 8006a1a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	2104      	movs	r1, #4
 8006a28:	438a      	bics	r2, r1
 8006a2a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	691a      	ldr	r2, [r3, #16]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	430a      	orrs	r2, r1
 8006a3c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006a3e:	e027      	b.n	8006a90 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	68ba      	ldr	r2, [r7, #8]
 8006a46:	0011      	movs	r1, r2
 8006a48:	0018      	movs	r0, r3
 8006a4a:	f000 faf3 	bl	8007034 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	2180      	movs	r1, #128	@ 0x80
 8006a5a:	0109      	lsls	r1, r1, #4
 8006a5c:	430a      	orrs	r2, r1
 8006a5e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4910      	ldr	r1, [pc, #64]	@ (8006aac <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8006a6c:	400a      	ands	r2, r1
 8006a6e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	691b      	ldr	r3, [r3, #16]
 8006a7a:	021a      	lsls	r2, r3, #8
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	430a      	orrs	r2, r1
 8006a82:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006a84:	e004      	b.n	8006a90 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8006a86:	2317      	movs	r3, #23
 8006a88:	18fb      	adds	r3, r7, r3
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	701a      	strb	r2, [r3, #0]
      break;
 8006a8e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	223c      	movs	r2, #60	@ 0x3c
 8006a94:	2100      	movs	r1, #0
 8006a96:	5499      	strb	r1, [r3, r2]

  return status;
 8006a98:	2317      	movs	r3, #23
 8006a9a:	18fb      	adds	r3, r7, r3
 8006a9c:	781b      	ldrb	r3, [r3, #0]
}
 8006a9e:	0018      	movs	r0, r3
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	b006      	add	sp, #24
 8006aa4:	bd80      	pop	{r7, pc}
 8006aa6:	46c0      	nop			@ (mov r8, r8)
 8006aa8:	08009608 	.word	0x08009608
 8006aac:	fffffbff 	.word	0xfffffbff

08006ab0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	4a37      	ldr	r2, [pc, #220]	@ (8006ba0 <TIM_Base_SetConfig+0xf0>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d008      	beq.n	8006ada <TIM_Base_SetConfig+0x2a>
 8006ac8:	687a      	ldr	r2, [r7, #4]
 8006aca:	2380      	movs	r3, #128	@ 0x80
 8006acc:	05db      	lsls	r3, r3, #23
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d003      	beq.n	8006ada <TIM_Base_SetConfig+0x2a>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	4a33      	ldr	r2, [pc, #204]	@ (8006ba4 <TIM_Base_SetConfig+0xf4>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d108      	bne.n	8006aec <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2270      	movs	r2, #112	@ 0x70
 8006ade:	4393      	bics	r3, r2
 8006ae0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	68fa      	ldr	r2, [r7, #12]
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	4a2c      	ldr	r2, [pc, #176]	@ (8006ba0 <TIM_Base_SetConfig+0xf0>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d014      	beq.n	8006b1e <TIM_Base_SetConfig+0x6e>
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	2380      	movs	r3, #128	@ 0x80
 8006af8:	05db      	lsls	r3, r3, #23
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d00f      	beq.n	8006b1e <TIM_Base_SetConfig+0x6e>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	4a28      	ldr	r2, [pc, #160]	@ (8006ba4 <TIM_Base_SetConfig+0xf4>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d00b      	beq.n	8006b1e <TIM_Base_SetConfig+0x6e>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	4a27      	ldr	r2, [pc, #156]	@ (8006ba8 <TIM_Base_SetConfig+0xf8>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d007      	beq.n	8006b1e <TIM_Base_SetConfig+0x6e>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	4a26      	ldr	r2, [pc, #152]	@ (8006bac <TIM_Base_SetConfig+0xfc>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d003      	beq.n	8006b1e <TIM_Base_SetConfig+0x6e>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	4a25      	ldr	r2, [pc, #148]	@ (8006bb0 <TIM_Base_SetConfig+0x100>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d108      	bne.n	8006b30 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	4a24      	ldr	r2, [pc, #144]	@ (8006bb4 <TIM_Base_SetConfig+0x104>)
 8006b22:	4013      	ands	r3, r2
 8006b24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	68db      	ldr	r3, [r3, #12]
 8006b2a:	68fa      	ldr	r2, [r7, #12]
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2280      	movs	r2, #128	@ 0x80
 8006b34:	4393      	bics	r3, r2
 8006b36:	001a      	movs	r2, r3
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	695b      	ldr	r3, [r3, #20]
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	68fa      	ldr	r2, [r7, #12]
 8006b44:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	689a      	ldr	r2, [r3, #8]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a11      	ldr	r2, [pc, #68]	@ (8006ba0 <TIM_Base_SetConfig+0xf0>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d007      	beq.n	8006b6e <TIM_Base_SetConfig+0xbe>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4a12      	ldr	r2, [pc, #72]	@ (8006bac <TIM_Base_SetConfig+0xfc>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d003      	beq.n	8006b6e <TIM_Base_SetConfig+0xbe>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4a11      	ldr	r2, [pc, #68]	@ (8006bb0 <TIM_Base_SetConfig+0x100>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d103      	bne.n	8006b76 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	691a      	ldr	r2, [r3, #16]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	691b      	ldr	r3, [r3, #16]
 8006b80:	2201      	movs	r2, #1
 8006b82:	4013      	ands	r3, r2
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d106      	bne.n	8006b96 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	691b      	ldr	r3, [r3, #16]
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	4393      	bics	r3, r2
 8006b90:	001a      	movs	r2, r3
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	611a      	str	r2, [r3, #16]
  }
}
 8006b96:	46c0      	nop			@ (mov r8, r8)
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	b004      	add	sp, #16
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	46c0      	nop			@ (mov r8, r8)
 8006ba0:	40012c00 	.word	0x40012c00
 8006ba4:	40000400 	.word	0x40000400
 8006ba8:	40002000 	.word	0x40002000
 8006bac:	40014400 	.word	0x40014400
 8006bb0:	40014800 	.word	0x40014800
 8006bb4:	fffffcff 	.word	0xfffffcff

08006bb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b086      	sub	sp, #24
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a1b      	ldr	r3, [r3, #32]
 8006bc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6a1b      	ldr	r3, [r3, #32]
 8006bcc:	2201      	movs	r2, #1
 8006bce:	4393      	bics	r3, r2
 8006bd0:	001a      	movs	r2, r3
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	699b      	ldr	r3, [r3, #24]
 8006be0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	4a2e      	ldr	r2, [pc, #184]	@ (8006ca0 <TIM_OC1_SetConfig+0xe8>)
 8006be6:	4013      	ands	r3, r2
 8006be8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2203      	movs	r2, #3
 8006bee:	4393      	bics	r3, r2
 8006bf0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	68fa      	ldr	r2, [r7, #12]
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	2202      	movs	r2, #2
 8006c00:	4393      	bics	r3, r2
 8006c02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	697a      	ldr	r2, [r7, #20]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	4a24      	ldr	r2, [pc, #144]	@ (8006ca4 <TIM_OC1_SetConfig+0xec>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d007      	beq.n	8006c26 <TIM_OC1_SetConfig+0x6e>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	4a23      	ldr	r2, [pc, #140]	@ (8006ca8 <TIM_OC1_SetConfig+0xf0>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d003      	beq.n	8006c26 <TIM_OC1_SetConfig+0x6e>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4a22      	ldr	r2, [pc, #136]	@ (8006cac <TIM_OC1_SetConfig+0xf4>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d10c      	bne.n	8006c40 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	2208      	movs	r2, #8
 8006c2a:	4393      	bics	r3, r2
 8006c2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	68db      	ldr	r3, [r3, #12]
 8006c32:	697a      	ldr	r2, [r7, #20]
 8006c34:	4313      	orrs	r3, r2
 8006c36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	2204      	movs	r2, #4
 8006c3c:	4393      	bics	r3, r2
 8006c3e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	4a18      	ldr	r2, [pc, #96]	@ (8006ca4 <TIM_OC1_SetConfig+0xec>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d007      	beq.n	8006c58 <TIM_OC1_SetConfig+0xa0>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	4a17      	ldr	r2, [pc, #92]	@ (8006ca8 <TIM_OC1_SetConfig+0xf0>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d003      	beq.n	8006c58 <TIM_OC1_SetConfig+0xa0>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	4a16      	ldr	r2, [pc, #88]	@ (8006cac <TIM_OC1_SetConfig+0xf4>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d111      	bne.n	8006c7c <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	4a15      	ldr	r2, [pc, #84]	@ (8006cb0 <TIM_OC1_SetConfig+0xf8>)
 8006c5c:	4013      	ands	r3, r2
 8006c5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	4a14      	ldr	r2, [pc, #80]	@ (8006cb4 <TIM_OC1_SetConfig+0xfc>)
 8006c64:	4013      	ands	r3, r2
 8006c66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	695b      	ldr	r3, [r3, #20]
 8006c6c:	693a      	ldr	r2, [r7, #16]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	699b      	ldr	r3, [r3, #24]
 8006c76:	693a      	ldr	r2, [r7, #16]
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	693a      	ldr	r2, [r7, #16]
 8006c80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	68fa      	ldr	r2, [r7, #12]
 8006c86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	685a      	ldr	r2, [r3, #4]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	697a      	ldr	r2, [r7, #20]
 8006c94:	621a      	str	r2, [r3, #32]
}
 8006c96:	46c0      	nop			@ (mov r8, r8)
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	b006      	add	sp, #24
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	46c0      	nop			@ (mov r8, r8)
 8006ca0:	fffeff8f 	.word	0xfffeff8f
 8006ca4:	40012c00 	.word	0x40012c00
 8006ca8:	40014400 	.word	0x40014400
 8006cac:	40014800 	.word	0x40014800
 8006cb0:	fffffeff 	.word	0xfffffeff
 8006cb4:	fffffdff 	.word	0xfffffdff

08006cb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b086      	sub	sp, #24
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6a1b      	ldr	r3, [r3, #32]
 8006cc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6a1b      	ldr	r3, [r3, #32]
 8006ccc:	2210      	movs	r2, #16
 8006cce:	4393      	bics	r3, r2
 8006cd0:	001a      	movs	r2, r3
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	699b      	ldr	r3, [r3, #24]
 8006ce0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	4a2c      	ldr	r2, [pc, #176]	@ (8006d98 <TIM_OC2_SetConfig+0xe0>)
 8006ce6:	4013      	ands	r3, r2
 8006ce8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	4a2b      	ldr	r2, [pc, #172]	@ (8006d9c <TIM_OC2_SetConfig+0xe4>)
 8006cee:	4013      	ands	r3, r2
 8006cf0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	021b      	lsls	r3, r3, #8
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	2220      	movs	r2, #32
 8006d02:	4393      	bics	r3, r2
 8006d04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	011b      	lsls	r3, r3, #4
 8006d0c:	697a      	ldr	r2, [r7, #20]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4a22      	ldr	r2, [pc, #136]	@ (8006da0 <TIM_OC2_SetConfig+0xe8>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d10d      	bne.n	8006d36 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	2280      	movs	r2, #128	@ 0x80
 8006d1e:	4393      	bics	r3, r2
 8006d20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	68db      	ldr	r3, [r3, #12]
 8006d26:	011b      	lsls	r3, r3, #4
 8006d28:	697a      	ldr	r2, [r7, #20]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	2240      	movs	r2, #64	@ 0x40
 8006d32:	4393      	bics	r3, r2
 8006d34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	4a19      	ldr	r2, [pc, #100]	@ (8006da0 <TIM_OC2_SetConfig+0xe8>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d007      	beq.n	8006d4e <TIM_OC2_SetConfig+0x96>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	4a18      	ldr	r2, [pc, #96]	@ (8006da4 <TIM_OC2_SetConfig+0xec>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d003      	beq.n	8006d4e <TIM_OC2_SetConfig+0x96>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	4a17      	ldr	r2, [pc, #92]	@ (8006da8 <TIM_OC2_SetConfig+0xf0>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d113      	bne.n	8006d76 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	4a16      	ldr	r2, [pc, #88]	@ (8006dac <TIM_OC2_SetConfig+0xf4>)
 8006d52:	4013      	ands	r3, r2
 8006d54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	4a15      	ldr	r2, [pc, #84]	@ (8006db0 <TIM_OC2_SetConfig+0xf8>)
 8006d5a:	4013      	ands	r3, r2
 8006d5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	695b      	ldr	r3, [r3, #20]
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	693a      	ldr	r2, [r7, #16]
 8006d66:	4313      	orrs	r3, r2
 8006d68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	699b      	ldr	r3, [r3, #24]
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	693a      	ldr	r2, [r7, #16]
 8006d72:	4313      	orrs	r3, r2
 8006d74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	693a      	ldr	r2, [r7, #16]
 8006d7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	68fa      	ldr	r2, [r7, #12]
 8006d80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	685a      	ldr	r2, [r3, #4]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	697a      	ldr	r2, [r7, #20]
 8006d8e:	621a      	str	r2, [r3, #32]
}
 8006d90:	46c0      	nop			@ (mov r8, r8)
 8006d92:	46bd      	mov	sp, r7
 8006d94:	b006      	add	sp, #24
 8006d96:	bd80      	pop	{r7, pc}
 8006d98:	feff8fff 	.word	0xfeff8fff
 8006d9c:	fffffcff 	.word	0xfffffcff
 8006da0:	40012c00 	.word	0x40012c00
 8006da4:	40014400 	.word	0x40014400
 8006da8:	40014800 	.word	0x40014800
 8006dac:	fffffbff 	.word	0xfffffbff
 8006db0:	fffff7ff 	.word	0xfffff7ff

08006db4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b086      	sub	sp, #24
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6a1b      	ldr	r3, [r3, #32]
 8006dc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6a1b      	ldr	r3, [r3, #32]
 8006dc8:	4a31      	ldr	r2, [pc, #196]	@ (8006e90 <TIM_OC3_SetConfig+0xdc>)
 8006dca:	401a      	ands	r2, r3
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	69db      	ldr	r3, [r3, #28]
 8006dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	4a2d      	ldr	r2, [pc, #180]	@ (8006e94 <TIM_OC3_SetConfig+0xe0>)
 8006de0:	4013      	ands	r3, r2
 8006de2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2203      	movs	r2, #3
 8006de8:	4393      	bics	r3, r2
 8006dea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	68fa      	ldr	r2, [r7, #12]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	4a27      	ldr	r2, [pc, #156]	@ (8006e98 <TIM_OC3_SetConfig+0xe4>)
 8006dfa:	4013      	ands	r3, r2
 8006dfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	021b      	lsls	r3, r3, #8
 8006e04:	697a      	ldr	r2, [r7, #20]
 8006e06:	4313      	orrs	r3, r2
 8006e08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	4a23      	ldr	r2, [pc, #140]	@ (8006e9c <TIM_OC3_SetConfig+0xe8>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d10d      	bne.n	8006e2e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	4a22      	ldr	r2, [pc, #136]	@ (8006ea0 <TIM_OC3_SetConfig+0xec>)
 8006e16:	4013      	ands	r3, r2
 8006e18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	68db      	ldr	r3, [r3, #12]
 8006e1e:	021b      	lsls	r3, r3, #8
 8006e20:	697a      	ldr	r2, [r7, #20]
 8006e22:	4313      	orrs	r3, r2
 8006e24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	4a1e      	ldr	r2, [pc, #120]	@ (8006ea4 <TIM_OC3_SetConfig+0xf0>)
 8006e2a:	4013      	ands	r3, r2
 8006e2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	4a1a      	ldr	r2, [pc, #104]	@ (8006e9c <TIM_OC3_SetConfig+0xe8>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d007      	beq.n	8006e46 <TIM_OC3_SetConfig+0x92>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	4a1b      	ldr	r2, [pc, #108]	@ (8006ea8 <TIM_OC3_SetConfig+0xf4>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d003      	beq.n	8006e46 <TIM_OC3_SetConfig+0x92>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	4a1a      	ldr	r2, [pc, #104]	@ (8006eac <TIM_OC3_SetConfig+0xf8>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d113      	bne.n	8006e6e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	4a19      	ldr	r2, [pc, #100]	@ (8006eb0 <TIM_OC3_SetConfig+0xfc>)
 8006e4a:	4013      	ands	r3, r2
 8006e4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	4a18      	ldr	r2, [pc, #96]	@ (8006eb4 <TIM_OC3_SetConfig+0x100>)
 8006e52:	4013      	ands	r3, r2
 8006e54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	695b      	ldr	r3, [r3, #20]
 8006e5a:	011b      	lsls	r3, r3, #4
 8006e5c:	693a      	ldr	r2, [r7, #16]
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	699b      	ldr	r3, [r3, #24]
 8006e66:	011b      	lsls	r3, r3, #4
 8006e68:	693a      	ldr	r2, [r7, #16]
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	693a      	ldr	r2, [r7, #16]
 8006e72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	68fa      	ldr	r2, [r7, #12]
 8006e78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	685a      	ldr	r2, [r3, #4]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	697a      	ldr	r2, [r7, #20]
 8006e86:	621a      	str	r2, [r3, #32]
}
 8006e88:	46c0      	nop			@ (mov r8, r8)
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	b006      	add	sp, #24
 8006e8e:	bd80      	pop	{r7, pc}
 8006e90:	fffffeff 	.word	0xfffffeff
 8006e94:	fffeff8f 	.word	0xfffeff8f
 8006e98:	fffffdff 	.word	0xfffffdff
 8006e9c:	40012c00 	.word	0x40012c00
 8006ea0:	fffff7ff 	.word	0xfffff7ff
 8006ea4:	fffffbff 	.word	0xfffffbff
 8006ea8:	40014400 	.word	0x40014400
 8006eac:	40014800 	.word	0x40014800
 8006eb0:	ffffefff 	.word	0xffffefff
 8006eb4:	ffffdfff 	.word	0xffffdfff

08006eb8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b086      	sub	sp, #24
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6a1b      	ldr	r3, [r3, #32]
 8006ec6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6a1b      	ldr	r3, [r3, #32]
 8006ecc:	4a24      	ldr	r2, [pc, #144]	@ (8006f60 <TIM_OC4_SetConfig+0xa8>)
 8006ece:	401a      	ands	r2, r3
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	69db      	ldr	r3, [r3, #28]
 8006ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	4a20      	ldr	r2, [pc, #128]	@ (8006f64 <TIM_OC4_SetConfig+0xac>)
 8006ee4:	4013      	ands	r3, r2
 8006ee6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	4a1f      	ldr	r2, [pc, #124]	@ (8006f68 <TIM_OC4_SetConfig+0xb0>)
 8006eec:	4013      	ands	r3, r2
 8006eee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	021b      	lsls	r3, r3, #8
 8006ef6:	68fa      	ldr	r2, [r7, #12]
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	4a1b      	ldr	r2, [pc, #108]	@ (8006f6c <TIM_OC4_SetConfig+0xb4>)
 8006f00:	4013      	ands	r3, r2
 8006f02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	031b      	lsls	r3, r3, #12
 8006f0a:	693a      	ldr	r2, [r7, #16]
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	4a17      	ldr	r2, [pc, #92]	@ (8006f70 <TIM_OC4_SetConfig+0xb8>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d007      	beq.n	8006f28 <TIM_OC4_SetConfig+0x70>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	4a16      	ldr	r2, [pc, #88]	@ (8006f74 <TIM_OC4_SetConfig+0xbc>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d003      	beq.n	8006f28 <TIM_OC4_SetConfig+0x70>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	4a15      	ldr	r2, [pc, #84]	@ (8006f78 <TIM_OC4_SetConfig+0xc0>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d109      	bne.n	8006f3c <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	4a14      	ldr	r2, [pc, #80]	@ (8006f7c <TIM_OC4_SetConfig+0xc4>)
 8006f2c:	4013      	ands	r3, r2
 8006f2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	695b      	ldr	r3, [r3, #20]
 8006f34:	019b      	lsls	r3, r3, #6
 8006f36:	697a      	ldr	r2, [r7, #20]
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	697a      	ldr	r2, [r7, #20]
 8006f40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	68fa      	ldr	r2, [r7, #12]
 8006f46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	685a      	ldr	r2, [r3, #4]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	693a      	ldr	r2, [r7, #16]
 8006f54:	621a      	str	r2, [r3, #32]
}
 8006f56:	46c0      	nop			@ (mov r8, r8)
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	b006      	add	sp, #24
 8006f5c:	bd80      	pop	{r7, pc}
 8006f5e:	46c0      	nop			@ (mov r8, r8)
 8006f60:	ffffefff 	.word	0xffffefff
 8006f64:	feff8fff 	.word	0xfeff8fff
 8006f68:	fffffcff 	.word	0xfffffcff
 8006f6c:	ffffdfff 	.word	0xffffdfff
 8006f70:	40012c00 	.word	0x40012c00
 8006f74:	40014400 	.word	0x40014400
 8006f78:	40014800 	.word	0x40014800
 8006f7c:	ffffbfff 	.word	0xffffbfff

08006f80 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b086      	sub	sp, #24
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6a1b      	ldr	r3, [r3, #32]
 8006f8e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6a1b      	ldr	r3, [r3, #32]
 8006f94:	4a21      	ldr	r2, [pc, #132]	@ (800701c <TIM_OC5_SetConfig+0x9c>)
 8006f96:	401a      	ands	r2, r3
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	4a1d      	ldr	r2, [pc, #116]	@ (8007020 <TIM_OC5_SetConfig+0xa0>)
 8006fac:	4013      	ands	r3, r2
 8006fae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	68fa      	ldr	r2, [r7, #12]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	4a19      	ldr	r2, [pc, #100]	@ (8007024 <TIM_OC5_SetConfig+0xa4>)
 8006fbe:	4013      	ands	r3, r2
 8006fc0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	041b      	lsls	r3, r3, #16
 8006fc8:	693a      	ldr	r2, [r7, #16]
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	4a15      	ldr	r2, [pc, #84]	@ (8007028 <TIM_OC5_SetConfig+0xa8>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d007      	beq.n	8006fe6 <TIM_OC5_SetConfig+0x66>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	4a14      	ldr	r2, [pc, #80]	@ (800702c <TIM_OC5_SetConfig+0xac>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d003      	beq.n	8006fe6 <TIM_OC5_SetConfig+0x66>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	4a13      	ldr	r2, [pc, #76]	@ (8007030 <TIM_OC5_SetConfig+0xb0>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d109      	bne.n	8006ffa <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	4a0c      	ldr	r2, [pc, #48]	@ (800701c <TIM_OC5_SetConfig+0x9c>)
 8006fea:	4013      	ands	r3, r2
 8006fec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	695b      	ldr	r3, [r3, #20]
 8006ff2:	021b      	lsls	r3, r3, #8
 8006ff4:	697a      	ldr	r2, [r7, #20]
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	697a      	ldr	r2, [r7, #20]
 8006ffe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	68fa      	ldr	r2, [r7, #12]
 8007004:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	685a      	ldr	r2, [r3, #4]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	693a      	ldr	r2, [r7, #16]
 8007012:	621a      	str	r2, [r3, #32]
}
 8007014:	46c0      	nop			@ (mov r8, r8)
 8007016:	46bd      	mov	sp, r7
 8007018:	b006      	add	sp, #24
 800701a:	bd80      	pop	{r7, pc}
 800701c:	fffeffff 	.word	0xfffeffff
 8007020:	fffeff8f 	.word	0xfffeff8f
 8007024:	fffdffff 	.word	0xfffdffff
 8007028:	40012c00 	.word	0x40012c00
 800702c:	40014400 	.word	0x40014400
 8007030:	40014800 	.word	0x40014800

08007034 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b086      	sub	sp, #24
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6a1b      	ldr	r3, [r3, #32]
 8007042:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6a1b      	ldr	r3, [r3, #32]
 8007048:	4a22      	ldr	r2, [pc, #136]	@ (80070d4 <TIM_OC6_SetConfig+0xa0>)
 800704a:	401a      	ands	r2, r3
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800705a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	4a1e      	ldr	r2, [pc, #120]	@ (80070d8 <TIM_OC6_SetConfig+0xa4>)
 8007060:	4013      	ands	r3, r2
 8007062:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	021b      	lsls	r3, r3, #8
 800706a:	68fa      	ldr	r2, [r7, #12]
 800706c:	4313      	orrs	r3, r2
 800706e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	4a1a      	ldr	r2, [pc, #104]	@ (80070dc <TIM_OC6_SetConfig+0xa8>)
 8007074:	4013      	ands	r3, r2
 8007076:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	051b      	lsls	r3, r3, #20
 800707e:	693a      	ldr	r2, [r7, #16]
 8007080:	4313      	orrs	r3, r2
 8007082:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	4a16      	ldr	r2, [pc, #88]	@ (80070e0 <TIM_OC6_SetConfig+0xac>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d007      	beq.n	800709c <TIM_OC6_SetConfig+0x68>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	4a15      	ldr	r2, [pc, #84]	@ (80070e4 <TIM_OC6_SetConfig+0xb0>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d003      	beq.n	800709c <TIM_OC6_SetConfig+0x68>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	4a14      	ldr	r2, [pc, #80]	@ (80070e8 <TIM_OC6_SetConfig+0xb4>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d109      	bne.n	80070b0 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	4a13      	ldr	r2, [pc, #76]	@ (80070ec <TIM_OC6_SetConfig+0xb8>)
 80070a0:	4013      	ands	r3, r2
 80070a2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	695b      	ldr	r3, [r3, #20]
 80070a8:	029b      	lsls	r3, r3, #10
 80070aa:	697a      	ldr	r2, [r7, #20]
 80070ac:	4313      	orrs	r3, r2
 80070ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	697a      	ldr	r2, [r7, #20]
 80070b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	68fa      	ldr	r2, [r7, #12]
 80070ba:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	685a      	ldr	r2, [r3, #4]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	693a      	ldr	r2, [r7, #16]
 80070c8:	621a      	str	r2, [r3, #32]
}
 80070ca:	46c0      	nop			@ (mov r8, r8)
 80070cc:	46bd      	mov	sp, r7
 80070ce:	b006      	add	sp, #24
 80070d0:	bd80      	pop	{r7, pc}
 80070d2:	46c0      	nop			@ (mov r8, r8)
 80070d4:	ffefffff 	.word	0xffefffff
 80070d8:	feff8fff 	.word	0xfeff8fff
 80070dc:	ffdfffff 	.word	0xffdfffff
 80070e0:	40012c00 	.word	0x40012c00
 80070e4:	40014400 	.word	0x40014400
 80070e8:	40014800 	.word	0x40014800
 80070ec:	fffbffff 	.word	0xfffbffff

080070f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b086      	sub	sp, #24
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	60f8      	str	r0, [r7, #12]
 80070f8:	60b9      	str	r1, [r7, #8]
 80070fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	221f      	movs	r2, #31
 8007100:	4013      	ands	r3, r2
 8007102:	2201      	movs	r2, #1
 8007104:	409a      	lsls	r2, r3
 8007106:	0013      	movs	r3, r2
 8007108:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	6a1b      	ldr	r3, [r3, #32]
 800710e:	697a      	ldr	r2, [r7, #20]
 8007110:	43d2      	mvns	r2, r2
 8007112:	401a      	ands	r2, r3
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	6a1a      	ldr	r2, [r3, #32]
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	211f      	movs	r1, #31
 8007120:	400b      	ands	r3, r1
 8007122:	6879      	ldr	r1, [r7, #4]
 8007124:	4099      	lsls	r1, r3
 8007126:	000b      	movs	r3, r1
 8007128:	431a      	orrs	r2, r3
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	621a      	str	r2, [r3, #32]
}
 800712e:	46c0      	nop			@ (mov r8, r8)
 8007130:	46bd      	mov	sp, r7
 8007132:	b006      	add	sp, #24
 8007134:	bd80      	pop	{r7, pc}
	...

08007138 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b084      	sub	sp, #16
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	223c      	movs	r2, #60	@ 0x3c
 8007146:	5c9b      	ldrb	r3, [r3, r2]
 8007148:	2b01      	cmp	r3, #1
 800714a:	d101      	bne.n	8007150 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800714c:	2302      	movs	r3, #2
 800714e:	e050      	b.n	80071f2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	223c      	movs	r2, #60	@ 0x3c
 8007154:	2101      	movs	r1, #1
 8007156:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	223d      	movs	r2, #61	@ 0x3d
 800715c:	2102      	movs	r1, #2
 800715e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a21      	ldr	r2, [pc, #132]	@ (80071fc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d108      	bne.n	800718c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	4a20      	ldr	r2, [pc, #128]	@ (8007200 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800717e:	4013      	ands	r3, r2
 8007180:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	68fa      	ldr	r2, [r7, #12]
 8007188:	4313      	orrs	r3, r2
 800718a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2270      	movs	r2, #112	@ 0x70
 8007190:	4393      	bics	r3, r2
 8007192:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	68fa      	ldr	r2, [r7, #12]
 800719a:	4313      	orrs	r3, r2
 800719c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	68fa      	ldr	r2, [r7, #12]
 80071a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a14      	ldr	r2, [pc, #80]	@ (80071fc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d00a      	beq.n	80071c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	2380      	movs	r3, #128	@ 0x80
 80071b6:	05db      	lsls	r3, r3, #23
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d004      	beq.n	80071c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a10      	ldr	r2, [pc, #64]	@ (8007204 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d10c      	bne.n	80071e0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	2280      	movs	r2, #128	@ 0x80
 80071ca:	4393      	bics	r3, r2
 80071cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	68ba      	ldr	r2, [r7, #8]
 80071d4:	4313      	orrs	r3, r2
 80071d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	68ba      	ldr	r2, [r7, #8]
 80071de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	223d      	movs	r2, #61	@ 0x3d
 80071e4:	2101      	movs	r1, #1
 80071e6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	223c      	movs	r2, #60	@ 0x3c
 80071ec:	2100      	movs	r1, #0
 80071ee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80071f0:	2300      	movs	r3, #0
}
 80071f2:	0018      	movs	r0, r3
 80071f4:	46bd      	mov	sp, r7
 80071f6:	b004      	add	sp, #16
 80071f8:	bd80      	pop	{r7, pc}
 80071fa:	46c0      	nop			@ (mov r8, r8)
 80071fc:	40012c00 	.word	0x40012c00
 8007200:	ff0fffff 	.word	0xff0fffff
 8007204:	40000400 	.word	0x40000400

08007208 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b084      	sub	sp, #16
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007212:	2300      	movs	r3, #0
 8007214:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	223c      	movs	r2, #60	@ 0x3c
 800721a:	5c9b      	ldrb	r3, [r3, r2]
 800721c:	2b01      	cmp	r3, #1
 800721e:	d101      	bne.n	8007224 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007220:	2302      	movs	r3, #2
 8007222:	e06f      	b.n	8007304 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	223c      	movs	r2, #60	@ 0x3c
 8007228:	2101      	movs	r1, #1
 800722a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	22ff      	movs	r2, #255	@ 0xff
 8007230:	4393      	bics	r3, r2
 8007232:	001a      	movs	r2, r3
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	68db      	ldr	r3, [r3, #12]
 8007238:	4313      	orrs	r3, r2
 800723a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	4a33      	ldr	r2, [pc, #204]	@ (800730c <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8007240:	401a      	ands	r2, r3
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	4313      	orrs	r3, r2
 8007248:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	4a30      	ldr	r2, [pc, #192]	@ (8007310 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800724e:	401a      	ands	r2, r3
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	4313      	orrs	r3, r2
 8007256:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	4a2e      	ldr	r2, [pc, #184]	@ (8007314 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 800725c:	401a      	ands	r2, r3
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4313      	orrs	r3, r2
 8007264:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	4a2b      	ldr	r2, [pc, #172]	@ (8007318 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800726a:	401a      	ands	r2, r3
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	691b      	ldr	r3, [r3, #16]
 8007270:	4313      	orrs	r3, r2
 8007272:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	4a29      	ldr	r2, [pc, #164]	@ (800731c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8007278:	401a      	ands	r2, r3
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	695b      	ldr	r3, [r3, #20]
 800727e:	4313      	orrs	r3, r2
 8007280:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	4a26      	ldr	r2, [pc, #152]	@ (8007320 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8007286:	401a      	ands	r2, r3
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800728c:	4313      	orrs	r3, r2
 800728e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	4a24      	ldr	r2, [pc, #144]	@ (8007324 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8007294:	401a      	ands	r2, r3
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	699b      	ldr	r3, [r3, #24]
 800729a:	041b      	lsls	r3, r3, #16
 800729c:	4313      	orrs	r3, r2
 800729e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	4a21      	ldr	r2, [pc, #132]	@ (8007328 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80072a4:	401a      	ands	r2, r3
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	69db      	ldr	r3, [r3, #28]
 80072aa:	4313      	orrs	r3, r2
 80072ac:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a1e      	ldr	r2, [pc, #120]	@ (800732c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d11c      	bne.n	80072f2 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	4a1d      	ldr	r2, [pc, #116]	@ (8007330 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80072bc:	401a      	ands	r2, r3
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072c2:	051b      	lsls	r3, r3, #20
 80072c4:	4313      	orrs	r3, r2
 80072c6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	4a1a      	ldr	r2, [pc, #104]	@ (8007334 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80072cc:	401a      	ands	r2, r3
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	6a1b      	ldr	r3, [r3, #32]
 80072d2:	4313      	orrs	r3, r2
 80072d4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	4a17      	ldr	r2, [pc, #92]	@ (8007338 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80072da:	401a      	ands	r2, r3
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072e0:	4313      	orrs	r3, r2
 80072e2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	4a15      	ldr	r2, [pc, #84]	@ (800733c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80072e8:	401a      	ands	r2, r3
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072ee:	4313      	orrs	r3, r2
 80072f0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	68fa      	ldr	r2, [r7, #12]
 80072f8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	223c      	movs	r2, #60	@ 0x3c
 80072fe:	2100      	movs	r1, #0
 8007300:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007302:	2300      	movs	r3, #0
}
 8007304:	0018      	movs	r0, r3
 8007306:	46bd      	mov	sp, r7
 8007308:	b004      	add	sp, #16
 800730a:	bd80      	pop	{r7, pc}
 800730c:	fffffcff 	.word	0xfffffcff
 8007310:	fffffbff 	.word	0xfffffbff
 8007314:	fffff7ff 	.word	0xfffff7ff
 8007318:	ffffefff 	.word	0xffffefff
 800731c:	ffffdfff 	.word	0xffffdfff
 8007320:	ffffbfff 	.word	0xffffbfff
 8007324:	fff0ffff 	.word	0xfff0ffff
 8007328:	efffffff 	.word	0xefffffff
 800732c:	40012c00 	.word	0x40012c00
 8007330:	ff0fffff 	.word	0xff0fffff
 8007334:	feffffff 	.word	0xfeffffff
 8007338:	fdffffff 	.word	0xfdffffff
 800733c:	dfffffff 	.word	0xdfffffff

08007340 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b082      	sub	sp, #8
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d101      	bne.n	8007352 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800734e:	2301      	movs	r3, #1
 8007350:	e032      	b.n	80073b8 <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2288      	movs	r2, #136	@ 0x88
 8007356:	2124      	movs	r1, #36	@ 0x24
 8007358:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	681a      	ldr	r2, [r3, #0]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	2101      	movs	r1, #1
 8007366:	438a      	bics	r2, r1
 8007368:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	2200      	movs	r2, #0
 8007370:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	2200      	movs	r2, #0
 8007378:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	2200      	movs	r2, #0
 8007380:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	0018      	movs	r0, r3
 8007386:	f7fb fed5 	bl	8003134 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2290      	movs	r2, #144	@ 0x90
 800738e:	2100      	movs	r1, #0
 8007390:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2288      	movs	r2, #136	@ 0x88
 8007396:	2100      	movs	r1, #0
 8007398:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	228c      	movs	r2, #140	@ 0x8c
 800739e:	2100      	movs	r1, #0
 80073a0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2200      	movs	r2, #0
 80073a6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2284      	movs	r2, #132	@ 0x84
 80073b2:	2100      	movs	r1, #0
 80073b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80073b6:	2300      	movs	r3, #0
}
 80073b8:	0018      	movs	r0, r3
 80073ba:	46bd      	mov	sp, r7
 80073bc:	b002      	add	sp, #8
 80073be:	bd80      	pop	{r7, pc}

080073c0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b088      	sub	sp, #32
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	1dbb      	adds	r3, r7, #6
 80073cc:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2288      	movs	r2, #136	@ 0x88
 80073d2:	589b      	ldr	r3, [r3, r2]
 80073d4:	2b20      	cmp	r3, #32
 80073d6:	d000      	beq.n	80073da <HAL_UART_Transmit_DMA+0x1a>
 80073d8:	e079      	b.n	80074ce <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d003      	beq.n	80073e8 <HAL_UART_Transmit_DMA+0x28>
 80073e0:	1dbb      	adds	r3, r7, #6
 80073e2:	881b      	ldrh	r3, [r3, #0]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d101      	bne.n	80073ec <HAL_UART_Transmit_DMA+0x2c>
    {
      return HAL_ERROR;
 80073e8:	2301      	movs	r3, #1
 80073ea:	e071      	b.n	80074d0 <HAL_UART_Transmit_DMA+0x110>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	689a      	ldr	r2, [r3, #8]
 80073f0:	2380      	movs	r3, #128	@ 0x80
 80073f2:	015b      	lsls	r3, r3, #5
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d109      	bne.n	800740c <HAL_UART_Transmit_DMA+0x4c>
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	691b      	ldr	r3, [r3, #16]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d105      	bne.n	800740c <HAL_UART_Transmit_DMA+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	2201      	movs	r2, #1
 8007404:	4013      	ands	r3, r2
 8007406:	d001      	beq.n	800740c <HAL_UART_Transmit_DMA+0x4c>
      {
        return  HAL_ERROR;
 8007408:	2301      	movs	r3, #1
 800740a:	e061      	b.n	80074d0 <HAL_UART_Transmit_DMA+0x110>
      }
    }

    huart->pTxBuffPtr  = pData;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	68ba      	ldr	r2, [r7, #8]
 8007410:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	1dba      	adds	r2, r7, #6
 8007416:	2154      	movs	r1, #84	@ 0x54
 8007418:	8812      	ldrh	r2, [r2, #0]
 800741a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	1dba      	adds	r2, r7, #6
 8007420:	2156      	movs	r1, #86	@ 0x56
 8007422:	8812      	ldrh	r2, [r2, #0]
 8007424:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2290      	movs	r2, #144	@ 0x90
 800742a:	2100      	movs	r1, #0
 800742c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2288      	movs	r2, #136	@ 0x88
 8007432:	2121      	movs	r1, #33	@ 0x21
 8007434:	5099      	str	r1, [r3, r2]

    if (huart->hdmatx != NULL)
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800743a:	2b00      	cmp	r3, #0
 800743c:	d028      	beq.n	8007490 <HAL_UART_Transmit_DMA+0xd0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007442:	4a25      	ldr	r2, [pc, #148]	@ (80074d8 <HAL_UART_Transmit_DMA+0x118>)
 8007444:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800744a:	4a24      	ldr	r2, [pc, #144]	@ (80074dc <HAL_UART_Transmit_DMA+0x11c>)
 800744c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007452:	4a23      	ldr	r2, [pc, #140]	@ (80074e0 <HAL_UART_Transmit_DMA+0x120>)
 8007454:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800745a:	2200      	movs	r2, #0
 800745c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007466:	0019      	movs	r1, r3
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	3328      	adds	r3, #40	@ 0x28
 800746e:	001a      	movs	r2, r3
 8007470:	1dbb      	adds	r3, r7, #6
 8007472:	881b      	ldrh	r3, [r3, #0]
 8007474:	f7fc fa9c 	bl	80039b0 <HAL_DMA_Start_IT>
 8007478:	1e03      	subs	r3, r0, #0
 800747a:	d009      	beq.n	8007490 <HAL_UART_Transmit_DMA+0xd0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2290      	movs	r2, #144	@ 0x90
 8007480:	2110      	movs	r1, #16
 8007482:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2288      	movs	r2, #136	@ 0x88
 8007488:	2120      	movs	r1, #32
 800748a:	5099      	str	r1, [r3, r2]

        return HAL_ERROR;
 800748c:	2301      	movs	r3, #1
 800748e:	e01f      	b.n	80074d0 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	2240      	movs	r2, #64	@ 0x40
 8007496:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007498:	f3ef 8310 	mrs	r3, PRIMASK
 800749c:	613b      	str	r3, [r7, #16]
  return(result);
 800749e:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80074a0:	61fb      	str	r3, [r7, #28]
 80074a2:	2301      	movs	r3, #1
 80074a4:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	f383 8810 	msr	PRIMASK, r3
}
 80074ac:	46c0      	nop			@ (mov r8, r8)
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	689a      	ldr	r2, [r3, #8]
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	2180      	movs	r1, #128	@ 0x80
 80074ba:	430a      	orrs	r2, r1
 80074bc:	609a      	str	r2, [r3, #8]
 80074be:	69fb      	ldr	r3, [r7, #28]
 80074c0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074c2:	69bb      	ldr	r3, [r7, #24]
 80074c4:	f383 8810 	msr	PRIMASK, r3
}
 80074c8:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 80074ca:	2300      	movs	r3, #0
 80074cc:	e000      	b.n	80074d0 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 80074ce:	2302      	movs	r3, #2
  }
}
 80074d0:	0018      	movs	r0, r3
 80074d2:	46bd      	mov	sp, r7
 80074d4:	b008      	add	sp, #32
 80074d6:	bd80      	pop	{r7, pc}
 80074d8:	080086e9 	.word	0x080086e9
 80074dc:	08008781 	.word	0x08008781
 80074e0:	08008913 	.word	0x08008913

080074e4 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b096      	sub	sp, #88	@ 0x58
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80074ec:	f3ef 8310 	mrs	r3, PRIMASK
 80074f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80074f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80074f4:	657b      	str	r3, [r7, #84]	@ 0x54
 80074f6:	2301      	movs	r3, #1
 80074f8:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074fc:	f383 8810 	msr	PRIMASK, r3
}
 8007500:	46c0      	nop			@ (mov r8, r8)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	681a      	ldr	r2, [r3, #0]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4979      	ldr	r1, [pc, #484]	@ (80076f4 <HAL_UART_Abort+0x210>)
 800750e:	400a      	ands	r2, r1
 8007510:	601a      	str	r2, [r3, #0]
 8007512:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007514:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007516:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007518:	f383 8810 	msr	PRIMASK, r3
}
 800751c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800751e:	f3ef 8310 	mrs	r3, PRIMASK
 8007522:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 8007524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 8007526:	653b      	str	r3, [r7, #80]	@ 0x50
 8007528:	2301      	movs	r3, #1
 800752a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800752c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800752e:	f383 8810 	msr	PRIMASK, r3
}
 8007532:	46c0      	nop			@ (mov r8, r8)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	689a      	ldr	r2, [r3, #8]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	496e      	ldr	r1, [pc, #440]	@ (80076f8 <HAL_UART_Abort+0x214>)
 8007540:	400a      	ands	r2, r1
 8007542:	609a      	str	r2, [r3, #8]
 8007544:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007546:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007548:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800754a:	f383 8810 	msr	PRIMASK, r3
}
 800754e:	46c0      	nop			@ (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007554:	2b01      	cmp	r3, #1
 8007556:	d118      	bne.n	800758a <HAL_UART_Abort+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007558:	f3ef 8310 	mrs	r3, PRIMASK
 800755c:	623b      	str	r3, [r7, #32]
  return(result);
 800755e:	6a3b      	ldr	r3, [r7, #32]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8007560:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007562:	2301      	movs	r3, #1
 8007564:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007568:	f383 8810 	msr	PRIMASK, r3
}
 800756c:	46c0      	nop			@ (mov r8, r8)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	2110      	movs	r1, #16
 800757a:	438a      	bics	r2, r1
 800757c:	601a      	str	r2, [r3, #0]
 800757e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007580:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007584:	f383 8810 	msr	PRIMASK, r3
}
 8007588:	46c0      	nop			@ (mov r8, r8)
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	2280      	movs	r2, #128	@ 0x80
 8007592:	4013      	ands	r3, r2
 8007594:	2b80      	cmp	r3, #128	@ 0x80
 8007596:	d135      	bne.n	8007604 <HAL_UART_Abort+0x120>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007598:	f3ef 8310 	mrs	r3, PRIMASK
 800759c:	617b      	str	r3, [r7, #20]
  return(result);
 800759e:	697b      	ldr	r3, [r7, #20]
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80075a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80075a2:	2301      	movs	r3, #1
 80075a4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075a6:	69bb      	ldr	r3, [r7, #24]
 80075a8:	f383 8810 	msr	PRIMASK, r3
}
 80075ac:	46c0      	nop			@ (mov r8, r8)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	689a      	ldr	r2, [r3, #8]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	2180      	movs	r1, #128	@ 0x80
 80075ba:	438a      	bics	r2, r1
 80075bc:	609a      	str	r2, [r3, #8]
 80075be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80075c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075c2:	69fb      	ldr	r3, [r7, #28]
 80075c4:	f383 8810 	msr	PRIMASK, r3
}
 80075c8:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d018      	beq.n	8007604 <HAL_UART_Abort+0x120>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80075d6:	2200      	movs	r2, #0
 80075d8:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80075de:	0018      	movs	r0, r3
 80075e0:	f7fc fa6e 	bl	8003ac0 <HAL_DMA_Abort>
 80075e4:	1e03      	subs	r3, r0, #0
 80075e6:	d00d      	beq.n	8007604 <HAL_UART_Abort+0x120>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80075ec:	0018      	movs	r0, r3
 80075ee:	f7fc fc01 	bl	8003df4 <HAL_DMA_GetError>
 80075f2:	0003      	movs	r3, r0
 80075f4:	2b20      	cmp	r3, #32
 80075f6:	d105      	bne.n	8007604 <HAL_UART_Abort+0x120>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2290      	movs	r2, #144	@ 0x90
 80075fc:	2110      	movs	r1, #16
 80075fe:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007600:	2303      	movs	r3, #3
 8007602:	e072      	b.n	80076ea <HAL_UART_Abort+0x206>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	689b      	ldr	r3, [r3, #8]
 800760a:	2240      	movs	r2, #64	@ 0x40
 800760c:	4013      	ands	r3, r2
 800760e:	2b40      	cmp	r3, #64	@ 0x40
 8007610:	d139      	bne.n	8007686 <HAL_UART_Abort+0x1a2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007612:	f3ef 8310 	mrs	r3, PRIMASK
 8007616:	60bb      	str	r3, [r7, #8]
  return(result);
 8007618:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800761a:	647b      	str	r3, [r7, #68]	@ 0x44
 800761c:	2301      	movs	r3, #1
 800761e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f383 8810 	msr	PRIMASK, r3
}
 8007626:	46c0      	nop			@ (mov r8, r8)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	689a      	ldr	r2, [r3, #8]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	2140      	movs	r1, #64	@ 0x40
 8007634:	438a      	bics	r2, r1
 8007636:	609a      	str	r2, [r3, #8]
 8007638:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800763a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	f383 8810 	msr	PRIMASK, r3
}
 8007642:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2280      	movs	r2, #128	@ 0x80
 8007648:	589b      	ldr	r3, [r3, r2]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d01b      	beq.n	8007686 <HAL_UART_Abort+0x1a2>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2280      	movs	r2, #128	@ 0x80
 8007652:	589b      	ldr	r3, [r3, r2]
 8007654:	2200      	movs	r2, #0
 8007656:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2280      	movs	r2, #128	@ 0x80
 800765c:	589b      	ldr	r3, [r3, r2]
 800765e:	0018      	movs	r0, r3
 8007660:	f7fc fa2e 	bl	8003ac0 <HAL_DMA_Abort>
 8007664:	1e03      	subs	r3, r0, #0
 8007666:	d00e      	beq.n	8007686 <HAL_UART_Abort+0x1a2>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2280      	movs	r2, #128	@ 0x80
 800766c:	589b      	ldr	r3, [r3, r2]
 800766e:	0018      	movs	r0, r3
 8007670:	f7fc fbc0 	bl	8003df4 <HAL_DMA_GetError>
 8007674:	0003      	movs	r3, r0
 8007676:	2b20      	cmp	r3, #32
 8007678:	d105      	bne.n	8007686 <HAL_UART_Abort+0x1a2>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2290      	movs	r2, #144	@ 0x90
 800767e:	2110      	movs	r1, #16
 8007680:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007682:	2303      	movs	r3, #3
 8007684:	e031      	b.n	80076ea <HAL_UART_Abort+0x206>
    }
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2256      	movs	r2, #86	@ 0x56
 800768a:	2100      	movs	r1, #0
 800768c:	5299      	strh	r1, [r3, r2]
  huart->RxXferCount = 0U;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	225e      	movs	r2, #94	@ 0x5e
 8007692:	2100      	movs	r1, #0
 8007694:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	220f      	movs	r2, #15
 800769c:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80076a2:	2380      	movs	r3, #128	@ 0x80
 80076a4:	059b      	lsls	r3, r3, #22
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d107      	bne.n	80076ba <HAL_UART_Abort+0x1d6>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	699a      	ldr	r2, [r3, #24]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	2110      	movs	r1, #16
 80076b6:	430a      	orrs	r2, r1
 80076b8:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	699a      	ldr	r2, [r3, #24]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	2108      	movs	r1, #8
 80076c6:	430a      	orrs	r2, r1
 80076c8:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2288      	movs	r2, #136	@ 0x88
 80076ce:	2120      	movs	r1, #32
 80076d0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	228c      	movs	r2, #140	@ 0x8c
 80076d6:	2120      	movs	r1, #32
 80076d8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2200      	movs	r2, #0
 80076de:	66da      	str	r2, [r3, #108]	@ 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2290      	movs	r2, #144	@ 0x90
 80076e4:	2100      	movs	r1, #0
 80076e6:	5099      	str	r1, [r3, r2]

  return HAL_OK;
 80076e8:	2300      	movs	r3, #0
}
 80076ea:	0018      	movs	r0, r3
 80076ec:	46bd      	mov	sp, r7
 80076ee:	b016      	add	sp, #88	@ 0x58
 80076f0:	bd80      	pop	{r7, pc}
 80076f2:	46c0      	nop			@ (mov r8, r8)
 80076f4:	fffffe1f 	.word	0xfffffe1f
 80076f8:	ef7ffffe 	.word	0xef7ffffe

080076fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80076fc:	b5b0      	push	{r4, r5, r7, lr}
 80076fe:	b0aa      	sub	sp, #168	@ 0xa8
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	69db      	ldr	r3, [r3, #28]
 800770a:	22a4      	movs	r2, #164	@ 0xa4
 800770c:	18b9      	adds	r1, r7, r2
 800770e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	20a0      	movs	r0, #160	@ 0xa0
 8007718:	1839      	adds	r1, r7, r0
 800771a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	689b      	ldr	r3, [r3, #8]
 8007722:	249c      	movs	r4, #156	@ 0x9c
 8007724:	1939      	adds	r1, r7, r4
 8007726:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007728:	0011      	movs	r1, r2
 800772a:	18bb      	adds	r3, r7, r2
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4aa2      	ldr	r2, [pc, #648]	@ (80079b8 <HAL_UART_IRQHandler+0x2bc>)
 8007730:	4013      	ands	r3, r2
 8007732:	2298      	movs	r2, #152	@ 0x98
 8007734:	18bd      	adds	r5, r7, r2
 8007736:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8007738:	18bb      	adds	r3, r7, r2
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d11a      	bne.n	8007776 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007740:	187b      	adds	r3, r7, r1
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	2220      	movs	r2, #32
 8007746:	4013      	ands	r3, r2
 8007748:	d015      	beq.n	8007776 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800774a:	183b      	adds	r3, r7, r0
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	2220      	movs	r2, #32
 8007750:	4013      	ands	r3, r2
 8007752:	d105      	bne.n	8007760 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007754:	193b      	adds	r3, r7, r4
 8007756:	681a      	ldr	r2, [r3, #0]
 8007758:	2380      	movs	r3, #128	@ 0x80
 800775a:	055b      	lsls	r3, r3, #21
 800775c:	4013      	ands	r3, r2
 800775e:	d00a      	beq.n	8007776 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007764:	2b00      	cmp	r3, #0
 8007766:	d100      	bne.n	800776a <HAL_UART_IRQHandler+0x6e>
 8007768:	e2fb      	b.n	8007d62 <HAL_UART_IRQHandler+0x666>
      {
        huart->RxISR(huart);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800776e:	687a      	ldr	r2, [r7, #4]
 8007770:	0010      	movs	r0, r2
 8007772:	4798      	blx	r3
      }
      return;
 8007774:	e2f5      	b.n	8007d62 <HAL_UART_IRQHandler+0x666>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007776:	2398      	movs	r3, #152	@ 0x98
 8007778:	18fb      	adds	r3, r7, r3
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d100      	bne.n	8007782 <HAL_UART_IRQHandler+0x86>
 8007780:	e122      	b.n	80079c8 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007782:	239c      	movs	r3, #156	@ 0x9c
 8007784:	18fb      	adds	r3, r7, r3
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a8c      	ldr	r2, [pc, #560]	@ (80079bc <HAL_UART_IRQHandler+0x2c0>)
 800778a:	4013      	ands	r3, r2
 800778c:	d106      	bne.n	800779c <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800778e:	23a0      	movs	r3, #160	@ 0xa0
 8007790:	18fb      	adds	r3, r7, r3
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a8a      	ldr	r2, [pc, #552]	@ (80079c0 <HAL_UART_IRQHandler+0x2c4>)
 8007796:	4013      	ands	r3, r2
 8007798:	d100      	bne.n	800779c <HAL_UART_IRQHandler+0xa0>
 800779a:	e115      	b.n	80079c8 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800779c:	23a4      	movs	r3, #164	@ 0xa4
 800779e:	18fb      	adds	r3, r7, r3
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	2201      	movs	r2, #1
 80077a4:	4013      	ands	r3, r2
 80077a6:	d012      	beq.n	80077ce <HAL_UART_IRQHandler+0xd2>
 80077a8:	23a0      	movs	r3, #160	@ 0xa0
 80077aa:	18fb      	adds	r3, r7, r3
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	2380      	movs	r3, #128	@ 0x80
 80077b0:	005b      	lsls	r3, r3, #1
 80077b2:	4013      	ands	r3, r2
 80077b4:	d00b      	beq.n	80077ce <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	2201      	movs	r2, #1
 80077bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2290      	movs	r2, #144	@ 0x90
 80077c2:	589b      	ldr	r3, [r3, r2]
 80077c4:	2201      	movs	r2, #1
 80077c6:	431a      	orrs	r2, r3
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2190      	movs	r1, #144	@ 0x90
 80077cc:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80077ce:	23a4      	movs	r3, #164	@ 0xa4
 80077d0:	18fb      	adds	r3, r7, r3
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	2202      	movs	r2, #2
 80077d6:	4013      	ands	r3, r2
 80077d8:	d011      	beq.n	80077fe <HAL_UART_IRQHandler+0x102>
 80077da:	239c      	movs	r3, #156	@ 0x9c
 80077dc:	18fb      	adds	r3, r7, r3
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	2201      	movs	r2, #1
 80077e2:	4013      	ands	r3, r2
 80077e4:	d00b      	beq.n	80077fe <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	2202      	movs	r2, #2
 80077ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2290      	movs	r2, #144	@ 0x90
 80077f2:	589b      	ldr	r3, [r3, r2]
 80077f4:	2204      	movs	r2, #4
 80077f6:	431a      	orrs	r2, r3
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2190      	movs	r1, #144	@ 0x90
 80077fc:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80077fe:	23a4      	movs	r3, #164	@ 0xa4
 8007800:	18fb      	adds	r3, r7, r3
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	2204      	movs	r2, #4
 8007806:	4013      	ands	r3, r2
 8007808:	d011      	beq.n	800782e <HAL_UART_IRQHandler+0x132>
 800780a:	239c      	movs	r3, #156	@ 0x9c
 800780c:	18fb      	adds	r3, r7, r3
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	2201      	movs	r2, #1
 8007812:	4013      	ands	r3, r2
 8007814:	d00b      	beq.n	800782e <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	2204      	movs	r2, #4
 800781c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2290      	movs	r2, #144	@ 0x90
 8007822:	589b      	ldr	r3, [r3, r2]
 8007824:	2202      	movs	r2, #2
 8007826:	431a      	orrs	r2, r3
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2190      	movs	r1, #144	@ 0x90
 800782c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800782e:	23a4      	movs	r3, #164	@ 0xa4
 8007830:	18fb      	adds	r3, r7, r3
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	2208      	movs	r2, #8
 8007836:	4013      	ands	r3, r2
 8007838:	d017      	beq.n	800786a <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800783a:	23a0      	movs	r3, #160	@ 0xa0
 800783c:	18fb      	adds	r3, r7, r3
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	2220      	movs	r2, #32
 8007842:	4013      	ands	r3, r2
 8007844:	d105      	bne.n	8007852 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007846:	239c      	movs	r3, #156	@ 0x9c
 8007848:	18fb      	adds	r3, r7, r3
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a5b      	ldr	r2, [pc, #364]	@ (80079bc <HAL_UART_IRQHandler+0x2c0>)
 800784e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007850:	d00b      	beq.n	800786a <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	2208      	movs	r2, #8
 8007858:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2290      	movs	r2, #144	@ 0x90
 800785e:	589b      	ldr	r3, [r3, r2]
 8007860:	2208      	movs	r2, #8
 8007862:	431a      	orrs	r2, r3
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2190      	movs	r1, #144	@ 0x90
 8007868:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800786a:	23a4      	movs	r3, #164	@ 0xa4
 800786c:	18fb      	adds	r3, r7, r3
 800786e:	681a      	ldr	r2, [r3, #0]
 8007870:	2380      	movs	r3, #128	@ 0x80
 8007872:	011b      	lsls	r3, r3, #4
 8007874:	4013      	ands	r3, r2
 8007876:	d013      	beq.n	80078a0 <HAL_UART_IRQHandler+0x1a4>
 8007878:	23a0      	movs	r3, #160	@ 0xa0
 800787a:	18fb      	adds	r3, r7, r3
 800787c:	681a      	ldr	r2, [r3, #0]
 800787e:	2380      	movs	r3, #128	@ 0x80
 8007880:	04db      	lsls	r3, r3, #19
 8007882:	4013      	ands	r3, r2
 8007884:	d00c      	beq.n	80078a0 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	2280      	movs	r2, #128	@ 0x80
 800788c:	0112      	lsls	r2, r2, #4
 800788e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2290      	movs	r2, #144	@ 0x90
 8007894:	589b      	ldr	r3, [r3, r2]
 8007896:	2220      	movs	r2, #32
 8007898:	431a      	orrs	r2, r3
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2190      	movs	r1, #144	@ 0x90
 800789e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2290      	movs	r2, #144	@ 0x90
 80078a4:	589b      	ldr	r3, [r3, r2]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d100      	bne.n	80078ac <HAL_UART_IRQHandler+0x1b0>
 80078aa:	e25c      	b.n	8007d66 <HAL_UART_IRQHandler+0x66a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80078ac:	23a4      	movs	r3, #164	@ 0xa4
 80078ae:	18fb      	adds	r3, r7, r3
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	2220      	movs	r2, #32
 80078b4:	4013      	ands	r3, r2
 80078b6:	d015      	beq.n	80078e4 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80078b8:	23a0      	movs	r3, #160	@ 0xa0
 80078ba:	18fb      	adds	r3, r7, r3
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	2220      	movs	r2, #32
 80078c0:	4013      	ands	r3, r2
 80078c2:	d106      	bne.n	80078d2 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80078c4:	239c      	movs	r3, #156	@ 0x9c
 80078c6:	18fb      	adds	r3, r7, r3
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	2380      	movs	r3, #128	@ 0x80
 80078cc:	055b      	lsls	r3, r3, #21
 80078ce:	4013      	ands	r3, r2
 80078d0:	d008      	beq.n	80078e4 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d004      	beq.n	80078e4 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	0010      	movs	r0, r2
 80078e2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2290      	movs	r2, #144	@ 0x90
 80078e8:	589b      	ldr	r3, [r3, r2]
 80078ea:	2194      	movs	r1, #148	@ 0x94
 80078ec:	187a      	adds	r2, r7, r1
 80078ee:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	689b      	ldr	r3, [r3, #8]
 80078f6:	2240      	movs	r2, #64	@ 0x40
 80078f8:	4013      	ands	r3, r2
 80078fa:	2b40      	cmp	r3, #64	@ 0x40
 80078fc:	d004      	beq.n	8007908 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80078fe:	187b      	adds	r3, r7, r1
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	2228      	movs	r2, #40	@ 0x28
 8007904:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007906:	d04c      	beq.n	80079a2 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	0018      	movs	r0, r3
 800790c:	f000 fe86 	bl	800861c <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	689b      	ldr	r3, [r3, #8]
 8007916:	2240      	movs	r2, #64	@ 0x40
 8007918:	4013      	ands	r3, r2
 800791a:	2b40      	cmp	r3, #64	@ 0x40
 800791c:	d13c      	bne.n	8007998 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800791e:	f3ef 8310 	mrs	r3, PRIMASK
 8007922:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8007924:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007926:	2090      	movs	r0, #144	@ 0x90
 8007928:	183a      	adds	r2, r7, r0
 800792a:	6013      	str	r3, [r2, #0]
 800792c:	2301      	movs	r3, #1
 800792e:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007930:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007932:	f383 8810 	msr	PRIMASK, r3
}
 8007936:	46c0      	nop			@ (mov r8, r8)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	689a      	ldr	r2, [r3, #8]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	2140      	movs	r1, #64	@ 0x40
 8007944:	438a      	bics	r2, r1
 8007946:	609a      	str	r2, [r3, #8]
 8007948:	183b      	adds	r3, r7, r0
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800794e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007950:	f383 8810 	msr	PRIMASK, r3
}
 8007954:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2280      	movs	r2, #128	@ 0x80
 800795a:	589b      	ldr	r3, [r3, r2]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d016      	beq.n	800798e <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2280      	movs	r2, #128	@ 0x80
 8007964:	589b      	ldr	r3, [r3, r2]
 8007966:	4a17      	ldr	r2, [pc, #92]	@ (80079c4 <HAL_UART_IRQHandler+0x2c8>)
 8007968:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2280      	movs	r2, #128	@ 0x80
 800796e:	589b      	ldr	r3, [r3, r2]
 8007970:	0018      	movs	r0, r3
 8007972:	f7fc f907 	bl	8003b84 <HAL_DMA_Abort_IT>
 8007976:	1e03      	subs	r3, r0, #0
 8007978:	d01c      	beq.n	80079b4 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2280      	movs	r2, #128	@ 0x80
 800797e:	589b      	ldr	r3, [r3, r2]
 8007980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007982:	687a      	ldr	r2, [r7, #4]
 8007984:	2180      	movs	r1, #128	@ 0x80
 8007986:	5852      	ldr	r2, [r2, r1]
 8007988:	0010      	movs	r0, r2
 800798a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800798c:	e012      	b.n	80079b4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	0018      	movs	r0, r3
 8007992:	f7fa fb5d 	bl	8002050 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007996:	e00d      	b.n	80079b4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	0018      	movs	r0, r3
 800799c:	f7fa fb58 	bl	8002050 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079a0:	e008      	b.n	80079b4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	0018      	movs	r0, r3
 80079a6:	f7fa fb53 	bl	8002050 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2290      	movs	r2, #144	@ 0x90
 80079ae:	2100      	movs	r1, #0
 80079b0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80079b2:	e1d8      	b.n	8007d66 <HAL_UART_IRQHandler+0x66a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079b4:	46c0      	nop			@ (mov r8, r8)
    return;
 80079b6:	e1d6      	b.n	8007d66 <HAL_UART_IRQHandler+0x66a>
 80079b8:	0000080f 	.word	0x0000080f
 80079bc:	10000001 	.word	0x10000001
 80079c0:	04000120 	.word	0x04000120
 80079c4:	08008999 	.word	0x08008999

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d000      	beq.n	80079d2 <HAL_UART_IRQHandler+0x2d6>
 80079d0:	e15d      	b.n	8007c8e <HAL_UART_IRQHandler+0x592>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80079d2:	23a4      	movs	r3, #164	@ 0xa4
 80079d4:	18fb      	adds	r3, r7, r3
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	2210      	movs	r2, #16
 80079da:	4013      	ands	r3, r2
 80079dc:	d100      	bne.n	80079e0 <HAL_UART_IRQHandler+0x2e4>
 80079de:	e156      	b.n	8007c8e <HAL_UART_IRQHandler+0x592>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80079e0:	23a0      	movs	r3, #160	@ 0xa0
 80079e2:	18fb      	adds	r3, r7, r3
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	2210      	movs	r2, #16
 80079e8:	4013      	ands	r3, r2
 80079ea:	d100      	bne.n	80079ee <HAL_UART_IRQHandler+0x2f2>
 80079ec:	e14f      	b.n	8007c8e <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	2210      	movs	r2, #16
 80079f4:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	2240      	movs	r2, #64	@ 0x40
 80079fe:	4013      	ands	r3, r2
 8007a00:	2b40      	cmp	r3, #64	@ 0x40
 8007a02:	d000      	beq.n	8007a06 <HAL_UART_IRQHandler+0x30a>
 8007a04:	e0c3      	b.n	8007b8e <HAL_UART_IRQHandler+0x492>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2280      	movs	r2, #128	@ 0x80
 8007a0a:	589b      	ldr	r3, [r3, r2]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	685a      	ldr	r2, [r3, #4]
 8007a10:	217e      	movs	r1, #126	@ 0x7e
 8007a12:	187b      	adds	r3, r7, r1
 8007a14:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8007a16:	187b      	adds	r3, r7, r1
 8007a18:	881b      	ldrh	r3, [r3, #0]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d100      	bne.n	8007a20 <HAL_UART_IRQHandler+0x324>
 8007a1e:	e097      	b.n	8007b50 <HAL_UART_IRQHandler+0x454>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	225c      	movs	r2, #92	@ 0x5c
 8007a24:	5a9b      	ldrh	r3, [r3, r2]
 8007a26:	187a      	adds	r2, r7, r1
 8007a28:	8812      	ldrh	r2, [r2, #0]
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d300      	bcc.n	8007a30 <HAL_UART_IRQHandler+0x334>
 8007a2e:	e08f      	b.n	8007b50 <HAL_UART_IRQHandler+0x454>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	187a      	adds	r2, r7, r1
 8007a34:	215e      	movs	r1, #94	@ 0x5e
 8007a36:	8812      	ldrh	r2, [r2, #0]
 8007a38:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2280      	movs	r2, #128	@ 0x80
 8007a3e:	589b      	ldr	r3, [r3, r2]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	2220      	movs	r2, #32
 8007a46:	4013      	ands	r3, r2
 8007a48:	d170      	bne.n	8007b2c <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007a4a:	f3ef 8310 	mrs	r3, PRIMASK
 8007a4e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8007a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a52:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007a54:	2301      	movs	r3, #1
 8007a56:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a5a:	f383 8810 	msr	PRIMASK, r3
}
 8007a5e:	46c0      	nop			@ (mov r8, r8)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	681a      	ldr	r2, [r3, #0]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	49c4      	ldr	r1, [pc, #784]	@ (8007d7c <HAL_UART_IRQHandler+0x680>)
 8007a6c:	400a      	ands	r2, r1
 8007a6e:	601a      	str	r2, [r3, #0]
 8007a70:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007a72:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a76:	f383 8810 	msr	PRIMASK, r3
}
 8007a7a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007a7c:	f3ef 8310 	mrs	r3, PRIMASK
 8007a80:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8007a82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a84:	677b      	str	r3, [r7, #116]	@ 0x74
 8007a86:	2301      	movs	r3, #1
 8007a88:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a8c:	f383 8810 	msr	PRIMASK, r3
}
 8007a90:	46c0      	nop			@ (mov r8, r8)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	689a      	ldr	r2, [r3, #8]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	2101      	movs	r1, #1
 8007a9e:	438a      	bics	r2, r1
 8007aa0:	609a      	str	r2, [r3, #8]
 8007aa2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007aa4:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007aa6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007aa8:	f383 8810 	msr	PRIMASK, r3
}
 8007aac:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007aae:	f3ef 8310 	mrs	r3, PRIMASK
 8007ab2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8007ab4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ab6:	673b      	str	r3, [r7, #112]	@ 0x70
 8007ab8:	2301      	movs	r3, #1
 8007aba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007abc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007abe:	f383 8810 	msr	PRIMASK, r3
}
 8007ac2:	46c0      	nop			@ (mov r8, r8)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	689a      	ldr	r2, [r3, #8]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	2140      	movs	r1, #64	@ 0x40
 8007ad0:	438a      	bics	r2, r1
 8007ad2:	609a      	str	r2, [r3, #8]
 8007ad4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007ad6:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ad8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ada:	f383 8810 	msr	PRIMASK, r3
}
 8007ade:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	228c      	movs	r2, #140	@ 0x8c
 8007ae4:	2120      	movs	r1, #32
 8007ae6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2200      	movs	r2, #0
 8007aec:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007aee:	f3ef 8310 	mrs	r3, PRIMASK
 8007af2:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8007af4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007af6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007af8:	2301      	movs	r3, #1
 8007afa:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007afc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007afe:	f383 8810 	msr	PRIMASK, r3
}
 8007b02:	46c0      	nop			@ (mov r8, r8)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	681a      	ldr	r2, [r3, #0]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	2110      	movs	r1, #16
 8007b10:	438a      	bics	r2, r1
 8007b12:	601a      	str	r2, [r3, #0]
 8007b14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007b16:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b18:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007b1a:	f383 8810 	msr	PRIMASK, r3
}
 8007b1e:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2280      	movs	r2, #128	@ 0x80
 8007b24:	589b      	ldr	r3, [r3, r2]
 8007b26:	0018      	movs	r0, r3
 8007b28:	f7fb ffca 	bl	8003ac0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2202      	movs	r2, #2
 8007b30:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	225c      	movs	r2, #92	@ 0x5c
 8007b36:	5a9a      	ldrh	r2, [r3, r2]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	215e      	movs	r1, #94	@ 0x5e
 8007b3c:	5a5b      	ldrh	r3, [r3, r1]
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	1ad3      	subs	r3, r2, r3
 8007b42:	b29a      	uxth	r2, r3
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	0011      	movs	r1, r2
 8007b48:	0018      	movs	r0, r3
 8007b4a:	f7fa f9c9 	bl	8001ee0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007b4e:	e10c      	b.n	8007d6a <HAL_UART_IRQHandler+0x66e>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	225c      	movs	r2, #92	@ 0x5c
 8007b54:	5a9b      	ldrh	r3, [r3, r2]
 8007b56:	227e      	movs	r2, #126	@ 0x7e
 8007b58:	18ba      	adds	r2, r7, r2
 8007b5a:	8812      	ldrh	r2, [r2, #0]
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d000      	beq.n	8007b62 <HAL_UART_IRQHandler+0x466>
 8007b60:	e103      	b.n	8007d6a <HAL_UART_IRQHandler+0x66e>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2280      	movs	r2, #128	@ 0x80
 8007b66:	589b      	ldr	r3, [r3, r2]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	2220      	movs	r2, #32
 8007b6e:	4013      	ands	r3, r2
 8007b70:	2b20      	cmp	r3, #32
 8007b72:	d000      	beq.n	8007b76 <HAL_UART_IRQHandler+0x47a>
 8007b74:	e0f9      	b.n	8007d6a <HAL_UART_IRQHandler+0x66e>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2202      	movs	r2, #2
 8007b7a:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	225c      	movs	r2, #92	@ 0x5c
 8007b80:	5a9a      	ldrh	r2, [r3, r2]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	0011      	movs	r1, r2
 8007b86:	0018      	movs	r0, r3
 8007b88:	f7fa f9aa 	bl	8001ee0 <HAL_UARTEx_RxEventCallback>
      return;
 8007b8c:	e0ed      	b.n	8007d6a <HAL_UART_IRQHandler+0x66e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	225c      	movs	r2, #92	@ 0x5c
 8007b92:	5a99      	ldrh	r1, [r3, r2]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	225e      	movs	r2, #94	@ 0x5e
 8007b98:	5a9b      	ldrh	r3, [r3, r2]
 8007b9a:	b29a      	uxth	r2, r3
 8007b9c:	208e      	movs	r0, #142	@ 0x8e
 8007b9e:	183b      	adds	r3, r7, r0
 8007ba0:	1a8a      	subs	r2, r1, r2
 8007ba2:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	225e      	movs	r2, #94	@ 0x5e
 8007ba8:	5a9b      	ldrh	r3, [r3, r2]
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d100      	bne.n	8007bb2 <HAL_UART_IRQHandler+0x4b6>
 8007bb0:	e0dd      	b.n	8007d6e <HAL_UART_IRQHandler+0x672>
          && (nb_rx_data > 0U))
 8007bb2:	183b      	adds	r3, r7, r0
 8007bb4:	881b      	ldrh	r3, [r3, #0]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d100      	bne.n	8007bbc <HAL_UART_IRQHandler+0x4c0>
 8007bba:	e0d8      	b.n	8007d6e <HAL_UART_IRQHandler+0x672>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007bbc:	f3ef 8310 	mrs	r3, PRIMASK
 8007bc0:	60fb      	str	r3, [r7, #12]
  return(result);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007bc4:	2488      	movs	r4, #136	@ 0x88
 8007bc6:	193a      	adds	r2, r7, r4
 8007bc8:	6013      	str	r3, [r2, #0]
 8007bca:	2301      	movs	r3, #1
 8007bcc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	f383 8810 	msr	PRIMASK, r3
}
 8007bd4:	46c0      	nop			@ (mov r8, r8)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	681a      	ldr	r2, [r3, #0]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4967      	ldr	r1, [pc, #412]	@ (8007d80 <HAL_UART_IRQHandler+0x684>)
 8007be2:	400a      	ands	r2, r1
 8007be4:	601a      	str	r2, [r3, #0]
 8007be6:	193b      	adds	r3, r7, r4
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	f383 8810 	msr	PRIMASK, r3
}
 8007bf2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007bf4:	f3ef 8310 	mrs	r3, PRIMASK
 8007bf8:	61bb      	str	r3, [r7, #24]
  return(result);
 8007bfa:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007bfc:	2484      	movs	r4, #132	@ 0x84
 8007bfe:	193a      	adds	r2, r7, r4
 8007c00:	6013      	str	r3, [r2, #0]
 8007c02:	2301      	movs	r3, #1
 8007c04:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c06:	69fb      	ldr	r3, [r7, #28]
 8007c08:	f383 8810 	msr	PRIMASK, r3
}
 8007c0c:	46c0      	nop			@ (mov r8, r8)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	689a      	ldr	r2, [r3, #8]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	495a      	ldr	r1, [pc, #360]	@ (8007d84 <HAL_UART_IRQHandler+0x688>)
 8007c1a:	400a      	ands	r2, r1
 8007c1c:	609a      	str	r2, [r3, #8]
 8007c1e:	193b      	adds	r3, r7, r4
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c24:	6a3b      	ldr	r3, [r7, #32]
 8007c26:	f383 8810 	msr	PRIMASK, r3
}
 8007c2a:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	228c      	movs	r2, #140	@ 0x8c
 8007c30:	2120      	movs	r1, #32
 8007c32:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2200      	movs	r2, #0
 8007c38:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007c40:	f3ef 8310 	mrs	r3, PRIMASK
 8007c44:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8007c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c48:	2480      	movs	r4, #128	@ 0x80
 8007c4a:	193a      	adds	r2, r7, r4
 8007c4c:	6013      	str	r3, [r2, #0]
 8007c4e:	2301      	movs	r3, #1
 8007c50:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c54:	f383 8810 	msr	PRIMASK, r3
}
 8007c58:	46c0      	nop			@ (mov r8, r8)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	2110      	movs	r1, #16
 8007c66:	438a      	bics	r2, r1
 8007c68:	601a      	str	r2, [r3, #0]
 8007c6a:	193b      	adds	r3, r7, r4
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c72:	f383 8810 	msr	PRIMASK, r3
}
 8007c76:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2202      	movs	r2, #2
 8007c7c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007c7e:	183b      	adds	r3, r7, r0
 8007c80:	881a      	ldrh	r2, [r3, #0]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	0011      	movs	r1, r2
 8007c86:	0018      	movs	r0, r3
 8007c88:	f7fa f92a 	bl	8001ee0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007c8c:	e06f      	b.n	8007d6e <HAL_UART_IRQHandler+0x672>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007c8e:	23a4      	movs	r3, #164	@ 0xa4
 8007c90:	18fb      	adds	r3, r7, r3
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	2380      	movs	r3, #128	@ 0x80
 8007c96:	035b      	lsls	r3, r3, #13
 8007c98:	4013      	ands	r3, r2
 8007c9a:	d010      	beq.n	8007cbe <HAL_UART_IRQHandler+0x5c2>
 8007c9c:	239c      	movs	r3, #156	@ 0x9c
 8007c9e:	18fb      	adds	r3, r7, r3
 8007ca0:	681a      	ldr	r2, [r3, #0]
 8007ca2:	2380      	movs	r3, #128	@ 0x80
 8007ca4:	03db      	lsls	r3, r3, #15
 8007ca6:	4013      	ands	r3, r2
 8007ca8:	d009      	beq.n	8007cbe <HAL_UART_IRQHandler+0x5c2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	2280      	movs	r2, #128	@ 0x80
 8007cb0:	0352      	lsls	r2, r2, #13
 8007cb2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	0018      	movs	r0, r3
 8007cb8:	f000 ff24 	bl	8008b04 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007cbc:	e05a      	b.n	8007d74 <HAL_UART_IRQHandler+0x678>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007cbe:	23a4      	movs	r3, #164	@ 0xa4
 8007cc0:	18fb      	adds	r3, r7, r3
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	2280      	movs	r2, #128	@ 0x80
 8007cc6:	4013      	ands	r3, r2
 8007cc8:	d016      	beq.n	8007cf8 <HAL_UART_IRQHandler+0x5fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007cca:	23a0      	movs	r3, #160	@ 0xa0
 8007ccc:	18fb      	adds	r3, r7, r3
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	2280      	movs	r2, #128	@ 0x80
 8007cd2:	4013      	ands	r3, r2
 8007cd4:	d106      	bne.n	8007ce4 <HAL_UART_IRQHandler+0x5e8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007cd6:	239c      	movs	r3, #156	@ 0x9c
 8007cd8:	18fb      	adds	r3, r7, r3
 8007cda:	681a      	ldr	r2, [r3, #0]
 8007cdc:	2380      	movs	r3, #128	@ 0x80
 8007cde:	041b      	lsls	r3, r3, #16
 8007ce0:	4013      	ands	r3, r2
 8007ce2:	d009      	beq.n	8007cf8 <HAL_UART_IRQHandler+0x5fc>
  {
    if (huart->TxISR != NULL)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d042      	beq.n	8007d72 <HAL_UART_IRQHandler+0x676>
    {
      huart->TxISR(huart);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007cf0:	687a      	ldr	r2, [r7, #4]
 8007cf2:	0010      	movs	r0, r2
 8007cf4:	4798      	blx	r3
    }
    return;
 8007cf6:	e03c      	b.n	8007d72 <HAL_UART_IRQHandler+0x676>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007cf8:	23a4      	movs	r3, #164	@ 0xa4
 8007cfa:	18fb      	adds	r3, r7, r3
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	2240      	movs	r2, #64	@ 0x40
 8007d00:	4013      	ands	r3, r2
 8007d02:	d00a      	beq.n	8007d1a <HAL_UART_IRQHandler+0x61e>
 8007d04:	23a0      	movs	r3, #160	@ 0xa0
 8007d06:	18fb      	adds	r3, r7, r3
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	2240      	movs	r2, #64	@ 0x40
 8007d0c:	4013      	ands	r3, r2
 8007d0e:	d004      	beq.n	8007d1a <HAL_UART_IRQHandler+0x61e>
  {
    UART_EndTransmit_IT(huart);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	0018      	movs	r0, r3
 8007d14:	f000 fe57 	bl	80089c6 <UART_EndTransmit_IT>
    return;
 8007d18:	e02c      	b.n	8007d74 <HAL_UART_IRQHandler+0x678>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007d1a:	23a4      	movs	r3, #164	@ 0xa4
 8007d1c:	18fb      	adds	r3, r7, r3
 8007d1e:	681a      	ldr	r2, [r3, #0]
 8007d20:	2380      	movs	r3, #128	@ 0x80
 8007d22:	041b      	lsls	r3, r3, #16
 8007d24:	4013      	ands	r3, r2
 8007d26:	d00b      	beq.n	8007d40 <HAL_UART_IRQHandler+0x644>
 8007d28:	23a0      	movs	r3, #160	@ 0xa0
 8007d2a:	18fb      	adds	r3, r7, r3
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	2380      	movs	r3, #128	@ 0x80
 8007d30:	05db      	lsls	r3, r3, #23
 8007d32:	4013      	ands	r3, r2
 8007d34:	d004      	beq.n	8007d40 <HAL_UART_IRQHandler+0x644>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	0018      	movs	r0, r3
 8007d3a:	f000 fef3 	bl	8008b24 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007d3e:	e019      	b.n	8007d74 <HAL_UART_IRQHandler+0x678>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007d40:	23a4      	movs	r3, #164	@ 0xa4
 8007d42:	18fb      	adds	r3, r7, r3
 8007d44:	681a      	ldr	r2, [r3, #0]
 8007d46:	2380      	movs	r3, #128	@ 0x80
 8007d48:	045b      	lsls	r3, r3, #17
 8007d4a:	4013      	ands	r3, r2
 8007d4c:	d012      	beq.n	8007d74 <HAL_UART_IRQHandler+0x678>
 8007d4e:	23a0      	movs	r3, #160	@ 0xa0
 8007d50:	18fb      	adds	r3, r7, r3
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	da0d      	bge.n	8007d74 <HAL_UART_IRQHandler+0x678>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	0018      	movs	r0, r3
 8007d5c:	f000 feda 	bl	8008b14 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007d60:	e008      	b.n	8007d74 <HAL_UART_IRQHandler+0x678>
      return;
 8007d62:	46c0      	nop			@ (mov r8, r8)
 8007d64:	e006      	b.n	8007d74 <HAL_UART_IRQHandler+0x678>
    return;
 8007d66:	46c0      	nop			@ (mov r8, r8)
 8007d68:	e004      	b.n	8007d74 <HAL_UART_IRQHandler+0x678>
      return;
 8007d6a:	46c0      	nop			@ (mov r8, r8)
 8007d6c:	e002      	b.n	8007d74 <HAL_UART_IRQHandler+0x678>
      return;
 8007d6e:	46c0      	nop			@ (mov r8, r8)
 8007d70:	e000      	b.n	8007d74 <HAL_UART_IRQHandler+0x678>
    return;
 8007d72:	46c0      	nop			@ (mov r8, r8)
  }
}
 8007d74:	46bd      	mov	sp, r7
 8007d76:	b02a      	add	sp, #168	@ 0xa8
 8007d78:	bdb0      	pop	{r4, r5, r7, pc}
 8007d7a:	46c0      	nop			@ (mov r8, r8)
 8007d7c:	fffffeff 	.word	0xfffffeff
 8007d80:	fffffedf 	.word	0xfffffedf
 8007d84:	effffffe 	.word	0xeffffffe

08007d88 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b082      	sub	sp, #8
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007d90:	46c0      	nop			@ (mov r8, r8)
 8007d92:	46bd      	mov	sp, r7
 8007d94:	b002      	add	sp, #8
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b082      	sub	sp, #8
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007da0:	46c0      	nop			@ (mov r8, r8)
 8007da2:	46bd      	mov	sp, r7
 8007da4:	b002      	add	sp, #8
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b082      	sub	sp, #8
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007db0:	46c0      	nop			@ (mov r8, r8)
 8007db2:	46bd      	mov	sp, r7
 8007db4:	b002      	add	sp, #8
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b088      	sub	sp, #32
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007dc0:	231e      	movs	r3, #30
 8007dc2:	18fb      	adds	r3, r7, r3
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	689a      	ldr	r2, [r3, #8]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	691b      	ldr	r3, [r3, #16]
 8007dd0:	431a      	orrs	r2, r3
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	695b      	ldr	r3, [r3, #20]
 8007dd6:	431a      	orrs	r2, r3
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	69db      	ldr	r3, [r3, #28]
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4aab      	ldr	r2, [pc, #684]	@ (8008094 <UART_SetConfig+0x2dc>)
 8007de8:	4013      	ands	r3, r2
 8007dea:	0019      	movs	r1, r3
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	697a      	ldr	r2, [r7, #20]
 8007df2:	430a      	orrs	r2, r1
 8007df4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	4aa6      	ldr	r2, [pc, #664]	@ (8008098 <UART_SetConfig+0x2e0>)
 8007dfe:	4013      	ands	r3, r2
 8007e00:	0019      	movs	r1, r3
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	68da      	ldr	r2, [r3, #12]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	430a      	orrs	r2, r1
 8007e0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	699b      	ldr	r3, [r3, #24]
 8007e12:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6a1b      	ldr	r3, [r3, #32]
 8007e18:	697a      	ldr	r2, [r7, #20]
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	689b      	ldr	r3, [r3, #8]
 8007e24:	4a9d      	ldr	r2, [pc, #628]	@ (800809c <UART_SetConfig+0x2e4>)
 8007e26:	4013      	ands	r3, r2
 8007e28:	0019      	movs	r1, r3
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	697a      	ldr	r2, [r7, #20]
 8007e30:	430a      	orrs	r2, r1
 8007e32:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e3a:	220f      	movs	r2, #15
 8007e3c:	4393      	bics	r3, r2
 8007e3e:	0019      	movs	r1, r3
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	430a      	orrs	r2, r1
 8007e4a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a93      	ldr	r2, [pc, #588]	@ (80080a0 <UART_SetConfig+0x2e8>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d127      	bne.n	8007ea6 <UART_SetConfig+0xee>
 8007e56:	4b93      	ldr	r3, [pc, #588]	@ (80080a4 <UART_SetConfig+0x2ec>)
 8007e58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e5a:	2203      	movs	r2, #3
 8007e5c:	4013      	ands	r3, r2
 8007e5e:	2b03      	cmp	r3, #3
 8007e60:	d017      	beq.n	8007e92 <UART_SetConfig+0xda>
 8007e62:	d81b      	bhi.n	8007e9c <UART_SetConfig+0xe4>
 8007e64:	2b02      	cmp	r3, #2
 8007e66:	d00a      	beq.n	8007e7e <UART_SetConfig+0xc6>
 8007e68:	d818      	bhi.n	8007e9c <UART_SetConfig+0xe4>
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d002      	beq.n	8007e74 <UART_SetConfig+0xbc>
 8007e6e:	2b01      	cmp	r3, #1
 8007e70:	d00a      	beq.n	8007e88 <UART_SetConfig+0xd0>
 8007e72:	e013      	b.n	8007e9c <UART_SetConfig+0xe4>
 8007e74:	231f      	movs	r3, #31
 8007e76:	18fb      	adds	r3, r7, r3
 8007e78:	2200      	movs	r2, #0
 8007e7a:	701a      	strb	r2, [r3, #0]
 8007e7c:	e021      	b.n	8007ec2 <UART_SetConfig+0x10a>
 8007e7e:	231f      	movs	r3, #31
 8007e80:	18fb      	adds	r3, r7, r3
 8007e82:	2202      	movs	r2, #2
 8007e84:	701a      	strb	r2, [r3, #0]
 8007e86:	e01c      	b.n	8007ec2 <UART_SetConfig+0x10a>
 8007e88:	231f      	movs	r3, #31
 8007e8a:	18fb      	adds	r3, r7, r3
 8007e8c:	2204      	movs	r2, #4
 8007e8e:	701a      	strb	r2, [r3, #0]
 8007e90:	e017      	b.n	8007ec2 <UART_SetConfig+0x10a>
 8007e92:	231f      	movs	r3, #31
 8007e94:	18fb      	adds	r3, r7, r3
 8007e96:	2208      	movs	r2, #8
 8007e98:	701a      	strb	r2, [r3, #0]
 8007e9a:	e012      	b.n	8007ec2 <UART_SetConfig+0x10a>
 8007e9c:	231f      	movs	r3, #31
 8007e9e:	18fb      	adds	r3, r7, r3
 8007ea0:	2210      	movs	r2, #16
 8007ea2:	701a      	strb	r2, [r3, #0]
 8007ea4:	e00d      	b.n	8007ec2 <UART_SetConfig+0x10a>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a7f      	ldr	r2, [pc, #508]	@ (80080a8 <UART_SetConfig+0x2f0>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d104      	bne.n	8007eba <UART_SetConfig+0x102>
 8007eb0:	231f      	movs	r3, #31
 8007eb2:	18fb      	adds	r3, r7, r3
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	701a      	strb	r2, [r3, #0]
 8007eb8:	e003      	b.n	8007ec2 <UART_SetConfig+0x10a>
 8007eba:	231f      	movs	r3, #31
 8007ebc:	18fb      	adds	r3, r7, r3
 8007ebe:	2210      	movs	r2, #16
 8007ec0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	69da      	ldr	r2, [r3, #28]
 8007ec6:	2380      	movs	r3, #128	@ 0x80
 8007ec8:	021b      	lsls	r3, r3, #8
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	d000      	beq.n	8007ed0 <UART_SetConfig+0x118>
 8007ece:	e06f      	b.n	8007fb0 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8007ed0:	231f      	movs	r3, #31
 8007ed2:	18fb      	adds	r3, r7, r3
 8007ed4:	781b      	ldrb	r3, [r3, #0]
 8007ed6:	2b08      	cmp	r3, #8
 8007ed8:	d01f      	beq.n	8007f1a <UART_SetConfig+0x162>
 8007eda:	dc22      	bgt.n	8007f22 <UART_SetConfig+0x16a>
 8007edc:	2b04      	cmp	r3, #4
 8007ede:	d017      	beq.n	8007f10 <UART_SetConfig+0x158>
 8007ee0:	dc1f      	bgt.n	8007f22 <UART_SetConfig+0x16a>
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d002      	beq.n	8007eec <UART_SetConfig+0x134>
 8007ee6:	2b02      	cmp	r3, #2
 8007ee8:	d005      	beq.n	8007ef6 <UART_SetConfig+0x13e>
 8007eea:	e01a      	b.n	8007f22 <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007eec:	f7fd fdd2 	bl	8005a94 <HAL_RCC_GetPCLK1Freq>
 8007ef0:	0003      	movs	r3, r0
 8007ef2:	61bb      	str	r3, [r7, #24]
        break;
 8007ef4:	e01c      	b.n	8007f30 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8007ef6:	4b6b      	ldr	r3, [pc, #428]	@ (80080a4 <UART_SetConfig+0x2ec>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	095b      	lsrs	r3, r3, #5
 8007efc:	2207      	movs	r2, #7
 8007efe:	4013      	ands	r3, r2
 8007f00:	3301      	adds	r3, #1
 8007f02:	0019      	movs	r1, r3
 8007f04:	4869      	ldr	r0, [pc, #420]	@ (80080ac <UART_SetConfig+0x2f4>)
 8007f06:	f7f8 f8ff 	bl	8000108 <__udivsi3>
 8007f0a:	0003      	movs	r3, r0
 8007f0c:	61bb      	str	r3, [r7, #24]
        break;
 8007f0e:	e00f      	b.n	8007f30 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f10:	f7fd fd4a 	bl	80059a8 <HAL_RCC_GetSysClockFreq>
 8007f14:	0003      	movs	r3, r0
 8007f16:	61bb      	str	r3, [r7, #24]
        break;
 8007f18:	e00a      	b.n	8007f30 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f1a:	2380      	movs	r3, #128	@ 0x80
 8007f1c:	021b      	lsls	r3, r3, #8
 8007f1e:	61bb      	str	r3, [r7, #24]
        break;
 8007f20:	e006      	b.n	8007f30 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8007f22:	2300      	movs	r3, #0
 8007f24:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007f26:	231e      	movs	r3, #30
 8007f28:	18fb      	adds	r3, r7, r3
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	701a      	strb	r2, [r3, #0]
        break;
 8007f2e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007f30:	69bb      	ldr	r3, [r7, #24]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d100      	bne.n	8007f38 <UART_SetConfig+0x180>
 8007f36:	e097      	b.n	8008068 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007f3c:	4b5c      	ldr	r3, [pc, #368]	@ (80080b0 <UART_SetConfig+0x2f8>)
 8007f3e:	0052      	lsls	r2, r2, #1
 8007f40:	5ad3      	ldrh	r3, [r2, r3]
 8007f42:	0019      	movs	r1, r3
 8007f44:	69b8      	ldr	r0, [r7, #24]
 8007f46:	f7f8 f8df 	bl	8000108 <__udivsi3>
 8007f4a:	0003      	movs	r3, r0
 8007f4c:	005a      	lsls	r2, r3, #1
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	085b      	lsrs	r3, r3, #1
 8007f54:	18d2      	adds	r2, r2, r3
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	0019      	movs	r1, r3
 8007f5c:	0010      	movs	r0, r2
 8007f5e:	f7f8 f8d3 	bl	8000108 <__udivsi3>
 8007f62:	0003      	movs	r3, r0
 8007f64:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	2b0f      	cmp	r3, #15
 8007f6a:	d91c      	bls.n	8007fa6 <UART_SetConfig+0x1ee>
 8007f6c:	693a      	ldr	r2, [r7, #16]
 8007f6e:	2380      	movs	r3, #128	@ 0x80
 8007f70:	025b      	lsls	r3, r3, #9
 8007f72:	429a      	cmp	r2, r3
 8007f74:	d217      	bcs.n	8007fa6 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	b29a      	uxth	r2, r3
 8007f7a:	200e      	movs	r0, #14
 8007f7c:	183b      	adds	r3, r7, r0
 8007f7e:	210f      	movs	r1, #15
 8007f80:	438a      	bics	r2, r1
 8007f82:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	085b      	lsrs	r3, r3, #1
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	2207      	movs	r2, #7
 8007f8c:	4013      	ands	r3, r2
 8007f8e:	b299      	uxth	r1, r3
 8007f90:	183b      	adds	r3, r7, r0
 8007f92:	183a      	adds	r2, r7, r0
 8007f94:	8812      	ldrh	r2, [r2, #0]
 8007f96:	430a      	orrs	r2, r1
 8007f98:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	183a      	adds	r2, r7, r0
 8007fa0:	8812      	ldrh	r2, [r2, #0]
 8007fa2:	60da      	str	r2, [r3, #12]
 8007fa4:	e060      	b.n	8008068 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8007fa6:	231e      	movs	r3, #30
 8007fa8:	18fb      	adds	r3, r7, r3
 8007faa:	2201      	movs	r2, #1
 8007fac:	701a      	strb	r2, [r3, #0]
 8007fae:	e05b      	b.n	8008068 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007fb0:	231f      	movs	r3, #31
 8007fb2:	18fb      	adds	r3, r7, r3
 8007fb4:	781b      	ldrb	r3, [r3, #0]
 8007fb6:	2b08      	cmp	r3, #8
 8007fb8:	d01f      	beq.n	8007ffa <UART_SetConfig+0x242>
 8007fba:	dc22      	bgt.n	8008002 <UART_SetConfig+0x24a>
 8007fbc:	2b04      	cmp	r3, #4
 8007fbe:	d017      	beq.n	8007ff0 <UART_SetConfig+0x238>
 8007fc0:	dc1f      	bgt.n	8008002 <UART_SetConfig+0x24a>
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d002      	beq.n	8007fcc <UART_SetConfig+0x214>
 8007fc6:	2b02      	cmp	r3, #2
 8007fc8:	d005      	beq.n	8007fd6 <UART_SetConfig+0x21e>
 8007fca:	e01a      	b.n	8008002 <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fcc:	f7fd fd62 	bl	8005a94 <HAL_RCC_GetPCLK1Freq>
 8007fd0:	0003      	movs	r3, r0
 8007fd2:	61bb      	str	r3, [r7, #24]
        break;
 8007fd4:	e01c      	b.n	8008010 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8007fd6:	4b33      	ldr	r3, [pc, #204]	@ (80080a4 <UART_SetConfig+0x2ec>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	095b      	lsrs	r3, r3, #5
 8007fdc:	2207      	movs	r2, #7
 8007fde:	4013      	ands	r3, r2
 8007fe0:	3301      	adds	r3, #1
 8007fe2:	0019      	movs	r1, r3
 8007fe4:	4831      	ldr	r0, [pc, #196]	@ (80080ac <UART_SetConfig+0x2f4>)
 8007fe6:	f7f8 f88f 	bl	8000108 <__udivsi3>
 8007fea:	0003      	movs	r3, r0
 8007fec:	61bb      	str	r3, [r7, #24]
        break;
 8007fee:	e00f      	b.n	8008010 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ff0:	f7fd fcda 	bl	80059a8 <HAL_RCC_GetSysClockFreq>
 8007ff4:	0003      	movs	r3, r0
 8007ff6:	61bb      	str	r3, [r7, #24]
        break;
 8007ff8:	e00a      	b.n	8008010 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ffa:	2380      	movs	r3, #128	@ 0x80
 8007ffc:	021b      	lsls	r3, r3, #8
 8007ffe:	61bb      	str	r3, [r7, #24]
        break;
 8008000:	e006      	b.n	8008010 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8008002:	2300      	movs	r3, #0
 8008004:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008006:	231e      	movs	r3, #30
 8008008:	18fb      	adds	r3, r7, r3
 800800a:	2201      	movs	r2, #1
 800800c:	701a      	strb	r2, [r3, #0]
        break;
 800800e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8008010:	69bb      	ldr	r3, [r7, #24]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d028      	beq.n	8008068 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800801a:	4b25      	ldr	r3, [pc, #148]	@ (80080b0 <UART_SetConfig+0x2f8>)
 800801c:	0052      	lsls	r2, r2, #1
 800801e:	5ad3      	ldrh	r3, [r2, r3]
 8008020:	0019      	movs	r1, r3
 8008022:	69b8      	ldr	r0, [r7, #24]
 8008024:	f7f8 f870 	bl	8000108 <__udivsi3>
 8008028:	0003      	movs	r3, r0
 800802a:	001a      	movs	r2, r3
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	085b      	lsrs	r3, r3, #1
 8008032:	18d2      	adds	r2, r2, r3
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	685b      	ldr	r3, [r3, #4]
 8008038:	0019      	movs	r1, r3
 800803a:	0010      	movs	r0, r2
 800803c:	f7f8 f864 	bl	8000108 <__udivsi3>
 8008040:	0003      	movs	r3, r0
 8008042:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	2b0f      	cmp	r3, #15
 8008048:	d90a      	bls.n	8008060 <UART_SetConfig+0x2a8>
 800804a:	693a      	ldr	r2, [r7, #16]
 800804c:	2380      	movs	r3, #128	@ 0x80
 800804e:	025b      	lsls	r3, r3, #9
 8008050:	429a      	cmp	r2, r3
 8008052:	d205      	bcs.n	8008060 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	b29a      	uxth	r2, r3
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	60da      	str	r2, [r3, #12]
 800805e:	e003      	b.n	8008068 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8008060:	231e      	movs	r3, #30
 8008062:	18fb      	adds	r3, r7, r3
 8008064:	2201      	movs	r2, #1
 8008066:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	226a      	movs	r2, #106	@ 0x6a
 800806c:	2101      	movs	r1, #1
 800806e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2268      	movs	r2, #104	@ 0x68
 8008074:	2101      	movs	r1, #1
 8008076:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2200      	movs	r2, #0
 800807c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2200      	movs	r2, #0
 8008082:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008084:	231e      	movs	r3, #30
 8008086:	18fb      	adds	r3, r7, r3
 8008088:	781b      	ldrb	r3, [r3, #0]
}
 800808a:	0018      	movs	r0, r3
 800808c:	46bd      	mov	sp, r7
 800808e:	b008      	add	sp, #32
 8008090:	bd80      	pop	{r7, pc}
 8008092:	46c0      	nop			@ (mov r8, r8)
 8008094:	cfff69f3 	.word	0xcfff69f3
 8008098:	ffffcfff 	.word	0xffffcfff
 800809c:	11fff4ff 	.word	0x11fff4ff
 80080a0:	40013800 	.word	0x40013800
 80080a4:	40021000 	.word	0x40021000
 80080a8:	40004400 	.word	0x40004400
 80080ac:	02dc6c00 	.word	0x02dc6c00
 80080b0:	0800965c 	.word	0x0800965c

080080b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b082      	sub	sp, #8
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080c0:	2208      	movs	r2, #8
 80080c2:	4013      	ands	r3, r2
 80080c4:	d00b      	beq.n	80080de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	4a4a      	ldr	r2, [pc, #296]	@ (80081f8 <UART_AdvFeatureConfig+0x144>)
 80080ce:	4013      	ands	r3, r2
 80080d0:	0019      	movs	r1, r3
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	430a      	orrs	r2, r1
 80080dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080e2:	2201      	movs	r2, #1
 80080e4:	4013      	ands	r3, r2
 80080e6:	d00b      	beq.n	8008100 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	4a43      	ldr	r2, [pc, #268]	@ (80081fc <UART_AdvFeatureConfig+0x148>)
 80080f0:	4013      	ands	r3, r2
 80080f2:	0019      	movs	r1, r3
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	430a      	orrs	r2, r1
 80080fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008104:	2202      	movs	r2, #2
 8008106:	4013      	ands	r3, r2
 8008108:	d00b      	beq.n	8008122 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	4a3b      	ldr	r2, [pc, #236]	@ (8008200 <UART_AdvFeatureConfig+0x14c>)
 8008112:	4013      	ands	r3, r2
 8008114:	0019      	movs	r1, r3
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	430a      	orrs	r2, r1
 8008120:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008126:	2204      	movs	r2, #4
 8008128:	4013      	ands	r3, r2
 800812a:	d00b      	beq.n	8008144 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	4a34      	ldr	r2, [pc, #208]	@ (8008204 <UART_AdvFeatureConfig+0x150>)
 8008134:	4013      	ands	r3, r2
 8008136:	0019      	movs	r1, r3
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	430a      	orrs	r2, r1
 8008142:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008148:	2210      	movs	r2, #16
 800814a:	4013      	ands	r3, r2
 800814c:	d00b      	beq.n	8008166 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	689b      	ldr	r3, [r3, #8]
 8008154:	4a2c      	ldr	r2, [pc, #176]	@ (8008208 <UART_AdvFeatureConfig+0x154>)
 8008156:	4013      	ands	r3, r2
 8008158:	0019      	movs	r1, r3
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	430a      	orrs	r2, r1
 8008164:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800816a:	2220      	movs	r2, #32
 800816c:	4013      	ands	r3, r2
 800816e:	d00b      	beq.n	8008188 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	689b      	ldr	r3, [r3, #8]
 8008176:	4a25      	ldr	r2, [pc, #148]	@ (800820c <UART_AdvFeatureConfig+0x158>)
 8008178:	4013      	ands	r3, r2
 800817a:	0019      	movs	r1, r3
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	430a      	orrs	r2, r1
 8008186:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800818c:	2240      	movs	r2, #64	@ 0x40
 800818e:	4013      	ands	r3, r2
 8008190:	d01d      	beq.n	80081ce <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	4a1d      	ldr	r2, [pc, #116]	@ (8008210 <UART_AdvFeatureConfig+0x15c>)
 800819a:	4013      	ands	r3, r2
 800819c:	0019      	movs	r1, r3
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	430a      	orrs	r2, r1
 80081a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80081ae:	2380      	movs	r3, #128	@ 0x80
 80081b0:	035b      	lsls	r3, r3, #13
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d10b      	bne.n	80081ce <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	4a15      	ldr	r2, [pc, #84]	@ (8008214 <UART_AdvFeatureConfig+0x160>)
 80081be:	4013      	ands	r3, r2
 80081c0:	0019      	movs	r1, r3
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	430a      	orrs	r2, r1
 80081cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081d2:	2280      	movs	r2, #128	@ 0x80
 80081d4:	4013      	ands	r3, r2
 80081d6:	d00b      	beq.n	80081f0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	685b      	ldr	r3, [r3, #4]
 80081de:	4a0e      	ldr	r2, [pc, #56]	@ (8008218 <UART_AdvFeatureConfig+0x164>)
 80081e0:	4013      	ands	r3, r2
 80081e2:	0019      	movs	r1, r3
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	430a      	orrs	r2, r1
 80081ee:	605a      	str	r2, [r3, #4]
  }
}
 80081f0:	46c0      	nop			@ (mov r8, r8)
 80081f2:	46bd      	mov	sp, r7
 80081f4:	b002      	add	sp, #8
 80081f6:	bd80      	pop	{r7, pc}
 80081f8:	ffff7fff 	.word	0xffff7fff
 80081fc:	fffdffff 	.word	0xfffdffff
 8008200:	fffeffff 	.word	0xfffeffff
 8008204:	fffbffff 	.word	0xfffbffff
 8008208:	ffffefff 	.word	0xffffefff
 800820c:	ffffdfff 	.word	0xffffdfff
 8008210:	ffefffff 	.word	0xffefffff
 8008214:	ff9fffff 	.word	0xff9fffff
 8008218:	fff7ffff 	.word	0xfff7ffff

0800821c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b092      	sub	sp, #72	@ 0x48
 8008220:	af02      	add	r7, sp, #8
 8008222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2290      	movs	r2, #144	@ 0x90
 8008228:	2100      	movs	r1, #0
 800822a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800822c:	f7fb f980 	bl	8003530 <HAL_GetTick>
 8008230:	0003      	movs	r3, r0
 8008232:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	2208      	movs	r2, #8
 800823c:	4013      	ands	r3, r2
 800823e:	2b08      	cmp	r3, #8
 8008240:	d12d      	bne.n	800829e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008242:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008244:	2280      	movs	r2, #128	@ 0x80
 8008246:	0391      	lsls	r1, r2, #14
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	4a47      	ldr	r2, [pc, #284]	@ (8008368 <UART_CheckIdleState+0x14c>)
 800824c:	9200      	str	r2, [sp, #0]
 800824e:	2200      	movs	r2, #0
 8008250:	f000 f88e 	bl	8008370 <UART_WaitOnFlagUntilTimeout>
 8008254:	1e03      	subs	r3, r0, #0
 8008256:	d022      	beq.n	800829e <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008258:	f3ef 8310 	mrs	r3, PRIMASK
 800825c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800825e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008260:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008262:	2301      	movs	r3, #1
 8008264:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008268:	f383 8810 	msr	PRIMASK, r3
}
 800826c:	46c0      	nop			@ (mov r8, r8)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	681a      	ldr	r2, [r3, #0]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	2180      	movs	r1, #128	@ 0x80
 800827a:	438a      	bics	r2, r1
 800827c:	601a      	str	r2, [r3, #0]
 800827e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008280:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008284:	f383 8810 	msr	PRIMASK, r3
}
 8008288:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2288      	movs	r2, #136	@ 0x88
 800828e:	2120      	movs	r1, #32
 8008290:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2284      	movs	r2, #132	@ 0x84
 8008296:	2100      	movs	r1, #0
 8008298:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800829a:	2303      	movs	r3, #3
 800829c:	e060      	b.n	8008360 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	2204      	movs	r2, #4
 80082a6:	4013      	ands	r3, r2
 80082a8:	2b04      	cmp	r3, #4
 80082aa:	d146      	bne.n	800833a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082ae:	2280      	movs	r2, #128	@ 0x80
 80082b0:	03d1      	lsls	r1, r2, #15
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	4a2c      	ldr	r2, [pc, #176]	@ (8008368 <UART_CheckIdleState+0x14c>)
 80082b6:	9200      	str	r2, [sp, #0]
 80082b8:	2200      	movs	r2, #0
 80082ba:	f000 f859 	bl	8008370 <UART_WaitOnFlagUntilTimeout>
 80082be:	1e03      	subs	r3, r0, #0
 80082c0:	d03b      	beq.n	800833a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80082c2:	f3ef 8310 	mrs	r3, PRIMASK
 80082c6:	60fb      	str	r3, [r7, #12]
  return(result);
 80082c8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80082ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80082cc:	2301      	movs	r3, #1
 80082ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	f383 8810 	msr	PRIMASK, r3
}
 80082d6:	46c0      	nop			@ (mov r8, r8)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	681a      	ldr	r2, [r3, #0]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4922      	ldr	r1, [pc, #136]	@ (800836c <UART_CheckIdleState+0x150>)
 80082e4:	400a      	ands	r2, r1
 80082e6:	601a      	str	r2, [r3, #0]
 80082e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	f383 8810 	msr	PRIMASK, r3
}
 80082f2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80082f4:	f3ef 8310 	mrs	r3, PRIMASK
 80082f8:	61bb      	str	r3, [r7, #24]
  return(result);
 80082fa:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80082fe:	2301      	movs	r3, #1
 8008300:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008302:	69fb      	ldr	r3, [r7, #28]
 8008304:	f383 8810 	msr	PRIMASK, r3
}
 8008308:	46c0      	nop			@ (mov r8, r8)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	689a      	ldr	r2, [r3, #8]
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	2101      	movs	r1, #1
 8008316:	438a      	bics	r2, r1
 8008318:	609a      	str	r2, [r3, #8]
 800831a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800831c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800831e:	6a3b      	ldr	r3, [r7, #32]
 8008320:	f383 8810 	msr	PRIMASK, r3
}
 8008324:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	228c      	movs	r2, #140	@ 0x8c
 800832a:	2120      	movs	r1, #32
 800832c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2284      	movs	r2, #132	@ 0x84
 8008332:	2100      	movs	r1, #0
 8008334:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008336:	2303      	movs	r3, #3
 8008338:	e012      	b.n	8008360 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2288      	movs	r2, #136	@ 0x88
 800833e:	2120      	movs	r1, #32
 8008340:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	228c      	movs	r2, #140	@ 0x8c
 8008346:	2120      	movs	r1, #32
 8008348:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2200      	movs	r2, #0
 800834e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2200      	movs	r2, #0
 8008354:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2284      	movs	r2, #132	@ 0x84
 800835a:	2100      	movs	r1, #0
 800835c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800835e:	2300      	movs	r3, #0
}
 8008360:	0018      	movs	r0, r3
 8008362:	46bd      	mov	sp, r7
 8008364:	b010      	add	sp, #64	@ 0x40
 8008366:	bd80      	pop	{r7, pc}
 8008368:	01ffffff 	.word	0x01ffffff
 800836c:	fffffedf 	.word	0xfffffedf

08008370 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b084      	sub	sp, #16
 8008374:	af00      	add	r7, sp, #0
 8008376:	60f8      	str	r0, [r7, #12]
 8008378:	60b9      	str	r1, [r7, #8]
 800837a:	603b      	str	r3, [r7, #0]
 800837c:	1dfb      	adds	r3, r7, #7
 800837e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008380:	e051      	b.n	8008426 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008382:	69bb      	ldr	r3, [r7, #24]
 8008384:	3301      	adds	r3, #1
 8008386:	d04e      	beq.n	8008426 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008388:	f7fb f8d2 	bl	8003530 <HAL_GetTick>
 800838c:	0002      	movs	r2, r0
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	1ad3      	subs	r3, r2, r3
 8008392:	69ba      	ldr	r2, [r7, #24]
 8008394:	429a      	cmp	r2, r3
 8008396:	d302      	bcc.n	800839e <UART_WaitOnFlagUntilTimeout+0x2e>
 8008398:	69bb      	ldr	r3, [r7, #24]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d101      	bne.n	80083a2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800839e:	2303      	movs	r3, #3
 80083a0:	e051      	b.n	8008446 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	2204      	movs	r2, #4
 80083aa:	4013      	ands	r3, r2
 80083ac:	d03b      	beq.n	8008426 <UART_WaitOnFlagUntilTimeout+0xb6>
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	2b80      	cmp	r3, #128	@ 0x80
 80083b2:	d038      	beq.n	8008426 <UART_WaitOnFlagUntilTimeout+0xb6>
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	2b40      	cmp	r3, #64	@ 0x40
 80083b8:	d035      	beq.n	8008426 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	69db      	ldr	r3, [r3, #28]
 80083c0:	2208      	movs	r2, #8
 80083c2:	4013      	ands	r3, r2
 80083c4:	2b08      	cmp	r3, #8
 80083c6:	d111      	bne.n	80083ec <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	2208      	movs	r2, #8
 80083ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	0018      	movs	r0, r3
 80083d4:	f000 f922 	bl	800861c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	2290      	movs	r2, #144	@ 0x90
 80083dc:	2108      	movs	r1, #8
 80083de:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	2284      	movs	r2, #132	@ 0x84
 80083e4:	2100      	movs	r1, #0
 80083e6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80083e8:	2301      	movs	r3, #1
 80083ea:	e02c      	b.n	8008446 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	69da      	ldr	r2, [r3, #28]
 80083f2:	2380      	movs	r3, #128	@ 0x80
 80083f4:	011b      	lsls	r3, r3, #4
 80083f6:	401a      	ands	r2, r3
 80083f8:	2380      	movs	r3, #128	@ 0x80
 80083fa:	011b      	lsls	r3, r3, #4
 80083fc:	429a      	cmp	r2, r3
 80083fe:	d112      	bne.n	8008426 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	2280      	movs	r2, #128	@ 0x80
 8008406:	0112      	lsls	r2, r2, #4
 8008408:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	0018      	movs	r0, r3
 800840e:	f000 f905 	bl	800861c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	2290      	movs	r2, #144	@ 0x90
 8008416:	2120      	movs	r1, #32
 8008418:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2284      	movs	r2, #132	@ 0x84
 800841e:	2100      	movs	r1, #0
 8008420:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008422:	2303      	movs	r3, #3
 8008424:	e00f      	b.n	8008446 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	69db      	ldr	r3, [r3, #28]
 800842c:	68ba      	ldr	r2, [r7, #8]
 800842e:	4013      	ands	r3, r2
 8008430:	68ba      	ldr	r2, [r7, #8]
 8008432:	1ad3      	subs	r3, r2, r3
 8008434:	425a      	negs	r2, r3
 8008436:	4153      	adcs	r3, r2
 8008438:	b2db      	uxtb	r3, r3
 800843a:	001a      	movs	r2, r3
 800843c:	1dfb      	adds	r3, r7, #7
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	429a      	cmp	r2, r3
 8008442:	d09e      	beq.n	8008382 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008444:	2300      	movs	r3, #0
}
 8008446:	0018      	movs	r0, r3
 8008448:	46bd      	mov	sp, r7
 800844a:	b004      	add	sp, #16
 800844c:	bd80      	pop	{r7, pc}
	...

08008450 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b090      	sub	sp, #64	@ 0x40
 8008454:	af00      	add	r7, sp, #0
 8008456:	60f8      	str	r0, [r7, #12]
 8008458:	60b9      	str	r1, [r7, #8]
 800845a:	1dbb      	adds	r3, r7, #6
 800845c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	68ba      	ldr	r2, [r7, #8]
 8008462:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	1dba      	adds	r2, r7, #6
 8008468:	215c      	movs	r1, #92	@ 0x5c
 800846a:	8812      	ldrh	r2, [r2, #0]
 800846c:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	2290      	movs	r2, #144	@ 0x90
 8008472:	2100      	movs	r1, #0
 8008474:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	228c      	movs	r2, #140	@ 0x8c
 800847a:	2122      	movs	r1, #34	@ 0x22
 800847c:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	2280      	movs	r2, #128	@ 0x80
 8008482:	589b      	ldr	r3, [r3, r2]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d02d      	beq.n	80084e4 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	2280      	movs	r2, #128	@ 0x80
 800848c:	589b      	ldr	r3, [r3, r2]
 800848e:	4a40      	ldr	r2, [pc, #256]	@ (8008590 <UART_Start_Receive_DMA+0x140>)
 8008490:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	2280      	movs	r2, #128	@ 0x80
 8008496:	589b      	ldr	r3, [r3, r2]
 8008498:	4a3e      	ldr	r2, [pc, #248]	@ (8008594 <UART_Start_Receive_DMA+0x144>)
 800849a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2280      	movs	r2, #128	@ 0x80
 80084a0:	589b      	ldr	r3, [r3, r2]
 80084a2:	4a3d      	ldr	r2, [pc, #244]	@ (8008598 <UART_Start_Receive_DMA+0x148>)
 80084a4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	2280      	movs	r2, #128	@ 0x80
 80084aa:	589b      	ldr	r3, [r3, r2]
 80084ac:	2200      	movs	r2, #0
 80084ae:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	2280      	movs	r2, #128	@ 0x80
 80084b4:	5898      	ldr	r0, [r3, r2]
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	3324      	adds	r3, #36	@ 0x24
 80084bc:	0019      	movs	r1, r3
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084c2:	001a      	movs	r2, r3
 80084c4:	1dbb      	adds	r3, r7, #6
 80084c6:	881b      	ldrh	r3, [r3, #0]
 80084c8:	f7fb fa72 	bl	80039b0 <HAL_DMA_Start_IT>
 80084cc:	1e03      	subs	r3, r0, #0
 80084ce:	d009      	beq.n	80084e4 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2290      	movs	r2, #144	@ 0x90
 80084d4:	2110      	movs	r1, #16
 80084d6:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	228c      	movs	r2, #140	@ 0x8c
 80084dc:	2120      	movs	r1, #32
 80084de:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 80084e0:	2301      	movs	r3, #1
 80084e2:	e050      	b.n	8008586 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	691b      	ldr	r3, [r3, #16]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d019      	beq.n	8008520 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80084ec:	f3ef 8310 	mrs	r3, PRIMASK
 80084f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80084f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80084f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80084f6:	2301      	movs	r3, #1
 80084f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084fc:	f383 8810 	msr	PRIMASK, r3
}
 8008500:	46c0      	nop			@ (mov r8, r8)
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	681a      	ldr	r2, [r3, #0]
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	2180      	movs	r1, #128	@ 0x80
 800850e:	0049      	lsls	r1, r1, #1
 8008510:	430a      	orrs	r2, r1
 8008512:	601a      	str	r2, [r3, #0]
 8008514:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008516:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800851a:	f383 8810 	msr	PRIMASK, r3
}
 800851e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008520:	f3ef 8310 	mrs	r3, PRIMASK
 8008524:	613b      	str	r3, [r7, #16]
  return(result);
 8008526:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008528:	63bb      	str	r3, [r7, #56]	@ 0x38
 800852a:	2301      	movs	r3, #1
 800852c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	f383 8810 	msr	PRIMASK, r3
}
 8008534:	46c0      	nop			@ (mov r8, r8)
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	689a      	ldr	r2, [r3, #8]
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	2101      	movs	r1, #1
 8008542:	430a      	orrs	r2, r1
 8008544:	609a      	str	r2, [r3, #8]
 8008546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008548:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800854a:	69bb      	ldr	r3, [r7, #24]
 800854c:	f383 8810 	msr	PRIMASK, r3
}
 8008550:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008552:	f3ef 8310 	mrs	r3, PRIMASK
 8008556:	61fb      	str	r3, [r7, #28]
  return(result);
 8008558:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800855a:	637b      	str	r3, [r7, #52]	@ 0x34
 800855c:	2301      	movs	r3, #1
 800855e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008560:	6a3b      	ldr	r3, [r7, #32]
 8008562:	f383 8810 	msr	PRIMASK, r3
}
 8008566:	46c0      	nop			@ (mov r8, r8)
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	689a      	ldr	r2, [r3, #8]
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	2140      	movs	r1, #64	@ 0x40
 8008574:	430a      	orrs	r2, r1
 8008576:	609a      	str	r2, [r3, #8]
 8008578:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800857a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800857c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800857e:	f383 8810 	msr	PRIMASK, r3
}
 8008582:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8008584:	2300      	movs	r3, #0
}
 8008586:	0018      	movs	r0, r3
 8008588:	46bd      	mov	sp, r7
 800858a:	b010      	add	sp, #64	@ 0x40
 800858c:	bd80      	pop	{r7, pc}
 800858e:	46c0      	nop			@ (mov r8, r8)
 8008590:	080087a1 	.word	0x080087a1
 8008594:	080088d1 	.word	0x080088d1
 8008598:	08008913 	.word	0x08008913

0800859c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b08a      	sub	sp, #40	@ 0x28
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80085a4:	f3ef 8310 	mrs	r3, PRIMASK
 80085a8:	60bb      	str	r3, [r7, #8]
  return(result);
 80085aa:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80085ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80085ae:	2301      	movs	r3, #1
 80085b0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	f383 8810 	msr	PRIMASK, r3
}
 80085b8:	46c0      	nop			@ (mov r8, r8)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	681a      	ldr	r2, [r3, #0]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	21c0      	movs	r1, #192	@ 0xc0
 80085c6:	438a      	bics	r2, r1
 80085c8:	601a      	str	r2, [r3, #0]
 80085ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	f383 8810 	msr	PRIMASK, r3
}
 80085d4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80085d6:	f3ef 8310 	mrs	r3, PRIMASK
 80085da:	617b      	str	r3, [r7, #20]
  return(result);
 80085dc:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80085de:	623b      	str	r3, [r7, #32]
 80085e0:	2301      	movs	r3, #1
 80085e2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085e4:	69bb      	ldr	r3, [r7, #24]
 80085e6:	f383 8810 	msr	PRIMASK, r3
}
 80085ea:	46c0      	nop			@ (mov r8, r8)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	689a      	ldr	r2, [r3, #8]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4908      	ldr	r1, [pc, #32]	@ (8008618 <UART_EndTxTransfer+0x7c>)
 80085f8:	400a      	ands	r2, r1
 80085fa:	609a      	str	r2, [r3, #8]
 80085fc:	6a3b      	ldr	r3, [r7, #32]
 80085fe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008600:	69fb      	ldr	r3, [r7, #28]
 8008602:	f383 8810 	msr	PRIMASK, r3
}
 8008606:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2288      	movs	r2, #136	@ 0x88
 800860c:	2120      	movs	r1, #32
 800860e:	5099      	str	r1, [r3, r2]
}
 8008610:	46c0      	nop			@ (mov r8, r8)
 8008612:	46bd      	mov	sp, r7
 8008614:	b00a      	add	sp, #40	@ 0x28
 8008616:	bd80      	pop	{r7, pc}
 8008618:	ff7fffff 	.word	0xff7fffff

0800861c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b08e      	sub	sp, #56	@ 0x38
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008624:	f3ef 8310 	mrs	r3, PRIMASK
 8008628:	617b      	str	r3, [r7, #20]
  return(result);
 800862a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800862c:	637b      	str	r3, [r7, #52]	@ 0x34
 800862e:	2301      	movs	r3, #1
 8008630:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008632:	69bb      	ldr	r3, [r7, #24]
 8008634:	f383 8810 	msr	PRIMASK, r3
}
 8008638:	46c0      	nop			@ (mov r8, r8)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	681a      	ldr	r2, [r3, #0]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4926      	ldr	r1, [pc, #152]	@ (80086e0 <UART_EndRxTransfer+0xc4>)
 8008646:	400a      	ands	r2, r1
 8008648:	601a      	str	r2, [r3, #0]
 800864a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800864c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800864e:	69fb      	ldr	r3, [r7, #28]
 8008650:	f383 8810 	msr	PRIMASK, r3
}
 8008654:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008656:	f3ef 8310 	mrs	r3, PRIMASK
 800865a:	623b      	str	r3, [r7, #32]
  return(result);
 800865c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800865e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008660:	2301      	movs	r3, #1
 8008662:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008666:	f383 8810 	msr	PRIMASK, r3
}
 800866a:	46c0      	nop			@ (mov r8, r8)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	689a      	ldr	r2, [r3, #8]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	491b      	ldr	r1, [pc, #108]	@ (80086e4 <UART_EndRxTransfer+0xc8>)
 8008678:	400a      	ands	r2, r1
 800867a:	609a      	str	r2, [r3, #8]
 800867c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800867e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008682:	f383 8810 	msr	PRIMASK, r3
}
 8008686:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800868c:	2b01      	cmp	r3, #1
 800868e:	d118      	bne.n	80086c2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008690:	f3ef 8310 	mrs	r3, PRIMASK
 8008694:	60bb      	str	r3, [r7, #8]
  return(result);
 8008696:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008698:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800869a:	2301      	movs	r3, #1
 800869c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	f383 8810 	msr	PRIMASK, r3
}
 80086a4:	46c0      	nop			@ (mov r8, r8)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	681a      	ldr	r2, [r3, #0]
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	2110      	movs	r1, #16
 80086b2:	438a      	bics	r2, r1
 80086b4:	601a      	str	r2, [r3, #0]
 80086b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	f383 8810 	msr	PRIMASK, r3
}
 80086c0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	228c      	movs	r2, #140	@ 0x8c
 80086c6:	2120      	movs	r1, #32
 80086c8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2200      	movs	r2, #0
 80086ce:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2200      	movs	r2, #0
 80086d4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80086d6:	46c0      	nop			@ (mov r8, r8)
 80086d8:	46bd      	mov	sp, r7
 80086da:	b00e      	add	sp, #56	@ 0x38
 80086dc:	bd80      	pop	{r7, pc}
 80086de:	46c0      	nop			@ (mov r8, r8)
 80086e0:	fffffedf 	.word	0xfffffedf
 80086e4:	effffffe 	.word	0xeffffffe

080086e8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b08c      	sub	sp, #48	@ 0x30
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086f4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	2220      	movs	r2, #32
 80086fe:	4013      	ands	r3, r2
 8008700:	d135      	bne.n	800876e <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8008702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008704:	2256      	movs	r2, #86	@ 0x56
 8008706:	2100      	movs	r1, #0
 8008708:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800870a:	f3ef 8310 	mrs	r3, PRIMASK
 800870e:	60fb      	str	r3, [r7, #12]
  return(result);
 8008710:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008712:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008714:	2301      	movs	r3, #1
 8008716:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	f383 8810 	msr	PRIMASK, r3
}
 800871e:	46c0      	nop			@ (mov r8, r8)
 8008720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	689a      	ldr	r2, [r3, #8]
 8008726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	2180      	movs	r1, #128	@ 0x80
 800872c:	438a      	bics	r2, r1
 800872e:	609a      	str	r2, [r3, #8]
 8008730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008732:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	f383 8810 	msr	PRIMASK, r3
}
 800873a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800873c:	f3ef 8310 	mrs	r3, PRIMASK
 8008740:	61bb      	str	r3, [r7, #24]
  return(result);
 8008742:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008744:	627b      	str	r3, [r7, #36]	@ 0x24
 8008746:	2301      	movs	r3, #1
 8008748:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800874a:	69fb      	ldr	r3, [r7, #28]
 800874c:	f383 8810 	msr	PRIMASK, r3
}
 8008750:	46c0      	nop			@ (mov r8, r8)
 8008752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	681a      	ldr	r2, [r3, #0]
 8008758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	2140      	movs	r1, #64	@ 0x40
 800875e:	430a      	orrs	r2, r1
 8008760:	601a      	str	r2, [r3, #0]
 8008762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008764:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008766:	6a3b      	ldr	r3, [r7, #32]
 8008768:	f383 8810 	msr	PRIMASK, r3
}
 800876c:	e004      	b.n	8008778 <UART_DMATransmitCplt+0x90>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 800876e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008770:	0018      	movs	r0, r3
 8008772:	f7f9 fc5f 	bl	8002034 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008776:	46c0      	nop			@ (mov r8, r8)
 8008778:	46c0      	nop			@ (mov r8, r8)
 800877a:	46bd      	mov	sp, r7
 800877c:	b00c      	add	sp, #48	@ 0x30
 800877e:	bd80      	pop	{r7, pc}

08008780 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b084      	sub	sp, #16
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800878c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	0018      	movs	r0, r3
 8008792:	f7ff faf9 	bl	8007d88 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008796:	46c0      	nop			@ (mov r8, r8)
 8008798:	46bd      	mov	sp, r7
 800879a:	b004      	add	sp, #16
 800879c:	bd80      	pop	{r7, pc}
	...

080087a0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b094      	sub	sp, #80	@ 0x50
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087ac:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	2220      	movs	r2, #32
 80087b6:	4013      	ands	r3, r2
 80087b8:	d16f      	bne.n	800889a <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 80087ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80087bc:	225e      	movs	r2, #94	@ 0x5e
 80087be:	2100      	movs	r1, #0
 80087c0:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80087c2:	f3ef 8310 	mrs	r3, PRIMASK
 80087c6:	61bb      	str	r3, [r7, #24]
  return(result);
 80087c8:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80087ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80087cc:	2301      	movs	r3, #1
 80087ce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087d0:	69fb      	ldr	r3, [r7, #28]
 80087d2:	f383 8810 	msr	PRIMASK, r3
}
 80087d6:	46c0      	nop			@ (mov r8, r8)
 80087d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	681a      	ldr	r2, [r3, #0]
 80087de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	493a      	ldr	r1, [pc, #232]	@ (80088cc <UART_DMAReceiveCplt+0x12c>)
 80087e4:	400a      	ands	r2, r1
 80087e6:	601a      	str	r2, [r3, #0]
 80087e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80087ea:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087ec:	6a3b      	ldr	r3, [r7, #32]
 80087ee:	f383 8810 	msr	PRIMASK, r3
}
 80087f2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80087f4:	f3ef 8310 	mrs	r3, PRIMASK
 80087f8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80087fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80087fe:	2301      	movs	r3, #1
 8008800:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008804:	f383 8810 	msr	PRIMASK, r3
}
 8008808:	46c0      	nop			@ (mov r8, r8)
 800880a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	689a      	ldr	r2, [r3, #8]
 8008810:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	2101      	movs	r1, #1
 8008816:	438a      	bics	r2, r1
 8008818:	609a      	str	r2, [r3, #8]
 800881a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800881c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800881e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008820:	f383 8810 	msr	PRIMASK, r3
}
 8008824:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008826:	f3ef 8310 	mrs	r3, PRIMASK
 800882a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800882c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800882e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008830:	2301      	movs	r3, #1
 8008832:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008834:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008836:	f383 8810 	msr	PRIMASK, r3
}
 800883a:	46c0      	nop			@ (mov r8, r8)
 800883c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	689a      	ldr	r2, [r3, #8]
 8008842:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	2140      	movs	r1, #64	@ 0x40
 8008848:	438a      	bics	r2, r1
 800884a:	609a      	str	r2, [r3, #8]
 800884c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800884e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008852:	f383 8810 	msr	PRIMASK, r3
}
 8008856:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008858:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800885a:	228c      	movs	r2, #140	@ 0x8c
 800885c:	2120      	movs	r1, #32
 800885e:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008860:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008862:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008864:	2b01      	cmp	r3, #1
 8008866:	d118      	bne.n	800889a <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008868:	f3ef 8310 	mrs	r3, PRIMASK
 800886c:	60fb      	str	r3, [r7, #12]
  return(result);
 800886e:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008870:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008872:	2301      	movs	r3, #1
 8008874:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008876:	693b      	ldr	r3, [r7, #16]
 8008878:	f383 8810 	msr	PRIMASK, r3
}
 800887c:	46c0      	nop			@ (mov r8, r8)
 800887e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	681a      	ldr	r2, [r3, #0]
 8008884:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	2110      	movs	r1, #16
 800888a:	438a      	bics	r2, r1
 800888c:	601a      	str	r2, [r3, #0]
 800888e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008890:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	f383 8810 	msr	PRIMASK, r3
}
 8008898:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800889a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800889c:	2200      	movs	r2, #0
 800889e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80088a4:	2b01      	cmp	r3, #1
 80088a6:	d108      	bne.n	80088ba <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80088a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088aa:	225c      	movs	r2, #92	@ 0x5c
 80088ac:	5a9a      	ldrh	r2, [r3, r2]
 80088ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088b0:	0011      	movs	r1, r2
 80088b2:	0018      	movs	r0, r3
 80088b4:	f7f9 fb14 	bl	8001ee0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80088b8:	e003      	b.n	80088c2 <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 80088ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088bc:	0018      	movs	r0, r3
 80088be:	f7ff fa6b 	bl	8007d98 <HAL_UART_RxCpltCallback>
}
 80088c2:	46c0      	nop			@ (mov r8, r8)
 80088c4:	46bd      	mov	sp, r7
 80088c6:	b014      	add	sp, #80	@ 0x50
 80088c8:	bd80      	pop	{r7, pc}
 80088ca:	46c0      	nop			@ (mov r8, r8)
 80088cc:	fffffeff 	.word	0xfffffeff

080088d0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b084      	sub	sp, #16
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088dc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2201      	movs	r2, #1
 80088e2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d10a      	bne.n	8008902 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	225c      	movs	r2, #92	@ 0x5c
 80088f0:	5a9b      	ldrh	r3, [r3, r2]
 80088f2:	085b      	lsrs	r3, r3, #1
 80088f4:	b29a      	uxth	r2, r3
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	0011      	movs	r1, r2
 80088fa:	0018      	movs	r0, r3
 80088fc:	f7f9 faf0 	bl	8001ee0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008900:	e003      	b.n	800890a <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	0018      	movs	r0, r3
 8008906:	f7ff fa4f 	bl	8007da8 <HAL_UART_RxHalfCpltCallback>
}
 800890a:	46c0      	nop			@ (mov r8, r8)
 800890c:	46bd      	mov	sp, r7
 800890e:	b004      	add	sp, #16
 8008910:	bd80      	pop	{r7, pc}

08008912 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008912:	b580      	push	{r7, lr}
 8008914:	b086      	sub	sp, #24
 8008916:	af00      	add	r7, sp, #0
 8008918:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800891e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	2288      	movs	r2, #136	@ 0x88
 8008924:	589b      	ldr	r3, [r3, r2]
 8008926:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	228c      	movs	r2, #140	@ 0x8c
 800892c:	589b      	ldr	r3, [r3, r2]
 800892e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	689b      	ldr	r3, [r3, #8]
 8008936:	2280      	movs	r2, #128	@ 0x80
 8008938:	4013      	ands	r3, r2
 800893a:	2b80      	cmp	r3, #128	@ 0x80
 800893c:	d10a      	bne.n	8008954 <UART_DMAError+0x42>
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	2b21      	cmp	r3, #33	@ 0x21
 8008942:	d107      	bne.n	8008954 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	2256      	movs	r2, #86	@ 0x56
 8008948:	2100      	movs	r1, #0
 800894a:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	0018      	movs	r0, r3
 8008950:	f7ff fe24 	bl	800859c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	689b      	ldr	r3, [r3, #8]
 800895a:	2240      	movs	r2, #64	@ 0x40
 800895c:	4013      	ands	r3, r2
 800895e:	2b40      	cmp	r3, #64	@ 0x40
 8008960:	d10a      	bne.n	8008978 <UART_DMAError+0x66>
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	2b22      	cmp	r3, #34	@ 0x22
 8008966:	d107      	bne.n	8008978 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	225e      	movs	r2, #94	@ 0x5e
 800896c:	2100      	movs	r1, #0
 800896e:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	0018      	movs	r0, r3
 8008974:	f7ff fe52 	bl	800861c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	2290      	movs	r2, #144	@ 0x90
 800897c:	589b      	ldr	r3, [r3, r2]
 800897e:	2210      	movs	r2, #16
 8008980:	431a      	orrs	r2, r3
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	2190      	movs	r1, #144	@ 0x90
 8008986:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	0018      	movs	r0, r3
 800898c:	f7f9 fb60 	bl	8002050 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008990:	46c0      	nop			@ (mov r8, r8)
 8008992:	46bd      	mov	sp, r7
 8008994:	b006      	add	sp, #24
 8008996:	bd80      	pop	{r7, pc}

08008998 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b084      	sub	sp, #16
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	225e      	movs	r2, #94	@ 0x5e
 80089aa:	2100      	movs	r1, #0
 80089ac:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	2256      	movs	r2, #86	@ 0x56
 80089b2:	2100      	movs	r1, #0
 80089b4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	0018      	movs	r0, r3
 80089ba:	f7f9 fb49 	bl	8002050 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089be:	46c0      	nop			@ (mov r8, r8)
 80089c0:	46bd      	mov	sp, r7
 80089c2:	b004      	add	sp, #16
 80089c4:	bd80      	pop	{r7, pc}

080089c6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80089c6:	b580      	push	{r7, lr}
 80089c8:	b086      	sub	sp, #24
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80089ce:	f3ef 8310 	mrs	r3, PRIMASK
 80089d2:	60bb      	str	r3, [r7, #8]
  return(result);
 80089d4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80089d6:	617b      	str	r3, [r7, #20]
 80089d8:	2301      	movs	r3, #1
 80089da:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	f383 8810 	msr	PRIMASK, r3
}
 80089e2:	46c0      	nop			@ (mov r8, r8)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	681a      	ldr	r2, [r3, #0]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	2140      	movs	r1, #64	@ 0x40
 80089f0:	438a      	bics	r2, r1
 80089f2:	601a      	str	r2, [r3, #0]
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	f383 8810 	msr	PRIMASK, r3
}
 80089fe:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2288      	movs	r2, #136	@ 0x88
 8008a04:	2120      	movs	r1, #32
 8008a06:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	0018      	movs	r0, r3
 8008a12:	f7f9 fb0f 	bl	8002034 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a16:	46c0      	nop			@ (mov r8, r8)
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	b006      	add	sp, #24
 8008a1c:	bd80      	pop	{r7, pc}
	...

08008a20 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b086      	sub	sp, #24
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	60f8      	str	r0, [r7, #12]
 8008a28:	60b9      	str	r1, [r7, #8]
 8008a2a:	607a      	str	r2, [r7, #4]
 8008a2c:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d101      	bne.n	8008a38 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8008a34:	2301      	movs	r3, #1
 8008a36:	e05d      	b.n	8008af4 <HAL_RS485Ex_Init+0xd4>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2288      	movs	r2, #136	@ 0x88
 8008a3c:	589b      	ldr	r3, [r3, r2]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d107      	bne.n	8008a52 <HAL_RS485Ex_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	2284      	movs	r2, #132	@ 0x84
 8008a46:	2100      	movs	r1, #0
 8008a48:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	0018      	movs	r0, r3
 8008a4e:	f7fa fa61 	bl	8002f14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2288      	movs	r2, #136	@ 0x88
 8008a56:	2124      	movs	r1, #36	@ 0x24
 8008a58:	5099      	str	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	681a      	ldr	r2, [r3, #0]
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	2101      	movs	r1, #1
 8008a66:	438a      	bics	r2, r1
 8008a68:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d003      	beq.n	8008a7a <HAL_RS485Ex_Init+0x5a>
  {
    UART_AdvFeatureConfig(huart);
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	0018      	movs	r0, r3
 8008a76:	f7ff fb1d 	bl	80080b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	0018      	movs	r0, r3
 8008a7e:	f7ff f99b 	bl	8007db8 <UART_SetConfig>
 8008a82:	0003      	movs	r3, r0
 8008a84:	2b01      	cmp	r3, #1
 8008a86:	d101      	bne.n	8008a8c <HAL_RS485Ex_Init+0x6c>
  {
    return HAL_ERROR;
 8008a88:	2301      	movs	r3, #1
 8008a8a:	e033      	b.n	8008af4 <HAL_RS485Ex_Init+0xd4>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	689a      	ldr	r2, [r3, #8]
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	2180      	movs	r1, #128	@ 0x80
 8008a98:	01c9      	lsls	r1, r1, #7
 8008a9a:	430a      	orrs	r2, r1
 8008a9c:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	689b      	ldr	r3, [r3, #8]
 8008aa4:	4a15      	ldr	r2, [pc, #84]	@ (8008afc <HAL_RS485Ex_Init+0xdc>)
 8008aa6:	4013      	ands	r3, r2
 8008aa8:	0019      	movs	r1, r3
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	68ba      	ldr	r2, [r7, #8]
 8008ab0:	430a      	orrs	r2, r1
 8008ab2:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	055b      	lsls	r3, r3, #21
 8008ab8:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	041b      	lsls	r3, r3, #16
 8008abe:	697a      	ldr	r2, [r7, #20]
 8008ac0:	4313      	orrs	r3, r2
 8008ac2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4a0d      	ldr	r2, [pc, #52]	@ (8008b00 <HAL_RS485Ex_Init+0xe0>)
 8008acc:	4013      	ands	r3, r2
 8008ace:	0019      	movs	r1, r3
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	697a      	ldr	r2, [r7, #20]
 8008ad6:	430a      	orrs	r2, r1
 8008ad8:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	681a      	ldr	r2, [r3, #0]
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	2101      	movs	r1, #1
 8008ae6:	430a      	orrs	r2, r1
 8008ae8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	0018      	movs	r0, r3
 8008aee:	f7ff fb95 	bl	800821c <UART_CheckIdleState>
 8008af2:	0003      	movs	r3, r0
}
 8008af4:	0018      	movs	r0, r3
 8008af6:	46bd      	mov	sp, r7
 8008af8:	b006      	add	sp, #24
 8008afa:	bd80      	pop	{r7, pc}
 8008afc:	ffff7fff 	.word	0xffff7fff
 8008b00:	fc00ffff 	.word	0xfc00ffff

08008b04 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b082      	sub	sp, #8
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008b0c:	46c0      	nop			@ (mov r8, r8)
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	b002      	add	sp, #8
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b082      	sub	sp, #8
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008b1c:	46c0      	nop			@ (mov r8, r8)
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	b002      	add	sp, #8
 8008b22:	bd80      	pop	{r7, pc}

08008b24 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b082      	sub	sp, #8
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008b2c:	46c0      	nop			@ (mov r8, r8)
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	b002      	add	sp, #8
 8008b32:	bd80      	pop	{r7, pc}

08008b34 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b084      	sub	sp, #16
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2284      	movs	r2, #132	@ 0x84
 8008b40:	5c9b      	ldrb	r3, [r3, r2]
 8008b42:	2b01      	cmp	r3, #1
 8008b44:	d101      	bne.n	8008b4a <HAL_UARTEx_DisableFifoMode+0x16>
 8008b46:	2302      	movs	r3, #2
 8008b48:	e027      	b.n	8008b9a <HAL_UARTEx_DisableFifoMode+0x66>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2284      	movs	r2, #132	@ 0x84
 8008b4e:	2101      	movs	r1, #1
 8008b50:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2288      	movs	r2, #136	@ 0x88
 8008b56:	2124      	movs	r1, #36	@ 0x24
 8008b58:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	681a      	ldr	r2, [r3, #0]
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	2101      	movs	r1, #1
 8008b6e:	438a      	bics	r2, r1
 8008b70:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	4a0b      	ldr	r2, [pc, #44]	@ (8008ba4 <HAL_UARTEx_DisableFifoMode+0x70>)
 8008b76:	4013      	ands	r3, r2
 8008b78:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	68fa      	ldr	r2, [r7, #12]
 8008b86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2288      	movs	r2, #136	@ 0x88
 8008b8c:	2120      	movs	r1, #32
 8008b8e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2284      	movs	r2, #132	@ 0x84
 8008b94:	2100      	movs	r1, #0
 8008b96:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008b98:	2300      	movs	r3, #0
}
 8008b9a:	0018      	movs	r0, r3
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	b004      	add	sp, #16
 8008ba0:	bd80      	pop	{r7, pc}
 8008ba2:	46c0      	nop			@ (mov r8, r8)
 8008ba4:	dfffffff 	.word	0xdfffffff

08008ba8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b084      	sub	sp, #16
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2284      	movs	r2, #132	@ 0x84
 8008bb6:	5c9b      	ldrb	r3, [r3, r2]
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d101      	bne.n	8008bc0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008bbc:	2302      	movs	r3, #2
 8008bbe:	e02e      	b.n	8008c1e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2284      	movs	r2, #132	@ 0x84
 8008bc4:	2101      	movs	r1, #1
 8008bc6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2288      	movs	r2, #136	@ 0x88
 8008bcc:	2124      	movs	r1, #36	@ 0x24
 8008bce:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	681a      	ldr	r2, [r3, #0]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	2101      	movs	r1, #1
 8008be4:	438a      	bics	r2, r1
 8008be6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	689b      	ldr	r3, [r3, #8]
 8008bee:	00db      	lsls	r3, r3, #3
 8008bf0:	08d9      	lsrs	r1, r3, #3
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	683a      	ldr	r2, [r7, #0]
 8008bf8:	430a      	orrs	r2, r1
 8008bfa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	0018      	movs	r0, r3
 8008c00:	f000 f8bc 	bl	8008d7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	68fa      	ldr	r2, [r7, #12]
 8008c0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2288      	movs	r2, #136	@ 0x88
 8008c10:	2120      	movs	r1, #32
 8008c12:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2284      	movs	r2, #132	@ 0x84
 8008c18:	2100      	movs	r1, #0
 8008c1a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008c1c:	2300      	movs	r3, #0
}
 8008c1e:	0018      	movs	r0, r3
 8008c20:	46bd      	mov	sp, r7
 8008c22:	b004      	add	sp, #16
 8008c24:	bd80      	pop	{r7, pc}
	...

08008c28 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b084      	sub	sp, #16
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2284      	movs	r2, #132	@ 0x84
 8008c36:	5c9b      	ldrb	r3, [r3, r2]
 8008c38:	2b01      	cmp	r3, #1
 8008c3a:	d101      	bne.n	8008c40 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008c3c:	2302      	movs	r3, #2
 8008c3e:	e02f      	b.n	8008ca0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2284      	movs	r2, #132	@ 0x84
 8008c44:	2101      	movs	r1, #1
 8008c46:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2288      	movs	r2, #136	@ 0x88
 8008c4c:	2124      	movs	r1, #36	@ 0x24
 8008c4e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	681a      	ldr	r2, [r3, #0]
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	2101      	movs	r1, #1
 8008c64:	438a      	bics	r2, r1
 8008c66:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	689b      	ldr	r3, [r3, #8]
 8008c6e:	4a0e      	ldr	r2, [pc, #56]	@ (8008ca8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8008c70:	4013      	ands	r3, r2
 8008c72:	0019      	movs	r1, r3
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	683a      	ldr	r2, [r7, #0]
 8008c7a:	430a      	orrs	r2, r1
 8008c7c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	0018      	movs	r0, r3
 8008c82:	f000 f87b 	bl	8008d7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	68fa      	ldr	r2, [r7, #12]
 8008c8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2288      	movs	r2, #136	@ 0x88
 8008c92:	2120      	movs	r1, #32
 8008c94:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2284      	movs	r2, #132	@ 0x84
 8008c9a:	2100      	movs	r1, #0
 8008c9c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008c9e:	2300      	movs	r3, #0
}
 8008ca0:	0018      	movs	r0, r3
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	b004      	add	sp, #16
 8008ca6:	bd80      	pop	{r7, pc}
 8008ca8:	f1ffffff 	.word	0xf1ffffff

08008cac <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008cac:	b5b0      	push	{r4, r5, r7, lr}
 8008cae:	b08a      	sub	sp, #40	@ 0x28
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	60f8      	str	r0, [r7, #12]
 8008cb4:	60b9      	str	r1, [r7, #8]
 8008cb6:	1dbb      	adds	r3, r7, #6
 8008cb8:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	228c      	movs	r2, #140	@ 0x8c
 8008cbe:	589b      	ldr	r3, [r3, r2]
 8008cc0:	2b20      	cmp	r3, #32
 8008cc2:	d156      	bne.n	8008d72 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d003      	beq.n	8008cd2 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8008cca:	1dbb      	adds	r3, r7, #6
 8008ccc:	881b      	ldrh	r3, [r3, #0]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d101      	bne.n	8008cd6 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	e04e      	b.n	8008d74 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	689a      	ldr	r2, [r3, #8]
 8008cda:	2380      	movs	r3, #128	@ 0x80
 8008cdc:	015b      	lsls	r3, r3, #5
 8008cde:	429a      	cmp	r2, r3
 8008ce0:	d109      	bne.n	8008cf6 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	691b      	ldr	r3, [r3, #16]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d105      	bne.n	8008cf6 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	2201      	movs	r2, #1
 8008cee:	4013      	ands	r3, r2
 8008cf0:	d001      	beq.n	8008cf6 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	e03e      	b.n	8008d74 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8008d02:	2527      	movs	r5, #39	@ 0x27
 8008d04:	197c      	adds	r4, r7, r5
 8008d06:	1dbb      	adds	r3, r7, #6
 8008d08:	881a      	ldrh	r2, [r3, #0]
 8008d0a:	68b9      	ldr	r1, [r7, #8]
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	0018      	movs	r0, r3
 8008d10:	f7ff fb9e 	bl	8008450 <UART_Start_Receive_DMA>
 8008d14:	0003      	movs	r3, r0
 8008d16:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8008d18:	197b      	adds	r3, r7, r5
 8008d1a:	781b      	ldrb	r3, [r3, #0]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d124      	bne.n	8008d6a <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d24:	2b01      	cmp	r3, #1
 8008d26:	d11c      	bne.n	8008d62 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	2210      	movs	r2, #16
 8008d2e:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008d30:	f3ef 8310 	mrs	r3, PRIMASK
 8008d34:	617b      	str	r3, [r7, #20]
  return(result);
 8008d36:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d38:	623b      	str	r3, [r7, #32]
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d3e:	69bb      	ldr	r3, [r7, #24]
 8008d40:	f383 8810 	msr	PRIMASK, r3
}
 8008d44:	46c0      	nop			@ (mov r8, r8)
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	681a      	ldr	r2, [r3, #0]
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	2110      	movs	r1, #16
 8008d52:	430a      	orrs	r2, r1
 8008d54:	601a      	str	r2, [r3, #0]
 8008d56:	6a3b      	ldr	r3, [r7, #32]
 8008d58:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d5a:	69fb      	ldr	r3, [r7, #28]
 8008d5c:	f383 8810 	msr	PRIMASK, r3
}
 8008d60:	e003      	b.n	8008d6a <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8008d62:	2327      	movs	r3, #39	@ 0x27
 8008d64:	18fb      	adds	r3, r7, r3
 8008d66:	2201      	movs	r2, #1
 8008d68:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 8008d6a:	2327      	movs	r3, #39	@ 0x27
 8008d6c:	18fb      	adds	r3, r7, r3
 8008d6e:	781b      	ldrb	r3, [r3, #0]
 8008d70:	e000      	b.n	8008d74 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8008d72:	2302      	movs	r3, #2
  }
}
 8008d74:	0018      	movs	r0, r3
 8008d76:	46bd      	mov	sp, r7
 8008d78:	b00a      	add	sp, #40	@ 0x28
 8008d7a:	bdb0      	pop	{r4, r5, r7, pc}

08008d7c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d7e:	b085      	sub	sp, #20
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d108      	bne.n	8008d9e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	226a      	movs	r2, #106	@ 0x6a
 8008d90:	2101      	movs	r1, #1
 8008d92:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2268      	movs	r2, #104	@ 0x68
 8008d98:	2101      	movs	r1, #1
 8008d9a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008d9c:	e043      	b.n	8008e26 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008d9e:	260f      	movs	r6, #15
 8008da0:	19bb      	adds	r3, r7, r6
 8008da2:	2208      	movs	r2, #8
 8008da4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008da6:	200e      	movs	r0, #14
 8008da8:	183b      	adds	r3, r7, r0
 8008daa:	2208      	movs	r2, #8
 8008dac:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	689b      	ldr	r3, [r3, #8]
 8008db4:	0e5b      	lsrs	r3, r3, #25
 8008db6:	b2da      	uxtb	r2, r3
 8008db8:	240d      	movs	r4, #13
 8008dba:	193b      	adds	r3, r7, r4
 8008dbc:	2107      	movs	r1, #7
 8008dbe:	400a      	ands	r2, r1
 8008dc0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	689b      	ldr	r3, [r3, #8]
 8008dc8:	0f5b      	lsrs	r3, r3, #29
 8008dca:	b2da      	uxtb	r2, r3
 8008dcc:	250c      	movs	r5, #12
 8008dce:	197b      	adds	r3, r7, r5
 8008dd0:	2107      	movs	r1, #7
 8008dd2:	400a      	ands	r2, r1
 8008dd4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008dd6:	183b      	adds	r3, r7, r0
 8008dd8:	781b      	ldrb	r3, [r3, #0]
 8008dda:	197a      	adds	r2, r7, r5
 8008ddc:	7812      	ldrb	r2, [r2, #0]
 8008dde:	4914      	ldr	r1, [pc, #80]	@ (8008e30 <UARTEx_SetNbDataToProcess+0xb4>)
 8008de0:	5c8a      	ldrb	r2, [r1, r2]
 8008de2:	435a      	muls	r2, r3
 8008de4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8008de6:	197b      	adds	r3, r7, r5
 8008de8:	781b      	ldrb	r3, [r3, #0]
 8008dea:	4a12      	ldr	r2, [pc, #72]	@ (8008e34 <UARTEx_SetNbDataToProcess+0xb8>)
 8008dec:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008dee:	0019      	movs	r1, r3
 8008df0:	f7f7 fa14 	bl	800021c <__divsi3>
 8008df4:	0003      	movs	r3, r0
 8008df6:	b299      	uxth	r1, r3
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	226a      	movs	r2, #106	@ 0x6a
 8008dfc:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008dfe:	19bb      	adds	r3, r7, r6
 8008e00:	781b      	ldrb	r3, [r3, #0]
 8008e02:	193a      	adds	r2, r7, r4
 8008e04:	7812      	ldrb	r2, [r2, #0]
 8008e06:	490a      	ldr	r1, [pc, #40]	@ (8008e30 <UARTEx_SetNbDataToProcess+0xb4>)
 8008e08:	5c8a      	ldrb	r2, [r1, r2]
 8008e0a:	435a      	muls	r2, r3
 8008e0c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8008e0e:	193b      	adds	r3, r7, r4
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	4a08      	ldr	r2, [pc, #32]	@ (8008e34 <UARTEx_SetNbDataToProcess+0xb8>)
 8008e14:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e16:	0019      	movs	r1, r3
 8008e18:	f7f7 fa00 	bl	800021c <__divsi3>
 8008e1c:	0003      	movs	r3, r0
 8008e1e:	b299      	uxth	r1, r3
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2268      	movs	r2, #104	@ 0x68
 8008e24:	5299      	strh	r1, [r3, r2]
}
 8008e26:	46c0      	nop			@ (mov r8, r8)
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	b005      	add	sp, #20
 8008e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e2e:	46c0      	nop			@ (mov r8, r8)
 8008e30:	08009674 	.word	0x08009674
 8008e34:	0800967c 	.word	0x0800967c

08008e38 <LL_ADC_REG_GetSequencerConfigurable>:
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b082      	sub	sp, #8
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_CHSELRMOD));
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	68da      	ldr	r2, [r3, #12]
 8008e44:	2380      	movs	r3, #128	@ 0x80
 8008e46:	039b      	lsls	r3, r3, #14
 8008e48:	4013      	ands	r3, r2
}
 8008e4a:	0018      	movs	r0, r3
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	b002      	add	sp, #8
 8008e50:	bd80      	pop	{r7, pc}

08008e52 <LL_ADC_REG_SetSequencerLength>:
{
 8008e52:	b580      	push	{r7, lr}
 8008e54:	b082      	sub	sp, #8
 8008e56:	af00      	add	r7, sp, #0
 8008e58:	6078      	str	r0, [r7, #4]
 8008e5a:	6039      	str	r1, [r7, #0]
  SET_BIT(ADCx->CHSELR, SequencerNbRanks);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	431a      	orrs	r2, r3
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8008e68:	46c0      	nop			@ (mov r8, r8)
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	b002      	add	sp, #8
 8008e6e:	bd80      	pop	{r7, pc}

08008e70 <LL_ADC_IsEnabled>:
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b082      	sub	sp, #8
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	689b      	ldr	r3, [r3, #8]
 8008e7c:	2201      	movs	r2, #1
 8008e7e:	4013      	ands	r3, r2
 8008e80:	2b01      	cmp	r3, #1
 8008e82:	d101      	bne.n	8008e88 <LL_ADC_IsEnabled+0x18>
 8008e84:	2301      	movs	r3, #1
 8008e86:	e000      	b.n	8008e8a <LL_ADC_IsEnabled+0x1a>
 8008e88:	2300      	movs	r3, #0
}
 8008e8a:	0018      	movs	r0, r3
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	b002      	add	sp, #8
 8008e90:	bd80      	pop	{r7, pc}
	...

08008e94 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b084      	sub	sp, #16
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8008e9e:	230f      	movs	r3, #15
 8008ea0:	18fb      	adds	r3, r7, r3
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	0018      	movs	r0, r3
 8008eaa:	f7ff ffe1 	bl	8008e70 <LL_ADC_IsEnabled>
 8008eae:	1e03      	subs	r3, r0, #0
 8008eb0:	d118      	bne.n	8008ee4 <LL_ADC_Init+0x50>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR1,
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	68db      	ldr	r3, [r3, #12]
 8008eb6:	4a11      	ldr	r2, [pc, #68]	@ (8008efc <LL_ADC_Init+0x68>)
 8008eb8:	401a      	ands	r2, r3
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	6859      	ldr	r1, [r3, #4]
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	689b      	ldr	r3, [r3, #8]
 8008ec2:	4319      	orrs	r1, r3
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	68db      	ldr	r3, [r3, #12]
 8008ec8:	430b      	orrs	r3, r1
 8008eca:	431a      	orrs	r2, r3
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	60da      	str	r2, [r3, #12]
               ADC_InitStruct->Resolution
               | ADC_InitStruct->DataAlignment
               | ADC_InitStruct->LowPowerMode
              );

    MODIFY_REG(ADCx->CFGR2,
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	691b      	ldr	r3, [r3, #16]
 8008ed4:	009b      	lsls	r3, r3, #2
 8008ed6:	089a      	lsrs	r2, r3, #2
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	431a      	orrs	r2, r3
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	611a      	str	r2, [r3, #16]
 8008ee2:	e003      	b.n	8008eec <LL_ADC_Init+0x58>
              );
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8008ee4:	230f      	movs	r3, #15
 8008ee6:	18fb      	adds	r3, r7, r3
 8008ee8:	2201      	movs	r2, #1
 8008eea:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8008eec:	230f      	movs	r3, #15
 8008eee:	18fb      	adds	r3, r7, r3
 8008ef0:	781b      	ldrb	r3, [r3, #0]
}
 8008ef2:	0018      	movs	r0, r3
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	b004      	add	sp, #16
 8008ef8:	bd80      	pop	{r7, pc}
 8008efa:	46c0      	nop			@ (mov r8, r8)
 8008efc:	ffff3fc7 	.word	0xffff3fc7

08008f00 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b084      	sub	sp, #16
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
 8008f08:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8008f0a:	230f      	movs	r3, #15
 8008f0c:	18fb      	adds	r3, r7, r3
 8008f0e:	2200      	movs	r2, #0
 8008f10:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_ADC_REG_TRIG_SOURCE(ADC_REG_InitStruct->TriggerSource));
  assert_param(IS_LL_ADC_REG_CONTINUOUS_MODE(ADC_REG_InitStruct->ContinuousMode));
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));

  if (LL_ADC_REG_GetSequencerConfigurable(ADCx) != LL_ADC_REG_SEQ_FIXED)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	0018      	movs	r0, r3
 8008f16:	f7ff ff8f 	bl	8008e38 <LL_ADC_REG_GetSequencerConfigurable>
  {
    assert_param(IS_LL_ADC_REG_SEQ_SCAN_LENGTH(ADC_REG_InitStruct->SequencerLength));
  }

  if ((LL_ADC_REG_GetSequencerConfigurable(ADCx) == LL_ADC_REG_SEQ_FIXED)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	0018      	movs	r0, r3
 8008f1e:	f7ff ff8b 	bl	8008e38 <LL_ADC_REG_GetSequencerConfigurable>
                 || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  }

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	0018      	movs	r0, r3
 8008f26:	f7ff ffa3 	bl	8008e70 <LL_ADC_IsEnabled>
 8008f2a:	1e03      	subs	r3, r0, #0
 8008f2c:	d13f      	bne.n	8008fae <LL_ADC_REG_Init+0xae>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by    */
    /*       setting of trigger source to SW start.                           */
    if ((LL_ADC_REG_GetSequencerConfigurable(ADCx) == LL_ADC_REG_SEQ_FIXED)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	0018      	movs	r0, r3
 8008f32:	f7ff ff81 	bl	8008e38 <LL_ADC_REG_GetSequencerConfigurable>
 8008f36:	1e03      	subs	r3, r0, #0
 8008f38:	d003      	beq.n	8008f42 <LL_ADC_REG_Init+0x42>
        || (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	685b      	ldr	r3, [r3, #4]
 8008f3e:	2bf0      	cmp	r3, #240	@ 0xf0
 8008f40:	d015      	beq.n	8008f6e <LL_ADC_REG_Init+0x6e>
       )
    {
      /* Case of sequencer mode fixed
         or sequencer length >= 2 ranks with sequencer mode fully configurable:
         discontinuous mode configured */
      MODIFY_REG(ADCx->CFGR1,
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	68db      	ldr	r3, [r3, #12]
 8008f46:	4a1f      	ldr	r2, [pc, #124]	@ (8008fc4 <LL_ADC_REG_Init+0xc4>)
 8008f48:	401a      	ands	r2, r3
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	6819      	ldr	r1, [r3, #0]
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	689b      	ldr	r3, [r3, #8]
 8008f52:	4319      	orrs	r1, r3
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	68db      	ldr	r3, [r3, #12]
 8008f58:	4319      	orrs	r1, r3
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	691b      	ldr	r3, [r3, #16]
 8008f5e:	4319      	orrs	r1, r3
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	695b      	ldr	r3, [r3, #20]
 8008f64:	430b      	orrs	r3, r1
 8008f66:	431a      	orrs	r2, r3
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	60da      	str	r2, [r3, #12]
 8008f6c:	e011      	b.n	8008f92 <LL_ADC_REG_Init+0x92>
    else
    {
      /* Case of sequencer mode fully configurable
         and sequencer length 1 rank (sequencer disabled):
         discontinuous mode discarded (fixed to disable) */
      MODIFY_REG(ADCx->CFGR1,
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	68db      	ldr	r3, [r3, #12]
 8008f72:	4a14      	ldr	r2, [pc, #80]	@ (8008fc4 <LL_ADC_REG_Init+0xc4>)
 8008f74:	401a      	ands	r2, r3
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	6819      	ldr	r1, [r3, #0]
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	68db      	ldr	r3, [r3, #12]
 8008f7e:	4319      	orrs	r1, r3
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	691b      	ldr	r3, [r3, #16]
 8008f84:	4319      	orrs	r1, r3
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	695b      	ldr	r3, [r3, #20]
 8008f8a:	430b      	orrs	r3, r1
 8008f8c:	431a      	orrs	r2, r3
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	60da      	str	r2, [r3, #12]
                 | ADC_REG_InitStruct->Overrun
                );
    }

    /* Set ADC group regular sequencer length */
    if (LL_ADC_REG_GetSequencerConfigurable(ADCx) != LL_ADC_REG_SEQ_FIXED)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	0018      	movs	r0, r3
 8008f96:	f7ff ff4f 	bl	8008e38 <LL_ADC_REG_GetSequencerConfigurable>
 8008f9a:	1e03      	subs	r3, r0, #0
 8008f9c:	d00b      	beq.n	8008fb6 <LL_ADC_REG_Init+0xb6>
    {
      LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	685a      	ldr	r2, [r3, #4]
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	0011      	movs	r1, r2
 8008fa6:	0018      	movs	r0, r3
 8008fa8:	f7ff ff53 	bl	8008e52 <LL_ADC_REG_SetSequencerLength>
 8008fac:	e003      	b.n	8008fb6 <LL_ADC_REG_Init+0xb6>
    }
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8008fae:	230f      	movs	r3, #15
 8008fb0:	18fb      	adds	r3, r7, r3
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8008fb6:	230f      	movs	r3, #15
 8008fb8:	18fb      	adds	r3, r7, r3
 8008fba:	781b      	ldrb	r3, [r3, #0]
}
 8008fbc:	0018      	movs	r0, r3
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	b004      	add	sp, #16
 8008fc2:	bd80      	pop	{r7, pc}
 8008fc4:	fffec23c 	.word	0xfffec23c

08008fc8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b084      	sub	sp, #16
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	60f8      	str	r0, [r7, #12]
 8008fd0:	60b9      	str	r1, [r7, #8]
 8008fd2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	6819      	ldr	r1, [r3, #0]
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	435b      	muls	r3, r3
 8008fdc:	001a      	movs	r2, r3
 8008fde:	0013      	movs	r3, r2
 8008fe0:	005b      	lsls	r3, r3, #1
 8008fe2:	189b      	adds	r3, r3, r2
 8008fe4:	43db      	mvns	r3, r3
 8008fe6:	400b      	ands	r3, r1
 8008fe8:	001a      	movs	r2, r3
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	435b      	muls	r3, r3
 8008fee:	6879      	ldr	r1, [r7, #4]
 8008ff0:	434b      	muls	r3, r1
 8008ff2:	431a      	orrs	r2, r3
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	601a      	str	r2, [r3, #0]
}
 8008ff8:	46c0      	nop			@ (mov r8, r8)
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	b004      	add	sp, #16
 8008ffe:	bd80      	pop	{r7, pc}

08009000 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b084      	sub	sp, #16
 8009004:	af00      	add	r7, sp, #0
 8009006:	60f8      	str	r0, [r7, #12]
 8009008:	60b9      	str	r1, [r7, #8]
 800900a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	685b      	ldr	r3, [r3, #4]
 8009010:	68ba      	ldr	r2, [r7, #8]
 8009012:	43d2      	mvns	r2, r2
 8009014:	401a      	ands	r2, r3
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	6879      	ldr	r1, [r7, #4]
 800901a:	434b      	muls	r3, r1
 800901c:	431a      	orrs	r2, r3
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	605a      	str	r2, [r3, #4]
}
 8009022:	46c0      	nop			@ (mov r8, r8)
 8009024:	46bd      	mov	sp, r7
 8009026:	b004      	add	sp, #16
 8009028:	bd80      	pop	{r7, pc}

0800902a <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800902a:	b580      	push	{r7, lr}
 800902c:	b084      	sub	sp, #16
 800902e:	af00      	add	r7, sp, #0
 8009030:	60f8      	str	r0, [r7, #12]
 8009032:	60b9      	str	r1, [r7, #8]
 8009034:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	6899      	ldr	r1, [r3, #8]
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	435b      	muls	r3, r3
 800903e:	001a      	movs	r2, r3
 8009040:	0013      	movs	r3, r2
 8009042:	005b      	lsls	r3, r3, #1
 8009044:	189b      	adds	r3, r3, r2
 8009046:	43db      	mvns	r3, r3
 8009048:	400b      	ands	r3, r1
 800904a:	001a      	movs	r2, r3
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	435b      	muls	r3, r3
 8009050:	6879      	ldr	r1, [r7, #4]
 8009052:	434b      	muls	r3, r1
 8009054:	431a      	orrs	r2, r3
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	609a      	str	r2, [r3, #8]
}
 800905a:	46c0      	nop			@ (mov r8, r8)
 800905c:	46bd      	mov	sp, r7
 800905e:	b004      	add	sp, #16
 8009060:	bd80      	pop	{r7, pc}

08009062 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8009062:	b580      	push	{r7, lr}
 8009064:	b084      	sub	sp, #16
 8009066:	af00      	add	r7, sp, #0
 8009068:	60f8      	str	r0, [r7, #12]
 800906a:	60b9      	str	r1, [r7, #8]
 800906c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	68d9      	ldr	r1, [r3, #12]
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	435b      	muls	r3, r3
 8009076:	001a      	movs	r2, r3
 8009078:	0013      	movs	r3, r2
 800907a:	005b      	lsls	r3, r3, #1
 800907c:	189b      	adds	r3, r3, r2
 800907e:	43db      	mvns	r3, r3
 8009080:	400b      	ands	r3, r1
 8009082:	001a      	movs	r2, r3
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	435b      	muls	r3, r3
 8009088:	6879      	ldr	r1, [r7, #4]
 800908a:	434b      	muls	r3, r1
 800908c:	431a      	orrs	r2, r3
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	60da      	str	r2, [r3, #12]
}
 8009092:	46c0      	nop			@ (mov r8, r8)
 8009094:	46bd      	mov	sp, r7
 8009096:	b004      	add	sp, #16
 8009098:	bd80      	pop	{r7, pc}

0800909a <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800909a:	b580      	push	{r7, lr}
 800909c:	b084      	sub	sp, #16
 800909e:	af00      	add	r7, sp, #0
 80090a0:	60f8      	str	r0, [r7, #12]
 80090a2:	60b9      	str	r1, [r7, #8]
 80090a4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	6a19      	ldr	r1, [r3, #32]
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	435b      	muls	r3, r3
 80090ae:	68ba      	ldr	r2, [r7, #8]
 80090b0:	4353      	muls	r3, r2
 80090b2:	68ba      	ldr	r2, [r7, #8]
 80090b4:	435a      	muls	r2, r3
 80090b6:	0013      	movs	r3, r2
 80090b8:	011b      	lsls	r3, r3, #4
 80090ba:	1a9b      	subs	r3, r3, r2
 80090bc:	43db      	mvns	r3, r3
 80090be:	400b      	ands	r3, r1
 80090c0:	001a      	movs	r2, r3
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	435b      	muls	r3, r3
 80090c6:	68b9      	ldr	r1, [r7, #8]
 80090c8:	434b      	muls	r3, r1
 80090ca:	68b9      	ldr	r1, [r7, #8]
 80090cc:	434b      	muls	r3, r1
 80090ce:	6879      	ldr	r1, [r7, #4]
 80090d0:	434b      	muls	r3, r1
 80090d2:	431a      	orrs	r2, r3
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	621a      	str	r2, [r3, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 80090d8:	46c0      	nop			@ (mov r8, r8)
 80090da:	46bd      	mov	sp, r7
 80090dc:	b004      	add	sp, #16
 80090de:	bd80      	pop	{r7, pc}

080090e0 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b084      	sub	sp, #16
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	60f8      	str	r0, [r7, #12]
 80090e8:	60b9      	str	r1, [r7, #8]
 80090ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	0a1b      	lsrs	r3, r3, #8
 80090f4:	68ba      	ldr	r2, [r7, #8]
 80090f6:	0a12      	lsrs	r2, r2, #8
 80090f8:	4353      	muls	r3, r2
 80090fa:	68ba      	ldr	r2, [r7, #8]
 80090fc:	0a12      	lsrs	r2, r2, #8
 80090fe:	4353      	muls	r3, r2
 8009100:	68ba      	ldr	r2, [r7, #8]
 8009102:	0a12      	lsrs	r2, r2, #8
 8009104:	435a      	muls	r2, r3
 8009106:	0013      	movs	r3, r2
 8009108:	011b      	lsls	r3, r3, #4
 800910a:	1a9b      	subs	r3, r3, r2
 800910c:	43db      	mvns	r3, r3
 800910e:	400b      	ands	r3, r1
 8009110:	001a      	movs	r2, r3
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	0a1b      	lsrs	r3, r3, #8
 8009116:	68b9      	ldr	r1, [r7, #8]
 8009118:	0a09      	lsrs	r1, r1, #8
 800911a:	434b      	muls	r3, r1
 800911c:	68b9      	ldr	r1, [r7, #8]
 800911e:	0a09      	lsrs	r1, r1, #8
 8009120:	434b      	muls	r3, r1
 8009122:	68b9      	ldr	r1, [r7, #8]
 8009124:	0a09      	lsrs	r1, r1, #8
 8009126:	434b      	muls	r3, r1
 8009128:	6879      	ldr	r1, [r7, #4]
 800912a:	434b      	muls	r3, r1
 800912c:	431a      	orrs	r2, r3
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	625a      	str	r2, [r3, #36]	@ 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 8009132:	46c0      	nop			@ (mov r8, r8)
 8009134:	46bd      	mov	sp, r7
 8009136:	b004      	add	sp, #16
 8009138:	bd80      	pop	{r7, pc}

0800913a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800913a:	b580      	push	{r7, lr}
 800913c:	b084      	sub	sp, #16
 800913e:	af00      	add	r7, sp, #0
 8009140:	6078      	str	r0, [r7, #4]
 8009142:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 8009144:	2300      	movs	r3, #0
 8009146:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8009148:	e047      	b.n	80091da <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	2101      	movs	r1, #1
 8009150:	68fa      	ldr	r2, [r7, #12]
 8009152:	4091      	lsls	r1, r2
 8009154:	000a      	movs	r2, r1
 8009156:	4013      	ands	r3, r2
 8009158:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d039      	beq.n	80091d4 <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	685b      	ldr	r3, [r3, #4]
 8009164:	2b01      	cmp	r3, #1
 8009166:	d003      	beq.n	8009170 <LL_GPIO_Init+0x36>
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	685b      	ldr	r3, [r3, #4]
 800916c:	2b02      	cmp	r3, #2
 800916e:	d10d      	bne.n	800918c <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	689a      	ldr	r2, [r3, #8]
 8009174:	68b9      	ldr	r1, [r7, #8]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	0018      	movs	r0, r3
 800917a:	f7ff ff56 	bl	800902a <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	68da      	ldr	r2, [r3, #12]
 8009182:	68b9      	ldr	r1, [r7, #8]
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	0018      	movs	r0, r3
 8009188:	f7ff ff3a 	bl	8009000 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	691a      	ldr	r2, [r3, #16]
 8009190:	68b9      	ldr	r1, [r7, #8]
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	0018      	movs	r0, r3
 8009196:	f7ff ff64 	bl	8009062 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	685b      	ldr	r3, [r3, #4]
 800919e:	2b02      	cmp	r3, #2
 80091a0:	d111      	bne.n	80091c6 <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	2bff      	cmp	r3, #255	@ 0xff
 80091a6:	d807      	bhi.n	80091b8 <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	695a      	ldr	r2, [r3, #20]
 80091ac:	68b9      	ldr	r1, [r7, #8]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	0018      	movs	r0, r3
 80091b2:	f7ff ff72 	bl	800909a <LL_GPIO_SetAFPin_0_7>
 80091b6:	e006      	b.n	80091c6 <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	695a      	ldr	r2, [r3, #20]
 80091bc:	68b9      	ldr	r1, [r7, #8]
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	0018      	movs	r0, r3
 80091c2:	f7ff ff8d 	bl	80090e0 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	685a      	ldr	r2, [r3, #4]
 80091ca:	68b9      	ldr	r1, [r7, #8]
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	0018      	movs	r0, r3
 80091d0:	f7ff fefa 	bl	8008fc8 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	3301      	adds	r3, #1
 80091d8:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	681a      	ldr	r2, [r3, #0]
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	40da      	lsrs	r2, r3
 80091e2:	1e13      	subs	r3, r2, #0
 80091e4:	d1b1      	bne.n	800914a <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 80091e6:	2300      	movs	r3, #0
}
 80091e8:	0018      	movs	r0, r3
 80091ea:	46bd      	mov	sp, r7
 80091ec:	b004      	add	sp, #16
 80091ee:	bd80      	pop	{r7, pc}

080091f0 <memset>:
 80091f0:	0003      	movs	r3, r0
 80091f2:	1882      	adds	r2, r0, r2
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d100      	bne.n	80091fa <memset+0xa>
 80091f8:	4770      	bx	lr
 80091fa:	7019      	strb	r1, [r3, #0]
 80091fc:	3301      	adds	r3, #1
 80091fe:	e7f9      	b.n	80091f4 <memset+0x4>

08009200 <__libc_init_array>:
 8009200:	b570      	push	{r4, r5, r6, lr}
 8009202:	2600      	movs	r6, #0
 8009204:	4c0c      	ldr	r4, [pc, #48]	@ (8009238 <__libc_init_array+0x38>)
 8009206:	4d0d      	ldr	r5, [pc, #52]	@ (800923c <__libc_init_array+0x3c>)
 8009208:	1b64      	subs	r4, r4, r5
 800920a:	10a4      	asrs	r4, r4, #2
 800920c:	42a6      	cmp	r6, r4
 800920e:	d109      	bne.n	8009224 <__libc_init_array+0x24>
 8009210:	2600      	movs	r6, #0
 8009212:	f000 f823 	bl	800925c <_init>
 8009216:	4c0a      	ldr	r4, [pc, #40]	@ (8009240 <__libc_init_array+0x40>)
 8009218:	4d0a      	ldr	r5, [pc, #40]	@ (8009244 <__libc_init_array+0x44>)
 800921a:	1b64      	subs	r4, r4, r5
 800921c:	10a4      	asrs	r4, r4, #2
 800921e:	42a6      	cmp	r6, r4
 8009220:	d105      	bne.n	800922e <__libc_init_array+0x2e>
 8009222:	bd70      	pop	{r4, r5, r6, pc}
 8009224:	00b3      	lsls	r3, r6, #2
 8009226:	58eb      	ldr	r3, [r5, r3]
 8009228:	4798      	blx	r3
 800922a:	3601      	adds	r6, #1
 800922c:	e7ee      	b.n	800920c <__libc_init_array+0xc>
 800922e:	00b3      	lsls	r3, r6, #2
 8009230:	58eb      	ldr	r3, [r5, r3]
 8009232:	4798      	blx	r3
 8009234:	3601      	adds	r6, #1
 8009236:	e7f2      	b.n	800921e <__libc_init_array+0x1e>
 8009238:	08009684 	.word	0x08009684
 800923c:	08009684 	.word	0x08009684
 8009240:	08009688 	.word	0x08009688
 8009244:	08009684 	.word	0x08009684

08009248 <memcpy>:
 8009248:	2300      	movs	r3, #0
 800924a:	b510      	push	{r4, lr}
 800924c:	429a      	cmp	r2, r3
 800924e:	d100      	bne.n	8009252 <memcpy+0xa>
 8009250:	bd10      	pop	{r4, pc}
 8009252:	5ccc      	ldrb	r4, [r1, r3]
 8009254:	54c4      	strb	r4, [r0, r3]
 8009256:	3301      	adds	r3, #1
 8009258:	e7f8      	b.n	800924c <memcpy+0x4>
	...

0800925c <_init>:
 800925c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800925e:	46c0      	nop			@ (mov r8, r8)
 8009260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009262:	bc08      	pop	{r3}
 8009264:	469e      	mov	lr, r3
 8009266:	4770      	bx	lr

08009268 <_fini>:
 8009268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800926a:	46c0      	nop			@ (mov r8, r8)
 800926c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800926e:	bc08      	pop	{r3}
 8009270:	469e      	mov	lr, r3
 8009272:	4770      	bx	lr
