
BelowGroundBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c0cc  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000420  0800c18c  0800c18c  0000d18c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c5ac  0800c5ac  0000e0c4  2**0
                  CONTENTS
  4 .ARM          00000000  0800c5ac  0800c5ac  0000e0c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c5ac  0800c5ac  0000e0c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c5ac  0800c5ac  0000d5ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c5b0  0800c5b0  0000d5b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c4  20000000  0800c5b4  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007f4  200000c4  0800c678  0000e0c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008b8  0800c678  0000e8b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000e0c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c55c  00000000  00000000  0000e0ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039f4  00000000  00000000  0002a648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018e0  00000000  00000000  0002e040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001396  00000000  00000000  0002f920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019ff6  00000000  00000000  00030cb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d7f3  00000000  00000000  0004acac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f799  00000000  00000000  0006849f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00107c38  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bf4  00000000  00000000  00107c7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  0010d870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000c4 	.word	0x200000c4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800c174 	.word	0x0800c174

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000c8 	.word	0x200000c8
 8000104:	0800c174 	.word	0x0800c174

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <HAL_I2C_MemTxCpltCallback>:
void bno055_delay(uint32_t time);
int8_t bno055_write(uint8_t *data, uint8_t len);
int8_t bno055_read(uint8_t reg, uint8_t *data, uint8_t len);

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
	i2c_tx_int = 1;
 80003fc:	4b03      	ldr	r3, [pc, #12]	@ (800040c <HAL_I2C_MemTxCpltCallback+0x18>)
 80003fe:	2201      	movs	r2, #1
 8000400:	701a      	strb	r2, [r3, #0]
}
 8000402:	46c0      	nop			@ (mov r8, r8)
 8000404:	46bd      	mov	sp, r7
 8000406:	b002      	add	sp, #8
 8000408:	bd80      	pop	{r7, pc}
 800040a:	46c0      	nop			@ (mov r8, r8)
 800040c:	2000000e 	.word	0x2000000e

08000410 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
	i2c_rx_int = 1;
 8000418:	4b03      	ldr	r3, [pc, #12]	@ (8000428 <HAL_I2C_MemRxCpltCallback+0x18>)
 800041a:	2201      	movs	r2, #1
 800041c:	701a      	strb	r2, [r3, #0]
}
 800041e:	46c0      	nop			@ (mov r8, r8)
 8000420:	46bd      	mov	sp, r7
 8000422:	b002      	add	sp, #8
 8000424:	bd80      	pop	{r7, pc}
 8000426:	46c0      	nop			@ (mov r8, r8)
 8000428:	2000000f 	.word	0x2000000f

0800042c <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
	i2c_tx_int = 1;
 8000434:	4b03      	ldr	r3, [pc, #12]	@ (8000444 <HAL_I2C_MasterTxCpltCallback+0x18>)
 8000436:	2201      	movs	r2, #1
 8000438:	701a      	strb	r2, [r3, #0]
}
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	46bd      	mov	sp, r7
 800043e:	b002      	add	sp, #8
 8000440:	bd80      	pop	{r7, pc}
 8000442:	46c0      	nop			@ (mov r8, r8)
 8000444:	2000000e 	.word	0x2000000e

08000448 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
	i2c_rx_int = 1;
 8000450:	4b03      	ldr	r3, [pc, #12]	@ (8000460 <HAL_I2C_MasterRxCpltCallback+0x18>)
 8000452:	2201      	movs	r2, #1
 8000454:	701a      	strb	r2, [r3, #0]
}
 8000456:	46c0      	nop			@ (mov r8, r8)
 8000458:	46bd      	mov	sp, r7
 800045a:	b002      	add	sp, #8
 800045c:	bd80      	pop	{r7, pc}
 800045e:	46c0      	nop			@ (mov r8, r8)
 8000460:	2000000f 	.word	0x2000000f

08000464 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
	// Do something
	i2c_err_int = 1;
 800046c:	4b07      	ldr	r3, [pc, #28]	@ (800048c <HAL_I2C_ErrorCallback+0x28>)
 800046e:	2201      	movs	r2, #1
 8000470:	701a      	strb	r2, [r3, #0]
	__HAL_I2C_DISABLE_IT(&hi2c1, I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI |
 8000472:	4b07      	ldr	r3, [pc, #28]	@ (8000490 <HAL_I2C_ErrorCallback+0x2c>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	681a      	ldr	r2, [r3, #0]
 8000478:	4b05      	ldr	r3, [pc, #20]	@ (8000490 <HAL_I2C_ErrorCallback+0x2c>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	21fe      	movs	r1, #254	@ 0xfe
 800047e:	438a      	bics	r2, r1
 8000480:	601a      	str	r2, [r3, #0]
										 I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI);
}
 8000482:	46c0      	nop			@ (mov r8, r8)
 8000484:	46bd      	mov	sp, r7
 8000486:	b002      	add	sp, #8
 8000488:	bd80      	pop	{r7, pc}
 800048a:	46c0      	nop			@ (mov r8, r8)
 800048c:	200002ec 	.word	0x200002ec
 8000490:	20000304 	.word	0x20000304

08000494 <bno055_delay>:


void bno055_delay(uint32_t time)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	0018      	movs	r0, r3
 80004a0:	f004 fb44 	bl	8004b2c <HAL_Delay>
#endif
}
 80004a4:	46c0      	nop			@ (mov r8, r8)
 80004a6:	46bd      	mov	sp, r7
 80004a8:	b002      	add	sp, #8
 80004aa:	bd80      	pop	{r7, pc}

080004ac <bno055_init>:

int8_t bno055_init()
{
 80004ac:	b590      	push	{r4, r7, lr}
 80004ae:	b083      	sub	sp, #12
 80004b0:	af00      	add	r7, sp, #0
	int8_t status = HAL_OK;
 80004b2:	1dfb      	adds	r3, r7, #7
 80004b4:	2200      	movs	r2, #0
 80004b6:	701a      	strb	r2, [r3, #0]

	// Set up the local IMU
	bno055_address = BNO055_I2C_ADDR_LO << 1;
 80004b8:	4b1d      	ldr	r3, [pc, #116]	@ (8000530 <bno055_init+0x84>)
 80004ba:	2250      	movs	r2, #80	@ 0x50
 80004bc:	701a      	strb	r2, [r3, #0]
	status = bno055_setup();
 80004be:	1dfc      	adds	r4, r7, #7
 80004c0:	f000 f98a 	bl	80007d8 <bno055_setup>
 80004c4:	0003      	movs	r3, r0
 80004c6:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80004c8:	1dfb      	adds	r3, r7, #7
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	b25b      	sxtb	r3, r3
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d003      	beq.n	80004da <bno055_init+0x2e>
 80004d2:	1dfb      	adds	r3, r7, #7
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	b25b      	sxtb	r3, r3
 80004d8:	e026      	b.n	8000528 <bno055_init+0x7c>

	status = bno055_setOperationModeNDOF();
 80004da:	1dfc      	adds	r4, r7, #7
 80004dc:	f000 f895 	bl	800060a <bno055_setOperationModeNDOF>
 80004e0:	0003      	movs	r3, r0
 80004e2:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80004e4:	1dfb      	adds	r3, r7, #7
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	b25b      	sxtb	r3, r3
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d003      	beq.n	80004f6 <bno055_init+0x4a>
 80004ee:	1dfb      	adds	r3, r7, #7
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	b25b      	sxtb	r3, r3
 80004f4:	e018      	b.n	8000528 <bno055_init+0x7c>

	// Setup the remote IMU
	bno055_address = BNO055_I2C_ADDR_HI << 1;
 80004f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000530 <bno055_init+0x84>)
 80004f8:	2252      	movs	r2, #82	@ 0x52
 80004fa:	701a      	strb	r2, [r3, #0]
	status = bno055_setup();
 80004fc:	1dfc      	adds	r4, r7, #7
 80004fe:	f000 f96b 	bl	80007d8 <bno055_setup>
 8000502:	0003      	movs	r3, r0
 8000504:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8000506:	1dfb      	adds	r3, r7, #7
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	b25b      	sxtb	r3, r3
 800050c:	2b00      	cmp	r3, #0
 800050e:	d003      	beq.n	8000518 <bno055_init+0x6c>
 8000510:	1dfb      	adds	r3, r7, #7
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	b25b      	sxtb	r3, r3
 8000516:	e007      	b.n	8000528 <bno055_init+0x7c>

	status = bno055_setOperationModeNDOF();
 8000518:	1dfc      	adds	r4, r7, #7
 800051a:	f000 f876 	bl	800060a <bno055_setOperationModeNDOF>
 800051e:	0003      	movs	r3, r0
 8000520:	7023      	strb	r3, [r4, #0]
	return status;
 8000522:	1dfb      	adds	r3, r7, #7
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	b25b      	sxtb	r3, r3
}
 8000528:	0018      	movs	r0, r3
 800052a:	46bd      	mov	sp, r7
 800052c:	b003      	add	sp, #12
 800052e:	bd90      	pop	{r4, r7, pc}
 8000530:	200002e1 	.word	0x200002e1

08000534 <bno055_setPage>:

int8_t bno055_setPage(uint8_t page)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	0002      	movs	r2, r0
 800053c:	1dfb      	adds	r3, r7, #7
 800053e:	701a      	strb	r2, [r3, #0]
	i2c_tx_buffer[0] = BNO055_PAGE_ID;
 8000540:	4b08      	ldr	r3, [pc, #32]	@ (8000564 <bno055_setPage+0x30>)
 8000542:	2207      	movs	r2, #7
 8000544:	701a      	strb	r2, [r3, #0]
	i2c_tx_buffer[1] = page;
 8000546:	4b07      	ldr	r3, [pc, #28]	@ (8000564 <bno055_setPage+0x30>)
 8000548:	1dfa      	adds	r2, r7, #7
 800054a:	7812      	ldrb	r2, [r2, #0]
 800054c:	705a      	strb	r2, [r3, #1]
	return bno055_write(i2c_tx_buffer, 2);
 800054e:	4b05      	ldr	r3, [pc, #20]	@ (8000564 <bno055_setPage+0x30>)
 8000550:	2102      	movs	r1, #2
 8000552:	0018      	movs	r0, r3
 8000554:	f000 fab2 	bl	8000abc <bno055_write>
 8000558:	0003      	movs	r3, r0
}
 800055a:	0018      	movs	r0, r3
 800055c:	46bd      	mov	sp, r7
 800055e:	b002      	add	sp, #8
 8000560:	bd80      	pop	{r7, pc}
 8000562:	46c0      	nop			@ (mov r8, r8)
 8000564:	200000e0 	.word	0x200000e0

08000568 <bno055_setOperationMode>:
{
	return bno055_read(BNO055_OPR_MODE, mode, 1);
}

int8_t bno055_setOperationMode(bno055_opmode_t mode)
{
 8000568:	b5b0      	push	{r4, r5, r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af00      	add	r7, sp, #0
 800056e:	0002      	movs	r2, r0
 8000570:	1dfb      	adds	r3, r7, #7
 8000572:	701a      	strb	r2, [r3, #0]
	int8_t status = HAL_OK;
 8000574:	210f      	movs	r1, #15
 8000576:	187b      	adds	r3, r7, r1
 8000578:	2200      	movs	r2, #0
 800057a:	701a      	strb	r2, [r3, #0]
	i2c_tx_buffer[0] = BNO055_OPR_MODE;
 800057c:	4b1d      	ldr	r3, [pc, #116]	@ (80005f4 <bno055_setOperationMode+0x8c>)
 800057e:	223d      	movs	r2, #61	@ 0x3d
 8000580:	701a      	strb	r2, [r3, #0]
	i2c_tx_buffer[1] = mode;
 8000582:	4b1c      	ldr	r3, [pc, #112]	@ (80005f4 <bno055_setOperationMode+0x8c>)
 8000584:	1dfa      	adds	r2, r7, #7
 8000586:	7812      	ldrb	r2, [r2, #0]
 8000588:	705a      	strb	r2, [r3, #1]
	status = bno055_write(i2c_tx_buffer, 2);
 800058a:	000d      	movs	r5, r1
 800058c:	187c      	adds	r4, r7, r1
 800058e:	4b19      	ldr	r3, [pc, #100]	@ (80005f4 <bno055_setOperationMode+0x8c>)
 8000590:	2102      	movs	r1, #2
 8000592:	0018      	movs	r0, r3
 8000594:	f000 fa92 	bl	8000abc <bno055_write>
 8000598:	0003      	movs	r3, r0
 800059a:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800059c:	197b      	adds	r3, r7, r5
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	b25b      	sxtb	r3, r3
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d003      	beq.n	80005ae <bno055_setOperationMode+0x46>
 80005a6:	197b      	adds	r3, r7, r5
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	b25b      	sxtb	r3, r3
 80005ac:	e01e      	b.n	80005ec <bno055_setOperationMode+0x84>

	status = bno055_poll_transaction();
 80005ae:	250f      	movs	r5, #15
 80005b0:	197c      	adds	r4, r7, r5
 80005b2:	f000 f8bf 	bl	8000734 <bno055_poll_transaction>
 80005b6:	0003      	movs	r3, r0
 80005b8:	7023      	strb	r3, [r4, #0]
//	bno055_writeData(BNO055_OPR_MODE, mode);
	if(status != HAL_OK){return status;}
 80005ba:	002a      	movs	r2, r5
 80005bc:	18bb      	adds	r3, r7, r2
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	b25b      	sxtb	r3, r3
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d003      	beq.n	80005ce <bno055_setOperationMode+0x66>
 80005c6:	18bb      	adds	r3, r7, r2
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	b25b      	sxtb	r3, r3
 80005cc:	e00e      	b.n	80005ec <bno055_setOperationMode+0x84>

	if (mode == BNO055_OPERATION_MODE_CONFIG)
 80005ce:	1dfb      	adds	r3, r7, #7
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d103      	bne.n	80005de <bno055_setOperationMode+0x76>
	{
		bno055_delay(19);
 80005d6:	2013      	movs	r0, #19
 80005d8:	f7ff ff5c 	bl	8000494 <bno055_delay>
 80005dc:	e002      	b.n	80005e4 <bno055_setOperationMode+0x7c>
	}
	else
	{
		bno055_delay(7);
 80005de:	2007      	movs	r0, #7
 80005e0:	f7ff ff58 	bl	8000494 <bno055_delay>
	}
	return status;
 80005e4:	230f      	movs	r3, #15
 80005e6:	18fb      	adds	r3, r7, r3
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	b25b      	sxtb	r3, r3
}
 80005ec:	0018      	movs	r0, r3
 80005ee:	46bd      	mov	sp, r7
 80005f0:	b004      	add	sp, #16
 80005f2:	bdb0      	pop	{r4, r5, r7, pc}
 80005f4:	200000e0 	.word	0x200000e0

080005f8 <bno055_setOperationModeConfig>:

int8_t bno055_setOperationModeConfig()
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
	return bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 80005fc:	2000      	movs	r0, #0
 80005fe:	f7ff ffb3 	bl	8000568 <bno055_setOperationMode>
 8000602:	0003      	movs	r3, r0
}
 8000604:	0018      	movs	r0, r3
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}

0800060a <bno055_setOperationModeNDOF>:

int8_t bno055_setOperationModeNDOF()
{
 800060a:	b580      	push	{r7, lr}
 800060c:	af00      	add	r7, sp, #0
	return bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 800060e:	200c      	movs	r0, #12
 8000610:	f7ff ffaa 	bl	8000568 <bno055_setOperationMode>
 8000614:	0003      	movs	r3, r0
}
 8000616:	0018      	movs	r0, r3
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}

0800061c <bno055_setExternalCrystalUse>:

int8_t bno055_setExternalCrystalUse(uint8_t state)
{
 800061c:	b5b0      	push	{r4, r5, r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	0002      	movs	r2, r0
 8000624:	1dfb      	adds	r3, r7, #7
 8000626:	701a      	strb	r2, [r3, #0]
	int8_t status = HAL_OK;
 8000628:	250f      	movs	r5, #15
 800062a:	197b      	adds	r3, r7, r5
 800062c:	2200      	movs	r2, #0
 800062e:	701a      	strb	r2, [r3, #0]
	status = bno055_setPage(0);
 8000630:	197c      	adds	r4, r7, r5
 8000632:	2000      	movs	r0, #0
 8000634:	f7ff ff7e 	bl	8000534 <bno055_setPage>
 8000638:	0003      	movs	r3, r0
 800063a:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800063c:	002a      	movs	r2, r5
 800063e:	18bb      	adds	r3, r7, r2
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	b25b      	sxtb	r3, r3
 8000644:	2b00      	cmp	r3, #0
 8000646:	d003      	beq.n	8000650 <bno055_setExternalCrystalUse+0x34>
 8000648:	18bb      	adds	r3, r7, r2
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	b25b      	sxtb	r3, r3
 800064e:	e069      	b.n	8000724 <bno055_setExternalCrystalUse+0x108>

	status = bno055_poll_transaction();
 8000650:	250f      	movs	r5, #15
 8000652:	197c      	adds	r4, r7, r5
 8000654:	f000 f86e 	bl	8000734 <bno055_poll_transaction>
 8000658:	0003      	movs	r3, r0
 800065a:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800065c:	002a      	movs	r2, r5
 800065e:	18bb      	adds	r3, r7, r2
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	b25b      	sxtb	r3, r3
 8000664:	2b00      	cmp	r3, #0
 8000666:	d003      	beq.n	8000670 <bno055_setExternalCrystalUse+0x54>
 8000668:	18bb      	adds	r3, r7, r2
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	b25b      	sxtb	r3, r3
 800066e:	e059      	b.n	8000724 <bno055_setExternalCrystalUse+0x108>

	status = bno055_read(BNO055_SYS_TRIGGER, i2c_rx_buffer, 1);
 8000670:	250f      	movs	r5, #15
 8000672:	197c      	adds	r4, r7, r5
 8000674:	4b2d      	ldr	r3, [pc, #180]	@ (800072c <bno055_setExternalCrystalUse+0x110>)
 8000676:	2201      	movs	r2, #1
 8000678:	0019      	movs	r1, r3
 800067a:	203f      	movs	r0, #63	@ 0x3f
 800067c:	f000 fa58 	bl	8000b30 <bno055_read>
 8000680:	0003      	movs	r3, r0
 8000682:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8000684:	197b      	adds	r3, r7, r5
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	b25b      	sxtb	r3, r3
 800068a:	2b00      	cmp	r3, #0
 800068c:	d003      	beq.n	8000696 <bno055_setExternalCrystalUse+0x7a>
 800068e:	197b      	adds	r3, r7, r5
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	b25b      	sxtb	r3, r3
 8000694:	e046      	b.n	8000724 <bno055_setExternalCrystalUse+0x108>

	status = bno055_poll_transaction();
 8000696:	250f      	movs	r5, #15
 8000698:	197c      	adds	r4, r7, r5
 800069a:	f000 f84b 	bl	8000734 <bno055_poll_transaction>
 800069e:	0003      	movs	r3, r0
 80006a0:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80006a2:	002a      	movs	r2, r5
 80006a4:	18bb      	adds	r3, r7, r2
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	b25b      	sxtb	r3, r3
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d003      	beq.n	80006b6 <bno055_setExternalCrystalUse+0x9a>
 80006ae:	18bb      	adds	r3, r7, r2
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	b25b      	sxtb	r3, r3
 80006b4:	e036      	b.n	8000724 <bno055_setExternalCrystalUse+0x108>

	i2c_rx_buffer[0] |= (state == 1) ? 0x80 : 0x0;
 80006b6:	4b1d      	ldr	r3, [pc, #116]	@ (800072c <bno055_setExternalCrystalUse+0x110>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	b25a      	sxtb	r2, r3
 80006bc:	1dfb      	adds	r3, r7, #7
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d102      	bne.n	80006ca <bno055_setExternalCrystalUse+0xae>
 80006c4:	2380      	movs	r3, #128	@ 0x80
 80006c6:	425b      	negs	r3, r3
 80006c8:	e000      	b.n	80006cc <bno055_setExternalCrystalUse+0xb0>
 80006ca:	2300      	movs	r3, #0
 80006cc:	4313      	orrs	r3, r2
 80006ce:	b25b      	sxtb	r3, r3
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	4b16      	ldr	r3, [pc, #88]	@ (800072c <bno055_setExternalCrystalUse+0x110>)
 80006d4:	701a      	strb	r2, [r3, #0]
	i2c_tx_buffer[0] = BNO055_SYS_TRIGGER;
 80006d6:	4b16      	ldr	r3, [pc, #88]	@ (8000730 <bno055_setExternalCrystalUse+0x114>)
 80006d8:	223f      	movs	r2, #63	@ 0x3f
 80006da:	701a      	strb	r2, [r3, #0]
	i2c_tx_buffer[1] = i2c_rx_buffer[0];
 80006dc:	4b13      	ldr	r3, [pc, #76]	@ (800072c <bno055_setExternalCrystalUse+0x110>)
 80006de:	781a      	ldrb	r2, [r3, #0]
 80006e0:	4b13      	ldr	r3, [pc, #76]	@ (8000730 <bno055_setExternalCrystalUse+0x114>)
 80006e2:	705a      	strb	r2, [r3, #1]
	status = bno055_write(i2c_tx_buffer, 2);
 80006e4:	250f      	movs	r5, #15
 80006e6:	197c      	adds	r4, r7, r5
 80006e8:	4b11      	ldr	r3, [pc, #68]	@ (8000730 <bno055_setExternalCrystalUse+0x114>)
 80006ea:	2102      	movs	r1, #2
 80006ec:	0018      	movs	r0, r3
 80006ee:	f000 f9e5 	bl	8000abc <bno055_write>
 80006f2:	0003      	movs	r3, r0
 80006f4:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80006f6:	197b      	adds	r3, r7, r5
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	b25b      	sxtb	r3, r3
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d003      	beq.n	8000708 <bno055_setExternalCrystalUse+0xec>
 8000700:	197b      	adds	r3, r7, r5
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	b25b      	sxtb	r3, r3
 8000706:	e00d      	b.n	8000724 <bno055_setExternalCrystalUse+0x108>

	status = bno055_poll_transaction();
 8000708:	250f      	movs	r5, #15
 800070a:	197c      	adds	r4, r7, r5
 800070c:	f000 f812 	bl	8000734 <bno055_poll_transaction>
 8000710:	0003      	movs	r3, r0
 8000712:	7023      	strb	r3, [r4, #0]
	bno055_delay(700);
 8000714:	23af      	movs	r3, #175	@ 0xaf
 8000716:	009b      	lsls	r3, r3, #2
 8000718:	0018      	movs	r0, r3
 800071a:	f7ff febb 	bl	8000494 <bno055_delay>
	return status;
 800071e:	197b      	adds	r3, r7, r5
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	b25b      	sxtb	r3, r3
}
 8000724:	0018      	movs	r0, r3
 8000726:	46bd      	mov	sp, r7
 8000728:	b004      	add	sp, #16
 800072a:	bdb0      	pop	{r4, r5, r7, pc}
 800072c:	200001e0 	.word	0x200001e0
 8000730:	200000e0 	.word	0x200000e0

08000734 <bno055_poll_transaction>:

int8_t bno055_enableExternalCrystal() { return bno055_setExternalCrystalUse(1); }
int8_t bno055_disableExternalCrystal() { return bno055_setExternalCrystalUse(0); }

int8_t bno055_poll_transaction()
{
 8000734:	b590      	push	{r4, r7, lr}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
	int8_t status = HAL_BUSY;
 800073a:	1dfb      	adds	r3, r7, #7
 800073c:	2202      	movs	r2, #2
 800073e:	701a      	strb	r2, [r3, #0]

	while(status == HAL_BUSY)
 8000740:	e004      	b.n	800074c <bno055_poll_transaction+0x18>
	{
		status = monitor_i2c();
 8000742:	1dfc      	adds	r4, r7, #7
 8000744:	f000 f958 	bl	80009f8 <monitor_i2c>
 8000748:	0003      	movs	r3, r0
 800074a:	7023      	strb	r3, [r4, #0]
	while(status == HAL_BUSY)
 800074c:	1dfb      	adds	r3, r7, #7
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	b25b      	sxtb	r3, r3
 8000752:	2b02      	cmp	r3, #2
 8000754:	d0f5      	beq.n	8000742 <bno055_poll_transaction+0xe>
	}

	return status;
 8000756:	1dfb      	adds	r3, r7, #7
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	b25b      	sxtb	r3, r3
}
 800075c:	0018      	movs	r0, r3
 800075e:	46bd      	mov	sp, r7
 8000760:	b003      	add	sp, #12
 8000762:	bd90      	pop	{r4, r7, pc}

08000764 <bno055_reset>:

int8_t bno055_reset()
{
 8000764:	b590      	push	{r4, r7, lr}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
	int8_t status = HAL_OK;
 800076a:	1dfb      	adds	r3, r7, #7
 800076c:	2200      	movs	r2, #0
 800076e:	701a      	strb	r2, [r3, #0]
	i2c_tx_buffer[0] = BNO055_SYS_TRIGGER;
 8000770:	4b18      	ldr	r3, [pc, #96]	@ (80007d4 <bno055_reset+0x70>)
 8000772:	223f      	movs	r2, #63	@ 0x3f
 8000774:	701a      	strb	r2, [r3, #0]
	i2c_tx_buffer[1] = 0x20;
 8000776:	4b17      	ldr	r3, [pc, #92]	@ (80007d4 <bno055_reset+0x70>)
 8000778:	2220      	movs	r2, #32
 800077a:	705a      	strb	r2, [r3, #1]
	status = bno055_write(i2c_tx_buffer, 2);
 800077c:	1dfc      	adds	r4, r7, #7
 800077e:	4b15      	ldr	r3, [pc, #84]	@ (80007d4 <bno055_reset+0x70>)
 8000780:	2102      	movs	r1, #2
 8000782:	0018      	movs	r0, r3
 8000784:	f000 f99a 	bl	8000abc <bno055_write>
 8000788:	0003      	movs	r3, r0
 800078a:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800078c:	1dfb      	adds	r3, r7, #7
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	b25b      	sxtb	r3, r3
 8000792:	2b00      	cmp	r3, #0
 8000794:	d003      	beq.n	800079e <bno055_reset+0x3a>
 8000796:	1dfb      	adds	r3, r7, #7
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	b25b      	sxtb	r3, r3
 800079c:	e015      	b.n	80007ca <bno055_reset+0x66>

	status = bno055_poll_transaction();
 800079e:	1dfc      	adds	r4, r7, #7
 80007a0:	f7ff ffc8 	bl	8000734 <bno055_poll_transaction>
 80007a4:	0003      	movs	r3, r0
 80007a6:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80007a8:	1dfb      	adds	r3, r7, #7
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	b25b      	sxtb	r3, r3
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d003      	beq.n	80007ba <bno055_reset+0x56>
 80007b2:	1dfb      	adds	r3, r7, #7
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	b25b      	sxtb	r3, r3
 80007b8:	e007      	b.n	80007ca <bno055_reset+0x66>

	bno055_delay(700);
 80007ba:	23af      	movs	r3, #175	@ 0xaf
 80007bc:	009b      	lsls	r3, r3, #2
 80007be:	0018      	movs	r0, r3
 80007c0:	f7ff fe68 	bl	8000494 <bno055_delay>
	return status;
 80007c4:	1dfb      	adds	r3, r7, #7
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	b25b      	sxtb	r3, r3
}
 80007ca:	0018      	movs	r0, r3
 80007cc:	46bd      	mov	sp, r7
 80007ce:	b003      	add	sp, #12
 80007d0:	bd90      	pop	{r4, r7, pc}
 80007d2:	46c0      	nop			@ (mov r8, r8)
 80007d4:	200000e0 	.word	0x200000e0

080007d8 <bno055_setup>:

	return bno055_read(BNO055_TEMP, (uint8_t*) temp, 1);
}

int8_t bno055_setup()
{
 80007d8:	b590      	push	{r4, r7, lr}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
	int8_t status = HAL_OK;
 80007de:	1dfb      	adds	r3, r7, #7
 80007e0:	2200      	movs	r2, #0
 80007e2:	701a      	strb	r2, [r3, #0]
	read_index = 0;
 80007e4:	4b38      	ldr	r3, [pc, #224]	@ (80008c8 <bno055_setup+0xf0>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	701a      	strb	r2, [r3, #0]
	status = bno055_reset();
 80007ea:	1dfc      	adds	r4, r7, #7
 80007ec:	f7ff ffba 	bl	8000764 <bno055_reset>
 80007f0:	0003      	movs	r3, r0
 80007f2:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80007f4:	1dfb      	adds	r3, r7, #7
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	b25b      	sxtb	r3, r3
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d003      	beq.n	8000806 <bno055_setup+0x2e>
 80007fe:	1dfb      	adds	r3, r7, #7
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	b25b      	sxtb	r3, r3
 8000804:	e05c      	b.n	80008c0 <bno055_setup+0xe8>

	status = bno055_read(BNO055_CHIP_ID, i2c_rx_buffer, 1);
 8000806:	1dfc      	adds	r4, r7, #7
 8000808:	4b30      	ldr	r3, [pc, #192]	@ (80008cc <bno055_setup+0xf4>)
 800080a:	2201      	movs	r2, #1
 800080c:	0019      	movs	r1, r3
 800080e:	2000      	movs	r0, #0
 8000810:	f000 f98e 	bl	8000b30 <bno055_read>
 8000814:	0003      	movs	r3, r0
 8000816:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8000818:	1dfb      	adds	r3, r7, #7
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	b25b      	sxtb	r3, r3
 800081e:	2b00      	cmp	r3, #0
 8000820:	d003      	beq.n	800082a <bno055_setup+0x52>
 8000822:	1dfb      	adds	r3, r7, #7
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	b25b      	sxtb	r3, r3
 8000828:	e04a      	b.n	80008c0 <bno055_setup+0xe8>

	status = bno055_poll_transaction();
 800082a:	1dfc      	adds	r4, r7, #7
 800082c:	f7ff ff82 	bl	8000734 <bno055_poll_transaction>
 8000830:	0003      	movs	r3, r0
 8000832:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8000834:	1dfb      	adds	r3, r7, #7
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	b25b      	sxtb	r3, r3
 800083a:	2b00      	cmp	r3, #0
 800083c:	d003      	beq.n	8000846 <bno055_setup+0x6e>
 800083e:	1dfb      	adds	r3, r7, #7
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	b25b      	sxtb	r3, r3
 8000844:	e03c      	b.n	80008c0 <bno055_setup+0xe8>

	if(i2c_rx_buffer[0] != BNO055_ID)
 8000846:	4b21      	ldr	r3, [pc, #132]	@ (80008cc <bno055_setup+0xf4>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	2ba0      	cmp	r3, #160	@ 0xa0
 800084c:	d001      	beq.n	8000852 <bno055_setup+0x7a>
	{
		return HAL_ERROR;
 800084e:	2301      	movs	r3, #1
 8000850:	e036      	b.n	80008c0 <bno055_setup+0xe8>
	}
	status = bno055_setPage(0);
 8000852:	1dfc      	adds	r4, r7, #7
 8000854:	2000      	movs	r0, #0
 8000856:	f7ff fe6d 	bl	8000534 <bno055_setPage>
 800085a:	0003      	movs	r3, r0
 800085c:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800085e:	1dfb      	adds	r3, r7, #7
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	b25b      	sxtb	r3, r3
 8000864:	2b00      	cmp	r3, #0
 8000866:	d003      	beq.n	8000870 <bno055_setup+0x98>
 8000868:	1dfb      	adds	r3, r7, #7
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	b25b      	sxtb	r3, r3
 800086e:	e027      	b.n	80008c0 <bno055_setup+0xe8>

	status = bno055_poll_transaction();
 8000870:	1dfc      	adds	r4, r7, #7
 8000872:	f7ff ff5f 	bl	8000734 <bno055_poll_transaction>
 8000876:	0003      	movs	r3, r0
 8000878:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800087a:	1dfb      	adds	r3, r7, #7
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	b25b      	sxtb	r3, r3
 8000880:	2b00      	cmp	r3, #0
 8000882:	d003      	beq.n	800088c <bno055_setup+0xb4>
 8000884:	1dfb      	adds	r3, r7, #7
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	b25b      	sxtb	r3, r3
 800088a:	e019      	b.n	80008c0 <bno055_setup+0xe8>

	status = bno055_setExternalCrystalUse(0);
 800088c:	1dfc      	adds	r4, r7, #7
 800088e:	2000      	movs	r0, #0
 8000890:	f7ff fec4 	bl	800061c <bno055_setExternalCrystalUse>
 8000894:	0003      	movs	r3, r0
 8000896:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8000898:	1dfb      	adds	r3, r7, #7
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	b25b      	sxtb	r3, r3
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d003      	beq.n	80008aa <bno055_setup+0xd2>
 80008a2:	1dfb      	adds	r3, r7, #7
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	b25b      	sxtb	r3, r3
 80008a8:	e00a      	b.n	80008c0 <bno055_setup+0xe8>

	// Select BNO055 config mode
	status = bno055_setOperationModeConfig();
 80008aa:	1dfc      	adds	r4, r7, #7
 80008ac:	f7ff fea4 	bl	80005f8 <bno055_setOperationModeConfig>
 80008b0:	0003      	movs	r3, r0
 80008b2:	7023      	strb	r3, [r4, #0]
	bno055_delay(10);
 80008b4:	200a      	movs	r0, #10
 80008b6:	f7ff fded 	bl	8000494 <bno055_delay>
	return status;
 80008ba:	1dfb      	adds	r3, r7, #7
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	b25b      	sxtb	r3, r3
}
 80008c0:	0018      	movs	r0, r3
 80008c2:	46bd      	mov	sp, r7
 80008c4:	b003      	add	sp, #12
 80008c6:	bd90      	pop	{r4, r7, pc}
 80008c8:	200002e0 	.word	0x200002e0
 80008cc:	200001e0 	.word	0x200001e0

080008d0 <bno055_rx>:
		bno055_read(mem_read_map[i].reg, &buffer[6 * i], mem_read_map[i].reg_len);
	}
}

uint8_t bno055_rx()
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
	if(i2c_rx_int)
 80008d4:	4b07      	ldr	r3, [pc, #28]	@ (80008f4 <bno055_rx+0x24>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d004      	beq.n	80008e8 <bno055_rx+0x18>
	{
		i2c_rx_int = 0;
 80008de:	4b05      	ldr	r3, [pc, #20]	@ (80008f4 <bno055_rx+0x24>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	701a      	strb	r2, [r3, #0]
		return 1;
 80008e4:	2301      	movs	r3, #1
 80008e6:	e002      	b.n	80008ee <bno055_rx+0x1e>
	}
	return i2c_rx_int;
 80008e8:	4b02      	ldr	r3, [pc, #8]	@ (80008f4 <bno055_rx+0x24>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	b2db      	uxtb	r3, r3
}
 80008ee:	0018      	movs	r0, r3
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	2000000f 	.word	0x2000000f

080008f8 <bno055_queue_transaction>:

int8_t bno055_queue_transaction()
{
 80008f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008fa:	b085      	sub	sp, #20
 80008fc:	af02      	add	r7, sp, #8
	uint8_t status = HAL_OK;
 80008fe:	1d7b      	adds	r3, r7, #5
 8000900:	2200      	movs	r2, #0
 8000902:	701a      	strb	r2, [r3, #0]
	uint16_t start_register = 0;
 8000904:	1dbb      	adds	r3, r7, #6
 8000906:	2200      	movs	r2, #0
 8000908:	801a      	strh	r2, [r3, #0]
	if(bno055_address == BNO055_I2C_ADDR_LO << 1)
 800090a:	4b33      	ldr	r3, [pc, #204]	@ (80009d8 <bno055_queue_transaction+0xe0>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	2b50      	cmp	r3, #80	@ 0x50
 8000910:	d103      	bne.n	800091a <bno055_queue_transaction+0x22>
	{
		start_register = ACCELEROMETER_X;
 8000912:	1dbb      	adds	r3, r7, #6
 8000914:	2212      	movs	r2, #18
 8000916:	801a      	strh	r2, [r3, #0]
 8000918:	e002      	b.n	8000920 <bno055_queue_transaction+0x28>
	}
	else
	{
		start_register = REMOTE_ACCELEROMETER_X;
 800091a:	1dbb      	adds	r3, r7, #6
 800091c:	2228      	movs	r2, #40	@ 0x28
 800091e:	801a      	strh	r2, [r3, #0]
	}
	uint8_t* buffer = (uint8_t*)(&holding_register_database[start_register]);
 8000920:	1dbb      	adds	r3, r7, #6
 8000922:	881b      	ldrh	r3, [r3, #0]
 8000924:	005a      	lsls	r2, r3, #1
 8000926:	4b2d      	ldr	r3, [pc, #180]	@ (80009dc <bno055_queue_transaction+0xe4>)
 8000928:	18d3      	adds	r3, r2, r3
 800092a:	603b      	str	r3, [r7, #0]
	i2c_rx_int = 0;
 800092c:	4b2c      	ldr	r3, [pc, #176]	@ (80009e0 <bno055_queue_transaction+0xe8>)
 800092e:	2200      	movs	r2, #0
 8000930:	701a      	strb	r2, [r3, #0]
	i2c_rx_time = HAL_GetTick();
 8000932:	f004 f8f1 	bl	8004b18 <HAL_GetTick>
 8000936:	0002      	movs	r2, r0
 8000938:	4b2a      	ldr	r3, [pc, #168]	@ (80009e4 <bno055_queue_transaction+0xec>)
 800093a:	601a      	str	r2, [r3, #0]
	status = HAL_I2C_Mem_Read_DMA(&hi2c1, bno055_address, mem_read_map[read_index].reg,
 800093c:	4b26      	ldr	r3, [pc, #152]	@ (80009d8 <bno055_queue_transaction+0xe0>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	001d      	movs	r5, r3
 8000942:	4b29      	ldr	r3, [pc, #164]	@ (80009e8 <bno055_queue_transaction+0xf0>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	001a      	movs	r2, r3
 8000948:	4b28      	ldr	r3, [pc, #160]	@ (80009ec <bno055_queue_transaction+0xf4>)
 800094a:	0052      	lsls	r2, r2, #1
 800094c:	5cd3      	ldrb	r3, [r2, r3]
 800094e:	001e      	movs	r6, r3
			I2C_MEMADD_SIZE_8BIT, (uint8_t*)(&holding_register_database[start_register + (3 * read_index)]),
 8000950:	1dbb      	adds	r3, r7, #6
 8000952:	881a      	ldrh	r2, [r3, #0]
 8000954:	4b24      	ldr	r3, [pc, #144]	@ (80009e8 <bno055_queue_transaction+0xf0>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	0019      	movs	r1, r3
 800095a:	000b      	movs	r3, r1
 800095c:	005b      	lsls	r3, r3, #1
 800095e:	185b      	adds	r3, r3, r1
 8000960:	18d3      	adds	r3, r2, r3
 8000962:	005a      	lsls	r2, r3, #1
 8000964:	4b1d      	ldr	r3, [pc, #116]	@ (80009dc <bno055_queue_transaction+0xe4>)
 8000966:	18d3      	adds	r3, r2, r3
			mem_read_map[read_index].reg_len);
 8000968:	4a1f      	ldr	r2, [pc, #124]	@ (80009e8 <bno055_queue_transaction+0xf0>)
 800096a:	7812      	ldrb	r2, [r2, #0]
 800096c:	491f      	ldr	r1, [pc, #124]	@ (80009ec <bno055_queue_transaction+0xf4>)
 800096e:	0052      	lsls	r2, r2, #1
 8000970:	188a      	adds	r2, r1, r2
 8000972:	3201      	adds	r2, #1
 8000974:	7812      	ldrb	r2, [r2, #0]
	status = HAL_I2C_Mem_Read_DMA(&hi2c1, bno055_address, mem_read_map[read_index].reg,
 8000976:	1d7c      	adds	r4, r7, #5
 8000978:	481d      	ldr	r0, [pc, #116]	@ (80009f0 <bno055_queue_transaction+0xf8>)
 800097a:	9201      	str	r2, [sp, #4]
 800097c:	9300      	str	r3, [sp, #0]
 800097e:	2301      	movs	r3, #1
 8000980:	0032      	movs	r2, r6
 8000982:	0029      	movs	r1, r5
 8000984:	f005 fb82 	bl	800608c <HAL_I2C_Mem_Read_DMA>
 8000988:	0003      	movs	r3, r0
 800098a:	7023      	strb	r3, [r4, #0]
	__HAL_DMA_DISABLE_IT(&hdma_i2c1_rx, DMA_IT_HT);
 800098c:	4b19      	ldr	r3, [pc, #100]	@ (80009f4 <bno055_queue_transaction+0xfc>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	681a      	ldr	r2, [r3, #0]
 8000992:	4b18      	ldr	r3, [pc, #96]	@ (80009f4 <bno055_queue_transaction+0xfc>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	2104      	movs	r1, #4
 8000998:	438a      	bics	r2, r1
 800099a:	601a      	str	r2, [r3, #0]

	if(read_index == NUM_VECTORS - 1)
 800099c:	4b12      	ldr	r3, [pc, #72]	@ (80009e8 <bno055_queue_transaction+0xf0>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	2b06      	cmp	r3, #6
 80009a2:	d10c      	bne.n	80009be <bno055_queue_transaction+0xc6>
	{
		// Reset the read index
		read_index = 0;
 80009a4:	4b10      	ldr	r3, [pc, #64]	@ (80009e8 <bno055_queue_transaction+0xf0>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	701a      	strb	r2, [r3, #0]
		// Switch to the other IMU
		bno055_address = (bno055_address == (BNO055_I2C_ADDR_LO << 1))? (BNO055_I2C_ADDR_HI << 1): (BNO055_I2C_ADDR_LO << 1);
 80009aa:	4b0b      	ldr	r3, [pc, #44]	@ (80009d8 <bno055_queue_transaction+0xe0>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	2b50      	cmp	r3, #80	@ 0x50
 80009b0:	d101      	bne.n	80009b6 <bno055_queue_transaction+0xbe>
 80009b2:	2252      	movs	r2, #82	@ 0x52
 80009b4:	e000      	b.n	80009b8 <bno055_queue_transaction+0xc0>
 80009b6:	2250      	movs	r2, #80	@ 0x50
 80009b8:	4b07      	ldr	r3, [pc, #28]	@ (80009d8 <bno055_queue_transaction+0xe0>)
 80009ba:	701a      	strb	r2, [r3, #0]
 80009bc:	e005      	b.n	80009ca <bno055_queue_transaction+0xd2>
	}
	else
	{
		// Increment the read index to read the next vector on the next run
		read_index = read_index + 1;
 80009be:	4b0a      	ldr	r3, [pc, #40]	@ (80009e8 <bno055_queue_transaction+0xf0>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	3301      	adds	r3, #1
 80009c4:	b2da      	uxtb	r2, r3
 80009c6:	4b08      	ldr	r3, [pc, #32]	@ (80009e8 <bno055_queue_transaction+0xf0>)
 80009c8:	701a      	strb	r2, [r3, #0]
	}
	return status;
 80009ca:	1d7b      	adds	r3, r7, #5
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	b25b      	sxtb	r3, r3
}
 80009d0:	0018      	movs	r0, r3
 80009d2:	46bd      	mov	sp, r7
 80009d4:	b003      	add	sp, #12
 80009d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009d8:	200002e1 	.word	0x200002e1
 80009dc:	20000014 	.word	0x20000014
 80009e0:	2000000f 	.word	0x2000000f
 80009e4:	200002e8 	.word	0x200002e8
 80009e8:	200002e0 	.word	0x200002e0
 80009ec:	20000000 	.word	0x20000000
 80009f0:	20000304 	.word	0x20000304
 80009f4:	20000358 	.word	0x20000358

080009f8 <monitor_i2c>:
//	status = bno055_write(i2c_rx_buffer, 2);
//	status |= bno055_poll_transaction();
}

int8_t monitor_i2c()
{
 80009f8:	b590      	push	{r4, r7, lr}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
	int8_t status = HAL_OK;
 80009fe:	1dfb      	adds	r3, r7, #7
 8000a00:	2200      	movs	r2, #0
 8000a02:	701a      	strb	r2, [r3, #0]

	// I2C error handling
	if(i2c_err_int)
 8000a04:	4b28      	ldr	r3, [pc, #160]	@ (8000aa8 <monitor_i2c+0xb0>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d015      	beq.n	8000a3a <monitor_i2c+0x42>
	{
		i2c_err_int = 0;
 8000a0e:	4b26      	ldr	r3, [pc, #152]	@ (8000aa8 <monitor_i2c+0xb0>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	701a      	strb	r2, [r3, #0]
		status = i2c_reset();
 8000a14:	1dfc      	adds	r4, r7, #7
 8000a16:	f000 f905 	bl	8000c24 <i2c_reset>
 8000a1a:	0003      	movs	r3, r0
 8000a1c:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK)
 8000a1e:	1dfb      	adds	r3, r7, #7
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	b25b      	sxtb	r3, r3
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d003      	beq.n	8000a30 <monitor_i2c+0x38>
		{
			return status;
 8000a28:	1dfb      	adds	r3, r7, #7
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	b25b      	sxtb	r3, r3
 8000a2e:	e037      	b.n	8000aa0 <monitor_i2c+0xa8>
		}
		return handle_i2c_error(I2C_ERROR);
 8000a30:	2018      	movs	r0, #24
 8000a32:	f000 f955 	bl	8000ce0 <handle_i2c_error>
 8000a36:	0003      	movs	r3, r0
 8000a38:	e032      	b.n	8000aa0 <monitor_i2c+0xa8>
	}

	// TX timeout handling
	if(!i2c_tx_int)
 8000a3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000aac <monitor_i2c+0xb4>)
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d112      	bne.n	8000a6a <monitor_i2c+0x72>
	{
		if(HAL_GetTick() - i2c_tx_time >= 20)
 8000a44:	f004 f868 	bl	8004b18 <HAL_GetTick>
 8000a48:	0002      	movs	r2, r0
 8000a4a:	4b19      	ldr	r3, [pc, #100]	@ (8000ab0 <monitor_i2c+0xb8>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	1ad3      	subs	r3, r2, r3
 8000a50:	2b13      	cmp	r3, #19
 8000a52:	d907      	bls.n	8000a64 <monitor_i2c+0x6c>
		{
			i2c_tx_int = 1;
 8000a54:	4b15      	ldr	r3, [pc, #84]	@ (8000aac <monitor_i2c+0xb4>)
 8000a56:	2201      	movs	r2, #1
 8000a58:	701a      	strb	r2, [r3, #0]
			return handle_i2c_error(I2C_TX_TIMEOUT);
 8000a5a:	2016      	movs	r0, #22
 8000a5c:	f000 f940 	bl	8000ce0 <handle_i2c_error>
 8000a60:	0003      	movs	r3, r0
 8000a62:	e01d      	b.n	8000aa0 <monitor_i2c+0xa8>
		}
		status = HAL_BUSY;
 8000a64:	1dfb      	adds	r3, r7, #7
 8000a66:	2202      	movs	r2, #2
 8000a68:	701a      	strb	r2, [r3, #0]
	}

	// RX timeout handling
	if(!i2c_rx_int)
 8000a6a:	4b12      	ldr	r3, [pc, #72]	@ (8000ab4 <monitor_i2c+0xbc>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d112      	bne.n	8000a9a <monitor_i2c+0xa2>
	{
		if(HAL_GetTick() - i2c_rx_time >= 20)
 8000a74:	f004 f850 	bl	8004b18 <HAL_GetTick>
 8000a78:	0002      	movs	r2, r0
 8000a7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab8 <monitor_i2c+0xc0>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	1ad3      	subs	r3, r2, r3
 8000a80:	2b13      	cmp	r3, #19
 8000a82:	d907      	bls.n	8000a94 <monitor_i2c+0x9c>
		{
			i2c_rx_int = 1;
 8000a84:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab4 <monitor_i2c+0xbc>)
 8000a86:	2201      	movs	r2, #1
 8000a88:	701a      	strb	r2, [r3, #0]
			return handle_i2c_error(I2C_RX_TIMEOUT);
 8000a8a:	2017      	movs	r0, #23
 8000a8c:	f000 f928 	bl	8000ce0 <handle_i2c_error>
 8000a90:	0003      	movs	r3, r0
 8000a92:	e005      	b.n	8000aa0 <monitor_i2c+0xa8>
		}
		status = HAL_BUSY;
 8000a94:	1dfb      	adds	r3, r7, #7
 8000a96:	2202      	movs	r2, #2
 8000a98:	701a      	strb	r2, [r3, #0]
	}

	return status;
 8000a9a:	1dfb      	adds	r3, r7, #7
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	b25b      	sxtb	r3, r3
}
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	b003      	add	sp, #12
 8000aa6:	bd90      	pop	{r4, r7, pc}
 8000aa8:	200002ec 	.word	0x200002ec
 8000aac:	2000000e 	.word	0x2000000e
 8000ab0:	200002e4 	.word	0x200002e4
 8000ab4:	2000000f 	.word	0x2000000f
 8000ab8:	200002e8 	.word	0x200002e8

08000abc <bno055_write>:

int8_t bno055_write(uint8_t *data, uint8_t len)
{
 8000abc:	b590      	push	{r4, r7, lr}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	000a      	movs	r2, r1
 8000ac6:	1cfb      	adds	r3, r7, #3
 8000ac8:	701a      	strb	r2, [r3, #0]
	int8_t status = HAL_OK;
 8000aca:	240f      	movs	r4, #15
 8000acc:	193b      	adds	r3, r7, r4
 8000ace:	2200      	movs	r2, #0
 8000ad0:	701a      	strb	r2, [r3, #0]
	i2c_tx_int = 0;
 8000ad2:	4b12      	ldr	r3, [pc, #72]	@ (8000b1c <bno055_write+0x60>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	701a      	strb	r2, [r3, #0]
	i2c_tx_time = HAL_GetTick();
 8000ad8:	f004 f81e 	bl	8004b18 <HAL_GetTick>
 8000adc:	0002      	movs	r2, r0
 8000ade:	4b10      	ldr	r3, [pc, #64]	@ (8000b20 <bno055_write+0x64>)
 8000ae0:	601a      	str	r2, [r3, #0]
	status = HAL_I2C_Master_Transmit_DMA(&hi2c1, bno055_address, data, len);
 8000ae2:	4b10      	ldr	r3, [pc, #64]	@ (8000b24 <bno055_write+0x68>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	0019      	movs	r1, r3
 8000ae8:	1cfb      	adds	r3, r7, #3
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	b29b      	uxth	r3, r3
 8000aee:	687a      	ldr	r2, [r7, #4]
 8000af0:	480d      	ldr	r0, [pc, #52]	@ (8000b28 <bno055_write+0x6c>)
 8000af2:	f005 f89b 	bl	8005c2c <HAL_I2C_Master_Transmit_DMA>
 8000af6:	0003      	movs	r3, r0
 8000af8:	001a      	movs	r2, r3
 8000afa:	193b      	adds	r3, r7, r4
 8000afc:	701a      	strb	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(&hdma_i2c1_tx, DMA_IT_HT);
 8000afe:	4b0b      	ldr	r3, [pc, #44]	@ (8000b2c <bno055_write+0x70>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	4b09      	ldr	r3, [pc, #36]	@ (8000b2c <bno055_write+0x70>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	2104      	movs	r1, #4
 8000b0a:	438a      	bics	r2, r1
 8000b0c:	601a      	str	r2, [r3, #0]

	return status;
 8000b0e:	193b      	adds	r3, r7, r4
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	b25b      	sxtb	r3, r3
}
 8000b14:	0018      	movs	r0, r3
 8000b16:	46bd      	mov	sp, r7
 8000b18:	b005      	add	sp, #20
 8000b1a:	bd90      	pop	{r4, r7, pc}
 8000b1c:	2000000e 	.word	0x2000000e
 8000b20:	200002e4 	.word	0x200002e4
 8000b24:	200002e1 	.word	0x200002e1
 8000b28:	20000304 	.word	0x20000304
 8000b2c:	200003b4 	.word	0x200003b4

08000b30 <bno055_read>:

int8_t bno055_read(uint8_t reg, uint8_t *data, uint8_t len)
{
 8000b30:	b5b0      	push	{r4, r5, r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6039      	str	r1, [r7, #0]
 8000b38:	0011      	movs	r1, r2
 8000b3a:	1dfb      	adds	r3, r7, #7
 8000b3c:	1c02      	adds	r2, r0, #0
 8000b3e:	701a      	strb	r2, [r3, #0]
 8000b40:	1dbb      	adds	r3, r7, #6
 8000b42:	1c0a      	adds	r2, r1, #0
 8000b44:	701a      	strb	r2, [r3, #0]
	int8_t status = HAL_OK;
 8000b46:	240f      	movs	r4, #15
 8000b48:	193b      	adds	r3, r7, r4
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	701a      	strb	r2, [r3, #0]
	i2c_tx_int = 0;
 8000b4e:	4b2d      	ldr	r3, [pc, #180]	@ (8000c04 <bno055_read+0xd4>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	701a      	strb	r2, [r3, #0]
	i2c_tx_time = HAL_GetTick();
 8000b54:	f003 ffe0 	bl	8004b18 <HAL_GetTick>
 8000b58:	0002      	movs	r2, r0
 8000b5a:	4b2b      	ldr	r3, [pc, #172]	@ (8000c08 <bno055_read+0xd8>)
 8000b5c:	601a      	str	r2, [r3, #0]
	status = HAL_I2C_Master_Transmit_DMA(&hi2c1, bno055_address, &reg, 1);
 8000b5e:	4b2b      	ldr	r3, [pc, #172]	@ (8000c0c <bno055_read+0xdc>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	0019      	movs	r1, r3
 8000b64:	1dfa      	adds	r2, r7, #7
 8000b66:	482a      	ldr	r0, [pc, #168]	@ (8000c10 <bno055_read+0xe0>)
 8000b68:	2301      	movs	r3, #1
 8000b6a:	f005 f85f 	bl	8005c2c <HAL_I2C_Master_Transmit_DMA>
 8000b6e:	0003      	movs	r3, r0
 8000b70:	001a      	movs	r2, r3
 8000b72:	193b      	adds	r3, r7, r4
 8000b74:	701a      	strb	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(&hdma_i2c1_tx, DMA_IT_HT);
 8000b76:	4b27      	ldr	r3, [pc, #156]	@ (8000c14 <bno055_read+0xe4>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	4b25      	ldr	r3, [pc, #148]	@ (8000c14 <bno055_read+0xe4>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2104      	movs	r1, #4
 8000b82:	438a      	bics	r2, r1
 8000b84:	601a      	str	r2, [r3, #0]
	if(status != HAL_OK){return status;}
 8000b86:	193b      	adds	r3, r7, r4
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	b25b      	sxtb	r3, r3
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d003      	beq.n	8000b98 <bno055_read+0x68>
 8000b90:	193b      	adds	r3, r7, r4
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	b25b      	sxtb	r3, r3
 8000b96:	e031      	b.n	8000bfc <bno055_read+0xcc>
	status = bno055_poll_transaction();
 8000b98:	250f      	movs	r5, #15
 8000b9a:	197c      	adds	r4, r7, r5
 8000b9c:	f7ff fdca 	bl	8000734 <bno055_poll_transaction>
 8000ba0:	0003      	movs	r3, r0
 8000ba2:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8000ba4:	002a      	movs	r2, r5
 8000ba6:	18bb      	adds	r3, r7, r2
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	b25b      	sxtb	r3, r3
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d003      	beq.n	8000bb8 <bno055_read+0x88>
 8000bb0:	18bb      	adds	r3, r7, r2
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	b25b      	sxtb	r3, r3
 8000bb6:	e021      	b.n	8000bfc <bno055_read+0xcc>

	i2c_rx_int = 0;
 8000bb8:	4b17      	ldr	r3, [pc, #92]	@ (8000c18 <bno055_read+0xe8>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	701a      	strb	r2, [r3, #0]
	i2c_rx_time = HAL_GetTick();
 8000bbe:	f003 ffab 	bl	8004b18 <HAL_GetTick>
 8000bc2:	0002      	movs	r2, r0
 8000bc4:	4b15      	ldr	r3, [pc, #84]	@ (8000c1c <bno055_read+0xec>)
 8000bc6:	601a      	str	r2, [r3, #0]
	status = HAL_I2C_Master_Receive_DMA(&hi2c1, bno055_address, data, len);
 8000bc8:	4b10      	ldr	r3, [pc, #64]	@ (8000c0c <bno055_read+0xdc>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	0019      	movs	r1, r3
 8000bce:	1dbb      	adds	r3, r7, #6
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	b29b      	uxth	r3, r3
 8000bd4:	683a      	ldr	r2, [r7, #0]
 8000bd6:	480e      	ldr	r0, [pc, #56]	@ (8000c10 <bno055_read+0xe0>)
 8000bd8:	f005 f952 	bl	8005e80 <HAL_I2C_Master_Receive_DMA>
 8000bdc:	0003      	movs	r3, r0
 8000bde:	001a      	movs	r2, r3
 8000be0:	200f      	movs	r0, #15
 8000be2:	183b      	adds	r3, r7, r0
 8000be4:	701a      	strb	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(&hdma_i2c1_rx, DMA_IT_HT);
 8000be6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c20 <bno055_read+0xf0>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	4b0c      	ldr	r3, [pc, #48]	@ (8000c20 <bno055_read+0xf0>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2104      	movs	r1, #4
 8000bf2:	438a      	bics	r2, r1
 8000bf4:	601a      	str	r2, [r3, #0]

	return status;
 8000bf6:	183b      	adds	r3, r7, r0
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	b25b      	sxtb	r3, r3
}
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	b004      	add	sp, #16
 8000c02:	bdb0      	pop	{r4, r5, r7, pc}
 8000c04:	2000000e 	.word	0x2000000e
 8000c08:	200002e4 	.word	0x200002e4
 8000c0c:	200002e1 	.word	0x200002e1
 8000c10:	20000304 	.word	0x20000304
 8000c14:	200003b4 	.word	0x200003b4
 8000c18:	2000000f 	.word	0x2000000f
 8000c1c:	200002e8 	.word	0x200002e8
 8000c20:	20000358 	.word	0x20000358

08000c24 <i2c_reset>:

int8_t i2c_reset()
{
 8000c24:	b590      	push	{r4, r7, lr}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
	int8_t status = HAL_OK;
 8000c2a:	1dfb      	adds	r3, r7, #7
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	701a      	strb	r2, [r3, #0]
	status = bno055_poll_transaction();
 8000c30:	1dfc      	adds	r4, r7, #7
 8000c32:	f7ff fd7f 	bl	8000734 <bno055_poll_transaction>
 8000c36:	0003      	movs	r3, r0
 8000c38:	7023      	strb	r3, [r4, #0]
	status |= HAL_I2C_DeInit(&hi2c1);
 8000c3a:	4b26      	ldr	r3, [pc, #152]	@ (8000cd4 <i2c_reset+0xb0>)
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	f004 ffc5 	bl	8005bcc <HAL_I2C_DeInit>
 8000c42:	0003      	movs	r3, r0
 8000c44:	b259      	sxtb	r1, r3
 8000c46:	1dfb      	adds	r3, r7, #7
 8000c48:	1dfa      	adds	r2, r7, #7
 8000c4a:	7812      	ldrb	r2, [r2, #0]
 8000c4c:	430a      	orrs	r2, r1
 8000c4e:	701a      	strb	r2, [r3, #0]
	__I2C1_FORCE_RESET();
 8000c50:	4b21      	ldr	r3, [pc, #132]	@ (8000cd8 <i2c_reset+0xb4>)
 8000c52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c54:	4b20      	ldr	r3, [pc, #128]	@ (8000cd8 <i2c_reset+0xb4>)
 8000c56:	2180      	movs	r1, #128	@ 0x80
 8000c58:	0389      	lsls	r1, r1, #14
 8000c5a:	430a      	orrs	r2, r1
 8000c5c:	62da      	str	r2, [r3, #44]	@ 0x2c
	HAL_Delay(100);
 8000c5e:	2064      	movs	r0, #100	@ 0x64
 8000c60:	f003 ff64 	bl	8004b2c <HAL_Delay>
	__I2C1_RELEASE_RESET();
 8000c64:	4b1c      	ldr	r3, [pc, #112]	@ (8000cd8 <i2c_reset+0xb4>)
 8000c66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c68:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd8 <i2c_reset+0xb4>)
 8000c6a:	491c      	ldr	r1, [pc, #112]	@ (8000cdc <i2c_reset+0xb8>)
 8000c6c:	400a      	ands	r2, r1
 8000c6e:	62da      	str	r2, [r3, #44]	@ 0x2c
	status = HAL_I2C_Init(&hi2c1);
 8000c70:	4b18      	ldr	r3, [pc, #96]	@ (8000cd4 <i2c_reset+0xb0>)
 8000c72:	0018      	movs	r0, r3
 8000c74:	f004 ff04 	bl	8005a80 <HAL_I2C_Init>
 8000c78:	0003      	movs	r3, r0
 8000c7a:	001a      	movs	r2, r3
 8000c7c:	1dfb      	adds	r3, r7, #7
 8000c7e:	701a      	strb	r2, [r3, #0]
	status |= HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE);
 8000c80:	4b14      	ldr	r3, [pc, #80]	@ (8000cd4 <i2c_reset+0xb0>)
 8000c82:	2100      	movs	r1, #0
 8000c84:	0018      	movs	r0, r3
 8000c86:	f007 f82f 	bl	8007ce8 <HAL_I2CEx_ConfigAnalogFilter>
 8000c8a:	0003      	movs	r3, r0
 8000c8c:	b259      	sxtb	r1, r3
 8000c8e:	1dfb      	adds	r3, r7, #7
 8000c90:	1dfa      	adds	r2, r7, #7
 8000c92:	7812      	ldrb	r2, [r2, #0]
 8000c94:	430a      	orrs	r2, r1
 8000c96:	701a      	strb	r2, [r3, #0]
	status |= HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0);
 8000c98:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd4 <i2c_reset+0xb0>)
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	0018      	movs	r0, r3
 8000c9e:	f007 f86f 	bl	8007d80 <HAL_I2CEx_ConfigDigitalFilter>
 8000ca2:	0003      	movs	r3, r0
 8000ca4:	b259      	sxtb	r1, r3
 8000ca6:	1dfb      	adds	r3, r7, #7
 8000ca8:	1dfa      	adds	r2, r7, #7
 8000caa:	7812      	ldrb	r2, [r2, #0]
 8000cac:	430a      	orrs	r2, r1
 8000cae:	701a      	strb	r2, [r3, #0]
	if(status != HAL_OK)
 8000cb0:	1dfb      	adds	r3, r7, #7
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	b25b      	sxtb	r3, r3
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d004      	beq.n	8000cc4 <i2c_reset+0xa0>
	{
		return handle_i2c_error(I2C_FATAL_ERROR);
 8000cba:	2019      	movs	r0, #25
 8000cbc:	f000 f810 	bl	8000ce0 <handle_i2c_error>
 8000cc0:	0003      	movs	r3, r0
 8000cc2:	e002      	b.n	8000cca <i2c_reset+0xa6>
	}
	return status;
 8000cc4:	1dfb      	adds	r3, r7, #7
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	b25b      	sxtb	r3, r3
}
 8000cca:	0018      	movs	r0, r3
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	b003      	add	sp, #12
 8000cd0:	bd90      	pop	{r4, r7, pc}
 8000cd2:	46c0      	nop			@ (mov r8, r8)
 8000cd4:	20000304 	.word	0x20000304
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	ffdfffff 	.word	0xffdfffff

08000ce0 <handle_i2c_error>:

int8_t handle_i2c_error(int8_t error_code)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	0002      	movs	r2, r0
 8000ce8:	1dfb      	adds	r3, r7, #7
 8000cea:	701a      	strb	r2, [r3, #0]
	holding_register_database[I2C_ERRORS] |= 1U << (error_code - I2C_TX_TIMEOUT);
 8000cec:	4b0a      	ldr	r3, [pc, #40]	@ (8000d18 <handle_i2c_error+0x38>)
 8000cee:	895a      	ldrh	r2, [r3, #10]
 8000cf0:	1dfb      	adds	r3, r7, #7
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	b25b      	sxtb	r3, r3
 8000cf6:	3b16      	subs	r3, #22
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	4099      	lsls	r1, r3
 8000cfc:	000b      	movs	r3, r1
 8000cfe:	b29b      	uxth	r3, r3
 8000d00:	4313      	orrs	r3, r2
 8000d02:	b29a      	uxth	r2, r3
 8000d04:	4b04      	ldr	r3, [pc, #16]	@ (8000d18 <handle_i2c_error+0x38>)
 8000d06:	815a      	strh	r2, [r3, #10]
	return error_code;
 8000d08:	1dfb      	adds	r3, r7, #7
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	b25b      	sxtb	r3, r3
}
 8000d0e:	0018      	movs	r0, r3
 8000d10:	46bd      	mov	sp, r7
 8000d12:	b002      	add	sp, #8
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	46c0      	nop			@ (mov r8, r8)
 8000d18:	20000014 	.word	0x20000014

08000d1c <actuate>:
uint8_t rx_data[2];

float pid_step(pid_t *pid, float measurement, float setpoint);

int8_t actuate(uint8_t actuator, uint16_t current, uint16_t target)
{
 8000d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	0004      	movs	r4, r0
 8000d24:	0008      	movs	r0, r1
 8000d26:	0011      	movs	r1, r2
 8000d28:	1dfb      	adds	r3, r7, #7
 8000d2a:	1c22      	adds	r2, r4, #0
 8000d2c:	701a      	strb	r2, [r3, #0]
 8000d2e:	1d3b      	adds	r3, r7, #4
 8000d30:	1c02      	adds	r2, r0, #0
 8000d32:	801a      	strh	r2, [r3, #0]
 8000d34:	1cbb      	adds	r3, r7, #2
 8000d36:	1c0a      	adds	r2, r1, #0
 8000d38:	801a      	strh	r2, [r3, #0]
	if(selected_actuator != actuator)
 8000d3a:	4b61      	ldr	r3, [pc, #388]	@ (8000ec0 <actuate+0x1a4>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	1dfa      	adds	r2, r7, #7
 8000d40:	7812      	ldrb	r2, [r2, #0]
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d100      	bne.n	8000d48 <actuate+0x2c>
 8000d46:	e0b5      	b.n	8000eb4 <actuate+0x198>
	{
		int8_t status = HAL_OK;
 8000d48:	200f      	movs	r0, #15
 8000d4a:	183b      	adds	r3, r7, r0
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	701a      	strb	r2, [r3, #0]
		drv_command_t command = DEFAULT_DRV_COMMAND;
 8000d50:	260c      	movs	r6, #12
 8000d52:	19bb      	adds	r3, r7, r6
 8000d54:	4a5b      	ldr	r2, [pc, #364]	@ (8000ec4 <actuate+0x1a8>)
 8000d56:	7812      	ldrb	r2, [r2, #0]
 8000d58:	701a      	strb	r2, [r3, #0]
		drv_spi_in_t spi_in = DEFAULT_DRV_SPI_IN;
 8000d5a:	2308      	movs	r3, #8
 8000d5c:	18fb      	adds	r3, r7, r3
 8000d5e:	4a5a      	ldr	r2, [pc, #360]	@ (8000ec8 <actuate+0x1ac>)
 8000d60:	7812      	ldrb	r2, [r2, #0]
 8000d62:	701a      	strb	r2, [r3, #0]
		if(drv_on)
 8000d64:	4b59      	ldr	r3, [pc, #356]	@ (8000ecc <actuate+0x1b0>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d059      	beq.n	8000e20 <actuate+0x104>
		{
			// Unlock the SPI_IN register. Refer to section 8.6.1.5
			command.spi_in_lock = SPI_IN_UNLOCK;
 8000d6c:	19bb      	adds	r3, r7, r6
 8000d6e:	781a      	ldrb	r2, [r3, #0]
 8000d70:	2118      	movs	r1, #24
 8000d72:	438a      	bics	r2, r1
 8000d74:	1c11      	adds	r1, r2, #0
 8000d76:	2210      	movs	r2, #16
 8000d78:	430a      	orrs	r2, r1
 8000d7a:	701a      	strb	r2, [r3, #0]
			status = DRV_SetCommand(&command);
 8000d7c:	0005      	movs	r5, r0
 8000d7e:	183c      	adds	r4, r7, r0
 8000d80:	19bb      	adds	r3, r7, r6
 8000d82:	0018      	movs	r0, r3
 8000d84:	f000 fb70 	bl	8001468 <DRV_SetCommand>
 8000d88:	0003      	movs	r3, r0
 8000d8a:	7023      	strb	r3, [r4, #0]
			if(status != HAL_OK){return status;}
 8000d8c:	197b      	adds	r3, r7, r5
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	b25b      	sxtb	r3, r3
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d003      	beq.n	8000d9e <actuate+0x82>
 8000d96:	197b      	adds	r3, r7, r5
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	b25b      	sxtb	r3, r3
 8000d9c:	e08b      	b.n	8000eb6 <actuate+0x19a>

			// Turn off the DRV8244
			TIM1->CCR1 = 0;
 8000d9e:	4b4c      	ldr	r3, [pc, #304]	@ (8000ed0 <actuate+0x1b4>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	635a      	str	r2, [r3, #52]	@ 0x34
			spi_in.s_drv_off = 1;
 8000da4:	2008      	movs	r0, #8
 8000da6:	183b      	adds	r3, r7, r0
 8000da8:	781a      	ldrb	r2, [r3, #0]
 8000daa:	2108      	movs	r1, #8
 8000dac:	430a      	orrs	r2, r1
 8000dae:	701a      	strb	r2, [r3, #0]
			spi_in.s_drv_off2 = 1;
 8000db0:	183b      	adds	r3, r7, r0
 8000db2:	781a      	ldrb	r2, [r3, #0]
 8000db4:	2104      	movs	r1, #4
 8000db6:	430a      	orrs	r2, r1
 8000db8:	701a      	strb	r2, [r3, #0]
			status = DRV_SetSpiIn(&spi_in);
 8000dba:	250f      	movs	r5, #15
 8000dbc:	197c      	adds	r4, r7, r5
 8000dbe:	183b      	adds	r3, r7, r0
 8000dc0:	0018      	movs	r0, r3
 8000dc2:	f000 fb87 	bl	80014d4 <DRV_SetSpiIn>
 8000dc6:	0003      	movs	r3, r0
 8000dc8:	7023      	strb	r3, [r4, #0]
			if(status != HAL_OK){return status;}
 8000dca:	197b      	adds	r3, r7, r5
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	b25b      	sxtb	r3, r3
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d003      	beq.n	8000ddc <actuate+0xc0>
 8000dd4:	197b      	adds	r3, r7, r5
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	b25b      	sxtb	r3, r3
 8000dda:	e06c      	b.n	8000eb6 <actuate+0x19a>
			drv_on = 0;
 8000ddc:	4b3b      	ldr	r3, [pc, #236]	@ (8000ecc <actuate+0x1b0>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	701a      	strb	r2, [r3, #0]

			// Lock the SPI_IN register. Refer to section 8.6.1.5
			command.spi_in_lock = SPI_IN_LOCK;
 8000de2:	200c      	movs	r0, #12
 8000de4:	183b      	adds	r3, r7, r0
 8000de6:	781a      	ldrb	r2, [r3, #0]
 8000de8:	2118      	movs	r1, #24
 8000dea:	438a      	bics	r2, r1
 8000dec:	1c11      	adds	r1, r2, #0
 8000dee:	2208      	movs	r2, #8
 8000df0:	430a      	orrs	r2, r1
 8000df2:	701a      	strb	r2, [r3, #0]
			status = DRV_SetCommand(&command);
 8000df4:	250f      	movs	r5, #15
 8000df6:	197c      	adds	r4, r7, r5
 8000df8:	183b      	adds	r3, r7, r0
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	f000 fb34 	bl	8001468 <DRV_SetCommand>
 8000e00:	0003      	movs	r3, r0
 8000e02:	7023      	strb	r3, [r4, #0]
			if(status != HAL_OK){return status;}
 8000e04:	197b      	adds	r3, r7, r5
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	b25b      	sxtb	r3, r3
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d003      	beq.n	8000e16 <actuate+0xfa>
 8000e0e:	197b      	adds	r3, r7, r5
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	b25b      	sxtb	r3, r3
 8000e14:	e04f      	b.n	8000eb6 <actuate+0x19a>

			time_ms = HAL_GetTick();
 8000e16:	f003 fe7f 	bl	8004b18 <HAL_GetTick>
 8000e1a:	0002      	movs	r2, r0
 8000e1c:	4b2d      	ldr	r3, [pc, #180]	@ (8000ed4 <actuate+0x1b8>)
 8000e1e:	601a      	str	r2, [r3, #0]
		}
		if(HAL_GetTick() - time_ms >= ACTUATOR_TRANSIENT_DELAY)
 8000e20:	f003 fe7a 	bl	8004b18 <HAL_GetTick>
 8000e24:	0002      	movs	r2, r0
 8000e26:	4b2b      	ldr	r3, [pc, #172]	@ (8000ed4 <actuate+0x1b8>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	1ad2      	subs	r2, r2, r3
 8000e2c:	23fa      	movs	r3, #250	@ 0xfa
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d33a      	bcc.n	8000eaa <actuate+0x18e>
		{
			if(!pin_off[selected_actuator])
 8000e34:	4b22      	ldr	r3, [pc, #136]	@ (8000ec0 <actuate+0x1a4>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	001a      	movs	r2, r3
 8000e3a:	4b27      	ldr	r3, [pc, #156]	@ (8000ed8 <actuate+0x1bc>)
 8000e3c:	5c9b      	ldrb	r3, [r3, r2]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d115      	bne.n	8000e6e <actuate+0x152>
			{
				pin_off[selected_actuator] = 1;
 8000e42:	4b1f      	ldr	r3, [pc, #124]	@ (8000ec0 <actuate+0x1a4>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	001a      	movs	r2, r3
 8000e48:	4b23      	ldr	r3, [pc, #140]	@ (8000ed8 <actuate+0x1bc>)
 8000e4a:	2101      	movs	r1, #1
 8000e4c:	5499      	strb	r1, [r3, r2]
				// Deactivate the old actuator
				HAL_GPIO_WritePin(port_map[selected_actuator], pin_map[selected_actuator], GPIO_PIN_RESET);
 8000e4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ec0 <actuate+0x1a4>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	001a      	movs	r2, r3
 8000e54:	4b21      	ldr	r3, [pc, #132]	@ (8000edc <actuate+0x1c0>)
 8000e56:	0092      	lsls	r2, r2, #2
 8000e58:	58d0      	ldr	r0, [r2, r3]
 8000e5a:	4b19      	ldr	r3, [pc, #100]	@ (8000ec0 <actuate+0x1a4>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	001a      	movs	r2, r3
 8000e60:	4b1f      	ldr	r3, [pc, #124]	@ (8000ee0 <actuate+0x1c4>)
 8000e62:	0052      	lsls	r2, r2, #1
 8000e64:	5ad3      	ldrh	r3, [r2, r3]
 8000e66:	2200      	movs	r2, #0
 8000e68:	0019      	movs	r1, r3
 8000e6a:	f004 fdb8 	bl	80059de <HAL_GPIO_WritePin>
			}

			if(!drv_shutoff)
 8000e6e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ee4 <actuate+0x1c8>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d115      	bne.n	8000ea2 <actuate+0x186>
			{
				status = DRV_Activate(actuator, current, target);
 8000e76:	250f      	movs	r5, #15
 8000e78:	197c      	adds	r4, r7, r5
 8000e7a:	1cbb      	adds	r3, r7, #2
 8000e7c:	881a      	ldrh	r2, [r3, #0]
 8000e7e:	1d3b      	adds	r3, r7, #4
 8000e80:	8819      	ldrh	r1, [r3, #0]
 8000e82:	1dfb      	adds	r3, r7, #7
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	0018      	movs	r0, r3
 8000e88:	f000 f842 	bl	8000f10 <DRV_Activate>
 8000e8c:	0003      	movs	r3, r0
 8000e8e:	7023      	strb	r3, [r4, #0]
				if(status != HAL_OK){return status;}
 8000e90:	197b      	adds	r3, r7, r5
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	b25b      	sxtb	r3, r3
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d003      	beq.n	8000ea2 <actuate+0x186>
 8000e9a:	197b      	adds	r3, r7, r5
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	b25b      	sxtb	r3, r3
 8000ea0:	e009      	b.n	8000eb6 <actuate+0x19a>
			}
			selected_actuator = actuator;
 8000ea2:	4b07      	ldr	r3, [pc, #28]	@ (8000ec0 <actuate+0x1a4>)
 8000ea4:	1dfa      	adds	r2, r7, #7
 8000ea6:	7812      	ldrb	r2, [r2, #0]
 8000ea8:	701a      	strb	r2, [r3, #0]
		}
		return status;
 8000eaa:	230f      	movs	r3, #15
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	b25b      	sxtb	r3, r3
 8000eb2:	e000      	b.n	8000eb6 <actuate+0x19a>
	}
	return HAL_OK;
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	b005      	add	sp, #20
 8000ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ebe:	46c0      	nop			@ (mov r8, r8)
 8000ec0:	20000010 	.word	0x20000010
 8000ec4:	0800c18c 	.word	0x0800c18c
 8000ec8:	0800c190 	.word	0x0800c190
 8000ecc:	200002ed 	.word	0x200002ed
 8000ed0:	40012c00 	.word	0x40012c00
 8000ed4:	200002f0 	.word	0x200002f0
 8000ed8:	200002f8 	.word	0x200002f8
 8000edc:	20000698 	.word	0x20000698
 8000ee0:	20000690 	.word	0x20000690
 8000ee4:	200002f4 	.word	0x200002f4

08000ee8 <DRV_Shutoff>:

void DRV_Shutoff()
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
	drv_shutoff = 1;
 8000eec:	4b02      	ldr	r3, [pc, #8]	@ (8000ef8 <DRV_Shutoff+0x10>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	701a      	strb	r2, [r3, #0]
}
 8000ef2:	46c0      	nop			@ (mov r8, r8)
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	200002f4 	.word	0x200002f4

08000efc <DRV_GetShutoff>:

uint8_t DRV_GetShutoff()
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
	return drv_shutoff;
 8000f00:	4b02      	ldr	r3, [pc, #8]	@ (8000f0c <DRV_GetShutoff+0x10>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
}
 8000f04:	0018      	movs	r0, r3
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	46c0      	nop			@ (mov r8, r8)
 8000f0c:	200002f4 	.word	0x200002f4

08000f10 <DRV_Activate>:

int8_t DRV_Activate(uint8_t actuator, uint16_t current, uint16_t target)
{
 8000f10:	b5b0      	push	{r4, r5, r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	0004      	movs	r4, r0
 8000f18:	0008      	movs	r0, r1
 8000f1a:	0011      	movs	r1, r2
 8000f1c:	1dfb      	adds	r3, r7, #7
 8000f1e:	1c22      	adds	r2, r4, #0
 8000f20:	701a      	strb	r2, [r3, #0]
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	1c02      	adds	r2, r0, #0
 8000f26:	801a      	strh	r2, [r3, #0]
 8000f28:	1cbb      	adds	r3, r7, #2
 8000f2a:	1c0a      	adds	r2, r1, #0
 8000f2c:	801a      	strh	r2, [r3, #0]
	int8_t status = HAL_OK;
 8000f2e:	240f      	movs	r4, #15
 8000f30:	193b      	adds	r3, r7, r4
 8000f32:	2200      	movs	r2, #0
 8000f34:	701a      	strb	r2, [r3, #0]
	drv_command_t command = DEFAULT_DRV_COMMAND;
 8000f36:	250c      	movs	r5, #12
 8000f38:	197b      	adds	r3, r7, r5
 8000f3a:	4a47      	ldr	r2, [pc, #284]	@ (8001058 <DRV_Activate+0x148>)
 8000f3c:	7812      	ldrb	r2, [r2, #0]
 8000f3e:	701a      	strb	r2, [r3, #0]
	drv_spi_in_t spi_in = DEFAULT_DRV_SPI_IN;
 8000f40:	2308      	movs	r3, #8
 8000f42:	18fb      	adds	r3, r7, r3
 8000f44:	4a45      	ldr	r2, [pc, #276]	@ (800105c <DRV_Activate+0x14c>)
 8000f46:	7812      	ldrb	r2, [r2, #0]
 8000f48:	701a      	strb	r2, [r3, #0]

	drv_shutoff = 0;
 8000f4a:	4b45      	ldr	r3, [pc, #276]	@ (8001060 <DRV_Activate+0x150>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	701a      	strb	r2, [r3, #0]

	// Activate the new actuator
	HAL_GPIO_WritePin(port_map[actuator], pin_map[actuator], GPIO_PIN_SET);
 8000f50:	1dfb      	adds	r3, r7, #7
 8000f52:	781a      	ldrb	r2, [r3, #0]
 8000f54:	4b43      	ldr	r3, [pc, #268]	@ (8001064 <DRV_Activate+0x154>)
 8000f56:	0092      	lsls	r2, r2, #2
 8000f58:	58d0      	ldr	r0, [r2, r3]
 8000f5a:	1dfb      	adds	r3, r7, #7
 8000f5c:	781a      	ldrb	r2, [r3, #0]
 8000f5e:	4b42      	ldr	r3, [pc, #264]	@ (8001068 <DRV_Activate+0x158>)
 8000f60:	0052      	lsls	r2, r2, #1
 8000f62:	5ad3      	ldrh	r3, [r2, r3]
 8000f64:	2201      	movs	r2, #1
 8000f66:	0019      	movs	r1, r3
 8000f68:	f004 fd39 	bl	80059de <HAL_GPIO_WritePin>
	pin_off[actuator] = 0;
 8000f6c:	1dfb      	adds	r3, r7, #7
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	4a3e      	ldr	r2, [pc, #248]	@ (800106c <DRV_Activate+0x15c>)
 8000f72:	2100      	movs	r1, #0
 8000f74:	54d1      	strb	r1, [r2, r3]

	// Unlock the SPI_IN register. Refer to section 8.6.1.5
	command.spi_in_lock = SPI_IN_UNLOCK;
 8000f76:	0028      	movs	r0, r5
 8000f78:	183b      	adds	r3, r7, r0
 8000f7a:	781a      	ldrb	r2, [r3, #0]
 8000f7c:	2118      	movs	r1, #24
 8000f7e:	438a      	bics	r2, r1
 8000f80:	1c11      	adds	r1, r2, #0
 8000f82:	2210      	movs	r2, #16
 8000f84:	430a      	orrs	r2, r1
 8000f86:	701a      	strb	r2, [r3, #0]
	status = DRV_SetCommand(&command);
 8000f88:	0025      	movs	r5, r4
 8000f8a:	193c      	adds	r4, r7, r4
 8000f8c:	183b      	adds	r3, r7, r0
 8000f8e:	0018      	movs	r0, r3
 8000f90:	f000 fa6a 	bl	8001468 <DRV_SetCommand>
 8000f94:	0003      	movs	r3, r0
 8000f96:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8000f98:	197b      	adds	r3, r7, r5
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	b25b      	sxtb	r3, r3
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d003      	beq.n	8000faa <DRV_Activate+0x9a>
 8000fa2:	197b      	adds	r3, r7, r5
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	b25b      	sxtb	r3, r3
 8000fa8:	e051      	b.n	800104e <DRV_Activate+0x13e>

	// Turn on the DRV8244
	spi_in.s_en_in1 = 0;
 8000faa:	2008      	movs	r0, #8
 8000fac:	183b      	adds	r3, r7, r0
 8000fae:	781a      	ldrb	r2, [r3, #0]
 8000fb0:	2102      	movs	r1, #2
 8000fb2:	438a      	bics	r2, r1
 8000fb4:	701a      	strb	r2, [r3, #0]
	spi_in.s_drv_off = 0;
 8000fb6:	183b      	adds	r3, r7, r0
 8000fb8:	781a      	ldrb	r2, [r3, #0]
 8000fba:	2108      	movs	r1, #8
 8000fbc:	438a      	bics	r2, r1
 8000fbe:	701a      	strb	r2, [r3, #0]
	spi_in.s_drv_off2 = 0;
 8000fc0:	183b      	adds	r3, r7, r0
 8000fc2:	781a      	ldrb	r2, [r3, #0]
 8000fc4:	2104      	movs	r1, #4
 8000fc6:	438a      	bics	r2, r1
 8000fc8:	701a      	strb	r2, [r3, #0]
	if(target > current)
 8000fca:	1cba      	adds	r2, r7, #2
 8000fcc:	1d3b      	adds	r3, r7, #4
 8000fce:	8812      	ldrh	r2, [r2, #0]
 8000fd0:	881b      	ldrh	r3, [r3, #0]
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	d905      	bls.n	8000fe2 <DRV_Activate+0xd2>
	{
		// Extend
		spi_in.s_ph_in2 = 1;
 8000fd6:	183b      	adds	r3, r7, r0
 8000fd8:	781a      	ldrb	r2, [r3, #0]
 8000fda:	2101      	movs	r1, #1
 8000fdc:	430a      	orrs	r2, r1
 8000fde:	701a      	strb	r2, [r3, #0]
 8000fe0:	e005      	b.n	8000fee <DRV_Activate+0xde>
	}
	else
	{
		// Retract
		spi_in.s_ph_in2 = 0;
 8000fe2:	2308      	movs	r3, #8
 8000fe4:	18fb      	adds	r3, r7, r3
 8000fe6:	781a      	ldrb	r2, [r3, #0]
 8000fe8:	2101      	movs	r1, #1
 8000fea:	438a      	bics	r2, r1
 8000fec:	701a      	strb	r2, [r3, #0]
	}
	status = DRV_SetSpiIn(&spi_in);
 8000fee:	250f      	movs	r5, #15
 8000ff0:	197c      	adds	r4, r7, r5
 8000ff2:	2308      	movs	r3, #8
 8000ff4:	18fb      	adds	r3, r7, r3
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	f000 fa6c 	bl	80014d4 <DRV_SetSpiIn>
 8000ffc:	0003      	movs	r3, r0
 8000ffe:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8001000:	197b      	adds	r3, r7, r5
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	b25b      	sxtb	r3, r3
 8001006:	2b00      	cmp	r3, #0
 8001008:	d003      	beq.n	8001012 <DRV_Activate+0x102>
 800100a:	197b      	adds	r3, r7, r5
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	b25b      	sxtb	r3, r3
 8001010:	e01d      	b.n	800104e <DRV_Activate+0x13e>

	// Lock the SPI_IN register. Refer to section 8.6.1.5
	command.spi_in_lock = SPI_IN_LOCK;
 8001012:	200c      	movs	r0, #12
 8001014:	183b      	adds	r3, r7, r0
 8001016:	781a      	ldrb	r2, [r3, #0]
 8001018:	2118      	movs	r1, #24
 800101a:	438a      	bics	r2, r1
 800101c:	1c11      	adds	r1, r2, #0
 800101e:	2208      	movs	r2, #8
 8001020:	430a      	orrs	r2, r1
 8001022:	701a      	strb	r2, [r3, #0]
	status = DRV_SetCommand(&command);
 8001024:	250f      	movs	r5, #15
 8001026:	197c      	adds	r4, r7, r5
 8001028:	183b      	adds	r3, r7, r0
 800102a:	0018      	movs	r0, r3
 800102c:	f000 fa1c 	bl	8001468 <DRV_SetCommand>
 8001030:	0003      	movs	r3, r0
 8001032:	7023      	strb	r3, [r4, #0]

	// Set the PWM Frequency
	TIM1->CCR1 = 40;
 8001034:	4b0e      	ldr	r3, [pc, #56]	@ (8001070 <DRV_Activate+0x160>)
 8001036:	2228      	movs	r2, #40	@ 0x28
 8001038:	635a      	str	r2, [r3, #52]	@ 0x34

	drv_on = 1;
 800103a:	4b0e      	ldr	r3, [pc, #56]	@ (8001074 <DRV_Activate+0x164>)
 800103c:	2201      	movs	r2, #1
 800103e:	701a      	strb	r2, [r3, #0]
	selected_actuator = actuator;
 8001040:	4b0d      	ldr	r3, [pc, #52]	@ (8001078 <DRV_Activate+0x168>)
 8001042:	1dfa      	adds	r2, r7, #7
 8001044:	7812      	ldrb	r2, [r2, #0]
 8001046:	701a      	strb	r2, [r3, #0]

	return status;
 8001048:	197b      	adds	r3, r7, r5
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	b25b      	sxtb	r3, r3
}
 800104e:	0018      	movs	r0, r3
 8001050:	46bd      	mov	sp, r7
 8001052:	b004      	add	sp, #16
 8001054:	bdb0      	pop	{r4, r5, r7, pc}
 8001056:	46c0      	nop			@ (mov r8, r8)
 8001058:	0800c18c 	.word	0x0800c18c
 800105c:	0800c190 	.word	0x0800c190
 8001060:	200002f4 	.word	0x200002f4
 8001064:	20000698 	.word	0x20000698
 8001068:	20000690 	.word	0x20000690
 800106c:	200002f8 	.word	0x200002f8
 8001070:	40012c00 	.word	0x40012c00
 8001074:	200002ed 	.word	0x200002ed
 8001078:	20000010 	.word	0x20000010

0800107c <DRV_Init>:

    return command_sat;
}

int8_t DRV_Init(uint8_t device_id)
{
 800107c:	b5b0      	push	{r4, r5, r7, lr}
 800107e:	b08c      	sub	sp, #48	@ 0x30
 8001080:	af00      	add	r7, sp, #0
 8001082:	0002      	movs	r2, r0
 8001084:	1dfb      	adds	r3, r7, #7
 8001086:	701a      	strb	r2, [r3, #0]
	int8_t status = HAL_OK;
 8001088:	242f      	movs	r4, #47	@ 0x2f
 800108a:	193b      	adds	r3, r7, r4
 800108c:	2200      	movs	r2, #0
 800108e:	701a      	strb	r2, [r3, #0]
	pin_off[0] = 1;
 8001090:	4bcd      	ldr	r3, [pc, #820]	@ (80013c8 <DRV_Init+0x34c>)
 8001092:	2201      	movs	r2, #1
 8001094:	701a      	strb	r2, [r3, #0]
	pin_off[1] = 1;
 8001096:	4bcc      	ldr	r3, [pc, #816]	@ (80013c8 <DRV_Init+0x34c>)
 8001098:	2201      	movs	r2, #1
 800109a:	705a      	strb	r2, [r3, #1]
	pin_off[2] = 1;
 800109c:	4bca      	ldr	r3, [pc, #808]	@ (80013c8 <DRV_Init+0x34c>)
 800109e:	2201      	movs	r2, #1
 80010a0:	709a      	strb	r2, [r3, #2]

	// Initialize the PWM signal
	TIM1->CCR1 = 0;
 80010a2:	4bca      	ldr	r3, [pc, #808]	@ (80013cc <DRV_Init+0x350>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	635a      	str	r2, [r3, #52]	@ 0x34
	status = HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80010a8:	4bc9      	ldr	r3, [pc, #804]	@ (80013d0 <DRV_Init+0x354>)
 80010aa:	2100      	movs	r1, #0
 80010ac:	0018      	movs	r0, r3
 80010ae:	f008 f977 	bl	80093a0 <HAL_TIM_PWM_Start>
 80010b2:	0003      	movs	r3, r0
 80010b4:	001a      	movs	r2, r3
 80010b6:	193b      	adds	r3, r7, r4
 80010b8:	701a      	strb	r2, [r3, #0]
	if(status != HAL_OK){return status;}
 80010ba:	193b      	adds	r3, r7, r4
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	b25b      	sxtb	r3, r3
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d003      	beq.n	80010cc <DRV_Init+0x50>
 80010c4:	193b      	adds	r3, r7, r4
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	b25b      	sxtb	r3, r3
 80010ca:	e179      	b.n	80013c0 <DRV_Init+0x344>

	// Test communication by reading the Device ID
	uint8_t dev_id = 0;
 80010cc:	212e      	movs	r1, #46	@ 0x2e
 80010ce:	187b      	adds	r3, r7, r1
 80010d0:	2200      	movs	r2, #0
 80010d2:	701a      	strb	r2, [r3, #0]
	status = DRV_GetDeviceId(&dev_id);
 80010d4:	252f      	movs	r5, #47	@ 0x2f
 80010d6:	197c      	adds	r4, r7, r5
 80010d8:	187b      	adds	r3, r7, r1
 80010da:	0018      	movs	r0, r3
 80010dc:	f000 f97a 	bl	80013d4 <DRV_GetDeviceId>
 80010e0:	0003      	movs	r3, r0
 80010e2:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80010e4:	197b      	adds	r3, r7, r5
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	b25b      	sxtb	r3, r3
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d003      	beq.n	80010f6 <DRV_Init+0x7a>
 80010ee:	197b      	adds	r3, r7, r5
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	b25b      	sxtb	r3, r3
 80010f4:	e164      	b.n	80013c0 <DRV_Init+0x344>

	if(dev_id == device_id)
 80010f6:	232e      	movs	r3, #46	@ 0x2e
 80010f8:	18fb      	adds	r3, r7, r3
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	1dfa      	adds	r2, r7, #7
 80010fe:	7812      	ldrb	r2, [r2, #0]
 8001100:	429a      	cmp	r2, r3
 8001102:	d000      	beq.n	8001106 <DRV_Init+0x8a>
 8001104:	e156      	b.n	80013b4 <DRV_Init+0x338>
	{
		// Unlock the Config Registers, clear the fault register. Refer to section 8.6.1.5
		drv_command_t command;
		command.clr_flt = 1;
 8001106:	202c      	movs	r0, #44	@ 0x2c
 8001108:	183b      	adds	r3, r7, r0
 800110a:	781a      	ldrb	r2, [r3, #0]
 800110c:	2180      	movs	r1, #128	@ 0x80
 800110e:	4249      	negs	r1, r1
 8001110:	430a      	orrs	r2, r1
 8001112:	701a      	strb	r2, [r3, #0]
		command.reg_lock = REG_UNLOCK;
 8001114:	183b      	adds	r3, r7, r0
 8001116:	781a      	ldrb	r2, [r3, #0]
 8001118:	2103      	movs	r1, #3
 800111a:	438a      	bics	r2, r1
 800111c:	1c11      	adds	r1, r2, #0
 800111e:	2201      	movs	r2, #1
 8001120:	430a      	orrs	r2, r1
 8001122:	701a      	strb	r2, [r3, #0]
		command.spi_in_lock = SPI_IN_LOCK;
 8001124:	183b      	adds	r3, r7, r0
 8001126:	781a      	ldrb	r2, [r3, #0]
 8001128:	2118      	movs	r1, #24
 800112a:	438a      	bics	r2, r1
 800112c:	1c11      	adds	r1, r2, #0
 800112e:	2208      	movs	r2, #8
 8001130:	430a      	orrs	r2, r1
 8001132:	701a      	strb	r2, [r3, #0]
		status = DRV_SetCommand(&command);
 8001134:	252f      	movs	r5, #47	@ 0x2f
 8001136:	197c      	adds	r4, r7, r5
 8001138:	183b      	adds	r3, r7, r0
 800113a:	0018      	movs	r0, r3
 800113c:	f000 f994 	bl	8001468 <DRV_SetCommand>
 8001140:	0003      	movs	r3, r0
 8001142:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK){return status;}
 8001144:	197b      	adds	r3, r7, r5
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	b25b      	sxtb	r3, r3
 800114a:	2b00      	cmp	r3, #0
 800114c:	d003      	beq.n	8001156 <DRV_Init+0xda>
 800114e:	197b      	adds	r3, r7, r5
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	b25b      	sxtb	r3, r3
 8001154:	e134      	b.n	80013c0 <DRV_Init+0x344>

		drv_config_1_t w_config_1;
		w_config_1.raw_data = 0;
 8001156:	2028      	movs	r0, #40	@ 0x28
 8001158:	183b      	adds	r3, r7, r0
 800115a:	2200      	movs	r2, #0
 800115c:	701a      	strb	r2, [r3, #0]
		w_config_1.en_ola = 1;
 800115e:	183b      	adds	r3, r7, r0
 8001160:	781a      	ldrb	r2, [r3, #0]
 8001162:	2180      	movs	r1, #128	@ 0x80
 8001164:	4249      	negs	r1, r1
 8001166:	430a      	orrs	r2, r1
 8001168:	701a      	strb	r2, [r3, #0]
		w_config_1.ocp_retry = 1;
 800116a:	183b      	adds	r3, r7, r0
 800116c:	781a      	ldrb	r2, [r3, #0]
 800116e:	2108      	movs	r1, #8
 8001170:	430a      	orrs	r2, r1
 8001172:	701a      	strb	r2, [r3, #0]
		w_config_1.ola_retry = 1;
 8001174:	183b      	adds	r3, r7, r0
 8001176:	781a      	ldrb	r2, [r3, #0]
 8001178:	2101      	movs	r1, #1
 800117a:	430a      	orrs	r2, r1
 800117c:	701a      	strb	r2, [r3, #0]
		w_config_1.ssc_dis = 1;
 800117e:	183b      	adds	r3, r7, r0
 8001180:	781a      	ldrb	r2, [r3, #0]
 8001182:	2110      	movs	r1, #16
 8001184:	430a      	orrs	r2, r1
 8001186:	701a      	strb	r2, [r3, #0]
		w_config_1.tsd_retry = 1;
 8001188:	183b      	adds	r3, r7, r0
 800118a:	781a      	ldrb	r2, [r3, #0]
 800118c:	2104      	movs	r1, #4
 800118e:	430a      	orrs	r2, r1
 8001190:	701a      	strb	r2, [r3, #0]
		w_config_1.vmov_retry = 1;
 8001192:	183b      	adds	r3, r7, r0
 8001194:	781a      	ldrb	r2, [r3, #0]
 8001196:	2102      	movs	r1, #2
 8001198:	430a      	orrs	r2, r1
 800119a:	701a      	strb	r2, [r3, #0]
		w_config_1.vmov_sel = VMOV_SEL_18V;
 800119c:	183b      	adds	r3, r7, r0
 800119e:	781a      	ldrb	r2, [r3, #0]
 80011a0:	2160      	movs	r1, #96	@ 0x60
 80011a2:	438a      	bics	r2, r1
 80011a4:	1c11      	adds	r1, r2, #0
 80011a6:	2240      	movs	r2, #64	@ 0x40
 80011a8:	430a      	orrs	r2, r1
 80011aa:	701a      	strb	r2, [r3, #0]
		status = DRV_SetConfig1(&w_config_1);
 80011ac:	252f      	movs	r5, #47	@ 0x2f
 80011ae:	197c      	adds	r4, r7, r5
 80011b0:	183b      	adds	r3, r7, r0
 80011b2:	0018      	movs	r0, r3
 80011b4:	f000 fa04 	bl	80015c0 <DRV_SetConfig1>
 80011b8:	0003      	movs	r3, r0
 80011ba:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK){return status;}
 80011bc:	197b      	adds	r3, r7, r5
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	b25b      	sxtb	r3, r3
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d003      	beq.n	80011ce <DRV_Init+0x152>
 80011c6:	197b      	adds	r3, r7, r5
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	b25b      	sxtb	r3, r3
 80011cc:	e0f8      	b.n	80013c0 <DRV_Init+0x344>

		drv_config_2_t w_config_2;
		w_config_2.raw_data = 0;
 80011ce:	2024      	movs	r0, #36	@ 0x24
 80011d0:	183b      	adds	r3, r7, r0
 80011d2:	2200      	movs	r2, #0
 80011d4:	701a      	strb	r2, [r3, #0]
		w_config_2.pwm_extend = 0;
 80011d6:	183b      	adds	r3, r7, r0
 80011d8:	781a      	ldrb	r2, [r3, #0]
 80011da:	217f      	movs	r1, #127	@ 0x7f
 80011dc:	400a      	ands	r2, r1
 80011de:	701a      	strb	r2, [r3, #0]
		w_config_2.s_diag = S_DIAG_MODE_3;
 80011e0:	183b      	adds	r3, r7, r0
 80011e2:	781a      	ldrb	r2, [r3, #0]
 80011e4:	2160      	movs	r1, #96	@ 0x60
 80011e6:	430a      	orrs	r2, r1
 80011e8:	701a      	strb	r2, [r3, #0]
		w_config_2.s_itrip = S_ITRIP_DISABLE;
 80011ea:	183b      	adds	r3, r7, r0
 80011ec:	781a      	ldrb	r2, [r3, #0]
 80011ee:	2107      	movs	r1, #7
 80011f0:	438a      	bics	r2, r1
 80011f2:	701a      	strb	r2, [r3, #0]
		status = DRV_SetConfig2(&w_config_2);
 80011f4:	252f      	movs	r5, #47	@ 0x2f
 80011f6:	197c      	adds	r4, r7, r5
 80011f8:	183b      	adds	r3, r7, r0
 80011fa:	0018      	movs	r0, r3
 80011fc:	f000 fa56 	bl	80016ac <DRV_SetConfig2>
 8001200:	0003      	movs	r3, r0
 8001202:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK){return status;}
 8001204:	197b      	adds	r3, r7, r5
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	b25b      	sxtb	r3, r3
 800120a:	2b00      	cmp	r3, #0
 800120c:	d003      	beq.n	8001216 <DRV_Init+0x19a>
 800120e:	197b      	adds	r3, r7, r5
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	b25b      	sxtb	r3, r3
 8001214:	e0d4      	b.n	80013c0 <DRV_Init+0x344>

		// Configure PH/EN Mode
		drv_config_3_t w_config_3;
		w_config_3.raw_data = 0;
 8001216:	2020      	movs	r0, #32
 8001218:	183b      	adds	r3, r7, r0
 800121a:	2200      	movs	r2, #0
 800121c:	701a      	strb	r2, [r3, #0]
		w_config_3.s_mode = S_MODE_PH_EN;
 800121e:	183b      	adds	r3, r7, r0
 8001220:	781a      	ldrb	r2, [r3, #0]
 8001222:	2103      	movs	r1, #3
 8001224:	438a      	bics	r2, r1
 8001226:	701a      	strb	r2, [r3, #0]
		w_config_3.toff = TOFF_40US;
 8001228:	183b      	adds	r3, r7, r0
 800122a:	781a      	ldrb	r2, [r3, #0]
 800122c:	213f      	movs	r1, #63	@ 0x3f
 800122e:	400a      	ands	r2, r1
 8001230:	1c11      	adds	r1, r2, #0
 8001232:	2280      	movs	r2, #128	@ 0x80
 8001234:	4252      	negs	r2, r2
 8001236:	430a      	orrs	r2, r1
 8001238:	701a      	strb	r2, [r3, #0]
		w_config_3.s_sr = 0;
 800123a:	183b      	adds	r3, r7, r0
 800123c:	781a      	ldrb	r2, [r3, #0]
 800123e:	211c      	movs	r1, #28
 8001240:	438a      	bics	r2, r1
 8001242:	701a      	strb	r2, [r3, #0]
		status = DRV_SetConfig3(&w_config_3);
 8001244:	252f      	movs	r5, #47	@ 0x2f
 8001246:	197c      	adds	r4, r7, r5
 8001248:	183b      	adds	r3, r7, r0
 800124a:	0018      	movs	r0, r3
 800124c:	f000 faa4 	bl	8001798 <DRV_SetConfig3>
 8001250:	0003      	movs	r3, r0
 8001252:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK){return status;}
 8001254:	197b      	adds	r3, r7, r5
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	b25b      	sxtb	r3, r3
 800125a:	2b00      	cmp	r3, #0
 800125c:	d003      	beq.n	8001266 <DRV_Init+0x1ea>
 800125e:	197b      	adds	r3, r7, r5
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	b25b      	sxtb	r3, r3
 8001264:	e0ac      	b.n	80013c0 <DRV_Init+0x344>

		// Configure the DRV to allow the SPI bit configuration to control the h-bridge
		drv_config_4_t w_config_4;
		w_config_4.raw_data = 0;
 8001266:	201c      	movs	r0, #28
 8001268:	183b      	adds	r3, r7, r0
 800126a:	2200      	movs	r2, #0
 800126c:	701a      	strb	r2, [r3, #0]
		w_config_4.drvoff_sel = DRVOFF_SEL_OR;
 800126e:	183b      	adds	r3, r7, r0
 8001270:	781a      	ldrb	r2, [r3, #0]
 8001272:	2104      	movs	r1, #4
 8001274:	438a      	bics	r2, r1
 8001276:	701a      	strb	r2, [r3, #0]
		w_config_4.en_in1_sel = EN_IN1_SEL_OR;
 8001278:	183b      	adds	r3, r7, r0
 800127a:	781a      	ldrb	r2, [r3, #0]
 800127c:	2102      	movs	r1, #2
 800127e:	438a      	bics	r2, r1
 8001280:	701a      	strb	r2, [r3, #0]
		w_config_4.ph_in2_sel = PH_IN2_SEL_OR;
 8001282:	183b      	adds	r3, r7, r0
 8001284:	781a      	ldrb	r2, [r3, #0]
 8001286:	2101      	movs	r1, #1
 8001288:	438a      	bics	r2, r1
 800128a:	701a      	strb	r2, [r3, #0]
		w_config_4.tocp_sel = TOCP_SEL_6US;
 800128c:	183b      	adds	r3, r7, r0
 800128e:	781a      	ldrb	r2, [r3, #0]
 8001290:	213f      	movs	r1, #63	@ 0x3f
 8001292:	400a      	ands	r2, r1
 8001294:	701a      	strb	r2, [r3, #0]
		w_config_4.ocp_sel = OCP_SEL_100;
 8001296:	183b      	adds	r3, r7, r0
 8001298:	781a      	ldrb	r2, [r3, #0]
 800129a:	2118      	movs	r1, #24
 800129c:	438a      	bics	r2, r1
 800129e:	701a      	strb	r2, [r3, #0]
		status = DRV_SetConfig4(&w_config_4);
 80012a0:	252f      	movs	r5, #47	@ 0x2f
 80012a2:	197c      	adds	r4, r7, r5
 80012a4:	183b      	adds	r3, r7, r0
 80012a6:	0018      	movs	r0, r3
 80012a8:	f000 faec 	bl	8001884 <DRV_SetConfig4>
 80012ac:	0003      	movs	r3, r0
 80012ae:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK){return status;}
 80012b0:	197b      	adds	r3, r7, r5
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	b25b      	sxtb	r3, r3
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d003      	beq.n	80012c2 <DRV_Init+0x246>
 80012ba:	197b      	adds	r3, r7, r5
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	b25b      	sxtb	r3, r3
 80012c0:	e07e      	b.n	80013c0 <DRV_Init+0x344>

		// Lock the Config Registers. Refer to section 8.6.1.5
		command.reg_lock = REG_LOCK;
 80012c2:	202c      	movs	r0, #44	@ 0x2c
 80012c4:	183b      	adds	r3, r7, r0
 80012c6:	781a      	ldrb	r2, [r3, #0]
 80012c8:	2103      	movs	r1, #3
 80012ca:	438a      	bics	r2, r1
 80012cc:	1c11      	adds	r1, r2, #0
 80012ce:	2202      	movs	r2, #2
 80012d0:	430a      	orrs	r2, r1
 80012d2:	701a      	strb	r2, [r3, #0]
		status = DRV_SetCommand(&command);
 80012d4:	252f      	movs	r5, #47	@ 0x2f
 80012d6:	197c      	adds	r4, r7, r5
 80012d8:	183b      	adds	r3, r7, r0
 80012da:	0018      	movs	r0, r3
 80012dc:	f000 f8c4 	bl	8001468 <DRV_SetCommand>
 80012e0:	0003      	movs	r3, r0
 80012e2:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK){return status;}
 80012e4:	197b      	adds	r3, r7, r5
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	b25b      	sxtb	r3, r3
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d003      	beq.n	80012f6 <DRV_Init+0x27a>
 80012ee:	197b      	adds	r3, r7, r5
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	b25b      	sxtb	r3, r3
 80012f4:	e064      	b.n	80013c0 <DRV_Init+0x344>
		drv_config_1_t r_config_1;
		drv_config_2_t r_config_2;
		drv_config_3_t r_config_3;
		drv_config_4_t r_config_4;

		status = DRV_GetConfig1(&r_config_1);
 80012f6:	252f      	movs	r5, #47	@ 0x2f
 80012f8:	197c      	adds	r4, r7, r5
 80012fa:	2318      	movs	r3, #24
 80012fc:	18fb      	adds	r3, r7, r3
 80012fe:	0018      	movs	r0, r3
 8001300:	f000 f91e 	bl	8001540 <DRV_GetConfig1>
 8001304:	0003      	movs	r3, r0
 8001306:	7023      	strb	r3, [r4, #0]
		status |= DRV_GetConfig2(&r_config_2);
 8001308:	2314      	movs	r3, #20
 800130a:	18fb      	adds	r3, r7, r3
 800130c:	0018      	movs	r0, r3
 800130e:	f000 f98d 	bl	800162c <DRV_GetConfig2>
 8001312:	0003      	movs	r3, r0
 8001314:	0019      	movs	r1, r3
 8001316:	002c      	movs	r4, r5
 8001318:	193b      	adds	r3, r7, r4
 800131a:	193a      	adds	r2, r7, r4
 800131c:	7812      	ldrb	r2, [r2, #0]
 800131e:	430a      	orrs	r2, r1
 8001320:	701a      	strb	r2, [r3, #0]
		status |= DRV_GetConfig3(&r_config_3);
 8001322:	2310      	movs	r3, #16
 8001324:	18fb      	adds	r3, r7, r3
 8001326:	0018      	movs	r0, r3
 8001328:	f000 f9f6 	bl	8001718 <DRV_GetConfig3>
 800132c:	0003      	movs	r3, r0
 800132e:	0019      	movs	r1, r3
 8001330:	193b      	adds	r3, r7, r4
 8001332:	193a      	adds	r2, r7, r4
 8001334:	7812      	ldrb	r2, [r2, #0]
 8001336:	430a      	orrs	r2, r1
 8001338:	701a      	strb	r2, [r3, #0]
		status |= DRV_GetConfig4(&r_config_4);
 800133a:	230c      	movs	r3, #12
 800133c:	18fb      	adds	r3, r7, r3
 800133e:	0018      	movs	r0, r3
 8001340:	f000 fa60 	bl	8001804 <DRV_GetConfig4>
 8001344:	0003      	movs	r3, r0
 8001346:	0019      	movs	r1, r3
 8001348:	193b      	adds	r3, r7, r4
 800134a:	193a      	adds	r2, r7, r4
 800134c:	7812      	ldrb	r2, [r2, #0]
 800134e:	430a      	orrs	r2, r1
 8001350:	701a      	strb	r2, [r3, #0]
		if(status != HAL_OK){return status;}
 8001352:	193b      	adds	r3, r7, r4
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	b25b      	sxtb	r3, r3
 8001358:	2b00      	cmp	r3, #0
 800135a:	d003      	beq.n	8001364 <DRV_Init+0x2e8>
 800135c:	193b      	adds	r3, r7, r4
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	b25b      	sxtb	r3, r3
 8001362:	e02d      	b.n	80013c0 <DRV_Init+0x344>

		if(r_config_1.raw_data != w_config_1.raw_data){return HAL_ERROR;}
 8001364:	2318      	movs	r3, #24
 8001366:	18fb      	adds	r3, r7, r3
 8001368:	781a      	ldrb	r2, [r3, #0]
 800136a:	2328      	movs	r3, #40	@ 0x28
 800136c:	18fb      	adds	r3, r7, r3
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	429a      	cmp	r2, r3
 8001372:	d001      	beq.n	8001378 <DRV_Init+0x2fc>
 8001374:	2301      	movs	r3, #1
 8001376:	e023      	b.n	80013c0 <DRV_Init+0x344>
		if(r_config_2.raw_data != w_config_2.raw_data){return HAL_ERROR;}
 8001378:	2314      	movs	r3, #20
 800137a:	18fb      	adds	r3, r7, r3
 800137c:	781a      	ldrb	r2, [r3, #0]
 800137e:	2324      	movs	r3, #36	@ 0x24
 8001380:	18fb      	adds	r3, r7, r3
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	429a      	cmp	r2, r3
 8001386:	d001      	beq.n	800138c <DRV_Init+0x310>
 8001388:	2301      	movs	r3, #1
 800138a:	e019      	b.n	80013c0 <DRV_Init+0x344>
		if(r_config_3.raw_data != w_config_3.raw_data){return HAL_ERROR;}
 800138c:	2310      	movs	r3, #16
 800138e:	18fb      	adds	r3, r7, r3
 8001390:	781a      	ldrb	r2, [r3, #0]
 8001392:	2320      	movs	r3, #32
 8001394:	18fb      	adds	r3, r7, r3
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	429a      	cmp	r2, r3
 800139a:	d001      	beq.n	80013a0 <DRV_Init+0x324>
 800139c:	2301      	movs	r3, #1
 800139e:	e00f      	b.n	80013c0 <DRV_Init+0x344>
		if(r_config_4.raw_data != w_config_4.raw_data){return HAL_ERROR;}
 80013a0:	230c      	movs	r3, #12
 80013a2:	18fb      	adds	r3, r7, r3
 80013a4:	781a      	ldrb	r2, [r3, #0]
 80013a6:	231c      	movs	r3, #28
 80013a8:	18fb      	adds	r3, r7, r3
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d003      	beq.n	80013b8 <DRV_Init+0x33c>
 80013b0:	2301      	movs	r3, #1
 80013b2:	e005      	b.n	80013c0 <DRV_Init+0x344>
	}
	else
	{
		return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e003      	b.n	80013c0 <DRV_Init+0x344>
	}
	return status;
 80013b8:	232f      	movs	r3, #47	@ 0x2f
 80013ba:	18fb      	adds	r3, r7, r3
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	b25b      	sxtb	r3, r3
}
 80013c0:	0018      	movs	r0, r3
 80013c2:	46bd      	mov	sp, r7
 80013c4:	b00c      	add	sp, #48	@ 0x30
 80013c6:	bdb0      	pop	{r4, r5, r7, pc}
 80013c8:	200002f8 	.word	0x200002f8
 80013cc:	40012c00 	.word	0x40012c00
 80013d0:	20000474 	.word	0x20000474

080013d4 <DRV_GetDeviceId>:

int8_t DRV_GetDeviceId(uint8_t* device_id)
{
 80013d4:	b590      	push	{r4, r7, lr}
 80013d6:	b087      	sub	sp, #28
 80013d8:	af02      	add	r7, sp, #8
 80013da:	6078      	str	r0, [r7, #4]
	int8_t status = HAL_OK;
 80013dc:	240f      	movs	r4, #15
 80013de:	193b      	adds	r3, r7, r4
 80013e0:	2200      	movs	r2, #0
 80013e2:	701a      	strb	r2, [r3, #0]
	tx_data[0] = (DEVICE_ID | READ_MASK);
 80013e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001458 <DRV_GetDeviceId+0x84>)
 80013e6:	2240      	movs	r2, #64	@ 0x40
 80013e8:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0;
 80013ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001458 <DRV_GetDeviceId+0x84>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	705a      	strb	r2, [r3, #1]
	rx_data[0] = 0;
 80013f0:	4b1a      	ldr	r3, [pc, #104]	@ (800145c <DRV_GetDeviceId+0x88>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	701a      	strb	r2, [r3, #0]
	rx_data[0] = 0;
 80013f6:	4b19      	ldr	r3, [pc, #100]	@ (800145c <DRV_GetDeviceId+0x88>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_RESET);
 80013fc:	4b18      	ldr	r3, [pc, #96]	@ (8001460 <DRV_GetDeviceId+0x8c>)
 80013fe:	2200      	movs	r2, #0
 8001400:	2101      	movs	r1, #1
 8001402:	0018      	movs	r0, r3
 8001404:	f004 faeb 	bl	80059de <HAL_GPIO_WritePin>
	status = HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 100);
 8001408:	4a14      	ldr	r2, [pc, #80]	@ (800145c <DRV_GetDeviceId+0x88>)
 800140a:	4913      	ldr	r1, [pc, #76]	@ (8001458 <DRV_GetDeviceId+0x84>)
 800140c:	4815      	ldr	r0, [pc, #84]	@ (8001464 <DRV_GetDeviceId+0x90>)
 800140e:	2364      	movs	r3, #100	@ 0x64
 8001410:	9300      	str	r3, [sp, #0]
 8001412:	2302      	movs	r3, #2
 8001414:	f007 fa80 	bl	8008918 <HAL_SPI_TransmitReceive>
 8001418:	0003      	movs	r3, r0
 800141a:	001a      	movs	r2, r3
 800141c:	193b      	adds	r3, r7, r4
 800141e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_SET);
 8001420:	4b0f      	ldr	r3, [pc, #60]	@ (8001460 <DRV_GetDeviceId+0x8c>)
 8001422:	2201      	movs	r2, #1
 8001424:	2101      	movs	r1, #1
 8001426:	0018      	movs	r0, r3
 8001428:	f004 fad9 	bl	80059de <HAL_GPIO_WritePin>
	if(status != HAL_OK){return status;}
 800142c:	193b      	adds	r3, r7, r4
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	b25b      	sxtb	r3, r3
 8001432:	2b00      	cmp	r3, #0
 8001434:	d003      	beq.n	800143e <DRV_GetDeviceId+0x6a>
 8001436:	193b      	adds	r3, r7, r4
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	b25b      	sxtb	r3, r3
 800143c:	e007      	b.n	800144e <DRV_GetDeviceId+0x7a>

	(*device_id) = rx_data[1];
 800143e:	4b07      	ldr	r3, [pc, #28]	@ (800145c <DRV_GetDeviceId+0x88>)
 8001440:	785a      	ldrb	r2, [r3, #1]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	701a      	strb	r2, [r3, #0]
	return status;
 8001446:	230f      	movs	r3, #15
 8001448:	18fb      	adds	r3, r7, r3
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	b25b      	sxtb	r3, r3
}
 800144e:	0018      	movs	r0, r3
 8001450:	46bd      	mov	sp, r7
 8001452:	b005      	add	sp, #20
 8001454:	bd90      	pop	{r4, r7, pc}
 8001456:	46c0      	nop			@ (mov r8, r8)
 8001458:	200002fc 	.word	0x200002fc
 800145c:	20000300 	.word	0x20000300
 8001460:	50000c00 	.word	0x50000c00
 8001464:	20000410 	.word	0x20000410

08001468 <DRV_SetCommand>:
	command->raw_data = rx_data[1];
	return status;
}

int8_t DRV_SetCommand(drv_command_t* command)
{
 8001468:	b590      	push	{r4, r7, lr}
 800146a:	b087      	sub	sp, #28
 800146c:	af02      	add	r7, sp, #8
 800146e:	6078      	str	r0, [r7, #4]
	int8_t status = HAL_OK;
 8001470:	240f      	movs	r4, #15
 8001472:	193b      	adds	r3, r7, r4
 8001474:	2200      	movs	r2, #0
 8001476:	701a      	strb	r2, [r3, #0]

	tx_data[0] = COMMAND;
 8001478:	4b12      	ldr	r3, [pc, #72]	@ (80014c4 <DRV_SetCommand+0x5c>)
 800147a:	2208      	movs	r2, #8
 800147c:	701a      	strb	r2, [r3, #0]
	tx_data[1] = command->raw_data;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	781a      	ldrb	r2, [r3, #0]
 8001482:	4b10      	ldr	r3, [pc, #64]	@ (80014c4 <DRV_SetCommand+0x5c>)
 8001484:	705a      	strb	r2, [r3, #1]

	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_RESET);
 8001486:	4b10      	ldr	r3, [pc, #64]	@ (80014c8 <DRV_SetCommand+0x60>)
 8001488:	2200      	movs	r2, #0
 800148a:	2101      	movs	r1, #1
 800148c:	0018      	movs	r0, r3
 800148e:	f004 faa6 	bl	80059de <HAL_GPIO_WritePin>
	status = HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 100);
 8001492:	4a0e      	ldr	r2, [pc, #56]	@ (80014cc <DRV_SetCommand+0x64>)
 8001494:	490b      	ldr	r1, [pc, #44]	@ (80014c4 <DRV_SetCommand+0x5c>)
 8001496:	480e      	ldr	r0, [pc, #56]	@ (80014d0 <DRV_SetCommand+0x68>)
 8001498:	2364      	movs	r3, #100	@ 0x64
 800149a:	9300      	str	r3, [sp, #0]
 800149c:	2302      	movs	r3, #2
 800149e:	f007 fa3b 	bl	8008918 <HAL_SPI_TransmitReceive>
 80014a2:	0003      	movs	r3, r0
 80014a4:	001a      	movs	r2, r3
 80014a6:	193b      	adds	r3, r7, r4
 80014a8:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_SET);
 80014aa:	4b07      	ldr	r3, [pc, #28]	@ (80014c8 <DRV_SetCommand+0x60>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	2101      	movs	r1, #1
 80014b0:	0018      	movs	r0, r3
 80014b2:	f004 fa94 	bl	80059de <HAL_GPIO_WritePin>
	return status;
 80014b6:	193b      	adds	r3, r7, r4
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	b25b      	sxtb	r3, r3
}
 80014bc:	0018      	movs	r0, r3
 80014be:	46bd      	mov	sp, r7
 80014c0:	b005      	add	sp, #20
 80014c2:	bd90      	pop	{r4, r7, pc}
 80014c4:	200002fc 	.word	0x200002fc
 80014c8:	50000c00 	.word	0x50000c00
 80014cc:	20000300 	.word	0x20000300
 80014d0:	20000410 	.word	0x20000410

080014d4 <DRV_SetSpiIn>:
	spi_in->raw_data = rx_data[1];
	return status;
}

int8_t DRV_SetSpiIn(drv_spi_in_t* spi_in)
{
 80014d4:	b590      	push	{r4, r7, lr}
 80014d6:	b087      	sub	sp, #28
 80014d8:	af02      	add	r7, sp, #8
 80014da:	6078      	str	r0, [r7, #4]
	int8_t status = HAL_OK;
 80014dc:	240f      	movs	r4, #15
 80014de:	193b      	adds	r3, r7, r4
 80014e0:	2200      	movs	r2, #0
 80014e2:	701a      	strb	r2, [r3, #0]

	tx_data[0] = SPI_IN;
 80014e4:	4b12      	ldr	r3, [pc, #72]	@ (8001530 <DRV_SetSpiIn+0x5c>)
 80014e6:	2209      	movs	r2, #9
 80014e8:	701a      	strb	r2, [r3, #0]
	tx_data[1] = spi_in->raw_data;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	781a      	ldrb	r2, [r3, #0]
 80014ee:	4b10      	ldr	r3, [pc, #64]	@ (8001530 <DRV_SetSpiIn+0x5c>)
 80014f0:	705a      	strb	r2, [r3, #1]

	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_RESET);
 80014f2:	4b10      	ldr	r3, [pc, #64]	@ (8001534 <DRV_SetSpiIn+0x60>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	2101      	movs	r1, #1
 80014f8:	0018      	movs	r0, r3
 80014fa:	f004 fa70 	bl	80059de <HAL_GPIO_WritePin>
	status = HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 100);
 80014fe:	4a0e      	ldr	r2, [pc, #56]	@ (8001538 <DRV_SetSpiIn+0x64>)
 8001500:	490b      	ldr	r1, [pc, #44]	@ (8001530 <DRV_SetSpiIn+0x5c>)
 8001502:	480e      	ldr	r0, [pc, #56]	@ (800153c <DRV_SetSpiIn+0x68>)
 8001504:	2364      	movs	r3, #100	@ 0x64
 8001506:	9300      	str	r3, [sp, #0]
 8001508:	2302      	movs	r3, #2
 800150a:	f007 fa05 	bl	8008918 <HAL_SPI_TransmitReceive>
 800150e:	0003      	movs	r3, r0
 8001510:	001a      	movs	r2, r3
 8001512:	193b      	adds	r3, r7, r4
 8001514:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_SET);
 8001516:	4b07      	ldr	r3, [pc, #28]	@ (8001534 <DRV_SetSpiIn+0x60>)
 8001518:	2201      	movs	r2, #1
 800151a:	2101      	movs	r1, #1
 800151c:	0018      	movs	r0, r3
 800151e:	f004 fa5e 	bl	80059de <HAL_GPIO_WritePin>
	return status;
 8001522:	193b      	adds	r3, r7, r4
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	b25b      	sxtb	r3, r3
}
 8001528:	0018      	movs	r0, r3
 800152a:	46bd      	mov	sp, r7
 800152c:	b005      	add	sp, #20
 800152e:	bd90      	pop	{r4, r7, pc}
 8001530:	200002fc 	.word	0x200002fc
 8001534:	50000c00 	.word	0x50000c00
 8001538:	20000300 	.word	0x20000300
 800153c:	20000410 	.word	0x20000410

08001540 <DRV_GetConfig1>:

int8_t DRV_GetConfig1(drv_config_1_t* config_1)
{
 8001540:	b590      	push	{r4, r7, lr}
 8001542:	b087      	sub	sp, #28
 8001544:	af02      	add	r7, sp, #8
 8001546:	6078      	str	r0, [r7, #4]
	int8_t status = HAL_OK;
 8001548:	240f      	movs	r4, #15
 800154a:	193b      	adds	r3, r7, r4
 800154c:	2200      	movs	r2, #0
 800154e:	701a      	strb	r2, [r3, #0]

	tx_data[0] = (CONFIG_1 | READ_MASK);
 8001550:	4b17      	ldr	r3, [pc, #92]	@ (80015b0 <DRV_GetConfig1+0x70>)
 8001552:	224a      	movs	r2, #74	@ 0x4a
 8001554:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0;
 8001556:	4b16      	ldr	r3, [pc, #88]	@ (80015b0 <DRV_GetConfig1+0x70>)
 8001558:	2200      	movs	r2, #0
 800155a:	705a      	strb	r2, [r3, #1]
	rx_data[0] = 0;
 800155c:	4b15      	ldr	r3, [pc, #84]	@ (80015b4 <DRV_GetConfig1+0x74>)
 800155e:	2200      	movs	r2, #0
 8001560:	701a      	strb	r2, [r3, #0]
	rx_data[1] = 0;
 8001562:	4b14      	ldr	r3, [pc, #80]	@ (80015b4 <DRV_GetConfig1+0x74>)
 8001564:	2200      	movs	r2, #0
 8001566:	705a      	strb	r2, [r3, #1]

	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_RESET);
 8001568:	4b13      	ldr	r3, [pc, #76]	@ (80015b8 <DRV_GetConfig1+0x78>)
 800156a:	2200      	movs	r2, #0
 800156c:	2101      	movs	r1, #1
 800156e:	0018      	movs	r0, r3
 8001570:	f004 fa35 	bl	80059de <HAL_GPIO_WritePin>
	status = HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 100);
 8001574:	4a0f      	ldr	r2, [pc, #60]	@ (80015b4 <DRV_GetConfig1+0x74>)
 8001576:	490e      	ldr	r1, [pc, #56]	@ (80015b0 <DRV_GetConfig1+0x70>)
 8001578:	4810      	ldr	r0, [pc, #64]	@ (80015bc <DRV_GetConfig1+0x7c>)
 800157a:	2364      	movs	r3, #100	@ 0x64
 800157c:	9300      	str	r3, [sp, #0]
 800157e:	2302      	movs	r3, #2
 8001580:	f007 f9ca 	bl	8008918 <HAL_SPI_TransmitReceive>
 8001584:	0003      	movs	r3, r0
 8001586:	001a      	movs	r2, r3
 8001588:	193b      	adds	r3, r7, r4
 800158a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_SET);
 800158c:	4b0a      	ldr	r3, [pc, #40]	@ (80015b8 <DRV_GetConfig1+0x78>)
 800158e:	2201      	movs	r2, #1
 8001590:	2101      	movs	r1, #1
 8001592:	0018      	movs	r0, r3
 8001594:	f004 fa23 	bl	80059de <HAL_GPIO_WritePin>

	config_1->raw_data = rx_data[1];
 8001598:	4b06      	ldr	r3, [pc, #24]	@ (80015b4 <DRV_GetConfig1+0x74>)
 800159a:	785a      	ldrb	r2, [r3, #1]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	701a      	strb	r2, [r3, #0]
	return status;
 80015a0:	193b      	adds	r3, r7, r4
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	b25b      	sxtb	r3, r3
}
 80015a6:	0018      	movs	r0, r3
 80015a8:	46bd      	mov	sp, r7
 80015aa:	b005      	add	sp, #20
 80015ac:	bd90      	pop	{r4, r7, pc}
 80015ae:	46c0      	nop			@ (mov r8, r8)
 80015b0:	200002fc 	.word	0x200002fc
 80015b4:	20000300 	.word	0x20000300
 80015b8:	50000c00 	.word	0x50000c00
 80015bc:	20000410 	.word	0x20000410

080015c0 <DRV_SetConfig1>:

int8_t DRV_SetConfig1(drv_config_1_t* config_1)
{
 80015c0:	b590      	push	{r4, r7, lr}
 80015c2:	b087      	sub	sp, #28
 80015c4:	af02      	add	r7, sp, #8
 80015c6:	6078      	str	r0, [r7, #4]
	int8_t status = HAL_OK;
 80015c8:	240f      	movs	r4, #15
 80015ca:	193b      	adds	r3, r7, r4
 80015cc:	2200      	movs	r2, #0
 80015ce:	701a      	strb	r2, [r3, #0]

	tx_data[0] = CONFIG_1;
 80015d0:	4b12      	ldr	r3, [pc, #72]	@ (800161c <DRV_SetConfig1+0x5c>)
 80015d2:	220a      	movs	r2, #10
 80015d4:	701a      	strb	r2, [r3, #0]
	tx_data[1] = config_1->raw_data;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	781a      	ldrb	r2, [r3, #0]
 80015da:	4b10      	ldr	r3, [pc, #64]	@ (800161c <DRV_SetConfig1+0x5c>)
 80015dc:	705a      	strb	r2, [r3, #1]

	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_RESET);
 80015de:	4b10      	ldr	r3, [pc, #64]	@ (8001620 <DRV_SetConfig1+0x60>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	2101      	movs	r1, #1
 80015e4:	0018      	movs	r0, r3
 80015e6:	f004 f9fa 	bl	80059de <HAL_GPIO_WritePin>
	status = HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 100);
 80015ea:	4a0e      	ldr	r2, [pc, #56]	@ (8001624 <DRV_SetConfig1+0x64>)
 80015ec:	490b      	ldr	r1, [pc, #44]	@ (800161c <DRV_SetConfig1+0x5c>)
 80015ee:	480e      	ldr	r0, [pc, #56]	@ (8001628 <DRV_SetConfig1+0x68>)
 80015f0:	2364      	movs	r3, #100	@ 0x64
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	2302      	movs	r3, #2
 80015f6:	f007 f98f 	bl	8008918 <HAL_SPI_TransmitReceive>
 80015fa:	0003      	movs	r3, r0
 80015fc:	001a      	movs	r2, r3
 80015fe:	193b      	adds	r3, r7, r4
 8001600:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_SET);
 8001602:	4b07      	ldr	r3, [pc, #28]	@ (8001620 <DRV_SetConfig1+0x60>)
 8001604:	2201      	movs	r2, #1
 8001606:	2101      	movs	r1, #1
 8001608:	0018      	movs	r0, r3
 800160a:	f004 f9e8 	bl	80059de <HAL_GPIO_WritePin>
	return status;
 800160e:	193b      	adds	r3, r7, r4
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	b25b      	sxtb	r3, r3
}
 8001614:	0018      	movs	r0, r3
 8001616:	46bd      	mov	sp, r7
 8001618:	b005      	add	sp, #20
 800161a:	bd90      	pop	{r4, r7, pc}
 800161c:	200002fc 	.word	0x200002fc
 8001620:	50000c00 	.word	0x50000c00
 8001624:	20000300 	.word	0x20000300
 8001628:	20000410 	.word	0x20000410

0800162c <DRV_GetConfig2>:

int8_t DRV_GetConfig2(drv_config_2_t* config_2)
{
 800162c:	b590      	push	{r4, r7, lr}
 800162e:	b087      	sub	sp, #28
 8001630:	af02      	add	r7, sp, #8
 8001632:	6078      	str	r0, [r7, #4]
	int8_t status = HAL_OK;
 8001634:	240f      	movs	r4, #15
 8001636:	193b      	adds	r3, r7, r4
 8001638:	2200      	movs	r2, #0
 800163a:	701a      	strb	r2, [r3, #0]

	tx_data[0] = (CONFIG_2 | READ_MASK);
 800163c:	4b17      	ldr	r3, [pc, #92]	@ (800169c <DRV_GetConfig2+0x70>)
 800163e:	224b      	movs	r2, #75	@ 0x4b
 8001640:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0;
 8001642:	4b16      	ldr	r3, [pc, #88]	@ (800169c <DRV_GetConfig2+0x70>)
 8001644:	2200      	movs	r2, #0
 8001646:	705a      	strb	r2, [r3, #1]
	rx_data[0] = 0;
 8001648:	4b15      	ldr	r3, [pc, #84]	@ (80016a0 <DRV_GetConfig2+0x74>)
 800164a:	2200      	movs	r2, #0
 800164c:	701a      	strb	r2, [r3, #0]
	rx_data[1] = 0;
 800164e:	4b14      	ldr	r3, [pc, #80]	@ (80016a0 <DRV_GetConfig2+0x74>)
 8001650:	2200      	movs	r2, #0
 8001652:	705a      	strb	r2, [r3, #1]

	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_RESET);
 8001654:	4b13      	ldr	r3, [pc, #76]	@ (80016a4 <DRV_GetConfig2+0x78>)
 8001656:	2200      	movs	r2, #0
 8001658:	2101      	movs	r1, #1
 800165a:	0018      	movs	r0, r3
 800165c:	f004 f9bf 	bl	80059de <HAL_GPIO_WritePin>
	status = HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 100);
 8001660:	4a0f      	ldr	r2, [pc, #60]	@ (80016a0 <DRV_GetConfig2+0x74>)
 8001662:	490e      	ldr	r1, [pc, #56]	@ (800169c <DRV_GetConfig2+0x70>)
 8001664:	4810      	ldr	r0, [pc, #64]	@ (80016a8 <DRV_GetConfig2+0x7c>)
 8001666:	2364      	movs	r3, #100	@ 0x64
 8001668:	9300      	str	r3, [sp, #0]
 800166a:	2302      	movs	r3, #2
 800166c:	f007 f954 	bl	8008918 <HAL_SPI_TransmitReceive>
 8001670:	0003      	movs	r3, r0
 8001672:	001a      	movs	r2, r3
 8001674:	193b      	adds	r3, r7, r4
 8001676:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_SET);
 8001678:	4b0a      	ldr	r3, [pc, #40]	@ (80016a4 <DRV_GetConfig2+0x78>)
 800167a:	2201      	movs	r2, #1
 800167c:	2101      	movs	r1, #1
 800167e:	0018      	movs	r0, r3
 8001680:	f004 f9ad 	bl	80059de <HAL_GPIO_WritePin>

	config_2->raw_data = rx_data[1];
 8001684:	4b06      	ldr	r3, [pc, #24]	@ (80016a0 <DRV_GetConfig2+0x74>)
 8001686:	785a      	ldrb	r2, [r3, #1]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	701a      	strb	r2, [r3, #0]
	return status;
 800168c:	193b      	adds	r3, r7, r4
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	b25b      	sxtb	r3, r3
}
 8001692:	0018      	movs	r0, r3
 8001694:	46bd      	mov	sp, r7
 8001696:	b005      	add	sp, #20
 8001698:	bd90      	pop	{r4, r7, pc}
 800169a:	46c0      	nop			@ (mov r8, r8)
 800169c:	200002fc 	.word	0x200002fc
 80016a0:	20000300 	.word	0x20000300
 80016a4:	50000c00 	.word	0x50000c00
 80016a8:	20000410 	.word	0x20000410

080016ac <DRV_SetConfig2>:

int8_t DRV_SetConfig2(drv_config_2_t* config_2)
{
 80016ac:	b590      	push	{r4, r7, lr}
 80016ae:	b087      	sub	sp, #28
 80016b0:	af02      	add	r7, sp, #8
 80016b2:	6078      	str	r0, [r7, #4]
	int8_t status = HAL_OK;
 80016b4:	240f      	movs	r4, #15
 80016b6:	193b      	adds	r3, r7, r4
 80016b8:	2200      	movs	r2, #0
 80016ba:	701a      	strb	r2, [r3, #0]

	tx_data[0] = CONFIG_2;
 80016bc:	4b12      	ldr	r3, [pc, #72]	@ (8001708 <DRV_SetConfig2+0x5c>)
 80016be:	220b      	movs	r2, #11
 80016c0:	701a      	strb	r2, [r3, #0]
	tx_data[1] = config_2->raw_data;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	781a      	ldrb	r2, [r3, #0]
 80016c6:	4b10      	ldr	r3, [pc, #64]	@ (8001708 <DRV_SetConfig2+0x5c>)
 80016c8:	705a      	strb	r2, [r3, #1]

	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_RESET);
 80016ca:	4b10      	ldr	r3, [pc, #64]	@ (800170c <DRV_SetConfig2+0x60>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	2101      	movs	r1, #1
 80016d0:	0018      	movs	r0, r3
 80016d2:	f004 f984 	bl	80059de <HAL_GPIO_WritePin>
	status = HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 100);
 80016d6:	4a0e      	ldr	r2, [pc, #56]	@ (8001710 <DRV_SetConfig2+0x64>)
 80016d8:	490b      	ldr	r1, [pc, #44]	@ (8001708 <DRV_SetConfig2+0x5c>)
 80016da:	480e      	ldr	r0, [pc, #56]	@ (8001714 <DRV_SetConfig2+0x68>)
 80016dc:	2364      	movs	r3, #100	@ 0x64
 80016de:	9300      	str	r3, [sp, #0]
 80016e0:	2302      	movs	r3, #2
 80016e2:	f007 f919 	bl	8008918 <HAL_SPI_TransmitReceive>
 80016e6:	0003      	movs	r3, r0
 80016e8:	001a      	movs	r2, r3
 80016ea:	193b      	adds	r3, r7, r4
 80016ec:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_SET);
 80016ee:	4b07      	ldr	r3, [pc, #28]	@ (800170c <DRV_SetConfig2+0x60>)
 80016f0:	2201      	movs	r2, #1
 80016f2:	2101      	movs	r1, #1
 80016f4:	0018      	movs	r0, r3
 80016f6:	f004 f972 	bl	80059de <HAL_GPIO_WritePin>
	return status;
 80016fa:	193b      	adds	r3, r7, r4
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	b25b      	sxtb	r3, r3
}
 8001700:	0018      	movs	r0, r3
 8001702:	46bd      	mov	sp, r7
 8001704:	b005      	add	sp, #20
 8001706:	bd90      	pop	{r4, r7, pc}
 8001708:	200002fc 	.word	0x200002fc
 800170c:	50000c00 	.word	0x50000c00
 8001710:	20000300 	.word	0x20000300
 8001714:	20000410 	.word	0x20000410

08001718 <DRV_GetConfig3>:

int8_t DRV_GetConfig3(drv_config_3_t* config_3)
{
 8001718:	b590      	push	{r4, r7, lr}
 800171a:	b087      	sub	sp, #28
 800171c:	af02      	add	r7, sp, #8
 800171e:	6078      	str	r0, [r7, #4]
	int8_t status = HAL_OK;
 8001720:	240f      	movs	r4, #15
 8001722:	193b      	adds	r3, r7, r4
 8001724:	2200      	movs	r2, #0
 8001726:	701a      	strb	r2, [r3, #0]

	tx_data[0] = (CONFIG_3 | READ_MASK);
 8001728:	4b17      	ldr	r3, [pc, #92]	@ (8001788 <DRV_GetConfig3+0x70>)
 800172a:	224c      	movs	r2, #76	@ 0x4c
 800172c:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0;
 800172e:	4b16      	ldr	r3, [pc, #88]	@ (8001788 <DRV_GetConfig3+0x70>)
 8001730:	2200      	movs	r2, #0
 8001732:	705a      	strb	r2, [r3, #1]
	rx_data[0] = 0;
 8001734:	4b15      	ldr	r3, [pc, #84]	@ (800178c <DRV_GetConfig3+0x74>)
 8001736:	2200      	movs	r2, #0
 8001738:	701a      	strb	r2, [r3, #0]
	rx_data[1] = 0;
 800173a:	4b14      	ldr	r3, [pc, #80]	@ (800178c <DRV_GetConfig3+0x74>)
 800173c:	2200      	movs	r2, #0
 800173e:	705a      	strb	r2, [r3, #1]

	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_RESET);
 8001740:	4b13      	ldr	r3, [pc, #76]	@ (8001790 <DRV_GetConfig3+0x78>)
 8001742:	2200      	movs	r2, #0
 8001744:	2101      	movs	r1, #1
 8001746:	0018      	movs	r0, r3
 8001748:	f004 f949 	bl	80059de <HAL_GPIO_WritePin>
	status = HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 100);
 800174c:	4a0f      	ldr	r2, [pc, #60]	@ (800178c <DRV_GetConfig3+0x74>)
 800174e:	490e      	ldr	r1, [pc, #56]	@ (8001788 <DRV_GetConfig3+0x70>)
 8001750:	4810      	ldr	r0, [pc, #64]	@ (8001794 <DRV_GetConfig3+0x7c>)
 8001752:	2364      	movs	r3, #100	@ 0x64
 8001754:	9300      	str	r3, [sp, #0]
 8001756:	2302      	movs	r3, #2
 8001758:	f007 f8de 	bl	8008918 <HAL_SPI_TransmitReceive>
 800175c:	0003      	movs	r3, r0
 800175e:	001a      	movs	r2, r3
 8001760:	193b      	adds	r3, r7, r4
 8001762:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_SET);
 8001764:	4b0a      	ldr	r3, [pc, #40]	@ (8001790 <DRV_GetConfig3+0x78>)
 8001766:	2201      	movs	r2, #1
 8001768:	2101      	movs	r1, #1
 800176a:	0018      	movs	r0, r3
 800176c:	f004 f937 	bl	80059de <HAL_GPIO_WritePin>

	config_3->raw_data = rx_data[1];
 8001770:	4b06      	ldr	r3, [pc, #24]	@ (800178c <DRV_GetConfig3+0x74>)
 8001772:	785a      	ldrb	r2, [r3, #1]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	701a      	strb	r2, [r3, #0]
	return status;
 8001778:	193b      	adds	r3, r7, r4
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	b25b      	sxtb	r3, r3
}
 800177e:	0018      	movs	r0, r3
 8001780:	46bd      	mov	sp, r7
 8001782:	b005      	add	sp, #20
 8001784:	bd90      	pop	{r4, r7, pc}
 8001786:	46c0      	nop			@ (mov r8, r8)
 8001788:	200002fc 	.word	0x200002fc
 800178c:	20000300 	.word	0x20000300
 8001790:	50000c00 	.word	0x50000c00
 8001794:	20000410 	.word	0x20000410

08001798 <DRV_SetConfig3>:

int8_t DRV_SetConfig3(drv_config_3_t* config_3)
{
 8001798:	b590      	push	{r4, r7, lr}
 800179a:	b087      	sub	sp, #28
 800179c:	af02      	add	r7, sp, #8
 800179e:	6078      	str	r0, [r7, #4]
	int8_t status = HAL_OK;
 80017a0:	240f      	movs	r4, #15
 80017a2:	193b      	adds	r3, r7, r4
 80017a4:	2200      	movs	r2, #0
 80017a6:	701a      	strb	r2, [r3, #0]

	tx_data[0] = CONFIG_3;
 80017a8:	4b12      	ldr	r3, [pc, #72]	@ (80017f4 <DRV_SetConfig3+0x5c>)
 80017aa:	220c      	movs	r2, #12
 80017ac:	701a      	strb	r2, [r3, #0]
	tx_data[1] = config_3->raw_data;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	781a      	ldrb	r2, [r3, #0]
 80017b2:	4b10      	ldr	r3, [pc, #64]	@ (80017f4 <DRV_SetConfig3+0x5c>)
 80017b4:	705a      	strb	r2, [r3, #1]

	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_RESET);
 80017b6:	4b10      	ldr	r3, [pc, #64]	@ (80017f8 <DRV_SetConfig3+0x60>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	2101      	movs	r1, #1
 80017bc:	0018      	movs	r0, r3
 80017be:	f004 f90e 	bl	80059de <HAL_GPIO_WritePin>
	status = HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 100);
 80017c2:	4a0e      	ldr	r2, [pc, #56]	@ (80017fc <DRV_SetConfig3+0x64>)
 80017c4:	490b      	ldr	r1, [pc, #44]	@ (80017f4 <DRV_SetConfig3+0x5c>)
 80017c6:	480e      	ldr	r0, [pc, #56]	@ (8001800 <DRV_SetConfig3+0x68>)
 80017c8:	2364      	movs	r3, #100	@ 0x64
 80017ca:	9300      	str	r3, [sp, #0]
 80017cc:	2302      	movs	r3, #2
 80017ce:	f007 f8a3 	bl	8008918 <HAL_SPI_TransmitReceive>
 80017d2:	0003      	movs	r3, r0
 80017d4:	001a      	movs	r2, r3
 80017d6:	193b      	adds	r3, r7, r4
 80017d8:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_SET);
 80017da:	4b07      	ldr	r3, [pc, #28]	@ (80017f8 <DRV_SetConfig3+0x60>)
 80017dc:	2201      	movs	r2, #1
 80017de:	2101      	movs	r1, #1
 80017e0:	0018      	movs	r0, r3
 80017e2:	f004 f8fc 	bl	80059de <HAL_GPIO_WritePin>
	return status;
 80017e6:	193b      	adds	r3, r7, r4
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	b25b      	sxtb	r3, r3
}
 80017ec:	0018      	movs	r0, r3
 80017ee:	46bd      	mov	sp, r7
 80017f0:	b005      	add	sp, #20
 80017f2:	bd90      	pop	{r4, r7, pc}
 80017f4:	200002fc 	.word	0x200002fc
 80017f8:	50000c00 	.word	0x50000c00
 80017fc:	20000300 	.word	0x20000300
 8001800:	20000410 	.word	0x20000410

08001804 <DRV_GetConfig4>:

int8_t DRV_GetConfig4(drv_config_4_t* config_4)
{
 8001804:	b590      	push	{r4, r7, lr}
 8001806:	b087      	sub	sp, #28
 8001808:	af02      	add	r7, sp, #8
 800180a:	6078      	str	r0, [r7, #4]
	int8_t status = HAL_OK;
 800180c:	240f      	movs	r4, #15
 800180e:	193b      	adds	r3, r7, r4
 8001810:	2200      	movs	r2, #0
 8001812:	701a      	strb	r2, [r3, #0]

	tx_data[0] = (CONFIG_4 | READ_MASK);
 8001814:	4b17      	ldr	r3, [pc, #92]	@ (8001874 <DRV_GetConfig4+0x70>)
 8001816:	224d      	movs	r2, #77	@ 0x4d
 8001818:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0;
 800181a:	4b16      	ldr	r3, [pc, #88]	@ (8001874 <DRV_GetConfig4+0x70>)
 800181c:	2200      	movs	r2, #0
 800181e:	705a      	strb	r2, [r3, #1]
	rx_data[0] = 0;
 8001820:	4b15      	ldr	r3, [pc, #84]	@ (8001878 <DRV_GetConfig4+0x74>)
 8001822:	2200      	movs	r2, #0
 8001824:	701a      	strb	r2, [r3, #0]
	rx_data[1] = 0;
 8001826:	4b14      	ldr	r3, [pc, #80]	@ (8001878 <DRV_GetConfig4+0x74>)
 8001828:	2200      	movs	r2, #0
 800182a:	705a      	strb	r2, [r3, #1]

	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_RESET);
 800182c:	4b13      	ldr	r3, [pc, #76]	@ (800187c <DRV_GetConfig4+0x78>)
 800182e:	2200      	movs	r2, #0
 8001830:	2101      	movs	r1, #1
 8001832:	0018      	movs	r0, r3
 8001834:	f004 f8d3 	bl	80059de <HAL_GPIO_WritePin>
	status = HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 100);
 8001838:	4a0f      	ldr	r2, [pc, #60]	@ (8001878 <DRV_GetConfig4+0x74>)
 800183a:	490e      	ldr	r1, [pc, #56]	@ (8001874 <DRV_GetConfig4+0x70>)
 800183c:	4810      	ldr	r0, [pc, #64]	@ (8001880 <DRV_GetConfig4+0x7c>)
 800183e:	2364      	movs	r3, #100	@ 0x64
 8001840:	9300      	str	r3, [sp, #0]
 8001842:	2302      	movs	r3, #2
 8001844:	f007 f868 	bl	8008918 <HAL_SPI_TransmitReceive>
 8001848:	0003      	movs	r3, r0
 800184a:	001a      	movs	r2, r3
 800184c:	193b      	adds	r3, r7, r4
 800184e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_SET);
 8001850:	4b0a      	ldr	r3, [pc, #40]	@ (800187c <DRV_GetConfig4+0x78>)
 8001852:	2201      	movs	r2, #1
 8001854:	2101      	movs	r1, #1
 8001856:	0018      	movs	r0, r3
 8001858:	f004 f8c1 	bl	80059de <HAL_GPIO_WritePin>

	config_4->raw_data = rx_data[1];
 800185c:	4b06      	ldr	r3, [pc, #24]	@ (8001878 <DRV_GetConfig4+0x74>)
 800185e:	785a      	ldrb	r2, [r3, #1]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	701a      	strb	r2, [r3, #0]
	return status;
 8001864:	193b      	adds	r3, r7, r4
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	b25b      	sxtb	r3, r3
}
 800186a:	0018      	movs	r0, r3
 800186c:	46bd      	mov	sp, r7
 800186e:	b005      	add	sp, #20
 8001870:	bd90      	pop	{r4, r7, pc}
 8001872:	46c0      	nop			@ (mov r8, r8)
 8001874:	200002fc 	.word	0x200002fc
 8001878:	20000300 	.word	0x20000300
 800187c:	50000c00 	.word	0x50000c00
 8001880:	20000410 	.word	0x20000410

08001884 <DRV_SetConfig4>:

int8_t DRV_SetConfig4(drv_config_4_t* config_4)
{
 8001884:	b590      	push	{r4, r7, lr}
 8001886:	b087      	sub	sp, #28
 8001888:	af02      	add	r7, sp, #8
 800188a:	6078      	str	r0, [r7, #4]
	int8_t status = HAL_OK;
 800188c:	240f      	movs	r4, #15
 800188e:	193b      	adds	r3, r7, r4
 8001890:	2200      	movs	r2, #0
 8001892:	701a      	strb	r2, [r3, #0]

	tx_data[0] = CONFIG_4;
 8001894:	4b12      	ldr	r3, [pc, #72]	@ (80018e0 <DRV_SetConfig4+0x5c>)
 8001896:	220d      	movs	r2, #13
 8001898:	701a      	strb	r2, [r3, #0]
	tx_data[1] = config_4->raw_data;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	781a      	ldrb	r2, [r3, #0]
 800189e:	4b10      	ldr	r3, [pc, #64]	@ (80018e0 <DRV_SetConfig4+0x5c>)
 80018a0:	705a      	strb	r2, [r3, #1]

	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_RESET);
 80018a2:	4b10      	ldr	r3, [pc, #64]	@ (80018e4 <DRV_SetConfig4+0x60>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	2101      	movs	r1, #1
 80018a8:	0018      	movs	r0, r3
 80018aa:	f004 f898 	bl	80059de <HAL_GPIO_WritePin>
	status = HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 100);
 80018ae:	4a0e      	ldr	r2, [pc, #56]	@ (80018e8 <DRV_SetConfig4+0x64>)
 80018b0:	490b      	ldr	r1, [pc, #44]	@ (80018e0 <DRV_SetConfig4+0x5c>)
 80018b2:	480e      	ldr	r0, [pc, #56]	@ (80018ec <DRV_SetConfig4+0x68>)
 80018b4:	2364      	movs	r3, #100	@ 0x64
 80018b6:	9300      	str	r3, [sp, #0]
 80018b8:	2302      	movs	r3, #2
 80018ba:	f007 f82d 	bl	8008918 <HAL_SPI_TransmitReceive>
 80018be:	0003      	movs	r3, r0
 80018c0:	001a      	movs	r2, r3
 80018c2:	193b      	adds	r3, r7, r4
 80018c4:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_SET);
 80018c6:	4b07      	ldr	r3, [pc, #28]	@ (80018e4 <DRV_SetConfig4+0x60>)
 80018c8:	2201      	movs	r2, #1
 80018ca:	2101      	movs	r1, #1
 80018cc:	0018      	movs	r0, r3
 80018ce:	f004 f886 	bl	80059de <HAL_GPIO_WritePin>
	return status;
 80018d2:	193b      	adds	r3, r7, r4
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	b25b      	sxtb	r3, r3
}
 80018d8:	0018      	movs	r0, r3
 80018da:	46bd      	mov	sp, r7
 80018dc:	b005      	add	sp, #20
 80018de:	bd90      	pop	{r4, r7, pc}
 80018e0:	200002fc 	.word	0x200002fc
 80018e4:	50000c00 	.word	0x50000c00
 80018e8:	20000300 	.word	0x20000300
 80018ec:	20000410 	.word	0x20000410

080018f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	0002      	movs	r2, r0
 80018f8:	1dfb      	adds	r3, r7, #7
 80018fa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80018fc:	1dfb      	adds	r3, r7, #7
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b7f      	cmp	r3, #127	@ 0x7f
 8001902:	d809      	bhi.n	8001918 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001904:	1dfb      	adds	r3, r7, #7
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	001a      	movs	r2, r3
 800190a:	231f      	movs	r3, #31
 800190c:	401a      	ands	r2, r3
 800190e:	4b04      	ldr	r3, [pc, #16]	@ (8001920 <__NVIC_EnableIRQ+0x30>)
 8001910:	2101      	movs	r1, #1
 8001912:	4091      	lsls	r1, r2
 8001914:	000a      	movs	r2, r1
 8001916:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001918:	46c0      	nop			@ (mov r8, r8)
 800191a:	46bd      	mov	sp, r7
 800191c:	b002      	add	sp, #8
 800191e:	bd80      	pop	{r7, pc}
 8001920:	e000e100 	.word	0xe000e100

08001924 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001924:	b590      	push	{r4, r7, lr}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	0002      	movs	r2, r0
 800192c:	6039      	str	r1, [r7, #0]
 800192e:	1dfb      	adds	r3, r7, #7
 8001930:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001932:	1dfb      	adds	r3, r7, #7
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2b7f      	cmp	r3, #127	@ 0x7f
 8001938:	d828      	bhi.n	800198c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800193a:	4a2f      	ldr	r2, [pc, #188]	@ (80019f8 <__NVIC_SetPriority+0xd4>)
 800193c:	1dfb      	adds	r3, r7, #7
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	b25b      	sxtb	r3, r3
 8001942:	089b      	lsrs	r3, r3, #2
 8001944:	33c0      	adds	r3, #192	@ 0xc0
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	589b      	ldr	r3, [r3, r2]
 800194a:	1dfa      	adds	r2, r7, #7
 800194c:	7812      	ldrb	r2, [r2, #0]
 800194e:	0011      	movs	r1, r2
 8001950:	2203      	movs	r2, #3
 8001952:	400a      	ands	r2, r1
 8001954:	00d2      	lsls	r2, r2, #3
 8001956:	21ff      	movs	r1, #255	@ 0xff
 8001958:	4091      	lsls	r1, r2
 800195a:	000a      	movs	r2, r1
 800195c:	43d2      	mvns	r2, r2
 800195e:	401a      	ands	r2, r3
 8001960:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	019b      	lsls	r3, r3, #6
 8001966:	22ff      	movs	r2, #255	@ 0xff
 8001968:	401a      	ands	r2, r3
 800196a:	1dfb      	adds	r3, r7, #7
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	0018      	movs	r0, r3
 8001970:	2303      	movs	r3, #3
 8001972:	4003      	ands	r3, r0
 8001974:	00db      	lsls	r3, r3, #3
 8001976:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001978:	481f      	ldr	r0, [pc, #124]	@ (80019f8 <__NVIC_SetPriority+0xd4>)
 800197a:	1dfb      	adds	r3, r7, #7
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	b25b      	sxtb	r3, r3
 8001980:	089b      	lsrs	r3, r3, #2
 8001982:	430a      	orrs	r2, r1
 8001984:	33c0      	adds	r3, #192	@ 0xc0
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800198a:	e031      	b.n	80019f0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800198c:	4a1b      	ldr	r2, [pc, #108]	@ (80019fc <__NVIC_SetPriority+0xd8>)
 800198e:	1dfb      	adds	r3, r7, #7
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	0019      	movs	r1, r3
 8001994:	230f      	movs	r3, #15
 8001996:	400b      	ands	r3, r1
 8001998:	3b08      	subs	r3, #8
 800199a:	089b      	lsrs	r3, r3, #2
 800199c:	3306      	adds	r3, #6
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	18d3      	adds	r3, r2, r3
 80019a2:	3304      	adds	r3, #4
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	1dfa      	adds	r2, r7, #7
 80019a8:	7812      	ldrb	r2, [r2, #0]
 80019aa:	0011      	movs	r1, r2
 80019ac:	2203      	movs	r2, #3
 80019ae:	400a      	ands	r2, r1
 80019b0:	00d2      	lsls	r2, r2, #3
 80019b2:	21ff      	movs	r1, #255	@ 0xff
 80019b4:	4091      	lsls	r1, r2
 80019b6:	000a      	movs	r2, r1
 80019b8:	43d2      	mvns	r2, r2
 80019ba:	401a      	ands	r2, r3
 80019bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	019b      	lsls	r3, r3, #6
 80019c2:	22ff      	movs	r2, #255	@ 0xff
 80019c4:	401a      	ands	r2, r3
 80019c6:	1dfb      	adds	r3, r7, #7
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	0018      	movs	r0, r3
 80019cc:	2303      	movs	r3, #3
 80019ce:	4003      	ands	r3, r0
 80019d0:	00db      	lsls	r3, r3, #3
 80019d2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019d4:	4809      	ldr	r0, [pc, #36]	@ (80019fc <__NVIC_SetPriority+0xd8>)
 80019d6:	1dfb      	adds	r3, r7, #7
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	001c      	movs	r4, r3
 80019dc:	230f      	movs	r3, #15
 80019de:	4023      	ands	r3, r4
 80019e0:	3b08      	subs	r3, #8
 80019e2:	089b      	lsrs	r3, r3, #2
 80019e4:	430a      	orrs	r2, r1
 80019e6:	3306      	adds	r3, #6
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	18c3      	adds	r3, r0, r3
 80019ec:	3304      	adds	r3, #4
 80019ee:	601a      	str	r2, [r3, #0]
}
 80019f0:	46c0      	nop			@ (mov r8, r8)
 80019f2:	46bd      	mov	sp, r7
 80019f4:	b003      	add	sp, #12
 80019f6:	bd90      	pop	{r4, r7, pc}
 80019f8:	e000e100 	.word	0xe000e100
 80019fc:	e000ed00 	.word	0xe000ed00

08001a00 <LL_ADC_DMA_GetRegAddr>:
  * @param  Register This parameter can be one of the following values:
  *         @arg @ref LL_ADC_DMA_REG_REGULAR_DATA
  * @retval ADC register address
  */
__STATIC_INLINE uint32_t LL_ADC_DMA_GetRegAddr(ADC_TypeDef *ADCx, uint32_t Register)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(Register);

  /* Retrieve address of register DR */
  return (uint32_t) &(ADCx->DR);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	3340      	adds	r3, #64	@ 0x40
}
 8001a0e:	0018      	movs	r0, r3
 8001a10:	46bd      	mov	sp, r7
 8001a12:	b002      	add	sp, #8
 8001a14:	bd80      	pop	{r7, pc}
	...

08001a18 <LL_ADC_SetTriggerFrequencyMode>:
  *         @arg @ref LL_ADC_TRIGGER_FREQ_HIGH
  *         @arg @ref LL_ADC_TRIGGER_FREQ_LOW
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetTriggerFrequencyMode(ADC_TypeDef *ADCx, uint32_t TriggerFrequencyMode)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_LFTRIG, TriggerFrequencyMode);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	691b      	ldr	r3, [r3, #16]
 8001a26:	4a05      	ldr	r2, [pc, #20]	@ (8001a3c <LL_ADC_SetTriggerFrequencyMode+0x24>)
 8001a28:	401a      	ands	r2, r3
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	431a      	orrs	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	611a      	str	r2, [r3, #16]
}
 8001a32:	46c0      	nop			@ (mov r8, r8)
 8001a34:	46bd      	mov	sp, r7
 8001a36:	b002      	add	sp, #8
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	46c0      	nop			@ (mov r8, r8)
 8001a3c:	dfffffff 	.word	0xdfffffff

08001a40 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	695b      	ldr	r3, [r3, #20]
 8001a50:	68ba      	ldr	r2, [r7, #8]
 8001a52:	2104      	movs	r1, #4
 8001a54:	400a      	ands	r2, r1
 8001a56:	2107      	movs	r1, #7
 8001a58:	4091      	lsls	r1, r2
 8001a5a:	000a      	movs	r2, r1
 8001a5c:	43d2      	mvns	r2, r2
 8001a5e:	401a      	ands	r2, r3
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	2104      	movs	r1, #4
 8001a64:	400b      	ands	r3, r1
 8001a66:	6879      	ldr	r1, [r7, #4]
 8001a68:	4099      	lsls	r1, r3
 8001a6a:	000b      	movs	r3, r1
 8001a6c:	431a      	orrs	r2, r3
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001a72:	46c0      	nop			@ (mov r8, r8)
 8001a74:	46bd      	mov	sp, r7
 8001a76:	b004      	add	sp, #16
 8001a78:	bd80      	pop	{r7, pc}
	...

08001a7c <LL_ADC_REG_SetSequencerConfigurable>:
  *         @arg @ref LL_ADC_REG_SEQ_FIXED
  *         @arg @ref LL_ADC_REG_SEQ_CONFIGURABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerConfigurable(ADC_TypeDef *ADCx, uint32_t Configurability)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_CHSELRMOD, Configurability);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	4a05      	ldr	r2, [pc, #20]	@ (8001aa0 <LL_ADC_REG_SetSequencerConfigurable+0x24>)
 8001a8c:	401a      	ands	r2, r3
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	431a      	orrs	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	60da      	str	r2, [r3, #12]
}
 8001a96:	46c0      	nop			@ (mov r8, r8)
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	b002      	add	sp, #8
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	46c0      	nop			@ (mov r8, r8)
 8001aa0:	ffdfffff 	.word	0xffdfffff

08001aa4 <LL_ADC_REG_SetSequencerScanDirection>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_FORWARD
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_BACKWARD
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerScanDirection(ADC_TypeDef *ADCx, uint32_t ScanDirection)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	2204      	movs	r2, #4
 8001ab4:	4393      	bics	r3, r2
 8001ab6:	001a      	movs	r2, r3
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	431a      	orrs	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	60da      	str	r2, [r3, #12]
}
 8001ac0:	46c0      	nop			@ (mov r8, r8)
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	b002      	add	sp, #8
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	025b      	lsls	r3, r3, #9
 8001ada:	0a5b      	lsrs	r3, r3, #9
 8001adc:	431a      	orrs	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001ae2:	46c0      	nop			@ (mov r8, r8)
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	b002      	add	sp, #8
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <LL_ADC_SetOverSamplingScope>:
  *         @arg @ref LL_ADC_OVS_DISABLE
  *         @arg @ref LL_ADC_OVS_GRP_REGULAR_CONTINUED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b082      	sub	sp, #8
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
 8001af2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_OVSE, OvsScope);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	2201      	movs	r2, #1
 8001afa:	4393      	bics	r3, r2
 8001afc:	001a      	movs	r2, r3
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	431a      	orrs	r2, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	611a      	str	r2, [r3, #16]
}
 8001b06:	46c0      	nop			@ (mov r8, r8)
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	b002      	add	sp, #8
 8001b0c:	bd80      	pop	{r7, pc}
	...

08001b10 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	4a05      	ldr	r2, [pc, #20]	@ (8001b34 <LL_ADC_EnableInternalRegulator+0x24>)
 8001b1e:	4013      	ands	r3, r2
 8001b20:	2280      	movs	r2, #128	@ 0x80
 8001b22:	0552      	lsls	r2, r2, #21
 8001b24:	431a      	orrs	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b2a:	46c0      	nop			@ (mov r8, r8)
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	b002      	add	sp, #8
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	46c0      	nop			@ (mov r8, r8)
 8001b34:	6fffffe8 	.word	0x6fffffe8

08001b38 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	2201      	movs	r2, #1
 8001b46:	4013      	ands	r3, r2
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d101      	bne.n	8001b50 <LL_ADC_IsEnabled+0x18>
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e000      	b.n	8001b52 <LL_ADC_IsEnabled+0x1a>
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	0018      	movs	r0, r3
 8001b54:	46bd      	mov	sp, r7
 8001b56:	b002      	add	sp, #8
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b082      	sub	sp, #8
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	2202      	movs	r2, #2
 8001b68:	4013      	ands	r3, r2
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d101      	bne.n	8001b72 <LL_ADC_IsDisableOngoing+0x18>
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e000      	b.n	8001b74 <LL_ADC_IsDisableOngoing+0x1a>
 8001b72:	2300      	movs	r3, #0
}
 8001b74:	0018      	movs	r0, r3
 8001b76:	46bd      	mov	sp, r7
 8001b78:	b002      	add	sp, #8
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	4a04      	ldr	r2, [pc, #16]	@ (8001b9c <LL_ADC_REG_StartConversion+0x20>)
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	2204      	movs	r2, #4
 8001b8e:	431a      	orrs	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001b94:	46c0      	nop			@ (mov r8, r8)
 8001b96:	46bd      	mov	sp, r7
 8001b98:	b002      	add	sp, #8
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	7fffffe8 	.word	0x7fffffe8

08001ba0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	2204      	movs	r2, #4
 8001bae:	4013      	ands	r3, r2
 8001bb0:	2b04      	cmp	r3, #4
 8001bb2:	d101      	bne.n	8001bb8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e000      	b.n	8001bba <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	0018      	movs	r0, r3
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	b002      	add	sp, #8
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <LL_ADC_IsActiveFlag_CCRDY>:
  * @rmtoll ISR      CCRDY          LL_ADC_IsActiveFlag_CCRDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_CCRDY(ADC_TypeDef *ADCx)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b082      	sub	sp, #8
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_CCRDY) == (LL_ADC_FLAG_CCRDY)) ? 1UL : 0UL);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	2380      	movs	r3, #128	@ 0x80
 8001bd0:	019b      	lsls	r3, r3, #6
 8001bd2:	401a      	ands	r2, r3
 8001bd4:	2380      	movs	r3, #128	@ 0x80
 8001bd6:	019b      	lsls	r3, r3, #6
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d101      	bne.n	8001be0 <LL_ADC_IsActiveFlag_CCRDY+0x1e>
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e000      	b.n	8001be2 <LL_ADC_IsActiveFlag_CCRDY+0x20>
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	0018      	movs	r0, r3
 8001be4:	46bd      	mov	sp, r7
 8001be6:	b002      	add	sp, #8
 8001be8:	bd80      	pop	{r7, pc}

08001bea <LL_ADC_ClearFlag_CCRDY>:
  * @rmtoll ISR      CCRDY          LL_ADC_ClearFlag_CCRDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE void LL_ADC_ClearFlag_CCRDY(ADC_TypeDef *ADCx)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b082      	sub	sp, #8
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_CCRDY);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2280      	movs	r2, #128	@ 0x80
 8001bf6:	0192      	lsls	r2, r2, #6
 8001bf8:	601a      	str	r2, [r3, #0]
}
 8001bfa:	46c0      	nop			@ (mov r8, r8)
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	b002      	add	sp, #8
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <LL_ADC_EnableIT_OVR>:
  * @rmtoll IER      OVRIE          LL_ADC_EnableIT_OVR
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_OVR(ADC_TypeDef *ADCx)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b082      	sub	sp, #8
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_OVR);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	2210      	movs	r2, #16
 8001c10:	431a      	orrs	r2, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	605a      	str	r2, [r3, #4]
}
 8001c16:	46c0      	nop			@ (mov r8, r8)
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	b002      	add	sp, #8
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <LL_ADC_DisableIT_EOC>:
  * @rmtoll IER      EOCIE          LL_ADC_DisableIT_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b082      	sub	sp, #8
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	2204      	movs	r2, #4
 8001c2c:	4393      	bics	r3, r2
 8001c2e:	001a      	movs	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	605a      	str	r2, [r3, #4]
}
 8001c34:	46c0      	nop			@ (mov r8, r8)
 8001c36:	46bd      	mov	sp, r7
 8001c38:	b002      	add	sp, #8
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <LL_ADC_DisableIT_EOS>:
  * @rmtoll IER      EOSIE          LL_ADC_DisableIT_EOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	2208      	movs	r2, #8
 8001c4a:	4393      	bics	r3, r2
 8001c4c:	001a      	movs	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	605a      	str	r2, [r3, #4]
}
 8001c52:	46c0      	nop			@ (mov r8, r8)
 8001c54:	46bd      	mov	sp, r7
 8001c56:	b002      	add	sp, #8
 8001c58:	bd80      	pop	{r7, pc}
	...

08001c5c <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_TIM17
  *         @arg @ref LL_APB1_GRP2_PERIPH_ADC
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR2, Periphs);
 8001c64:	4b07      	ldr	r3, [pc, #28]	@ (8001c84 <LL_APB1_GRP2_EnableClock+0x28>)
 8001c66:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8001c68:	4b06      	ldr	r3, [pc, #24]	@ (8001c84 <LL_APB1_GRP2_EnableClock+0x28>)
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 8001c70:	4b04      	ldr	r3, [pc, #16]	@ (8001c84 <LL_APB1_GRP2_EnableClock+0x28>)
 8001c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	4013      	ands	r3, r2
 8001c78:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
}
 8001c7c:	46c0      	nop			@ (mov r8, r8)
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	b004      	add	sp, #16
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	40021000 	.word	0x40021000

08001c88 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOD
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8001c90:	4b07      	ldr	r3, [pc, #28]	@ (8001cb0 <LL_IOP_GRP1_EnableClock+0x28>)
 8001c92:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001c94:	4b06      	ldr	r3, [pc, #24]	@ (8001cb0 <LL_IOP_GRP1_EnableClock+0x28>)
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8001c9c:	4b04      	ldr	r3, [pc, #16]	@ (8001cb0 <LL_IOP_GRP1_EnableClock+0x28>)
 8001c9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
}
 8001ca8:	46c0      	nop			@ (mov r8, r8)
 8001caa:	46bd      	mov	sp, r7
 8001cac:	b004      	add	sp, #16
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40021000 	.word	0x40021000

08001cb4 <LL_SYSTICK_IsActiveCounterFlag>:
  * @note   It can be used in timeout function on application side.
  * @rmtoll STK_CTRL     COUNTFLAG     LL_SYSTICK_IsActiveCounterFlag
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  return (((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk)) ? 1UL : 0UL);
 8001cb8:	4b07      	ldr	r3, [pc, #28]	@ (8001cd8 <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	2380      	movs	r3, #128	@ 0x80
 8001cbe:	025b      	lsls	r3, r3, #9
 8001cc0:	401a      	ands	r2, r3
 8001cc2:	2380      	movs	r3, #128	@ 0x80
 8001cc4:	025b      	lsls	r3, r3, #9
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d101      	bne.n	8001cce <LL_SYSTICK_IsActiveCounterFlag+0x1a>
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e000      	b.n	8001cd0 <LL_SYSTICK_IsActiveCounterFlag+0x1c>
 8001cce:	2300      	movs	r3, #0
}
 8001cd0:	0018      	movs	r0, r3
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	46c0      	nop			@ (mov r8, r8)
 8001cd8:	e000e010 	.word	0xe000e010

08001cdc <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_5 (*)
  * @note (*) Availability depends on devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_EN);
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	3b01      	subs	r3, #1
 8001cee:	4a0a      	ldr	r2, [pc, #40]	@ (8001d18 <LL_DMA_EnableChannel+0x3c>)
 8001cf0:	5cd3      	ldrb	r3, [r2, r3]
 8001cf2:	001a      	movs	r2, r3
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	18d3      	adds	r3, r2, r3
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	3b01      	subs	r3, #1
 8001cfe:	4906      	ldr	r1, [pc, #24]	@ (8001d18 <LL_DMA_EnableChannel+0x3c>)
 8001d00:	5ccb      	ldrb	r3, [r1, r3]
 8001d02:	0019      	movs	r1, r3
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	18cb      	adds	r3, r1, r3
 8001d08:	2101      	movs	r1, #1
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	601a      	str	r2, [r3, #0]
}
 8001d0e:	46c0      	nop			@ (mov r8, r8)
 8001d10:	46bd      	mov	sp, r7
 8001d12:	b004      	add	sp, #16
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	46c0      	nop			@ (mov r8, r8)
 8001d18:	0800c194 	.word	0x0800c194

08001d1c <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR,
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	4a0b      	ldr	r2, [pc, #44]	@ (8001d60 <LL_DMA_SetDataTransferDirection+0x44>)
 8001d32:	5cd3      	ldrb	r3, [r2, r3]
 8001d34:	001a      	movs	r2, r3
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	18d3      	adds	r3, r2, r3
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a09      	ldr	r2, [pc, #36]	@ (8001d64 <LL_DMA_SetDataTransferDirection+0x48>)
 8001d3e:	4013      	ands	r3, r2
 8001d40:	0019      	movs	r1, r3
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	3b01      	subs	r3, #1
 8001d46:	4a06      	ldr	r2, [pc, #24]	@ (8001d60 <LL_DMA_SetDataTransferDirection+0x44>)
 8001d48:	5cd3      	ldrb	r3, [r2, r3]
 8001d4a:	001a      	movs	r2, r3
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	18d3      	adds	r3, r2, r3
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	430a      	orrs	r2, r1
 8001d54:	601a      	str	r2, [r3, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 8001d56:	46c0      	nop			@ (mov r8, r8)
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	b006      	add	sp, #24
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	46c0      	nop			@ (mov r8, r8)
 8001d60:	0800c194 	.word	0x0800c194
 8001d64:	ffffbfef 	.word	0xffffbfef

08001d68 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_CIRC,
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	4a0b      	ldr	r2, [pc, #44]	@ (8001dac <LL_DMA_SetMode+0x44>)
 8001d7e:	5cd3      	ldrb	r3, [r2, r3]
 8001d80:	001a      	movs	r2, r3
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	18d3      	adds	r3, r2, r3
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2220      	movs	r2, #32
 8001d8a:	4393      	bics	r3, r2
 8001d8c:	0019      	movs	r1, r3
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	3b01      	subs	r3, #1
 8001d92:	4a06      	ldr	r2, [pc, #24]	@ (8001dac <LL_DMA_SetMode+0x44>)
 8001d94:	5cd3      	ldrb	r3, [r2, r3]
 8001d96:	001a      	movs	r2, r3
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	18d3      	adds	r3, r2, r3
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	601a      	str	r2, [r3, #0]
             Mode);
}
 8001da2:	46c0      	nop			@ (mov r8, r8)
 8001da4:	46bd      	mov	sp, r7
 8001da6:	b006      	add	sp, #24
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	46c0      	nop			@ (mov r8, r8)
 8001dac:	0800c194 	.word	0x0800c194

08001db0 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_PINC,
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	4a0b      	ldr	r2, [pc, #44]	@ (8001df4 <LL_DMA_SetPeriphIncMode+0x44>)
 8001dc6:	5cd3      	ldrb	r3, [r2, r3]
 8001dc8:	001a      	movs	r2, r3
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	18d3      	adds	r3, r2, r3
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2240      	movs	r2, #64	@ 0x40
 8001dd2:	4393      	bics	r3, r2
 8001dd4:	0019      	movs	r1, r3
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	4a06      	ldr	r2, [pc, #24]	@ (8001df4 <LL_DMA_SetPeriphIncMode+0x44>)
 8001ddc:	5cd3      	ldrb	r3, [r2, r3]
 8001dde:	001a      	movs	r2, r3
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	18d3      	adds	r3, r2, r3
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	430a      	orrs	r2, r1
 8001de8:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcIncMode);
}
 8001dea:	46c0      	nop			@ (mov r8, r8)
 8001dec:	46bd      	mov	sp, r7
 8001dee:	b006      	add	sp, #24
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	46c0      	nop			@ (mov r8, r8)
 8001df4:	0800c194 	.word	0x0800c194

08001df8 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b086      	sub	sp, #24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_MINC,
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	4a0b      	ldr	r2, [pc, #44]	@ (8001e3c <LL_DMA_SetMemoryIncMode+0x44>)
 8001e0e:	5cd3      	ldrb	r3, [r2, r3]
 8001e10:	001a      	movs	r2, r3
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	18d3      	adds	r3, r2, r3
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2280      	movs	r2, #128	@ 0x80
 8001e1a:	4393      	bics	r3, r2
 8001e1c:	0019      	movs	r1, r3
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	3b01      	subs	r3, #1
 8001e22:	4a06      	ldr	r2, [pc, #24]	@ (8001e3c <LL_DMA_SetMemoryIncMode+0x44>)
 8001e24:	5cd3      	ldrb	r3, [r2, r3]
 8001e26:	001a      	movs	r2, r3
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	18d3      	adds	r3, r2, r3
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstIncMode);
}
 8001e32:	46c0      	nop			@ (mov r8, r8)
 8001e34:	46bd      	mov	sp, r7
 8001e36:	b006      	add	sp, #24
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	46c0      	nop			@ (mov r8, r8)
 8001e3c:	0800c194 	.word	0x0800c194

08001e40 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_PSIZE,
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	3b01      	subs	r3, #1
 8001e54:	4a0b      	ldr	r2, [pc, #44]	@ (8001e84 <LL_DMA_SetPeriphSize+0x44>)
 8001e56:	5cd3      	ldrb	r3, [r2, r3]
 8001e58:	001a      	movs	r2, r3
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	18d3      	adds	r3, r2, r3
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a09      	ldr	r2, [pc, #36]	@ (8001e88 <LL_DMA_SetPeriphSize+0x48>)
 8001e62:	4013      	ands	r3, r2
 8001e64:	0019      	movs	r1, r3
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	3b01      	subs	r3, #1
 8001e6a:	4a06      	ldr	r2, [pc, #24]	@ (8001e84 <LL_DMA_SetPeriphSize+0x44>)
 8001e6c:	5cd3      	ldrb	r3, [r2, r3]
 8001e6e:	001a      	movs	r2, r3
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	18d3      	adds	r3, r2, r3
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	430a      	orrs	r2, r1
 8001e78:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcDataSize);
}
 8001e7a:	46c0      	nop			@ (mov r8, r8)
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	b006      	add	sp, #24
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	46c0      	nop			@ (mov r8, r8)
 8001e84:	0800c194 	.word	0x0800c194
 8001e88:	fffffcff 	.word	0xfffffcff

08001e8c <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_MSIZE,
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	4a0b      	ldr	r2, [pc, #44]	@ (8001ed0 <LL_DMA_SetMemorySize+0x44>)
 8001ea2:	5cd3      	ldrb	r3, [r2, r3]
 8001ea4:	001a      	movs	r2, r3
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	18d3      	adds	r3, r2, r3
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a09      	ldr	r2, [pc, #36]	@ (8001ed4 <LL_DMA_SetMemorySize+0x48>)
 8001eae:	4013      	ands	r3, r2
 8001eb0:	0019      	movs	r1, r3
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	3b01      	subs	r3, #1
 8001eb6:	4a06      	ldr	r2, [pc, #24]	@ (8001ed0 <LL_DMA_SetMemorySize+0x44>)
 8001eb8:	5cd3      	ldrb	r3, [r2, r3]
 8001eba:	001a      	movs	r2, r3
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	18d3      	adds	r3, r2, r3
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstDataSize);
}
 8001ec6:	46c0      	nop			@ (mov r8, r8)
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	b006      	add	sp, #24
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	46c0      	nop			@ (mov r8, r8)
 8001ed0:	0800c194 	.word	0x0800c194
 8001ed4:	fffff3ff 	.word	0xfffff3ff

08001ed8 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_PL,
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	3b01      	subs	r3, #1
 8001eec:	4a0b      	ldr	r2, [pc, #44]	@ (8001f1c <LL_DMA_SetChannelPriorityLevel+0x44>)
 8001eee:	5cd3      	ldrb	r3, [r2, r3]
 8001ef0:	001a      	movs	r2, r3
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	18d3      	adds	r3, r2, r3
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a09      	ldr	r2, [pc, #36]	@ (8001f20 <LL_DMA_SetChannelPriorityLevel+0x48>)
 8001efa:	4013      	ands	r3, r2
 8001efc:	0019      	movs	r1, r3
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	3b01      	subs	r3, #1
 8001f02:	4a06      	ldr	r2, [pc, #24]	@ (8001f1c <LL_DMA_SetChannelPriorityLevel+0x44>)
 8001f04:	5cd3      	ldrb	r3, [r2, r3]
 8001f06:	001a      	movs	r2, r3
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	18d3      	adds	r3, r2, r3
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	601a      	str	r2, [r3, #0]
             Priority);
}
 8001f12:	46c0      	nop			@ (mov r8, r8)
 8001f14:	46bd      	mov	sp, r7
 8001f16:	b006      	add	sp, #24
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	46c0      	nop			@ (mov r8, r8)
 8001f1c:	0800c194 	.word	0x0800c194
 8001f20:	ffffcfff 	.word	0xffffcfff

08001f24 <LL_DMA_SetDataLength>:
  * @note (*) Availability depends on devices
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CNDTR,
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	3b01      	subs	r3, #1
 8001f38:	4a0a      	ldr	r2, [pc, #40]	@ (8001f64 <LL_DMA_SetDataLength+0x40>)
 8001f3a:	5cd3      	ldrb	r3, [r2, r3]
 8001f3c:	001a      	movs	r2, r3
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	18d3      	adds	r3, r2, r3
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	0c1b      	lsrs	r3, r3, #16
 8001f46:	0419      	lsls	r1, r3, #16
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	4a05      	ldr	r2, [pc, #20]	@ (8001f64 <LL_DMA_SetDataLength+0x40>)
 8001f4e:	5cd3      	ldrb	r3, [r2, r3]
 8001f50:	001a      	movs	r2, r3
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	18d3      	adds	r3, r2, r3
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	605a      	str	r2, [r3, #4]
             DMA_CNDTR_NDT, NbData);
}
 8001f5c:	46c0      	nop			@ (mov r8, r8)
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	b006      	add	sp, #24
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	0800c194 	.word	0x0800c194

08001f68 <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddress,
                                            uint32_t DstAddress, uint32_t Direction)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
 8001f74:	603b      	str	r3, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	617b      	str	r3, [r7, #20]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 8001f7a:	6a3b      	ldr	r3, [r7, #32]
 8001f7c:	2b10      	cmp	r3, #16
 8001f7e:	d112      	bne.n	8001fa6 <LL_DMA_ConfigAddresses+0x3e>
  {
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CMAR, SrcAddress);
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	3b01      	subs	r3, #1
 8001f84:	4a13      	ldr	r2, [pc, #76]	@ (8001fd4 <LL_DMA_ConfigAddresses+0x6c>)
 8001f86:	5cd3      	ldrb	r3, [r2, r3]
 8001f88:	001a      	movs	r2, r3
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	18d3      	adds	r3, r2, r3
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	60da      	str	r2, [r3, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CPAR, DstAddress);
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	3b01      	subs	r3, #1
 8001f96:	4a0f      	ldr	r2, [pc, #60]	@ (8001fd4 <LL_DMA_ConfigAddresses+0x6c>)
 8001f98:	5cd3      	ldrb	r3, [r2, r3]
 8001f9a:	001a      	movs	r2, r3
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	18d3      	adds	r3, r2, r3
 8001fa0:	683a      	ldr	r2, [r7, #0]
 8001fa2:	609a      	str	r2, [r3, #8]
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CPAR, SrcAddress);
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CMAR, DstAddress);
  }
}
 8001fa4:	e011      	b.n	8001fca <LL_DMA_ConfigAddresses+0x62>
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CPAR, SrcAddress);
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	3b01      	subs	r3, #1
 8001faa:	4a0a      	ldr	r2, [pc, #40]	@ (8001fd4 <LL_DMA_ConfigAddresses+0x6c>)
 8001fac:	5cd3      	ldrb	r3, [r2, r3]
 8001fae:	001a      	movs	r2, r3
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	18d3      	adds	r3, r2, r3
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	609a      	str	r2, [r3, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CMAR, DstAddress);
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	4a05      	ldr	r2, [pc, #20]	@ (8001fd4 <LL_DMA_ConfigAddresses+0x6c>)
 8001fbe:	5cd3      	ldrb	r3, [r2, r3]
 8001fc0:	001a      	movs	r2, r3
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	18d3      	adds	r3, r2, r3
 8001fc6:	683a      	ldr	r2, [r7, #0]
 8001fc8:	60da      	str	r2, [r3, #12]
}
 8001fca:	46c0      	nop			@ (mov r8, r8)
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	b006      	add	sp, #24
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	46c0      	nop			@ (mov r8, r8)
 8001fd4:	0800c194 	.word	0x0800c194

08001fd8 <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMAMUX_REQ_USART2_TX
  * @note (*) Availability depends on devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Request)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	607a      	str	r2, [r7, #4]
  (void)(DMAx);
  MODIFY_REG(((DMAMUX_Channel_TypeDef *)((uint32_t)DMAMUX1_Channel0 + (DMAMUX_CCR_SIZE * (Channel - 1UL))))->CCR,
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	4a0a      	ldr	r2, [pc, #40]	@ (8002010 <LL_DMA_SetPeriphRequest+0x38>)
 8001fe8:	4694      	mov	ip, r2
 8001fea:	4463      	add	r3, ip
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	22ff      	movs	r2, #255	@ 0xff
 8001ff2:	4393      	bics	r3, r2
 8001ff4:	0019      	movs	r1, r3
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	4a05      	ldr	r2, [pc, #20]	@ (8002010 <LL_DMA_SetPeriphRequest+0x38>)
 8001ffa:	4694      	mov	ip, r2
 8001ffc:	4463      	add	r3, ip
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	430a      	orrs	r2, r1
 8002004:	601a      	str	r2, [r3, #0]
             DMAMUX_CxCR_DMAREQ_ID, Request);
}
 8002006:	46c0      	nop			@ (mov r8, r8)
 8002008:	46bd      	mov	sp, r7
 800200a:	b004      	add	sp, #16
 800200c:	bd80      	pop	{r7, pc}
 800200e:	46c0      	nop			@ (mov r8, r8)
 8002010:	100081ff 	.word	0x100081ff

08002014 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_5 (*)
  * @note (*) Availability depends on devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_TCIE);
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	3b01      	subs	r3, #1
 8002026:	4a0a      	ldr	r2, [pc, #40]	@ (8002050 <LL_DMA_EnableIT_TC+0x3c>)
 8002028:	5cd3      	ldrb	r3, [r2, r3]
 800202a:	001a      	movs	r2, r3
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	18d3      	adds	r3, r2, r3
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	3b01      	subs	r3, #1
 8002036:	4906      	ldr	r1, [pc, #24]	@ (8002050 <LL_DMA_EnableIT_TC+0x3c>)
 8002038:	5ccb      	ldrb	r3, [r1, r3]
 800203a:	0019      	movs	r1, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	18cb      	adds	r3, r1, r3
 8002040:	2102      	movs	r1, #2
 8002042:	430a      	orrs	r2, r1
 8002044:	601a      	str	r2, [r3, #0]
}
 8002046:	46c0      	nop			@ (mov r8, r8)
 8002048:	46bd      	mov	sp, r7
 800204a:	b004      	add	sp, #16
 800204c:	bd80      	pop	{r7, pc}
 800204e:	46c0      	nop			@ (mov r8, r8)
 8002050:	0800c194 	.word	0x0800c194

08002054 <LL_DMA_EnableIT_HT>:
  *         @arg @ref LL_DMA_CHANNEL_5 (*)
  * @note (*) Availability depends on devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_HTIE);
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	3b01      	subs	r3, #1
 8002066:	4a0a      	ldr	r2, [pc, #40]	@ (8002090 <LL_DMA_EnableIT_HT+0x3c>)
 8002068:	5cd3      	ldrb	r3, [r2, r3]
 800206a:	001a      	movs	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	18d3      	adds	r3, r2, r3
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	3b01      	subs	r3, #1
 8002076:	4906      	ldr	r1, [pc, #24]	@ (8002090 <LL_DMA_EnableIT_HT+0x3c>)
 8002078:	5ccb      	ldrb	r3, [r1, r3]
 800207a:	0019      	movs	r1, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	18cb      	adds	r3, r1, r3
 8002080:	2104      	movs	r1, #4
 8002082:	430a      	orrs	r2, r1
 8002084:	601a      	str	r2, [r3, #0]
}
 8002086:	46c0      	nop			@ (mov r8, r8)
 8002088:	46bd      	mov	sp, r7
 800208a:	b004      	add	sp, #16
 800208c:	bd80      	pop	{r7, pc}
 800208e:	46c0      	nop			@ (mov r8, r8)
 8002090:	0800c194 	.word	0x0800c194

08002094 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_5 (*)
  * @note (*) Availability depends on devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_TEIE);
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	3b01      	subs	r3, #1
 80020a6:	4a0a      	ldr	r2, [pc, #40]	@ (80020d0 <LL_DMA_EnableIT_TE+0x3c>)
 80020a8:	5cd3      	ldrb	r3, [r2, r3]
 80020aa:	001a      	movs	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	18d3      	adds	r3, r2, r3
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	3b01      	subs	r3, #1
 80020b6:	4906      	ldr	r1, [pc, #24]	@ (80020d0 <LL_DMA_EnableIT_TE+0x3c>)
 80020b8:	5ccb      	ldrb	r3, [r1, r3]
 80020ba:	0019      	movs	r1, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	18cb      	adds	r3, r1, r3
 80020c0:	2108      	movs	r1, #8
 80020c2:	430a      	orrs	r2, r1
 80020c4:	601a      	str	r2, [r3, #0]
}
 80020c6:	46c0      	nop			@ (mov r8, r8)
 80020c8:	46bd      	mov	sp, r7
 80020ca:	b004      	add	sp, #16
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	46c0      	nop			@ (mov r8, r8)
 80020d0:	0800c194 	.word	0x0800c194

080020d4 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
	// Refresh the Encoder Speed (pulses / 10 minutes)
	holding_register_database[ENCODER_SPEED] = (int16_t)((((uint32_t)encoder_pulse)*600UL*10000UL) / (htim14.Init.Period + 1UL));
 80020dc:	4b0b      	ldr	r3, [pc, #44]	@ (800210c <HAL_TIM_PeriodElapsedCallback+0x38>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	001a      	movs	r2, r3
 80020e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002110 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80020e4:	435a      	muls	r2, r3
 80020e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002114 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	3301      	adds	r3, #1
 80020ec:	0019      	movs	r1, r3
 80020ee:	0010      	movs	r0, r2
 80020f0:	f7fe f80a 	bl	8000108 <__udivsi3>
 80020f4:	0003      	movs	r3, r0
 80020f6:	b299      	uxth	r1, r3
 80020f8:	4b07      	ldr	r3, [pc, #28]	@ (8002118 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80020fa:	227c      	movs	r2, #124	@ 0x7c
 80020fc:	5299      	strh	r1, [r3, r2]
	encoder_pulse = 0;
 80020fe:	4b03      	ldr	r3, [pc, #12]	@ (800210c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]
}
 8002104:	46c0      	nop			@ (mov r8, r8)
 8002106:	46bd      	mov	sp, r7
 8002108:	b002      	add	sp, #8
 800210a:	bd80      	pop	{r7, pc}
 800210c:	200006a4 	.word	0x200006a4
 8002110:	005b8d80 	.word	0x005b8d80
 8002114:	200004c0 	.word	0x200004c0
 8002118:	20000014 	.word	0x20000014

0800211c <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 800211c:	b5b0      	push	{r4, r5, r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	0002      	movs	r2, r0
 8002124:	1dbb      	adds	r3, r7, #6
 8002126:	801a      	strh	r2, [r3, #0]
	GPIO_PinState pulse_b = HAL_GPIO_ReadPin(Encoder_Pulse_B_GPIO_Port, Encoder_Pulse_B_Pin);
 8002128:	250f      	movs	r5, #15
 800212a:	197c      	adds	r4, r7, r5
 800212c:	2380      	movs	r3, #128	@ 0x80
 800212e:	01db      	lsls	r3, r3, #7
 8002130:	4a0c      	ldr	r2, [pc, #48]	@ (8002164 <HAL_GPIO_EXTI_Rising_Callback+0x48>)
 8002132:	0019      	movs	r1, r3
 8002134:	0010      	movs	r0, r2
 8002136:	f003 fc35 	bl	80059a4 <HAL_GPIO_ReadPin>
 800213a:	0003      	movs	r3, r0
 800213c:	7023      	strb	r3, [r4, #0]
	if(pulse_b == GPIO_PIN_SET)
 800213e:	197b      	adds	r3, r7, r5
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	2b01      	cmp	r3, #1
 8002144:	d105      	bne.n	8002152 <HAL_GPIO_EXTI_Rising_Callback+0x36>
	{
		encoder_pulse++;
 8002146:	4b08      	ldr	r3, [pc, #32]	@ (8002168 <HAL_GPIO_EXTI_Rising_Callback+0x4c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	1c5a      	adds	r2, r3, #1
 800214c:	4b06      	ldr	r3, [pc, #24]	@ (8002168 <HAL_GPIO_EXTI_Rising_Callback+0x4c>)
 800214e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		encoder_pulse--;
	}
}
 8002150:	e004      	b.n	800215c <HAL_GPIO_EXTI_Rising_Callback+0x40>
		encoder_pulse--;
 8002152:	4b05      	ldr	r3, [pc, #20]	@ (8002168 <HAL_GPIO_EXTI_Rising_Callback+0x4c>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	1e5a      	subs	r2, r3, #1
 8002158:	4b03      	ldr	r3, [pc, #12]	@ (8002168 <HAL_GPIO_EXTI_Rising_Callback+0x4c>)
 800215a:	601a      	str	r2, [r3, #0]
}
 800215c:	46c0      	nop			@ (mov r8, r8)
 800215e:	46bd      	mov	sp, r7
 8002160:	b004      	add	sp, #16
 8002162:	bdb0      	pop	{r4, r5, r7, pc}
 8002164:	50000400 	.word	0x50000400
 8002168:	200006a4 	.word	0x200006a4

0800216c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800216c:	b5b0      	push	{r4, r5, r7, lr}
 800216e:	b086      	sub	sp, #24
 8002170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	int8_t modbus_status = HAL_OK;
 8002172:	2317      	movs	r3, #23
 8002174:	18fb      	adds	r3, r7, r3
 8002176:	2200      	movs	r2, #0
 8002178:	701a      	strb	r2, [r3, #0]
	int8_t i2c_status = HAL_OK;
 800217a:	230d      	movs	r3, #13
 800217c:	18fb      	adds	r3, r7, r3
 800217e:	2200      	movs	r2, #0
 8002180:	701a      	strb	r2, [r3, #0]
	int8_t adc_status = HAL_OK;
 8002182:	230c      	movs	r3, #12
 8002184:	18fb      	adds	r3, r7, r3
 8002186:	2200      	movs	r2, #0
 8002188:	701a      	strb	r2, [r3, #0]
	uint8_t modbus_tx_len = 0;
 800218a:	230b      	movs	r3, #11
 800218c:	18fb      	adds	r3, r7, r3
 800218e:	2200      	movs	r2, #0
 8002190:	701a      	strb	r2, [r3, #0]
	uint16_t encoder_refresh = 10000;
 8002192:	2314      	movs	r3, #20
 8002194:	18fb      	adds	r3, r7, r3
 8002196:	4ad8      	ldr	r2, [pc, #864]	@ (80024f8 <main+0x38c>)
 8002198:	801a      	strh	r2, [r3, #0]
	uint8_t actuate_complete[NUM_ACTUATORS];
	uint8_t macro_consistency_count[NUM_ACTUATORS];
	uint8_t micro_consistency_count[NUM_ACTUATORS];
	uint32_t actuator_time = 0;
 800219a:	2300      	movs	r3, #0
 800219c:	613b      	str	r3, [r7, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800219e:	f002 fc48 	bl	8004a32 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021a2:	f000 fb6b 	bl	800287c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021a6:	f000 ff3f 	bl	8003028 <MX_GPIO_Init>
  MX_DMA_Init();
 80021aa:	f000 ff11 	bl	8002fd0 <MX_DMA_Init>
  MX_ADC1_Init();
 80021ae:	f000 fba3 	bl	80028f8 <MX_ADC1_Init>
  MX_I2C1_Init();
 80021b2:	f000 fd6d 	bl	8002c90 <MX_I2C1_Init>
  MX_SPI1_Init();
 80021b6:	f000 fdab 	bl	8002d10 <MX_SPI1_Init>
  MX_TIM1_Init();
 80021ba:	f000 fde7 	bl	8002d8c <MX_TIM1_Init>
  MX_TIM14_Init();
 80021be:	f000 fe8f 	bl	8002ee0 <MX_TIM14_Init>
  MX_USART1_UART_Init();
 80021c2:	f000 feb5 	bl	8002f30 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // Initialize the pin mapping table
  pin_map[0] = Actuator_A_EN_Pin;
 80021c6:	4bcd      	ldr	r3, [pc, #820]	@ (80024fc <main+0x390>)
 80021c8:	2240      	movs	r2, #64	@ 0x40
 80021ca:	801a      	strh	r2, [r3, #0]
  pin_map[1] = Actuator_B_EN_Pin;
 80021cc:	4bcb      	ldr	r3, [pc, #812]	@ (80024fc <main+0x390>)
 80021ce:	2280      	movs	r2, #128	@ 0x80
 80021d0:	805a      	strh	r2, [r3, #2]
  pin_map[2] = Actuator_C_EN_Pin;
 80021d2:	4bca      	ldr	r3, [pc, #808]	@ (80024fc <main+0x390>)
 80021d4:	2201      	movs	r2, #1
 80021d6:	809a      	strh	r2, [r3, #4]

  port_map[0] = Actuator_A_EN_GPIO_Port;
 80021d8:	4bc9      	ldr	r3, [pc, #804]	@ (8002500 <main+0x394>)
 80021da:	4aca      	ldr	r2, [pc, #808]	@ (8002504 <main+0x398>)
 80021dc:	601a      	str	r2, [r3, #0]
  port_map[1] = Actuator_B_EN_GPIO_Port;
 80021de:	4bc8      	ldr	r3, [pc, #800]	@ (8002500 <main+0x394>)
 80021e0:	4ac8      	ldr	r2, [pc, #800]	@ (8002504 <main+0x398>)
 80021e2:	605a      	str	r2, [r3, #4]
  port_map[2] = Actuator_C_EN_GPIO_Port;
 80021e4:	4bc6      	ldr	r3, [pc, #792]	@ (8002500 <main+0x394>)
 80021e6:	4ac8      	ldr	r2, [pc, #800]	@ (8002508 <main+0x39c>)
 80021e8:	609a      	str	r2, [r3, #8]

  // Initialize the PID constraints to defaults
  pid_constraints.Kp = 1;              // Proportional gain constant
 80021ea:	4bc8      	ldr	r3, [pc, #800]	@ (800250c <main+0x3a0>)
 80021ec:	22fe      	movs	r2, #254	@ 0xfe
 80021ee:	0592      	lsls	r2, r2, #22
 80021f0:	601a      	str	r2, [r3, #0]
  pid_constraints.Ki = 0.1;            // Integral gain constant
 80021f2:	4bc6      	ldr	r3, [pc, #792]	@ (800250c <main+0x3a0>)
 80021f4:	4ac6      	ldr	r2, [pc, #792]	@ (8002510 <main+0x3a4>)
 80021f6:	605a      	str	r2, [r3, #4]
  pid_constraints.Kd = 5;              // Derivative gain constant
 80021f8:	4bc4      	ldr	r3, [pc, #784]	@ (800250c <main+0x3a0>)
 80021fa:	4ac6      	ldr	r2, [pc, #792]	@ (8002514 <main+0x3a8>)
 80021fc:	609a      	str	r2, [r3, #8]
  pid_constraints.Kaw = 0.1;           // Anti-windup gain constant
 80021fe:	4bc3      	ldr	r3, [pc, #780]	@ (800250c <main+0x3a0>)
 8002200:	4ac3      	ldr	r2, [pc, #780]	@ (8002510 <main+0x3a4>)
 8002202:	60da      	str	r2, [r3, #12]
  pid_constraints.T_C = 1;             // Time constant for derivative filtering
 8002204:	4bc1      	ldr	r3, [pc, #772]	@ (800250c <main+0x3a0>)
 8002206:	22fe      	movs	r2, #254	@ 0xfe
 8002208:	0592      	lsls	r2, r2, #22
 800220a:	611a      	str	r2, [r3, #16]
  pid_constraints.T = 100;             // Time step
 800220c:	4bbf      	ldr	r3, [pc, #764]	@ (800250c <main+0x3a0>)
 800220e:	4ac2      	ldr	r2, [pc, #776]	@ (8002518 <main+0x3ac>)
 8002210:	615a      	str	r2, [r3, #20]
  pid_constraints.max = 100;           // Max command
 8002212:	4bbe      	ldr	r3, [pc, #760]	@ (800250c <main+0x3a0>)
 8002214:	4ac0      	ldr	r2, [pc, #768]	@ (8002518 <main+0x3ac>)
 8002216:	619a      	str	r2, [r3, #24]
  pid_constraints.min = 0;             // Min command
 8002218:	4bbc      	ldr	r3, [pc, #752]	@ (800250c <main+0x3a0>)
 800221a:	2200      	movs	r2, #0
 800221c:	61da      	str	r2, [r3, #28]
  pid_constraints.max_rate = 40;       // Max rate of change of the command
 800221e:	4bbb      	ldr	r3, [pc, #748]	@ (800250c <main+0x3a0>)
 8002220:	4abe      	ldr	r2, [pc, #760]	@ (800251c <main+0x3b0>)
 8002222:	621a      	str	r2, [r3, #32]
  pid_constraints.integral = 0;        // Integral term
 8002224:	4bb9      	ldr	r3, [pc, #740]	@ (800250c <main+0x3a0>)
 8002226:	2200      	movs	r2, #0
 8002228:	625a      	str	r2, [r3, #36]	@ 0x24
  pid_constraints.err_prev = 0;        // Previous error
 800222a:	4bb8      	ldr	r3, [pc, #736]	@ (800250c <main+0x3a0>)
 800222c:	2200      	movs	r2, #0
 800222e:	629a      	str	r2, [r3, #40]	@ 0x28
  pid_constraints.deriv_prev = 0;      // Previous derivative
 8002230:	4bb6      	ldr	r3, [pc, #728]	@ (800250c <main+0x3a0>)
 8002232:	2200      	movs	r2, #0
 8002234:	62da      	str	r2, [r3, #44]	@ 0x2c
  pid_constraints.command_sat_prev = 0;// Previous saturated command
 8002236:	4bb5      	ldr	r3, [pc, #724]	@ (800250c <main+0x3a0>)
 8002238:	2200      	movs	r2, #0
 800223a:	631a      	str	r2, [r3, #48]	@ 0x30
  pid_constraints.command_prev = 0;    // Previous command
 800223c:	4bb3      	ldr	r3, [pc, #716]	@ (800250c <main+0x3a0>)
 800223e:	2200      	movs	r2, #0
 8002240:	635a      	str	r2, [r3, #52]	@ 0x34

  if(modbus_set_rx() != HAL_OK)
 8002242:	f001 fbe5 	bl	8003a10 <modbus_set_rx>
 8002246:	1e03      	subs	r3, r0, #0
 8002248:	d001      	beq.n	800224e <main+0xe2>
  {
	  Error_Handler();
 800224a:	f000 ffc7 	bl	80031dc <Error_Handler>
  }

  /* Perform ADC activation procedure to make it ready to convert. */
  ADC_Activate();
 800224e:	f001 fe5b 	bl	8003f08 <ADC_Activate>
  if ((LL_ADC_IsEnabled(ADC1) == 1)               &&
 8002252:	4bb3      	ldr	r3, [pc, #716]	@ (8002520 <main+0x3b4>)
 8002254:	0018      	movs	r0, r3
 8002256:	f7ff fc6f 	bl	8001b38 <LL_ADC_IsEnabled>
 800225a:	0003      	movs	r3, r0
 800225c:	2b01      	cmp	r3, #1
 800225e:	d10f      	bne.n	8002280 <main+0x114>
	  (LL_ADC_IsDisableOngoing(ADC1) == 0)        &&
 8002260:	4baf      	ldr	r3, [pc, #700]	@ (8002520 <main+0x3b4>)
 8002262:	0018      	movs	r0, r3
 8002264:	f7ff fc79 	bl	8001b5a <LL_ADC_IsDisableOngoing>
 8002268:	1e03      	subs	r3, r0, #0
  if ((LL_ADC_IsEnabled(ADC1) == 1)               &&
 800226a:	d109      	bne.n	8002280 <main+0x114>
	  (LL_ADC_REG_IsConversionOngoing(ADC1) == 0))
 800226c:	4bac      	ldr	r3, [pc, #688]	@ (8002520 <main+0x3b4>)
 800226e:	0018      	movs	r0, r3
 8002270:	f7ff fc96 	bl	8001ba0 <LL_ADC_REG_IsConversionOngoing>
 8002274:	1e03      	subs	r3, r0, #0
	  (LL_ADC_IsDisableOngoing(ADC1) == 0)        &&
 8002276:	d103      	bne.n	8002280 <main+0x114>
  {
	  LL_ADC_REG_StartConversion(ADC1);
 8002278:	4ba9      	ldr	r3, [pc, #676]	@ (8002520 <main+0x3b4>)
 800227a:	0018      	movs	r0, r3
 800227c:	f7ff fc7e 	bl	8001b7c <LL_ADC_REG_StartConversion>
  }

  bno055_init();
 8002280:	f7fe f914 	bl	80004ac <bno055_init>

  	if(DRV_Init(DRV8244P_Q1) != HAL_OK)
 8002284:	2046      	movs	r0, #70	@ 0x46
 8002286:	f7fe fef9 	bl	800107c <DRV_Init>
 800228a:	1e03      	subs	r3, r0, #0
 800228c:	d001      	beq.n	8002292 <main+0x126>
  	{
  		Error_Handler();
 800228e:	f000 ffa5 	bl	80031dc <Error_Handler>
	* target_actuator
	* 0: Actuator A
	* 1: Actuator B
	* 2: Actuator C
	*/
  	uint8_t target_actuator = 0;
 8002292:	230f      	movs	r3, #15
 8002294:	18fb      	adds	r3, r7, r3
 8002296:	2200      	movs	r2, #0
 8002298:	701a      	strb	r2, [r3, #0]
  	actuate_complete[0] = 0;
 800229a:	2108      	movs	r1, #8
 800229c:	187b      	adds	r3, r7, r1
 800229e:	2200      	movs	r2, #0
 80022a0:	701a      	strb	r2, [r3, #0]
  	actuate_complete[1] = 0;
 80022a2:	187b      	adds	r3, r7, r1
 80022a4:	2200      	movs	r2, #0
 80022a6:	705a      	strb	r2, [r3, #1]
  	actuate_complete[2] = 0;
 80022a8:	187b      	adds	r3, r7, r1
 80022aa:	2200      	movs	r2, #0
 80022ac:	709a      	strb	r2, [r3, #2]
//  	actuate(target_actuator, holding_register_database[ADC_6 + target_actuator], holding_register_database[ACTUATOR_A_TARGET + target_actuator]);
//  	run_motor();

  	HAL_TIM_Base_Start_IT(&htim14);
 80022ae:	4b9d      	ldr	r3, [pc, #628]	@ (8002524 <main+0x3b8>)
 80022b0:	0018      	movs	r0, r3
 80022b2:	f006 ff9b 	bl	80091ec <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */


  while (1)
  {
	  if(modbus_rx())
 80022b6:	f001 f819 	bl	80032ec <modbus_rx>
 80022ba:	1e03      	subs	r3, r0, #0
 80022bc:	d100      	bne.n	80022c0 <main+0x154>
 80022be:	e081      	b.n	80023c4 <main+0x258>
	  {
		  if(get_rx_buffer(0) == holding_register_database[MODBUS_ID]) // Check Slave ID
 80022c0:	2000      	movs	r0, #0
 80022c2:	f001 fcb9 	bl	8003c38 <get_rx_buffer>
 80022c6:	0003      	movs	r3, r0
 80022c8:	001a      	movs	r2, r3
 80022ca:	4b97      	ldr	r3, [pc, #604]	@ (8002528 <main+0x3bc>)
 80022cc:	881b      	ldrh	r3, [r3, #0]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d139      	bne.n	8002346 <main+0x1da>
		  {
			  switch(get_rx_buffer(1))
 80022d2:	2001      	movs	r0, #1
 80022d4:	f001 fcb0 	bl	8003c38 <get_rx_buffer>
 80022d8:	0003      	movs	r3, r0
 80022da:	2b03      	cmp	r3, #3
 80022dc:	d002      	beq.n	80022e4 <main+0x178>
 80022de:	2b10      	cmp	r3, #16
 80022e0:	d00a      	beq.n	80022f8 <main+0x18c>
 80022e2:	e013      	b.n	800230c <main+0x1a0>
			  {
				  case 0x03:
				  {
					  // Return holding registers
					  modbus_status = return_holding_registers(&modbus_tx_len);
 80022e4:	2317      	movs	r3, #23
 80022e6:	18fc      	adds	r4, r7, r3
 80022e8:	230b      	movs	r3, #11
 80022ea:	18fb      	adds	r3, r7, r3
 80022ec:	0018      	movs	r0, r3
 80022ee:	f001 f80f 	bl	8003310 <return_holding_registers>
 80022f2:	0003      	movs	r3, r0
 80022f4:	7023      	strb	r3, [r4, #0]
					  break;
 80022f6:	e011      	b.n	800231c <main+0x1b0>
				  }
				  case 0x10:
				  {
					  // Write holding registers
					  modbus_status = edit_multiple_registers(&modbus_tx_len);
 80022f8:	2317      	movs	r3, #23
 80022fa:	18fc      	adds	r4, r7, r3
 80022fc:	230b      	movs	r3, #11
 80022fe:	18fb      	adds	r3, r7, r3
 8002300:	0018      	movs	r0, r3
 8002302:	f001 f8b1 	bl	8003468 <edit_multiple_registers>
 8002306:	0003      	movs	r3, r0
 8002308:	7023      	strb	r3, [r4, #0]
					  break;
 800230a:	e007      	b.n	800231c <main+0x1b0>
				  }
				  default:
				  {
					  modbus_status = modbus_exception(MB_ILLEGAL_FUNCTION);
 800230c:	2317      	movs	r3, #23
 800230e:	18fc      	adds	r4, r7, r3
 8002310:	2004      	movs	r0, #4
 8002312:	f001 f9ab 	bl	800366c <modbus_exception>
 8002316:	0003      	movs	r3, r0
 8002318:	7023      	strb	r3, [r4, #0]
					  break;
 800231a:	46c0      	nop			@ (mov r8, r8)
				  }
			  }
			  if(modbus_status != 0)
 800231c:	2117      	movs	r1, #23
 800231e:	187b      	adds	r3, r7, r1
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	b25b      	sxtb	r3, r3
 8002324:	2b00      	cmp	r3, #0
 8002326:	d04d      	beq.n	80023c4 <main+0x258>
			  {
				  holding_register_database[MB_ERRORS] |= 1U << ((modbus_status) + (MB_FATAL_ERROR - RANGE_ERROR));
 8002328:	4b7f      	ldr	r3, [pc, #508]	@ (8002528 <main+0x3bc>)
 800232a:	891a      	ldrh	r2, [r3, #8]
 800232c:	187b      	adds	r3, r7, r1
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	b25b      	sxtb	r3, r3
 8002332:	3307      	adds	r3, #7
 8002334:	2101      	movs	r1, #1
 8002336:	4099      	lsls	r1, r3
 8002338:	000b      	movs	r3, r1
 800233a:	b29b      	uxth	r3, r3
 800233c:	4313      	orrs	r3, r2
 800233e:	b29a      	uxth	r2, r3
 8002340:	4b79      	ldr	r3, [pc, #484]	@ (8002528 <main+0x3bc>)
 8002342:	811a      	strh	r2, [r3, #8]
 8002344:	e03e      	b.n	80023c4 <main+0x258>
			  }
		  }
		  // Special case where you retrieve the modbus ID
		  else if((get_rx_buffer(0) == 0xFF) && // modbus_id = 0xFF = 255
 8002346:	2000      	movs	r0, #0
 8002348:	f001 fc76 	bl	8003c38 <get_rx_buffer>
 800234c:	0003      	movs	r3, r0
 800234e:	2bff      	cmp	r3, #255	@ 0xff
 8002350:	d138      	bne.n	80023c4 <main+0x258>
			(get_rx_buffer(1) == 0x03) && // Function code = read_holding_registers
 8002352:	2001      	movs	r0, #1
 8002354:	f001 fc70 	bl	8003c38 <get_rx_buffer>
 8002358:	0003      	movs	r3, r0
		  else if((get_rx_buffer(0) == 0xFF) && // modbus_id = 0xFF = 255
 800235a:	2b03      	cmp	r3, #3
 800235c:	d132      	bne.n	80023c4 <main+0x258>
			(((get_rx_buffer(2) << 8) | get_rx_buffer(3)) == 0x00) && // Address to read = 0
 800235e:	2002      	movs	r0, #2
 8002360:	f001 fc6a 	bl	8003c38 <get_rx_buffer>
 8002364:	0003      	movs	r3, r0
 8002366:	021c      	lsls	r4, r3, #8
 8002368:	2003      	movs	r0, #3
 800236a:	f001 fc65 	bl	8003c38 <get_rx_buffer>
 800236e:	0003      	movs	r3, r0
 8002370:	4323      	orrs	r3, r4
			(get_rx_buffer(1) == 0x03) && // Function code = read_holding_registers
 8002372:	d127      	bne.n	80023c4 <main+0x258>
			(((get_rx_buffer(4) << 8) | get_rx_buffer(5)) == 1)) // # of registers to read = 1
 8002374:	2004      	movs	r0, #4
 8002376:	f001 fc5f 	bl	8003c38 <get_rx_buffer>
 800237a:	0003      	movs	r3, r0
 800237c:	021c      	lsls	r4, r3, #8
 800237e:	2005      	movs	r0, #5
 8002380:	f001 fc5a 	bl	8003c38 <get_rx_buffer>
 8002384:	0003      	movs	r3, r0
 8002386:	4323      	orrs	r3, r4
			(((get_rx_buffer(2) << 8) | get_rx_buffer(3)) == 0x00) && // Address to read = 0
 8002388:	2b01      	cmp	r3, #1
 800238a:	d11b      	bne.n	80023c4 <main+0x258>
		  {

			  modbus_status = return_holding_registers(&modbus_tx_len);
 800238c:	2517      	movs	r5, #23
 800238e:	197c      	adds	r4, r7, r5
 8002390:	230b      	movs	r3, #11
 8002392:	18fb      	adds	r3, r7, r3
 8002394:	0018      	movs	r0, r3
 8002396:	f000 ffbb 	bl	8003310 <return_holding_registers>
 800239a:	0003      	movs	r3, r0
 800239c:	7023      	strb	r3, [r4, #0]
			  if(modbus_status != 0)
 800239e:	197b      	adds	r3, r7, r5
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	b25b      	sxtb	r3, r3
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d00d      	beq.n	80023c4 <main+0x258>
			  {
				  holding_register_database[MB_ERRORS] |= 1U << ((modbus_status) + (MB_FATAL_ERROR - RANGE_ERROR));
 80023a8:	4b5f      	ldr	r3, [pc, #380]	@ (8002528 <main+0x3bc>)
 80023aa:	891a      	ldrh	r2, [r3, #8]
 80023ac:	197b      	adds	r3, r7, r5
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	b25b      	sxtb	r3, r3
 80023b2:	3307      	adds	r3, #7
 80023b4:	2101      	movs	r1, #1
 80023b6:	4099      	lsls	r1, r3
 80023b8:	000b      	movs	r3, r1
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	4313      	orrs	r3, r2
 80023be:	b29a      	uxth	r2, r3
 80023c0:	4b59      	ldr	r3, [pc, #356]	@ (8002528 <main+0x3bc>)
 80023c2:	811a      	strh	r2, [r3, #8]
			  }
		  }
	  }
	  modbus_status = monitor_modbus();
 80023c4:	2517      	movs	r5, #23
 80023c6:	197c      	adds	r4, r7, r5
 80023c8:	f001 fb46 	bl	8003a58 <monitor_modbus>
 80023cc:	0003      	movs	r3, r0
 80023ce:	7023      	strb	r3, [r4, #0]
	  if(modbus_status != HAL_OK && modbus_status != HAL_BUSY)
 80023d0:	197b      	adds	r3, r7, r5
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	b25b      	sxtb	r3, r3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d100      	bne.n	80023dc <main+0x270>
 80023da:	e086      	b.n	80024ea <main+0x37e>
 80023dc:	197b      	adds	r3, r7, r5
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	b25b      	sxtb	r3, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d100      	bne.n	80023e8 <main+0x27c>
 80023e6:	e080      	b.n	80024ea <main+0x37e>
	  {
		  switch(modbus_status)
 80023e8:	197b      	adds	r3, r7, r5
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	b25b      	sxtb	r3, r3
 80023ee:	2b15      	cmp	r3, #21
 80023f0:	d05b      	beq.n	80024aa <main+0x33e>
 80023f2:	dd00      	ble.n	80023f6 <main+0x28a>
 80023f4:	e09b      	b.n	800252e <main+0x3c2>
 80023f6:	2b14      	cmp	r3, #20
 80023f8:	d036      	beq.n	8002468 <main+0x2fc>
 80023fa:	dd00      	ble.n	80023fe <main+0x292>
 80023fc:	e097      	b.n	800252e <main+0x3c2>
 80023fe:	2b12      	cmp	r3, #18
 8002400:	d000      	beq.n	8002404 <main+0x298>
 8002402:	e074      	b.n	80024ee <main+0x382>
		  {
			  case MB_TX_TIMEOUT:
			  {
				  for(uint8_t i = 0; i < holding_register_database[MB_TRANSMIT_RETRIES]; i++)
 8002404:	230e      	movs	r3, #14
 8002406:	18fb      	adds	r3, r7, r3
 8002408:	2200      	movs	r2, #0
 800240a:	701a      	strb	r2, [r3, #0]
 800240c:	e023      	b.n	8002456 <main+0x2ea>
				  {
					  modbus_status = modbus_send(modbus_tx_len);
 800240e:	230b      	movs	r3, #11
 8002410:	18fb      	adds	r3, r7, r3
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2517      	movs	r5, #23
 8002416:	197c      	adds	r4, r7, r5
 8002418:	0018      	movs	r0, r3
 800241a:	f001 fa35 	bl	8003888 <modbus_send>
 800241e:	0003      	movs	r3, r0
 8002420:	7023      	strb	r3, [r4, #0]
					  if(modbus_status != HAL_OK)
 8002422:	0029      	movs	r1, r5
 8002424:	187b      	adds	r3, r7, r1
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	b25b      	sxtb	r3, r3
 800242a:	2b00      	cmp	r3, #0
 800242c:	d00d      	beq.n	800244a <main+0x2de>
					  {
						  holding_register_database[MB_ERRORS] |= 1U << ((modbus_status) + (MB_FATAL_ERROR - RANGE_ERROR));
 800242e:	4b3e      	ldr	r3, [pc, #248]	@ (8002528 <main+0x3bc>)
 8002430:	891a      	ldrh	r2, [r3, #8]
 8002432:	187b      	adds	r3, r7, r1
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	b25b      	sxtb	r3, r3
 8002438:	3307      	adds	r3, #7
 800243a:	2101      	movs	r1, #1
 800243c:	4099      	lsls	r1, r3
 800243e:	000b      	movs	r3, r1
 8002440:	b29b      	uxth	r3, r3
 8002442:	4313      	orrs	r3, r2
 8002444:	b29a      	uxth	r2, r3
 8002446:	4b38      	ldr	r3, [pc, #224]	@ (8002528 <main+0x3bc>)
 8002448:	811a      	strh	r2, [r3, #8]
				  for(uint8_t i = 0; i < holding_register_database[MB_TRANSMIT_RETRIES]; i++)
 800244a:	210e      	movs	r1, #14
 800244c:	187b      	adds	r3, r7, r1
 800244e:	781a      	ldrb	r2, [r3, #0]
 8002450:	187b      	adds	r3, r7, r1
 8002452:	3201      	adds	r2, #1
 8002454:	701a      	strb	r2, [r3, #0]
 8002456:	230e      	movs	r3, #14
 8002458:	18fb      	adds	r3, r7, r3
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	b29a      	uxth	r2, r3
 800245e:	4b32      	ldr	r3, [pc, #200]	@ (8002528 <main+0x3bc>)
 8002460:	88db      	ldrh	r3, [r3, #6]
 8002462:	429a      	cmp	r2, r3
 8002464:	d3d3      	bcc.n	800240e <main+0x2a2>
					  }
				  }
				  break;
 8002466:	e062      	b.n	800252e <main+0x3c2>
				  // Error only relates to Modbus Master Nodes
				  break;
			  }
			  case MB_UART_ERROR:
			  {
				  modbus_status = modbus_set_rx();
 8002468:	2517      	movs	r5, #23
 800246a:	197c      	adds	r4, r7, r5
 800246c:	f001 fad0 	bl	8003a10 <modbus_set_rx>
 8002470:	0003      	movs	r3, r0
 8002472:	7023      	strb	r3, [r4, #0]
				  if(modbus_status != 0)
 8002474:	0029      	movs	r1, r5
 8002476:	187b      	adds	r3, r7, r1
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	b25b      	sxtb	r3, r3
 800247c:	2b00      	cmp	r3, #0
 800247e:	d038      	beq.n	80024f2 <main+0x386>
				  {
					  holding_register_database[MB_ERRORS] |= 1U << ((modbus_status) + (MB_FATAL_ERROR - RANGE_ERROR));
 8002480:	4b29      	ldr	r3, [pc, #164]	@ (8002528 <main+0x3bc>)
 8002482:	891a      	ldrh	r2, [r3, #8]
 8002484:	187b      	adds	r3, r7, r1
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	b25b      	sxtb	r3, r3
 800248a:	3307      	adds	r3, #7
 800248c:	2101      	movs	r1, #1
 800248e:	4099      	lsls	r1, r3
 8002490:	000b      	movs	r3, r1
 8002492:	b29b      	uxth	r3, r3
 8002494:	4313      	orrs	r3, r2
 8002496:	b29a      	uxth	r2, r3
 8002498:	4b23      	ldr	r3, [pc, #140]	@ (8002528 <main+0x3bc>)
 800249a:	811a      	strh	r2, [r3, #8]
				  }
				  break;
 800249c:	e029      	b.n	80024f2 <main+0x386>
			  }
			  case MB_FATAL_ERROR:
			  {
				  while(modbus_status != HAL_OK)
				  {
					  modbus_status = modbus_reset();
 800249e:	2317      	movs	r3, #23
 80024a0:	18fc      	adds	r4, r7, r3
 80024a2:	f001 fa47 	bl	8003934 <modbus_reset>
 80024a6:	0003      	movs	r3, r0
 80024a8:	7023      	strb	r3, [r4, #0]
				  while(modbus_status != HAL_OK)
 80024aa:	2517      	movs	r5, #23
 80024ac:	197b      	adds	r3, r7, r5
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	b25b      	sxtb	r3, r3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d1f3      	bne.n	800249e <main+0x332>
				  }
				  modbus_status = modbus_set_rx();
 80024b6:	197c      	adds	r4, r7, r5
 80024b8:	f001 faaa 	bl	8003a10 <modbus_set_rx>
 80024bc:	0003      	movs	r3, r0
 80024be:	7023      	strb	r3, [r4, #0]
				  if(modbus_status != 0)
 80024c0:	0029      	movs	r1, r5
 80024c2:	187b      	adds	r3, r7, r1
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	b25b      	sxtb	r3, r3
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d02f      	beq.n	800252c <main+0x3c0>
				  {
					  holding_register_database[MB_ERRORS] |= 1U << ((modbus_status) + (MB_FATAL_ERROR - RANGE_ERROR));
 80024cc:	4b16      	ldr	r3, [pc, #88]	@ (8002528 <main+0x3bc>)
 80024ce:	891a      	ldrh	r2, [r3, #8]
 80024d0:	187b      	adds	r3, r7, r1
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	b25b      	sxtb	r3, r3
 80024d6:	3307      	adds	r3, #7
 80024d8:	2101      	movs	r1, #1
 80024da:	4099      	lsls	r1, r3
 80024dc:	000b      	movs	r3, r1
 80024de:	b29b      	uxth	r3, r3
 80024e0:	4313      	orrs	r3, r2
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	4b10      	ldr	r3, [pc, #64]	@ (8002528 <main+0x3bc>)
 80024e6:	811a      	strh	r2, [r3, #8]
				  }
				  break;
 80024e8:	e020      	b.n	800252c <main+0x3c0>
			  }
			  default:
 80024ea:	46c0      	nop			@ (mov r8, r8)
 80024ec:	e01f      	b.n	800252e <main+0x3c2>
				  break;
 80024ee:	46c0      	nop			@ (mov r8, r8)
 80024f0:	e01d      	b.n	800252e <main+0x3c2>
				  break;
 80024f2:	46c0      	nop			@ (mov r8, r8)
 80024f4:	e01b      	b.n	800252e <main+0x3c2>
 80024f6:	46c0      	nop			@ (mov r8, r8)
 80024f8:	00002710 	.word	0x00002710
 80024fc:	20000690 	.word	0x20000690
 8002500:	20000698 	.word	0x20000698
 8002504:	50000800 	.word	0x50000800
 8002508:	50000400 	.word	0x50000400
 800250c:	20000658 	.word	0x20000658
 8002510:	3dcccccd 	.word	0x3dcccccd
 8002514:	40a00000 	.word	0x40a00000
 8002518:	42c80000 	.word	0x42c80000
 800251c:	42200000 	.word	0x42200000
 8002520:	40012400 	.word	0x40012400
 8002524:	200004c0 	.word	0x200004c0
 8002528:	20000014 	.word	0x20000014
				  break;
 800252c:	46c0      	nop			@ (mov r8, r8)
				  // Unknown error
			  }
		  }
	  }

	  if(!holding_register_database[I2C_SHUTDOWN])
 800252e:	4bcf      	ldr	r3, [pc, #828]	@ (800286c <main+0x700>)
 8002530:	899b      	ldrh	r3, [r3, #12]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d136      	bne.n	80025a4 <main+0x438>
	  {
		  if(bno055_rx())
 8002536:	f7fe f9cb 	bl	80008d0 <bno055_rx>
 800253a:	1e03      	subs	r3, r0, #0
 800253c:	d019      	beq.n	8002572 <main+0x406>
		  {
			  i2c_status = bno055_queue_transaction();
 800253e:	250d      	movs	r5, #13
 8002540:	197c      	adds	r4, r7, r5
 8002542:	f7fe f9d9 	bl	80008f8 <bno055_queue_transaction>
 8002546:	0003      	movs	r3, r0
 8002548:	7023      	strb	r3, [r4, #0]
			  if(i2c_status != 0)
 800254a:	0029      	movs	r1, r5
 800254c:	187b      	adds	r3, r7, r1
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	b25b      	sxtb	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00d      	beq.n	8002572 <main+0x406>
			  {
				  holding_register_database[I2C_ERRORS] |= 1U << ((i2c_status) + (I2C_FATAL_ERROR - I2C_TX_TIMEOUT));
 8002556:	4bc5      	ldr	r3, [pc, #788]	@ (800286c <main+0x700>)
 8002558:	895a      	ldrh	r2, [r3, #10]
 800255a:	187b      	adds	r3, r7, r1
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	b25b      	sxtb	r3, r3
 8002560:	3303      	adds	r3, #3
 8002562:	2101      	movs	r1, #1
 8002564:	4099      	lsls	r1, r3
 8002566:	000b      	movs	r3, r1
 8002568:	b29b      	uxth	r3, r3
 800256a:	4313      	orrs	r3, r2
 800256c:	b29a      	uxth	r2, r3
 800256e:	4bbf      	ldr	r3, [pc, #764]	@ (800286c <main+0x700>)
 8002570:	815a      	strh	r2, [r3, #10]
			  }
		  }

		  i2c_status = monitor_i2c();
 8002572:	250d      	movs	r5, #13
 8002574:	197c      	adds	r4, r7, r5
 8002576:	f7fe fa3f 	bl	80009f8 <monitor_i2c>
 800257a:	0003      	movs	r3, r0
 800257c:	7023      	strb	r3, [r4, #0]
		  if(i2c_status != HAL_OK && i2c_status != HAL_BUSY)
 800257e:	197b      	adds	r3, r7, r5
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	b25b      	sxtb	r3, r3
 8002584:	2b00      	cmp	r3, #0
 8002586:	d00d      	beq.n	80025a4 <main+0x438>
 8002588:	197b      	adds	r3, r7, r5
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	b25b      	sxtb	r3, r3
 800258e:	2b02      	cmp	r3, #2
 8002590:	d008      	beq.n	80025a4 <main+0x438>
		  {
			  switch(i2c_status)
 8002592:	197b      	adds	r3, r7, r5
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	b25b      	sxtb	r3, r3
 8002598:	2b19      	cmp	r3, #25
 800259a:	d104      	bne.n	80025a6 <main+0x43a>
					  break;
				  }
				  case I2C_FATAL_ERROR:
				  {
					  // Disable the I2C peripheral
					  holding_register_database[I2C_SHUTDOWN] = 1;
 800259c:	4bb3      	ldr	r3, [pc, #716]	@ (800286c <main+0x700>)
 800259e:	2201      	movs	r2, #1
 80025a0:	819a      	strh	r2, [r3, #12]
					  break;
 80025a2:	e000      	b.n	80025a6 <main+0x43a>
				  }
				  default:
 80025a4:	46c0      	nop			@ (mov r8, r8)
			  }
		  }
	  }

	  // If the actuator is in the Micro range
	  if(((holding_register_database[ADC_6 + target_actuator]) >= (holding_register_database[ACTUATOR_A_TARGET + target_actuator] - ACTUATOR_TOLERANCE)) &&
 80025a6:	200f      	movs	r0, #15
 80025a8:	183b      	adds	r3, r7, r0
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	330f      	adds	r3, #15
 80025ae:	001a      	movs	r2, r3
 80025b0:	4bae      	ldr	r3, [pc, #696]	@ (800286c <main+0x700>)
 80025b2:	0052      	lsls	r2, r2, #1
 80025b4:	5ad3      	ldrh	r3, [r2, r3]
 80025b6:	0019      	movs	r1, r3
 80025b8:	183b      	adds	r3, r7, r0
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	3340      	adds	r3, #64	@ 0x40
 80025be:	001a      	movs	r2, r3
 80025c0:	4baa      	ldr	r3, [pc, #680]	@ (800286c <main+0x700>)
 80025c2:	0052      	lsls	r2, r2, #1
 80025c4:	5ad3      	ldrh	r3, [r2, r3]
 80025c6:	3b05      	subs	r3, #5
 80025c8:	4299      	cmp	r1, r3
 80025ca:	db5b      	blt.n	8002684 <main+0x518>
		 ((holding_register_database[ADC_6 + target_actuator]) <= (holding_register_database[ACTUATOR_A_TARGET + target_actuator] + ACTUATOR_TOLERANCE)))
 80025cc:	183b      	adds	r3, r7, r0
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	330f      	adds	r3, #15
 80025d2:	001a      	movs	r2, r3
 80025d4:	4ba5      	ldr	r3, [pc, #660]	@ (800286c <main+0x700>)
 80025d6:	0052      	lsls	r2, r2, #1
 80025d8:	5ad3      	ldrh	r3, [r2, r3]
 80025da:	0019      	movs	r1, r3
 80025dc:	183b      	adds	r3, r7, r0
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	3340      	adds	r3, #64	@ 0x40
 80025e2:	001a      	movs	r2, r3
 80025e4:	4ba1      	ldr	r3, [pc, #644]	@ (800286c <main+0x700>)
 80025e6:	0052      	lsls	r2, r2, #1
 80025e8:	5ad3      	ldrh	r3, [r2, r3]
 80025ea:	3305      	adds	r3, #5
	  if(((holding_register_database[ADC_6 + target_actuator]) >= (holding_register_database[ACTUATOR_A_TARGET + target_actuator] - ACTUATOR_TOLERANCE)) &&
 80025ec:	4299      	cmp	r1, r3
 80025ee:	dc49      	bgt.n	8002684 <main+0x518>
	  {
		  micro_consistency_count[target_actuator]++;
 80025f0:	183b      	adds	r3, r7, r0
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	003a      	movs	r2, r7
 80025f6:	5cd2      	ldrb	r2, [r2, r3]
 80025f8:	3201      	adds	r2, #1
 80025fa:	b2d1      	uxtb	r1, r2
 80025fc:	003a      	movs	r2, r7
 80025fe:	54d1      	strb	r1, [r2, r3]
		  if(micro_consistency_count[target_actuator] >= 5)
 8002600:	183b      	adds	r3, r7, r0
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	003a      	movs	r2, r7
 8002606:	5cd3      	ldrb	r3, [r2, r3]
 8002608:	2b04      	cmp	r3, #4
 800260a:	d800      	bhi.n	800260e <main+0x4a2>
 800260c:	e0d2      	b.n	80027b4 <main+0x648>
		  {
			  micro_consistency_count[target_actuator] = 5;
 800260e:	183b      	adds	r3, r7, r0
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	003a      	movs	r2, r7
 8002614:	2105      	movs	r1, #5
 8002616:	54d1      	strb	r1, [r2, r3]
			  actuate_complete[target_actuator] = 1;
 8002618:	183b      	adds	r3, r7, r0
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	2008      	movs	r0, #8
 800261e:	183a      	adds	r2, r7, r0
 8002620:	2101      	movs	r1, #1
 8002622:	54d1      	strb	r1, [r2, r3]
			  if(actuate_complete[0] == 1 &&
 8002624:	0002      	movs	r2, r0
 8002626:	18bb      	adds	r3, r7, r2
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d10e      	bne.n	800264c <main+0x4e0>
				 actuate_complete[1] == 1 &&
 800262e:	18bb      	adds	r3, r7, r2
 8002630:	785b      	ldrb	r3, [r3, #1]
			  if(actuate_complete[0] == 1 &&
 8002632:	2b01      	cmp	r3, #1
 8002634:	d10a      	bne.n	800264c <main+0x4e0>
				 actuate_complete[2] == 1 &&
 8002636:	18bb      	adds	r3, r7, r2
 8002638:	789b      	ldrb	r3, [r3, #2]
				 actuate_complete[1] == 1 &&
 800263a:	2b01      	cmp	r3, #1
 800263c:	d106      	bne.n	800264c <main+0x4e0>
				 !DRV_GetShutoff())
 800263e:	f7fe fc5d 	bl	8000efc <DRV_GetShutoff>
 8002642:	1e03      	subs	r3, r0, #0
				 actuate_complete[2] == 1 &&
 8002644:	d102      	bne.n	800264c <main+0x4e0>
			  {
				  DRV_Shutoff();
 8002646:	f7fe fc4f 	bl	8000ee8 <DRV_Shutoff>
		  if(micro_consistency_count[target_actuator] >= 5)
 800264a:	e0b3      	b.n	80027b4 <main+0x648>
			  }
			  else if(!DRV_GetShutoff())
 800264c:	f7fe fc56 	bl	8000efc <DRV_GetShutoff>
 8002650:	1e03      	subs	r3, r0, #0
 8002652:	d000      	beq.n	8002656 <main+0x4ea>
 8002654:	e0ae      	b.n	80027b4 <main+0x648>
			  {
				  // Move to the next actuator and force it to run if it isn't in the requested range
				  actuator_time = HAL_GetTick() - ((uint32_t)holding_register_database[ACTUATOR_TIME]);
 8002656:	f002 fa5f 	bl	8004b18 <HAL_GetTick>
 800265a:	0002      	movs	r2, r0
 800265c:	4b83      	ldr	r3, [pc, #524]	@ (800286c <main+0x700>)
 800265e:	2186      	movs	r1, #134	@ 0x86
 8002660:	5a5b      	ldrh	r3, [r3, r1]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	613b      	str	r3, [r7, #16]
				  target_actuator = ((target_actuator + 1) == NUM_ACTUATORS)? 0: target_actuator + 1;
 8002666:	220f      	movs	r2, #15
 8002668:	18bb      	adds	r3, r7, r2
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	2b02      	cmp	r3, #2
 800266e:	d004      	beq.n	800267a <main+0x50e>
 8002670:	18bb      	adds	r3, r7, r2
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	3301      	adds	r3, #1
 8002676:	b2da      	uxtb	r2, r3
 8002678:	e000      	b.n	800267c <main+0x510>
 800267a:	2200      	movs	r2, #0
 800267c:	230f      	movs	r3, #15
 800267e:	18fb      	adds	r3, r7, r3
 8002680:	701a      	strb	r2, [r3, #0]
		  if(micro_consistency_count[target_actuator] >= 5)
 8002682:	e097      	b.n	80027b4 <main+0x648>
			  }
		  }
	  }
	  else
	  {
		  micro_consistency_count[target_actuator] = 0;
 8002684:	240f      	movs	r4, #15
 8002686:	193b      	adds	r3, r7, r4
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	003a      	movs	r2, r7
 800268c:	2100      	movs	r1, #0
 800268e:	54d1      	strb	r1, [r2, r3]
		  // if the DRV is shutoff
		  if(DRV_GetShutoff())
 8002690:	f7fe fc34 	bl	8000efc <DRV_GetShutoff>
 8002694:	1e03      	subs	r3, r0, #0
 8002696:	d100      	bne.n	800269a <main+0x52e>
 8002698:	e06f      	b.n	800277a <main+0x60e>
		  {
			  // If the ADC is outside of the Macro range
			  if(((holding_register_database[ADC_6 + target_actuator]) <= (holding_register_database[ACTUATOR_A_TARGET + target_actuator] - ACTUATOR_TOLERANCE_MACRO)) ||
 800269a:	0021      	movs	r1, r4
 800269c:	187b      	adds	r3, r7, r1
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	3340      	adds	r3, #64	@ 0x40
 80026a2:	001a      	movs	r2, r3
 80026a4:	4b71      	ldr	r3, [pc, #452]	@ (800286c <main+0x700>)
 80026a6:	0052      	lsls	r2, r2, #1
 80026a8:	5ad3      	ldrh	r3, [r2, r3]
 80026aa:	3b18      	subs	r3, #24
 80026ac:	0008      	movs	r0, r1
 80026ae:	187a      	adds	r2, r7, r1
 80026b0:	7812      	ldrb	r2, [r2, #0]
 80026b2:	320f      	adds	r2, #15
 80026b4:	0011      	movs	r1, r2
 80026b6:	4a6d      	ldr	r2, [pc, #436]	@ (800286c <main+0x700>)
 80026b8:	0049      	lsls	r1, r1, #1
 80026ba:	5a8a      	ldrh	r2, [r1, r2]
 80026bc:	4293      	cmp	r3, r2
 80026be:	dc11      	bgt.n	80026e4 <main+0x578>
				 ((holding_register_database[ADC_6 + target_actuator]) >= (holding_register_database[ACTUATOR_A_TARGET + target_actuator] + ACTUATOR_TOLERANCE_MACRO)))
 80026c0:	0001      	movs	r1, r0
 80026c2:	187b      	adds	r3, r7, r1
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	3340      	adds	r3, #64	@ 0x40
 80026c8:	001a      	movs	r2, r3
 80026ca:	4b68      	ldr	r3, [pc, #416]	@ (800286c <main+0x700>)
 80026cc:	0052      	lsls	r2, r2, #1
 80026ce:	5ad3      	ldrh	r3, [r2, r3]
 80026d0:	3318      	adds	r3, #24
 80026d2:	187a      	adds	r2, r7, r1
 80026d4:	7812      	ldrb	r2, [r2, #0]
 80026d6:	320f      	adds	r2, #15
 80026d8:	0011      	movs	r1, r2
 80026da:	4a64      	ldr	r2, [pc, #400]	@ (800286c <main+0x700>)
 80026dc:	0049      	lsls	r1, r1, #1
 80026de:	5a8a      	ldrh	r2, [r1, r2]
			  if(((holding_register_database[ADC_6 + target_actuator]) <= (holding_register_database[ACTUATOR_A_TARGET + target_actuator] - ACTUATOR_TOLERANCE_MACRO)) ||
 80026e0:	4293      	cmp	r3, r2
 80026e2:	da35      	bge.n	8002750 <main+0x5e4>
			  {
				  macro_consistency_count[target_actuator]++;
 80026e4:	200f      	movs	r0, #15
 80026e6:	183b      	adds	r3, r7, r0
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	1d3a      	adds	r2, r7, #4
 80026ec:	5cd2      	ldrb	r2, [r2, r3]
 80026ee:	3201      	adds	r2, #1
 80026f0:	b2d1      	uxtb	r1, r2
 80026f2:	1d3a      	adds	r2, r7, #4
 80026f4:	54d1      	strb	r1, [r2, r3]
				  if(macro_consistency_count[target_actuator] >= 10)
 80026f6:	183b      	adds	r3, r7, r0
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	1d3a      	adds	r2, r7, #4
 80026fc:	5cd3      	ldrb	r3, [r2, r3]
 80026fe:	2b09      	cmp	r3, #9
 8002700:	d959      	bls.n	80027b6 <main+0x64a>
				  {
					  macro_consistency_count[target_actuator] = 10;
 8002702:	183b      	adds	r3, r7, r0
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	1d3a      	adds	r2, r7, #4
 8002708:	210a      	movs	r1, #10
 800270a:	54d1      	strb	r1, [r2, r3]
					  DRV_Activate(target_actuator, holding_register_database[ADC_6 + target_actuator], holding_register_database[ACTUATOR_A_TARGET + target_actuator]);
 800270c:	183b      	adds	r3, r7, r0
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	330f      	adds	r3, #15
 8002712:	001a      	movs	r2, r3
 8002714:	4b55      	ldr	r3, [pc, #340]	@ (800286c <main+0x700>)
 8002716:	0052      	lsls	r2, r2, #1
 8002718:	5ad1      	ldrh	r1, [r2, r3]
 800271a:	183b      	adds	r3, r7, r0
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	3340      	adds	r3, #64	@ 0x40
 8002720:	001a      	movs	r2, r3
 8002722:	4b52      	ldr	r3, [pc, #328]	@ (800286c <main+0x700>)
 8002724:	0052      	lsls	r2, r2, #1
 8002726:	5ad2      	ldrh	r2, [r2, r3]
 8002728:	183b      	adds	r3, r7, r0
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	0018      	movs	r0, r3
 800272e:	f7fe fbef 	bl	8000f10 <DRV_Activate>
					  actuator_time = HAL_GetTick();
 8002732:	f002 f9f1 	bl	8004b18 <HAL_GetTick>
 8002736:	0003      	movs	r3, r0
 8002738:	613b      	str	r3, [r7, #16]
					  actuate_complete[0] = 0;
 800273a:	2108      	movs	r1, #8
 800273c:	187b      	adds	r3, r7, r1
 800273e:	2200      	movs	r2, #0
 8002740:	701a      	strb	r2, [r3, #0]
					  actuate_complete[1] = 0;
 8002742:	187b      	adds	r3, r7, r1
 8002744:	2200      	movs	r2, #0
 8002746:	705a      	strb	r2, [r3, #1]
					  actuate_complete[2] = 0;
 8002748:	187b      	adds	r3, r7, r1
 800274a:	2200      	movs	r2, #0
 800274c:	709a      	strb	r2, [r3, #2]
				  if(macro_consistency_count[target_actuator] >= 10)
 800274e:	e032      	b.n	80027b6 <main+0x64a>
				  }
			  }
			  else
			  {
				 // Check a different actuator
				  macro_consistency_count[target_actuator] = 0;
 8002750:	200f      	movs	r0, #15
 8002752:	183b      	adds	r3, r7, r0
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	1d3a      	adds	r2, r7, #4
 8002758:	2100      	movs	r1, #0
 800275a:	54d1      	strb	r1, [r2, r3]
				  target_actuator = ((target_actuator + 1) == NUM_ACTUATORS)? 0: target_actuator + 1;
 800275c:	0002      	movs	r2, r0
 800275e:	18bb      	adds	r3, r7, r2
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	2b02      	cmp	r3, #2
 8002764:	d004      	beq.n	8002770 <main+0x604>
 8002766:	18bb      	adds	r3, r7, r2
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	3301      	adds	r3, #1
 800276c:	b2da      	uxtb	r2, r3
 800276e:	e000      	b.n	8002772 <main+0x606>
 8002770:	2200      	movs	r2, #0
 8002772:	230f      	movs	r3, #15
 8002774:	18fb      	adds	r3, r7, r3
 8002776:	701a      	strb	r2, [r3, #0]
 8002778:	e01d      	b.n	80027b6 <main+0x64a>
			  }
		  }
		  else
		  {
			  // If the actuator has been running for a given amount of time
			  if((HAL_GetTick() - actuator_time) >= ((uint32_t)holding_register_database[ACTUATOR_TIME]))
 800277a:	f002 f9cd 	bl	8004b18 <HAL_GetTick>
 800277e:	0002      	movs	r2, r0
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	4a39      	ldr	r2, [pc, #228]	@ (800286c <main+0x700>)
 8002786:	2186      	movs	r1, #134	@ 0x86
 8002788:	5a52      	ldrh	r2, [r2, r1]
 800278a:	4293      	cmp	r3, r2
 800278c:	d313      	bcc.n	80027b6 <main+0x64a>
			  {
				  actuator_time = HAL_GetTick();
 800278e:	f002 f9c3 	bl	8004b18 <HAL_GetTick>
 8002792:	0003      	movs	r3, r0
 8002794:	613b      	str	r3, [r7, #16]
				  target_actuator = ((target_actuator + 1) == NUM_ACTUATORS)? 0: target_actuator + 1;
 8002796:	220f      	movs	r2, #15
 8002798:	18bb      	adds	r3, r7, r2
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	2b02      	cmp	r3, #2
 800279e:	d004      	beq.n	80027aa <main+0x63e>
 80027a0:	18bb      	adds	r3, r7, r2
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	3301      	adds	r3, #1
 80027a6:	b2da      	uxtb	r2, r3
 80027a8:	e000      	b.n	80027ac <main+0x640>
 80027aa:	2200      	movs	r2, #0
 80027ac:	230f      	movs	r3, #15
 80027ae:	18fb      	adds	r3, r7, r3
 80027b0:	701a      	strb	r2, [r3, #0]
 80027b2:	e000      	b.n	80027b6 <main+0x64a>
		  if(micro_consistency_count[target_actuator] >= 5)
 80027b4:	46c0      	nop			@ (mov r8, r8)
			  }
		  }
	  }
	  actuate(target_actuator, holding_register_database[ADC_6 + target_actuator], holding_register_database[ACTUATOR_A_TARGET + target_actuator]);
 80027b6:	200f      	movs	r0, #15
 80027b8:	183b      	adds	r3, r7, r0
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	330f      	adds	r3, #15
 80027be:	001a      	movs	r2, r3
 80027c0:	4b2a      	ldr	r3, [pc, #168]	@ (800286c <main+0x700>)
 80027c2:	0052      	lsls	r2, r2, #1
 80027c4:	5ad1      	ldrh	r1, [r2, r3]
 80027c6:	183b      	adds	r3, r7, r0
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	3340      	adds	r3, #64	@ 0x40
 80027cc:	001a      	movs	r2, r3
 80027ce:	4b27      	ldr	r3, [pc, #156]	@ (800286c <main+0x700>)
 80027d0:	0052      	lsls	r2, r2, #1
 80027d2:	5ad2      	ldrh	r2, [r2, r3]
 80027d4:	183b      	adds	r3, r7, r0
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	0018      	movs	r0, r3
 80027da:	f7fe fa9f 	bl	8000d1c <actuate>

	  // Monitor any ADC Errors
	  adc_status = monitor_adc();
 80027de:	250c      	movs	r5, #12
 80027e0:	197c      	adds	r4, r7, r5
 80027e2:	f001 fc1b 	bl	800401c <monitor_adc>
 80027e6:	0003      	movs	r3, r0
 80027e8:	7023      	strb	r3, [r4, #0]
	  if(adc_status != HAL_OK)
 80027ea:	197b      	adds	r3, r7, r5
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	b25b      	sxtb	r3, r3
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d002      	beq.n	80027fa <main+0x68e>
	  {
		  // An Overrun has occurred as shown in ADC1_IRQHandler in stm32c0xx_it.c. Log the error
		  holding_register_database[ADC_ERRORS] = 1;
 80027f4:	4b1d      	ldr	r3, [pc, #116]	@ (800286c <main+0x700>)
 80027f6:	2201      	movs	r2, #1
 80027f8:	81da      	strh	r2, [r3, #14]
	  }

	  // Handle the User changing the encoder refresh rate (does not log potential errors)
	  if(encoder_refresh != holding_register_database[ENCODER_REFRESH])
 80027fa:	4b1c      	ldr	r3, [pc, #112]	@ (800286c <main+0x700>)
 80027fc:	227e      	movs	r2, #126	@ 0x7e
 80027fe:	5a9b      	ldrh	r3, [r3, r2]
 8002800:	2414      	movs	r4, #20
 8002802:	193a      	adds	r2, r7, r4
 8002804:	8812      	ldrh	r2, [r2, #0]
 8002806:	429a      	cmp	r2, r3
 8002808:	d100      	bne.n	800280c <main+0x6a0>
 800280a:	e554      	b.n	80022b6 <main+0x14a>
	  {
		  HAL_TIM_Base_Stop_IT(&htim14);
 800280c:	4b18      	ldr	r3, [pc, #96]	@ (8002870 <main+0x704>)
 800280e:	0018      	movs	r0, r3
 8002810:	f006 fd40 	bl	8009294 <HAL_TIM_Base_Stop_IT>
		  HAL_TIM_Base_DeInit(&htim14);
 8002814:	4b16      	ldr	r3, [pc, #88]	@ (8002870 <main+0x704>)
 8002816:	0018      	movs	r0, r3
 8002818:	f006 fc8a 	bl	8009130 <HAL_TIM_Base_DeInit>
		  __HAL_RCC_TIM14_FORCE_RESET();
 800281c:	4b15      	ldr	r3, [pc, #84]	@ (8002874 <main+0x708>)
 800281e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002820:	4b14      	ldr	r3, [pc, #80]	@ (8002874 <main+0x708>)
 8002822:	2180      	movs	r1, #128	@ 0x80
 8002824:	0209      	lsls	r1, r1, #8
 8002826:	430a      	orrs	r2, r1
 8002828:	631a      	str	r2, [r3, #48]	@ 0x30
		  HAL_Delay(10);
 800282a:	200a      	movs	r0, #10
 800282c:	f002 f97e 	bl	8004b2c <HAL_Delay>
		  __HAL_RCC_TIM14_RELEASE_RESET();
 8002830:	4b10      	ldr	r3, [pc, #64]	@ (8002874 <main+0x708>)
 8002832:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002834:	4b0f      	ldr	r3, [pc, #60]	@ (8002874 <main+0x708>)
 8002836:	4910      	ldr	r1, [pc, #64]	@ (8002878 <main+0x70c>)
 8002838:	400a      	ands	r2, r1
 800283a:	631a      	str	r2, [r3, #48]	@ 0x30
		  HAL_Delay(10);
 800283c:	200a      	movs	r0, #10
 800283e:	f002 f975 	bl	8004b2c <HAL_Delay>
		  htim14.Init.Period = holding_register_database[ENCODER_REFRESH] - 1;
 8002842:	4b0a      	ldr	r3, [pc, #40]	@ (800286c <main+0x700>)
 8002844:	227e      	movs	r2, #126	@ 0x7e
 8002846:	5a9b      	ldrh	r3, [r3, r2]
 8002848:	3b01      	subs	r3, #1
 800284a:	001a      	movs	r2, r3
 800284c:	4b08      	ldr	r3, [pc, #32]	@ (8002870 <main+0x704>)
 800284e:	60da      	str	r2, [r3, #12]
		  HAL_TIM_Base_Init(&htim14);
 8002850:	4b07      	ldr	r3, [pc, #28]	@ (8002870 <main+0x704>)
 8002852:	0018      	movs	r0, r3
 8002854:	f006 fc14 	bl	8009080 <HAL_TIM_Base_Init>
		  HAL_TIM_Base_Start_IT(&htim14);
 8002858:	4b05      	ldr	r3, [pc, #20]	@ (8002870 <main+0x704>)
 800285a:	0018      	movs	r0, r3
 800285c:	f006 fcc6 	bl	80091ec <HAL_TIM_Base_Start_IT>
		  encoder_refresh = holding_register_database[ENCODER_REFRESH];
 8002860:	193b      	adds	r3, r7, r4
 8002862:	4a02      	ldr	r2, [pc, #8]	@ (800286c <main+0x700>)
 8002864:	217e      	movs	r1, #126	@ 0x7e
 8002866:	5a52      	ldrh	r2, [r2, r1]
 8002868:	801a      	strh	r2, [r3, #0]
	  if(modbus_rx())
 800286a:	e524      	b.n	80022b6 <main+0x14a>
 800286c:	20000014 	.word	0x20000014
 8002870:	200004c0 	.word	0x200004c0
 8002874:	40021000 	.word	0x40021000
 8002878:	ffff7fff 	.word	0xffff7fff

0800287c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800287c:	b590      	push	{r4, r7, lr}
 800287e:	b08f      	sub	sp, #60	@ 0x3c
 8002880:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002882:	2418      	movs	r4, #24
 8002884:	193b      	adds	r3, r7, r4
 8002886:	0018      	movs	r0, r3
 8002888:	2320      	movs	r3, #32
 800288a:	001a      	movs	r2, r3
 800288c:	2100      	movs	r1, #0
 800288e:	f009 fc45 	bl	800c11c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002892:	1d3b      	adds	r3, r7, #4
 8002894:	0018      	movs	r0, r3
 8002896:	2314      	movs	r3, #20
 8002898:	001a      	movs	r2, r3
 800289a:	2100      	movs	r1, #0
 800289c:	f009 fc3e 	bl	800c11c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80028a0:	193b      	adds	r3, r7, r4
 80028a2:	2201      	movs	r2, #1
 80028a4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80028a6:	193b      	adds	r3, r7, r4
 80028a8:	2280      	movs	r2, #128	@ 0x80
 80028aa:	0252      	lsls	r2, r2, #9
 80028ac:	605a      	str	r2, [r3, #4]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028ae:	193b      	adds	r3, r7, r4
 80028b0:	0018      	movs	r0, r3
 80028b2:	f005 fab1 	bl	8007e18 <HAL_RCC_OscConfig>
 80028b6:	1e03      	subs	r3, r0, #0
 80028b8:	d001      	beq.n	80028be <SystemClock_Config+0x42>
  {
    Error_Handler();
 80028ba:	f000 fc8f 	bl	80031dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028be:	1d3b      	adds	r3, r7, #4
 80028c0:	2207      	movs	r2, #7
 80028c2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80028c4:	1d3b      	adds	r3, r7, #4
 80028c6:	2201      	movs	r2, #1
 80028c8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80028ca:	1d3b      	adds	r3, r7, #4
 80028cc:	2200      	movs	r2, #0
 80028ce:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80028d0:	1d3b      	adds	r3, r7, #4
 80028d2:	2200      	movs	r2, #0
 80028d4:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80028d6:	1d3b      	adds	r3, r7, #4
 80028d8:	2200      	movs	r2, #0
 80028da:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80028dc:	1d3b      	adds	r3, r7, #4
 80028de:	2100      	movs	r1, #0
 80028e0:	0018      	movs	r0, r3
 80028e2:	f005 fcbf 	bl	8008264 <HAL_RCC_ClockConfig>
 80028e6:	1e03      	subs	r3, r0, #0
 80028e8:	d001      	beq.n	80028ee <SystemClock_Config+0x72>
  {
    Error_Handler();
 80028ea:	f000 fc77 	bl	80031dc <Error_Handler>
  }
}
 80028ee:	46c0      	nop			@ (mov r8, r8)
 80028f0:	46bd      	mov	sp, r7
 80028f2:	b00f      	add	sp, #60	@ 0x3c
 80028f4:	bd90      	pop	{r4, r7, pc}
	...

080028f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80028f8:	b590      	push	{r4, r7, lr}
 80028fa:	b09d      	sub	sp, #116	@ 0x74
 80028fc:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80028fe:	2350      	movs	r3, #80	@ 0x50
 8002900:	18fb      	adds	r3, r7, r3
 8002902:	0018      	movs	r0, r3
 8002904:	2310      	movs	r3, #16
 8002906:	001a      	movs	r2, r3
 8002908:	2100      	movs	r1, #0
 800290a:	f009 fc07 	bl	800c11c <memset>
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 800290e:	2338      	movs	r3, #56	@ 0x38
 8002910:	18fb      	adds	r3, r7, r3
 8002912:	0018      	movs	r0, r3
 8002914:	2318      	movs	r3, #24
 8002916:	001a      	movs	r2, r3
 8002918:	2100      	movs	r1, #0
 800291a:	f009 fbff 	bl	800c11c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800291e:	2320      	movs	r3, #32
 8002920:	18fb      	adds	r3, r7, r3
 8002922:	0018      	movs	r0, r3
 8002924:	2318      	movs	r3, #24
 8002926:	001a      	movs	r2, r3
 8002928:	2100      	movs	r1, #0
 800292a:	f009 fbf7 	bl	800c11c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800292e:	003b      	movs	r3, r7
 8002930:	0018      	movs	r0, r3
 8002932:	2320      	movs	r3, #32
 8002934:	001a      	movs	r2, r3
 8002936:	2100      	movs	r1, #0
 8002938:	f009 fbf0 	bl	800c11c <memset>

  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800293c:	003b      	movs	r3, r7
 800293e:	2220      	movs	r2, #32
 8002940:	601a      	str	r2, [r3, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8002942:	003b      	movs	r3, r7
 8002944:	2200      	movs	r2, #0
 8002946:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002948:	003b      	movs	r3, r7
 800294a:	0018      	movs	r0, r3
 800294c:	f005 fe30 	bl	80085b0 <HAL_RCCEx_PeriphCLKConfig>
 8002950:	1e03      	subs	r3, r0, #0
 8002952:	d001      	beq.n	8002958 <MX_ADC1_Init+0x60>
  {
    Error_Handler();
 8002954:	f000 fc42 	bl	80031dc <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC);
 8002958:	2380      	movs	r3, #128	@ 0x80
 800295a:	035b      	lsls	r3, r3, #13
 800295c:	0018      	movs	r0, r3
 800295e:	f7ff f97d 	bl	8001c5c <LL_APB1_GRP2_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8002962:	2001      	movs	r0, #1
 8002964:	f7ff f990 	bl	8001c88 <LL_IOP_GRP1_EnableClock>
  PA5   ------> ADC1_IN5
  PA6   ------> ADC1_IN6
  PA7   ------> ADC1_IN7
  PA8   ------> ADC1_IN8
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8002968:	2420      	movs	r4, #32
 800296a:	193b      	adds	r3, r7, r4
 800296c:	2201      	movs	r2, #1
 800296e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8002970:	193b      	adds	r3, r7, r4
 8002972:	2203      	movs	r2, #3
 8002974:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002976:	193b      	adds	r3, r7, r4
 8002978:	2200      	movs	r2, #0
 800297a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800297c:	193a      	adds	r2, r7, r4
 800297e:	23a0      	movs	r3, #160	@ 0xa0
 8002980:	05db      	lsls	r3, r3, #23
 8002982:	0011      	movs	r1, r2
 8002984:	0018      	movs	r0, r3
 8002986:	f009 fb6e 	bl	800c066 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 800298a:	193b      	adds	r3, r7, r4
 800298c:	2202      	movs	r2, #2
 800298e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8002990:	193b      	adds	r3, r7, r4
 8002992:	2203      	movs	r2, #3
 8002994:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002996:	193b      	adds	r3, r7, r4
 8002998:	2200      	movs	r2, #0
 800299a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800299c:	193a      	adds	r2, r7, r4
 800299e:	23a0      	movs	r3, #160	@ 0xa0
 80029a0:	05db      	lsls	r3, r3, #23
 80029a2:	0011      	movs	r1, r2
 80029a4:	0018      	movs	r0, r3
 80029a6:	f009 fb5e 	bl	800c066 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 80029aa:	193b      	adds	r3, r7, r4
 80029ac:	2204      	movs	r2, #4
 80029ae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80029b0:	193b      	adds	r3, r7, r4
 80029b2:	2203      	movs	r2, #3
 80029b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80029b6:	193b      	adds	r3, r7, r4
 80029b8:	2200      	movs	r2, #0
 80029ba:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029bc:	193a      	adds	r2, r7, r4
 80029be:	23a0      	movs	r3, #160	@ 0xa0
 80029c0:	05db      	lsls	r3, r3, #23
 80029c2:	0011      	movs	r1, r2
 80029c4:	0018      	movs	r0, r3
 80029c6:	f009 fb4e 	bl	800c066 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 80029ca:	193b      	adds	r3, r7, r4
 80029cc:	2208      	movs	r2, #8
 80029ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80029d0:	193b      	adds	r3, r7, r4
 80029d2:	2203      	movs	r2, #3
 80029d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80029d6:	193b      	adds	r3, r7, r4
 80029d8:	2200      	movs	r2, #0
 80029da:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029dc:	193a      	adds	r2, r7, r4
 80029de:	23a0      	movs	r3, #160	@ 0xa0
 80029e0:	05db      	lsls	r3, r3, #23
 80029e2:	0011      	movs	r1, r2
 80029e4:	0018      	movs	r0, r3
 80029e6:	f009 fb3e 	bl	800c066 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 80029ea:	193b      	adds	r3, r7, r4
 80029ec:	2210      	movs	r2, #16
 80029ee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80029f0:	193b      	adds	r3, r7, r4
 80029f2:	2203      	movs	r2, #3
 80029f4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80029f6:	193b      	adds	r3, r7, r4
 80029f8:	2200      	movs	r2, #0
 80029fa:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029fc:	193a      	adds	r2, r7, r4
 80029fe:	23a0      	movs	r3, #160	@ 0xa0
 8002a00:	05db      	lsls	r3, r3, #23
 8002a02:	0011      	movs	r1, r2
 8002a04:	0018      	movs	r0, r3
 8002a06:	f009 fb2e 	bl	800c066 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8002a0a:	193b      	adds	r3, r7, r4
 8002a0c:	2220      	movs	r2, #32
 8002a0e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8002a10:	193b      	adds	r3, r7, r4
 8002a12:	2203      	movs	r2, #3
 8002a14:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002a16:	193b      	adds	r3, r7, r4
 8002a18:	2200      	movs	r2, #0
 8002a1a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a1c:	193a      	adds	r2, r7, r4
 8002a1e:	23a0      	movs	r3, #160	@ 0xa0
 8002a20:	05db      	lsls	r3, r3, #23
 8002a22:	0011      	movs	r1, r2
 8002a24:	0018      	movs	r0, r3
 8002a26:	f009 fb1e 	bl	800c066 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8002a2a:	193b      	adds	r3, r7, r4
 8002a2c:	2240      	movs	r2, #64	@ 0x40
 8002a2e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8002a30:	193b      	adds	r3, r7, r4
 8002a32:	2203      	movs	r2, #3
 8002a34:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002a36:	193b      	adds	r3, r7, r4
 8002a38:	2200      	movs	r2, #0
 8002a3a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a3c:	193a      	adds	r2, r7, r4
 8002a3e:	23a0      	movs	r3, #160	@ 0xa0
 8002a40:	05db      	lsls	r3, r3, #23
 8002a42:	0011      	movs	r1, r2
 8002a44:	0018      	movs	r0, r3
 8002a46:	f009 fb0e 	bl	800c066 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8002a4a:	193b      	adds	r3, r7, r4
 8002a4c:	2280      	movs	r2, #128	@ 0x80
 8002a4e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8002a50:	193b      	adds	r3, r7, r4
 8002a52:	2203      	movs	r2, #3
 8002a54:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002a56:	193b      	adds	r3, r7, r4
 8002a58:	2200      	movs	r2, #0
 8002a5a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a5c:	193a      	adds	r2, r7, r4
 8002a5e:	23a0      	movs	r3, #160	@ 0xa0
 8002a60:	05db      	lsls	r3, r3, #23
 8002a62:	0011      	movs	r1, r2
 8002a64:	0018      	movs	r0, r3
 8002a66:	f009 fafe 	bl	800c066 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8002a6a:	0021      	movs	r1, r4
 8002a6c:	187b      	adds	r3, r7, r1
 8002a6e:	2280      	movs	r2, #128	@ 0x80
 8002a70:	0052      	lsls	r2, r2, #1
 8002a72:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8002a74:	187b      	adds	r3, r7, r1
 8002a76:	2203      	movs	r2, #3
 8002a78:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002a7a:	187b      	adds	r3, r7, r1
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a80:	187a      	adds	r2, r7, r1
 8002a82:	23a0      	movs	r3, #160	@ 0xa0
 8002a84:	05db      	lsls	r3, r3, #23
 8002a86:	0011      	movs	r1, r2
 8002a88:	0018      	movs	r0, r3
 8002a8a:	f009 faec 	bl	800c066 <LL_GPIO_Init>

  /* ADC1 DMA Init */

  /* ADC1 Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_1, LL_DMAMUX_REQ_ADC1);
 8002a8e:	4b7a      	ldr	r3, [pc, #488]	@ (8002c78 <MX_ADC1_Init+0x380>)
 8002a90:	2205      	movs	r2, #5
 8002a92:	2101      	movs	r1, #1
 8002a94:	0018      	movs	r0, r3
 8002a96:	f7ff fa9f 	bl	8001fd8 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8002a9a:	4b77      	ldr	r3, [pc, #476]	@ (8002c78 <MX_ADC1_Init+0x380>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	2101      	movs	r1, #1
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	f7ff f93b 	bl	8001d1c <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_LOW);
 8002aa6:	4b74      	ldr	r3, [pc, #464]	@ (8002c78 <MX_ADC1_Init+0x380>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	2101      	movs	r1, #1
 8002aac:	0018      	movs	r0, r3
 8002aae:	f7ff fa13 	bl	8001ed8 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_CIRCULAR);
 8002ab2:	4b71      	ldr	r3, [pc, #452]	@ (8002c78 <MX_ADC1_Init+0x380>)
 8002ab4:	2220      	movs	r2, #32
 8002ab6:	2101      	movs	r1, #1
 8002ab8:	0018      	movs	r0, r3
 8002aba:	f7ff f955 	bl	8001d68 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 8002abe:	4b6e      	ldr	r3, [pc, #440]	@ (8002c78 <MX_ADC1_Init+0x380>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	0018      	movs	r0, r3
 8002ac6:	f7ff f973 	bl	8001db0 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 8002aca:	4b6b      	ldr	r3, [pc, #428]	@ (8002c78 <MX_ADC1_Init+0x380>)
 8002acc:	2280      	movs	r2, #128	@ 0x80
 8002ace:	2101      	movs	r1, #1
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	f7ff f991 	bl	8001df8 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_HALFWORD);
 8002ad6:	2380      	movs	r3, #128	@ 0x80
 8002ad8:	005b      	lsls	r3, r3, #1
 8002ada:	4867      	ldr	r0, [pc, #412]	@ (8002c78 <MX_ADC1_Init+0x380>)
 8002adc:	001a      	movs	r2, r3
 8002ade:	2101      	movs	r1, #1
 8002ae0:	f7ff f9ae 	bl	8001e40 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_HALFWORD);
 8002ae4:	2380      	movs	r3, #128	@ 0x80
 8002ae6:	00db      	lsls	r3, r3, #3
 8002ae8:	4863      	ldr	r0, [pc, #396]	@ (8002c78 <MX_ADC1_Init+0x380>)
 8002aea:	001a      	movs	r2, r3
 8002aec:	2101      	movs	r1, #1
 8002aee:	f7ff f9cd 	bl	8001e8c <LL_DMA_SetMemorySize>

  /* ADC1 interrupt Init */
  NVIC_SetPriority(ADC1_IRQn, 0);
 8002af2:	2100      	movs	r1, #0
 8002af4:	200c      	movs	r0, #12
 8002af6:	f7fe ff15 	bl	8001924 <__NVIC_SetPriority>
  NVIC_EnableIRQ(ADC1_IRQn);
 8002afa:	200c      	movs	r0, #12
 8002afc:	f7fe fef8 	bl	80018f0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN ADC1_Init 1 */

  /* Set DMA transfer addresses of source and destination */
  LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_1, LL_ADC_DMA_GetRegAddr(ADC1, LL_ADC_DMA_REG_REGULAR_DATA),
 8002b00:	4b5e      	ldr	r3, [pc, #376]	@ (8002c7c <MX_ADC1_Init+0x384>)
 8002b02:	2100      	movs	r1, #0
 8002b04:	0018      	movs	r0, r3
 8002b06:	f7fe ff7b 	bl	8001a00 <LL_ADC_DMA_GetRegAddr>
 8002b0a:	0001      	movs	r1, r0
 8002b0c:	4b5c      	ldr	r3, [pc, #368]	@ (8002c80 <MX_ADC1_Init+0x388>)
 8002b0e:	485a      	ldr	r0, [pc, #360]	@ (8002c78 <MX_ADC1_Init+0x380>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	9200      	str	r2, [sp, #0]
 8002b14:	000a      	movs	r2, r1
 8002b16:	2101      	movs	r1, #1
 8002b18:	f7ff fa26 	bl	8001f68 <LL_DMA_ConfigAddresses>
		  (uint32_t)&holding_register_database[ADC_0],
		  LL_DMA_DIRECTION_PERIPH_TO_MEMORY);

  /* Set DMA transfer size */
  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_1, 9);
 8002b1c:	4b56      	ldr	r3, [pc, #344]	@ (8002c78 <MX_ADC1_Init+0x380>)
 8002b1e:	2209      	movs	r2, #9
 8002b20:	2101      	movs	r1, #1
 8002b22:	0018      	movs	r0, r3
 8002b24:	f7ff f9fe 	bl	8001f24 <LL_DMA_SetDataLength>

  /* Enable DMA transfer interruption: transfer complete */
  LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_1);
 8002b28:	4b53      	ldr	r3, [pc, #332]	@ (8002c78 <MX_ADC1_Init+0x380>)
 8002b2a:	2101      	movs	r1, #1
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	f7ff fa71 	bl	8002014 <LL_DMA_EnableIT_TC>

  /* Enable DMA transfer interruption: transfer half complete */
  LL_DMA_EnableIT_HT(DMA1, LL_DMA_CHANNEL_1);
 8002b32:	4b51      	ldr	r3, [pc, #324]	@ (8002c78 <MX_ADC1_Init+0x380>)
 8002b34:	2101      	movs	r1, #1
 8002b36:	0018      	movs	r0, r3
 8002b38:	f7ff fa8c 	bl	8002054 <LL_DMA_EnableIT_HT>

  /* Enable DMA transfer interruption: transfer error */
  LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_1);
 8002b3c:	4b4e      	ldr	r3, [pc, #312]	@ (8002c78 <MX_ADC1_Init+0x380>)
 8002b3e:	2101      	movs	r1, #1
 8002b40:	0018      	movs	r0, r3
 8002b42:	f7ff faa7 	bl	8002094 <LL_DMA_EnableIT_TE>

  /* Enable the DMA transfer */
  LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_1);
 8002b46:	4b4c      	ldr	r3, [pc, #304]	@ (8002c78 <MX_ADC1_Init+0x380>)
 8002b48:	2101      	movs	r1, #1
 8002b4a:	0018      	movs	r0, r3
 8002b4c:	f7ff f8c6 	bl	8001cdc <LL_DMA_EnableChannel>
   #define ADC_CHANNEL_CONF_RDY_TIMEOUT_MS ( 1U)
   #if (USE_TIMEOUT == 1)
   uint32_t Timeout ; /* Variable used for Timeout management */
   #endif /* USE_TIMEOUT */

  ADC_InitStruct.Clock = LL_ADC_CLOCK_SYNC_PCLK_DIV2;
 8002b50:	2150      	movs	r1, #80	@ 0x50
 8002b52:	187b      	adds	r3, r7, r1
 8002b54:	2280      	movs	r2, #128	@ 0x80
 8002b56:	05d2      	lsls	r2, r2, #23
 8002b58:	601a      	str	r2, [r3, #0]
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8002b5a:	187b      	adds	r3, r7, r1
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	605a      	str	r2, [r3, #4]
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8002b60:	187b      	adds	r3, r7, r1
 8002b62:	2200      	movs	r2, #0
 8002b64:	609a      	str	r2, [r3, #8]
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8002b66:	187b      	adds	r3, r7, r1
 8002b68:	2200      	movs	r2, #0
 8002b6a:	60da      	str	r2, [r3, #12]
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8002b6c:	187b      	adds	r3, r7, r1
 8002b6e:	4a43      	ldr	r2, [pc, #268]	@ (8002c7c <MX_ADC1_Init+0x384>)
 8002b70:	0019      	movs	r1, r3
 8002b72:	0010      	movs	r0, r2
 8002b74:	f009 f924 	bl	800bdc0 <LL_ADC_Init>
  LL_ADC_REG_SetSequencerConfigurable(ADC1, LL_ADC_REG_SEQ_FIXED);
 8002b78:	4b40      	ldr	r3, [pc, #256]	@ (8002c7c <MX_ADC1_Init+0x384>)
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	0018      	movs	r0, r3
 8002b7e:	f7fe ff7d 	bl	8001a7c <LL_ADC_REG_SetSequencerConfigurable>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8002b82:	2138      	movs	r1, #56	@ 0x38
 8002b84:	187b      	adds	r3, r7, r1
 8002b86:	2200      	movs	r2, #0
 8002b88:	601a      	str	r2, [r3, #0]
  ADC_REG_InitStruct.SequencerLength = 0;
 8002b8a:	187b      	adds	r3, r7, r1
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	605a      	str	r2, [r3, #4]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8002b90:	187b      	adds	r3, r7, r1
 8002b92:	2200      	movs	r2, #0
 8002b94:	609a      	str	r2, [r3, #8]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 8002b96:	187b      	adds	r3, r7, r1
 8002b98:	2280      	movs	r2, #128	@ 0x80
 8002b9a:	0192      	lsls	r2, r2, #6
 8002b9c:	60da      	str	r2, [r3, #12]
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 8002b9e:	187b      	adds	r3, r7, r1
 8002ba0:	2203      	movs	r2, #3
 8002ba2:	611a      	str	r2, [r3, #16]
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8002ba4:	187b      	adds	r3, r7, r1
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	615a      	str	r2, [r3, #20]
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8002baa:	187b      	adds	r3, r7, r1
 8002bac:	4a33      	ldr	r2, [pc, #204]	@ (8002c7c <MX_ADC1_Init+0x384>)
 8002bae:	0019      	movs	r1, r3
 8002bb0:	0010      	movs	r0, r2
 8002bb2:	f009 f93b 	bl	800be2c <LL_ADC_REG_Init>
  LL_ADC_REG_SetSequencerScanDirection(ADC1, LL_ADC_REG_SEQ_SCAN_DIR_FORWARD);
 8002bb6:	4b31      	ldr	r3, [pc, #196]	@ (8002c7c <MX_ADC1_Init+0x384>)
 8002bb8:	2100      	movs	r1, #0
 8002bba:	0018      	movs	r0, r3
 8002bbc:	f7fe ff72 	bl	8001aa4 <LL_ADC_REG_SetSequencerScanDirection>
  LL_ADC_SetOverSamplingScope(ADC1, LL_ADC_OVS_DISABLE);
 8002bc0:	4b2e      	ldr	r3, [pc, #184]	@ (8002c7c <MX_ADC1_Init+0x384>)
 8002bc2:	2100      	movs	r1, #0
 8002bc4:	0018      	movs	r0, r3
 8002bc6:	f7fe ff90 	bl	8001aea <LL_ADC_SetOverSamplingScope>
  LL_ADC_SetTriggerFrequencyMode(ADC1, LL_ADC_CLOCK_FREQ_MODE_HIGH);
 8002bca:	4b2c      	ldr	r3, [pc, #176]	@ (8002c7c <MX_ADC1_Init+0x384>)
 8002bcc:	2100      	movs	r1, #0
 8002bce:	0018      	movs	r0, r3
 8002bd0:	f7fe ff22 	bl	8001a18 <LL_ADC_SetTriggerFrequencyMode>
  LL_ADC_REG_SetSequencerChAdd(ADC1, LL_ADC_CHANNEL_0|LL_ADC_CHANNEL_1
 8002bd4:	4a2b      	ldr	r2, [pc, #172]	@ (8002c84 <MX_ADC1_Init+0x38c>)
 8002bd6:	4b29      	ldr	r3, [pc, #164]	@ (8002c7c <MX_ADC1_Init+0x384>)
 8002bd8:	0011      	movs	r1, r2
 8002bda:	0018      	movs	r0, r3
 8002bdc:	f7fe ff74 	bl	8001ac8 <LL_ADC_REG_SetSequencerChAdd>
                              |LL_ADC_CHANNEL_6|LL_ADC_CHANNEL_7
                              |LL_ADC_CHANNEL_8);

   /* Poll for ADC channel configuration ready */
   #if (USE_TIMEOUT == 1)
   Timeout = ADC_CHANNEL_CONF_RDY_TIMEOUT_MS;
 8002be0:	2301      	movs	r3, #1
 8002be2:	667b      	str	r3, [r7, #100]	@ 0x64
   #endif /* USE_TIMEOUT */
   while (LL_ADC_IsActiveFlag_CCRDY(ADC1) == 0)
 8002be4:	e00a      	b.n	8002bfc <MX_ADC1_Init+0x304>
     {
   #if (USE_TIMEOUT == 1)
   /* Check Systick counter flag to decrement the time-out value */
   if (LL_SYSTICK_IsActiveCounterFlag())
 8002be6:	f7ff f865 	bl	8001cb4 <LL_SYSTICK_IsActiveCounterFlag>
 8002bea:	1e03      	subs	r3, r0, #0
 8002bec:	d006      	beq.n	8002bfc <MX_ADC1_Init+0x304>
     {
   if(Timeout-- == 0)
 8002bee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002bf0:	1e5a      	subs	r2, r3, #1
 8002bf2:	667a      	str	r2, [r7, #100]	@ 0x64
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d101      	bne.n	8002bfc <MX_ADC1_Init+0x304>
         {
   Error_Handler();
 8002bf8:	f000 faf0 	bl	80031dc <Error_Handler>
   while (LL_ADC_IsActiveFlag_CCRDY(ADC1) == 0)
 8002bfc:	4b1f      	ldr	r3, [pc, #124]	@ (8002c7c <MX_ADC1_Init+0x384>)
 8002bfe:	0018      	movs	r0, r3
 8002c00:	f7fe ffdf 	bl	8001bc2 <LL_ADC_IsActiveFlag_CCRDY>
 8002c04:	1e03      	subs	r3, r0, #0
 8002c06:	d0ee      	beq.n	8002be6 <MX_ADC1_Init+0x2ee>
         }
     }
   #endif /* USE_TIMEOUT */
     }
   /* Clear flag ADC channel configuration ready */
   LL_ADC_ClearFlag_CCRDY(ADC1);
 8002c08:	4b1c      	ldr	r3, [pc, #112]	@ (8002c7c <MX_ADC1_Init+0x384>)
 8002c0a:	0018      	movs	r0, r3
 8002c0c:	f7fe ffed 	bl	8001bea <LL_ADC_ClearFlag_CCRDY>
  LL_ADC_SetSamplingTimeCommonChannels(ADC1, LL_ADC_SAMPLINGTIME_COMMON_1, LL_ADC_SAMPLINGTIME_160CYCLES_5);
 8002c10:	4b1a      	ldr	r3, [pc, #104]	@ (8002c7c <MX_ADC1_Init+0x384>)
 8002c12:	2207      	movs	r2, #7
 8002c14:	2100      	movs	r1, #0
 8002c16:	0018      	movs	r0, r3
 8002c18:	f7fe ff12 	bl	8001a40 <LL_ADC_SetSamplingTimeCommonChannels>
  LL_ADC_DisableIT_EOC(ADC1);
 8002c1c:	4b17      	ldr	r3, [pc, #92]	@ (8002c7c <MX_ADC1_Init+0x384>)
 8002c1e:	0018      	movs	r0, r3
 8002c20:	f7fe fffd 	bl	8001c1e <LL_ADC_DisableIT_EOC>
  LL_ADC_DisableIT_EOS(ADC1);
 8002c24:	4b15      	ldr	r3, [pc, #84]	@ (8002c7c <MX_ADC1_Init+0x384>)
 8002c26:	0018      	movs	r0, r3
 8002c28:	f7ff f808 	bl	8001c3c <LL_ADC_DisableIT_EOS>

   /* Enable ADC internal voltage regulator */
   LL_ADC_EnableInternalRegulator(ADC1);
 8002c2c:	4b13      	ldr	r3, [pc, #76]	@ (8002c7c <MX_ADC1_Init+0x384>)
 8002c2e:	0018      	movs	r0, r3
 8002c30:	f7fe ff6e 	bl	8001b10 <LL_ADC_EnableInternalRegulator>
   /* Note: Variable divided by 2 to compensate partially */
   /* CPU processing cycles (depends on compilation optimization). */
   /* Note: If system core clock frequency is below 200kHz, wait time */
   /* is only a few CPU processing cycles. */
   uint32_t wait_loop_index;
   wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8002c34:	4b14      	ldr	r3, [pc, #80]	@ (8002c88 <MX_ADC1_Init+0x390>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4914      	ldr	r1, [pc, #80]	@ (8002c8c <MX_ADC1_Init+0x394>)
 8002c3a:	0018      	movs	r0, r3
 8002c3c:	f7fd fa64 	bl	8000108 <__udivsi3>
 8002c40:	0003      	movs	r3, r0
 8002c42:	001a      	movs	r2, r3
 8002c44:	0013      	movs	r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	189b      	adds	r3, r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	210a      	movs	r1, #10
 8002c4e:	0018      	movs	r0, r3
 8002c50:	f7fd fa5a 	bl	8000108 <__udivsi3>
 8002c54:	0003      	movs	r3, r0
 8002c56:	663b      	str	r3, [r7, #96]	@ 0x60
   while(wait_loop_index != 0)
 8002c58:	e002      	b.n	8002c60 <MX_ADC1_Init+0x368>
     {
   wait_loop_index--;
 8002c5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c5c:	3b01      	subs	r3, #1
 8002c5e:	663b      	str	r3, [r7, #96]	@ 0x60
   while(wait_loop_index != 0)
 8002c60:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1f9      	bne.n	8002c5a <MX_ADC1_Init+0x362>
     }
  /* USER CODE BEGIN ADC1_Init 2 */

   LL_ADC_EnableIT_OVR(ADC1);
 8002c66:	4b05      	ldr	r3, [pc, #20]	@ (8002c7c <MX_ADC1_Init+0x384>)
 8002c68:	0018      	movs	r0, r3
 8002c6a:	f7fe ffca 	bl	8001c02 <LL_ADC_EnableIT_OVR>

  /* USER CODE END ADC1_Init 2 */

}
 8002c6e:	46c0      	nop			@ (mov r8, r8)
 8002c70:	46bd      	mov	sp, r7
 8002c72:	b01b      	add	sp, #108	@ 0x6c
 8002c74:	bd90      	pop	{r4, r7, pc}
 8002c76:	46c0      	nop			@ (mov r8, r8)
 8002c78:	40020000 	.word	0x40020000
 8002c7c:	40012400 	.word	0x40012400
 8002c80:	20000026 	.word	0x20000026
 8002c84:	3c0001ff 	.word	0x3c0001ff
 8002c88:	200000b8 	.word	0x200000b8
 8002c8c:	00030d40 	.word	0x00030d40

08002c90 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002c94:	4b1b      	ldr	r3, [pc, #108]	@ (8002d04 <MX_I2C1_Init+0x74>)
 8002c96:	4a1c      	ldr	r2, [pc, #112]	@ (8002d08 <MX_I2C1_Init+0x78>)
 8002c98:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010020B;
 8002c9a:	4b1a      	ldr	r3, [pc, #104]	@ (8002d04 <MX_I2C1_Init+0x74>)
 8002c9c:	4a1b      	ldr	r2, [pc, #108]	@ (8002d0c <MX_I2C1_Init+0x7c>)
 8002c9e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002ca0:	4b18      	ldr	r3, [pc, #96]	@ (8002d04 <MX_I2C1_Init+0x74>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ca6:	4b17      	ldr	r3, [pc, #92]	@ (8002d04 <MX_I2C1_Init+0x74>)
 8002ca8:	2201      	movs	r2, #1
 8002caa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002cac:	4b15      	ldr	r3, [pc, #84]	@ (8002d04 <MX_I2C1_Init+0x74>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002cb2:	4b14      	ldr	r3, [pc, #80]	@ (8002d04 <MX_I2C1_Init+0x74>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002cb8:	4b12      	ldr	r3, [pc, #72]	@ (8002d04 <MX_I2C1_Init+0x74>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002cbe:	4b11      	ldr	r3, [pc, #68]	@ (8002d04 <MX_I2C1_Init+0x74>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002cc4:	4b0f      	ldr	r3, [pc, #60]	@ (8002d04 <MX_I2C1_Init+0x74>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002cca:	4b0e      	ldr	r3, [pc, #56]	@ (8002d04 <MX_I2C1_Init+0x74>)
 8002ccc:	0018      	movs	r0, r3
 8002cce:	f002 fed7 	bl	8005a80 <HAL_I2C_Init>
 8002cd2:	1e03      	subs	r3, r0, #0
 8002cd4:	d001      	beq.n	8002cda <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002cd6:	f000 fa81 	bl	80031dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002cda:	4b0a      	ldr	r3, [pc, #40]	@ (8002d04 <MX_I2C1_Init+0x74>)
 8002cdc:	2100      	movs	r1, #0
 8002cde:	0018      	movs	r0, r3
 8002ce0:	f005 f802 	bl	8007ce8 <HAL_I2CEx_ConfigAnalogFilter>
 8002ce4:	1e03      	subs	r3, r0, #0
 8002ce6:	d001      	beq.n	8002cec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002ce8:	f000 fa78 	bl	80031dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002cec:	4b05      	ldr	r3, [pc, #20]	@ (8002d04 <MX_I2C1_Init+0x74>)
 8002cee:	2100      	movs	r1, #0
 8002cf0:	0018      	movs	r0, r3
 8002cf2:	f005 f845 	bl	8007d80 <HAL_I2CEx_ConfigDigitalFilter>
 8002cf6:	1e03      	subs	r3, r0, #0
 8002cf8:	d001      	beq.n	8002cfe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002cfa:	f000 fa6f 	bl	80031dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002cfe:	46c0      	nop			@ (mov r8, r8)
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	20000304 	.word	0x20000304
 8002d08:	40005400 	.word	0x40005400
 8002d0c:	0010020b 	.word	0x0010020b

08002d10 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002d14:	4b1b      	ldr	r3, [pc, #108]	@ (8002d84 <MX_SPI1_Init+0x74>)
 8002d16:	4a1c      	ldr	r2, [pc, #112]	@ (8002d88 <MX_SPI1_Init+0x78>)
 8002d18:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002d1a:	4b1a      	ldr	r3, [pc, #104]	@ (8002d84 <MX_SPI1_Init+0x74>)
 8002d1c:	2282      	movs	r2, #130	@ 0x82
 8002d1e:	0052      	lsls	r2, r2, #1
 8002d20:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002d22:	4b18      	ldr	r3, [pc, #96]	@ (8002d84 <MX_SPI1_Init+0x74>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d28:	4b16      	ldr	r3, [pc, #88]	@ (8002d84 <MX_SPI1_Init+0x74>)
 8002d2a:	22e0      	movs	r2, #224	@ 0xe0
 8002d2c:	00d2      	lsls	r2, r2, #3
 8002d2e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d30:	4b14      	ldr	r3, [pc, #80]	@ (8002d84 <MX_SPI1_Init+0x74>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002d36:	4b13      	ldr	r3, [pc, #76]	@ (8002d84 <MX_SPI1_Init+0x74>)
 8002d38:	2201      	movs	r2, #1
 8002d3a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002d3c:	4b11      	ldr	r3, [pc, #68]	@ (8002d84 <MX_SPI1_Init+0x74>)
 8002d3e:	2280      	movs	r2, #128	@ 0x80
 8002d40:	0092      	lsls	r2, r2, #2
 8002d42:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002d44:	4b0f      	ldr	r3, [pc, #60]	@ (8002d84 <MX_SPI1_Init+0x74>)
 8002d46:	2210      	movs	r2, #16
 8002d48:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8002d84 <MX_SPI1_Init+0x74>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d50:	4b0c      	ldr	r3, [pc, #48]	@ (8002d84 <MX_SPI1_Init+0x74>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d56:	4b0b      	ldr	r3, [pc, #44]	@ (8002d84 <MX_SPI1_Init+0x74>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002d5c:	4b09      	ldr	r3, [pc, #36]	@ (8002d84 <MX_SPI1_Init+0x74>)
 8002d5e:	2207      	movs	r2, #7
 8002d60:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002d62:	4b08      	ldr	r3, [pc, #32]	@ (8002d84 <MX_SPI1_Init+0x74>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002d68:	4b06      	ldr	r3, [pc, #24]	@ (8002d84 <MX_SPI1_Init+0x74>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002d6e:	4b05      	ldr	r3, [pc, #20]	@ (8002d84 <MX_SPI1_Init+0x74>)
 8002d70:	0018      	movs	r0, r3
 8002d72:	f005 fd19 	bl	80087a8 <HAL_SPI_Init>
 8002d76:	1e03      	subs	r3, r0, #0
 8002d78:	d001      	beq.n	8002d7e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002d7a:	f000 fa2f 	bl	80031dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002d7e:	46c0      	nop			@ (mov r8, r8)
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	20000410 	.word	0x20000410
 8002d88:	40013000 	.word	0x40013000

08002d8c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b098      	sub	sp, #96	@ 0x60
 8002d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d92:	2354      	movs	r3, #84	@ 0x54
 8002d94:	18fb      	adds	r3, r7, r3
 8002d96:	0018      	movs	r0, r3
 8002d98:	230c      	movs	r3, #12
 8002d9a:	001a      	movs	r2, r3
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	f009 f9bd 	bl	800c11c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002da2:	2338      	movs	r3, #56	@ 0x38
 8002da4:	18fb      	adds	r3, r7, r3
 8002da6:	0018      	movs	r0, r3
 8002da8:	231c      	movs	r3, #28
 8002daa:	001a      	movs	r2, r3
 8002dac:	2100      	movs	r1, #0
 8002dae:	f009 f9b5 	bl	800c11c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002db2:	1d3b      	adds	r3, r7, #4
 8002db4:	0018      	movs	r0, r3
 8002db6:	2334      	movs	r3, #52	@ 0x34
 8002db8:	001a      	movs	r2, r3
 8002dba:	2100      	movs	r1, #0
 8002dbc:	f009 f9ae 	bl	800c11c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002dc0:	4b45      	ldr	r3, [pc, #276]	@ (8002ed8 <MX_TIM1_Init+0x14c>)
 8002dc2:	4a46      	ldr	r2, [pc, #280]	@ (8002edc <MX_TIM1_Init+0x150>)
 8002dc4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 8002dc6:	4b44      	ldr	r3, [pc, #272]	@ (8002ed8 <MX_TIM1_Init+0x14c>)
 8002dc8:	224f      	movs	r2, #79	@ 0x4f
 8002dca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dcc:	4b42      	ldr	r3, [pc, #264]	@ (8002ed8 <MX_TIM1_Init+0x14c>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8002dd2:	4b41      	ldr	r3, [pc, #260]	@ (8002ed8 <MX_TIM1_Init+0x14c>)
 8002dd4:	2263      	movs	r2, #99	@ 0x63
 8002dd6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dd8:	4b3f      	ldr	r3, [pc, #252]	@ (8002ed8 <MX_TIM1_Init+0x14c>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002dde:	4b3e      	ldr	r3, [pc, #248]	@ (8002ed8 <MX_TIM1_Init+0x14c>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002de4:	4b3c      	ldr	r3, [pc, #240]	@ (8002ed8 <MX_TIM1_Init+0x14c>)
 8002de6:	2280      	movs	r2, #128	@ 0x80
 8002de8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002dea:	4b3b      	ldr	r3, [pc, #236]	@ (8002ed8 <MX_TIM1_Init+0x14c>)
 8002dec:	0018      	movs	r0, r3
 8002dee:	f006 fa7f 	bl	80092f0 <HAL_TIM_PWM_Init>
 8002df2:	1e03      	subs	r3, r0, #0
 8002df4:	d001      	beq.n	8002dfa <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8002df6:	f000 f9f1 	bl	80031dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dfa:	2154      	movs	r1, #84	@ 0x54
 8002dfc:	187b      	adds	r3, r7, r1
 8002dfe:	2200      	movs	r2, #0
 8002e00:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002e02:	187b      	adds	r3, r7, r1
 8002e04:	2200      	movs	r2, #0
 8002e06:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e08:	187b      	adds	r3, r7, r1
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002e0e:	187a      	adds	r2, r7, r1
 8002e10:	4b31      	ldr	r3, [pc, #196]	@ (8002ed8 <MX_TIM1_Init+0x14c>)
 8002e12:	0011      	movs	r1, r2
 8002e14:	0018      	movs	r0, r3
 8002e16:	f007 f90d 	bl	800a034 <HAL_TIMEx_MasterConfigSynchronization>
 8002e1a:	1e03      	subs	r3, r0, #0
 8002e1c:	d001      	beq.n	8002e22 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002e1e:	f000 f9dd 	bl	80031dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e22:	2138      	movs	r1, #56	@ 0x38
 8002e24:	187b      	adds	r3, r7, r1
 8002e26:	2260      	movs	r2, #96	@ 0x60
 8002e28:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002e2a:	187b      	adds	r3, r7, r1
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e30:	187b      	adds	r3, r7, r1
 8002e32:	2200      	movs	r2, #0
 8002e34:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002e36:	187b      	adds	r3, r7, r1
 8002e38:	2200      	movs	r2, #0
 8002e3a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e3c:	187b      	adds	r3, r7, r1
 8002e3e:	2200      	movs	r2, #0
 8002e40:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002e42:	187b      	adds	r3, r7, r1
 8002e44:	2200      	movs	r2, #0
 8002e46:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002e48:	187b      	adds	r3, r7, r1
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e4e:	1879      	adds	r1, r7, r1
 8002e50:	4b21      	ldr	r3, [pc, #132]	@ (8002ed8 <MX_TIM1_Init+0x14c>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	0018      	movs	r0, r3
 8002e56:	f006 fc89 	bl	800976c <HAL_TIM_PWM_ConfigChannel>
 8002e5a:	1e03      	subs	r3, r0, #0
 8002e5c:	d001      	beq.n	8002e62 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8002e5e:	f000 f9bd 	bl	80031dc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002e62:	1d3b      	adds	r3, r7, #4
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002e68:	1d3b      	adds	r3, r7, #4
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002e6e:	1d3b      	adds	r3, r7, #4
 8002e70:	2200      	movs	r2, #0
 8002e72:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002e74:	1d3b      	adds	r3, r7, #4
 8002e76:	2200      	movs	r2, #0
 8002e78:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002e7a:	1d3b      	adds	r3, r7, #4
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002e80:	1d3b      	adds	r3, r7, #4
 8002e82:	2280      	movs	r2, #128	@ 0x80
 8002e84:	0192      	lsls	r2, r2, #6
 8002e86:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002e88:	1d3b      	adds	r3, r7, #4
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002e8e:	1d3b      	adds	r3, r7, #4
 8002e90:	2200      	movs	r2, #0
 8002e92:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002e94:	1d3b      	adds	r3, r7, #4
 8002e96:	2200      	movs	r2, #0
 8002e98:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002e9a:	1d3b      	adds	r3, r7, #4
 8002e9c:	2280      	movs	r2, #128	@ 0x80
 8002e9e:	0492      	lsls	r2, r2, #18
 8002ea0:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002ea2:	1d3b      	adds	r3, r7, #4
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002ea8:	1d3b      	adds	r3, r7, #4
 8002eaa:	2200      	movs	r2, #0
 8002eac:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002eae:	1d3b      	adds	r3, r7, #4
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002eb4:	1d3a      	adds	r2, r7, #4
 8002eb6:	4b08      	ldr	r3, [pc, #32]	@ (8002ed8 <MX_TIM1_Init+0x14c>)
 8002eb8:	0011      	movs	r1, r2
 8002eba:	0018      	movs	r0, r3
 8002ebc:	f007 f922 	bl	800a104 <HAL_TIMEx_ConfigBreakDeadTime>
 8002ec0:	1e03      	subs	r3, r0, #0
 8002ec2:	d001      	beq.n	8002ec8 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8002ec4:	f000 f98a 	bl	80031dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002ec8:	4b03      	ldr	r3, [pc, #12]	@ (8002ed8 <MX_TIM1_Init+0x14c>)
 8002eca:	0018      	movs	r0, r3
 8002ecc:	f001 faa6 	bl	800441c <HAL_TIM_MspPostInit>

}
 8002ed0:	46c0      	nop			@ (mov r8, r8)
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	b018      	add	sp, #96	@ 0x60
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	20000474 	.word	0x20000474
 8002edc:	40012c00 	.word	0x40012c00

08002ee0 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002ee4:	4b0e      	ldr	r3, [pc, #56]	@ (8002f20 <MX_TIM14_Init+0x40>)
 8002ee6:	4a0f      	ldr	r2, [pc, #60]	@ (8002f24 <MX_TIM14_Init+0x44>)
 8002ee8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 800 - 1 ;
 8002eea:	4b0d      	ldr	r3, [pc, #52]	@ (8002f20 <MX_TIM14_Init+0x40>)
 8002eec:	4a0e      	ldr	r2, [pc, #56]	@ (8002f28 <MX_TIM14_Init+0x48>)
 8002eee:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8002f20 <MX_TIM14_Init+0x40>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000 - 1;
 8002ef6:	4b0a      	ldr	r3, [pc, #40]	@ (8002f20 <MX_TIM14_Init+0x40>)
 8002ef8:	4a0c      	ldr	r2, [pc, #48]	@ (8002f2c <MX_TIM14_Init+0x4c>)
 8002efa:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002efc:	4b08      	ldr	r3, [pc, #32]	@ (8002f20 <MX_TIM14_Init+0x40>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f02:	4b07      	ldr	r3, [pc, #28]	@ (8002f20 <MX_TIM14_Init+0x40>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002f08:	4b05      	ldr	r3, [pc, #20]	@ (8002f20 <MX_TIM14_Init+0x40>)
 8002f0a:	0018      	movs	r0, r3
 8002f0c:	f006 f8b8 	bl	8009080 <HAL_TIM_Base_Init>
 8002f10:	1e03      	subs	r3, r0, #0
 8002f12:	d001      	beq.n	8002f18 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8002f14:	f000 f962 	bl	80031dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8002f18:	46c0      	nop			@ (mov r8, r8)
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	46c0      	nop			@ (mov r8, r8)
 8002f20:	200004c0 	.word	0x200004c0
 8002f24:	40002000 	.word	0x40002000
 8002f28:	0000031f 	.word	0x0000031f
 8002f2c:	0000270f 	.word	0x0000270f

08002f30 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002f34:	4b24      	ldr	r3, [pc, #144]	@ (8002fc8 <MX_USART1_UART_Init+0x98>)
 8002f36:	4a25      	ldr	r2, [pc, #148]	@ (8002fcc <MX_USART1_UART_Init+0x9c>)
 8002f38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002f3a:	4b23      	ldr	r3, [pc, #140]	@ (8002fc8 <MX_USART1_UART_Init+0x98>)
 8002f3c:	22e1      	movs	r2, #225	@ 0xe1
 8002f3e:	0252      	lsls	r2, r2, #9
 8002f40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f42:	4b21      	ldr	r3, [pc, #132]	@ (8002fc8 <MX_USART1_UART_Init+0x98>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002f48:	4b1f      	ldr	r3, [pc, #124]	@ (8002fc8 <MX_USART1_UART_Init+0x98>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002f4e:	4b1e      	ldr	r3, [pc, #120]	@ (8002fc8 <MX_USART1_UART_Init+0x98>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f54:	4b1c      	ldr	r3, [pc, #112]	@ (8002fc8 <MX_USART1_UART_Init+0x98>)
 8002f56:	220c      	movs	r2, #12
 8002f58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f5a:	4b1b      	ldr	r3, [pc, #108]	@ (8002fc8 <MX_USART1_UART_Init+0x98>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f60:	4b19      	ldr	r3, [pc, #100]	@ (8002fc8 <MX_USART1_UART_Init+0x98>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f66:	4b18      	ldr	r3, [pc, #96]	@ (8002fc8 <MX_USART1_UART_Init+0x98>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002f6c:	4b16      	ldr	r3, [pc, #88]	@ (8002fc8 <MX_USART1_UART_Init+0x98>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f72:	4b15      	ldr	r3, [pc, #84]	@ (8002fc8 <MX_USART1_UART_Init+0x98>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8002f78:	4813      	ldr	r0, [pc, #76]	@ (8002fc8 <MX_USART1_UART_Init+0x98>)
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	2100      	movs	r1, #0
 8002f80:	f008 fce4 	bl	800b94c <HAL_RS485Ex_Init>
 8002f84:	1e03      	subs	r3, r0, #0
 8002f86:	d001      	beq.n	8002f8c <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 8002f88:	f000 f928 	bl	80031dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f8c:	4b0e      	ldr	r3, [pc, #56]	@ (8002fc8 <MX_USART1_UART_Init+0x98>)
 8002f8e:	2100      	movs	r1, #0
 8002f90:	0018      	movs	r0, r3
 8002f92:	f008 fd9f 	bl	800bad4 <HAL_UARTEx_SetTxFifoThreshold>
 8002f96:	1e03      	subs	r3, r0, #0
 8002f98:	d001      	beq.n	8002f9e <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 8002f9a:	f000 f91f 	bl	80031dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f9e:	4b0a      	ldr	r3, [pc, #40]	@ (8002fc8 <MX_USART1_UART_Init+0x98>)
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	0018      	movs	r0, r3
 8002fa4:	f008 fdd6 	bl	800bb54 <HAL_UARTEx_SetRxFifoThreshold>
 8002fa8:	1e03      	subs	r3, r0, #0
 8002faa:	d001      	beq.n	8002fb0 <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 8002fac:	f000 f916 	bl	80031dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002fb0:	4b05      	ldr	r3, [pc, #20]	@ (8002fc8 <MX_USART1_UART_Init+0x98>)
 8002fb2:	0018      	movs	r0, r3
 8002fb4:	f008 fd54 	bl	800ba60 <HAL_UARTEx_DisableFifoMode>
 8002fb8:	1e03      	subs	r3, r0, #0
 8002fba:	d001      	beq.n	8002fc0 <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 8002fbc:	f000 f90e 	bl	80031dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002fc0:	46c0      	nop			@ (mov r8, r8)
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	46c0      	nop			@ (mov r8, r8)
 8002fc8:	2000050c 	.word	0x2000050c
 8002fcc:	40013800 	.word	0x40013800

08002fd0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002fd6:	4b13      	ldr	r3, [pc, #76]	@ (8003024 <MX_DMA_Init+0x54>)
 8002fd8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002fda:	4b12      	ldr	r3, [pc, #72]	@ (8003024 <MX_DMA_Init+0x54>)
 8002fdc:	2101      	movs	r1, #1
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	639a      	str	r2, [r3, #56]	@ 0x38
 8002fe2:	4b10      	ldr	r3, [pc, #64]	@ (8003024 <MX_DMA_Init+0x54>)
 8002fe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	4013      	ands	r3, r2
 8002fea:	607b      	str	r3, [r7, #4]
 8002fec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, 0);
 8002fee:	2100      	movs	r1, #0
 8002ff0:	2009      	movs	r0, #9
 8002ff2:	f7fe fc97 	bl	8001924 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002ff6:	2009      	movs	r0, #9
 8002ff8:	f7fe fc7a 	bl	80018f0 <__NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	2100      	movs	r1, #0
 8003000:	200a      	movs	r0, #10
 8003002:	f001 fe85 	bl	8004d10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8003006:	200a      	movs	r0, #10
 8003008:	f001 fe97 	bl	8004d3a <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_DMA1_CH4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_DMA1_CH4_5_IRQn, 0, 0);
 800300c:	2200      	movs	r2, #0
 800300e:	2100      	movs	r1, #0
 8003010:	200b      	movs	r0, #11
 8003012:	f001 fe7d 	bl	8004d10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_DMA1_CH4_5_IRQn);
 8003016:	200b      	movs	r0, #11
 8003018:	f001 fe8f 	bl	8004d3a <HAL_NVIC_EnableIRQ>

}
 800301c:	46c0      	nop			@ (mov r8, r8)
 800301e:	46bd      	mov	sp, r7
 8003020:	b002      	add	sp, #8
 8003022:	bd80      	pop	{r7, pc}
 8003024:	40021000 	.word	0x40021000

08003028 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003028:	b590      	push	{r4, r7, lr}
 800302a:	b08b      	sub	sp, #44	@ 0x2c
 800302c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800302e:	2414      	movs	r4, #20
 8003030:	193b      	adds	r3, r7, r4
 8003032:	0018      	movs	r0, r3
 8003034:	2314      	movs	r3, #20
 8003036:	001a      	movs	r2, r3
 8003038:	2100      	movs	r1, #0
 800303a:	f009 f86f 	bl	800c11c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800303e:	4b62      	ldr	r3, [pc, #392]	@ (80031c8 <MX_GPIO_Init+0x1a0>)
 8003040:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003042:	4b61      	ldr	r3, [pc, #388]	@ (80031c8 <MX_GPIO_Init+0x1a0>)
 8003044:	2104      	movs	r1, #4
 8003046:	430a      	orrs	r2, r1
 8003048:	635a      	str	r2, [r3, #52]	@ 0x34
 800304a:	4b5f      	ldr	r3, [pc, #380]	@ (80031c8 <MX_GPIO_Init+0x1a0>)
 800304c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800304e:	2204      	movs	r2, #4
 8003050:	4013      	ands	r3, r2
 8003052:	613b      	str	r3, [r7, #16]
 8003054:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003056:	4b5c      	ldr	r3, [pc, #368]	@ (80031c8 <MX_GPIO_Init+0x1a0>)
 8003058:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800305a:	4b5b      	ldr	r3, [pc, #364]	@ (80031c8 <MX_GPIO_Init+0x1a0>)
 800305c:	2120      	movs	r1, #32
 800305e:	430a      	orrs	r2, r1
 8003060:	635a      	str	r2, [r3, #52]	@ 0x34
 8003062:	4b59      	ldr	r3, [pc, #356]	@ (80031c8 <MX_GPIO_Init+0x1a0>)
 8003064:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003066:	2220      	movs	r2, #32
 8003068:	4013      	ands	r3, r2
 800306a:	60fb      	str	r3, [r7, #12]
 800306c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800306e:	4b56      	ldr	r3, [pc, #344]	@ (80031c8 <MX_GPIO_Init+0x1a0>)
 8003070:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003072:	4b55      	ldr	r3, [pc, #340]	@ (80031c8 <MX_GPIO_Init+0x1a0>)
 8003074:	2101      	movs	r1, #1
 8003076:	430a      	orrs	r2, r1
 8003078:	635a      	str	r2, [r3, #52]	@ 0x34
 800307a:	4b53      	ldr	r3, [pc, #332]	@ (80031c8 <MX_GPIO_Init+0x1a0>)
 800307c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800307e:	2201      	movs	r2, #1
 8003080:	4013      	ands	r3, r2
 8003082:	60bb      	str	r3, [r7, #8]
 8003084:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003086:	4b50      	ldr	r3, [pc, #320]	@ (80031c8 <MX_GPIO_Init+0x1a0>)
 8003088:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800308a:	4b4f      	ldr	r3, [pc, #316]	@ (80031c8 <MX_GPIO_Init+0x1a0>)
 800308c:	2102      	movs	r1, #2
 800308e:	430a      	orrs	r2, r1
 8003090:	635a      	str	r2, [r3, #52]	@ 0x34
 8003092:	4b4d      	ldr	r3, [pc, #308]	@ (80031c8 <MX_GPIO_Init+0x1a0>)
 8003094:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003096:	2202      	movs	r2, #2
 8003098:	4013      	ands	r3, r2
 800309a:	607b      	str	r3, [r7, #4]
 800309c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800309e:	4b4a      	ldr	r3, [pc, #296]	@ (80031c8 <MX_GPIO_Init+0x1a0>)
 80030a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80030a2:	4b49      	ldr	r3, [pc, #292]	@ (80031c8 <MX_GPIO_Init+0x1a0>)
 80030a4:	2108      	movs	r1, #8
 80030a6:	430a      	orrs	r2, r1
 80030a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80030aa:	4b47      	ldr	r3, [pc, #284]	@ (80031c8 <MX_GPIO_Init+0x1a0>)
 80030ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030ae:	2208      	movs	r2, #8
 80030b0:	4013      	ands	r3, r2
 80030b2:	603b      	str	r3, [r7, #0]
 80030b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Actuator_C_EN_GPIO_Port, Actuator_C_EN_Pin, GPIO_PIN_RESET);
 80030b6:	4b45      	ldr	r3, [pc, #276]	@ (80031cc <MX_GPIO_Init+0x1a4>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	2101      	movs	r1, #1
 80030bc:	0018      	movs	r0, r3
 80030be:	f002 fc8e 	bl	80059de <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Actuator_A_EN_Pin|Actuator_B_EN_Pin, GPIO_PIN_RESET);
 80030c2:	4b43      	ldr	r3, [pc, #268]	@ (80031d0 <MX_GPIO_Init+0x1a8>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	21c0      	movs	r1, #192	@ 0xc0
 80030c8:	0018      	movs	r0, r3
 80030ca:	f002 fc88 	bl	80059de <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_SET);
 80030ce:	4b41      	ldr	r3, [pc, #260]	@ (80031d4 <MX_GPIO_Init+0x1ac>)
 80030d0:	2201      	movs	r2, #1
 80030d2:	2101      	movs	r1, #1
 80030d4:	0018      	movs	r0, r3
 80030d6:	f002 fc82 	bl	80059de <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Actuator_C_EN_Pin */
  GPIO_InitStruct.Pin = Actuator_C_EN_Pin;
 80030da:	193b      	adds	r3, r7, r4
 80030dc:	2201      	movs	r2, #1
 80030de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030e0:	193b      	adds	r3, r7, r4
 80030e2:	2201      	movs	r2, #1
 80030e4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e6:	193b      	adds	r3, r7, r4
 80030e8:	2200      	movs	r2, #0
 80030ea:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ec:	193b      	adds	r3, r7, r4
 80030ee:	2200      	movs	r2, #0
 80030f0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Actuator_C_EN_GPIO_Port, &GPIO_InitStruct);
 80030f2:	193b      	adds	r3, r7, r4
 80030f4:	4a35      	ldr	r2, [pc, #212]	@ (80031cc <MX_GPIO_Init+0x1a4>)
 80030f6:	0019      	movs	r1, r3
 80030f8:	0010      	movs	r0, r2
 80030fa:	f002 fa09 	bl	8005510 <HAL_GPIO_Init>

  /*Configure GPIO pin : Encoder_Pulse_A_Pin */
  GPIO_InitStruct.Pin = Encoder_Pulse_A_Pin;
 80030fe:	0021      	movs	r1, r4
 8003100:	187b      	adds	r3, r7, r1
 8003102:	2280      	movs	r2, #128	@ 0x80
 8003104:	0192      	lsls	r2, r2, #6
 8003106:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003108:	000c      	movs	r4, r1
 800310a:	193b      	adds	r3, r7, r4
 800310c:	4a32      	ldr	r2, [pc, #200]	@ (80031d8 <MX_GPIO_Init+0x1b0>)
 800310e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003110:	193b      	adds	r3, r7, r4
 8003112:	2200      	movs	r2, #0
 8003114:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Encoder_Pulse_A_GPIO_Port, &GPIO_InitStruct);
 8003116:	193b      	adds	r3, r7, r4
 8003118:	4a2c      	ldr	r2, [pc, #176]	@ (80031cc <MX_GPIO_Init+0x1a4>)
 800311a:	0019      	movs	r1, r3
 800311c:	0010      	movs	r0, r2
 800311e:	f002 f9f7 	bl	8005510 <HAL_GPIO_Init>

  /*Configure GPIO pin : Encoder_Pulse_B_Pin */
  GPIO_InitStruct.Pin = Encoder_Pulse_B_Pin;
 8003122:	0021      	movs	r1, r4
 8003124:	187b      	adds	r3, r7, r1
 8003126:	2280      	movs	r2, #128	@ 0x80
 8003128:	01d2      	lsls	r2, r2, #7
 800312a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800312c:	000c      	movs	r4, r1
 800312e:	193b      	adds	r3, r7, r4
 8003130:	2200      	movs	r2, #0
 8003132:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003134:	193b      	adds	r3, r7, r4
 8003136:	2200      	movs	r2, #0
 8003138:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Encoder_Pulse_B_GPIO_Port, &GPIO_InitStruct);
 800313a:	193b      	adds	r3, r7, r4
 800313c:	4a23      	ldr	r2, [pc, #140]	@ (80031cc <MX_GPIO_Init+0x1a4>)
 800313e:	0019      	movs	r1, r3
 8003140:	0010      	movs	r0, r2
 8003142:	f002 f9e5 	bl	8005510 <HAL_GPIO_Init>

  /*Configure GPIO pins : Actuator_A_EN_Pin Actuator_B_EN_Pin */
  GPIO_InitStruct.Pin = Actuator_A_EN_Pin|Actuator_B_EN_Pin;
 8003146:	193b      	adds	r3, r7, r4
 8003148:	22c0      	movs	r2, #192	@ 0xc0
 800314a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800314c:	193b      	adds	r3, r7, r4
 800314e:	2201      	movs	r2, #1
 8003150:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003152:	193b      	adds	r3, r7, r4
 8003154:	2200      	movs	r2, #0
 8003156:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003158:	193b      	adds	r3, r7, r4
 800315a:	2200      	movs	r2, #0
 800315c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800315e:	193b      	adds	r3, r7, r4
 8003160:	4a1b      	ldr	r2, [pc, #108]	@ (80031d0 <MX_GPIO_Init+0x1a8>)
 8003162:	0019      	movs	r1, r3
 8003164:	0010      	movs	r0, r2
 8003166:	f002 f9d3 	bl	8005510 <HAL_GPIO_Init>

  /*Configure GPIO pin : Actuator_CS_Pin */
  GPIO_InitStruct.Pin = Actuator_CS_Pin;
 800316a:	193b      	adds	r3, r7, r4
 800316c:	2201      	movs	r2, #1
 800316e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003170:	193b      	adds	r3, r7, r4
 8003172:	2201      	movs	r2, #1
 8003174:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003176:	193b      	adds	r3, r7, r4
 8003178:	2200      	movs	r2, #0
 800317a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800317c:	193b      	adds	r3, r7, r4
 800317e:	2203      	movs	r2, #3
 8003180:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Actuator_CS_GPIO_Port, &GPIO_InitStruct);
 8003182:	193b      	adds	r3, r7, r4
 8003184:	4a13      	ldr	r2, [pc, #76]	@ (80031d4 <MX_GPIO_Init+0x1ac>)
 8003186:	0019      	movs	r1, r3
 8003188:	0010      	movs	r0, r2
 800318a:	f002 f9c1 	bl	8005510 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_Reset_Pin */
  GPIO_InitStruct.Pin = IMU_Reset_Pin;
 800318e:	0021      	movs	r1, r4
 8003190:	187b      	adds	r3, r7, r1
 8003192:	2202      	movs	r2, #2
 8003194:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003196:	187b      	adds	r3, r7, r1
 8003198:	2200      	movs	r2, #0
 800319a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800319c:	187b      	adds	r3, r7, r1
 800319e:	2200      	movs	r2, #0
 80031a0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(IMU_Reset_GPIO_Port, &GPIO_InitStruct);
 80031a2:	187b      	adds	r3, r7, r1
 80031a4:	4a0b      	ldr	r2, [pc, #44]	@ (80031d4 <MX_GPIO_Init+0x1ac>)
 80031a6:	0019      	movs	r1, r3
 80031a8:	0010      	movs	r0, r2
 80031aa:	f002 f9b1 	bl	8005510 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80031ae:	2200      	movs	r2, #0
 80031b0:	2100      	movs	r1, #0
 80031b2:	2007      	movs	r0, #7
 80031b4:	f001 fdac 	bl	8004d10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80031b8:	2007      	movs	r0, #7
 80031ba:	f001 fdbe 	bl	8004d3a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80031be:	46c0      	nop			@ (mov r8, r8)
 80031c0:	46bd      	mov	sp, r7
 80031c2:	b00b      	add	sp, #44	@ 0x2c
 80031c4:	bd90      	pop	{r4, r7, pc}
 80031c6:	46c0      	nop			@ (mov r8, r8)
 80031c8:	40021000 	.word	0x40021000
 80031cc:	50000400 	.word	0x50000400
 80031d0:	50000800 	.word	0x50000800
 80031d4:	50000c00 	.word	0x50000c00
 80031d8:	10110000 	.word	0x10110000

080031dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80031e0:	b672      	cpsid	i
}
 80031e2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80031e4:	46c0      	nop			@ (mov r8, r8)
 80031e6:	e7fd      	b.n	80031e4 <Error_Handler+0x8>

080031e8 <HAL_UARTEx_RxEventCallback>:

/*
 * Modbus reception handler function
 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	000a      	movs	r2, r1
 80031f2:	1cbb      	adds	r3, r7, #2
 80031f4:	801a      	strh	r2, [r3, #0]
	if(modbus_header)
 80031f6:	4b24      	ldr	r3, [pc, #144]	@ (8003288 <HAL_UARTEx_RxEventCallback+0xa0>)
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d026      	beq.n	800324e <HAL_UARTEx_RxEventCallback+0x66>
	{
		// Log the time for chunk miss error handling
		chunk_time = HAL_GetTick();
 8003200:	f001 fc8a 	bl	8004b18 <HAL_GetTick>
 8003204:	0002      	movs	r2, r0
 8003206:	4b21      	ldr	r3, [pc, #132]	@ (800328c <HAL_UARTEx_RxEventCallback+0xa4>)
 8003208:	601a      	str	r2, [r3, #0]
		modbus_header = 0;
 800320a:	4b1f      	ldr	r3, [pc, #124]	@ (8003288 <HAL_UARTEx_RxEventCallback+0xa0>)
 800320c:	2200      	movs	r2, #0
 800320e:	701a      	strb	r2, [r3, #0]

		// Setup the DMA to receive the # message bytes + crc + 1 in the event that the # bytes is in the message
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, &modbus_rx_buffer[6], (uint16_t)(((modbus_rx_buffer[4] << 8) | modbus_rx_buffer[5])*2 + 2 + 1));
 8003210:	4b1f      	ldr	r3, [pc, #124]	@ (8003290 <HAL_UARTEx_RxEventCallback+0xa8>)
 8003212:	791b      	ldrb	r3, [r3, #4]
 8003214:	021b      	lsls	r3, r3, #8
 8003216:	4a1e      	ldr	r2, [pc, #120]	@ (8003290 <HAL_UARTEx_RxEventCallback+0xa8>)
 8003218:	7952      	ldrb	r2, [r2, #5]
 800321a:	4313      	orrs	r3, r2
 800321c:	b29b      	uxth	r3, r3
 800321e:	3301      	adds	r3, #1
 8003220:	b29b      	uxth	r3, r3
 8003222:	18db      	adds	r3, r3, r3
 8003224:	b29b      	uxth	r3, r3
 8003226:	3301      	adds	r3, #1
 8003228:	b29a      	uxth	r2, r3
 800322a:	491a      	ldr	r1, [pc, #104]	@ (8003294 <HAL_UARTEx_RxEventCallback+0xac>)
 800322c:	4b1a      	ldr	r3, [pc, #104]	@ (8003298 <HAL_UARTEx_RxEventCallback+0xb0>)
 800322e:	0018      	movs	r0, r3
 8003230:	f008 fcd2 	bl	800bbd8 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(huart1.hdmarx, DMA_IT_HT);
 8003234:	4b18      	ldr	r3, [pc, #96]	@ (8003298 <HAL_UARTEx_RxEventCallback+0xb0>)
 8003236:	2280      	movs	r2, #128	@ 0x80
 8003238:	589b      	ldr	r3, [r3, r2]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	4b16      	ldr	r3, [pc, #88]	@ (8003298 <HAL_UARTEx_RxEventCallback+0xb0>)
 8003240:	2180      	movs	r1, #128	@ 0x80
 8003242:	585b      	ldr	r3, [r3, r1]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2104      	movs	r1, #4
 8003248:	438a      	bics	r2, r1
 800324a:	601a      	str	r2, [r3, #0]
#ifdef MB_SLAVE
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, modbus_rx_buffer, 6);
		__HAL_DMA_DISABLE_IT(huart1.hdmarx, DMA_IT_HT);
#endif
	}
}
 800324c:	e017      	b.n	800327e <HAL_UARTEx_RxEventCallback+0x96>
		modbus_header = 1;
 800324e:	4b0e      	ldr	r3, [pc, #56]	@ (8003288 <HAL_UARTEx_RxEventCallback+0xa0>)
 8003250:	2201      	movs	r2, #1
 8003252:	701a      	strb	r2, [r3, #0]
		uart_rx_int = 1;
 8003254:	4b11      	ldr	r3, [pc, #68]	@ (800329c <HAL_UARTEx_RxEventCallback+0xb4>)
 8003256:	2201      	movs	r2, #1
 8003258:	701a      	strb	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, modbus_rx_buffer, 6);
 800325a:	490d      	ldr	r1, [pc, #52]	@ (8003290 <HAL_UARTEx_RxEventCallback+0xa8>)
 800325c:	4b0e      	ldr	r3, [pc, #56]	@ (8003298 <HAL_UARTEx_RxEventCallback+0xb0>)
 800325e:	2206      	movs	r2, #6
 8003260:	0018      	movs	r0, r3
 8003262:	f008 fcb9 	bl	800bbd8 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(huart1.hdmarx, DMA_IT_HT);
 8003266:	4b0c      	ldr	r3, [pc, #48]	@ (8003298 <HAL_UARTEx_RxEventCallback+0xb0>)
 8003268:	2280      	movs	r2, #128	@ 0x80
 800326a:	589b      	ldr	r3, [r3, r2]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	4b09      	ldr	r3, [pc, #36]	@ (8003298 <HAL_UARTEx_RxEventCallback+0xb0>)
 8003272:	2180      	movs	r1, #128	@ 0x80
 8003274:	585b      	ldr	r3, [r3, r1]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2104      	movs	r1, #4
 800327a:	438a      	bics	r2, r1
 800327c:	601a      	str	r2, [r3, #0]
}
 800327e:	46c0      	nop			@ (mov r8, r8)
 8003280:	46bd      	mov	sp, r7
 8003282:	b002      	add	sp, #8
 8003284:	bd80      	pop	{r7, pc}
 8003286:	46c0      	nop			@ (mov r8, r8)
 8003288:	200000b4 	.word	0x200000b4
 800328c:	200008ac 	.word	0x200008ac
 8003290:	200006a8 	.word	0x200006a8
 8003294:	200006ae 	.word	0x200006ae
 8003298:	2000050c 	.word	0x2000050c
 800329c:	200008b0 	.word	0x200008b0

080032a0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
	uart_tx_int = 1;
 80032a8:	4b03      	ldr	r3, [pc, #12]	@ (80032b8 <HAL_UART_TxCpltCallback+0x18>)
 80032aa:	2201      	movs	r2, #1
 80032ac:	701a      	strb	r2, [r3, #0]
}
 80032ae:	46c0      	nop			@ (mov r8, r8)
 80032b0:	46bd      	mov	sp, r7
 80032b2:	b002      	add	sp, #8
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	46c0      	nop			@ (mov r8, r8)
 80032b8:	200000b5 	.word	0x200000b5

080032bc <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
	uart_err_int = 1;
 80032c4:	4b07      	ldr	r3, [pc, #28]	@ (80032e4 <HAL_UART_ErrorCallback+0x28>)
 80032c6:	2201      	movs	r2, #1
 80032c8:	701a      	strb	r2, [r3, #0]
	__HAL_UART_DISABLE_IT(&huart1, UART_IT_MASK);
 80032ca:	4b07      	ldr	r3, [pc, #28]	@ (80032e8 <HAL_UART_ErrorCallback+0x2c>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	689a      	ldr	r2, [r3, #8]
 80032d0:	4b05      	ldr	r3, [pc, #20]	@ (80032e8 <HAL_UART_ErrorCallback+0x2c>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	0052      	lsls	r2, r2, #1
 80032d6:	0852      	lsrs	r2, r2, #1
 80032d8:	609a      	str	r2, [r3, #8]
}
 80032da:	46c0      	nop			@ (mov r8, r8)
 80032dc:	46bd      	mov	sp, r7
 80032de:	b002      	add	sp, #8
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	46c0      	nop			@ (mov r8, r8)
 80032e4:	200008b1 	.word	0x200008b1
 80032e8:	2000050c 	.word	0x2000050c

080032ec <modbus_rx>:

// Modbus Slave Functions ---------------------------------------------------------------------

#ifdef MB_SLAVE
uint8_t modbus_rx()
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0
	if(uart_rx_int)
 80032f0:	4b06      	ldr	r3, [pc, #24]	@ (800330c <modbus_rx+0x20>)
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d004      	beq.n	8003304 <modbus_rx+0x18>
	{
		uart_rx_int = 0;
 80032fa:	4b04      	ldr	r3, [pc, #16]	@ (800330c <modbus_rx+0x20>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	701a      	strb	r2, [r3, #0]
		return 1;
 8003300:	2301      	movs	r3, #1
 8003302:	e000      	b.n	8003306 <modbus_rx+0x1a>
	}
	return 0;
 8003304:	2300      	movs	r3, #0
}
 8003306:	0018      	movs	r0, r3
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	200008b0 	.word	0x200008b0

08003310 <return_holding_registers>:

int8_t return_holding_registers(uint8_t* tx_len)
{
 8003310:	b5b0      	push	{r4, r5, r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
	(*tx_len) = 0;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	701a      	strb	r2, [r3, #0]

	// Handle Error Checking
	uint16_t first_register_address = (get_rx_buffer(2) << 8) | get_rx_buffer(3);
 800331e:	2002      	movs	r0, #2
 8003320:	f000 fc8a 	bl	8003c38 <get_rx_buffer>
 8003324:	0003      	movs	r3, r0
 8003326:	021b      	lsls	r3, r3, #8
 8003328:	b21c      	sxth	r4, r3
 800332a:	2003      	movs	r0, #3
 800332c:	f000 fc84 	bl	8003c38 <get_rx_buffer>
 8003330:	0003      	movs	r3, r0
 8003332:	b21b      	sxth	r3, r3
 8003334:	4323      	orrs	r3, r4
 8003336:	b21a      	sxth	r2, r3
 8003338:	230c      	movs	r3, #12
 800333a:	18fb      	adds	r3, r7, r3
 800333c:	801a      	strh	r2, [r3, #0]

	// Get the number of registers requested by the master
	uint16_t num_registers = (get_rx_buffer(4) << 8) | get_rx_buffer(5);
 800333e:	2004      	movs	r0, #4
 8003340:	f000 fc7a 	bl	8003c38 <get_rx_buffer>
 8003344:	0003      	movs	r3, r0
 8003346:	021b      	lsls	r3, r3, #8
 8003348:	b21c      	sxth	r4, r3
 800334a:	2005      	movs	r0, #5
 800334c:	f000 fc74 	bl	8003c38 <get_rx_buffer>
 8003350:	0003      	movs	r3, r0
 8003352:	b21b      	sxth	r3, r3
 8003354:	4323      	orrs	r3, r4
 8003356:	b21a      	sxth	r2, r3
 8003358:	210a      	movs	r1, #10
 800335a:	187b      	adds	r3, r7, r1
 800335c:	801a      	strh	r2, [r3, #0]

	if(num_registers > RX_BUFFER_SIZE || num_registers < 1) // 125 is the limit according to modbus protocol
 800335e:	000a      	movs	r2, r1
 8003360:	18bb      	adds	r3, r7, r2
 8003362:	881b      	ldrh	r3, [r3, #0]
 8003364:	2b7d      	cmp	r3, #125	@ 0x7d
 8003366:	d803      	bhi.n	8003370 <return_holding_registers+0x60>
 8003368:	18bb      	adds	r3, r7, r2
 800336a:	881b      	ldrh	r3, [r3, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d104      	bne.n	800337a <return_holding_registers+0x6a>
	{
		return modbus_exception(MB_ILLEGAL_DATA_VALUE);
 8003370:	2006      	movs	r0, #6
 8003372:	f000 f97b 	bl	800366c <modbus_exception>
 8003376:	0003      	movs	r3, r0
 8003378:	e06e      	b.n	8003458 <return_holding_registers+0x148>
	}

	uint16_t last_register_address = first_register_address + (num_registers - 1);
 800337a:	230a      	movs	r3, #10
 800337c:	18fa      	adds	r2, r7, r3
 800337e:	230c      	movs	r3, #12
 8003380:	18fb      	adds	r3, r7, r3
 8003382:	8812      	ldrh	r2, [r2, #0]
 8003384:	881b      	ldrh	r3, [r3, #0]
 8003386:	18d3      	adds	r3, r2, r3
 8003388:	b29a      	uxth	r2, r3
 800338a:	2108      	movs	r1, #8
 800338c:	187b      	adds	r3, r7, r1
 800338e:	3a01      	subs	r2, #1
 8003390:	801a      	strh	r2, [r3, #0]

	if(last_register_address > NUM_HOLDING_REGISTERS)
 8003392:	187b      	adds	r3, r7, r1
 8003394:	881b      	ldrh	r3, [r3, #0]
 8003396:	2b50      	cmp	r3, #80	@ 0x50
 8003398:	d904      	bls.n	80033a4 <return_holding_registers+0x94>
	{
		return modbus_exception(MB_ILLEGAL_DATA_ADDRESS);
 800339a:	2005      	movs	r0, #5
 800339c:	f000 f966 	bl	800366c <modbus_exception>
 80033a0:	0003      	movs	r3, r0
 80033a2:	e059      	b.n	8003458 <return_holding_registers+0x148>
	}

	// Return register values
	modbus_tx_buffer[0] = get_rx_buffer(0); // Append Slave id
 80033a4:	2000      	movs	r0, #0
 80033a6:	f000 fc47 	bl	8003c38 <get_rx_buffer>
 80033aa:	0003      	movs	r3, r0
 80033ac:	001a      	movs	r2, r3
 80033ae:	4b2c      	ldr	r3, [pc, #176]	@ (8003460 <return_holding_registers+0x150>)
 80033b0:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = get_rx_buffer(1); // Append Function Code
 80033b2:	2001      	movs	r0, #1
 80033b4:	f000 fc40 	bl	8003c38 <get_rx_buffer>
 80033b8:	0003      	movs	r3, r0
 80033ba:	001a      	movs	r2, r3
 80033bc:	4b28      	ldr	r3, [pc, #160]	@ (8003460 <return_holding_registers+0x150>)
 80033be:	705a      	strb	r2, [r3, #1]
	modbus_tx_buffer[2] = num_registers * 2; // Append number of bytes
 80033c0:	230a      	movs	r3, #10
 80033c2:	18fb      	adds	r3, r7, r3
 80033c4:	881b      	ldrh	r3, [r3, #0]
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	18db      	adds	r3, r3, r3
 80033ca:	b2da      	uxtb	r2, r3
 80033cc:	4b24      	ldr	r3, [pc, #144]	@ (8003460 <return_holding_registers+0x150>)
 80033ce:	709a      	strb	r2, [r3, #2]
	(*tx_len) = 3;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2203      	movs	r2, #3
 80033d4:	701a      	strb	r2, [r3, #0]

	// Append the Register Values
	for(uint8_t i = 0; i < num_registers; i++)
 80033d6:	230f      	movs	r3, #15
 80033d8:	18fb      	adds	r3, r7, r3
 80033da:	2200      	movs	r2, #0
 80033dc:	701a      	strb	r2, [r3, #0]
 80033de:	e02c      	b.n	800343a <return_holding_registers+0x12a>
	{
		modbus_tx_buffer[(*tx_len)++] = high_byte(holding_register_database[first_register_address + i]);
 80033e0:	250c      	movs	r5, #12
 80033e2:	197b      	adds	r3, r7, r5
 80033e4:	881a      	ldrh	r2, [r3, #0]
 80033e6:	240f      	movs	r4, #15
 80033e8:	193b      	adds	r3, r7, r4
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	18d2      	adds	r2, r2, r3
 80033ee:	4b1d      	ldr	r3, [pc, #116]	@ (8003464 <return_holding_registers+0x154>)
 80033f0:	0052      	lsls	r2, r2, #1
 80033f2:	5ad3      	ldrh	r3, [r2, r3]
 80033f4:	0a1b      	lsrs	r3, r3, #8
 80033f6:	b299      	uxth	r1, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	1c5a      	adds	r2, r3, #1
 80033fe:	b2d0      	uxtb	r0, r2
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	7010      	strb	r0, [r2, #0]
 8003404:	001a      	movs	r2, r3
 8003406:	b2c9      	uxtb	r1, r1
 8003408:	4b15      	ldr	r3, [pc, #84]	@ (8003460 <return_holding_registers+0x150>)
 800340a:	5499      	strb	r1, [r3, r2]
		modbus_tx_buffer[(*tx_len)++] = low_byte(holding_register_database[first_register_address + i]);
 800340c:	197b      	adds	r3, r7, r5
 800340e:	881a      	ldrh	r2, [r3, #0]
 8003410:	193b      	adds	r3, r7, r4
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	18d2      	adds	r2, r2, r3
 8003416:	4b13      	ldr	r3, [pc, #76]	@ (8003464 <return_holding_registers+0x154>)
 8003418:	0052      	lsls	r2, r2, #1
 800341a:	5ad1      	ldrh	r1, [r2, r3]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	1c5a      	adds	r2, r3, #1
 8003422:	b2d0      	uxtb	r0, r2
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	7010      	strb	r0, [r2, #0]
 8003428:	001a      	movs	r2, r3
 800342a:	b2c9      	uxtb	r1, r1
 800342c:	4b0c      	ldr	r3, [pc, #48]	@ (8003460 <return_holding_registers+0x150>)
 800342e:	5499      	strb	r1, [r3, r2]
	for(uint8_t i = 0; i < num_registers; i++)
 8003430:	193b      	adds	r3, r7, r4
 8003432:	781a      	ldrb	r2, [r3, #0]
 8003434:	193b      	adds	r3, r7, r4
 8003436:	3201      	adds	r2, #1
 8003438:	701a      	strb	r2, [r3, #0]
 800343a:	230f      	movs	r3, #15
 800343c:	18fb      	adds	r3, r7, r3
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	b29b      	uxth	r3, r3
 8003442:	220a      	movs	r2, #10
 8003444:	18ba      	adds	r2, r7, r2
 8003446:	8812      	ldrh	r2, [r2, #0]
 8003448:	429a      	cmp	r2, r3
 800344a:	d8c9      	bhi.n	80033e0 <return_holding_registers+0xd0>
	}
	return modbus_send((*tx_len));
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	0018      	movs	r0, r3
 8003452:	f000 fa19 	bl	8003888 <modbus_send>
 8003456:	0003      	movs	r3, r0
}
 8003458:	0018      	movs	r0, r3
 800345a:	46bd      	mov	sp, r7
 800345c:	b004      	add	sp, #16
 800345e:	bdb0      	pop	{r4, r5, r7, pc}
 8003460:	200007a8 	.word	0x200007a8
 8003464:	20000014 	.word	0x20000014

08003468 <edit_multiple_registers>:

int8_t edit_multiple_registers(uint8_t *tx_len)
{
 8003468:	b5b0      	push	{r4, r5, r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
	(*tx_len) = 0;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	701a      	strb	r2, [r3, #0]

	// Handle Error Checking
	uint16_t first_register_address = (get_rx_buffer(2) << 8) | get_rx_buffer(3);
 8003476:	2002      	movs	r0, #2
 8003478:	f000 fbde 	bl	8003c38 <get_rx_buffer>
 800347c:	0003      	movs	r3, r0
 800347e:	021b      	lsls	r3, r3, #8
 8003480:	b21c      	sxth	r4, r3
 8003482:	2003      	movs	r0, #3
 8003484:	f000 fbd8 	bl	8003c38 <get_rx_buffer>
 8003488:	0003      	movs	r3, r0
 800348a:	b21b      	sxth	r3, r3
 800348c:	4323      	orrs	r3, r4
 800348e:	b21a      	sxth	r2, r3
 8003490:	2314      	movs	r3, #20
 8003492:	18fb      	adds	r3, r7, r3
 8003494:	801a      	strh	r2, [r3, #0]

	uint16_t num_registers = (get_rx_buffer(4) << 8) | get_rx_buffer(5);
 8003496:	2004      	movs	r0, #4
 8003498:	f000 fbce 	bl	8003c38 <get_rx_buffer>
 800349c:	0003      	movs	r3, r0
 800349e:	021b      	lsls	r3, r3, #8
 80034a0:	b21c      	sxth	r4, r3
 80034a2:	2005      	movs	r0, #5
 80034a4:	f000 fbc8 	bl	8003c38 <get_rx_buffer>
 80034a8:	0003      	movs	r3, r0
 80034aa:	b21b      	sxth	r3, r3
 80034ac:	4323      	orrs	r3, r4
 80034ae:	b21a      	sxth	r2, r3
 80034b0:	2112      	movs	r1, #18
 80034b2:	187b      	adds	r3, r7, r1
 80034b4:	801a      	strh	r2, [r3, #0]

	if(num_registers > 125 || num_registers < 1) // 125 is the limit according to modbus protocol
 80034b6:	000a      	movs	r2, r1
 80034b8:	18bb      	adds	r3, r7, r2
 80034ba:	881b      	ldrh	r3, [r3, #0]
 80034bc:	2b7d      	cmp	r3, #125	@ 0x7d
 80034be:	d803      	bhi.n	80034c8 <edit_multiple_registers+0x60>
 80034c0:	18bb      	adds	r3, r7, r2
 80034c2:	881b      	ldrh	r3, [r3, #0]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d104      	bne.n	80034d2 <edit_multiple_registers+0x6a>
	{
		return modbus_exception(MB_ILLEGAL_DATA_VALUE);
 80034c8:	2006      	movs	r0, #6
 80034ca:	f000 f8cf 	bl	800366c <modbus_exception>
 80034ce:	0003      	movs	r3, r0
 80034d0:	e0c3      	b.n	800365a <edit_multiple_registers+0x1f2>
	}

	uint16_t last_register_address = first_register_address + (num_registers - 1);
 80034d2:	2312      	movs	r3, #18
 80034d4:	18fa      	adds	r2, r7, r3
 80034d6:	2314      	movs	r3, #20
 80034d8:	18fb      	adds	r3, r7, r3
 80034da:	8812      	ldrh	r2, [r2, #0]
 80034dc:	881b      	ldrh	r3, [r3, #0]
 80034de:	18d3      	adds	r3, r2, r3
 80034e0:	b29a      	uxth	r2, r3
 80034e2:	2110      	movs	r1, #16
 80034e4:	187b      	adds	r3, r7, r1
 80034e6:	3a01      	subs	r2, #1
 80034e8:	801a      	strh	r2, [r3, #0]

	if(last_register_address > NUM_HOLDING_REGISTERS)
 80034ea:	187b      	adds	r3, r7, r1
 80034ec:	881b      	ldrh	r3, [r3, #0]
 80034ee:	2b50      	cmp	r3, #80	@ 0x50
 80034f0:	d904      	bls.n	80034fc <edit_multiple_registers+0x94>
	{
		return modbus_exception(MB_ILLEGAL_DATA_ADDRESS);
 80034f2:	2005      	movs	r0, #5
 80034f4:	f000 f8ba 	bl	800366c <modbus_exception>
 80034f8:	0003      	movs	r3, r0
 80034fa:	e0ae      	b.n	800365a <edit_multiple_registers+0x1f2>
	}

	// Protect Read only values
	if(((first_register_address >= ADC_0) && (first_register_address <= ENCODER_SPEED)) ||
 80034fc:	2214      	movs	r2, #20
 80034fe:	18bb      	adds	r3, r7, r2
 8003500:	881b      	ldrh	r3, [r3, #0]
 8003502:	2b08      	cmp	r3, #8
 8003504:	d903      	bls.n	800350e <edit_multiple_registers+0xa6>
 8003506:	18bb      	adds	r3, r7, r2
 8003508:	881b      	ldrh	r3, [r3, #0]
 800350a:	2b3e      	cmp	r3, #62	@ 0x3e
 800350c:	d912      	bls.n	8003534 <edit_multiple_registers+0xcc>
 800350e:	2210      	movs	r2, #16
 8003510:	18bb      	adds	r3, r7, r2
 8003512:	881b      	ldrh	r3, [r3, #0]
 8003514:	2b08      	cmp	r3, #8
 8003516:	d903      	bls.n	8003520 <edit_multiple_registers+0xb8>
		 ((last_register_address >= ADC_0) && (last_register_address <= ENCODER_SPEED)) ||
 8003518:	18bb      	adds	r3, r7, r2
 800351a:	881b      	ldrh	r3, [r3, #0]
 800351c:	2b3e      	cmp	r3, #62	@ 0x3e
 800351e:	d909      	bls.n	8003534 <edit_multiple_registers+0xcc>
 8003520:	2314      	movs	r3, #20
 8003522:	18fb      	adds	r3, r7, r3
 8003524:	881b      	ldrh	r3, [r3, #0]
 8003526:	2b08      	cmp	r3, #8
 8003528:	d809      	bhi.n	800353e <edit_multiple_registers+0xd6>
		 ((first_register_address < ADC_0) && (last_register_address > ENCODER_SPEED)))
 800352a:	2310      	movs	r3, #16
 800352c:	18fb      	adds	r3, r7, r3
 800352e:	881b      	ldrh	r3, [r3, #0]
 8003530:	2b3e      	cmp	r3, #62	@ 0x3e
 8003532:	d904      	bls.n	800353e <edit_multiple_registers+0xd6>
	{
		// Ensure that sensor values are restricted to read-only
		return modbus_exception(MB_ILLEGAL_FUNCTION);
 8003534:	2004      	movs	r0, #4
 8003536:	f000 f899 	bl	800366c <modbus_exception>
 800353a:	0003      	movs	r3, r0
 800353c:	e08d      	b.n	800365a <edit_multiple_registers+0x1f2>
	}

	// Edit holding registers
	modbus_tx_buffer[0] = get_rx_buffer(0); // Append Slave id
 800353e:	2000      	movs	r0, #0
 8003540:	f000 fb7a 	bl	8003c38 <get_rx_buffer>
 8003544:	0003      	movs	r3, r0
 8003546:	001a      	movs	r2, r3
 8003548:	4b46      	ldr	r3, [pc, #280]	@ (8003664 <edit_multiple_registers+0x1fc>)
 800354a:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = get_rx_buffer(1); // Append Function Code
 800354c:	2001      	movs	r0, #1
 800354e:	f000 fb73 	bl	8003c38 <get_rx_buffer>
 8003552:	0003      	movs	r3, r0
 8003554:	001a      	movs	r2, r3
 8003556:	4b43      	ldr	r3, [pc, #268]	@ (8003664 <edit_multiple_registers+0x1fc>)
 8003558:	705a      	strb	r2, [r3, #1]
	// Append the Write Address (high byte then low byte)
	modbus_tx_buffer[2] = get_rx_buffer(2);
 800355a:	2002      	movs	r0, #2
 800355c:	f000 fb6c 	bl	8003c38 <get_rx_buffer>
 8003560:	0003      	movs	r3, r0
 8003562:	001a      	movs	r2, r3
 8003564:	4b3f      	ldr	r3, [pc, #252]	@ (8003664 <edit_multiple_registers+0x1fc>)
 8003566:	709a      	strb	r2, [r3, #2]
	modbus_tx_buffer[3] = get_rx_buffer(3);
 8003568:	2003      	movs	r0, #3
 800356a:	f000 fb65 	bl	8003c38 <get_rx_buffer>
 800356e:	0003      	movs	r3, r0
 8003570:	001a      	movs	r2, r3
 8003572:	4b3c      	ldr	r3, [pc, #240]	@ (8003664 <edit_multiple_registers+0x1fc>)
 8003574:	70da      	strb	r2, [r3, #3]
	// Append the quantity of registers to be written (high byte then low byte)
	modbus_tx_buffer[4] = get_rx_buffer(4);
 8003576:	2004      	movs	r0, #4
 8003578:	f000 fb5e 	bl	8003c38 <get_rx_buffer>
 800357c:	0003      	movs	r3, r0
 800357e:	001a      	movs	r2, r3
 8003580:	4b38      	ldr	r3, [pc, #224]	@ (8003664 <edit_multiple_registers+0x1fc>)
 8003582:	711a      	strb	r2, [r3, #4]
	modbus_tx_buffer[5] = get_rx_buffer(5);
 8003584:	2005      	movs	r0, #5
 8003586:	f000 fb57 	bl	8003c38 <get_rx_buffer>
 800358a:	0003      	movs	r3, r0
 800358c:	001a      	movs	r2, r3
 800358e:	4b35      	ldr	r3, [pc, #212]	@ (8003664 <edit_multiple_registers+0x1fc>)
 8003590:	715a      	strb	r2, [r3, #5]
	(*tx_len) = 6;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2206      	movs	r2, #6
 8003596:	701a      	strb	r2, [r3, #0]

	for(uint8_t i = 0; i < num_registers; i++)
 8003598:	2317      	movs	r3, #23
 800359a:	18fb      	adds	r3, r7, r3
 800359c:	2200      	movs	r2, #0
 800359e:	701a      	strb	r2, [r3, #0]
 80035a0:	e032      	b.n	8003608 <edit_multiple_registers+0x1a0>
	{
		holding_register_database[first_register_address + i] = (get_rx_buffer(2 * i + 7) << 8) | get_rx_buffer(2 * i + 8);
 80035a2:	2517      	movs	r5, #23
 80035a4:	197b      	adds	r3, r7, r5
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	18db      	adds	r3, r3, r3
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	3307      	adds	r3, #7
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	0018      	movs	r0, r3
 80035b2:	f000 fb41 	bl	8003c38 <get_rx_buffer>
 80035b6:	0003      	movs	r3, r0
 80035b8:	021b      	lsls	r3, r3, #8
 80035ba:	b21c      	sxth	r4, r3
 80035bc:	197b      	adds	r3, r7, r5
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	3304      	adds	r3, #4
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	18db      	adds	r3, r3, r3
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	0018      	movs	r0, r3
 80035ca:	f000 fb35 	bl	8003c38 <get_rx_buffer>
 80035ce:	0003      	movs	r3, r0
 80035d0:	b21b      	sxth	r3, r3
 80035d2:	4323      	orrs	r3, r4
 80035d4:	b219      	sxth	r1, r3
 80035d6:	2014      	movs	r0, #20
 80035d8:	183b      	adds	r3, r7, r0
 80035da:	881a      	ldrh	r2, [r3, #0]
 80035dc:	197b      	adds	r3, r7, r5
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	18d2      	adds	r2, r2, r3
 80035e2:	b289      	uxth	r1, r1
 80035e4:	4b20      	ldr	r3, [pc, #128]	@ (8003668 <edit_multiple_registers+0x200>)
 80035e6:	0052      	lsls	r2, r2, #1
 80035e8:	52d1      	strh	r1, [r2, r3]

		// Handle the range boundaries of each writable register
		handle_range(first_register_address + i);
 80035ea:	197b      	adds	r3, r7, r5
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	b29a      	uxth	r2, r3
 80035f0:	183b      	adds	r3, r7, r0
 80035f2:	881b      	ldrh	r3, [r3, #0]
 80035f4:	18d3      	adds	r3, r2, r3
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	0018      	movs	r0, r3
 80035fa:	f000 f85f 	bl	80036bc <handle_range>
	for(uint8_t i = 0; i < num_registers; i++)
 80035fe:	197b      	adds	r3, r7, r5
 8003600:	781a      	ldrb	r2, [r3, #0]
 8003602:	197b      	adds	r3, r7, r5
 8003604:	3201      	adds	r2, #1
 8003606:	701a      	strb	r2, [r3, #0]
 8003608:	2317      	movs	r3, #23
 800360a:	18fb      	adds	r3, r7, r3
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	b29b      	uxth	r3, r3
 8003610:	2212      	movs	r2, #18
 8003612:	18ba      	adds	r2, r7, r2
 8003614:	8812      	ldrh	r2, [r2, #0]
 8003616:	429a      	cmp	r2, r3
 8003618:	d8c3      	bhi.n	80035a2 <edit_multiple_registers+0x13a>

	// TIMING WORKAROUND START
//	HAL_Delay(1);
	// TIMING WORKAROUND END

	int8_t status = modbus_send((*tx_len));
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	250f      	movs	r5, #15
 8003620:	197c      	adds	r4, r7, r5
 8003622:	0018      	movs	r0, r3
 8003624:	f000 f930 	bl	8003888 <modbus_send>
 8003628:	0003      	movs	r3, r0
 800362a:	7023      	strb	r3, [r4, #0]

	if(status == MB_SUCCESS)
 800362c:	197b      	adds	r3, r7, r5
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	b25b      	sxtb	r3, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d10d      	bne.n	8003652 <edit_multiple_registers+0x1ea>
	{
		// Special Case Modbus Baud Rate Modification
		if((first_register_address <= 1) && last_register_address >= 1)
 8003636:	2314      	movs	r3, #20
 8003638:	18fb      	adds	r3, r7, r3
 800363a:	881b      	ldrh	r3, [r3, #0]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d808      	bhi.n	8003652 <edit_multiple_registers+0x1ea>
 8003640:	2310      	movs	r3, #16
 8003642:	18fb      	adds	r3, r7, r3
 8003644:	881b      	ldrh	r3, [r3, #0]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d003      	beq.n	8003652 <edit_multiple_registers+0x1ea>
		{
			return modbus_change_baud_rate();
 800364a:	f000 fa69 	bl	8003b20 <modbus_change_baud_rate>
 800364e:	0003      	movs	r3, r0
 8003650:	e003      	b.n	800365a <edit_multiple_registers+0x1f2>
		}
	}
	return status;
 8003652:	230f      	movs	r3, #15
 8003654:	18fb      	adds	r3, r7, r3
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	b25b      	sxtb	r3, r3
}
 800365a:	0018      	movs	r0, r3
 800365c:	46bd      	mov	sp, r7
 800365e:	b006      	add	sp, #24
 8003660:	bdb0      	pop	{r4, r5, r7, pc}
 8003662:	46c0      	nop			@ (mov r8, r8)
 8003664:	200007a8 	.word	0x200007a8
 8003668:	20000014 	.word	0x20000014

0800366c <modbus_exception>:

int8_t modbus_exception(int8_t exception_code)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	0002      	movs	r2, r0
 8003674:	1dfb      	adds	r3, r7, #7
 8003676:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[0] = get_rx_buffer(0);
 8003678:	2000      	movs	r0, #0
 800367a:	f000 fadd 	bl	8003c38 <get_rx_buffer>
 800367e:	0003      	movs	r3, r0
 8003680:	001a      	movs	r2, r3
 8003682:	4b0d      	ldr	r3, [pc, #52]	@ (80036b8 <modbus_exception+0x4c>)
 8003684:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = get_rx_buffer(1) | 0x80;
 8003686:	2001      	movs	r0, #1
 8003688:	f000 fad6 	bl	8003c38 <get_rx_buffer>
 800368c:	0003      	movs	r3, r0
 800368e:	001a      	movs	r2, r3
 8003690:	2380      	movs	r3, #128	@ 0x80
 8003692:	425b      	negs	r3, r3
 8003694:	4313      	orrs	r3, r2
 8003696:	b2da      	uxtb	r2, r3
 8003698:	4b07      	ldr	r3, [pc, #28]	@ (80036b8 <modbus_exception+0x4c>)
 800369a:	705a      	strb	r2, [r3, #1]
	modbus_tx_buffer[2] = exception_code - 3; // Subtract 3 to match the modbus defined error code value
 800369c:	1dfb      	adds	r3, r7, #7
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	3b03      	subs	r3, #3
 80036a2:	b2da      	uxtb	r2, r3
 80036a4:	4b04      	ldr	r3, [pc, #16]	@ (80036b8 <modbus_exception+0x4c>)
 80036a6:	709a      	strb	r2, [r3, #2]

	return modbus_send(3);
 80036a8:	2003      	movs	r0, #3
 80036aa:	f000 f8ed 	bl	8003888 <modbus_send>
 80036ae:	0003      	movs	r3, r0
}
 80036b0:	0018      	movs	r0, r3
 80036b2:	46bd      	mov	sp, r7
 80036b4:	b002      	add	sp, #8
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	200007a8 	.word	0x200007a8

080036bc <handle_range>:

void handle_range(uint16_t holding_register)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	0002      	movs	r2, r0
 80036c4:	1dbb      	adds	r3, r7, #6
 80036c6:	801a      	strh	r2, [r3, #0]
	switch(holding_register)
 80036c8:	1dbb      	adds	r3, r7, #6
 80036ca:	881b      	ldrh	r3, [r3, #0]
 80036cc:	2b42      	cmp	r3, #66	@ 0x42
 80036ce:	d900      	bls.n	80036d2 <handle_range+0x16>
 80036d0:	e0cc      	b.n	800386c <handle_range+0x1b0>
 80036d2:	009a      	lsls	r2, r3, #2
 80036d4:	4b67      	ldr	r3, [pc, #412]	@ (8003874 <handle_range+0x1b8>)
 80036d6:	18d3      	adds	r3, r2, r3
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	469f      	mov	pc, r3
	{
		case MODBUS_ID:
		{
			if(holding_register_database[holding_register] > 0xFF)
 80036dc:	1dbb      	adds	r3, r7, #6
 80036de:	881a      	ldrh	r2, [r3, #0]
 80036e0:	4b65      	ldr	r3, [pc, #404]	@ (8003878 <handle_range+0x1bc>)
 80036e2:	0052      	lsls	r2, r2, #1
 80036e4:	5ad3      	ldrh	r3, [r2, r3]
 80036e6:	2bff      	cmp	r3, #255	@ 0xff
 80036e8:	d800      	bhi.n	80036ec <handle_range+0x30>
 80036ea:	e0ae      	b.n	800384a <handle_range+0x18e>
			{
				holding_register_database[holding_register] = 0xFF;
 80036ec:	1dbb      	adds	r3, r7, #6
 80036ee:	881a      	ldrh	r2, [r3, #0]
 80036f0:	4b61      	ldr	r3, [pc, #388]	@ (8003878 <handle_range+0x1bc>)
 80036f2:	0052      	lsls	r2, r2, #1
 80036f4:	21ff      	movs	r1, #255	@ 0xff
 80036f6:	52d1      	strh	r1, [r2, r3]
			}
			break;
 80036f8:	e0a7      	b.n	800384a <handle_range+0x18e>
		}
		case MB_BAUD_RATE:
		{
			if(holding_register_database[holding_register] < BAUD_RATE_4800)
 80036fa:	1dbb      	adds	r3, r7, #6
 80036fc:	881a      	ldrh	r2, [r3, #0]
 80036fe:	4b5e      	ldr	r3, [pc, #376]	@ (8003878 <handle_range+0x1bc>)
 8003700:	0052      	lsls	r2, r2, #1
 8003702:	5ad3      	ldrh	r3, [r2, r3]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d806      	bhi.n	8003716 <handle_range+0x5a>
			{
				holding_register_database[holding_register] = BAUD_RATE_4800;
 8003708:	1dbb      	adds	r3, r7, #6
 800370a:	881a      	ldrh	r2, [r3, #0]
 800370c:	4b5a      	ldr	r3, [pc, #360]	@ (8003878 <handle_range+0x1bc>)
 800370e:	0052      	lsls	r2, r2, #1
 8003710:	2102      	movs	r1, #2
 8003712:	52d1      	strh	r1, [r2, r3]
			}
			else if(holding_register_database[holding_register] > BAUD_RATE_256000)
			{
				holding_register_database[holding_register] = BAUD_RATE_256000;
			}
			break;
 8003714:	e09b      	b.n	800384e <handle_range+0x192>
			else if(holding_register_database[holding_register] > BAUD_RATE_256000)
 8003716:	1dbb      	adds	r3, r7, #6
 8003718:	881a      	ldrh	r2, [r3, #0]
 800371a:	4b57      	ldr	r3, [pc, #348]	@ (8003878 <handle_range+0x1bc>)
 800371c:	0052      	lsls	r2, r2, #1
 800371e:	5ad3      	ldrh	r3, [r2, r3]
 8003720:	2b09      	cmp	r3, #9
 8003722:	d800      	bhi.n	8003726 <handle_range+0x6a>
 8003724:	e093      	b.n	800384e <handle_range+0x192>
				holding_register_database[holding_register] = BAUD_RATE_256000;
 8003726:	1dbb      	adds	r3, r7, #6
 8003728:	881a      	ldrh	r2, [r3, #0]
 800372a:	4b53      	ldr	r3, [pc, #332]	@ (8003878 <handle_range+0x1bc>)
 800372c:	0052      	lsls	r2, r2, #1
 800372e:	2109      	movs	r1, #9
 8003730:	52d1      	strh	r1, [r2, r3]
			break;
 8003732:	e08c      	b.n	800384e <handle_range+0x192>
		}
		case MB_TRANSMIT_TIMEOUT:
		{
			if(holding_register_database[holding_register] < 5)
 8003734:	1dbb      	adds	r3, r7, #6
 8003736:	881a      	ldrh	r2, [r3, #0]
 8003738:	4b4f      	ldr	r3, [pc, #316]	@ (8003878 <handle_range+0x1bc>)
 800373a:	0052      	lsls	r2, r2, #1
 800373c:	5ad3      	ldrh	r3, [r2, r3]
 800373e:	2b04      	cmp	r3, #4
 8003740:	d806      	bhi.n	8003750 <handle_range+0x94>
			{
				holding_register_database[holding_register] = 5;
 8003742:	1dbb      	adds	r3, r7, #6
 8003744:	881a      	ldrh	r2, [r3, #0]
 8003746:	4b4c      	ldr	r3, [pc, #304]	@ (8003878 <handle_range+0x1bc>)
 8003748:	0052      	lsls	r2, r2, #1
 800374a:	2105      	movs	r1, #5
 800374c:	52d1      	strh	r1, [r2, r3]
			}
			else if(holding_register_database[holding_register] > 1000)
			{
				holding_register_database[holding_register] = 1000;
			}
			break;
 800374e:	e080      	b.n	8003852 <handle_range+0x196>
			else if(holding_register_database[holding_register] > 1000)
 8003750:	1dbb      	adds	r3, r7, #6
 8003752:	881a      	ldrh	r2, [r3, #0]
 8003754:	4b48      	ldr	r3, [pc, #288]	@ (8003878 <handle_range+0x1bc>)
 8003756:	0052      	lsls	r2, r2, #1
 8003758:	5ad2      	ldrh	r2, [r2, r3]
 800375a:	23fa      	movs	r3, #250	@ 0xfa
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	429a      	cmp	r2, r3
 8003760:	d800      	bhi.n	8003764 <handle_range+0xa8>
 8003762:	e076      	b.n	8003852 <handle_range+0x196>
				holding_register_database[holding_register] = 1000;
 8003764:	1dbb      	adds	r3, r7, #6
 8003766:	881a      	ldrh	r2, [r3, #0]
 8003768:	4b43      	ldr	r3, [pc, #268]	@ (8003878 <handle_range+0x1bc>)
 800376a:	0052      	lsls	r2, r2, #1
 800376c:	21fa      	movs	r1, #250	@ 0xfa
 800376e:	0089      	lsls	r1, r1, #2
 8003770:	52d1      	strh	r1, [r2, r3]
			break;
 8003772:	e06e      	b.n	8003852 <handle_range+0x196>
		}
		case MB_TRANSMIT_RETRIES:
		{
			if(holding_register_database[holding_register] > 5)
 8003774:	1dbb      	adds	r3, r7, #6
 8003776:	881a      	ldrh	r2, [r3, #0]
 8003778:	4b3f      	ldr	r3, [pc, #252]	@ (8003878 <handle_range+0x1bc>)
 800377a:	0052      	lsls	r2, r2, #1
 800377c:	5ad3      	ldrh	r3, [r2, r3]
 800377e:	2b05      	cmp	r3, #5
 8003780:	d800      	bhi.n	8003784 <handle_range+0xc8>
 8003782:	e068      	b.n	8003856 <handle_range+0x19a>
			{
				holding_register_database[holding_register] = 5;
 8003784:	1dbb      	adds	r3, r7, #6
 8003786:	881a      	ldrh	r2, [r3, #0]
 8003788:	4b3b      	ldr	r3, [pc, #236]	@ (8003878 <handle_range+0x1bc>)
 800378a:	0052      	lsls	r2, r2, #1
 800378c:	2105      	movs	r1, #5
 800378e:	52d1      	strh	r1, [r2, r3]
			}
			break;
 8003790:	e061      	b.n	8003856 <handle_range+0x19a>
		}
		case MB_ERRORS:
		{
			if(holding_register_database[holding_register] > 0x3FF)
 8003792:	1dbb      	adds	r3, r7, #6
 8003794:	881a      	ldrh	r2, [r3, #0]
 8003796:	4b38      	ldr	r3, [pc, #224]	@ (8003878 <handle_range+0x1bc>)
 8003798:	0052      	lsls	r2, r2, #1
 800379a:	5ad2      	ldrh	r2, [r2, r3]
 800379c:	2380      	movs	r3, #128	@ 0x80
 800379e:	00db      	lsls	r3, r3, #3
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d35a      	bcc.n	800385a <handle_range+0x19e>
			{
				holding_register_database[holding_register] = 0x3FF;
 80037a4:	1dbb      	adds	r3, r7, #6
 80037a6:	881a      	ldrh	r2, [r3, #0]
 80037a8:	4b33      	ldr	r3, [pc, #204]	@ (8003878 <handle_range+0x1bc>)
 80037aa:	0052      	lsls	r2, r2, #1
 80037ac:	4933      	ldr	r1, [pc, #204]	@ (800387c <handle_range+0x1c0>)
 80037ae:	52d1      	strh	r1, [r2, r3]
			}
			break;
 80037b0:	e053      	b.n	800385a <handle_range+0x19e>
		}
		case I2C_ERRORS:
		{
			if(holding_register_database[holding_register] > 0x7F)
 80037b2:	1dbb      	adds	r3, r7, #6
 80037b4:	881a      	ldrh	r2, [r3, #0]
 80037b6:	4b30      	ldr	r3, [pc, #192]	@ (8003878 <handle_range+0x1bc>)
 80037b8:	0052      	lsls	r2, r2, #1
 80037ba:	5ad3      	ldrh	r3, [r2, r3]
 80037bc:	2b7f      	cmp	r3, #127	@ 0x7f
 80037be:	d94e      	bls.n	800385e <handle_range+0x1a2>
			{
				holding_register_database[holding_register] = 0x7F;
 80037c0:	1dbb      	adds	r3, r7, #6
 80037c2:	881a      	ldrh	r2, [r3, #0]
 80037c4:	4b2c      	ldr	r3, [pc, #176]	@ (8003878 <handle_range+0x1bc>)
 80037c6:	0052      	lsls	r2, r2, #1
 80037c8:	217f      	movs	r1, #127	@ 0x7f
 80037ca:	52d1      	strh	r1, [r2, r3]
			}
			break;
 80037cc:	e047      	b.n	800385e <handle_range+0x1a2>
		}
		case I2C_SHUTDOWN ... AUTOPILOT:
		{
			if(holding_register_database[holding_register] > 1)
 80037ce:	1dbb      	adds	r3, r7, #6
 80037d0:	881a      	ldrh	r2, [r3, #0]
 80037d2:	4b29      	ldr	r3, [pc, #164]	@ (8003878 <handle_range+0x1bc>)
 80037d4:	0052      	lsls	r2, r2, #1
 80037d6:	5ad3      	ldrh	r3, [r2, r3]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d942      	bls.n	8003862 <handle_range+0x1a6>
			{
				holding_register_database[holding_register] = 1;
 80037dc:	1dbb      	adds	r3, r7, #6
 80037de:	881a      	ldrh	r2, [r3, #0]
 80037e0:	4b25      	ldr	r3, [pc, #148]	@ (8003878 <handle_range+0x1bc>)
 80037e2:	0052      	lsls	r2, r2, #1
 80037e4:	2101      	movs	r1, #1
 80037e6:	52d1      	strh	r1, [r2, r3]
			}
			break;
 80037e8:	e03b      	b.n	8003862 <handle_range+0x1a6>
		}
		case ENCODER_REFRESH:
		{
			if(holding_register_database[holding_register] < 1000)
 80037ea:	1dbb      	adds	r3, r7, #6
 80037ec:	881a      	ldrh	r2, [r3, #0]
 80037ee:	4b22      	ldr	r3, [pc, #136]	@ (8003878 <handle_range+0x1bc>)
 80037f0:	0052      	lsls	r2, r2, #1
 80037f2:	5ad2      	ldrh	r2, [r2, r3]
 80037f4:	23fa      	movs	r3, #250	@ 0xfa
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d207      	bcs.n	800380c <handle_range+0x150>
			{
				holding_register_database[holding_register] = 1000;
 80037fc:	1dbb      	adds	r3, r7, #6
 80037fe:	881a      	ldrh	r2, [r3, #0]
 8003800:	4b1d      	ldr	r3, [pc, #116]	@ (8003878 <handle_range+0x1bc>)
 8003802:	0052      	lsls	r2, r2, #1
 8003804:	21fa      	movs	r1, #250	@ 0xfa
 8003806:	0089      	lsls	r1, r1, #2
 8003808:	52d1      	strh	r1, [r2, r3]
			}
			else if(holding_register_database[holding_register] > 10000)
			{
				holding_register_database[holding_register] = 10000;
			}
			break;
 800380a:	e02c      	b.n	8003866 <handle_range+0x1aa>
			else if(holding_register_database[holding_register] > 10000)
 800380c:	1dbb      	adds	r3, r7, #6
 800380e:	881a      	ldrh	r2, [r3, #0]
 8003810:	4b19      	ldr	r3, [pc, #100]	@ (8003878 <handle_range+0x1bc>)
 8003812:	0052      	lsls	r2, r2, #1
 8003814:	5ad3      	ldrh	r3, [r2, r3]
 8003816:	4a1a      	ldr	r2, [pc, #104]	@ (8003880 <handle_range+0x1c4>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d924      	bls.n	8003866 <handle_range+0x1aa>
				holding_register_database[holding_register] = 10000;
 800381c:	1dbb      	adds	r3, r7, #6
 800381e:	881a      	ldrh	r2, [r3, #0]
 8003820:	4b15      	ldr	r3, [pc, #84]	@ (8003878 <handle_range+0x1bc>)
 8003822:	0052      	lsls	r2, r2, #1
 8003824:	4916      	ldr	r1, [pc, #88]	@ (8003880 <handle_range+0x1c4>)
 8003826:	52d1      	strh	r1, [r2, r3]
			break;
 8003828:	e01d      	b.n	8003866 <handle_range+0x1aa>
		}
		case ACTUATOR_A_TARGET ... ACTUATOR_C_TARGET:
		{
			if(holding_register_database[holding_register] > 0x0FFF)
 800382a:	1dbb      	adds	r3, r7, #6
 800382c:	881a      	ldrh	r2, [r3, #0]
 800382e:	4b12      	ldr	r3, [pc, #72]	@ (8003878 <handle_range+0x1bc>)
 8003830:	0052      	lsls	r2, r2, #1
 8003832:	5ad2      	ldrh	r2, [r2, r3]
 8003834:	2380      	movs	r3, #128	@ 0x80
 8003836:	015b      	lsls	r3, r3, #5
 8003838:	429a      	cmp	r2, r3
 800383a:	d316      	bcc.n	800386a <handle_range+0x1ae>
			{
				holding_register_database[holding_register] = 0x0FFF;
 800383c:	1dbb      	adds	r3, r7, #6
 800383e:	881a      	ldrh	r2, [r3, #0]
 8003840:	4b0d      	ldr	r3, [pc, #52]	@ (8003878 <handle_range+0x1bc>)
 8003842:	0052      	lsls	r2, r2, #1
 8003844:	490f      	ldr	r1, [pc, #60]	@ (8003884 <handle_range+0x1c8>)
 8003846:	52d1      	strh	r1, [r2, r3]
			}
			break;
 8003848:	e00f      	b.n	800386a <handle_range+0x1ae>
			break;
 800384a:	46c0      	nop			@ (mov r8, r8)
 800384c:	e00e      	b.n	800386c <handle_range+0x1b0>
			break;
 800384e:	46c0      	nop			@ (mov r8, r8)
 8003850:	e00c      	b.n	800386c <handle_range+0x1b0>
			break;
 8003852:	46c0      	nop			@ (mov r8, r8)
 8003854:	e00a      	b.n	800386c <handle_range+0x1b0>
			break;
 8003856:	46c0      	nop			@ (mov r8, r8)
 8003858:	e008      	b.n	800386c <handle_range+0x1b0>
			break;
 800385a:	46c0      	nop			@ (mov r8, r8)
 800385c:	e006      	b.n	800386c <handle_range+0x1b0>
			break;
 800385e:	46c0      	nop			@ (mov r8, r8)
 8003860:	e004      	b.n	800386c <handle_range+0x1b0>
			break;
 8003862:	46c0      	nop			@ (mov r8, r8)
 8003864:	e002      	b.n	800386c <handle_range+0x1b0>
			break;
 8003866:	46c0      	nop			@ (mov r8, r8)
 8003868:	e000      	b.n	800386c <handle_range+0x1b0>
			break;
 800386a:	46c0      	nop			@ (mov r8, r8)
		}
	}
}
 800386c:	46c0      	nop			@ (mov r8, r8)
 800386e:	46bd      	mov	sp, r7
 8003870:	b002      	add	sp, #8
 8003872:	bd80      	pop	{r7, pc}
 8003874:	0800c39c 	.word	0x0800c39c
 8003878:	20000014 	.word	0x20000014
 800387c:	000003ff 	.word	0x000003ff
 8003880:	00002710 	.word	0x00002710
 8003884:	00000fff 	.word	0x00000fff

08003888 <modbus_send>:
#endif // MB_SLAVE

// General Modbus Functions -------------------------------------------------------------------

int8_t modbus_send(uint8_t size)
{
 8003888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800388a:	b085      	sub	sp, #20
 800388c:	af00      	add	r7, sp, #0
 800388e:	0002      	movs	r2, r0
 8003890:	1dfb      	adds	r3, r7, #7
 8003892:	701a      	strb	r2, [r3, #0]
	int8_t status = HAL_OK;
 8003894:	250f      	movs	r5, #15
 8003896:	197b      	adds	r3, r7, r5
 8003898:	2200      	movs	r2, #0
 800389a:	701a      	strb	r2, [r3, #0]
	// Append CRC (low byte then high byte)
	uint16_t crc = crc_16(modbus_tx_buffer, size);
 800389c:	260c      	movs	r6, #12
 800389e:	19bc      	adds	r4, r7, r6
 80038a0:	1dfb      	adds	r3, r7, #7
 80038a2:	781a      	ldrb	r2, [r3, #0]
 80038a4:	4b1f      	ldr	r3, [pc, #124]	@ (8003924 <modbus_send+0x9c>)
 80038a6:	0011      	movs	r1, r2
 80038a8:	0018      	movs	r0, r3
 80038aa:	f000 f9f3 	bl	8003c94 <crc_16>
 80038ae:	0003      	movs	r3, r0
 80038b0:	8023      	strh	r3, [r4, #0]
	modbus_tx_buffer[size] = low_byte(crc);
 80038b2:	1dfb      	adds	r3, r7, #7
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	19ba      	adds	r2, r7, r6
 80038b8:	8812      	ldrh	r2, [r2, #0]
 80038ba:	b2d1      	uxtb	r1, r2
 80038bc:	4a19      	ldr	r2, [pc, #100]	@ (8003924 <modbus_send+0x9c>)
 80038be:	54d1      	strb	r1, [r2, r3]
	modbus_tx_buffer[size + 1] = high_byte(crc);
 80038c0:	19bb      	adds	r3, r7, r6
 80038c2:	881b      	ldrh	r3, [r3, #0]
 80038c4:	0a1b      	lsrs	r3, r3, #8
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	1dfb      	adds	r3, r7, #7
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	3301      	adds	r3, #1
 80038ce:	b2d1      	uxtb	r1, r2
 80038d0:	4a14      	ldr	r2, [pc, #80]	@ (8003924 <modbus_send+0x9c>)
 80038d2:	54d1      	strb	r1, [r2, r3]

	uart_tx_int = 0; // This will enable tx timeout monitoring
 80038d4:	4b14      	ldr	r3, [pc, #80]	@ (8003928 <modbus_send+0xa0>)
 80038d6:	2200      	movs	r2, #0
 80038d8:	701a      	strb	r2, [r3, #0]
	tx_time = HAL_GetTick();
 80038da:	f001 f91d 	bl	8004b18 <HAL_GetTick>
 80038de:	0002      	movs	r2, r0
 80038e0:	4b12      	ldr	r3, [pc, #72]	@ (800392c <modbus_send+0xa4>)
 80038e2:	601a      	str	r2, [r3, #0]
	status = HAL_UART_Transmit_DMA(&huart1, modbus_tx_buffer, size + 2);
 80038e4:	1dfb      	adds	r3, r7, #7
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	3302      	adds	r3, #2
 80038ec:	b29a      	uxth	r2, r3
 80038ee:	490d      	ldr	r1, [pc, #52]	@ (8003924 <modbus_send+0x9c>)
 80038f0:	4b0f      	ldr	r3, [pc, #60]	@ (8003930 <modbus_send+0xa8>)
 80038f2:	0018      	movs	r0, r3
 80038f4:	f006 fcfa 	bl	800a2ec <HAL_UART_Transmit_DMA>
 80038f8:	0003      	movs	r3, r0
 80038fa:	001a      	movs	r2, r3
 80038fc:	197b      	adds	r3, r7, r5
 80038fe:	701a      	strb	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(huart1.hdmatx, DMA_IT_HT);
 8003900:	4b0b      	ldr	r3, [pc, #44]	@ (8003930 <modbus_send+0xa8>)
 8003902:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	4b09      	ldr	r3, [pc, #36]	@ (8003930 <modbus_send+0xa8>)
 800390a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2104      	movs	r1, #4
 8003910:	438a      	bics	r2, r1
 8003912:	601a      	str	r2, [r3, #0]
	return status;
 8003914:	197b      	adds	r3, r7, r5
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	b25b      	sxtb	r3, r3
}
 800391a:	0018      	movs	r0, r3
 800391c:	46bd      	mov	sp, r7
 800391e:	b005      	add	sp, #20
 8003920:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003922:	46c0      	nop			@ (mov r8, r8)
 8003924:	200007a8 	.word	0x200007a8
 8003928:	200000b5 	.word	0x200000b5
 800392c:	200008a8 	.word	0x200008a8
 8003930:	2000050c 	.word	0x2000050c

08003934 <modbus_reset>:

int8_t modbus_reset()
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
	int8_t status = 0;
 800393a:	1dfb      	adds	r3, r7, #7
 800393c:	2200      	movs	r2, #0
 800393e:	701a      	strb	r2, [r3, #0]
	status = HAL_UART_Abort(&huart1);
 8003940:	4b30      	ldr	r3, [pc, #192]	@ (8003a04 <modbus_reset+0xd0>)
 8003942:	0018      	movs	r0, r3
 8003944:	f006 fd64 	bl	800a410 <HAL_UART_Abort>
 8003948:	0003      	movs	r3, r0
 800394a:	001a      	movs	r2, r3
 800394c:	1dfb      	adds	r3, r7, #7
 800394e:	701a      	strb	r2, [r3, #0]
	status |= HAL_UART_DeInit(&huart1);
 8003950:	4b2c      	ldr	r3, [pc, #176]	@ (8003a04 <modbus_reset+0xd0>)
 8003952:	0018      	movs	r0, r3
 8003954:	f006 fc8a 	bl	800a26c <HAL_UART_DeInit>
 8003958:	0003      	movs	r3, r0
 800395a:	b259      	sxtb	r1, r3
 800395c:	1dfb      	adds	r3, r7, #7
 800395e:	1dfa      	adds	r2, r7, #7
 8003960:	7812      	ldrb	r2, [r2, #0]
 8003962:	430a      	orrs	r2, r1
 8003964:	701a      	strb	r2, [r3, #0]
	__USART1_FORCE_RESET();
 8003966:	4b28      	ldr	r3, [pc, #160]	@ (8003a08 <modbus_reset+0xd4>)
 8003968:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800396a:	4b27      	ldr	r3, [pc, #156]	@ (8003a08 <modbus_reset+0xd4>)
 800396c:	2180      	movs	r1, #128	@ 0x80
 800396e:	01c9      	lsls	r1, r1, #7
 8003970:	430a      	orrs	r2, r1
 8003972:	631a      	str	r2, [r3, #48]	@ 0x30
	HAL_Delay(100);
 8003974:	2064      	movs	r0, #100	@ 0x64
 8003976:	f001 f8d9 	bl	8004b2c <HAL_Delay>
	__USART1_RELEASE_RESET();
 800397a:	4b23      	ldr	r3, [pc, #140]	@ (8003a08 <modbus_reset+0xd4>)
 800397c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800397e:	4b22      	ldr	r3, [pc, #136]	@ (8003a08 <modbus_reset+0xd4>)
 8003980:	4922      	ldr	r1, [pc, #136]	@ (8003a0c <modbus_reset+0xd8>)
 8003982:	400a      	ands	r2, r1
 8003984:	631a      	str	r2, [r3, #48]	@ 0x30
	status = HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0);
 8003986:	481f      	ldr	r0, [pc, #124]	@ (8003a04 <modbus_reset+0xd0>)
 8003988:	2300      	movs	r3, #0
 800398a:	2200      	movs	r2, #0
 800398c:	2100      	movs	r1, #0
 800398e:	f007 ffdd 	bl	800b94c <HAL_RS485Ex_Init>
 8003992:	0003      	movs	r3, r0
 8003994:	001a      	movs	r2, r3
 8003996:	1dfb      	adds	r3, r7, #7
 8003998:	701a      	strb	r2, [r3, #0]
	status |= HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8);
 800399a:	4b1a      	ldr	r3, [pc, #104]	@ (8003a04 <modbus_reset+0xd0>)
 800399c:	2100      	movs	r1, #0
 800399e:	0018      	movs	r0, r3
 80039a0:	f008 f898 	bl	800bad4 <HAL_UARTEx_SetTxFifoThreshold>
 80039a4:	0003      	movs	r3, r0
 80039a6:	b259      	sxtb	r1, r3
 80039a8:	1dfb      	adds	r3, r7, #7
 80039aa:	1dfa      	adds	r2, r7, #7
 80039ac:	7812      	ldrb	r2, [r2, #0]
 80039ae:	430a      	orrs	r2, r1
 80039b0:	701a      	strb	r2, [r3, #0]
	status |= HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8);
 80039b2:	4b14      	ldr	r3, [pc, #80]	@ (8003a04 <modbus_reset+0xd0>)
 80039b4:	2100      	movs	r1, #0
 80039b6:	0018      	movs	r0, r3
 80039b8:	f008 f8cc 	bl	800bb54 <HAL_UARTEx_SetRxFifoThreshold>
 80039bc:	0003      	movs	r3, r0
 80039be:	b259      	sxtb	r1, r3
 80039c0:	1dfb      	adds	r3, r7, #7
 80039c2:	1dfa      	adds	r2, r7, #7
 80039c4:	7812      	ldrb	r2, [r2, #0]
 80039c6:	430a      	orrs	r2, r1
 80039c8:	701a      	strb	r2, [r3, #0]
	status |= HAL_UARTEx_DisableFifoMode(&huart1);
 80039ca:	4b0e      	ldr	r3, [pc, #56]	@ (8003a04 <modbus_reset+0xd0>)
 80039cc:	0018      	movs	r0, r3
 80039ce:	f008 f847 	bl	800ba60 <HAL_UARTEx_DisableFifoMode>
 80039d2:	0003      	movs	r3, r0
 80039d4:	b259      	sxtb	r1, r3
 80039d6:	1dfb      	adds	r3, r7, #7
 80039d8:	1dfa      	adds	r2, r7, #7
 80039da:	7812      	ldrb	r2, [r2, #0]
 80039dc:	430a      	orrs	r2, r1
 80039de:	701a      	strb	r2, [r3, #0]
	if(status != HAL_OK)
 80039e0:	1dfb      	adds	r3, r7, #7
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	b25b      	sxtb	r3, r3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d004      	beq.n	80039f4 <modbus_reset+0xc0>
	{
		return handle_modbus_error(MB_FATAL_ERROR);
 80039ea:	2015      	movs	r0, #21
 80039ec:	f000 f934 	bl	8003c58 <handle_modbus_error>
 80039f0:	0003      	movs	r3, r0
 80039f2:	e002      	b.n	80039fa <modbus_reset+0xc6>
	}
	return status;
 80039f4:	1dfb      	adds	r3, r7, #7
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	b25b      	sxtb	r3, r3
}
 80039fa:	0018      	movs	r0, r3
 80039fc:	46bd      	mov	sp, r7
 80039fe:	b002      	add	sp, #8
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	46c0      	nop			@ (mov r8, r8)
 8003a04:	2000050c 	.word	0x2000050c
 8003a08:	40021000 	.word	0x40021000
 8003a0c:	ffffbfff 	.word	0xffffbfff

08003a10 <modbus_set_rx>:

int8_t modbus_set_rx()
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
	int8_t status = HAL_UARTEx_ReceiveToIdle_DMA(&huart1, modbus_rx_buffer, 6);
 8003a16:	490e      	ldr	r1, [pc, #56]	@ (8003a50 <modbus_set_rx+0x40>)
 8003a18:	4b0e      	ldr	r3, [pc, #56]	@ (8003a54 <modbus_set_rx+0x44>)
 8003a1a:	2206      	movs	r2, #6
 8003a1c:	0018      	movs	r0, r3
 8003a1e:	f008 f8db 	bl	800bbd8 <HAL_UARTEx_ReceiveToIdle_DMA>
 8003a22:	0003      	movs	r3, r0
 8003a24:	001a      	movs	r2, r3
 8003a26:	1dfb      	adds	r3, r7, #7
 8003a28:	701a      	strb	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(huart1.hdmarx, DMA_IT_HT);
 8003a2a:	4b0a      	ldr	r3, [pc, #40]	@ (8003a54 <modbus_set_rx+0x44>)
 8003a2c:	2280      	movs	r2, #128	@ 0x80
 8003a2e:	589b      	ldr	r3, [r3, r2]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	4b07      	ldr	r3, [pc, #28]	@ (8003a54 <modbus_set_rx+0x44>)
 8003a36:	2180      	movs	r1, #128	@ 0x80
 8003a38:	585b      	ldr	r3, [r3, r1]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2104      	movs	r1, #4
 8003a3e:	438a      	bics	r2, r1
 8003a40:	601a      	str	r2, [r3, #0]

	return status;
 8003a42:	1dfb      	adds	r3, r7, #7
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	b25b      	sxtb	r3, r3
}
 8003a48:	0018      	movs	r0, r3
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	b002      	add	sp, #8
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	200006a8 	.word	0x200006a8
 8003a54:	2000050c 	.word	0x2000050c

08003a58 <monitor_modbus>:

int8_t monitor_modbus()
{
 8003a58:	b590      	push	{r4, r7, lr}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
	int8_t status = MB_SUCCESS;
 8003a5e:	1dfb      	adds	r3, r7, #7
 8003a60:	2200      	movs	r2, #0
 8003a62:	701a      	strb	r2, [r3, #0]

	// Chunk miss handling
	status = handle_chunk_miss();
 8003a64:	1dfc      	adds	r4, r7, #7
 8003a66:	f000 f95b 	bl	8003d20 <handle_chunk_miss>
 8003a6a:	0003      	movs	r3, r0
 8003a6c:	7023      	strb	r3, [r4, #0]
	if(status != MB_SUCCESS)
 8003a6e:	1dfb      	adds	r3, r7, #7
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	b25b      	sxtb	r3, r3
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d012      	beq.n	8003a9e <monitor_modbus+0x46>
	{
		status = modbus_reset();
 8003a78:	1dfc      	adds	r4, r7, #7
 8003a7a:	f7ff ff5b 	bl	8003934 <modbus_reset>
 8003a7e:	0003      	movs	r3, r0
 8003a80:	7023      	strb	r3, [r4, #0]
		if(status != MB_SUCCESS)
 8003a82:	1dfb      	adds	r3, r7, #7
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	b25b      	sxtb	r3, r3
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d003      	beq.n	8003a94 <monitor_modbus+0x3c>
		{
			return status;
 8003a8c:	1dfb      	adds	r3, r7, #7
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	b25b      	sxtb	r3, r3
 8003a92:	e039      	b.n	8003b08 <monitor_modbus+0xb0>
		}
		return handle_modbus_error(MB_UART_ERROR);
 8003a94:	2014      	movs	r0, #20
 8003a96:	f000 f8df 	bl	8003c58 <handle_modbus_error>
 8003a9a:	0003      	movs	r3, r0
 8003a9c:	e034      	b.n	8003b08 <monitor_modbus+0xb0>
	}

	// Uart error handling
	if(uart_err_int)
 8003a9e:	4b1c      	ldr	r3, [pc, #112]	@ (8003b10 <monitor_modbus+0xb8>)
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d015      	beq.n	8003ad4 <monitor_modbus+0x7c>
	{
		uart_err_int = 0;
 8003aa8:	4b19      	ldr	r3, [pc, #100]	@ (8003b10 <monitor_modbus+0xb8>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	701a      	strb	r2, [r3, #0]
		status = modbus_reset();
 8003aae:	1dfc      	adds	r4, r7, #7
 8003ab0:	f7ff ff40 	bl	8003934 <modbus_reset>
 8003ab4:	0003      	movs	r3, r0
 8003ab6:	7023      	strb	r3, [r4, #0]
		if(status != MB_SUCCESS)
 8003ab8:	1dfb      	adds	r3, r7, #7
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	b25b      	sxtb	r3, r3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d003      	beq.n	8003aca <monitor_modbus+0x72>
		{
			return status;
 8003ac2:	1dfb      	adds	r3, r7, #7
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	b25b      	sxtb	r3, r3
 8003ac8:	e01e      	b.n	8003b08 <monitor_modbus+0xb0>
		}
		return handle_modbus_error(MB_UART_ERROR);
 8003aca:	2014      	movs	r0, #20
 8003acc:	f000 f8c4 	bl	8003c58 <handle_modbus_error>
 8003ad0:	0003      	movs	r3, r0
 8003ad2:	e019      	b.n	8003b08 <monitor_modbus+0xb0>
	}

	// TX timeout handling
	if(!uart_tx_int)
 8003ad4:	4b0f      	ldr	r3, [pc, #60]	@ (8003b14 <monitor_modbus+0xbc>)
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d111      	bne.n	8003b02 <monitor_modbus+0xaa>
	{
		if(HAL_GetTick() - tx_time >= holding_register_database[MB_TRANSMIT_TIMEOUT])
 8003ade:	f001 f81b 	bl	8004b18 <HAL_GetTick>
 8003ae2:	0002      	movs	r2, r0
 8003ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8003b18 <monitor_modbus+0xc0>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	4a0c      	ldr	r2, [pc, #48]	@ (8003b1c <monitor_modbus+0xc4>)
 8003aec:	8892      	ldrh	r2, [r2, #4]
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d304      	bcc.n	8003afc <monitor_modbus+0xa4>
		{
			return handle_modbus_error(MB_TX_TIMEOUT);
 8003af2:	2012      	movs	r0, #18
 8003af4:	f000 f8b0 	bl	8003c58 <handle_modbus_error>
 8003af8:	0003      	movs	r3, r0
 8003afa:	e005      	b.n	8003b08 <monitor_modbus+0xb0>
		}
		status = HAL_BUSY;
 8003afc:	1dfb      	adds	r3, r7, #7
 8003afe:	2202      	movs	r2, #2
 8003b00:	701a      	strb	r2, [r3, #0]
			}
			status = HAL_BUSY;
		}
	}
#endif
	return status;
 8003b02:	1dfb      	adds	r3, r7, #7
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	b25b      	sxtb	r3, r3
}
 8003b08:	0018      	movs	r0, r3
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	b003      	add	sp, #12
 8003b0e:	bd90      	pop	{r4, r7, pc}
 8003b10:	200008b1 	.word	0x200008b1
 8003b14:	200000b5 	.word	0x200000b5
 8003b18:	200008a8 	.word	0x200008a8
 8003b1c:	20000014 	.word	0x20000014

08003b20 <modbus_change_baud_rate>:

	return status;
}

int8_t modbus_change_baud_rate()
{
 8003b20:	b590      	push	{r4, r7, lr}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
	int8_t status = 0;
 8003b26:	1dfb      	adds	r3, r7, #7
 8003b28:	2200      	movs	r2, #0
 8003b2a:	701a      	strb	r2, [r3, #0]

	switch(holding_register_database[MB_BAUD_RATE])
 8003b2c:	4b3f      	ldr	r3, [pc, #252]	@ (8003c2c <modbus_change_baud_rate+0x10c>)
 8003b2e:	885b      	ldrh	r3, [r3, #2]
 8003b30:	2b09      	cmp	r3, #9
 8003b32:	d831      	bhi.n	8003b98 <modbus_change_baud_rate+0x78>
 8003b34:	009a      	lsls	r2, r3, #2
 8003b36:	4b3e      	ldr	r3, [pc, #248]	@ (8003c30 <modbus_change_baud_rate+0x110>)
 8003b38:	18d3      	adds	r3, r2, r3
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	469f      	mov	pc, r3
	{
		case BAUD_RATE_2400:
		{
			huart1.Init.BaudRate = 2400;
 8003b3e:	4b3d      	ldr	r3, [pc, #244]	@ (8003c34 <modbus_change_baud_rate+0x114>)
 8003b40:	2296      	movs	r2, #150	@ 0x96
 8003b42:	0112      	lsls	r2, r2, #4
 8003b44:	605a      	str	r2, [r3, #4]
			break;
 8003b46:	e04e      	b.n	8003be6 <modbus_change_baud_rate+0xc6>
		}
		case BAUD_RATE_4800:
		{
			huart1.Init.BaudRate = 4800;
 8003b48:	4b3a      	ldr	r3, [pc, #232]	@ (8003c34 <modbus_change_baud_rate+0x114>)
 8003b4a:	2296      	movs	r2, #150	@ 0x96
 8003b4c:	0152      	lsls	r2, r2, #5
 8003b4e:	605a      	str	r2, [r3, #4]
			break;
 8003b50:	e049      	b.n	8003be6 <modbus_change_baud_rate+0xc6>
		}
		case BAUD_RATE_9600:
		{
			huart1.Init.BaudRate = 9600;
 8003b52:	4b38      	ldr	r3, [pc, #224]	@ (8003c34 <modbus_change_baud_rate+0x114>)
 8003b54:	2296      	movs	r2, #150	@ 0x96
 8003b56:	0192      	lsls	r2, r2, #6
 8003b58:	605a      	str	r2, [r3, #4]
			break;
 8003b5a:	e044      	b.n	8003be6 <modbus_change_baud_rate+0xc6>
		}
		case BAUD_RATE_19200:
		{
			huart1.Init.BaudRate = 19200;
 8003b5c:	4b35      	ldr	r3, [pc, #212]	@ (8003c34 <modbus_change_baud_rate+0x114>)
 8003b5e:	2296      	movs	r2, #150	@ 0x96
 8003b60:	01d2      	lsls	r2, r2, #7
 8003b62:	605a      	str	r2, [r3, #4]
			break;
 8003b64:	e03f      	b.n	8003be6 <modbus_change_baud_rate+0xc6>
		}
		case BAUD_RATE_38400:
		{
			huart1.Init.BaudRate = 38400;
 8003b66:	4b33      	ldr	r3, [pc, #204]	@ (8003c34 <modbus_change_baud_rate+0x114>)
 8003b68:	2296      	movs	r2, #150	@ 0x96
 8003b6a:	0212      	lsls	r2, r2, #8
 8003b6c:	605a      	str	r2, [r3, #4]
			break;
 8003b6e:	e03a      	b.n	8003be6 <modbus_change_baud_rate+0xc6>
		}
		case BAUD_RATE_57600:
		{
			huart1.Init.BaudRate = 57600;
 8003b70:	4b30      	ldr	r3, [pc, #192]	@ (8003c34 <modbus_change_baud_rate+0x114>)
 8003b72:	22e1      	movs	r2, #225	@ 0xe1
 8003b74:	0212      	lsls	r2, r2, #8
 8003b76:	605a      	str	r2, [r3, #4]
			break;
 8003b78:	e035      	b.n	8003be6 <modbus_change_baud_rate+0xc6>
		}
		case BAUD_RATE_115200:
		{
			huart1.Init.BaudRate = 115200;
 8003b7a:	4b2e      	ldr	r3, [pc, #184]	@ (8003c34 <modbus_change_baud_rate+0x114>)
 8003b7c:	22e1      	movs	r2, #225	@ 0xe1
 8003b7e:	0252      	lsls	r2, r2, #9
 8003b80:	605a      	str	r2, [r3, #4]
			break;
 8003b82:	e030      	b.n	8003be6 <modbus_change_baud_rate+0xc6>
		}
		case BAUD_RATE_128000:
		{
			huart1.Init.BaudRate = 128000;
 8003b84:	4b2b      	ldr	r3, [pc, #172]	@ (8003c34 <modbus_change_baud_rate+0x114>)
 8003b86:	22fa      	movs	r2, #250	@ 0xfa
 8003b88:	0252      	lsls	r2, r2, #9
 8003b8a:	605a      	str	r2, [r3, #4]
			break;
 8003b8c:	e02b      	b.n	8003be6 <modbus_change_baud_rate+0xc6>
		}
		case BAUD_RATE_256000:
		{
			huart1.Init.BaudRate = 256000;
 8003b8e:	4b29      	ldr	r3, [pc, #164]	@ (8003c34 <modbus_change_baud_rate+0x114>)
 8003b90:	22fa      	movs	r2, #250	@ 0xfa
 8003b92:	0292      	lsls	r2, r2, #10
 8003b94:	605a      	str	r2, [r3, #4]
			break;
 8003b96:	e026      	b.n	8003be6 <modbus_change_baud_rate+0xc6>
		}
		default:
		{
			holding_register_database[MB_BAUD_RATE] = BAUD_RATE_9600;
 8003b98:	4b24      	ldr	r3, [pc, #144]	@ (8003c2c <modbus_change_baud_rate+0x10c>)
 8003b9a:	2203      	movs	r2, #3
 8003b9c:	805a      	strh	r2, [r3, #2]
			huart1.Init.BaudRate = 9600;
 8003b9e:	4b25      	ldr	r3, [pc, #148]	@ (8003c34 <modbus_change_baud_rate+0x114>)
 8003ba0:	2296      	movs	r2, #150	@ 0x96
 8003ba2:	0192      	lsls	r2, r2, #6
 8003ba4:	605a      	str	r2, [r3, #4]
			status = UART_SetConfig(&huart1);
 8003ba6:	4b23      	ldr	r3, [pc, #140]	@ (8003c34 <modbus_change_baud_rate+0x114>)
 8003ba8:	0018      	movs	r0, r3
 8003baa:	f007 f89b 	bl	800ace4 <UART_SetConfig>
 8003bae:	0003      	movs	r3, r0
 8003bb0:	001a      	movs	r2, r3
 8003bb2:	1dfb      	adds	r3, r7, #7
 8003bb4:	701a      	strb	r2, [r3, #0]
			if(status == HAL_OK)
 8003bb6:	1dfb      	adds	r3, r7, #7
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	b25b      	sxtb	r3, r3
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d10d      	bne.n	8003bdc <modbus_change_baud_rate+0xbc>
			{
				status = modbus_reset();
 8003bc0:	1dfc      	adds	r4, r7, #7
 8003bc2:	f7ff feb7 	bl	8003934 <modbus_reset>
 8003bc6:	0003      	movs	r3, r0
 8003bc8:	7023      	strb	r3, [r4, #0]
				if(status != HAL_OK)
 8003bca:	1dfb      	adds	r3, r7, #7
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	b25b      	sxtb	r3, r3
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d003      	beq.n	8003bdc <modbus_change_baud_rate+0xbc>
				{
					return status;
 8003bd4:	1dfb      	adds	r3, r7, #7
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	b25b      	sxtb	r3, r3
 8003bda:	e022      	b.n	8003c22 <modbus_change_baud_rate+0x102>
				}
			}
			return handle_modbus_error(RANGE_ERROR);
 8003bdc:	200e      	movs	r0, #14
 8003bde:	f000 f83b 	bl	8003c58 <handle_modbus_error>
 8003be2:	0003      	movs	r3, r0
 8003be4:	e01d      	b.n	8003c22 <modbus_change_baud_rate+0x102>
		}
	}
	status = UART_SetConfig(&huart1);
 8003be6:	4b13      	ldr	r3, [pc, #76]	@ (8003c34 <modbus_change_baud_rate+0x114>)
 8003be8:	0018      	movs	r0, r3
 8003bea:	f007 f87b 	bl	800ace4 <UART_SetConfig>
 8003bee:	0003      	movs	r3, r0
 8003bf0:	001a      	movs	r2, r3
 8003bf2:	1dfb      	adds	r3, r7, #7
 8003bf4:	701a      	strb	r2, [r3, #0]
	if(status == HAL_OK)
 8003bf6:	1dfb      	adds	r3, r7, #7
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	b25b      	sxtb	r3, r3
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d10d      	bne.n	8003c1c <modbus_change_baud_rate+0xfc>
	{
		// Log error, reset UART
		status = modbus_reset();
 8003c00:	1dfc      	adds	r4, r7, #7
 8003c02:	f7ff fe97 	bl	8003934 <modbus_reset>
 8003c06:	0003      	movs	r3, r0
 8003c08:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK)
 8003c0a:	1dfb      	adds	r3, r7, #7
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	b25b      	sxtb	r3, r3
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d003      	beq.n	8003c1c <modbus_change_baud_rate+0xfc>
		{
			return status;
 8003c14:	1dfb      	adds	r3, r7, #7
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	b25b      	sxtb	r3, r3
 8003c1a:	e002      	b.n	8003c22 <modbus_change_baud_rate+0x102>
		}
	}

	return modbus_set_rx();
 8003c1c:	f7ff fef8 	bl	8003a10 <modbus_set_rx>
 8003c20:	0003      	movs	r3, r0
}
 8003c22:	0018      	movs	r0, r3
 8003c24:	46bd      	mov	sp, r7
 8003c26:	b003      	add	sp, #12
 8003c28:	bd90      	pop	{r4, r7, pc}
 8003c2a:	46c0      	nop			@ (mov r8, r8)
 8003c2c:	20000014 	.word	0x20000014
 8003c30:	0800c4a8 	.word	0x0800c4a8
 8003c34:	2000050c 	.word	0x2000050c

08003c38 <get_rx_buffer>:
}


// Low Level Functions -------------------------------------------------------------------------
uint8_t get_rx_buffer(uint8_t index)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	0002      	movs	r2, r0
 8003c40:	1dfb      	adds	r3, r7, #7
 8003c42:	701a      	strb	r2, [r3, #0]
	if (index < MODBUS_RX_BUFFER_SIZE)
	{
		return modbus_rx_buffer[index];
 8003c44:	1dfb      	adds	r3, r7, #7
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	4a02      	ldr	r2, [pc, #8]	@ (8003c54 <get_rx_buffer+0x1c>)
 8003c4a:	5cd3      	ldrb	r3, [r2, r3]
	}
	return 0xFF;
}
 8003c4c:	0018      	movs	r0, r3
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	b002      	add	sp, #8
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	200006a8 	.word	0x200006a8

08003c58 <handle_modbus_error>:

int8_t handle_modbus_error(int8_t error_code)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	0002      	movs	r2, r0
 8003c60:	1dfb      	adds	r3, r7, #7
 8003c62:	701a      	strb	r2, [r3, #0]
	holding_register_database[MB_ERRORS] |= 1U << (error_code - RANGE_ERROR);
 8003c64:	4b0a      	ldr	r3, [pc, #40]	@ (8003c90 <handle_modbus_error+0x38>)
 8003c66:	891a      	ldrh	r2, [r3, #8]
 8003c68:	1dfb      	adds	r3, r7, #7
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	b25b      	sxtb	r3, r3
 8003c6e:	3b0e      	subs	r3, #14
 8003c70:	2101      	movs	r1, #1
 8003c72:	4099      	lsls	r1, r3
 8003c74:	000b      	movs	r3, r1
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	b29a      	uxth	r2, r3
 8003c7c:	4b04      	ldr	r3, [pc, #16]	@ (8003c90 <handle_modbus_error+0x38>)
 8003c7e:	811a      	strh	r2, [r3, #8]
	return error_code;
 8003c80:	1dfb      	adds	r3, r7, #7
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	b25b      	sxtb	r3, r3
}
 8003c86:	0018      	movs	r0, r3
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	b002      	add	sp, #8
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	46c0      	nop			@ (mov r8, r8)
 8003c90:	20000014 	.word	0x20000014

08003c94 <crc_16>:

// Private Functions ---------------------------------------------------------------------------

uint16_t crc_16(uint8_t *data, uint8_t size)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	000a      	movs	r2, r1
 8003c9e:	1cfb      	adds	r3, r7, #3
 8003ca0:	701a      	strb	r2, [r3, #0]
	uint8_t crc_hi = 0xFF;
 8003ca2:	230f      	movs	r3, #15
 8003ca4:	18fb      	adds	r3, r7, r3
 8003ca6:	22ff      	movs	r2, #255	@ 0xff
 8003ca8:	701a      	strb	r2, [r3, #0]
	uint8_t crc_low = 0xFF;
 8003caa:	230e      	movs	r3, #14
 8003cac:	18fb      	adds	r3, r7, r3
 8003cae:	22ff      	movs	r2, #255	@ 0xff
 8003cb0:	701a      	strb	r2, [r3, #0]
	 unsigned int i; /* will index into CRC lookup */

	/* pass through message buffer */
	while (size--)
 8003cb2:	e019      	b.n	8003ce8 <crc_16+0x54>
	{
		i = crc_low ^ *data++; /* calculate the CRC  */
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	1c5a      	adds	r2, r3, #1
 8003cb8:	607a      	str	r2, [r7, #4]
 8003cba:	781a      	ldrb	r2, [r3, #0]
 8003cbc:	200e      	movs	r0, #14
 8003cbe:	183b      	adds	r3, r7, r0
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	4053      	eors	r3, r2
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	60bb      	str	r3, [r7, #8]
		crc_low = crc_hi ^ table_crc_hi[i];
 8003cc8:	4a13      	ldr	r2, [pc, #76]	@ (8003d18 <crc_16+0x84>)
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	18d3      	adds	r3, r2, r3
 8003cce:	7819      	ldrb	r1, [r3, #0]
 8003cd0:	183b      	adds	r3, r7, r0
 8003cd2:	200f      	movs	r0, #15
 8003cd4:	183a      	adds	r2, r7, r0
 8003cd6:	7812      	ldrb	r2, [r2, #0]
 8003cd8:	404a      	eors	r2, r1
 8003cda:	701a      	strb	r2, [r3, #0]
		crc_hi = table_crc_lo[i];
 8003cdc:	183b      	adds	r3, r7, r0
 8003cde:	490f      	ldr	r1, [pc, #60]	@ (8003d1c <crc_16+0x88>)
 8003ce0:	68ba      	ldr	r2, [r7, #8]
 8003ce2:	188a      	adds	r2, r1, r2
 8003ce4:	7812      	ldrb	r2, [r2, #0]
 8003ce6:	701a      	strb	r2, [r3, #0]
	while (size--)
 8003ce8:	1cfb      	adds	r3, r7, #3
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	1cfa      	adds	r2, r7, #3
 8003cee:	1e59      	subs	r1, r3, #1
 8003cf0:	7011      	strb	r1, [r2, #0]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1de      	bne.n	8003cb4 <crc_16+0x20>
	}

	return (crc_hi << 8 | crc_low);
 8003cf6:	230f      	movs	r3, #15
 8003cf8:	18fb      	adds	r3, r7, r3
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	021b      	lsls	r3, r3, #8
 8003cfe:	b21a      	sxth	r2, r3
 8003d00:	230e      	movs	r3, #14
 8003d02:	18fb      	adds	r3, r7, r3
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	b21b      	sxth	r3, r3
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	b21b      	sxth	r3, r3
 8003d0c:	b29b      	uxth	r3, r3
}
 8003d0e:	0018      	movs	r0, r3
 8003d10:	46bd      	mov	sp, r7
 8003d12:	b004      	add	sp, #16
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	46c0      	nop			@ (mov r8, r8)
 8003d18:	0800c19c 	.word	0x0800c19c
 8003d1c:	0800c29c 	.word	0x0800c29c

08003d20 <handle_chunk_miss>:

int8_t handle_chunk_miss()
{
 8003d20:	b590      	push	{r4, r7, lr}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
	if(modbus_header == 0)
 8003d26:	4b15      	ldr	r3, [pc, #84]	@ (8003d7c <handle_chunk_miss+0x5c>)
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d120      	bne.n	8003d72 <handle_chunk_miss+0x52>
	{
		if(HAL_GetTick() - chunk_time > 10)
 8003d30:	f000 fef2 	bl	8004b18 <HAL_GetTick>
 8003d34:	0002      	movs	r2, r0
 8003d36:	4b12      	ldr	r3, [pc, #72]	@ (8003d80 <handle_chunk_miss+0x60>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	2b0a      	cmp	r3, #10
 8003d3e:	d918      	bls.n	8003d72 <handle_chunk_miss+0x52>
		{
			modbus_header = 1;
 8003d40:	4b0e      	ldr	r3, [pc, #56]	@ (8003d7c <handle_chunk_miss+0x5c>)
 8003d42:	2201      	movs	r2, #1
 8003d44:	701a      	strb	r2, [r3, #0]
			int8_t status = HAL_UART_Abort(&huart1);
 8003d46:	4b0f      	ldr	r3, [pc, #60]	@ (8003d84 <handle_chunk_miss+0x64>)
 8003d48:	0018      	movs	r0, r3
 8003d4a:	f006 fb61 	bl	800a410 <HAL_UART_Abort>
 8003d4e:	0003      	movs	r3, r0
 8003d50:	001a      	movs	r2, r3
 8003d52:	1dfb      	adds	r3, r7, #7
 8003d54:	701a      	strb	r2, [r3, #0]
			if(status == HAL_OK)
 8003d56:	1dfb      	adds	r3, r7, #7
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	b25b      	sxtb	r3, r3
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d104      	bne.n	8003d6a <handle_chunk_miss+0x4a>
			{
				status = modbus_set_rx();
 8003d60:	1dfc      	adds	r4, r7, #7
 8003d62:	f7ff fe55 	bl	8003a10 <modbus_set_rx>
 8003d66:	0003      	movs	r3, r0
 8003d68:	7023      	strb	r3, [r4, #0]
			}
			return status;
 8003d6a:	1dfb      	adds	r3, r7, #7
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	b25b      	sxtb	r3, r3
 8003d70:	e000      	b.n	8003d74 <handle_chunk_miss+0x54>
		}
	}
	return MB_SUCCESS;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	0018      	movs	r0, r3
 8003d76:	46bd      	mov	sp, r7
 8003d78:	b003      	add	sp, #12
 8003d7a:	bd90      	pop	{r4, r7, pc}
 8003d7c:	200000b4 	.word	0x200000b4
 8003d80:	200008ac 	.word	0x200008ac
 8003d84:	2000050c 	.word	0x2000050c

08003d88 <LL_ADC_REG_SetDMATransfer>:
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	2203      	movs	r2, #3
 8003d98:	4393      	bics	r3, r2
 8003d9a:	001a      	movs	r2, r3
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	60da      	str	r2, [r3, #12]
}
 8003da4:	46c0      	nop			@ (mov r8, r8)
 8003da6:	46bd      	mov	sp, r7
 8003da8:	b002      	add	sp, #8
 8003daa:	bd80      	pop	{r7, pc}

08003dac <LL_ADC_REG_GetDMATransfer>:
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	2203      	movs	r2, #3
 8003dba:	4013      	ands	r3, r2
}
 8003dbc:	0018      	movs	r0, r3
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	b002      	add	sp, #8
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <LL_ADC_EnableInternalRegulator>:
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	4a05      	ldr	r2, [pc, #20]	@ (8003de8 <LL_ADC_EnableInternalRegulator+0x24>)
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	2280      	movs	r2, #128	@ 0x80
 8003dd6:	0552      	lsls	r2, r2, #21
 8003dd8:	431a      	orrs	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	609a      	str	r2, [r3, #8]
}
 8003dde:	46c0      	nop			@ (mov r8, r8)
 8003de0:	46bd      	mov	sp, r7
 8003de2:	b002      	add	sp, #8
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	46c0      	nop			@ (mov r8, r8)
 8003de8:	6fffffe8 	.word	0x6fffffe8

08003dec <LL_ADC_Enable>:
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	4a04      	ldr	r2, [pc, #16]	@ (8003e0c <LL_ADC_Enable+0x20>)
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	431a      	orrs	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	609a      	str	r2, [r3, #8]
}
 8003e04:	46c0      	nop			@ (mov r8, r8)
 8003e06:	46bd      	mov	sp, r7
 8003e08:	b002      	add	sp, #8
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	7fffffe8 	.word	0x7fffffe8

08003e10 <LL_ADC_IsEnabled>:
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	4013      	ands	r3, r2
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d101      	bne.n	8003e28 <LL_ADC_IsEnabled+0x18>
 8003e24:	2301      	movs	r3, #1
 8003e26:	e000      	b.n	8003e2a <LL_ADC_IsEnabled+0x1a>
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	0018      	movs	r0, r3
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	b002      	add	sp, #8
 8003e30:	bd80      	pop	{r7, pc}
	...

08003e34 <LL_ADC_StartCalibration>:
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	4a05      	ldr	r2, [pc, #20]	@ (8003e58 <LL_ADC_StartCalibration+0x24>)
 8003e42:	4013      	ands	r3, r2
 8003e44:	2280      	movs	r2, #128	@ 0x80
 8003e46:	0612      	lsls	r2, r2, #24
 8003e48:	431a      	orrs	r2, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	609a      	str	r2, [r3, #8]
}
 8003e4e:	46c0      	nop			@ (mov r8, r8)
 8003e50:	46bd      	mov	sp, r7
 8003e52:	b002      	add	sp, #8
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	46c0      	nop			@ (mov r8, r8)
 8003e58:	7fffffe8 	.word	0x7fffffe8

08003e5c <LL_ADC_IsCalibrationOnGoing>:
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	0fdb      	lsrs	r3, r3, #31
 8003e6a:	07da      	lsls	r2, r3, #31
 8003e6c:	2380      	movs	r3, #128	@ 0x80
 8003e6e:	061b      	lsls	r3, r3, #24
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d101      	bne.n	8003e78 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003e74:	2301      	movs	r3, #1
 8003e76:	e000      	b.n	8003e7a <LL_ADC_IsCalibrationOnGoing+0x1e>
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	0018      	movs	r0, r3
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	b002      	add	sp, #8
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <LL_ADC_IsActiveFlag_ADRDY>:
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b082      	sub	sp, #8
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	4013      	ands	r3, r2
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d101      	bne.n	8003e9a <LL_ADC_IsActiveFlag_ADRDY+0x18>
 8003e96:	2301      	movs	r3, #1
 8003e98:	e000      	b.n	8003e9c <LL_ADC_IsActiveFlag_ADRDY+0x1a>
 8003e9a:	2300      	movs	r3, #0
}
 8003e9c:	0018      	movs	r0, r3
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	b002      	add	sp, #8
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <LL_SYSTICK_IsActiveCounterFlag>:
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	af00      	add	r7, sp, #0
  return (((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk)) ? 1UL : 0UL);
 8003ea8:	4b07      	ldr	r3, [pc, #28]	@ (8003ec8 <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	2380      	movs	r3, #128	@ 0x80
 8003eae:	025b      	lsls	r3, r3, #9
 8003eb0:	401a      	ands	r2, r3
 8003eb2:	2380      	movs	r3, #128	@ 0x80
 8003eb4:	025b      	lsls	r3, r3, #9
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d101      	bne.n	8003ebe <LL_SYSTICK_IsActiveCounterFlag+0x1a>
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e000      	b.n	8003ec0 <LL_SYSTICK_IsActiveCounterFlag+0x1c>
 8003ebe:	2300      	movs	r3, #0
}
 8003ec0:	0018      	movs	r0, r3
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	46c0      	nop			@ (mov r8, r8)
 8003ec8:	e000e010 	.word	0xe000e010

08003ecc <ADC_ConvCpltCallback>:
#define VAR_CONVERTED_DATA_INIT_VALUE    (__LL_ADC_DIGITAL_SCALE(LL_ADC_RESOLUTION_12B) + 1)

volatile uint8_t low_half_safe;
volatile uint8_t adc_err_int;
void ADC_ConvCpltCallback()
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	af00      	add	r7, sp, #0
	low_half_safe = 0;
 8003ed0:	4b02      	ldr	r3, [pc, #8]	@ (8003edc <ADC_ConvCpltCallback+0x10>)
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	701a      	strb	r2, [r3, #0]
}
 8003ed6:	46c0      	nop			@ (mov r8, r8)
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	200008b2 	.word	0x200008b2

08003ee0 <ADC_ConvHalfCpltCallback>:

void ADC_ConvHalfCpltCallback()
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	af00      	add	r7, sp, #0
	low_half_safe = 1;
 8003ee4:	4b02      	ldr	r3, [pc, #8]	@ (8003ef0 <ADC_ConvHalfCpltCallback+0x10>)
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	701a      	strb	r2, [r3, #0]
}
 8003eea:	46c0      	nop			@ (mov r8, r8)
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	200008b2 	.word	0x200008b2

08003ef4 <ADC_ErrorCallback>:

void ADC_ErrorCallback()
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	af00      	add	r7, sp, #0
	adc_err_int = 1;
 8003ef8:	4b02      	ldr	r3, [pc, #8]	@ (8003f04 <ADC_ErrorCallback+0x10>)
 8003efa:	2201      	movs	r2, #1
 8003efc:	701a      	strb	r2, [r3, #0]
}
 8003efe:	46c0      	nop			@ (mov r8, r8)
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	200008b3 	.word	0x200008b3

08003f08 <ADC_Activate>:

void ADC_Activate()
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
	low_half_safe = 0;
 8003f0e:	4b3e      	ldr	r3, [pc, #248]	@ (8004008 <ADC_Activate+0x100>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	701a      	strb	r2, [r3, #0]
	adc_err_int = 0;
 8003f14:	4b3d      	ldr	r3, [pc, #244]	@ (800400c <ADC_Activate+0x104>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	701a      	strb	r2, [r3, #0]
	__IO uint32_t wait_loop_index = 0U;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	60bb      	str	r3, [r7, #8]
	__IO uint32_t backup_setting_adc_dma_transfer = 0U;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	607b      	str	r3, [r7, #4]
	#if (USE_TIMEOUT == 1)
	uint32_t Timeout = 0U; /* Variable used for timeout management */
 8003f22:	2300      	movs	r3, #0
 8003f24:	60fb      	str	r3, [r7, #12]
	/*       implemented anyway to show the best practice usages                */
	/*       corresponding to reference manual procedure.                       */
	/*       Software can be optimized by removing some of these checks, if     */
	/*       they are not relevant considering previous settings and actions    */
	/*       in user application.                                               */
	if (LL_ADC_IsEnabled(ADC1) == 0)
 8003f26:	4b3a      	ldr	r3, [pc, #232]	@ (8004010 <ADC_Activate+0x108>)
 8003f28:	0018      	movs	r0, r3
 8003f2a:	f7ff ff71 	bl	8003e10 <LL_ADC_IsEnabled>
 8003f2e:	1e03      	subs	r3, r0, #0
 8003f30:	d166      	bne.n	8004000 <ADC_Activate+0xf8>
	{
		/* Enable ADC internal voltage regulator */
		LL_ADC_EnableInternalRegulator(ADC1);
 8003f32:	4b37      	ldr	r3, [pc, #220]	@ (8004010 <ADC_Activate+0x108>)
 8003f34:	0018      	movs	r0, r3
 8003f36:	f7ff ff45 	bl	8003dc4 <LL_ADC_EnableInternalRegulator>
		/* Compute number of CPU cycles to wait for, from delay in us.            */
		/* Note: Variable divided by 2 to compensate partially                    */
		/*       CPU processing cycles (depends on compilation optimization).     */
		/* Note: If system core clock frequency is below 200kHz, wait time        */
		/*       is only a few CPU processing cycles.                             */
		wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8003f3a:	4b36      	ldr	r3, [pc, #216]	@ (8004014 <ADC_Activate+0x10c>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4936      	ldr	r1, [pc, #216]	@ (8004018 <ADC_Activate+0x110>)
 8003f40:	0018      	movs	r0, r3
 8003f42:	f7fc f8e1 	bl	8000108 <__udivsi3>
 8003f46:	0003      	movs	r3, r0
 8003f48:	001a      	movs	r2, r3
 8003f4a:	0013      	movs	r3, r2
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	189b      	adds	r3, r3, r2
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	210a      	movs	r1, #10
 8003f54:	0018      	movs	r0, r3
 8003f56:	f7fc f8d7 	bl	8000108 <__udivsi3>
 8003f5a:	0003      	movs	r3, r0
 8003f5c:	60bb      	str	r3, [r7, #8]
		while(wait_loop_index != 0)
 8003f5e:	e002      	b.n	8003f66 <ADC_Activate+0x5e>
		{
			wait_loop_index--;
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	3b01      	subs	r3, #1
 8003f64:	60bb      	str	r3, [r7, #8]
		while(wait_loop_index != 0)
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1f9      	bne.n	8003f60 <ADC_Activate+0x58>
		/* Note: Specificity of this STM32 series: Calibration factor is           */
		/*       available in data register and also transferred by DMA.           */
		/*       To not insert ADC calibration factor among ADC conversion data   */
		/*       in DMA destination address, DMA transfer must be disabled during */
		/*       calibration.                                                     */
		backup_setting_adc_dma_transfer = LL_ADC_REG_GetDMATransfer(ADC1);
 8003f6c:	4b28      	ldr	r3, [pc, #160]	@ (8004010 <ADC_Activate+0x108>)
 8003f6e:	0018      	movs	r0, r3
 8003f70:	f7ff ff1c 	bl	8003dac <LL_ADC_REG_GetDMATransfer>
 8003f74:	0003      	movs	r3, r0
 8003f76:	607b      	str	r3, [r7, #4]
		LL_ADC_REG_SetDMATransfer(ADC1, LL_ADC_REG_DMA_TRANSFER_NONE);
 8003f78:	4b25      	ldr	r3, [pc, #148]	@ (8004010 <ADC_Activate+0x108>)
 8003f7a:	2100      	movs	r1, #0
 8003f7c:	0018      	movs	r0, r3
 8003f7e:	f7ff ff03 	bl	8003d88 <LL_ADC_REG_SetDMATransfer>

		/* Run ADC self calibration */
		LL_ADC_StartCalibration(ADC1);
 8003f82:	4b23      	ldr	r3, [pc, #140]	@ (8004010 <ADC_Activate+0x108>)
 8003f84:	0018      	movs	r0, r3
 8003f86:	f7ff ff55 	bl	8003e34 <LL_ADC_StartCalibration>

		/* Poll for ADC effectively calibrated */
#if (USE_TIMEOUT == 1)
		Timeout = ADC_CALIBRATION_TIMEOUT_MS;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	60fb      	str	r3, [r7, #12]
#endif /* USE_TIMEOUT */

		while (LL_ADC_IsCalibrationOnGoing(ADC1) != 0)
 8003f8e:	e00a      	b.n	8003fa6 <ADC_Activate+0x9e>
		{
#if (USE_TIMEOUT == 1)
			/* Check Systick counter flag to decrement the time-out value */
			if (LL_SYSTICK_IsActiveCounterFlag())
 8003f90:	f7ff ff88 	bl	8003ea4 <LL_SYSTICK_IsActiveCounterFlag>
 8003f94:	1e03      	subs	r3, r0, #0
 8003f96:	d006      	beq.n	8003fa6 <ADC_Activate+0x9e>
			{
				if(Timeout-- == 0)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	1e5a      	subs	r2, r3, #1
 8003f9c:	60fa      	str	r2, [r7, #12]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d101      	bne.n	8003fa6 <ADC_Activate+0x9e>
				{
					/* Error: Time-out */
					Error_Handler();
 8003fa2:	f7ff f91b 	bl	80031dc <Error_Handler>
		while (LL_ADC_IsCalibrationOnGoing(ADC1) != 0)
 8003fa6:	4b1a      	ldr	r3, [pc, #104]	@ (8004010 <ADC_Activate+0x108>)
 8003fa8:	0018      	movs	r0, r3
 8003faa:	f7ff ff57 	bl	8003e5c <LL_ADC_IsCalibrationOnGoing>
 8003fae:	1e03      	subs	r3, r0, #0
 8003fb0:	d1ee      	bne.n	8003f90 <ADC_Activate+0x88>
			}
#endif /* USE_TIMEOUT */
		}

		/* Restore ADC DMA transfer request after calibration */
		LL_ADC_REG_SetDMATransfer(ADC1, backup_setting_adc_dma_transfer);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a16      	ldr	r2, [pc, #88]	@ (8004010 <ADC_Activate+0x108>)
 8003fb6:	0019      	movs	r1, r3
 8003fb8:	0010      	movs	r0, r2
 8003fba:	f7ff fee5 	bl	8003d88 <LL_ADC_REG_SetDMATransfer>

		/* Delay between ADC end of calibration and ADC enable.                   */
		/* Note: Variable divided by 2 to compensate partially                    */
		/*       CPU processing cycles (depends on compilation optimization).     */
		wait_loop_index = (ADC_DELAY_CALIB_ENABLE_CPU_CYCLES >> 1);
 8003fbe:	2320      	movs	r3, #32
 8003fc0:	60bb      	str	r3, [r7, #8]
		while(wait_loop_index != 0)
 8003fc2:	e002      	b.n	8003fca <ADC_Activate+0xc2>
		{
			wait_loop_index--;
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	60bb      	str	r3, [r7, #8]
		while(wait_loop_index != 0)
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1f9      	bne.n	8003fc4 <ADC_Activate+0xbc>
		}

		/* Enable ADC */
		LL_ADC_Enable(ADC1);
 8003fd0:	4b0f      	ldr	r3, [pc, #60]	@ (8004010 <ADC_Activate+0x108>)
 8003fd2:	0018      	movs	r0, r3
 8003fd4:	f7ff ff0a 	bl	8003dec <LL_ADC_Enable>


		/* Poll for ADC ready to convert */
#if (USE_TIMEOUT == 1)
		Timeout = ADC_ENABLE_TIMEOUT_MS;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	60fb      	str	r3, [r7, #12]
#endif /* USE_TIMEOUT */

		while (LL_ADC_IsActiveFlag_ADRDY(ADC1) == 0)
 8003fdc:	e00a      	b.n	8003ff4 <ADC_Activate+0xec>
		{
#if (USE_TIMEOUT == 1)
			/* Check Systick counter flag to decrement the time-out value */
			if (LL_SYSTICK_IsActiveCounterFlag())
 8003fde:	f7ff ff61 	bl	8003ea4 <LL_SYSTICK_IsActiveCounterFlag>
 8003fe2:	1e03      	subs	r3, r0, #0
 8003fe4:	d006      	beq.n	8003ff4 <ADC_Activate+0xec>
			{
				if(Timeout-- == 0)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	1e5a      	subs	r2, r3, #1
 8003fea:	60fa      	str	r2, [r7, #12]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d101      	bne.n	8003ff4 <ADC_Activate+0xec>
				{
					/* Error: Time-out */
					Error_Handler();
 8003ff0:	f7ff f8f4 	bl	80031dc <Error_Handler>
		while (LL_ADC_IsActiveFlag_ADRDY(ADC1) == 0)
 8003ff4:	4b06      	ldr	r3, [pc, #24]	@ (8004010 <ADC_Activate+0x108>)
 8003ff6:	0018      	movs	r0, r3
 8003ff8:	f7ff ff43 	bl	8003e82 <LL_ADC_IsActiveFlag_ADRDY>
 8003ffc:	1e03      	subs	r3, r0, #0
 8003ffe:	d0ee      	beq.n	8003fde <ADC_Activate+0xd6>
	/*       using function:                                                    */
	/*       "LL_ADC_REG_StartConversion();"                                    */

	/*## Operation on ADC hierarchical scope: ADC group injected ###############*/
	/* Note: Feature not available on this STM32 series */
}
 8004000:	46c0      	nop			@ (mov r8, r8)
 8004002:	46bd      	mov	sp, r7
 8004004:	b004      	add	sp, #16
 8004006:	bd80      	pop	{r7, pc}
 8004008:	200008b2 	.word	0x200008b2
 800400c:	200008b3 	.word	0x200008b3
 8004010:	40012400 	.word	0x40012400
 8004014:	200000b8 	.word	0x200000b8
 8004018:	00030d40 	.word	0x00030d40

0800401c <monitor_adc>:

int8_t monitor_adc()
{
 800401c:	b580      	push	{r7, lr}
 800401e:	af00      	add	r7, sp, #0
	if(adc_err_int)
 8004020:	4b06      	ldr	r3, [pc, #24]	@ (800403c <monitor_adc+0x20>)
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	b2db      	uxtb	r3, r3
 8004026:	2b00      	cmp	r3, #0
 8004028:	d004      	beq.n	8004034 <monitor_adc+0x18>
	{
		adc_err_int = 0;
 800402a:	4b04      	ldr	r3, [pc, #16]	@ (800403c <monitor_adc+0x20>)
 800402c:	2200      	movs	r2, #0
 800402e:	701a      	strb	r2, [r3, #0]
		return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e000      	b.n	8004036 <monitor_adc+0x1a>
	}
	return HAL_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	0018      	movs	r0, r3
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}
 800403c:	200008b3 	.word	0x200008b3

08004040 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004046:	4b0f      	ldr	r3, [pc, #60]	@ (8004084 <HAL_MspInit+0x44>)
 8004048:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800404a:	4b0e      	ldr	r3, [pc, #56]	@ (8004084 <HAL_MspInit+0x44>)
 800404c:	2101      	movs	r1, #1
 800404e:	430a      	orrs	r2, r1
 8004050:	641a      	str	r2, [r3, #64]	@ 0x40
 8004052:	4b0c      	ldr	r3, [pc, #48]	@ (8004084 <HAL_MspInit+0x44>)
 8004054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004056:	2201      	movs	r2, #1
 8004058:	4013      	ands	r3, r2
 800405a:	607b      	str	r3, [r7, #4]
 800405c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800405e:	4b09      	ldr	r3, [pc, #36]	@ (8004084 <HAL_MspInit+0x44>)
 8004060:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004062:	4b08      	ldr	r3, [pc, #32]	@ (8004084 <HAL_MspInit+0x44>)
 8004064:	2180      	movs	r1, #128	@ 0x80
 8004066:	0549      	lsls	r1, r1, #21
 8004068:	430a      	orrs	r2, r1
 800406a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800406c:	4b05      	ldr	r3, [pc, #20]	@ (8004084 <HAL_MspInit+0x44>)
 800406e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004070:	2380      	movs	r3, #128	@ 0x80
 8004072:	055b      	lsls	r3, r3, #21
 8004074:	4013      	ands	r3, r2
 8004076:	603b      	str	r3, [r7, #0]
 8004078:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800407a:	46c0      	nop			@ (mov r8, r8)
 800407c:	46bd      	mov	sp, r7
 800407e:	b002      	add	sp, #8
 8004080:	bd80      	pop	{r7, pc}
 8004082:	46c0      	nop			@ (mov r8, r8)
 8004084:	40021000 	.word	0x40021000

08004088 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004088:	b590      	push	{r4, r7, lr}
 800408a:	b093      	sub	sp, #76	@ 0x4c
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004090:	2334      	movs	r3, #52	@ 0x34
 8004092:	18fb      	adds	r3, r7, r3
 8004094:	0018      	movs	r0, r3
 8004096:	2314      	movs	r3, #20
 8004098:	001a      	movs	r2, r3
 800409a:	2100      	movs	r1, #0
 800409c:	f008 f83e 	bl	800c11c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80040a0:	2414      	movs	r4, #20
 80040a2:	193b      	adds	r3, r7, r4
 80040a4:	0018      	movs	r0, r3
 80040a6:	2320      	movs	r3, #32
 80040a8:	001a      	movs	r2, r3
 80040aa:	2100      	movs	r1, #0
 80040ac:	f008 f836 	bl	800c11c <memset>
  if(hi2c->Instance==I2C1)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a51      	ldr	r2, [pc, #324]	@ (80041fc <HAL_I2C_MspInit+0x174>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d000      	beq.n	80040bc <HAL_I2C_MspInit+0x34>
 80040ba:	e09a      	b.n	80041f2 <HAL_I2C_MspInit+0x16a>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80040bc:	193b      	adds	r3, r7, r4
 80040be:	2202      	movs	r2, #2
 80040c0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80040c2:	193b      	adds	r3, r7, r4
 80040c4:	2200      	movs	r2, #0
 80040c6:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80040c8:	193b      	adds	r3, r7, r4
 80040ca:	0018      	movs	r0, r3
 80040cc:	f004 fa70 	bl	80085b0 <HAL_RCCEx_PeriphCLKConfig>
 80040d0:	1e03      	subs	r3, r0, #0
 80040d2:	d001      	beq.n	80040d8 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 80040d4:	f7ff f882 	bl	80031dc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040d8:	4b49      	ldr	r3, [pc, #292]	@ (8004200 <HAL_I2C_MspInit+0x178>)
 80040da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040dc:	4b48      	ldr	r3, [pc, #288]	@ (8004200 <HAL_I2C_MspInit+0x178>)
 80040de:	2101      	movs	r1, #1
 80040e0:	430a      	orrs	r2, r1
 80040e2:	635a      	str	r2, [r3, #52]	@ 0x34
 80040e4:	4b46      	ldr	r3, [pc, #280]	@ (8004200 <HAL_I2C_MspInit+0x178>)
 80040e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040e8:	2201      	movs	r2, #1
 80040ea:	4013      	ands	r3, r2
 80040ec:	613b      	str	r3, [r7, #16]
 80040ee:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9 [PA11]     ------> I2C1_SCL
    PA10 [PA12]     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80040f0:	2134      	movs	r1, #52	@ 0x34
 80040f2:	187b      	adds	r3, r7, r1
 80040f4:	22c0      	movs	r2, #192	@ 0xc0
 80040f6:	00d2      	lsls	r2, r2, #3
 80040f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80040fa:	187b      	adds	r3, r7, r1
 80040fc:	2212      	movs	r2, #18
 80040fe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004100:	187b      	adds	r3, r7, r1
 8004102:	2200      	movs	r2, #0
 8004104:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004106:	187b      	adds	r3, r7, r1
 8004108:	2200      	movs	r2, #0
 800410a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800410c:	187b      	adds	r3, r7, r1
 800410e:	2206      	movs	r2, #6
 8004110:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004112:	187a      	adds	r2, r7, r1
 8004114:	23a0      	movs	r3, #160	@ 0xa0
 8004116:	05db      	lsls	r3, r3, #23
 8004118:	0011      	movs	r1, r2
 800411a:	0018      	movs	r0, r3
 800411c:	f001 f9f8 	bl	8005510 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004120:	4b37      	ldr	r3, [pc, #220]	@ (8004200 <HAL_I2C_MspInit+0x178>)
 8004122:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004124:	4b36      	ldr	r3, [pc, #216]	@ (8004200 <HAL_I2C_MspInit+0x178>)
 8004126:	2180      	movs	r1, #128	@ 0x80
 8004128:	0389      	lsls	r1, r1, #14
 800412a:	430a      	orrs	r2, r1
 800412c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800412e:	4b34      	ldr	r3, [pc, #208]	@ (8004200 <HAL_I2C_MspInit+0x178>)
 8004130:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004132:	2380      	movs	r3, #128	@ 0x80
 8004134:	039b      	lsls	r3, r3, #14
 8004136:	4013      	ands	r3, r2
 8004138:	60fb      	str	r3, [r7, #12]
 800413a:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel4;
 800413c:	4b31      	ldr	r3, [pc, #196]	@ (8004204 <HAL_I2C_MspInit+0x17c>)
 800413e:	4a32      	ldr	r2, [pc, #200]	@ (8004208 <HAL_I2C_MspInit+0x180>)
 8004140:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8004142:	4b30      	ldr	r3, [pc, #192]	@ (8004204 <HAL_I2C_MspInit+0x17c>)
 8004144:	220a      	movs	r2, #10
 8004146:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004148:	4b2e      	ldr	r3, [pc, #184]	@ (8004204 <HAL_I2C_MspInit+0x17c>)
 800414a:	2200      	movs	r2, #0
 800414c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800414e:	4b2d      	ldr	r3, [pc, #180]	@ (8004204 <HAL_I2C_MspInit+0x17c>)
 8004150:	2200      	movs	r2, #0
 8004152:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004154:	4b2b      	ldr	r3, [pc, #172]	@ (8004204 <HAL_I2C_MspInit+0x17c>)
 8004156:	2280      	movs	r2, #128	@ 0x80
 8004158:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800415a:	4b2a      	ldr	r3, [pc, #168]	@ (8004204 <HAL_I2C_MspInit+0x17c>)
 800415c:	2200      	movs	r2, #0
 800415e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004160:	4b28      	ldr	r3, [pc, #160]	@ (8004204 <HAL_I2C_MspInit+0x17c>)
 8004162:	2200      	movs	r2, #0
 8004164:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8004166:	4b27      	ldr	r3, [pc, #156]	@ (8004204 <HAL_I2C_MspInit+0x17c>)
 8004168:	2200      	movs	r2, #0
 800416a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800416c:	4b25      	ldr	r3, [pc, #148]	@ (8004204 <HAL_I2C_MspInit+0x17c>)
 800416e:	2280      	movs	r2, #128	@ 0x80
 8004170:	0152      	lsls	r2, r2, #5
 8004172:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8004174:	4b23      	ldr	r3, [pc, #140]	@ (8004204 <HAL_I2C_MspInit+0x17c>)
 8004176:	0018      	movs	r0, r3
 8004178:	f000 fe0c 	bl	8004d94 <HAL_DMA_Init>
 800417c:	1e03      	subs	r3, r0, #0
 800417e:	d001      	beq.n	8004184 <HAL_I2C_MspInit+0xfc>
    {
      Error_Handler();
 8004180:	f7ff f82c 	bl	80031dc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4a1f      	ldr	r2, [pc, #124]	@ (8004204 <HAL_I2C_MspInit+0x17c>)
 8004188:	63da      	str	r2, [r3, #60]	@ 0x3c
 800418a:	4b1e      	ldr	r3, [pc, #120]	@ (8004204 <HAL_I2C_MspInit+0x17c>)
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel5;
 8004190:	4b1e      	ldr	r3, [pc, #120]	@ (800420c <HAL_I2C_MspInit+0x184>)
 8004192:	4a1f      	ldr	r2, [pc, #124]	@ (8004210 <HAL_I2C_MspInit+0x188>)
 8004194:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8004196:	4b1d      	ldr	r3, [pc, #116]	@ (800420c <HAL_I2C_MspInit+0x184>)
 8004198:	220b      	movs	r2, #11
 800419a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800419c:	4b1b      	ldr	r3, [pc, #108]	@ (800420c <HAL_I2C_MspInit+0x184>)
 800419e:	2210      	movs	r2, #16
 80041a0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80041a2:	4b1a      	ldr	r3, [pc, #104]	@ (800420c <HAL_I2C_MspInit+0x184>)
 80041a4:	2200      	movs	r2, #0
 80041a6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80041a8:	4b18      	ldr	r3, [pc, #96]	@ (800420c <HAL_I2C_MspInit+0x184>)
 80041aa:	2280      	movs	r2, #128	@ 0x80
 80041ac:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80041ae:	4b17      	ldr	r3, [pc, #92]	@ (800420c <HAL_I2C_MspInit+0x184>)
 80041b0:	2200      	movs	r2, #0
 80041b2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80041b4:	4b15      	ldr	r3, [pc, #84]	@ (800420c <HAL_I2C_MspInit+0x184>)
 80041b6:	2200      	movs	r2, #0
 80041b8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80041ba:	4b14      	ldr	r3, [pc, #80]	@ (800420c <HAL_I2C_MspInit+0x184>)
 80041bc:	2200      	movs	r2, #0
 80041be:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80041c0:	4b12      	ldr	r3, [pc, #72]	@ (800420c <HAL_I2C_MspInit+0x184>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80041c6:	4b11      	ldr	r3, [pc, #68]	@ (800420c <HAL_I2C_MspInit+0x184>)
 80041c8:	0018      	movs	r0, r3
 80041ca:	f000 fde3 	bl	8004d94 <HAL_DMA_Init>
 80041ce:	1e03      	subs	r3, r0, #0
 80041d0:	d001      	beq.n	80041d6 <HAL_I2C_MspInit+0x14e>
    {
      Error_Handler();
 80041d2:	f7ff f803 	bl	80031dc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a0c      	ldr	r2, [pc, #48]	@ (800420c <HAL_I2C_MspInit+0x184>)
 80041da:	639a      	str	r2, [r3, #56]	@ 0x38
 80041dc:	4b0b      	ldr	r3, [pc, #44]	@ (800420c <HAL_I2C_MspInit+0x184>)
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 3, 0);
 80041e2:	2200      	movs	r2, #0
 80041e4:	2103      	movs	r1, #3
 80041e6:	2017      	movs	r0, #23
 80041e8:	f000 fd92 	bl	8004d10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 80041ec:	2017      	movs	r0, #23
 80041ee:	f000 fda4 	bl	8004d3a <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80041f2:	46c0      	nop			@ (mov r8, r8)
 80041f4:	46bd      	mov	sp, r7
 80041f6:	b013      	add	sp, #76	@ 0x4c
 80041f8:	bd90      	pop	{r4, r7, pc}
 80041fa:	46c0      	nop			@ (mov r8, r8)
 80041fc:	40005400 	.word	0x40005400
 8004200:	40021000 	.word	0x40021000
 8004204:	20000358 	.word	0x20000358
 8004208:	40020044 	.word	0x40020044
 800420c:	200003b4 	.word	0x200003b4
 8004210:	40020058 	.word	0x40020058

08004214 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a14      	ldr	r2, [pc, #80]	@ (8004274 <HAL_I2C_MspDeInit+0x60>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d122      	bne.n	800426c <HAL_I2C_MspDeInit+0x58>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8004226:	4b14      	ldr	r3, [pc, #80]	@ (8004278 <HAL_I2C_MspDeInit+0x64>)
 8004228:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800422a:	4b13      	ldr	r3, [pc, #76]	@ (8004278 <HAL_I2C_MspDeInit+0x64>)
 800422c:	4913      	ldr	r1, [pc, #76]	@ (800427c <HAL_I2C_MspDeInit+0x68>)
 800422e:	400a      	ands	r2, r1
 8004230:	63da      	str	r2, [r3, #60]	@ 0x3c

    /**I2C1 GPIO Configuration
    PA9 [PA11]     ------> I2C1_SCL
    PA10 [PA12]     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9);
 8004232:	2380      	movs	r3, #128	@ 0x80
 8004234:	009a      	lsls	r2, r3, #2
 8004236:	23a0      	movs	r3, #160	@ 0xa0
 8004238:	05db      	lsls	r3, r3, #23
 800423a:	0011      	movs	r1, r2
 800423c:	0018      	movs	r0, r3
 800423e:	f001 fad9 	bl	80057f4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_10);
 8004242:	2380      	movs	r3, #128	@ 0x80
 8004244:	00da      	lsls	r2, r3, #3
 8004246:	23a0      	movs	r3, #160	@ 0xa0
 8004248:	05db      	lsls	r3, r3, #23
 800424a:	0011      	movs	r1, r2
 800424c:	0018      	movs	r0, r3
 800424e:	f001 fad1 	bl	80057f4 <HAL_GPIO_DeInit>

    /* I2C1 DMA DeInit */
    HAL_DMA_DeInit(hi2c->hdmarx);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004256:	0018      	movs	r0, r3
 8004258:	f000 fe26 	bl	8004ea8 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hi2c->hdmatx);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004260:	0018      	movs	r0, r3
 8004262:	f000 fe21 	bl	8004ea8 <HAL_DMA_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_IRQn);
 8004266:	2017      	movs	r0, #23
 8004268:	f000 fd77 	bl	8004d5a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800426c:	46c0      	nop			@ (mov r8, r8)
 800426e:	46bd      	mov	sp, r7
 8004270:	b002      	add	sp, #8
 8004272:	bd80      	pop	{r7, pc}
 8004274:	40005400 	.word	0x40005400
 8004278:	40021000 	.word	0x40021000
 800427c:	ffdfffff 	.word	0xffdfffff

08004280 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004280:	b590      	push	{r4, r7, lr}
 8004282:	b093      	sub	sp, #76	@ 0x4c
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004288:	2334      	movs	r3, #52	@ 0x34
 800428a:	18fb      	adds	r3, r7, r3
 800428c:	0018      	movs	r0, r3
 800428e:	2314      	movs	r3, #20
 8004290:	001a      	movs	r2, r3
 8004292:	2100      	movs	r1, #0
 8004294:	f007 ff42 	bl	800c11c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004298:	2414      	movs	r4, #20
 800429a:	193b      	adds	r3, r7, r4
 800429c:	0018      	movs	r0, r3
 800429e:	2320      	movs	r3, #32
 80042a0:	001a      	movs	r2, r3
 80042a2:	2100      	movs	r1, #0
 80042a4:	f007 ff3a 	bl	800c11c <memset>
  if(hspi->Instance==SPI1)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a34      	ldr	r2, [pc, #208]	@ (8004380 <HAL_SPI_MspInit+0x100>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d162      	bne.n	8004378 <HAL_SPI_MspInit+0xf8>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 80042b2:	193b      	adds	r3, r7, r4
 80042b4:	2204      	movs	r2, #4
 80042b6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 80042b8:	193b      	adds	r3, r7, r4
 80042ba:	2200      	movs	r2, #0
 80042bc:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80042be:	193b      	adds	r3, r7, r4
 80042c0:	0018      	movs	r0, r3
 80042c2:	f004 f975 	bl	80085b0 <HAL_RCCEx_PeriphCLKConfig>
 80042c6:	1e03      	subs	r3, r0, #0
 80042c8:	d001      	beq.n	80042ce <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80042ca:	f7fe ff87 	bl	80031dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80042ce:	4b2d      	ldr	r3, [pc, #180]	@ (8004384 <HAL_SPI_MspInit+0x104>)
 80042d0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80042d2:	4b2c      	ldr	r3, [pc, #176]	@ (8004384 <HAL_SPI_MspInit+0x104>)
 80042d4:	2180      	movs	r1, #128	@ 0x80
 80042d6:	0149      	lsls	r1, r1, #5
 80042d8:	430a      	orrs	r2, r1
 80042da:	641a      	str	r2, [r3, #64]	@ 0x40
 80042dc:	4b29      	ldr	r3, [pc, #164]	@ (8004384 <HAL_SPI_MspInit+0x104>)
 80042de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80042e0:	2380      	movs	r3, #128	@ 0x80
 80042e2:	015b      	lsls	r3, r3, #5
 80042e4:	4013      	ands	r3, r2
 80042e6:	613b      	str	r3, [r7, #16]
 80042e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042ea:	4b26      	ldr	r3, [pc, #152]	@ (8004384 <HAL_SPI_MspInit+0x104>)
 80042ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042ee:	4b25      	ldr	r3, [pc, #148]	@ (8004384 <HAL_SPI_MspInit+0x104>)
 80042f0:	2101      	movs	r1, #1
 80042f2:	430a      	orrs	r2, r1
 80042f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80042f6:	4b23      	ldr	r3, [pc, #140]	@ (8004384 <HAL_SPI_MspInit+0x104>)
 80042f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042fa:	2201      	movs	r2, #1
 80042fc:	4013      	ands	r3, r2
 80042fe:	60fb      	str	r3, [r7, #12]
 8004300:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004302:	4b20      	ldr	r3, [pc, #128]	@ (8004384 <HAL_SPI_MspInit+0x104>)
 8004304:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004306:	4b1f      	ldr	r3, [pc, #124]	@ (8004384 <HAL_SPI_MspInit+0x104>)
 8004308:	2102      	movs	r1, #2
 800430a:	430a      	orrs	r2, r1
 800430c:	635a      	str	r2, [r3, #52]	@ 0x34
 800430e:	4b1d      	ldr	r3, [pc, #116]	@ (8004384 <HAL_SPI_MspInit+0x104>)
 8004310:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004312:	2202      	movs	r2, #2
 8004314:	4013      	ands	r3, r2
 8004316:	60bb      	str	r3, [r7, #8]
 8004318:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA11 [PA9]     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800431a:	2134      	movs	r1, #52	@ 0x34
 800431c:	187b      	adds	r3, r7, r1
 800431e:	2280      	movs	r2, #128	@ 0x80
 8004320:	0112      	lsls	r2, r2, #4
 8004322:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004324:	000c      	movs	r4, r1
 8004326:	193b      	adds	r3, r7, r4
 8004328:	2202      	movs	r2, #2
 800432a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800432c:	193b      	adds	r3, r7, r4
 800432e:	2200      	movs	r2, #0
 8004330:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004332:	193b      	adds	r3, r7, r4
 8004334:	2200      	movs	r2, #0
 8004336:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8004338:	193b      	adds	r3, r7, r4
 800433a:	2200      	movs	r2, #0
 800433c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800433e:	193a      	adds	r2, r7, r4
 8004340:	23a0      	movs	r3, #160	@ 0xa0
 8004342:	05db      	lsls	r3, r3, #23
 8004344:	0011      	movs	r1, r2
 8004346:	0018      	movs	r0, r3
 8004348:	f001 f8e2 	bl	8005510 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800434c:	0021      	movs	r1, r4
 800434e:	187b      	adds	r3, r7, r1
 8004350:	2228      	movs	r2, #40	@ 0x28
 8004352:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004354:	187b      	adds	r3, r7, r1
 8004356:	2202      	movs	r2, #2
 8004358:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800435a:	187b      	adds	r3, r7, r1
 800435c:	2200      	movs	r2, #0
 800435e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004360:	187b      	adds	r3, r7, r1
 8004362:	2200      	movs	r2, #0
 8004364:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8004366:	187b      	adds	r3, r7, r1
 8004368:	2200      	movs	r2, #0
 800436a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800436c:	187b      	adds	r3, r7, r1
 800436e:	4a06      	ldr	r2, [pc, #24]	@ (8004388 <HAL_SPI_MspInit+0x108>)
 8004370:	0019      	movs	r1, r3
 8004372:	0010      	movs	r0, r2
 8004374:	f001 f8cc 	bl	8005510 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8004378:	46c0      	nop			@ (mov r8, r8)
 800437a:	46bd      	mov	sp, r7
 800437c:	b013      	add	sp, #76	@ 0x4c
 800437e:	bd90      	pop	{r4, r7, pc}
 8004380:	40013000 	.word	0x40013000
 8004384:	40021000 	.word	0x40021000
 8004388:	50000400 	.word	0x50000400

0800438c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a0a      	ldr	r2, [pc, #40]	@ (80043c4 <HAL_TIM_PWM_MspInit+0x38>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d10d      	bne.n	80043ba <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800439e:	4b0a      	ldr	r3, [pc, #40]	@ (80043c8 <HAL_TIM_PWM_MspInit+0x3c>)
 80043a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80043a2:	4b09      	ldr	r3, [pc, #36]	@ (80043c8 <HAL_TIM_PWM_MspInit+0x3c>)
 80043a4:	2180      	movs	r1, #128	@ 0x80
 80043a6:	0109      	lsls	r1, r1, #4
 80043a8:	430a      	orrs	r2, r1
 80043aa:	641a      	str	r2, [r3, #64]	@ 0x40
 80043ac:	4b06      	ldr	r3, [pc, #24]	@ (80043c8 <HAL_TIM_PWM_MspInit+0x3c>)
 80043ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80043b0:	2380      	movs	r3, #128	@ 0x80
 80043b2:	011b      	lsls	r3, r3, #4
 80043b4:	4013      	ands	r3, r2
 80043b6:	60fb      	str	r3, [r7, #12]
 80043b8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80043ba:	46c0      	nop			@ (mov r8, r8)
 80043bc:	46bd      	mov	sp, r7
 80043be:	b004      	add	sp, #16
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	46c0      	nop			@ (mov r8, r8)
 80043c4:	40012c00 	.word	0x40012c00
 80043c8:	40021000 	.word	0x40021000

080043cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a0e      	ldr	r2, [pc, #56]	@ (8004414 <HAL_TIM_Base_MspInit+0x48>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d115      	bne.n	800440a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80043de:	4b0e      	ldr	r3, [pc, #56]	@ (8004418 <HAL_TIM_Base_MspInit+0x4c>)
 80043e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80043e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004418 <HAL_TIM_Base_MspInit+0x4c>)
 80043e4:	2180      	movs	r1, #128	@ 0x80
 80043e6:	0209      	lsls	r1, r1, #8
 80043e8:	430a      	orrs	r2, r1
 80043ea:	641a      	str	r2, [r3, #64]	@ 0x40
 80043ec:	4b0a      	ldr	r3, [pc, #40]	@ (8004418 <HAL_TIM_Base_MspInit+0x4c>)
 80043ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80043f0:	2380      	movs	r3, #128	@ 0x80
 80043f2:	021b      	lsls	r3, r3, #8
 80043f4:	4013      	ands	r3, r2
 80043f6:	60fb      	str	r3, [r7, #12]
 80043f8:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 80043fa:	2200      	movs	r2, #0
 80043fc:	2100      	movs	r1, #0
 80043fe:	2013      	movs	r0, #19
 8004400:	f000 fc86 	bl	8004d10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8004404:	2013      	movs	r0, #19
 8004406:	f000 fc98 	bl	8004d3a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM14_MspInit 1 */

  }

}
 800440a:	46c0      	nop			@ (mov r8, r8)
 800440c:	46bd      	mov	sp, r7
 800440e:	b004      	add	sp, #16
 8004410:	bd80      	pop	{r7, pc}
 8004412:	46c0      	nop			@ (mov r8, r8)
 8004414:	40002000 	.word	0x40002000
 8004418:	40021000 	.word	0x40021000

0800441c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800441c:	b590      	push	{r4, r7, lr}
 800441e:	b089      	sub	sp, #36	@ 0x24
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004424:	240c      	movs	r4, #12
 8004426:	193b      	adds	r3, r7, r4
 8004428:	0018      	movs	r0, r3
 800442a:	2314      	movs	r3, #20
 800442c:	001a      	movs	r2, r3
 800442e:	2100      	movs	r1, #0
 8004430:	f007 fe74 	bl	800c11c <memset>
  if(htim->Instance==TIM1)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a15      	ldr	r2, [pc, #84]	@ (8004490 <HAL_TIM_MspPostInit+0x74>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d123      	bne.n	8004486 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800443e:	4b15      	ldr	r3, [pc, #84]	@ (8004494 <HAL_TIM_MspPostInit+0x78>)
 8004440:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004442:	4b14      	ldr	r3, [pc, #80]	@ (8004494 <HAL_TIM_MspPostInit+0x78>)
 8004444:	2101      	movs	r1, #1
 8004446:	430a      	orrs	r2, r1
 8004448:	635a      	str	r2, [r3, #52]	@ 0x34
 800444a:	4b12      	ldr	r3, [pc, #72]	@ (8004494 <HAL_TIM_MspPostInit+0x78>)
 800444c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800444e:	2201      	movs	r2, #1
 8004450:	4013      	ands	r3, r2
 8004452:	60bb      	str	r3, [r7, #8]
 8004454:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA15     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = Actuator_PWM_Pin;
 8004456:	193b      	adds	r3, r7, r4
 8004458:	2280      	movs	r2, #128	@ 0x80
 800445a:	0212      	lsls	r2, r2, #8
 800445c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800445e:	0021      	movs	r1, r4
 8004460:	187b      	adds	r3, r7, r1
 8004462:	2202      	movs	r2, #2
 8004464:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004466:	187b      	adds	r3, r7, r1
 8004468:	2200      	movs	r2, #0
 800446a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800446c:	187b      	adds	r3, r7, r1
 800446e:	2200      	movs	r2, #0
 8004470:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8004472:	187b      	adds	r3, r7, r1
 8004474:	2202      	movs	r2, #2
 8004476:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(Actuator_PWM_GPIO_Port, &GPIO_InitStruct);
 8004478:	187a      	adds	r2, r7, r1
 800447a:	23a0      	movs	r3, #160	@ 0xa0
 800447c:	05db      	lsls	r3, r3, #23
 800447e:	0011      	movs	r1, r2
 8004480:	0018      	movs	r0, r3
 8004482:	f001 f845 	bl	8005510 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004486:	46c0      	nop			@ (mov r8, r8)
 8004488:	46bd      	mov	sp, r7
 800448a:	b009      	add	sp, #36	@ 0x24
 800448c:	bd90      	pop	{r4, r7, pc}
 800448e:	46c0      	nop			@ (mov r8, r8)
 8004490:	40012c00 	.word	0x40012c00
 8004494:	40021000 	.word	0x40021000

08004498 <HAL_TIM_Base_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a07      	ldr	r2, [pc, #28]	@ (80044c4 <HAL_TIM_Base_MspDeInit+0x2c>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d108      	bne.n	80044bc <HAL_TIM_Base_MspDeInit+0x24>
  {
  /* USER CODE BEGIN TIM14_MspDeInit 0 */

  /* USER CODE END TIM14_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM14_CLK_DISABLE();
 80044aa:	4b07      	ldr	r3, [pc, #28]	@ (80044c8 <HAL_TIM_Base_MspDeInit+0x30>)
 80044ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80044ae:	4b06      	ldr	r3, [pc, #24]	@ (80044c8 <HAL_TIM_Base_MspDeInit+0x30>)
 80044b0:	4906      	ldr	r1, [pc, #24]	@ (80044cc <HAL_TIM_Base_MspDeInit+0x34>)
 80044b2:	400a      	ands	r2, r1
 80044b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* TIM14 interrupt DeInit */
    HAL_NVIC_DisableIRQ(TIM14_IRQn);
 80044b6:	2013      	movs	r0, #19
 80044b8:	f000 fc4f 	bl	8004d5a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN TIM14_MspDeInit 1 */

  /* USER CODE END TIM14_MspDeInit 1 */
  }

}
 80044bc:	46c0      	nop			@ (mov r8, r8)
 80044be:	46bd      	mov	sp, r7
 80044c0:	b002      	add	sp, #8
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	40002000 	.word	0x40002000
 80044c8:	40021000 	.word	0x40021000
 80044cc:	ffff7fff 	.word	0xffff7fff

080044d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80044d0:	b590      	push	{r4, r7, lr}
 80044d2:	b095      	sub	sp, #84	@ 0x54
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044d8:	233c      	movs	r3, #60	@ 0x3c
 80044da:	18fb      	adds	r3, r7, r3
 80044dc:	0018      	movs	r0, r3
 80044de:	2314      	movs	r3, #20
 80044e0:	001a      	movs	r2, r3
 80044e2:	2100      	movs	r1, #0
 80044e4:	f007 fe1a 	bl	800c11c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80044e8:	241c      	movs	r4, #28
 80044ea:	193b      	adds	r3, r7, r4
 80044ec:	0018      	movs	r0, r3
 80044ee:	2320      	movs	r3, #32
 80044f0:	001a      	movs	r2, r3
 80044f2:	2100      	movs	r1, #0
 80044f4:	f007 fe12 	bl	800c11c <memset>
  if(huart->Instance==USART1)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a74      	ldr	r2, [pc, #464]	@ (80046d0 <HAL_UART_MspInit+0x200>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d000      	beq.n	8004504 <HAL_UART_MspInit+0x34>
 8004502:	e0e1      	b.n	80046c8 <HAL_UART_MspInit+0x1f8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004504:	193b      	adds	r3, r7, r4
 8004506:	2201      	movs	r2, #1
 8004508:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800450a:	193b      	adds	r3, r7, r4
 800450c:	2200      	movs	r2, #0
 800450e:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004510:	193b      	adds	r3, r7, r4
 8004512:	0018      	movs	r0, r3
 8004514:	f004 f84c 	bl	80085b0 <HAL_RCCEx_PeriphCLKConfig>
 8004518:	1e03      	subs	r3, r0, #0
 800451a:	d001      	beq.n	8004520 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 800451c:	f7fe fe5e 	bl	80031dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004520:	4b6c      	ldr	r3, [pc, #432]	@ (80046d4 <HAL_UART_MspInit+0x204>)
 8004522:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004524:	4b6b      	ldr	r3, [pc, #428]	@ (80046d4 <HAL_UART_MspInit+0x204>)
 8004526:	2180      	movs	r1, #128	@ 0x80
 8004528:	01c9      	lsls	r1, r1, #7
 800452a:	430a      	orrs	r2, r1
 800452c:	641a      	str	r2, [r3, #64]	@ 0x40
 800452e:	4b69      	ldr	r3, [pc, #420]	@ (80046d4 <HAL_UART_MspInit+0x204>)
 8004530:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004532:	2380      	movs	r3, #128	@ 0x80
 8004534:	01db      	lsls	r3, r3, #7
 8004536:	4013      	ands	r3, r2
 8004538:	61bb      	str	r3, [r7, #24]
 800453a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800453c:	4b65      	ldr	r3, [pc, #404]	@ (80046d4 <HAL_UART_MspInit+0x204>)
 800453e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004540:	4b64      	ldr	r3, [pc, #400]	@ (80046d4 <HAL_UART_MspInit+0x204>)
 8004542:	2104      	movs	r1, #4
 8004544:	430a      	orrs	r2, r1
 8004546:	635a      	str	r2, [r3, #52]	@ 0x34
 8004548:	4b62      	ldr	r3, [pc, #392]	@ (80046d4 <HAL_UART_MspInit+0x204>)
 800454a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800454c:	2204      	movs	r2, #4
 800454e:	4013      	ands	r3, r2
 8004550:	617b      	str	r3, [r7, #20]
 8004552:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004554:	4b5f      	ldr	r3, [pc, #380]	@ (80046d4 <HAL_UART_MspInit+0x204>)
 8004556:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004558:	4b5e      	ldr	r3, [pc, #376]	@ (80046d4 <HAL_UART_MspInit+0x204>)
 800455a:	2102      	movs	r1, #2
 800455c:	430a      	orrs	r2, r1
 800455e:	635a      	str	r2, [r3, #52]	@ 0x34
 8004560:	4b5c      	ldr	r3, [pc, #368]	@ (80046d4 <HAL_UART_MspInit+0x204>)
 8004562:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004564:	2202      	movs	r2, #2
 8004566:	4013      	ands	r3, r2
 8004568:	613b      	str	r3, [r7, #16]
 800456a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800456c:	4b59      	ldr	r3, [pc, #356]	@ (80046d4 <HAL_UART_MspInit+0x204>)
 800456e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004570:	4b58      	ldr	r3, [pc, #352]	@ (80046d4 <HAL_UART_MspInit+0x204>)
 8004572:	2101      	movs	r1, #1
 8004574:	430a      	orrs	r2, r1
 8004576:	635a      	str	r2, [r3, #52]	@ 0x34
 8004578:	4b56      	ldr	r3, [pc, #344]	@ (80046d4 <HAL_UART_MspInit+0x204>)
 800457a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800457c:	2201      	movs	r2, #1
 800457e:	4013      	ands	r3, r2
 8004580:	60fb      	str	r3, [r7, #12]
 8004582:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC14-OSCX_IN(PC14)     ------> USART1_TX
    PB2     ------> USART1_RX
    PA12 [PA10]     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004584:	213c      	movs	r1, #60	@ 0x3c
 8004586:	187b      	adds	r3, r7, r1
 8004588:	2280      	movs	r2, #128	@ 0x80
 800458a:	01d2      	lsls	r2, r2, #7
 800458c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800458e:	000c      	movs	r4, r1
 8004590:	193b      	adds	r3, r7, r4
 8004592:	2202      	movs	r2, #2
 8004594:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004596:	193b      	adds	r3, r7, r4
 8004598:	2200      	movs	r2, #0
 800459a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800459c:	193b      	adds	r3, r7, r4
 800459e:	2200      	movs	r2, #0
 80045a0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80045a2:	193b      	adds	r3, r7, r4
 80045a4:	2200      	movs	r2, #0
 80045a6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045a8:	193b      	adds	r3, r7, r4
 80045aa:	4a4b      	ldr	r2, [pc, #300]	@ (80046d8 <HAL_UART_MspInit+0x208>)
 80045ac:	0019      	movs	r1, r3
 80045ae:	0010      	movs	r0, r2
 80045b0:	f000 ffae 	bl	8005510 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80045b4:	193b      	adds	r3, r7, r4
 80045b6:	2204      	movs	r2, #4
 80045b8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045ba:	193b      	adds	r3, r7, r4
 80045bc:	2202      	movs	r2, #2
 80045be:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045c0:	193b      	adds	r3, r7, r4
 80045c2:	2200      	movs	r2, #0
 80045c4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045c6:	193b      	adds	r3, r7, r4
 80045c8:	2200      	movs	r2, #0
 80045ca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80045cc:	193b      	adds	r3, r7, r4
 80045ce:	2200      	movs	r2, #0
 80045d0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045d2:	193b      	adds	r3, r7, r4
 80045d4:	4a41      	ldr	r2, [pc, #260]	@ (80046dc <HAL_UART_MspInit+0x20c>)
 80045d6:	0019      	movs	r1, r3
 80045d8:	0010      	movs	r0, r2
 80045da:	f000 ff99 	bl	8005510 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80045de:	0021      	movs	r1, r4
 80045e0:	187b      	adds	r3, r7, r1
 80045e2:	2280      	movs	r2, #128	@ 0x80
 80045e4:	0152      	lsls	r2, r2, #5
 80045e6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045e8:	187b      	adds	r3, r7, r1
 80045ea:	2202      	movs	r2, #2
 80045ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045ee:	187b      	adds	r3, r7, r1
 80045f0:	2200      	movs	r2, #0
 80045f2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045f4:	187b      	adds	r3, r7, r1
 80045f6:	2200      	movs	r2, #0
 80045f8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80045fa:	187b      	adds	r3, r7, r1
 80045fc:	2201      	movs	r2, #1
 80045fe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004600:	187a      	adds	r2, r7, r1
 8004602:	23a0      	movs	r3, #160	@ 0xa0
 8004604:	05db      	lsls	r3, r3, #23
 8004606:	0011      	movs	r1, r2
 8004608:	0018      	movs	r0, r3
 800460a:	f000 ff81 	bl	8005510 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 800460e:	4b34      	ldr	r3, [pc, #208]	@ (80046e0 <HAL_UART_MspInit+0x210>)
 8004610:	4a34      	ldr	r2, [pc, #208]	@ (80046e4 <HAL_UART_MspInit+0x214>)
 8004612:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8004614:	4b32      	ldr	r3, [pc, #200]	@ (80046e0 <HAL_UART_MspInit+0x210>)
 8004616:	2232      	movs	r2, #50	@ 0x32
 8004618:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800461a:	4b31      	ldr	r3, [pc, #196]	@ (80046e0 <HAL_UART_MspInit+0x210>)
 800461c:	2200      	movs	r2, #0
 800461e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004620:	4b2f      	ldr	r3, [pc, #188]	@ (80046e0 <HAL_UART_MspInit+0x210>)
 8004622:	2200      	movs	r2, #0
 8004624:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004626:	4b2e      	ldr	r3, [pc, #184]	@ (80046e0 <HAL_UART_MspInit+0x210>)
 8004628:	2280      	movs	r2, #128	@ 0x80
 800462a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800462c:	4b2c      	ldr	r3, [pc, #176]	@ (80046e0 <HAL_UART_MspInit+0x210>)
 800462e:	2200      	movs	r2, #0
 8004630:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004632:	4b2b      	ldr	r3, [pc, #172]	@ (80046e0 <HAL_UART_MspInit+0x210>)
 8004634:	2200      	movs	r2, #0
 8004636:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8004638:	4b29      	ldr	r3, [pc, #164]	@ (80046e0 <HAL_UART_MspInit+0x210>)
 800463a:	2200      	movs	r2, #0
 800463c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800463e:	4b28      	ldr	r3, [pc, #160]	@ (80046e0 <HAL_UART_MspInit+0x210>)
 8004640:	22c0      	movs	r2, #192	@ 0xc0
 8004642:	0192      	lsls	r2, r2, #6
 8004644:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004646:	4b26      	ldr	r3, [pc, #152]	@ (80046e0 <HAL_UART_MspInit+0x210>)
 8004648:	0018      	movs	r0, r3
 800464a:	f000 fba3 	bl	8004d94 <HAL_DMA_Init>
 800464e:	1e03      	subs	r3, r0, #0
 8004650:	d001      	beq.n	8004656 <HAL_UART_MspInit+0x186>
    {
      Error_Handler();
 8004652:	f7fe fdc3 	bl	80031dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2180      	movs	r1, #128	@ 0x80
 800465a:	4a21      	ldr	r2, [pc, #132]	@ (80046e0 <HAL_UART_MspInit+0x210>)
 800465c:	505a      	str	r2, [r3, r1]
 800465e:	4b20      	ldr	r3, [pc, #128]	@ (80046e0 <HAL_UART_MspInit+0x210>)
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel3;
 8004664:	4b20      	ldr	r3, [pc, #128]	@ (80046e8 <HAL_UART_MspInit+0x218>)
 8004666:	4a21      	ldr	r2, [pc, #132]	@ (80046ec <HAL_UART_MspInit+0x21c>)
 8004668:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800466a:	4b1f      	ldr	r3, [pc, #124]	@ (80046e8 <HAL_UART_MspInit+0x218>)
 800466c:	2233      	movs	r2, #51	@ 0x33
 800466e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004670:	4b1d      	ldr	r3, [pc, #116]	@ (80046e8 <HAL_UART_MspInit+0x218>)
 8004672:	2210      	movs	r2, #16
 8004674:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004676:	4b1c      	ldr	r3, [pc, #112]	@ (80046e8 <HAL_UART_MspInit+0x218>)
 8004678:	2200      	movs	r2, #0
 800467a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800467c:	4b1a      	ldr	r3, [pc, #104]	@ (80046e8 <HAL_UART_MspInit+0x218>)
 800467e:	2280      	movs	r2, #128	@ 0x80
 8004680:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004682:	4b19      	ldr	r3, [pc, #100]	@ (80046e8 <HAL_UART_MspInit+0x218>)
 8004684:	2200      	movs	r2, #0
 8004686:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004688:	4b17      	ldr	r3, [pc, #92]	@ (80046e8 <HAL_UART_MspInit+0x218>)
 800468a:	2200      	movs	r2, #0
 800468c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800468e:	4b16      	ldr	r3, [pc, #88]	@ (80046e8 <HAL_UART_MspInit+0x218>)
 8004690:	2200      	movs	r2, #0
 8004692:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004694:	4b14      	ldr	r3, [pc, #80]	@ (80046e8 <HAL_UART_MspInit+0x218>)
 8004696:	2280      	movs	r2, #128	@ 0x80
 8004698:	0192      	lsls	r2, r2, #6
 800469a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800469c:	4b12      	ldr	r3, [pc, #72]	@ (80046e8 <HAL_UART_MspInit+0x218>)
 800469e:	0018      	movs	r0, r3
 80046a0:	f000 fb78 	bl	8004d94 <HAL_DMA_Init>
 80046a4:	1e03      	subs	r3, r0, #0
 80046a6:	d001      	beq.n	80046ac <HAL_UART_MspInit+0x1dc>
    {
      Error_Handler();
 80046a8:	f7fe fd98 	bl	80031dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4a0e      	ldr	r2, [pc, #56]	@ (80046e8 <HAL_UART_MspInit+0x218>)
 80046b0:	67da      	str	r2, [r3, #124]	@ 0x7c
 80046b2:	4b0d      	ldr	r3, [pc, #52]	@ (80046e8 <HAL_UART_MspInit+0x218>)
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80046b8:	2200      	movs	r2, #0
 80046ba:	2100      	movs	r1, #0
 80046bc:	201b      	movs	r0, #27
 80046be:	f000 fb27 	bl	8004d10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80046c2:	201b      	movs	r0, #27
 80046c4:	f000 fb39 	bl	8004d3a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80046c8:	46c0      	nop			@ (mov r8, r8)
 80046ca:	46bd      	mov	sp, r7
 80046cc:	b015      	add	sp, #84	@ 0x54
 80046ce:	bd90      	pop	{r4, r7, pc}
 80046d0:	40013800 	.word	0x40013800
 80046d4:	40021000 	.word	0x40021000
 80046d8:	50000800 	.word	0x50000800
 80046dc:	50000400 	.word	0x50000400
 80046e0:	200005a0 	.word	0x200005a0
 80046e4:	4002001c 	.word	0x4002001c
 80046e8:	200005fc 	.word	0x200005fc
 80046ec:	40020030 	.word	0x40020030

080046f0 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a17      	ldr	r2, [pc, #92]	@ (800475c <HAL_UART_MspDeInit+0x6c>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d127      	bne.n	8004752 <HAL_UART_MspDeInit+0x62>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8004702:	4b17      	ldr	r3, [pc, #92]	@ (8004760 <HAL_UART_MspDeInit+0x70>)
 8004704:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004706:	4b16      	ldr	r3, [pc, #88]	@ (8004760 <HAL_UART_MspDeInit+0x70>)
 8004708:	4916      	ldr	r1, [pc, #88]	@ (8004764 <HAL_UART_MspDeInit+0x74>)
 800470a:	400a      	ands	r2, r1
 800470c:	641a      	str	r2, [r3, #64]	@ 0x40
    /**USART1 GPIO Configuration
    PC14-OSCX_IN(PC14)     ------> USART1_TX
    PB2     ------> USART1_RX
    PA12 [PA10]     ------> USART1_DE
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_14);
 800470e:	2380      	movs	r3, #128	@ 0x80
 8004710:	01db      	lsls	r3, r3, #7
 8004712:	4a15      	ldr	r2, [pc, #84]	@ (8004768 <HAL_UART_MspDeInit+0x78>)
 8004714:	0019      	movs	r1, r3
 8004716:	0010      	movs	r0, r2
 8004718:	f001 f86c 	bl	80057f4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2);
 800471c:	4b13      	ldr	r3, [pc, #76]	@ (800476c <HAL_UART_MspDeInit+0x7c>)
 800471e:	2104      	movs	r1, #4
 8004720:	0018      	movs	r0, r3
 8004722:	f001 f867 	bl	80057f4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_12);
 8004726:	2380      	movs	r3, #128	@ 0x80
 8004728:	015a      	lsls	r2, r3, #5
 800472a:	23a0      	movs	r3, #160	@ 0xa0
 800472c:	05db      	lsls	r3, r3, #23
 800472e:	0011      	movs	r1, r2
 8004730:	0018      	movs	r0, r3
 8004732:	f001 f85f 	bl	80057f4 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2280      	movs	r2, #128	@ 0x80
 800473a:	589b      	ldr	r3, [r3, r2]
 800473c:	0018      	movs	r0, r3
 800473e:	f000 fbb3 	bl	8004ea8 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004746:	0018      	movs	r0, r3
 8004748:	f000 fbae 	bl	8004ea8 <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800474c:	201b      	movs	r0, #27
 800474e:	f000 fb04 	bl	8004d5a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8004752:	46c0      	nop			@ (mov r8, r8)
 8004754:	46bd      	mov	sp, r7
 8004756:	b002      	add	sp, #8
 8004758:	bd80      	pop	{r7, pc}
 800475a:	46c0      	nop			@ (mov r8, r8)
 800475c:	40013800 	.word	0x40013800
 8004760:	40021000 	.word	0x40021000
 8004764:	ffffbfff 	.word	0xffffbfff
 8004768:	50000800 	.word	0x50000800
 800476c:	50000400 	.word	0x50000400

08004770 <LL_ADC_IsActiveFlag_OVR>:
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_OVR) == (LL_ADC_FLAG_OVR)) ? 1UL : 0UL);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2210      	movs	r2, #16
 800477e:	4013      	ands	r3, r2
 8004780:	2b10      	cmp	r3, #16
 8004782:	d101      	bne.n	8004788 <LL_ADC_IsActiveFlag_OVR+0x18>
 8004784:	2301      	movs	r3, #1
 8004786:	e000      	b.n	800478a <LL_ADC_IsActiveFlag_OVR+0x1a>
 8004788:	2300      	movs	r3, #0
}
 800478a:	0018      	movs	r0, r3
 800478c:	46bd      	mov	sp, r7
 800478e:	b002      	add	sp, #8
 8004790:	bd80      	pop	{r7, pc}

08004792 <LL_ADC_ClearFlag_OVR>:
{
 8004792:	b580      	push	{r7, lr}
 8004794:	b082      	sub	sp, #8
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_OVR);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2210      	movs	r2, #16
 800479e:	601a      	str	r2, [r3, #0]
}
 80047a0:	46c0      	nop			@ (mov r8, r8)
 80047a2:	46bd      	mov	sp, r7
 80047a4:	b002      	add	sp, #8
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <LL_DMA_IsActiveFlag_TC1>:
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF1) == (DMA_ISR_TCIF1)) ? 1UL : 0UL);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2202      	movs	r2, #2
 80047b6:	4013      	ands	r3, r2
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d101      	bne.n	80047c0 <LL_DMA_IsActiveFlag_TC1+0x18>
 80047bc:	2301      	movs	r3, #1
 80047be:	e000      	b.n	80047c2 <LL_DMA_IsActiveFlag_TC1+0x1a>
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	0018      	movs	r0, r3
 80047c4:	46bd      	mov	sp, r7
 80047c6:	b002      	add	sp, #8
 80047c8:	bd80      	pop	{r7, pc}

080047ca <LL_DMA_IsActiveFlag_HT1>:
{
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b082      	sub	sp, #8
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF1) == (DMA_ISR_HTIF1)) ? 1UL : 0UL);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2204      	movs	r2, #4
 80047d8:	4013      	ands	r3, r2
 80047da:	2b04      	cmp	r3, #4
 80047dc:	d101      	bne.n	80047e2 <LL_DMA_IsActiveFlag_HT1+0x18>
 80047de:	2301      	movs	r3, #1
 80047e0:	e000      	b.n	80047e4 <LL_DMA_IsActiveFlag_HT1+0x1a>
 80047e2:	2300      	movs	r3, #0
}
 80047e4:	0018      	movs	r0, r3
 80047e6:	46bd      	mov	sp, r7
 80047e8:	b002      	add	sp, #8
 80047ea:	bd80      	pop	{r7, pc}

080047ec <LL_DMA_IsActiveFlag_TE1>:
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF1) == (DMA_ISR_TEIF1)) ? 1UL : 0UL);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2208      	movs	r2, #8
 80047fa:	4013      	ands	r3, r2
 80047fc:	2b08      	cmp	r3, #8
 80047fe:	d101      	bne.n	8004804 <LL_DMA_IsActiveFlag_TE1+0x18>
 8004800:	2301      	movs	r3, #1
 8004802:	e000      	b.n	8004806 <LL_DMA_IsActiveFlag_TE1+0x1a>
 8004804:	2300      	movs	r3, #0
}
 8004806:	0018      	movs	r0, r3
 8004808:	46bd      	mov	sp, r7
 800480a:	b002      	add	sp, #8
 800480c:	bd80      	pop	{r7, pc}

0800480e <LL_DMA_ClearFlag_TC1>:
{
 800480e:	b580      	push	{r7, lr}
 8004810:	b082      	sub	sp, #8
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2202      	movs	r2, #2
 800481a:	605a      	str	r2, [r3, #4]
}
 800481c:	46c0      	nop			@ (mov r8, r8)
 800481e:	46bd      	mov	sp, r7
 8004820:	b002      	add	sp, #8
 8004822:	bd80      	pop	{r7, pc}

08004824 <LL_DMA_ClearFlag_HT1>:
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b082      	sub	sp, #8
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF1);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2204      	movs	r2, #4
 8004830:	605a      	str	r2, [r3, #4]
}
 8004832:	46c0      	nop			@ (mov r8, r8)
 8004834:	46bd      	mov	sp, r7
 8004836:	b002      	add	sp, #8
 8004838:	bd80      	pop	{r7, pc}

0800483a <LL_DMA_ClearFlag_TE1>:
{
 800483a:	b580      	push	{r7, lr}
 800483c:	b082      	sub	sp, #8
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF1);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2208      	movs	r2, #8
 8004846:	605a      	str	r2, [r3, #4]
}
 8004848:	46c0      	nop			@ (mov r8, r8)
 800484a:	46bd      	mov	sp, r7
 800484c:	b002      	add	sp, #8
 800484e:	bd80      	pop	{r7, pc}

08004850 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004854:	46c0      	nop			@ (mov r8, r8)
 8004856:	e7fd      	b.n	8004854 <NMI_Handler+0x4>

08004858 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800485c:	46c0      	nop			@ (mov r8, r8)
 800485e:	e7fd      	b.n	800485c <HardFault_Handler+0x4>

08004860 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004864:	46c0      	nop			@ (mov r8, r8)
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}

0800486a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800486a:	b580      	push	{r7, lr}
 800486c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800486e:	46c0      	nop			@ (mov r8, r8)
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004878:	f000 f93c 	bl	8004af4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800487c:	46c0      	nop			@ (mov r8, r8)
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}

08004882 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8004882:	b580      	push	{r7, lr}
 8004884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encoder_Pulse_A_Pin);
 8004886:	2380      	movs	r3, #128	@ 0x80
 8004888:	019b      	lsls	r3, r3, #6
 800488a:	0018      	movs	r0, r3
 800488c:	f001 f8c4 	bl	8005a18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8004890:	46c0      	nop			@ (mov r8, r8)
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
	...

08004898 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
  /* Check whether DMA transfer complete caused the DMA interruption */
  if(LL_DMA_IsActiveFlag_TC1(DMA1) == 1)
 800489c:	4b15      	ldr	r3, [pc, #84]	@ (80048f4 <DMA1_Channel1_IRQHandler+0x5c>)
 800489e:	0018      	movs	r0, r3
 80048a0:	f7ff ff82 	bl	80047a8 <LL_DMA_IsActiveFlag_TC1>
 80048a4:	0003      	movs	r3, r0
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d106      	bne.n	80048b8 <DMA1_Channel1_IRQHandler+0x20>
  {
	/* Clear flag DMA transfer complete */
	LL_DMA_ClearFlag_TC1(DMA1);
 80048aa:	4b12      	ldr	r3, [pc, #72]	@ (80048f4 <DMA1_Channel1_IRQHandler+0x5c>)
 80048ac:	0018      	movs	r0, r3
 80048ae:	f7ff ffae 	bl	800480e <LL_DMA_ClearFlag_TC1>

	/* Call interruption treatment function */
	ADC_ConvCpltCallback();
 80048b2:	f7ff fb0b 	bl	8003ecc <ADC_ConvCpltCallback>
 80048b6:	e00c      	b.n	80048d2 <DMA1_Channel1_IRQHandler+0x3a>
  }
  else if(LL_DMA_IsActiveFlag_HT1(DMA1) == 1)
 80048b8:	4b0e      	ldr	r3, [pc, #56]	@ (80048f4 <DMA1_Channel1_IRQHandler+0x5c>)
 80048ba:	0018      	movs	r0, r3
 80048bc:	f7ff ff85 	bl	80047ca <LL_DMA_IsActiveFlag_HT1>
 80048c0:	0003      	movs	r3, r0
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d105      	bne.n	80048d2 <DMA1_Channel1_IRQHandler+0x3a>
  {
	  /* Clear flag DMA half transfer complete */
	  LL_DMA_ClearFlag_HT1(DMA1);
 80048c6:	4b0b      	ldr	r3, [pc, #44]	@ (80048f4 <DMA1_Channel1_IRQHandler+0x5c>)
 80048c8:	0018      	movs	r0, r3
 80048ca:	f7ff ffab 	bl	8004824 <LL_DMA_ClearFlag_HT1>

	  /* Call interruption treatment function */
	  ADC_ConvHalfCpltCallback();
 80048ce:	f7ff fb07 	bl	8003ee0 <ADC_ConvHalfCpltCallback>
  }
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
  /* Check whether DMA transfer error caused the DMA interruption */
  if(LL_DMA_IsActiveFlag_TE1(DMA1) == 1)
 80048d2:	4b08      	ldr	r3, [pc, #32]	@ (80048f4 <DMA1_Channel1_IRQHandler+0x5c>)
 80048d4:	0018      	movs	r0, r3
 80048d6:	f7ff ff89 	bl	80047ec <LL_DMA_IsActiveFlag_TE1>
 80048da:	0003      	movs	r3, r0
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d105      	bne.n	80048ec <DMA1_Channel1_IRQHandler+0x54>
  {
	  /* Clear flag DMA transfer error */
	  LL_DMA_ClearFlag_TE1(DMA1);
 80048e0:	4b04      	ldr	r3, [pc, #16]	@ (80048f4 <DMA1_Channel1_IRQHandler+0x5c>)
 80048e2:	0018      	movs	r0, r3
 80048e4:	f7ff ffa9 	bl	800483a <LL_DMA_ClearFlag_TE1>

	  /* Call interruption treatment function */
	  ADC_ErrorCallback();
 80048e8:	f7ff fb04 	bl	8003ef4 <ADC_ErrorCallback>
  }
  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80048ec:	46c0      	nop			@ (mov r8, r8)
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	46c0      	nop			@ (mov r8, r8)
 80048f4:	40020000 	.word	0x40020000

080048f8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80048fc:	4b05      	ldr	r3, [pc, #20]	@ (8004914 <DMA1_Channel2_3_IRQHandler+0x1c>)
 80048fe:	0018      	movs	r0, r3
 8004900:	f000 fcae 	bl	8005260 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004904:	4b04      	ldr	r3, [pc, #16]	@ (8004918 <DMA1_Channel2_3_IRQHandler+0x20>)
 8004906:	0018      	movs	r0, r3
 8004908:	f000 fcaa 	bl	8005260 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800490c:	46c0      	nop			@ (mov r8, r8)
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	46c0      	nop			@ (mov r8, r8)
 8004914:	200005a0 	.word	0x200005a0
 8004918:	200005fc 	.word	0x200005fc

0800491c <DMAMUX1_DMA1_CH4_5_IRQHandler>:

/**
  * @brief This function handles DMAMUX1, DMA1 Channel 4 and 5.
  */
void DMAMUX1_DMA1_CH4_5_IRQHandler(void)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_DMA1_CH4_5_IRQn 0 */

  /* USER CODE END DMAMUX1_DMA1_CH4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8004920:	4b05      	ldr	r3, [pc, #20]	@ (8004938 <DMAMUX1_DMA1_CH4_5_IRQHandler+0x1c>)
 8004922:	0018      	movs	r0, r3
 8004924:	f000 fc9c 	bl	8005260 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8004928:	4b04      	ldr	r3, [pc, #16]	@ (800493c <DMAMUX1_DMA1_CH4_5_IRQHandler+0x20>)
 800492a:	0018      	movs	r0, r3
 800492c:	f000 fc98 	bl	8005260 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_DMA1_CH4_5_IRQn 1 */

  /* USER CODE END DMAMUX1_DMA1_CH4_5_IRQn 1 */
}
 8004930:	46c0      	nop			@ (mov r8, r8)
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	46c0      	nop			@ (mov r8, r8)
 8004938:	20000358 	.word	0x20000358
 800493c:	200003b4 	.word	0x200003b4

08004940 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */
  /* Check whether ADC group regular overrun caused the ADC interruption */
  if(LL_ADC_IsActiveFlag_OVR(ADC1) != 0)
 8004944:	4b07      	ldr	r3, [pc, #28]	@ (8004964 <ADC1_IRQHandler+0x24>)
 8004946:	0018      	movs	r0, r3
 8004948:	f7ff ff12 	bl	8004770 <LL_ADC_IsActiveFlag_OVR>
 800494c:	1e03      	subs	r3, r0, #0
 800494e:	d005      	beq.n	800495c <ADC1_IRQHandler+0x1c>
  {
	/* Clear flag ADC group regular overrun */
	LL_ADC_ClearFlag_OVR(ADC1);
 8004950:	4b04      	ldr	r3, [pc, #16]	@ (8004964 <ADC1_IRQHandler+0x24>)
 8004952:	0018      	movs	r0, r3
 8004954:	f7ff ff1d 	bl	8004792 <LL_ADC_ClearFlag_OVR>

	/* Call interruption treatment function */
	ADC_ErrorCallback();
 8004958:	f7ff facc 	bl	8003ef4 <ADC_ErrorCallback>
  }
  /* USER CODE END ADC1_IRQn 0 */
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800495c:	46c0      	nop			@ (mov r8, r8)
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	46c0      	nop			@ (mov r8, r8)
 8004964:	40012400 	.word	0x40012400

08004968 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800496c:	4b03      	ldr	r3, [pc, #12]	@ (800497c <TIM14_IRQHandler+0x14>)
 800496e:	0018      	movs	r0, r3
 8004970:	f004 fdf4 	bl	800955c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8004974:	46c0      	nop			@ (mov r8, r8)
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	46c0      	nop			@ (mov r8, r8)
 800497c:	200004c0 	.word	0x200004c0

08004980 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 interrupt (combined with EXTI 23).
  */
void I2C1_IRQHandler(void)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8004984:	4b09      	ldr	r3, [pc, #36]	@ (80049ac <I2C1_IRQHandler+0x2c>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	699a      	ldr	r2, [r3, #24]
 800498a:	23e0      	movs	r3, #224	@ 0xe0
 800498c:	00db      	lsls	r3, r3, #3
 800498e:	4013      	ands	r3, r2
 8004990:	d004      	beq.n	800499c <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8004992:	4b06      	ldr	r3, [pc, #24]	@ (80049ac <I2C1_IRQHandler+0x2c>)
 8004994:	0018      	movs	r0, r3
 8004996:	f001 fc93 	bl	80062c0 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800499a:	e003      	b.n	80049a4 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800499c:	4b03      	ldr	r3, [pc, #12]	@ (80049ac <I2C1_IRQHandler+0x2c>)
 800499e:	0018      	movs	r0, r3
 80049a0:	f001 fc74 	bl	800628c <HAL_I2C_EV_IRQHandler>
}
 80049a4:	46c0      	nop			@ (mov r8, r8)
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	46c0      	nop			@ (mov r8, r8)
 80049ac:	20000304 	.word	0x20000304

080049b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 interrupt.
  */
void USART1_IRQHandler(void)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80049b4:	4b03      	ldr	r3, [pc, #12]	@ (80049c4 <USART1_IRQHandler+0x14>)
 80049b6:	0018      	movs	r0, r3
 80049b8:	f005 fe36 	bl	800a628 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80049bc:	46c0      	nop			@ (mov r8, r8)
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	46c0      	nop			@ (mov r8, r8)
 80049c4:	2000050c 	.word	0x2000050c

080049c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80049cc:	4b03      	ldr	r3, [pc, #12]	@ (80049dc <SystemInit+0x14>)
 80049ce:	2280      	movs	r2, #128	@ 0x80
 80049d0:	0512      	lsls	r2, r2, #20
 80049d2:	609a      	str	r2, [r3, #8]
#endif
}
 80049d4:	46c0      	nop			@ (mov r8, r8)
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	46c0      	nop			@ (mov r8, r8)
 80049dc:	e000ed00 	.word	0xe000ed00

080049e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80049e0:	480d      	ldr	r0, [pc, #52]	@ (8004a18 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80049e2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80049e4:	f7ff fff0 	bl	80049c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80049e8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80049ea:	e003      	b.n	80049f4 <LoopCopyDataInit>

080049ec <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80049ec:	4b0b      	ldr	r3, [pc, #44]	@ (8004a1c <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80049ee:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80049f0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80049f2:	3104      	adds	r1, #4

080049f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80049f4:	480a      	ldr	r0, [pc, #40]	@ (8004a20 <LoopForever+0xa>)
  ldr r3, =_edata
 80049f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004a24 <LoopForever+0xe>)
  adds r2, r0, r1
 80049f8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80049fa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80049fc:	d3f6      	bcc.n	80049ec <CopyDataInit>
  ldr r2, =_sbss
 80049fe:	4a0a      	ldr	r2, [pc, #40]	@ (8004a28 <LoopForever+0x12>)
  b LoopFillZerobss
 8004a00:	e002      	b.n	8004a08 <LoopFillZerobss>

08004a02 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004a02:	2300      	movs	r3, #0
  str  r3, [r2]
 8004a04:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004a06:	3204      	adds	r2, #4

08004a08 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8004a08:	4b08      	ldr	r3, [pc, #32]	@ (8004a2c <LoopForever+0x16>)
  cmp r2, r3
 8004a0a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004a0c:	d3f9      	bcc.n	8004a02 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8004a0e:	f007 fb8d 	bl	800c12c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004a12:	f7fd fbab 	bl	800216c <main>

08004a16 <LoopForever>:

LoopForever:
    b LoopForever
 8004a16:	e7fe      	b.n	8004a16 <LoopForever>
  ldr   r0, =_estack
 8004a18:	20006000 	.word	0x20006000
  ldr r3, =_sidata
 8004a1c:	0800c5b4 	.word	0x0800c5b4
  ldr r0, =_sdata
 8004a20:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004a24:	200000c4 	.word	0x200000c4
  ldr r2, =_sbss
 8004a28:	200000c4 	.word	0x200000c4
  ldr r3, = _ebss
 8004a2c:	200008b8 	.word	0x200008b8

08004a30 <EXTI0_1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004a30:	e7fe      	b.n	8004a30 <EXTI0_1_IRQHandler>

08004a32 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a32:	b580      	push	{r7, lr}
 8004a34:	b082      	sub	sp, #8
 8004a36:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004a38:	1dfb      	adds	r3, r7, #7
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004a3e:	2003      	movs	r0, #3
 8004a40:	f000 f80e 	bl	8004a60 <HAL_InitTick>
 8004a44:	1e03      	subs	r3, r0, #0
 8004a46:	d003      	beq.n	8004a50 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8004a48:	1dfb      	adds	r3, r7, #7
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	701a      	strb	r2, [r3, #0]
 8004a4e:	e001      	b.n	8004a54 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004a50:	f7ff faf6 	bl	8004040 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004a54:	1dfb      	adds	r3, r7, #7
 8004a56:	781b      	ldrb	r3, [r3, #0]
}
 8004a58:	0018      	movs	r0, r3
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	b002      	add	sp, #8
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a60:	b590      	push	{r4, r7, lr}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004a68:	230f      	movs	r3, #15
 8004a6a:	18fb      	adds	r3, r7, r3
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8004a70:	4b1d      	ldr	r3, [pc, #116]	@ (8004ae8 <HAL_InitTick+0x88>)
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d02b      	beq.n	8004ad0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8004a78:	4b1c      	ldr	r3, [pc, #112]	@ (8004aec <HAL_InitTick+0x8c>)
 8004a7a:	681c      	ldr	r4, [r3, #0]
 8004a7c:	4b1a      	ldr	r3, [pc, #104]	@ (8004ae8 <HAL_InitTick+0x88>)
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	0019      	movs	r1, r3
 8004a82:	23fa      	movs	r3, #250	@ 0xfa
 8004a84:	0098      	lsls	r0, r3, #2
 8004a86:	f7fb fb3f 	bl	8000108 <__udivsi3>
 8004a8a:	0003      	movs	r3, r0
 8004a8c:	0019      	movs	r1, r3
 8004a8e:	0020      	movs	r0, r4
 8004a90:	f7fb fb3a 	bl	8000108 <__udivsi3>
 8004a94:	0003      	movs	r3, r0
 8004a96:	0018      	movs	r0, r3
 8004a98:	f000 f96f 	bl	8004d7a <HAL_SYSTICK_Config>
 8004a9c:	1e03      	subs	r3, r0, #0
 8004a9e:	d112      	bne.n	8004ac6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2b03      	cmp	r3, #3
 8004aa4:	d80a      	bhi.n	8004abc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004aa6:	6879      	ldr	r1, [r7, #4]
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	425b      	negs	r3, r3
 8004aac:	2200      	movs	r2, #0
 8004aae:	0018      	movs	r0, r3
 8004ab0:	f000 f92e 	bl	8004d10 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004ab4:	4b0e      	ldr	r3, [pc, #56]	@ (8004af0 <HAL_InitTick+0x90>)
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	601a      	str	r2, [r3, #0]
 8004aba:	e00d      	b.n	8004ad8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8004abc:	230f      	movs	r3, #15
 8004abe:	18fb      	adds	r3, r7, r3
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	701a      	strb	r2, [r3, #0]
 8004ac4:	e008      	b.n	8004ad8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004ac6:	230f      	movs	r3, #15
 8004ac8:	18fb      	adds	r3, r7, r3
 8004aca:	2201      	movs	r2, #1
 8004acc:	701a      	strb	r2, [r3, #0]
 8004ace:	e003      	b.n	8004ad8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004ad0:	230f      	movs	r3, #15
 8004ad2:	18fb      	adds	r3, r7, r3
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8004ad8:	230f      	movs	r3, #15
 8004ada:	18fb      	adds	r3, r7, r3
 8004adc:	781b      	ldrb	r3, [r3, #0]
}
 8004ade:	0018      	movs	r0, r3
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	b005      	add	sp, #20
 8004ae4:	bd90      	pop	{r4, r7, pc}
 8004ae6:	46c0      	nop			@ (mov r8, r8)
 8004ae8:	200000c0 	.word	0x200000c0
 8004aec:	200000b8 	.word	0x200000b8
 8004af0:	200000bc 	.word	0x200000bc

08004af4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004af8:	4b05      	ldr	r3, [pc, #20]	@ (8004b10 <HAL_IncTick+0x1c>)
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	001a      	movs	r2, r3
 8004afe:	4b05      	ldr	r3, [pc, #20]	@ (8004b14 <HAL_IncTick+0x20>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	18d2      	adds	r2, r2, r3
 8004b04:	4b03      	ldr	r3, [pc, #12]	@ (8004b14 <HAL_IncTick+0x20>)
 8004b06:	601a      	str	r2, [r3, #0]
}
 8004b08:	46c0      	nop			@ (mov r8, r8)
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	46c0      	nop			@ (mov r8, r8)
 8004b10:	200000c0 	.word	0x200000c0
 8004b14:	200008b4 	.word	0x200008b4

08004b18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	af00      	add	r7, sp, #0
  return uwTick;
 8004b1c:	4b02      	ldr	r3, [pc, #8]	@ (8004b28 <HAL_GetTick+0x10>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
}
 8004b20:	0018      	movs	r0, r3
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	46c0      	nop			@ (mov r8, r8)
 8004b28:	200008b4 	.word	0x200008b4

08004b2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004b34:	f7ff fff0 	bl	8004b18 <HAL_GetTick>
 8004b38:	0003      	movs	r3, r0
 8004b3a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	3301      	adds	r3, #1
 8004b44:	d005      	beq.n	8004b52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004b46:	4b0a      	ldr	r3, [pc, #40]	@ (8004b70 <HAL_Delay+0x44>)
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	001a      	movs	r2, r3
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	189b      	adds	r3, r3, r2
 8004b50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004b52:	46c0      	nop			@ (mov r8, r8)
 8004b54:	f7ff ffe0 	bl	8004b18 <HAL_GetTick>
 8004b58:	0002      	movs	r2, r0
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d8f7      	bhi.n	8004b54 <HAL_Delay+0x28>
  {
  }
}
 8004b64:	46c0      	nop			@ (mov r8, r8)
 8004b66:	46c0      	nop			@ (mov r8, r8)
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	b004      	add	sp, #16
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	46c0      	nop			@ (mov r8, r8)
 8004b70:	200000c0 	.word	0x200000c0

08004b74 <__NVIC_EnableIRQ>:
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	0002      	movs	r2, r0
 8004b7c:	1dfb      	adds	r3, r7, #7
 8004b7e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004b80:	1dfb      	adds	r3, r7, #7
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	2b7f      	cmp	r3, #127	@ 0x7f
 8004b86:	d809      	bhi.n	8004b9c <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b88:	1dfb      	adds	r3, r7, #7
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	001a      	movs	r2, r3
 8004b8e:	231f      	movs	r3, #31
 8004b90:	401a      	ands	r2, r3
 8004b92:	4b04      	ldr	r3, [pc, #16]	@ (8004ba4 <__NVIC_EnableIRQ+0x30>)
 8004b94:	2101      	movs	r1, #1
 8004b96:	4091      	lsls	r1, r2
 8004b98:	000a      	movs	r2, r1
 8004b9a:	601a      	str	r2, [r3, #0]
}
 8004b9c:	46c0      	nop			@ (mov r8, r8)
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	b002      	add	sp, #8
 8004ba2:	bd80      	pop	{r7, pc}
 8004ba4:	e000e100 	.word	0xe000e100

08004ba8 <__NVIC_DisableIRQ>:
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	0002      	movs	r2, r0
 8004bb0:	1dfb      	adds	r3, r7, #7
 8004bb2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004bb4:	1dfb      	adds	r3, r7, #7
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	2b7f      	cmp	r3, #127	@ 0x7f
 8004bba:	d810      	bhi.n	8004bde <__NVIC_DisableIRQ+0x36>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bbc:	1dfb      	adds	r3, r7, #7
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	001a      	movs	r2, r3
 8004bc2:	231f      	movs	r3, #31
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	4908      	ldr	r1, [pc, #32]	@ (8004be8 <__NVIC_DisableIRQ+0x40>)
 8004bc8:	2201      	movs	r2, #1
 8004bca:	409a      	lsls	r2, r3
 8004bcc:	0013      	movs	r3, r2
 8004bce:	2280      	movs	r2, #128	@ 0x80
 8004bd0:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004bd2:	f3bf 8f4f 	dsb	sy
}
 8004bd6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8004bd8:	f3bf 8f6f 	isb	sy
}
 8004bdc:	46c0      	nop			@ (mov r8, r8)
}
 8004bde:	46c0      	nop			@ (mov r8, r8)
 8004be0:	46bd      	mov	sp, r7
 8004be2:	b002      	add	sp, #8
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	46c0      	nop			@ (mov r8, r8)
 8004be8:	e000e100 	.word	0xe000e100

08004bec <__NVIC_SetPriority>:
{
 8004bec:	b590      	push	{r4, r7, lr}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	0002      	movs	r2, r0
 8004bf4:	6039      	str	r1, [r7, #0]
 8004bf6:	1dfb      	adds	r3, r7, #7
 8004bf8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004bfa:	1dfb      	adds	r3, r7, #7
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	2b7f      	cmp	r3, #127	@ 0x7f
 8004c00:	d828      	bhi.n	8004c54 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004c02:	4a2f      	ldr	r2, [pc, #188]	@ (8004cc0 <__NVIC_SetPriority+0xd4>)
 8004c04:	1dfb      	adds	r3, r7, #7
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	b25b      	sxtb	r3, r3
 8004c0a:	089b      	lsrs	r3, r3, #2
 8004c0c:	33c0      	adds	r3, #192	@ 0xc0
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	589b      	ldr	r3, [r3, r2]
 8004c12:	1dfa      	adds	r2, r7, #7
 8004c14:	7812      	ldrb	r2, [r2, #0]
 8004c16:	0011      	movs	r1, r2
 8004c18:	2203      	movs	r2, #3
 8004c1a:	400a      	ands	r2, r1
 8004c1c:	00d2      	lsls	r2, r2, #3
 8004c1e:	21ff      	movs	r1, #255	@ 0xff
 8004c20:	4091      	lsls	r1, r2
 8004c22:	000a      	movs	r2, r1
 8004c24:	43d2      	mvns	r2, r2
 8004c26:	401a      	ands	r2, r3
 8004c28:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	019b      	lsls	r3, r3, #6
 8004c2e:	22ff      	movs	r2, #255	@ 0xff
 8004c30:	401a      	ands	r2, r3
 8004c32:	1dfb      	adds	r3, r7, #7
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	0018      	movs	r0, r3
 8004c38:	2303      	movs	r3, #3
 8004c3a:	4003      	ands	r3, r0
 8004c3c:	00db      	lsls	r3, r3, #3
 8004c3e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004c40:	481f      	ldr	r0, [pc, #124]	@ (8004cc0 <__NVIC_SetPriority+0xd4>)
 8004c42:	1dfb      	adds	r3, r7, #7
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	b25b      	sxtb	r3, r3
 8004c48:	089b      	lsrs	r3, r3, #2
 8004c4a:	430a      	orrs	r2, r1
 8004c4c:	33c0      	adds	r3, #192	@ 0xc0
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	501a      	str	r2, [r3, r0]
}
 8004c52:	e031      	b.n	8004cb8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004c54:	4a1b      	ldr	r2, [pc, #108]	@ (8004cc4 <__NVIC_SetPriority+0xd8>)
 8004c56:	1dfb      	adds	r3, r7, #7
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	0019      	movs	r1, r3
 8004c5c:	230f      	movs	r3, #15
 8004c5e:	400b      	ands	r3, r1
 8004c60:	3b08      	subs	r3, #8
 8004c62:	089b      	lsrs	r3, r3, #2
 8004c64:	3306      	adds	r3, #6
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	18d3      	adds	r3, r2, r3
 8004c6a:	3304      	adds	r3, #4
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	1dfa      	adds	r2, r7, #7
 8004c70:	7812      	ldrb	r2, [r2, #0]
 8004c72:	0011      	movs	r1, r2
 8004c74:	2203      	movs	r2, #3
 8004c76:	400a      	ands	r2, r1
 8004c78:	00d2      	lsls	r2, r2, #3
 8004c7a:	21ff      	movs	r1, #255	@ 0xff
 8004c7c:	4091      	lsls	r1, r2
 8004c7e:	000a      	movs	r2, r1
 8004c80:	43d2      	mvns	r2, r2
 8004c82:	401a      	ands	r2, r3
 8004c84:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	019b      	lsls	r3, r3, #6
 8004c8a:	22ff      	movs	r2, #255	@ 0xff
 8004c8c:	401a      	ands	r2, r3
 8004c8e:	1dfb      	adds	r3, r7, #7
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	0018      	movs	r0, r3
 8004c94:	2303      	movs	r3, #3
 8004c96:	4003      	ands	r3, r0
 8004c98:	00db      	lsls	r3, r3, #3
 8004c9a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004c9c:	4809      	ldr	r0, [pc, #36]	@ (8004cc4 <__NVIC_SetPriority+0xd8>)
 8004c9e:	1dfb      	adds	r3, r7, #7
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	001c      	movs	r4, r3
 8004ca4:	230f      	movs	r3, #15
 8004ca6:	4023      	ands	r3, r4
 8004ca8:	3b08      	subs	r3, #8
 8004caa:	089b      	lsrs	r3, r3, #2
 8004cac:	430a      	orrs	r2, r1
 8004cae:	3306      	adds	r3, #6
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	18c3      	adds	r3, r0, r3
 8004cb4:	3304      	adds	r3, #4
 8004cb6:	601a      	str	r2, [r3, #0]
}
 8004cb8:	46c0      	nop			@ (mov r8, r8)
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	b003      	add	sp, #12
 8004cbe:	bd90      	pop	{r4, r7, pc}
 8004cc0:	e000e100 	.word	0xe000e100
 8004cc4:	e000ed00 	.word	0xe000ed00

08004cc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	1e5a      	subs	r2, r3, #1
 8004cd4:	2380      	movs	r3, #128	@ 0x80
 8004cd6:	045b      	lsls	r3, r3, #17
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d301      	bcc.n	8004ce0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e010      	b.n	8004d02 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ce0:	4b0a      	ldr	r3, [pc, #40]	@ (8004d0c <SysTick_Config+0x44>)
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	3a01      	subs	r2, #1
 8004ce6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ce8:	2301      	movs	r3, #1
 8004cea:	425b      	negs	r3, r3
 8004cec:	2103      	movs	r1, #3
 8004cee:	0018      	movs	r0, r3
 8004cf0:	f7ff ff7c 	bl	8004bec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004cf4:	4b05      	ldr	r3, [pc, #20]	@ (8004d0c <SysTick_Config+0x44>)
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004cfa:	4b04      	ldr	r3, [pc, #16]	@ (8004d0c <SysTick_Config+0x44>)
 8004cfc:	2207      	movs	r2, #7
 8004cfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	0018      	movs	r0, r3
 8004d04:	46bd      	mov	sp, r7
 8004d06:	b002      	add	sp, #8
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	46c0      	nop			@ (mov r8, r8)
 8004d0c:	e000e010 	.word	0xe000e010

08004d10 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	60b9      	str	r1, [r7, #8]
 8004d18:	607a      	str	r2, [r7, #4]
 8004d1a:	210f      	movs	r1, #15
 8004d1c:	187b      	adds	r3, r7, r1
 8004d1e:	1c02      	adds	r2, r0, #0
 8004d20:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8004d22:	68ba      	ldr	r2, [r7, #8]
 8004d24:	187b      	adds	r3, r7, r1
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	b25b      	sxtb	r3, r3
 8004d2a:	0011      	movs	r1, r2
 8004d2c:	0018      	movs	r0, r3
 8004d2e:	f7ff ff5d 	bl	8004bec <__NVIC_SetPriority>
}
 8004d32:	46c0      	nop			@ (mov r8, r8)
 8004d34:	46bd      	mov	sp, r7
 8004d36:	b004      	add	sp, #16
 8004d38:	bd80      	pop	{r7, pc}

08004d3a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d3a:	b580      	push	{r7, lr}
 8004d3c:	b082      	sub	sp, #8
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	0002      	movs	r2, r0
 8004d42:	1dfb      	adds	r3, r7, #7
 8004d44:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d46:	1dfb      	adds	r3, r7, #7
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	b25b      	sxtb	r3, r3
 8004d4c:	0018      	movs	r0, r3
 8004d4e:	f7ff ff11 	bl	8004b74 <__NVIC_EnableIRQ>
}
 8004d52:	46c0      	nop			@ (mov r8, r8)
 8004d54:	46bd      	mov	sp, r7
 8004d56:	b002      	add	sp, #8
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b082      	sub	sp, #8
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	0002      	movs	r2, r0
 8004d62:	1dfb      	adds	r3, r7, #7
 8004d64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004d66:	1dfb      	adds	r3, r7, #7
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	b25b      	sxtb	r3, r3
 8004d6c:	0018      	movs	r0, r3
 8004d6e:	f7ff ff1b 	bl	8004ba8 <__NVIC_DisableIRQ>
}
 8004d72:	46c0      	nop			@ (mov r8, r8)
 8004d74:	46bd      	mov	sp, r7
 8004d76:	b002      	add	sp, #8
 8004d78:	bd80      	pop	{r7, pc}

08004d7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d7a:	b580      	push	{r7, lr}
 8004d7c:	b082      	sub	sp, #8
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	0018      	movs	r0, r3
 8004d86:	f7ff ff9f 	bl	8004cc8 <SysTick_Config>
 8004d8a:	0003      	movs	r3, r0
}
 8004d8c:	0018      	movs	r0, r3
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	b002      	add	sp, #8
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d101      	bne.n	8004da6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e077      	b.n	8004e96 <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a3d      	ldr	r2, [pc, #244]	@ (8004ea0 <HAL_DMA_Init+0x10c>)
 8004dac:	4694      	mov	ip, r2
 8004dae:	4463      	add	r3, ip
 8004db0:	2114      	movs	r1, #20
 8004db2:	0018      	movs	r0, r3
 8004db4:	f7fb f9a8 	bl	8000108 <__udivsi3>
 8004db8:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 8004dba:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2225      	movs	r2, #37	@ 0x25
 8004dc4:	2102      	movs	r1, #2
 8004dc6:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4934      	ldr	r1, [pc, #208]	@ (8004ea4 <HAL_DMA_Init+0x110>)
 8004dd4:	400a      	ands	r2, r1
 8004dd6:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	6819      	ldr	r1, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	689a      	ldr	r2, [r3, #8]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	431a      	orrs	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	691b      	ldr	r3, [r3, #16]
 8004dec:	431a      	orrs	r2, r3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	431a      	orrs	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	699b      	ldr	r3, [r3, #24]
 8004df8:	431a      	orrs	r2, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	69db      	ldr	r3, [r3, #28]
 8004dfe:	431a      	orrs	r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a1b      	ldr	r3, [r3, #32]
 8004e04:	431a      	orrs	r2, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	0018      	movs	r0, r3
 8004e12:	f000 fb2d 	bl	8005470 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	689a      	ldr	r2, [r3, #8]
 8004e1a:	2380      	movs	r3, #128	@ 0x80
 8004e1c:	01db      	lsls	r3, r3, #7
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d102      	bne.n	8004e28 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685a      	ldr	r2, [r3, #4]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e30:	21ff      	movs	r1, #255	@ 0xff
 8004e32:	400a      	ands	r2, r1
 8004e34:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004e3e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d011      	beq.n	8004e6c <HAL_DMA_Init+0xd8>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	2b04      	cmp	r3, #4
 8004e4e:	d80d      	bhi.n	8004e6c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	0018      	movs	r0, r3
 8004e54:	f000 fb38 	bl	80054c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8004e68:	605a      	str	r2, [r3, #4]
 8004e6a:	e008      	b.n	8004e7e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2225      	movs	r2, #37	@ 0x25
 8004e88:	2101      	movs	r1, #1
 8004e8a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2224      	movs	r2, #36	@ 0x24
 8004e90:	2100      	movs	r1, #0
 8004e92:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	0018      	movs	r0, r3
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	b002      	add	sp, #8
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	46c0      	nop			@ (mov r8, r8)
 8004ea0:	bffdfff8 	.word	0xbffdfff8
 8004ea4:	ffff800f 	.word	0xffff800f

08004ea8 <HAL_DMA_DeInit>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d101      	bne.n	8004eba <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e066      	b.n	8004f88 <HAL_DMA_DeInit+0xe0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2101      	movs	r1, #1
 8004ec6:	438a      	bics	r2, r1
 8004ec8:	601a      	str	r2, [r3, #0]

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a30      	ldr	r2, [pc, #192]	@ (8004f90 <HAL_DMA_DeInit+0xe8>)
 8004ed0:	4694      	mov	ip, r2
 8004ed2:	4463      	add	r3, ip
 8004ed4:	2114      	movs	r1, #20
 8004ed6:	0018      	movs	r0, r3
 8004ed8:	f7fb f916 	bl	8000108 <__udivsi3>
 8004edc:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 8004ede:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8004eec:	4b29      	ldr	r3, [pc, #164]	@ (8004f94 <HAL_DMA_DeInit+0xec>)
 8004eee:	6859      	ldr	r1, [r3, #4]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef4:	221c      	movs	r2, #28
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	2201      	movs	r2, #1
 8004efa:	409a      	lsls	r2, r3
 8004efc:	4b25      	ldr	r3, [pc, #148]	@ (8004f94 <HAL_DMA_DeInit+0xec>)
 8004efe:	430a      	orrs	r2, r1
 8004f00:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	0018      	movs	r0, r3
 8004f06:	f000 fab3 	bl	8005470 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f0e:	2200      	movs	r2, #0
 8004f10:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004f1a:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d010      	beq.n	8004f46 <HAL_DMA_DeInit+0x9e>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	2b04      	cmp	r3, #4
 8004f2a:	d80c      	bhi.n	8004f46 <HAL_DMA_DeInit+0x9e>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	0018      	movs	r0, r3
 8004f30:	f000 faca 	bl	80054c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f38:	2200      	movs	r2, #0
 8004f3a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8004f44:	605a      	str	r2, [r3, #4]
  }

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	639a      	str	r2, [r3, #56]	@ 0x38

  hdma->DMAmuxRequestGen = 0U;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma->DMAmuxRequestGenStatus = 0U;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2225      	movs	r2, #37	@ 0x25
 8004f7a:	2100      	movs	r1, #0
 8004f7c:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2224      	movs	r2, #36	@ 0x24
 8004f82:	2100      	movs	r1, #0
 8004f84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f86:	2300      	movs	r3, #0
}
 8004f88:	0018      	movs	r0, r3
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	b002      	add	sp, #8
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	bffdfff8 	.word	0xbffdfff8
 8004f94:	40020000 	.word	0x40020000

08004f98 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b086      	sub	sp, #24
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	607a      	str	r2, [r7, #4]
 8004fa4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fa6:	2317      	movs	r3, #23
 8004fa8:	18fb      	adds	r3, r7, r3
 8004faa:	2200      	movs	r2, #0
 8004fac:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2224      	movs	r2, #36	@ 0x24
 8004fb2:	5c9b      	ldrb	r3, [r3, r2]
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d101      	bne.n	8004fbc <HAL_DMA_Start_IT+0x24>
 8004fb8:	2302      	movs	r3, #2
 8004fba:	e070      	b.n	800509e <HAL_DMA_Start_IT+0x106>
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2224      	movs	r2, #36	@ 0x24
 8004fc0:	2101      	movs	r1, #1
 8004fc2:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2225      	movs	r2, #37	@ 0x25
 8004fc8:	5c9b      	ldrb	r3, [r3, r2]
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d157      	bne.n	8005080 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2225      	movs	r2, #37	@ 0x25
 8004fd4:	2102      	movs	r1, #2
 8004fd6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2101      	movs	r1, #1
 8004fea:	438a      	bics	r2, r1
 8004fec:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	68b9      	ldr	r1, [r7, #8]
 8004ff4:	68f8      	ldr	r0, [r7, #12]
 8004ff6:	f000 f9fb 	bl	80053f0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d008      	beq.n	8005014 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	210e      	movs	r1, #14
 800500e:	430a      	orrs	r2, r1
 8005010:	601a      	str	r2, [r3, #0]
 8005012:	e00f      	b.n	8005034 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	2104      	movs	r1, #4
 8005020:	438a      	bics	r2, r1
 8005022:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	210a      	movs	r1, #10
 8005030:	430a      	orrs	r2, r1
 8005032:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	2380      	movs	r3, #128	@ 0x80
 800503c:	025b      	lsls	r3, r3, #9
 800503e:	4013      	ands	r3, r2
 8005040:	d008      	beq.n	8005054 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800504c:	2180      	movs	r1, #128	@ 0x80
 800504e:	0049      	lsls	r1, r1, #1
 8005050:	430a      	orrs	r2, r1
 8005052:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005058:	2b00      	cmp	r3, #0
 800505a:	d008      	beq.n	800506e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005066:	2180      	movs	r1, #128	@ 0x80
 8005068:	0049      	lsls	r1, r1, #1
 800506a:	430a      	orrs	r2, r1
 800506c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2101      	movs	r1, #1
 800507a:	430a      	orrs	r2, r1
 800507c:	601a      	str	r2, [r3, #0]
 800507e:	e007      	b.n	8005090 <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2224      	movs	r2, #36	@ 0x24
 8005084:	2100      	movs	r1, #0
 8005086:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8005088:	2317      	movs	r3, #23
 800508a:	18fb      	adds	r3, r7, r3
 800508c:	2202      	movs	r2, #2
 800508e:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2224      	movs	r2, #36	@ 0x24
 8005094:	2100      	movs	r1, #0
 8005096:	5499      	strb	r1, [r3, r2]

  return status;
 8005098:	2317      	movs	r3, #23
 800509a:	18fb      	adds	r3, r7, r3
 800509c:	781b      	ldrb	r3, [r3, #0]
}
 800509e:	0018      	movs	r0, r3
 80050a0:	46bd      	mov	sp, r7
 80050a2:	b006      	add	sp, #24
 80050a4:	bd80      	pop	{r7, pc}
	...

080050a8 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d101      	bne.n	80050ba <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e050      	b.n	800515c <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2225      	movs	r2, #37	@ 0x25
 80050be:	5c9b      	ldrb	r3, [r3, r2]
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	d008      	beq.n	80050d8 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2204      	movs	r2, #4
 80050ca:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2224      	movs	r2, #36	@ 0x24
 80050d0:	2100      	movs	r1, #0
 80050d2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e041      	b.n	800515c <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	210e      	movs	r1, #14
 80050e4:	438a      	bics	r2, r1
 80050e6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050f2:	491c      	ldr	r1, [pc, #112]	@ (8005164 <HAL_DMA_Abort+0xbc>)
 80050f4:	400a      	ands	r2, r1
 80050f6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2101      	movs	r1, #1
 8005104:	438a      	bics	r2, r1
 8005106:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 8005108:	4b17      	ldr	r3, [pc, #92]	@ (8005168 <HAL_DMA_Abort+0xc0>)
 800510a:	6859      	ldr	r1, [r3, #4]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005110:	221c      	movs	r2, #28
 8005112:	4013      	ands	r3, r2
 8005114:	2201      	movs	r2, #1
 8005116:	409a      	lsls	r2, r3
 8005118:	4b13      	ldr	r3, [pc, #76]	@ (8005168 <HAL_DMA_Abort+0xc0>)
 800511a:	430a      	orrs	r2, r1
 800511c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005126:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800512c:	2b00      	cmp	r3, #0
 800512e:	d00c      	beq.n	800514a <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800513a:	490a      	ldr	r1, [pc, #40]	@ (8005164 <HAL_DMA_Abort+0xbc>)
 800513c:	400a      	ands	r2, r1
 800513e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8005148:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2225      	movs	r2, #37	@ 0x25
 800514e:	2101      	movs	r1, #1
 8005150:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2224      	movs	r2, #36	@ 0x24
 8005156:	2100      	movs	r1, #0
 8005158:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800515a:	2300      	movs	r3, #0
}
 800515c:	0018      	movs	r0, r3
 800515e:	46bd      	mov	sp, r7
 8005160:	b002      	add	sp, #8
 8005162:	bd80      	pop	{r7, pc}
 8005164:	fffffeff 	.word	0xfffffeff
 8005168:	40020000 	.word	0x40020000

0800516c <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b084      	sub	sp, #16
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005174:	230f      	movs	r3, #15
 8005176:	18fb      	adds	r3, r7, r3
 8005178:	2200      	movs	r2, #0
 800517a:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2224      	movs	r2, #36	@ 0x24
 8005180:	2100      	movs	r1, #0
 8005182:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2224      	movs	r2, #36	@ 0x24
 8005188:	5c9b      	ldrb	r3, [r3, r2]
 800518a:	2b01      	cmp	r3, #1
 800518c:	d101      	bne.n	8005192 <HAL_DMA_Abort_IT+0x26>
 800518e:	2302      	movs	r3, #2
 8005190:	e05e      	b.n	8005250 <HAL_DMA_Abort_IT+0xe4>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2224      	movs	r2, #36	@ 0x24
 8005196:	2101      	movs	r1, #1
 8005198:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2225      	movs	r2, #37	@ 0x25
 800519e:	5c9b      	ldrb	r3, [r3, r2]
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	2b02      	cmp	r3, #2
 80051a4:	d007      	beq.n	80051b6 <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2204      	movs	r2, #4
 80051aa:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80051ac:	230f      	movs	r3, #15
 80051ae:	18fb      	adds	r3, r7, r3
 80051b0:	2201      	movs	r2, #1
 80051b2:	701a      	strb	r2, [r3, #0]
 80051b4:	e049      	b.n	800524a <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	210e      	movs	r1, #14
 80051c2:	438a      	bics	r2, r1
 80051c4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2101      	movs	r1, #1
 80051d2:	438a      	bics	r2, r1
 80051d4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051e0:	491d      	ldr	r1, [pc, #116]	@ (8005258 <HAL_DMA_Abort_IT+0xec>)
 80051e2:	400a      	ands	r2, r1
 80051e4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 80051e6:	4b1d      	ldr	r3, [pc, #116]	@ (800525c <HAL_DMA_Abort_IT+0xf0>)
 80051e8:	6859      	ldr	r1, [r3, #4]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ee:	221c      	movs	r2, #28
 80051f0:	4013      	ands	r3, r2
 80051f2:	2201      	movs	r2, #1
 80051f4:	409a      	lsls	r2, r3
 80051f6:	4b19      	ldr	r3, [pc, #100]	@ (800525c <HAL_DMA_Abort_IT+0xf0>)
 80051f8:	430a      	orrs	r2, r1
 80051fa:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005204:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800520a:	2b00      	cmp	r3, #0
 800520c:	d00c      	beq.n	8005228 <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005218:	490f      	ldr	r1, [pc, #60]	@ (8005258 <HAL_DMA_Abort_IT+0xec>)
 800521a:	400a      	ands	r2, r1
 800521c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8005226:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2225      	movs	r2, #37	@ 0x25
 800522c:	2101      	movs	r1, #1
 800522e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2224      	movs	r2, #36	@ 0x24
 8005234:	2100      	movs	r1, #0
 8005236:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800523c:	2b00      	cmp	r3, #0
 800523e:	d004      	beq.n	800524a <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	0010      	movs	r0, r2
 8005248:	4798      	blx	r3
    }
  }
  return status;
 800524a:	230f      	movs	r3, #15
 800524c:	18fb      	adds	r3, r7, r3
 800524e:	781b      	ldrb	r3, [r3, #0]
}
 8005250:	0018      	movs	r0, r3
 8005252:	46bd      	mov	sp, r7
 8005254:	b004      	add	sp, #16
 8005256:	bd80      	pop	{r7, pc}
 8005258:	fffffeff 	.word	0xfffffeff
 800525c:	40020000 	.word	0x40020000

08005260 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 8005268:	4b55      	ldr	r3, [pc, #340]	@ (80053c0 <HAL_DMA_IRQHandler+0x160>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800527a:	221c      	movs	r2, #28
 800527c:	4013      	ands	r3, r2
 800527e:	2204      	movs	r2, #4
 8005280:	409a      	lsls	r2, r3
 8005282:	0013      	movs	r3, r2
 8005284:	68fa      	ldr	r2, [r7, #12]
 8005286:	4013      	ands	r3, r2
 8005288:	d027      	beq.n	80052da <HAL_DMA_IRQHandler+0x7a>
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	2204      	movs	r2, #4
 800528e:	4013      	ands	r3, r2
 8005290:	d023      	beq.n	80052da <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2220      	movs	r2, #32
 800529a:	4013      	ands	r3, r2
 800529c:	d107      	bne.n	80052ae <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2104      	movs	r1, #4
 80052aa:	438a      	bics	r2, r1
 80052ac:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 80052ae:	4b44      	ldr	r3, [pc, #272]	@ (80053c0 <HAL_DMA_IRQHandler+0x160>)
 80052b0:	6859      	ldr	r1, [r3, #4]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052b6:	221c      	movs	r2, #28
 80052b8:	4013      	ands	r3, r2
 80052ba:	2204      	movs	r2, #4
 80052bc:	409a      	lsls	r2, r3
 80052be:	4b40      	ldr	r3, [pc, #256]	@ (80053c0 <HAL_DMA_IRQHandler+0x160>)
 80052c0:	430a      	orrs	r2, r1
 80052c2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d100      	bne.n	80052ce <HAL_DMA_IRQHandler+0x6e>
 80052cc:	e073      	b.n	80053b6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	0010      	movs	r0, r2
 80052d6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80052d8:	e06d      	b.n	80053b6 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052de:	221c      	movs	r2, #28
 80052e0:	4013      	ands	r3, r2
 80052e2:	2202      	movs	r2, #2
 80052e4:	409a      	lsls	r2, r3
 80052e6:	0013      	movs	r3, r2
 80052e8:	68fa      	ldr	r2, [r7, #12]
 80052ea:	4013      	ands	r3, r2
 80052ec:	d02e      	beq.n	800534c <HAL_DMA_IRQHandler+0xec>
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	2202      	movs	r2, #2
 80052f2:	4013      	ands	r3, r2
 80052f4:	d02a      	beq.n	800534c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2220      	movs	r2, #32
 80052fe:	4013      	ands	r3, r2
 8005300:	d10b      	bne.n	800531a <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	210a      	movs	r1, #10
 800530e:	438a      	bics	r2, r1
 8005310:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2225      	movs	r2, #37	@ 0x25
 8005316:	2101      	movs	r1, #1
 8005318:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 800531a:	4b29      	ldr	r3, [pc, #164]	@ (80053c0 <HAL_DMA_IRQHandler+0x160>)
 800531c:	6859      	ldr	r1, [r3, #4]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005322:	221c      	movs	r2, #28
 8005324:	4013      	ands	r3, r2
 8005326:	2202      	movs	r2, #2
 8005328:	409a      	lsls	r2, r3
 800532a:	4b25      	ldr	r3, [pc, #148]	@ (80053c0 <HAL_DMA_IRQHandler+0x160>)
 800532c:	430a      	orrs	r2, r1
 800532e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2224      	movs	r2, #36	@ 0x24
 8005334:	2100      	movs	r1, #0
 8005336:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800533c:	2b00      	cmp	r3, #0
 800533e:	d03a      	beq.n	80053b6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	0010      	movs	r0, r2
 8005348:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800534a:	e034      	b.n	80053b6 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005350:	221c      	movs	r2, #28
 8005352:	4013      	ands	r3, r2
 8005354:	2208      	movs	r2, #8
 8005356:	409a      	lsls	r2, r3
 8005358:	0013      	movs	r3, r2
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	4013      	ands	r3, r2
 800535e:	d02b      	beq.n	80053b8 <HAL_DMA_IRQHandler+0x158>
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	2208      	movs	r2, #8
 8005364:	4013      	ands	r3, r2
 8005366:	d027      	beq.n	80053b8 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	210e      	movs	r1, #14
 8005374:	438a      	bics	r2, r1
 8005376:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8005378:	4b11      	ldr	r3, [pc, #68]	@ (80053c0 <HAL_DMA_IRQHandler+0x160>)
 800537a:	6859      	ldr	r1, [r3, #4]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005380:	221c      	movs	r2, #28
 8005382:	4013      	ands	r3, r2
 8005384:	2201      	movs	r2, #1
 8005386:	409a      	lsls	r2, r3
 8005388:	4b0d      	ldr	r3, [pc, #52]	@ (80053c0 <HAL_DMA_IRQHandler+0x160>)
 800538a:	430a      	orrs	r2, r1
 800538c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2201      	movs	r2, #1
 8005392:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2225      	movs	r2, #37	@ 0x25
 8005398:	2101      	movs	r1, #1
 800539a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2224      	movs	r2, #36	@ 0x24
 80053a0:	2100      	movs	r1, #0
 80053a2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d005      	beq.n	80053b8 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	0010      	movs	r0, r2
 80053b4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80053b6:	46c0      	nop			@ (mov r8, r8)
 80053b8:	46c0      	nop			@ (mov r8, r8)
}
 80053ba:	46bd      	mov	sp, r7
 80053bc:	b004      	add	sp, #16
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	40020000 	.word	0x40020000

080053c4 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2225      	movs	r2, #37	@ 0x25
 80053d0:	5c9b      	ldrb	r3, [r3, r2]
 80053d2:	b2db      	uxtb	r3, r3
}
 80053d4:	0018      	movs	r0, r3
 80053d6:	46bd      	mov	sp, r7
 80053d8:	b002      	add	sp, #8
 80053da:	bd80      	pop	{r7, pc}

080053dc <HAL_DMA_GetError>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b082      	sub	sp, #8
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 80053e8:	0018      	movs	r0, r3
 80053ea:	46bd      	mov	sp, r7
 80053ec:	b002      	add	sp, #8
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	60b9      	str	r1, [r7, #8]
 80053fa:	607a      	str	r2, [r7, #4]
 80053fc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005406:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800540c:	2b00      	cmp	r3, #0
 800540e:	d004      	beq.n	800541a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8005418:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 800541a:	4b14      	ldr	r3, [pc, #80]	@ (800546c <DMA_SetConfig+0x7c>)
 800541c:	6859      	ldr	r1, [r3, #4]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005422:	221c      	movs	r2, #28
 8005424:	4013      	ands	r3, r2
 8005426:	2201      	movs	r2, #1
 8005428:	409a      	lsls	r2, r3
 800542a:	4b10      	ldr	r3, [pc, #64]	@ (800546c <DMA_SetConfig+0x7c>)
 800542c:	430a      	orrs	r2, r1
 800542e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	683a      	ldr	r2, [r7, #0]
 8005436:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	2b10      	cmp	r3, #16
 800543e:	d108      	bne.n	8005452 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68ba      	ldr	r2, [r7, #8]
 800544e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005450:	e007      	b.n	8005462 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68ba      	ldr	r2, [r7, #8]
 8005458:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	60da      	str	r2, [r3, #12]
}
 8005462:	46c0      	nop			@ (mov r8, r8)
 8005464:	46bd      	mov	sp, r7
 8005466:	b004      	add	sp, #16
 8005468:	bd80      	pop	{r7, pc}
 800546a:	46c0      	nop			@ (mov r8, r8)
 800546c:	40020000 	.word	0x40020000

08005470 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b084      	sub	sp, #16
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	001a      	movs	r2, r3
 800547e:	23ff      	movs	r3, #255	@ 0xff
 8005480:	4013      	ands	r3, r2
 8005482:	3b08      	subs	r3, #8
 8005484:	2114      	movs	r1, #20
 8005486:	0018      	movs	r0, r3
 8005488:	f7fa fe3e 	bl	8000108 <__udivsi3>
 800548c:	0003      	movs	r3, r0
 800548e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005494:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8005496:	4a0a      	ldr	r2, [pc, #40]	@ (80054c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8005498:	4694      	mov	ip, r2
 800549a:	4463      	add	r3, ip
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	001a      	movs	r2, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	645a      	str	r2, [r3, #68]	@ 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a07      	ldr	r2, [pc, #28]	@ (80054c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80054a8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	221c      	movs	r2, #28
 80054ae:	4013      	ands	r3, r2
 80054b0:	2201      	movs	r2, #1
 80054b2:	409a      	lsls	r2, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 80054b8:	46c0      	nop			@ (mov r8, r8)
 80054ba:	46bd      	mov	sp, r7
 80054bc:	b004      	add	sp, #16
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	10008200 	.word	0x10008200
 80054c4:	40020880 	.word	0x40020880

080054c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	22ff      	movs	r2, #255	@ 0xff
 80054d6:	4013      	ands	r3, r2
 80054d8:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	4a0a      	ldr	r2, [pc, #40]	@ (8005508 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80054de:	4694      	mov	ip, r2
 80054e0:	4463      	add	r3, ip
 80054e2:	009b      	lsls	r3, r3, #2
 80054e4:	001a      	movs	r2, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	651a      	str	r2, [r3, #80]	@ 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a07      	ldr	r2, [pc, #28]	@ (800550c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80054ee:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	3b01      	subs	r3, #1
 80054f4:	2203      	movs	r2, #3
 80054f6:	4013      	ands	r3, r2
 80054f8:	2201      	movs	r2, #1
 80054fa:	409a      	lsls	r2, r3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8005500:	46c0      	nop			@ (mov r8, r8)
 8005502:	46bd      	mov	sp, r7
 8005504:	b004      	add	sp, #16
 8005506:	bd80      	pop	{r7, pc}
 8005508:	1000823f 	.word	0x1000823f
 800550c:	40020940 	.word	0x40020940

08005510 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b086      	sub	sp, #24
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800551a:	2300      	movs	r3, #0
 800551c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800551e:	e153      	b.n	80057c8 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2101      	movs	r1, #1
 8005526:	693a      	ldr	r2, [r7, #16]
 8005528:	4091      	lsls	r1, r2
 800552a:	000a      	movs	r2, r1
 800552c:	4013      	ands	r3, r2
 800552e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d100      	bne.n	8005538 <HAL_GPIO_Init+0x28>
 8005536:	e144      	b.n	80057c2 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	2b02      	cmp	r3, #2
 800553e:	d003      	beq.n	8005548 <HAL_GPIO_Init+0x38>
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	2b12      	cmp	r3, #18
 8005546:	d125      	bne.n	8005594 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	08da      	lsrs	r2, r3, #3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	3208      	adds	r2, #8
 8005550:	0092      	lsls	r2, r2, #2
 8005552:	58d3      	ldr	r3, [r2, r3]
 8005554:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	2207      	movs	r2, #7
 800555a:	4013      	ands	r3, r2
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	220f      	movs	r2, #15
 8005560:	409a      	lsls	r2, r3
 8005562:	0013      	movs	r3, r2
 8005564:	43da      	mvns	r2, r3
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	4013      	ands	r3, r2
 800556a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	691b      	ldr	r3, [r3, #16]
 8005570:	220f      	movs	r2, #15
 8005572:	401a      	ands	r2, r3
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	2107      	movs	r1, #7
 8005578:	400b      	ands	r3, r1
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	409a      	lsls	r2, r3
 800557e:	0013      	movs	r3, r2
 8005580:	697a      	ldr	r2, [r7, #20]
 8005582:	4313      	orrs	r3, r2
 8005584:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	08da      	lsrs	r2, r3, #3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	3208      	adds	r2, #8
 800558e:	0092      	lsls	r2, r2, #2
 8005590:	6979      	ldr	r1, [r7, #20]
 8005592:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	005b      	lsls	r3, r3, #1
 800559e:	2203      	movs	r2, #3
 80055a0:	409a      	lsls	r2, r3
 80055a2:	0013      	movs	r3, r2
 80055a4:	43da      	mvns	r2, r3
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	4013      	ands	r3, r2
 80055aa:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	2203      	movs	r2, #3
 80055b2:	401a      	ands	r2, r3
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	005b      	lsls	r3, r3, #1
 80055b8:	409a      	lsls	r2, r3
 80055ba:	0013      	movs	r3, r2
 80055bc:	697a      	ldr	r2, [r7, #20]
 80055be:	4313      	orrs	r3, r2
 80055c0:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	697a      	ldr	r2, [r7, #20]
 80055c6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d00b      	beq.n	80055e8 <HAL_GPIO_Init+0xd8>
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	2b02      	cmp	r3, #2
 80055d6:	d007      	beq.n	80055e8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80055dc:	2b11      	cmp	r3, #17
 80055de:	d003      	beq.n	80055e8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	2b12      	cmp	r3, #18
 80055e6:	d130      	bne.n	800564a <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	005b      	lsls	r3, r3, #1
 80055f2:	2203      	movs	r2, #3
 80055f4:	409a      	lsls	r2, r3
 80055f6:	0013      	movs	r3, r2
 80055f8:	43da      	mvns	r2, r3
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	4013      	ands	r3, r2
 80055fe:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	68da      	ldr	r2, [r3, #12]
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	005b      	lsls	r3, r3, #1
 8005608:	409a      	lsls	r2, r3
 800560a:	0013      	movs	r3, r2
 800560c:	697a      	ldr	r2, [r7, #20]
 800560e:	4313      	orrs	r3, r2
 8005610:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	697a      	ldr	r2, [r7, #20]
 8005616:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800561e:	2201      	movs	r2, #1
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	409a      	lsls	r2, r3
 8005624:	0013      	movs	r3, r2
 8005626:	43da      	mvns	r2, r3
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	4013      	ands	r3, r2
 800562c:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	091b      	lsrs	r3, r3, #4
 8005634:	2201      	movs	r2, #1
 8005636:	401a      	ands	r2, r3
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	409a      	lsls	r2, r3
 800563c:	0013      	movs	r3, r2
 800563e:	697a      	ldr	r2, [r7, #20]
 8005640:	4313      	orrs	r3, r2
 8005642:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	697a      	ldr	r2, [r7, #20]
 8005648:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	2b03      	cmp	r3, #3
 8005650:	d017      	beq.n	8005682 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	005b      	lsls	r3, r3, #1
 800565c:	2203      	movs	r2, #3
 800565e:	409a      	lsls	r2, r3
 8005660:	0013      	movs	r3, r2
 8005662:	43da      	mvns	r2, r3
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	4013      	ands	r3, r2
 8005668:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	689a      	ldr	r2, [r3, #8]
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	005b      	lsls	r3, r3, #1
 8005672:	409a      	lsls	r2, r3
 8005674:	0013      	movs	r3, r2
 8005676:	697a      	ldr	r2, [r7, #20]
 8005678:	4313      	orrs	r3, r2
 800567a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	697a      	ldr	r2, [r7, #20]
 8005680:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	685a      	ldr	r2, [r3, #4]
 8005686:	2380      	movs	r3, #128	@ 0x80
 8005688:	055b      	lsls	r3, r3, #21
 800568a:	4013      	ands	r3, r2
 800568c:	d100      	bne.n	8005690 <HAL_GPIO_Init+0x180>
 800568e:	e098      	b.n	80057c2 <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8005690:	4a53      	ldr	r2, [pc, #332]	@ (80057e0 <HAL_GPIO_Init+0x2d0>)
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	089b      	lsrs	r3, r3, #2
 8005696:	3318      	adds	r3, #24
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	589b      	ldr	r3, [r3, r2]
 800569c:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	2203      	movs	r2, #3
 80056a2:	4013      	ands	r3, r2
 80056a4:	00db      	lsls	r3, r3, #3
 80056a6:	220f      	movs	r2, #15
 80056a8:	409a      	lsls	r2, r3
 80056aa:	0013      	movs	r3, r2
 80056ac:	43da      	mvns	r2, r3
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	4013      	ands	r3, r2
 80056b2:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	23a0      	movs	r3, #160	@ 0xa0
 80056b8:	05db      	lsls	r3, r3, #23
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d019      	beq.n	80056f2 <HAL_GPIO_Init+0x1e2>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a48      	ldr	r2, [pc, #288]	@ (80057e4 <HAL_GPIO_Init+0x2d4>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d013      	beq.n	80056ee <HAL_GPIO_Init+0x1de>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a47      	ldr	r2, [pc, #284]	@ (80057e8 <HAL_GPIO_Init+0x2d8>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d00d      	beq.n	80056ea <HAL_GPIO_Init+0x1da>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a46      	ldr	r2, [pc, #280]	@ (80057ec <HAL_GPIO_Init+0x2dc>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d007      	beq.n	80056e6 <HAL_GPIO_Init+0x1d6>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a45      	ldr	r2, [pc, #276]	@ (80057f0 <HAL_GPIO_Init+0x2e0>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d101      	bne.n	80056e2 <HAL_GPIO_Init+0x1d2>
 80056de:	2305      	movs	r3, #5
 80056e0:	e008      	b.n	80056f4 <HAL_GPIO_Init+0x1e4>
 80056e2:	2306      	movs	r3, #6
 80056e4:	e006      	b.n	80056f4 <HAL_GPIO_Init+0x1e4>
 80056e6:	2303      	movs	r3, #3
 80056e8:	e004      	b.n	80056f4 <HAL_GPIO_Init+0x1e4>
 80056ea:	2302      	movs	r3, #2
 80056ec:	e002      	b.n	80056f4 <HAL_GPIO_Init+0x1e4>
 80056ee:	2301      	movs	r3, #1
 80056f0:	e000      	b.n	80056f4 <HAL_GPIO_Init+0x1e4>
 80056f2:	2300      	movs	r3, #0
 80056f4:	693a      	ldr	r2, [r7, #16]
 80056f6:	2103      	movs	r1, #3
 80056f8:	400a      	ands	r2, r1
 80056fa:	00d2      	lsls	r2, r2, #3
 80056fc:	4093      	lsls	r3, r2
 80056fe:	697a      	ldr	r2, [r7, #20]
 8005700:	4313      	orrs	r3, r2
 8005702:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8005704:	4936      	ldr	r1, [pc, #216]	@ (80057e0 <HAL_GPIO_Init+0x2d0>)
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	089b      	lsrs	r3, r3, #2
 800570a:	3318      	adds	r3, #24
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	697a      	ldr	r2, [r7, #20]
 8005710:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8005712:	4a33      	ldr	r2, [pc, #204]	@ (80057e0 <HAL_GPIO_Init+0x2d0>)
 8005714:	2380      	movs	r3, #128	@ 0x80
 8005716:	58d3      	ldr	r3, [r2, r3]
 8005718:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	43da      	mvns	r2, r3
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	4013      	ands	r3, r2
 8005722:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	685a      	ldr	r2, [r3, #4]
 8005728:	2380      	movs	r3, #128	@ 0x80
 800572a:	025b      	lsls	r3, r3, #9
 800572c:	4013      	ands	r3, r2
 800572e:	d003      	beq.n	8005738 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8005730:	697a      	ldr	r2, [r7, #20]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	4313      	orrs	r3, r2
 8005736:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8005738:	4929      	ldr	r1, [pc, #164]	@ (80057e0 <HAL_GPIO_Init+0x2d0>)
 800573a:	2280      	movs	r2, #128	@ 0x80
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8005740:	4a27      	ldr	r2, [pc, #156]	@ (80057e0 <HAL_GPIO_Init+0x2d0>)
 8005742:	2384      	movs	r3, #132	@ 0x84
 8005744:	58d3      	ldr	r3, [r2, r3]
 8005746:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	43da      	mvns	r2, r3
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	4013      	ands	r3, r2
 8005750:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	685a      	ldr	r2, [r3, #4]
 8005756:	2380      	movs	r3, #128	@ 0x80
 8005758:	029b      	lsls	r3, r3, #10
 800575a:	4013      	ands	r3, r2
 800575c:	d003      	beq.n	8005766 <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 800575e:	697a      	ldr	r2, [r7, #20]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	4313      	orrs	r3, r2
 8005764:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8005766:	491e      	ldr	r1, [pc, #120]	@ (80057e0 <HAL_GPIO_Init+0x2d0>)
 8005768:	2284      	movs	r2, #132	@ 0x84
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800576e:	4b1c      	ldr	r3, [pc, #112]	@ (80057e0 <HAL_GPIO_Init+0x2d0>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	43da      	mvns	r2, r3
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	4013      	ands	r3, r2
 800577c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	685a      	ldr	r2, [r3, #4]
 8005782:	2380      	movs	r3, #128	@ 0x80
 8005784:	035b      	lsls	r3, r3, #13
 8005786:	4013      	ands	r3, r2
 8005788:	d003      	beq.n	8005792 <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 800578a:	697a      	ldr	r2, [r7, #20]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	4313      	orrs	r3, r2
 8005790:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8005792:	4b13      	ldr	r3, [pc, #76]	@ (80057e0 <HAL_GPIO_Init+0x2d0>)
 8005794:	697a      	ldr	r2, [r7, #20]
 8005796:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8005798:	4b11      	ldr	r3, [pc, #68]	@ (80057e0 <HAL_GPIO_Init+0x2d0>)
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	43da      	mvns	r2, r3
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	4013      	ands	r3, r2
 80057a6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	685a      	ldr	r2, [r3, #4]
 80057ac:	2380      	movs	r3, #128	@ 0x80
 80057ae:	039b      	lsls	r3, r3, #14
 80057b0:	4013      	ands	r3, r2
 80057b2:	d003      	beq.n	80057bc <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 80057b4:	697a      	ldr	r2, [r7, #20]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	4313      	orrs	r3, r2
 80057ba:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80057bc:	4b08      	ldr	r3, [pc, #32]	@ (80057e0 <HAL_GPIO_Init+0x2d0>)
 80057be:	697a      	ldr	r2, [r7, #20]
 80057c0:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	3301      	adds	r3, #1
 80057c6:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	40da      	lsrs	r2, r3
 80057d0:	1e13      	subs	r3, r2, #0
 80057d2:	d000      	beq.n	80057d6 <HAL_GPIO_Init+0x2c6>
 80057d4:	e6a4      	b.n	8005520 <HAL_GPIO_Init+0x10>
  }
}
 80057d6:	46c0      	nop			@ (mov r8, r8)
 80057d8:	46c0      	nop			@ (mov r8, r8)
 80057da:	46bd      	mov	sp, r7
 80057dc:	b006      	add	sp, #24
 80057de:	bd80      	pop	{r7, pc}
 80057e0:	40021800 	.word	0x40021800
 80057e4:	50000400 	.word	0x50000400
 80057e8:	50000800 	.word	0x50000800
 80057ec:	50000c00 	.word	0x50000c00
 80057f0:	50001400 	.word	0x50001400

080057f4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b086      	sub	sp, #24
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80057fe:	2300      	movs	r3, #0
 8005800:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8005802:	e0ba      	b.n	800597a <HAL_GPIO_DeInit+0x186>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8005804:	2201      	movs	r2, #1
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	409a      	lsls	r2, r3
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	4013      	ands	r3, r2
 800580e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0U)
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d100      	bne.n	8005818 <HAL_GPIO_DeInit+0x24>
 8005816:	e0ad      	b.n	8005974 <HAL_GPIO_DeInit+0x180>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = EXTI->EXTICR[position >> 2U];
 8005818:	4a5d      	ldr	r2, [pc, #372]	@ (8005990 <HAL_GPIO_DeInit+0x19c>)
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	089b      	lsrs	r3, r3, #2
 800581e:	3318      	adds	r3, #24
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	589b      	ldr	r3, [r3, r2]
 8005824:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	2203      	movs	r2, #3
 800582a:	4013      	ands	r3, r2
 800582c:	00db      	lsls	r3, r3, #3
 800582e:	220f      	movs	r2, #15
 8005830:	409a      	lsls	r2, r3
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	4013      	ands	r3, r2
 8005836:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos)))
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	23a0      	movs	r3, #160	@ 0xa0
 800583c:	05db      	lsls	r3, r3, #23
 800583e:	429a      	cmp	r2, r3
 8005840:	d019      	beq.n	8005876 <HAL_GPIO_DeInit+0x82>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a53      	ldr	r2, [pc, #332]	@ (8005994 <HAL_GPIO_DeInit+0x1a0>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d013      	beq.n	8005872 <HAL_GPIO_DeInit+0x7e>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a52      	ldr	r2, [pc, #328]	@ (8005998 <HAL_GPIO_DeInit+0x1a4>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d00d      	beq.n	800586e <HAL_GPIO_DeInit+0x7a>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4a51      	ldr	r2, [pc, #324]	@ (800599c <HAL_GPIO_DeInit+0x1a8>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d007      	beq.n	800586a <HAL_GPIO_DeInit+0x76>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a50      	ldr	r2, [pc, #320]	@ (80059a0 <HAL_GPIO_DeInit+0x1ac>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d101      	bne.n	8005866 <HAL_GPIO_DeInit+0x72>
 8005862:	2305      	movs	r3, #5
 8005864:	e008      	b.n	8005878 <HAL_GPIO_DeInit+0x84>
 8005866:	2306      	movs	r3, #6
 8005868:	e006      	b.n	8005878 <HAL_GPIO_DeInit+0x84>
 800586a:	2303      	movs	r3, #3
 800586c:	e004      	b.n	8005878 <HAL_GPIO_DeInit+0x84>
 800586e:	2302      	movs	r3, #2
 8005870:	e002      	b.n	8005878 <HAL_GPIO_DeInit+0x84>
 8005872:	2301      	movs	r3, #1
 8005874:	e000      	b.n	8005878 <HAL_GPIO_DeInit+0x84>
 8005876:	2300      	movs	r3, #0
 8005878:	697a      	ldr	r2, [r7, #20]
 800587a:	2103      	movs	r1, #3
 800587c:	400a      	ands	r2, r1
 800587e:	00d2      	lsls	r2, r2, #3
 8005880:	4093      	lsls	r3, r2
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	429a      	cmp	r2, r3
 8005886:	d136      	bne.n	80058f6 <HAL_GPIO_DeInit+0x102>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8005888:	4a41      	ldr	r2, [pc, #260]	@ (8005990 <HAL_GPIO_DeInit+0x19c>)
 800588a:	2380      	movs	r3, #128	@ 0x80
 800588c:	58d3      	ldr	r3, [r2, r3]
 800588e:	693a      	ldr	r2, [r7, #16]
 8005890:	43d2      	mvns	r2, r2
 8005892:	493f      	ldr	r1, [pc, #252]	@ (8005990 <HAL_GPIO_DeInit+0x19c>)
 8005894:	4013      	ands	r3, r2
 8005896:	2280      	movs	r2, #128	@ 0x80
 8005898:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 800589a:	4a3d      	ldr	r2, [pc, #244]	@ (8005990 <HAL_GPIO_DeInit+0x19c>)
 800589c:	2384      	movs	r3, #132	@ 0x84
 800589e:	58d3      	ldr	r3, [r2, r3]
 80058a0:	693a      	ldr	r2, [r7, #16]
 80058a2:	43d2      	mvns	r2, r2
 80058a4:	493a      	ldr	r1, [pc, #232]	@ (8005990 <HAL_GPIO_DeInit+0x19c>)
 80058a6:	4013      	ands	r3, r2
 80058a8:	2284      	movs	r2, #132	@ 0x84
 80058aa:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80058ac:	4b38      	ldr	r3, [pc, #224]	@ (8005990 <HAL_GPIO_DeInit+0x19c>)
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	43d9      	mvns	r1, r3
 80058b4:	4b36      	ldr	r3, [pc, #216]	@ (8005990 <HAL_GPIO_DeInit+0x19c>)
 80058b6:	400a      	ands	r2, r1
 80058b8:	601a      	str	r2, [r3, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80058ba:	4b35      	ldr	r3, [pc, #212]	@ (8005990 <HAL_GPIO_DeInit+0x19c>)
 80058bc:	685a      	ldr	r2, [r3, #4]
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	43d9      	mvns	r1, r3
 80058c2:	4b33      	ldr	r3, [pc, #204]	@ (8005990 <HAL_GPIO_DeInit+0x19c>)
 80058c4:	400a      	ands	r2, r1
 80058c6:	605a      	str	r2, [r3, #4]

        tmp = (0x0FUL) << (8U * (position & 0x03U));
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	2203      	movs	r2, #3
 80058cc:	4013      	ands	r3, r2
 80058ce:	00db      	lsls	r3, r3, #3
 80058d0:	220f      	movs	r2, #15
 80058d2:	409a      	lsls	r2, r3
 80058d4:	0013      	movs	r3, r2
 80058d6:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2U] &= ~tmp;
 80058d8:	4a2d      	ldr	r2, [pc, #180]	@ (8005990 <HAL_GPIO_DeInit+0x19c>)
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	089b      	lsrs	r3, r3, #2
 80058de:	3318      	adds	r3, #24
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	589a      	ldr	r2, [r3, r2]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	43d9      	mvns	r1, r3
 80058e8:	4829      	ldr	r0, [pc, #164]	@ (8005990 <HAL_GPIO_DeInit+0x19c>)
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	089b      	lsrs	r3, r3, #2
 80058ee:	400a      	ands	r2, r1
 80058f0:	3318      	adds	r3, #24
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	005b      	lsls	r3, r3, #1
 80058fe:	2103      	movs	r1, #3
 8005900:	4099      	lsls	r1, r3
 8005902:	000b      	movs	r3, r1
 8005904:	431a      	orrs	r2, r3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	08da      	lsrs	r2, r3, #3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	3208      	adds	r2, #8
 8005912:	0092      	lsls	r2, r2, #2
 8005914:	58d3      	ldr	r3, [r2, r3]
 8005916:	697a      	ldr	r2, [r7, #20]
 8005918:	2107      	movs	r1, #7
 800591a:	400a      	ands	r2, r1
 800591c:	0092      	lsls	r2, r2, #2
 800591e:	210f      	movs	r1, #15
 8005920:	4091      	lsls	r1, r2
 8005922:	000a      	movs	r2, r1
 8005924:	43d1      	mvns	r1, r2
 8005926:	697a      	ldr	r2, [r7, #20]
 8005928:	08d2      	lsrs	r2, r2, #3
 800592a:	4019      	ands	r1, r3
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	3208      	adds	r2, #8
 8005930:	0092      	lsls	r2, r2, #2
 8005932:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	697a      	ldr	r2, [r7, #20]
 800593a:	0052      	lsls	r2, r2, #1
 800593c:	2103      	movs	r1, #3
 800593e:	4091      	lsls	r1, r2
 8005940:	000a      	movs	r2, r1
 8005942:	43d2      	mvns	r2, r2
 8005944:	401a      	ands	r2, r3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	2101      	movs	r1, #1
 8005950:	697a      	ldr	r2, [r7, #20]
 8005952:	4091      	lsls	r1, r2
 8005954:	000a      	movs	r2, r1
 8005956:	43d2      	mvns	r2, r2
 8005958:	401a      	ands	r2, r3
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	697a      	ldr	r2, [r7, #20]
 8005964:	0052      	lsls	r2, r2, #1
 8005966:	2103      	movs	r1, #3
 8005968:	4091      	lsls	r1, r2
 800596a:	000a      	movs	r2, r1
 800596c:	43d2      	mvns	r2, r2
 800596e:	401a      	ands	r2, r3
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	60da      	str	r2, [r3, #12]
    }

    position++;
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	3301      	adds	r3, #1
 8005978:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 800597a:	683a      	ldr	r2, [r7, #0]
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	40da      	lsrs	r2, r3
 8005980:	1e13      	subs	r3, r2, #0
 8005982:	d000      	beq.n	8005986 <HAL_GPIO_DeInit+0x192>
 8005984:	e73e      	b.n	8005804 <HAL_GPIO_DeInit+0x10>
  }
}
 8005986:	46c0      	nop			@ (mov r8, r8)
 8005988:	46c0      	nop			@ (mov r8, r8)
 800598a:	46bd      	mov	sp, r7
 800598c:	b006      	add	sp, #24
 800598e:	bd80      	pop	{r7, pc}
 8005990:	40021800 	.word	0x40021800
 8005994:	50000400 	.word	0x50000400
 8005998:	50000800 	.word	0x50000800
 800599c:	50000c00 	.word	0x50000c00
 80059a0:	50001400 	.word	0x50001400

080059a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	000a      	movs	r2, r1
 80059ae:	1cbb      	adds	r3, r7, #2
 80059b0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	1cba      	adds	r2, r7, #2
 80059b8:	8812      	ldrh	r2, [r2, #0]
 80059ba:	4013      	ands	r3, r2
 80059bc:	d004      	beq.n	80059c8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80059be:	230f      	movs	r3, #15
 80059c0:	18fb      	adds	r3, r7, r3
 80059c2:	2201      	movs	r2, #1
 80059c4:	701a      	strb	r2, [r3, #0]
 80059c6:	e003      	b.n	80059d0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80059c8:	230f      	movs	r3, #15
 80059ca:	18fb      	adds	r3, r7, r3
 80059cc:	2200      	movs	r2, #0
 80059ce:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80059d0:	230f      	movs	r3, #15
 80059d2:	18fb      	adds	r3, r7, r3
 80059d4:	781b      	ldrb	r3, [r3, #0]
}
 80059d6:	0018      	movs	r0, r3
 80059d8:	46bd      	mov	sp, r7
 80059da:	b004      	add	sp, #16
 80059dc:	bd80      	pop	{r7, pc}

080059de <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80059de:	b580      	push	{r7, lr}
 80059e0:	b082      	sub	sp, #8
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
 80059e6:	0008      	movs	r0, r1
 80059e8:	0011      	movs	r1, r2
 80059ea:	1cbb      	adds	r3, r7, #2
 80059ec:	1c02      	adds	r2, r0, #0
 80059ee:	801a      	strh	r2, [r3, #0]
 80059f0:	1c7b      	adds	r3, r7, #1
 80059f2:	1c0a      	adds	r2, r1, #0
 80059f4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80059f6:	1c7b      	adds	r3, r7, #1
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d004      	beq.n	8005a08 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80059fe:	1cbb      	adds	r3, r7, #2
 8005a00:	881a      	ldrh	r2, [r3, #0]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005a06:	e003      	b.n	8005a10 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005a08:	1cbb      	adds	r3, r7, #2
 8005a0a:	881a      	ldrh	r2, [r3, #0]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005a10:	46c0      	nop			@ (mov r8, r8)
 8005a12:	46bd      	mov	sp, r7
 8005a14:	b002      	add	sp, #8
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b082      	sub	sp, #8
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	0002      	movs	r2, r0
 8005a20:	1dbb      	adds	r3, r7, #6
 8005a22:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8005a24:	4b10      	ldr	r3, [pc, #64]	@ (8005a68 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	1dba      	adds	r2, r7, #6
 8005a2a:	8812      	ldrh	r2, [r2, #0]
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	d008      	beq.n	8005a42 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8005a30:	4b0d      	ldr	r3, [pc, #52]	@ (8005a68 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8005a32:	1dba      	adds	r2, r7, #6
 8005a34:	8812      	ldrh	r2, [r2, #0]
 8005a36:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8005a38:	1dbb      	adds	r3, r7, #6
 8005a3a:	881b      	ldrh	r3, [r3, #0]
 8005a3c:	0018      	movs	r0, r3
 8005a3e:	f7fc fb6d 	bl	800211c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8005a42:	4b09      	ldr	r3, [pc, #36]	@ (8005a68 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	1dba      	adds	r2, r7, #6
 8005a48:	8812      	ldrh	r2, [r2, #0]
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	d008      	beq.n	8005a60 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8005a4e:	4b06      	ldr	r3, [pc, #24]	@ (8005a68 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8005a50:	1dba      	adds	r2, r7, #6
 8005a52:	8812      	ldrh	r2, [r2, #0]
 8005a54:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8005a56:	1dbb      	adds	r3, r7, #6
 8005a58:	881b      	ldrh	r3, [r3, #0]
 8005a5a:	0018      	movs	r0, r3
 8005a5c:	f000 f806 	bl	8005a6c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8005a60:	46c0      	nop			@ (mov r8, r8)
 8005a62:	46bd      	mov	sp, r7
 8005a64:	b002      	add	sp, #8
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	40021800 	.word	0x40021800

08005a6c <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b082      	sub	sp, #8
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	0002      	movs	r2, r0
 8005a74:	1dbb      	adds	r3, r7, #6
 8005a76:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8005a78:	46c0      	nop			@ (mov r8, r8)
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	b002      	add	sp, #8
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b082      	sub	sp, #8
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d101      	bne.n	8005a92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e08f      	b.n	8005bb2 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2241      	movs	r2, #65	@ 0x41
 8005a96:	5c9b      	ldrb	r3, [r3, r2]
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d107      	bne.n	8005aae <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2240      	movs	r2, #64	@ 0x40
 8005aa2:	2100      	movs	r1, #0
 8005aa4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	0018      	movs	r0, r3
 8005aaa:	f7fe faed 	bl	8004088 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2241      	movs	r2, #65	@ 0x41
 8005ab2:	2124      	movs	r1, #36	@ 0x24
 8005ab4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2101      	movs	r1, #1
 8005ac2:	438a      	bics	r2, r1
 8005ac4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	685a      	ldr	r2, [r3, #4]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	493b      	ldr	r1, [pc, #236]	@ (8005bbc <HAL_I2C_Init+0x13c>)
 8005ad0:	400a      	ands	r2, r1
 8005ad2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	689a      	ldr	r2, [r3, #8]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4938      	ldr	r1, [pc, #224]	@ (8005bc0 <HAL_I2C_Init+0x140>)
 8005ae0:	400a      	ands	r2, r1
 8005ae2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d108      	bne.n	8005afe <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	689a      	ldr	r2, [r3, #8]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	2180      	movs	r1, #128	@ 0x80
 8005af6:	0209      	lsls	r1, r1, #8
 8005af8:	430a      	orrs	r2, r1
 8005afa:	609a      	str	r2, [r3, #8]
 8005afc:	e007      	b.n	8005b0e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	689a      	ldr	r2, [r3, #8]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2184      	movs	r1, #132	@ 0x84
 8005b08:	0209      	lsls	r1, r1, #8
 8005b0a:	430a      	orrs	r2, r1
 8005b0c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	68db      	ldr	r3, [r3, #12]
 8005b12:	2b02      	cmp	r3, #2
 8005b14:	d109      	bne.n	8005b2a <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	685a      	ldr	r2, [r3, #4]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	2180      	movs	r1, #128	@ 0x80
 8005b22:	0109      	lsls	r1, r1, #4
 8005b24:	430a      	orrs	r2, r1
 8005b26:	605a      	str	r2, [r3, #4]
 8005b28:	e007      	b.n	8005b3a <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	685a      	ldr	r2, [r3, #4]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4923      	ldr	r1, [pc, #140]	@ (8005bc4 <HAL_I2C_Init+0x144>)
 8005b36:	400a      	ands	r2, r1
 8005b38:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	685a      	ldr	r2, [r3, #4]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4920      	ldr	r1, [pc, #128]	@ (8005bc8 <HAL_I2C_Init+0x148>)
 8005b46:	430a      	orrs	r2, r1
 8005b48:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	68da      	ldr	r2, [r3, #12]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	491a      	ldr	r1, [pc, #104]	@ (8005bc0 <HAL_I2C_Init+0x140>)
 8005b56:	400a      	ands	r2, r1
 8005b58:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	691a      	ldr	r2, [r3, #16]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	695b      	ldr	r3, [r3, #20]
 8005b62:	431a      	orrs	r2, r3
 8005b64:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	699b      	ldr	r3, [r3, #24]
 8005b6a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	430a      	orrs	r2, r1
 8005b72:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	69d9      	ldr	r1, [r3, #28]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6a1a      	ldr	r2, [r3, #32]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	430a      	orrs	r2, r1
 8005b82:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2101      	movs	r1, #1
 8005b90:	430a      	orrs	r2, r1
 8005b92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2241      	movs	r2, #65	@ 0x41
 8005b9e:	2120      	movs	r1, #32
 8005ba0:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2242      	movs	r2, #66	@ 0x42
 8005bac:	2100      	movs	r1, #0
 8005bae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005bb0:	2300      	movs	r3, #0
}
 8005bb2:	0018      	movs	r0, r3
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	b002      	add	sp, #8
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	46c0      	nop			@ (mov r8, r8)
 8005bbc:	f0ffffff 	.word	0xf0ffffff
 8005bc0:	ffff7fff 	.word	0xffff7fff
 8005bc4:	fffff7ff 	.word	0xfffff7ff
 8005bc8:	02008000 	.word	0x02008000

08005bcc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b082      	sub	sp, #8
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d101      	bne.n	8005bde <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e022      	b.n	8005c24 <HAL_I2C_DeInit+0x58>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2241      	movs	r2, #65	@ 0x41
 8005be2:	2124      	movs	r1, #36	@ 0x24
 8005be4:	5499      	strb	r1, [r3, r2]

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2101      	movs	r1, #1
 8005bf2:	438a      	bics	r2, r1
 8005bf4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	0018      	movs	r0, r3
 8005bfa:	f7fe fb0b 	bl	8004214 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2241      	movs	r2, #65	@ 0x41
 8005c08:	2100      	movs	r1, #0
 8005c0a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2242      	movs	r2, #66	@ 0x42
 8005c16:	2100      	movs	r1, #0
 8005c18:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2240      	movs	r2, #64	@ 0x40
 8005c1e:	2100      	movs	r1, #0
 8005c20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	0018      	movs	r0, r3
 8005c26:	46bd      	mov	sp, r7
 8005c28:	b002      	add	sp, #8
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8005c2c:	b5b0      	push	{r4, r5, r7, lr}
 8005c2e:	b08a      	sub	sp, #40	@ 0x28
 8005c30:	af02      	add	r7, sp, #8
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	0008      	movs	r0, r1
 8005c36:	607a      	str	r2, [r7, #4]
 8005c38:	0019      	movs	r1, r3
 8005c3a:	230a      	movs	r3, #10
 8005c3c:	18fb      	adds	r3, r7, r3
 8005c3e:	1c02      	adds	r2, r0, #0
 8005c40:	801a      	strh	r2, [r3, #0]
 8005c42:	2308      	movs	r3, #8
 8005c44:	18fb      	adds	r3, r7, r3
 8005c46:	1c0a      	adds	r2, r1, #0
 8005c48:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2241      	movs	r2, #65	@ 0x41
 8005c52:	5c9b      	ldrb	r3, [r3, r2]
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	2b20      	cmp	r3, #32
 8005c58:	d000      	beq.n	8005c5c <HAL_I2C_Master_Transmit_DMA+0x30>
 8005c5a:	e0ff      	b.n	8005e5c <HAL_I2C_Master_Transmit_DMA+0x230>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	699a      	ldr	r2, [r3, #24]
 8005c62:	2380      	movs	r3, #128	@ 0x80
 8005c64:	021b      	lsls	r3, r3, #8
 8005c66:	401a      	ands	r2, r3
 8005c68:	2380      	movs	r3, #128	@ 0x80
 8005c6a:	021b      	lsls	r3, r3, #8
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d101      	bne.n	8005c74 <HAL_I2C_Master_Transmit_DMA+0x48>
    {
      return HAL_BUSY;
 8005c70:	2302      	movs	r3, #2
 8005c72:	e0f4      	b.n	8005e5e <HAL_I2C_Master_Transmit_DMA+0x232>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2240      	movs	r2, #64	@ 0x40
 8005c78:	5c9b      	ldrb	r3, [r3, r2]
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d101      	bne.n	8005c82 <HAL_I2C_Master_Transmit_DMA+0x56>
 8005c7e:	2302      	movs	r3, #2
 8005c80:	e0ed      	b.n	8005e5e <HAL_I2C_Master_Transmit_DMA+0x232>
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2240      	movs	r2, #64	@ 0x40
 8005c86:	2101      	movs	r1, #1
 8005c88:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2241      	movs	r2, #65	@ 0x41
 8005c8e:	2121      	movs	r1, #33	@ 0x21
 8005c90:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2242      	movs	r2, #66	@ 0x42
 8005c96:	2110      	movs	r1, #16
 8005c98:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2208      	movs	r2, #8
 8005caa:	18ba      	adds	r2, r7, r2
 8005cac:	8812      	ldrh	r2, [r2, #0]
 8005cae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	4a6d      	ldr	r2, [pc, #436]	@ (8005e68 <HAL_I2C_Master_Transmit_DMA+0x23c>)
 8005cb4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	4a6c      	ldr	r2, [pc, #432]	@ (8005e6c <HAL_I2C_Master_Transmit_DMA+0x240>)
 8005cba:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	2bff      	cmp	r3, #255	@ 0xff
 8005cc4:	d906      	bls.n	8005cd4 <HAL_I2C_Master_Transmit_DMA+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	22ff      	movs	r2, #255	@ 0xff
 8005cca:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005ccc:	2380      	movs	r3, #128	@ 0x80
 8005cce:	045b      	lsls	r3, r3, #17
 8005cd0:	61fb      	str	r3, [r7, #28]
 8005cd2:	e007      	b.n	8005ce4 <HAL_I2C_Master_Transmit_DMA+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cd8:	b29a      	uxth	r2, r3
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005cde:	2380      	movs	r3, #128	@ 0x80
 8005ce0:	049b      	lsls	r3, r3, #18
 8005ce2:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d01a      	beq.n	8005d22 <HAL_I2C_Master_Transmit_DMA+0xf6>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cf0:	781a      	ldrb	r2, [r3, #0]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cfc:	1c5a      	adds	r2, r3, #1
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d06:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	3b01      	subs	r3, #1
 8005d10:	b29a      	uxth	r2, r3
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d1a:	3b01      	subs	r3, #1
 8005d1c:	b29a      	uxth	r2, r3
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d100      	bne.n	8005d2c <HAL_I2C_Master_Transmit_DMA+0x100>
 8005d2a:	e07c      	b.n	8005e26 <HAL_I2C_Master_Transmit_DMA+0x1fa>
    {
      if (hi2c->hdmatx != NULL)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d025      	beq.n	8005d80 <HAL_I2C_Master_Transmit_DMA+0x154>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d38:	4a4d      	ldr	r2, [pc, #308]	@ (8005e70 <HAL_I2C_Master_Transmit_DMA+0x244>)
 8005d3a:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d40:	4a4c      	ldr	r2, [pc, #304]	@ (8005e74 <HAL_I2C_Master_Transmit_DMA+0x248>)
 8005d42:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d48:	2200      	movs	r2, #0
 8005d4a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d50:	2200      	movs	r2, #0
 8005d52:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d5c:	0019      	movs	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8005d64:	001a      	movs	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8005d6a:	2517      	movs	r5, #23
 8005d6c:	197c      	adds	r4, r7, r5
 8005d6e:	f7ff f913 	bl	8004f98 <HAL_DMA_Start_IT>
 8005d72:	0003      	movs	r3, r0
 8005d74:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005d76:	197b      	adds	r3, r7, r5
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d13f      	bne.n	8005dfe <HAL_I2C_Master_Transmit_DMA+0x1d2>
 8005d7e:	e013      	b.n	8005da8 <HAL_I2C_Master_Transmit_DMA+0x17c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2241      	movs	r2, #65	@ 0x41
 8005d84:	2120      	movs	r1, #32
 8005d86:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2242      	movs	r2, #66	@ 0x42
 8005d8c:	2100      	movs	r1, #0
 8005d8e:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d94:	2280      	movs	r2, #128	@ 0x80
 8005d96:	431a      	orrs	r2, r3
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2240      	movs	r2, #64	@ 0x40
 8005da0:	2100      	movs	r1, #0
 8005da2:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	e05a      	b.n	8005e5e <HAL_I2C_Master_Transmit_DMA+0x232>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	3301      	adds	r3, #1
 8005db0:	b2da      	uxtb	r2, r3
 8005db2:	69fc      	ldr	r4, [r7, #28]
 8005db4:	230a      	movs	r3, #10
 8005db6:	18fb      	adds	r3, r7, r3
 8005db8:	8819      	ldrh	r1, [r3, #0]
 8005dba:	68f8      	ldr	r0, [r7, #12]
 8005dbc:	4b2e      	ldr	r3, [pc, #184]	@ (8005e78 <HAL_I2C_Master_Transmit_DMA+0x24c>)
 8005dbe:	9300      	str	r3, [sp, #0]
 8005dc0:	0023      	movs	r3, r4
 8005dc2:	f001 fe69 	bl	8007a98 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dca:	b29a      	uxth	r2, r3
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	b29a      	uxth	r2, r3
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2240      	movs	r2, #64	@ 0x40
 8005ddc:	2100      	movs	r1, #0
 8005dde:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2110      	movs	r1, #16
 8005de4:	0018      	movs	r0, r3
 8005de6:	f001 fe91 	bl	8007b0c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2180      	movs	r1, #128	@ 0x80
 8005df6:	01c9      	lsls	r1, r1, #7
 8005df8:	430a      	orrs	r2, r1
 8005dfa:	601a      	str	r2, [r3, #0]
 8005dfc:	e02c      	b.n	8005e58 <HAL_I2C_Master_Transmit_DMA+0x22c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2241      	movs	r2, #65	@ 0x41
 8005e02:	2120      	movs	r1, #32
 8005e04:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2242      	movs	r2, #66	@ 0x42
 8005e0a:	2100      	movs	r1, #0
 8005e0c:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e12:	2210      	movs	r2, #16
 8005e14:	431a      	orrs	r2, r3
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2240      	movs	r2, #64	@ 0x40
 8005e1e:	2100      	movs	r1, #0
 8005e20:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e01b      	b.n	8005e5e <HAL_I2C_Master_Transmit_DMA+0x232>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	4a14      	ldr	r2, [pc, #80]	@ (8005e7c <HAL_I2C_Master_Transmit_DMA+0x250>)
 8005e2a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	b2da      	uxtb	r2, r3
 8005e30:	2380      	movs	r3, #128	@ 0x80
 8005e32:	049c      	lsls	r4, r3, #18
 8005e34:	230a      	movs	r3, #10
 8005e36:	18fb      	adds	r3, r7, r3
 8005e38:	8819      	ldrh	r1, [r3, #0]
 8005e3a:	68f8      	ldr	r0, [r7, #12]
 8005e3c:	4b0e      	ldr	r3, [pc, #56]	@ (8005e78 <HAL_I2C_Master_Transmit_DMA+0x24c>)
 8005e3e:	9300      	str	r3, [sp, #0]
 8005e40:	0023      	movs	r3, r4
 8005e42:	f001 fe29 	bl	8007a98 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2240      	movs	r2, #64	@ 0x40
 8005e4a:	2100      	movs	r1, #0
 8005e4c:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2101      	movs	r1, #1
 8005e52:	0018      	movs	r0, r3
 8005e54:	f001 fe5a 	bl	8007b0c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	e000      	b.n	8005e5e <HAL_I2C_Master_Transmit_DMA+0x232>
  }
  else
  {
    return HAL_BUSY;
 8005e5c:	2302      	movs	r3, #2
  }
}
 8005e5e:	0018      	movs	r0, r3
 8005e60:	46bd      	mov	sp, r7
 8005e62:	b008      	add	sp, #32
 8005e64:	bdb0      	pop	{r4, r5, r7, pc}
 8005e66:	46c0      	nop			@ (mov r8, r8)
 8005e68:	ffff0000 	.word	0xffff0000
 8005e6c:	0800683d 	.word	0x0800683d
 8005e70:	080078e9 	.word	0x080078e9
 8005e74:	08007a29 	.word	0x08007a29
 8005e78:	80002000 	.word	0x80002000
 8005e7c:	080063d5 	.word	0x080063d5

08005e80 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8005e80:	b5b0      	push	{r4, r5, r7, lr}
 8005e82:	b088      	sub	sp, #32
 8005e84:	af02      	add	r7, sp, #8
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	0008      	movs	r0, r1
 8005e8a:	607a      	str	r2, [r7, #4]
 8005e8c:	0019      	movs	r1, r3
 8005e8e:	230a      	movs	r3, #10
 8005e90:	18fb      	adds	r3, r7, r3
 8005e92:	1c02      	adds	r2, r0, #0
 8005e94:	801a      	strh	r2, [r3, #0]
 8005e96:	2308      	movs	r3, #8
 8005e98:	18fb      	adds	r3, r7, r3
 8005e9a:	1c0a      	adds	r2, r1, #0
 8005e9c:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2241      	movs	r2, #65	@ 0x41
 8005ea2:	5c9b      	ldrb	r3, [r3, r2]
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	2b20      	cmp	r3, #32
 8005ea8:	d000      	beq.n	8005eac <HAL_I2C_Master_Receive_DMA+0x2c>
 8005eaa:	e0dd      	b.n	8006068 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	699a      	ldr	r2, [r3, #24]
 8005eb2:	2380      	movs	r3, #128	@ 0x80
 8005eb4:	021b      	lsls	r3, r3, #8
 8005eb6:	401a      	ands	r2, r3
 8005eb8:	2380      	movs	r3, #128	@ 0x80
 8005eba:	021b      	lsls	r3, r3, #8
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d101      	bne.n	8005ec4 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 8005ec0:	2302      	movs	r3, #2
 8005ec2:	e0d2      	b.n	800606a <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2240      	movs	r2, #64	@ 0x40
 8005ec8:	5c9b      	ldrb	r3, [r3, r2]
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d101      	bne.n	8005ed2 <HAL_I2C_Master_Receive_DMA+0x52>
 8005ece:	2302      	movs	r3, #2
 8005ed0:	e0cb      	b.n	800606a <HAL_I2C_Master_Receive_DMA+0x1ea>
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2240      	movs	r2, #64	@ 0x40
 8005ed6:	2101      	movs	r1, #1
 8005ed8:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2241      	movs	r2, #65	@ 0x41
 8005ede:	2122      	movs	r1, #34	@ 0x22
 8005ee0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2242      	movs	r2, #66	@ 0x42
 8005ee6:	2110      	movs	r1, #16
 8005ee8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2200      	movs	r2, #0
 8005eee:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2208      	movs	r2, #8
 8005efa:	18ba      	adds	r2, r7, r2
 8005efc:	8812      	ldrh	r2, [r2, #0]
 8005efe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	4a5c      	ldr	r2, [pc, #368]	@ (8006074 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 8005f04:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	4a5b      	ldr	r2, [pc, #364]	@ (8006078 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 8005f0a:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	2bff      	cmp	r3, #255	@ 0xff
 8005f14:	d906      	bls.n	8005f24 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	22ff      	movs	r2, #255	@ 0xff
 8005f1a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005f1c:	2380      	movs	r3, #128	@ 0x80
 8005f1e:	045b      	lsls	r3, r3, #17
 8005f20:	617b      	str	r3, [r7, #20]
 8005f22:	e007      	b.n	8005f34 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f28:	b29a      	uxth	r2, r3
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005f2e:	2380      	movs	r3, #128	@ 0x80
 8005f30:	049b      	lsls	r3, r3, #18
 8005f32:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d100      	bne.n	8005f3e <HAL_I2C_Master_Receive_DMA+0xbe>
 8005f3c:	e078      	b.n	8006030 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d023      	beq.n	8005f8e <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f4a:	4a4c      	ldr	r2, [pc, #304]	@ (800607c <HAL_I2C_Master_Receive_DMA+0x1fc>)
 8005f4c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f52:	4a4b      	ldr	r2, [pc, #300]	@ (8006080 <HAL_I2C_Master_Receive_DMA+0x200>)
 8005f54:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f62:	2200      	movs	r2, #0
 8005f64:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	3324      	adds	r3, #36	@ 0x24
 8005f70:	0019      	movs	r1, r3
 8005f72:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005f78:	2513      	movs	r5, #19
 8005f7a:	197c      	adds	r4, r7, r5
 8005f7c:	f7ff f80c 	bl	8004f98 <HAL_DMA_Start_IT>
 8005f80:	0003      	movs	r3, r0
 8005f82:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005f84:	197b      	adds	r3, r7, r5
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d13d      	bne.n	8006008 <HAL_I2C_Master_Receive_DMA+0x188>
 8005f8c:	e013      	b.n	8005fb6 <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2241      	movs	r2, #65	@ 0x41
 8005f92:	2120      	movs	r1, #32
 8005f94:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2242      	movs	r2, #66	@ 0x42
 8005f9a:	2100      	movs	r1, #0
 8005f9c:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fa2:	2280      	movs	r2, #128	@ 0x80
 8005fa4:	431a      	orrs	r2, r3
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2240      	movs	r2, #64	@ 0x40
 8005fae:	2100      	movs	r1, #0
 8005fb0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e059      	b.n	800606a <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fba:	b2da      	uxtb	r2, r3
 8005fbc:	697c      	ldr	r4, [r7, #20]
 8005fbe:	230a      	movs	r3, #10
 8005fc0:	18fb      	adds	r3, r7, r3
 8005fc2:	8819      	ldrh	r1, [r3, #0]
 8005fc4:	68f8      	ldr	r0, [r7, #12]
 8005fc6:	4b2f      	ldr	r3, [pc, #188]	@ (8006084 <HAL_I2C_Master_Receive_DMA+0x204>)
 8005fc8:	9300      	str	r3, [sp, #0]
 8005fca:	0023      	movs	r3, r4
 8005fcc:	f001 fd64 	bl	8007a98 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fd4:	b29a      	uxth	r2, r3
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fda:	1ad3      	subs	r3, r2, r3
 8005fdc:	b29a      	uxth	r2, r3
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2240      	movs	r2, #64	@ 0x40
 8005fe6:	2100      	movs	r1, #0
 8005fe8:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2110      	movs	r1, #16
 8005fee:	0018      	movs	r0, r3
 8005ff0:	f001 fd8c 	bl	8007b0c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	2180      	movs	r1, #128	@ 0x80
 8006000:	0209      	lsls	r1, r1, #8
 8006002:	430a      	orrs	r2, r1
 8006004:	601a      	str	r2, [r3, #0]
 8006006:	e02d      	b.n	8006064 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2241      	movs	r2, #65	@ 0x41
 800600c:	2120      	movs	r1, #32
 800600e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2242      	movs	r2, #66	@ 0x42
 8006014:	2100      	movs	r1, #0
 8006016:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800601c:	2210      	movs	r2, #16
 800601e:	431a      	orrs	r2, r3
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2240      	movs	r2, #64	@ 0x40
 8006028:	2100      	movs	r1, #0
 800602a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	e01c      	b.n	800606a <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	4a15      	ldr	r2, [pc, #84]	@ (8006088 <HAL_I2C_Master_Receive_DMA+0x208>)
 8006034:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800603a:	b2da      	uxtb	r2, r3
 800603c:	2380      	movs	r3, #128	@ 0x80
 800603e:	049c      	lsls	r4, r3, #18
 8006040:	230a      	movs	r3, #10
 8006042:	18fb      	adds	r3, r7, r3
 8006044:	8819      	ldrh	r1, [r3, #0]
 8006046:	68f8      	ldr	r0, [r7, #12]
 8006048:	4b0e      	ldr	r3, [pc, #56]	@ (8006084 <HAL_I2C_Master_Receive_DMA+0x204>)
 800604a:	9300      	str	r3, [sp, #0]
 800604c:	0023      	movs	r3, r4
 800604e:	f001 fd23 	bl	8007a98 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2240      	movs	r2, #64	@ 0x40
 8006056:	2100      	movs	r1, #0
 8006058:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2102      	movs	r1, #2
 800605e:	0018      	movs	r0, r3
 8006060:	f001 fd54 	bl	8007b0c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8006064:	2300      	movs	r3, #0
 8006066:	e000      	b.n	800606a <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006068:	2302      	movs	r3, #2
  }
}
 800606a:	0018      	movs	r0, r3
 800606c:	46bd      	mov	sp, r7
 800606e:	b006      	add	sp, #24
 8006070:	bdb0      	pop	{r4, r5, r7, pc}
 8006072:	46c0      	nop			@ (mov r8, r8)
 8006074:	ffff0000 	.word	0xffff0000
 8006078:	0800683d 	.word	0x0800683d
 800607c:	08007989 	.word	0x08007989
 8006080:	08007a29 	.word	0x08007a29
 8006084:	80002400 	.word	0x80002400
 8006088:	080063d5 	.word	0x080063d5

0800608c <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800608c:	b5b0      	push	{r4, r5, r7, lr}
 800608e:	b088      	sub	sp, #32
 8006090:	af02      	add	r7, sp, #8
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	000c      	movs	r4, r1
 8006096:	0010      	movs	r0, r2
 8006098:	0019      	movs	r1, r3
 800609a:	230a      	movs	r3, #10
 800609c:	18fb      	adds	r3, r7, r3
 800609e:	1c22      	adds	r2, r4, #0
 80060a0:	801a      	strh	r2, [r3, #0]
 80060a2:	2308      	movs	r3, #8
 80060a4:	18fb      	adds	r3, r7, r3
 80060a6:	1c02      	adds	r2, r0, #0
 80060a8:	801a      	strh	r2, [r3, #0]
 80060aa:	1dbb      	adds	r3, r7, #6
 80060ac:	1c0a      	adds	r2, r1, #0
 80060ae:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2241      	movs	r2, #65	@ 0x41
 80060b4:	5c9b      	ldrb	r3, [r3, r2]
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	2b20      	cmp	r3, #32
 80060ba:	d000      	beq.n	80060be <HAL_I2C_Mem_Read_DMA+0x32>
 80060bc:	e0d6      	b.n	800626c <HAL_I2C_Mem_Read_DMA+0x1e0>
  {
    if ((pData == NULL) || (Size == 0U))
 80060be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d004      	beq.n	80060ce <HAL_I2C_Mem_Read_DMA+0x42>
 80060c4:	232c      	movs	r3, #44	@ 0x2c
 80060c6:	18fb      	adds	r3, r7, r3
 80060c8:	881b      	ldrh	r3, [r3, #0]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d105      	bne.n	80060da <HAL_I2C_Mem_Read_DMA+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2280      	movs	r2, #128	@ 0x80
 80060d2:	0092      	lsls	r2, r2, #2
 80060d4:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e0c9      	b.n	800626e <HAL_I2C_Mem_Read_DMA+0x1e2>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	699a      	ldr	r2, [r3, #24]
 80060e0:	2380      	movs	r3, #128	@ 0x80
 80060e2:	021b      	lsls	r3, r3, #8
 80060e4:	401a      	ands	r2, r3
 80060e6:	2380      	movs	r3, #128	@ 0x80
 80060e8:	021b      	lsls	r3, r3, #8
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d101      	bne.n	80060f2 <HAL_I2C_Mem_Read_DMA+0x66>
    {
      return HAL_BUSY;
 80060ee:	2302      	movs	r3, #2
 80060f0:	e0bd      	b.n	800626e <HAL_I2C_Mem_Read_DMA+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2240      	movs	r2, #64	@ 0x40
 80060f6:	5c9b      	ldrb	r3, [r3, r2]
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d101      	bne.n	8006100 <HAL_I2C_Mem_Read_DMA+0x74>
 80060fc:	2302      	movs	r3, #2
 80060fe:	e0b6      	b.n	800626e <HAL_I2C_Mem_Read_DMA+0x1e2>
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2240      	movs	r2, #64	@ 0x40
 8006104:	2101      	movs	r1, #1
 8006106:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2241      	movs	r2, #65	@ 0x41
 800610c:	2122      	movs	r1, #34	@ 0x22
 800610e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2242      	movs	r2, #66	@ 0x42
 8006114:	2140      	movs	r1, #64	@ 0x40
 8006116:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2200      	movs	r2, #0
 800611c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006122:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	222c      	movs	r2, #44	@ 0x2c
 8006128:	18ba      	adds	r2, r7, r2
 800612a:	8812      	ldrh	r2, [r2, #0]
 800612c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	4a51      	ldr	r2, [pc, #324]	@ (8006278 <HAL_I2C_Mem_Read_DMA+0x1ec>)
 8006132:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	4a51      	ldr	r2, [pc, #324]	@ (800627c <HAL_I2C_Mem_Read_DMA+0x1f0>)
 8006138:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 800613a:	230a      	movs	r3, #10
 800613c:	18fb      	adds	r3, r7, r3
 800613e:	881a      	ldrh	r2, [r3, #0]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	64da      	str	r2, [r3, #76]	@ 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006148:	b29b      	uxth	r3, r3
 800614a:	2bff      	cmp	r3, #255	@ 0xff
 800614c:	d903      	bls.n	8006156 <HAL_I2C_Mem_Read_DMA+0xca>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	22ff      	movs	r2, #255	@ 0xff
 8006152:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006154:	e004      	b.n	8006160 <HAL_I2C_Mem_Read_DMA+0xd4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800615a:	b29a      	uxth	r2, r3
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006160:	1dbb      	adds	r3, r7, #6
 8006162:	881b      	ldrh	r3, [r3, #0]
 8006164:	2b01      	cmp	r3, #1
 8006166:	d10b      	bne.n	8006180 <HAL_I2C_Mem_Read_DMA+0xf4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006168:	2308      	movs	r3, #8
 800616a:	18fb      	adds	r3, r7, r3
 800616c:	881b      	ldrh	r3, [r3, #0]
 800616e:	b2da      	uxtb	r2, r3
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2201      	movs	r2, #1
 800617a:	4252      	negs	r2, r2
 800617c:	651a      	str	r2, [r3, #80]	@ 0x50
 800617e:	e00e      	b.n	800619e <HAL_I2C_Mem_Read_DMA+0x112>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006180:	2108      	movs	r1, #8
 8006182:	187b      	adds	r3, r7, r1
 8006184:	881b      	ldrh	r3, [r3, #0]
 8006186:	0a1b      	lsrs	r3, r3, #8
 8006188:	b29b      	uxth	r3, r3
 800618a:	b2da      	uxtb	r2, r3
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8006192:	187b      	adds	r3, r7, r1
 8006194:	881b      	ldrh	r3, [r3, #0]
 8006196:	b2db      	uxtb	r3, r3
 8006198:	001a      	movs	r2, r3
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if (hi2c->hdmarx != NULL)
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d023      	beq.n	80061ee <HAL_I2C_Mem_Read_DMA+0x162>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061aa:	4a35      	ldr	r2, [pc, #212]	@ (8006280 <HAL_I2C_Mem_Read_DMA+0x1f4>)
 80061ac:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061b2:	4a34      	ldr	r2, [pc, #208]	@ (8006284 <HAL_I2C_Mem_Read_DMA+0x1f8>)
 80061b4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061ba:	2200      	movs	r2, #0
 80061bc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->hdmarx->XferAbortCallback = NULL;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061c2:	2200      	movs	r2, #0
 80061c4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	3324      	adds	r3, #36	@ 0x24
 80061d0:	0019      	movs	r1, r3
 80061d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
                                       hi2c->XferSize);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80061d8:	2517      	movs	r5, #23
 80061da:	197c      	adds	r4, r7, r5
 80061dc:	f7fe fedc 	bl	8004f98 <HAL_DMA_Start_IT>
 80061e0:	0003      	movs	r3, r0
 80061e2:	7023      	strb	r3, [r4, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 80061e4:	197b      	adds	r3, r7, r5
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d12b      	bne.n	8006244 <HAL_I2C_Mem_Read_DMA+0x1b8>
 80061ec:	e013      	b.n	8006216 <HAL_I2C_Mem_Read_DMA+0x18a>
      hi2c->State     = HAL_I2C_STATE_READY;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2241      	movs	r2, #65	@ 0x41
 80061f2:	2120      	movs	r1, #32
 80061f4:	5499      	strb	r1, [r3, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2242      	movs	r2, #66	@ 0x42
 80061fa:	2100      	movs	r1, #0
 80061fc:	5499      	strb	r1, [r3, r2]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006202:	2280      	movs	r2, #128	@ 0x80
 8006204:	431a      	orrs	r2, r3
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2240      	movs	r2, #64	@ 0x40
 800620e:	2100      	movs	r1, #0
 8006210:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e02b      	b.n	800626e <HAL_I2C_Mem_Read_DMA+0x1e2>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006216:	1dbb      	adds	r3, r7, #6
 8006218:	881b      	ldrh	r3, [r3, #0]
 800621a:	b2da      	uxtb	r2, r3
 800621c:	230a      	movs	r3, #10
 800621e:	18fb      	adds	r3, r7, r3
 8006220:	8819      	ldrh	r1, [r3, #0]
 8006222:	68f8      	ldr	r0, [r7, #12]
 8006224:	4b18      	ldr	r3, [pc, #96]	@ (8006288 <HAL_I2C_Mem_Read_DMA+0x1fc>)
 8006226:	9300      	str	r3, [sp, #0]
 8006228:	2300      	movs	r3, #0
 800622a:	f001 fc35 	bl	8007a98 <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2240      	movs	r2, #64	@ 0x40
 8006232:	2100      	movs	r1, #0
 8006234:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2101      	movs	r1, #1
 800623a:	0018      	movs	r0, r3
 800623c:	f001 fc66 	bl	8007b0c <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8006240:	2300      	movs	r3, #0
 8006242:	e014      	b.n	800626e <HAL_I2C_Mem_Read_DMA+0x1e2>
      hi2c->State     = HAL_I2C_STATE_READY;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2241      	movs	r2, #65	@ 0x41
 8006248:	2120      	movs	r1, #32
 800624a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2242      	movs	r2, #66	@ 0x42
 8006250:	2100      	movs	r1, #0
 8006252:	5499      	strb	r1, [r3, r2]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006258:	2210      	movs	r2, #16
 800625a:	431a      	orrs	r2, r3
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2240      	movs	r2, #64	@ 0x40
 8006264:	2100      	movs	r1, #0
 8006266:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	e000      	b.n	800626e <HAL_I2C_Mem_Read_DMA+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800626c:	2302      	movs	r3, #2
  }
}
 800626e:	0018      	movs	r0, r3
 8006270:	46bd      	mov	sp, r7
 8006272:	b006      	add	sp, #24
 8006274:	bdb0      	pop	{r4, r5, r7, pc}
 8006276:	46c0      	nop			@ (mov r8, r8)
 8006278:	ffff0000 	.word	0xffff0000
 800627c:	08006a35 	.word	0x08006a35
 8006280:	08007989 	.word	0x08007989
 8006284:	08007a29 	.word	0x08007a29
 8006288:	80002000 	.word	0x80002000

0800628c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	699b      	ldr	r3, [r3, #24]
 800629a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d005      	beq.n	80062b8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062b0:	68ba      	ldr	r2, [r7, #8]
 80062b2:	68f9      	ldr	r1, [r7, #12]
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	4798      	blx	r3
  }
}
 80062b8:	46c0      	nop			@ (mov r8, r8)
 80062ba:	46bd      	mov	sp, r7
 80062bc:	b004      	add	sp, #16
 80062be:	bd80      	pop	{r7, pc}

080062c0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b086      	sub	sp, #24
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	699b      	ldr	r3, [r3, #24]
 80062ce:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80062d8:	697a      	ldr	r2, [r7, #20]
 80062da:	2380      	movs	r3, #128	@ 0x80
 80062dc:	005b      	lsls	r3, r3, #1
 80062de:	4013      	ands	r3, r2
 80062e0:	d00e      	beq.n	8006300 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	2280      	movs	r2, #128	@ 0x80
 80062e6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80062e8:	d00a      	beq.n	8006300 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062ee:	2201      	movs	r2, #1
 80062f0:	431a      	orrs	r2, r3
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	2280      	movs	r2, #128	@ 0x80
 80062fc:	0052      	lsls	r2, r2, #1
 80062fe:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006300:	697a      	ldr	r2, [r7, #20]
 8006302:	2380      	movs	r3, #128	@ 0x80
 8006304:	00db      	lsls	r3, r3, #3
 8006306:	4013      	ands	r3, r2
 8006308:	d00e      	beq.n	8006328 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	2280      	movs	r2, #128	@ 0x80
 800630e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006310:	d00a      	beq.n	8006328 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006316:	2208      	movs	r2, #8
 8006318:	431a      	orrs	r2, r3
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	2280      	movs	r2, #128	@ 0x80
 8006324:	00d2      	lsls	r2, r2, #3
 8006326:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006328:	697a      	ldr	r2, [r7, #20]
 800632a:	2380      	movs	r3, #128	@ 0x80
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	4013      	ands	r3, r2
 8006330:	d00e      	beq.n	8006350 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	2280      	movs	r2, #128	@ 0x80
 8006336:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006338:	d00a      	beq.n	8006350 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800633e:	2202      	movs	r2, #2
 8006340:	431a      	orrs	r2, r3
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	2280      	movs	r2, #128	@ 0x80
 800634c:	0092      	lsls	r2, r2, #2
 800634e:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006354:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	220b      	movs	r2, #11
 800635a:	4013      	ands	r3, r2
 800635c:	d005      	beq.n	800636a <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 800635e:	68fa      	ldr	r2, [r7, #12]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	0011      	movs	r1, r2
 8006364:	0018      	movs	r0, r3
 8006366:	f001 f971 	bl	800764c <I2C_ITError>
  }
}
 800636a:	46c0      	nop			@ (mov r8, r8)
 800636c:	46bd      	mov	sp, r7
 800636e:	b006      	add	sp, #24
 8006370:	bd80      	pop	{r7, pc}

08006372 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006372:	b580      	push	{r7, lr}
 8006374:	b082      	sub	sp, #8
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800637a:	46c0      	nop			@ (mov r8, r8)
 800637c:	46bd      	mov	sp, r7
 800637e:	b002      	add	sp, #8
 8006380:	bd80      	pop	{r7, pc}

08006382 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006382:	b580      	push	{r7, lr}
 8006384:	b082      	sub	sp, #8
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800638a:	46c0      	nop			@ (mov r8, r8)
 800638c:	46bd      	mov	sp, r7
 800638e:	b002      	add	sp, #8
 8006390:	bd80      	pop	{r7, pc}

08006392 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006392:	b580      	push	{r7, lr}
 8006394:	b082      	sub	sp, #8
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
 800639a:	0008      	movs	r0, r1
 800639c:	0011      	movs	r1, r2
 800639e:	1cfb      	adds	r3, r7, #3
 80063a0:	1c02      	adds	r2, r0, #0
 80063a2:	701a      	strb	r2, [r3, #0]
 80063a4:	003b      	movs	r3, r7
 80063a6:	1c0a      	adds	r2, r1, #0
 80063a8:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80063aa:	46c0      	nop			@ (mov r8, r8)
 80063ac:	46bd      	mov	sp, r7
 80063ae:	b002      	add	sp, #8
 80063b0:	bd80      	pop	{r7, pc}

080063b2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80063b2:	b580      	push	{r7, lr}
 80063b4:	b082      	sub	sp, #8
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80063ba:	46c0      	nop			@ (mov r8, r8)
 80063bc:	46bd      	mov	sp, r7
 80063be:	b002      	add	sp, #8
 80063c0:	bd80      	pop	{r7, pc}

080063c2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80063c2:	b580      	push	{r7, lr}
 80063c4:	b082      	sub	sp, #8
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80063ca:	46c0      	nop			@ (mov r8, r8)
 80063cc:	46bd      	mov	sp, r7
 80063ce:	b002      	add	sp, #8
 80063d0:	bd80      	pop	{r7, pc}
	...

080063d4 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80063d4:	b590      	push	{r4, r7, lr}
 80063d6:	b089      	sub	sp, #36	@ 0x24
 80063d8:	af02      	add	r7, sp, #8
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	60b9      	str	r1, [r7, #8]
 80063de:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2240      	movs	r2, #64	@ 0x40
 80063e8:	5c9b      	ldrb	r3, [r3, r2]
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d101      	bne.n	80063f2 <I2C_Master_ISR_IT+0x1e>
 80063ee:	2302      	movs	r3, #2
 80063f0:	e11d      	b.n	800662e <I2C_Master_ISR_IT+0x25a>
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2240      	movs	r2, #64	@ 0x40
 80063f6:	2101      	movs	r1, #1
 80063f8:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	2210      	movs	r2, #16
 80063fe:	4013      	ands	r3, r2
 8006400:	d012      	beq.n	8006428 <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2210      	movs	r2, #16
 8006406:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006408:	d00e      	beq.n	8006428 <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	2210      	movs	r2, #16
 8006410:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006416:	2204      	movs	r2, #4
 8006418:	431a      	orrs	r2, r3
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	0018      	movs	r0, r3
 8006422:	f001 fa3e 	bl	80078a2 <I2C_Flush_TXDR>
 8006426:	e0ef      	b.n	8006608 <I2C_Master_ISR_IT+0x234>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	2204      	movs	r2, #4
 800642c:	4013      	ands	r3, r2
 800642e:	d021      	beq.n	8006474 <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2204      	movs	r2, #4
 8006434:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006436:	d01d      	beq.n	8006474 <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	2204      	movs	r2, #4
 800643c:	4393      	bics	r3, r2
 800643e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800644a:	b2d2      	uxtb	r2, r2
 800644c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006452:	1c5a      	adds	r2, r3, #1
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800645c:	3b01      	subs	r3, #1
 800645e:	b29a      	uxth	r2, r3
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006468:	b29b      	uxth	r3, r3
 800646a:	3b01      	subs	r3, #1
 800646c:	b29a      	uxth	r2, r3
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006472:	e0c9      	b.n	8006608 <I2C_Master_ISR_IT+0x234>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	2240      	movs	r2, #64	@ 0x40
 8006478:	4013      	ands	r3, r2
 800647a:	d126      	bne.n	80064ca <I2C_Master_ISR_IT+0xf6>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	2202      	movs	r2, #2
 8006480:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8006482:	d022      	beq.n	80064ca <I2C_Master_ISR_IT+0xf6>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2202      	movs	r2, #2
 8006488:	4013      	ands	r3, r2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800648a:	d01e      	beq.n	80064ca <I2C_Master_ISR_IT+0xf6>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006490:	b29b      	uxth	r3, r3
 8006492:	2b00      	cmp	r3, #0
 8006494:	d100      	bne.n	8006498 <I2C_Master_ISR_IT+0xc4>
 8006496:	e0b7      	b.n	8006608 <I2C_Master_ISR_IT+0x234>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800649c:	781a      	ldrb	r2, [r3, #0]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064a8:	1c5a      	adds	r2, r3, #1
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064b2:	3b01      	subs	r3, #1
 80064b4:	b29a      	uxth	r2, r3
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064be:	b29b      	uxth	r3, r3
 80064c0:	3b01      	subs	r3, #1
 80064c2:	b29a      	uxth	r2, r3
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 80064c8:	e09e      	b.n	8006608 <I2C_Master_ISR_IT+0x234>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	2280      	movs	r2, #128	@ 0x80
 80064ce:	4013      	ands	r3, r2
 80064d0:	d100      	bne.n	80064d4 <I2C_Master_ISR_IT+0x100>
 80064d2:	e069      	b.n	80065a8 <I2C_Master_ISR_IT+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2240      	movs	r2, #64	@ 0x40
 80064d8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80064da:	d065      	beq.n	80065a8 <I2C_Master_ISR_IT+0x1d4>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d04a      	beq.n	800657c <I2C_Master_ISR_IT+0x1a8>
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d146      	bne.n	800657c <I2C_Master_ISR_IT+0x1a8>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	b29a      	uxth	r2, r3
 80064f6:	2112      	movs	r1, #18
 80064f8:	187b      	adds	r3, r7, r1
 80064fa:	0592      	lsls	r2, r2, #22
 80064fc:	0d92      	lsrs	r2, r2, #22
 80064fe:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006504:	b29b      	uxth	r3, r3
 8006506:	2bff      	cmp	r3, #255	@ 0xff
 8006508:	d910      	bls.n	800652c <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	22ff      	movs	r2, #255	@ 0xff
 800650e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006514:	b2da      	uxtb	r2, r3
 8006516:	2380      	movs	r3, #128	@ 0x80
 8006518:	045c      	lsls	r4, r3, #17
 800651a:	187b      	adds	r3, r7, r1
 800651c:	8819      	ldrh	r1, [r3, #0]
 800651e:	68f8      	ldr	r0, [r7, #12]
 8006520:	2300      	movs	r3, #0
 8006522:	9300      	str	r3, [sp, #0]
 8006524:	0023      	movs	r3, r4
 8006526:	f001 fab7 	bl	8007a98 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800652a:	e03c      	b.n	80065a6 <I2C_Master_ISR_IT+0x1d2>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006530:	b29a      	uxth	r2, r3
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800653a:	4a3f      	ldr	r2, [pc, #252]	@ (8006638 <I2C_Master_ISR_IT+0x264>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d00e      	beq.n	800655e <I2C_Master_ISR_IT+0x18a>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006544:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800654a:	2312      	movs	r3, #18
 800654c:	18fb      	adds	r3, r7, r3
 800654e:	8819      	ldrh	r1, [r3, #0]
 8006550:	68f8      	ldr	r0, [r7, #12]
 8006552:	2300      	movs	r3, #0
 8006554:	9300      	str	r3, [sp, #0]
 8006556:	0023      	movs	r3, r4
 8006558:	f001 fa9e 	bl	8007a98 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800655c:	e023      	b.n	80065a6 <I2C_Master_ISR_IT+0x1d2>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006562:	b2da      	uxtb	r2, r3
 8006564:	2380      	movs	r3, #128	@ 0x80
 8006566:	049c      	lsls	r4, r3, #18
 8006568:	2312      	movs	r3, #18
 800656a:	18fb      	adds	r3, r7, r3
 800656c:	8819      	ldrh	r1, [r3, #0]
 800656e:	68f8      	ldr	r0, [r7, #12]
 8006570:	2300      	movs	r3, #0
 8006572:	9300      	str	r3, [sp, #0]
 8006574:	0023      	movs	r3, r4
 8006576:	f001 fa8f 	bl	8007a98 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800657a:	e014      	b.n	80065a6 <I2C_Master_ISR_IT+0x1d2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	685a      	ldr	r2, [r3, #4]
 8006582:	2380      	movs	r3, #128	@ 0x80
 8006584:	049b      	lsls	r3, r3, #18
 8006586:	401a      	ands	r2, r3
 8006588:	2380      	movs	r3, #128	@ 0x80
 800658a:	049b      	lsls	r3, r3, #18
 800658c:	429a      	cmp	r2, r3
 800658e:	d004      	beq.n	800659a <I2C_Master_ISR_IT+0x1c6>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	0018      	movs	r0, r3
 8006594:	f000 fd06 	bl	8006fa4 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006598:	e036      	b.n	8006608 <I2C_Master_ISR_IT+0x234>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2140      	movs	r1, #64	@ 0x40
 800659e:	0018      	movs	r0, r3
 80065a0:	f001 f854 	bl	800764c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80065a4:	e030      	b.n	8006608 <I2C_Master_ISR_IT+0x234>
 80065a6:	e02f      	b.n	8006608 <I2C_Master_ISR_IT+0x234>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	2240      	movs	r2, #64	@ 0x40
 80065ac:	4013      	ands	r3, r2
 80065ae:	d02b      	beq.n	8006608 <I2C_Master_ISR_IT+0x234>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2240      	movs	r2, #64	@ 0x40
 80065b4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80065b6:	d027      	beq.n	8006608 <I2C_Master_ISR_IT+0x234>
  {
    if (hi2c->XferCount == 0U)
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065bc:	b29b      	uxth	r3, r3
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d11d      	bne.n	80065fe <I2C_Master_ISR_IT+0x22a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	685a      	ldr	r2, [r3, #4]
 80065c8:	2380      	movs	r3, #128	@ 0x80
 80065ca:	049b      	lsls	r3, r3, #18
 80065cc:	401a      	ands	r2, r3
 80065ce:	2380      	movs	r3, #128	@ 0x80
 80065d0:	049b      	lsls	r3, r3, #18
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d018      	beq.n	8006608 <I2C_Master_ISR_IT+0x234>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065da:	4a17      	ldr	r2, [pc, #92]	@ (8006638 <I2C_Master_ISR_IT+0x264>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d109      	bne.n	80065f4 <I2C_Master_ISR_IT+0x220>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	685a      	ldr	r2, [r3, #4]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2180      	movs	r1, #128	@ 0x80
 80065ec:	01c9      	lsls	r1, r1, #7
 80065ee:	430a      	orrs	r2, r1
 80065f0:	605a      	str	r2, [r3, #4]
 80065f2:	e009      	b.n	8006608 <I2C_Master_ISR_IT+0x234>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	0018      	movs	r0, r3
 80065f8:	f000 fcd4 	bl	8006fa4 <I2C_ITMasterSeqCplt>
 80065fc:	e004      	b.n	8006608 <I2C_Master_ISR_IT+0x234>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2140      	movs	r1, #64	@ 0x40
 8006602:	0018      	movs	r0, r3
 8006604:	f001 f822 	bl	800764c <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	2220      	movs	r2, #32
 800660c:	4013      	ands	r3, r2
 800660e:	d009      	beq.n	8006624 <I2C_Master_ISR_IT+0x250>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2220      	movs	r2, #32
 8006614:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006616:	d005      	beq.n	8006624 <I2C_Master_ISR_IT+0x250>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8006618:	697a      	ldr	r2, [r7, #20]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	0011      	movs	r1, r2
 800661e:	0018      	movs	r0, r3
 8006620:	f000 fd66 	bl	80070f0 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2240      	movs	r2, #64	@ 0x40
 8006628:	2100      	movs	r1, #0
 800662a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800662c:	2300      	movs	r3, #0
}
 800662e:	0018      	movs	r0, r3
 8006630:	46bd      	mov	sp, r7
 8006632:	b007      	add	sp, #28
 8006634:	bd90      	pop	{r4, r7, pc}
 8006636:	46c0      	nop			@ (mov r8, r8)
 8006638:	ffff0000 	.word	0xffff0000

0800663c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b086      	sub	sp, #24
 8006640:	af00      	add	r7, sp, #0
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	60b9      	str	r1, [r7, #8]
 8006646:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800664c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2240      	movs	r2, #64	@ 0x40
 8006656:	5c9b      	ldrb	r3, [r3, r2]
 8006658:	2b01      	cmp	r3, #1
 800665a:	d101      	bne.n	8006660 <I2C_Slave_ISR_IT+0x24>
 800665c:	2302      	movs	r3, #2
 800665e:	e0e7      	b.n	8006830 <I2C_Slave_ISR_IT+0x1f4>
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2240      	movs	r2, #64	@ 0x40
 8006664:	2101      	movs	r1, #1
 8006666:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	2220      	movs	r2, #32
 800666c:	4013      	ands	r3, r2
 800666e:	d00a      	beq.n	8006686 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2220      	movs	r2, #32
 8006674:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006676:	d006      	beq.n	8006686 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8006678:	693a      	ldr	r2, [r7, #16]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	0011      	movs	r1, r2
 800667e:	0018      	movs	r0, r3
 8006680:	f000 fe04 	bl	800728c <I2C_ITSlaveCplt>
 8006684:	e0cf      	b.n	8006826 <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	2210      	movs	r2, #16
 800668a:	4013      	ands	r3, r2
 800668c:	d052      	beq.n	8006734 <I2C_Slave_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2210      	movs	r2, #16
 8006692:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006694:	d04e      	beq.n	8006734 <I2C_Slave_ISR_IT+0xf8>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800669a:	b29b      	uxth	r3, r3
 800669c:	2b00      	cmp	r3, #0
 800669e:	d12d      	bne.n	80066fc <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2241      	movs	r2, #65	@ 0x41
 80066a4:	5c9b      	ldrb	r3, [r3, r2]
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	2b28      	cmp	r3, #40	@ 0x28
 80066aa:	d10b      	bne.n	80066c4 <I2C_Slave_ISR_IT+0x88>
 80066ac:	697a      	ldr	r2, [r7, #20]
 80066ae:	2380      	movs	r3, #128	@ 0x80
 80066b0:	049b      	lsls	r3, r3, #18
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d106      	bne.n	80066c4 <I2C_Slave_ISR_IT+0x88>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80066b6:	693a      	ldr	r2, [r7, #16]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	0011      	movs	r1, r2
 80066bc:	0018      	movs	r0, r3
 80066be:	f000 ff6d 	bl	800759c <I2C_ITListenCplt>
 80066c2:	e036      	b.n	8006732 <I2C_Slave_ISR_IT+0xf6>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2241      	movs	r2, #65	@ 0x41
 80066c8:	5c9b      	ldrb	r3, [r3, r2]
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	2b29      	cmp	r3, #41	@ 0x29
 80066ce:	d110      	bne.n	80066f2 <I2C_Slave_ISR_IT+0xb6>
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	4a59      	ldr	r2, [pc, #356]	@ (8006838 <I2C_Slave_ISR_IT+0x1fc>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d00c      	beq.n	80066f2 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2210      	movs	r2, #16
 80066de:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	0018      	movs	r0, r3
 80066e4:	f001 f8dd 	bl	80078a2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	0018      	movs	r0, r3
 80066ec:	f000 fc9c 	bl	8007028 <I2C_ITSlaveSeqCplt>
 80066f0:	e01f      	b.n	8006732 <I2C_Slave_ISR_IT+0xf6>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	2210      	movs	r2, #16
 80066f8:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80066fa:	e091      	b.n	8006820 <I2C_Slave_ISR_IT+0x1e4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	2210      	movs	r2, #16
 8006702:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006708:	2204      	movs	r2, #4
 800670a:	431a      	orrs	r2, r3
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d005      	beq.n	8006722 <I2C_Slave_ISR_IT+0xe6>
 8006716:	697a      	ldr	r2, [r7, #20]
 8006718:	2380      	movs	r3, #128	@ 0x80
 800671a:	045b      	lsls	r3, r3, #17
 800671c:	429a      	cmp	r2, r3
 800671e:	d000      	beq.n	8006722 <I2C_Slave_ISR_IT+0xe6>
 8006720:	e07e      	b.n	8006820 <I2C_Slave_ISR_IT+0x1e4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	0011      	movs	r1, r2
 800672a:	0018      	movs	r0, r3
 800672c:	f000 ff8e 	bl	800764c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006730:	e076      	b.n	8006820 <I2C_Slave_ISR_IT+0x1e4>
 8006732:	e075      	b.n	8006820 <I2C_Slave_ISR_IT+0x1e4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	2204      	movs	r2, #4
 8006738:	4013      	ands	r3, r2
 800673a:	d02f      	beq.n	800679c <I2C_Slave_ISR_IT+0x160>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2204      	movs	r2, #4
 8006740:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006742:	d02b      	beq.n	800679c <I2C_Slave_ISR_IT+0x160>
  {
    if (hi2c->XferCount > 0U)
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006748:	b29b      	uxth	r3, r3
 800674a:	2b00      	cmp	r3, #0
 800674c:	d018      	beq.n	8006780 <I2C_Slave_ISR_IT+0x144>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006758:	b2d2      	uxtb	r2, r2
 800675a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006760:	1c5a      	adds	r2, r3, #1
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800676a:	3b01      	subs	r3, #1
 800676c:	b29a      	uxth	r2, r3
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006776:	b29b      	uxth	r3, r3
 8006778:	3b01      	subs	r3, #1
 800677a:	b29a      	uxth	r2, r3
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006784:	b29b      	uxth	r3, r3
 8006786:	2b00      	cmp	r3, #0
 8006788:	d14c      	bne.n	8006824 <I2C_Slave_ISR_IT+0x1e8>
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	4a2a      	ldr	r2, [pc, #168]	@ (8006838 <I2C_Slave_ISR_IT+0x1fc>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d048      	beq.n	8006824 <I2C_Slave_ISR_IT+0x1e8>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	0018      	movs	r0, r3
 8006796:	f000 fc47 	bl	8007028 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800679a:	e043      	b.n	8006824 <I2C_Slave_ISR_IT+0x1e8>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	2208      	movs	r2, #8
 80067a0:	4013      	ands	r3, r2
 80067a2:	d00a      	beq.n	80067ba <I2C_Slave_ISR_IT+0x17e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2208      	movs	r2, #8
 80067a8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80067aa:	d006      	beq.n	80067ba <I2C_Slave_ISR_IT+0x17e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80067ac:	693a      	ldr	r2, [r7, #16]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	0011      	movs	r1, r2
 80067b2:	0018      	movs	r0, r3
 80067b4:	f000 fb52 	bl	8006e5c <I2C_ITAddrCplt>
 80067b8:	e035      	b.n	8006826 <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	2202      	movs	r2, #2
 80067be:	4013      	ands	r3, r2
 80067c0:	d031      	beq.n	8006826 <I2C_Slave_ISR_IT+0x1ea>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2202      	movs	r2, #2
 80067c6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80067c8:	d02d      	beq.n	8006826 <I2C_Slave_ISR_IT+0x1ea>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d018      	beq.n	8006806 <I2C_Slave_ISR_IT+0x1ca>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067d8:	781a      	ldrb	r2, [r3, #0]
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067e4:	1c5a      	adds	r2, r3, #1
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	3b01      	subs	r3, #1
 80067f2:	b29a      	uxth	r2, r3
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067fc:	3b01      	subs	r3, #1
 80067fe:	b29a      	uxth	r2, r3
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006804:	e00f      	b.n	8006826 <I2C_Slave_ISR_IT+0x1ea>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006806:	697a      	ldr	r2, [r7, #20]
 8006808:	2380      	movs	r3, #128	@ 0x80
 800680a:	045b      	lsls	r3, r3, #17
 800680c:	429a      	cmp	r2, r3
 800680e:	d002      	beq.n	8006816 <I2C_Slave_ISR_IT+0x1da>
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d107      	bne.n	8006826 <I2C_Slave_ISR_IT+0x1ea>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	0018      	movs	r0, r3
 800681a:	f000 fc05 	bl	8007028 <I2C_ITSlaveSeqCplt>
 800681e:	e002      	b.n	8006826 <I2C_Slave_ISR_IT+0x1ea>
    if (hi2c->XferCount == 0U)
 8006820:	46c0      	nop			@ (mov r8, r8)
 8006822:	e000      	b.n	8006826 <I2C_Slave_ISR_IT+0x1ea>
    if ((hi2c->XferCount == 0U) && \
 8006824:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2240      	movs	r2, #64	@ 0x40
 800682a:	2100      	movs	r1, #0
 800682c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800682e:	2300      	movs	r3, #0
}
 8006830:	0018      	movs	r0, r3
 8006832:	46bd      	mov	sp, r7
 8006834:	b006      	add	sp, #24
 8006836:	bd80      	pop	{r7, pc}
 8006838:	ffff0000 	.word	0xffff0000

0800683c <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800683c:	b590      	push	{r4, r7, lr}
 800683e:	b089      	sub	sp, #36	@ 0x24
 8006840:	af02      	add	r7, sp, #8
 8006842:	60f8      	str	r0, [r7, #12]
 8006844:	60b9      	str	r1, [r7, #8]
 8006846:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2240      	movs	r2, #64	@ 0x40
 800684c:	5c9b      	ldrb	r3, [r3, r2]
 800684e:	2b01      	cmp	r3, #1
 8006850:	d101      	bne.n	8006856 <I2C_Master_ISR_DMA+0x1a>
 8006852:	2302      	movs	r3, #2
 8006854:	e0e7      	b.n	8006a26 <I2C_Master_ISR_DMA+0x1ea>
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2240      	movs	r2, #64	@ 0x40
 800685a:	2101      	movs	r1, #1
 800685c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	2210      	movs	r2, #16
 8006862:	4013      	ands	r3, r2
 8006864:	d017      	beq.n	8006896 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2210      	movs	r2, #16
 800686a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800686c:	d013      	beq.n	8006896 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	2210      	movs	r2, #16
 8006874:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800687a:	2204      	movs	r2, #4
 800687c:	431a      	orrs	r2, r3
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2120      	movs	r1, #32
 8006886:	0018      	movs	r0, r3
 8006888:	f001 f940 	bl	8007b0c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	0018      	movs	r0, r3
 8006890:	f001 f807 	bl	80078a2 <I2C_Flush_TXDR>
 8006894:	e0c2      	b.n	8006a1c <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	2280      	movs	r2, #128	@ 0x80
 800689a:	4013      	ands	r3, r2
 800689c:	d100      	bne.n	80068a0 <I2C_Master_ISR_DMA+0x64>
 800689e:	e07c      	b.n	800699a <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2240      	movs	r2, #64	@ 0x40
 80068a4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80068a6:	d100      	bne.n	80068aa <I2C_Master_ISR_DMA+0x6e>
 80068a8:	e077      	b.n	800699a <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	2140      	movs	r1, #64	@ 0x40
 80068b6:	438a      	bics	r2, r1
 80068b8:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068be:	b29b      	uxth	r3, r3
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d055      	beq.n	8006970 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	b29a      	uxth	r2, r3
 80068cc:	2312      	movs	r3, #18
 80068ce:	18fb      	adds	r3, r7, r3
 80068d0:	0592      	lsls	r2, r2, #22
 80068d2:	0d92      	lsrs	r2, r2, #22
 80068d4:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068da:	b29b      	uxth	r3, r3
 80068dc:	2bff      	cmp	r3, #255	@ 0xff
 80068de:	d906      	bls.n	80068ee <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	22ff      	movs	r2, #255	@ 0xff
 80068e4:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 80068e6:	2380      	movs	r3, #128	@ 0x80
 80068e8:	045b      	lsls	r3, r3, #17
 80068ea:	617b      	str	r3, [r7, #20]
 80068ec:	e010      	b.n	8006910 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068f2:	b29a      	uxth	r2, r3
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068fc:	4a4c      	ldr	r2, [pc, #304]	@ (8006a30 <I2C_Master_ISR_DMA+0x1f4>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d003      	beq.n	800690a <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006906:	617b      	str	r3, [r7, #20]
 8006908:	e002      	b.n	8006910 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800690a:	2380      	movs	r3, #128	@ 0x80
 800690c:	049b      	lsls	r3, r3, #18
 800690e:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006914:	b2da      	uxtb	r2, r3
 8006916:	697c      	ldr	r4, [r7, #20]
 8006918:	2312      	movs	r3, #18
 800691a:	18fb      	adds	r3, r7, r3
 800691c:	8819      	ldrh	r1, [r3, #0]
 800691e:	68f8      	ldr	r0, [r7, #12]
 8006920:	2300      	movs	r3, #0
 8006922:	9300      	str	r3, [sp, #0]
 8006924:	0023      	movs	r3, r4
 8006926:	f001 f8b7 	bl	8007a98 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800692e:	b29a      	uxth	r2, r3
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006934:	1ad3      	subs	r3, r2, r3
 8006936:	b29a      	uxth	r2, r3
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2241      	movs	r2, #65	@ 0x41
 8006940:	5c9b      	ldrb	r3, [r3, r2]
 8006942:	b2db      	uxtb	r3, r3
 8006944:	2b22      	cmp	r3, #34	@ 0x22
 8006946:	d109      	bne.n	800695c <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	2180      	movs	r1, #128	@ 0x80
 8006954:	0209      	lsls	r1, r1, #8
 8006956:	430a      	orrs	r2, r1
 8006958:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800695a:	e05f      	b.n	8006a1c <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	681a      	ldr	r2, [r3, #0]
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	2180      	movs	r1, #128	@ 0x80
 8006968:	01c9      	lsls	r1, r1, #7
 800696a:	430a      	orrs	r2, r1
 800696c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800696e:	e055      	b.n	8006a1c <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	685a      	ldr	r2, [r3, #4]
 8006976:	2380      	movs	r3, #128	@ 0x80
 8006978:	049b      	lsls	r3, r3, #18
 800697a:	401a      	ands	r2, r3
 800697c:	2380      	movs	r3, #128	@ 0x80
 800697e:	049b      	lsls	r3, r3, #18
 8006980:	429a      	cmp	r2, r3
 8006982:	d004      	beq.n	800698e <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	0018      	movs	r0, r3
 8006988:	f000 fb0c 	bl	8006fa4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800698c:	e046      	b.n	8006a1c <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2140      	movs	r1, #64	@ 0x40
 8006992:	0018      	movs	r0, r3
 8006994:	f000 fe5a 	bl	800764c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006998:	e040      	b.n	8006a1c <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	2240      	movs	r2, #64	@ 0x40
 800699e:	4013      	ands	r3, r2
 80069a0:	d02c      	beq.n	80069fc <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2240      	movs	r2, #64	@ 0x40
 80069a6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80069a8:	d028      	beq.n	80069fc <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d11d      	bne.n	80069f0 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	685a      	ldr	r2, [r3, #4]
 80069ba:	2380      	movs	r3, #128	@ 0x80
 80069bc:	049b      	lsls	r3, r3, #18
 80069be:	401a      	ands	r2, r3
 80069c0:	2380      	movs	r3, #128	@ 0x80
 80069c2:	049b      	lsls	r3, r3, #18
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d028      	beq.n	8006a1a <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069cc:	4a18      	ldr	r2, [pc, #96]	@ (8006a30 <I2C_Master_ISR_DMA+0x1f4>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d109      	bne.n	80069e6 <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	685a      	ldr	r2, [r3, #4]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	2180      	movs	r1, #128	@ 0x80
 80069de:	01c9      	lsls	r1, r1, #7
 80069e0:	430a      	orrs	r2, r1
 80069e2:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80069e4:	e019      	b.n	8006a1a <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	0018      	movs	r0, r3
 80069ea:	f000 fadb 	bl	8006fa4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80069ee:	e014      	b.n	8006a1a <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2140      	movs	r1, #64	@ 0x40
 80069f4:	0018      	movs	r0, r3
 80069f6:	f000 fe29 	bl	800764c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80069fa:	e00e      	b.n	8006a1a <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	2220      	movs	r2, #32
 8006a00:	4013      	ands	r3, r2
 8006a02:	d00b      	beq.n	8006a1c <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2220      	movs	r2, #32
 8006a08:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006a0a:	d007      	beq.n	8006a1c <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006a0c:	68ba      	ldr	r2, [r7, #8]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	0011      	movs	r1, r2
 8006a12:	0018      	movs	r0, r3
 8006a14:	f000 fb6c 	bl	80070f0 <I2C_ITMasterCplt>
 8006a18:	e000      	b.n	8006a1c <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 8006a1a:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2240      	movs	r2, #64	@ 0x40
 8006a20:	2100      	movs	r1, #0
 8006a22:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	0018      	movs	r0, r3
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	b007      	add	sp, #28
 8006a2c:	bd90      	pop	{r4, r7, pc}
 8006a2e:	46c0      	nop			@ (mov r8, r8)
 8006a30:	ffff0000 	.word	0xffff0000

08006a34 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8006a34:	b590      	push	{r4, r7, lr}
 8006a36:	b089      	sub	sp, #36	@ 0x24
 8006a38:	af02      	add	r7, sp, #8
 8006a3a:	60f8      	str	r0, [r7, #12]
 8006a3c:	60b9      	str	r1, [r7, #8]
 8006a3e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8006a40:	4b90      	ldr	r3, [pc, #576]	@ (8006c84 <I2C_Mem_ISR_DMA+0x250>)
 8006a42:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2240      	movs	r2, #64	@ 0x40
 8006a48:	5c9b      	ldrb	r3, [r3, r2]
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d101      	bne.n	8006a52 <I2C_Mem_ISR_DMA+0x1e>
 8006a4e:	2302      	movs	r3, #2
 8006a50:	e113      	b.n	8006c7a <I2C_Mem_ISR_DMA+0x246>
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2240      	movs	r2, #64	@ 0x40
 8006a56:	2101      	movs	r1, #1
 8006a58:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	2210      	movs	r2, #16
 8006a5e:	4013      	ands	r3, r2
 8006a60:	d017      	beq.n	8006a92 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2210      	movs	r2, #16
 8006a66:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006a68:	d013      	beq.n	8006a92 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	2210      	movs	r2, #16
 8006a70:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a76:	2204      	movs	r2, #4
 8006a78:	431a      	orrs	r2, r3
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2120      	movs	r1, #32
 8006a82:	0018      	movs	r0, r3
 8006a84:	f001 f842 	bl	8007b0c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	0018      	movs	r0, r3
 8006a8c:	f000 ff09 	bl	80078a2 <I2C_Flush_TXDR>
 8006a90:	e0ee      	b.n	8006c70 <I2C_Mem_ISR_DMA+0x23c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	2202      	movs	r2, #2
 8006a96:	4013      	ands	r3, r2
 8006a98:	d00d      	beq.n	8006ab6 <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2202      	movs	r2, #2
 8006a9e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006aa0:	d009      	beq.n	8006ab6 <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	68fa      	ldr	r2, [r7, #12]
 8006aa8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006aaa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	4252      	negs	r2, r2
 8006ab2:	651a      	str	r2, [r3, #80]	@ 0x50
 8006ab4:	e0dc      	b.n	8006c70 <I2C_Mem_ISR_DMA+0x23c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	2280      	movs	r2, #128	@ 0x80
 8006aba:	4013      	ands	r3, r2
 8006abc:	d063      	beq.n	8006b86 <I2C_Mem_ISR_DMA+0x152>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2240      	movs	r2, #64	@ 0x40
 8006ac2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006ac4:	d05f      	beq.n	8006b86 <I2C_Mem_ISR_DMA+0x152>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2101      	movs	r1, #1
 8006aca:	0018      	movs	r0, r3
 8006acc:	f001 f8a8 	bl	8007c20 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2110      	movs	r1, #16
 8006ad4:	0018      	movs	r0, r3
 8006ad6:	f001 f819 	bl	8007b0c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d04a      	beq.n	8006b7a <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	2bff      	cmp	r3, #255	@ 0xff
 8006aec:	d910      	bls.n	8006b10 <I2C_Mem_ISR_DMA+0xdc>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	22ff      	movs	r2, #255	@ 0xff
 8006af2:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006af8:	b299      	uxth	r1, r3
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006afe:	b2da      	uxtb	r2, r3
 8006b00:	2380      	movs	r3, #128	@ 0x80
 8006b02:	045b      	lsls	r3, r3, #17
 8006b04:	68f8      	ldr	r0, [r7, #12]
 8006b06:	2400      	movs	r4, #0
 8006b08:	9400      	str	r4, [sp, #0]
 8006b0a:	f000 ffc5 	bl	8007a98 <I2C_TransferConfig>
 8006b0e:	e011      	b.n	8006b34 <I2C_Mem_ISR_DMA+0x100>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b14:	b29a      	uxth	r2, r3
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b1e:	b299      	uxth	r1, r3
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b24:	b2da      	uxtb	r2, r3
 8006b26:	2380      	movs	r3, #128	@ 0x80
 8006b28:	049b      	lsls	r3, r3, #18
 8006b2a:	68f8      	ldr	r0, [r7, #12]
 8006b2c:	2400      	movs	r4, #0
 8006b2e:	9400      	str	r4, [sp, #0]
 8006b30:	f000 ffb2 	bl	8007a98 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b38:	b29a      	uxth	r2, r3
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b3e:	1ad3      	subs	r3, r2, r3
 8006b40:	b29a      	uxth	r2, r3
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2241      	movs	r2, #65	@ 0x41
 8006b4a:	5c9b      	ldrb	r3, [r3, r2]
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	2b22      	cmp	r3, #34	@ 0x22
 8006b50:	d109      	bne.n	8006b66 <I2C_Mem_ISR_DMA+0x132>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	2180      	movs	r1, #128	@ 0x80
 8006b5e:	0209      	lsls	r1, r1, #8
 8006b60:	430a      	orrs	r2, r1
 8006b62:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006b64:	e084      	b.n	8006c70 <I2C_Mem_ISR_DMA+0x23c>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	2180      	movs	r1, #128	@ 0x80
 8006b72:	01c9      	lsls	r1, r1, #7
 8006b74:	430a      	orrs	r2, r1
 8006b76:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006b78:	e07a      	b.n	8006c70 <I2C_Mem_ISR_DMA+0x23c>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2140      	movs	r1, #64	@ 0x40
 8006b7e:	0018      	movs	r0, r3
 8006b80:	f000 fd64 	bl	800764c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006b84:	e074      	b.n	8006c70 <I2C_Mem_ISR_DMA+0x23c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	2240      	movs	r2, #64	@ 0x40
 8006b8a:	4013      	ands	r3, r2
 8006b8c:	d062      	beq.n	8006c54 <I2C_Mem_ISR_DMA+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2240      	movs	r2, #64	@ 0x40
 8006b92:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006b94:	d05e      	beq.n	8006c54 <I2C_Mem_ISR_DMA+0x220>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2101      	movs	r1, #1
 8006b9a:	0018      	movs	r0, r3
 8006b9c:	f001 f840 	bl	8007c20 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2110      	movs	r1, #16
 8006ba4:	0018      	movs	r0, r3
 8006ba6:	f000 ffb1 	bl	8007b0c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2241      	movs	r2, #65	@ 0x41
 8006bae:	5c9b      	ldrb	r3, [r3, r2]
 8006bb0:	b2db      	uxtb	r3, r3
 8006bb2:	2b22      	cmp	r3, #34	@ 0x22
 8006bb4:	d101      	bne.n	8006bba <I2C_Mem_ISR_DMA+0x186>
    {
      direction = I2C_GENERATE_START_READ;
 8006bb6:	4b34      	ldr	r3, [pc, #208]	@ (8006c88 <I2C_Mem_ISR_DMA+0x254>)
 8006bb8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	2bff      	cmp	r3, #255	@ 0xff
 8006bc2:	d911      	bls.n	8006be8 <I2C_Mem_ISR_DMA+0x1b4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	22ff      	movs	r2, #255	@ 0xff
 8006bc8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bce:	b299      	uxth	r1, r3
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bd4:	b2da      	uxtb	r2, r3
 8006bd6:	2380      	movs	r3, #128	@ 0x80
 8006bd8:	045c      	lsls	r4, r3, #17
 8006bda:	68f8      	ldr	r0, [r7, #12]
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	9300      	str	r3, [sp, #0]
 8006be0:	0023      	movs	r3, r4
 8006be2:	f000 ff59 	bl	8007a98 <I2C_TransferConfig>
 8006be6:	e012      	b.n	8006c0e <I2C_Mem_ISR_DMA+0x1da>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bec:	b29a      	uxth	r2, r3
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bf6:	b299      	uxth	r1, r3
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bfc:	b2da      	uxtb	r2, r3
 8006bfe:	2380      	movs	r3, #128	@ 0x80
 8006c00:	049c      	lsls	r4, r3, #18
 8006c02:	68f8      	ldr	r0, [r7, #12]
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	9300      	str	r3, [sp, #0]
 8006c08:	0023      	movs	r3, r4
 8006c0a:	f000 ff45 	bl	8007a98 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c12:	b29a      	uxth	r2, r3
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c18:	1ad3      	subs	r3, r2, r3
 8006c1a:	b29a      	uxth	r2, r3
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2241      	movs	r2, #65	@ 0x41
 8006c24:	5c9b      	ldrb	r3, [r3, r2]
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	2b22      	cmp	r3, #34	@ 0x22
 8006c2a:	d109      	bne.n	8006c40 <I2C_Mem_ISR_DMA+0x20c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	2180      	movs	r1, #128	@ 0x80
 8006c38:	0209      	lsls	r1, r1, #8
 8006c3a:	430a      	orrs	r2, r1
 8006c3c:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006c3e:	e017      	b.n	8006c70 <I2C_Mem_ISR_DMA+0x23c>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	2180      	movs	r1, #128	@ 0x80
 8006c4c:	01c9      	lsls	r1, r1, #7
 8006c4e:	430a      	orrs	r2, r1
 8006c50:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006c52:	e00d      	b.n	8006c70 <I2C_Mem_ISR_DMA+0x23c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	2220      	movs	r2, #32
 8006c58:	4013      	ands	r3, r2
 8006c5a:	d009      	beq.n	8006c70 <I2C_Mem_ISR_DMA+0x23c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2220      	movs	r2, #32
 8006c60:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006c62:	d005      	beq.n	8006c70 <I2C_Mem_ISR_DMA+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006c64:	68ba      	ldr	r2, [r7, #8]
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	0011      	movs	r1, r2
 8006c6a:	0018      	movs	r0, r3
 8006c6c:	f000 fa40 	bl	80070f0 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2240      	movs	r2, #64	@ 0x40
 8006c74:	2100      	movs	r1, #0
 8006c76:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006c78:	2300      	movs	r3, #0
}
 8006c7a:	0018      	movs	r0, r3
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	b007      	add	sp, #28
 8006c80:	bd90      	pop	{r4, r7, pc}
 8006c82:	46c0      	nop			@ (mov r8, r8)
 8006c84:	80002000 	.word	0x80002000
 8006c88:	80002400 	.word	0x80002400

08006c8c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b088      	sub	sp, #32
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	60f8      	str	r0, [r7, #12]
 8006c94:	60b9      	str	r1, [r7, #8]
 8006c96:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c9c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2240      	movs	r2, #64	@ 0x40
 8006ca6:	5c9b      	ldrb	r3, [r3, r2]
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d101      	bne.n	8006cb0 <I2C_Slave_ISR_DMA+0x24>
 8006cac:	2302      	movs	r3, #2
 8006cae:	e0ce      	b.n	8006e4e <I2C_Slave_ISR_DMA+0x1c2>
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2240      	movs	r2, #64	@ 0x40
 8006cb4:	2101      	movs	r1, #1
 8006cb6:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	2220      	movs	r2, #32
 8006cbc:	4013      	ands	r3, r2
 8006cbe:	d00a      	beq.n	8006cd6 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2220      	movs	r2, #32
 8006cc4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006cc6:	d006      	beq.n	8006cd6 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8006cc8:	68ba      	ldr	r2, [r7, #8]
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	0011      	movs	r1, r2
 8006cce:	0018      	movs	r0, r3
 8006cd0:	f000 fadc 	bl	800728c <I2C_ITSlaveCplt>
 8006cd4:	e0b6      	b.n	8006e44 <I2C_Slave_ISR_DMA+0x1b8>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	2210      	movs	r2, #16
 8006cda:	4013      	ands	r3, r2
 8006cdc:	d100      	bne.n	8006ce0 <I2C_Slave_ISR_DMA+0x54>
 8006cde:	e0a3      	b.n	8006e28 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2210      	movs	r2, #16
 8006ce4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006ce6:	d100      	bne.n	8006cea <I2C_Slave_ISR_DMA+0x5e>
 8006ce8:	e09e      	b.n	8006e28 <I2C_Slave_ISR_DMA+0x19c>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	2380      	movs	r3, #128	@ 0x80
 8006cee:	01db      	lsls	r3, r3, #7
 8006cf0:	4013      	ands	r3, r2
 8006cf2:	d105      	bne.n	8006d00 <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	2380      	movs	r3, #128	@ 0x80
 8006cf8:	021b      	lsls	r3, r3, #8
 8006cfa:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006cfc:	d100      	bne.n	8006d00 <I2C_Slave_ISR_DMA+0x74>
 8006cfe:	e08c      	b.n	8006e1a <I2C_Slave_ISR_DMA+0x18e>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d00c      	beq.n	8006d22 <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	2380      	movs	r3, #128	@ 0x80
 8006d0c:	021b      	lsls	r3, r3, #8
 8006d0e:	4013      	ands	r3, r2
 8006d10:	d007      	beq.n	8006d22 <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d101      	bne.n	8006d22 <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d00c      	beq.n	8006d44 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8006d2a:	687a      	ldr	r2, [r7, #4]
 8006d2c:	2380      	movs	r3, #128	@ 0x80
 8006d2e:	01db      	lsls	r3, r3, #7
 8006d30:	4013      	ands	r3, r2
 8006d32:	d007      	beq.n	8006d44 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d101      	bne.n	8006d44 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 8006d40:	2301      	movs	r3, #1
 8006d42:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8006d44:	69fb      	ldr	r3, [r7, #28]
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d12d      	bne.n	8006da6 <I2C_Slave_ISR_DMA+0x11a>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2241      	movs	r2, #65	@ 0x41
 8006d4e:	5c9b      	ldrb	r3, [r3, r2]
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	2b28      	cmp	r3, #40	@ 0x28
 8006d54:	d10b      	bne.n	8006d6e <I2C_Slave_ISR_DMA+0xe2>
 8006d56:	69ba      	ldr	r2, [r7, #24]
 8006d58:	2380      	movs	r3, #128	@ 0x80
 8006d5a:	049b      	lsls	r3, r3, #18
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d106      	bne.n	8006d6e <I2C_Slave_ISR_DMA+0xe2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8006d60:	68ba      	ldr	r2, [r7, #8]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	0011      	movs	r1, r2
 8006d66:	0018      	movs	r0, r3
 8006d68:	f000 fc18 	bl	800759c <I2C_ITListenCplt>
 8006d6c:	e054      	b.n	8006e18 <I2C_Slave_ISR_DMA+0x18c>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2241      	movs	r2, #65	@ 0x41
 8006d72:	5c9b      	ldrb	r3, [r3, r2]
 8006d74:	b2db      	uxtb	r3, r3
 8006d76:	2b29      	cmp	r3, #41	@ 0x29
 8006d78:	d110      	bne.n	8006d9c <I2C_Slave_ISR_DMA+0x110>
 8006d7a:	69bb      	ldr	r3, [r7, #24]
 8006d7c:	4a36      	ldr	r2, [pc, #216]	@ (8006e58 <I2C_Slave_ISR_DMA+0x1cc>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d00c      	beq.n	8006d9c <I2C_Slave_ISR_DMA+0x110>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	2210      	movs	r2, #16
 8006d88:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	0018      	movs	r0, r3
 8006d8e:	f000 fd88 	bl	80078a2 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	0018      	movs	r0, r3
 8006d96:	f000 f947 	bl	8007028 <I2C_ITSlaveSeqCplt>
 8006d9a:	e03d      	b.n	8006e18 <I2C_Slave_ISR_DMA+0x18c>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2210      	movs	r2, #16
 8006da2:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8006da4:	e03e      	b.n	8006e24 <I2C_Slave_ISR_DMA+0x198>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	2210      	movs	r2, #16
 8006dac:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006db2:	2204      	movs	r2, #4
 8006db4:	431a      	orrs	r2, r3
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8006dba:	2317      	movs	r3, #23
 8006dbc:	18fb      	adds	r3, r7, r3
 8006dbe:	68fa      	ldr	r2, [r7, #12]
 8006dc0:	2141      	movs	r1, #65	@ 0x41
 8006dc2:	5c52      	ldrb	r2, [r2, r1]
 8006dc4:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006dc6:	69bb      	ldr	r3, [r7, #24]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d004      	beq.n	8006dd6 <I2C_Slave_ISR_DMA+0x14a>
 8006dcc:	69ba      	ldr	r2, [r7, #24]
 8006dce:	2380      	movs	r3, #128	@ 0x80
 8006dd0:	045b      	lsls	r3, r3, #17
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d126      	bne.n	8006e24 <I2C_Slave_ISR_DMA+0x198>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006dd6:	2217      	movs	r2, #23
 8006dd8:	18bb      	adds	r3, r7, r2
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	2b21      	cmp	r3, #33	@ 0x21
 8006dde:	d003      	beq.n	8006de8 <I2C_Slave_ISR_DMA+0x15c>
 8006de0:	18bb      	adds	r3, r7, r2
 8006de2:	781b      	ldrb	r3, [r3, #0]
 8006de4:	2b29      	cmp	r3, #41	@ 0x29
 8006de6:	d103      	bne.n	8006df0 <I2C_Slave_ISR_DMA+0x164>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2221      	movs	r2, #33	@ 0x21
 8006dec:	631a      	str	r2, [r3, #48]	@ 0x30
 8006dee:	e00b      	b.n	8006e08 <I2C_Slave_ISR_DMA+0x17c>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006df0:	2217      	movs	r2, #23
 8006df2:	18bb      	adds	r3, r7, r2
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	2b22      	cmp	r3, #34	@ 0x22
 8006df8:	d003      	beq.n	8006e02 <I2C_Slave_ISR_DMA+0x176>
 8006dfa:	18bb      	adds	r3, r7, r2
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e00:	d102      	bne.n	8006e08 <I2C_Slave_ISR_DMA+0x17c>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2222      	movs	r2, #34	@ 0x22
 8006e06:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	0011      	movs	r1, r2
 8006e10:	0018      	movs	r0, r3
 8006e12:	f000 fc1b 	bl	800764c <I2C_ITError>
      if (treatdmanack == 1U)
 8006e16:	e005      	b.n	8006e24 <I2C_Slave_ISR_DMA+0x198>
 8006e18:	e004      	b.n	8006e24 <I2C_Slave_ISR_DMA+0x198>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	2210      	movs	r2, #16
 8006e20:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006e22:	e00f      	b.n	8006e44 <I2C_Slave_ISR_DMA+0x1b8>
      if (treatdmanack == 1U)
 8006e24:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006e26:	e00d      	b.n	8006e44 <I2C_Slave_ISR_DMA+0x1b8>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	2208      	movs	r2, #8
 8006e2c:	4013      	ands	r3, r2
 8006e2e:	d009      	beq.n	8006e44 <I2C_Slave_ISR_DMA+0x1b8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2208      	movs	r2, #8
 8006e34:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006e36:	d005      	beq.n	8006e44 <I2C_Slave_ISR_DMA+0x1b8>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8006e38:	68ba      	ldr	r2, [r7, #8]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	0011      	movs	r1, r2
 8006e3e:	0018      	movs	r0, r3
 8006e40:	f000 f80c 	bl	8006e5c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2240      	movs	r2, #64	@ 0x40
 8006e48:	2100      	movs	r1, #0
 8006e4a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006e4c:	2300      	movs	r3, #0
}
 8006e4e:	0018      	movs	r0, r3
 8006e50:	46bd      	mov	sp, r7
 8006e52:	b008      	add	sp, #32
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	46c0      	nop			@ (mov r8, r8)
 8006e58:	ffff0000 	.word	0xffff0000

08006e5c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006e5c:	b5b0      	push	{r4, r5, r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2241      	movs	r2, #65	@ 0x41
 8006e6a:	5c9b      	ldrb	r3, [r3, r2]
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	001a      	movs	r2, r3
 8006e70:	2328      	movs	r3, #40	@ 0x28
 8006e72:	4013      	ands	r3, r2
 8006e74:	2b28      	cmp	r3, #40	@ 0x28
 8006e76:	d000      	beq.n	8006e7a <I2C_ITAddrCplt+0x1e>
 8006e78:	e088      	b.n	8006f8c <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	699b      	ldr	r3, [r3, #24]
 8006e80:	0c1b      	lsrs	r3, r3, #16
 8006e82:	b2da      	uxtb	r2, r3
 8006e84:	250f      	movs	r5, #15
 8006e86:	197b      	adds	r3, r7, r5
 8006e88:	2101      	movs	r1, #1
 8006e8a:	400a      	ands	r2, r1
 8006e8c:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	699b      	ldr	r3, [r3, #24]
 8006e94:	0c1b      	lsrs	r3, r3, #16
 8006e96:	b29a      	uxth	r2, r3
 8006e98:	200c      	movs	r0, #12
 8006e9a:	183b      	adds	r3, r7, r0
 8006e9c:	21fe      	movs	r1, #254	@ 0xfe
 8006e9e:	400a      	ands	r2, r1
 8006ea0:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	b29a      	uxth	r2, r3
 8006eaa:	240a      	movs	r4, #10
 8006eac:	193b      	adds	r3, r7, r4
 8006eae:	0592      	lsls	r2, r2, #22
 8006eb0:	0d92      	lsrs	r2, r2, #22
 8006eb2:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	68db      	ldr	r3, [r3, #12]
 8006eba:	b29a      	uxth	r2, r3
 8006ebc:	2308      	movs	r3, #8
 8006ebe:	18fb      	adds	r3, r7, r3
 8006ec0:	21fe      	movs	r1, #254	@ 0xfe
 8006ec2:	400a      	ands	r2, r1
 8006ec4:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	68db      	ldr	r3, [r3, #12]
 8006eca:	2b02      	cmp	r3, #2
 8006ecc:	d148      	bne.n	8006f60 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006ece:	0021      	movs	r1, r4
 8006ed0:	187b      	adds	r3, r7, r1
 8006ed2:	881b      	ldrh	r3, [r3, #0]
 8006ed4:	09db      	lsrs	r3, r3, #7
 8006ed6:	b29a      	uxth	r2, r3
 8006ed8:	183b      	adds	r3, r7, r0
 8006eda:	881b      	ldrh	r3, [r3, #0]
 8006edc:	4053      	eors	r3, r2
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	001a      	movs	r2, r3
 8006ee2:	2306      	movs	r3, #6
 8006ee4:	4013      	ands	r3, r2
 8006ee6:	d120      	bne.n	8006f2a <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8006ee8:	183b      	adds	r3, r7, r0
 8006eea:	187a      	adds	r2, r7, r1
 8006eec:	8812      	ldrh	r2, [r2, #0]
 8006eee:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ef4:	1c5a      	adds	r2, r3, #1
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006efe:	2b02      	cmp	r3, #2
 8006f00:	d14c      	bne.n	8006f9c <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2208      	movs	r2, #8
 8006f0e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2240      	movs	r2, #64	@ 0x40
 8006f14:	2100      	movs	r1, #0
 8006f16:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006f18:	183b      	adds	r3, r7, r0
 8006f1a:	881a      	ldrh	r2, [r3, #0]
 8006f1c:	197b      	adds	r3, r7, r5
 8006f1e:	7819      	ldrb	r1, [r3, #0]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	0018      	movs	r0, r3
 8006f24:	f7ff fa35 	bl	8006392 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006f28:	e038      	b.n	8006f9c <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8006f2a:	240c      	movs	r4, #12
 8006f2c:	193b      	adds	r3, r7, r4
 8006f2e:	2208      	movs	r2, #8
 8006f30:	18ba      	adds	r2, r7, r2
 8006f32:	8812      	ldrh	r2, [r2, #0]
 8006f34:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006f36:	2380      	movs	r3, #128	@ 0x80
 8006f38:	021a      	lsls	r2, r3, #8
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	0011      	movs	r1, r2
 8006f3e:	0018      	movs	r0, r3
 8006f40:	f000 fe6e 	bl	8007c20 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2240      	movs	r2, #64	@ 0x40
 8006f48:	2100      	movs	r1, #0
 8006f4a:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006f4c:	193b      	adds	r3, r7, r4
 8006f4e:	881a      	ldrh	r2, [r3, #0]
 8006f50:	230f      	movs	r3, #15
 8006f52:	18fb      	adds	r3, r7, r3
 8006f54:	7819      	ldrb	r1, [r3, #0]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	0018      	movs	r0, r3
 8006f5a:	f7ff fa1a 	bl	8006392 <HAL_I2C_AddrCallback>
}
 8006f5e:	e01d      	b.n	8006f9c <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006f60:	2380      	movs	r3, #128	@ 0x80
 8006f62:	021a      	lsls	r2, r3, #8
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	0011      	movs	r1, r2
 8006f68:	0018      	movs	r0, r3
 8006f6a:	f000 fe59 	bl	8007c20 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2240      	movs	r2, #64	@ 0x40
 8006f72:	2100      	movs	r1, #0
 8006f74:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006f76:	230c      	movs	r3, #12
 8006f78:	18fb      	adds	r3, r7, r3
 8006f7a:	881a      	ldrh	r2, [r3, #0]
 8006f7c:	230f      	movs	r3, #15
 8006f7e:	18fb      	adds	r3, r7, r3
 8006f80:	7819      	ldrb	r1, [r3, #0]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	0018      	movs	r0, r3
 8006f86:	f7ff fa04 	bl	8006392 <HAL_I2C_AddrCallback>
}
 8006f8a:	e007      	b.n	8006f9c <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	2208      	movs	r2, #8
 8006f92:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2240      	movs	r2, #64	@ 0x40
 8006f98:	2100      	movs	r1, #0
 8006f9a:	5499      	strb	r1, [r3, r2]
}
 8006f9c:	46c0      	nop			@ (mov r8, r8)
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	b004      	add	sp, #16
 8006fa2:	bdb0      	pop	{r4, r5, r7, pc}

08006fa4 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b082      	sub	sp, #8
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2242      	movs	r2, #66	@ 0x42
 8006fb0:	2100      	movs	r1, #0
 8006fb2:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2241      	movs	r2, #65	@ 0x41
 8006fb8:	5c9b      	ldrb	r3, [r3, r2]
 8006fba:	b2db      	uxtb	r3, r3
 8006fbc:	2b21      	cmp	r3, #33	@ 0x21
 8006fbe:	d117      	bne.n	8006ff0 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2241      	movs	r2, #65	@ 0x41
 8006fc4:	2120      	movs	r1, #32
 8006fc6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2211      	movs	r2, #17
 8006fcc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2101      	movs	r1, #1
 8006fd8:	0018      	movs	r0, r3
 8006fda:	f000 fe21 	bl	8007c20 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2240      	movs	r2, #64	@ 0x40
 8006fe2:	2100      	movs	r1, #0
 8006fe4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	0018      	movs	r0, r3
 8006fea:	f7f9 fa1f 	bl	800042c <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006fee:	e016      	b.n	800701e <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2241      	movs	r2, #65	@ 0x41
 8006ff4:	2120      	movs	r1, #32
 8006ff6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2212      	movs	r2, #18
 8006ffc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2102      	movs	r1, #2
 8007008:	0018      	movs	r0, r3
 800700a:	f000 fe09 	bl	8007c20 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2240      	movs	r2, #64	@ 0x40
 8007012:	2100      	movs	r1, #0
 8007014:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	0018      	movs	r0, r3
 800701a:	f7f9 fa15 	bl	8000448 <HAL_I2C_MasterRxCpltCallback>
}
 800701e:	46c0      	nop			@ (mov r8, r8)
 8007020:	46bd      	mov	sp, r7
 8007022:	b002      	add	sp, #8
 8007024:	bd80      	pop	{r7, pc}
	...

08007028 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b084      	sub	sp, #16
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2242      	movs	r2, #66	@ 0x42
 800703c:	2100      	movs	r1, #0
 800703e:	5499      	strb	r1, [r3, r2]

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007040:	68fa      	ldr	r2, [r7, #12]
 8007042:	2380      	movs	r3, #128	@ 0x80
 8007044:	01db      	lsls	r3, r3, #7
 8007046:	4013      	ands	r3, r2
 8007048:	d008      	beq.n	800705c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	681a      	ldr	r2, [r3, #0]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4924      	ldr	r1, [pc, #144]	@ (80070e8 <I2C_ITSlaveSeqCplt+0xc0>)
 8007056:	400a      	ands	r2, r1
 8007058:	601a      	str	r2, [r3, #0]
 800705a:	e00c      	b.n	8007076 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800705c:	68fa      	ldr	r2, [r7, #12]
 800705e:	2380      	movs	r3, #128	@ 0x80
 8007060:	021b      	lsls	r3, r3, #8
 8007062:	4013      	ands	r3, r2
 8007064:	d007      	beq.n	8007076 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	491e      	ldr	r1, [pc, #120]	@ (80070ec <I2C_ITSlaveSeqCplt+0xc4>)
 8007072:	400a      	ands	r2, r1
 8007074:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2241      	movs	r2, #65	@ 0x41
 800707a:	5c9b      	ldrb	r3, [r3, r2]
 800707c:	b2db      	uxtb	r3, r3
 800707e:	2b29      	cmp	r3, #41	@ 0x29
 8007080:	d114      	bne.n	80070ac <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2241      	movs	r2, #65	@ 0x41
 8007086:	2128      	movs	r1, #40	@ 0x28
 8007088:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2221      	movs	r2, #33	@ 0x21
 800708e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2101      	movs	r1, #1
 8007094:	0018      	movs	r0, r3
 8007096:	f000 fdc3 	bl	8007c20 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2240      	movs	r2, #64	@ 0x40
 800709e:	2100      	movs	r1, #0
 80070a0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	0018      	movs	r0, r3
 80070a6:	f7ff f964 	bl	8006372 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80070aa:	e019      	b.n	80070e0 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2241      	movs	r2, #65	@ 0x41
 80070b0:	5c9b      	ldrb	r3, [r3, r2]
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80070b6:	d113      	bne.n	80070e0 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2241      	movs	r2, #65	@ 0x41
 80070bc:	2128      	movs	r1, #40	@ 0x28
 80070be:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2222      	movs	r2, #34	@ 0x22
 80070c4:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2102      	movs	r1, #2
 80070ca:	0018      	movs	r0, r3
 80070cc:	f000 fda8 	bl	8007c20 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2240      	movs	r2, #64	@ 0x40
 80070d4:	2100      	movs	r1, #0
 80070d6:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	0018      	movs	r0, r3
 80070dc:	f7ff f951 	bl	8006382 <HAL_I2C_SlaveRxCpltCallback>
}
 80070e0:	46c0      	nop			@ (mov r8, r8)
 80070e2:	46bd      	mov	sp, r7
 80070e4:	b004      	add	sp, #16
 80070e6:	bd80      	pop	{r7, pc}
 80070e8:	ffffbfff 	.word	0xffffbfff
 80070ec:	ffff7fff 	.word	0xffff7fff

080070f0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b086      	sub	sp, #24
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	2220      	movs	r2, #32
 8007104:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2241      	movs	r2, #65	@ 0x41
 800710a:	5c9b      	ldrb	r3, [r3, r2]
 800710c:	b2db      	uxtb	r3, r3
 800710e:	2b21      	cmp	r3, #33	@ 0x21
 8007110:	d108      	bne.n	8007124 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2101      	movs	r1, #1
 8007116:	0018      	movs	r0, r3
 8007118:	f000 fd82 	bl	8007c20 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2211      	movs	r2, #17
 8007120:	631a      	str	r2, [r3, #48]	@ 0x30
 8007122:	e00d      	b.n	8007140 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2241      	movs	r2, #65	@ 0x41
 8007128:	5c9b      	ldrb	r3, [r3, r2]
 800712a:	b2db      	uxtb	r3, r3
 800712c:	2b22      	cmp	r3, #34	@ 0x22
 800712e:	d107      	bne.n	8007140 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2102      	movs	r1, #2
 8007134:	0018      	movs	r0, r3
 8007136:	f000 fd73 	bl	8007c20 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2212      	movs	r2, #18
 800713e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	685a      	ldr	r2, [r3, #4]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	494e      	ldr	r1, [pc, #312]	@ (8007284 <I2C_ITMasterCplt+0x194>)
 800714c:	400a      	ands	r2, r1
 800714e:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2200      	movs	r2, #0
 8007154:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	4a4b      	ldr	r2, [pc, #300]	@ (8007288 <I2C_ITMasterCplt+0x198>)
 800715a:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	2210      	movs	r2, #16
 8007160:	4013      	ands	r3, r2
 8007162:	d009      	beq.n	8007178 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	2210      	movs	r2, #16
 800716a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007170:	2204      	movs	r2, #4
 8007172:	431a      	orrs	r2, r3
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2241      	movs	r2, #65	@ 0x41
 800717c:	5c9b      	ldrb	r3, [r3, r2]
 800717e:	b2db      	uxtb	r3, r3
 8007180:	2b60      	cmp	r3, #96	@ 0x60
 8007182:	d109      	bne.n	8007198 <I2C_ITMasterCplt+0xa8>
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	2204      	movs	r2, #4
 8007188:	4013      	ands	r3, r2
 800718a:	d005      	beq.n	8007198 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007192:	b2db      	uxtb	r3, r3
 8007194:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8007196:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	0018      	movs	r0, r3
 800719c:	f000 fb81 	bl	80078a2 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071a4:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2241      	movs	r2, #65	@ 0x41
 80071aa:	5c9b      	ldrb	r3, [r3, r2]
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	2b60      	cmp	r3, #96	@ 0x60
 80071b0:	d002      	beq.n	80071b8 <I2C_ITMasterCplt+0xc8>
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d007      	beq.n	80071c8 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	0011      	movs	r1, r2
 80071c0:	0018      	movs	r0, r3
 80071c2:	f000 fa43 	bl	800764c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80071c6:	e058      	b.n	800727a <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2241      	movs	r2, #65	@ 0x41
 80071cc:	5c9b      	ldrb	r3, [r3, r2]
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	2b21      	cmp	r3, #33	@ 0x21
 80071d2:	d126      	bne.n	8007222 <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2241      	movs	r2, #65	@ 0x41
 80071d8:	2120      	movs	r1, #32
 80071da:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2242      	movs	r2, #66	@ 0x42
 80071e6:	5c9b      	ldrb	r3, [r3, r2]
 80071e8:	b2db      	uxtb	r3, r3
 80071ea:	2b40      	cmp	r3, #64	@ 0x40
 80071ec:	d10c      	bne.n	8007208 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2242      	movs	r2, #66	@ 0x42
 80071f2:	2100      	movs	r1, #0
 80071f4:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2240      	movs	r2, #64	@ 0x40
 80071fa:	2100      	movs	r1, #0
 80071fc:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	0018      	movs	r0, r3
 8007202:	f7f9 f8f7 	bl	80003f4 <HAL_I2C_MemTxCpltCallback>
}
 8007206:	e038      	b.n	800727a <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2242      	movs	r2, #66	@ 0x42
 800720c:	2100      	movs	r1, #0
 800720e:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2240      	movs	r2, #64	@ 0x40
 8007214:	2100      	movs	r1, #0
 8007216:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	0018      	movs	r0, r3
 800721c:	f7f9 f906 	bl	800042c <HAL_I2C_MasterTxCpltCallback>
}
 8007220:	e02b      	b.n	800727a <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2241      	movs	r2, #65	@ 0x41
 8007226:	5c9b      	ldrb	r3, [r3, r2]
 8007228:	b2db      	uxtb	r3, r3
 800722a:	2b22      	cmp	r3, #34	@ 0x22
 800722c:	d125      	bne.n	800727a <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2241      	movs	r2, #65	@ 0x41
 8007232:	2120      	movs	r1, #32
 8007234:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2200      	movs	r2, #0
 800723a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2242      	movs	r2, #66	@ 0x42
 8007240:	5c9b      	ldrb	r3, [r3, r2]
 8007242:	b2db      	uxtb	r3, r3
 8007244:	2b40      	cmp	r3, #64	@ 0x40
 8007246:	d10c      	bne.n	8007262 <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2242      	movs	r2, #66	@ 0x42
 800724c:	2100      	movs	r1, #0
 800724e:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2240      	movs	r2, #64	@ 0x40
 8007254:	2100      	movs	r1, #0
 8007256:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	0018      	movs	r0, r3
 800725c:	f7f9 f8d8 	bl	8000410 <HAL_I2C_MemRxCpltCallback>
}
 8007260:	e00b      	b.n	800727a <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2242      	movs	r2, #66	@ 0x42
 8007266:	2100      	movs	r1, #0
 8007268:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2240      	movs	r2, #64	@ 0x40
 800726e:	2100      	movs	r1, #0
 8007270:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	0018      	movs	r0, r3
 8007276:	f7f9 f8e7 	bl	8000448 <HAL_I2C_MasterRxCpltCallback>
}
 800727a:	46c0      	nop			@ (mov r8, r8)
 800727c:	46bd      	mov	sp, r7
 800727e:	b006      	add	sp, #24
 8007280:	bd80      	pop	{r7, pc}
 8007282:	46c0      	nop			@ (mov r8, r8)
 8007284:	fe00e800 	.word	0xfe00e800
 8007288:	ffff0000 	.word	0xffff0000

0800728c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b086      	sub	sp, #24
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072a6:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80072a8:	200b      	movs	r0, #11
 80072aa:	183b      	adds	r3, r7, r0
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	2141      	movs	r1, #65	@ 0x41
 80072b0:	5c52      	ldrb	r2, [r2, r1]
 80072b2:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	2220      	movs	r2, #32
 80072ba:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80072bc:	183b      	adds	r3, r7, r0
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	2b21      	cmp	r3, #33	@ 0x21
 80072c2:	d003      	beq.n	80072cc <I2C_ITSlaveCplt+0x40>
 80072c4:	183b      	adds	r3, r7, r0
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	2b29      	cmp	r3, #41	@ 0x29
 80072ca:	d109      	bne.n	80072e0 <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80072cc:	4aac      	ldr	r2, [pc, #688]	@ (8007580 <I2C_ITSlaveCplt+0x2f4>)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	0011      	movs	r1, r2
 80072d2:	0018      	movs	r0, r3
 80072d4:	f000 fca4 	bl	8007c20 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2221      	movs	r2, #33	@ 0x21
 80072dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80072de:	e020      	b.n	8007322 <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80072e0:	220b      	movs	r2, #11
 80072e2:	18bb      	adds	r3, r7, r2
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	2b22      	cmp	r3, #34	@ 0x22
 80072e8:	d003      	beq.n	80072f2 <I2C_ITSlaveCplt+0x66>
 80072ea:	18bb      	adds	r3, r7, r2
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80072f0:	d109      	bne.n	8007306 <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80072f2:	4aa4      	ldr	r2, [pc, #656]	@ (8007584 <I2C_ITSlaveCplt+0x2f8>)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	0011      	movs	r1, r2
 80072f8:	0018      	movs	r0, r3
 80072fa:	f000 fc91 	bl	8007c20 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2222      	movs	r2, #34	@ 0x22
 8007302:	631a      	str	r2, [r3, #48]	@ 0x30
 8007304:	e00d      	b.n	8007322 <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8007306:	230b      	movs	r3, #11
 8007308:	18fb      	adds	r3, r7, r3
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	2b28      	cmp	r3, #40	@ 0x28
 800730e:	d108      	bne.n	8007322 <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8007310:	4a9d      	ldr	r2, [pc, #628]	@ (8007588 <I2C_ITSlaveCplt+0x2fc>)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	0011      	movs	r1, r2
 8007316:	0018      	movs	r0, r3
 8007318:	f000 fc82 	bl	8007c20 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2200      	movs	r2, #0
 8007320:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	685a      	ldr	r2, [r3, #4]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	2180      	movs	r1, #128	@ 0x80
 800732e:	0209      	lsls	r1, r1, #8
 8007330:	430a      	orrs	r2, r1
 8007332:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	685a      	ldr	r2, [r3, #4]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4993      	ldr	r1, [pc, #588]	@ (800758c <I2C_ITSlaveCplt+0x300>)
 8007340:	400a      	ands	r2, r1
 8007342:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	0018      	movs	r0, r3
 8007348:	f000 faab 	bl	80078a2 <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800734c:	693a      	ldr	r2, [r7, #16]
 800734e:	2380      	movs	r3, #128	@ 0x80
 8007350:	01db      	lsls	r3, r3, #7
 8007352:	4013      	ands	r3, r2
 8007354:	d013      	beq.n	800737e <I2C_ITSlaveCplt+0xf2>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	498b      	ldr	r1, [pc, #556]	@ (8007590 <I2C_ITSlaveCplt+0x304>)
 8007362:	400a      	ands	r2, r1
 8007364:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800736a:	2b00      	cmp	r3, #0
 800736c:	d01f      	beq.n	80073ae <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	b29a      	uxth	r2, r3
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800737c:	e017      	b.n	80073ae <I2C_ITSlaveCplt+0x122>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800737e:	693a      	ldr	r2, [r7, #16]
 8007380:	2380      	movs	r3, #128	@ 0x80
 8007382:	021b      	lsls	r3, r3, #8
 8007384:	4013      	ands	r3, r2
 8007386:	d012      	beq.n	80073ae <I2C_ITSlaveCplt+0x122>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	681a      	ldr	r2, [r3, #0]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4980      	ldr	r1, [pc, #512]	@ (8007594 <I2C_ITSlaveCplt+0x308>)
 8007394:	400a      	ands	r2, r1
 8007396:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800739c:	2b00      	cmp	r3, #0
 800739e:	d006      	beq.n	80073ae <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	b29a      	uxth	r2, r3
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	2204      	movs	r2, #4
 80073b2:	4013      	ands	r3, r2
 80073b4:	d020      	beq.n	80073f8 <I2C_ITSlaveCplt+0x16c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	2204      	movs	r2, #4
 80073ba:	4393      	bics	r3, r2
 80073bc:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073c8:	b2d2      	uxtb	r2, r2
 80073ca:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073d0:	1c5a      	adds	r2, r3, #1
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d00c      	beq.n	80073f8 <I2C_ITSlaveCplt+0x16c>
    {
      hi2c->XferSize--;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073e2:	3b01      	subs	r3, #1
 80073e4:	b29a      	uxth	r2, r3
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	3b01      	subs	r3, #1
 80073f2:	b29a      	uxth	r2, r3
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d005      	beq.n	800740e <I2C_ITSlaveCplt+0x182>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007406:	2204      	movs	r2, #4
 8007408:	431a      	orrs	r2, r3
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	2210      	movs	r2, #16
 8007412:	4013      	ands	r3, r2
 8007414:	d04f      	beq.n	80074b6 <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	2210      	movs	r2, #16
 800741a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800741c:	d04b      	beq.n	80074b6 <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007422:	b29b      	uxth	r3, r3
 8007424:	2b00      	cmp	r3, #0
 8007426:	d12d      	bne.n	8007484 <I2C_ITSlaveCplt+0x1f8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2241      	movs	r2, #65	@ 0x41
 800742c:	5c9b      	ldrb	r3, [r3, r2]
 800742e:	b2db      	uxtb	r3, r3
 8007430:	2b28      	cmp	r3, #40	@ 0x28
 8007432:	d10b      	bne.n	800744c <I2C_ITSlaveCplt+0x1c0>
 8007434:	68fa      	ldr	r2, [r7, #12]
 8007436:	2380      	movs	r3, #128	@ 0x80
 8007438:	049b      	lsls	r3, r3, #18
 800743a:	429a      	cmp	r2, r3
 800743c:	d106      	bne.n	800744c <I2C_ITSlaveCplt+0x1c0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800743e:	697a      	ldr	r2, [r7, #20]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	0011      	movs	r1, r2
 8007444:	0018      	movs	r0, r3
 8007446:	f000 f8a9 	bl	800759c <I2C_ITListenCplt>
 800744a:	e034      	b.n	80074b6 <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2241      	movs	r2, #65	@ 0x41
 8007450:	5c9b      	ldrb	r3, [r3, r2]
 8007452:	b2db      	uxtb	r3, r3
 8007454:	2b29      	cmp	r3, #41	@ 0x29
 8007456:	d110      	bne.n	800747a <I2C_ITSlaveCplt+0x1ee>
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	4a4f      	ldr	r2, [pc, #316]	@ (8007598 <I2C_ITSlaveCplt+0x30c>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d00c      	beq.n	800747a <I2C_ITSlaveCplt+0x1ee>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	2210      	movs	r2, #16
 8007466:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	0018      	movs	r0, r3
 800746c:	f000 fa19 	bl	80078a2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	0018      	movs	r0, r3
 8007474:	f7ff fdd8 	bl	8007028 <I2C_ITSlaveSeqCplt>
 8007478:	e01d      	b.n	80074b6 <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	2210      	movs	r2, #16
 8007480:	61da      	str	r2, [r3, #28]
 8007482:	e018      	b.n	80074b6 <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	2210      	movs	r2, #16
 800748a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007490:	2204      	movs	r2, #4
 8007492:	431a      	orrs	r2, r3
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d004      	beq.n	80074a8 <I2C_ITSlaveCplt+0x21c>
 800749e:	68fa      	ldr	r2, [r7, #12]
 80074a0:	2380      	movs	r3, #128	@ 0x80
 80074a2:	045b      	lsls	r3, r3, #17
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d106      	bne.n	80074b6 <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	0011      	movs	r1, r2
 80074b0:	0018      	movs	r0, r3
 80074b2:	f000 f8cb 	bl	800764c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2242      	movs	r2, #66	@ 0x42
 80074ba:	2100      	movs	r1, #0
 80074bc:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2200      	movs	r2, #0
 80074c2:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d013      	beq.n	80074f4 <I2C_ITSlaveCplt+0x268>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	0011      	movs	r1, r2
 80074d4:	0018      	movs	r0, r3
 80074d6:	f000 f8b9 	bl	800764c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2241      	movs	r2, #65	@ 0x41
 80074de:	5c9b      	ldrb	r3, [r3, r2]
 80074e0:	b2db      	uxtb	r3, r3
 80074e2:	2b28      	cmp	r3, #40	@ 0x28
 80074e4:	d147      	bne.n	8007576 <I2C_ITSlaveCplt+0x2ea>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80074e6:	697a      	ldr	r2, [r7, #20]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	0011      	movs	r1, r2
 80074ec:	0018      	movs	r0, r3
 80074ee:	f000 f855 	bl	800759c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80074f2:	e040      	b.n	8007576 <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074f8:	4a27      	ldr	r2, [pc, #156]	@ (8007598 <I2C_ITSlaveCplt+0x30c>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d016      	beq.n	800752c <I2C_ITSlaveCplt+0x2a0>
    I2C_ITSlaveSeqCplt(hi2c);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	0018      	movs	r0, r3
 8007502:	f7ff fd91 	bl	8007028 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	4a23      	ldr	r2, [pc, #140]	@ (8007598 <I2C_ITSlaveCplt+0x30c>)
 800750a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2241      	movs	r2, #65	@ 0x41
 8007510:	2120      	movs	r1, #32
 8007512:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2240      	movs	r2, #64	@ 0x40
 800751e:	2100      	movs	r1, #0
 8007520:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	0018      	movs	r0, r3
 8007526:	f7fe ff44 	bl	80063b2 <HAL_I2C_ListenCpltCallback>
}
 800752a:	e024      	b.n	8007576 <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2241      	movs	r2, #65	@ 0x41
 8007530:	5c9b      	ldrb	r3, [r3, r2]
 8007532:	b2db      	uxtb	r3, r3
 8007534:	2b22      	cmp	r3, #34	@ 0x22
 8007536:	d10f      	bne.n	8007558 <I2C_ITSlaveCplt+0x2cc>
    hi2c->State = HAL_I2C_STATE_READY;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2241      	movs	r2, #65	@ 0x41
 800753c:	2120      	movs	r1, #32
 800753e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2200      	movs	r2, #0
 8007544:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2240      	movs	r2, #64	@ 0x40
 800754a:	2100      	movs	r1, #0
 800754c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	0018      	movs	r0, r3
 8007552:	f7fe ff16 	bl	8006382 <HAL_I2C_SlaveRxCpltCallback>
}
 8007556:	e00e      	b.n	8007576 <I2C_ITSlaveCplt+0x2ea>
    hi2c->State = HAL_I2C_STATE_READY;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2241      	movs	r2, #65	@ 0x41
 800755c:	2120      	movs	r1, #32
 800755e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2200      	movs	r2, #0
 8007564:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2240      	movs	r2, #64	@ 0x40
 800756a:	2100      	movs	r1, #0
 800756c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	0018      	movs	r0, r3
 8007572:	f7fe fefe 	bl	8006372 <HAL_I2C_SlaveTxCpltCallback>
}
 8007576:	46c0      	nop			@ (mov r8, r8)
 8007578:	46bd      	mov	sp, r7
 800757a:	b006      	add	sp, #24
 800757c:	bd80      	pop	{r7, pc}
 800757e:	46c0      	nop			@ (mov r8, r8)
 8007580:	00008001 	.word	0x00008001
 8007584:	00008002 	.word	0x00008002
 8007588:	00008003 	.word	0x00008003
 800758c:	fe00e800 	.word	0xfe00e800
 8007590:	ffffbfff 	.word	0xffffbfff
 8007594:	ffff7fff 	.word	0xffff7fff
 8007598:	ffff0000 	.word	0xffff0000

0800759c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b082      	sub	sp, #8
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	4a26      	ldr	r2, [pc, #152]	@ (8007644 <I2C_ITListenCplt+0xa8>)
 80075aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2200      	movs	r2, #0
 80075b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2241      	movs	r2, #65	@ 0x41
 80075b6:	2120      	movs	r1, #32
 80075b8:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2242      	movs	r2, #66	@ 0x42
 80075be:	2100      	movs	r1, #0
 80075c0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2200      	movs	r2, #0
 80075c6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	2204      	movs	r2, #4
 80075cc:	4013      	ands	r3, r2
 80075ce:	d022      	beq.n	8007616 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075da:	b2d2      	uxtb	r2, r2
 80075dc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075e2:	1c5a      	adds	r2, r3, #1
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d012      	beq.n	8007616 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075f4:	3b01      	subs	r3, #1
 80075f6:	b29a      	uxth	r2, r3
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007600:	b29b      	uxth	r3, r3
 8007602:	3b01      	subs	r3, #1
 8007604:	b29a      	uxth	r2, r3
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800760e:	2204      	movs	r2, #4
 8007610:	431a      	orrs	r2, r3
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007616:	4a0c      	ldr	r2, [pc, #48]	@ (8007648 <I2C_ITListenCplt+0xac>)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	0011      	movs	r1, r2
 800761c:	0018      	movs	r0, r3
 800761e:	f000 faff 	bl	8007c20 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	2210      	movs	r2, #16
 8007628:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2240      	movs	r2, #64	@ 0x40
 800762e:	2100      	movs	r1, #0
 8007630:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	0018      	movs	r0, r3
 8007636:	f7fe febc 	bl	80063b2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800763a:	46c0      	nop			@ (mov r8, r8)
 800763c:	46bd      	mov	sp, r7
 800763e:	b002      	add	sp, #8
 8007640:	bd80      	pop	{r7, pc}
 8007642:	46c0      	nop			@ (mov r8, r8)
 8007644:	ffff0000 	.word	0xffff0000
 8007648:	00008003 	.word	0x00008003

0800764c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b084      	sub	sp, #16
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007656:	200f      	movs	r0, #15
 8007658:	183b      	adds	r3, r7, r0
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	2141      	movs	r1, #65	@ 0x41
 800765e:	5c52      	ldrb	r2, [r2, r1]
 8007660:	701a      	strb	r2, [r3, #0]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2242      	movs	r2, #66	@ 0x42
 8007666:	2100      	movs	r1, #0
 8007668:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	4a72      	ldr	r2, [pc, #456]	@ (8007838 <I2C_ITError+0x1ec>)
 800766e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2200      	movs	r2, #0
 8007674:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	431a      	orrs	r2, r3
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007682:	183b      	adds	r3, r7, r0
 8007684:	781b      	ldrb	r3, [r3, #0]
 8007686:	2b28      	cmp	r3, #40	@ 0x28
 8007688:	d007      	beq.n	800769a <I2C_ITError+0x4e>
 800768a:	183b      	adds	r3, r7, r0
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	2b29      	cmp	r3, #41	@ 0x29
 8007690:	d003      	beq.n	800769a <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8007692:	183b      	adds	r3, r7, r0
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	2b2a      	cmp	r3, #42	@ 0x2a
 8007698:	d10c      	bne.n	80076b4 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2103      	movs	r1, #3
 800769e:	0018      	movs	r0, r3
 80076a0:	f000 fabe 	bl	8007c20 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2241      	movs	r2, #65	@ 0x41
 80076a8:	2128      	movs	r1, #40	@ 0x28
 80076aa:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	4a63      	ldr	r2, [pc, #396]	@ (800783c <I2C_ITError+0x1f0>)
 80076b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80076b2:	e032      	b.n	800771a <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80076b4:	4a62      	ldr	r2, [pc, #392]	@ (8007840 <I2C_ITError+0x1f4>)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	0011      	movs	r1, r2
 80076ba:	0018      	movs	r0, r3
 80076bc:	f000 fab0 	bl	8007c20 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	0018      	movs	r0, r3
 80076c4:	f000 f8ed 	bl	80078a2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2241      	movs	r2, #65	@ 0x41
 80076cc:	5c9b      	ldrb	r3, [r3, r2]
 80076ce:	b2db      	uxtb	r3, r3
 80076d0:	2b60      	cmp	r3, #96	@ 0x60
 80076d2:	d01f      	beq.n	8007714 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2241      	movs	r2, #65	@ 0x41
 80076d8:	2120      	movs	r1, #32
 80076da:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	699b      	ldr	r3, [r3, #24]
 80076e2:	2220      	movs	r2, #32
 80076e4:	4013      	ands	r3, r2
 80076e6:	2b20      	cmp	r3, #32
 80076e8:	d114      	bne.n	8007714 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	699b      	ldr	r3, [r3, #24]
 80076f0:	2210      	movs	r2, #16
 80076f2:	4013      	ands	r3, r2
 80076f4:	2b10      	cmp	r3, #16
 80076f6:	d109      	bne.n	800770c <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	2210      	movs	r2, #16
 80076fe:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007704:	2204      	movs	r2, #4
 8007706:	431a      	orrs	r2, r3
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	2220      	movs	r2, #32
 8007712:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2200      	movs	r2, #0
 8007718:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800771e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007724:	2b00      	cmp	r3, #0
 8007726:	d03b      	beq.n	80077a0 <I2C_ITError+0x154>
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	2b11      	cmp	r3, #17
 800772c:	d002      	beq.n	8007734 <I2C_ITError+0xe8>
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	2b21      	cmp	r3, #33	@ 0x21
 8007732:	d135      	bne.n	80077a0 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	681a      	ldr	r2, [r3, #0]
 800773a:	2380      	movs	r3, #128	@ 0x80
 800773c:	01db      	lsls	r3, r3, #7
 800773e:	401a      	ands	r2, r3
 8007740:	2380      	movs	r3, #128	@ 0x80
 8007742:	01db      	lsls	r3, r3, #7
 8007744:	429a      	cmp	r2, r3
 8007746:	d107      	bne.n	8007758 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	681a      	ldr	r2, [r3, #0]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	493c      	ldr	r1, [pc, #240]	@ (8007844 <I2C_ITError+0x1f8>)
 8007754:	400a      	ands	r2, r1
 8007756:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800775c:	0018      	movs	r0, r3
 800775e:	f7fd fe31 	bl	80053c4 <HAL_DMA_GetState>
 8007762:	0003      	movs	r3, r0
 8007764:	2b01      	cmp	r3, #1
 8007766:	d016      	beq.n	8007796 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800776c:	4a36      	ldr	r2, [pc, #216]	@ (8007848 <I2C_ITError+0x1fc>)
 800776e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2240      	movs	r2, #64	@ 0x40
 8007774:	2100      	movs	r1, #0
 8007776:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800777c:	0018      	movs	r0, r3
 800777e:	f7fd fcf5 	bl	800516c <HAL_DMA_Abort_IT>
 8007782:	1e03      	subs	r3, r0, #0
 8007784:	d051      	beq.n	800782a <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800778a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007790:	0018      	movs	r0, r3
 8007792:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007794:	e049      	b.n	800782a <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	0018      	movs	r0, r3
 800779a:	f000 f859 	bl	8007850 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800779e:	e044      	b.n	800782a <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d03b      	beq.n	8007820 <I2C_ITError+0x1d4>
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	2b12      	cmp	r3, #18
 80077ac:	d002      	beq.n	80077b4 <I2C_ITError+0x168>
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	2b22      	cmp	r3, #34	@ 0x22
 80077b2:	d135      	bne.n	8007820 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	2380      	movs	r3, #128	@ 0x80
 80077bc:	021b      	lsls	r3, r3, #8
 80077be:	401a      	ands	r2, r3
 80077c0:	2380      	movs	r3, #128	@ 0x80
 80077c2:	021b      	lsls	r3, r3, #8
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d107      	bne.n	80077d8 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	681a      	ldr	r2, [r3, #0]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	491e      	ldr	r1, [pc, #120]	@ (800784c <I2C_ITError+0x200>)
 80077d4:	400a      	ands	r2, r1
 80077d6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077dc:	0018      	movs	r0, r3
 80077de:	f7fd fdf1 	bl	80053c4 <HAL_DMA_GetState>
 80077e2:	0003      	movs	r3, r0
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d016      	beq.n	8007816 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077ec:	4a16      	ldr	r2, [pc, #88]	@ (8007848 <I2C_ITError+0x1fc>)
 80077ee:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2240      	movs	r2, #64	@ 0x40
 80077f4:	2100      	movs	r1, #0
 80077f6:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077fc:	0018      	movs	r0, r3
 80077fe:	f7fd fcb5 	bl	800516c <HAL_DMA_Abort_IT>
 8007802:	1e03      	subs	r3, r0, #0
 8007804:	d013      	beq.n	800782e <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800780a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007810:	0018      	movs	r0, r3
 8007812:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007814:	e00b      	b.n	800782e <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	0018      	movs	r0, r3
 800781a:	f000 f819 	bl	8007850 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800781e:	e006      	b.n	800782e <I2C_ITError+0x1e2>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	0018      	movs	r0, r3
 8007824:	f000 f814 	bl	8007850 <I2C_TreatErrorCallback>
  }
}
 8007828:	e002      	b.n	8007830 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800782a:	46c0      	nop			@ (mov r8, r8)
 800782c:	e000      	b.n	8007830 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800782e:	46c0      	nop			@ (mov r8, r8)
}
 8007830:	46c0      	nop			@ (mov r8, r8)
 8007832:	46bd      	mov	sp, r7
 8007834:	b004      	add	sp, #16
 8007836:	bd80      	pop	{r7, pc}
 8007838:	ffff0000 	.word	0xffff0000
 800783c:	0800663d 	.word	0x0800663d
 8007840:	00008003 	.word	0x00008003
 8007844:	ffffbfff 	.word	0xffffbfff
 8007848:	08007a5b 	.word	0x08007a5b
 800784c:	ffff7fff 	.word	0xffff7fff

08007850 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b082      	sub	sp, #8
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2241      	movs	r2, #65	@ 0x41
 800785c:	5c9b      	ldrb	r3, [r3, r2]
 800785e:	b2db      	uxtb	r3, r3
 8007860:	2b60      	cmp	r3, #96	@ 0x60
 8007862:	d10f      	bne.n	8007884 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2241      	movs	r2, #65	@ 0x41
 8007868:	2120      	movs	r1, #32
 800786a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2240      	movs	r2, #64	@ 0x40
 8007876:	2100      	movs	r1, #0
 8007878:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	0018      	movs	r0, r3
 800787e:	f7fe fda0 	bl	80063c2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007882:	e00a      	b.n	800789a <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2200      	movs	r2, #0
 8007888:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2240      	movs	r2, #64	@ 0x40
 800788e:	2100      	movs	r1, #0
 8007890:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	0018      	movs	r0, r3
 8007896:	f7f8 fde5 	bl	8000464 <HAL_I2C_ErrorCallback>
}
 800789a:	46c0      	nop			@ (mov r8, r8)
 800789c:	46bd      	mov	sp, r7
 800789e:	b002      	add	sp, #8
 80078a0:	bd80      	pop	{r7, pc}

080078a2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80078a2:	b580      	push	{r7, lr}
 80078a4:	b082      	sub	sp, #8
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	699b      	ldr	r3, [r3, #24]
 80078b0:	2202      	movs	r2, #2
 80078b2:	4013      	ands	r3, r2
 80078b4:	2b02      	cmp	r3, #2
 80078b6:	d103      	bne.n	80078c0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	2200      	movs	r2, #0
 80078be:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	699b      	ldr	r3, [r3, #24]
 80078c6:	2201      	movs	r2, #1
 80078c8:	4013      	ands	r3, r2
 80078ca:	2b01      	cmp	r3, #1
 80078cc:	d007      	beq.n	80078de <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	699a      	ldr	r2, [r3, #24]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	2101      	movs	r1, #1
 80078da:	430a      	orrs	r2, r1
 80078dc:	619a      	str	r2, [r3, #24]
  }
}
 80078de:	46c0      	nop			@ (mov r8, r8)
 80078e0:	46bd      	mov	sp, r7
 80078e2:	b002      	add	sp, #8
 80078e4:	bd80      	pop	{r7, pc}
	...

080078e8 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078f4:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	681a      	ldr	r2, [r3, #0]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4920      	ldr	r1, [pc, #128]	@ (8007984 <I2C_DMAMasterTransmitCplt+0x9c>)
 8007902:	400a      	ands	r2, r1
 8007904:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800790a:	b29b      	uxth	r3, r3
 800790c:	2b00      	cmp	r3, #0
 800790e:	d105      	bne.n	800791c <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2120      	movs	r1, #32
 8007914:	0018      	movs	r0, r3
 8007916:	f000 f8f9 	bl	8007b0c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800791a:	e02e      	b.n	800797a <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007920:	68fa      	ldr	r2, [r7, #12]
 8007922:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8007924:	189a      	adds	r2, r3, r2
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800792e:	b29b      	uxth	r3, r3
 8007930:	2bff      	cmp	r3, #255	@ 0xff
 8007932:	d903      	bls.n	800793c <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	22ff      	movs	r2, #255	@ 0xff
 8007938:	851a      	strh	r2, [r3, #40]	@ 0x28
 800793a:	e004      	b.n	8007946 <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007940:	b29a      	uxth	r2, r3
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800794e:	0019      	movs	r1, r3
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	3328      	adds	r3, #40	@ 0x28
 8007956:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800795c:	f7fd fb1c 	bl	8004f98 <HAL_DMA_Start_IT>
 8007960:	1e03      	subs	r3, r0, #0
 8007962:	d005      	beq.n	8007970 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2110      	movs	r1, #16
 8007968:	0018      	movs	r0, r3
 800796a:	f7ff fe6f 	bl	800764c <I2C_ITError>
}
 800796e:	e004      	b.n	800797a <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2140      	movs	r1, #64	@ 0x40
 8007974:	0018      	movs	r0, r3
 8007976:	f000 f8c9 	bl	8007b0c <I2C_Enable_IRQ>
}
 800797a:	46c0      	nop			@ (mov r8, r8)
 800797c:	46bd      	mov	sp, r7
 800797e:	b004      	add	sp, #16
 8007980:	bd80      	pop	{r7, pc}
 8007982:	46c0      	nop			@ (mov r8, r8)
 8007984:	ffffbfff 	.word	0xffffbfff

08007988 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b084      	sub	sp, #16
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007994:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	681a      	ldr	r2, [r3, #0]
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4920      	ldr	r1, [pc, #128]	@ (8007a24 <I2C_DMAMasterReceiveCplt+0x9c>)
 80079a2:	400a      	ands	r2, r1
 80079a4:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079aa:	b29b      	uxth	r3, r3
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d105      	bne.n	80079bc <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2120      	movs	r1, #32
 80079b4:	0018      	movs	r0, r3
 80079b6:	f000 f8a9 	bl	8007b0c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80079ba:	e02e      	b.n	8007a1a <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079c0:	68fa      	ldr	r2, [r7, #12]
 80079c2:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80079c4:	189a      	adds	r2, r3, r2
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	2bff      	cmp	r3, #255	@ 0xff
 80079d2:	d903      	bls.n	80079dc <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	22ff      	movs	r2, #255	@ 0xff
 80079d8:	851a      	strh	r2, [r3, #40]	@ 0x28
 80079da:	e004      	b.n	80079e6 <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079e0:	b29a      	uxth	r2, r3
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	3324      	adds	r3, #36	@ 0x24
 80079f0:	0019      	movs	r1, r3
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079f6:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80079fc:	f7fd facc 	bl	8004f98 <HAL_DMA_Start_IT>
 8007a00:	1e03      	subs	r3, r0, #0
 8007a02:	d005      	beq.n	8007a10 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2110      	movs	r1, #16
 8007a08:	0018      	movs	r0, r3
 8007a0a:	f7ff fe1f 	bl	800764c <I2C_ITError>
}
 8007a0e:	e004      	b.n	8007a1a <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2140      	movs	r1, #64	@ 0x40
 8007a14:	0018      	movs	r0, r3
 8007a16:	f000 f879 	bl	8007b0c <I2C_Enable_IRQ>
}
 8007a1a:	46c0      	nop			@ (mov r8, r8)
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	b004      	add	sp, #16
 8007a20:	bd80      	pop	{r7, pc}
 8007a22:	46c0      	nop			@ (mov r8, r8)
 8007a24:	ffff7fff 	.word	0xffff7fff

08007a28 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b084      	sub	sp, #16
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a34:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	685a      	ldr	r2, [r3, #4]
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	2180      	movs	r1, #128	@ 0x80
 8007a42:	0209      	lsls	r1, r1, #8
 8007a44:	430a      	orrs	r2, r1
 8007a46:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2110      	movs	r1, #16
 8007a4c:	0018      	movs	r0, r3
 8007a4e:	f7ff fdfd 	bl	800764c <I2C_ITError>
}
 8007a52:	46c0      	nop			@ (mov r8, r8)
 8007a54:	46bd      	mov	sp, r7
 8007a56:	b004      	add	sp, #16
 8007a58:	bd80      	pop	{r7, pc}

08007a5a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007a5a:	b580      	push	{r7, lr}
 8007a5c:	b084      	sub	sp, #16
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a66:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d003      	beq.n	8007a78 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a74:	2200      	movs	r2, #0
 8007a76:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d003      	beq.n	8007a88 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a84:	2200      	movs	r2, #0
 8007a86:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	0018      	movs	r0, r3
 8007a8c:	f7ff fee0 	bl	8007850 <I2C_TreatErrorCallback>
}
 8007a90:	46c0      	nop			@ (mov r8, r8)
 8007a92:	46bd      	mov	sp, r7
 8007a94:	b004      	add	sp, #16
 8007a96:	bd80      	pop	{r7, pc}

08007a98 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007a98:	b590      	push	{r4, r7, lr}
 8007a9a:	b087      	sub	sp, #28
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	60f8      	str	r0, [r7, #12]
 8007aa0:	0008      	movs	r0, r1
 8007aa2:	0011      	movs	r1, r2
 8007aa4:	607b      	str	r3, [r7, #4]
 8007aa6:	240a      	movs	r4, #10
 8007aa8:	193b      	adds	r3, r7, r4
 8007aaa:	1c02      	adds	r2, r0, #0
 8007aac:	801a      	strh	r2, [r3, #0]
 8007aae:	2009      	movs	r0, #9
 8007ab0:	183b      	adds	r3, r7, r0
 8007ab2:	1c0a      	adds	r2, r1, #0
 8007ab4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007ab6:	193b      	adds	r3, r7, r4
 8007ab8:	881b      	ldrh	r3, [r3, #0]
 8007aba:	059b      	lsls	r3, r3, #22
 8007abc:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007abe:	183b      	adds	r3, r7, r0
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	0419      	lsls	r1, r3, #16
 8007ac4:	23ff      	movs	r3, #255	@ 0xff
 8007ac6:	041b      	lsls	r3, r3, #16
 8007ac8:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007aca:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	005b      	lsls	r3, r3, #1
 8007ad6:	085b      	lsrs	r3, r3, #1
 8007ad8:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007ae2:	0d51      	lsrs	r1, r2, #21
 8007ae4:	2280      	movs	r2, #128	@ 0x80
 8007ae6:	00d2      	lsls	r2, r2, #3
 8007ae8:	400a      	ands	r2, r1
 8007aea:	4907      	ldr	r1, [pc, #28]	@ (8007b08 <I2C_TransferConfig+0x70>)
 8007aec:	430a      	orrs	r2, r1
 8007aee:	43d2      	mvns	r2, r2
 8007af0:	401a      	ands	r2, r3
 8007af2:	0011      	movs	r1, r2
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	697a      	ldr	r2, [r7, #20]
 8007afa:	430a      	orrs	r2, r1
 8007afc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007afe:	46c0      	nop			@ (mov r8, r8)
 8007b00:	46bd      	mov	sp, r7
 8007b02:	b007      	add	sp, #28
 8007b04:	bd90      	pop	{r4, r7, pc}
 8007b06:	46c0      	nop			@ (mov r8, r8)
 8007b08:	03ff63ff 	.word	0x03ff63ff

08007b0c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b084      	sub	sp, #16
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	000a      	movs	r2, r1
 8007b16:	1cbb      	adds	r3, r7, #2
 8007b18:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	60fb      	str	r3, [r7, #12]

#if defined(HAL_DMA_MODULE_ENABLED)
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b22:	4b3c      	ldr	r3, [pc, #240]	@ (8007c14 <I2C_Enable_IRQ+0x108>)
 8007b24:	429a      	cmp	r2, r3
 8007b26:	d035      	beq.n	8007b94 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8007b2c:	4b3a      	ldr	r3, [pc, #232]	@ (8007c18 <I2C_Enable_IRQ+0x10c>)
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	d030      	beq.n	8007b94 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8007b36:	4b39      	ldr	r3, [pc, #228]	@ (8007c1c <I2C_Enable_IRQ+0x110>)
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d02b      	beq.n	8007b94 <I2C_Enable_IRQ+0x88>
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007b3c:	1cbb      	adds	r3, r7, #2
 8007b3e:	2200      	movs	r2, #0
 8007b40:	5e9b      	ldrsh	r3, [r3, r2]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	da03      	bge.n	8007b4e <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	22b8      	movs	r2, #184	@ 0xb8
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007b4e:	1cbb      	adds	r3, r7, #2
 8007b50:	881b      	ldrh	r3, [r3, #0]
 8007b52:	2201      	movs	r2, #1
 8007b54:	4013      	ands	r3, r2
 8007b56:	d003      	beq.n	8007b60 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	22f2      	movs	r2, #242	@ 0xf2
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007b60:	1cbb      	adds	r3, r7, #2
 8007b62:	881b      	ldrh	r3, [r3, #0]
 8007b64:	2202      	movs	r2, #2
 8007b66:	4013      	ands	r3, r2
 8007b68:	d003      	beq.n	8007b72 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	22f4      	movs	r2, #244	@ 0xf4
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007b72:	1cbb      	adds	r3, r7, #2
 8007b74:	881b      	ldrh	r3, [r3, #0]
 8007b76:	2b10      	cmp	r3, #16
 8007b78:	d103      	bne.n	8007b82 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2290      	movs	r2, #144	@ 0x90
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007b82:	1cbb      	adds	r3, r7, #2
 8007b84:	881b      	ldrh	r3, [r3, #0]
 8007b86:	2b20      	cmp	r3, #32
 8007b88:	d137      	bne.n	8007bfa <I2C_Enable_IRQ+0xee>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2220      	movs	r2, #32
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007b92:	e032      	b.n	8007bfa <I2C_Enable_IRQ+0xee>
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007b94:	1cbb      	adds	r3, r7, #2
 8007b96:	2200      	movs	r2, #0
 8007b98:	5e9b      	ldrsh	r3, [r3, r2]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	da03      	bge.n	8007ba6 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	22b8      	movs	r2, #184	@ 0xb8
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007ba6:	1cbb      	adds	r3, r7, #2
 8007ba8:	881b      	ldrh	r3, [r3, #0]
 8007baa:	2201      	movs	r2, #1
 8007bac:	4013      	ands	r3, r2
 8007bae:	d003      	beq.n	8007bb8 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	22f2      	movs	r2, #242	@ 0xf2
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007bb8:	1cbb      	adds	r3, r7, #2
 8007bba:	881b      	ldrh	r3, [r3, #0]
 8007bbc:	2202      	movs	r2, #2
 8007bbe:	4013      	ands	r3, r2
 8007bc0:	d003      	beq.n	8007bca <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	22f4      	movs	r2, #244	@ 0xf4
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007bca:	1cbb      	adds	r3, r7, #2
 8007bcc:	881b      	ldrh	r3, [r3, #0]
 8007bce:	2b10      	cmp	r3, #16
 8007bd0:	d103      	bne.n	8007bda <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2290      	movs	r2, #144	@ 0x90
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007bda:	1cbb      	adds	r3, r7, #2
 8007bdc:	881b      	ldrh	r3, [r3, #0]
 8007bde:	2b20      	cmp	r3, #32
 8007be0:	d103      	bne.n	8007bea <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2260      	movs	r2, #96	@ 0x60
 8007be6:	4313      	orrs	r3, r2
 8007be8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007bea:	1cbb      	adds	r3, r7, #2
 8007bec:	881b      	ldrh	r3, [r3, #0]
 8007bee:	2b40      	cmp	r3, #64	@ 0x40
 8007bf0:	d103      	bne.n	8007bfa <I2C_Enable_IRQ+0xee>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2240      	movs	r2, #64	@ 0x40
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	60fb      	str	r3, [r7, #12]
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	6819      	ldr	r1, [r3, #0]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	68fa      	ldr	r2, [r7, #12]
 8007c06:	430a      	orrs	r2, r1
 8007c08:	601a      	str	r2, [r3, #0]
}
 8007c0a:	46c0      	nop			@ (mov r8, r8)
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	b004      	add	sp, #16
 8007c10:	bd80      	pop	{r7, pc}
 8007c12:	46c0      	nop			@ (mov r8, r8)
 8007c14:	0800683d 	.word	0x0800683d
 8007c18:	08006c8d 	.word	0x08006c8d
 8007c1c:	08006a35 	.word	0x08006a35

08007c20 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b084      	sub	sp, #16
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	000a      	movs	r2, r1
 8007c2a:	1cbb      	adds	r3, r7, #2
 8007c2c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007c32:	1cbb      	adds	r3, r7, #2
 8007c34:	881b      	ldrh	r3, [r3, #0]
 8007c36:	2201      	movs	r2, #1
 8007c38:	4013      	ands	r3, r2
 8007c3a:	d010      	beq.n	8007c5e <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2242      	movs	r2, #66	@ 0x42
 8007c40:	4313      	orrs	r3, r2
 8007c42:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2241      	movs	r2, #65	@ 0x41
 8007c48:	5c9b      	ldrb	r3, [r3, r2]
 8007c4a:	b2db      	uxtb	r3, r3
 8007c4c:	001a      	movs	r2, r3
 8007c4e:	2328      	movs	r3, #40	@ 0x28
 8007c50:	4013      	ands	r3, r2
 8007c52:	2b28      	cmp	r3, #40	@ 0x28
 8007c54:	d003      	beq.n	8007c5e <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	22b0      	movs	r2, #176	@ 0xb0
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007c5e:	1cbb      	adds	r3, r7, #2
 8007c60:	881b      	ldrh	r3, [r3, #0]
 8007c62:	2202      	movs	r2, #2
 8007c64:	4013      	ands	r3, r2
 8007c66:	d010      	beq.n	8007c8a <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2244      	movs	r2, #68	@ 0x44
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2241      	movs	r2, #65	@ 0x41
 8007c74:	5c9b      	ldrb	r3, [r3, r2]
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	001a      	movs	r2, r3
 8007c7a:	2328      	movs	r3, #40	@ 0x28
 8007c7c:	4013      	ands	r3, r2
 8007c7e:	2b28      	cmp	r3, #40	@ 0x28
 8007c80:	d003      	beq.n	8007c8a <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	22b0      	movs	r2, #176	@ 0xb0
 8007c86:	4313      	orrs	r3, r2
 8007c88:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007c8a:	1cbb      	adds	r3, r7, #2
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	5e9b      	ldrsh	r3, [r3, r2]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	da03      	bge.n	8007c9c <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	22b8      	movs	r2, #184	@ 0xb8
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007c9c:	1cbb      	adds	r3, r7, #2
 8007c9e:	881b      	ldrh	r3, [r3, #0]
 8007ca0:	2b10      	cmp	r3, #16
 8007ca2:	d103      	bne.n	8007cac <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2290      	movs	r2, #144	@ 0x90
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007cac:	1cbb      	adds	r3, r7, #2
 8007cae:	881b      	ldrh	r3, [r3, #0]
 8007cb0:	2b20      	cmp	r3, #32
 8007cb2:	d103      	bne.n	8007cbc <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	2220      	movs	r2, #32
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007cbc:	1cbb      	adds	r3, r7, #2
 8007cbe:	881b      	ldrh	r3, [r3, #0]
 8007cc0:	2b40      	cmp	r3, #64	@ 0x40
 8007cc2:	d103      	bne.n	8007ccc <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2240      	movs	r2, #64	@ 0x40
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	681a      	ldr	r2, [r3, #0]
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	43d9      	mvns	r1, r3
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	400a      	ands	r2, r1
 8007cdc:	601a      	str	r2, [r3, #0]
}
 8007cde:	46c0      	nop			@ (mov r8, r8)
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	b004      	add	sp, #16
 8007ce4:	bd80      	pop	{r7, pc}
	...

08007ce8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b082      	sub	sp, #8
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2241      	movs	r2, #65	@ 0x41
 8007cf6:	5c9b      	ldrb	r3, [r3, r2]
 8007cf8:	b2db      	uxtb	r3, r3
 8007cfa:	2b20      	cmp	r3, #32
 8007cfc:	d138      	bne.n	8007d70 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2240      	movs	r2, #64	@ 0x40
 8007d02:	5c9b      	ldrb	r3, [r3, r2]
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d101      	bne.n	8007d0c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007d08:	2302      	movs	r3, #2
 8007d0a:	e032      	b.n	8007d72 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2240      	movs	r2, #64	@ 0x40
 8007d10:	2101      	movs	r1, #1
 8007d12:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2241      	movs	r2, #65	@ 0x41
 8007d18:	2124      	movs	r1, #36	@ 0x24
 8007d1a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	2101      	movs	r1, #1
 8007d28:	438a      	bics	r2, r1
 8007d2a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4911      	ldr	r1, [pc, #68]	@ (8007d7c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8007d38:	400a      	ands	r2, r1
 8007d3a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	6819      	ldr	r1, [r3, #0]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	683a      	ldr	r2, [r7, #0]
 8007d48:	430a      	orrs	r2, r1
 8007d4a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	681a      	ldr	r2, [r3, #0]
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	2101      	movs	r1, #1
 8007d58:	430a      	orrs	r2, r1
 8007d5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2241      	movs	r2, #65	@ 0x41
 8007d60:	2120      	movs	r1, #32
 8007d62:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2240      	movs	r2, #64	@ 0x40
 8007d68:	2100      	movs	r1, #0
 8007d6a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	e000      	b.n	8007d72 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007d70:	2302      	movs	r3, #2
  }
}
 8007d72:	0018      	movs	r0, r3
 8007d74:	46bd      	mov	sp, r7
 8007d76:	b002      	add	sp, #8
 8007d78:	bd80      	pop	{r7, pc}
 8007d7a:	46c0      	nop			@ (mov r8, r8)
 8007d7c:	ffffefff 	.word	0xffffefff

08007d80 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2241      	movs	r2, #65	@ 0x41
 8007d8e:	5c9b      	ldrb	r3, [r3, r2]
 8007d90:	b2db      	uxtb	r3, r3
 8007d92:	2b20      	cmp	r3, #32
 8007d94:	d139      	bne.n	8007e0a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2240      	movs	r2, #64	@ 0x40
 8007d9a:	5c9b      	ldrb	r3, [r3, r2]
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	d101      	bne.n	8007da4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007da0:	2302      	movs	r3, #2
 8007da2:	e033      	b.n	8007e0c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2240      	movs	r2, #64	@ 0x40
 8007da8:	2101      	movs	r1, #1
 8007daa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2241      	movs	r2, #65	@ 0x41
 8007db0:	2124      	movs	r1, #36	@ 0x24
 8007db2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	681a      	ldr	r2, [r3, #0]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	2101      	movs	r1, #1
 8007dc0:	438a      	bics	r2, r1
 8007dc2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	4a11      	ldr	r2, [pc, #68]	@ (8007e14 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8007dd0:	4013      	ands	r3, r2
 8007dd2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	021b      	lsls	r3, r3, #8
 8007dd8:	68fa      	ldr	r2, [r7, #12]
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	68fa      	ldr	r2, [r7, #12]
 8007de4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	681a      	ldr	r2, [r3, #0]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	2101      	movs	r1, #1
 8007df2:	430a      	orrs	r2, r1
 8007df4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2241      	movs	r2, #65	@ 0x41
 8007dfa:	2120      	movs	r1, #32
 8007dfc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2240      	movs	r2, #64	@ 0x40
 8007e02:	2100      	movs	r1, #0
 8007e04:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007e06:	2300      	movs	r3, #0
 8007e08:	e000      	b.n	8007e0c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007e0a:	2302      	movs	r3, #2
  }
}
 8007e0c:	0018      	movs	r0, r3
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	b004      	add	sp, #16
 8007e12:	bd80      	pop	{r7, pc}
 8007e14:	fffff0ff 	.word	0xfffff0ff

08007e18 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b086      	sub	sp, #24
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d101      	bne.n	8007e2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007e26:	2301      	movs	r3, #1
 8007e28:	e20f      	b.n	800824a <HAL_RCC_OscConfig+0x432>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	2201      	movs	r2, #1
 8007e30:	4013      	ands	r3, r2
 8007e32:	d100      	bne.n	8007e36 <HAL_RCC_OscConfig+0x1e>
 8007e34:	e069      	b.n	8007f0a <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e36:	4bc8      	ldr	r3, [pc, #800]	@ (8008158 <HAL_RCC_OscConfig+0x340>)
 8007e38:	689b      	ldr	r3, [r3, #8]
 8007e3a:	2238      	movs	r2, #56	@ 0x38
 8007e3c:	4013      	ands	r3, r2
 8007e3e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	2b08      	cmp	r3, #8
 8007e44:	d105      	bne.n	8007e52 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d15d      	bne.n	8007f0a <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8007e4e:	2301      	movs	r3, #1
 8007e50:	e1fb      	b.n	800824a <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	685a      	ldr	r2, [r3, #4]
 8007e56:	2380      	movs	r3, #128	@ 0x80
 8007e58:	025b      	lsls	r3, r3, #9
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d107      	bne.n	8007e6e <HAL_RCC_OscConfig+0x56>
 8007e5e:	4bbe      	ldr	r3, [pc, #760]	@ (8008158 <HAL_RCC_OscConfig+0x340>)
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	4bbd      	ldr	r3, [pc, #756]	@ (8008158 <HAL_RCC_OscConfig+0x340>)
 8007e64:	2180      	movs	r1, #128	@ 0x80
 8007e66:	0249      	lsls	r1, r1, #9
 8007e68:	430a      	orrs	r2, r1
 8007e6a:	601a      	str	r2, [r3, #0]
 8007e6c:	e020      	b.n	8007eb0 <HAL_RCC_OscConfig+0x98>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	685a      	ldr	r2, [r3, #4]
 8007e72:	23a0      	movs	r3, #160	@ 0xa0
 8007e74:	02db      	lsls	r3, r3, #11
 8007e76:	429a      	cmp	r2, r3
 8007e78:	d10e      	bne.n	8007e98 <HAL_RCC_OscConfig+0x80>
 8007e7a:	4bb7      	ldr	r3, [pc, #732]	@ (8008158 <HAL_RCC_OscConfig+0x340>)
 8007e7c:	681a      	ldr	r2, [r3, #0]
 8007e7e:	4bb6      	ldr	r3, [pc, #728]	@ (8008158 <HAL_RCC_OscConfig+0x340>)
 8007e80:	2180      	movs	r1, #128	@ 0x80
 8007e82:	02c9      	lsls	r1, r1, #11
 8007e84:	430a      	orrs	r2, r1
 8007e86:	601a      	str	r2, [r3, #0]
 8007e88:	4bb3      	ldr	r3, [pc, #716]	@ (8008158 <HAL_RCC_OscConfig+0x340>)
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	4bb2      	ldr	r3, [pc, #712]	@ (8008158 <HAL_RCC_OscConfig+0x340>)
 8007e8e:	2180      	movs	r1, #128	@ 0x80
 8007e90:	0249      	lsls	r1, r1, #9
 8007e92:	430a      	orrs	r2, r1
 8007e94:	601a      	str	r2, [r3, #0]
 8007e96:	e00b      	b.n	8007eb0 <HAL_RCC_OscConfig+0x98>
 8007e98:	4baf      	ldr	r3, [pc, #700]	@ (8008158 <HAL_RCC_OscConfig+0x340>)
 8007e9a:	681a      	ldr	r2, [r3, #0]
 8007e9c:	4bae      	ldr	r3, [pc, #696]	@ (8008158 <HAL_RCC_OscConfig+0x340>)
 8007e9e:	49af      	ldr	r1, [pc, #700]	@ (800815c <HAL_RCC_OscConfig+0x344>)
 8007ea0:	400a      	ands	r2, r1
 8007ea2:	601a      	str	r2, [r3, #0]
 8007ea4:	4bac      	ldr	r3, [pc, #688]	@ (8008158 <HAL_RCC_OscConfig+0x340>)
 8007ea6:	681a      	ldr	r2, [r3, #0]
 8007ea8:	4bab      	ldr	r3, [pc, #684]	@ (8008158 <HAL_RCC_OscConfig+0x340>)
 8007eaa:	49ad      	ldr	r1, [pc, #692]	@ (8008160 <HAL_RCC_OscConfig+0x348>)
 8007eac:	400a      	ands	r2, r1
 8007eae:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d014      	beq.n	8007ee2 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007eb8:	f7fc fe2e 	bl	8004b18 <HAL_GetTick>
 8007ebc:	0003      	movs	r3, r0
 8007ebe:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007ec0:	e008      	b.n	8007ed4 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8007ec2:	f7fc fe29 	bl	8004b18 <HAL_GetTick>
 8007ec6:	0002      	movs	r2, r0
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	1ad3      	subs	r3, r2, r3
 8007ecc:	2b64      	cmp	r3, #100	@ 0x64
 8007ece:	d901      	bls.n	8007ed4 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8007ed0:	2303      	movs	r3, #3
 8007ed2:	e1ba      	b.n	800824a <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007ed4:	4ba0      	ldr	r3, [pc, #640]	@ (8008158 <HAL_RCC_OscConfig+0x340>)
 8007ed6:	681a      	ldr	r2, [r3, #0]
 8007ed8:	2380      	movs	r3, #128	@ 0x80
 8007eda:	029b      	lsls	r3, r3, #10
 8007edc:	4013      	ands	r3, r2
 8007ede:	d0f0      	beq.n	8007ec2 <HAL_RCC_OscConfig+0xaa>
 8007ee0:	e013      	b.n	8007f0a <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ee2:	f7fc fe19 	bl	8004b18 <HAL_GetTick>
 8007ee6:	0003      	movs	r3, r0
 8007ee8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007eea:	e008      	b.n	8007efe <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8007eec:	f7fc fe14 	bl	8004b18 <HAL_GetTick>
 8007ef0:	0002      	movs	r2, r0
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	1ad3      	subs	r3, r2, r3
 8007ef6:	2b64      	cmp	r3, #100	@ 0x64
 8007ef8:	d901      	bls.n	8007efe <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8007efa:	2303      	movs	r3, #3
 8007efc:	e1a5      	b.n	800824a <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007efe:	4b96      	ldr	r3, [pc, #600]	@ (8008158 <HAL_RCC_OscConfig+0x340>)
 8007f00:	681a      	ldr	r2, [r3, #0]
 8007f02:	2380      	movs	r3, #128	@ 0x80
 8007f04:	029b      	lsls	r3, r3, #10
 8007f06:	4013      	ands	r3, r2
 8007f08:	d1f0      	bne.n	8007eec <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	2202      	movs	r2, #2
 8007f10:	4013      	ands	r3, r2
 8007f12:	d100      	bne.n	8007f16 <HAL_RCC_OscConfig+0xfe>
 8007f14:	e086      	b.n	8008024 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f16:	4b90      	ldr	r3, [pc, #576]	@ (8008158 <HAL_RCC_OscConfig+0x340>)
 8007f18:	689b      	ldr	r3, [r3, #8]
 8007f1a:	2238      	movs	r2, #56	@ 0x38
 8007f1c:	4013      	ands	r3, r2
 8007f1e:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d12f      	bne.n	8007f86 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	68db      	ldr	r3, [r3, #12]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d101      	bne.n	8007f32 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	e18b      	b.n	800824a <HAL_RCC_OscConfig+0x432>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f32:	4b89      	ldr	r3, [pc, #548]	@ (8008158 <HAL_RCC_OscConfig+0x340>)
 8007f34:	685b      	ldr	r3, [r3, #4]
 8007f36:	4a8b      	ldr	r2, [pc, #556]	@ (8008164 <HAL_RCC_OscConfig+0x34c>)
 8007f38:	4013      	ands	r3, r2
 8007f3a:	0019      	movs	r1, r3
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	695b      	ldr	r3, [r3, #20]
 8007f40:	021a      	lsls	r2, r3, #8
 8007f42:	4b85      	ldr	r3, [pc, #532]	@ (8008158 <HAL_RCC_OscConfig+0x340>)
 8007f44:	430a      	orrs	r2, r1
 8007f46:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d112      	bne.n	8007f74 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8007f4e:	4b82      	ldr	r3, [pc, #520]	@ (8008158 <HAL_RCC_OscConfig+0x340>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a85      	ldr	r2, [pc, #532]	@ (8008168 <HAL_RCC_OscConfig+0x350>)
 8007f54:	4013      	ands	r3, r2
 8007f56:	0019      	movs	r1, r3
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	691a      	ldr	r2, [r3, #16]
 8007f5c:	4b7e      	ldr	r3, [pc, #504]	@ (8008158 <HAL_RCC_OscConfig+0x340>)
 8007f5e:	430a      	orrs	r2, r1
 8007f60:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8007f62:	4b7d      	ldr	r3, [pc, #500]	@ (8008158 <HAL_RCC_OscConfig+0x340>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	0adb      	lsrs	r3, r3, #11
 8007f68:	2207      	movs	r2, #7
 8007f6a:	4013      	ands	r3, r2
 8007f6c:	4a7f      	ldr	r2, [pc, #508]	@ (800816c <HAL_RCC_OscConfig+0x354>)
 8007f6e:	40da      	lsrs	r2, r3
 8007f70:	4b7f      	ldr	r3, [pc, #508]	@ (8008170 <HAL_RCC_OscConfig+0x358>)
 8007f72:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007f74:	4b7f      	ldr	r3, [pc, #508]	@ (8008174 <HAL_RCC_OscConfig+0x35c>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	0018      	movs	r0, r3
 8007f7a:	f7fc fd71 	bl	8004a60 <HAL_InitTick>
 8007f7e:	1e03      	subs	r3, r0, #0
 8007f80:	d050      	beq.n	8008024 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8007f82:	2301      	movs	r3, #1
 8007f84:	e161      	b.n	800824a <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	68db      	ldr	r3, [r3, #12]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d030      	beq.n	8007ff0 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8007f8e:	4b72      	ldr	r3, [pc, #456]	@ (8008158 <HAL_RCC_OscConfig+0x340>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a75      	ldr	r2, [pc, #468]	@ (8008168 <HAL_RCC_OscConfig+0x350>)
 8007f94:	4013      	ands	r3, r2
 8007f96:	0019      	movs	r1, r3
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	691a      	ldr	r2, [r3, #16]
 8007f9c:	4b6e      	ldr	r3, [pc, #440]	@ (8008158 <HAL_RCC_OscConfig+0x340>)
 8007f9e:	430a      	orrs	r2, r1
 8007fa0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8007fa2:	4b6d      	ldr	r3, [pc, #436]	@ (8008158 <HAL_RCC_OscConfig+0x340>)
 8007fa4:	681a      	ldr	r2, [r3, #0]
 8007fa6:	4b6c      	ldr	r3, [pc, #432]	@ (8008158 <HAL_RCC_OscConfig+0x340>)
 8007fa8:	2180      	movs	r1, #128	@ 0x80
 8007faa:	0049      	lsls	r1, r1, #1
 8007fac:	430a      	orrs	r2, r1
 8007fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fb0:	f7fc fdb2 	bl	8004b18 <HAL_GetTick>
 8007fb4:	0003      	movs	r3, r0
 8007fb6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007fb8:	e008      	b.n	8007fcc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8007fba:	f7fc fdad 	bl	8004b18 <HAL_GetTick>
 8007fbe:	0002      	movs	r2, r0
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	1ad3      	subs	r3, r2, r3
 8007fc4:	2b02      	cmp	r3, #2
 8007fc6:	d901      	bls.n	8007fcc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007fc8:	2303      	movs	r3, #3
 8007fca:	e13e      	b.n	800824a <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007fcc:	4b62      	ldr	r3, [pc, #392]	@ (8008158 <HAL_RCC_OscConfig+0x340>)
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	2380      	movs	r3, #128	@ 0x80
 8007fd2:	00db      	lsls	r3, r3, #3
 8007fd4:	4013      	ands	r3, r2
 8007fd6:	d0f0      	beq.n	8007fba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fd8:	4b5f      	ldr	r3, [pc, #380]	@ (8008158 <HAL_RCC_OscConfig+0x340>)
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	4a61      	ldr	r2, [pc, #388]	@ (8008164 <HAL_RCC_OscConfig+0x34c>)
 8007fde:	4013      	ands	r3, r2
 8007fe0:	0019      	movs	r1, r3
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	695b      	ldr	r3, [r3, #20]
 8007fe6:	021a      	lsls	r2, r3, #8
 8007fe8:	4b5b      	ldr	r3, [pc, #364]	@ (8008158 <HAL_RCC_OscConfig+0x340>)
 8007fea:	430a      	orrs	r2, r1
 8007fec:	605a      	str	r2, [r3, #4]
 8007fee:	e019      	b.n	8008024 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8007ff0:	4b59      	ldr	r3, [pc, #356]	@ (8008158 <HAL_RCC_OscConfig+0x340>)
 8007ff2:	681a      	ldr	r2, [r3, #0]
 8007ff4:	4b58      	ldr	r3, [pc, #352]	@ (8008158 <HAL_RCC_OscConfig+0x340>)
 8007ff6:	4960      	ldr	r1, [pc, #384]	@ (8008178 <HAL_RCC_OscConfig+0x360>)
 8007ff8:	400a      	ands	r2, r1
 8007ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ffc:	f7fc fd8c 	bl	8004b18 <HAL_GetTick>
 8008000:	0003      	movs	r3, r0
 8008002:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008004:	e008      	b.n	8008018 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8008006:	f7fc fd87 	bl	8004b18 <HAL_GetTick>
 800800a:	0002      	movs	r2, r0
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	1ad3      	subs	r3, r2, r3
 8008010:	2b02      	cmp	r3, #2
 8008012:	d901      	bls.n	8008018 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8008014:	2303      	movs	r3, #3
 8008016:	e118      	b.n	800824a <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008018:	4b4f      	ldr	r3, [pc, #316]	@ (8008158 <HAL_RCC_OscConfig+0x340>)
 800801a:	681a      	ldr	r2, [r3, #0]
 800801c:	2380      	movs	r3, #128	@ 0x80
 800801e:	00db      	lsls	r3, r3, #3
 8008020:	4013      	ands	r3, r2
 8008022:	d1f0      	bne.n	8008006 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	2208      	movs	r2, #8
 800802a:	4013      	ands	r3, r2
 800802c:	d042      	beq.n	80080b4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800802e:	4b4a      	ldr	r3, [pc, #296]	@ (8008158 <HAL_RCC_OscConfig+0x340>)
 8008030:	689b      	ldr	r3, [r3, #8]
 8008032:	2238      	movs	r2, #56	@ 0x38
 8008034:	4013      	ands	r3, r2
 8008036:	2b18      	cmp	r3, #24
 8008038:	d105      	bne.n	8008046 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	699b      	ldr	r3, [r3, #24]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d138      	bne.n	80080b4 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8008042:	2301      	movs	r3, #1
 8008044:	e101      	b.n	800824a <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	699b      	ldr	r3, [r3, #24]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d019      	beq.n	8008082 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800804e:	4b42      	ldr	r3, [pc, #264]	@ (8008158 <HAL_RCC_OscConfig+0x340>)
 8008050:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008052:	4b41      	ldr	r3, [pc, #260]	@ (8008158 <HAL_RCC_OscConfig+0x340>)
 8008054:	2101      	movs	r1, #1
 8008056:	430a      	orrs	r2, r1
 8008058:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800805a:	f7fc fd5d 	bl	8004b18 <HAL_GetTick>
 800805e:	0003      	movs	r3, r0
 8008060:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8008062:	e008      	b.n	8008076 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8008064:	f7fc fd58 	bl	8004b18 <HAL_GetTick>
 8008068:	0002      	movs	r2, r0
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	1ad3      	subs	r3, r2, r3
 800806e:	2b02      	cmp	r3, #2
 8008070:	d901      	bls.n	8008076 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8008072:	2303      	movs	r3, #3
 8008074:	e0e9      	b.n	800824a <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8008076:	4b38      	ldr	r3, [pc, #224]	@ (8008158 <HAL_RCC_OscConfig+0x340>)
 8008078:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800807a:	2202      	movs	r2, #2
 800807c:	4013      	ands	r3, r2
 800807e:	d0f1      	beq.n	8008064 <HAL_RCC_OscConfig+0x24c>
 8008080:	e018      	b.n	80080b4 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8008082:	4b35      	ldr	r3, [pc, #212]	@ (8008158 <HAL_RCC_OscConfig+0x340>)
 8008084:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008086:	4b34      	ldr	r3, [pc, #208]	@ (8008158 <HAL_RCC_OscConfig+0x340>)
 8008088:	2101      	movs	r1, #1
 800808a:	438a      	bics	r2, r1
 800808c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800808e:	f7fc fd43 	bl	8004b18 <HAL_GetTick>
 8008092:	0003      	movs	r3, r0
 8008094:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8008096:	e008      	b.n	80080aa <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8008098:	f7fc fd3e 	bl	8004b18 <HAL_GetTick>
 800809c:	0002      	movs	r2, r0
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	1ad3      	subs	r3, r2, r3
 80080a2:	2b02      	cmp	r3, #2
 80080a4:	d901      	bls.n	80080aa <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 80080a6:	2303      	movs	r3, #3
 80080a8:	e0cf      	b.n	800824a <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80080aa:	4b2b      	ldr	r3, [pc, #172]	@ (8008158 <HAL_RCC_OscConfig+0x340>)
 80080ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80080ae:	2202      	movs	r2, #2
 80080b0:	4013      	ands	r3, r2
 80080b2:	d1f1      	bne.n	8008098 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	2204      	movs	r2, #4
 80080ba:	4013      	ands	r3, r2
 80080bc:	d100      	bne.n	80080c0 <HAL_RCC_OscConfig+0x2a8>
 80080be:	e084      	b.n	80081ca <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80080c0:	230f      	movs	r3, #15
 80080c2:	18fb      	adds	r3, r7, r3
 80080c4:	2200      	movs	r2, #0
 80080c6:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80080c8:	4b23      	ldr	r3, [pc, #140]	@ (8008158 <HAL_RCC_OscConfig+0x340>)
 80080ca:	689b      	ldr	r3, [r3, #8]
 80080cc:	2238      	movs	r2, #56	@ 0x38
 80080ce:	4013      	ands	r3, r2
 80080d0:	2b20      	cmp	r3, #32
 80080d2:	d106      	bne.n	80080e2 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d000      	beq.n	80080de <HAL_RCC_OscConfig+0x2c6>
 80080dc:	e075      	b.n	80081ca <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 80080de:	2301      	movs	r3, #1
 80080e0:	e0b3      	b.n	800824a <HAL_RCC_OscConfig+0x432>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	689b      	ldr	r3, [r3, #8]
 80080e6:	2b01      	cmp	r3, #1
 80080e8:	d106      	bne.n	80080f8 <HAL_RCC_OscConfig+0x2e0>
 80080ea:	4b1b      	ldr	r3, [pc, #108]	@ (8008158 <HAL_RCC_OscConfig+0x340>)
 80080ec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80080ee:	4b1a      	ldr	r3, [pc, #104]	@ (8008158 <HAL_RCC_OscConfig+0x340>)
 80080f0:	2101      	movs	r1, #1
 80080f2:	430a      	orrs	r2, r1
 80080f4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80080f6:	e01c      	b.n	8008132 <HAL_RCC_OscConfig+0x31a>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	689b      	ldr	r3, [r3, #8]
 80080fc:	2b05      	cmp	r3, #5
 80080fe:	d10c      	bne.n	800811a <HAL_RCC_OscConfig+0x302>
 8008100:	4b15      	ldr	r3, [pc, #84]	@ (8008158 <HAL_RCC_OscConfig+0x340>)
 8008102:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008104:	4b14      	ldr	r3, [pc, #80]	@ (8008158 <HAL_RCC_OscConfig+0x340>)
 8008106:	2104      	movs	r1, #4
 8008108:	430a      	orrs	r2, r1
 800810a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800810c:	4b12      	ldr	r3, [pc, #72]	@ (8008158 <HAL_RCC_OscConfig+0x340>)
 800810e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008110:	4b11      	ldr	r3, [pc, #68]	@ (8008158 <HAL_RCC_OscConfig+0x340>)
 8008112:	2101      	movs	r1, #1
 8008114:	430a      	orrs	r2, r1
 8008116:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008118:	e00b      	b.n	8008132 <HAL_RCC_OscConfig+0x31a>
 800811a:	4b0f      	ldr	r3, [pc, #60]	@ (8008158 <HAL_RCC_OscConfig+0x340>)
 800811c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800811e:	4b0e      	ldr	r3, [pc, #56]	@ (8008158 <HAL_RCC_OscConfig+0x340>)
 8008120:	2101      	movs	r1, #1
 8008122:	438a      	bics	r2, r1
 8008124:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008126:	4b0c      	ldr	r3, [pc, #48]	@ (8008158 <HAL_RCC_OscConfig+0x340>)
 8008128:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800812a:	4b0b      	ldr	r3, [pc, #44]	@ (8008158 <HAL_RCC_OscConfig+0x340>)
 800812c:	2104      	movs	r1, #4
 800812e:	438a      	bics	r2, r1
 8008130:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	689b      	ldr	r3, [r3, #8]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d028      	beq.n	800818c <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800813a:	f7fc fced 	bl	8004b18 <HAL_GetTick>
 800813e:	0003      	movs	r3, r0
 8008140:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8008142:	e01d      	b.n	8008180 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008144:	f7fc fce8 	bl	8004b18 <HAL_GetTick>
 8008148:	0002      	movs	r2, r0
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	1ad3      	subs	r3, r2, r3
 800814e:	4a0b      	ldr	r2, [pc, #44]	@ (800817c <HAL_RCC_OscConfig+0x364>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d915      	bls.n	8008180 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8008154:	2303      	movs	r3, #3
 8008156:	e078      	b.n	800824a <HAL_RCC_OscConfig+0x432>
 8008158:	40021000 	.word	0x40021000
 800815c:	fffeffff 	.word	0xfffeffff
 8008160:	fffbffff 	.word	0xfffbffff
 8008164:	ffff80ff 	.word	0xffff80ff
 8008168:	ffffc7ff 	.word	0xffffc7ff
 800816c:	02dc6c00 	.word	0x02dc6c00
 8008170:	200000b8 	.word	0x200000b8
 8008174:	200000bc 	.word	0x200000bc
 8008178:	fffffeff 	.word	0xfffffeff
 800817c:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8008180:	4b34      	ldr	r3, [pc, #208]	@ (8008254 <HAL_RCC_OscConfig+0x43c>)
 8008182:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008184:	2202      	movs	r2, #2
 8008186:	4013      	ands	r3, r2
 8008188:	d0dc      	beq.n	8008144 <HAL_RCC_OscConfig+0x32c>
 800818a:	e013      	b.n	80081b4 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800818c:	f7fc fcc4 	bl	8004b18 <HAL_GetTick>
 8008190:	0003      	movs	r3, r0
 8008192:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8008194:	e009      	b.n	80081aa <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008196:	f7fc fcbf 	bl	8004b18 <HAL_GetTick>
 800819a:	0002      	movs	r2, r0
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	1ad3      	subs	r3, r2, r3
 80081a0:	4a2d      	ldr	r2, [pc, #180]	@ (8008258 <HAL_RCC_OscConfig+0x440>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d901      	bls.n	80081aa <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 80081a6:	2303      	movs	r3, #3
 80081a8:	e04f      	b.n	800824a <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80081aa:	4b2a      	ldr	r3, [pc, #168]	@ (8008254 <HAL_RCC_OscConfig+0x43c>)
 80081ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80081ae:	2202      	movs	r2, #2
 80081b0:	4013      	ands	r3, r2
 80081b2:	d1f0      	bne.n	8008196 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80081b4:	230f      	movs	r3, #15
 80081b6:	18fb      	adds	r3, r7, r3
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	d105      	bne.n	80081ca <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80081be:	4b25      	ldr	r3, [pc, #148]	@ (8008254 <HAL_RCC_OscConfig+0x43c>)
 80081c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80081c2:	4b24      	ldr	r3, [pc, #144]	@ (8008254 <HAL_RCC_OscConfig+0x43c>)
 80081c4:	4925      	ldr	r1, [pc, #148]	@ (800825c <HAL_RCC_OscConfig+0x444>)
 80081c6:	400a      	ands	r2, r1
 80081c8:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_CR_HSIUSB48ON)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	2210      	movs	r2, #16
 80081d0:	4013      	ands	r3, r2
 80081d2:	d039      	beq.n	8008248 <HAL_RCC_OscConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	69db      	ldr	r3, [r3, #28]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d01b      	beq.n	8008214 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80081dc:	4b1d      	ldr	r3, [pc, #116]	@ (8008254 <HAL_RCC_OscConfig+0x43c>)
 80081de:	681a      	ldr	r2, [r3, #0]
 80081e0:	4b1c      	ldr	r3, [pc, #112]	@ (8008254 <HAL_RCC_OscConfig+0x43c>)
 80081e2:	2180      	movs	r1, #128	@ 0x80
 80081e4:	03c9      	lsls	r1, r1, #15
 80081e6:	430a      	orrs	r2, r1
 80081e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081ea:	f7fc fc95 	bl	8004b18 <HAL_GetTick>
 80081ee:	0003      	movs	r3, r0
 80081f0:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 80081f2:	e008      	b.n	8008206 <HAL_RCC_OscConfig+0x3ee>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80081f4:	f7fc fc90 	bl	8004b18 <HAL_GetTick>
 80081f8:	0002      	movs	r2, r0
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	1ad3      	subs	r3, r2, r3
 80081fe:	2b02      	cmp	r3, #2
 8008200:	d901      	bls.n	8008206 <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 8008202:	2303      	movs	r3, #3
 8008204:	e021      	b.n	800824a <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 8008206:	4b13      	ldr	r3, [pc, #76]	@ (8008254 <HAL_RCC_OscConfig+0x43c>)
 8008208:	681a      	ldr	r2, [r3, #0]
 800820a:	2380      	movs	r3, #128	@ 0x80
 800820c:	041b      	lsls	r3, r3, #16
 800820e:	4013      	ands	r3, r2
 8008210:	d0f0      	beq.n	80081f4 <HAL_RCC_OscConfig+0x3dc>
 8008212:	e019      	b.n	8008248 <HAL_RCC_OscConfig+0x430>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008214:	4b0f      	ldr	r3, [pc, #60]	@ (8008254 <HAL_RCC_OscConfig+0x43c>)
 8008216:	681a      	ldr	r2, [r3, #0]
 8008218:	4b0e      	ldr	r3, [pc, #56]	@ (8008254 <HAL_RCC_OscConfig+0x43c>)
 800821a:	4911      	ldr	r1, [pc, #68]	@ (8008260 <HAL_RCC_OscConfig+0x448>)
 800821c:	400a      	ands	r2, r1
 800821e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008220:	f7fc fc7a 	bl	8004b18 <HAL_GetTick>
 8008224:	0003      	movs	r3, r0
 8008226:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 8008228:	e008      	b.n	800823c <HAL_RCC_OscConfig+0x424>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800822a:	f7fc fc75 	bl	8004b18 <HAL_GetTick>
 800822e:	0002      	movs	r2, r0
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	1ad3      	subs	r3, r2, r3
 8008234:	2b02      	cmp	r3, #2
 8008236:	d901      	bls.n	800823c <HAL_RCC_OscConfig+0x424>
        {
          return HAL_TIMEOUT;
 8008238:	2303      	movs	r3, #3
 800823a:	e006      	b.n	800824a <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 800823c:	4b05      	ldr	r3, [pc, #20]	@ (8008254 <HAL_RCC_OscConfig+0x43c>)
 800823e:	681a      	ldr	r2, [r3, #0]
 8008240:	2380      	movs	r3, #128	@ 0x80
 8008242:	041b      	lsls	r3, r3, #16
 8008244:	4013      	ands	r3, r2
 8008246:	d1f0      	bne.n	800822a <HAL_RCC_OscConfig+0x412>
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8008248:	2300      	movs	r3, #0
}
 800824a:	0018      	movs	r0, r3
 800824c:	46bd      	mov	sp, r7
 800824e:	b006      	add	sp, #24
 8008250:	bd80      	pop	{r7, pc}
 8008252:	46c0      	nop			@ (mov r8, r8)
 8008254:	40021000 	.word	0x40021000
 8008258:	00001388 	.word	0x00001388
 800825c:	efffffff 	.word	0xefffffff
 8008260:	ffbfffff 	.word	0xffbfffff

08008264 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b084      	sub	sp, #16
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
 800826c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d101      	bne.n	8008278 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008274:	2301      	movs	r3, #1
 8008276:	e0f6      	b.n	8008466 <HAL_RCC_ClockConfig+0x202>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008278:	4b7d      	ldr	r3, [pc, #500]	@ (8008470 <HAL_RCC_ClockConfig+0x20c>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	2207      	movs	r2, #7
 800827e:	4013      	ands	r3, r2
 8008280:	683a      	ldr	r2, [r7, #0]
 8008282:	429a      	cmp	r2, r3
 8008284:	d91e      	bls.n	80082c4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008286:	4b7a      	ldr	r3, [pc, #488]	@ (8008470 <HAL_RCC_ClockConfig+0x20c>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	2207      	movs	r2, #7
 800828c:	4393      	bics	r3, r2
 800828e:	0019      	movs	r1, r3
 8008290:	4b77      	ldr	r3, [pc, #476]	@ (8008470 <HAL_RCC_ClockConfig+0x20c>)
 8008292:	683a      	ldr	r2, [r7, #0]
 8008294:	430a      	orrs	r2, r1
 8008296:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008298:	f7fc fc3e 	bl	8004b18 <HAL_GetTick>
 800829c:	0003      	movs	r3, r0
 800829e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80082a0:	e009      	b.n	80082b6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80082a2:	f7fc fc39 	bl	8004b18 <HAL_GetTick>
 80082a6:	0002      	movs	r2, r0
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	1ad3      	subs	r3, r2, r3
 80082ac:	4a71      	ldr	r2, [pc, #452]	@ (8008474 <HAL_RCC_ClockConfig+0x210>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d901      	bls.n	80082b6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80082b2:	2303      	movs	r3, #3
 80082b4:	e0d7      	b.n	8008466 <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80082b6:	4b6e      	ldr	r3, [pc, #440]	@ (8008470 <HAL_RCC_ClockConfig+0x20c>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	2207      	movs	r2, #7
 80082bc:	4013      	ands	r3, r2
 80082be:	683a      	ldr	r2, [r7, #0]
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d1ee      	bne.n	80082a2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	2202      	movs	r2, #2
 80082ca:	4013      	ands	r3, r2
 80082cc:	d017      	beq.n	80082fe <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	2204      	movs	r2, #4
 80082d4:	4013      	ands	r3, r2
 80082d6:	d008      	beq.n	80082ea <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80082d8:	4b67      	ldr	r3, [pc, #412]	@ (8008478 <HAL_RCC_ClockConfig+0x214>)
 80082da:	689b      	ldr	r3, [r3, #8]
 80082dc:	4a67      	ldr	r2, [pc, #412]	@ (800847c <HAL_RCC_ClockConfig+0x218>)
 80082de:	401a      	ands	r2, r3
 80082e0:	4b65      	ldr	r3, [pc, #404]	@ (8008478 <HAL_RCC_ClockConfig+0x214>)
 80082e2:	21b0      	movs	r1, #176	@ 0xb0
 80082e4:	0109      	lsls	r1, r1, #4
 80082e6:	430a      	orrs	r2, r1
 80082e8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80082ea:	4b63      	ldr	r3, [pc, #396]	@ (8008478 <HAL_RCC_ClockConfig+0x214>)
 80082ec:	689b      	ldr	r3, [r3, #8]
 80082ee:	4a64      	ldr	r2, [pc, #400]	@ (8008480 <HAL_RCC_ClockConfig+0x21c>)
 80082f0:	4013      	ands	r3, r2
 80082f2:	0019      	movs	r1, r3
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	68da      	ldr	r2, [r3, #12]
 80082f8:	4b5f      	ldr	r3, [pc, #380]	@ (8008478 <HAL_RCC_ClockConfig+0x214>)
 80082fa:	430a      	orrs	r2, r1
 80082fc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	2201      	movs	r2, #1
 8008304:	4013      	ands	r3, r2
 8008306:	d100      	bne.n	800830a <HAL_RCC_ClockConfig+0xa6>
 8008308:	e061      	b.n	80083ce <HAL_RCC_ClockConfig+0x16a>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 800830a:	4b5b      	ldr	r3, [pc, #364]	@ (8008478 <HAL_RCC_ClockConfig+0x214>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	221c      	movs	r2, #28
 8008310:	4393      	bics	r3, r2
 8008312:	0019      	movs	r1, r3
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	689a      	ldr	r2, [r3, #8]
 8008318:	4b57      	ldr	r3, [pc, #348]	@ (8008478 <HAL_RCC_ClockConfig+0x214>)
 800831a:	430a      	orrs	r2, r1
 800831c:	601a      	str	r2, [r3, #0]
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	2b01      	cmp	r3, #1
 8008324:	d107      	bne.n	8008336 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008326:	4b54      	ldr	r3, [pc, #336]	@ (8008478 <HAL_RCC_ClockConfig+0x214>)
 8008328:	681a      	ldr	r2, [r3, #0]
 800832a:	2380      	movs	r3, #128	@ 0x80
 800832c:	029b      	lsls	r3, r3, #10
 800832e:	4013      	ands	r3, r2
 8008330:	d12b      	bne.n	800838a <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8008332:	2301      	movs	r3, #1
 8008334:	e097      	b.n	8008466 <HAL_RCC_ClockConfig+0x202>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	685b      	ldr	r3, [r3, #4]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d107      	bne.n	800834e <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800833e:	4b4e      	ldr	r3, [pc, #312]	@ (8008478 <HAL_RCC_ClockConfig+0x214>)
 8008340:	681a      	ldr	r2, [r3, #0]
 8008342:	2380      	movs	r3, #128	@ 0x80
 8008344:	00db      	lsls	r3, r3, #3
 8008346:	4013      	ands	r3, r2
 8008348:	d11f      	bne.n	800838a <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 800834a:	2301      	movs	r3, #1
 800834c:	e08b      	b.n	8008466 <HAL_RCC_ClockConfig+0x202>
      }
    }
#if defined(RCC_HSI48_SUPPORT)
    /* HSIUSB48 is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSIUSB48)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	685b      	ldr	r3, [r3, #4]
 8008352:	2b02      	cmp	r3, #2
 8008354:	d107      	bne.n	8008366 <HAL_RCC_ClockConfig+0x102>
    {
      /* Check the HSIUSB48 ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 8008356:	4b48      	ldr	r3, [pc, #288]	@ (8008478 <HAL_RCC_ClockConfig+0x214>)
 8008358:	681a      	ldr	r2, [r3, #0]
 800835a:	2380      	movs	r3, #128	@ 0x80
 800835c:	041b      	lsls	r3, r3, #16
 800835e:	4013      	ands	r3, r2
 8008360:	d113      	bne.n	800838a <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8008362:	2301      	movs	r3, #1
 8008364:	e07f      	b.n	8008466 <HAL_RCC_ClockConfig+0x202>
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	2b03      	cmp	r3, #3
 800836c:	d106      	bne.n	800837c <HAL_RCC_ClockConfig+0x118>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800836e:	4b42      	ldr	r3, [pc, #264]	@ (8008478 <HAL_RCC_ClockConfig+0x214>)
 8008370:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008372:	2202      	movs	r2, #2
 8008374:	4013      	ands	r3, r2
 8008376:	d108      	bne.n	800838a <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8008378:	2301      	movs	r3, #1
 800837a:	e074      	b.n	8008466 <HAL_RCC_ClockConfig+0x202>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800837c:	4b3e      	ldr	r3, [pc, #248]	@ (8008478 <HAL_RCC_ClockConfig+0x214>)
 800837e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008380:	2202      	movs	r2, #2
 8008382:	4013      	ands	r3, r2
 8008384:	d101      	bne.n	800838a <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8008386:	2301      	movs	r3, #1
 8008388:	e06d      	b.n	8008466 <HAL_RCC_ClockConfig+0x202>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800838a:	4b3b      	ldr	r3, [pc, #236]	@ (8008478 <HAL_RCC_ClockConfig+0x214>)
 800838c:	689b      	ldr	r3, [r3, #8]
 800838e:	2207      	movs	r2, #7
 8008390:	4393      	bics	r3, r2
 8008392:	0019      	movs	r1, r3
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	685a      	ldr	r2, [r3, #4]
 8008398:	4b37      	ldr	r3, [pc, #220]	@ (8008478 <HAL_RCC_ClockConfig+0x214>)
 800839a:	430a      	orrs	r2, r1
 800839c:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800839e:	f7fc fbbb 	bl	8004b18 <HAL_GetTick>
 80083a2:	0003      	movs	r3, r0
 80083a4:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083a6:	e009      	b.n	80083bc <HAL_RCC_ClockConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80083a8:	f7fc fbb6 	bl	8004b18 <HAL_GetTick>
 80083ac:	0002      	movs	r2, r0
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	1ad3      	subs	r3, r2, r3
 80083b2:	4a30      	ldr	r2, [pc, #192]	@ (8008474 <HAL_RCC_ClockConfig+0x210>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d901      	bls.n	80083bc <HAL_RCC_ClockConfig+0x158>
      {
        return HAL_TIMEOUT;
 80083b8:	2303      	movs	r3, #3
 80083ba:	e054      	b.n	8008466 <HAL_RCC_ClockConfig+0x202>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083bc:	4b2e      	ldr	r3, [pc, #184]	@ (8008478 <HAL_RCC_ClockConfig+0x214>)
 80083be:	689b      	ldr	r3, [r3, #8]
 80083c0:	2238      	movs	r2, #56	@ 0x38
 80083c2:	401a      	ands	r2, r3
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	00db      	lsls	r3, r3, #3
 80083ca:	429a      	cmp	r2, r3
 80083cc:	d1ec      	bne.n	80083a8 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80083ce:	4b28      	ldr	r3, [pc, #160]	@ (8008470 <HAL_RCC_ClockConfig+0x20c>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	2207      	movs	r2, #7
 80083d4:	4013      	ands	r3, r2
 80083d6:	683a      	ldr	r2, [r7, #0]
 80083d8:	429a      	cmp	r2, r3
 80083da:	d21e      	bcs.n	800841a <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083dc:	4b24      	ldr	r3, [pc, #144]	@ (8008470 <HAL_RCC_ClockConfig+0x20c>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	2207      	movs	r2, #7
 80083e2:	4393      	bics	r3, r2
 80083e4:	0019      	movs	r1, r3
 80083e6:	4b22      	ldr	r3, [pc, #136]	@ (8008470 <HAL_RCC_ClockConfig+0x20c>)
 80083e8:	683a      	ldr	r2, [r7, #0]
 80083ea:	430a      	orrs	r2, r1
 80083ec:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80083ee:	f7fc fb93 	bl	8004b18 <HAL_GetTick>
 80083f2:	0003      	movs	r3, r0
 80083f4:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80083f6:	e009      	b.n	800840c <HAL_RCC_ClockConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80083f8:	f7fc fb8e 	bl	8004b18 <HAL_GetTick>
 80083fc:	0002      	movs	r2, r0
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	1ad3      	subs	r3, r2, r3
 8008402:	4a1c      	ldr	r2, [pc, #112]	@ (8008474 <HAL_RCC_ClockConfig+0x210>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d901      	bls.n	800840c <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_TIMEOUT;
 8008408:	2303      	movs	r3, #3
 800840a:	e02c      	b.n	8008466 <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800840c:	4b18      	ldr	r3, [pc, #96]	@ (8008470 <HAL_RCC_ClockConfig+0x20c>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	2207      	movs	r2, #7
 8008412:	4013      	ands	r3, r2
 8008414:	683a      	ldr	r2, [r7, #0]
 8008416:	429a      	cmp	r2, r3
 8008418:	d1ee      	bne.n	80083f8 <HAL_RCC_ClockConfig+0x194>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	2204      	movs	r2, #4
 8008420:	4013      	ands	r3, r2
 8008422:	d009      	beq.n	8008438 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8008424:	4b14      	ldr	r3, [pc, #80]	@ (8008478 <HAL_RCC_ClockConfig+0x214>)
 8008426:	689b      	ldr	r3, [r3, #8]
 8008428:	4a16      	ldr	r2, [pc, #88]	@ (8008484 <HAL_RCC_ClockConfig+0x220>)
 800842a:	4013      	ands	r3, r2
 800842c:	0019      	movs	r1, r3
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	691a      	ldr	r2, [r3, #16]
 8008432:	4b11      	ldr	r3, [pc, #68]	@ (8008478 <HAL_RCC_ClockConfig+0x214>)
 8008434:	430a      	orrs	r2, r1
 8008436:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8008438:	f000 f82c 	bl	8008494 <HAL_RCC_GetSysClockFreq>
 800843c:	0001      	movs	r1, r0
 800843e:	4b0e      	ldr	r3, [pc, #56]	@ (8008478 <HAL_RCC_ClockConfig+0x214>)
 8008440:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8008442:	0a1b      	lsrs	r3, r3, #8
 8008444:	220f      	movs	r2, #15
 8008446:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8008448:	4b0f      	ldr	r3, [pc, #60]	@ (8008488 <HAL_RCC_ClockConfig+0x224>)
 800844a:	0092      	lsls	r2, r2, #2
 800844c:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800844e:	221f      	movs	r2, #31
 8008450:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8008452:	000a      	movs	r2, r1
 8008454:	40da      	lsrs	r2, r3
 8008456:	4b0d      	ldr	r3, [pc, #52]	@ (800848c <HAL_RCC_ClockConfig+0x228>)
 8008458:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800845a:	4b0d      	ldr	r3, [pc, #52]	@ (8008490 <HAL_RCC_ClockConfig+0x22c>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	0018      	movs	r0, r3
 8008460:	f7fc fafe 	bl	8004a60 <HAL_InitTick>
 8008464:	0003      	movs	r3, r0
}
 8008466:	0018      	movs	r0, r3
 8008468:	46bd      	mov	sp, r7
 800846a:	b004      	add	sp, #16
 800846c:	bd80      	pop	{r7, pc}
 800846e:	46c0      	nop			@ (mov r8, r8)
 8008470:	40022000 	.word	0x40022000
 8008474:	00001388 	.word	0x00001388
 8008478:	40021000 	.word	0x40021000
 800847c:	ffff84ff 	.word	0xffff84ff
 8008480:	fffff0ff 	.word	0xfffff0ff
 8008484:	ffff8fff 	.word	0xffff8fff
 8008488:	0800c4d0 	.word	0x0800c4d0
 800848c:	200000b8 	.word	0x200000b8
 8008490:	200000bc 	.word	0x200000bc

08008494 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b084      	sub	sp, #16
 8008498:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 800849a:	4b27      	ldr	r3, [pc, #156]	@ (8008538 <HAL_RCC_GetSysClockFreq+0xa4>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	089b      	lsrs	r3, r3, #2
 80084a0:	2207      	movs	r2, #7
 80084a2:	4013      	ands	r3, r2
 80084a4:	3301      	adds	r3, #1
 80084a6:	60bb      	str	r3, [r7, #8]
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80084a8:	4b23      	ldr	r3, [pc, #140]	@ (8008538 <HAL_RCC_GetSysClockFreq+0xa4>)
 80084aa:	689b      	ldr	r3, [r3, #8]
 80084ac:	2238      	movs	r2, #56	@ 0x38
 80084ae:	4013      	ands	r3, r2
 80084b0:	d10f      	bne.n	80084d2 <HAL_RCC_GetSysClockFreq+0x3e>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80084b2:	4b21      	ldr	r3, [pc, #132]	@ (8008538 <HAL_RCC_GetSysClockFreq+0xa4>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	0adb      	lsrs	r3, r3, #11
 80084b8:	2207      	movs	r2, #7
 80084ba:	4013      	ands	r3, r2
 80084bc:	2201      	movs	r2, #1
 80084be:	409a      	lsls	r2, r3
 80084c0:	0013      	movs	r3, r2
 80084c2:	607b      	str	r3, [r7, #4]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80084c4:	6879      	ldr	r1, [r7, #4]
 80084c6:	481d      	ldr	r0, [pc, #116]	@ (800853c <HAL_RCC_GetSysClockFreq+0xa8>)
 80084c8:	f7f7 fe1e 	bl	8000108 <__udivsi3>
 80084cc:	0003      	movs	r3, r0
 80084ce:	60fb      	str	r3, [r7, #12]
 80084d0:	e027      	b.n	8008522 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80084d2:	4b19      	ldr	r3, [pc, #100]	@ (8008538 <HAL_RCC_GetSysClockFreq+0xa4>)
 80084d4:	689b      	ldr	r3, [r3, #8]
 80084d6:	2238      	movs	r2, #56	@ 0x38
 80084d8:	4013      	ands	r3, r2
 80084da:	2b08      	cmp	r3, #8
 80084dc:	d102      	bne.n	80084e4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80084de:	4b18      	ldr	r3, [pc, #96]	@ (8008540 <HAL_RCC_GetSysClockFreq+0xac>)
 80084e0:	60fb      	str	r3, [r7, #12]
 80084e2:	e01e      	b.n	8008522 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80084e4:	4b14      	ldr	r3, [pc, #80]	@ (8008538 <HAL_RCC_GetSysClockFreq+0xa4>)
 80084e6:	689b      	ldr	r3, [r3, #8]
 80084e8:	2238      	movs	r2, #56	@ 0x38
 80084ea:	4013      	ands	r3, r2
 80084ec:	2b20      	cmp	r3, #32
 80084ee:	d103      	bne.n	80084f8 <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80084f0:	2380      	movs	r3, #128	@ 0x80
 80084f2:	021b      	lsls	r3, r3, #8
 80084f4:	60fb      	str	r3, [r7, #12]
 80084f6:	e014      	b.n	8008522 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80084f8:	4b0f      	ldr	r3, [pc, #60]	@ (8008538 <HAL_RCC_GetSysClockFreq+0xa4>)
 80084fa:	689b      	ldr	r3, [r3, #8]
 80084fc:	2238      	movs	r2, #56	@ 0x38
 80084fe:	4013      	ands	r3, r2
 8008500:	2b18      	cmp	r3, #24
 8008502:	d103      	bne.n	800850c <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8008504:	23fa      	movs	r3, #250	@ 0xfa
 8008506:	01db      	lsls	r3, r3, #7
 8008508:	60fb      	str	r3, [r7, #12]
 800850a:	e00a      	b.n	8008522 <HAL_RCC_GetSysClockFreq+0x8e>
  }
#if defined(RCC_HSI48_SUPPORT)
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI48)
 800850c:	4b0a      	ldr	r3, [pc, #40]	@ (8008538 <HAL_RCC_GetSysClockFreq+0xa4>)
 800850e:	689b      	ldr	r3, [r3, #8]
 8008510:	2238      	movs	r2, #56	@ 0x38
 8008512:	4013      	ands	r3, r2
 8008514:	2b10      	cmp	r3, #16
 8008516:	d102      	bne.n	800851e <HAL_RCC_GetSysClockFreq+0x8a>
  {
    /* HSI48 used as system clock source */
    sysclockfreq = HSI48_VALUE;
 8008518:	4b08      	ldr	r3, [pc, #32]	@ (800853c <HAL_RCC_GetSysClockFreq+0xa8>)
 800851a:	60fb      	str	r3, [r7, #12]
 800851c:	e001      	b.n	8008522 <HAL_RCC_GetSysClockFreq+0x8e>
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 800851e:	2300      	movs	r3, #0
 8008520:	60fb      	str	r3, [r7, #12]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 8008522:	68b9      	ldr	r1, [r7, #8]
 8008524:	68f8      	ldr	r0, [r7, #12]
 8008526:	f7f7 fdef 	bl	8000108 <__udivsi3>
 800852a:	0003      	movs	r3, r0
 800852c:	60fb      	str	r3, [r7, #12]
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 800852e:	68fb      	ldr	r3, [r7, #12]
}
 8008530:	0018      	movs	r0, r3
 8008532:	46bd      	mov	sp, r7
 8008534:	b004      	add	sp, #16
 8008536:	bd80      	pop	{r7, pc}
 8008538:	40021000 	.word	0x40021000
 800853c:	02dc6c00 	.word	0x02dc6c00
 8008540:	007a1200 	.word	0x007a1200

08008544 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8008548:	f7ff ffa4 	bl	8008494 <HAL_RCC_GetSysClockFreq>
 800854c:	0001      	movs	r1, r0
 800854e:	4b09      	ldr	r3, [pc, #36]	@ (8008574 <HAL_RCC_GetHCLKFreq+0x30>)
 8008550:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8008552:	0a1b      	lsrs	r3, r3, #8
 8008554:	220f      	movs	r2, #15
 8008556:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8008558:	4b07      	ldr	r3, [pc, #28]	@ (8008578 <HAL_RCC_GetHCLKFreq+0x34>)
 800855a:	0092      	lsls	r2, r2, #2
 800855c:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800855e:	221f      	movs	r2, #31
 8008560:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8008562:	000a      	movs	r2, r1
 8008564:	40da      	lsrs	r2, r3
 8008566:	4b05      	ldr	r3, [pc, #20]	@ (800857c <HAL_RCC_GetHCLKFreq+0x38>)
 8008568:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 800856a:	4b04      	ldr	r3, [pc, #16]	@ (800857c <HAL_RCC_GetHCLKFreq+0x38>)
 800856c:	681b      	ldr	r3, [r3, #0]
}
 800856e:	0018      	movs	r0, r3
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}
 8008574:	40021000 	.word	0x40021000
 8008578:	0800c4d0 	.word	0x0800c4d0
 800857c:	200000b8 	.word	0x200000b8

08008580 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8008584:	f7ff ffde 	bl	8008544 <HAL_RCC_GetHCLKFreq>
 8008588:	0001      	movs	r1, r0
 800858a:	4b07      	ldr	r3, [pc, #28]	@ (80085a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800858c:	689b      	ldr	r3, [r3, #8]
 800858e:	0b1b      	lsrs	r3, r3, #12
 8008590:	2207      	movs	r2, #7
 8008592:	401a      	ands	r2, r3
 8008594:	4b05      	ldr	r3, [pc, #20]	@ (80085ac <HAL_RCC_GetPCLK1Freq+0x2c>)
 8008596:	0092      	lsls	r2, r2, #2
 8008598:	58d3      	ldr	r3, [r2, r3]
 800859a:	221f      	movs	r2, #31
 800859c:	4013      	ands	r3, r2
 800859e:	40d9      	lsrs	r1, r3
 80085a0:	000b      	movs	r3, r1
}
 80085a2:	0018      	movs	r0, r3
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}
 80085a8:	40021000 	.word	0x40021000
 80085ac:	0800c510 	.word	0x0800c510

080085b0 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b086      	sub	sp, #24
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80085b8:	2313      	movs	r3, #19
 80085ba:	18fb      	adds	r3, r7, r3
 80085bc:	2200      	movs	r2, #0
 80085be:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80085c0:	2312      	movs	r3, #18
 80085c2:	18fb      	adds	r3, r7, r3
 80085c4:	2200      	movs	r2, #0
 80085c6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	2240      	movs	r2, #64	@ 0x40
 80085ce:	4013      	ands	r3, r2
 80085d0:	d100      	bne.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x24>
 80085d2:	e079      	b.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 80085d4:	2011      	movs	r0, #17
 80085d6:	183b      	adds	r3, r7, r0
 80085d8:	2200      	movs	r2, #0
 80085da:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80085dc:	4b6a      	ldr	r3, [pc, #424]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80085de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80085e0:	2380      	movs	r3, #128	@ 0x80
 80085e2:	055b      	lsls	r3, r3, #21
 80085e4:	4013      	ands	r3, r2
 80085e6:	d110      	bne.n	800860a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80085e8:	4b67      	ldr	r3, [pc, #412]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80085ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80085ec:	4b66      	ldr	r3, [pc, #408]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80085ee:	2180      	movs	r1, #128	@ 0x80
 80085f0:	0549      	lsls	r1, r1, #21
 80085f2:	430a      	orrs	r2, r1
 80085f4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80085f6:	4b64      	ldr	r3, [pc, #400]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80085f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80085fa:	2380      	movs	r3, #128	@ 0x80
 80085fc:	055b      	lsls	r3, r3, #21
 80085fe:	4013      	ands	r3, r2
 8008600:	60bb      	str	r3, [r7, #8]
 8008602:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008604:	183b      	adds	r3, r7, r0
 8008606:	2201      	movs	r2, #1
 8008608:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 800860a:	4b5f      	ldr	r3, [pc, #380]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800860c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800860e:	23c0      	movs	r3, #192	@ 0xc0
 8008610:	009b      	lsls	r3, r3, #2
 8008612:	4013      	ands	r3, r2
 8008614:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d019      	beq.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	69db      	ldr	r3, [r3, #28]
 8008620:	697a      	ldr	r2, [r7, #20]
 8008622:	429a      	cmp	r2, r3
 8008624:	d014      	beq.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8008626:	4b58      	ldr	r3, [pc, #352]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008628:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800862a:	4a58      	ldr	r2, [pc, #352]	@ (800878c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800862c:	4013      	ands	r3, r2
 800862e:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008630:	4b55      	ldr	r3, [pc, #340]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008632:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008634:	4b54      	ldr	r3, [pc, #336]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008636:	2180      	movs	r1, #128	@ 0x80
 8008638:	0249      	lsls	r1, r1, #9
 800863a:	430a      	orrs	r2, r1
 800863c:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 800863e:	4b52      	ldr	r3, [pc, #328]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008640:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008642:	4b51      	ldr	r3, [pc, #324]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008644:	4952      	ldr	r1, [pc, #328]	@ (8008790 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008646:	400a      	ands	r2, r1
 8008648:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 800864a:	4b4f      	ldr	r3, [pc, #316]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800864c:	697a      	ldr	r2, [r7, #20]
 800864e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	2201      	movs	r2, #1
 8008654:	4013      	ands	r3, r2
 8008656:	d016      	beq.n	8008686 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008658:	f7fc fa5e 	bl	8004b18 <HAL_GetTick>
 800865c:	0003      	movs	r3, r0
 800865e:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8008660:	e00c      	b.n	800867c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008662:	f7fc fa59 	bl	8004b18 <HAL_GetTick>
 8008666:	0002      	movs	r2, r0
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	1ad3      	subs	r3, r2, r3
 800866c:	4a49      	ldr	r2, [pc, #292]	@ (8008794 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d904      	bls.n	800867c <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 8008672:	2313      	movs	r3, #19
 8008674:	18fb      	adds	r3, r7, r3
 8008676:	2203      	movs	r2, #3
 8008678:	701a      	strb	r2, [r3, #0]
          break;
 800867a:	e004      	b.n	8008686 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800867c:	4b42      	ldr	r3, [pc, #264]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800867e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008680:	2202      	movs	r2, #2
 8008682:	4013      	ands	r3, r2
 8008684:	d0ed      	beq.n	8008662 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 8008686:	2313      	movs	r3, #19
 8008688:	18fb      	adds	r3, r7, r3
 800868a:	781b      	ldrb	r3, [r3, #0]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d10a      	bne.n	80086a6 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008690:	4b3d      	ldr	r3, [pc, #244]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008692:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008694:	4a3d      	ldr	r2, [pc, #244]	@ (800878c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8008696:	4013      	ands	r3, r2
 8008698:	0019      	movs	r1, r3
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	69da      	ldr	r2, [r3, #28]
 800869e:	4b3a      	ldr	r3, [pc, #232]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80086a0:	430a      	orrs	r2, r1
 80086a2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80086a4:	e005      	b.n	80086b2 <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086a6:	2312      	movs	r3, #18
 80086a8:	18fb      	adds	r3, r7, r3
 80086aa:	2213      	movs	r2, #19
 80086ac:	18ba      	adds	r2, r7, r2
 80086ae:	7812      	ldrb	r2, [r2, #0]
 80086b0:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80086b2:	2311      	movs	r3, #17
 80086b4:	18fb      	adds	r3, r7, r3
 80086b6:	781b      	ldrb	r3, [r3, #0]
 80086b8:	2b01      	cmp	r3, #1
 80086ba:	d105      	bne.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80086bc:	4b32      	ldr	r3, [pc, #200]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80086be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80086c0:	4b31      	ldr	r3, [pc, #196]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80086c2:	4935      	ldr	r1, [pc, #212]	@ (8008798 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80086c4:	400a      	ands	r2, r1
 80086c6:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	2201      	movs	r2, #1
 80086ce:	4013      	ands	r3, r2
 80086d0:	d009      	beq.n	80086e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80086d2:	4b2d      	ldr	r3, [pc, #180]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80086d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086d6:	2203      	movs	r2, #3
 80086d8:	4393      	bics	r3, r2
 80086da:	0019      	movs	r1, r3
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	689a      	ldr	r2, [r3, #8]
 80086e0:	4b29      	ldr	r3, [pc, #164]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80086e2:	430a      	orrs	r2, r1
 80086e4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	2202      	movs	r2, #2
 80086ec:	4013      	ands	r3, r2
 80086ee:	d009      	beq.n	8008704 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80086f0:	4b25      	ldr	r3, [pc, #148]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80086f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086f4:	4a29      	ldr	r2, [pc, #164]	@ (800879c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80086f6:	4013      	ands	r3, r2
 80086f8:	0019      	movs	r1, r3
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	68da      	ldr	r2, [r3, #12]
 80086fe:	4b22      	ldr	r3, [pc, #136]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008700:	430a      	orrs	r2, r1
 8008702:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	2220      	movs	r2, #32
 800870a:	4013      	ands	r3, r2
 800870c:	d008      	beq.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800870e:	4b1e      	ldr	r3, [pc, #120]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008710:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008712:	009b      	lsls	r3, r3, #2
 8008714:	0899      	lsrs	r1, r3, #2
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	699a      	ldr	r2, [r3, #24]
 800871a:	4b1b      	ldr	r3, [pc, #108]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800871c:	430a      	orrs	r2, r1
 800871e:	655a      	str	r2, [r3, #84]	@ 0x54

  }
#if defined (USB_DRD_FS)
  /*-------------------------- USB clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	2208      	movs	r2, #8
 8008726:	4013      	ands	r3, r2
 8008728:	d009      	beq.n	800873e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800872a:	4b17      	ldr	r3, [pc, #92]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800872c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800872e:	4a1c      	ldr	r2, [pc, #112]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8008730:	4013      	ands	r3, r2
 8008732:	0019      	movs	r1, r3
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	695a      	ldr	r2, [r3, #20]
 8008738:	4b13      	ldr	r3, [pc, #76]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800873a:	430a      	orrs	r2, r1
 800873c:	659a      	str	r2, [r3, #88]	@ 0x58

  }
#endif /* USB_DRD_FS */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	2204      	movs	r2, #4
 8008744:	4013      	ands	r3, r2
 8008746:	d009      	beq.n	800875c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8008748:	4b0f      	ldr	r3, [pc, #60]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800874a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800874c:	4a15      	ldr	r2, [pc, #84]	@ (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 800874e:	4013      	ands	r3, r2
 8008750:	0019      	movs	r1, r3
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	691a      	ldr	r2, [r3, #16]
 8008756:	4b0c      	ldr	r3, [pc, #48]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008758:	430a      	orrs	r2, r1
 800875a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	2280      	movs	r2, #128	@ 0x80
 8008762:	4013      	ands	r3, r2
 8008764:	d009      	beq.n	800877a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8008766:	4b08      	ldr	r3, [pc, #32]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	22e0      	movs	r2, #224	@ 0xe0
 800876c:	4393      	bics	r3, r2
 800876e:	0019      	movs	r1, r3
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	685a      	ldr	r2, [r3, #4]
 8008774:	4b04      	ldr	r3, [pc, #16]	@ (8008788 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008776:	430a      	orrs	r2, r1
 8008778:	601a      	str	r2, [r3, #0]
  }
  return status;
 800877a:	2312      	movs	r3, #18
 800877c:	18fb      	adds	r3, r7, r3
 800877e:	781b      	ldrb	r3, [r3, #0]
}
 8008780:	0018      	movs	r0, r3
 8008782:	46bd      	mov	sp, r7
 8008784:	b006      	add	sp, #24
 8008786:	bd80      	pop	{r7, pc}
 8008788:	40021000 	.word	0x40021000
 800878c:	fffffcff 	.word	0xfffffcff
 8008790:	fffeffff 	.word	0xfffeffff
 8008794:	00001388 	.word	0x00001388
 8008798:	efffffff 	.word	0xefffffff
 800879c:	ffffcfff 	.word	0xffffcfff
 80087a0:	ffffefff 	.word	0xffffefff
 80087a4:	ffff3fff 	.word	0xffff3fff

080087a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b084      	sub	sp, #16
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d101      	bne.n	80087ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80087b6:	2301      	movs	r3, #1
 80087b8:	e0a8      	b.n	800890c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d109      	bne.n	80087d6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	685a      	ldr	r2, [r3, #4]
 80087c6:	2382      	movs	r3, #130	@ 0x82
 80087c8:	005b      	lsls	r3, r3, #1
 80087ca:	429a      	cmp	r2, r3
 80087cc:	d009      	beq.n	80087e2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2200      	movs	r2, #0
 80087d2:	61da      	str	r2, [r3, #28]
 80087d4:	e005      	b.n	80087e2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2200      	movs	r2, #0
 80087da:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2200      	movs	r2, #0
 80087e0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2200      	movs	r2, #0
 80087e6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	225d      	movs	r2, #93	@ 0x5d
 80087ec:	5c9b      	ldrb	r3, [r3, r2]
 80087ee:	b2db      	uxtb	r3, r3
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d107      	bne.n	8008804 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	225c      	movs	r2, #92	@ 0x5c
 80087f8:	2100      	movs	r1, #0
 80087fa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	0018      	movs	r0, r3
 8008800:	f7fb fd3e 	bl	8004280 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	225d      	movs	r2, #93	@ 0x5d
 8008808:	2102      	movs	r1, #2
 800880a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	681a      	ldr	r2, [r3, #0]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	2140      	movs	r1, #64	@ 0x40
 8008818:	438a      	bics	r2, r1
 800881a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	68da      	ldr	r2, [r3, #12]
 8008820:	23e0      	movs	r3, #224	@ 0xe0
 8008822:	00db      	lsls	r3, r3, #3
 8008824:	429a      	cmp	r2, r3
 8008826:	d902      	bls.n	800882e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008828:	2300      	movs	r3, #0
 800882a:	60fb      	str	r3, [r7, #12]
 800882c:	e002      	b.n	8008834 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800882e:	2380      	movs	r3, #128	@ 0x80
 8008830:	015b      	lsls	r3, r3, #5
 8008832:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	68da      	ldr	r2, [r3, #12]
 8008838:	23f0      	movs	r3, #240	@ 0xf0
 800883a:	011b      	lsls	r3, r3, #4
 800883c:	429a      	cmp	r2, r3
 800883e:	d008      	beq.n	8008852 <HAL_SPI_Init+0xaa>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	68da      	ldr	r2, [r3, #12]
 8008844:	23e0      	movs	r3, #224	@ 0xe0
 8008846:	00db      	lsls	r3, r3, #3
 8008848:	429a      	cmp	r2, r3
 800884a:	d002      	beq.n	8008852 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2200      	movs	r2, #0
 8008850:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	685a      	ldr	r2, [r3, #4]
 8008856:	2382      	movs	r3, #130	@ 0x82
 8008858:	005b      	lsls	r3, r3, #1
 800885a:	401a      	ands	r2, r3
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6899      	ldr	r1, [r3, #8]
 8008860:	2384      	movs	r3, #132	@ 0x84
 8008862:	021b      	lsls	r3, r3, #8
 8008864:	400b      	ands	r3, r1
 8008866:	431a      	orrs	r2, r3
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	691b      	ldr	r3, [r3, #16]
 800886c:	2102      	movs	r1, #2
 800886e:	400b      	ands	r3, r1
 8008870:	431a      	orrs	r2, r3
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	695b      	ldr	r3, [r3, #20]
 8008876:	2101      	movs	r1, #1
 8008878:	400b      	ands	r3, r1
 800887a:	431a      	orrs	r2, r3
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6999      	ldr	r1, [r3, #24]
 8008880:	2380      	movs	r3, #128	@ 0x80
 8008882:	009b      	lsls	r3, r3, #2
 8008884:	400b      	ands	r3, r1
 8008886:	431a      	orrs	r2, r3
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	69db      	ldr	r3, [r3, #28]
 800888c:	2138      	movs	r1, #56	@ 0x38
 800888e:	400b      	ands	r3, r1
 8008890:	431a      	orrs	r2, r3
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6a1b      	ldr	r3, [r3, #32]
 8008896:	2180      	movs	r1, #128	@ 0x80
 8008898:	400b      	ands	r3, r1
 800889a:	431a      	orrs	r2, r3
 800889c:	0011      	movs	r1, r2
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80088a2:	2380      	movs	r3, #128	@ 0x80
 80088a4:	019b      	lsls	r3, r3, #6
 80088a6:	401a      	ands	r2, r3
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	430a      	orrs	r2, r1
 80088ae:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	699b      	ldr	r3, [r3, #24]
 80088b4:	0c1b      	lsrs	r3, r3, #16
 80088b6:	2204      	movs	r2, #4
 80088b8:	401a      	ands	r2, r3
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088be:	2110      	movs	r1, #16
 80088c0:	400b      	ands	r3, r1
 80088c2:	431a      	orrs	r2, r3
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088c8:	2108      	movs	r1, #8
 80088ca:	400b      	ands	r3, r1
 80088cc:	431a      	orrs	r2, r3
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	68d9      	ldr	r1, [r3, #12]
 80088d2:	23f0      	movs	r3, #240	@ 0xf0
 80088d4:	011b      	lsls	r3, r3, #4
 80088d6:	400b      	ands	r3, r1
 80088d8:	431a      	orrs	r2, r3
 80088da:	0011      	movs	r1, r2
 80088dc:	68fa      	ldr	r2, [r7, #12]
 80088de:	2380      	movs	r3, #128	@ 0x80
 80088e0:	015b      	lsls	r3, r3, #5
 80088e2:	401a      	ands	r2, r3
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	430a      	orrs	r2, r1
 80088ea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	69da      	ldr	r2, [r3, #28]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4907      	ldr	r1, [pc, #28]	@ (8008914 <HAL_SPI_Init+0x16c>)
 80088f8:	400a      	ands	r2, r1
 80088fa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2200      	movs	r2, #0
 8008900:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	225d      	movs	r2, #93	@ 0x5d
 8008906:	2101      	movs	r1, #1
 8008908:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800890a:	2300      	movs	r3, #0
}
 800890c:	0018      	movs	r0, r3
 800890e:	46bd      	mov	sp, r7
 8008910:	b004      	add	sp, #16
 8008912:	bd80      	pop	{r7, pc}
 8008914:	fffff7ff 	.word	0xfffff7ff

08008918 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b08a      	sub	sp, #40	@ 0x28
 800891c:	af00      	add	r7, sp, #0
 800891e:	60f8      	str	r0, [r7, #12]
 8008920:	60b9      	str	r1, [r7, #8]
 8008922:	607a      	str	r2, [r7, #4]
 8008924:	001a      	movs	r2, r3
 8008926:	1cbb      	adds	r3, r7, #2
 8008928:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800892a:	2301      	movs	r3, #1
 800892c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800892e:	f7fc f8f3 	bl	8004b18 <HAL_GetTick>
 8008932:	0003      	movs	r3, r0
 8008934:	623b      	str	r3, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008936:	201f      	movs	r0, #31
 8008938:	183b      	adds	r3, r7, r0
 800893a:	68fa      	ldr	r2, [r7, #12]
 800893c:	215d      	movs	r1, #93	@ 0x5d
 800893e:	5c52      	ldrb	r2, [r2, r1]
 8008940:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	685b      	ldr	r3, [r3, #4]
 8008946:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8008948:	2316      	movs	r3, #22
 800894a:	18fb      	adds	r3, r7, r3
 800894c:	1cba      	adds	r2, r7, #2
 800894e:	8812      	ldrh	r2, [r2, #0]
 8008950:	801a      	strh	r2, [r3, #0]
  initial_RxXferCount = Size;
 8008952:	2314      	movs	r3, #20
 8008954:	18fb      	adds	r3, r7, r3
 8008956:	1cba      	adds	r2, r7, #2
 8008958:	8812      	ldrh	r2, [r2, #0]
 800895a:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800895c:	183b      	adds	r3, r7, r0
 800895e:	781b      	ldrb	r3, [r3, #0]
 8008960:	2b01      	cmp	r3, #1
 8008962:	d00e      	beq.n	8008982 <HAL_SPI_TransmitReceive+0x6a>
 8008964:	69ba      	ldr	r2, [r7, #24]
 8008966:	2382      	movs	r3, #130	@ 0x82
 8008968:	005b      	lsls	r3, r3, #1
 800896a:	429a      	cmp	r2, r3
 800896c:	d107      	bne.n	800897e <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	689b      	ldr	r3, [r3, #8]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d103      	bne.n	800897e <HAL_SPI_TransmitReceive+0x66>
 8008976:	183b      	adds	r3, r7, r0
 8008978:	781b      	ldrb	r3, [r3, #0]
 800897a:	2b04      	cmp	r3, #4
 800897c:	d001      	beq.n	8008982 <HAL_SPI_TransmitReceive+0x6a>
  {
    return HAL_BUSY;
 800897e:	2302      	movs	r3, #2
 8008980:	e203      	b.n	8008d8a <HAL_SPI_TransmitReceive+0x472>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d006      	beq.n	8008996 <HAL_SPI_TransmitReceive+0x7e>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d003      	beq.n	8008996 <HAL_SPI_TransmitReceive+0x7e>
 800898e:	1cbb      	adds	r3, r7, #2
 8008990:	881b      	ldrh	r3, [r3, #0]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d101      	bne.n	800899a <HAL_SPI_TransmitReceive+0x82>
  {
    return HAL_ERROR;
 8008996:	2301      	movs	r3, #1
 8008998:	e1f7      	b.n	8008d8a <HAL_SPI_TransmitReceive+0x472>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	225c      	movs	r2, #92	@ 0x5c
 800899e:	5c9b      	ldrb	r3, [r3, r2]
 80089a0:	2b01      	cmp	r3, #1
 80089a2:	d101      	bne.n	80089a8 <HAL_SPI_TransmitReceive+0x90>
 80089a4:	2302      	movs	r3, #2
 80089a6:	e1f0      	b.n	8008d8a <HAL_SPI_TransmitReceive+0x472>
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	225c      	movs	r2, #92	@ 0x5c
 80089ac:	2101      	movs	r1, #1
 80089ae:	5499      	strb	r1, [r3, r2]

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	225d      	movs	r2, #93	@ 0x5d
 80089b4:	5c9b      	ldrb	r3, [r3, r2]
 80089b6:	b2db      	uxtb	r3, r3
 80089b8:	2b04      	cmp	r3, #4
 80089ba:	d003      	beq.n	80089c4 <HAL_SPI_TransmitReceive+0xac>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	225d      	movs	r2, #93	@ 0x5d
 80089c0:	2105      	movs	r1, #5
 80089c2:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2200      	movs	r2, #0
 80089c8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	687a      	ldr	r2, [r7, #4]
 80089ce:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	1cba      	adds	r2, r7, #2
 80089d4:	2146      	movs	r1, #70	@ 0x46
 80089d6:	8812      	ldrh	r2, [r2, #0]
 80089d8:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	1cba      	adds	r2, r7, #2
 80089de:	2144      	movs	r1, #68	@ 0x44
 80089e0:	8812      	ldrh	r2, [r2, #0]
 80089e2:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	68ba      	ldr	r2, [r7, #8]
 80089e8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	1cba      	adds	r2, r7, #2
 80089ee:	8812      	ldrh	r2, [r2, #0]
 80089f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	1cba      	adds	r2, r7, #2
 80089f6:	8812      	ldrh	r2, [r2, #0]
 80089f8:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	2200      	movs	r2, #0
 80089fe:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2200      	movs	r2, #0
 8008a04:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	68da      	ldr	r2, [r3, #12]
 8008a0a:	23e0      	movs	r3, #224	@ 0xe0
 8008a0c:	00db      	lsls	r3, r3, #3
 8008a0e:	429a      	cmp	r2, r3
 8008a10:	d804      	bhi.n	8008a1c <HAL_SPI_TransmitReceive+0x104>
 8008a12:	2314      	movs	r3, #20
 8008a14:	18fb      	adds	r3, r7, r3
 8008a16:	881b      	ldrh	r3, [r3, #0]
 8008a18:	2b01      	cmp	r3, #1
 8008a1a:	d908      	bls.n	8008a2e <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	685a      	ldr	r2, [r3, #4]
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	49c1      	ldr	r1, [pc, #772]	@ (8008d2c <HAL_SPI_TransmitReceive+0x414>)
 8008a28:	400a      	ands	r2, r1
 8008a2a:	605a      	str	r2, [r3, #4]
 8008a2c:	e008      	b.n	8008a40 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	685a      	ldr	r2, [r3, #4]
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	2180      	movs	r1, #128	@ 0x80
 8008a3a:	0149      	lsls	r1, r1, #5
 8008a3c:	430a      	orrs	r2, r1
 8008a3e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	2240      	movs	r2, #64	@ 0x40
 8008a48:	4013      	ands	r3, r2
 8008a4a:	2b40      	cmp	r3, #64	@ 0x40
 8008a4c:	d007      	beq.n	8008a5e <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	681a      	ldr	r2, [r3, #0]
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	2140      	movs	r1, #64	@ 0x40
 8008a5a:	430a      	orrs	r2, r1
 8008a5c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	68da      	ldr	r2, [r3, #12]
 8008a62:	23e0      	movs	r3, #224	@ 0xe0
 8008a64:	00db      	lsls	r3, r3, #3
 8008a66:	429a      	cmp	r2, r3
 8008a68:	d800      	bhi.n	8008a6c <HAL_SPI_TransmitReceive+0x154>
 8008a6a:	e084      	b.n	8008b76 <HAL_SPI_TransmitReceive+0x25e>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d005      	beq.n	8008a80 <HAL_SPI_TransmitReceive+0x168>
 8008a74:	2316      	movs	r3, #22
 8008a76:	18fb      	adds	r3, r7, r3
 8008a78:	881b      	ldrh	r3, [r3, #0]
 8008a7a:	2b01      	cmp	r3, #1
 8008a7c:	d000      	beq.n	8008a80 <HAL_SPI_TransmitReceive+0x168>
 8008a7e:	e06e      	b.n	8008b5e <HAL_SPI_TransmitReceive+0x246>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a84:	881a      	ldrh	r2, [r3, #0]
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a90:	1c9a      	adds	r2, r3, #2
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008a9a:	b29b      	uxth	r3, r3
 8008a9c:	3b01      	subs	r3, #1
 8008a9e:	b29a      	uxth	r2, r3
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008aa4:	e05b      	b.n	8008b5e <HAL_SPI_TransmitReceive+0x246>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	689b      	ldr	r3, [r3, #8]
 8008aac:	2202      	movs	r2, #2
 8008aae:	4013      	ands	r3, r2
 8008ab0:	2b02      	cmp	r3, #2
 8008ab2:	d11b      	bne.n	8008aec <HAL_SPI_TransmitReceive+0x1d4>
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008ab8:	b29b      	uxth	r3, r3
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d016      	beq.n	8008aec <HAL_SPI_TransmitReceive+0x1d4>
 8008abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ac0:	2b01      	cmp	r3, #1
 8008ac2:	d113      	bne.n	8008aec <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ac8:	881a      	ldrh	r2, [r3, #0]
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ad4:	1c9a      	adds	r2, r3, #2
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008ade:	b29b      	uxth	r3, r3
 8008ae0:	3b01      	subs	r3, #1
 8008ae2:	b29a      	uxth	r2, r3
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	689b      	ldr	r3, [r3, #8]
 8008af2:	2201      	movs	r2, #1
 8008af4:	4013      	ands	r3, r2
 8008af6:	2b01      	cmp	r3, #1
 8008af8:	d11c      	bne.n	8008b34 <HAL_SPI_TransmitReceive+0x21c>
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	2246      	movs	r2, #70	@ 0x46
 8008afe:	5a9b      	ldrh	r3, [r3, r2]
 8008b00:	b29b      	uxth	r3, r3
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d016      	beq.n	8008b34 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	68da      	ldr	r2, [r3, #12]
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b10:	b292      	uxth	r2, r2
 8008b12:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b18:	1c9a      	adds	r2, r3, #2
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	2246      	movs	r2, #70	@ 0x46
 8008b22:	5a9b      	ldrh	r3, [r3, r2]
 8008b24:	b29b      	uxth	r3, r3
 8008b26:	3b01      	subs	r3, #1
 8008b28:	b299      	uxth	r1, r3
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2246      	movs	r2, #70	@ 0x46
 8008b2e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008b30:	2301      	movs	r3, #1
 8008b32:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008b34:	f7fb fff0 	bl	8004b18 <HAL_GetTick>
 8008b38:	0002      	movs	r2, r0
 8008b3a:	6a3b      	ldr	r3, [r7, #32]
 8008b3c:	1ad3      	subs	r3, r2, r3
 8008b3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b40:	429a      	cmp	r2, r3
 8008b42:	d80c      	bhi.n	8008b5e <HAL_SPI_TransmitReceive+0x246>
 8008b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b46:	3301      	adds	r3, #1
 8008b48:	d009      	beq.n	8008b5e <HAL_SPI_TransmitReceive+0x246>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	225d      	movs	r2, #93	@ 0x5d
 8008b4e:	2101      	movs	r1, #1
 8008b50:	5499      	strb	r1, [r3, r2]
        __HAL_UNLOCK(hspi);
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	225c      	movs	r2, #92	@ 0x5c
 8008b56:	2100      	movs	r1, #0
 8008b58:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8008b5a:	2303      	movs	r3, #3
 8008b5c:	e115      	b.n	8008d8a <HAL_SPI_TransmitReceive+0x472>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008b62:	b29b      	uxth	r3, r3
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d19e      	bne.n	8008aa6 <HAL_SPI_TransmitReceive+0x18e>
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	2246      	movs	r2, #70	@ 0x46
 8008b6c:	5a9b      	ldrh	r3, [r3, r2]
 8008b6e:	b29b      	uxth	r3, r3
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d198      	bne.n	8008aa6 <HAL_SPI_TransmitReceive+0x18e>
 8008b74:	e0e9      	b.n	8008d4a <HAL_SPI_TransmitReceive+0x432>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	685b      	ldr	r3, [r3, #4]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d005      	beq.n	8008b8a <HAL_SPI_TransmitReceive+0x272>
 8008b7e:	2316      	movs	r3, #22
 8008b80:	18fb      	adds	r3, r7, r3
 8008b82:	881b      	ldrh	r3, [r3, #0]
 8008b84:	2b01      	cmp	r3, #1
 8008b86:	d000      	beq.n	8008b8a <HAL_SPI_TransmitReceive+0x272>
 8008b88:	e0d2      	b.n	8008d30 <HAL_SPI_TransmitReceive+0x418>
    {
      if (hspi->TxXferCount > 1U)
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008b8e:	b29b      	uxth	r3, r3
 8008b90:	2b01      	cmp	r3, #1
 8008b92:	d912      	bls.n	8008bba <HAL_SPI_TransmitReceive+0x2a2>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b98:	881a      	ldrh	r2, [r3, #0]
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ba4:	1c9a      	adds	r2, r3, #2
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008bae:	b29b      	uxth	r3, r3
 8008bb0:	3b02      	subs	r3, #2
 8008bb2:	b29a      	uxth	r2, r3
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008bb8:	e0ba      	b.n	8008d30 <HAL_SPI_TransmitReceive+0x418>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	330c      	adds	r3, #12
 8008bc4:	7812      	ldrb	r2, [r2, #0]
 8008bc6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bcc:	1c5a      	adds	r2, r3, #1
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	3b01      	subs	r3, #1
 8008bda:	b29a      	uxth	r2, r3
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008be0:	e0a6      	b.n	8008d30 <HAL_SPI_TransmitReceive+0x418>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	689b      	ldr	r3, [r3, #8]
 8008be8:	2202      	movs	r2, #2
 8008bea:	4013      	ands	r3, r2
 8008bec:	2b02      	cmp	r3, #2
 8008bee:	d134      	bne.n	8008c5a <HAL_SPI_TransmitReceive+0x342>
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008bf4:	b29b      	uxth	r3, r3
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d02f      	beq.n	8008c5a <HAL_SPI_TransmitReceive+0x342>
 8008bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	d12c      	bne.n	8008c5a <HAL_SPI_TransmitReceive+0x342>
      {
        if (hspi->TxXferCount > 1U)
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008c04:	b29b      	uxth	r3, r3
 8008c06:	2b01      	cmp	r3, #1
 8008c08:	d912      	bls.n	8008c30 <HAL_SPI_TransmitReceive+0x318>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c0e:	881a      	ldrh	r2, [r3, #0]
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c1a:	1c9a      	adds	r2, r3, #2
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008c24:	b29b      	uxth	r3, r3
 8008c26:	3b02      	subs	r3, #2
 8008c28:	b29a      	uxth	r2, r3
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008c2e:	e012      	b.n	8008c56 <HAL_SPI_TransmitReceive+0x33e>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	330c      	adds	r3, #12
 8008c3a:	7812      	ldrb	r2, [r2, #0]
 8008c3c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c42:	1c5a      	adds	r2, r3, #1
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008c4c:	b29b      	uxth	r3, r3
 8008c4e:	3b01      	subs	r3, #1
 8008c50:	b29a      	uxth	r2, r3
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008c56:	2300      	movs	r3, #0
 8008c58:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	689b      	ldr	r3, [r3, #8]
 8008c60:	2201      	movs	r2, #1
 8008c62:	4013      	ands	r3, r2
 8008c64:	2b01      	cmp	r3, #1
 8008c66:	d149      	bne.n	8008cfc <HAL_SPI_TransmitReceive+0x3e4>
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2246      	movs	r2, #70	@ 0x46
 8008c6c:	5a9b      	ldrh	r3, [r3, r2]
 8008c6e:	b29b      	uxth	r3, r3
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d043      	beq.n	8008cfc <HAL_SPI_TransmitReceive+0x3e4>
      {
        if (hspi->RxXferCount > 1U)
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	2246      	movs	r2, #70	@ 0x46
 8008c78:	5a9b      	ldrh	r3, [r3, r2]
 8008c7a:	b29b      	uxth	r3, r3
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	d924      	bls.n	8008cca <HAL_SPI_TransmitReceive+0x3b2>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	68da      	ldr	r2, [r3, #12]
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c8a:	b292      	uxth	r2, r2
 8008c8c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c92:	1c9a      	adds	r2, r3, #2
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	2246      	movs	r2, #70	@ 0x46
 8008c9c:	5a9b      	ldrh	r3, [r3, r2]
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	3b02      	subs	r3, #2
 8008ca2:	b299      	uxth	r1, r3
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	2246      	movs	r2, #70	@ 0x46
 8008ca8:	5299      	strh	r1, [r3, r2]
          if (hspi->RxXferCount <= 1U)
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	2246      	movs	r2, #70	@ 0x46
 8008cae:	5a9b      	ldrh	r3, [r3, r2]
 8008cb0:	b29b      	uxth	r3, r3
 8008cb2:	2b01      	cmp	r3, #1
 8008cb4:	d820      	bhi.n	8008cf8 <HAL_SPI_TransmitReceive+0x3e0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	685a      	ldr	r2, [r3, #4]
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	2180      	movs	r1, #128	@ 0x80
 8008cc2:	0149      	lsls	r1, r1, #5
 8008cc4:	430a      	orrs	r2, r1
 8008cc6:	605a      	str	r2, [r3, #4]
 8008cc8:	e016      	b.n	8008cf8 <HAL_SPI_TransmitReceive+0x3e0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	330c      	adds	r3, #12
 8008cd0:	001a      	movs	r2, r3
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cd6:	7812      	ldrb	r2, [r2, #0]
 8008cd8:	b2d2      	uxtb	r2, r2
 8008cda:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ce0:	1c5a      	adds	r2, r3, #1
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	2246      	movs	r2, #70	@ 0x46
 8008cea:	5a9b      	ldrh	r3, [r3, r2]
 8008cec:	b29b      	uxth	r3, r3
 8008cee:	3b01      	subs	r3, #1
 8008cf0:	b299      	uxth	r1, r3
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	2246      	movs	r2, #70	@ 0x46
 8008cf6:	5299      	strh	r1, [r3, r2]
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008cfc:	f7fb ff0c 	bl	8004b18 <HAL_GetTick>
 8008d00:	0002      	movs	r2, r0
 8008d02:	6a3b      	ldr	r3, [r7, #32]
 8008d04:	1ad3      	subs	r3, r2, r3
 8008d06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d802      	bhi.n	8008d12 <HAL_SPI_TransmitReceive+0x3fa>
 8008d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d0e:	3301      	adds	r3, #1
 8008d10:	d102      	bne.n	8008d18 <HAL_SPI_TransmitReceive+0x400>
 8008d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d10b      	bne.n	8008d30 <HAL_SPI_TransmitReceive+0x418>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	225d      	movs	r2, #93	@ 0x5d
 8008d1c:	2101      	movs	r1, #1
 8008d1e:	5499      	strb	r1, [r3, r2]
        __HAL_UNLOCK(hspi);
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	225c      	movs	r2, #92	@ 0x5c
 8008d24:	2100      	movs	r1, #0
 8008d26:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8008d28:	2303      	movs	r3, #3
 8008d2a:	e02e      	b.n	8008d8a <HAL_SPI_TransmitReceive+0x472>
 8008d2c:	ffffefff 	.word	0xffffefff
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d34:	b29b      	uxth	r3, r3
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d000      	beq.n	8008d3c <HAL_SPI_TransmitReceive+0x424>
 8008d3a:	e752      	b.n	8008be2 <HAL_SPI_TransmitReceive+0x2ca>
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	2246      	movs	r2, #70	@ 0x46
 8008d40:	5a9b      	ldrh	r3, [r3, r2]
 8008d42:	b29b      	uxth	r3, r3
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d000      	beq.n	8008d4a <HAL_SPI_TransmitReceive+0x432>
 8008d48:	e74b      	b.n	8008be2 <HAL_SPI_TransmitReceive+0x2ca>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008d4a:	6a3a      	ldr	r2, [r7, #32]
 8008d4c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	0018      	movs	r0, r3
 8008d52:	f000 f94f 	bl	8008ff4 <SPI_EndRxTxTransaction>
 8008d56:	1e03      	subs	r3, r0, #0
 8008d58:	d008      	beq.n	8008d6c <HAL_SPI_TransmitReceive+0x454>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	2220      	movs	r2, #32
 8008d5e:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	225c      	movs	r2, #92	@ 0x5c
 8008d64:	2100      	movs	r1, #0
 8008d66:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8008d68:	2301      	movs	r3, #1
 8008d6a:	e00e      	b.n	8008d8a <HAL_SPI_TransmitReceive+0x472>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	225d      	movs	r2, #93	@ 0x5d
 8008d70:	2101      	movs	r1, #1
 8008d72:	5499      	strb	r1, [r3, r2]
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	225c      	movs	r2, #92	@ 0x5c
 8008d78:	2100      	movs	r1, #0
 8008d7a:	5499      	strb	r1, [r3, r2]

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d001      	beq.n	8008d88 <HAL_SPI_TransmitReceive+0x470>
  {
    return HAL_ERROR;
 8008d84:	2301      	movs	r3, #1
 8008d86:	e000      	b.n	8008d8a <HAL_SPI_TransmitReceive+0x472>
  }
  else
  {
    return HAL_OK;
 8008d88:	2300      	movs	r3, #0
  }
}
 8008d8a:	0018      	movs	r0, r3
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	b00a      	add	sp, #40	@ 0x28
 8008d90:	bd80      	pop	{r7, pc}
 8008d92:	46c0      	nop			@ (mov r8, r8)

08008d94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b088      	sub	sp, #32
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	60f8      	str	r0, [r7, #12]
 8008d9c:	60b9      	str	r1, [r7, #8]
 8008d9e:	603b      	str	r3, [r7, #0]
 8008da0:	1dfb      	adds	r3, r7, #7
 8008da2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008da4:	f7fb feb8 	bl	8004b18 <HAL_GetTick>
 8008da8:	0002      	movs	r2, r0
 8008daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dac:	1a9b      	subs	r3, r3, r2
 8008dae:	683a      	ldr	r2, [r7, #0]
 8008db0:	18d3      	adds	r3, r2, r3
 8008db2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008db4:	f7fb feb0 	bl	8004b18 <HAL_GetTick>
 8008db8:	0003      	movs	r3, r0
 8008dba:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008dbc:	4b3a      	ldr	r3, [pc, #232]	@ (8008ea8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	015b      	lsls	r3, r3, #5
 8008dc2:	0d1b      	lsrs	r3, r3, #20
 8008dc4:	69fa      	ldr	r2, [r7, #28]
 8008dc6:	4353      	muls	r3, r2
 8008dc8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008dca:	e058      	b.n	8008e7e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	3301      	adds	r3, #1
 8008dd0:	d055      	beq.n	8008e7e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008dd2:	f7fb fea1 	bl	8004b18 <HAL_GetTick>
 8008dd6:	0002      	movs	r2, r0
 8008dd8:	69bb      	ldr	r3, [r7, #24]
 8008dda:	1ad3      	subs	r3, r2, r3
 8008ddc:	69fa      	ldr	r2, [r7, #28]
 8008dde:	429a      	cmp	r2, r3
 8008de0:	d902      	bls.n	8008de8 <SPI_WaitFlagStateUntilTimeout+0x54>
 8008de2:	69fb      	ldr	r3, [r7, #28]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d142      	bne.n	8008e6e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	685a      	ldr	r2, [r3, #4]
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	21e0      	movs	r1, #224	@ 0xe0
 8008df4:	438a      	bics	r2, r1
 8008df6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	685a      	ldr	r2, [r3, #4]
 8008dfc:	2382      	movs	r3, #130	@ 0x82
 8008dfe:	005b      	lsls	r3, r3, #1
 8008e00:	429a      	cmp	r2, r3
 8008e02:	d113      	bne.n	8008e2c <SPI_WaitFlagStateUntilTimeout+0x98>
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	689a      	ldr	r2, [r3, #8]
 8008e08:	2380      	movs	r3, #128	@ 0x80
 8008e0a:	021b      	lsls	r3, r3, #8
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	d005      	beq.n	8008e1c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	689a      	ldr	r2, [r3, #8]
 8008e14:	2380      	movs	r3, #128	@ 0x80
 8008e16:	00db      	lsls	r3, r3, #3
 8008e18:	429a      	cmp	r2, r3
 8008e1a:	d107      	bne.n	8008e2c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	681a      	ldr	r2, [r3, #0]
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	2140      	movs	r1, #64	@ 0x40
 8008e28:	438a      	bics	r2, r1
 8008e2a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008e30:	2380      	movs	r3, #128	@ 0x80
 8008e32:	019b      	lsls	r3, r3, #6
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d110      	bne.n	8008e5a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	681a      	ldr	r2, [r3, #0]
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	491a      	ldr	r1, [pc, #104]	@ (8008eac <SPI_WaitFlagStateUntilTimeout+0x118>)
 8008e44:	400a      	ands	r2, r1
 8008e46:	601a      	str	r2, [r3, #0]
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	681a      	ldr	r2, [r3, #0]
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	2180      	movs	r1, #128	@ 0x80
 8008e54:	0189      	lsls	r1, r1, #6
 8008e56:	430a      	orrs	r2, r1
 8008e58:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	225d      	movs	r2, #93	@ 0x5d
 8008e5e:	2101      	movs	r1, #1
 8008e60:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	225c      	movs	r2, #92	@ 0x5c
 8008e66:	2100      	movs	r1, #0
 8008e68:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008e6a:	2303      	movs	r3, #3
 8008e6c:	e017      	b.n	8008e9e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d101      	bne.n	8008e78 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8008e74:	2300      	movs	r3, #0
 8008e76:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	3b01      	subs	r3, #1
 8008e7c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	689b      	ldr	r3, [r3, #8]
 8008e84:	68ba      	ldr	r2, [r7, #8]
 8008e86:	4013      	ands	r3, r2
 8008e88:	68ba      	ldr	r2, [r7, #8]
 8008e8a:	1ad3      	subs	r3, r2, r3
 8008e8c:	425a      	negs	r2, r3
 8008e8e:	4153      	adcs	r3, r2
 8008e90:	b2db      	uxtb	r3, r3
 8008e92:	001a      	movs	r2, r3
 8008e94:	1dfb      	adds	r3, r7, #7
 8008e96:	781b      	ldrb	r3, [r3, #0]
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	d197      	bne.n	8008dcc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008e9c:	2300      	movs	r3, #0
}
 8008e9e:	0018      	movs	r0, r3
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	b008      	add	sp, #32
 8008ea4:	bd80      	pop	{r7, pc}
 8008ea6:	46c0      	nop			@ (mov r8, r8)
 8008ea8:	200000b8 	.word	0x200000b8
 8008eac:	ffffdfff 	.word	0xffffdfff

08008eb0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b08a      	sub	sp, #40	@ 0x28
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	60f8      	str	r0, [r7, #12]
 8008eb8:	60b9      	str	r1, [r7, #8]
 8008eba:	607a      	str	r2, [r7, #4]
 8008ebc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008ebe:	2317      	movs	r3, #23
 8008ec0:	18fb      	adds	r3, r7, r3
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008ec6:	f7fb fe27 	bl	8004b18 <HAL_GetTick>
 8008eca:	0002      	movs	r2, r0
 8008ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ece:	1a9b      	subs	r3, r3, r2
 8008ed0:	683a      	ldr	r2, [r7, #0]
 8008ed2:	18d3      	adds	r3, r2, r3
 8008ed4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8008ed6:	f7fb fe1f 	bl	8004b18 <HAL_GetTick>
 8008eda:	0003      	movs	r3, r0
 8008edc:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	330c      	adds	r3, #12
 8008ee4:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008ee6:	4b41      	ldr	r3, [pc, #260]	@ (8008fec <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8008ee8:	681a      	ldr	r2, [r3, #0]
 8008eea:	0013      	movs	r3, r2
 8008eec:	009b      	lsls	r3, r3, #2
 8008eee:	189b      	adds	r3, r3, r2
 8008ef0:	00da      	lsls	r2, r3, #3
 8008ef2:	1ad3      	subs	r3, r2, r3
 8008ef4:	0d1b      	lsrs	r3, r3, #20
 8008ef6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ef8:	4353      	muls	r3, r2
 8008efa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008efc:	e068      	b.n	8008fd0 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008efe:	68ba      	ldr	r2, [r7, #8]
 8008f00:	23c0      	movs	r3, #192	@ 0xc0
 8008f02:	00db      	lsls	r3, r3, #3
 8008f04:	429a      	cmp	r2, r3
 8008f06:	d10a      	bne.n	8008f1e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d107      	bne.n	8008f1e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008f0e:	69fb      	ldr	r3, [r7, #28]
 8008f10:	781b      	ldrb	r3, [r3, #0]
 8008f12:	b2da      	uxtb	r2, r3
 8008f14:	2117      	movs	r1, #23
 8008f16:	187b      	adds	r3, r7, r1
 8008f18:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008f1a:	187b      	adds	r3, r7, r1
 8008f1c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	3301      	adds	r3, #1
 8008f22:	d055      	beq.n	8008fd0 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008f24:	f7fb fdf8 	bl	8004b18 <HAL_GetTick>
 8008f28:	0002      	movs	r2, r0
 8008f2a:	6a3b      	ldr	r3, [r7, #32]
 8008f2c:	1ad3      	subs	r3, r2, r3
 8008f2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f30:	429a      	cmp	r2, r3
 8008f32:	d902      	bls.n	8008f3a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8008f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d142      	bne.n	8008fc0 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	685a      	ldr	r2, [r3, #4]
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	21e0      	movs	r1, #224	@ 0xe0
 8008f46:	438a      	bics	r2, r1
 8008f48:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	685a      	ldr	r2, [r3, #4]
 8008f4e:	2382      	movs	r3, #130	@ 0x82
 8008f50:	005b      	lsls	r3, r3, #1
 8008f52:	429a      	cmp	r2, r3
 8008f54:	d113      	bne.n	8008f7e <SPI_WaitFifoStateUntilTimeout+0xce>
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	689a      	ldr	r2, [r3, #8]
 8008f5a:	2380      	movs	r3, #128	@ 0x80
 8008f5c:	021b      	lsls	r3, r3, #8
 8008f5e:	429a      	cmp	r2, r3
 8008f60:	d005      	beq.n	8008f6e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	689a      	ldr	r2, [r3, #8]
 8008f66:	2380      	movs	r3, #128	@ 0x80
 8008f68:	00db      	lsls	r3, r3, #3
 8008f6a:	429a      	cmp	r2, r3
 8008f6c:	d107      	bne.n	8008f7e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	681a      	ldr	r2, [r3, #0]
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	2140      	movs	r1, #64	@ 0x40
 8008f7a:	438a      	bics	r2, r1
 8008f7c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008f82:	2380      	movs	r3, #128	@ 0x80
 8008f84:	019b      	lsls	r3, r3, #6
 8008f86:	429a      	cmp	r2, r3
 8008f88:	d110      	bne.n	8008fac <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	681a      	ldr	r2, [r3, #0]
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4916      	ldr	r1, [pc, #88]	@ (8008ff0 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8008f96:	400a      	ands	r2, r1
 8008f98:	601a      	str	r2, [r3, #0]
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	681a      	ldr	r2, [r3, #0]
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	2180      	movs	r1, #128	@ 0x80
 8008fa6:	0189      	lsls	r1, r1, #6
 8008fa8:	430a      	orrs	r2, r1
 8008faa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	225d      	movs	r2, #93	@ 0x5d
 8008fb0:	2101      	movs	r1, #1
 8008fb2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	225c      	movs	r2, #92	@ 0x5c
 8008fb8:	2100      	movs	r1, #0
 8008fba:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008fbc:	2303      	movs	r3, #3
 8008fbe:	e010      	b.n	8008fe2 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008fc0:	69bb      	ldr	r3, [r7, #24]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d101      	bne.n	8008fca <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8008fca:	69bb      	ldr	r3, [r7, #24]
 8008fcc:	3b01      	subs	r3, #1
 8008fce:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	689b      	ldr	r3, [r3, #8]
 8008fd6:	68ba      	ldr	r2, [r7, #8]
 8008fd8:	4013      	ands	r3, r2
 8008fda:	687a      	ldr	r2, [r7, #4]
 8008fdc:	429a      	cmp	r2, r3
 8008fde:	d18e      	bne.n	8008efe <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8008fe0:	2300      	movs	r3, #0
}
 8008fe2:	0018      	movs	r0, r3
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	b00a      	add	sp, #40	@ 0x28
 8008fe8:	bd80      	pop	{r7, pc}
 8008fea:	46c0      	nop			@ (mov r8, r8)
 8008fec:	200000b8 	.word	0x200000b8
 8008ff0:	ffffdfff 	.word	0xffffdfff

08008ff4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b086      	sub	sp, #24
 8008ff8:	af02      	add	r7, sp, #8
 8008ffa:	60f8      	str	r0, [r7, #12]
 8008ffc:	60b9      	str	r1, [r7, #8]
 8008ffe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009000:	68ba      	ldr	r2, [r7, #8]
 8009002:	23c0      	movs	r3, #192	@ 0xc0
 8009004:	0159      	lsls	r1, r3, #5
 8009006:	68f8      	ldr	r0, [r7, #12]
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	9300      	str	r3, [sp, #0]
 800900c:	0013      	movs	r3, r2
 800900e:	2200      	movs	r2, #0
 8009010:	f7ff ff4e 	bl	8008eb0 <SPI_WaitFifoStateUntilTimeout>
 8009014:	1e03      	subs	r3, r0, #0
 8009016:	d007      	beq.n	8009028 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800901c:	2220      	movs	r2, #32
 800901e:	431a      	orrs	r2, r3
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009024:	2303      	movs	r3, #3
 8009026:	e027      	b.n	8009078 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009028:	68ba      	ldr	r2, [r7, #8]
 800902a:	68f8      	ldr	r0, [r7, #12]
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	9300      	str	r3, [sp, #0]
 8009030:	0013      	movs	r3, r2
 8009032:	2200      	movs	r2, #0
 8009034:	2180      	movs	r1, #128	@ 0x80
 8009036:	f7ff fead 	bl	8008d94 <SPI_WaitFlagStateUntilTimeout>
 800903a:	1e03      	subs	r3, r0, #0
 800903c:	d007      	beq.n	800904e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009042:	2220      	movs	r2, #32
 8009044:	431a      	orrs	r2, r3
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800904a:	2303      	movs	r3, #3
 800904c:	e014      	b.n	8009078 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800904e:	68ba      	ldr	r2, [r7, #8]
 8009050:	23c0      	movs	r3, #192	@ 0xc0
 8009052:	00d9      	lsls	r1, r3, #3
 8009054:	68f8      	ldr	r0, [r7, #12]
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	9300      	str	r3, [sp, #0]
 800905a:	0013      	movs	r3, r2
 800905c:	2200      	movs	r2, #0
 800905e:	f7ff ff27 	bl	8008eb0 <SPI_WaitFifoStateUntilTimeout>
 8009062:	1e03      	subs	r3, r0, #0
 8009064:	d007      	beq.n	8009076 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800906a:	2220      	movs	r2, #32
 800906c:	431a      	orrs	r2, r3
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009072:	2303      	movs	r3, #3
 8009074:	e000      	b.n	8009078 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009076:	2300      	movs	r3, #0
}
 8009078:	0018      	movs	r0, r3
 800907a:	46bd      	mov	sp, r7
 800907c:	b004      	add	sp, #16
 800907e:	bd80      	pop	{r7, pc}

08009080 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b082      	sub	sp, #8
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d101      	bne.n	8009092 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800908e:	2301      	movs	r3, #1
 8009090:	e04a      	b.n	8009128 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	223d      	movs	r2, #61	@ 0x3d
 8009096:	5c9b      	ldrb	r3, [r3, r2]
 8009098:	b2db      	uxtb	r3, r3
 800909a:	2b00      	cmp	r3, #0
 800909c:	d107      	bne.n	80090ae <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	223c      	movs	r2, #60	@ 0x3c
 80090a2:	2100      	movs	r1, #0
 80090a4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	0018      	movs	r0, r3
 80090aa:	f7fb f98f 	bl	80043cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	223d      	movs	r2, #61	@ 0x3d
 80090b2:	2102      	movs	r1, #2
 80090b4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681a      	ldr	r2, [r3, #0]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	3304      	adds	r3, #4
 80090be:	0019      	movs	r1, r3
 80090c0:	0010      	movs	r0, r2
 80090c2:	f000 fc73 	bl	80099ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2248      	movs	r2, #72	@ 0x48
 80090ca:	2101      	movs	r1, #1
 80090cc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	223e      	movs	r2, #62	@ 0x3e
 80090d2:	2101      	movs	r1, #1
 80090d4:	5499      	strb	r1, [r3, r2]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	223f      	movs	r2, #63	@ 0x3f
 80090da:	2101      	movs	r1, #1
 80090dc:	5499      	strb	r1, [r3, r2]
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2240      	movs	r2, #64	@ 0x40
 80090e2:	2101      	movs	r1, #1
 80090e4:	5499      	strb	r1, [r3, r2]
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2241      	movs	r2, #65	@ 0x41
 80090ea:	2101      	movs	r1, #1
 80090ec:	5499      	strb	r1, [r3, r2]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2242      	movs	r2, #66	@ 0x42
 80090f2:	2101      	movs	r1, #1
 80090f4:	5499      	strb	r1, [r3, r2]
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2243      	movs	r2, #67	@ 0x43
 80090fa:	2101      	movs	r1, #1
 80090fc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2244      	movs	r2, #68	@ 0x44
 8009102:	2101      	movs	r1, #1
 8009104:	5499      	strb	r1, [r3, r2]
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2245      	movs	r2, #69	@ 0x45
 800910a:	2101      	movs	r1, #1
 800910c:	5499      	strb	r1, [r3, r2]
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2246      	movs	r2, #70	@ 0x46
 8009112:	2101      	movs	r1, #1
 8009114:	5499      	strb	r1, [r3, r2]
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2247      	movs	r2, #71	@ 0x47
 800911a:	2101      	movs	r1, #1
 800911c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	223d      	movs	r2, #61	@ 0x3d
 8009122:	2101      	movs	r1, #1
 8009124:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009126:	2300      	movs	r3, #0
}
 8009128:	0018      	movs	r0, r3
 800912a:	46bd      	mov	sp, r7
 800912c:	b002      	add	sp, #8
 800912e:	bd80      	pop	{r7, pc}

08009130 <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b082      	sub	sp, #8
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	223d      	movs	r2, #61	@ 0x3d
 800913c:	2102      	movs	r1, #2
 800913e:	5499      	strb	r1, [r3, r2]

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	6a1b      	ldr	r3, [r3, #32]
 8009146:	4a27      	ldr	r2, [pc, #156]	@ (80091e4 <HAL_TIM_Base_DeInit+0xb4>)
 8009148:	4013      	ands	r3, r2
 800914a:	d10d      	bne.n	8009168 <HAL_TIM_Base_DeInit+0x38>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	6a1b      	ldr	r3, [r3, #32]
 8009152:	4a25      	ldr	r2, [pc, #148]	@ (80091e8 <HAL_TIM_Base_DeInit+0xb8>)
 8009154:	4013      	ands	r3, r2
 8009156:	d107      	bne.n	8009168 <HAL_TIM_Base_DeInit+0x38>
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	681a      	ldr	r2, [r3, #0]
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	2101      	movs	r1, #1
 8009164:	438a      	bics	r2, r1
 8009166:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	0018      	movs	r0, r3
 800916c:	f7fb f994 	bl	8004498 <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2248      	movs	r2, #72	@ 0x48
 8009174:	2100      	movs	r1, #0
 8009176:	5499      	strb	r1, [r3, r2]

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	223e      	movs	r2, #62	@ 0x3e
 800917c:	2100      	movs	r1, #0
 800917e:	5499      	strb	r1, [r3, r2]
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	223f      	movs	r2, #63	@ 0x3f
 8009184:	2100      	movs	r1, #0
 8009186:	5499      	strb	r1, [r3, r2]
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2240      	movs	r2, #64	@ 0x40
 800918c:	2100      	movs	r1, #0
 800918e:	5499      	strb	r1, [r3, r2]
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2241      	movs	r2, #65	@ 0x41
 8009194:	2100      	movs	r1, #0
 8009196:	5499      	strb	r1, [r3, r2]
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2242      	movs	r2, #66	@ 0x42
 800919c:	2100      	movs	r1, #0
 800919e:	5499      	strb	r1, [r3, r2]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2243      	movs	r2, #67	@ 0x43
 80091a4:	2100      	movs	r1, #0
 80091a6:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2244      	movs	r2, #68	@ 0x44
 80091ac:	2100      	movs	r1, #0
 80091ae:	5499      	strb	r1, [r3, r2]
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2245      	movs	r2, #69	@ 0x45
 80091b4:	2100      	movs	r1, #0
 80091b6:	5499      	strb	r1, [r3, r2]
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2246      	movs	r2, #70	@ 0x46
 80091bc:	2100      	movs	r1, #0
 80091be:	5499      	strb	r1, [r3, r2]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2247      	movs	r2, #71	@ 0x47
 80091c4:	2100      	movs	r1, #0
 80091c6:	5499      	strb	r1, [r3, r2]

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	223d      	movs	r2, #61	@ 0x3d
 80091cc:	2100      	movs	r1, #0
 80091ce:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(htim);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	223c      	movs	r2, #60	@ 0x3c
 80091d4:	2100      	movs	r1, #0
 80091d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80091d8:	2300      	movs	r3, #0
}
 80091da:	0018      	movs	r0, r3
 80091dc:	46bd      	mov	sp, r7
 80091de:	b002      	add	sp, #8
 80091e0:	bd80      	pop	{r7, pc}
 80091e2:	46c0      	nop			@ (mov r8, r8)
 80091e4:	00001111 	.word	0x00001111
 80091e8:	00000444 	.word	0x00000444

080091ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b084      	sub	sp, #16
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	223d      	movs	r2, #61	@ 0x3d
 80091f8:	5c9b      	ldrb	r3, [r3, r2]
 80091fa:	b2db      	uxtb	r3, r3
 80091fc:	2b01      	cmp	r3, #1
 80091fe:	d001      	beq.n	8009204 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009200:	2301      	movs	r3, #1
 8009202:	e03d      	b.n	8009280 <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	223d      	movs	r2, #61	@ 0x3d
 8009208:	2102      	movs	r1, #2
 800920a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	68da      	ldr	r2, [r3, #12]
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	2101      	movs	r1, #1
 8009218:	430a      	orrs	r2, r1
 800921a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4a19      	ldr	r2, [pc, #100]	@ (8009288 <HAL_TIM_Base_Start_IT+0x9c>)
 8009222:	4293      	cmp	r3, r2
 8009224:	d00a      	beq.n	800923c <HAL_TIM_Base_Start_IT+0x50>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681a      	ldr	r2, [r3, #0]
 800922a:	2380      	movs	r3, #128	@ 0x80
 800922c:	05db      	lsls	r3, r3, #23
 800922e:	429a      	cmp	r2, r3
 8009230:	d004      	beq.n	800923c <HAL_TIM_Base_Start_IT+0x50>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	4a15      	ldr	r2, [pc, #84]	@ (800928c <HAL_TIM_Base_Start_IT+0xa0>)
 8009238:	4293      	cmp	r3, r2
 800923a:	d116      	bne.n	800926a <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	689b      	ldr	r3, [r3, #8]
 8009242:	4a13      	ldr	r2, [pc, #76]	@ (8009290 <HAL_TIM_Base_Start_IT+0xa4>)
 8009244:	4013      	ands	r3, r2
 8009246:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	2b06      	cmp	r3, #6
 800924c:	d016      	beq.n	800927c <HAL_TIM_Base_Start_IT+0x90>
 800924e:	68fa      	ldr	r2, [r7, #12]
 8009250:	2380      	movs	r3, #128	@ 0x80
 8009252:	025b      	lsls	r3, r3, #9
 8009254:	429a      	cmp	r2, r3
 8009256:	d011      	beq.n	800927c <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	681a      	ldr	r2, [r3, #0]
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	2101      	movs	r1, #1
 8009264:	430a      	orrs	r2, r1
 8009266:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009268:	e008      	b.n	800927c <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	681a      	ldr	r2, [r3, #0]
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	2101      	movs	r1, #1
 8009276:	430a      	orrs	r2, r1
 8009278:	601a      	str	r2, [r3, #0]
 800927a:	e000      	b.n	800927e <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800927c:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800927e:	2300      	movs	r3, #0
}
 8009280:	0018      	movs	r0, r3
 8009282:	46bd      	mov	sp, r7
 8009284:	b004      	add	sp, #16
 8009286:	bd80      	pop	{r7, pc}
 8009288:	40012c00 	.word	0x40012c00
 800928c:	40000400 	.word	0x40000400
 8009290:	00010007 	.word	0x00010007

08009294 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b082      	sub	sp, #8
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	68da      	ldr	r2, [r3, #12]
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	2101      	movs	r1, #1
 80092a8:	438a      	bics	r2, r1
 80092aa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	6a1b      	ldr	r3, [r3, #32]
 80092b2:	4a0d      	ldr	r2, [pc, #52]	@ (80092e8 <HAL_TIM_Base_Stop_IT+0x54>)
 80092b4:	4013      	ands	r3, r2
 80092b6:	d10d      	bne.n	80092d4 <HAL_TIM_Base_Stop_IT+0x40>
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	6a1b      	ldr	r3, [r3, #32]
 80092be:	4a0b      	ldr	r2, [pc, #44]	@ (80092ec <HAL_TIM_Base_Stop_IT+0x58>)
 80092c0:	4013      	ands	r3, r2
 80092c2:	d107      	bne.n	80092d4 <HAL_TIM_Base_Stop_IT+0x40>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	681a      	ldr	r2, [r3, #0]
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	2101      	movs	r1, #1
 80092d0:	438a      	bics	r2, r1
 80092d2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	223d      	movs	r2, #61	@ 0x3d
 80092d8:	2101      	movs	r1, #1
 80092da:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80092dc:	2300      	movs	r3, #0
}
 80092de:	0018      	movs	r0, r3
 80092e0:	46bd      	mov	sp, r7
 80092e2:	b002      	add	sp, #8
 80092e4:	bd80      	pop	{r7, pc}
 80092e6:	46c0      	nop			@ (mov r8, r8)
 80092e8:	00001111 	.word	0x00001111
 80092ec:	00000444 	.word	0x00000444

080092f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b082      	sub	sp, #8
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d101      	bne.n	8009302 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80092fe:	2301      	movs	r3, #1
 8009300:	e04a      	b.n	8009398 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	223d      	movs	r2, #61	@ 0x3d
 8009306:	5c9b      	ldrb	r3, [r3, r2]
 8009308:	b2db      	uxtb	r3, r3
 800930a:	2b00      	cmp	r3, #0
 800930c:	d107      	bne.n	800931e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	223c      	movs	r2, #60	@ 0x3c
 8009312:	2100      	movs	r1, #0
 8009314:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	0018      	movs	r0, r3
 800931a:	f7fb f837 	bl	800438c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	223d      	movs	r2, #61	@ 0x3d
 8009322:	2102      	movs	r1, #2
 8009324:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681a      	ldr	r2, [r3, #0]
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	3304      	adds	r3, #4
 800932e:	0019      	movs	r1, r3
 8009330:	0010      	movs	r0, r2
 8009332:	f000 fb3b 	bl	80099ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2248      	movs	r2, #72	@ 0x48
 800933a:	2101      	movs	r1, #1
 800933c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	223e      	movs	r2, #62	@ 0x3e
 8009342:	2101      	movs	r1, #1
 8009344:	5499      	strb	r1, [r3, r2]
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	223f      	movs	r2, #63	@ 0x3f
 800934a:	2101      	movs	r1, #1
 800934c:	5499      	strb	r1, [r3, r2]
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2240      	movs	r2, #64	@ 0x40
 8009352:	2101      	movs	r1, #1
 8009354:	5499      	strb	r1, [r3, r2]
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2241      	movs	r2, #65	@ 0x41
 800935a:	2101      	movs	r1, #1
 800935c:	5499      	strb	r1, [r3, r2]
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2242      	movs	r2, #66	@ 0x42
 8009362:	2101      	movs	r1, #1
 8009364:	5499      	strb	r1, [r3, r2]
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2243      	movs	r2, #67	@ 0x43
 800936a:	2101      	movs	r1, #1
 800936c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2244      	movs	r2, #68	@ 0x44
 8009372:	2101      	movs	r1, #1
 8009374:	5499      	strb	r1, [r3, r2]
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2245      	movs	r2, #69	@ 0x45
 800937a:	2101      	movs	r1, #1
 800937c:	5499      	strb	r1, [r3, r2]
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2246      	movs	r2, #70	@ 0x46
 8009382:	2101      	movs	r1, #1
 8009384:	5499      	strb	r1, [r3, r2]
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2247      	movs	r2, #71	@ 0x47
 800938a:	2101      	movs	r1, #1
 800938c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	223d      	movs	r2, #61	@ 0x3d
 8009392:	2101      	movs	r1, #1
 8009394:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009396:	2300      	movs	r3, #0
}
 8009398:	0018      	movs	r0, r3
 800939a:	46bd      	mov	sp, r7
 800939c:	b002      	add	sp, #8
 800939e:	bd80      	pop	{r7, pc}

080093a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b084      	sub	sp, #16
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
 80093a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d108      	bne.n	80093c2 <HAL_TIM_PWM_Start+0x22>
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	223e      	movs	r2, #62	@ 0x3e
 80093b4:	5c9b      	ldrb	r3, [r3, r2]
 80093b6:	b2db      	uxtb	r3, r3
 80093b8:	3b01      	subs	r3, #1
 80093ba:	1e5a      	subs	r2, r3, #1
 80093bc:	4193      	sbcs	r3, r2
 80093be:	b2db      	uxtb	r3, r3
 80093c0:	e037      	b.n	8009432 <HAL_TIM_PWM_Start+0x92>
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	2b04      	cmp	r3, #4
 80093c6:	d108      	bne.n	80093da <HAL_TIM_PWM_Start+0x3a>
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	223f      	movs	r2, #63	@ 0x3f
 80093cc:	5c9b      	ldrb	r3, [r3, r2]
 80093ce:	b2db      	uxtb	r3, r3
 80093d0:	3b01      	subs	r3, #1
 80093d2:	1e5a      	subs	r2, r3, #1
 80093d4:	4193      	sbcs	r3, r2
 80093d6:	b2db      	uxtb	r3, r3
 80093d8:	e02b      	b.n	8009432 <HAL_TIM_PWM_Start+0x92>
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	2b08      	cmp	r3, #8
 80093de:	d108      	bne.n	80093f2 <HAL_TIM_PWM_Start+0x52>
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2240      	movs	r2, #64	@ 0x40
 80093e4:	5c9b      	ldrb	r3, [r3, r2]
 80093e6:	b2db      	uxtb	r3, r3
 80093e8:	3b01      	subs	r3, #1
 80093ea:	1e5a      	subs	r2, r3, #1
 80093ec:	4193      	sbcs	r3, r2
 80093ee:	b2db      	uxtb	r3, r3
 80093f0:	e01f      	b.n	8009432 <HAL_TIM_PWM_Start+0x92>
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	2b0c      	cmp	r3, #12
 80093f6:	d108      	bne.n	800940a <HAL_TIM_PWM_Start+0x6a>
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2241      	movs	r2, #65	@ 0x41
 80093fc:	5c9b      	ldrb	r3, [r3, r2]
 80093fe:	b2db      	uxtb	r3, r3
 8009400:	3b01      	subs	r3, #1
 8009402:	1e5a      	subs	r2, r3, #1
 8009404:	4193      	sbcs	r3, r2
 8009406:	b2db      	uxtb	r3, r3
 8009408:	e013      	b.n	8009432 <HAL_TIM_PWM_Start+0x92>
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	2b10      	cmp	r3, #16
 800940e:	d108      	bne.n	8009422 <HAL_TIM_PWM_Start+0x82>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2242      	movs	r2, #66	@ 0x42
 8009414:	5c9b      	ldrb	r3, [r3, r2]
 8009416:	b2db      	uxtb	r3, r3
 8009418:	3b01      	subs	r3, #1
 800941a:	1e5a      	subs	r2, r3, #1
 800941c:	4193      	sbcs	r3, r2
 800941e:	b2db      	uxtb	r3, r3
 8009420:	e007      	b.n	8009432 <HAL_TIM_PWM_Start+0x92>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2243      	movs	r2, #67	@ 0x43
 8009426:	5c9b      	ldrb	r3, [r3, r2]
 8009428:	b2db      	uxtb	r3, r3
 800942a:	3b01      	subs	r3, #1
 800942c:	1e5a      	subs	r2, r3, #1
 800942e:	4193      	sbcs	r3, r2
 8009430:	b2db      	uxtb	r3, r3
 8009432:	2b00      	cmp	r3, #0
 8009434:	d001      	beq.n	800943a <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8009436:	2301      	movs	r3, #1
 8009438:	e081      	b.n	800953e <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d104      	bne.n	800944a <HAL_TIM_PWM_Start+0xaa>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	223e      	movs	r2, #62	@ 0x3e
 8009444:	2102      	movs	r1, #2
 8009446:	5499      	strb	r1, [r3, r2]
 8009448:	e023      	b.n	8009492 <HAL_TIM_PWM_Start+0xf2>
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	2b04      	cmp	r3, #4
 800944e:	d104      	bne.n	800945a <HAL_TIM_PWM_Start+0xba>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	223f      	movs	r2, #63	@ 0x3f
 8009454:	2102      	movs	r1, #2
 8009456:	5499      	strb	r1, [r3, r2]
 8009458:	e01b      	b.n	8009492 <HAL_TIM_PWM_Start+0xf2>
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	2b08      	cmp	r3, #8
 800945e:	d104      	bne.n	800946a <HAL_TIM_PWM_Start+0xca>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2240      	movs	r2, #64	@ 0x40
 8009464:	2102      	movs	r1, #2
 8009466:	5499      	strb	r1, [r3, r2]
 8009468:	e013      	b.n	8009492 <HAL_TIM_PWM_Start+0xf2>
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	2b0c      	cmp	r3, #12
 800946e:	d104      	bne.n	800947a <HAL_TIM_PWM_Start+0xda>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2241      	movs	r2, #65	@ 0x41
 8009474:	2102      	movs	r1, #2
 8009476:	5499      	strb	r1, [r3, r2]
 8009478:	e00b      	b.n	8009492 <HAL_TIM_PWM_Start+0xf2>
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	2b10      	cmp	r3, #16
 800947e:	d104      	bne.n	800948a <HAL_TIM_PWM_Start+0xea>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2242      	movs	r2, #66	@ 0x42
 8009484:	2102      	movs	r1, #2
 8009486:	5499      	strb	r1, [r3, r2]
 8009488:	e003      	b.n	8009492 <HAL_TIM_PWM_Start+0xf2>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2243      	movs	r2, #67	@ 0x43
 800948e:	2102      	movs	r1, #2
 8009490:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	6839      	ldr	r1, [r7, #0]
 8009498:	2201      	movs	r2, #1
 800949a:	0018      	movs	r0, r3
 800949c:	f000 fda6 	bl	8009fec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4a28      	ldr	r2, [pc, #160]	@ (8009548 <HAL_TIM_PWM_Start+0x1a8>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d009      	beq.n	80094be <HAL_TIM_PWM_Start+0x11e>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	4a27      	ldr	r2, [pc, #156]	@ (800954c <HAL_TIM_PWM_Start+0x1ac>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d004      	beq.n	80094be <HAL_TIM_PWM_Start+0x11e>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	4a25      	ldr	r2, [pc, #148]	@ (8009550 <HAL_TIM_PWM_Start+0x1b0>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d101      	bne.n	80094c2 <HAL_TIM_PWM_Start+0x122>
 80094be:	2301      	movs	r3, #1
 80094c0:	e000      	b.n	80094c4 <HAL_TIM_PWM_Start+0x124>
 80094c2:	2300      	movs	r3, #0
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d008      	beq.n	80094da <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	2180      	movs	r1, #128	@ 0x80
 80094d4:	0209      	lsls	r1, r1, #8
 80094d6:	430a      	orrs	r2, r1
 80094d8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	4a1a      	ldr	r2, [pc, #104]	@ (8009548 <HAL_TIM_PWM_Start+0x1a8>)
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d00a      	beq.n	80094fa <HAL_TIM_PWM_Start+0x15a>
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681a      	ldr	r2, [r3, #0]
 80094e8:	2380      	movs	r3, #128	@ 0x80
 80094ea:	05db      	lsls	r3, r3, #23
 80094ec:	429a      	cmp	r2, r3
 80094ee:	d004      	beq.n	80094fa <HAL_TIM_PWM_Start+0x15a>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	4a17      	ldr	r2, [pc, #92]	@ (8009554 <HAL_TIM_PWM_Start+0x1b4>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d116      	bne.n	8009528 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	689b      	ldr	r3, [r3, #8]
 8009500:	4a15      	ldr	r2, [pc, #84]	@ (8009558 <HAL_TIM_PWM_Start+0x1b8>)
 8009502:	4013      	ands	r3, r2
 8009504:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	2b06      	cmp	r3, #6
 800950a:	d016      	beq.n	800953a <HAL_TIM_PWM_Start+0x19a>
 800950c:	68fa      	ldr	r2, [r7, #12]
 800950e:	2380      	movs	r3, #128	@ 0x80
 8009510:	025b      	lsls	r3, r3, #9
 8009512:	429a      	cmp	r2, r3
 8009514:	d011      	beq.n	800953a <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	681a      	ldr	r2, [r3, #0]
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	2101      	movs	r1, #1
 8009522:	430a      	orrs	r2, r1
 8009524:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009526:	e008      	b.n	800953a <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	681a      	ldr	r2, [r3, #0]
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	2101      	movs	r1, #1
 8009534:	430a      	orrs	r2, r1
 8009536:	601a      	str	r2, [r3, #0]
 8009538:	e000      	b.n	800953c <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800953a:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800953c:	2300      	movs	r3, #0
}
 800953e:	0018      	movs	r0, r3
 8009540:	46bd      	mov	sp, r7
 8009542:	b004      	add	sp, #16
 8009544:	bd80      	pop	{r7, pc}
 8009546:	46c0      	nop			@ (mov r8, r8)
 8009548:	40012c00 	.word	0x40012c00
 800954c:	40014400 	.word	0x40014400
 8009550:	40014800 	.word	0x40014800
 8009554:	40000400 	.word	0x40000400
 8009558:	00010007 	.word	0x00010007

0800955c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b084      	sub	sp, #16
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	68db      	ldr	r3, [r3, #12]
 800956a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	691b      	ldr	r3, [r3, #16]
 8009572:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	2202      	movs	r2, #2
 8009578:	4013      	ands	r3, r2
 800957a:	d021      	beq.n	80095c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	2202      	movs	r2, #2
 8009580:	4013      	ands	r3, r2
 8009582:	d01d      	beq.n	80095c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	2203      	movs	r2, #3
 800958a:	4252      	negs	r2, r2
 800958c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2201      	movs	r2, #1
 8009592:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	699b      	ldr	r3, [r3, #24]
 800959a:	2203      	movs	r2, #3
 800959c:	4013      	ands	r3, r2
 800959e:	d004      	beq.n	80095aa <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	0018      	movs	r0, r3
 80095a4:	f000 f9ea 	bl	800997c <HAL_TIM_IC_CaptureCallback>
 80095a8:	e007      	b.n	80095ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	0018      	movs	r0, r3
 80095ae:	f000 f9dd 	bl	800996c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	0018      	movs	r0, r3
 80095b6:	f000 f9e9 	bl	800998c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2200      	movs	r2, #0
 80095be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	2204      	movs	r2, #4
 80095c4:	4013      	ands	r3, r2
 80095c6:	d022      	beq.n	800960e <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	2204      	movs	r2, #4
 80095cc:	4013      	ands	r3, r2
 80095ce:	d01e      	beq.n	800960e <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	2205      	movs	r2, #5
 80095d6:	4252      	negs	r2, r2
 80095d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2202      	movs	r2, #2
 80095de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	699a      	ldr	r2, [r3, #24]
 80095e6:	23c0      	movs	r3, #192	@ 0xc0
 80095e8:	009b      	lsls	r3, r3, #2
 80095ea:	4013      	ands	r3, r2
 80095ec:	d004      	beq.n	80095f8 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	0018      	movs	r0, r3
 80095f2:	f000 f9c3 	bl	800997c <HAL_TIM_IC_CaptureCallback>
 80095f6:	e007      	b.n	8009608 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	0018      	movs	r0, r3
 80095fc:	f000 f9b6 	bl	800996c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	0018      	movs	r0, r3
 8009604:	f000 f9c2 	bl	800998c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2200      	movs	r2, #0
 800960c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	2208      	movs	r2, #8
 8009612:	4013      	ands	r3, r2
 8009614:	d021      	beq.n	800965a <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	2208      	movs	r2, #8
 800961a:	4013      	ands	r3, r2
 800961c:	d01d      	beq.n	800965a <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	2209      	movs	r2, #9
 8009624:	4252      	negs	r2, r2
 8009626:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2204      	movs	r2, #4
 800962c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	69db      	ldr	r3, [r3, #28]
 8009634:	2203      	movs	r2, #3
 8009636:	4013      	ands	r3, r2
 8009638:	d004      	beq.n	8009644 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	0018      	movs	r0, r3
 800963e:	f000 f99d 	bl	800997c <HAL_TIM_IC_CaptureCallback>
 8009642:	e007      	b.n	8009654 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	0018      	movs	r0, r3
 8009648:	f000 f990 	bl	800996c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	0018      	movs	r0, r3
 8009650:	f000 f99c 	bl	800998c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2200      	movs	r2, #0
 8009658:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	2210      	movs	r2, #16
 800965e:	4013      	ands	r3, r2
 8009660:	d022      	beq.n	80096a8 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	2210      	movs	r2, #16
 8009666:	4013      	ands	r3, r2
 8009668:	d01e      	beq.n	80096a8 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	2211      	movs	r2, #17
 8009670:	4252      	negs	r2, r2
 8009672:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2208      	movs	r2, #8
 8009678:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	69da      	ldr	r2, [r3, #28]
 8009680:	23c0      	movs	r3, #192	@ 0xc0
 8009682:	009b      	lsls	r3, r3, #2
 8009684:	4013      	ands	r3, r2
 8009686:	d004      	beq.n	8009692 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	0018      	movs	r0, r3
 800968c:	f000 f976 	bl	800997c <HAL_TIM_IC_CaptureCallback>
 8009690:	e007      	b.n	80096a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	0018      	movs	r0, r3
 8009696:	f000 f969 	bl	800996c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	0018      	movs	r0, r3
 800969e:	f000 f975 	bl	800998c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2200      	movs	r2, #0
 80096a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	2201      	movs	r2, #1
 80096ac:	4013      	ands	r3, r2
 80096ae:	d00c      	beq.n	80096ca <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	2201      	movs	r2, #1
 80096b4:	4013      	ands	r3, r2
 80096b6:	d008      	beq.n	80096ca <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	2202      	movs	r2, #2
 80096be:	4252      	negs	r2, r2
 80096c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	0018      	movs	r0, r3
 80096c6:	f7f8 fd05 	bl	80020d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	2280      	movs	r2, #128	@ 0x80
 80096ce:	4013      	ands	r3, r2
 80096d0:	d104      	bne.n	80096dc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80096d2:	68ba      	ldr	r2, [r7, #8]
 80096d4:	2380      	movs	r3, #128	@ 0x80
 80096d6:	019b      	lsls	r3, r3, #6
 80096d8:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80096da:	d00b      	beq.n	80096f4 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	2280      	movs	r2, #128	@ 0x80
 80096e0:	4013      	ands	r3, r2
 80096e2:	d007      	beq.n	80096f4 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	4a1e      	ldr	r2, [pc, #120]	@ (8009764 <HAL_TIM_IRQHandler+0x208>)
 80096ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	0018      	movs	r0, r3
 80096f0:	f000 fdac 	bl	800a24c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80096f4:	68ba      	ldr	r2, [r7, #8]
 80096f6:	2380      	movs	r3, #128	@ 0x80
 80096f8:	005b      	lsls	r3, r3, #1
 80096fa:	4013      	ands	r3, r2
 80096fc:	d00b      	beq.n	8009716 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	2280      	movs	r2, #128	@ 0x80
 8009702:	4013      	ands	r3, r2
 8009704:	d007      	beq.n	8009716 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4a17      	ldr	r2, [pc, #92]	@ (8009768 <HAL_TIM_IRQHandler+0x20c>)
 800970c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	0018      	movs	r0, r3
 8009712:	f000 fda3 	bl	800a25c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	2240      	movs	r2, #64	@ 0x40
 800971a:	4013      	ands	r3, r2
 800971c:	d00c      	beq.n	8009738 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	2240      	movs	r2, #64	@ 0x40
 8009722:	4013      	ands	r3, r2
 8009724:	d008      	beq.n	8009738 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	2241      	movs	r2, #65	@ 0x41
 800972c:	4252      	negs	r2, r2
 800972e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	0018      	movs	r0, r3
 8009734:	f000 f932 	bl	800999c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	2220      	movs	r2, #32
 800973c:	4013      	ands	r3, r2
 800973e:	d00c      	beq.n	800975a <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	2220      	movs	r2, #32
 8009744:	4013      	ands	r3, r2
 8009746:	d008      	beq.n	800975a <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	2221      	movs	r2, #33	@ 0x21
 800974e:	4252      	negs	r2, r2
 8009750:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	0018      	movs	r0, r3
 8009756:	f000 fd71 	bl	800a23c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800975a:	46c0      	nop			@ (mov r8, r8)
 800975c:	46bd      	mov	sp, r7
 800975e:	b004      	add	sp, #16
 8009760:	bd80      	pop	{r7, pc}
 8009762:	46c0      	nop			@ (mov r8, r8)
 8009764:	ffffdf7f 	.word	0xffffdf7f
 8009768:	fffffeff 	.word	0xfffffeff

0800976c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b086      	sub	sp, #24
 8009770:	af00      	add	r7, sp, #0
 8009772:	60f8      	str	r0, [r7, #12]
 8009774:	60b9      	str	r1, [r7, #8]
 8009776:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009778:	2317      	movs	r3, #23
 800977a:	18fb      	adds	r3, r7, r3
 800977c:	2200      	movs	r2, #0
 800977e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	223c      	movs	r2, #60	@ 0x3c
 8009784:	5c9b      	ldrb	r3, [r3, r2]
 8009786:	2b01      	cmp	r3, #1
 8009788:	d101      	bne.n	800978e <HAL_TIM_PWM_ConfigChannel+0x22>
 800978a:	2302      	movs	r3, #2
 800978c:	e0e5      	b.n	800995a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	223c      	movs	r2, #60	@ 0x3c
 8009792:	2101      	movs	r1, #1
 8009794:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2b14      	cmp	r3, #20
 800979a:	d900      	bls.n	800979e <HAL_TIM_PWM_ConfigChannel+0x32>
 800979c:	e0d1      	b.n	8009942 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	009a      	lsls	r2, r3, #2
 80097a2:	4b70      	ldr	r3, [pc, #448]	@ (8009964 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80097a4:	18d3      	adds	r3, r2, r3
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	68ba      	ldr	r2, [r7, #8]
 80097b0:	0011      	movs	r1, r2
 80097b2:	0018      	movs	r0, r3
 80097b4:	f000 f97e 	bl	8009ab4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	699a      	ldr	r2, [r3, #24]
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	2108      	movs	r1, #8
 80097c4:	430a      	orrs	r2, r1
 80097c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	699a      	ldr	r2, [r3, #24]
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	2104      	movs	r1, #4
 80097d4:	438a      	bics	r2, r1
 80097d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	6999      	ldr	r1, [r3, #24]
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	691a      	ldr	r2, [r3, #16]
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	430a      	orrs	r2, r1
 80097e8:	619a      	str	r2, [r3, #24]
      break;
 80097ea:	e0af      	b.n	800994c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	68ba      	ldr	r2, [r7, #8]
 80097f2:	0011      	movs	r1, r2
 80097f4:	0018      	movs	r0, r3
 80097f6:	f000 f9dd 	bl	8009bb4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	699a      	ldr	r2, [r3, #24]
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	2180      	movs	r1, #128	@ 0x80
 8009806:	0109      	lsls	r1, r1, #4
 8009808:	430a      	orrs	r2, r1
 800980a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	699a      	ldr	r2, [r3, #24]
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	4954      	ldr	r1, [pc, #336]	@ (8009968 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8009818:	400a      	ands	r2, r1
 800981a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	6999      	ldr	r1, [r3, #24]
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	691b      	ldr	r3, [r3, #16]
 8009826:	021a      	lsls	r2, r3, #8
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	430a      	orrs	r2, r1
 800982e:	619a      	str	r2, [r3, #24]
      break;
 8009830:	e08c      	b.n	800994c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	68ba      	ldr	r2, [r7, #8]
 8009838:	0011      	movs	r1, r2
 800983a:	0018      	movs	r0, r3
 800983c:	f000 fa38 	bl	8009cb0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	69da      	ldr	r2, [r3, #28]
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	2108      	movs	r1, #8
 800984c:	430a      	orrs	r2, r1
 800984e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	69da      	ldr	r2, [r3, #28]
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	2104      	movs	r1, #4
 800985c:	438a      	bics	r2, r1
 800985e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	69d9      	ldr	r1, [r3, #28]
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	691a      	ldr	r2, [r3, #16]
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	430a      	orrs	r2, r1
 8009870:	61da      	str	r2, [r3, #28]
      break;
 8009872:	e06b      	b.n	800994c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	68ba      	ldr	r2, [r7, #8]
 800987a:	0011      	movs	r1, r2
 800987c:	0018      	movs	r0, r3
 800987e:	f000 fa99 	bl	8009db4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	69da      	ldr	r2, [r3, #28]
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	2180      	movs	r1, #128	@ 0x80
 800988e:	0109      	lsls	r1, r1, #4
 8009890:	430a      	orrs	r2, r1
 8009892:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	69da      	ldr	r2, [r3, #28]
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	4932      	ldr	r1, [pc, #200]	@ (8009968 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80098a0:	400a      	ands	r2, r1
 80098a2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	69d9      	ldr	r1, [r3, #28]
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	691b      	ldr	r3, [r3, #16]
 80098ae:	021a      	lsls	r2, r3, #8
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	430a      	orrs	r2, r1
 80098b6:	61da      	str	r2, [r3, #28]
      break;
 80098b8:	e048      	b.n	800994c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	68ba      	ldr	r2, [r7, #8]
 80098c0:	0011      	movs	r1, r2
 80098c2:	0018      	movs	r0, r3
 80098c4:	f000 fada 	bl	8009e7c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	2108      	movs	r1, #8
 80098d4:	430a      	orrs	r2, r1
 80098d6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	2104      	movs	r1, #4
 80098e4:	438a      	bics	r2, r1
 80098e6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	691a      	ldr	r2, [r3, #16]
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	430a      	orrs	r2, r1
 80098f8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80098fa:	e027      	b.n	800994c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	68ba      	ldr	r2, [r7, #8]
 8009902:	0011      	movs	r1, r2
 8009904:	0018      	movs	r0, r3
 8009906:	f000 fb13 	bl	8009f30 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	2180      	movs	r1, #128	@ 0x80
 8009916:	0109      	lsls	r1, r1, #4
 8009918:	430a      	orrs	r2, r1
 800991a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	4910      	ldr	r1, [pc, #64]	@ (8009968 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8009928:	400a      	ands	r2, r1
 800992a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	691b      	ldr	r3, [r3, #16]
 8009936:	021a      	lsls	r2, r3, #8
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	430a      	orrs	r2, r1
 800993e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009940:	e004      	b.n	800994c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8009942:	2317      	movs	r3, #23
 8009944:	18fb      	adds	r3, r7, r3
 8009946:	2201      	movs	r2, #1
 8009948:	701a      	strb	r2, [r3, #0]
      break;
 800994a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	223c      	movs	r2, #60	@ 0x3c
 8009950:	2100      	movs	r1, #0
 8009952:	5499      	strb	r1, [r3, r2]

  return status;
 8009954:	2317      	movs	r3, #23
 8009956:	18fb      	adds	r3, r7, r3
 8009958:	781b      	ldrb	r3, [r3, #0]
}
 800995a:	0018      	movs	r0, r3
 800995c:	46bd      	mov	sp, r7
 800995e:	b006      	add	sp, #24
 8009960:	bd80      	pop	{r7, pc}
 8009962:	46c0      	nop			@ (mov r8, r8)
 8009964:	0800c530 	.word	0x0800c530
 8009968:	fffffbff 	.word	0xfffffbff

0800996c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b082      	sub	sp, #8
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009974:	46c0      	nop			@ (mov r8, r8)
 8009976:	46bd      	mov	sp, r7
 8009978:	b002      	add	sp, #8
 800997a:	bd80      	pop	{r7, pc}

0800997c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b082      	sub	sp, #8
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009984:	46c0      	nop			@ (mov r8, r8)
 8009986:	46bd      	mov	sp, r7
 8009988:	b002      	add	sp, #8
 800998a:	bd80      	pop	{r7, pc}

0800998c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b082      	sub	sp, #8
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009994:	46c0      	nop			@ (mov r8, r8)
 8009996:	46bd      	mov	sp, r7
 8009998:	b002      	add	sp, #8
 800999a:	bd80      	pop	{r7, pc}

0800999c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b082      	sub	sp, #8
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80099a4:	46c0      	nop			@ (mov r8, r8)
 80099a6:	46bd      	mov	sp, r7
 80099a8:	b002      	add	sp, #8
 80099aa:	bd80      	pop	{r7, pc}

080099ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b084      	sub	sp, #16
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
 80099b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	4a37      	ldr	r2, [pc, #220]	@ (8009a9c <TIM_Base_SetConfig+0xf0>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d008      	beq.n	80099d6 <TIM_Base_SetConfig+0x2a>
 80099c4:	687a      	ldr	r2, [r7, #4]
 80099c6:	2380      	movs	r3, #128	@ 0x80
 80099c8:	05db      	lsls	r3, r3, #23
 80099ca:	429a      	cmp	r2, r3
 80099cc:	d003      	beq.n	80099d6 <TIM_Base_SetConfig+0x2a>
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	4a33      	ldr	r2, [pc, #204]	@ (8009aa0 <TIM_Base_SetConfig+0xf4>)
 80099d2:	4293      	cmp	r3, r2
 80099d4:	d108      	bne.n	80099e8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	2270      	movs	r2, #112	@ 0x70
 80099da:	4393      	bics	r3, r2
 80099dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	685b      	ldr	r3, [r3, #4]
 80099e2:	68fa      	ldr	r2, [r7, #12]
 80099e4:	4313      	orrs	r3, r2
 80099e6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	4a2c      	ldr	r2, [pc, #176]	@ (8009a9c <TIM_Base_SetConfig+0xf0>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d014      	beq.n	8009a1a <TIM_Base_SetConfig+0x6e>
 80099f0:	687a      	ldr	r2, [r7, #4]
 80099f2:	2380      	movs	r3, #128	@ 0x80
 80099f4:	05db      	lsls	r3, r3, #23
 80099f6:	429a      	cmp	r2, r3
 80099f8:	d00f      	beq.n	8009a1a <TIM_Base_SetConfig+0x6e>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	4a28      	ldr	r2, [pc, #160]	@ (8009aa0 <TIM_Base_SetConfig+0xf4>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d00b      	beq.n	8009a1a <TIM_Base_SetConfig+0x6e>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	4a27      	ldr	r2, [pc, #156]	@ (8009aa4 <TIM_Base_SetConfig+0xf8>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d007      	beq.n	8009a1a <TIM_Base_SetConfig+0x6e>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	4a26      	ldr	r2, [pc, #152]	@ (8009aa8 <TIM_Base_SetConfig+0xfc>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d003      	beq.n	8009a1a <TIM_Base_SetConfig+0x6e>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	4a25      	ldr	r2, [pc, #148]	@ (8009aac <TIM_Base_SetConfig+0x100>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d108      	bne.n	8009a2c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	4a24      	ldr	r2, [pc, #144]	@ (8009ab0 <TIM_Base_SetConfig+0x104>)
 8009a1e:	4013      	ands	r3, r2
 8009a20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	68db      	ldr	r3, [r3, #12]
 8009a26:	68fa      	ldr	r2, [r7, #12]
 8009a28:	4313      	orrs	r3, r2
 8009a2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	2280      	movs	r2, #128	@ 0x80
 8009a30:	4393      	bics	r3, r2
 8009a32:	001a      	movs	r2, r3
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	695b      	ldr	r3, [r3, #20]
 8009a38:	4313      	orrs	r3, r2
 8009a3a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	68fa      	ldr	r2, [r7, #12]
 8009a40:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	689a      	ldr	r2, [r3, #8]
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	681a      	ldr	r2, [r3, #0]
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	4a11      	ldr	r2, [pc, #68]	@ (8009a9c <TIM_Base_SetConfig+0xf0>)
 8009a56:	4293      	cmp	r3, r2
 8009a58:	d007      	beq.n	8009a6a <TIM_Base_SetConfig+0xbe>
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	4a12      	ldr	r2, [pc, #72]	@ (8009aa8 <TIM_Base_SetConfig+0xfc>)
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	d003      	beq.n	8009a6a <TIM_Base_SetConfig+0xbe>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	4a11      	ldr	r2, [pc, #68]	@ (8009aac <TIM_Base_SetConfig+0x100>)
 8009a66:	4293      	cmp	r3, r2
 8009a68:	d103      	bne.n	8009a72 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	691a      	ldr	r2, [r3, #16]
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2201      	movs	r2, #1
 8009a76:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	691b      	ldr	r3, [r3, #16]
 8009a7c:	2201      	movs	r2, #1
 8009a7e:	4013      	ands	r3, r2
 8009a80:	2b01      	cmp	r3, #1
 8009a82:	d106      	bne.n	8009a92 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	691b      	ldr	r3, [r3, #16]
 8009a88:	2201      	movs	r2, #1
 8009a8a:	4393      	bics	r3, r2
 8009a8c:	001a      	movs	r2, r3
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	611a      	str	r2, [r3, #16]
  }
}
 8009a92:	46c0      	nop			@ (mov r8, r8)
 8009a94:	46bd      	mov	sp, r7
 8009a96:	b004      	add	sp, #16
 8009a98:	bd80      	pop	{r7, pc}
 8009a9a:	46c0      	nop			@ (mov r8, r8)
 8009a9c:	40012c00 	.word	0x40012c00
 8009aa0:	40000400 	.word	0x40000400
 8009aa4:	40002000 	.word	0x40002000
 8009aa8:	40014400 	.word	0x40014400
 8009aac:	40014800 	.word	0x40014800
 8009ab0:	fffffcff 	.word	0xfffffcff

08009ab4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b086      	sub	sp, #24
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6a1b      	ldr	r3, [r3, #32]
 8009ac2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6a1b      	ldr	r3, [r3, #32]
 8009ac8:	2201      	movs	r2, #1
 8009aca:	4393      	bics	r3, r2
 8009acc:	001a      	movs	r2, r3
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	685b      	ldr	r3, [r3, #4]
 8009ad6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	699b      	ldr	r3, [r3, #24]
 8009adc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	4a2e      	ldr	r2, [pc, #184]	@ (8009b9c <TIM_OC1_SetConfig+0xe8>)
 8009ae2:	4013      	ands	r3, r2
 8009ae4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2203      	movs	r2, #3
 8009aea:	4393      	bics	r3, r2
 8009aec:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	68fa      	ldr	r2, [r7, #12]
 8009af4:	4313      	orrs	r3, r2
 8009af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009af8:	697b      	ldr	r3, [r7, #20]
 8009afa:	2202      	movs	r2, #2
 8009afc:	4393      	bics	r3, r2
 8009afe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	689b      	ldr	r3, [r3, #8]
 8009b04:	697a      	ldr	r2, [r7, #20]
 8009b06:	4313      	orrs	r3, r2
 8009b08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	4a24      	ldr	r2, [pc, #144]	@ (8009ba0 <TIM_OC1_SetConfig+0xec>)
 8009b0e:	4293      	cmp	r3, r2
 8009b10:	d007      	beq.n	8009b22 <TIM_OC1_SetConfig+0x6e>
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	4a23      	ldr	r2, [pc, #140]	@ (8009ba4 <TIM_OC1_SetConfig+0xf0>)
 8009b16:	4293      	cmp	r3, r2
 8009b18:	d003      	beq.n	8009b22 <TIM_OC1_SetConfig+0x6e>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	4a22      	ldr	r2, [pc, #136]	@ (8009ba8 <TIM_OC1_SetConfig+0xf4>)
 8009b1e:	4293      	cmp	r3, r2
 8009b20:	d10c      	bne.n	8009b3c <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	2208      	movs	r2, #8
 8009b26:	4393      	bics	r3, r2
 8009b28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	68db      	ldr	r3, [r3, #12]
 8009b2e:	697a      	ldr	r2, [r7, #20]
 8009b30:	4313      	orrs	r3, r2
 8009b32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	2204      	movs	r2, #4
 8009b38:	4393      	bics	r3, r2
 8009b3a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	4a18      	ldr	r2, [pc, #96]	@ (8009ba0 <TIM_OC1_SetConfig+0xec>)
 8009b40:	4293      	cmp	r3, r2
 8009b42:	d007      	beq.n	8009b54 <TIM_OC1_SetConfig+0xa0>
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	4a17      	ldr	r2, [pc, #92]	@ (8009ba4 <TIM_OC1_SetConfig+0xf0>)
 8009b48:	4293      	cmp	r3, r2
 8009b4a:	d003      	beq.n	8009b54 <TIM_OC1_SetConfig+0xa0>
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	4a16      	ldr	r2, [pc, #88]	@ (8009ba8 <TIM_OC1_SetConfig+0xf4>)
 8009b50:	4293      	cmp	r3, r2
 8009b52:	d111      	bne.n	8009b78 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009b54:	693b      	ldr	r3, [r7, #16]
 8009b56:	4a15      	ldr	r2, [pc, #84]	@ (8009bac <TIM_OC1_SetConfig+0xf8>)
 8009b58:	4013      	ands	r3, r2
 8009b5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009b5c:	693b      	ldr	r3, [r7, #16]
 8009b5e:	4a14      	ldr	r2, [pc, #80]	@ (8009bb0 <TIM_OC1_SetConfig+0xfc>)
 8009b60:	4013      	ands	r3, r2
 8009b62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	695b      	ldr	r3, [r3, #20]
 8009b68:	693a      	ldr	r2, [r7, #16]
 8009b6a:	4313      	orrs	r3, r2
 8009b6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	699b      	ldr	r3, [r3, #24]
 8009b72:	693a      	ldr	r2, [r7, #16]
 8009b74:	4313      	orrs	r3, r2
 8009b76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	693a      	ldr	r2, [r7, #16]
 8009b7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	68fa      	ldr	r2, [r7, #12]
 8009b82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	685a      	ldr	r2, [r3, #4]
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	697a      	ldr	r2, [r7, #20]
 8009b90:	621a      	str	r2, [r3, #32]
}
 8009b92:	46c0      	nop			@ (mov r8, r8)
 8009b94:	46bd      	mov	sp, r7
 8009b96:	b006      	add	sp, #24
 8009b98:	bd80      	pop	{r7, pc}
 8009b9a:	46c0      	nop			@ (mov r8, r8)
 8009b9c:	fffeff8f 	.word	0xfffeff8f
 8009ba0:	40012c00 	.word	0x40012c00
 8009ba4:	40014400 	.word	0x40014400
 8009ba8:	40014800 	.word	0x40014800
 8009bac:	fffffeff 	.word	0xfffffeff
 8009bb0:	fffffdff 	.word	0xfffffdff

08009bb4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b086      	sub	sp, #24
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
 8009bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6a1b      	ldr	r3, [r3, #32]
 8009bc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	6a1b      	ldr	r3, [r3, #32]
 8009bc8:	2210      	movs	r2, #16
 8009bca:	4393      	bics	r3, r2
 8009bcc:	001a      	movs	r2, r3
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	685b      	ldr	r3, [r3, #4]
 8009bd6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	699b      	ldr	r3, [r3, #24]
 8009bdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	4a2c      	ldr	r2, [pc, #176]	@ (8009c94 <TIM_OC2_SetConfig+0xe0>)
 8009be2:	4013      	ands	r3, r2
 8009be4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	4a2b      	ldr	r2, [pc, #172]	@ (8009c98 <TIM_OC2_SetConfig+0xe4>)
 8009bea:	4013      	ands	r3, r2
 8009bec:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	021b      	lsls	r3, r3, #8
 8009bf4:	68fa      	ldr	r2, [r7, #12]
 8009bf6:	4313      	orrs	r3, r2
 8009bf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009bfa:	697b      	ldr	r3, [r7, #20]
 8009bfc:	2220      	movs	r2, #32
 8009bfe:	4393      	bics	r3, r2
 8009c00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	689b      	ldr	r3, [r3, #8]
 8009c06:	011b      	lsls	r3, r3, #4
 8009c08:	697a      	ldr	r2, [r7, #20]
 8009c0a:	4313      	orrs	r3, r2
 8009c0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	4a22      	ldr	r2, [pc, #136]	@ (8009c9c <TIM_OC2_SetConfig+0xe8>)
 8009c12:	4293      	cmp	r3, r2
 8009c14:	d10d      	bne.n	8009c32 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	2280      	movs	r2, #128	@ 0x80
 8009c1a:	4393      	bics	r3, r2
 8009c1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	68db      	ldr	r3, [r3, #12]
 8009c22:	011b      	lsls	r3, r3, #4
 8009c24:	697a      	ldr	r2, [r7, #20]
 8009c26:	4313      	orrs	r3, r2
 8009c28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	2240      	movs	r2, #64	@ 0x40
 8009c2e:	4393      	bics	r3, r2
 8009c30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	4a19      	ldr	r2, [pc, #100]	@ (8009c9c <TIM_OC2_SetConfig+0xe8>)
 8009c36:	4293      	cmp	r3, r2
 8009c38:	d007      	beq.n	8009c4a <TIM_OC2_SetConfig+0x96>
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	4a18      	ldr	r2, [pc, #96]	@ (8009ca0 <TIM_OC2_SetConfig+0xec>)
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d003      	beq.n	8009c4a <TIM_OC2_SetConfig+0x96>
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	4a17      	ldr	r2, [pc, #92]	@ (8009ca4 <TIM_OC2_SetConfig+0xf0>)
 8009c46:	4293      	cmp	r3, r2
 8009c48:	d113      	bne.n	8009c72 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009c4a:	693b      	ldr	r3, [r7, #16]
 8009c4c:	4a16      	ldr	r2, [pc, #88]	@ (8009ca8 <TIM_OC2_SetConfig+0xf4>)
 8009c4e:	4013      	ands	r3, r2
 8009c50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009c52:	693b      	ldr	r3, [r7, #16]
 8009c54:	4a15      	ldr	r2, [pc, #84]	@ (8009cac <TIM_OC2_SetConfig+0xf8>)
 8009c56:	4013      	ands	r3, r2
 8009c58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	695b      	ldr	r3, [r3, #20]
 8009c5e:	009b      	lsls	r3, r3, #2
 8009c60:	693a      	ldr	r2, [r7, #16]
 8009c62:	4313      	orrs	r3, r2
 8009c64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	699b      	ldr	r3, [r3, #24]
 8009c6a:	009b      	lsls	r3, r3, #2
 8009c6c:	693a      	ldr	r2, [r7, #16]
 8009c6e:	4313      	orrs	r3, r2
 8009c70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	693a      	ldr	r2, [r7, #16]
 8009c76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	68fa      	ldr	r2, [r7, #12]
 8009c7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	685a      	ldr	r2, [r3, #4]
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	697a      	ldr	r2, [r7, #20]
 8009c8a:	621a      	str	r2, [r3, #32]
}
 8009c8c:	46c0      	nop			@ (mov r8, r8)
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	b006      	add	sp, #24
 8009c92:	bd80      	pop	{r7, pc}
 8009c94:	feff8fff 	.word	0xfeff8fff
 8009c98:	fffffcff 	.word	0xfffffcff
 8009c9c:	40012c00 	.word	0x40012c00
 8009ca0:	40014400 	.word	0x40014400
 8009ca4:	40014800 	.word	0x40014800
 8009ca8:	fffffbff 	.word	0xfffffbff
 8009cac:	fffff7ff 	.word	0xfffff7ff

08009cb0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b086      	sub	sp, #24
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
 8009cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6a1b      	ldr	r3, [r3, #32]
 8009cbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	6a1b      	ldr	r3, [r3, #32]
 8009cc4:	4a31      	ldr	r2, [pc, #196]	@ (8009d8c <TIM_OC3_SetConfig+0xdc>)
 8009cc6:	401a      	ands	r2, r3
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	685b      	ldr	r3, [r3, #4]
 8009cd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	69db      	ldr	r3, [r3, #28]
 8009cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	4a2d      	ldr	r2, [pc, #180]	@ (8009d90 <TIM_OC3_SetConfig+0xe0>)
 8009cdc:	4013      	ands	r3, r2
 8009cde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	2203      	movs	r2, #3
 8009ce4:	4393      	bics	r3, r2
 8009ce6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	68fa      	ldr	r2, [r7, #12]
 8009cee:	4313      	orrs	r3, r2
 8009cf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	4a27      	ldr	r2, [pc, #156]	@ (8009d94 <TIM_OC3_SetConfig+0xe4>)
 8009cf6:	4013      	ands	r3, r2
 8009cf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	689b      	ldr	r3, [r3, #8]
 8009cfe:	021b      	lsls	r3, r3, #8
 8009d00:	697a      	ldr	r2, [r7, #20]
 8009d02:	4313      	orrs	r3, r2
 8009d04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	4a23      	ldr	r2, [pc, #140]	@ (8009d98 <TIM_OC3_SetConfig+0xe8>)
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	d10d      	bne.n	8009d2a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009d0e:	697b      	ldr	r3, [r7, #20]
 8009d10:	4a22      	ldr	r2, [pc, #136]	@ (8009d9c <TIM_OC3_SetConfig+0xec>)
 8009d12:	4013      	ands	r3, r2
 8009d14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	68db      	ldr	r3, [r3, #12]
 8009d1a:	021b      	lsls	r3, r3, #8
 8009d1c:	697a      	ldr	r2, [r7, #20]
 8009d1e:	4313      	orrs	r3, r2
 8009d20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009d22:	697b      	ldr	r3, [r7, #20]
 8009d24:	4a1e      	ldr	r2, [pc, #120]	@ (8009da0 <TIM_OC3_SetConfig+0xf0>)
 8009d26:	4013      	ands	r3, r2
 8009d28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	4a1a      	ldr	r2, [pc, #104]	@ (8009d98 <TIM_OC3_SetConfig+0xe8>)
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d007      	beq.n	8009d42 <TIM_OC3_SetConfig+0x92>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	4a1b      	ldr	r2, [pc, #108]	@ (8009da4 <TIM_OC3_SetConfig+0xf4>)
 8009d36:	4293      	cmp	r3, r2
 8009d38:	d003      	beq.n	8009d42 <TIM_OC3_SetConfig+0x92>
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	4a1a      	ldr	r2, [pc, #104]	@ (8009da8 <TIM_OC3_SetConfig+0xf8>)
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	d113      	bne.n	8009d6a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009d42:	693b      	ldr	r3, [r7, #16]
 8009d44:	4a19      	ldr	r2, [pc, #100]	@ (8009dac <TIM_OC3_SetConfig+0xfc>)
 8009d46:	4013      	ands	r3, r2
 8009d48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009d4a:	693b      	ldr	r3, [r7, #16]
 8009d4c:	4a18      	ldr	r2, [pc, #96]	@ (8009db0 <TIM_OC3_SetConfig+0x100>)
 8009d4e:	4013      	ands	r3, r2
 8009d50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	695b      	ldr	r3, [r3, #20]
 8009d56:	011b      	lsls	r3, r3, #4
 8009d58:	693a      	ldr	r2, [r7, #16]
 8009d5a:	4313      	orrs	r3, r2
 8009d5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	699b      	ldr	r3, [r3, #24]
 8009d62:	011b      	lsls	r3, r3, #4
 8009d64:	693a      	ldr	r2, [r7, #16]
 8009d66:	4313      	orrs	r3, r2
 8009d68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	693a      	ldr	r2, [r7, #16]
 8009d6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	68fa      	ldr	r2, [r7, #12]
 8009d74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	685a      	ldr	r2, [r3, #4]
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	697a      	ldr	r2, [r7, #20]
 8009d82:	621a      	str	r2, [r3, #32]
}
 8009d84:	46c0      	nop			@ (mov r8, r8)
 8009d86:	46bd      	mov	sp, r7
 8009d88:	b006      	add	sp, #24
 8009d8a:	bd80      	pop	{r7, pc}
 8009d8c:	fffffeff 	.word	0xfffffeff
 8009d90:	fffeff8f 	.word	0xfffeff8f
 8009d94:	fffffdff 	.word	0xfffffdff
 8009d98:	40012c00 	.word	0x40012c00
 8009d9c:	fffff7ff 	.word	0xfffff7ff
 8009da0:	fffffbff 	.word	0xfffffbff
 8009da4:	40014400 	.word	0x40014400
 8009da8:	40014800 	.word	0x40014800
 8009dac:	ffffefff 	.word	0xffffefff
 8009db0:	ffffdfff 	.word	0xffffdfff

08009db4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b086      	sub	sp, #24
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
 8009dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6a1b      	ldr	r3, [r3, #32]
 8009dc2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6a1b      	ldr	r3, [r3, #32]
 8009dc8:	4a24      	ldr	r2, [pc, #144]	@ (8009e5c <TIM_OC4_SetConfig+0xa8>)
 8009dca:	401a      	ands	r2, r3
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	685b      	ldr	r3, [r3, #4]
 8009dd4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	69db      	ldr	r3, [r3, #28]
 8009dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	4a20      	ldr	r2, [pc, #128]	@ (8009e60 <TIM_OC4_SetConfig+0xac>)
 8009de0:	4013      	ands	r3, r2
 8009de2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	4a1f      	ldr	r2, [pc, #124]	@ (8009e64 <TIM_OC4_SetConfig+0xb0>)
 8009de8:	4013      	ands	r3, r2
 8009dea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	021b      	lsls	r3, r3, #8
 8009df2:	68fa      	ldr	r2, [r7, #12]
 8009df4:	4313      	orrs	r3, r2
 8009df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	4a1b      	ldr	r2, [pc, #108]	@ (8009e68 <TIM_OC4_SetConfig+0xb4>)
 8009dfc:	4013      	ands	r3, r2
 8009dfe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	689b      	ldr	r3, [r3, #8]
 8009e04:	031b      	lsls	r3, r3, #12
 8009e06:	693a      	ldr	r2, [r7, #16]
 8009e08:	4313      	orrs	r3, r2
 8009e0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	4a17      	ldr	r2, [pc, #92]	@ (8009e6c <TIM_OC4_SetConfig+0xb8>)
 8009e10:	4293      	cmp	r3, r2
 8009e12:	d007      	beq.n	8009e24 <TIM_OC4_SetConfig+0x70>
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	4a16      	ldr	r2, [pc, #88]	@ (8009e70 <TIM_OC4_SetConfig+0xbc>)
 8009e18:	4293      	cmp	r3, r2
 8009e1a:	d003      	beq.n	8009e24 <TIM_OC4_SetConfig+0x70>
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	4a15      	ldr	r2, [pc, #84]	@ (8009e74 <TIM_OC4_SetConfig+0xc0>)
 8009e20:	4293      	cmp	r3, r2
 8009e22:	d109      	bne.n	8009e38 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009e24:	697b      	ldr	r3, [r7, #20]
 8009e26:	4a14      	ldr	r2, [pc, #80]	@ (8009e78 <TIM_OC4_SetConfig+0xc4>)
 8009e28:	4013      	ands	r3, r2
 8009e2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	695b      	ldr	r3, [r3, #20]
 8009e30:	019b      	lsls	r3, r3, #6
 8009e32:	697a      	ldr	r2, [r7, #20]
 8009e34:	4313      	orrs	r3, r2
 8009e36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	697a      	ldr	r2, [r7, #20]
 8009e3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	68fa      	ldr	r2, [r7, #12]
 8009e42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	685a      	ldr	r2, [r3, #4]
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	693a      	ldr	r2, [r7, #16]
 8009e50:	621a      	str	r2, [r3, #32]
}
 8009e52:	46c0      	nop			@ (mov r8, r8)
 8009e54:	46bd      	mov	sp, r7
 8009e56:	b006      	add	sp, #24
 8009e58:	bd80      	pop	{r7, pc}
 8009e5a:	46c0      	nop			@ (mov r8, r8)
 8009e5c:	ffffefff 	.word	0xffffefff
 8009e60:	feff8fff 	.word	0xfeff8fff
 8009e64:	fffffcff 	.word	0xfffffcff
 8009e68:	ffffdfff 	.word	0xffffdfff
 8009e6c:	40012c00 	.word	0x40012c00
 8009e70:	40014400 	.word	0x40014400
 8009e74:	40014800 	.word	0x40014800
 8009e78:	ffffbfff 	.word	0xffffbfff

08009e7c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b086      	sub	sp, #24
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
 8009e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6a1b      	ldr	r3, [r3, #32]
 8009e8a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6a1b      	ldr	r3, [r3, #32]
 8009e90:	4a21      	ldr	r2, [pc, #132]	@ (8009f18 <TIM_OC5_SetConfig+0x9c>)
 8009e92:	401a      	ands	r2, r3
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	685b      	ldr	r3, [r3, #4]
 8009e9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	4a1d      	ldr	r2, [pc, #116]	@ (8009f1c <TIM_OC5_SetConfig+0xa0>)
 8009ea8:	4013      	ands	r3, r2
 8009eaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	68fa      	ldr	r2, [r7, #12]
 8009eb2:	4313      	orrs	r3, r2
 8009eb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009eb6:	693b      	ldr	r3, [r7, #16]
 8009eb8:	4a19      	ldr	r2, [pc, #100]	@ (8009f20 <TIM_OC5_SetConfig+0xa4>)
 8009eba:	4013      	ands	r3, r2
 8009ebc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	689b      	ldr	r3, [r3, #8]
 8009ec2:	041b      	lsls	r3, r3, #16
 8009ec4:	693a      	ldr	r2, [r7, #16]
 8009ec6:	4313      	orrs	r3, r2
 8009ec8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	4a15      	ldr	r2, [pc, #84]	@ (8009f24 <TIM_OC5_SetConfig+0xa8>)
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d007      	beq.n	8009ee2 <TIM_OC5_SetConfig+0x66>
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	4a14      	ldr	r2, [pc, #80]	@ (8009f28 <TIM_OC5_SetConfig+0xac>)
 8009ed6:	4293      	cmp	r3, r2
 8009ed8:	d003      	beq.n	8009ee2 <TIM_OC5_SetConfig+0x66>
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	4a13      	ldr	r2, [pc, #76]	@ (8009f2c <TIM_OC5_SetConfig+0xb0>)
 8009ede:	4293      	cmp	r3, r2
 8009ee0:	d109      	bne.n	8009ef6 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009ee2:	697b      	ldr	r3, [r7, #20]
 8009ee4:	4a0c      	ldr	r2, [pc, #48]	@ (8009f18 <TIM_OC5_SetConfig+0x9c>)
 8009ee6:	4013      	ands	r3, r2
 8009ee8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	695b      	ldr	r3, [r3, #20]
 8009eee:	021b      	lsls	r3, r3, #8
 8009ef0:	697a      	ldr	r2, [r7, #20]
 8009ef2:	4313      	orrs	r3, r2
 8009ef4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	697a      	ldr	r2, [r7, #20]
 8009efa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	68fa      	ldr	r2, [r7, #12]
 8009f00:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	685a      	ldr	r2, [r3, #4]
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	693a      	ldr	r2, [r7, #16]
 8009f0e:	621a      	str	r2, [r3, #32]
}
 8009f10:	46c0      	nop			@ (mov r8, r8)
 8009f12:	46bd      	mov	sp, r7
 8009f14:	b006      	add	sp, #24
 8009f16:	bd80      	pop	{r7, pc}
 8009f18:	fffeffff 	.word	0xfffeffff
 8009f1c:	fffeff8f 	.word	0xfffeff8f
 8009f20:	fffdffff 	.word	0xfffdffff
 8009f24:	40012c00 	.word	0x40012c00
 8009f28:	40014400 	.word	0x40014400
 8009f2c:	40014800 	.word	0x40014800

08009f30 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b086      	sub	sp, #24
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
 8009f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6a1b      	ldr	r3, [r3, #32]
 8009f3e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6a1b      	ldr	r3, [r3, #32]
 8009f44:	4a22      	ldr	r2, [pc, #136]	@ (8009fd0 <TIM_OC6_SetConfig+0xa0>)
 8009f46:	401a      	ands	r2, r3
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	685b      	ldr	r3, [r3, #4]
 8009f50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	4a1e      	ldr	r2, [pc, #120]	@ (8009fd4 <TIM_OC6_SetConfig+0xa4>)
 8009f5c:	4013      	ands	r3, r2
 8009f5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	021b      	lsls	r3, r3, #8
 8009f66:	68fa      	ldr	r2, [r7, #12]
 8009f68:	4313      	orrs	r3, r2
 8009f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009f6c:	693b      	ldr	r3, [r7, #16]
 8009f6e:	4a1a      	ldr	r2, [pc, #104]	@ (8009fd8 <TIM_OC6_SetConfig+0xa8>)
 8009f70:	4013      	ands	r3, r2
 8009f72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	689b      	ldr	r3, [r3, #8]
 8009f78:	051b      	lsls	r3, r3, #20
 8009f7a:	693a      	ldr	r2, [r7, #16]
 8009f7c:	4313      	orrs	r3, r2
 8009f7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	4a16      	ldr	r2, [pc, #88]	@ (8009fdc <TIM_OC6_SetConfig+0xac>)
 8009f84:	4293      	cmp	r3, r2
 8009f86:	d007      	beq.n	8009f98 <TIM_OC6_SetConfig+0x68>
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	4a15      	ldr	r2, [pc, #84]	@ (8009fe0 <TIM_OC6_SetConfig+0xb0>)
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	d003      	beq.n	8009f98 <TIM_OC6_SetConfig+0x68>
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	4a14      	ldr	r2, [pc, #80]	@ (8009fe4 <TIM_OC6_SetConfig+0xb4>)
 8009f94:	4293      	cmp	r3, r2
 8009f96:	d109      	bne.n	8009fac <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009f98:	697b      	ldr	r3, [r7, #20]
 8009f9a:	4a13      	ldr	r2, [pc, #76]	@ (8009fe8 <TIM_OC6_SetConfig+0xb8>)
 8009f9c:	4013      	ands	r3, r2
 8009f9e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	695b      	ldr	r3, [r3, #20]
 8009fa4:	029b      	lsls	r3, r3, #10
 8009fa6:	697a      	ldr	r2, [r7, #20]
 8009fa8:	4313      	orrs	r3, r2
 8009faa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	697a      	ldr	r2, [r7, #20]
 8009fb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	68fa      	ldr	r2, [r7, #12]
 8009fb6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	685a      	ldr	r2, [r3, #4]
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	693a      	ldr	r2, [r7, #16]
 8009fc4:	621a      	str	r2, [r3, #32]
}
 8009fc6:	46c0      	nop			@ (mov r8, r8)
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	b006      	add	sp, #24
 8009fcc:	bd80      	pop	{r7, pc}
 8009fce:	46c0      	nop			@ (mov r8, r8)
 8009fd0:	ffefffff 	.word	0xffefffff
 8009fd4:	feff8fff 	.word	0xfeff8fff
 8009fd8:	ffdfffff 	.word	0xffdfffff
 8009fdc:	40012c00 	.word	0x40012c00
 8009fe0:	40014400 	.word	0x40014400
 8009fe4:	40014800 	.word	0x40014800
 8009fe8:	fffbffff 	.word	0xfffbffff

08009fec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b086      	sub	sp, #24
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	60f8      	str	r0, [r7, #12]
 8009ff4:	60b9      	str	r1, [r7, #8]
 8009ff6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	221f      	movs	r2, #31
 8009ffc:	4013      	ands	r3, r2
 8009ffe:	2201      	movs	r2, #1
 800a000:	409a      	lsls	r2, r3
 800a002:	0013      	movs	r3, r2
 800a004:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	6a1b      	ldr	r3, [r3, #32]
 800a00a:	697a      	ldr	r2, [r7, #20]
 800a00c:	43d2      	mvns	r2, r2
 800a00e:	401a      	ands	r2, r3
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	6a1a      	ldr	r2, [r3, #32]
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	211f      	movs	r1, #31
 800a01c:	400b      	ands	r3, r1
 800a01e:	6879      	ldr	r1, [r7, #4]
 800a020:	4099      	lsls	r1, r3
 800a022:	000b      	movs	r3, r1
 800a024:	431a      	orrs	r2, r3
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	621a      	str	r2, [r3, #32]
}
 800a02a:	46c0      	nop			@ (mov r8, r8)
 800a02c:	46bd      	mov	sp, r7
 800a02e:	b006      	add	sp, #24
 800a030:	bd80      	pop	{r7, pc}
	...

0800a034 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b084      	sub	sp, #16
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
 800a03c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	223c      	movs	r2, #60	@ 0x3c
 800a042:	5c9b      	ldrb	r3, [r3, r2]
 800a044:	2b01      	cmp	r3, #1
 800a046:	d101      	bne.n	800a04c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a048:	2302      	movs	r3, #2
 800a04a:	e050      	b.n	800a0ee <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	223c      	movs	r2, #60	@ 0x3c
 800a050:	2101      	movs	r1, #1
 800a052:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	223d      	movs	r2, #61	@ 0x3d
 800a058:	2102      	movs	r1, #2
 800a05a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	685b      	ldr	r3, [r3, #4]
 800a062:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	689b      	ldr	r3, [r3, #8]
 800a06a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	4a21      	ldr	r2, [pc, #132]	@ (800a0f8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800a072:	4293      	cmp	r3, r2
 800a074:	d108      	bne.n	800a088 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	4a20      	ldr	r2, [pc, #128]	@ (800a0fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a07a:	4013      	ands	r3, r2
 800a07c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	685b      	ldr	r3, [r3, #4]
 800a082:	68fa      	ldr	r2, [r7, #12]
 800a084:	4313      	orrs	r3, r2
 800a086:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	2270      	movs	r2, #112	@ 0x70
 800a08c:	4393      	bics	r3, r2
 800a08e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	68fa      	ldr	r2, [r7, #12]
 800a096:	4313      	orrs	r3, r2
 800a098:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	68fa      	ldr	r2, [r7, #12]
 800a0a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	4a14      	ldr	r2, [pc, #80]	@ (800a0f8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800a0a8:	4293      	cmp	r3, r2
 800a0aa:	d00a      	beq.n	800a0c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681a      	ldr	r2, [r3, #0]
 800a0b0:	2380      	movs	r3, #128	@ 0x80
 800a0b2:	05db      	lsls	r3, r3, #23
 800a0b4:	429a      	cmp	r2, r3
 800a0b6:	d004      	beq.n	800a0c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	4a10      	ldr	r2, [pc, #64]	@ (800a100 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d10c      	bne.n	800a0dc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	2280      	movs	r2, #128	@ 0x80
 800a0c6:	4393      	bics	r3, r2
 800a0c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	689b      	ldr	r3, [r3, #8]
 800a0ce:	68ba      	ldr	r2, [r7, #8]
 800a0d0:	4313      	orrs	r3, r2
 800a0d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	68ba      	ldr	r2, [r7, #8]
 800a0da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	223d      	movs	r2, #61	@ 0x3d
 800a0e0:	2101      	movs	r1, #1
 800a0e2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	223c      	movs	r2, #60	@ 0x3c
 800a0e8:	2100      	movs	r1, #0
 800a0ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a0ec:	2300      	movs	r3, #0
}
 800a0ee:	0018      	movs	r0, r3
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	b004      	add	sp, #16
 800a0f4:	bd80      	pop	{r7, pc}
 800a0f6:	46c0      	nop			@ (mov r8, r8)
 800a0f8:	40012c00 	.word	0x40012c00
 800a0fc:	ff0fffff 	.word	0xff0fffff
 800a100:	40000400 	.word	0x40000400

0800a104 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b084      	sub	sp, #16
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
 800a10c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a10e:	2300      	movs	r3, #0
 800a110:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	223c      	movs	r2, #60	@ 0x3c
 800a116:	5c9b      	ldrb	r3, [r3, r2]
 800a118:	2b01      	cmp	r3, #1
 800a11a:	d101      	bne.n	800a120 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a11c:	2302      	movs	r3, #2
 800a11e:	e06f      	b.n	800a200 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	223c      	movs	r2, #60	@ 0x3c
 800a124:	2101      	movs	r1, #1
 800a126:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	22ff      	movs	r2, #255	@ 0xff
 800a12c:	4393      	bics	r3, r2
 800a12e:	001a      	movs	r2, r3
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	68db      	ldr	r3, [r3, #12]
 800a134:	4313      	orrs	r3, r2
 800a136:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	4a33      	ldr	r2, [pc, #204]	@ (800a208 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 800a13c:	401a      	ands	r2, r3
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	689b      	ldr	r3, [r3, #8]
 800a142:	4313      	orrs	r3, r2
 800a144:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	4a30      	ldr	r2, [pc, #192]	@ (800a20c <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800a14a:	401a      	ands	r2, r3
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	685b      	ldr	r3, [r3, #4]
 800a150:	4313      	orrs	r3, r2
 800a152:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	4a2e      	ldr	r2, [pc, #184]	@ (800a210 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 800a158:	401a      	ands	r2, r3
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	4313      	orrs	r3, r2
 800a160:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	4a2b      	ldr	r2, [pc, #172]	@ (800a214 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800a166:	401a      	ands	r2, r3
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	691b      	ldr	r3, [r3, #16]
 800a16c:	4313      	orrs	r3, r2
 800a16e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	4a29      	ldr	r2, [pc, #164]	@ (800a218 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800a174:	401a      	ands	r2, r3
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	695b      	ldr	r3, [r3, #20]
 800a17a:	4313      	orrs	r3, r2
 800a17c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	4a26      	ldr	r2, [pc, #152]	@ (800a21c <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800a182:	401a      	ands	r2, r3
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a188:	4313      	orrs	r3, r2
 800a18a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	4a24      	ldr	r2, [pc, #144]	@ (800a220 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800a190:	401a      	ands	r2, r3
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	699b      	ldr	r3, [r3, #24]
 800a196:	041b      	lsls	r3, r3, #16
 800a198:	4313      	orrs	r3, r2
 800a19a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	4a21      	ldr	r2, [pc, #132]	@ (800a224 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800a1a0:	401a      	ands	r2, r3
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	69db      	ldr	r3, [r3, #28]
 800a1a6:	4313      	orrs	r3, r2
 800a1a8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	4a1e      	ldr	r2, [pc, #120]	@ (800a228 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	d11c      	bne.n	800a1ee <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	4a1d      	ldr	r2, [pc, #116]	@ (800a22c <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800a1b8:	401a      	ands	r2, r3
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1be:	051b      	lsls	r3, r3, #20
 800a1c0:	4313      	orrs	r3, r2
 800a1c2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	4a1a      	ldr	r2, [pc, #104]	@ (800a230 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800a1c8:	401a      	ands	r2, r3
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	6a1b      	ldr	r3, [r3, #32]
 800a1ce:	4313      	orrs	r3, r2
 800a1d0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	4a17      	ldr	r2, [pc, #92]	@ (800a234 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800a1d6:	401a      	ands	r2, r3
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1dc:	4313      	orrs	r3, r2
 800a1de:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	4a15      	ldr	r2, [pc, #84]	@ (800a238 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800a1e4:	401a      	ands	r2, r3
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1ea:	4313      	orrs	r3, r2
 800a1ec:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	68fa      	ldr	r2, [r7, #12]
 800a1f4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	223c      	movs	r2, #60	@ 0x3c
 800a1fa:	2100      	movs	r1, #0
 800a1fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a1fe:	2300      	movs	r3, #0
}
 800a200:	0018      	movs	r0, r3
 800a202:	46bd      	mov	sp, r7
 800a204:	b004      	add	sp, #16
 800a206:	bd80      	pop	{r7, pc}
 800a208:	fffffcff 	.word	0xfffffcff
 800a20c:	fffffbff 	.word	0xfffffbff
 800a210:	fffff7ff 	.word	0xfffff7ff
 800a214:	ffffefff 	.word	0xffffefff
 800a218:	ffffdfff 	.word	0xffffdfff
 800a21c:	ffffbfff 	.word	0xffffbfff
 800a220:	fff0ffff 	.word	0xfff0ffff
 800a224:	efffffff 	.word	0xefffffff
 800a228:	40012c00 	.word	0x40012c00
 800a22c:	ff0fffff 	.word	0xff0fffff
 800a230:	feffffff 	.word	0xfeffffff
 800a234:	fdffffff 	.word	0xfdffffff
 800a238:	dfffffff 	.word	0xdfffffff

0800a23c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b082      	sub	sp, #8
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a244:	46c0      	nop			@ (mov r8, r8)
 800a246:	46bd      	mov	sp, r7
 800a248:	b002      	add	sp, #8
 800a24a:	bd80      	pop	{r7, pc}

0800a24c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b082      	sub	sp, #8
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a254:	46c0      	nop			@ (mov r8, r8)
 800a256:	46bd      	mov	sp, r7
 800a258:	b002      	add	sp, #8
 800a25a:	bd80      	pop	{r7, pc}

0800a25c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b082      	sub	sp, #8
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a264:	46c0      	nop			@ (mov r8, r8)
 800a266:	46bd      	mov	sp, r7
 800a268:	b002      	add	sp, #8
 800a26a:	bd80      	pop	{r7, pc}

0800a26c <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b082      	sub	sp, #8
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d101      	bne.n	800a27e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800a27a:	2301      	movs	r3, #1
 800a27c:	e032      	b.n	800a2e4 <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2288      	movs	r2, #136	@ 0x88
 800a282:	2124      	movs	r1, #36	@ 0x24
 800a284:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	681a      	ldr	r2, [r3, #0]
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	2101      	movs	r1, #1
 800a292:	438a      	bics	r2, r1
 800a294:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	2200      	movs	r2, #0
 800a29c:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	0018      	movs	r0, r3
 800a2b2:	f7fa fa1d 	bl	80046f0 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2290      	movs	r2, #144	@ 0x90
 800a2ba:	2100      	movs	r1, #0
 800a2bc:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2288      	movs	r2, #136	@ 0x88
 800a2c2:	2100      	movs	r1, #0
 800a2c4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	228c      	movs	r2, #140	@ 0x8c
 800a2ca:	2100      	movs	r1, #0
 800a2cc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2284      	movs	r2, #132	@ 0x84
 800a2de:	2100      	movs	r1, #0
 800a2e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a2e2:	2300      	movs	r3, #0
}
 800a2e4:	0018      	movs	r0, r3
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	b002      	add	sp, #8
 800a2ea:	bd80      	pop	{r7, pc}

0800a2ec <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b088      	sub	sp, #32
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	60f8      	str	r0, [r7, #12]
 800a2f4:	60b9      	str	r1, [r7, #8]
 800a2f6:	1dbb      	adds	r3, r7, #6
 800a2f8:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	2288      	movs	r2, #136	@ 0x88
 800a2fe:	589b      	ldr	r3, [r3, r2]
 800a300:	2b20      	cmp	r3, #32
 800a302:	d000      	beq.n	800a306 <HAL_UART_Transmit_DMA+0x1a>
 800a304:	e079      	b.n	800a3fa <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d003      	beq.n	800a314 <HAL_UART_Transmit_DMA+0x28>
 800a30c:	1dbb      	adds	r3, r7, #6
 800a30e:	881b      	ldrh	r3, [r3, #0]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d101      	bne.n	800a318 <HAL_UART_Transmit_DMA+0x2c>
    {
      return HAL_ERROR;
 800a314:	2301      	movs	r3, #1
 800a316:	e071      	b.n	800a3fc <HAL_UART_Transmit_DMA+0x110>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	689a      	ldr	r2, [r3, #8]
 800a31c:	2380      	movs	r3, #128	@ 0x80
 800a31e:	015b      	lsls	r3, r3, #5
 800a320:	429a      	cmp	r2, r3
 800a322:	d109      	bne.n	800a338 <HAL_UART_Transmit_DMA+0x4c>
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	691b      	ldr	r3, [r3, #16]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d105      	bne.n	800a338 <HAL_UART_Transmit_DMA+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	2201      	movs	r2, #1
 800a330:	4013      	ands	r3, r2
 800a332:	d001      	beq.n	800a338 <HAL_UART_Transmit_DMA+0x4c>
      {
        return  HAL_ERROR;
 800a334:	2301      	movs	r3, #1
 800a336:	e061      	b.n	800a3fc <HAL_UART_Transmit_DMA+0x110>
      }
    }

    huart->pTxBuffPtr  = pData;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	68ba      	ldr	r2, [r7, #8]
 800a33c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	1dba      	adds	r2, r7, #6
 800a342:	2154      	movs	r1, #84	@ 0x54
 800a344:	8812      	ldrh	r2, [r2, #0]
 800a346:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	1dba      	adds	r2, r7, #6
 800a34c:	2156      	movs	r1, #86	@ 0x56
 800a34e:	8812      	ldrh	r2, [r2, #0]
 800a350:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	2290      	movs	r2, #144	@ 0x90
 800a356:	2100      	movs	r1, #0
 800a358:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	2288      	movs	r2, #136	@ 0x88
 800a35e:	2121      	movs	r1, #33	@ 0x21
 800a360:	5099      	str	r1, [r3, r2]

    if (huart->hdmatx != NULL)
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a366:	2b00      	cmp	r3, #0
 800a368:	d028      	beq.n	800a3bc <HAL_UART_Transmit_DMA+0xd0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a36e:	4a25      	ldr	r2, [pc, #148]	@ (800a404 <HAL_UART_Transmit_DMA+0x118>)
 800a370:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a376:	4a24      	ldr	r2, [pc, #144]	@ (800a408 <HAL_UART_Transmit_DMA+0x11c>)
 800a378:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a37e:	4a23      	ldr	r2, [pc, #140]	@ (800a40c <HAL_UART_Transmit_DMA+0x120>)
 800a380:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a386:	2200      	movs	r2, #0
 800a388:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a392:	0019      	movs	r1, r3
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	3328      	adds	r3, #40	@ 0x28
 800a39a:	001a      	movs	r2, r3
 800a39c:	1dbb      	adds	r3, r7, #6
 800a39e:	881b      	ldrh	r3, [r3, #0]
 800a3a0:	f7fa fdfa 	bl	8004f98 <HAL_DMA_Start_IT>
 800a3a4:	1e03      	subs	r3, r0, #0
 800a3a6:	d009      	beq.n	800a3bc <HAL_UART_Transmit_DMA+0xd0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	2290      	movs	r2, #144	@ 0x90
 800a3ac:	2110      	movs	r1, #16
 800a3ae:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	2288      	movs	r2, #136	@ 0x88
 800a3b4:	2120      	movs	r1, #32
 800a3b6:	5099      	str	r1, [r3, r2]

        return HAL_ERROR;
 800a3b8:	2301      	movs	r3, #1
 800a3ba:	e01f      	b.n	800a3fc <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	2240      	movs	r2, #64	@ 0x40
 800a3c2:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a3c4:	f3ef 8310 	mrs	r3, PRIMASK
 800a3c8:	613b      	str	r3, [r7, #16]
  return(result);
 800a3ca:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a3cc:	61fb      	str	r3, [r7, #28]
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3d2:	697b      	ldr	r3, [r7, #20]
 800a3d4:	f383 8810 	msr	PRIMASK, r3
}
 800a3d8:	46c0      	nop			@ (mov r8, r8)
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	689a      	ldr	r2, [r3, #8]
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	2180      	movs	r1, #128	@ 0x80
 800a3e6:	430a      	orrs	r2, r1
 800a3e8:	609a      	str	r2, [r3, #8]
 800a3ea:	69fb      	ldr	r3, [r7, #28]
 800a3ec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3ee:	69bb      	ldr	r3, [r7, #24]
 800a3f0:	f383 8810 	msr	PRIMASK, r3
}
 800a3f4:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	e000      	b.n	800a3fc <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800a3fa:	2302      	movs	r3, #2
  }
}
 800a3fc:	0018      	movs	r0, r3
 800a3fe:	46bd      	mov	sp, r7
 800a400:	b008      	add	sp, #32
 800a402:	bd80      	pop	{r7, pc}
 800a404:	0800b615 	.word	0x0800b615
 800a408:	0800b6ad 	.word	0x0800b6ad
 800a40c:	0800b83f 	.word	0x0800b83f

0800a410 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b096      	sub	sp, #88	@ 0x58
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a418:	f3ef 8310 	mrs	r3, PRIMASK
 800a41c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 800a41e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a420:	657b      	str	r3, [r7, #84]	@ 0x54
 800a422:	2301      	movs	r3, #1
 800a424:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a428:	f383 8810 	msr	PRIMASK, r3
}
 800a42c:	46c0      	nop			@ (mov r8, r8)
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	681a      	ldr	r2, [r3, #0]
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	4979      	ldr	r1, [pc, #484]	@ (800a620 <HAL_UART_Abort+0x210>)
 800a43a:	400a      	ands	r2, r1
 800a43c:	601a      	str	r2, [r3, #0]
 800a43e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a440:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a442:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a444:	f383 8810 	msr	PRIMASK, r3
}
 800a448:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a44a:	f3ef 8310 	mrs	r3, PRIMASK
 800a44e:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 800a450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 800a452:	653b      	str	r3, [r7, #80]	@ 0x50
 800a454:	2301      	movs	r3, #1
 800a456:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a458:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a45a:	f383 8810 	msr	PRIMASK, r3
}
 800a45e:	46c0      	nop			@ (mov r8, r8)
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	689a      	ldr	r2, [r3, #8]
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	496e      	ldr	r1, [pc, #440]	@ (800a624 <HAL_UART_Abort+0x214>)
 800a46c:	400a      	ands	r2, r1
 800a46e:	609a      	str	r2, [r3, #8]
 800a470:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a472:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a474:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a476:	f383 8810 	msr	PRIMASK, r3
}
 800a47a:	46c0      	nop			@ (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a480:	2b01      	cmp	r3, #1
 800a482:	d118      	bne.n	800a4b6 <HAL_UART_Abort+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a484:	f3ef 8310 	mrs	r3, PRIMASK
 800a488:	623b      	str	r3, [r7, #32]
  return(result);
 800a48a:	6a3b      	ldr	r3, [r7, #32]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800a48c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a48e:	2301      	movs	r3, #1
 800a490:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a494:	f383 8810 	msr	PRIMASK, r3
}
 800a498:	46c0      	nop			@ (mov r8, r8)
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	681a      	ldr	r2, [r3, #0]
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	2110      	movs	r1, #16
 800a4a6:	438a      	bics	r2, r1
 800a4a8:	601a      	str	r2, [r3, #0]
 800a4aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a4ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4b0:	f383 8810 	msr	PRIMASK, r3
}
 800a4b4:	46c0      	nop			@ (mov r8, r8)
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	689b      	ldr	r3, [r3, #8]
 800a4bc:	2280      	movs	r2, #128	@ 0x80
 800a4be:	4013      	ands	r3, r2
 800a4c0:	2b80      	cmp	r3, #128	@ 0x80
 800a4c2:	d135      	bne.n	800a530 <HAL_UART_Abort+0x120>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a4c4:	f3ef 8310 	mrs	r3, PRIMASK
 800a4c8:	617b      	str	r3, [r7, #20]
  return(result);
 800a4ca:	697b      	ldr	r3, [r7, #20]
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a4cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4d2:	69bb      	ldr	r3, [r7, #24]
 800a4d4:	f383 8810 	msr	PRIMASK, r3
}
 800a4d8:	46c0      	nop			@ (mov r8, r8)
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	689a      	ldr	r2, [r3, #8]
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	2180      	movs	r1, #128	@ 0x80
 800a4e6:	438a      	bics	r2, r1
 800a4e8:	609a      	str	r2, [r3, #8]
 800a4ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a4ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4ee:	69fb      	ldr	r3, [r7, #28]
 800a4f0:	f383 8810 	msr	PRIMASK, r3
}
 800a4f4:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d018      	beq.n	800a530 <HAL_UART_Abort+0x120>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a502:	2200      	movs	r2, #0
 800a504:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a50a:	0018      	movs	r0, r3
 800a50c:	f7fa fdcc 	bl	80050a8 <HAL_DMA_Abort>
 800a510:	1e03      	subs	r3, r0, #0
 800a512:	d00d      	beq.n	800a530 <HAL_UART_Abort+0x120>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a518:	0018      	movs	r0, r3
 800a51a:	f7fa ff5f 	bl	80053dc <HAL_DMA_GetError>
 800a51e:	0003      	movs	r3, r0
 800a520:	2b20      	cmp	r3, #32
 800a522:	d105      	bne.n	800a530 <HAL_UART_Abort+0x120>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2290      	movs	r2, #144	@ 0x90
 800a528:	2110      	movs	r1, #16
 800a52a:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 800a52c:	2303      	movs	r3, #3
 800a52e:	e072      	b.n	800a616 <HAL_UART_Abort+0x206>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	689b      	ldr	r3, [r3, #8]
 800a536:	2240      	movs	r2, #64	@ 0x40
 800a538:	4013      	ands	r3, r2
 800a53a:	2b40      	cmp	r3, #64	@ 0x40
 800a53c:	d139      	bne.n	800a5b2 <HAL_UART_Abort+0x1a2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a53e:	f3ef 8310 	mrs	r3, PRIMASK
 800a542:	60bb      	str	r3, [r7, #8]
  return(result);
 800a544:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a546:	647b      	str	r3, [r7, #68]	@ 0x44
 800a548:	2301      	movs	r3, #1
 800a54a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	f383 8810 	msr	PRIMASK, r3
}
 800a552:	46c0      	nop			@ (mov r8, r8)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	689a      	ldr	r2, [r3, #8]
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	2140      	movs	r1, #64	@ 0x40
 800a560:	438a      	bics	r2, r1
 800a562:	609a      	str	r2, [r3, #8]
 800a564:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a566:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	f383 8810 	msr	PRIMASK, r3
}
 800a56e:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2280      	movs	r2, #128	@ 0x80
 800a574:	589b      	ldr	r3, [r3, r2]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d01b      	beq.n	800a5b2 <HAL_UART_Abort+0x1a2>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2280      	movs	r2, #128	@ 0x80
 800a57e:	589b      	ldr	r3, [r3, r2]
 800a580:	2200      	movs	r2, #0
 800a582:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2280      	movs	r2, #128	@ 0x80
 800a588:	589b      	ldr	r3, [r3, r2]
 800a58a:	0018      	movs	r0, r3
 800a58c:	f7fa fd8c 	bl	80050a8 <HAL_DMA_Abort>
 800a590:	1e03      	subs	r3, r0, #0
 800a592:	d00e      	beq.n	800a5b2 <HAL_UART_Abort+0x1a2>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2280      	movs	r2, #128	@ 0x80
 800a598:	589b      	ldr	r3, [r3, r2]
 800a59a:	0018      	movs	r0, r3
 800a59c:	f7fa ff1e 	bl	80053dc <HAL_DMA_GetError>
 800a5a0:	0003      	movs	r3, r0
 800a5a2:	2b20      	cmp	r3, #32
 800a5a4:	d105      	bne.n	800a5b2 <HAL_UART_Abort+0x1a2>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2290      	movs	r2, #144	@ 0x90
 800a5aa:	2110      	movs	r1, #16
 800a5ac:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 800a5ae:	2303      	movs	r3, #3
 800a5b0:	e031      	b.n	800a616 <HAL_UART_Abort+0x206>
    }
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2256      	movs	r2, #86	@ 0x56
 800a5b6:	2100      	movs	r1, #0
 800a5b8:	5299      	strh	r1, [r3, r2]
  huart->RxXferCount = 0U;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	225e      	movs	r2, #94	@ 0x5e
 800a5be:	2100      	movs	r1, #0
 800a5c0:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	220f      	movs	r2, #15
 800a5c8:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a5ce:	2380      	movs	r3, #128	@ 0x80
 800a5d0:	059b      	lsls	r3, r3, #22
 800a5d2:	429a      	cmp	r2, r3
 800a5d4:	d107      	bne.n	800a5e6 <HAL_UART_Abort+0x1d6>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	699a      	ldr	r2, [r3, #24]
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	2110      	movs	r1, #16
 800a5e2:	430a      	orrs	r2, r1
 800a5e4:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	699a      	ldr	r2, [r3, #24]
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	2108      	movs	r1, #8
 800a5f2:	430a      	orrs	r2, r1
 800a5f4:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2288      	movs	r2, #136	@ 0x88
 800a5fa:	2120      	movs	r1, #32
 800a5fc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	228c      	movs	r2, #140	@ 0x8c
 800a602:	2120      	movs	r1, #32
 800a604:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	2200      	movs	r2, #0
 800a60a:	66da      	str	r2, [r3, #108]	@ 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2290      	movs	r2, #144	@ 0x90
 800a610:	2100      	movs	r1, #0
 800a612:	5099      	str	r1, [r3, r2]

  return HAL_OK;
 800a614:	2300      	movs	r3, #0
}
 800a616:	0018      	movs	r0, r3
 800a618:	46bd      	mov	sp, r7
 800a61a:	b016      	add	sp, #88	@ 0x58
 800a61c:	bd80      	pop	{r7, pc}
 800a61e:	46c0      	nop			@ (mov r8, r8)
 800a620:	fffffe1f 	.word	0xfffffe1f
 800a624:	ef7ffffe 	.word	0xef7ffffe

0800a628 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a628:	b5b0      	push	{r4, r5, r7, lr}
 800a62a:	b0aa      	sub	sp, #168	@ 0xa8
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	69db      	ldr	r3, [r3, #28]
 800a636:	22a4      	movs	r2, #164	@ 0xa4
 800a638:	18b9      	adds	r1, r7, r2
 800a63a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	20a0      	movs	r0, #160	@ 0xa0
 800a644:	1839      	adds	r1, r7, r0
 800a646:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	689b      	ldr	r3, [r3, #8]
 800a64e:	249c      	movs	r4, #156	@ 0x9c
 800a650:	1939      	adds	r1, r7, r4
 800a652:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a654:	0011      	movs	r1, r2
 800a656:	18bb      	adds	r3, r7, r2
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	4aa2      	ldr	r2, [pc, #648]	@ (800a8e4 <HAL_UART_IRQHandler+0x2bc>)
 800a65c:	4013      	ands	r3, r2
 800a65e:	2298      	movs	r2, #152	@ 0x98
 800a660:	18bd      	adds	r5, r7, r2
 800a662:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800a664:	18bb      	adds	r3, r7, r2
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d11a      	bne.n	800a6a2 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a66c:	187b      	adds	r3, r7, r1
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	2220      	movs	r2, #32
 800a672:	4013      	ands	r3, r2
 800a674:	d015      	beq.n	800a6a2 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a676:	183b      	adds	r3, r7, r0
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	2220      	movs	r2, #32
 800a67c:	4013      	ands	r3, r2
 800a67e:	d105      	bne.n	800a68c <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a680:	193b      	adds	r3, r7, r4
 800a682:	681a      	ldr	r2, [r3, #0]
 800a684:	2380      	movs	r3, #128	@ 0x80
 800a686:	055b      	lsls	r3, r3, #21
 800a688:	4013      	ands	r3, r2
 800a68a:	d00a      	beq.n	800a6a2 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a690:	2b00      	cmp	r3, #0
 800a692:	d100      	bne.n	800a696 <HAL_UART_IRQHandler+0x6e>
 800a694:	e2fb      	b.n	800ac8e <HAL_UART_IRQHandler+0x666>
      {
        huart->RxISR(huart);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a69a:	687a      	ldr	r2, [r7, #4]
 800a69c:	0010      	movs	r0, r2
 800a69e:	4798      	blx	r3
      }
      return;
 800a6a0:	e2f5      	b.n	800ac8e <HAL_UART_IRQHandler+0x666>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a6a2:	2398      	movs	r3, #152	@ 0x98
 800a6a4:	18fb      	adds	r3, r7, r3
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d100      	bne.n	800a6ae <HAL_UART_IRQHandler+0x86>
 800a6ac:	e122      	b.n	800a8f4 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a6ae:	239c      	movs	r3, #156	@ 0x9c
 800a6b0:	18fb      	adds	r3, r7, r3
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	4a8c      	ldr	r2, [pc, #560]	@ (800a8e8 <HAL_UART_IRQHandler+0x2c0>)
 800a6b6:	4013      	ands	r3, r2
 800a6b8:	d106      	bne.n	800a6c8 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a6ba:	23a0      	movs	r3, #160	@ 0xa0
 800a6bc:	18fb      	adds	r3, r7, r3
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	4a8a      	ldr	r2, [pc, #552]	@ (800a8ec <HAL_UART_IRQHandler+0x2c4>)
 800a6c2:	4013      	ands	r3, r2
 800a6c4:	d100      	bne.n	800a6c8 <HAL_UART_IRQHandler+0xa0>
 800a6c6:	e115      	b.n	800a8f4 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a6c8:	23a4      	movs	r3, #164	@ 0xa4
 800a6ca:	18fb      	adds	r3, r7, r3
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	2201      	movs	r2, #1
 800a6d0:	4013      	ands	r3, r2
 800a6d2:	d012      	beq.n	800a6fa <HAL_UART_IRQHandler+0xd2>
 800a6d4:	23a0      	movs	r3, #160	@ 0xa0
 800a6d6:	18fb      	adds	r3, r7, r3
 800a6d8:	681a      	ldr	r2, [r3, #0]
 800a6da:	2380      	movs	r3, #128	@ 0x80
 800a6dc:	005b      	lsls	r3, r3, #1
 800a6de:	4013      	ands	r3, r2
 800a6e0:	d00b      	beq.n	800a6fa <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	2201      	movs	r2, #1
 800a6e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2290      	movs	r2, #144	@ 0x90
 800a6ee:	589b      	ldr	r3, [r3, r2]
 800a6f0:	2201      	movs	r2, #1
 800a6f2:	431a      	orrs	r2, r3
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2190      	movs	r1, #144	@ 0x90
 800a6f8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a6fa:	23a4      	movs	r3, #164	@ 0xa4
 800a6fc:	18fb      	adds	r3, r7, r3
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	2202      	movs	r2, #2
 800a702:	4013      	ands	r3, r2
 800a704:	d011      	beq.n	800a72a <HAL_UART_IRQHandler+0x102>
 800a706:	239c      	movs	r3, #156	@ 0x9c
 800a708:	18fb      	adds	r3, r7, r3
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	2201      	movs	r2, #1
 800a70e:	4013      	ands	r3, r2
 800a710:	d00b      	beq.n	800a72a <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	2202      	movs	r2, #2
 800a718:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2290      	movs	r2, #144	@ 0x90
 800a71e:	589b      	ldr	r3, [r3, r2]
 800a720:	2204      	movs	r2, #4
 800a722:	431a      	orrs	r2, r3
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2190      	movs	r1, #144	@ 0x90
 800a728:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a72a:	23a4      	movs	r3, #164	@ 0xa4
 800a72c:	18fb      	adds	r3, r7, r3
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	2204      	movs	r2, #4
 800a732:	4013      	ands	r3, r2
 800a734:	d011      	beq.n	800a75a <HAL_UART_IRQHandler+0x132>
 800a736:	239c      	movs	r3, #156	@ 0x9c
 800a738:	18fb      	adds	r3, r7, r3
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	2201      	movs	r2, #1
 800a73e:	4013      	ands	r3, r2
 800a740:	d00b      	beq.n	800a75a <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	2204      	movs	r2, #4
 800a748:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2290      	movs	r2, #144	@ 0x90
 800a74e:	589b      	ldr	r3, [r3, r2]
 800a750:	2202      	movs	r2, #2
 800a752:	431a      	orrs	r2, r3
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2190      	movs	r1, #144	@ 0x90
 800a758:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a75a:	23a4      	movs	r3, #164	@ 0xa4
 800a75c:	18fb      	adds	r3, r7, r3
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	2208      	movs	r2, #8
 800a762:	4013      	ands	r3, r2
 800a764:	d017      	beq.n	800a796 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a766:	23a0      	movs	r3, #160	@ 0xa0
 800a768:	18fb      	adds	r3, r7, r3
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	2220      	movs	r2, #32
 800a76e:	4013      	ands	r3, r2
 800a770:	d105      	bne.n	800a77e <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a772:	239c      	movs	r3, #156	@ 0x9c
 800a774:	18fb      	adds	r3, r7, r3
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	4a5b      	ldr	r2, [pc, #364]	@ (800a8e8 <HAL_UART_IRQHandler+0x2c0>)
 800a77a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a77c:	d00b      	beq.n	800a796 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	2208      	movs	r2, #8
 800a784:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2290      	movs	r2, #144	@ 0x90
 800a78a:	589b      	ldr	r3, [r3, r2]
 800a78c:	2208      	movs	r2, #8
 800a78e:	431a      	orrs	r2, r3
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2190      	movs	r1, #144	@ 0x90
 800a794:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a796:	23a4      	movs	r3, #164	@ 0xa4
 800a798:	18fb      	adds	r3, r7, r3
 800a79a:	681a      	ldr	r2, [r3, #0]
 800a79c:	2380      	movs	r3, #128	@ 0x80
 800a79e:	011b      	lsls	r3, r3, #4
 800a7a0:	4013      	ands	r3, r2
 800a7a2:	d013      	beq.n	800a7cc <HAL_UART_IRQHandler+0x1a4>
 800a7a4:	23a0      	movs	r3, #160	@ 0xa0
 800a7a6:	18fb      	adds	r3, r7, r3
 800a7a8:	681a      	ldr	r2, [r3, #0]
 800a7aa:	2380      	movs	r3, #128	@ 0x80
 800a7ac:	04db      	lsls	r3, r3, #19
 800a7ae:	4013      	ands	r3, r2
 800a7b0:	d00c      	beq.n	800a7cc <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	2280      	movs	r2, #128	@ 0x80
 800a7b8:	0112      	lsls	r2, r2, #4
 800a7ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2290      	movs	r2, #144	@ 0x90
 800a7c0:	589b      	ldr	r3, [r3, r2]
 800a7c2:	2220      	movs	r2, #32
 800a7c4:	431a      	orrs	r2, r3
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2190      	movs	r1, #144	@ 0x90
 800a7ca:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2290      	movs	r2, #144	@ 0x90
 800a7d0:	589b      	ldr	r3, [r3, r2]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d100      	bne.n	800a7d8 <HAL_UART_IRQHandler+0x1b0>
 800a7d6:	e25c      	b.n	800ac92 <HAL_UART_IRQHandler+0x66a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a7d8:	23a4      	movs	r3, #164	@ 0xa4
 800a7da:	18fb      	adds	r3, r7, r3
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	2220      	movs	r2, #32
 800a7e0:	4013      	ands	r3, r2
 800a7e2:	d015      	beq.n	800a810 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a7e4:	23a0      	movs	r3, #160	@ 0xa0
 800a7e6:	18fb      	adds	r3, r7, r3
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	2220      	movs	r2, #32
 800a7ec:	4013      	ands	r3, r2
 800a7ee:	d106      	bne.n	800a7fe <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a7f0:	239c      	movs	r3, #156	@ 0x9c
 800a7f2:	18fb      	adds	r3, r7, r3
 800a7f4:	681a      	ldr	r2, [r3, #0]
 800a7f6:	2380      	movs	r3, #128	@ 0x80
 800a7f8:	055b      	lsls	r3, r3, #21
 800a7fa:	4013      	ands	r3, r2
 800a7fc:	d008      	beq.n	800a810 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a802:	2b00      	cmp	r3, #0
 800a804:	d004      	beq.n	800a810 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a80a:	687a      	ldr	r2, [r7, #4]
 800a80c:	0010      	movs	r0, r2
 800a80e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2290      	movs	r2, #144	@ 0x90
 800a814:	589b      	ldr	r3, [r3, r2]
 800a816:	2194      	movs	r1, #148	@ 0x94
 800a818:	187a      	adds	r2, r7, r1
 800a81a:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	689b      	ldr	r3, [r3, #8]
 800a822:	2240      	movs	r2, #64	@ 0x40
 800a824:	4013      	ands	r3, r2
 800a826:	2b40      	cmp	r3, #64	@ 0x40
 800a828:	d004      	beq.n	800a834 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a82a:	187b      	adds	r3, r7, r1
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	2228      	movs	r2, #40	@ 0x28
 800a830:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a832:	d04c      	beq.n	800a8ce <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	0018      	movs	r0, r3
 800a838:	f000 fe86 	bl	800b548 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	689b      	ldr	r3, [r3, #8]
 800a842:	2240      	movs	r2, #64	@ 0x40
 800a844:	4013      	ands	r3, r2
 800a846:	2b40      	cmp	r3, #64	@ 0x40
 800a848:	d13c      	bne.n	800a8c4 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a84a:	f3ef 8310 	mrs	r3, PRIMASK
 800a84e:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800a850:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a852:	2090      	movs	r0, #144	@ 0x90
 800a854:	183a      	adds	r2, r7, r0
 800a856:	6013      	str	r3, [r2, #0]
 800a858:	2301      	movs	r3, #1
 800a85a:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a85c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a85e:	f383 8810 	msr	PRIMASK, r3
}
 800a862:	46c0      	nop			@ (mov r8, r8)
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	689a      	ldr	r2, [r3, #8]
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	2140      	movs	r1, #64	@ 0x40
 800a870:	438a      	bics	r2, r1
 800a872:	609a      	str	r2, [r3, #8]
 800a874:	183b      	adds	r3, r7, r0
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a87a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a87c:	f383 8810 	msr	PRIMASK, r3
}
 800a880:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2280      	movs	r2, #128	@ 0x80
 800a886:	589b      	ldr	r3, [r3, r2]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d016      	beq.n	800a8ba <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2280      	movs	r2, #128	@ 0x80
 800a890:	589b      	ldr	r3, [r3, r2]
 800a892:	4a17      	ldr	r2, [pc, #92]	@ (800a8f0 <HAL_UART_IRQHandler+0x2c8>)
 800a894:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2280      	movs	r2, #128	@ 0x80
 800a89a:	589b      	ldr	r3, [r3, r2]
 800a89c:	0018      	movs	r0, r3
 800a89e:	f7fa fc65 	bl	800516c <HAL_DMA_Abort_IT>
 800a8a2:	1e03      	subs	r3, r0, #0
 800a8a4:	d01c      	beq.n	800a8e0 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2280      	movs	r2, #128	@ 0x80
 800a8aa:	589b      	ldr	r3, [r3, r2]
 800a8ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8ae:	687a      	ldr	r2, [r7, #4]
 800a8b0:	2180      	movs	r1, #128	@ 0x80
 800a8b2:	5852      	ldr	r2, [r2, r1]
 800a8b4:	0010      	movs	r0, r2
 800a8b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8b8:	e012      	b.n	800a8e0 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	0018      	movs	r0, r3
 800a8be:	f7f8 fcfd 	bl	80032bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8c2:	e00d      	b.n	800a8e0 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	0018      	movs	r0, r3
 800a8c8:	f7f8 fcf8 	bl	80032bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8cc:	e008      	b.n	800a8e0 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	0018      	movs	r0, r3
 800a8d2:	f7f8 fcf3 	bl	80032bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2290      	movs	r2, #144	@ 0x90
 800a8da:	2100      	movs	r1, #0
 800a8dc:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800a8de:	e1d8      	b.n	800ac92 <HAL_UART_IRQHandler+0x66a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8e0:	46c0      	nop			@ (mov r8, r8)
    return;
 800a8e2:	e1d6      	b.n	800ac92 <HAL_UART_IRQHandler+0x66a>
 800a8e4:	0000080f 	.word	0x0000080f
 800a8e8:	10000001 	.word	0x10000001
 800a8ec:	04000120 	.word	0x04000120
 800a8f0:	0800b8c5 	.word	0x0800b8c5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a8f8:	2b01      	cmp	r3, #1
 800a8fa:	d000      	beq.n	800a8fe <HAL_UART_IRQHandler+0x2d6>
 800a8fc:	e15d      	b.n	800abba <HAL_UART_IRQHandler+0x592>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a8fe:	23a4      	movs	r3, #164	@ 0xa4
 800a900:	18fb      	adds	r3, r7, r3
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	2210      	movs	r2, #16
 800a906:	4013      	ands	r3, r2
 800a908:	d100      	bne.n	800a90c <HAL_UART_IRQHandler+0x2e4>
 800a90a:	e156      	b.n	800abba <HAL_UART_IRQHandler+0x592>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a90c:	23a0      	movs	r3, #160	@ 0xa0
 800a90e:	18fb      	adds	r3, r7, r3
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	2210      	movs	r2, #16
 800a914:	4013      	ands	r3, r2
 800a916:	d100      	bne.n	800a91a <HAL_UART_IRQHandler+0x2f2>
 800a918:	e14f      	b.n	800abba <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	2210      	movs	r2, #16
 800a920:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	689b      	ldr	r3, [r3, #8]
 800a928:	2240      	movs	r2, #64	@ 0x40
 800a92a:	4013      	ands	r3, r2
 800a92c:	2b40      	cmp	r3, #64	@ 0x40
 800a92e:	d000      	beq.n	800a932 <HAL_UART_IRQHandler+0x30a>
 800a930:	e0c3      	b.n	800aaba <HAL_UART_IRQHandler+0x492>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2280      	movs	r2, #128	@ 0x80
 800a936:	589b      	ldr	r3, [r3, r2]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	685a      	ldr	r2, [r3, #4]
 800a93c:	217e      	movs	r1, #126	@ 0x7e
 800a93e:	187b      	adds	r3, r7, r1
 800a940:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800a942:	187b      	adds	r3, r7, r1
 800a944:	881b      	ldrh	r3, [r3, #0]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d100      	bne.n	800a94c <HAL_UART_IRQHandler+0x324>
 800a94a:	e097      	b.n	800aa7c <HAL_UART_IRQHandler+0x454>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	225c      	movs	r2, #92	@ 0x5c
 800a950:	5a9b      	ldrh	r3, [r3, r2]
 800a952:	187a      	adds	r2, r7, r1
 800a954:	8812      	ldrh	r2, [r2, #0]
 800a956:	429a      	cmp	r2, r3
 800a958:	d300      	bcc.n	800a95c <HAL_UART_IRQHandler+0x334>
 800a95a:	e08f      	b.n	800aa7c <HAL_UART_IRQHandler+0x454>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	187a      	adds	r2, r7, r1
 800a960:	215e      	movs	r1, #94	@ 0x5e
 800a962:	8812      	ldrh	r2, [r2, #0]
 800a964:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2280      	movs	r2, #128	@ 0x80
 800a96a:	589b      	ldr	r3, [r3, r2]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	2220      	movs	r2, #32
 800a972:	4013      	ands	r3, r2
 800a974:	d170      	bne.n	800aa58 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a976:	f3ef 8310 	mrs	r3, PRIMASK
 800a97a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800a97c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a97e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a980:	2301      	movs	r3, #1
 800a982:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a986:	f383 8810 	msr	PRIMASK, r3
}
 800a98a:	46c0      	nop			@ (mov r8, r8)
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	681a      	ldr	r2, [r3, #0]
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	49c4      	ldr	r1, [pc, #784]	@ (800aca8 <HAL_UART_IRQHandler+0x680>)
 800a998:	400a      	ands	r2, r1
 800a99a:	601a      	str	r2, [r3, #0]
 800a99c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a99e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a9a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9a2:	f383 8810 	msr	PRIMASK, r3
}
 800a9a6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a9a8:	f3ef 8310 	mrs	r3, PRIMASK
 800a9ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800a9ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9b0:	677b      	str	r3, [r7, #116]	@ 0x74
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a9b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a9b8:	f383 8810 	msr	PRIMASK, r3
}
 800a9bc:	46c0      	nop			@ (mov r8, r8)
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	689a      	ldr	r2, [r3, #8]
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	2101      	movs	r1, #1
 800a9ca:	438a      	bics	r2, r1
 800a9cc:	609a      	str	r2, [r3, #8]
 800a9ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a9d0:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a9d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a9d4:	f383 8810 	msr	PRIMASK, r3
}
 800a9d8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a9da:	f3ef 8310 	mrs	r3, PRIMASK
 800a9de:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800a9e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a9e2:	673b      	str	r3, [r7, #112]	@ 0x70
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a9e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a9ea:	f383 8810 	msr	PRIMASK, r3
}
 800a9ee:	46c0      	nop			@ (mov r8, r8)
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	689a      	ldr	r2, [r3, #8]
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	2140      	movs	r1, #64	@ 0x40
 800a9fc:	438a      	bics	r2, r1
 800a9fe:	609a      	str	r2, [r3, #8]
 800aa00:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800aa02:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa06:	f383 8810 	msr	PRIMASK, r3
}
 800aa0a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	228c      	movs	r2, #140	@ 0x8c
 800aa10:	2120      	movs	r1, #32
 800aa12:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2200      	movs	r2, #0
 800aa18:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800aa1a:	f3ef 8310 	mrs	r3, PRIMASK
 800aa1e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 800aa20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa22:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800aa24:	2301      	movs	r3, #1
 800aa26:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa28:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800aa2a:	f383 8810 	msr	PRIMASK, r3
}
 800aa2e:	46c0      	nop			@ (mov r8, r8)
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	681a      	ldr	r2, [r3, #0]
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	2110      	movs	r1, #16
 800aa3c:	438a      	bics	r2, r1
 800aa3e:	601a      	str	r2, [r3, #0]
 800aa40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa42:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa44:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aa46:	f383 8810 	msr	PRIMASK, r3
}
 800aa4a:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2280      	movs	r2, #128	@ 0x80
 800aa50:	589b      	ldr	r3, [r3, r2]
 800aa52:	0018      	movs	r0, r3
 800aa54:	f7fa fb28 	bl	80050a8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2202      	movs	r2, #2
 800aa5c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	225c      	movs	r2, #92	@ 0x5c
 800aa62:	5a9a      	ldrh	r2, [r3, r2]
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	215e      	movs	r1, #94	@ 0x5e
 800aa68:	5a5b      	ldrh	r3, [r3, r1]
 800aa6a:	b29b      	uxth	r3, r3
 800aa6c:	1ad3      	subs	r3, r2, r3
 800aa6e:	b29a      	uxth	r2, r3
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	0011      	movs	r1, r2
 800aa74:	0018      	movs	r0, r3
 800aa76:	f7f8 fbb7 	bl	80031e8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800aa7a:	e10c      	b.n	800ac96 <HAL_UART_IRQHandler+0x66e>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	225c      	movs	r2, #92	@ 0x5c
 800aa80:	5a9b      	ldrh	r3, [r3, r2]
 800aa82:	227e      	movs	r2, #126	@ 0x7e
 800aa84:	18ba      	adds	r2, r7, r2
 800aa86:	8812      	ldrh	r2, [r2, #0]
 800aa88:	429a      	cmp	r2, r3
 800aa8a:	d000      	beq.n	800aa8e <HAL_UART_IRQHandler+0x466>
 800aa8c:	e103      	b.n	800ac96 <HAL_UART_IRQHandler+0x66e>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	2280      	movs	r2, #128	@ 0x80
 800aa92:	589b      	ldr	r3, [r3, r2]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	2220      	movs	r2, #32
 800aa9a:	4013      	ands	r3, r2
 800aa9c:	2b20      	cmp	r3, #32
 800aa9e:	d000      	beq.n	800aaa2 <HAL_UART_IRQHandler+0x47a>
 800aaa0:	e0f9      	b.n	800ac96 <HAL_UART_IRQHandler+0x66e>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	2202      	movs	r2, #2
 800aaa6:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	225c      	movs	r2, #92	@ 0x5c
 800aaac:	5a9a      	ldrh	r2, [r3, r2]
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	0011      	movs	r1, r2
 800aab2:	0018      	movs	r0, r3
 800aab4:	f7f8 fb98 	bl	80031e8 <HAL_UARTEx_RxEventCallback>
      return;
 800aab8:	e0ed      	b.n	800ac96 <HAL_UART_IRQHandler+0x66e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	225c      	movs	r2, #92	@ 0x5c
 800aabe:	5a99      	ldrh	r1, [r3, r2]
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	225e      	movs	r2, #94	@ 0x5e
 800aac4:	5a9b      	ldrh	r3, [r3, r2]
 800aac6:	b29a      	uxth	r2, r3
 800aac8:	208e      	movs	r0, #142	@ 0x8e
 800aaca:	183b      	adds	r3, r7, r0
 800aacc:	1a8a      	subs	r2, r1, r2
 800aace:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	225e      	movs	r2, #94	@ 0x5e
 800aad4:	5a9b      	ldrh	r3, [r3, r2]
 800aad6:	b29b      	uxth	r3, r3
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d100      	bne.n	800aade <HAL_UART_IRQHandler+0x4b6>
 800aadc:	e0dd      	b.n	800ac9a <HAL_UART_IRQHandler+0x672>
          && (nb_rx_data > 0U))
 800aade:	183b      	adds	r3, r7, r0
 800aae0:	881b      	ldrh	r3, [r3, #0]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d100      	bne.n	800aae8 <HAL_UART_IRQHandler+0x4c0>
 800aae6:	e0d8      	b.n	800ac9a <HAL_UART_IRQHandler+0x672>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800aae8:	f3ef 8310 	mrs	r3, PRIMASK
 800aaec:	60fb      	str	r3, [r7, #12]
  return(result);
 800aaee:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aaf0:	2488      	movs	r4, #136	@ 0x88
 800aaf2:	193a      	adds	r2, r7, r4
 800aaf4:	6013      	str	r3, [r2, #0]
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aafa:	693b      	ldr	r3, [r7, #16]
 800aafc:	f383 8810 	msr	PRIMASK, r3
}
 800ab00:	46c0      	nop			@ (mov r8, r8)
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	681a      	ldr	r2, [r3, #0]
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	4967      	ldr	r1, [pc, #412]	@ (800acac <HAL_UART_IRQHandler+0x684>)
 800ab0e:	400a      	ands	r2, r1
 800ab10:	601a      	str	r2, [r3, #0]
 800ab12:	193b      	adds	r3, r7, r4
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab18:	697b      	ldr	r3, [r7, #20]
 800ab1a:	f383 8810 	msr	PRIMASK, r3
}
 800ab1e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800ab20:	f3ef 8310 	mrs	r3, PRIMASK
 800ab24:	61bb      	str	r3, [r7, #24]
  return(result);
 800ab26:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ab28:	2484      	movs	r4, #132	@ 0x84
 800ab2a:	193a      	adds	r2, r7, r4
 800ab2c:	6013      	str	r3, [r2, #0]
 800ab2e:	2301      	movs	r3, #1
 800ab30:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab32:	69fb      	ldr	r3, [r7, #28]
 800ab34:	f383 8810 	msr	PRIMASK, r3
}
 800ab38:	46c0      	nop			@ (mov r8, r8)
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	689a      	ldr	r2, [r3, #8]
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	495a      	ldr	r1, [pc, #360]	@ (800acb0 <HAL_UART_IRQHandler+0x688>)
 800ab46:	400a      	ands	r2, r1
 800ab48:	609a      	str	r2, [r3, #8]
 800ab4a:	193b      	adds	r3, r7, r4
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab50:	6a3b      	ldr	r3, [r7, #32]
 800ab52:	f383 8810 	msr	PRIMASK, r3
}
 800ab56:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	228c      	movs	r2, #140	@ 0x8c
 800ab5c:	2120      	movs	r1, #32
 800ab5e:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2200      	movs	r2, #0
 800ab64:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	2200      	movs	r2, #0
 800ab6a:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800ab6c:	f3ef 8310 	mrs	r3, PRIMASK
 800ab70:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800ab72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab74:	2480      	movs	r4, #128	@ 0x80
 800ab76:	193a      	adds	r2, r7, r4
 800ab78:	6013      	str	r3, [r2, #0]
 800ab7a:	2301      	movs	r3, #1
 800ab7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab80:	f383 8810 	msr	PRIMASK, r3
}
 800ab84:	46c0      	nop			@ (mov r8, r8)
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	681a      	ldr	r2, [r3, #0]
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	2110      	movs	r1, #16
 800ab92:	438a      	bics	r2, r1
 800ab94:	601a      	str	r2, [r3, #0]
 800ab96:	193b      	adds	r3, r7, r4
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab9e:	f383 8810 	msr	PRIMASK, r3
}
 800aba2:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2202      	movs	r2, #2
 800aba8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800abaa:	183b      	adds	r3, r7, r0
 800abac:	881a      	ldrh	r2, [r3, #0]
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	0011      	movs	r1, r2
 800abb2:	0018      	movs	r0, r3
 800abb4:	f7f8 fb18 	bl	80031e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800abb8:	e06f      	b.n	800ac9a <HAL_UART_IRQHandler+0x672>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800abba:	23a4      	movs	r3, #164	@ 0xa4
 800abbc:	18fb      	adds	r3, r7, r3
 800abbe:	681a      	ldr	r2, [r3, #0]
 800abc0:	2380      	movs	r3, #128	@ 0x80
 800abc2:	035b      	lsls	r3, r3, #13
 800abc4:	4013      	ands	r3, r2
 800abc6:	d010      	beq.n	800abea <HAL_UART_IRQHandler+0x5c2>
 800abc8:	239c      	movs	r3, #156	@ 0x9c
 800abca:	18fb      	adds	r3, r7, r3
 800abcc:	681a      	ldr	r2, [r3, #0]
 800abce:	2380      	movs	r3, #128	@ 0x80
 800abd0:	03db      	lsls	r3, r3, #15
 800abd2:	4013      	ands	r3, r2
 800abd4:	d009      	beq.n	800abea <HAL_UART_IRQHandler+0x5c2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	2280      	movs	r2, #128	@ 0x80
 800abdc:	0352      	lsls	r2, r2, #13
 800abde:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	0018      	movs	r0, r3
 800abe4:	f000 ff24 	bl	800ba30 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800abe8:	e05a      	b.n	800aca0 <HAL_UART_IRQHandler+0x678>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800abea:	23a4      	movs	r3, #164	@ 0xa4
 800abec:	18fb      	adds	r3, r7, r3
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	2280      	movs	r2, #128	@ 0x80
 800abf2:	4013      	ands	r3, r2
 800abf4:	d016      	beq.n	800ac24 <HAL_UART_IRQHandler+0x5fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800abf6:	23a0      	movs	r3, #160	@ 0xa0
 800abf8:	18fb      	adds	r3, r7, r3
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	2280      	movs	r2, #128	@ 0x80
 800abfe:	4013      	ands	r3, r2
 800ac00:	d106      	bne.n	800ac10 <HAL_UART_IRQHandler+0x5e8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ac02:	239c      	movs	r3, #156	@ 0x9c
 800ac04:	18fb      	adds	r3, r7, r3
 800ac06:	681a      	ldr	r2, [r3, #0]
 800ac08:	2380      	movs	r3, #128	@ 0x80
 800ac0a:	041b      	lsls	r3, r3, #16
 800ac0c:	4013      	ands	r3, r2
 800ac0e:	d009      	beq.n	800ac24 <HAL_UART_IRQHandler+0x5fc>
  {
    if (huart->TxISR != NULL)
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d042      	beq.n	800ac9e <HAL_UART_IRQHandler+0x676>
    {
      huart->TxISR(huart);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ac1c:	687a      	ldr	r2, [r7, #4]
 800ac1e:	0010      	movs	r0, r2
 800ac20:	4798      	blx	r3
    }
    return;
 800ac22:	e03c      	b.n	800ac9e <HAL_UART_IRQHandler+0x676>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ac24:	23a4      	movs	r3, #164	@ 0xa4
 800ac26:	18fb      	adds	r3, r7, r3
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	2240      	movs	r2, #64	@ 0x40
 800ac2c:	4013      	ands	r3, r2
 800ac2e:	d00a      	beq.n	800ac46 <HAL_UART_IRQHandler+0x61e>
 800ac30:	23a0      	movs	r3, #160	@ 0xa0
 800ac32:	18fb      	adds	r3, r7, r3
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	2240      	movs	r2, #64	@ 0x40
 800ac38:	4013      	ands	r3, r2
 800ac3a:	d004      	beq.n	800ac46 <HAL_UART_IRQHandler+0x61e>
  {
    UART_EndTransmit_IT(huart);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	0018      	movs	r0, r3
 800ac40:	f000 fe57 	bl	800b8f2 <UART_EndTransmit_IT>
    return;
 800ac44:	e02c      	b.n	800aca0 <HAL_UART_IRQHandler+0x678>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ac46:	23a4      	movs	r3, #164	@ 0xa4
 800ac48:	18fb      	adds	r3, r7, r3
 800ac4a:	681a      	ldr	r2, [r3, #0]
 800ac4c:	2380      	movs	r3, #128	@ 0x80
 800ac4e:	041b      	lsls	r3, r3, #16
 800ac50:	4013      	ands	r3, r2
 800ac52:	d00b      	beq.n	800ac6c <HAL_UART_IRQHandler+0x644>
 800ac54:	23a0      	movs	r3, #160	@ 0xa0
 800ac56:	18fb      	adds	r3, r7, r3
 800ac58:	681a      	ldr	r2, [r3, #0]
 800ac5a:	2380      	movs	r3, #128	@ 0x80
 800ac5c:	05db      	lsls	r3, r3, #23
 800ac5e:	4013      	ands	r3, r2
 800ac60:	d004      	beq.n	800ac6c <HAL_UART_IRQHandler+0x644>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	0018      	movs	r0, r3
 800ac66:	f000 fef3 	bl	800ba50 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ac6a:	e019      	b.n	800aca0 <HAL_UART_IRQHandler+0x678>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ac6c:	23a4      	movs	r3, #164	@ 0xa4
 800ac6e:	18fb      	adds	r3, r7, r3
 800ac70:	681a      	ldr	r2, [r3, #0]
 800ac72:	2380      	movs	r3, #128	@ 0x80
 800ac74:	045b      	lsls	r3, r3, #17
 800ac76:	4013      	ands	r3, r2
 800ac78:	d012      	beq.n	800aca0 <HAL_UART_IRQHandler+0x678>
 800ac7a:	23a0      	movs	r3, #160	@ 0xa0
 800ac7c:	18fb      	adds	r3, r7, r3
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	da0d      	bge.n	800aca0 <HAL_UART_IRQHandler+0x678>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	0018      	movs	r0, r3
 800ac88:	f000 feda 	bl	800ba40 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ac8c:	e008      	b.n	800aca0 <HAL_UART_IRQHandler+0x678>
      return;
 800ac8e:	46c0      	nop			@ (mov r8, r8)
 800ac90:	e006      	b.n	800aca0 <HAL_UART_IRQHandler+0x678>
    return;
 800ac92:	46c0      	nop			@ (mov r8, r8)
 800ac94:	e004      	b.n	800aca0 <HAL_UART_IRQHandler+0x678>
      return;
 800ac96:	46c0      	nop			@ (mov r8, r8)
 800ac98:	e002      	b.n	800aca0 <HAL_UART_IRQHandler+0x678>
      return;
 800ac9a:	46c0      	nop			@ (mov r8, r8)
 800ac9c:	e000      	b.n	800aca0 <HAL_UART_IRQHandler+0x678>
    return;
 800ac9e:	46c0      	nop			@ (mov r8, r8)
  }
}
 800aca0:	46bd      	mov	sp, r7
 800aca2:	b02a      	add	sp, #168	@ 0xa8
 800aca4:	bdb0      	pop	{r4, r5, r7, pc}
 800aca6:	46c0      	nop			@ (mov r8, r8)
 800aca8:	fffffeff 	.word	0xfffffeff
 800acac:	fffffedf 	.word	0xfffffedf
 800acb0:	effffffe 	.word	0xeffffffe

0800acb4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b082      	sub	sp, #8
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800acbc:	46c0      	nop			@ (mov r8, r8)
 800acbe:	46bd      	mov	sp, r7
 800acc0:	b002      	add	sp, #8
 800acc2:	bd80      	pop	{r7, pc}

0800acc4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b082      	sub	sp, #8
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800accc:	46c0      	nop			@ (mov r8, r8)
 800acce:	46bd      	mov	sp, r7
 800acd0:	b002      	add	sp, #8
 800acd2:	bd80      	pop	{r7, pc}

0800acd4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b082      	sub	sp, #8
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800acdc:	46c0      	nop			@ (mov r8, r8)
 800acde:	46bd      	mov	sp, r7
 800ace0:	b002      	add	sp, #8
 800ace2:	bd80      	pop	{r7, pc}

0800ace4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b088      	sub	sp, #32
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800acec:	231e      	movs	r3, #30
 800acee:	18fb      	adds	r3, r7, r3
 800acf0:	2200      	movs	r2, #0
 800acf2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	689a      	ldr	r2, [r3, #8]
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	691b      	ldr	r3, [r3, #16]
 800acfc:	431a      	orrs	r2, r3
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	695b      	ldr	r3, [r3, #20]
 800ad02:	431a      	orrs	r2, r3
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	69db      	ldr	r3, [r3, #28]
 800ad08:	4313      	orrs	r3, r2
 800ad0a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	4aab      	ldr	r2, [pc, #684]	@ (800afc0 <UART_SetConfig+0x2dc>)
 800ad14:	4013      	ands	r3, r2
 800ad16:	0019      	movs	r1, r3
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	697a      	ldr	r2, [r7, #20]
 800ad1e:	430a      	orrs	r2, r1
 800ad20:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	685b      	ldr	r3, [r3, #4]
 800ad28:	4aa6      	ldr	r2, [pc, #664]	@ (800afc4 <UART_SetConfig+0x2e0>)
 800ad2a:	4013      	ands	r3, r2
 800ad2c:	0019      	movs	r1, r3
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	68da      	ldr	r2, [r3, #12]
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	430a      	orrs	r2, r1
 800ad38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	699b      	ldr	r3, [r3, #24]
 800ad3e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	6a1b      	ldr	r3, [r3, #32]
 800ad44:	697a      	ldr	r2, [r7, #20]
 800ad46:	4313      	orrs	r3, r2
 800ad48:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	689b      	ldr	r3, [r3, #8]
 800ad50:	4a9d      	ldr	r2, [pc, #628]	@ (800afc8 <UART_SetConfig+0x2e4>)
 800ad52:	4013      	ands	r3, r2
 800ad54:	0019      	movs	r1, r3
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	697a      	ldr	r2, [r7, #20]
 800ad5c:	430a      	orrs	r2, r1
 800ad5e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad66:	220f      	movs	r2, #15
 800ad68:	4393      	bics	r3, r2
 800ad6a:	0019      	movs	r1, r3
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	430a      	orrs	r2, r1
 800ad76:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	4a93      	ldr	r2, [pc, #588]	@ (800afcc <UART_SetConfig+0x2e8>)
 800ad7e:	4293      	cmp	r3, r2
 800ad80:	d127      	bne.n	800add2 <UART_SetConfig+0xee>
 800ad82:	4b93      	ldr	r3, [pc, #588]	@ (800afd0 <UART_SetConfig+0x2ec>)
 800ad84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad86:	2203      	movs	r2, #3
 800ad88:	4013      	ands	r3, r2
 800ad8a:	2b03      	cmp	r3, #3
 800ad8c:	d017      	beq.n	800adbe <UART_SetConfig+0xda>
 800ad8e:	d81b      	bhi.n	800adc8 <UART_SetConfig+0xe4>
 800ad90:	2b02      	cmp	r3, #2
 800ad92:	d00a      	beq.n	800adaa <UART_SetConfig+0xc6>
 800ad94:	d818      	bhi.n	800adc8 <UART_SetConfig+0xe4>
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d002      	beq.n	800ada0 <UART_SetConfig+0xbc>
 800ad9a:	2b01      	cmp	r3, #1
 800ad9c:	d00a      	beq.n	800adb4 <UART_SetConfig+0xd0>
 800ad9e:	e013      	b.n	800adc8 <UART_SetConfig+0xe4>
 800ada0:	231f      	movs	r3, #31
 800ada2:	18fb      	adds	r3, r7, r3
 800ada4:	2200      	movs	r2, #0
 800ada6:	701a      	strb	r2, [r3, #0]
 800ada8:	e021      	b.n	800adee <UART_SetConfig+0x10a>
 800adaa:	231f      	movs	r3, #31
 800adac:	18fb      	adds	r3, r7, r3
 800adae:	2202      	movs	r2, #2
 800adb0:	701a      	strb	r2, [r3, #0]
 800adb2:	e01c      	b.n	800adee <UART_SetConfig+0x10a>
 800adb4:	231f      	movs	r3, #31
 800adb6:	18fb      	adds	r3, r7, r3
 800adb8:	2204      	movs	r2, #4
 800adba:	701a      	strb	r2, [r3, #0]
 800adbc:	e017      	b.n	800adee <UART_SetConfig+0x10a>
 800adbe:	231f      	movs	r3, #31
 800adc0:	18fb      	adds	r3, r7, r3
 800adc2:	2208      	movs	r2, #8
 800adc4:	701a      	strb	r2, [r3, #0]
 800adc6:	e012      	b.n	800adee <UART_SetConfig+0x10a>
 800adc8:	231f      	movs	r3, #31
 800adca:	18fb      	adds	r3, r7, r3
 800adcc:	2210      	movs	r2, #16
 800adce:	701a      	strb	r2, [r3, #0]
 800add0:	e00d      	b.n	800adee <UART_SetConfig+0x10a>
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	4a7f      	ldr	r2, [pc, #508]	@ (800afd4 <UART_SetConfig+0x2f0>)
 800add8:	4293      	cmp	r3, r2
 800adda:	d104      	bne.n	800ade6 <UART_SetConfig+0x102>
 800addc:	231f      	movs	r3, #31
 800adde:	18fb      	adds	r3, r7, r3
 800ade0:	2200      	movs	r2, #0
 800ade2:	701a      	strb	r2, [r3, #0]
 800ade4:	e003      	b.n	800adee <UART_SetConfig+0x10a>
 800ade6:	231f      	movs	r3, #31
 800ade8:	18fb      	adds	r3, r7, r3
 800adea:	2210      	movs	r2, #16
 800adec:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	69da      	ldr	r2, [r3, #28]
 800adf2:	2380      	movs	r3, #128	@ 0x80
 800adf4:	021b      	lsls	r3, r3, #8
 800adf6:	429a      	cmp	r2, r3
 800adf8:	d000      	beq.n	800adfc <UART_SetConfig+0x118>
 800adfa:	e06f      	b.n	800aedc <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 800adfc:	231f      	movs	r3, #31
 800adfe:	18fb      	adds	r3, r7, r3
 800ae00:	781b      	ldrb	r3, [r3, #0]
 800ae02:	2b08      	cmp	r3, #8
 800ae04:	d01f      	beq.n	800ae46 <UART_SetConfig+0x162>
 800ae06:	dc22      	bgt.n	800ae4e <UART_SetConfig+0x16a>
 800ae08:	2b04      	cmp	r3, #4
 800ae0a:	d017      	beq.n	800ae3c <UART_SetConfig+0x158>
 800ae0c:	dc1f      	bgt.n	800ae4e <UART_SetConfig+0x16a>
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d002      	beq.n	800ae18 <UART_SetConfig+0x134>
 800ae12:	2b02      	cmp	r3, #2
 800ae14:	d005      	beq.n	800ae22 <UART_SetConfig+0x13e>
 800ae16:	e01a      	b.n	800ae4e <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ae18:	f7fd fbb2 	bl	8008580 <HAL_RCC_GetPCLK1Freq>
 800ae1c:	0003      	movs	r3, r0
 800ae1e:	61bb      	str	r3, [r7, #24]
        break;
 800ae20:	e01c      	b.n	800ae5c <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 800ae22:	4b6b      	ldr	r3, [pc, #428]	@ (800afd0 <UART_SetConfig+0x2ec>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	095b      	lsrs	r3, r3, #5
 800ae28:	2207      	movs	r2, #7
 800ae2a:	4013      	ands	r3, r2
 800ae2c:	3301      	adds	r3, #1
 800ae2e:	0019      	movs	r1, r3
 800ae30:	4869      	ldr	r0, [pc, #420]	@ (800afd8 <UART_SetConfig+0x2f4>)
 800ae32:	f7f5 f969 	bl	8000108 <__udivsi3>
 800ae36:	0003      	movs	r3, r0
 800ae38:	61bb      	str	r3, [r7, #24]
        break;
 800ae3a:	e00f      	b.n	800ae5c <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ae3c:	f7fd fb2a 	bl	8008494 <HAL_RCC_GetSysClockFreq>
 800ae40:	0003      	movs	r3, r0
 800ae42:	61bb      	str	r3, [r7, #24]
        break;
 800ae44:	e00a      	b.n	800ae5c <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ae46:	2380      	movs	r3, #128	@ 0x80
 800ae48:	021b      	lsls	r3, r3, #8
 800ae4a:	61bb      	str	r3, [r7, #24]
        break;
 800ae4c:	e006      	b.n	800ae5c <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 800ae4e:	2300      	movs	r3, #0
 800ae50:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ae52:	231e      	movs	r3, #30
 800ae54:	18fb      	adds	r3, r7, r3
 800ae56:	2201      	movs	r2, #1
 800ae58:	701a      	strb	r2, [r3, #0]
        break;
 800ae5a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ae5c:	69bb      	ldr	r3, [r7, #24]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d100      	bne.n	800ae64 <UART_SetConfig+0x180>
 800ae62:	e097      	b.n	800af94 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ae68:	4b5c      	ldr	r3, [pc, #368]	@ (800afdc <UART_SetConfig+0x2f8>)
 800ae6a:	0052      	lsls	r2, r2, #1
 800ae6c:	5ad3      	ldrh	r3, [r2, r3]
 800ae6e:	0019      	movs	r1, r3
 800ae70:	69b8      	ldr	r0, [r7, #24]
 800ae72:	f7f5 f949 	bl	8000108 <__udivsi3>
 800ae76:	0003      	movs	r3, r0
 800ae78:	005a      	lsls	r2, r3, #1
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	685b      	ldr	r3, [r3, #4]
 800ae7e:	085b      	lsrs	r3, r3, #1
 800ae80:	18d2      	adds	r2, r2, r3
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	685b      	ldr	r3, [r3, #4]
 800ae86:	0019      	movs	r1, r3
 800ae88:	0010      	movs	r0, r2
 800ae8a:	f7f5 f93d 	bl	8000108 <__udivsi3>
 800ae8e:	0003      	movs	r3, r0
 800ae90:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ae92:	693b      	ldr	r3, [r7, #16]
 800ae94:	2b0f      	cmp	r3, #15
 800ae96:	d91c      	bls.n	800aed2 <UART_SetConfig+0x1ee>
 800ae98:	693a      	ldr	r2, [r7, #16]
 800ae9a:	2380      	movs	r3, #128	@ 0x80
 800ae9c:	025b      	lsls	r3, r3, #9
 800ae9e:	429a      	cmp	r2, r3
 800aea0:	d217      	bcs.n	800aed2 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aea2:	693b      	ldr	r3, [r7, #16]
 800aea4:	b29a      	uxth	r2, r3
 800aea6:	200e      	movs	r0, #14
 800aea8:	183b      	adds	r3, r7, r0
 800aeaa:	210f      	movs	r1, #15
 800aeac:	438a      	bics	r2, r1
 800aeae:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aeb0:	693b      	ldr	r3, [r7, #16]
 800aeb2:	085b      	lsrs	r3, r3, #1
 800aeb4:	b29b      	uxth	r3, r3
 800aeb6:	2207      	movs	r2, #7
 800aeb8:	4013      	ands	r3, r2
 800aeba:	b299      	uxth	r1, r3
 800aebc:	183b      	adds	r3, r7, r0
 800aebe:	183a      	adds	r2, r7, r0
 800aec0:	8812      	ldrh	r2, [r2, #0]
 800aec2:	430a      	orrs	r2, r1
 800aec4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	183a      	adds	r2, r7, r0
 800aecc:	8812      	ldrh	r2, [r2, #0]
 800aece:	60da      	str	r2, [r3, #12]
 800aed0:	e060      	b.n	800af94 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 800aed2:	231e      	movs	r3, #30
 800aed4:	18fb      	adds	r3, r7, r3
 800aed6:	2201      	movs	r2, #1
 800aed8:	701a      	strb	r2, [r3, #0]
 800aeda:	e05b      	b.n	800af94 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800aedc:	231f      	movs	r3, #31
 800aede:	18fb      	adds	r3, r7, r3
 800aee0:	781b      	ldrb	r3, [r3, #0]
 800aee2:	2b08      	cmp	r3, #8
 800aee4:	d01f      	beq.n	800af26 <UART_SetConfig+0x242>
 800aee6:	dc22      	bgt.n	800af2e <UART_SetConfig+0x24a>
 800aee8:	2b04      	cmp	r3, #4
 800aeea:	d017      	beq.n	800af1c <UART_SetConfig+0x238>
 800aeec:	dc1f      	bgt.n	800af2e <UART_SetConfig+0x24a>
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d002      	beq.n	800aef8 <UART_SetConfig+0x214>
 800aef2:	2b02      	cmp	r3, #2
 800aef4:	d005      	beq.n	800af02 <UART_SetConfig+0x21e>
 800aef6:	e01a      	b.n	800af2e <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aef8:	f7fd fb42 	bl	8008580 <HAL_RCC_GetPCLK1Freq>
 800aefc:	0003      	movs	r3, r0
 800aefe:	61bb      	str	r3, [r7, #24]
        break;
 800af00:	e01c      	b.n	800af3c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 800af02:	4b33      	ldr	r3, [pc, #204]	@ (800afd0 <UART_SetConfig+0x2ec>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	095b      	lsrs	r3, r3, #5
 800af08:	2207      	movs	r2, #7
 800af0a:	4013      	ands	r3, r2
 800af0c:	3301      	adds	r3, #1
 800af0e:	0019      	movs	r1, r3
 800af10:	4831      	ldr	r0, [pc, #196]	@ (800afd8 <UART_SetConfig+0x2f4>)
 800af12:	f7f5 f8f9 	bl	8000108 <__udivsi3>
 800af16:	0003      	movs	r3, r0
 800af18:	61bb      	str	r3, [r7, #24]
        break;
 800af1a:	e00f      	b.n	800af3c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800af1c:	f7fd faba 	bl	8008494 <HAL_RCC_GetSysClockFreq>
 800af20:	0003      	movs	r3, r0
 800af22:	61bb      	str	r3, [r7, #24]
        break;
 800af24:	e00a      	b.n	800af3c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800af26:	2380      	movs	r3, #128	@ 0x80
 800af28:	021b      	lsls	r3, r3, #8
 800af2a:	61bb      	str	r3, [r7, #24]
        break;
 800af2c:	e006      	b.n	800af3c <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 800af2e:	2300      	movs	r3, #0
 800af30:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800af32:	231e      	movs	r3, #30
 800af34:	18fb      	adds	r3, r7, r3
 800af36:	2201      	movs	r2, #1
 800af38:	701a      	strb	r2, [r3, #0]
        break;
 800af3a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800af3c:	69bb      	ldr	r3, [r7, #24]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d028      	beq.n	800af94 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800af46:	4b25      	ldr	r3, [pc, #148]	@ (800afdc <UART_SetConfig+0x2f8>)
 800af48:	0052      	lsls	r2, r2, #1
 800af4a:	5ad3      	ldrh	r3, [r2, r3]
 800af4c:	0019      	movs	r1, r3
 800af4e:	69b8      	ldr	r0, [r7, #24]
 800af50:	f7f5 f8da 	bl	8000108 <__udivsi3>
 800af54:	0003      	movs	r3, r0
 800af56:	001a      	movs	r2, r3
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	685b      	ldr	r3, [r3, #4]
 800af5c:	085b      	lsrs	r3, r3, #1
 800af5e:	18d2      	adds	r2, r2, r3
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	685b      	ldr	r3, [r3, #4]
 800af64:	0019      	movs	r1, r3
 800af66:	0010      	movs	r0, r2
 800af68:	f7f5 f8ce 	bl	8000108 <__udivsi3>
 800af6c:	0003      	movs	r3, r0
 800af6e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af70:	693b      	ldr	r3, [r7, #16]
 800af72:	2b0f      	cmp	r3, #15
 800af74:	d90a      	bls.n	800af8c <UART_SetConfig+0x2a8>
 800af76:	693a      	ldr	r2, [r7, #16]
 800af78:	2380      	movs	r3, #128	@ 0x80
 800af7a:	025b      	lsls	r3, r3, #9
 800af7c:	429a      	cmp	r2, r3
 800af7e:	d205      	bcs.n	800af8c <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800af80:	693b      	ldr	r3, [r7, #16]
 800af82:	b29a      	uxth	r2, r3
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	60da      	str	r2, [r3, #12]
 800af8a:	e003      	b.n	800af94 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 800af8c:	231e      	movs	r3, #30
 800af8e:	18fb      	adds	r3, r7, r3
 800af90:	2201      	movs	r2, #1
 800af92:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	226a      	movs	r2, #106	@ 0x6a
 800af98:	2101      	movs	r1, #1
 800af9a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2268      	movs	r2, #104	@ 0x68
 800afa0:	2101      	movs	r1, #1
 800afa2:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2200      	movs	r2, #0
 800afa8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2200      	movs	r2, #0
 800afae:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800afb0:	231e      	movs	r3, #30
 800afb2:	18fb      	adds	r3, r7, r3
 800afb4:	781b      	ldrb	r3, [r3, #0]
}
 800afb6:	0018      	movs	r0, r3
 800afb8:	46bd      	mov	sp, r7
 800afba:	b008      	add	sp, #32
 800afbc:	bd80      	pop	{r7, pc}
 800afbe:	46c0      	nop			@ (mov r8, r8)
 800afc0:	cfff69f3 	.word	0xcfff69f3
 800afc4:	ffffcfff 	.word	0xffffcfff
 800afc8:	11fff4ff 	.word	0x11fff4ff
 800afcc:	40013800 	.word	0x40013800
 800afd0:	40021000 	.word	0x40021000
 800afd4:	40004400 	.word	0x40004400
 800afd8:	02dc6c00 	.word	0x02dc6c00
 800afdc:	0800c584 	.word	0x0800c584

0800afe0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b082      	sub	sp, #8
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afec:	2208      	movs	r2, #8
 800afee:	4013      	ands	r3, r2
 800aff0:	d00b      	beq.n	800b00a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	685b      	ldr	r3, [r3, #4]
 800aff8:	4a4a      	ldr	r2, [pc, #296]	@ (800b124 <UART_AdvFeatureConfig+0x144>)
 800affa:	4013      	ands	r3, r2
 800affc:	0019      	movs	r1, r3
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	430a      	orrs	r2, r1
 800b008:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b00e:	2201      	movs	r2, #1
 800b010:	4013      	ands	r3, r2
 800b012:	d00b      	beq.n	800b02c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	685b      	ldr	r3, [r3, #4]
 800b01a:	4a43      	ldr	r2, [pc, #268]	@ (800b128 <UART_AdvFeatureConfig+0x148>)
 800b01c:	4013      	ands	r3, r2
 800b01e:	0019      	movs	r1, r3
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	430a      	orrs	r2, r1
 800b02a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b030:	2202      	movs	r2, #2
 800b032:	4013      	ands	r3, r2
 800b034:	d00b      	beq.n	800b04e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	685b      	ldr	r3, [r3, #4]
 800b03c:	4a3b      	ldr	r2, [pc, #236]	@ (800b12c <UART_AdvFeatureConfig+0x14c>)
 800b03e:	4013      	ands	r3, r2
 800b040:	0019      	movs	r1, r3
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	430a      	orrs	r2, r1
 800b04c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b052:	2204      	movs	r2, #4
 800b054:	4013      	ands	r3, r2
 800b056:	d00b      	beq.n	800b070 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	685b      	ldr	r3, [r3, #4]
 800b05e:	4a34      	ldr	r2, [pc, #208]	@ (800b130 <UART_AdvFeatureConfig+0x150>)
 800b060:	4013      	ands	r3, r2
 800b062:	0019      	movs	r1, r3
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	430a      	orrs	r2, r1
 800b06e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b074:	2210      	movs	r2, #16
 800b076:	4013      	ands	r3, r2
 800b078:	d00b      	beq.n	800b092 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	689b      	ldr	r3, [r3, #8]
 800b080:	4a2c      	ldr	r2, [pc, #176]	@ (800b134 <UART_AdvFeatureConfig+0x154>)
 800b082:	4013      	ands	r3, r2
 800b084:	0019      	movs	r1, r3
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	430a      	orrs	r2, r1
 800b090:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b096:	2220      	movs	r2, #32
 800b098:	4013      	ands	r3, r2
 800b09a:	d00b      	beq.n	800b0b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	689b      	ldr	r3, [r3, #8]
 800b0a2:	4a25      	ldr	r2, [pc, #148]	@ (800b138 <UART_AdvFeatureConfig+0x158>)
 800b0a4:	4013      	ands	r3, r2
 800b0a6:	0019      	movs	r1, r3
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	430a      	orrs	r2, r1
 800b0b2:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0b8:	2240      	movs	r2, #64	@ 0x40
 800b0ba:	4013      	ands	r3, r2
 800b0bc:	d01d      	beq.n	800b0fa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	685b      	ldr	r3, [r3, #4]
 800b0c4:	4a1d      	ldr	r2, [pc, #116]	@ (800b13c <UART_AdvFeatureConfig+0x15c>)
 800b0c6:	4013      	ands	r3, r2
 800b0c8:	0019      	movs	r1, r3
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	430a      	orrs	r2, r1
 800b0d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b0da:	2380      	movs	r3, #128	@ 0x80
 800b0dc:	035b      	lsls	r3, r3, #13
 800b0de:	429a      	cmp	r2, r3
 800b0e0:	d10b      	bne.n	800b0fa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	685b      	ldr	r3, [r3, #4]
 800b0e8:	4a15      	ldr	r2, [pc, #84]	@ (800b140 <UART_AdvFeatureConfig+0x160>)
 800b0ea:	4013      	ands	r3, r2
 800b0ec:	0019      	movs	r1, r3
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	430a      	orrs	r2, r1
 800b0f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0fe:	2280      	movs	r2, #128	@ 0x80
 800b100:	4013      	ands	r3, r2
 800b102:	d00b      	beq.n	800b11c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	685b      	ldr	r3, [r3, #4]
 800b10a:	4a0e      	ldr	r2, [pc, #56]	@ (800b144 <UART_AdvFeatureConfig+0x164>)
 800b10c:	4013      	ands	r3, r2
 800b10e:	0019      	movs	r1, r3
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	430a      	orrs	r2, r1
 800b11a:	605a      	str	r2, [r3, #4]
  }
}
 800b11c:	46c0      	nop			@ (mov r8, r8)
 800b11e:	46bd      	mov	sp, r7
 800b120:	b002      	add	sp, #8
 800b122:	bd80      	pop	{r7, pc}
 800b124:	ffff7fff 	.word	0xffff7fff
 800b128:	fffdffff 	.word	0xfffdffff
 800b12c:	fffeffff 	.word	0xfffeffff
 800b130:	fffbffff 	.word	0xfffbffff
 800b134:	ffffefff 	.word	0xffffefff
 800b138:	ffffdfff 	.word	0xffffdfff
 800b13c:	ffefffff 	.word	0xffefffff
 800b140:	ff9fffff 	.word	0xff9fffff
 800b144:	fff7ffff 	.word	0xfff7ffff

0800b148 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b092      	sub	sp, #72	@ 0x48
 800b14c:	af02      	add	r7, sp, #8
 800b14e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2290      	movs	r2, #144	@ 0x90
 800b154:	2100      	movs	r1, #0
 800b156:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b158:	f7f9 fcde 	bl	8004b18 <HAL_GetTick>
 800b15c:	0003      	movs	r3, r0
 800b15e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	2208      	movs	r2, #8
 800b168:	4013      	ands	r3, r2
 800b16a:	2b08      	cmp	r3, #8
 800b16c:	d12d      	bne.n	800b1ca <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b16e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b170:	2280      	movs	r2, #128	@ 0x80
 800b172:	0391      	lsls	r1, r2, #14
 800b174:	6878      	ldr	r0, [r7, #4]
 800b176:	4a47      	ldr	r2, [pc, #284]	@ (800b294 <UART_CheckIdleState+0x14c>)
 800b178:	9200      	str	r2, [sp, #0]
 800b17a:	2200      	movs	r2, #0
 800b17c:	f000 f88e 	bl	800b29c <UART_WaitOnFlagUntilTimeout>
 800b180:	1e03      	subs	r3, r0, #0
 800b182:	d022      	beq.n	800b1ca <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800b184:	f3ef 8310 	mrs	r3, PRIMASK
 800b188:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800b18a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b18c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b18e:	2301      	movs	r3, #1
 800b190:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b194:	f383 8810 	msr	PRIMASK, r3
}
 800b198:	46c0      	nop			@ (mov r8, r8)
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	681a      	ldr	r2, [r3, #0]
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	2180      	movs	r1, #128	@ 0x80
 800b1a6:	438a      	bics	r2, r1
 800b1a8:	601a      	str	r2, [r3, #0]
 800b1aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b1ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1b0:	f383 8810 	msr	PRIMASK, r3
}
 800b1b4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2288      	movs	r2, #136	@ 0x88
 800b1ba:	2120      	movs	r1, #32
 800b1bc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	2284      	movs	r2, #132	@ 0x84
 800b1c2:	2100      	movs	r1, #0
 800b1c4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b1c6:	2303      	movs	r3, #3
 800b1c8:	e060      	b.n	800b28c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	2204      	movs	r2, #4
 800b1d2:	4013      	ands	r3, r2
 800b1d4:	2b04      	cmp	r3, #4
 800b1d6:	d146      	bne.n	800b266 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b1d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1da:	2280      	movs	r2, #128	@ 0x80
 800b1dc:	03d1      	lsls	r1, r2, #15
 800b1de:	6878      	ldr	r0, [r7, #4]
 800b1e0:	4a2c      	ldr	r2, [pc, #176]	@ (800b294 <UART_CheckIdleState+0x14c>)
 800b1e2:	9200      	str	r2, [sp, #0]
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	f000 f859 	bl	800b29c <UART_WaitOnFlagUntilTimeout>
 800b1ea:	1e03      	subs	r3, r0, #0
 800b1ec:	d03b      	beq.n	800b266 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800b1ee:	f3ef 8310 	mrs	r3, PRIMASK
 800b1f2:	60fb      	str	r3, [r7, #12]
  return(result);
 800b1f4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b1f6:	637b      	str	r3, [r7, #52]	@ 0x34
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b1fc:	693b      	ldr	r3, [r7, #16]
 800b1fe:	f383 8810 	msr	PRIMASK, r3
}
 800b202:	46c0      	nop			@ (mov r8, r8)
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	681a      	ldr	r2, [r3, #0]
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	4922      	ldr	r1, [pc, #136]	@ (800b298 <UART_CheckIdleState+0x150>)
 800b210:	400a      	ands	r2, r1
 800b212:	601a      	str	r2, [r3, #0]
 800b214:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b216:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b218:	697b      	ldr	r3, [r7, #20]
 800b21a:	f383 8810 	msr	PRIMASK, r3
}
 800b21e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800b220:	f3ef 8310 	mrs	r3, PRIMASK
 800b224:	61bb      	str	r3, [r7, #24]
  return(result);
 800b226:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b228:	633b      	str	r3, [r7, #48]	@ 0x30
 800b22a:	2301      	movs	r3, #1
 800b22c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b22e:	69fb      	ldr	r3, [r7, #28]
 800b230:	f383 8810 	msr	PRIMASK, r3
}
 800b234:	46c0      	nop			@ (mov r8, r8)
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	689a      	ldr	r2, [r3, #8]
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	2101      	movs	r1, #1
 800b242:	438a      	bics	r2, r1
 800b244:	609a      	str	r2, [r3, #8]
 800b246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b248:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b24a:	6a3b      	ldr	r3, [r7, #32]
 800b24c:	f383 8810 	msr	PRIMASK, r3
}
 800b250:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	228c      	movs	r2, #140	@ 0x8c
 800b256:	2120      	movs	r1, #32
 800b258:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	2284      	movs	r2, #132	@ 0x84
 800b25e:	2100      	movs	r1, #0
 800b260:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b262:	2303      	movs	r3, #3
 800b264:	e012      	b.n	800b28c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	2288      	movs	r2, #136	@ 0x88
 800b26a:	2120      	movs	r1, #32
 800b26c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	228c      	movs	r2, #140	@ 0x8c
 800b272:	2120      	movs	r1, #32
 800b274:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	2200      	movs	r2, #0
 800b27a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2200      	movs	r2, #0
 800b280:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	2284      	movs	r2, #132	@ 0x84
 800b286:	2100      	movs	r1, #0
 800b288:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b28a:	2300      	movs	r3, #0
}
 800b28c:	0018      	movs	r0, r3
 800b28e:	46bd      	mov	sp, r7
 800b290:	b010      	add	sp, #64	@ 0x40
 800b292:	bd80      	pop	{r7, pc}
 800b294:	01ffffff 	.word	0x01ffffff
 800b298:	fffffedf 	.word	0xfffffedf

0800b29c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b084      	sub	sp, #16
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	60f8      	str	r0, [r7, #12]
 800b2a4:	60b9      	str	r1, [r7, #8]
 800b2a6:	603b      	str	r3, [r7, #0]
 800b2a8:	1dfb      	adds	r3, r7, #7
 800b2aa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b2ac:	e051      	b.n	800b352 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b2ae:	69bb      	ldr	r3, [r7, #24]
 800b2b0:	3301      	adds	r3, #1
 800b2b2:	d04e      	beq.n	800b352 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b2b4:	f7f9 fc30 	bl	8004b18 <HAL_GetTick>
 800b2b8:	0002      	movs	r2, r0
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	1ad3      	subs	r3, r2, r3
 800b2be:	69ba      	ldr	r2, [r7, #24]
 800b2c0:	429a      	cmp	r2, r3
 800b2c2:	d302      	bcc.n	800b2ca <UART_WaitOnFlagUntilTimeout+0x2e>
 800b2c4:	69bb      	ldr	r3, [r7, #24]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d101      	bne.n	800b2ce <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800b2ca:	2303      	movs	r3, #3
 800b2cc:	e051      	b.n	800b372 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	2204      	movs	r2, #4
 800b2d6:	4013      	ands	r3, r2
 800b2d8:	d03b      	beq.n	800b352 <UART_WaitOnFlagUntilTimeout+0xb6>
 800b2da:	68bb      	ldr	r3, [r7, #8]
 800b2dc:	2b80      	cmp	r3, #128	@ 0x80
 800b2de:	d038      	beq.n	800b352 <UART_WaitOnFlagUntilTimeout+0xb6>
 800b2e0:	68bb      	ldr	r3, [r7, #8]
 800b2e2:	2b40      	cmp	r3, #64	@ 0x40
 800b2e4:	d035      	beq.n	800b352 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	69db      	ldr	r3, [r3, #28]
 800b2ec:	2208      	movs	r2, #8
 800b2ee:	4013      	ands	r3, r2
 800b2f0:	2b08      	cmp	r3, #8
 800b2f2:	d111      	bne.n	800b318 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	2208      	movs	r2, #8
 800b2fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	0018      	movs	r0, r3
 800b300:	f000 f922 	bl	800b548 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	2290      	movs	r2, #144	@ 0x90
 800b308:	2108      	movs	r1, #8
 800b30a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	2284      	movs	r2, #132	@ 0x84
 800b310:	2100      	movs	r1, #0
 800b312:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800b314:	2301      	movs	r3, #1
 800b316:	e02c      	b.n	800b372 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	69da      	ldr	r2, [r3, #28]
 800b31e:	2380      	movs	r3, #128	@ 0x80
 800b320:	011b      	lsls	r3, r3, #4
 800b322:	401a      	ands	r2, r3
 800b324:	2380      	movs	r3, #128	@ 0x80
 800b326:	011b      	lsls	r3, r3, #4
 800b328:	429a      	cmp	r2, r3
 800b32a:	d112      	bne.n	800b352 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	2280      	movs	r2, #128	@ 0x80
 800b332:	0112      	lsls	r2, r2, #4
 800b334:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	0018      	movs	r0, r3
 800b33a:	f000 f905 	bl	800b548 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	2290      	movs	r2, #144	@ 0x90
 800b342:	2120      	movs	r1, #32
 800b344:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	2284      	movs	r2, #132	@ 0x84
 800b34a:	2100      	movs	r1, #0
 800b34c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800b34e:	2303      	movs	r3, #3
 800b350:	e00f      	b.n	800b372 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	69db      	ldr	r3, [r3, #28]
 800b358:	68ba      	ldr	r2, [r7, #8]
 800b35a:	4013      	ands	r3, r2
 800b35c:	68ba      	ldr	r2, [r7, #8]
 800b35e:	1ad3      	subs	r3, r2, r3
 800b360:	425a      	negs	r2, r3
 800b362:	4153      	adcs	r3, r2
 800b364:	b2db      	uxtb	r3, r3
 800b366:	001a      	movs	r2, r3
 800b368:	1dfb      	adds	r3, r7, #7
 800b36a:	781b      	ldrb	r3, [r3, #0]
 800b36c:	429a      	cmp	r2, r3
 800b36e:	d09e      	beq.n	800b2ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b370:	2300      	movs	r3, #0
}
 800b372:	0018      	movs	r0, r3
 800b374:	46bd      	mov	sp, r7
 800b376:	b004      	add	sp, #16
 800b378:	bd80      	pop	{r7, pc}
	...

0800b37c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b090      	sub	sp, #64	@ 0x40
 800b380:	af00      	add	r7, sp, #0
 800b382:	60f8      	str	r0, [r7, #12]
 800b384:	60b9      	str	r1, [r7, #8]
 800b386:	1dbb      	adds	r3, r7, #6
 800b388:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	68ba      	ldr	r2, [r7, #8]
 800b38e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	1dba      	adds	r2, r7, #6
 800b394:	215c      	movs	r1, #92	@ 0x5c
 800b396:	8812      	ldrh	r2, [r2, #0]
 800b398:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	2290      	movs	r2, #144	@ 0x90
 800b39e:	2100      	movs	r1, #0
 800b3a0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	228c      	movs	r2, #140	@ 0x8c
 800b3a6:	2122      	movs	r1, #34	@ 0x22
 800b3a8:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	2280      	movs	r2, #128	@ 0x80
 800b3ae:	589b      	ldr	r3, [r3, r2]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d02d      	beq.n	800b410 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	2280      	movs	r2, #128	@ 0x80
 800b3b8:	589b      	ldr	r3, [r3, r2]
 800b3ba:	4a40      	ldr	r2, [pc, #256]	@ (800b4bc <UART_Start_Receive_DMA+0x140>)
 800b3bc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	2280      	movs	r2, #128	@ 0x80
 800b3c2:	589b      	ldr	r3, [r3, r2]
 800b3c4:	4a3e      	ldr	r2, [pc, #248]	@ (800b4c0 <UART_Start_Receive_DMA+0x144>)
 800b3c6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	2280      	movs	r2, #128	@ 0x80
 800b3cc:	589b      	ldr	r3, [r3, r2]
 800b3ce:	4a3d      	ldr	r2, [pc, #244]	@ (800b4c4 <UART_Start_Receive_DMA+0x148>)
 800b3d0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	2280      	movs	r2, #128	@ 0x80
 800b3d6:	589b      	ldr	r3, [r3, r2]
 800b3d8:	2200      	movs	r2, #0
 800b3da:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	2280      	movs	r2, #128	@ 0x80
 800b3e0:	5898      	ldr	r0, [r3, r2]
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	3324      	adds	r3, #36	@ 0x24
 800b3e8:	0019      	movs	r1, r3
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b3ee:	001a      	movs	r2, r3
 800b3f0:	1dbb      	adds	r3, r7, #6
 800b3f2:	881b      	ldrh	r3, [r3, #0]
 800b3f4:	f7f9 fdd0 	bl	8004f98 <HAL_DMA_Start_IT>
 800b3f8:	1e03      	subs	r3, r0, #0
 800b3fa:	d009      	beq.n	800b410 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	2290      	movs	r2, #144	@ 0x90
 800b400:	2110      	movs	r1, #16
 800b402:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	228c      	movs	r2, #140	@ 0x8c
 800b408:	2120      	movs	r1, #32
 800b40a:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 800b40c:	2301      	movs	r3, #1
 800b40e:	e050      	b.n	800b4b2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	691b      	ldr	r3, [r3, #16]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d019      	beq.n	800b44c <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800b418:	f3ef 8310 	mrs	r3, PRIMASK
 800b41c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800b41e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b420:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b422:	2301      	movs	r3, #1
 800b424:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b428:	f383 8810 	msr	PRIMASK, r3
}
 800b42c:	46c0      	nop			@ (mov r8, r8)
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	681a      	ldr	r2, [r3, #0]
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	2180      	movs	r1, #128	@ 0x80
 800b43a:	0049      	lsls	r1, r1, #1
 800b43c:	430a      	orrs	r2, r1
 800b43e:	601a      	str	r2, [r3, #0]
 800b440:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b442:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b446:	f383 8810 	msr	PRIMASK, r3
}
 800b44a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800b44c:	f3ef 8310 	mrs	r3, PRIMASK
 800b450:	613b      	str	r3, [r7, #16]
  return(result);
 800b452:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b454:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b456:	2301      	movs	r3, #1
 800b458:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b45a:	697b      	ldr	r3, [r7, #20]
 800b45c:	f383 8810 	msr	PRIMASK, r3
}
 800b460:	46c0      	nop			@ (mov r8, r8)
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	689a      	ldr	r2, [r3, #8]
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	2101      	movs	r1, #1
 800b46e:	430a      	orrs	r2, r1
 800b470:	609a      	str	r2, [r3, #8]
 800b472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b474:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b476:	69bb      	ldr	r3, [r7, #24]
 800b478:	f383 8810 	msr	PRIMASK, r3
}
 800b47c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800b47e:	f3ef 8310 	mrs	r3, PRIMASK
 800b482:	61fb      	str	r3, [r7, #28]
  return(result);
 800b484:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b486:	637b      	str	r3, [r7, #52]	@ 0x34
 800b488:	2301      	movs	r3, #1
 800b48a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b48c:	6a3b      	ldr	r3, [r7, #32]
 800b48e:	f383 8810 	msr	PRIMASK, r3
}
 800b492:	46c0      	nop			@ (mov r8, r8)
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	689a      	ldr	r2, [r3, #8]
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	2140      	movs	r1, #64	@ 0x40
 800b4a0:	430a      	orrs	r2, r1
 800b4a2:	609a      	str	r2, [r3, #8]
 800b4a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4a6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b4a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4aa:	f383 8810 	msr	PRIMASK, r3
}
 800b4ae:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 800b4b0:	2300      	movs	r3, #0
}
 800b4b2:	0018      	movs	r0, r3
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	b010      	add	sp, #64	@ 0x40
 800b4b8:	bd80      	pop	{r7, pc}
 800b4ba:	46c0      	nop			@ (mov r8, r8)
 800b4bc:	0800b6cd 	.word	0x0800b6cd
 800b4c0:	0800b7fd 	.word	0x0800b7fd
 800b4c4:	0800b83f 	.word	0x0800b83f

0800b4c8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b08a      	sub	sp, #40	@ 0x28
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800b4d0:	f3ef 8310 	mrs	r3, PRIMASK
 800b4d4:	60bb      	str	r3, [r7, #8]
  return(result);
 800b4d6:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b4d8:	627b      	str	r3, [r7, #36]	@ 0x24
 800b4da:	2301      	movs	r3, #1
 800b4dc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	f383 8810 	msr	PRIMASK, r3
}
 800b4e4:	46c0      	nop			@ (mov r8, r8)
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	681a      	ldr	r2, [r3, #0]
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	21c0      	movs	r1, #192	@ 0xc0
 800b4f2:	438a      	bics	r2, r1
 800b4f4:	601a      	str	r2, [r3, #0]
 800b4f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b4fa:	693b      	ldr	r3, [r7, #16]
 800b4fc:	f383 8810 	msr	PRIMASK, r3
}
 800b500:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800b502:	f3ef 8310 	mrs	r3, PRIMASK
 800b506:	617b      	str	r3, [r7, #20]
  return(result);
 800b508:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b50a:	623b      	str	r3, [r7, #32]
 800b50c:	2301      	movs	r3, #1
 800b50e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b510:	69bb      	ldr	r3, [r7, #24]
 800b512:	f383 8810 	msr	PRIMASK, r3
}
 800b516:	46c0      	nop			@ (mov r8, r8)
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	689a      	ldr	r2, [r3, #8]
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	4908      	ldr	r1, [pc, #32]	@ (800b544 <UART_EndTxTransfer+0x7c>)
 800b524:	400a      	ands	r2, r1
 800b526:	609a      	str	r2, [r3, #8]
 800b528:	6a3b      	ldr	r3, [r7, #32]
 800b52a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b52c:	69fb      	ldr	r3, [r7, #28]
 800b52e:	f383 8810 	msr	PRIMASK, r3
}
 800b532:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2288      	movs	r2, #136	@ 0x88
 800b538:	2120      	movs	r1, #32
 800b53a:	5099      	str	r1, [r3, r2]
}
 800b53c:	46c0      	nop			@ (mov r8, r8)
 800b53e:	46bd      	mov	sp, r7
 800b540:	b00a      	add	sp, #40	@ 0x28
 800b542:	bd80      	pop	{r7, pc}
 800b544:	ff7fffff 	.word	0xff7fffff

0800b548 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b08e      	sub	sp, #56	@ 0x38
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800b550:	f3ef 8310 	mrs	r3, PRIMASK
 800b554:	617b      	str	r3, [r7, #20]
  return(result);
 800b556:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b558:	637b      	str	r3, [r7, #52]	@ 0x34
 800b55a:	2301      	movs	r3, #1
 800b55c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b55e:	69bb      	ldr	r3, [r7, #24]
 800b560:	f383 8810 	msr	PRIMASK, r3
}
 800b564:	46c0      	nop			@ (mov r8, r8)
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	681a      	ldr	r2, [r3, #0]
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	4926      	ldr	r1, [pc, #152]	@ (800b60c <UART_EndRxTransfer+0xc4>)
 800b572:	400a      	ands	r2, r1
 800b574:	601a      	str	r2, [r3, #0]
 800b576:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b578:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b57a:	69fb      	ldr	r3, [r7, #28]
 800b57c:	f383 8810 	msr	PRIMASK, r3
}
 800b580:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800b582:	f3ef 8310 	mrs	r3, PRIMASK
 800b586:	623b      	str	r3, [r7, #32]
  return(result);
 800b588:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b58a:	633b      	str	r3, [r7, #48]	@ 0x30
 800b58c:	2301      	movs	r3, #1
 800b58e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b592:	f383 8810 	msr	PRIMASK, r3
}
 800b596:	46c0      	nop			@ (mov r8, r8)
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	689a      	ldr	r2, [r3, #8]
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	491b      	ldr	r1, [pc, #108]	@ (800b610 <UART_EndRxTransfer+0xc8>)
 800b5a4:	400a      	ands	r2, r1
 800b5a6:	609a      	str	r2, [r3, #8]
 800b5a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b5ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5ae:	f383 8810 	msr	PRIMASK, r3
}
 800b5b2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b5b8:	2b01      	cmp	r3, #1
 800b5ba:	d118      	bne.n	800b5ee <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800b5bc:	f3ef 8310 	mrs	r3, PRIMASK
 800b5c0:	60bb      	str	r3, [r7, #8]
  return(result);
 800b5c2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b5c6:	2301      	movs	r3, #1
 800b5c8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	f383 8810 	msr	PRIMASK, r3
}
 800b5d0:	46c0      	nop			@ (mov r8, r8)
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	681a      	ldr	r2, [r3, #0]
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	2110      	movs	r1, #16
 800b5de:	438a      	bics	r2, r1
 800b5e0:	601a      	str	r2, [r3, #0]
 800b5e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b5e6:	693b      	ldr	r3, [r7, #16]
 800b5e8:	f383 8810 	msr	PRIMASK, r3
}
 800b5ec:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	228c      	movs	r2, #140	@ 0x8c
 800b5f2:	2120      	movs	r1, #32
 800b5f4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	2200      	movs	r2, #0
 800b600:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b602:	46c0      	nop			@ (mov r8, r8)
 800b604:	46bd      	mov	sp, r7
 800b606:	b00e      	add	sp, #56	@ 0x38
 800b608:	bd80      	pop	{r7, pc}
 800b60a:	46c0      	nop			@ (mov r8, r8)
 800b60c:	fffffedf 	.word	0xfffffedf
 800b610:	effffffe 	.word	0xeffffffe

0800b614 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b08c      	sub	sp, #48	@ 0x30
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b620:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	2220      	movs	r2, #32
 800b62a:	4013      	ands	r3, r2
 800b62c:	d135      	bne.n	800b69a <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 800b62e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b630:	2256      	movs	r2, #86	@ 0x56
 800b632:	2100      	movs	r1, #0
 800b634:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800b636:	f3ef 8310 	mrs	r3, PRIMASK
 800b63a:	60fb      	str	r3, [r7, #12]
  return(result);
 800b63c:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b63e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b640:	2301      	movs	r3, #1
 800b642:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b644:	693b      	ldr	r3, [r7, #16]
 800b646:	f383 8810 	msr	PRIMASK, r3
}
 800b64a:	46c0      	nop			@ (mov r8, r8)
 800b64c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	689a      	ldr	r2, [r3, #8]
 800b652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	2180      	movs	r1, #128	@ 0x80
 800b658:	438a      	bics	r2, r1
 800b65a:	609a      	str	r2, [r3, #8]
 800b65c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b65e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b660:	697b      	ldr	r3, [r7, #20]
 800b662:	f383 8810 	msr	PRIMASK, r3
}
 800b666:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800b668:	f3ef 8310 	mrs	r3, PRIMASK
 800b66c:	61bb      	str	r3, [r7, #24]
  return(result);
 800b66e:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b670:	627b      	str	r3, [r7, #36]	@ 0x24
 800b672:	2301      	movs	r3, #1
 800b674:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b676:	69fb      	ldr	r3, [r7, #28]
 800b678:	f383 8810 	msr	PRIMASK, r3
}
 800b67c:	46c0      	nop			@ (mov r8, r8)
 800b67e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	681a      	ldr	r2, [r3, #0]
 800b684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	2140      	movs	r1, #64	@ 0x40
 800b68a:	430a      	orrs	r2, r1
 800b68c:	601a      	str	r2, [r3, #0]
 800b68e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b690:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b692:	6a3b      	ldr	r3, [r7, #32]
 800b694:	f383 8810 	msr	PRIMASK, r3
}
 800b698:	e004      	b.n	800b6a4 <UART_DMATransmitCplt+0x90>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 800b69a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b69c:	0018      	movs	r0, r3
 800b69e:	f7f7 fdff 	bl	80032a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b6a2:	46c0      	nop			@ (mov r8, r8)
 800b6a4:	46c0      	nop			@ (mov r8, r8)
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	b00c      	add	sp, #48	@ 0x30
 800b6aa:	bd80      	pop	{r7, pc}

0800b6ac <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b084      	sub	sp, #16
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6b8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	0018      	movs	r0, r3
 800b6be:	f7ff faf9 	bl	800acb4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b6c2:	46c0      	nop			@ (mov r8, r8)
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	b004      	add	sp, #16
 800b6c8:	bd80      	pop	{r7, pc}
	...

0800b6cc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b094      	sub	sp, #80	@ 0x50
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6d8:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	2220      	movs	r2, #32
 800b6e2:	4013      	ands	r3, r2
 800b6e4:	d16f      	bne.n	800b7c6 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800b6e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b6e8:	225e      	movs	r2, #94	@ 0x5e
 800b6ea:	2100      	movs	r1, #0
 800b6ec:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800b6ee:	f3ef 8310 	mrs	r3, PRIMASK
 800b6f2:	61bb      	str	r3, [r7, #24]
  return(result);
 800b6f4:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b6f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b6f8:	2301      	movs	r3, #1
 800b6fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b6fc:	69fb      	ldr	r3, [r7, #28]
 800b6fe:	f383 8810 	msr	PRIMASK, r3
}
 800b702:	46c0      	nop			@ (mov r8, r8)
 800b704:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	681a      	ldr	r2, [r3, #0]
 800b70a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	493a      	ldr	r1, [pc, #232]	@ (800b7f8 <UART_DMAReceiveCplt+0x12c>)
 800b710:	400a      	ands	r2, r1
 800b712:	601a      	str	r2, [r3, #0]
 800b714:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b716:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b718:	6a3b      	ldr	r3, [r7, #32]
 800b71a:	f383 8810 	msr	PRIMASK, r3
}
 800b71e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800b720:	f3ef 8310 	mrs	r3, PRIMASK
 800b724:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800b726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b728:	647b      	str	r3, [r7, #68]	@ 0x44
 800b72a:	2301      	movs	r3, #1
 800b72c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b72e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b730:	f383 8810 	msr	PRIMASK, r3
}
 800b734:	46c0      	nop			@ (mov r8, r8)
 800b736:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	689a      	ldr	r2, [r3, #8]
 800b73c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	2101      	movs	r1, #1
 800b742:	438a      	bics	r2, r1
 800b744:	609a      	str	r2, [r3, #8]
 800b746:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b748:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b74a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b74c:	f383 8810 	msr	PRIMASK, r3
}
 800b750:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800b752:	f3ef 8310 	mrs	r3, PRIMASK
 800b756:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800b758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b75a:	643b      	str	r3, [r7, #64]	@ 0x40
 800b75c:	2301      	movs	r3, #1
 800b75e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b760:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b762:	f383 8810 	msr	PRIMASK, r3
}
 800b766:	46c0      	nop			@ (mov r8, r8)
 800b768:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	689a      	ldr	r2, [r3, #8]
 800b76e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	2140      	movs	r1, #64	@ 0x40
 800b774:	438a      	bics	r2, r1
 800b776:	609a      	str	r2, [r3, #8]
 800b778:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b77a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b77c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b77e:	f383 8810 	msr	PRIMASK, r3
}
 800b782:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b784:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b786:	228c      	movs	r2, #140	@ 0x8c
 800b788:	2120      	movs	r1, #32
 800b78a:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b78c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b78e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b790:	2b01      	cmp	r3, #1
 800b792:	d118      	bne.n	800b7c6 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800b794:	f3ef 8310 	mrs	r3, PRIMASK
 800b798:	60fb      	str	r3, [r7, #12]
  return(result);
 800b79a:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b79c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b79e:	2301      	movs	r3, #1
 800b7a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b7a2:	693b      	ldr	r3, [r7, #16]
 800b7a4:	f383 8810 	msr	PRIMASK, r3
}
 800b7a8:	46c0      	nop			@ (mov r8, r8)
 800b7aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	681a      	ldr	r2, [r3, #0]
 800b7b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	2110      	movs	r1, #16
 800b7b6:	438a      	bics	r2, r1
 800b7b8:	601a      	str	r2, [r3, #0]
 800b7ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b7be:	697b      	ldr	r3, [r7, #20]
 800b7c0:	f383 8810 	msr	PRIMASK, r3
}
 800b7c4:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b7c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b7ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b7d0:	2b01      	cmp	r3, #1
 800b7d2:	d108      	bne.n	800b7e6 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b7d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b7d6:	225c      	movs	r2, #92	@ 0x5c
 800b7d8:	5a9a      	ldrh	r2, [r3, r2]
 800b7da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b7dc:	0011      	movs	r1, r2
 800b7de:	0018      	movs	r0, r3
 800b7e0:	f7f7 fd02 	bl	80031e8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b7e4:	e003      	b.n	800b7ee <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 800b7e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b7e8:	0018      	movs	r0, r3
 800b7ea:	f7ff fa6b 	bl	800acc4 <HAL_UART_RxCpltCallback>
}
 800b7ee:	46c0      	nop			@ (mov r8, r8)
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	b014      	add	sp, #80	@ 0x50
 800b7f4:	bd80      	pop	{r7, pc}
 800b7f6:	46c0      	nop			@ (mov r8, r8)
 800b7f8:	fffffeff 	.word	0xfffffeff

0800b7fc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b084      	sub	sp, #16
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b808:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	2201      	movs	r2, #1
 800b80e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b814:	2b01      	cmp	r3, #1
 800b816:	d10a      	bne.n	800b82e <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	225c      	movs	r2, #92	@ 0x5c
 800b81c:	5a9b      	ldrh	r3, [r3, r2]
 800b81e:	085b      	lsrs	r3, r3, #1
 800b820:	b29a      	uxth	r2, r3
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	0011      	movs	r1, r2
 800b826:	0018      	movs	r0, r3
 800b828:	f7f7 fcde 	bl	80031e8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b82c:	e003      	b.n	800b836 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	0018      	movs	r0, r3
 800b832:	f7ff fa4f 	bl	800acd4 <HAL_UART_RxHalfCpltCallback>
}
 800b836:	46c0      	nop			@ (mov r8, r8)
 800b838:	46bd      	mov	sp, r7
 800b83a:	b004      	add	sp, #16
 800b83c:	bd80      	pop	{r7, pc}

0800b83e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b83e:	b580      	push	{r7, lr}
 800b840:	b086      	sub	sp, #24
 800b842:	af00      	add	r7, sp, #0
 800b844:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b84a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b84c:	697b      	ldr	r3, [r7, #20]
 800b84e:	2288      	movs	r2, #136	@ 0x88
 800b850:	589b      	ldr	r3, [r3, r2]
 800b852:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b854:	697b      	ldr	r3, [r7, #20]
 800b856:	228c      	movs	r2, #140	@ 0x8c
 800b858:	589b      	ldr	r3, [r3, r2]
 800b85a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b85c:	697b      	ldr	r3, [r7, #20]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	689b      	ldr	r3, [r3, #8]
 800b862:	2280      	movs	r2, #128	@ 0x80
 800b864:	4013      	ands	r3, r2
 800b866:	2b80      	cmp	r3, #128	@ 0x80
 800b868:	d10a      	bne.n	800b880 <UART_DMAError+0x42>
 800b86a:	693b      	ldr	r3, [r7, #16]
 800b86c:	2b21      	cmp	r3, #33	@ 0x21
 800b86e:	d107      	bne.n	800b880 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b870:	697b      	ldr	r3, [r7, #20]
 800b872:	2256      	movs	r2, #86	@ 0x56
 800b874:	2100      	movs	r1, #0
 800b876:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800b878:	697b      	ldr	r3, [r7, #20]
 800b87a:	0018      	movs	r0, r3
 800b87c:	f7ff fe24 	bl	800b4c8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b880:	697b      	ldr	r3, [r7, #20]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	689b      	ldr	r3, [r3, #8]
 800b886:	2240      	movs	r2, #64	@ 0x40
 800b888:	4013      	ands	r3, r2
 800b88a:	2b40      	cmp	r3, #64	@ 0x40
 800b88c:	d10a      	bne.n	800b8a4 <UART_DMAError+0x66>
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	2b22      	cmp	r3, #34	@ 0x22
 800b892:	d107      	bne.n	800b8a4 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b894:	697b      	ldr	r3, [r7, #20]
 800b896:	225e      	movs	r2, #94	@ 0x5e
 800b898:	2100      	movs	r1, #0
 800b89a:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800b89c:	697b      	ldr	r3, [r7, #20]
 800b89e:	0018      	movs	r0, r3
 800b8a0:	f7ff fe52 	bl	800b548 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b8a4:	697b      	ldr	r3, [r7, #20]
 800b8a6:	2290      	movs	r2, #144	@ 0x90
 800b8a8:	589b      	ldr	r3, [r3, r2]
 800b8aa:	2210      	movs	r2, #16
 800b8ac:	431a      	orrs	r2, r3
 800b8ae:	697b      	ldr	r3, [r7, #20]
 800b8b0:	2190      	movs	r1, #144	@ 0x90
 800b8b2:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b8b4:	697b      	ldr	r3, [r7, #20]
 800b8b6:	0018      	movs	r0, r3
 800b8b8:	f7f7 fd00 	bl	80032bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b8bc:	46c0      	nop			@ (mov r8, r8)
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	b006      	add	sp, #24
 800b8c2:	bd80      	pop	{r7, pc}

0800b8c4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b084      	sub	sp, #16
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	225e      	movs	r2, #94	@ 0x5e
 800b8d6:	2100      	movs	r1, #0
 800b8d8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	2256      	movs	r2, #86	@ 0x56
 800b8de:	2100      	movs	r1, #0
 800b8e0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	0018      	movs	r0, r3
 800b8e6:	f7f7 fce9 	bl	80032bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b8ea:	46c0      	nop			@ (mov r8, r8)
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	b004      	add	sp, #16
 800b8f0:	bd80      	pop	{r7, pc}

0800b8f2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b8f2:	b580      	push	{r7, lr}
 800b8f4:	b086      	sub	sp, #24
 800b8f6:	af00      	add	r7, sp, #0
 800b8f8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800b8fa:	f3ef 8310 	mrs	r3, PRIMASK
 800b8fe:	60bb      	str	r3, [r7, #8]
  return(result);
 800b900:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b902:	617b      	str	r3, [r7, #20]
 800b904:	2301      	movs	r3, #1
 800b906:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	f383 8810 	msr	PRIMASK, r3
}
 800b90e:	46c0      	nop			@ (mov r8, r8)
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	681a      	ldr	r2, [r3, #0]
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	2140      	movs	r1, #64	@ 0x40
 800b91c:	438a      	bics	r2, r1
 800b91e:	601a      	str	r2, [r3, #0]
 800b920:	697b      	ldr	r3, [r7, #20]
 800b922:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b924:	693b      	ldr	r3, [r7, #16]
 800b926:	f383 8810 	msr	PRIMASK, r3
}
 800b92a:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2288      	movs	r2, #136	@ 0x88
 800b930:	2120      	movs	r1, #32
 800b932:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2200      	movs	r2, #0
 800b938:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	0018      	movs	r0, r3
 800b93e:	f7f7 fcaf 	bl	80032a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b942:	46c0      	nop			@ (mov r8, r8)
 800b944:	46bd      	mov	sp, r7
 800b946:	b006      	add	sp, #24
 800b948:	bd80      	pop	{r7, pc}
	...

0800b94c <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b086      	sub	sp, #24
 800b950:	af00      	add	r7, sp, #0
 800b952:	60f8      	str	r0, [r7, #12]
 800b954:	60b9      	str	r1, [r7, #8]
 800b956:	607a      	str	r2, [r7, #4]
 800b958:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d101      	bne.n	800b964 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 800b960:	2301      	movs	r3, #1
 800b962:	e05d      	b.n	800ba20 <HAL_RS485Ex_Init+0xd4>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	2288      	movs	r2, #136	@ 0x88
 800b968:	589b      	ldr	r3, [r3, r2]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d107      	bne.n	800b97e <HAL_RS485Ex_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	2284      	movs	r2, #132	@ 0x84
 800b972:	2100      	movs	r1, #0
 800b974:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	0018      	movs	r0, r3
 800b97a:	f7f8 fda9 	bl	80044d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	2288      	movs	r2, #136	@ 0x88
 800b982:	2124      	movs	r1, #36	@ 0x24
 800b984:	5099      	str	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	681a      	ldr	r2, [r3, #0]
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	2101      	movs	r1, #1
 800b992:	438a      	bics	r2, r1
 800b994:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d003      	beq.n	800b9a6 <HAL_RS485Ex_Init+0x5a>
  {
    UART_AdvFeatureConfig(huart);
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	0018      	movs	r0, r3
 800b9a2:	f7ff fb1d 	bl	800afe0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	0018      	movs	r0, r3
 800b9aa:	f7ff f99b 	bl	800ace4 <UART_SetConfig>
 800b9ae:	0003      	movs	r3, r0
 800b9b0:	2b01      	cmp	r3, #1
 800b9b2:	d101      	bne.n	800b9b8 <HAL_RS485Ex_Init+0x6c>
  {
    return HAL_ERROR;
 800b9b4:	2301      	movs	r3, #1
 800b9b6:	e033      	b.n	800ba20 <HAL_RS485Ex_Init+0xd4>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	689a      	ldr	r2, [r3, #8]
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	2180      	movs	r1, #128	@ 0x80
 800b9c4:	01c9      	lsls	r1, r1, #7
 800b9c6:	430a      	orrs	r2, r1
 800b9c8:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	689b      	ldr	r3, [r3, #8]
 800b9d0:	4a15      	ldr	r2, [pc, #84]	@ (800ba28 <HAL_RS485Ex_Init+0xdc>)
 800b9d2:	4013      	ands	r3, r2
 800b9d4:	0019      	movs	r1, r3
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	68ba      	ldr	r2, [r7, #8]
 800b9dc:	430a      	orrs	r2, r1
 800b9de:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	055b      	lsls	r3, r3, #21
 800b9e4:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800b9e6:	683b      	ldr	r3, [r7, #0]
 800b9e8:	041b      	lsls	r3, r3, #16
 800b9ea:	697a      	ldr	r2, [r7, #20]
 800b9ec:	4313      	orrs	r3, r2
 800b9ee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	4a0d      	ldr	r2, [pc, #52]	@ (800ba2c <HAL_RS485Ex_Init+0xe0>)
 800b9f8:	4013      	ands	r3, r2
 800b9fa:	0019      	movs	r1, r3
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	697a      	ldr	r2, [r7, #20]
 800ba02:	430a      	orrs	r2, r1
 800ba04:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	681a      	ldr	r2, [r3, #0]
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	2101      	movs	r1, #1
 800ba12:	430a      	orrs	r2, r1
 800ba14:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	0018      	movs	r0, r3
 800ba1a:	f7ff fb95 	bl	800b148 <UART_CheckIdleState>
 800ba1e:	0003      	movs	r3, r0
}
 800ba20:	0018      	movs	r0, r3
 800ba22:	46bd      	mov	sp, r7
 800ba24:	b006      	add	sp, #24
 800ba26:	bd80      	pop	{r7, pc}
 800ba28:	ffff7fff 	.word	0xffff7fff
 800ba2c:	fc00ffff 	.word	0xfc00ffff

0800ba30 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b082      	sub	sp, #8
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ba38:	46c0      	nop			@ (mov r8, r8)
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	b002      	add	sp, #8
 800ba3e:	bd80      	pop	{r7, pc}

0800ba40 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b082      	sub	sp, #8
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ba48:	46c0      	nop			@ (mov r8, r8)
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	b002      	add	sp, #8
 800ba4e:	bd80      	pop	{r7, pc}

0800ba50 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b082      	sub	sp, #8
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ba58:	46c0      	nop			@ (mov r8, r8)
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	b002      	add	sp, #8
 800ba5e:	bd80      	pop	{r7, pc}

0800ba60 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b084      	sub	sp, #16
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2284      	movs	r2, #132	@ 0x84
 800ba6c:	5c9b      	ldrb	r3, [r3, r2]
 800ba6e:	2b01      	cmp	r3, #1
 800ba70:	d101      	bne.n	800ba76 <HAL_UARTEx_DisableFifoMode+0x16>
 800ba72:	2302      	movs	r3, #2
 800ba74:	e027      	b.n	800bac6 <HAL_UARTEx_DisableFifoMode+0x66>
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	2284      	movs	r2, #132	@ 0x84
 800ba7a:	2101      	movs	r1, #1
 800ba7c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	2288      	movs	r2, #136	@ 0x88
 800ba82:	2124      	movs	r1, #36	@ 0x24
 800ba84:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	681a      	ldr	r2, [r3, #0]
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	2101      	movs	r1, #1
 800ba9a:	438a      	bics	r2, r1
 800ba9c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	4a0b      	ldr	r2, [pc, #44]	@ (800bad0 <HAL_UARTEx_DisableFifoMode+0x70>)
 800baa2:	4013      	ands	r3, r2
 800baa4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	2200      	movs	r2, #0
 800baaa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	68fa      	ldr	r2, [r7, #12]
 800bab2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2288      	movs	r2, #136	@ 0x88
 800bab8:	2120      	movs	r1, #32
 800baba:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2284      	movs	r2, #132	@ 0x84
 800bac0:	2100      	movs	r1, #0
 800bac2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bac4:	2300      	movs	r3, #0
}
 800bac6:	0018      	movs	r0, r3
 800bac8:	46bd      	mov	sp, r7
 800baca:	b004      	add	sp, #16
 800bacc:	bd80      	pop	{r7, pc}
 800bace:	46c0      	nop			@ (mov r8, r8)
 800bad0:	dfffffff 	.word	0xdfffffff

0800bad4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b084      	sub	sp, #16
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
 800badc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	2284      	movs	r2, #132	@ 0x84
 800bae2:	5c9b      	ldrb	r3, [r3, r2]
 800bae4:	2b01      	cmp	r3, #1
 800bae6:	d101      	bne.n	800baec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bae8:	2302      	movs	r3, #2
 800baea:	e02e      	b.n	800bb4a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2284      	movs	r2, #132	@ 0x84
 800baf0:	2101      	movs	r1, #1
 800baf2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2288      	movs	r2, #136	@ 0x88
 800baf8:	2124      	movs	r1, #36	@ 0x24
 800bafa:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	681a      	ldr	r2, [r3, #0]
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	2101      	movs	r1, #1
 800bb10:	438a      	bics	r2, r1
 800bb12:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	689b      	ldr	r3, [r3, #8]
 800bb1a:	00db      	lsls	r3, r3, #3
 800bb1c:	08d9      	lsrs	r1, r3, #3
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	683a      	ldr	r2, [r7, #0]
 800bb24:	430a      	orrs	r2, r1
 800bb26:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	0018      	movs	r0, r3
 800bb2c:	f000 f8bc 	bl	800bca8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	68fa      	ldr	r2, [r7, #12]
 800bb36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	2288      	movs	r2, #136	@ 0x88
 800bb3c:	2120      	movs	r1, #32
 800bb3e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2284      	movs	r2, #132	@ 0x84
 800bb44:	2100      	movs	r1, #0
 800bb46:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bb48:	2300      	movs	r3, #0
}
 800bb4a:	0018      	movs	r0, r3
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	b004      	add	sp, #16
 800bb50:	bd80      	pop	{r7, pc}
	...

0800bb54 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b084      	sub	sp, #16
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
 800bb5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	2284      	movs	r2, #132	@ 0x84
 800bb62:	5c9b      	ldrb	r3, [r3, r2]
 800bb64:	2b01      	cmp	r3, #1
 800bb66:	d101      	bne.n	800bb6c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bb68:	2302      	movs	r3, #2
 800bb6a:	e02f      	b.n	800bbcc <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2284      	movs	r2, #132	@ 0x84
 800bb70:	2101      	movs	r1, #1
 800bb72:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2288      	movs	r2, #136	@ 0x88
 800bb78:	2124      	movs	r1, #36	@ 0x24
 800bb7a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	681a      	ldr	r2, [r3, #0]
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	2101      	movs	r1, #1
 800bb90:	438a      	bics	r2, r1
 800bb92:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	689b      	ldr	r3, [r3, #8]
 800bb9a:	4a0e      	ldr	r2, [pc, #56]	@ (800bbd4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800bb9c:	4013      	ands	r3, r2
 800bb9e:	0019      	movs	r1, r3
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	683a      	ldr	r2, [r7, #0]
 800bba6:	430a      	orrs	r2, r1
 800bba8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	0018      	movs	r0, r3
 800bbae:	f000 f87b 	bl	800bca8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	68fa      	ldr	r2, [r7, #12]
 800bbb8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	2288      	movs	r2, #136	@ 0x88
 800bbbe:	2120      	movs	r1, #32
 800bbc0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	2284      	movs	r2, #132	@ 0x84
 800bbc6:	2100      	movs	r1, #0
 800bbc8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bbca:	2300      	movs	r3, #0
}
 800bbcc:	0018      	movs	r0, r3
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	b004      	add	sp, #16
 800bbd2:	bd80      	pop	{r7, pc}
 800bbd4:	f1ffffff 	.word	0xf1ffffff

0800bbd8 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bbd8:	b5b0      	push	{r4, r5, r7, lr}
 800bbda:	b08a      	sub	sp, #40	@ 0x28
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	60f8      	str	r0, [r7, #12]
 800bbe0:	60b9      	str	r1, [r7, #8]
 800bbe2:	1dbb      	adds	r3, r7, #6
 800bbe4:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	228c      	movs	r2, #140	@ 0x8c
 800bbea:	589b      	ldr	r3, [r3, r2]
 800bbec:	2b20      	cmp	r3, #32
 800bbee:	d156      	bne.n	800bc9e <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 800bbf0:	68bb      	ldr	r3, [r7, #8]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d003      	beq.n	800bbfe <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800bbf6:	1dbb      	adds	r3, r7, #6
 800bbf8:	881b      	ldrh	r3, [r3, #0]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d101      	bne.n	800bc02 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800bbfe:	2301      	movs	r3, #1
 800bc00:	e04e      	b.n	800bca0 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	689a      	ldr	r2, [r3, #8]
 800bc06:	2380      	movs	r3, #128	@ 0x80
 800bc08:	015b      	lsls	r3, r3, #5
 800bc0a:	429a      	cmp	r2, r3
 800bc0c:	d109      	bne.n	800bc22 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	691b      	ldr	r3, [r3, #16]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d105      	bne.n	800bc22 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800bc16:	68bb      	ldr	r3, [r7, #8]
 800bc18:	2201      	movs	r2, #1
 800bc1a:	4013      	ands	r3, r2
 800bc1c:	d001      	beq.n	800bc22 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 800bc1e:	2301      	movs	r3, #1
 800bc20:	e03e      	b.n	800bca0 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	2201      	movs	r2, #1
 800bc26:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800bc2e:	2527      	movs	r5, #39	@ 0x27
 800bc30:	197c      	adds	r4, r7, r5
 800bc32:	1dbb      	adds	r3, r7, #6
 800bc34:	881a      	ldrh	r2, [r3, #0]
 800bc36:	68b9      	ldr	r1, [r7, #8]
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	0018      	movs	r0, r3
 800bc3c:	f7ff fb9e 	bl	800b37c <UART_Start_Receive_DMA>
 800bc40:	0003      	movs	r3, r0
 800bc42:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800bc44:	197b      	adds	r3, r7, r5
 800bc46:	781b      	ldrb	r3, [r3, #0]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d124      	bne.n	800bc96 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bc50:	2b01      	cmp	r3, #1
 800bc52:	d11c      	bne.n	800bc8e <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	2210      	movs	r2, #16
 800bc5a:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800bc5c:	f3ef 8310 	mrs	r3, PRIMASK
 800bc60:	617b      	str	r3, [r7, #20]
  return(result);
 800bc62:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc64:	623b      	str	r3, [r7, #32]
 800bc66:	2301      	movs	r3, #1
 800bc68:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bc6a:	69bb      	ldr	r3, [r7, #24]
 800bc6c:	f383 8810 	msr	PRIMASK, r3
}
 800bc70:	46c0      	nop			@ (mov r8, r8)
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	681a      	ldr	r2, [r3, #0]
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	2110      	movs	r1, #16
 800bc7e:	430a      	orrs	r2, r1
 800bc80:	601a      	str	r2, [r3, #0]
 800bc82:	6a3b      	ldr	r3, [r7, #32]
 800bc84:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bc86:	69fb      	ldr	r3, [r7, #28]
 800bc88:	f383 8810 	msr	PRIMASK, r3
}
 800bc8c:	e003      	b.n	800bc96 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800bc8e:	2327      	movs	r3, #39	@ 0x27
 800bc90:	18fb      	adds	r3, r7, r3
 800bc92:	2201      	movs	r2, #1
 800bc94:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 800bc96:	2327      	movs	r3, #39	@ 0x27
 800bc98:	18fb      	adds	r3, r7, r3
 800bc9a:	781b      	ldrb	r3, [r3, #0]
 800bc9c:	e000      	b.n	800bca0 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 800bc9e:	2302      	movs	r3, #2
  }
}
 800bca0:	0018      	movs	r0, r3
 800bca2:	46bd      	mov	sp, r7
 800bca4:	b00a      	add	sp, #40	@ 0x28
 800bca6:	bdb0      	pop	{r4, r5, r7, pc}

0800bca8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bcaa:	b085      	sub	sp, #20
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d108      	bne.n	800bcca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	226a      	movs	r2, #106	@ 0x6a
 800bcbc:	2101      	movs	r1, #1
 800bcbe:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2268      	movs	r2, #104	@ 0x68
 800bcc4:	2101      	movs	r1, #1
 800bcc6:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bcc8:	e043      	b.n	800bd52 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bcca:	260f      	movs	r6, #15
 800bccc:	19bb      	adds	r3, r7, r6
 800bcce:	2208      	movs	r2, #8
 800bcd0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bcd2:	200e      	movs	r0, #14
 800bcd4:	183b      	adds	r3, r7, r0
 800bcd6:	2208      	movs	r2, #8
 800bcd8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	689b      	ldr	r3, [r3, #8]
 800bce0:	0e5b      	lsrs	r3, r3, #25
 800bce2:	b2da      	uxtb	r2, r3
 800bce4:	240d      	movs	r4, #13
 800bce6:	193b      	adds	r3, r7, r4
 800bce8:	2107      	movs	r1, #7
 800bcea:	400a      	ands	r2, r1
 800bcec:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	689b      	ldr	r3, [r3, #8]
 800bcf4:	0f5b      	lsrs	r3, r3, #29
 800bcf6:	b2da      	uxtb	r2, r3
 800bcf8:	250c      	movs	r5, #12
 800bcfa:	197b      	adds	r3, r7, r5
 800bcfc:	2107      	movs	r1, #7
 800bcfe:	400a      	ands	r2, r1
 800bd00:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bd02:	183b      	adds	r3, r7, r0
 800bd04:	781b      	ldrb	r3, [r3, #0]
 800bd06:	197a      	adds	r2, r7, r5
 800bd08:	7812      	ldrb	r2, [r2, #0]
 800bd0a:	4914      	ldr	r1, [pc, #80]	@ (800bd5c <UARTEx_SetNbDataToProcess+0xb4>)
 800bd0c:	5c8a      	ldrb	r2, [r1, r2]
 800bd0e:	435a      	muls	r2, r3
 800bd10:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800bd12:	197b      	adds	r3, r7, r5
 800bd14:	781b      	ldrb	r3, [r3, #0]
 800bd16:	4a12      	ldr	r2, [pc, #72]	@ (800bd60 <UARTEx_SetNbDataToProcess+0xb8>)
 800bd18:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bd1a:	0019      	movs	r1, r3
 800bd1c:	f7f4 fa7e 	bl	800021c <__divsi3>
 800bd20:	0003      	movs	r3, r0
 800bd22:	b299      	uxth	r1, r3
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	226a      	movs	r2, #106	@ 0x6a
 800bd28:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bd2a:	19bb      	adds	r3, r7, r6
 800bd2c:	781b      	ldrb	r3, [r3, #0]
 800bd2e:	193a      	adds	r2, r7, r4
 800bd30:	7812      	ldrb	r2, [r2, #0]
 800bd32:	490a      	ldr	r1, [pc, #40]	@ (800bd5c <UARTEx_SetNbDataToProcess+0xb4>)
 800bd34:	5c8a      	ldrb	r2, [r1, r2]
 800bd36:	435a      	muls	r2, r3
 800bd38:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800bd3a:	193b      	adds	r3, r7, r4
 800bd3c:	781b      	ldrb	r3, [r3, #0]
 800bd3e:	4a08      	ldr	r2, [pc, #32]	@ (800bd60 <UARTEx_SetNbDataToProcess+0xb8>)
 800bd40:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bd42:	0019      	movs	r1, r3
 800bd44:	f7f4 fa6a 	bl	800021c <__divsi3>
 800bd48:	0003      	movs	r3, r0
 800bd4a:	b299      	uxth	r1, r3
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2268      	movs	r2, #104	@ 0x68
 800bd50:	5299      	strh	r1, [r3, r2]
}
 800bd52:	46c0      	nop			@ (mov r8, r8)
 800bd54:	46bd      	mov	sp, r7
 800bd56:	b005      	add	sp, #20
 800bd58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd5a:	46c0      	nop			@ (mov r8, r8)
 800bd5c:	0800c59c 	.word	0x0800c59c
 800bd60:	0800c5a4 	.word	0x0800c5a4

0800bd64 <LL_ADC_REG_GetSequencerConfigurable>:
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b082      	sub	sp, #8
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_CHSELRMOD));
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	68da      	ldr	r2, [r3, #12]
 800bd70:	2380      	movs	r3, #128	@ 0x80
 800bd72:	039b      	lsls	r3, r3, #14
 800bd74:	4013      	ands	r3, r2
}
 800bd76:	0018      	movs	r0, r3
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	b002      	add	sp, #8
 800bd7c:	bd80      	pop	{r7, pc}

0800bd7e <LL_ADC_REG_SetSequencerLength>:
{
 800bd7e:	b580      	push	{r7, lr}
 800bd80:	b082      	sub	sp, #8
 800bd82:	af00      	add	r7, sp, #0
 800bd84:	6078      	str	r0, [r7, #4]
 800bd86:	6039      	str	r1, [r7, #0]
  SET_BIT(ADCx->CHSELR, SequencerNbRanks);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bd8c:	683b      	ldr	r3, [r7, #0]
 800bd8e:	431a      	orrs	r2, r3
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800bd94:	46c0      	nop			@ (mov r8, r8)
 800bd96:	46bd      	mov	sp, r7
 800bd98:	b002      	add	sp, #8
 800bd9a:	bd80      	pop	{r7, pc}

0800bd9c <LL_ADC_IsEnabled>:
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b082      	sub	sp, #8
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	689b      	ldr	r3, [r3, #8]
 800bda8:	2201      	movs	r2, #1
 800bdaa:	4013      	ands	r3, r2
 800bdac:	2b01      	cmp	r3, #1
 800bdae:	d101      	bne.n	800bdb4 <LL_ADC_IsEnabled+0x18>
 800bdb0:	2301      	movs	r3, #1
 800bdb2:	e000      	b.n	800bdb6 <LL_ADC_IsEnabled+0x1a>
 800bdb4:	2300      	movs	r3, #0
}
 800bdb6:	0018      	movs	r0, r3
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	b002      	add	sp, #8
 800bdbc:	bd80      	pop	{r7, pc}
	...

0800bdc0 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b084      	sub	sp, #16
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
 800bdc8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800bdca:	230f      	movs	r3, #15
 800bdcc:	18fb      	adds	r3, r7, r3
 800bdce:	2200      	movs	r2, #0
 800bdd0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	0018      	movs	r0, r3
 800bdd6:	f7ff ffe1 	bl	800bd9c <LL_ADC_IsEnabled>
 800bdda:	1e03      	subs	r3, r0, #0
 800bddc:	d118      	bne.n	800be10 <LL_ADC_Init+0x50>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR1,
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	68db      	ldr	r3, [r3, #12]
 800bde2:	4a11      	ldr	r2, [pc, #68]	@ (800be28 <LL_ADC_Init+0x68>)
 800bde4:	401a      	ands	r2, r3
 800bde6:	683b      	ldr	r3, [r7, #0]
 800bde8:	6859      	ldr	r1, [r3, #4]
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	689b      	ldr	r3, [r3, #8]
 800bdee:	4319      	orrs	r1, r3
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	68db      	ldr	r3, [r3, #12]
 800bdf4:	430b      	orrs	r3, r1
 800bdf6:	431a      	orrs	r2, r3
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	60da      	str	r2, [r3, #12]
               ADC_InitStruct->Resolution
               | ADC_InitStruct->DataAlignment
               | ADC_InitStruct->LowPowerMode
              );

    MODIFY_REG(ADCx->CFGR2,
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	691b      	ldr	r3, [r3, #16]
 800be00:	009b      	lsls	r3, r3, #2
 800be02:	089a      	lsrs	r2, r3, #2
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	431a      	orrs	r2, r3
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	611a      	str	r2, [r3, #16]
 800be0e:	e003      	b.n	800be18 <LL_ADC_Init+0x58>
              );
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800be10:	230f      	movs	r3, #15
 800be12:	18fb      	adds	r3, r7, r3
 800be14:	2201      	movs	r2, #1
 800be16:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800be18:	230f      	movs	r3, #15
 800be1a:	18fb      	adds	r3, r7, r3
 800be1c:	781b      	ldrb	r3, [r3, #0]
}
 800be1e:	0018      	movs	r0, r3
 800be20:	46bd      	mov	sp, r7
 800be22:	b004      	add	sp, #16
 800be24:	bd80      	pop	{r7, pc}
 800be26:	46c0      	nop			@ (mov r8, r8)
 800be28:	ffff3fc7 	.word	0xffff3fc7

0800be2c <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b084      	sub	sp, #16
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
 800be34:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800be36:	230f      	movs	r3, #15
 800be38:	18fb      	adds	r3, r7, r3
 800be3a:	2200      	movs	r2, #0
 800be3c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_ADC_REG_TRIG_SOURCE(ADC_REG_InitStruct->TriggerSource));
  assert_param(IS_LL_ADC_REG_CONTINUOUS_MODE(ADC_REG_InitStruct->ContinuousMode));
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));

  if (LL_ADC_REG_GetSequencerConfigurable(ADCx) != LL_ADC_REG_SEQ_FIXED)
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	0018      	movs	r0, r3
 800be42:	f7ff ff8f 	bl	800bd64 <LL_ADC_REG_GetSequencerConfigurable>
  {
    assert_param(IS_LL_ADC_REG_SEQ_SCAN_LENGTH(ADC_REG_InitStruct->SequencerLength));
  }

  if ((LL_ADC_REG_GetSequencerConfigurable(ADCx) == LL_ADC_REG_SEQ_FIXED)
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	0018      	movs	r0, r3
 800be4a:	f7ff ff8b 	bl	800bd64 <LL_ADC_REG_GetSequencerConfigurable>
                 || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  }

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	0018      	movs	r0, r3
 800be52:	f7ff ffa3 	bl	800bd9c <LL_ADC_IsEnabled>
 800be56:	1e03      	subs	r3, r0, #0
 800be58:	d13f      	bne.n	800beda <LL_ADC_REG_Init+0xae>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by    */
    /*       setting of trigger source to SW start.                           */
    if ((LL_ADC_REG_GetSequencerConfigurable(ADCx) == LL_ADC_REG_SEQ_FIXED)
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	0018      	movs	r0, r3
 800be5e:	f7ff ff81 	bl	800bd64 <LL_ADC_REG_GetSequencerConfigurable>
 800be62:	1e03      	subs	r3, r0, #0
 800be64:	d003      	beq.n	800be6e <LL_ADC_REG_Init+0x42>
        || (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 800be66:	683b      	ldr	r3, [r7, #0]
 800be68:	685b      	ldr	r3, [r3, #4]
 800be6a:	2bf0      	cmp	r3, #240	@ 0xf0
 800be6c:	d015      	beq.n	800be9a <LL_ADC_REG_Init+0x6e>
       )
    {
      /* Case of sequencer mode fixed
         or sequencer length >= 2 ranks with sequencer mode fully configurable:
         discontinuous mode configured */
      MODIFY_REG(ADCx->CFGR1,
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	68db      	ldr	r3, [r3, #12]
 800be72:	4a1f      	ldr	r2, [pc, #124]	@ (800bef0 <LL_ADC_REG_Init+0xc4>)
 800be74:	401a      	ands	r2, r3
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	6819      	ldr	r1, [r3, #0]
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	689b      	ldr	r3, [r3, #8]
 800be7e:	4319      	orrs	r1, r3
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	68db      	ldr	r3, [r3, #12]
 800be84:	4319      	orrs	r1, r3
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	691b      	ldr	r3, [r3, #16]
 800be8a:	4319      	orrs	r1, r3
 800be8c:	683b      	ldr	r3, [r7, #0]
 800be8e:	695b      	ldr	r3, [r3, #20]
 800be90:	430b      	orrs	r3, r1
 800be92:	431a      	orrs	r2, r3
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	60da      	str	r2, [r3, #12]
 800be98:	e011      	b.n	800bebe <LL_ADC_REG_Init+0x92>
    else
    {
      /* Case of sequencer mode fully configurable
         and sequencer length 1 rank (sequencer disabled):
         discontinuous mode discarded (fixed to disable) */
      MODIFY_REG(ADCx->CFGR1,
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	68db      	ldr	r3, [r3, #12]
 800be9e:	4a14      	ldr	r2, [pc, #80]	@ (800bef0 <LL_ADC_REG_Init+0xc4>)
 800bea0:	401a      	ands	r2, r3
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	6819      	ldr	r1, [r3, #0]
 800bea6:	683b      	ldr	r3, [r7, #0]
 800bea8:	68db      	ldr	r3, [r3, #12]
 800beaa:	4319      	orrs	r1, r3
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	691b      	ldr	r3, [r3, #16]
 800beb0:	4319      	orrs	r1, r3
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	695b      	ldr	r3, [r3, #20]
 800beb6:	430b      	orrs	r3, r1
 800beb8:	431a      	orrs	r2, r3
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	60da      	str	r2, [r3, #12]
                 | ADC_REG_InitStruct->Overrun
                );
    }

    /* Set ADC group regular sequencer length */
    if (LL_ADC_REG_GetSequencerConfigurable(ADCx) != LL_ADC_REG_SEQ_FIXED)
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	0018      	movs	r0, r3
 800bec2:	f7ff ff4f 	bl	800bd64 <LL_ADC_REG_GetSequencerConfigurable>
 800bec6:	1e03      	subs	r3, r0, #0
 800bec8:	d00b      	beq.n	800bee2 <LL_ADC_REG_Init+0xb6>
    {
      LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	685a      	ldr	r2, [r3, #4]
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	0011      	movs	r1, r2
 800bed2:	0018      	movs	r0, r3
 800bed4:	f7ff ff53 	bl	800bd7e <LL_ADC_REG_SetSequencerLength>
 800bed8:	e003      	b.n	800bee2 <LL_ADC_REG_Init+0xb6>
    }
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800beda:	230f      	movs	r3, #15
 800bedc:	18fb      	adds	r3, r7, r3
 800bede:	2201      	movs	r2, #1
 800bee0:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800bee2:	230f      	movs	r3, #15
 800bee4:	18fb      	adds	r3, r7, r3
 800bee6:	781b      	ldrb	r3, [r3, #0]
}
 800bee8:	0018      	movs	r0, r3
 800beea:	46bd      	mov	sp, r7
 800beec:	b004      	add	sp, #16
 800beee:	bd80      	pop	{r7, pc}
 800bef0:	fffec23c 	.word	0xfffec23c

0800bef4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b084      	sub	sp, #16
 800bef8:	af00      	add	r7, sp, #0
 800befa:	60f8      	str	r0, [r7, #12]
 800befc:	60b9      	str	r1, [r7, #8]
 800befe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	6819      	ldr	r1, [r3, #0]
 800bf04:	68bb      	ldr	r3, [r7, #8]
 800bf06:	435b      	muls	r3, r3
 800bf08:	001a      	movs	r2, r3
 800bf0a:	0013      	movs	r3, r2
 800bf0c:	005b      	lsls	r3, r3, #1
 800bf0e:	189b      	adds	r3, r3, r2
 800bf10:	43db      	mvns	r3, r3
 800bf12:	400b      	ands	r3, r1
 800bf14:	001a      	movs	r2, r3
 800bf16:	68bb      	ldr	r3, [r7, #8]
 800bf18:	435b      	muls	r3, r3
 800bf1a:	6879      	ldr	r1, [r7, #4]
 800bf1c:	434b      	muls	r3, r1
 800bf1e:	431a      	orrs	r2, r3
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	601a      	str	r2, [r3, #0]
}
 800bf24:	46c0      	nop			@ (mov r8, r8)
 800bf26:	46bd      	mov	sp, r7
 800bf28:	b004      	add	sp, #16
 800bf2a:	bd80      	pop	{r7, pc}

0800bf2c <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b084      	sub	sp, #16
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	60f8      	str	r0, [r7, #12]
 800bf34:	60b9      	str	r1, [r7, #8]
 800bf36:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	685b      	ldr	r3, [r3, #4]
 800bf3c:	68ba      	ldr	r2, [r7, #8]
 800bf3e:	43d2      	mvns	r2, r2
 800bf40:	401a      	ands	r2, r3
 800bf42:	68bb      	ldr	r3, [r7, #8]
 800bf44:	6879      	ldr	r1, [r7, #4]
 800bf46:	434b      	muls	r3, r1
 800bf48:	431a      	orrs	r2, r3
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	605a      	str	r2, [r3, #4]
}
 800bf4e:	46c0      	nop			@ (mov r8, r8)
 800bf50:	46bd      	mov	sp, r7
 800bf52:	b004      	add	sp, #16
 800bf54:	bd80      	pop	{r7, pc}

0800bf56 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800bf56:	b580      	push	{r7, lr}
 800bf58:	b084      	sub	sp, #16
 800bf5a:	af00      	add	r7, sp, #0
 800bf5c:	60f8      	str	r0, [r7, #12]
 800bf5e:	60b9      	str	r1, [r7, #8]
 800bf60:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	6899      	ldr	r1, [r3, #8]
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	435b      	muls	r3, r3
 800bf6a:	001a      	movs	r2, r3
 800bf6c:	0013      	movs	r3, r2
 800bf6e:	005b      	lsls	r3, r3, #1
 800bf70:	189b      	adds	r3, r3, r2
 800bf72:	43db      	mvns	r3, r3
 800bf74:	400b      	ands	r3, r1
 800bf76:	001a      	movs	r2, r3
 800bf78:	68bb      	ldr	r3, [r7, #8]
 800bf7a:	435b      	muls	r3, r3
 800bf7c:	6879      	ldr	r1, [r7, #4]
 800bf7e:	434b      	muls	r3, r1
 800bf80:	431a      	orrs	r2, r3
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	609a      	str	r2, [r3, #8]
}
 800bf86:	46c0      	nop			@ (mov r8, r8)
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	b004      	add	sp, #16
 800bf8c:	bd80      	pop	{r7, pc}

0800bf8e <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800bf8e:	b580      	push	{r7, lr}
 800bf90:	b084      	sub	sp, #16
 800bf92:	af00      	add	r7, sp, #0
 800bf94:	60f8      	str	r0, [r7, #12]
 800bf96:	60b9      	str	r1, [r7, #8]
 800bf98:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	68d9      	ldr	r1, [r3, #12]
 800bf9e:	68bb      	ldr	r3, [r7, #8]
 800bfa0:	435b      	muls	r3, r3
 800bfa2:	001a      	movs	r2, r3
 800bfa4:	0013      	movs	r3, r2
 800bfa6:	005b      	lsls	r3, r3, #1
 800bfa8:	189b      	adds	r3, r3, r2
 800bfaa:	43db      	mvns	r3, r3
 800bfac:	400b      	ands	r3, r1
 800bfae:	001a      	movs	r2, r3
 800bfb0:	68bb      	ldr	r3, [r7, #8]
 800bfb2:	435b      	muls	r3, r3
 800bfb4:	6879      	ldr	r1, [r7, #4]
 800bfb6:	434b      	muls	r3, r1
 800bfb8:	431a      	orrs	r2, r3
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	60da      	str	r2, [r3, #12]
}
 800bfbe:	46c0      	nop			@ (mov r8, r8)
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	b004      	add	sp, #16
 800bfc4:	bd80      	pop	{r7, pc}

0800bfc6 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800bfc6:	b580      	push	{r7, lr}
 800bfc8:	b084      	sub	sp, #16
 800bfca:	af00      	add	r7, sp, #0
 800bfcc:	60f8      	str	r0, [r7, #12]
 800bfce:	60b9      	str	r1, [r7, #8]
 800bfd0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	6a19      	ldr	r1, [r3, #32]
 800bfd6:	68bb      	ldr	r3, [r7, #8]
 800bfd8:	435b      	muls	r3, r3
 800bfda:	68ba      	ldr	r2, [r7, #8]
 800bfdc:	4353      	muls	r3, r2
 800bfde:	68ba      	ldr	r2, [r7, #8]
 800bfe0:	435a      	muls	r2, r3
 800bfe2:	0013      	movs	r3, r2
 800bfe4:	011b      	lsls	r3, r3, #4
 800bfe6:	1a9b      	subs	r3, r3, r2
 800bfe8:	43db      	mvns	r3, r3
 800bfea:	400b      	ands	r3, r1
 800bfec:	001a      	movs	r2, r3
 800bfee:	68bb      	ldr	r3, [r7, #8]
 800bff0:	435b      	muls	r3, r3
 800bff2:	68b9      	ldr	r1, [r7, #8]
 800bff4:	434b      	muls	r3, r1
 800bff6:	68b9      	ldr	r1, [r7, #8]
 800bff8:	434b      	muls	r3, r1
 800bffa:	6879      	ldr	r1, [r7, #4]
 800bffc:	434b      	muls	r3, r1
 800bffe:	431a      	orrs	r2, r3
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	621a      	str	r2, [r3, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 800c004:	46c0      	nop			@ (mov r8, r8)
 800c006:	46bd      	mov	sp, r7
 800c008:	b004      	add	sp, #16
 800c00a:	bd80      	pop	{r7, pc}

0800c00c <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b084      	sub	sp, #16
 800c010:	af00      	add	r7, sp, #0
 800c012:	60f8      	str	r0, [r7, #12]
 800c014:	60b9      	str	r1, [r7, #8]
 800c016:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800c01c:	68bb      	ldr	r3, [r7, #8]
 800c01e:	0a1b      	lsrs	r3, r3, #8
 800c020:	68ba      	ldr	r2, [r7, #8]
 800c022:	0a12      	lsrs	r2, r2, #8
 800c024:	4353      	muls	r3, r2
 800c026:	68ba      	ldr	r2, [r7, #8]
 800c028:	0a12      	lsrs	r2, r2, #8
 800c02a:	4353      	muls	r3, r2
 800c02c:	68ba      	ldr	r2, [r7, #8]
 800c02e:	0a12      	lsrs	r2, r2, #8
 800c030:	435a      	muls	r2, r3
 800c032:	0013      	movs	r3, r2
 800c034:	011b      	lsls	r3, r3, #4
 800c036:	1a9b      	subs	r3, r3, r2
 800c038:	43db      	mvns	r3, r3
 800c03a:	400b      	ands	r3, r1
 800c03c:	001a      	movs	r2, r3
 800c03e:	68bb      	ldr	r3, [r7, #8]
 800c040:	0a1b      	lsrs	r3, r3, #8
 800c042:	68b9      	ldr	r1, [r7, #8]
 800c044:	0a09      	lsrs	r1, r1, #8
 800c046:	434b      	muls	r3, r1
 800c048:	68b9      	ldr	r1, [r7, #8]
 800c04a:	0a09      	lsrs	r1, r1, #8
 800c04c:	434b      	muls	r3, r1
 800c04e:	68b9      	ldr	r1, [r7, #8]
 800c050:	0a09      	lsrs	r1, r1, #8
 800c052:	434b      	muls	r3, r1
 800c054:	6879      	ldr	r1, [r7, #4]
 800c056:	434b      	muls	r3, r1
 800c058:	431a      	orrs	r2, r3
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	625a      	str	r2, [r3, #36]	@ 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 800c05e:	46c0      	nop			@ (mov r8, r8)
 800c060:	46bd      	mov	sp, r7
 800c062:	b004      	add	sp, #16
 800c064:	bd80      	pop	{r7, pc}

0800c066 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800c066:	b580      	push	{r7, lr}
 800c068:	b084      	sub	sp, #16
 800c06a:	af00      	add	r7, sp, #0
 800c06c:	6078      	str	r0, [r7, #4]
 800c06e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 800c070:	2300      	movs	r3, #0
 800c072:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800c074:	e047      	b.n	800c106 <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	2101      	movs	r1, #1
 800c07c:	68fa      	ldr	r2, [r7, #12]
 800c07e:	4091      	lsls	r1, r2
 800c080:	000a      	movs	r2, r1
 800c082:	4013      	ands	r3, r2
 800c084:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 800c086:	68bb      	ldr	r3, [r7, #8]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d039      	beq.n	800c100 <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	685b      	ldr	r3, [r3, #4]
 800c090:	2b01      	cmp	r3, #1
 800c092:	d003      	beq.n	800c09c <LL_GPIO_Init+0x36>
 800c094:	683b      	ldr	r3, [r7, #0]
 800c096:	685b      	ldr	r3, [r3, #4]
 800c098:	2b02      	cmp	r3, #2
 800c09a:	d10d      	bne.n	800c0b8 <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800c09c:	683b      	ldr	r3, [r7, #0]
 800c09e:	689a      	ldr	r2, [r3, #8]
 800c0a0:	68b9      	ldr	r1, [r7, #8]
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	0018      	movs	r0, r3
 800c0a6:	f7ff ff56 	bl	800bf56 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	68da      	ldr	r2, [r3, #12]
 800c0ae:	68b9      	ldr	r1, [r7, #8]
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	0018      	movs	r0, r3
 800c0b4:	f7ff ff3a 	bl	800bf2c <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	691a      	ldr	r2, [r3, #16]
 800c0bc:	68b9      	ldr	r1, [r7, #8]
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	0018      	movs	r0, r3
 800c0c2:	f7ff ff64 	bl	800bf8e <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	685b      	ldr	r3, [r3, #4]
 800c0ca:	2b02      	cmp	r3, #2
 800c0cc:	d111      	bne.n	800c0f2 <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800c0ce:	68bb      	ldr	r3, [r7, #8]
 800c0d0:	2bff      	cmp	r3, #255	@ 0xff
 800c0d2:	d807      	bhi.n	800c0e4 <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800c0d4:	683b      	ldr	r3, [r7, #0]
 800c0d6:	695a      	ldr	r2, [r3, #20]
 800c0d8:	68b9      	ldr	r1, [r7, #8]
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	0018      	movs	r0, r3
 800c0de:	f7ff ff72 	bl	800bfc6 <LL_GPIO_SetAFPin_0_7>
 800c0e2:	e006      	b.n	800c0f2 <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800c0e4:	683b      	ldr	r3, [r7, #0]
 800c0e6:	695a      	ldr	r2, [r3, #20]
 800c0e8:	68b9      	ldr	r1, [r7, #8]
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	0018      	movs	r0, r3
 800c0ee:	f7ff ff8d 	bl	800c00c <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	685a      	ldr	r2, [r3, #4]
 800c0f6:	68b9      	ldr	r1, [r7, #8]
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	0018      	movs	r0, r3
 800c0fc:	f7ff fefa 	bl	800bef4 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	3301      	adds	r3, #1
 800c104:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800c106:	683b      	ldr	r3, [r7, #0]
 800c108:	681a      	ldr	r2, [r3, #0]
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	40da      	lsrs	r2, r3
 800c10e:	1e13      	subs	r3, r2, #0
 800c110:	d1b1      	bne.n	800c076 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 800c112:	2300      	movs	r3, #0
}
 800c114:	0018      	movs	r0, r3
 800c116:	46bd      	mov	sp, r7
 800c118:	b004      	add	sp, #16
 800c11a:	bd80      	pop	{r7, pc}

0800c11c <memset>:
 800c11c:	0003      	movs	r3, r0
 800c11e:	1882      	adds	r2, r0, r2
 800c120:	4293      	cmp	r3, r2
 800c122:	d100      	bne.n	800c126 <memset+0xa>
 800c124:	4770      	bx	lr
 800c126:	7019      	strb	r1, [r3, #0]
 800c128:	3301      	adds	r3, #1
 800c12a:	e7f9      	b.n	800c120 <memset+0x4>

0800c12c <__libc_init_array>:
 800c12c:	b570      	push	{r4, r5, r6, lr}
 800c12e:	2600      	movs	r6, #0
 800c130:	4c0c      	ldr	r4, [pc, #48]	@ (800c164 <__libc_init_array+0x38>)
 800c132:	4d0d      	ldr	r5, [pc, #52]	@ (800c168 <__libc_init_array+0x3c>)
 800c134:	1b64      	subs	r4, r4, r5
 800c136:	10a4      	asrs	r4, r4, #2
 800c138:	42a6      	cmp	r6, r4
 800c13a:	d109      	bne.n	800c150 <__libc_init_array+0x24>
 800c13c:	2600      	movs	r6, #0
 800c13e:	f000 f819 	bl	800c174 <_init>
 800c142:	4c0a      	ldr	r4, [pc, #40]	@ (800c16c <__libc_init_array+0x40>)
 800c144:	4d0a      	ldr	r5, [pc, #40]	@ (800c170 <__libc_init_array+0x44>)
 800c146:	1b64      	subs	r4, r4, r5
 800c148:	10a4      	asrs	r4, r4, #2
 800c14a:	42a6      	cmp	r6, r4
 800c14c:	d105      	bne.n	800c15a <__libc_init_array+0x2e>
 800c14e:	bd70      	pop	{r4, r5, r6, pc}
 800c150:	00b3      	lsls	r3, r6, #2
 800c152:	58eb      	ldr	r3, [r5, r3]
 800c154:	4798      	blx	r3
 800c156:	3601      	adds	r6, #1
 800c158:	e7ee      	b.n	800c138 <__libc_init_array+0xc>
 800c15a:	00b3      	lsls	r3, r6, #2
 800c15c:	58eb      	ldr	r3, [r5, r3]
 800c15e:	4798      	blx	r3
 800c160:	3601      	adds	r6, #1
 800c162:	e7f2      	b.n	800c14a <__libc_init_array+0x1e>
 800c164:	0800c5ac 	.word	0x0800c5ac
 800c168:	0800c5ac 	.word	0x0800c5ac
 800c16c:	0800c5b0 	.word	0x0800c5b0
 800c170:	0800c5ac 	.word	0x0800c5ac

0800c174 <_init>:
 800c174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c176:	46c0      	nop			@ (mov r8, r8)
 800c178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c17a:	bc08      	pop	{r3}
 800c17c:	469e      	mov	lr, r3
 800c17e:	4770      	bx	lr

0800c180 <_fini>:
 800c180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c182:	46c0      	nop			@ (mov r8, r8)
 800c184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c186:	bc08      	pop	{r3}
 800c188:	469e      	mov	lr, r3
 800c18a:	4770      	bx	lr
