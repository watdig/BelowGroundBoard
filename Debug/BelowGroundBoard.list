
BelowGroundBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d178  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000049c  0800d238  0800d238  0000e238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d6d4  0800d6d4  0000f0c4  2**0
                  CONTENTS
  4 .ARM          00000000  0800d6d4  0800d6d4  0000f0c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d6d4  0800d6d4  0000f0c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d6d4  0800d6d4  0000e6d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d6d8  0800d6d8  0000e6d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c4  20000000  0800d6dc  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007f4  200000c4  0800d7a0  0000f0c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008b8  0800d7a0  0000f8b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000f0c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bf1a  00000000  00000000  0000f0ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003951  00000000  00000000  0002b006  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018d8  00000000  00000000  0002e958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000138f  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019ff6  00000000  00000000  000315bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d738  00000000  00000000  0004b5b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f784  00000000  00000000  00068ced  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00108471  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005da8  00000000  00000000  001084b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  0010e25c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000c4 	.word	0x200000c4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800d220 	.word	0x0800d220

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000c8 	.word	0x200000c8
 8000104:	0800d220 	.word	0x0800d220

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <__aeabi_cfrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	0008      	movs	r0, r1
 80003f8:	4661      	mov	r1, ip
 80003fa:	e7ff      	b.n	80003fc <__aeabi_cfcmpeq>

080003fc <__aeabi_cfcmpeq>:
 80003fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003fe:	f000 fb6d 	bl	8000adc <__lesf2>
 8000402:	2800      	cmp	r0, #0
 8000404:	d401      	bmi.n	800040a <__aeabi_cfcmpeq+0xe>
 8000406:	2100      	movs	r1, #0
 8000408:	42c8      	cmn	r0, r1
 800040a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800040c <__aeabi_fcmpeq>:
 800040c:	b510      	push	{r4, lr}
 800040e:	f000 faed 	bl	80009ec <__eqsf2>
 8000412:	4240      	negs	r0, r0
 8000414:	3001      	adds	r0, #1
 8000416:	bd10      	pop	{r4, pc}

08000418 <__aeabi_fcmplt>:
 8000418:	b510      	push	{r4, lr}
 800041a:	f000 fb5f 	bl	8000adc <__lesf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	db01      	blt.n	8000426 <__aeabi_fcmplt+0xe>
 8000422:	2000      	movs	r0, #0
 8000424:	bd10      	pop	{r4, pc}
 8000426:	2001      	movs	r0, #1
 8000428:	bd10      	pop	{r4, pc}
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_fcmple>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f000 fb55 	bl	8000adc <__lesf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	dd01      	ble.n	800043a <__aeabi_fcmple+0xe>
 8000436:	2000      	movs	r0, #0
 8000438:	bd10      	pop	{r4, pc}
 800043a:	2001      	movs	r0, #1
 800043c:	bd10      	pop	{r4, pc}
 800043e:	46c0      	nop			@ (mov r8, r8)

08000440 <__aeabi_fcmpgt>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f000 fafb 	bl	8000a3c <__gesf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	dc01      	bgt.n	800044e <__aeabi_fcmpgt+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			@ (mov r8, r8)

08000454 <__aeabi_fcmpge>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 faf1 	bl	8000a3c <__gesf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	da01      	bge.n	8000462 <__aeabi_fcmpge+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			@ (mov r8, r8)

08000468 <__aeabi_f2uiz>:
 8000468:	219e      	movs	r1, #158	@ 0x9e
 800046a:	b510      	push	{r4, lr}
 800046c:	05c9      	lsls	r1, r1, #23
 800046e:	1c04      	adds	r4, r0, #0
 8000470:	f7ff fff0 	bl	8000454 <__aeabi_fcmpge>
 8000474:	2800      	cmp	r0, #0
 8000476:	d103      	bne.n	8000480 <__aeabi_f2uiz+0x18>
 8000478:	1c20      	adds	r0, r4, #0
 800047a:	f000 fe5f 	bl	800113c <__aeabi_f2iz>
 800047e:	bd10      	pop	{r4, pc}
 8000480:	219e      	movs	r1, #158	@ 0x9e
 8000482:	1c20      	adds	r0, r4, #0
 8000484:	05c9      	lsls	r1, r1, #23
 8000486:	f000 fcb5 	bl	8000df4 <__aeabi_fsub>
 800048a:	f000 fe57 	bl	800113c <__aeabi_f2iz>
 800048e:	2380      	movs	r3, #128	@ 0x80
 8000490:	061b      	lsls	r3, r3, #24
 8000492:	469c      	mov	ip, r3
 8000494:	4460      	add	r0, ip
 8000496:	e7f2      	b.n	800047e <__aeabi_f2uiz+0x16>

08000498 <__aeabi_fadd>:
 8000498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800049a:	46ce      	mov	lr, r9
 800049c:	4647      	mov	r7, r8
 800049e:	0243      	lsls	r3, r0, #9
 80004a0:	0a5a      	lsrs	r2, r3, #9
 80004a2:	024e      	lsls	r6, r1, #9
 80004a4:	0045      	lsls	r5, r0, #1
 80004a6:	0fc4      	lsrs	r4, r0, #31
 80004a8:	0048      	lsls	r0, r1, #1
 80004aa:	4691      	mov	r9, r2
 80004ac:	0e2d      	lsrs	r5, r5, #24
 80004ae:	0a72      	lsrs	r2, r6, #9
 80004b0:	0e00      	lsrs	r0, r0, #24
 80004b2:	4694      	mov	ip, r2
 80004b4:	b580      	push	{r7, lr}
 80004b6:	099b      	lsrs	r3, r3, #6
 80004b8:	0fc9      	lsrs	r1, r1, #31
 80004ba:	09b6      	lsrs	r6, r6, #6
 80004bc:	1a2a      	subs	r2, r5, r0
 80004be:	428c      	cmp	r4, r1
 80004c0:	d021      	beq.n	8000506 <__aeabi_fadd+0x6e>
 80004c2:	2a00      	cmp	r2, #0
 80004c4:	dd0d      	ble.n	80004e2 <__aeabi_fadd+0x4a>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d12d      	bne.n	8000526 <__aeabi_fadd+0x8e>
 80004ca:	2e00      	cmp	r6, #0
 80004cc:	d100      	bne.n	80004d0 <__aeabi_fadd+0x38>
 80004ce:	e08d      	b.n	80005ec <__aeabi_fadd+0x154>
 80004d0:	1e51      	subs	r1, r2, #1
 80004d2:	2a01      	cmp	r2, #1
 80004d4:	d100      	bne.n	80004d8 <__aeabi_fadd+0x40>
 80004d6:	e11d      	b.n	8000714 <__aeabi_fadd+0x27c>
 80004d8:	2aff      	cmp	r2, #255	@ 0xff
 80004da:	d100      	bne.n	80004de <__aeabi_fadd+0x46>
 80004dc:	e0ab      	b.n	8000636 <__aeabi_fadd+0x19e>
 80004de:	000a      	movs	r2, r1
 80004e0:	e027      	b.n	8000532 <__aeabi_fadd+0x9a>
 80004e2:	2a00      	cmp	r2, #0
 80004e4:	d04d      	beq.n	8000582 <__aeabi_fadd+0xea>
 80004e6:	1b42      	subs	r2, r0, r5
 80004e8:	2d00      	cmp	r5, #0
 80004ea:	d000      	beq.n	80004ee <__aeabi_fadd+0x56>
 80004ec:	e0cc      	b.n	8000688 <__aeabi_fadd+0x1f0>
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d100      	bne.n	80004f4 <__aeabi_fadd+0x5c>
 80004f2:	e079      	b.n	80005e8 <__aeabi_fadd+0x150>
 80004f4:	1e54      	subs	r4, r2, #1
 80004f6:	2a01      	cmp	r2, #1
 80004f8:	d100      	bne.n	80004fc <__aeabi_fadd+0x64>
 80004fa:	e128      	b.n	800074e <__aeabi_fadd+0x2b6>
 80004fc:	2aff      	cmp	r2, #255	@ 0xff
 80004fe:	d100      	bne.n	8000502 <__aeabi_fadd+0x6a>
 8000500:	e097      	b.n	8000632 <__aeabi_fadd+0x19a>
 8000502:	0022      	movs	r2, r4
 8000504:	e0c5      	b.n	8000692 <__aeabi_fadd+0x1fa>
 8000506:	2a00      	cmp	r2, #0
 8000508:	dc00      	bgt.n	800050c <__aeabi_fadd+0x74>
 800050a:	e096      	b.n	800063a <__aeabi_fadd+0x1a2>
 800050c:	2800      	cmp	r0, #0
 800050e:	d04f      	beq.n	80005b0 <__aeabi_fadd+0x118>
 8000510:	2dff      	cmp	r5, #255	@ 0xff
 8000512:	d100      	bne.n	8000516 <__aeabi_fadd+0x7e>
 8000514:	e08f      	b.n	8000636 <__aeabi_fadd+0x19e>
 8000516:	2180      	movs	r1, #128	@ 0x80
 8000518:	04c9      	lsls	r1, r1, #19
 800051a:	430e      	orrs	r6, r1
 800051c:	2a1b      	cmp	r2, #27
 800051e:	dd51      	ble.n	80005c4 <__aeabi_fadd+0x12c>
 8000520:	002a      	movs	r2, r5
 8000522:	3301      	adds	r3, #1
 8000524:	e018      	b.n	8000558 <__aeabi_fadd+0xc0>
 8000526:	2dff      	cmp	r5, #255	@ 0xff
 8000528:	d100      	bne.n	800052c <__aeabi_fadd+0x94>
 800052a:	e084      	b.n	8000636 <__aeabi_fadd+0x19e>
 800052c:	2180      	movs	r1, #128	@ 0x80
 800052e:	04c9      	lsls	r1, r1, #19
 8000530:	430e      	orrs	r6, r1
 8000532:	2101      	movs	r1, #1
 8000534:	2a1b      	cmp	r2, #27
 8000536:	dc08      	bgt.n	800054a <__aeabi_fadd+0xb2>
 8000538:	0031      	movs	r1, r6
 800053a:	2020      	movs	r0, #32
 800053c:	40d1      	lsrs	r1, r2
 800053e:	1a82      	subs	r2, r0, r2
 8000540:	4096      	lsls	r6, r2
 8000542:	0032      	movs	r2, r6
 8000544:	1e50      	subs	r0, r2, #1
 8000546:	4182      	sbcs	r2, r0
 8000548:	4311      	orrs	r1, r2
 800054a:	1a5b      	subs	r3, r3, r1
 800054c:	015a      	lsls	r2, r3, #5
 800054e:	d459      	bmi.n	8000604 <__aeabi_fadd+0x16c>
 8000550:	2107      	movs	r1, #7
 8000552:	002a      	movs	r2, r5
 8000554:	4019      	ands	r1, r3
 8000556:	d049      	beq.n	80005ec <__aeabi_fadd+0x154>
 8000558:	210f      	movs	r1, #15
 800055a:	4019      	ands	r1, r3
 800055c:	2904      	cmp	r1, #4
 800055e:	d000      	beq.n	8000562 <__aeabi_fadd+0xca>
 8000560:	3304      	adds	r3, #4
 8000562:	0159      	lsls	r1, r3, #5
 8000564:	d542      	bpl.n	80005ec <__aeabi_fadd+0x154>
 8000566:	1c50      	adds	r0, r2, #1
 8000568:	2afe      	cmp	r2, #254	@ 0xfe
 800056a:	d03a      	beq.n	80005e2 <__aeabi_fadd+0x14a>
 800056c:	019b      	lsls	r3, r3, #6
 800056e:	b2c0      	uxtb	r0, r0
 8000570:	0a5b      	lsrs	r3, r3, #9
 8000572:	05c0      	lsls	r0, r0, #23
 8000574:	4318      	orrs	r0, r3
 8000576:	07e4      	lsls	r4, r4, #31
 8000578:	4320      	orrs	r0, r4
 800057a:	bcc0      	pop	{r6, r7}
 800057c:	46b9      	mov	r9, r7
 800057e:	46b0      	mov	r8, r6
 8000580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000582:	20fe      	movs	r0, #254	@ 0xfe
 8000584:	4680      	mov	r8, r0
 8000586:	1c6f      	adds	r7, r5, #1
 8000588:	0038      	movs	r0, r7
 800058a:	4647      	mov	r7, r8
 800058c:	4207      	tst	r7, r0
 800058e:	d000      	beq.n	8000592 <__aeabi_fadd+0xfa>
 8000590:	e08e      	b.n	80006b0 <__aeabi_fadd+0x218>
 8000592:	2d00      	cmp	r5, #0
 8000594:	d000      	beq.n	8000598 <__aeabi_fadd+0x100>
 8000596:	e0b4      	b.n	8000702 <__aeabi_fadd+0x26a>
 8000598:	2b00      	cmp	r3, #0
 800059a:	d100      	bne.n	800059e <__aeabi_fadd+0x106>
 800059c:	e0db      	b.n	8000756 <__aeabi_fadd+0x2be>
 800059e:	2e00      	cmp	r6, #0
 80005a0:	d06c      	beq.n	800067c <__aeabi_fadd+0x1e4>
 80005a2:	1b98      	subs	r0, r3, r6
 80005a4:	0145      	lsls	r5, r0, #5
 80005a6:	d400      	bmi.n	80005aa <__aeabi_fadd+0x112>
 80005a8:	e0f7      	b.n	800079a <__aeabi_fadd+0x302>
 80005aa:	000c      	movs	r4, r1
 80005ac:	1af3      	subs	r3, r6, r3
 80005ae:	e03d      	b.n	800062c <__aeabi_fadd+0x194>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d01b      	beq.n	80005ec <__aeabi_fadd+0x154>
 80005b4:	1e51      	subs	r1, r2, #1
 80005b6:	2a01      	cmp	r2, #1
 80005b8:	d100      	bne.n	80005bc <__aeabi_fadd+0x124>
 80005ba:	e082      	b.n	80006c2 <__aeabi_fadd+0x22a>
 80005bc:	2aff      	cmp	r2, #255	@ 0xff
 80005be:	d03a      	beq.n	8000636 <__aeabi_fadd+0x19e>
 80005c0:	000a      	movs	r2, r1
 80005c2:	e7ab      	b.n	800051c <__aeabi_fadd+0x84>
 80005c4:	0031      	movs	r1, r6
 80005c6:	2020      	movs	r0, #32
 80005c8:	40d1      	lsrs	r1, r2
 80005ca:	1a82      	subs	r2, r0, r2
 80005cc:	4096      	lsls	r6, r2
 80005ce:	0032      	movs	r2, r6
 80005d0:	1e50      	subs	r0, r2, #1
 80005d2:	4182      	sbcs	r2, r0
 80005d4:	430a      	orrs	r2, r1
 80005d6:	189b      	adds	r3, r3, r2
 80005d8:	015a      	lsls	r2, r3, #5
 80005da:	d5b9      	bpl.n	8000550 <__aeabi_fadd+0xb8>
 80005dc:	1c6a      	adds	r2, r5, #1
 80005de:	2dfe      	cmp	r5, #254	@ 0xfe
 80005e0:	d175      	bne.n	80006ce <__aeabi_fadd+0x236>
 80005e2:	20ff      	movs	r0, #255	@ 0xff
 80005e4:	2300      	movs	r3, #0
 80005e6:	e7c4      	b.n	8000572 <__aeabi_fadd+0xda>
 80005e8:	000c      	movs	r4, r1
 80005ea:	0033      	movs	r3, r6
 80005ec:	08db      	lsrs	r3, r3, #3
 80005ee:	2aff      	cmp	r2, #255	@ 0xff
 80005f0:	d146      	bne.n	8000680 <__aeabi_fadd+0x1e8>
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d0f5      	beq.n	80005e2 <__aeabi_fadd+0x14a>
 80005f6:	2280      	movs	r2, #128	@ 0x80
 80005f8:	03d2      	lsls	r2, r2, #15
 80005fa:	4313      	orrs	r3, r2
 80005fc:	025b      	lsls	r3, r3, #9
 80005fe:	20ff      	movs	r0, #255	@ 0xff
 8000600:	0a5b      	lsrs	r3, r3, #9
 8000602:	e7b6      	b.n	8000572 <__aeabi_fadd+0xda>
 8000604:	019f      	lsls	r7, r3, #6
 8000606:	09bf      	lsrs	r7, r7, #6
 8000608:	0038      	movs	r0, r7
 800060a:	f000 fdf9 	bl	8001200 <__clzsi2>
 800060e:	3805      	subs	r0, #5
 8000610:	4087      	lsls	r7, r0
 8000612:	4285      	cmp	r5, r0
 8000614:	dc24      	bgt.n	8000660 <__aeabi_fadd+0x1c8>
 8000616:	003b      	movs	r3, r7
 8000618:	2120      	movs	r1, #32
 800061a:	1b42      	subs	r2, r0, r5
 800061c:	3201      	adds	r2, #1
 800061e:	40d3      	lsrs	r3, r2
 8000620:	1a8a      	subs	r2, r1, r2
 8000622:	4097      	lsls	r7, r2
 8000624:	1e7a      	subs	r2, r7, #1
 8000626:	4197      	sbcs	r7, r2
 8000628:	2200      	movs	r2, #0
 800062a:	433b      	orrs	r3, r7
 800062c:	0759      	lsls	r1, r3, #29
 800062e:	d193      	bne.n	8000558 <__aeabi_fadd+0xc0>
 8000630:	e797      	b.n	8000562 <__aeabi_fadd+0xca>
 8000632:	000c      	movs	r4, r1
 8000634:	0033      	movs	r3, r6
 8000636:	08db      	lsrs	r3, r3, #3
 8000638:	e7db      	b.n	80005f2 <__aeabi_fadd+0x15a>
 800063a:	2a00      	cmp	r2, #0
 800063c:	d014      	beq.n	8000668 <__aeabi_fadd+0x1d0>
 800063e:	1b42      	subs	r2, r0, r5
 8000640:	2d00      	cmp	r5, #0
 8000642:	d14b      	bne.n	80006dc <__aeabi_fadd+0x244>
 8000644:	2b00      	cmp	r3, #0
 8000646:	d0d0      	beq.n	80005ea <__aeabi_fadd+0x152>
 8000648:	1e51      	subs	r1, r2, #1
 800064a:	2a01      	cmp	r2, #1
 800064c:	d100      	bne.n	8000650 <__aeabi_fadd+0x1b8>
 800064e:	e09e      	b.n	800078e <__aeabi_fadd+0x2f6>
 8000650:	2aff      	cmp	r2, #255	@ 0xff
 8000652:	d0ef      	beq.n	8000634 <__aeabi_fadd+0x19c>
 8000654:	000a      	movs	r2, r1
 8000656:	2a1b      	cmp	r2, #27
 8000658:	dd5f      	ble.n	800071a <__aeabi_fadd+0x282>
 800065a:	0002      	movs	r2, r0
 800065c:	1c73      	adds	r3, r6, #1
 800065e:	e77b      	b.n	8000558 <__aeabi_fadd+0xc0>
 8000660:	4b50      	ldr	r3, [pc, #320]	@ (80007a4 <__aeabi_fadd+0x30c>)
 8000662:	1a2a      	subs	r2, r5, r0
 8000664:	403b      	ands	r3, r7
 8000666:	e7e1      	b.n	800062c <__aeabi_fadd+0x194>
 8000668:	21fe      	movs	r1, #254	@ 0xfe
 800066a:	1c6a      	adds	r2, r5, #1
 800066c:	4211      	tst	r1, r2
 800066e:	d13b      	bne.n	80006e8 <__aeabi_fadd+0x250>
 8000670:	2d00      	cmp	r5, #0
 8000672:	d15d      	bne.n	8000730 <__aeabi_fadd+0x298>
 8000674:	2b00      	cmp	r3, #0
 8000676:	d07f      	beq.n	8000778 <__aeabi_fadd+0x2e0>
 8000678:	2e00      	cmp	r6, #0
 800067a:	d17f      	bne.n	800077c <__aeabi_fadd+0x2e4>
 800067c:	2200      	movs	r2, #0
 800067e:	08db      	lsrs	r3, r3, #3
 8000680:	025b      	lsls	r3, r3, #9
 8000682:	0a5b      	lsrs	r3, r3, #9
 8000684:	b2d0      	uxtb	r0, r2
 8000686:	e774      	b.n	8000572 <__aeabi_fadd+0xda>
 8000688:	28ff      	cmp	r0, #255	@ 0xff
 800068a:	d0d2      	beq.n	8000632 <__aeabi_fadd+0x19a>
 800068c:	2480      	movs	r4, #128	@ 0x80
 800068e:	04e4      	lsls	r4, r4, #19
 8000690:	4323      	orrs	r3, r4
 8000692:	2401      	movs	r4, #1
 8000694:	2a1b      	cmp	r2, #27
 8000696:	dc07      	bgt.n	80006a8 <__aeabi_fadd+0x210>
 8000698:	001c      	movs	r4, r3
 800069a:	2520      	movs	r5, #32
 800069c:	40d4      	lsrs	r4, r2
 800069e:	1aaa      	subs	r2, r5, r2
 80006a0:	4093      	lsls	r3, r2
 80006a2:	1e5a      	subs	r2, r3, #1
 80006a4:	4193      	sbcs	r3, r2
 80006a6:	431c      	orrs	r4, r3
 80006a8:	1b33      	subs	r3, r6, r4
 80006aa:	0005      	movs	r5, r0
 80006ac:	000c      	movs	r4, r1
 80006ae:	e74d      	b.n	800054c <__aeabi_fadd+0xb4>
 80006b0:	1b9f      	subs	r7, r3, r6
 80006b2:	017a      	lsls	r2, r7, #5
 80006b4:	d422      	bmi.n	80006fc <__aeabi_fadd+0x264>
 80006b6:	2f00      	cmp	r7, #0
 80006b8:	d1a6      	bne.n	8000608 <__aeabi_fadd+0x170>
 80006ba:	2400      	movs	r4, #0
 80006bc:	2000      	movs	r0, #0
 80006be:	2300      	movs	r3, #0
 80006c0:	e757      	b.n	8000572 <__aeabi_fadd+0xda>
 80006c2:	199b      	adds	r3, r3, r6
 80006c4:	2501      	movs	r5, #1
 80006c6:	3201      	adds	r2, #1
 80006c8:	0159      	lsls	r1, r3, #5
 80006ca:	d400      	bmi.n	80006ce <__aeabi_fadd+0x236>
 80006cc:	e740      	b.n	8000550 <__aeabi_fadd+0xb8>
 80006ce:	2101      	movs	r1, #1
 80006d0:	4835      	ldr	r0, [pc, #212]	@ (80007a8 <__aeabi_fadd+0x310>)
 80006d2:	4019      	ands	r1, r3
 80006d4:	085b      	lsrs	r3, r3, #1
 80006d6:	4003      	ands	r3, r0
 80006d8:	430b      	orrs	r3, r1
 80006da:	e7a7      	b.n	800062c <__aeabi_fadd+0x194>
 80006dc:	28ff      	cmp	r0, #255	@ 0xff
 80006de:	d0a9      	beq.n	8000634 <__aeabi_fadd+0x19c>
 80006e0:	2180      	movs	r1, #128	@ 0x80
 80006e2:	04c9      	lsls	r1, r1, #19
 80006e4:	430b      	orrs	r3, r1
 80006e6:	e7b6      	b.n	8000656 <__aeabi_fadd+0x1be>
 80006e8:	2aff      	cmp	r2, #255	@ 0xff
 80006ea:	d100      	bne.n	80006ee <__aeabi_fadd+0x256>
 80006ec:	e779      	b.n	80005e2 <__aeabi_fadd+0x14a>
 80006ee:	199b      	adds	r3, r3, r6
 80006f0:	085b      	lsrs	r3, r3, #1
 80006f2:	0759      	lsls	r1, r3, #29
 80006f4:	d000      	beq.n	80006f8 <__aeabi_fadd+0x260>
 80006f6:	e72f      	b.n	8000558 <__aeabi_fadd+0xc0>
 80006f8:	08db      	lsrs	r3, r3, #3
 80006fa:	e7c1      	b.n	8000680 <__aeabi_fadd+0x1e8>
 80006fc:	000c      	movs	r4, r1
 80006fe:	1af7      	subs	r7, r6, r3
 8000700:	e782      	b.n	8000608 <__aeabi_fadd+0x170>
 8000702:	2b00      	cmp	r3, #0
 8000704:	d12c      	bne.n	8000760 <__aeabi_fadd+0x2c8>
 8000706:	2e00      	cmp	r6, #0
 8000708:	d193      	bne.n	8000632 <__aeabi_fadd+0x19a>
 800070a:	2380      	movs	r3, #128	@ 0x80
 800070c:	2400      	movs	r4, #0
 800070e:	20ff      	movs	r0, #255	@ 0xff
 8000710:	03db      	lsls	r3, r3, #15
 8000712:	e72e      	b.n	8000572 <__aeabi_fadd+0xda>
 8000714:	2501      	movs	r5, #1
 8000716:	1b9b      	subs	r3, r3, r6
 8000718:	e718      	b.n	800054c <__aeabi_fadd+0xb4>
 800071a:	0019      	movs	r1, r3
 800071c:	2520      	movs	r5, #32
 800071e:	40d1      	lsrs	r1, r2
 8000720:	1aaa      	subs	r2, r5, r2
 8000722:	4093      	lsls	r3, r2
 8000724:	1e5a      	subs	r2, r3, #1
 8000726:	4193      	sbcs	r3, r2
 8000728:	430b      	orrs	r3, r1
 800072a:	0005      	movs	r5, r0
 800072c:	199b      	adds	r3, r3, r6
 800072e:	e753      	b.n	80005d8 <__aeabi_fadd+0x140>
 8000730:	2b00      	cmp	r3, #0
 8000732:	d100      	bne.n	8000736 <__aeabi_fadd+0x29e>
 8000734:	e77e      	b.n	8000634 <__aeabi_fadd+0x19c>
 8000736:	2e00      	cmp	r6, #0
 8000738:	d100      	bne.n	800073c <__aeabi_fadd+0x2a4>
 800073a:	e77c      	b.n	8000636 <__aeabi_fadd+0x19e>
 800073c:	2280      	movs	r2, #128	@ 0x80
 800073e:	03d2      	lsls	r2, r2, #15
 8000740:	4591      	cmp	r9, r2
 8000742:	d302      	bcc.n	800074a <__aeabi_fadd+0x2b2>
 8000744:	4594      	cmp	ip, r2
 8000746:	d200      	bcs.n	800074a <__aeabi_fadd+0x2b2>
 8000748:	0033      	movs	r3, r6
 800074a:	08db      	lsrs	r3, r3, #3
 800074c:	e753      	b.n	80005f6 <__aeabi_fadd+0x15e>
 800074e:	000c      	movs	r4, r1
 8000750:	1af3      	subs	r3, r6, r3
 8000752:	3501      	adds	r5, #1
 8000754:	e6fa      	b.n	800054c <__aeabi_fadd+0xb4>
 8000756:	2e00      	cmp	r6, #0
 8000758:	d0af      	beq.n	80006ba <__aeabi_fadd+0x222>
 800075a:	000c      	movs	r4, r1
 800075c:	0033      	movs	r3, r6
 800075e:	e78d      	b.n	800067c <__aeabi_fadd+0x1e4>
 8000760:	2e00      	cmp	r6, #0
 8000762:	d100      	bne.n	8000766 <__aeabi_fadd+0x2ce>
 8000764:	e767      	b.n	8000636 <__aeabi_fadd+0x19e>
 8000766:	2280      	movs	r2, #128	@ 0x80
 8000768:	03d2      	lsls	r2, r2, #15
 800076a:	4591      	cmp	r9, r2
 800076c:	d3ed      	bcc.n	800074a <__aeabi_fadd+0x2b2>
 800076e:	4594      	cmp	ip, r2
 8000770:	d2eb      	bcs.n	800074a <__aeabi_fadd+0x2b2>
 8000772:	000c      	movs	r4, r1
 8000774:	0033      	movs	r3, r6
 8000776:	e7e8      	b.n	800074a <__aeabi_fadd+0x2b2>
 8000778:	0033      	movs	r3, r6
 800077a:	e77f      	b.n	800067c <__aeabi_fadd+0x1e4>
 800077c:	199b      	adds	r3, r3, r6
 800077e:	2200      	movs	r2, #0
 8000780:	0159      	lsls	r1, r3, #5
 8000782:	d5b9      	bpl.n	80006f8 <__aeabi_fadd+0x260>
 8000784:	4a07      	ldr	r2, [pc, #28]	@ (80007a4 <__aeabi_fadd+0x30c>)
 8000786:	4013      	ands	r3, r2
 8000788:	08db      	lsrs	r3, r3, #3
 800078a:	2201      	movs	r2, #1
 800078c:	e778      	b.n	8000680 <__aeabi_fadd+0x1e8>
 800078e:	199b      	adds	r3, r3, r6
 8000790:	3201      	adds	r2, #1
 8000792:	3501      	adds	r5, #1
 8000794:	0159      	lsls	r1, r3, #5
 8000796:	d49a      	bmi.n	80006ce <__aeabi_fadd+0x236>
 8000798:	e6da      	b.n	8000550 <__aeabi_fadd+0xb8>
 800079a:	1e03      	subs	r3, r0, #0
 800079c:	d08d      	beq.n	80006ba <__aeabi_fadd+0x222>
 800079e:	08db      	lsrs	r3, r3, #3
 80007a0:	e76e      	b.n	8000680 <__aeabi_fadd+0x1e8>
 80007a2:	46c0      	nop			@ (mov r8, r8)
 80007a4:	fbffffff 	.word	0xfbffffff
 80007a8:	7dffffff 	.word	0x7dffffff

080007ac <__aeabi_fdiv>:
 80007ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ae:	464f      	mov	r7, r9
 80007b0:	4646      	mov	r6, r8
 80007b2:	46d6      	mov	lr, sl
 80007b4:	0244      	lsls	r4, r0, #9
 80007b6:	b5c0      	push	{r6, r7, lr}
 80007b8:	0047      	lsls	r7, r0, #1
 80007ba:	1c0e      	adds	r6, r1, #0
 80007bc:	0a64      	lsrs	r4, r4, #9
 80007be:	0e3f      	lsrs	r7, r7, #24
 80007c0:	0fc5      	lsrs	r5, r0, #31
 80007c2:	2f00      	cmp	r7, #0
 80007c4:	d03c      	beq.n	8000840 <__aeabi_fdiv+0x94>
 80007c6:	2fff      	cmp	r7, #255	@ 0xff
 80007c8:	d042      	beq.n	8000850 <__aeabi_fdiv+0xa4>
 80007ca:	2300      	movs	r3, #0
 80007cc:	2280      	movs	r2, #128	@ 0x80
 80007ce:	4699      	mov	r9, r3
 80007d0:	469a      	mov	sl, r3
 80007d2:	00e4      	lsls	r4, r4, #3
 80007d4:	04d2      	lsls	r2, r2, #19
 80007d6:	4314      	orrs	r4, r2
 80007d8:	3f7f      	subs	r7, #127	@ 0x7f
 80007da:	0273      	lsls	r3, r6, #9
 80007dc:	0a5b      	lsrs	r3, r3, #9
 80007de:	4698      	mov	r8, r3
 80007e0:	0073      	lsls	r3, r6, #1
 80007e2:	0e1b      	lsrs	r3, r3, #24
 80007e4:	0ff6      	lsrs	r6, r6, #31
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d01b      	beq.n	8000822 <__aeabi_fdiv+0x76>
 80007ea:	2bff      	cmp	r3, #255	@ 0xff
 80007ec:	d013      	beq.n	8000816 <__aeabi_fdiv+0x6a>
 80007ee:	4642      	mov	r2, r8
 80007f0:	2180      	movs	r1, #128	@ 0x80
 80007f2:	00d2      	lsls	r2, r2, #3
 80007f4:	04c9      	lsls	r1, r1, #19
 80007f6:	4311      	orrs	r1, r2
 80007f8:	4688      	mov	r8, r1
 80007fa:	2000      	movs	r0, #0
 80007fc:	3b7f      	subs	r3, #127	@ 0x7f
 80007fe:	0029      	movs	r1, r5
 8000800:	1aff      	subs	r7, r7, r3
 8000802:	464b      	mov	r3, r9
 8000804:	4071      	eors	r1, r6
 8000806:	b2c9      	uxtb	r1, r1
 8000808:	2b0f      	cmp	r3, #15
 800080a:	d900      	bls.n	800080e <__aeabi_fdiv+0x62>
 800080c:	e0b5      	b.n	800097a <__aeabi_fdiv+0x1ce>
 800080e:	4a74      	ldr	r2, [pc, #464]	@ (80009e0 <__aeabi_fdiv+0x234>)
 8000810:	009b      	lsls	r3, r3, #2
 8000812:	58d3      	ldr	r3, [r2, r3]
 8000814:	469f      	mov	pc, r3
 8000816:	4643      	mov	r3, r8
 8000818:	2b00      	cmp	r3, #0
 800081a:	d13f      	bne.n	800089c <__aeabi_fdiv+0xf0>
 800081c:	3fff      	subs	r7, #255	@ 0xff
 800081e:	3302      	adds	r3, #2
 8000820:	e003      	b.n	800082a <__aeabi_fdiv+0x7e>
 8000822:	4643      	mov	r3, r8
 8000824:	2b00      	cmp	r3, #0
 8000826:	d12d      	bne.n	8000884 <__aeabi_fdiv+0xd8>
 8000828:	2301      	movs	r3, #1
 800082a:	0029      	movs	r1, r5
 800082c:	464a      	mov	r2, r9
 800082e:	4071      	eors	r1, r6
 8000830:	b2c9      	uxtb	r1, r1
 8000832:	431a      	orrs	r2, r3
 8000834:	2a0e      	cmp	r2, #14
 8000836:	d838      	bhi.n	80008aa <__aeabi_fdiv+0xfe>
 8000838:	486a      	ldr	r0, [pc, #424]	@ (80009e4 <__aeabi_fdiv+0x238>)
 800083a:	0092      	lsls	r2, r2, #2
 800083c:	5882      	ldr	r2, [r0, r2]
 800083e:	4697      	mov	pc, r2
 8000840:	2c00      	cmp	r4, #0
 8000842:	d113      	bne.n	800086c <__aeabi_fdiv+0xc0>
 8000844:	2304      	movs	r3, #4
 8000846:	4699      	mov	r9, r3
 8000848:	3b03      	subs	r3, #3
 800084a:	2700      	movs	r7, #0
 800084c:	469a      	mov	sl, r3
 800084e:	e7c4      	b.n	80007da <__aeabi_fdiv+0x2e>
 8000850:	2c00      	cmp	r4, #0
 8000852:	d105      	bne.n	8000860 <__aeabi_fdiv+0xb4>
 8000854:	2308      	movs	r3, #8
 8000856:	4699      	mov	r9, r3
 8000858:	3b06      	subs	r3, #6
 800085a:	27ff      	movs	r7, #255	@ 0xff
 800085c:	469a      	mov	sl, r3
 800085e:	e7bc      	b.n	80007da <__aeabi_fdiv+0x2e>
 8000860:	230c      	movs	r3, #12
 8000862:	4699      	mov	r9, r3
 8000864:	3b09      	subs	r3, #9
 8000866:	27ff      	movs	r7, #255	@ 0xff
 8000868:	469a      	mov	sl, r3
 800086a:	e7b6      	b.n	80007da <__aeabi_fdiv+0x2e>
 800086c:	0020      	movs	r0, r4
 800086e:	f000 fcc7 	bl	8001200 <__clzsi2>
 8000872:	2776      	movs	r7, #118	@ 0x76
 8000874:	1f43      	subs	r3, r0, #5
 8000876:	409c      	lsls	r4, r3
 8000878:	2300      	movs	r3, #0
 800087a:	427f      	negs	r7, r7
 800087c:	4699      	mov	r9, r3
 800087e:	469a      	mov	sl, r3
 8000880:	1a3f      	subs	r7, r7, r0
 8000882:	e7aa      	b.n	80007da <__aeabi_fdiv+0x2e>
 8000884:	4640      	mov	r0, r8
 8000886:	f000 fcbb 	bl	8001200 <__clzsi2>
 800088a:	4642      	mov	r2, r8
 800088c:	1f43      	subs	r3, r0, #5
 800088e:	409a      	lsls	r2, r3
 8000890:	2376      	movs	r3, #118	@ 0x76
 8000892:	425b      	negs	r3, r3
 8000894:	1a1b      	subs	r3, r3, r0
 8000896:	4690      	mov	r8, r2
 8000898:	2000      	movs	r0, #0
 800089a:	e7b0      	b.n	80007fe <__aeabi_fdiv+0x52>
 800089c:	2303      	movs	r3, #3
 800089e:	464a      	mov	r2, r9
 80008a0:	431a      	orrs	r2, r3
 80008a2:	4691      	mov	r9, r2
 80008a4:	2003      	movs	r0, #3
 80008a6:	33fc      	adds	r3, #252	@ 0xfc
 80008a8:	e7a9      	b.n	80007fe <__aeabi_fdiv+0x52>
 80008aa:	000d      	movs	r5, r1
 80008ac:	20ff      	movs	r0, #255	@ 0xff
 80008ae:	2200      	movs	r2, #0
 80008b0:	05c0      	lsls	r0, r0, #23
 80008b2:	07ed      	lsls	r5, r5, #31
 80008b4:	4310      	orrs	r0, r2
 80008b6:	4328      	orrs	r0, r5
 80008b8:	bce0      	pop	{r5, r6, r7}
 80008ba:	46ba      	mov	sl, r7
 80008bc:	46b1      	mov	r9, r6
 80008be:	46a8      	mov	r8, r5
 80008c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008c2:	000d      	movs	r5, r1
 80008c4:	2000      	movs	r0, #0
 80008c6:	2200      	movs	r2, #0
 80008c8:	e7f2      	b.n	80008b0 <__aeabi_fdiv+0x104>
 80008ca:	4653      	mov	r3, sl
 80008cc:	2b02      	cmp	r3, #2
 80008ce:	d0ed      	beq.n	80008ac <__aeabi_fdiv+0x100>
 80008d0:	2b03      	cmp	r3, #3
 80008d2:	d033      	beq.n	800093c <__aeabi_fdiv+0x190>
 80008d4:	46a0      	mov	r8, r4
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d105      	bne.n	80008e6 <__aeabi_fdiv+0x13a>
 80008da:	2000      	movs	r0, #0
 80008dc:	2200      	movs	r2, #0
 80008de:	e7e7      	b.n	80008b0 <__aeabi_fdiv+0x104>
 80008e0:	0035      	movs	r5, r6
 80008e2:	2803      	cmp	r0, #3
 80008e4:	d07a      	beq.n	80009dc <__aeabi_fdiv+0x230>
 80008e6:	003b      	movs	r3, r7
 80008e8:	337f      	adds	r3, #127	@ 0x7f
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	dd2d      	ble.n	800094a <__aeabi_fdiv+0x19e>
 80008ee:	4642      	mov	r2, r8
 80008f0:	0752      	lsls	r2, r2, #29
 80008f2:	d007      	beq.n	8000904 <__aeabi_fdiv+0x158>
 80008f4:	220f      	movs	r2, #15
 80008f6:	4641      	mov	r1, r8
 80008f8:	400a      	ands	r2, r1
 80008fa:	2a04      	cmp	r2, #4
 80008fc:	d002      	beq.n	8000904 <__aeabi_fdiv+0x158>
 80008fe:	2204      	movs	r2, #4
 8000900:	4694      	mov	ip, r2
 8000902:	44e0      	add	r8, ip
 8000904:	4642      	mov	r2, r8
 8000906:	0112      	lsls	r2, r2, #4
 8000908:	d505      	bpl.n	8000916 <__aeabi_fdiv+0x16a>
 800090a:	4642      	mov	r2, r8
 800090c:	4b36      	ldr	r3, [pc, #216]	@ (80009e8 <__aeabi_fdiv+0x23c>)
 800090e:	401a      	ands	r2, r3
 8000910:	003b      	movs	r3, r7
 8000912:	4690      	mov	r8, r2
 8000914:	3380      	adds	r3, #128	@ 0x80
 8000916:	2bfe      	cmp	r3, #254	@ 0xfe
 8000918:	dcc8      	bgt.n	80008ac <__aeabi_fdiv+0x100>
 800091a:	4642      	mov	r2, r8
 800091c:	0192      	lsls	r2, r2, #6
 800091e:	0a52      	lsrs	r2, r2, #9
 8000920:	b2d8      	uxtb	r0, r3
 8000922:	e7c5      	b.n	80008b0 <__aeabi_fdiv+0x104>
 8000924:	2280      	movs	r2, #128	@ 0x80
 8000926:	2500      	movs	r5, #0
 8000928:	20ff      	movs	r0, #255	@ 0xff
 800092a:	03d2      	lsls	r2, r2, #15
 800092c:	e7c0      	b.n	80008b0 <__aeabi_fdiv+0x104>
 800092e:	2280      	movs	r2, #128	@ 0x80
 8000930:	03d2      	lsls	r2, r2, #15
 8000932:	4214      	tst	r4, r2
 8000934:	d002      	beq.n	800093c <__aeabi_fdiv+0x190>
 8000936:	4643      	mov	r3, r8
 8000938:	4213      	tst	r3, r2
 800093a:	d049      	beq.n	80009d0 <__aeabi_fdiv+0x224>
 800093c:	2280      	movs	r2, #128	@ 0x80
 800093e:	03d2      	lsls	r2, r2, #15
 8000940:	4322      	orrs	r2, r4
 8000942:	0252      	lsls	r2, r2, #9
 8000944:	20ff      	movs	r0, #255	@ 0xff
 8000946:	0a52      	lsrs	r2, r2, #9
 8000948:	e7b2      	b.n	80008b0 <__aeabi_fdiv+0x104>
 800094a:	2201      	movs	r2, #1
 800094c:	1ad3      	subs	r3, r2, r3
 800094e:	2b1b      	cmp	r3, #27
 8000950:	dcc3      	bgt.n	80008da <__aeabi_fdiv+0x12e>
 8000952:	4642      	mov	r2, r8
 8000954:	40da      	lsrs	r2, r3
 8000956:	4643      	mov	r3, r8
 8000958:	379e      	adds	r7, #158	@ 0x9e
 800095a:	40bb      	lsls	r3, r7
 800095c:	1e59      	subs	r1, r3, #1
 800095e:	418b      	sbcs	r3, r1
 8000960:	431a      	orrs	r2, r3
 8000962:	0753      	lsls	r3, r2, #29
 8000964:	d004      	beq.n	8000970 <__aeabi_fdiv+0x1c4>
 8000966:	230f      	movs	r3, #15
 8000968:	4013      	ands	r3, r2
 800096a:	2b04      	cmp	r3, #4
 800096c:	d000      	beq.n	8000970 <__aeabi_fdiv+0x1c4>
 800096e:	3204      	adds	r2, #4
 8000970:	0153      	lsls	r3, r2, #5
 8000972:	d529      	bpl.n	80009c8 <__aeabi_fdiv+0x21c>
 8000974:	2001      	movs	r0, #1
 8000976:	2200      	movs	r2, #0
 8000978:	e79a      	b.n	80008b0 <__aeabi_fdiv+0x104>
 800097a:	4642      	mov	r2, r8
 800097c:	0163      	lsls	r3, r4, #5
 800097e:	0155      	lsls	r5, r2, #5
 8000980:	42ab      	cmp	r3, r5
 8000982:	d215      	bcs.n	80009b0 <__aeabi_fdiv+0x204>
 8000984:	201b      	movs	r0, #27
 8000986:	2200      	movs	r2, #0
 8000988:	3f01      	subs	r7, #1
 800098a:	2601      	movs	r6, #1
 800098c:	001c      	movs	r4, r3
 800098e:	0052      	lsls	r2, r2, #1
 8000990:	005b      	lsls	r3, r3, #1
 8000992:	2c00      	cmp	r4, #0
 8000994:	db01      	blt.n	800099a <__aeabi_fdiv+0x1ee>
 8000996:	429d      	cmp	r5, r3
 8000998:	d801      	bhi.n	800099e <__aeabi_fdiv+0x1f2>
 800099a:	1b5b      	subs	r3, r3, r5
 800099c:	4332      	orrs	r2, r6
 800099e:	3801      	subs	r0, #1
 80009a0:	2800      	cmp	r0, #0
 80009a2:	d1f3      	bne.n	800098c <__aeabi_fdiv+0x1e0>
 80009a4:	1e58      	subs	r0, r3, #1
 80009a6:	4183      	sbcs	r3, r0
 80009a8:	4313      	orrs	r3, r2
 80009aa:	4698      	mov	r8, r3
 80009ac:	000d      	movs	r5, r1
 80009ae:	e79a      	b.n	80008e6 <__aeabi_fdiv+0x13a>
 80009b0:	201a      	movs	r0, #26
 80009b2:	2201      	movs	r2, #1
 80009b4:	1b5b      	subs	r3, r3, r5
 80009b6:	e7e8      	b.n	800098a <__aeabi_fdiv+0x1de>
 80009b8:	3b02      	subs	r3, #2
 80009ba:	425a      	negs	r2, r3
 80009bc:	4153      	adcs	r3, r2
 80009be:	425b      	negs	r3, r3
 80009c0:	0035      	movs	r5, r6
 80009c2:	2200      	movs	r2, #0
 80009c4:	b2d8      	uxtb	r0, r3
 80009c6:	e773      	b.n	80008b0 <__aeabi_fdiv+0x104>
 80009c8:	0192      	lsls	r2, r2, #6
 80009ca:	2000      	movs	r0, #0
 80009cc:	0a52      	lsrs	r2, r2, #9
 80009ce:	e76f      	b.n	80008b0 <__aeabi_fdiv+0x104>
 80009d0:	431a      	orrs	r2, r3
 80009d2:	0252      	lsls	r2, r2, #9
 80009d4:	0035      	movs	r5, r6
 80009d6:	20ff      	movs	r0, #255	@ 0xff
 80009d8:	0a52      	lsrs	r2, r2, #9
 80009da:	e769      	b.n	80008b0 <__aeabi_fdiv+0x104>
 80009dc:	4644      	mov	r4, r8
 80009de:	e7ad      	b.n	800093c <__aeabi_fdiv+0x190>
 80009e0:	0800d240 	.word	0x0800d240
 80009e4:	0800d280 	.word	0x0800d280
 80009e8:	f7ffffff 	.word	0xf7ffffff

080009ec <__eqsf2>:
 80009ec:	b570      	push	{r4, r5, r6, lr}
 80009ee:	0042      	lsls	r2, r0, #1
 80009f0:	024e      	lsls	r6, r1, #9
 80009f2:	004c      	lsls	r4, r1, #1
 80009f4:	0245      	lsls	r5, r0, #9
 80009f6:	0a6d      	lsrs	r5, r5, #9
 80009f8:	0e12      	lsrs	r2, r2, #24
 80009fa:	0fc3      	lsrs	r3, r0, #31
 80009fc:	0a76      	lsrs	r6, r6, #9
 80009fe:	0e24      	lsrs	r4, r4, #24
 8000a00:	0fc9      	lsrs	r1, r1, #31
 8000a02:	2aff      	cmp	r2, #255	@ 0xff
 8000a04:	d010      	beq.n	8000a28 <__eqsf2+0x3c>
 8000a06:	2cff      	cmp	r4, #255	@ 0xff
 8000a08:	d00c      	beq.n	8000a24 <__eqsf2+0x38>
 8000a0a:	2001      	movs	r0, #1
 8000a0c:	42a2      	cmp	r2, r4
 8000a0e:	d10a      	bne.n	8000a26 <__eqsf2+0x3a>
 8000a10:	42b5      	cmp	r5, r6
 8000a12:	d108      	bne.n	8000a26 <__eqsf2+0x3a>
 8000a14:	428b      	cmp	r3, r1
 8000a16:	d00f      	beq.n	8000a38 <__eqsf2+0x4c>
 8000a18:	2a00      	cmp	r2, #0
 8000a1a:	d104      	bne.n	8000a26 <__eqsf2+0x3a>
 8000a1c:	0028      	movs	r0, r5
 8000a1e:	1e43      	subs	r3, r0, #1
 8000a20:	4198      	sbcs	r0, r3
 8000a22:	e000      	b.n	8000a26 <__eqsf2+0x3a>
 8000a24:	2001      	movs	r0, #1
 8000a26:	bd70      	pop	{r4, r5, r6, pc}
 8000a28:	2001      	movs	r0, #1
 8000a2a:	2cff      	cmp	r4, #255	@ 0xff
 8000a2c:	d1fb      	bne.n	8000a26 <__eqsf2+0x3a>
 8000a2e:	4335      	orrs	r5, r6
 8000a30:	d1f9      	bne.n	8000a26 <__eqsf2+0x3a>
 8000a32:	404b      	eors	r3, r1
 8000a34:	0018      	movs	r0, r3
 8000a36:	e7f6      	b.n	8000a26 <__eqsf2+0x3a>
 8000a38:	2000      	movs	r0, #0
 8000a3a:	e7f4      	b.n	8000a26 <__eqsf2+0x3a>

08000a3c <__gesf2>:
 8000a3c:	b530      	push	{r4, r5, lr}
 8000a3e:	0042      	lsls	r2, r0, #1
 8000a40:	0244      	lsls	r4, r0, #9
 8000a42:	024d      	lsls	r5, r1, #9
 8000a44:	0fc3      	lsrs	r3, r0, #31
 8000a46:	0048      	lsls	r0, r1, #1
 8000a48:	0a64      	lsrs	r4, r4, #9
 8000a4a:	0e12      	lsrs	r2, r2, #24
 8000a4c:	0a6d      	lsrs	r5, r5, #9
 8000a4e:	0e00      	lsrs	r0, r0, #24
 8000a50:	0fc9      	lsrs	r1, r1, #31
 8000a52:	2aff      	cmp	r2, #255	@ 0xff
 8000a54:	d019      	beq.n	8000a8a <__gesf2+0x4e>
 8000a56:	28ff      	cmp	r0, #255	@ 0xff
 8000a58:	d00b      	beq.n	8000a72 <__gesf2+0x36>
 8000a5a:	2a00      	cmp	r2, #0
 8000a5c:	d11e      	bne.n	8000a9c <__gesf2+0x60>
 8000a5e:	2800      	cmp	r0, #0
 8000a60:	d10b      	bne.n	8000a7a <__gesf2+0x3e>
 8000a62:	2d00      	cmp	r5, #0
 8000a64:	d027      	beq.n	8000ab6 <__gesf2+0x7a>
 8000a66:	2c00      	cmp	r4, #0
 8000a68:	d134      	bne.n	8000ad4 <__gesf2+0x98>
 8000a6a:	2900      	cmp	r1, #0
 8000a6c:	d02f      	beq.n	8000ace <__gesf2+0x92>
 8000a6e:	0008      	movs	r0, r1
 8000a70:	bd30      	pop	{r4, r5, pc}
 8000a72:	2d00      	cmp	r5, #0
 8000a74:	d128      	bne.n	8000ac8 <__gesf2+0x8c>
 8000a76:	2a00      	cmp	r2, #0
 8000a78:	d101      	bne.n	8000a7e <__gesf2+0x42>
 8000a7a:	2c00      	cmp	r4, #0
 8000a7c:	d0f5      	beq.n	8000a6a <__gesf2+0x2e>
 8000a7e:	428b      	cmp	r3, r1
 8000a80:	d107      	bne.n	8000a92 <__gesf2+0x56>
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d023      	beq.n	8000ace <__gesf2+0x92>
 8000a86:	0018      	movs	r0, r3
 8000a88:	e7f2      	b.n	8000a70 <__gesf2+0x34>
 8000a8a:	2c00      	cmp	r4, #0
 8000a8c:	d11c      	bne.n	8000ac8 <__gesf2+0x8c>
 8000a8e:	28ff      	cmp	r0, #255	@ 0xff
 8000a90:	d014      	beq.n	8000abc <__gesf2+0x80>
 8000a92:	1e58      	subs	r0, r3, #1
 8000a94:	2302      	movs	r3, #2
 8000a96:	4018      	ands	r0, r3
 8000a98:	3801      	subs	r0, #1
 8000a9a:	e7e9      	b.n	8000a70 <__gesf2+0x34>
 8000a9c:	2800      	cmp	r0, #0
 8000a9e:	d0f8      	beq.n	8000a92 <__gesf2+0x56>
 8000aa0:	428b      	cmp	r3, r1
 8000aa2:	d1f6      	bne.n	8000a92 <__gesf2+0x56>
 8000aa4:	4282      	cmp	r2, r0
 8000aa6:	dcf4      	bgt.n	8000a92 <__gesf2+0x56>
 8000aa8:	dbeb      	blt.n	8000a82 <__gesf2+0x46>
 8000aaa:	42ac      	cmp	r4, r5
 8000aac:	d8f1      	bhi.n	8000a92 <__gesf2+0x56>
 8000aae:	2000      	movs	r0, #0
 8000ab0:	42ac      	cmp	r4, r5
 8000ab2:	d2dd      	bcs.n	8000a70 <__gesf2+0x34>
 8000ab4:	e7e5      	b.n	8000a82 <__gesf2+0x46>
 8000ab6:	2c00      	cmp	r4, #0
 8000ab8:	d0da      	beq.n	8000a70 <__gesf2+0x34>
 8000aba:	e7ea      	b.n	8000a92 <__gesf2+0x56>
 8000abc:	2d00      	cmp	r5, #0
 8000abe:	d103      	bne.n	8000ac8 <__gesf2+0x8c>
 8000ac0:	428b      	cmp	r3, r1
 8000ac2:	d1e6      	bne.n	8000a92 <__gesf2+0x56>
 8000ac4:	2000      	movs	r0, #0
 8000ac6:	e7d3      	b.n	8000a70 <__gesf2+0x34>
 8000ac8:	2002      	movs	r0, #2
 8000aca:	4240      	negs	r0, r0
 8000acc:	e7d0      	b.n	8000a70 <__gesf2+0x34>
 8000ace:	2001      	movs	r0, #1
 8000ad0:	4240      	negs	r0, r0
 8000ad2:	e7cd      	b.n	8000a70 <__gesf2+0x34>
 8000ad4:	428b      	cmp	r3, r1
 8000ad6:	d0e8      	beq.n	8000aaa <__gesf2+0x6e>
 8000ad8:	e7db      	b.n	8000a92 <__gesf2+0x56>
 8000ada:	46c0      	nop			@ (mov r8, r8)

08000adc <__lesf2>:
 8000adc:	b530      	push	{r4, r5, lr}
 8000ade:	0042      	lsls	r2, r0, #1
 8000ae0:	0244      	lsls	r4, r0, #9
 8000ae2:	024d      	lsls	r5, r1, #9
 8000ae4:	0fc3      	lsrs	r3, r0, #31
 8000ae6:	0048      	lsls	r0, r1, #1
 8000ae8:	0a64      	lsrs	r4, r4, #9
 8000aea:	0e12      	lsrs	r2, r2, #24
 8000aec:	0a6d      	lsrs	r5, r5, #9
 8000aee:	0e00      	lsrs	r0, r0, #24
 8000af0:	0fc9      	lsrs	r1, r1, #31
 8000af2:	2aff      	cmp	r2, #255	@ 0xff
 8000af4:	d01a      	beq.n	8000b2c <__lesf2+0x50>
 8000af6:	28ff      	cmp	r0, #255	@ 0xff
 8000af8:	d00e      	beq.n	8000b18 <__lesf2+0x3c>
 8000afa:	2a00      	cmp	r2, #0
 8000afc:	d11e      	bne.n	8000b3c <__lesf2+0x60>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	d10e      	bne.n	8000b20 <__lesf2+0x44>
 8000b02:	2d00      	cmp	r5, #0
 8000b04:	d02a      	beq.n	8000b5c <__lesf2+0x80>
 8000b06:	2c00      	cmp	r4, #0
 8000b08:	d00c      	beq.n	8000b24 <__lesf2+0x48>
 8000b0a:	428b      	cmp	r3, r1
 8000b0c:	d01d      	beq.n	8000b4a <__lesf2+0x6e>
 8000b0e:	1e58      	subs	r0, r3, #1
 8000b10:	2302      	movs	r3, #2
 8000b12:	4018      	ands	r0, r3
 8000b14:	3801      	subs	r0, #1
 8000b16:	e010      	b.n	8000b3a <__lesf2+0x5e>
 8000b18:	2d00      	cmp	r5, #0
 8000b1a:	d10d      	bne.n	8000b38 <__lesf2+0x5c>
 8000b1c:	2a00      	cmp	r2, #0
 8000b1e:	d120      	bne.n	8000b62 <__lesf2+0x86>
 8000b20:	2c00      	cmp	r4, #0
 8000b22:	d11e      	bne.n	8000b62 <__lesf2+0x86>
 8000b24:	2900      	cmp	r1, #0
 8000b26:	d023      	beq.n	8000b70 <__lesf2+0x94>
 8000b28:	0008      	movs	r0, r1
 8000b2a:	e006      	b.n	8000b3a <__lesf2+0x5e>
 8000b2c:	2c00      	cmp	r4, #0
 8000b2e:	d103      	bne.n	8000b38 <__lesf2+0x5c>
 8000b30:	28ff      	cmp	r0, #255	@ 0xff
 8000b32:	d1ec      	bne.n	8000b0e <__lesf2+0x32>
 8000b34:	2d00      	cmp	r5, #0
 8000b36:	d017      	beq.n	8000b68 <__lesf2+0x8c>
 8000b38:	2002      	movs	r0, #2
 8000b3a:	bd30      	pop	{r4, r5, pc}
 8000b3c:	2800      	cmp	r0, #0
 8000b3e:	d0e6      	beq.n	8000b0e <__lesf2+0x32>
 8000b40:	428b      	cmp	r3, r1
 8000b42:	d1e4      	bne.n	8000b0e <__lesf2+0x32>
 8000b44:	4282      	cmp	r2, r0
 8000b46:	dce2      	bgt.n	8000b0e <__lesf2+0x32>
 8000b48:	db04      	blt.n	8000b54 <__lesf2+0x78>
 8000b4a:	42ac      	cmp	r4, r5
 8000b4c:	d8df      	bhi.n	8000b0e <__lesf2+0x32>
 8000b4e:	2000      	movs	r0, #0
 8000b50:	42ac      	cmp	r4, r5
 8000b52:	d2f2      	bcs.n	8000b3a <__lesf2+0x5e>
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d00b      	beq.n	8000b70 <__lesf2+0x94>
 8000b58:	0018      	movs	r0, r3
 8000b5a:	e7ee      	b.n	8000b3a <__lesf2+0x5e>
 8000b5c:	2c00      	cmp	r4, #0
 8000b5e:	d0ec      	beq.n	8000b3a <__lesf2+0x5e>
 8000b60:	e7d5      	b.n	8000b0e <__lesf2+0x32>
 8000b62:	428b      	cmp	r3, r1
 8000b64:	d1d3      	bne.n	8000b0e <__lesf2+0x32>
 8000b66:	e7f5      	b.n	8000b54 <__lesf2+0x78>
 8000b68:	2000      	movs	r0, #0
 8000b6a:	428b      	cmp	r3, r1
 8000b6c:	d0e5      	beq.n	8000b3a <__lesf2+0x5e>
 8000b6e:	e7ce      	b.n	8000b0e <__lesf2+0x32>
 8000b70:	2001      	movs	r0, #1
 8000b72:	4240      	negs	r0, r0
 8000b74:	e7e1      	b.n	8000b3a <__lesf2+0x5e>
 8000b76:	46c0      	nop			@ (mov r8, r8)

08000b78 <__aeabi_fmul>:
 8000b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b7a:	464f      	mov	r7, r9
 8000b7c:	4646      	mov	r6, r8
 8000b7e:	46d6      	mov	lr, sl
 8000b80:	0243      	lsls	r3, r0, #9
 8000b82:	0a5b      	lsrs	r3, r3, #9
 8000b84:	0045      	lsls	r5, r0, #1
 8000b86:	b5c0      	push	{r6, r7, lr}
 8000b88:	4699      	mov	r9, r3
 8000b8a:	1c0f      	adds	r7, r1, #0
 8000b8c:	0e2d      	lsrs	r5, r5, #24
 8000b8e:	0fc6      	lsrs	r6, r0, #31
 8000b90:	2d00      	cmp	r5, #0
 8000b92:	d100      	bne.n	8000b96 <__aeabi_fmul+0x1e>
 8000b94:	e088      	b.n	8000ca8 <__aeabi_fmul+0x130>
 8000b96:	2dff      	cmp	r5, #255	@ 0xff
 8000b98:	d100      	bne.n	8000b9c <__aeabi_fmul+0x24>
 8000b9a:	e08d      	b.n	8000cb8 <__aeabi_fmul+0x140>
 8000b9c:	2280      	movs	r2, #128	@ 0x80
 8000b9e:	00db      	lsls	r3, r3, #3
 8000ba0:	04d2      	lsls	r2, r2, #19
 8000ba2:	431a      	orrs	r2, r3
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	4691      	mov	r9, r2
 8000ba8:	4698      	mov	r8, r3
 8000baa:	469a      	mov	sl, r3
 8000bac:	3d7f      	subs	r5, #127	@ 0x7f
 8000bae:	027c      	lsls	r4, r7, #9
 8000bb0:	007b      	lsls	r3, r7, #1
 8000bb2:	0a64      	lsrs	r4, r4, #9
 8000bb4:	0e1b      	lsrs	r3, r3, #24
 8000bb6:	0fff      	lsrs	r7, r7, #31
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d068      	beq.n	8000c8e <__aeabi_fmul+0x116>
 8000bbc:	2bff      	cmp	r3, #255	@ 0xff
 8000bbe:	d021      	beq.n	8000c04 <__aeabi_fmul+0x8c>
 8000bc0:	2280      	movs	r2, #128	@ 0x80
 8000bc2:	00e4      	lsls	r4, r4, #3
 8000bc4:	04d2      	lsls	r2, r2, #19
 8000bc6:	4314      	orrs	r4, r2
 8000bc8:	4642      	mov	r2, r8
 8000bca:	3b7f      	subs	r3, #127	@ 0x7f
 8000bcc:	195b      	adds	r3, r3, r5
 8000bce:	2100      	movs	r1, #0
 8000bd0:	1c5d      	adds	r5, r3, #1
 8000bd2:	2a0a      	cmp	r2, #10
 8000bd4:	dc2e      	bgt.n	8000c34 <__aeabi_fmul+0xbc>
 8000bd6:	407e      	eors	r6, r7
 8000bd8:	4642      	mov	r2, r8
 8000bda:	2a02      	cmp	r2, #2
 8000bdc:	dc23      	bgt.n	8000c26 <__aeabi_fmul+0xae>
 8000bde:	3a01      	subs	r2, #1
 8000be0:	2a01      	cmp	r2, #1
 8000be2:	d900      	bls.n	8000be6 <__aeabi_fmul+0x6e>
 8000be4:	e0bd      	b.n	8000d62 <__aeabi_fmul+0x1ea>
 8000be6:	2902      	cmp	r1, #2
 8000be8:	d06e      	beq.n	8000cc8 <__aeabi_fmul+0x150>
 8000bea:	2901      	cmp	r1, #1
 8000bec:	d12c      	bne.n	8000c48 <__aeabi_fmul+0xd0>
 8000bee:	2000      	movs	r0, #0
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	05c0      	lsls	r0, r0, #23
 8000bf4:	07f6      	lsls	r6, r6, #31
 8000bf6:	4310      	orrs	r0, r2
 8000bf8:	4330      	orrs	r0, r6
 8000bfa:	bce0      	pop	{r5, r6, r7}
 8000bfc:	46ba      	mov	sl, r7
 8000bfe:	46b1      	mov	r9, r6
 8000c00:	46a8      	mov	r8, r5
 8000c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c04:	002b      	movs	r3, r5
 8000c06:	33ff      	adds	r3, #255	@ 0xff
 8000c08:	2c00      	cmp	r4, #0
 8000c0a:	d065      	beq.n	8000cd8 <__aeabi_fmul+0x160>
 8000c0c:	2203      	movs	r2, #3
 8000c0e:	4641      	mov	r1, r8
 8000c10:	4311      	orrs	r1, r2
 8000c12:	0032      	movs	r2, r6
 8000c14:	3501      	adds	r5, #1
 8000c16:	4688      	mov	r8, r1
 8000c18:	407a      	eors	r2, r7
 8000c1a:	35ff      	adds	r5, #255	@ 0xff
 8000c1c:	290a      	cmp	r1, #10
 8000c1e:	dd00      	ble.n	8000c22 <__aeabi_fmul+0xaa>
 8000c20:	e0d8      	b.n	8000dd4 <__aeabi_fmul+0x25c>
 8000c22:	0016      	movs	r6, r2
 8000c24:	2103      	movs	r1, #3
 8000c26:	4640      	mov	r0, r8
 8000c28:	2201      	movs	r2, #1
 8000c2a:	4082      	lsls	r2, r0
 8000c2c:	20a6      	movs	r0, #166	@ 0xa6
 8000c2e:	00c0      	lsls	r0, r0, #3
 8000c30:	4202      	tst	r2, r0
 8000c32:	d020      	beq.n	8000c76 <__aeabi_fmul+0xfe>
 8000c34:	4653      	mov	r3, sl
 8000c36:	2b02      	cmp	r3, #2
 8000c38:	d046      	beq.n	8000cc8 <__aeabi_fmul+0x150>
 8000c3a:	2b03      	cmp	r3, #3
 8000c3c:	d100      	bne.n	8000c40 <__aeabi_fmul+0xc8>
 8000c3e:	e0bb      	b.n	8000db8 <__aeabi_fmul+0x240>
 8000c40:	4651      	mov	r1, sl
 8000c42:	464c      	mov	r4, r9
 8000c44:	2901      	cmp	r1, #1
 8000c46:	d0d2      	beq.n	8000bee <__aeabi_fmul+0x76>
 8000c48:	002b      	movs	r3, r5
 8000c4a:	337f      	adds	r3, #127	@ 0x7f
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	dd70      	ble.n	8000d32 <__aeabi_fmul+0x1ba>
 8000c50:	0762      	lsls	r2, r4, #29
 8000c52:	d004      	beq.n	8000c5e <__aeabi_fmul+0xe6>
 8000c54:	220f      	movs	r2, #15
 8000c56:	4022      	ands	r2, r4
 8000c58:	2a04      	cmp	r2, #4
 8000c5a:	d000      	beq.n	8000c5e <__aeabi_fmul+0xe6>
 8000c5c:	3404      	adds	r4, #4
 8000c5e:	0122      	lsls	r2, r4, #4
 8000c60:	d503      	bpl.n	8000c6a <__aeabi_fmul+0xf2>
 8000c62:	4b63      	ldr	r3, [pc, #396]	@ (8000df0 <__aeabi_fmul+0x278>)
 8000c64:	401c      	ands	r4, r3
 8000c66:	002b      	movs	r3, r5
 8000c68:	3380      	adds	r3, #128	@ 0x80
 8000c6a:	2bfe      	cmp	r3, #254	@ 0xfe
 8000c6c:	dc2c      	bgt.n	8000cc8 <__aeabi_fmul+0x150>
 8000c6e:	01a2      	lsls	r2, r4, #6
 8000c70:	0a52      	lsrs	r2, r2, #9
 8000c72:	b2d8      	uxtb	r0, r3
 8000c74:	e7bd      	b.n	8000bf2 <__aeabi_fmul+0x7a>
 8000c76:	2090      	movs	r0, #144	@ 0x90
 8000c78:	0080      	lsls	r0, r0, #2
 8000c7a:	4202      	tst	r2, r0
 8000c7c:	d127      	bne.n	8000cce <__aeabi_fmul+0x156>
 8000c7e:	38b9      	subs	r0, #185	@ 0xb9
 8000c80:	38ff      	subs	r0, #255	@ 0xff
 8000c82:	4210      	tst	r0, r2
 8000c84:	d06d      	beq.n	8000d62 <__aeabi_fmul+0x1ea>
 8000c86:	003e      	movs	r6, r7
 8000c88:	46a1      	mov	r9, r4
 8000c8a:	468a      	mov	sl, r1
 8000c8c:	e7d2      	b.n	8000c34 <__aeabi_fmul+0xbc>
 8000c8e:	2c00      	cmp	r4, #0
 8000c90:	d141      	bne.n	8000d16 <__aeabi_fmul+0x19e>
 8000c92:	2301      	movs	r3, #1
 8000c94:	4642      	mov	r2, r8
 8000c96:	431a      	orrs	r2, r3
 8000c98:	4690      	mov	r8, r2
 8000c9a:	002b      	movs	r3, r5
 8000c9c:	4642      	mov	r2, r8
 8000c9e:	2101      	movs	r1, #1
 8000ca0:	1c5d      	adds	r5, r3, #1
 8000ca2:	2a0a      	cmp	r2, #10
 8000ca4:	dd97      	ble.n	8000bd6 <__aeabi_fmul+0x5e>
 8000ca6:	e7c5      	b.n	8000c34 <__aeabi_fmul+0xbc>
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d126      	bne.n	8000cfa <__aeabi_fmul+0x182>
 8000cac:	2304      	movs	r3, #4
 8000cae:	4698      	mov	r8, r3
 8000cb0:	3b03      	subs	r3, #3
 8000cb2:	2500      	movs	r5, #0
 8000cb4:	469a      	mov	sl, r3
 8000cb6:	e77a      	b.n	8000bae <__aeabi_fmul+0x36>
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d118      	bne.n	8000cee <__aeabi_fmul+0x176>
 8000cbc:	2308      	movs	r3, #8
 8000cbe:	4698      	mov	r8, r3
 8000cc0:	3b06      	subs	r3, #6
 8000cc2:	25ff      	movs	r5, #255	@ 0xff
 8000cc4:	469a      	mov	sl, r3
 8000cc6:	e772      	b.n	8000bae <__aeabi_fmul+0x36>
 8000cc8:	20ff      	movs	r0, #255	@ 0xff
 8000cca:	2200      	movs	r2, #0
 8000ccc:	e791      	b.n	8000bf2 <__aeabi_fmul+0x7a>
 8000cce:	2280      	movs	r2, #128	@ 0x80
 8000cd0:	2600      	movs	r6, #0
 8000cd2:	20ff      	movs	r0, #255	@ 0xff
 8000cd4:	03d2      	lsls	r2, r2, #15
 8000cd6:	e78c      	b.n	8000bf2 <__aeabi_fmul+0x7a>
 8000cd8:	4641      	mov	r1, r8
 8000cda:	2202      	movs	r2, #2
 8000cdc:	3501      	adds	r5, #1
 8000cde:	4311      	orrs	r1, r2
 8000ce0:	4688      	mov	r8, r1
 8000ce2:	35ff      	adds	r5, #255	@ 0xff
 8000ce4:	290a      	cmp	r1, #10
 8000ce6:	dca5      	bgt.n	8000c34 <__aeabi_fmul+0xbc>
 8000ce8:	2102      	movs	r1, #2
 8000cea:	407e      	eors	r6, r7
 8000cec:	e774      	b.n	8000bd8 <__aeabi_fmul+0x60>
 8000cee:	230c      	movs	r3, #12
 8000cf0:	4698      	mov	r8, r3
 8000cf2:	3b09      	subs	r3, #9
 8000cf4:	25ff      	movs	r5, #255	@ 0xff
 8000cf6:	469a      	mov	sl, r3
 8000cf8:	e759      	b.n	8000bae <__aeabi_fmul+0x36>
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	f000 fa80 	bl	8001200 <__clzsi2>
 8000d00:	464a      	mov	r2, r9
 8000d02:	1f43      	subs	r3, r0, #5
 8000d04:	2576      	movs	r5, #118	@ 0x76
 8000d06:	409a      	lsls	r2, r3
 8000d08:	2300      	movs	r3, #0
 8000d0a:	426d      	negs	r5, r5
 8000d0c:	4691      	mov	r9, r2
 8000d0e:	4698      	mov	r8, r3
 8000d10:	469a      	mov	sl, r3
 8000d12:	1a2d      	subs	r5, r5, r0
 8000d14:	e74b      	b.n	8000bae <__aeabi_fmul+0x36>
 8000d16:	0020      	movs	r0, r4
 8000d18:	f000 fa72 	bl	8001200 <__clzsi2>
 8000d1c:	4642      	mov	r2, r8
 8000d1e:	1f43      	subs	r3, r0, #5
 8000d20:	409c      	lsls	r4, r3
 8000d22:	1a2b      	subs	r3, r5, r0
 8000d24:	3b76      	subs	r3, #118	@ 0x76
 8000d26:	2100      	movs	r1, #0
 8000d28:	1c5d      	adds	r5, r3, #1
 8000d2a:	2a0a      	cmp	r2, #10
 8000d2c:	dc00      	bgt.n	8000d30 <__aeabi_fmul+0x1b8>
 8000d2e:	e752      	b.n	8000bd6 <__aeabi_fmul+0x5e>
 8000d30:	e780      	b.n	8000c34 <__aeabi_fmul+0xbc>
 8000d32:	2201      	movs	r2, #1
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	2b1b      	cmp	r3, #27
 8000d38:	dd00      	ble.n	8000d3c <__aeabi_fmul+0x1c4>
 8000d3a:	e758      	b.n	8000bee <__aeabi_fmul+0x76>
 8000d3c:	359e      	adds	r5, #158	@ 0x9e
 8000d3e:	0022      	movs	r2, r4
 8000d40:	40ac      	lsls	r4, r5
 8000d42:	40da      	lsrs	r2, r3
 8000d44:	1e63      	subs	r3, r4, #1
 8000d46:	419c      	sbcs	r4, r3
 8000d48:	4322      	orrs	r2, r4
 8000d4a:	0753      	lsls	r3, r2, #29
 8000d4c:	d004      	beq.n	8000d58 <__aeabi_fmul+0x1e0>
 8000d4e:	230f      	movs	r3, #15
 8000d50:	4013      	ands	r3, r2
 8000d52:	2b04      	cmp	r3, #4
 8000d54:	d000      	beq.n	8000d58 <__aeabi_fmul+0x1e0>
 8000d56:	3204      	adds	r2, #4
 8000d58:	0153      	lsls	r3, r2, #5
 8000d5a:	d537      	bpl.n	8000dcc <__aeabi_fmul+0x254>
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	2200      	movs	r2, #0
 8000d60:	e747      	b.n	8000bf2 <__aeabi_fmul+0x7a>
 8000d62:	0c21      	lsrs	r1, r4, #16
 8000d64:	464a      	mov	r2, r9
 8000d66:	0424      	lsls	r4, r4, #16
 8000d68:	0c24      	lsrs	r4, r4, #16
 8000d6a:	0027      	movs	r7, r4
 8000d6c:	0c10      	lsrs	r0, r2, #16
 8000d6e:	0412      	lsls	r2, r2, #16
 8000d70:	0c12      	lsrs	r2, r2, #16
 8000d72:	4344      	muls	r4, r0
 8000d74:	4357      	muls	r7, r2
 8000d76:	4348      	muls	r0, r1
 8000d78:	4351      	muls	r1, r2
 8000d7a:	0c3a      	lsrs	r2, r7, #16
 8000d7c:	1909      	adds	r1, r1, r4
 8000d7e:	1852      	adds	r2, r2, r1
 8000d80:	4294      	cmp	r4, r2
 8000d82:	d903      	bls.n	8000d8c <__aeabi_fmul+0x214>
 8000d84:	2180      	movs	r1, #128	@ 0x80
 8000d86:	0249      	lsls	r1, r1, #9
 8000d88:	468c      	mov	ip, r1
 8000d8a:	4460      	add	r0, ip
 8000d8c:	043f      	lsls	r7, r7, #16
 8000d8e:	0411      	lsls	r1, r2, #16
 8000d90:	0c3f      	lsrs	r7, r7, #16
 8000d92:	19c9      	adds	r1, r1, r7
 8000d94:	018c      	lsls	r4, r1, #6
 8000d96:	1e67      	subs	r7, r4, #1
 8000d98:	41bc      	sbcs	r4, r7
 8000d9a:	0c12      	lsrs	r2, r2, #16
 8000d9c:	0e89      	lsrs	r1, r1, #26
 8000d9e:	1812      	adds	r2, r2, r0
 8000da0:	430c      	orrs	r4, r1
 8000da2:	0192      	lsls	r2, r2, #6
 8000da4:	4314      	orrs	r4, r2
 8000da6:	0112      	lsls	r2, r2, #4
 8000da8:	d50e      	bpl.n	8000dc8 <__aeabi_fmul+0x250>
 8000daa:	2301      	movs	r3, #1
 8000dac:	0862      	lsrs	r2, r4, #1
 8000dae:	401c      	ands	r4, r3
 8000db0:	4314      	orrs	r4, r2
 8000db2:	e749      	b.n	8000c48 <__aeabi_fmul+0xd0>
 8000db4:	003e      	movs	r6, r7
 8000db6:	46a1      	mov	r9, r4
 8000db8:	2280      	movs	r2, #128	@ 0x80
 8000dba:	464b      	mov	r3, r9
 8000dbc:	03d2      	lsls	r2, r2, #15
 8000dbe:	431a      	orrs	r2, r3
 8000dc0:	0252      	lsls	r2, r2, #9
 8000dc2:	20ff      	movs	r0, #255	@ 0xff
 8000dc4:	0a52      	lsrs	r2, r2, #9
 8000dc6:	e714      	b.n	8000bf2 <__aeabi_fmul+0x7a>
 8000dc8:	001d      	movs	r5, r3
 8000dca:	e73d      	b.n	8000c48 <__aeabi_fmul+0xd0>
 8000dcc:	0192      	lsls	r2, r2, #6
 8000dce:	2000      	movs	r0, #0
 8000dd0:	0a52      	lsrs	r2, r2, #9
 8000dd2:	e70e      	b.n	8000bf2 <__aeabi_fmul+0x7a>
 8000dd4:	290f      	cmp	r1, #15
 8000dd6:	d1ed      	bne.n	8000db4 <__aeabi_fmul+0x23c>
 8000dd8:	2280      	movs	r2, #128	@ 0x80
 8000dda:	464b      	mov	r3, r9
 8000ddc:	03d2      	lsls	r2, r2, #15
 8000dde:	4213      	tst	r3, r2
 8000de0:	d0ea      	beq.n	8000db8 <__aeabi_fmul+0x240>
 8000de2:	4214      	tst	r4, r2
 8000de4:	d1e8      	bne.n	8000db8 <__aeabi_fmul+0x240>
 8000de6:	003e      	movs	r6, r7
 8000de8:	20ff      	movs	r0, #255	@ 0xff
 8000dea:	4322      	orrs	r2, r4
 8000dec:	e701      	b.n	8000bf2 <__aeabi_fmul+0x7a>
 8000dee:	46c0      	nop			@ (mov r8, r8)
 8000df0:	f7ffffff 	.word	0xf7ffffff

08000df4 <__aeabi_fsub>:
 8000df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000df6:	4647      	mov	r7, r8
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	024e      	lsls	r6, r1, #9
 8000dfc:	0243      	lsls	r3, r0, #9
 8000dfe:	0045      	lsls	r5, r0, #1
 8000e00:	0a72      	lsrs	r2, r6, #9
 8000e02:	0fc4      	lsrs	r4, r0, #31
 8000e04:	0048      	lsls	r0, r1, #1
 8000e06:	b580      	push	{r7, lr}
 8000e08:	4694      	mov	ip, r2
 8000e0a:	0a5f      	lsrs	r7, r3, #9
 8000e0c:	0e2d      	lsrs	r5, r5, #24
 8000e0e:	099b      	lsrs	r3, r3, #6
 8000e10:	0e00      	lsrs	r0, r0, #24
 8000e12:	0fc9      	lsrs	r1, r1, #31
 8000e14:	09b6      	lsrs	r6, r6, #6
 8000e16:	28ff      	cmp	r0, #255	@ 0xff
 8000e18:	d024      	beq.n	8000e64 <__aeabi_fsub+0x70>
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	4051      	eors	r1, r2
 8000e1e:	1a2a      	subs	r2, r5, r0
 8000e20:	428c      	cmp	r4, r1
 8000e22:	d00f      	beq.n	8000e44 <__aeabi_fsub+0x50>
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	dc00      	bgt.n	8000e2a <__aeabi_fsub+0x36>
 8000e28:	e16a      	b.n	8001100 <__aeabi_fsub+0x30c>
 8000e2a:	2800      	cmp	r0, #0
 8000e2c:	d135      	bne.n	8000e9a <__aeabi_fsub+0xa6>
 8000e2e:	2e00      	cmp	r6, #0
 8000e30:	d100      	bne.n	8000e34 <__aeabi_fsub+0x40>
 8000e32:	e0a2      	b.n	8000f7a <__aeabi_fsub+0x186>
 8000e34:	1e51      	subs	r1, r2, #1
 8000e36:	2a01      	cmp	r2, #1
 8000e38:	d100      	bne.n	8000e3c <__aeabi_fsub+0x48>
 8000e3a:	e124      	b.n	8001086 <__aeabi_fsub+0x292>
 8000e3c:	2aff      	cmp	r2, #255	@ 0xff
 8000e3e:	d021      	beq.n	8000e84 <__aeabi_fsub+0x90>
 8000e40:	000a      	movs	r2, r1
 8000e42:	e02f      	b.n	8000ea4 <__aeabi_fsub+0xb0>
 8000e44:	2a00      	cmp	r2, #0
 8000e46:	dc00      	bgt.n	8000e4a <__aeabi_fsub+0x56>
 8000e48:	e167      	b.n	800111a <__aeabi_fsub+0x326>
 8000e4a:	2800      	cmp	r0, #0
 8000e4c:	d05e      	beq.n	8000f0c <__aeabi_fsub+0x118>
 8000e4e:	2dff      	cmp	r5, #255	@ 0xff
 8000e50:	d018      	beq.n	8000e84 <__aeabi_fsub+0x90>
 8000e52:	2180      	movs	r1, #128	@ 0x80
 8000e54:	04c9      	lsls	r1, r1, #19
 8000e56:	430e      	orrs	r6, r1
 8000e58:	2a1b      	cmp	r2, #27
 8000e5a:	dc00      	bgt.n	8000e5e <__aeabi_fsub+0x6a>
 8000e5c:	e076      	b.n	8000f4c <__aeabi_fsub+0x158>
 8000e5e:	002a      	movs	r2, r5
 8000e60:	3301      	adds	r3, #1
 8000e62:	e032      	b.n	8000eca <__aeabi_fsub+0xd6>
 8000e64:	002a      	movs	r2, r5
 8000e66:	3aff      	subs	r2, #255	@ 0xff
 8000e68:	4691      	mov	r9, r2
 8000e6a:	2e00      	cmp	r6, #0
 8000e6c:	d042      	beq.n	8000ef4 <__aeabi_fsub+0x100>
 8000e6e:	428c      	cmp	r4, r1
 8000e70:	d055      	beq.n	8000f1e <__aeabi_fsub+0x12a>
 8000e72:	464a      	mov	r2, r9
 8000e74:	2a00      	cmp	r2, #0
 8000e76:	d100      	bne.n	8000e7a <__aeabi_fsub+0x86>
 8000e78:	e09c      	b.n	8000fb4 <__aeabi_fsub+0x1c0>
 8000e7a:	2d00      	cmp	r5, #0
 8000e7c:	d100      	bne.n	8000e80 <__aeabi_fsub+0x8c>
 8000e7e:	e077      	b.n	8000f70 <__aeabi_fsub+0x17c>
 8000e80:	000c      	movs	r4, r1
 8000e82:	0033      	movs	r3, r6
 8000e84:	08db      	lsrs	r3, r3, #3
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d100      	bne.n	8000e8c <__aeabi_fsub+0x98>
 8000e8a:	e06e      	b.n	8000f6a <__aeabi_fsub+0x176>
 8000e8c:	2280      	movs	r2, #128	@ 0x80
 8000e8e:	03d2      	lsls	r2, r2, #15
 8000e90:	4313      	orrs	r3, r2
 8000e92:	025b      	lsls	r3, r3, #9
 8000e94:	20ff      	movs	r0, #255	@ 0xff
 8000e96:	0a5b      	lsrs	r3, r3, #9
 8000e98:	e024      	b.n	8000ee4 <__aeabi_fsub+0xf0>
 8000e9a:	2dff      	cmp	r5, #255	@ 0xff
 8000e9c:	d0f2      	beq.n	8000e84 <__aeabi_fsub+0x90>
 8000e9e:	2180      	movs	r1, #128	@ 0x80
 8000ea0:	04c9      	lsls	r1, r1, #19
 8000ea2:	430e      	orrs	r6, r1
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	2a1b      	cmp	r2, #27
 8000ea8:	dc08      	bgt.n	8000ebc <__aeabi_fsub+0xc8>
 8000eaa:	0031      	movs	r1, r6
 8000eac:	2020      	movs	r0, #32
 8000eae:	40d1      	lsrs	r1, r2
 8000eb0:	1a82      	subs	r2, r0, r2
 8000eb2:	4096      	lsls	r6, r2
 8000eb4:	0032      	movs	r2, r6
 8000eb6:	1e50      	subs	r0, r2, #1
 8000eb8:	4182      	sbcs	r2, r0
 8000eba:	4311      	orrs	r1, r2
 8000ebc:	1a5b      	subs	r3, r3, r1
 8000ebe:	015a      	lsls	r2, r3, #5
 8000ec0:	d460      	bmi.n	8000f84 <__aeabi_fsub+0x190>
 8000ec2:	2107      	movs	r1, #7
 8000ec4:	002a      	movs	r2, r5
 8000ec6:	4019      	ands	r1, r3
 8000ec8:	d057      	beq.n	8000f7a <__aeabi_fsub+0x186>
 8000eca:	210f      	movs	r1, #15
 8000ecc:	4019      	ands	r1, r3
 8000ece:	2904      	cmp	r1, #4
 8000ed0:	d000      	beq.n	8000ed4 <__aeabi_fsub+0xe0>
 8000ed2:	3304      	adds	r3, #4
 8000ed4:	0159      	lsls	r1, r3, #5
 8000ed6:	d550      	bpl.n	8000f7a <__aeabi_fsub+0x186>
 8000ed8:	1c50      	adds	r0, r2, #1
 8000eda:	2afe      	cmp	r2, #254	@ 0xfe
 8000edc:	d045      	beq.n	8000f6a <__aeabi_fsub+0x176>
 8000ede:	019b      	lsls	r3, r3, #6
 8000ee0:	b2c0      	uxtb	r0, r0
 8000ee2:	0a5b      	lsrs	r3, r3, #9
 8000ee4:	05c0      	lsls	r0, r0, #23
 8000ee6:	4318      	orrs	r0, r3
 8000ee8:	07e4      	lsls	r4, r4, #31
 8000eea:	4320      	orrs	r0, r4
 8000eec:	bcc0      	pop	{r6, r7}
 8000eee:	46b9      	mov	r9, r7
 8000ef0:	46b0      	mov	r8, r6
 8000ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	4051      	eors	r1, r2
 8000ef8:	428c      	cmp	r4, r1
 8000efa:	d1ba      	bne.n	8000e72 <__aeabi_fsub+0x7e>
 8000efc:	464a      	mov	r2, r9
 8000efe:	2a00      	cmp	r2, #0
 8000f00:	d010      	beq.n	8000f24 <__aeabi_fsub+0x130>
 8000f02:	2d00      	cmp	r5, #0
 8000f04:	d100      	bne.n	8000f08 <__aeabi_fsub+0x114>
 8000f06:	e098      	b.n	800103a <__aeabi_fsub+0x246>
 8000f08:	2300      	movs	r3, #0
 8000f0a:	e7bb      	b.n	8000e84 <__aeabi_fsub+0x90>
 8000f0c:	2e00      	cmp	r6, #0
 8000f0e:	d034      	beq.n	8000f7a <__aeabi_fsub+0x186>
 8000f10:	1e51      	subs	r1, r2, #1
 8000f12:	2a01      	cmp	r2, #1
 8000f14:	d06e      	beq.n	8000ff4 <__aeabi_fsub+0x200>
 8000f16:	2aff      	cmp	r2, #255	@ 0xff
 8000f18:	d0b4      	beq.n	8000e84 <__aeabi_fsub+0x90>
 8000f1a:	000a      	movs	r2, r1
 8000f1c:	e79c      	b.n	8000e58 <__aeabi_fsub+0x64>
 8000f1e:	2a00      	cmp	r2, #0
 8000f20:	d000      	beq.n	8000f24 <__aeabi_fsub+0x130>
 8000f22:	e088      	b.n	8001036 <__aeabi_fsub+0x242>
 8000f24:	20fe      	movs	r0, #254	@ 0xfe
 8000f26:	1c6a      	adds	r2, r5, #1
 8000f28:	4210      	tst	r0, r2
 8000f2a:	d000      	beq.n	8000f2e <__aeabi_fsub+0x13a>
 8000f2c:	e092      	b.n	8001054 <__aeabi_fsub+0x260>
 8000f2e:	2d00      	cmp	r5, #0
 8000f30:	d000      	beq.n	8000f34 <__aeabi_fsub+0x140>
 8000f32:	e0a4      	b.n	800107e <__aeabi_fsub+0x28a>
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d100      	bne.n	8000f3a <__aeabi_fsub+0x146>
 8000f38:	e0cb      	b.n	80010d2 <__aeabi_fsub+0x2de>
 8000f3a:	2e00      	cmp	r6, #0
 8000f3c:	d000      	beq.n	8000f40 <__aeabi_fsub+0x14c>
 8000f3e:	e0ca      	b.n	80010d6 <__aeabi_fsub+0x2e2>
 8000f40:	2200      	movs	r2, #0
 8000f42:	08db      	lsrs	r3, r3, #3
 8000f44:	025b      	lsls	r3, r3, #9
 8000f46:	0a5b      	lsrs	r3, r3, #9
 8000f48:	b2d0      	uxtb	r0, r2
 8000f4a:	e7cb      	b.n	8000ee4 <__aeabi_fsub+0xf0>
 8000f4c:	0031      	movs	r1, r6
 8000f4e:	2020      	movs	r0, #32
 8000f50:	40d1      	lsrs	r1, r2
 8000f52:	1a82      	subs	r2, r0, r2
 8000f54:	4096      	lsls	r6, r2
 8000f56:	0032      	movs	r2, r6
 8000f58:	1e50      	subs	r0, r2, #1
 8000f5a:	4182      	sbcs	r2, r0
 8000f5c:	430a      	orrs	r2, r1
 8000f5e:	189b      	adds	r3, r3, r2
 8000f60:	015a      	lsls	r2, r3, #5
 8000f62:	d5ae      	bpl.n	8000ec2 <__aeabi_fsub+0xce>
 8000f64:	1c6a      	adds	r2, r5, #1
 8000f66:	2dfe      	cmp	r5, #254	@ 0xfe
 8000f68:	d14a      	bne.n	8001000 <__aeabi_fsub+0x20c>
 8000f6a:	20ff      	movs	r0, #255	@ 0xff
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	e7b9      	b.n	8000ee4 <__aeabi_fsub+0xf0>
 8000f70:	22ff      	movs	r2, #255	@ 0xff
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d14b      	bne.n	800100e <__aeabi_fsub+0x21a>
 8000f76:	000c      	movs	r4, r1
 8000f78:	0033      	movs	r3, r6
 8000f7a:	08db      	lsrs	r3, r3, #3
 8000f7c:	2aff      	cmp	r2, #255	@ 0xff
 8000f7e:	d100      	bne.n	8000f82 <__aeabi_fsub+0x18e>
 8000f80:	e781      	b.n	8000e86 <__aeabi_fsub+0x92>
 8000f82:	e7df      	b.n	8000f44 <__aeabi_fsub+0x150>
 8000f84:	019f      	lsls	r7, r3, #6
 8000f86:	09bf      	lsrs	r7, r7, #6
 8000f88:	0038      	movs	r0, r7
 8000f8a:	f000 f939 	bl	8001200 <__clzsi2>
 8000f8e:	3805      	subs	r0, #5
 8000f90:	4087      	lsls	r7, r0
 8000f92:	4285      	cmp	r5, r0
 8000f94:	dc21      	bgt.n	8000fda <__aeabi_fsub+0x1e6>
 8000f96:	003b      	movs	r3, r7
 8000f98:	2120      	movs	r1, #32
 8000f9a:	1b42      	subs	r2, r0, r5
 8000f9c:	3201      	adds	r2, #1
 8000f9e:	40d3      	lsrs	r3, r2
 8000fa0:	1a8a      	subs	r2, r1, r2
 8000fa2:	4097      	lsls	r7, r2
 8000fa4:	1e7a      	subs	r2, r7, #1
 8000fa6:	4197      	sbcs	r7, r2
 8000fa8:	2200      	movs	r2, #0
 8000faa:	433b      	orrs	r3, r7
 8000fac:	0759      	lsls	r1, r3, #29
 8000fae:	d000      	beq.n	8000fb2 <__aeabi_fsub+0x1be>
 8000fb0:	e78b      	b.n	8000eca <__aeabi_fsub+0xd6>
 8000fb2:	e78f      	b.n	8000ed4 <__aeabi_fsub+0xe0>
 8000fb4:	20fe      	movs	r0, #254	@ 0xfe
 8000fb6:	1c6a      	adds	r2, r5, #1
 8000fb8:	4210      	tst	r0, r2
 8000fba:	d112      	bne.n	8000fe2 <__aeabi_fsub+0x1ee>
 8000fbc:	2d00      	cmp	r5, #0
 8000fbe:	d152      	bne.n	8001066 <__aeabi_fsub+0x272>
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d07c      	beq.n	80010be <__aeabi_fsub+0x2ca>
 8000fc4:	2e00      	cmp	r6, #0
 8000fc6:	d0bb      	beq.n	8000f40 <__aeabi_fsub+0x14c>
 8000fc8:	1b9a      	subs	r2, r3, r6
 8000fca:	0150      	lsls	r0, r2, #5
 8000fcc:	d400      	bmi.n	8000fd0 <__aeabi_fsub+0x1dc>
 8000fce:	e08b      	b.n	80010e8 <__aeabi_fsub+0x2f4>
 8000fd0:	2401      	movs	r4, #1
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	1af3      	subs	r3, r6, r3
 8000fd6:	400c      	ands	r4, r1
 8000fd8:	e7e8      	b.n	8000fac <__aeabi_fsub+0x1b8>
 8000fda:	4b56      	ldr	r3, [pc, #344]	@ (8001134 <__aeabi_fsub+0x340>)
 8000fdc:	1a2a      	subs	r2, r5, r0
 8000fde:	403b      	ands	r3, r7
 8000fe0:	e7e4      	b.n	8000fac <__aeabi_fsub+0x1b8>
 8000fe2:	1b9f      	subs	r7, r3, r6
 8000fe4:	017a      	lsls	r2, r7, #5
 8000fe6:	d446      	bmi.n	8001076 <__aeabi_fsub+0x282>
 8000fe8:	2f00      	cmp	r7, #0
 8000fea:	d1cd      	bne.n	8000f88 <__aeabi_fsub+0x194>
 8000fec:	2400      	movs	r4, #0
 8000fee:	2000      	movs	r0, #0
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	e777      	b.n	8000ee4 <__aeabi_fsub+0xf0>
 8000ff4:	199b      	adds	r3, r3, r6
 8000ff6:	2501      	movs	r5, #1
 8000ff8:	3201      	adds	r2, #1
 8000ffa:	0159      	lsls	r1, r3, #5
 8000ffc:	d400      	bmi.n	8001000 <__aeabi_fsub+0x20c>
 8000ffe:	e760      	b.n	8000ec2 <__aeabi_fsub+0xce>
 8001000:	2101      	movs	r1, #1
 8001002:	484d      	ldr	r0, [pc, #308]	@ (8001138 <__aeabi_fsub+0x344>)
 8001004:	4019      	ands	r1, r3
 8001006:	085b      	lsrs	r3, r3, #1
 8001008:	4003      	ands	r3, r0
 800100a:	430b      	orrs	r3, r1
 800100c:	e7ce      	b.n	8000fac <__aeabi_fsub+0x1b8>
 800100e:	1e57      	subs	r7, r2, #1
 8001010:	2a01      	cmp	r2, #1
 8001012:	d05a      	beq.n	80010ca <__aeabi_fsub+0x2d6>
 8001014:	000c      	movs	r4, r1
 8001016:	2aff      	cmp	r2, #255	@ 0xff
 8001018:	d033      	beq.n	8001082 <__aeabi_fsub+0x28e>
 800101a:	2201      	movs	r2, #1
 800101c:	2f1b      	cmp	r7, #27
 800101e:	dc07      	bgt.n	8001030 <__aeabi_fsub+0x23c>
 8001020:	2120      	movs	r1, #32
 8001022:	1bc9      	subs	r1, r1, r7
 8001024:	001a      	movs	r2, r3
 8001026:	408b      	lsls	r3, r1
 8001028:	40fa      	lsrs	r2, r7
 800102a:	1e59      	subs	r1, r3, #1
 800102c:	418b      	sbcs	r3, r1
 800102e:	431a      	orrs	r2, r3
 8001030:	0005      	movs	r5, r0
 8001032:	1ab3      	subs	r3, r6, r2
 8001034:	e743      	b.n	8000ebe <__aeabi_fsub+0xca>
 8001036:	2d00      	cmp	r5, #0
 8001038:	d123      	bne.n	8001082 <__aeabi_fsub+0x28e>
 800103a:	22ff      	movs	r2, #255	@ 0xff
 800103c:	2b00      	cmp	r3, #0
 800103e:	d09b      	beq.n	8000f78 <__aeabi_fsub+0x184>
 8001040:	1e51      	subs	r1, r2, #1
 8001042:	2a01      	cmp	r2, #1
 8001044:	d0d6      	beq.n	8000ff4 <__aeabi_fsub+0x200>
 8001046:	2aff      	cmp	r2, #255	@ 0xff
 8001048:	d01b      	beq.n	8001082 <__aeabi_fsub+0x28e>
 800104a:	291b      	cmp	r1, #27
 800104c:	dd2c      	ble.n	80010a8 <__aeabi_fsub+0x2b4>
 800104e:	0002      	movs	r2, r0
 8001050:	1c73      	adds	r3, r6, #1
 8001052:	e73a      	b.n	8000eca <__aeabi_fsub+0xd6>
 8001054:	2aff      	cmp	r2, #255	@ 0xff
 8001056:	d088      	beq.n	8000f6a <__aeabi_fsub+0x176>
 8001058:	199b      	adds	r3, r3, r6
 800105a:	085b      	lsrs	r3, r3, #1
 800105c:	0759      	lsls	r1, r3, #29
 800105e:	d000      	beq.n	8001062 <__aeabi_fsub+0x26e>
 8001060:	e733      	b.n	8000eca <__aeabi_fsub+0xd6>
 8001062:	08db      	lsrs	r3, r3, #3
 8001064:	e76e      	b.n	8000f44 <__aeabi_fsub+0x150>
 8001066:	2b00      	cmp	r3, #0
 8001068:	d110      	bne.n	800108c <__aeabi_fsub+0x298>
 800106a:	2e00      	cmp	r6, #0
 800106c:	d043      	beq.n	80010f6 <__aeabi_fsub+0x302>
 800106e:	2401      	movs	r4, #1
 8001070:	0033      	movs	r3, r6
 8001072:	400c      	ands	r4, r1
 8001074:	e706      	b.n	8000e84 <__aeabi_fsub+0x90>
 8001076:	2401      	movs	r4, #1
 8001078:	1af7      	subs	r7, r6, r3
 800107a:	400c      	ands	r4, r1
 800107c:	e784      	b.n	8000f88 <__aeabi_fsub+0x194>
 800107e:	2b00      	cmp	r3, #0
 8001080:	d104      	bne.n	800108c <__aeabi_fsub+0x298>
 8001082:	0033      	movs	r3, r6
 8001084:	e6fe      	b.n	8000e84 <__aeabi_fsub+0x90>
 8001086:	2501      	movs	r5, #1
 8001088:	1b9b      	subs	r3, r3, r6
 800108a:	e718      	b.n	8000ebe <__aeabi_fsub+0xca>
 800108c:	2e00      	cmp	r6, #0
 800108e:	d100      	bne.n	8001092 <__aeabi_fsub+0x29e>
 8001090:	e6f8      	b.n	8000e84 <__aeabi_fsub+0x90>
 8001092:	2280      	movs	r2, #128	@ 0x80
 8001094:	03d2      	lsls	r2, r2, #15
 8001096:	4297      	cmp	r7, r2
 8001098:	d304      	bcc.n	80010a4 <__aeabi_fsub+0x2b0>
 800109a:	4594      	cmp	ip, r2
 800109c:	d202      	bcs.n	80010a4 <__aeabi_fsub+0x2b0>
 800109e:	2401      	movs	r4, #1
 80010a0:	0033      	movs	r3, r6
 80010a2:	400c      	ands	r4, r1
 80010a4:	08db      	lsrs	r3, r3, #3
 80010a6:	e6f1      	b.n	8000e8c <__aeabi_fsub+0x98>
 80010a8:	001a      	movs	r2, r3
 80010aa:	2520      	movs	r5, #32
 80010ac:	40ca      	lsrs	r2, r1
 80010ae:	1a69      	subs	r1, r5, r1
 80010b0:	408b      	lsls	r3, r1
 80010b2:	1e59      	subs	r1, r3, #1
 80010b4:	418b      	sbcs	r3, r1
 80010b6:	4313      	orrs	r3, r2
 80010b8:	0005      	movs	r5, r0
 80010ba:	199b      	adds	r3, r3, r6
 80010bc:	e750      	b.n	8000f60 <__aeabi_fsub+0x16c>
 80010be:	2e00      	cmp	r6, #0
 80010c0:	d094      	beq.n	8000fec <__aeabi_fsub+0x1f8>
 80010c2:	2401      	movs	r4, #1
 80010c4:	0033      	movs	r3, r6
 80010c6:	400c      	ands	r4, r1
 80010c8:	e73a      	b.n	8000f40 <__aeabi_fsub+0x14c>
 80010ca:	000c      	movs	r4, r1
 80010cc:	2501      	movs	r5, #1
 80010ce:	1af3      	subs	r3, r6, r3
 80010d0:	e6f5      	b.n	8000ebe <__aeabi_fsub+0xca>
 80010d2:	0033      	movs	r3, r6
 80010d4:	e734      	b.n	8000f40 <__aeabi_fsub+0x14c>
 80010d6:	199b      	adds	r3, r3, r6
 80010d8:	2200      	movs	r2, #0
 80010da:	0159      	lsls	r1, r3, #5
 80010dc:	d5c1      	bpl.n	8001062 <__aeabi_fsub+0x26e>
 80010de:	4a15      	ldr	r2, [pc, #84]	@ (8001134 <__aeabi_fsub+0x340>)
 80010e0:	4013      	ands	r3, r2
 80010e2:	08db      	lsrs	r3, r3, #3
 80010e4:	2201      	movs	r2, #1
 80010e6:	e72d      	b.n	8000f44 <__aeabi_fsub+0x150>
 80010e8:	2a00      	cmp	r2, #0
 80010ea:	d100      	bne.n	80010ee <__aeabi_fsub+0x2fa>
 80010ec:	e77e      	b.n	8000fec <__aeabi_fsub+0x1f8>
 80010ee:	0013      	movs	r3, r2
 80010f0:	2200      	movs	r2, #0
 80010f2:	08db      	lsrs	r3, r3, #3
 80010f4:	e726      	b.n	8000f44 <__aeabi_fsub+0x150>
 80010f6:	2380      	movs	r3, #128	@ 0x80
 80010f8:	2400      	movs	r4, #0
 80010fa:	20ff      	movs	r0, #255	@ 0xff
 80010fc:	03db      	lsls	r3, r3, #15
 80010fe:	e6f1      	b.n	8000ee4 <__aeabi_fsub+0xf0>
 8001100:	2a00      	cmp	r2, #0
 8001102:	d100      	bne.n	8001106 <__aeabi_fsub+0x312>
 8001104:	e756      	b.n	8000fb4 <__aeabi_fsub+0x1c0>
 8001106:	1b47      	subs	r7, r0, r5
 8001108:	003a      	movs	r2, r7
 800110a:	2d00      	cmp	r5, #0
 800110c:	d100      	bne.n	8001110 <__aeabi_fsub+0x31c>
 800110e:	e730      	b.n	8000f72 <__aeabi_fsub+0x17e>
 8001110:	2280      	movs	r2, #128	@ 0x80
 8001112:	04d2      	lsls	r2, r2, #19
 8001114:	000c      	movs	r4, r1
 8001116:	4313      	orrs	r3, r2
 8001118:	e77f      	b.n	800101a <__aeabi_fsub+0x226>
 800111a:	2a00      	cmp	r2, #0
 800111c:	d100      	bne.n	8001120 <__aeabi_fsub+0x32c>
 800111e:	e701      	b.n	8000f24 <__aeabi_fsub+0x130>
 8001120:	1b41      	subs	r1, r0, r5
 8001122:	2d00      	cmp	r5, #0
 8001124:	d101      	bne.n	800112a <__aeabi_fsub+0x336>
 8001126:	000a      	movs	r2, r1
 8001128:	e788      	b.n	800103c <__aeabi_fsub+0x248>
 800112a:	2280      	movs	r2, #128	@ 0x80
 800112c:	04d2      	lsls	r2, r2, #19
 800112e:	4313      	orrs	r3, r2
 8001130:	e78b      	b.n	800104a <__aeabi_fsub+0x256>
 8001132:	46c0      	nop			@ (mov r8, r8)
 8001134:	fbffffff 	.word	0xfbffffff
 8001138:	7dffffff 	.word	0x7dffffff

0800113c <__aeabi_f2iz>:
 800113c:	0241      	lsls	r1, r0, #9
 800113e:	0042      	lsls	r2, r0, #1
 8001140:	0fc3      	lsrs	r3, r0, #31
 8001142:	0a49      	lsrs	r1, r1, #9
 8001144:	2000      	movs	r0, #0
 8001146:	0e12      	lsrs	r2, r2, #24
 8001148:	2a7e      	cmp	r2, #126	@ 0x7e
 800114a:	dd03      	ble.n	8001154 <__aeabi_f2iz+0x18>
 800114c:	2a9d      	cmp	r2, #157	@ 0x9d
 800114e:	dd02      	ble.n	8001156 <__aeabi_f2iz+0x1a>
 8001150:	4a09      	ldr	r2, [pc, #36]	@ (8001178 <__aeabi_f2iz+0x3c>)
 8001152:	1898      	adds	r0, r3, r2
 8001154:	4770      	bx	lr
 8001156:	2080      	movs	r0, #128	@ 0x80
 8001158:	0400      	lsls	r0, r0, #16
 800115a:	4301      	orrs	r1, r0
 800115c:	2a95      	cmp	r2, #149	@ 0x95
 800115e:	dc07      	bgt.n	8001170 <__aeabi_f2iz+0x34>
 8001160:	2096      	movs	r0, #150	@ 0x96
 8001162:	1a82      	subs	r2, r0, r2
 8001164:	40d1      	lsrs	r1, r2
 8001166:	4248      	negs	r0, r1
 8001168:	2b00      	cmp	r3, #0
 800116a:	d1f3      	bne.n	8001154 <__aeabi_f2iz+0x18>
 800116c:	0008      	movs	r0, r1
 800116e:	e7f1      	b.n	8001154 <__aeabi_f2iz+0x18>
 8001170:	3a96      	subs	r2, #150	@ 0x96
 8001172:	4091      	lsls	r1, r2
 8001174:	e7f7      	b.n	8001166 <__aeabi_f2iz+0x2a>
 8001176:	46c0      	nop			@ (mov r8, r8)
 8001178:	7fffffff 	.word	0x7fffffff

0800117c <__aeabi_ui2f>:
 800117c:	b570      	push	{r4, r5, r6, lr}
 800117e:	1e04      	subs	r4, r0, #0
 8001180:	d00e      	beq.n	80011a0 <__aeabi_ui2f+0x24>
 8001182:	f000 f83d 	bl	8001200 <__clzsi2>
 8001186:	239e      	movs	r3, #158	@ 0x9e
 8001188:	0001      	movs	r1, r0
 800118a:	1a1b      	subs	r3, r3, r0
 800118c:	2b96      	cmp	r3, #150	@ 0x96
 800118e:	dc0c      	bgt.n	80011aa <__aeabi_ui2f+0x2e>
 8001190:	2808      	cmp	r0, #8
 8001192:	d02f      	beq.n	80011f4 <__aeabi_ui2f+0x78>
 8001194:	3908      	subs	r1, #8
 8001196:	408c      	lsls	r4, r1
 8001198:	0264      	lsls	r4, r4, #9
 800119a:	0a64      	lsrs	r4, r4, #9
 800119c:	b2d8      	uxtb	r0, r3
 800119e:	e001      	b.n	80011a4 <__aeabi_ui2f+0x28>
 80011a0:	2000      	movs	r0, #0
 80011a2:	2400      	movs	r4, #0
 80011a4:	05c0      	lsls	r0, r0, #23
 80011a6:	4320      	orrs	r0, r4
 80011a8:	bd70      	pop	{r4, r5, r6, pc}
 80011aa:	2b99      	cmp	r3, #153	@ 0x99
 80011ac:	dc16      	bgt.n	80011dc <__aeabi_ui2f+0x60>
 80011ae:	1f42      	subs	r2, r0, #5
 80011b0:	2805      	cmp	r0, #5
 80011b2:	d000      	beq.n	80011b6 <__aeabi_ui2f+0x3a>
 80011b4:	4094      	lsls	r4, r2
 80011b6:	0022      	movs	r2, r4
 80011b8:	4810      	ldr	r0, [pc, #64]	@ (80011fc <__aeabi_ui2f+0x80>)
 80011ba:	4002      	ands	r2, r0
 80011bc:	0765      	lsls	r5, r4, #29
 80011be:	d009      	beq.n	80011d4 <__aeabi_ui2f+0x58>
 80011c0:	250f      	movs	r5, #15
 80011c2:	402c      	ands	r4, r5
 80011c4:	2c04      	cmp	r4, #4
 80011c6:	d005      	beq.n	80011d4 <__aeabi_ui2f+0x58>
 80011c8:	3204      	adds	r2, #4
 80011ca:	0154      	lsls	r4, r2, #5
 80011cc:	d502      	bpl.n	80011d4 <__aeabi_ui2f+0x58>
 80011ce:	239f      	movs	r3, #159	@ 0x9f
 80011d0:	4002      	ands	r2, r0
 80011d2:	1a5b      	subs	r3, r3, r1
 80011d4:	0192      	lsls	r2, r2, #6
 80011d6:	0a54      	lsrs	r4, r2, #9
 80011d8:	b2d8      	uxtb	r0, r3
 80011da:	e7e3      	b.n	80011a4 <__aeabi_ui2f+0x28>
 80011dc:	0002      	movs	r2, r0
 80011de:	0020      	movs	r0, r4
 80011e0:	321b      	adds	r2, #27
 80011e2:	4090      	lsls	r0, r2
 80011e4:	0002      	movs	r2, r0
 80011e6:	1e50      	subs	r0, r2, #1
 80011e8:	4182      	sbcs	r2, r0
 80011ea:	2005      	movs	r0, #5
 80011ec:	1a40      	subs	r0, r0, r1
 80011ee:	40c4      	lsrs	r4, r0
 80011f0:	4314      	orrs	r4, r2
 80011f2:	e7e0      	b.n	80011b6 <__aeabi_ui2f+0x3a>
 80011f4:	0264      	lsls	r4, r4, #9
 80011f6:	2096      	movs	r0, #150	@ 0x96
 80011f8:	0a64      	lsrs	r4, r4, #9
 80011fa:	e7d3      	b.n	80011a4 <__aeabi_ui2f+0x28>
 80011fc:	fbffffff 	.word	0xfbffffff

08001200 <__clzsi2>:
 8001200:	211c      	movs	r1, #28
 8001202:	2301      	movs	r3, #1
 8001204:	041b      	lsls	r3, r3, #16
 8001206:	4298      	cmp	r0, r3
 8001208:	d301      	bcc.n	800120e <__clzsi2+0xe>
 800120a:	0c00      	lsrs	r0, r0, #16
 800120c:	3910      	subs	r1, #16
 800120e:	0a1b      	lsrs	r3, r3, #8
 8001210:	4298      	cmp	r0, r3
 8001212:	d301      	bcc.n	8001218 <__clzsi2+0x18>
 8001214:	0a00      	lsrs	r0, r0, #8
 8001216:	3908      	subs	r1, #8
 8001218:	091b      	lsrs	r3, r3, #4
 800121a:	4298      	cmp	r0, r3
 800121c:	d301      	bcc.n	8001222 <__clzsi2+0x22>
 800121e:	0900      	lsrs	r0, r0, #4
 8001220:	3904      	subs	r1, #4
 8001222:	a202      	add	r2, pc, #8	@ (adr r2, 800122c <__clzsi2+0x2c>)
 8001224:	5c10      	ldrb	r0, [r2, r0]
 8001226:	1840      	adds	r0, r0, r1
 8001228:	4770      	bx	lr
 800122a:	46c0      	nop			@ (mov r8, r8)
 800122c:	02020304 	.word	0x02020304
 8001230:	01010101 	.word	0x01010101
	...

0800123c <HAL_I2C_MemTxCpltCallback>:
void bno055_delay(uint32_t time);
int8_t bno055_write(uint8_t *data, uint8_t len);
int8_t bno055_read(uint8_t reg, uint8_t *data, uint8_t len);

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
	i2c_tx_int = 1;
 8001244:	4b03      	ldr	r3, [pc, #12]	@ (8001254 <HAL_I2C_MemTxCpltCallback+0x18>)
 8001246:	2201      	movs	r2, #1
 8001248:	701a      	strb	r2, [r3, #0]
}
 800124a:	46c0      	nop			@ (mov r8, r8)
 800124c:	46bd      	mov	sp, r7
 800124e:	b002      	add	sp, #8
 8001250:	bd80      	pop	{r7, pc}
 8001252:	46c0      	nop			@ (mov r8, r8)
 8001254:	2000000e 	.word	0x2000000e

08001258 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
	i2c_rx_int = 1;
 8001260:	4b03      	ldr	r3, [pc, #12]	@ (8001270 <HAL_I2C_MemRxCpltCallback+0x18>)
 8001262:	2201      	movs	r2, #1
 8001264:	701a      	strb	r2, [r3, #0]
}
 8001266:	46c0      	nop			@ (mov r8, r8)
 8001268:	46bd      	mov	sp, r7
 800126a:	b002      	add	sp, #8
 800126c:	bd80      	pop	{r7, pc}
 800126e:	46c0      	nop			@ (mov r8, r8)
 8001270:	2000000f 	.word	0x2000000f

08001274 <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
	i2c_tx_int = 1;
 800127c:	4b03      	ldr	r3, [pc, #12]	@ (800128c <HAL_I2C_MasterTxCpltCallback+0x18>)
 800127e:	2201      	movs	r2, #1
 8001280:	701a      	strb	r2, [r3, #0]
}
 8001282:	46c0      	nop			@ (mov r8, r8)
 8001284:	46bd      	mov	sp, r7
 8001286:	b002      	add	sp, #8
 8001288:	bd80      	pop	{r7, pc}
 800128a:	46c0      	nop			@ (mov r8, r8)
 800128c:	2000000e 	.word	0x2000000e

08001290 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
	i2c_rx_int = 1;
 8001298:	4b03      	ldr	r3, [pc, #12]	@ (80012a8 <HAL_I2C_MasterRxCpltCallback+0x18>)
 800129a:	2201      	movs	r2, #1
 800129c:	701a      	strb	r2, [r3, #0]
}
 800129e:	46c0      	nop			@ (mov r8, r8)
 80012a0:	46bd      	mov	sp, r7
 80012a2:	b002      	add	sp, #8
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	46c0      	nop			@ (mov r8, r8)
 80012a8:	2000000f 	.word	0x2000000f

080012ac <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
	// Do something
	i2c_err_int = 1;
 80012b4:	4b07      	ldr	r3, [pc, #28]	@ (80012d4 <HAL_I2C_ErrorCallback+0x28>)
 80012b6:	2201      	movs	r2, #1
 80012b8:	701a      	strb	r2, [r3, #0]
	__HAL_I2C_DISABLE_IT(&hi2c1, I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI |
 80012ba:	4b07      	ldr	r3, [pc, #28]	@ (80012d8 <HAL_I2C_ErrorCallback+0x2c>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	4b05      	ldr	r3, [pc, #20]	@ (80012d8 <HAL_I2C_ErrorCallback+0x2c>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	21fe      	movs	r1, #254	@ 0xfe
 80012c6:	438a      	bics	r2, r1
 80012c8:	601a      	str	r2, [r3, #0]
										 I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI);
}
 80012ca:	46c0      	nop			@ (mov r8, r8)
 80012cc:	46bd      	mov	sp, r7
 80012ce:	b002      	add	sp, #8
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	46c0      	nop			@ (mov r8, r8)
 80012d4:	200002ec 	.word	0x200002ec
 80012d8:	20000304 	.word	0x20000304

080012dc <bno055_delay>:


void bno055_delay(uint32_t time)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	0018      	movs	r0, r3
 80012e8:	f004 fc76 	bl	8005bd8 <HAL_Delay>
#endif
}
 80012ec:	46c0      	nop			@ (mov r8, r8)
 80012ee:	46bd      	mov	sp, r7
 80012f0:	b002      	add	sp, #8
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <bno055_init>:

int8_t bno055_init()
{
 80012f4:	b590      	push	{r4, r7, lr}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
	int8_t status = HAL_OK;
 80012fa:	1dfb      	adds	r3, r7, #7
 80012fc:	2200      	movs	r2, #0
 80012fe:	701a      	strb	r2, [r3, #0]

	// Set up the local IMU
	bno055_address = BNO055_I2C_ADDR_LO << 1;
 8001300:	4b1d      	ldr	r3, [pc, #116]	@ (8001378 <bno055_init+0x84>)
 8001302:	2250      	movs	r2, #80	@ 0x50
 8001304:	701a      	strb	r2, [r3, #0]
	status = bno055_setup();
 8001306:	1dfc      	adds	r4, r7, #7
 8001308:	f000 f98a 	bl	8001620 <bno055_setup>
 800130c:	0003      	movs	r3, r0
 800130e:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8001310:	1dfb      	adds	r3, r7, #7
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	b25b      	sxtb	r3, r3
 8001316:	2b00      	cmp	r3, #0
 8001318:	d003      	beq.n	8001322 <bno055_init+0x2e>
 800131a:	1dfb      	adds	r3, r7, #7
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	b25b      	sxtb	r3, r3
 8001320:	e026      	b.n	8001370 <bno055_init+0x7c>

	status = bno055_setOperationModeNDOF();
 8001322:	1dfc      	adds	r4, r7, #7
 8001324:	f000 f895 	bl	8001452 <bno055_setOperationModeNDOF>
 8001328:	0003      	movs	r3, r0
 800132a:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800132c:	1dfb      	adds	r3, r7, #7
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	b25b      	sxtb	r3, r3
 8001332:	2b00      	cmp	r3, #0
 8001334:	d003      	beq.n	800133e <bno055_init+0x4a>
 8001336:	1dfb      	adds	r3, r7, #7
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	b25b      	sxtb	r3, r3
 800133c:	e018      	b.n	8001370 <bno055_init+0x7c>

	// Setup the remote IMU
	bno055_address = BNO055_I2C_ADDR_HI << 1;
 800133e:	4b0e      	ldr	r3, [pc, #56]	@ (8001378 <bno055_init+0x84>)
 8001340:	2252      	movs	r2, #82	@ 0x52
 8001342:	701a      	strb	r2, [r3, #0]
	status = bno055_setup();
 8001344:	1dfc      	adds	r4, r7, #7
 8001346:	f000 f96b 	bl	8001620 <bno055_setup>
 800134a:	0003      	movs	r3, r0
 800134c:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800134e:	1dfb      	adds	r3, r7, #7
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	b25b      	sxtb	r3, r3
 8001354:	2b00      	cmp	r3, #0
 8001356:	d003      	beq.n	8001360 <bno055_init+0x6c>
 8001358:	1dfb      	adds	r3, r7, #7
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	b25b      	sxtb	r3, r3
 800135e:	e007      	b.n	8001370 <bno055_init+0x7c>

	status = bno055_setOperationModeNDOF();
 8001360:	1dfc      	adds	r4, r7, #7
 8001362:	f000 f876 	bl	8001452 <bno055_setOperationModeNDOF>
 8001366:	0003      	movs	r3, r0
 8001368:	7023      	strb	r3, [r4, #0]
	return status;
 800136a:	1dfb      	adds	r3, r7, #7
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	b25b      	sxtb	r3, r3
}
 8001370:	0018      	movs	r0, r3
 8001372:	46bd      	mov	sp, r7
 8001374:	b003      	add	sp, #12
 8001376:	bd90      	pop	{r4, r7, pc}
 8001378:	200002e1 	.word	0x200002e1

0800137c <bno055_setPage>:

int8_t bno055_setPage(uint8_t page)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	0002      	movs	r2, r0
 8001384:	1dfb      	adds	r3, r7, #7
 8001386:	701a      	strb	r2, [r3, #0]
	i2c_tx_buffer[0] = BNO055_PAGE_ID;
 8001388:	4b08      	ldr	r3, [pc, #32]	@ (80013ac <bno055_setPage+0x30>)
 800138a:	2207      	movs	r2, #7
 800138c:	701a      	strb	r2, [r3, #0]
	i2c_tx_buffer[1] = page;
 800138e:	4b07      	ldr	r3, [pc, #28]	@ (80013ac <bno055_setPage+0x30>)
 8001390:	1dfa      	adds	r2, r7, #7
 8001392:	7812      	ldrb	r2, [r2, #0]
 8001394:	705a      	strb	r2, [r3, #1]
	return bno055_write(i2c_tx_buffer, 2);
 8001396:	4b05      	ldr	r3, [pc, #20]	@ (80013ac <bno055_setPage+0x30>)
 8001398:	2102      	movs	r1, #2
 800139a:	0018      	movs	r0, r3
 800139c:	f000 fab0 	bl	8001900 <bno055_write>
 80013a0:	0003      	movs	r3, r0
}
 80013a2:	0018      	movs	r0, r3
 80013a4:	46bd      	mov	sp, r7
 80013a6:	b002      	add	sp, #8
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	46c0      	nop			@ (mov r8, r8)
 80013ac:	200000e0 	.word	0x200000e0

080013b0 <bno055_setOperationMode>:
{
	return bno055_read(BNO055_OPR_MODE, mode, 1);
}

int8_t bno055_setOperationMode(bno055_opmode_t mode)
{
 80013b0:	b5b0      	push	{r4, r5, r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	0002      	movs	r2, r0
 80013b8:	1dfb      	adds	r3, r7, #7
 80013ba:	701a      	strb	r2, [r3, #0]
	int8_t status = HAL_OK;
 80013bc:	210f      	movs	r1, #15
 80013be:	187b      	adds	r3, r7, r1
 80013c0:	2200      	movs	r2, #0
 80013c2:	701a      	strb	r2, [r3, #0]
	i2c_tx_buffer[0] = BNO055_OPR_MODE;
 80013c4:	4b1d      	ldr	r3, [pc, #116]	@ (800143c <bno055_setOperationMode+0x8c>)
 80013c6:	223d      	movs	r2, #61	@ 0x3d
 80013c8:	701a      	strb	r2, [r3, #0]
	i2c_tx_buffer[1] = mode;
 80013ca:	4b1c      	ldr	r3, [pc, #112]	@ (800143c <bno055_setOperationMode+0x8c>)
 80013cc:	1dfa      	adds	r2, r7, #7
 80013ce:	7812      	ldrb	r2, [r2, #0]
 80013d0:	705a      	strb	r2, [r3, #1]
	status = bno055_write(i2c_tx_buffer, 2);
 80013d2:	000d      	movs	r5, r1
 80013d4:	187c      	adds	r4, r7, r1
 80013d6:	4b19      	ldr	r3, [pc, #100]	@ (800143c <bno055_setOperationMode+0x8c>)
 80013d8:	2102      	movs	r1, #2
 80013da:	0018      	movs	r0, r3
 80013dc:	f000 fa90 	bl	8001900 <bno055_write>
 80013e0:	0003      	movs	r3, r0
 80013e2:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80013e4:	197b      	adds	r3, r7, r5
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	b25b      	sxtb	r3, r3
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d003      	beq.n	80013f6 <bno055_setOperationMode+0x46>
 80013ee:	197b      	adds	r3, r7, r5
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	b25b      	sxtb	r3, r3
 80013f4:	e01e      	b.n	8001434 <bno055_setOperationMode+0x84>

	status = bno055_poll_transaction();
 80013f6:	250f      	movs	r5, #15
 80013f8:	197c      	adds	r4, r7, r5
 80013fa:	f000 f8bf 	bl	800157c <bno055_poll_transaction>
 80013fe:	0003      	movs	r3, r0
 8001400:	7023      	strb	r3, [r4, #0]
//	bno055_writeData(BNO055_OPR_MODE, mode);
	if(status != HAL_OK){return status;}
 8001402:	002a      	movs	r2, r5
 8001404:	18bb      	adds	r3, r7, r2
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	b25b      	sxtb	r3, r3
 800140a:	2b00      	cmp	r3, #0
 800140c:	d003      	beq.n	8001416 <bno055_setOperationMode+0x66>
 800140e:	18bb      	adds	r3, r7, r2
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	b25b      	sxtb	r3, r3
 8001414:	e00e      	b.n	8001434 <bno055_setOperationMode+0x84>

	if (mode == BNO055_OPERATION_MODE_CONFIG)
 8001416:	1dfb      	adds	r3, r7, #7
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d103      	bne.n	8001426 <bno055_setOperationMode+0x76>
	{
		bno055_delay(19);
 800141e:	2013      	movs	r0, #19
 8001420:	f7ff ff5c 	bl	80012dc <bno055_delay>
 8001424:	e002      	b.n	800142c <bno055_setOperationMode+0x7c>
	}
	else
	{
		bno055_delay(7);
 8001426:	2007      	movs	r0, #7
 8001428:	f7ff ff58 	bl	80012dc <bno055_delay>
	}
	return status;
 800142c:	230f      	movs	r3, #15
 800142e:	18fb      	adds	r3, r7, r3
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	b25b      	sxtb	r3, r3
}
 8001434:	0018      	movs	r0, r3
 8001436:	46bd      	mov	sp, r7
 8001438:	b004      	add	sp, #16
 800143a:	bdb0      	pop	{r4, r5, r7, pc}
 800143c:	200000e0 	.word	0x200000e0

08001440 <bno055_setOperationModeConfig>:

int8_t bno055_setOperationModeConfig()
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
	return bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8001444:	2000      	movs	r0, #0
 8001446:	f7ff ffb3 	bl	80013b0 <bno055_setOperationMode>
 800144a:	0003      	movs	r3, r0
}
 800144c:	0018      	movs	r0, r3
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <bno055_setOperationModeNDOF>:

int8_t bno055_setOperationModeNDOF()
{
 8001452:	b580      	push	{r7, lr}
 8001454:	af00      	add	r7, sp, #0
	return bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8001456:	200c      	movs	r0, #12
 8001458:	f7ff ffaa 	bl	80013b0 <bno055_setOperationMode>
 800145c:	0003      	movs	r3, r0
}
 800145e:	0018      	movs	r0, r3
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}

08001464 <bno055_setExternalCrystalUse>:

int8_t bno055_setExternalCrystalUse(uint8_t state)
{
 8001464:	b5b0      	push	{r4, r5, r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	0002      	movs	r2, r0
 800146c:	1dfb      	adds	r3, r7, #7
 800146e:	701a      	strb	r2, [r3, #0]
	int8_t status = HAL_OK;
 8001470:	250f      	movs	r5, #15
 8001472:	197b      	adds	r3, r7, r5
 8001474:	2200      	movs	r2, #0
 8001476:	701a      	strb	r2, [r3, #0]
	status = bno055_setPage(0);
 8001478:	197c      	adds	r4, r7, r5
 800147a:	2000      	movs	r0, #0
 800147c:	f7ff ff7e 	bl	800137c <bno055_setPage>
 8001480:	0003      	movs	r3, r0
 8001482:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8001484:	002a      	movs	r2, r5
 8001486:	18bb      	adds	r3, r7, r2
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	b25b      	sxtb	r3, r3
 800148c:	2b00      	cmp	r3, #0
 800148e:	d003      	beq.n	8001498 <bno055_setExternalCrystalUse+0x34>
 8001490:	18bb      	adds	r3, r7, r2
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	b25b      	sxtb	r3, r3
 8001496:	e069      	b.n	800156c <bno055_setExternalCrystalUse+0x108>

	status = bno055_poll_transaction();
 8001498:	250f      	movs	r5, #15
 800149a:	197c      	adds	r4, r7, r5
 800149c:	f000 f86e 	bl	800157c <bno055_poll_transaction>
 80014a0:	0003      	movs	r3, r0
 80014a2:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80014a4:	002a      	movs	r2, r5
 80014a6:	18bb      	adds	r3, r7, r2
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	b25b      	sxtb	r3, r3
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d003      	beq.n	80014b8 <bno055_setExternalCrystalUse+0x54>
 80014b0:	18bb      	adds	r3, r7, r2
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	b25b      	sxtb	r3, r3
 80014b6:	e059      	b.n	800156c <bno055_setExternalCrystalUse+0x108>

	status = bno055_read(BNO055_SYS_TRIGGER, i2c_rx_buffer, 1);
 80014b8:	250f      	movs	r5, #15
 80014ba:	197c      	adds	r4, r7, r5
 80014bc:	4b2d      	ldr	r3, [pc, #180]	@ (8001574 <bno055_setExternalCrystalUse+0x110>)
 80014be:	2201      	movs	r2, #1
 80014c0:	0019      	movs	r1, r3
 80014c2:	203f      	movs	r0, #63	@ 0x3f
 80014c4:	f000 fa56 	bl	8001974 <bno055_read>
 80014c8:	0003      	movs	r3, r0
 80014ca:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80014cc:	197b      	adds	r3, r7, r5
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	b25b      	sxtb	r3, r3
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d003      	beq.n	80014de <bno055_setExternalCrystalUse+0x7a>
 80014d6:	197b      	adds	r3, r7, r5
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	b25b      	sxtb	r3, r3
 80014dc:	e046      	b.n	800156c <bno055_setExternalCrystalUse+0x108>

	status = bno055_poll_transaction();
 80014de:	250f      	movs	r5, #15
 80014e0:	197c      	adds	r4, r7, r5
 80014e2:	f000 f84b 	bl	800157c <bno055_poll_transaction>
 80014e6:	0003      	movs	r3, r0
 80014e8:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80014ea:	002a      	movs	r2, r5
 80014ec:	18bb      	adds	r3, r7, r2
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	b25b      	sxtb	r3, r3
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d003      	beq.n	80014fe <bno055_setExternalCrystalUse+0x9a>
 80014f6:	18bb      	adds	r3, r7, r2
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	b25b      	sxtb	r3, r3
 80014fc:	e036      	b.n	800156c <bno055_setExternalCrystalUse+0x108>

	i2c_rx_buffer[0] |= (state == 1) ? 0x80 : 0x0;
 80014fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001574 <bno055_setExternalCrystalUse+0x110>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	b25a      	sxtb	r2, r3
 8001504:	1dfb      	adds	r3, r7, #7
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d102      	bne.n	8001512 <bno055_setExternalCrystalUse+0xae>
 800150c:	2380      	movs	r3, #128	@ 0x80
 800150e:	425b      	negs	r3, r3
 8001510:	e000      	b.n	8001514 <bno055_setExternalCrystalUse+0xb0>
 8001512:	2300      	movs	r3, #0
 8001514:	4313      	orrs	r3, r2
 8001516:	b25b      	sxtb	r3, r3
 8001518:	b2da      	uxtb	r2, r3
 800151a:	4b16      	ldr	r3, [pc, #88]	@ (8001574 <bno055_setExternalCrystalUse+0x110>)
 800151c:	701a      	strb	r2, [r3, #0]
	i2c_tx_buffer[0] = BNO055_SYS_TRIGGER;
 800151e:	4b16      	ldr	r3, [pc, #88]	@ (8001578 <bno055_setExternalCrystalUse+0x114>)
 8001520:	223f      	movs	r2, #63	@ 0x3f
 8001522:	701a      	strb	r2, [r3, #0]
	i2c_tx_buffer[1] = i2c_rx_buffer[0];
 8001524:	4b13      	ldr	r3, [pc, #76]	@ (8001574 <bno055_setExternalCrystalUse+0x110>)
 8001526:	781a      	ldrb	r2, [r3, #0]
 8001528:	4b13      	ldr	r3, [pc, #76]	@ (8001578 <bno055_setExternalCrystalUse+0x114>)
 800152a:	705a      	strb	r2, [r3, #1]
	status = bno055_write(i2c_tx_buffer, 2);
 800152c:	250f      	movs	r5, #15
 800152e:	197c      	adds	r4, r7, r5
 8001530:	4b11      	ldr	r3, [pc, #68]	@ (8001578 <bno055_setExternalCrystalUse+0x114>)
 8001532:	2102      	movs	r1, #2
 8001534:	0018      	movs	r0, r3
 8001536:	f000 f9e3 	bl	8001900 <bno055_write>
 800153a:	0003      	movs	r3, r0
 800153c:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800153e:	197b      	adds	r3, r7, r5
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	b25b      	sxtb	r3, r3
 8001544:	2b00      	cmp	r3, #0
 8001546:	d003      	beq.n	8001550 <bno055_setExternalCrystalUse+0xec>
 8001548:	197b      	adds	r3, r7, r5
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	b25b      	sxtb	r3, r3
 800154e:	e00d      	b.n	800156c <bno055_setExternalCrystalUse+0x108>

	status = bno055_poll_transaction();
 8001550:	250f      	movs	r5, #15
 8001552:	197c      	adds	r4, r7, r5
 8001554:	f000 f812 	bl	800157c <bno055_poll_transaction>
 8001558:	0003      	movs	r3, r0
 800155a:	7023      	strb	r3, [r4, #0]
	bno055_delay(700);
 800155c:	23af      	movs	r3, #175	@ 0xaf
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	0018      	movs	r0, r3
 8001562:	f7ff febb 	bl	80012dc <bno055_delay>
	return status;
 8001566:	197b      	adds	r3, r7, r5
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	b25b      	sxtb	r3, r3
}
 800156c:	0018      	movs	r0, r3
 800156e:	46bd      	mov	sp, r7
 8001570:	b004      	add	sp, #16
 8001572:	bdb0      	pop	{r4, r5, r7, pc}
 8001574:	200001e0 	.word	0x200001e0
 8001578:	200000e0 	.word	0x200000e0

0800157c <bno055_poll_transaction>:

int8_t bno055_enableExternalCrystal() { return bno055_setExternalCrystalUse(1); }
int8_t bno055_disableExternalCrystal() { return bno055_setExternalCrystalUse(0); }

int8_t bno055_poll_transaction()
{
 800157c:	b590      	push	{r4, r7, lr}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
	int8_t status = HAL_BUSY;
 8001582:	1dfb      	adds	r3, r7, #7
 8001584:	2202      	movs	r2, #2
 8001586:	701a      	strb	r2, [r3, #0]

	while(status == HAL_BUSY)
 8001588:	e004      	b.n	8001594 <bno055_poll_transaction+0x18>
	{
		status = monitor_i2c();
 800158a:	1dfc      	adds	r4, r7, #7
 800158c:	f000 f952 	bl	8001834 <monitor_i2c>
 8001590:	0003      	movs	r3, r0
 8001592:	7023      	strb	r3, [r4, #0]
	while(status == HAL_BUSY)
 8001594:	1dfb      	adds	r3, r7, #7
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	b25b      	sxtb	r3, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d0f5      	beq.n	800158a <bno055_poll_transaction+0xe>
	}

	return status;
 800159e:	1dfb      	adds	r3, r7, #7
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	b25b      	sxtb	r3, r3
}
 80015a4:	0018      	movs	r0, r3
 80015a6:	46bd      	mov	sp, r7
 80015a8:	b003      	add	sp, #12
 80015aa:	bd90      	pop	{r4, r7, pc}

080015ac <bno055_reset>:

int8_t bno055_reset()
{
 80015ac:	b590      	push	{r4, r7, lr}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
	int8_t status = HAL_OK;
 80015b2:	1dfb      	adds	r3, r7, #7
 80015b4:	2200      	movs	r2, #0
 80015b6:	701a      	strb	r2, [r3, #0]
	i2c_tx_buffer[0] = BNO055_SYS_TRIGGER;
 80015b8:	4b18      	ldr	r3, [pc, #96]	@ (800161c <bno055_reset+0x70>)
 80015ba:	223f      	movs	r2, #63	@ 0x3f
 80015bc:	701a      	strb	r2, [r3, #0]
	i2c_tx_buffer[1] = 0x20;
 80015be:	4b17      	ldr	r3, [pc, #92]	@ (800161c <bno055_reset+0x70>)
 80015c0:	2220      	movs	r2, #32
 80015c2:	705a      	strb	r2, [r3, #1]
	status = bno055_write(i2c_tx_buffer, 2);
 80015c4:	1dfc      	adds	r4, r7, #7
 80015c6:	4b15      	ldr	r3, [pc, #84]	@ (800161c <bno055_reset+0x70>)
 80015c8:	2102      	movs	r1, #2
 80015ca:	0018      	movs	r0, r3
 80015cc:	f000 f998 	bl	8001900 <bno055_write>
 80015d0:	0003      	movs	r3, r0
 80015d2:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80015d4:	1dfb      	adds	r3, r7, #7
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	b25b      	sxtb	r3, r3
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d003      	beq.n	80015e6 <bno055_reset+0x3a>
 80015de:	1dfb      	adds	r3, r7, #7
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	b25b      	sxtb	r3, r3
 80015e4:	e015      	b.n	8001612 <bno055_reset+0x66>

	status = bno055_poll_transaction();
 80015e6:	1dfc      	adds	r4, r7, #7
 80015e8:	f7ff ffc8 	bl	800157c <bno055_poll_transaction>
 80015ec:	0003      	movs	r3, r0
 80015ee:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80015f0:	1dfb      	adds	r3, r7, #7
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	b25b      	sxtb	r3, r3
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d003      	beq.n	8001602 <bno055_reset+0x56>
 80015fa:	1dfb      	adds	r3, r7, #7
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	b25b      	sxtb	r3, r3
 8001600:	e007      	b.n	8001612 <bno055_reset+0x66>

	bno055_delay(700);
 8001602:	23af      	movs	r3, #175	@ 0xaf
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	0018      	movs	r0, r3
 8001608:	f7ff fe68 	bl	80012dc <bno055_delay>
	return status;
 800160c:	1dfb      	adds	r3, r7, #7
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	b25b      	sxtb	r3, r3
}
 8001612:	0018      	movs	r0, r3
 8001614:	46bd      	mov	sp, r7
 8001616:	b003      	add	sp, #12
 8001618:	bd90      	pop	{r4, r7, pc}
 800161a:	46c0      	nop			@ (mov r8, r8)
 800161c:	200000e0 	.word	0x200000e0

08001620 <bno055_setup>:

	return bno055_read(BNO055_TEMP, (uint8_t*) temp, 1);
}

int8_t bno055_setup()
{
 8001620:	b590      	push	{r4, r7, lr}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
	int8_t status = HAL_OK;
 8001626:	1dfb      	adds	r3, r7, #7
 8001628:	2200      	movs	r2, #0
 800162a:	701a      	strb	r2, [r3, #0]
	read_index = 0;
 800162c:	4b38      	ldr	r3, [pc, #224]	@ (8001710 <bno055_setup+0xf0>)
 800162e:	2200      	movs	r2, #0
 8001630:	701a      	strb	r2, [r3, #0]
	status = bno055_reset();
 8001632:	1dfc      	adds	r4, r7, #7
 8001634:	f7ff ffba 	bl	80015ac <bno055_reset>
 8001638:	0003      	movs	r3, r0
 800163a:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800163c:	1dfb      	adds	r3, r7, #7
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	b25b      	sxtb	r3, r3
 8001642:	2b00      	cmp	r3, #0
 8001644:	d003      	beq.n	800164e <bno055_setup+0x2e>
 8001646:	1dfb      	adds	r3, r7, #7
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	b25b      	sxtb	r3, r3
 800164c:	e05c      	b.n	8001708 <bno055_setup+0xe8>

	status = bno055_read(BNO055_CHIP_ID, i2c_rx_buffer, 1);
 800164e:	1dfc      	adds	r4, r7, #7
 8001650:	4b30      	ldr	r3, [pc, #192]	@ (8001714 <bno055_setup+0xf4>)
 8001652:	2201      	movs	r2, #1
 8001654:	0019      	movs	r1, r3
 8001656:	2000      	movs	r0, #0
 8001658:	f000 f98c 	bl	8001974 <bno055_read>
 800165c:	0003      	movs	r3, r0
 800165e:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8001660:	1dfb      	adds	r3, r7, #7
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	b25b      	sxtb	r3, r3
 8001666:	2b00      	cmp	r3, #0
 8001668:	d003      	beq.n	8001672 <bno055_setup+0x52>
 800166a:	1dfb      	adds	r3, r7, #7
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	b25b      	sxtb	r3, r3
 8001670:	e04a      	b.n	8001708 <bno055_setup+0xe8>

	status = bno055_poll_transaction();
 8001672:	1dfc      	adds	r4, r7, #7
 8001674:	f7ff ff82 	bl	800157c <bno055_poll_transaction>
 8001678:	0003      	movs	r3, r0
 800167a:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800167c:	1dfb      	adds	r3, r7, #7
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	b25b      	sxtb	r3, r3
 8001682:	2b00      	cmp	r3, #0
 8001684:	d003      	beq.n	800168e <bno055_setup+0x6e>
 8001686:	1dfb      	adds	r3, r7, #7
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	b25b      	sxtb	r3, r3
 800168c:	e03c      	b.n	8001708 <bno055_setup+0xe8>

	if(i2c_rx_buffer[0] != BNO055_ID)
 800168e:	4b21      	ldr	r3, [pc, #132]	@ (8001714 <bno055_setup+0xf4>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	2ba0      	cmp	r3, #160	@ 0xa0
 8001694:	d001      	beq.n	800169a <bno055_setup+0x7a>
	{
		return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e036      	b.n	8001708 <bno055_setup+0xe8>
	}
	status = bno055_setPage(0);
 800169a:	1dfc      	adds	r4, r7, #7
 800169c:	2000      	movs	r0, #0
 800169e:	f7ff fe6d 	bl	800137c <bno055_setPage>
 80016a2:	0003      	movs	r3, r0
 80016a4:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80016a6:	1dfb      	adds	r3, r7, #7
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	b25b      	sxtb	r3, r3
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d003      	beq.n	80016b8 <bno055_setup+0x98>
 80016b0:	1dfb      	adds	r3, r7, #7
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	b25b      	sxtb	r3, r3
 80016b6:	e027      	b.n	8001708 <bno055_setup+0xe8>

	status = bno055_poll_transaction();
 80016b8:	1dfc      	adds	r4, r7, #7
 80016ba:	f7ff ff5f 	bl	800157c <bno055_poll_transaction>
 80016be:	0003      	movs	r3, r0
 80016c0:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80016c2:	1dfb      	adds	r3, r7, #7
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	b25b      	sxtb	r3, r3
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d003      	beq.n	80016d4 <bno055_setup+0xb4>
 80016cc:	1dfb      	adds	r3, r7, #7
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	b25b      	sxtb	r3, r3
 80016d2:	e019      	b.n	8001708 <bno055_setup+0xe8>

	status = bno055_setExternalCrystalUse(0);
 80016d4:	1dfc      	adds	r4, r7, #7
 80016d6:	2000      	movs	r0, #0
 80016d8:	f7ff fec4 	bl	8001464 <bno055_setExternalCrystalUse>
 80016dc:	0003      	movs	r3, r0
 80016de:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80016e0:	1dfb      	adds	r3, r7, #7
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	b25b      	sxtb	r3, r3
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d003      	beq.n	80016f2 <bno055_setup+0xd2>
 80016ea:	1dfb      	adds	r3, r7, #7
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	b25b      	sxtb	r3, r3
 80016f0:	e00a      	b.n	8001708 <bno055_setup+0xe8>

	// Select BNO055 config mode
	status = bno055_setOperationModeConfig();
 80016f2:	1dfc      	adds	r4, r7, #7
 80016f4:	f7ff fea4 	bl	8001440 <bno055_setOperationModeConfig>
 80016f8:	0003      	movs	r3, r0
 80016fa:	7023      	strb	r3, [r4, #0]
	bno055_delay(10);
 80016fc:	200a      	movs	r0, #10
 80016fe:	f7ff fded 	bl	80012dc <bno055_delay>
	return status;
 8001702:	1dfb      	adds	r3, r7, #7
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	b25b      	sxtb	r3, r3
}
 8001708:	0018      	movs	r0, r3
 800170a:	46bd      	mov	sp, r7
 800170c:	b003      	add	sp, #12
 800170e:	bd90      	pop	{r4, r7, pc}
 8001710:	200002e0 	.word	0x200002e0
 8001714:	200001e0 	.word	0x200001e0

08001718 <bno055_rx>:
		bno055_read(mem_read_map[i].reg, &buffer[6 * i], mem_read_map[i].reg_len);
	}
}

uint8_t bno055_rx()
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
	if(i2c_rx_int)
 800171c:	4b07      	ldr	r3, [pc, #28]	@ (800173c <bno055_rx+0x24>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	b2db      	uxtb	r3, r3
 8001722:	2b00      	cmp	r3, #0
 8001724:	d004      	beq.n	8001730 <bno055_rx+0x18>
	{
		i2c_rx_int = 0;
 8001726:	4b05      	ldr	r3, [pc, #20]	@ (800173c <bno055_rx+0x24>)
 8001728:	2200      	movs	r2, #0
 800172a:	701a      	strb	r2, [r3, #0]
		return 1;
 800172c:	2301      	movs	r3, #1
 800172e:	e002      	b.n	8001736 <bno055_rx+0x1e>
	}
	return i2c_rx_int;
 8001730:	4b02      	ldr	r3, [pc, #8]	@ (800173c <bno055_rx+0x24>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	b2db      	uxtb	r3, r3
}
 8001736:	0018      	movs	r0, r3
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	2000000f 	.word	0x2000000f

08001740 <bno055_queue_transaction>:

int8_t bno055_queue_transaction()
{
 8001740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001742:	b085      	sub	sp, #20
 8001744:	af02      	add	r7, sp, #8
	uint8_t status = HAL_OK;
 8001746:	1d7b      	adds	r3, r7, #5
 8001748:	2200      	movs	r2, #0
 800174a:	701a      	strb	r2, [r3, #0]
	uint16_t start_register = 0;
 800174c:	1dbb      	adds	r3, r7, #6
 800174e:	2200      	movs	r2, #0
 8001750:	801a      	strh	r2, [r3, #0]
	if(bno055_address == BNO055_I2C_ADDR_LO << 1)
 8001752:	4b30      	ldr	r3, [pc, #192]	@ (8001814 <bno055_queue_transaction+0xd4>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	2b50      	cmp	r3, #80	@ 0x50
 8001758:	d103      	bne.n	8001762 <bno055_queue_transaction+0x22>
	{
		start_register = ACCELEROMETER_X;
 800175a:	1dbb      	adds	r3, r7, #6
 800175c:	2212      	movs	r2, #18
 800175e:	801a      	strh	r2, [r3, #0]
 8001760:	e002      	b.n	8001768 <bno055_queue_transaction+0x28>
	}
	else
	{
		start_register = REMOTE_ACCELEROMETER_X;
 8001762:	1dbb      	adds	r3, r7, #6
 8001764:	2228      	movs	r2, #40	@ 0x28
 8001766:	801a      	strh	r2, [r3, #0]
	}
	i2c_rx_int = 0;
 8001768:	4b2b      	ldr	r3, [pc, #172]	@ (8001818 <bno055_queue_transaction+0xd8>)
 800176a:	2200      	movs	r2, #0
 800176c:	701a      	strb	r2, [r3, #0]
	i2c_rx_time = HAL_GetTick();
 800176e:	f004 fa29 	bl	8005bc4 <HAL_GetTick>
 8001772:	0002      	movs	r2, r0
 8001774:	4b29      	ldr	r3, [pc, #164]	@ (800181c <bno055_queue_transaction+0xdc>)
 8001776:	601a      	str	r2, [r3, #0]
	status = HAL_I2C_Mem_Read_DMA(&hi2c1, bno055_address, mem_read_map[read_index].reg,
 8001778:	4b26      	ldr	r3, [pc, #152]	@ (8001814 <bno055_queue_transaction+0xd4>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	001d      	movs	r5, r3
 800177e:	4b28      	ldr	r3, [pc, #160]	@ (8001820 <bno055_queue_transaction+0xe0>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	001a      	movs	r2, r3
 8001784:	4b27      	ldr	r3, [pc, #156]	@ (8001824 <bno055_queue_transaction+0xe4>)
 8001786:	0052      	lsls	r2, r2, #1
 8001788:	5cd3      	ldrb	r3, [r2, r3]
 800178a:	001e      	movs	r6, r3
			I2C_MEMADD_SIZE_8BIT, (uint8_t*)(&holding_register_database[start_register + (3 * read_index)]),
 800178c:	1dbb      	adds	r3, r7, #6
 800178e:	881a      	ldrh	r2, [r3, #0]
 8001790:	4b23      	ldr	r3, [pc, #140]	@ (8001820 <bno055_queue_transaction+0xe0>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	0019      	movs	r1, r3
 8001796:	000b      	movs	r3, r1
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	185b      	adds	r3, r3, r1
 800179c:	18d3      	adds	r3, r2, r3
 800179e:	005a      	lsls	r2, r3, #1
 80017a0:	4b21      	ldr	r3, [pc, #132]	@ (8001828 <bno055_queue_transaction+0xe8>)
 80017a2:	18d3      	adds	r3, r2, r3
			mem_read_map[read_index].reg_len);
 80017a4:	4a1e      	ldr	r2, [pc, #120]	@ (8001820 <bno055_queue_transaction+0xe0>)
 80017a6:	7812      	ldrb	r2, [r2, #0]
 80017a8:	491e      	ldr	r1, [pc, #120]	@ (8001824 <bno055_queue_transaction+0xe4>)
 80017aa:	0052      	lsls	r2, r2, #1
 80017ac:	188a      	adds	r2, r1, r2
 80017ae:	3201      	adds	r2, #1
 80017b0:	7812      	ldrb	r2, [r2, #0]
	status = HAL_I2C_Mem_Read_DMA(&hi2c1, bno055_address, mem_read_map[read_index].reg,
 80017b2:	1d7c      	adds	r4, r7, #5
 80017b4:	481d      	ldr	r0, [pc, #116]	@ (800182c <bno055_queue_transaction+0xec>)
 80017b6:	9201      	str	r2, [sp, #4]
 80017b8:	9300      	str	r3, [sp, #0]
 80017ba:	2301      	movs	r3, #1
 80017bc:	0032      	movs	r2, r6
 80017be:	0029      	movs	r1, r5
 80017c0:	f005 fcba 	bl	8007138 <HAL_I2C_Mem_Read_DMA>
 80017c4:	0003      	movs	r3, r0
 80017c6:	7023      	strb	r3, [r4, #0]
	__HAL_DMA_DISABLE_IT(&hdma_i2c1_rx, DMA_IT_HT);
 80017c8:	4b19      	ldr	r3, [pc, #100]	@ (8001830 <bno055_queue_transaction+0xf0>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	4b18      	ldr	r3, [pc, #96]	@ (8001830 <bno055_queue_transaction+0xf0>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2104      	movs	r1, #4
 80017d4:	438a      	bics	r2, r1
 80017d6:	601a      	str	r2, [r3, #0]

	if(read_index == NUM_VECTORS - 1)
 80017d8:	4b11      	ldr	r3, [pc, #68]	@ (8001820 <bno055_queue_transaction+0xe0>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b06      	cmp	r3, #6
 80017de:	d10c      	bne.n	80017fa <bno055_queue_transaction+0xba>
	{
		// Reset the read index
		read_index = 0;
 80017e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001820 <bno055_queue_transaction+0xe0>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	701a      	strb	r2, [r3, #0]
		// Switch to the other IMU
		bno055_address = (bno055_address == (BNO055_I2C_ADDR_LO << 1))? (BNO055_I2C_ADDR_HI << 1): (BNO055_I2C_ADDR_LO << 1);
 80017e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001814 <bno055_queue_transaction+0xd4>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2b50      	cmp	r3, #80	@ 0x50
 80017ec:	d101      	bne.n	80017f2 <bno055_queue_transaction+0xb2>
 80017ee:	2252      	movs	r2, #82	@ 0x52
 80017f0:	e000      	b.n	80017f4 <bno055_queue_transaction+0xb4>
 80017f2:	2250      	movs	r2, #80	@ 0x50
 80017f4:	4b07      	ldr	r3, [pc, #28]	@ (8001814 <bno055_queue_transaction+0xd4>)
 80017f6:	701a      	strb	r2, [r3, #0]
 80017f8:	e005      	b.n	8001806 <bno055_queue_transaction+0xc6>
	}
	else
	{
		// Increment the read index to read the next vector on the next run
		read_index = read_index + 1;
 80017fa:	4b09      	ldr	r3, [pc, #36]	@ (8001820 <bno055_queue_transaction+0xe0>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	3301      	adds	r3, #1
 8001800:	b2da      	uxtb	r2, r3
 8001802:	4b07      	ldr	r3, [pc, #28]	@ (8001820 <bno055_queue_transaction+0xe0>)
 8001804:	701a      	strb	r2, [r3, #0]
	}
	return status;
 8001806:	1d7b      	adds	r3, r7, #5
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	b25b      	sxtb	r3, r3
}
 800180c:	0018      	movs	r0, r3
 800180e:	46bd      	mov	sp, r7
 8001810:	b003      	add	sp, #12
 8001812:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001814:	200002e1 	.word	0x200002e1
 8001818:	2000000f 	.word	0x2000000f
 800181c:	200002e8 	.word	0x200002e8
 8001820:	200002e0 	.word	0x200002e0
 8001824:	20000000 	.word	0x20000000
 8001828:	20000014 	.word	0x20000014
 800182c:	20000304 	.word	0x20000304
 8001830:	20000358 	.word	0x20000358

08001834 <monitor_i2c>:
//	status = bno055_write(i2c_rx_buffer, 2);
//	status |= bno055_poll_transaction();
}

int8_t monitor_i2c()
{
 8001834:	b590      	push	{r4, r7, lr}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
	int8_t status = HAL_OK;
 800183a:	1dfb      	adds	r3, r7, #7
 800183c:	2200      	movs	r2, #0
 800183e:	701a      	strb	r2, [r3, #0]

	// I2C error handling
	if(i2c_err_int)
 8001840:	4b2a      	ldr	r3, [pc, #168]	@ (80018ec <monitor_i2c+0xb8>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b00      	cmp	r3, #0
 8001848:	d018      	beq.n	800187c <monitor_i2c+0x48>
	{
		i2c_err_int = 0;
 800184a:	4b28      	ldr	r3, [pc, #160]	@ (80018ec <monitor_i2c+0xb8>)
 800184c:	2200      	movs	r2, #0
 800184e:	701a      	strb	r2, [r3, #0]
		status = i2c_reset();
 8001850:	1dfc      	adds	r4, r7, #7
 8001852:	f000 f909 	bl	8001a68 <i2c_reset>
 8001856:	0003      	movs	r3, r0
 8001858:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK)
 800185a:	1dfb      	adds	r3, r7, #7
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	b25b      	sxtb	r3, r3
 8001860:	2b00      	cmp	r3, #0
 8001862:	d006      	beq.n	8001872 <monitor_i2c+0x3e>
		{
			i2c_rx_int = 1;
 8001864:	4b22      	ldr	r3, [pc, #136]	@ (80018f0 <monitor_i2c+0xbc>)
 8001866:	2201      	movs	r2, #1
 8001868:	701a      	strb	r2, [r3, #0]
			return status;
 800186a:	1dfb      	adds	r3, r7, #7
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	b25b      	sxtb	r3, r3
 8001870:	e037      	b.n	80018e2 <monitor_i2c+0xae>
		}
		return handle_i2c_error(I2C_ERROR);
 8001872:	2018      	movs	r0, #24
 8001874:	f000 f956 	bl	8001b24 <handle_i2c_error>
 8001878:	0003      	movs	r3, r0
 800187a:	e032      	b.n	80018e2 <monitor_i2c+0xae>
	}

	// TX timeout handling
	if(!i2c_tx_int)
 800187c:	4b1d      	ldr	r3, [pc, #116]	@ (80018f4 <monitor_i2c+0xc0>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	b2db      	uxtb	r3, r3
 8001882:	2b00      	cmp	r3, #0
 8001884:	d112      	bne.n	80018ac <monitor_i2c+0x78>
	{
		if(HAL_GetTick() - i2c_tx_time >= 20)
 8001886:	f004 f99d 	bl	8005bc4 <HAL_GetTick>
 800188a:	0002      	movs	r2, r0
 800188c:	4b1a      	ldr	r3, [pc, #104]	@ (80018f8 <monitor_i2c+0xc4>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b13      	cmp	r3, #19
 8001894:	d907      	bls.n	80018a6 <monitor_i2c+0x72>
		{
			i2c_tx_int = 1;
 8001896:	4b17      	ldr	r3, [pc, #92]	@ (80018f4 <monitor_i2c+0xc0>)
 8001898:	2201      	movs	r2, #1
 800189a:	701a      	strb	r2, [r3, #0]
			return handle_i2c_error(I2C_TX_TIMEOUT);
 800189c:	2016      	movs	r0, #22
 800189e:	f000 f941 	bl	8001b24 <handle_i2c_error>
 80018a2:	0003      	movs	r3, r0
 80018a4:	e01d      	b.n	80018e2 <monitor_i2c+0xae>
		}
		status = HAL_BUSY;
 80018a6:	1dfb      	adds	r3, r7, #7
 80018a8:	2202      	movs	r2, #2
 80018aa:	701a      	strb	r2, [r3, #0]
	}

	// RX timeout handling
	if(!i2c_rx_int)
 80018ac:	4b10      	ldr	r3, [pc, #64]	@ (80018f0 <monitor_i2c+0xbc>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d112      	bne.n	80018dc <monitor_i2c+0xa8>
	{
		if(HAL_GetTick() - i2c_rx_time >= 20)
 80018b6:	f004 f985 	bl	8005bc4 <HAL_GetTick>
 80018ba:	0002      	movs	r2, r0
 80018bc:	4b0f      	ldr	r3, [pc, #60]	@ (80018fc <monitor_i2c+0xc8>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b13      	cmp	r3, #19
 80018c4:	d907      	bls.n	80018d6 <monitor_i2c+0xa2>
		{
			i2c_rx_int = 1;
 80018c6:	4b0a      	ldr	r3, [pc, #40]	@ (80018f0 <monitor_i2c+0xbc>)
 80018c8:	2201      	movs	r2, #1
 80018ca:	701a      	strb	r2, [r3, #0]
			return handle_i2c_error(I2C_RX_TIMEOUT);
 80018cc:	2017      	movs	r0, #23
 80018ce:	f000 f929 	bl	8001b24 <handle_i2c_error>
 80018d2:	0003      	movs	r3, r0
 80018d4:	e005      	b.n	80018e2 <monitor_i2c+0xae>
		}
		status = HAL_BUSY;
 80018d6:	1dfb      	adds	r3, r7, #7
 80018d8:	2202      	movs	r2, #2
 80018da:	701a      	strb	r2, [r3, #0]
	}

	return status;
 80018dc:	1dfb      	adds	r3, r7, #7
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	b25b      	sxtb	r3, r3
}
 80018e2:	0018      	movs	r0, r3
 80018e4:	46bd      	mov	sp, r7
 80018e6:	b003      	add	sp, #12
 80018e8:	bd90      	pop	{r4, r7, pc}
 80018ea:	46c0      	nop			@ (mov r8, r8)
 80018ec:	200002ec 	.word	0x200002ec
 80018f0:	2000000f 	.word	0x2000000f
 80018f4:	2000000e 	.word	0x2000000e
 80018f8:	200002e4 	.word	0x200002e4
 80018fc:	200002e8 	.word	0x200002e8

08001900 <bno055_write>:

int8_t bno055_write(uint8_t *data, uint8_t len)
{
 8001900:	b590      	push	{r4, r7, lr}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	000a      	movs	r2, r1
 800190a:	1cfb      	adds	r3, r7, #3
 800190c:	701a      	strb	r2, [r3, #0]
	int8_t status = HAL_OK;
 800190e:	240f      	movs	r4, #15
 8001910:	193b      	adds	r3, r7, r4
 8001912:	2200      	movs	r2, #0
 8001914:	701a      	strb	r2, [r3, #0]
	i2c_tx_int = 0;
 8001916:	4b12      	ldr	r3, [pc, #72]	@ (8001960 <bno055_write+0x60>)
 8001918:	2200      	movs	r2, #0
 800191a:	701a      	strb	r2, [r3, #0]
	i2c_tx_time = HAL_GetTick();
 800191c:	f004 f952 	bl	8005bc4 <HAL_GetTick>
 8001920:	0002      	movs	r2, r0
 8001922:	4b10      	ldr	r3, [pc, #64]	@ (8001964 <bno055_write+0x64>)
 8001924:	601a      	str	r2, [r3, #0]
	status = HAL_I2C_Master_Transmit_DMA(&hi2c1, bno055_address, data, len);
 8001926:	4b10      	ldr	r3, [pc, #64]	@ (8001968 <bno055_write+0x68>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	0019      	movs	r1, r3
 800192c:	1cfb      	adds	r3, r7, #3
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	b29b      	uxth	r3, r3
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	480d      	ldr	r0, [pc, #52]	@ (800196c <bno055_write+0x6c>)
 8001936:	f005 f9cf 	bl	8006cd8 <HAL_I2C_Master_Transmit_DMA>
 800193a:	0003      	movs	r3, r0
 800193c:	001a      	movs	r2, r3
 800193e:	193b      	adds	r3, r7, r4
 8001940:	701a      	strb	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(&hdma_i2c1_tx, DMA_IT_HT);
 8001942:	4b0b      	ldr	r3, [pc, #44]	@ (8001970 <bno055_write+0x70>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	4b09      	ldr	r3, [pc, #36]	@ (8001970 <bno055_write+0x70>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2104      	movs	r1, #4
 800194e:	438a      	bics	r2, r1
 8001950:	601a      	str	r2, [r3, #0]

	return status;
 8001952:	193b      	adds	r3, r7, r4
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	b25b      	sxtb	r3, r3
}
 8001958:	0018      	movs	r0, r3
 800195a:	46bd      	mov	sp, r7
 800195c:	b005      	add	sp, #20
 800195e:	bd90      	pop	{r4, r7, pc}
 8001960:	2000000e 	.word	0x2000000e
 8001964:	200002e4 	.word	0x200002e4
 8001968:	200002e1 	.word	0x200002e1
 800196c:	20000304 	.word	0x20000304
 8001970:	200003b4 	.word	0x200003b4

08001974 <bno055_read>:

int8_t bno055_read(uint8_t reg, uint8_t *data, uint8_t len)
{
 8001974:	b5b0      	push	{r4, r5, r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6039      	str	r1, [r7, #0]
 800197c:	0011      	movs	r1, r2
 800197e:	1dfb      	adds	r3, r7, #7
 8001980:	1c02      	adds	r2, r0, #0
 8001982:	701a      	strb	r2, [r3, #0]
 8001984:	1dbb      	adds	r3, r7, #6
 8001986:	1c0a      	adds	r2, r1, #0
 8001988:	701a      	strb	r2, [r3, #0]
	int8_t status = HAL_OK;
 800198a:	240f      	movs	r4, #15
 800198c:	193b      	adds	r3, r7, r4
 800198e:	2200      	movs	r2, #0
 8001990:	701a      	strb	r2, [r3, #0]
	i2c_tx_int = 0;
 8001992:	4b2d      	ldr	r3, [pc, #180]	@ (8001a48 <bno055_read+0xd4>)
 8001994:	2200      	movs	r2, #0
 8001996:	701a      	strb	r2, [r3, #0]
	i2c_tx_time = HAL_GetTick();
 8001998:	f004 f914 	bl	8005bc4 <HAL_GetTick>
 800199c:	0002      	movs	r2, r0
 800199e:	4b2b      	ldr	r3, [pc, #172]	@ (8001a4c <bno055_read+0xd8>)
 80019a0:	601a      	str	r2, [r3, #0]
	status = HAL_I2C_Master_Transmit_DMA(&hi2c1, bno055_address, &reg, 1);
 80019a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001a50 <bno055_read+0xdc>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	0019      	movs	r1, r3
 80019a8:	1dfa      	adds	r2, r7, #7
 80019aa:	482a      	ldr	r0, [pc, #168]	@ (8001a54 <bno055_read+0xe0>)
 80019ac:	2301      	movs	r3, #1
 80019ae:	f005 f993 	bl	8006cd8 <HAL_I2C_Master_Transmit_DMA>
 80019b2:	0003      	movs	r3, r0
 80019b4:	001a      	movs	r2, r3
 80019b6:	193b      	adds	r3, r7, r4
 80019b8:	701a      	strb	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(&hdma_i2c1_tx, DMA_IT_HT);
 80019ba:	4b27      	ldr	r3, [pc, #156]	@ (8001a58 <bno055_read+0xe4>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	4b25      	ldr	r3, [pc, #148]	@ (8001a58 <bno055_read+0xe4>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2104      	movs	r1, #4
 80019c6:	438a      	bics	r2, r1
 80019c8:	601a      	str	r2, [r3, #0]
	if(status != HAL_OK){return status;}
 80019ca:	193b      	adds	r3, r7, r4
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	b25b      	sxtb	r3, r3
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d003      	beq.n	80019dc <bno055_read+0x68>
 80019d4:	193b      	adds	r3, r7, r4
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	b25b      	sxtb	r3, r3
 80019da:	e031      	b.n	8001a40 <bno055_read+0xcc>
	status = bno055_poll_transaction();
 80019dc:	250f      	movs	r5, #15
 80019de:	197c      	adds	r4, r7, r5
 80019e0:	f7ff fdcc 	bl	800157c <bno055_poll_transaction>
 80019e4:	0003      	movs	r3, r0
 80019e6:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80019e8:	002a      	movs	r2, r5
 80019ea:	18bb      	adds	r3, r7, r2
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	b25b      	sxtb	r3, r3
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d003      	beq.n	80019fc <bno055_read+0x88>
 80019f4:	18bb      	adds	r3, r7, r2
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	b25b      	sxtb	r3, r3
 80019fa:	e021      	b.n	8001a40 <bno055_read+0xcc>

	i2c_rx_int = 0;
 80019fc:	4b17      	ldr	r3, [pc, #92]	@ (8001a5c <bno055_read+0xe8>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	701a      	strb	r2, [r3, #0]
	i2c_rx_time = HAL_GetTick();
 8001a02:	f004 f8df 	bl	8005bc4 <HAL_GetTick>
 8001a06:	0002      	movs	r2, r0
 8001a08:	4b15      	ldr	r3, [pc, #84]	@ (8001a60 <bno055_read+0xec>)
 8001a0a:	601a      	str	r2, [r3, #0]
	status = HAL_I2C_Master_Receive_DMA(&hi2c1, bno055_address, data, len);
 8001a0c:	4b10      	ldr	r3, [pc, #64]	@ (8001a50 <bno055_read+0xdc>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	0019      	movs	r1, r3
 8001a12:	1dbb      	adds	r3, r7, #6
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	683a      	ldr	r2, [r7, #0]
 8001a1a:	480e      	ldr	r0, [pc, #56]	@ (8001a54 <bno055_read+0xe0>)
 8001a1c:	f005 fa86 	bl	8006f2c <HAL_I2C_Master_Receive_DMA>
 8001a20:	0003      	movs	r3, r0
 8001a22:	001a      	movs	r2, r3
 8001a24:	200f      	movs	r0, #15
 8001a26:	183b      	adds	r3, r7, r0
 8001a28:	701a      	strb	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(&hdma_i2c1_rx, DMA_IT_HT);
 8001a2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a64 <bno055_read+0xf0>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	4b0c      	ldr	r3, [pc, #48]	@ (8001a64 <bno055_read+0xf0>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2104      	movs	r1, #4
 8001a36:	438a      	bics	r2, r1
 8001a38:	601a      	str	r2, [r3, #0]

	return status;
 8001a3a:	183b      	adds	r3, r7, r0
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	b25b      	sxtb	r3, r3
}
 8001a40:	0018      	movs	r0, r3
 8001a42:	46bd      	mov	sp, r7
 8001a44:	b004      	add	sp, #16
 8001a46:	bdb0      	pop	{r4, r5, r7, pc}
 8001a48:	2000000e 	.word	0x2000000e
 8001a4c:	200002e4 	.word	0x200002e4
 8001a50:	200002e1 	.word	0x200002e1
 8001a54:	20000304 	.word	0x20000304
 8001a58:	200003b4 	.word	0x200003b4
 8001a5c:	2000000f 	.word	0x2000000f
 8001a60:	200002e8 	.word	0x200002e8
 8001a64:	20000358 	.word	0x20000358

08001a68 <i2c_reset>:

int8_t i2c_reset()
{
 8001a68:	b590      	push	{r4, r7, lr}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
	int8_t status = HAL_OK;
 8001a6e:	1dfb      	adds	r3, r7, #7
 8001a70:	2200      	movs	r2, #0
 8001a72:	701a      	strb	r2, [r3, #0]
	status = bno055_poll_transaction();
 8001a74:	1dfc      	adds	r4, r7, #7
 8001a76:	f7ff fd81 	bl	800157c <bno055_poll_transaction>
 8001a7a:	0003      	movs	r3, r0
 8001a7c:	7023      	strb	r3, [r4, #0]
	status |= HAL_I2C_DeInit(&hi2c1);
 8001a7e:	4b26      	ldr	r3, [pc, #152]	@ (8001b18 <i2c_reset+0xb0>)
 8001a80:	0018      	movs	r0, r3
 8001a82:	f005 f8f9 	bl	8006c78 <HAL_I2C_DeInit>
 8001a86:	0003      	movs	r3, r0
 8001a88:	b259      	sxtb	r1, r3
 8001a8a:	1dfb      	adds	r3, r7, #7
 8001a8c:	1dfa      	adds	r2, r7, #7
 8001a8e:	7812      	ldrb	r2, [r2, #0]
 8001a90:	430a      	orrs	r2, r1
 8001a92:	701a      	strb	r2, [r3, #0]
	__I2C1_FORCE_RESET();
 8001a94:	4b21      	ldr	r3, [pc, #132]	@ (8001b1c <i2c_reset+0xb4>)
 8001a96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a98:	4b20      	ldr	r3, [pc, #128]	@ (8001b1c <i2c_reset+0xb4>)
 8001a9a:	2180      	movs	r1, #128	@ 0x80
 8001a9c:	0389      	lsls	r1, r1, #14
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	62da      	str	r2, [r3, #44]	@ 0x2c
	HAL_Delay(100);
 8001aa2:	2064      	movs	r0, #100	@ 0x64
 8001aa4:	f004 f898 	bl	8005bd8 <HAL_Delay>
	__I2C1_RELEASE_RESET();
 8001aa8:	4b1c      	ldr	r3, [pc, #112]	@ (8001b1c <i2c_reset+0xb4>)
 8001aaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001aac:	4b1b      	ldr	r3, [pc, #108]	@ (8001b1c <i2c_reset+0xb4>)
 8001aae:	491c      	ldr	r1, [pc, #112]	@ (8001b20 <i2c_reset+0xb8>)
 8001ab0:	400a      	ands	r2, r1
 8001ab2:	62da      	str	r2, [r3, #44]	@ 0x2c
	status = HAL_I2C_Init(&hi2c1);
 8001ab4:	4b18      	ldr	r3, [pc, #96]	@ (8001b18 <i2c_reset+0xb0>)
 8001ab6:	0018      	movs	r0, r3
 8001ab8:	f005 f838 	bl	8006b2c <HAL_I2C_Init>
 8001abc:	0003      	movs	r3, r0
 8001abe:	001a      	movs	r2, r3
 8001ac0:	1dfb      	adds	r3, r7, #7
 8001ac2:	701a      	strb	r2, [r3, #0]
	status |= HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE);
 8001ac4:	4b14      	ldr	r3, [pc, #80]	@ (8001b18 <i2c_reset+0xb0>)
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	0018      	movs	r0, r3
 8001aca:	f007 f963 	bl	8008d94 <HAL_I2CEx_ConfigAnalogFilter>
 8001ace:	0003      	movs	r3, r0
 8001ad0:	b259      	sxtb	r1, r3
 8001ad2:	1dfb      	adds	r3, r7, #7
 8001ad4:	1dfa      	adds	r2, r7, #7
 8001ad6:	7812      	ldrb	r2, [r2, #0]
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	701a      	strb	r2, [r3, #0]
	status |= HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0);
 8001adc:	4b0e      	ldr	r3, [pc, #56]	@ (8001b18 <i2c_reset+0xb0>)
 8001ade:	2100      	movs	r1, #0
 8001ae0:	0018      	movs	r0, r3
 8001ae2:	f007 f9a3 	bl	8008e2c <HAL_I2CEx_ConfigDigitalFilter>
 8001ae6:	0003      	movs	r3, r0
 8001ae8:	b259      	sxtb	r1, r3
 8001aea:	1dfb      	adds	r3, r7, #7
 8001aec:	1dfa      	adds	r2, r7, #7
 8001aee:	7812      	ldrb	r2, [r2, #0]
 8001af0:	430a      	orrs	r2, r1
 8001af2:	701a      	strb	r2, [r3, #0]
	if(status != HAL_OK)
 8001af4:	1dfb      	adds	r3, r7, #7
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	b25b      	sxtb	r3, r3
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d004      	beq.n	8001b08 <i2c_reset+0xa0>
	{
		return handle_i2c_error(I2C_FATAL_ERROR);
 8001afe:	2019      	movs	r0, #25
 8001b00:	f000 f810 	bl	8001b24 <handle_i2c_error>
 8001b04:	0003      	movs	r3, r0
 8001b06:	e002      	b.n	8001b0e <i2c_reset+0xa6>
	}
	return status;
 8001b08:	1dfb      	adds	r3, r7, #7
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	b25b      	sxtb	r3, r3
}
 8001b0e:	0018      	movs	r0, r3
 8001b10:	46bd      	mov	sp, r7
 8001b12:	b003      	add	sp, #12
 8001b14:	bd90      	pop	{r4, r7, pc}
 8001b16:	46c0      	nop			@ (mov r8, r8)
 8001b18:	20000304 	.word	0x20000304
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	ffdfffff 	.word	0xffdfffff

08001b24 <handle_i2c_error>:

int8_t handle_i2c_error(int8_t error_code)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	0002      	movs	r2, r0
 8001b2c:	1dfb      	adds	r3, r7, #7
 8001b2e:	701a      	strb	r2, [r3, #0]
	holding_register_database[I2C_ERRORS] |= 1U << (error_code - I2C_TX_TIMEOUT);
 8001b30:	4b0a      	ldr	r3, [pc, #40]	@ (8001b5c <handle_i2c_error+0x38>)
 8001b32:	895a      	ldrh	r2, [r3, #10]
 8001b34:	1dfb      	adds	r3, r7, #7
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	b25b      	sxtb	r3, r3
 8001b3a:	3b16      	subs	r3, #22
 8001b3c:	2101      	movs	r1, #1
 8001b3e:	4099      	lsls	r1, r3
 8001b40:	000b      	movs	r3, r1
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	4313      	orrs	r3, r2
 8001b46:	b29a      	uxth	r2, r3
 8001b48:	4b04      	ldr	r3, [pc, #16]	@ (8001b5c <handle_i2c_error+0x38>)
 8001b4a:	815a      	strh	r2, [r3, #10]
	return error_code;
 8001b4c:	1dfb      	adds	r3, r7, #7
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	b25b      	sxtb	r3, r3
}
 8001b52:	0018      	movs	r0, r3
 8001b54:	46bd      	mov	sp, r7
 8001b56:	b002      	add	sp, #8
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	46c0      	nop			@ (mov r8, r8)
 8001b5c:	20000014 	.word	0x20000014

08001b60 <actuate>:
uint8_t rx_data[2];

float pid_step(pid_t *pid, float measurement, float setpoint);

int8_t actuate(uint8_t actuator, uint16_t current, uint16_t target)
{
 8001b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	0004      	movs	r4, r0
 8001b68:	0008      	movs	r0, r1
 8001b6a:	0011      	movs	r1, r2
 8001b6c:	1dfb      	adds	r3, r7, #7
 8001b6e:	1c22      	adds	r2, r4, #0
 8001b70:	701a      	strb	r2, [r3, #0]
 8001b72:	1d3b      	adds	r3, r7, #4
 8001b74:	1c02      	adds	r2, r0, #0
 8001b76:	801a      	strh	r2, [r3, #0]
 8001b78:	1cbb      	adds	r3, r7, #2
 8001b7a:	1c0a      	adds	r2, r1, #0
 8001b7c:	801a      	strh	r2, [r3, #0]
	if(selected_actuator != actuator)
 8001b7e:	4b6d      	ldr	r3, [pc, #436]	@ (8001d34 <actuate+0x1d4>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	1dfa      	adds	r2, r7, #7
 8001b84:	7812      	ldrb	r2, [r2, #0]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d100      	bne.n	8001b8c <actuate+0x2c>
 8001b8a:	e0b5      	b.n	8001cf8 <actuate+0x198>
	{
		int8_t status = HAL_OK;
 8001b8c:	200f      	movs	r0, #15
 8001b8e:	183b      	adds	r3, r7, r0
 8001b90:	2200      	movs	r2, #0
 8001b92:	701a      	strb	r2, [r3, #0]
		drv_command_t command = DEFAULT_DRV_COMMAND;
 8001b94:	260c      	movs	r6, #12
 8001b96:	19bb      	adds	r3, r7, r6
 8001b98:	4a67      	ldr	r2, [pc, #412]	@ (8001d38 <actuate+0x1d8>)
 8001b9a:	7812      	ldrb	r2, [r2, #0]
 8001b9c:	701a      	strb	r2, [r3, #0]
		drv_spi_in_t spi_in = DEFAULT_DRV_SPI_IN;
 8001b9e:	2308      	movs	r3, #8
 8001ba0:	18fb      	adds	r3, r7, r3
 8001ba2:	4a66      	ldr	r2, [pc, #408]	@ (8001d3c <actuate+0x1dc>)
 8001ba4:	7812      	ldrb	r2, [r2, #0]
 8001ba6:	701a      	strb	r2, [r3, #0]
		if(drv_on)
 8001ba8:	4b65      	ldr	r3, [pc, #404]	@ (8001d40 <actuate+0x1e0>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d059      	beq.n	8001c64 <actuate+0x104>
		{
			// Unlock the SPI_IN register. Refer to section 8.6.1.5
			command.spi_in_lock = SPI_IN_UNLOCK;
 8001bb0:	19bb      	adds	r3, r7, r6
 8001bb2:	781a      	ldrb	r2, [r3, #0]
 8001bb4:	2118      	movs	r1, #24
 8001bb6:	438a      	bics	r2, r1
 8001bb8:	1c11      	adds	r1, r2, #0
 8001bba:	2210      	movs	r2, #16
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	701a      	strb	r2, [r3, #0]
			status = DRV_SetCommand(&command);
 8001bc0:	0005      	movs	r5, r0
 8001bc2:	183c      	adds	r4, r7, r0
 8001bc4:	19bb      	adds	r3, r7, r6
 8001bc6:	0018      	movs	r0, r3
 8001bc8:	f000 fca2 	bl	8002510 <DRV_SetCommand>
 8001bcc:	0003      	movs	r3, r0
 8001bce:	7023      	strb	r3, [r4, #0]
			if(status != HAL_OK){return status;}
 8001bd0:	197b      	adds	r3, r7, r5
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	b25b      	sxtb	r3, r3
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d003      	beq.n	8001be2 <actuate+0x82>
 8001bda:	197b      	adds	r3, r7, r5
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	b25b      	sxtb	r3, r3
 8001be0:	e0a4      	b.n	8001d2c <actuate+0x1cc>

			// Turn off the DRV8244
			TIM1->CCR1 = 0;
 8001be2:	4b58      	ldr	r3, [pc, #352]	@ (8001d44 <actuate+0x1e4>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	635a      	str	r2, [r3, #52]	@ 0x34
			spi_in.s_drv_off = 1;
 8001be8:	2008      	movs	r0, #8
 8001bea:	183b      	adds	r3, r7, r0
 8001bec:	781a      	ldrb	r2, [r3, #0]
 8001bee:	2108      	movs	r1, #8
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	701a      	strb	r2, [r3, #0]
			spi_in.s_drv_off2 = 1;
 8001bf4:	183b      	adds	r3, r7, r0
 8001bf6:	781a      	ldrb	r2, [r3, #0]
 8001bf8:	2104      	movs	r1, #4
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	701a      	strb	r2, [r3, #0]
			status = DRV_SetSpiIn(&spi_in);
 8001bfe:	250f      	movs	r5, #15
 8001c00:	197c      	adds	r4, r7, r5
 8001c02:	183b      	adds	r3, r7, r0
 8001c04:	0018      	movs	r0, r3
 8001c06:	f000 fcb9 	bl	800257c <DRV_SetSpiIn>
 8001c0a:	0003      	movs	r3, r0
 8001c0c:	7023      	strb	r3, [r4, #0]
			if(status != HAL_OK){return status;}
 8001c0e:	197b      	adds	r3, r7, r5
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	b25b      	sxtb	r3, r3
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d003      	beq.n	8001c20 <actuate+0xc0>
 8001c18:	197b      	adds	r3, r7, r5
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	b25b      	sxtb	r3, r3
 8001c1e:	e085      	b.n	8001d2c <actuate+0x1cc>
			drv_on = 0;
 8001c20:	4b47      	ldr	r3, [pc, #284]	@ (8001d40 <actuate+0x1e0>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	701a      	strb	r2, [r3, #0]

			// Lock the SPI_IN register. Refer to section 8.6.1.5
			command.spi_in_lock = SPI_IN_LOCK;
 8001c26:	200c      	movs	r0, #12
 8001c28:	183b      	adds	r3, r7, r0
 8001c2a:	781a      	ldrb	r2, [r3, #0]
 8001c2c:	2118      	movs	r1, #24
 8001c2e:	438a      	bics	r2, r1
 8001c30:	1c11      	adds	r1, r2, #0
 8001c32:	2208      	movs	r2, #8
 8001c34:	430a      	orrs	r2, r1
 8001c36:	701a      	strb	r2, [r3, #0]
			status = DRV_SetCommand(&command);
 8001c38:	250f      	movs	r5, #15
 8001c3a:	197c      	adds	r4, r7, r5
 8001c3c:	183b      	adds	r3, r7, r0
 8001c3e:	0018      	movs	r0, r3
 8001c40:	f000 fc66 	bl	8002510 <DRV_SetCommand>
 8001c44:	0003      	movs	r3, r0
 8001c46:	7023      	strb	r3, [r4, #0]
			if(status != HAL_OK){return status;}
 8001c48:	197b      	adds	r3, r7, r5
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	b25b      	sxtb	r3, r3
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d003      	beq.n	8001c5a <actuate+0xfa>
 8001c52:	197b      	adds	r3, r7, r5
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	b25b      	sxtb	r3, r3
 8001c58:	e068      	b.n	8001d2c <actuate+0x1cc>

			time_ms = HAL_GetTick();
 8001c5a:	f003 ffb3 	bl	8005bc4 <HAL_GetTick>
 8001c5e:	0002      	movs	r2, r0
 8001c60:	4b39      	ldr	r3, [pc, #228]	@ (8001d48 <actuate+0x1e8>)
 8001c62:	601a      	str	r2, [r3, #0]
		}
		if(HAL_GetTick() - time_ms >= ACTUATOR_TRANSIENT_DELAY)
 8001c64:	f003 ffae 	bl	8005bc4 <HAL_GetTick>
 8001c68:	0002      	movs	r2, r0
 8001c6a:	4b37      	ldr	r3, [pc, #220]	@ (8001d48 <actuate+0x1e8>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	1ad2      	subs	r2, r2, r3
 8001c70:	23fa      	movs	r3, #250	@ 0xfa
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d33a      	bcc.n	8001cee <actuate+0x18e>
		{
			if(!pin_off[selected_actuator])
 8001c78:	4b2e      	ldr	r3, [pc, #184]	@ (8001d34 <actuate+0x1d4>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	001a      	movs	r2, r3
 8001c7e:	4b33      	ldr	r3, [pc, #204]	@ (8001d4c <actuate+0x1ec>)
 8001c80:	5c9b      	ldrb	r3, [r3, r2]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d115      	bne.n	8001cb2 <actuate+0x152>
			{
				pin_off[selected_actuator] = 1;
 8001c86:	4b2b      	ldr	r3, [pc, #172]	@ (8001d34 <actuate+0x1d4>)
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	001a      	movs	r2, r3
 8001c8c:	4b2f      	ldr	r3, [pc, #188]	@ (8001d4c <actuate+0x1ec>)
 8001c8e:	2101      	movs	r1, #1
 8001c90:	5499      	strb	r1, [r3, r2]
				// Deactivate the old actuator
				HAL_GPIO_WritePin(port_map[selected_actuator], pin_map[selected_actuator], GPIO_PIN_RESET);
 8001c92:	4b28      	ldr	r3, [pc, #160]	@ (8001d34 <actuate+0x1d4>)
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	001a      	movs	r2, r3
 8001c98:	4b2d      	ldr	r3, [pc, #180]	@ (8001d50 <actuate+0x1f0>)
 8001c9a:	0092      	lsls	r2, r2, #2
 8001c9c:	58d0      	ldr	r0, [r2, r3]
 8001c9e:	4b25      	ldr	r3, [pc, #148]	@ (8001d34 <actuate+0x1d4>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	001a      	movs	r2, r3
 8001ca4:	4b2b      	ldr	r3, [pc, #172]	@ (8001d54 <actuate+0x1f4>)
 8001ca6:	0052      	lsls	r2, r2, #1
 8001ca8:	5ad3      	ldrh	r3, [r2, r3]
 8001caa:	2200      	movs	r2, #0
 8001cac:	0019      	movs	r1, r3
 8001cae:	f004 feec 	bl	8006a8a <HAL_GPIO_WritePin>
			}

			if(!drv_shutoff)
 8001cb2:	4b29      	ldr	r3, [pc, #164]	@ (8001d58 <actuate+0x1f8>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d115      	bne.n	8001ce6 <actuate+0x186>
			{
				status = DRV_Activate(actuator, current, target);
 8001cba:	250f      	movs	r5, #15
 8001cbc:	197c      	adds	r4, r7, r5
 8001cbe:	1cbb      	adds	r3, r7, #2
 8001cc0:	881a      	ldrh	r2, [r3, #0]
 8001cc2:	1d3b      	adds	r3, r7, #4
 8001cc4:	8819      	ldrh	r1, [r3, #0]
 8001cc6:	1dfb      	adds	r3, r7, #7
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	0018      	movs	r0, r3
 8001ccc:	f000 f85c 	bl	8001d88 <DRV_Activate>
 8001cd0:	0003      	movs	r3, r0
 8001cd2:	7023      	strb	r3, [r4, #0]
				if(status != HAL_OK){return status;}
 8001cd4:	197b      	adds	r3, r7, r5
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	b25b      	sxtb	r3, r3
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <actuate+0x186>
 8001cde:	197b      	adds	r3, r7, r5
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	b25b      	sxtb	r3, r3
 8001ce4:	e022      	b.n	8001d2c <actuate+0x1cc>
			}
			selected_actuator = actuator;
 8001ce6:	4b13      	ldr	r3, [pc, #76]	@ (8001d34 <actuate+0x1d4>)
 8001ce8:	1dfa      	adds	r2, r7, #7
 8001cea:	7812      	ldrb	r2, [r2, #0]
 8001cec:	701a      	strb	r2, [r3, #0]
		}
		return status;
 8001cee:	230f      	movs	r3, #15
 8001cf0:	18fb      	adds	r3, r7, r3
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	b25b      	sxtb	r3, r3
 8001cf6:	e019      	b.n	8001d2c <actuate+0x1cc>
	}
	TIM1->CCR1 = (uint8_t) pid_step(&pid_constraints, (float)current, (float)target);
 8001cf8:	1d3b      	adds	r3, r7, #4
 8001cfa:	881b      	ldrh	r3, [r3, #0]
 8001cfc:	0018      	movs	r0, r3
 8001cfe:	f7ff fa3d 	bl	800117c <__aeabi_ui2f>
 8001d02:	1c04      	adds	r4, r0, #0
 8001d04:	1cbb      	adds	r3, r7, #2
 8001d06:	881b      	ldrh	r3, [r3, #0]
 8001d08:	0018      	movs	r0, r3
 8001d0a:	f7ff fa37 	bl	800117c <__aeabi_ui2f>
 8001d0e:	1c02      	adds	r2, r0, #0
 8001d10:	4b12      	ldr	r3, [pc, #72]	@ (8001d5c <actuate+0x1fc>)
 8001d12:	1c21      	adds	r1, r4, #0
 8001d14:	0018      	movs	r0, r3
 8001d16:	f000 f905 	bl	8001f24 <pid_step>
 8001d1a:	1c03      	adds	r3, r0, #0
 8001d1c:	1c18      	adds	r0, r3, #0
 8001d1e:	f7fe fba3 	bl	8000468 <__aeabi_f2uiz>
 8001d22:	0003      	movs	r3, r0
 8001d24:	b2da      	uxtb	r2, r3
 8001d26:	4b07      	ldr	r3, [pc, #28]	@ (8001d44 <actuate+0x1e4>)
 8001d28:	635a      	str	r2, [r3, #52]	@ 0x34
	return HAL_OK;
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	0018      	movs	r0, r3
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	b005      	add	sp, #20
 8001d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d34:	20000010 	.word	0x20000010
 8001d38:	0800d238 	.word	0x0800d238
 8001d3c:	0800d23c 	.word	0x0800d23c
 8001d40:	200002ed 	.word	0x200002ed
 8001d44:	40012c00 	.word	0x40012c00
 8001d48:	200002f0 	.word	0x200002f0
 8001d4c:	200002f8 	.word	0x200002f8
 8001d50:	20000698 	.word	0x20000698
 8001d54:	20000690 	.word	0x20000690
 8001d58:	200002f4 	.word	0x200002f4
 8001d5c:	20000658 	.word	0x20000658

08001d60 <DRV_Shutoff>:

void DRV_Shutoff()
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
	drv_shutoff = 1;
 8001d64:	4b02      	ldr	r3, [pc, #8]	@ (8001d70 <DRV_Shutoff+0x10>)
 8001d66:	2201      	movs	r2, #1
 8001d68:	701a      	strb	r2, [r3, #0]
}
 8001d6a:	46c0      	nop			@ (mov r8, r8)
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	200002f4 	.word	0x200002f4

08001d74 <DRV_GetShutoff>:

uint8_t DRV_GetShutoff()
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
	return drv_shutoff;
 8001d78:	4b02      	ldr	r3, [pc, #8]	@ (8001d84 <DRV_GetShutoff+0x10>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
}
 8001d7c:	0018      	movs	r0, r3
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	46c0      	nop			@ (mov r8, r8)
 8001d84:	200002f4 	.word	0x200002f4

08001d88 <DRV_Activate>:

int8_t DRV_Activate(uint8_t actuator, uint16_t current, uint16_t target)
{
 8001d88:	b5b0      	push	{r4, r5, r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	0004      	movs	r4, r0
 8001d90:	0008      	movs	r0, r1
 8001d92:	0011      	movs	r1, r2
 8001d94:	1dfb      	adds	r3, r7, #7
 8001d96:	1c22      	adds	r2, r4, #0
 8001d98:	701a      	strb	r2, [r3, #0]
 8001d9a:	1d3b      	adds	r3, r7, #4
 8001d9c:	1c02      	adds	r2, r0, #0
 8001d9e:	801a      	strh	r2, [r3, #0]
 8001da0:	1cbb      	adds	r3, r7, #2
 8001da2:	1c0a      	adds	r2, r1, #0
 8001da4:	801a      	strh	r2, [r3, #0]
	int8_t status = HAL_OK;
 8001da6:	240f      	movs	r4, #15
 8001da8:	193b      	adds	r3, r7, r4
 8001daa:	2200      	movs	r2, #0
 8001dac:	701a      	strb	r2, [r3, #0]
	drv_command_t command = DEFAULT_DRV_COMMAND;
 8001dae:	250c      	movs	r5, #12
 8001db0:	197b      	adds	r3, r7, r5
 8001db2:	4a52      	ldr	r2, [pc, #328]	@ (8001efc <DRV_Activate+0x174>)
 8001db4:	7812      	ldrb	r2, [r2, #0]
 8001db6:	701a      	strb	r2, [r3, #0]
	drv_spi_in_t spi_in = DEFAULT_DRV_SPI_IN;
 8001db8:	2308      	movs	r3, #8
 8001dba:	18fb      	adds	r3, r7, r3
 8001dbc:	4a50      	ldr	r2, [pc, #320]	@ (8001f00 <DRV_Activate+0x178>)
 8001dbe:	7812      	ldrb	r2, [r2, #0]
 8001dc0:	701a      	strb	r2, [r3, #0]

	drv_shutoff = 0;
 8001dc2:	4b50      	ldr	r3, [pc, #320]	@ (8001f04 <DRV_Activate+0x17c>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	701a      	strb	r2, [r3, #0]

	// Activate the new actuator
	HAL_GPIO_WritePin(port_map[actuator], pin_map[actuator], GPIO_PIN_SET);
 8001dc8:	1dfb      	adds	r3, r7, #7
 8001dca:	781a      	ldrb	r2, [r3, #0]
 8001dcc:	4b4e      	ldr	r3, [pc, #312]	@ (8001f08 <DRV_Activate+0x180>)
 8001dce:	0092      	lsls	r2, r2, #2
 8001dd0:	58d0      	ldr	r0, [r2, r3]
 8001dd2:	1dfb      	adds	r3, r7, #7
 8001dd4:	781a      	ldrb	r2, [r3, #0]
 8001dd6:	4b4d      	ldr	r3, [pc, #308]	@ (8001f0c <DRV_Activate+0x184>)
 8001dd8:	0052      	lsls	r2, r2, #1
 8001dda:	5ad3      	ldrh	r3, [r2, r3]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	0019      	movs	r1, r3
 8001de0:	f004 fe53 	bl	8006a8a <HAL_GPIO_WritePin>
	pin_off[actuator] = 0;
 8001de4:	1dfb      	adds	r3, r7, #7
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	4a49      	ldr	r2, [pc, #292]	@ (8001f10 <DRV_Activate+0x188>)
 8001dea:	2100      	movs	r1, #0
 8001dec:	54d1      	strb	r1, [r2, r3]

	// Unlock the SPI_IN register. Refer to section 8.6.1.5
	command.spi_in_lock = SPI_IN_UNLOCK;
 8001dee:	0028      	movs	r0, r5
 8001df0:	183b      	adds	r3, r7, r0
 8001df2:	781a      	ldrb	r2, [r3, #0]
 8001df4:	2118      	movs	r1, #24
 8001df6:	438a      	bics	r2, r1
 8001df8:	1c11      	adds	r1, r2, #0
 8001dfa:	2210      	movs	r2, #16
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	701a      	strb	r2, [r3, #0]
	status = DRV_SetCommand(&command);
 8001e00:	0025      	movs	r5, r4
 8001e02:	193c      	adds	r4, r7, r4
 8001e04:	183b      	adds	r3, r7, r0
 8001e06:	0018      	movs	r0, r3
 8001e08:	f000 fb82 	bl	8002510 <DRV_SetCommand>
 8001e0c:	0003      	movs	r3, r0
 8001e0e:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8001e10:	197b      	adds	r3, r7, r5
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	b25b      	sxtb	r3, r3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d003      	beq.n	8001e22 <DRV_Activate+0x9a>
 8001e1a:	197b      	adds	r3, r7, r5
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	b25b      	sxtb	r3, r3
 8001e20:	e067      	b.n	8001ef2 <DRV_Activate+0x16a>

	// Turn on the DRV8244
	spi_in.s_en_in1 = 0;
 8001e22:	2008      	movs	r0, #8
 8001e24:	183b      	adds	r3, r7, r0
 8001e26:	781a      	ldrb	r2, [r3, #0]
 8001e28:	2102      	movs	r1, #2
 8001e2a:	438a      	bics	r2, r1
 8001e2c:	701a      	strb	r2, [r3, #0]
	spi_in.s_drv_off = 0;
 8001e2e:	183b      	adds	r3, r7, r0
 8001e30:	781a      	ldrb	r2, [r3, #0]
 8001e32:	2108      	movs	r1, #8
 8001e34:	438a      	bics	r2, r1
 8001e36:	701a      	strb	r2, [r3, #0]
	spi_in.s_drv_off2 = 0;
 8001e38:	183b      	adds	r3, r7, r0
 8001e3a:	781a      	ldrb	r2, [r3, #0]
 8001e3c:	2104      	movs	r1, #4
 8001e3e:	438a      	bics	r2, r1
 8001e40:	701a      	strb	r2, [r3, #0]
	if(target > current)
 8001e42:	1cba      	adds	r2, r7, #2
 8001e44:	1d3b      	adds	r3, r7, #4
 8001e46:	8812      	ldrh	r2, [r2, #0]
 8001e48:	881b      	ldrh	r3, [r3, #0]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d905      	bls.n	8001e5a <DRV_Activate+0xd2>
	{
		// Extend
		spi_in.s_ph_in2 = 1;
 8001e4e:	183b      	adds	r3, r7, r0
 8001e50:	781a      	ldrb	r2, [r3, #0]
 8001e52:	2101      	movs	r1, #1
 8001e54:	430a      	orrs	r2, r1
 8001e56:	701a      	strb	r2, [r3, #0]
 8001e58:	e005      	b.n	8001e66 <DRV_Activate+0xde>
	}
	else
	{
		// Retract
		spi_in.s_ph_in2 = 0;
 8001e5a:	2308      	movs	r3, #8
 8001e5c:	18fb      	adds	r3, r7, r3
 8001e5e:	781a      	ldrb	r2, [r3, #0]
 8001e60:	2101      	movs	r1, #1
 8001e62:	438a      	bics	r2, r1
 8001e64:	701a      	strb	r2, [r3, #0]
	}
	status = DRV_SetSpiIn(&spi_in);
 8001e66:	250f      	movs	r5, #15
 8001e68:	197c      	adds	r4, r7, r5
 8001e6a:	2308      	movs	r3, #8
 8001e6c:	18fb      	adds	r3, r7, r3
 8001e6e:	0018      	movs	r0, r3
 8001e70:	f000 fb84 	bl	800257c <DRV_SetSpiIn>
 8001e74:	0003      	movs	r3, r0
 8001e76:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8001e78:	197b      	adds	r3, r7, r5
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	b25b      	sxtb	r3, r3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d003      	beq.n	8001e8a <DRV_Activate+0x102>
 8001e82:	197b      	adds	r3, r7, r5
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	b25b      	sxtb	r3, r3
 8001e88:	e033      	b.n	8001ef2 <DRV_Activate+0x16a>

	// Lock the SPI_IN register. Refer to section 8.6.1.5
	command.spi_in_lock = SPI_IN_LOCK;
 8001e8a:	200c      	movs	r0, #12
 8001e8c:	183b      	adds	r3, r7, r0
 8001e8e:	781a      	ldrb	r2, [r3, #0]
 8001e90:	2118      	movs	r1, #24
 8001e92:	438a      	bics	r2, r1
 8001e94:	1c11      	adds	r1, r2, #0
 8001e96:	2208      	movs	r2, #8
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	701a      	strb	r2, [r3, #0]
	status = DRV_SetCommand(&command);
 8001e9c:	250f      	movs	r5, #15
 8001e9e:	197c      	adds	r4, r7, r5
 8001ea0:	183b      	adds	r3, r7, r0
 8001ea2:	0018      	movs	r0, r3
 8001ea4:	f000 fb34 	bl	8002510 <DRV_SetCommand>
 8001ea8:	0003      	movs	r3, r0
 8001eaa:	7023      	strb	r3, [r4, #0]

	// Set the PWM Frequency
	TIM1->CCR1 = (uint8_t) pid_step(&pid_constraints, (float)current, (float)target);
 8001eac:	1d3b      	adds	r3, r7, #4
 8001eae:	881b      	ldrh	r3, [r3, #0]
 8001eb0:	0018      	movs	r0, r3
 8001eb2:	f7ff f963 	bl	800117c <__aeabi_ui2f>
 8001eb6:	1c04      	adds	r4, r0, #0
 8001eb8:	1cbb      	adds	r3, r7, #2
 8001eba:	881b      	ldrh	r3, [r3, #0]
 8001ebc:	0018      	movs	r0, r3
 8001ebe:	f7ff f95d 	bl	800117c <__aeabi_ui2f>
 8001ec2:	1c02      	adds	r2, r0, #0
 8001ec4:	4b13      	ldr	r3, [pc, #76]	@ (8001f14 <DRV_Activate+0x18c>)
 8001ec6:	1c21      	adds	r1, r4, #0
 8001ec8:	0018      	movs	r0, r3
 8001eca:	f000 f82b 	bl	8001f24 <pid_step>
 8001ece:	1c03      	adds	r3, r0, #0
 8001ed0:	1c18      	adds	r0, r3, #0
 8001ed2:	f7fe fac9 	bl	8000468 <__aeabi_f2uiz>
 8001ed6:	0003      	movs	r3, r0
 8001ed8:	b2da      	uxtb	r2, r3
 8001eda:	4b0f      	ldr	r3, [pc, #60]	@ (8001f18 <DRV_Activate+0x190>)
 8001edc:	635a      	str	r2, [r3, #52]	@ 0x34

	drv_on = 1;
 8001ede:	4b0f      	ldr	r3, [pc, #60]	@ (8001f1c <DRV_Activate+0x194>)
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	701a      	strb	r2, [r3, #0]
	selected_actuator = actuator;
 8001ee4:	4b0e      	ldr	r3, [pc, #56]	@ (8001f20 <DRV_Activate+0x198>)
 8001ee6:	1dfa      	adds	r2, r7, #7
 8001ee8:	7812      	ldrb	r2, [r2, #0]
 8001eea:	701a      	strb	r2, [r3, #0]

	return status;
 8001eec:	197b      	adds	r3, r7, r5
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	b25b      	sxtb	r3, r3
}
 8001ef2:	0018      	movs	r0, r3
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	b004      	add	sp, #16
 8001ef8:	bdb0      	pop	{r4, r5, r7, pc}
 8001efa:	46c0      	nop			@ (mov r8, r8)
 8001efc:	0800d238 	.word	0x0800d238
 8001f00:	0800d23c 	.word	0x0800d23c
 8001f04:	200002f4 	.word	0x200002f4
 8001f08:	20000698 	.word	0x20000698
 8001f0c:	20000690 	.word	0x20000690
 8001f10:	200002f8 	.word	0x200002f8
 8001f14:	20000658 	.word	0x20000658
 8001f18:	40012c00 	.word	0x40012c00
 8001f1c:	200002ed 	.word	0x200002ed
 8001f20:	20000010 	.word	0x20000010

08001f24 <pid_step>:

float pid_step(pid_t *pid, float measurement, float setpoint)
{
 8001f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f26:	b089      	sub	sp, #36	@ 0x24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
    float command;
    float command_sat;
    float deriv_filt;

    /* Error calculation */
    err = setpoint - measurement;
 8001f30:	68b9      	ldr	r1, [r7, #8]
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f7fe ff5e 	bl	8000df4 <__aeabi_fsub>
 8001f38:	1c03      	adds	r3, r0, #0
 8001f3a:	61bb      	str	r3, [r7, #24]

    /* Integral term calculation - including anti-windup */
    pid->integral += pid->Ki*err*pid->T + pid->Kaw*(pid->command_sat_prev - pid->command_prev)*pid->T;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	69b9      	ldr	r1, [r7, #24]
 8001f46:	1c18      	adds	r0, r3, #0
 8001f48:	f7fe fe16 	bl	8000b78 <__aeabi_fmul>
 8001f4c:	1c03      	adds	r3, r0, #0
 8001f4e:	1c1a      	adds	r2, r3, #0
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	695b      	ldr	r3, [r3, #20]
 8001f54:	1c19      	adds	r1, r3, #0
 8001f56:	1c10      	adds	r0, r2, #0
 8001f58:	f7fe fe0e 	bl	8000b78 <__aeabi_fmul>
 8001f5c:	1c03      	adds	r3, r0, #0
 8001f5e:	1c1e      	adds	r6, r3, #0
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	68dd      	ldr	r5, [r3, #12]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f6c:	1c19      	adds	r1, r3, #0
 8001f6e:	1c10      	adds	r0, r2, #0
 8001f70:	f7fe ff40 	bl	8000df4 <__aeabi_fsub>
 8001f74:	1c03      	adds	r3, r0, #0
 8001f76:	1c19      	adds	r1, r3, #0
 8001f78:	1c28      	adds	r0, r5, #0
 8001f7a:	f7fe fdfd 	bl	8000b78 <__aeabi_fmul>
 8001f7e:	1c03      	adds	r3, r0, #0
 8001f80:	1c1a      	adds	r2, r3, #0
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	1c19      	adds	r1, r3, #0
 8001f88:	1c10      	adds	r0, r2, #0
 8001f8a:	f7fe fdf5 	bl	8000b78 <__aeabi_fmul>
 8001f8e:	1c03      	adds	r3, r0, #0
 8001f90:	1c19      	adds	r1, r3, #0
 8001f92:	1c30      	adds	r0, r6, #0
 8001f94:	f7fe fa80 	bl	8000498 <__aeabi_fadd>
 8001f98:	1c03      	adds	r3, r0, #0
 8001f9a:	1c19      	adds	r1, r3, #0
 8001f9c:	1c20      	adds	r0, r4, #0
 8001f9e:	f7fe fa7b 	bl	8000498 <__aeabi_fadd>
 8001fa2:	1c03      	adds	r3, r0, #0
 8001fa4:	1c1a      	adds	r2, r3, #0
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Derivative term calculation using filtered derivative method */
    deriv_filt = (err - pid->err_prev + pid->T_C*pid->deriv_prev)/(pid->T + pid->T_C);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fae:	1c19      	adds	r1, r3, #0
 8001fb0:	69b8      	ldr	r0, [r7, #24]
 8001fb2:	f7fe ff1f 	bl	8000df4 <__aeabi_fsub>
 8001fb6:	1c03      	adds	r3, r0, #0
 8001fb8:	1c1c      	adds	r4, r3, #0
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	691a      	ldr	r2, [r3, #16]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fc2:	1c19      	adds	r1, r3, #0
 8001fc4:	1c10      	adds	r0, r2, #0
 8001fc6:	f7fe fdd7 	bl	8000b78 <__aeabi_fmul>
 8001fca:	1c03      	adds	r3, r0, #0
 8001fcc:	1c19      	adds	r1, r3, #0
 8001fce:	1c20      	adds	r0, r4, #0
 8001fd0:	f7fe fa62 	bl	8000498 <__aeabi_fadd>
 8001fd4:	1c03      	adds	r3, r0, #0
 8001fd6:	1c1c      	adds	r4, r3, #0
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	695a      	ldr	r2, [r3, #20]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	691b      	ldr	r3, [r3, #16]
 8001fe0:	1c19      	adds	r1, r3, #0
 8001fe2:	1c10      	adds	r0, r2, #0
 8001fe4:	f7fe fa58 	bl	8000498 <__aeabi_fadd>
 8001fe8:	1c03      	adds	r3, r0, #0
 8001fea:	1c19      	adds	r1, r3, #0
 8001fec:	1c20      	adds	r0, r4, #0
 8001fee:	f7fe fbdd 	bl	80007ac <__aeabi_fdiv>
 8001ff2:	1c03      	adds	r3, r0, #0
 8001ff4:	617b      	str	r3, [r7, #20]
    pid->err_prev = err;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	629a      	str	r2, [r3, #40]	@ 0x28
    pid->deriv_prev = deriv_filt;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	697a      	ldr	r2, [r7, #20]
 8002000:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Summing the 3 terms */
    command = pid->Kp*err + pid->integral + pid->Kd*deriv_filt;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	69b9      	ldr	r1, [r7, #24]
 8002008:	1c18      	adds	r0, r3, #0
 800200a:	f7fe fdb5 	bl	8000b78 <__aeabi_fmul>
 800200e:	1c03      	adds	r3, r0, #0
 8002010:	1c1a      	adds	r2, r3, #0
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002016:	1c19      	adds	r1, r3, #0
 8002018:	1c10      	adds	r0, r2, #0
 800201a:	f7fe fa3d 	bl	8000498 <__aeabi_fadd>
 800201e:	1c03      	adds	r3, r0, #0
 8002020:	1c1c      	adds	r4, r3, #0
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	6979      	ldr	r1, [r7, #20]
 8002028:	1c18      	adds	r0, r3, #0
 800202a:	f7fe fda5 	bl	8000b78 <__aeabi_fmul>
 800202e:	1c03      	adds	r3, r0, #0
 8002030:	1c19      	adds	r1, r3, #0
 8002032:	1c20      	adds	r0, r4, #0
 8002034:	f7fe fa30 	bl	8000498 <__aeabi_fadd>
 8002038:	1c03      	adds	r3, r0, #0
 800203a:	613b      	str	r3, [r7, #16]

    /* Remember command at previous step */
    pid->command_prev = command;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Saturate command */
    if (command > pid->max)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	699b      	ldr	r3, [r3, #24]
 8002046:	1c19      	adds	r1, r3, #0
 8002048:	6938      	ldr	r0, [r7, #16]
 800204a:	f7fe f9f9 	bl	8000440 <__aeabi_fcmpgt>
 800204e:	1e03      	subs	r3, r0, #0
 8002050:	d003      	beq.n	800205a <pid_step+0x136>
    {
        command_sat = pid->max;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	61fb      	str	r3, [r7, #28]
 8002058:	e00d      	b.n	8002076 <pid_step+0x152>
    }
    else if (command < pid->min)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	1c19      	adds	r1, r3, #0
 8002060:	6938      	ldr	r0, [r7, #16]
 8002062:	f7fe f9d9 	bl	8000418 <__aeabi_fcmplt>
 8002066:	1e03      	subs	r3, r0, #0
 8002068:	d003      	beq.n	8002072 <pid_step+0x14e>
    {
        command_sat = pid->min;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	61fb      	str	r3, [r7, #28]
 8002070:	e001      	b.n	8002076 <pid_step+0x152>
    }
    else
    {
        command_sat = command;
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	61fb      	str	r3, [r7, #28]
    }

    /* Apply rate limiter */
    if (command_sat > pid->command_sat_prev + pid->max_rate*pid->T)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	6a1a      	ldr	r2, [r3, #32]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	1c19      	adds	r1, r3, #0
 8002084:	1c10      	adds	r0, r2, #0
 8002086:	f7fe fd77 	bl	8000b78 <__aeabi_fmul>
 800208a:	1c03      	adds	r3, r0, #0
 800208c:	1c19      	adds	r1, r3, #0
 800208e:	1c20      	adds	r0, r4, #0
 8002090:	f7fe fa02 	bl	8000498 <__aeabi_fadd>
 8002094:	1c03      	adds	r3, r0, #0
 8002096:	1c19      	adds	r1, r3, #0
 8002098:	69f8      	ldr	r0, [r7, #28]
 800209a:	f7fe f9d1 	bl	8000440 <__aeabi_fcmpgt>
 800209e:	1e03      	subs	r3, r0, #0
 80020a0:	d011      	beq.n	80020c6 <pid_step+0x1a2>
    {
        command_sat = pid->command_sat_prev + pid->max_rate*pid->T;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6a1a      	ldr	r2, [r3, #32]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	1c19      	adds	r1, r3, #0
 80020b0:	1c10      	adds	r0, r2, #0
 80020b2:	f7fe fd61 	bl	8000b78 <__aeabi_fmul>
 80020b6:	1c03      	adds	r3, r0, #0
 80020b8:	1c19      	adds	r1, r3, #0
 80020ba:	1c20      	adds	r0, r4, #0
 80020bc:	f7fe f9ec 	bl	8000498 <__aeabi_fadd>
 80020c0:	1c03      	adds	r3, r0, #0
 80020c2:	61fb      	str	r3, [r7, #28]
 80020c4:	e026      	b.n	8002114 <pid_step+0x1f0>
    }
    else if (command_sat < pid->command_sat_prev - pid->max_rate*pid->T)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6a1a      	ldr	r2, [r3, #32]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	1c19      	adds	r1, r3, #0
 80020d4:	1c10      	adds	r0, r2, #0
 80020d6:	f7fe fd4f 	bl	8000b78 <__aeabi_fmul>
 80020da:	1c03      	adds	r3, r0, #0
 80020dc:	1c19      	adds	r1, r3, #0
 80020de:	1c20      	adds	r0, r4, #0
 80020e0:	f7fe fe88 	bl	8000df4 <__aeabi_fsub>
 80020e4:	1c03      	adds	r3, r0, #0
 80020e6:	1c19      	adds	r1, r3, #0
 80020e8:	69f8      	ldr	r0, [r7, #28]
 80020ea:	f7fe f995 	bl	8000418 <__aeabi_fcmplt>
 80020ee:	1e03      	subs	r3, r0, #0
 80020f0:	d010      	beq.n	8002114 <pid_step+0x1f0>
    {
        command_sat = pid->command_sat_prev - pid->max_rate*pid->T;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6a1a      	ldr	r2, [r3, #32]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	1c19      	adds	r1, r3, #0
 8002100:	1c10      	adds	r0, r2, #0
 8002102:	f7fe fd39 	bl	8000b78 <__aeabi_fmul>
 8002106:	1c03      	adds	r3, r0, #0
 8002108:	1c19      	adds	r1, r3, #0
 800210a:	1c20      	adds	r0, r4, #0
 800210c:	f7fe fe72 	bl	8000df4 <__aeabi_fsub>
 8002110:	1c03      	adds	r3, r0, #0
 8002112:	61fb      	str	r3, [r7, #28]
    {
        /* No action */
    }

    /* Remember saturated command at previous step */
    pid->command_sat_prev = command_sat;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	69fa      	ldr	r2, [r7, #28]
 8002118:	631a      	str	r2, [r3, #48]	@ 0x30

    return command_sat;
 800211a:	69fb      	ldr	r3, [r7, #28]
}
 800211c:	1c18      	adds	r0, r3, #0
 800211e:	46bd      	mov	sp, r7
 8002120:	b009      	add	sp, #36	@ 0x24
 8002122:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002124 <DRV_Init>:

int8_t DRV_Init(uint8_t device_id)
{
 8002124:	b5b0      	push	{r4, r5, r7, lr}
 8002126:	b08c      	sub	sp, #48	@ 0x30
 8002128:	af00      	add	r7, sp, #0
 800212a:	0002      	movs	r2, r0
 800212c:	1dfb      	adds	r3, r7, #7
 800212e:	701a      	strb	r2, [r3, #0]
	int8_t status = HAL_OK;
 8002130:	242f      	movs	r4, #47	@ 0x2f
 8002132:	193b      	adds	r3, r7, r4
 8002134:	2200      	movs	r2, #0
 8002136:	701a      	strb	r2, [r3, #0]
	pin_off[0] = 1;
 8002138:	4bcd      	ldr	r3, [pc, #820]	@ (8002470 <DRV_Init+0x34c>)
 800213a:	2201      	movs	r2, #1
 800213c:	701a      	strb	r2, [r3, #0]
	pin_off[1] = 1;
 800213e:	4bcc      	ldr	r3, [pc, #816]	@ (8002470 <DRV_Init+0x34c>)
 8002140:	2201      	movs	r2, #1
 8002142:	705a      	strb	r2, [r3, #1]
	pin_off[2] = 1;
 8002144:	4bca      	ldr	r3, [pc, #808]	@ (8002470 <DRV_Init+0x34c>)
 8002146:	2201      	movs	r2, #1
 8002148:	709a      	strb	r2, [r3, #2]

	// Initialize the PWM signal
	TIM1->CCR1 = 0;
 800214a:	4bca      	ldr	r3, [pc, #808]	@ (8002474 <DRV_Init+0x350>)
 800214c:	2200      	movs	r2, #0
 800214e:	635a      	str	r2, [r3, #52]	@ 0x34
	status = HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002150:	4bc9      	ldr	r3, [pc, #804]	@ (8002478 <DRV_Init+0x354>)
 8002152:	2100      	movs	r1, #0
 8002154:	0018      	movs	r0, r3
 8002156:	f008 f979 	bl	800a44c <HAL_TIM_PWM_Start>
 800215a:	0003      	movs	r3, r0
 800215c:	001a      	movs	r2, r3
 800215e:	193b      	adds	r3, r7, r4
 8002160:	701a      	strb	r2, [r3, #0]
	if(status != HAL_OK){return status;}
 8002162:	193b      	adds	r3, r7, r4
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	b25b      	sxtb	r3, r3
 8002168:	2b00      	cmp	r3, #0
 800216a:	d003      	beq.n	8002174 <DRV_Init+0x50>
 800216c:	193b      	adds	r3, r7, r4
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	b25b      	sxtb	r3, r3
 8002172:	e179      	b.n	8002468 <DRV_Init+0x344>

	// Test communication by reading the Device ID
	uint8_t dev_id = 0;
 8002174:	212e      	movs	r1, #46	@ 0x2e
 8002176:	187b      	adds	r3, r7, r1
 8002178:	2200      	movs	r2, #0
 800217a:	701a      	strb	r2, [r3, #0]
	status = DRV_GetDeviceId(&dev_id);
 800217c:	252f      	movs	r5, #47	@ 0x2f
 800217e:	197c      	adds	r4, r7, r5
 8002180:	187b      	adds	r3, r7, r1
 8002182:	0018      	movs	r0, r3
 8002184:	f000 f97a 	bl	800247c <DRV_GetDeviceId>
 8002188:	0003      	movs	r3, r0
 800218a:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800218c:	197b      	adds	r3, r7, r5
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	b25b      	sxtb	r3, r3
 8002192:	2b00      	cmp	r3, #0
 8002194:	d003      	beq.n	800219e <DRV_Init+0x7a>
 8002196:	197b      	adds	r3, r7, r5
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	b25b      	sxtb	r3, r3
 800219c:	e164      	b.n	8002468 <DRV_Init+0x344>

	if(dev_id == device_id)
 800219e:	232e      	movs	r3, #46	@ 0x2e
 80021a0:	18fb      	adds	r3, r7, r3
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	1dfa      	adds	r2, r7, #7
 80021a6:	7812      	ldrb	r2, [r2, #0]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d000      	beq.n	80021ae <DRV_Init+0x8a>
 80021ac:	e156      	b.n	800245c <DRV_Init+0x338>
	{
		// Unlock the Config Registers, clear the fault register. Refer to section 8.6.1.5
		drv_command_t command;
		command.clr_flt = 1;
 80021ae:	202c      	movs	r0, #44	@ 0x2c
 80021b0:	183b      	adds	r3, r7, r0
 80021b2:	781a      	ldrb	r2, [r3, #0]
 80021b4:	2180      	movs	r1, #128	@ 0x80
 80021b6:	4249      	negs	r1, r1
 80021b8:	430a      	orrs	r2, r1
 80021ba:	701a      	strb	r2, [r3, #0]
		command.reg_lock = REG_UNLOCK;
 80021bc:	183b      	adds	r3, r7, r0
 80021be:	781a      	ldrb	r2, [r3, #0]
 80021c0:	2103      	movs	r1, #3
 80021c2:	438a      	bics	r2, r1
 80021c4:	1c11      	adds	r1, r2, #0
 80021c6:	2201      	movs	r2, #1
 80021c8:	430a      	orrs	r2, r1
 80021ca:	701a      	strb	r2, [r3, #0]
		command.spi_in_lock = SPI_IN_LOCK;
 80021cc:	183b      	adds	r3, r7, r0
 80021ce:	781a      	ldrb	r2, [r3, #0]
 80021d0:	2118      	movs	r1, #24
 80021d2:	438a      	bics	r2, r1
 80021d4:	1c11      	adds	r1, r2, #0
 80021d6:	2208      	movs	r2, #8
 80021d8:	430a      	orrs	r2, r1
 80021da:	701a      	strb	r2, [r3, #0]
		status = DRV_SetCommand(&command);
 80021dc:	252f      	movs	r5, #47	@ 0x2f
 80021de:	197c      	adds	r4, r7, r5
 80021e0:	183b      	adds	r3, r7, r0
 80021e2:	0018      	movs	r0, r3
 80021e4:	f000 f994 	bl	8002510 <DRV_SetCommand>
 80021e8:	0003      	movs	r3, r0
 80021ea:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK){return status;}
 80021ec:	197b      	adds	r3, r7, r5
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	b25b      	sxtb	r3, r3
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d003      	beq.n	80021fe <DRV_Init+0xda>
 80021f6:	197b      	adds	r3, r7, r5
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	b25b      	sxtb	r3, r3
 80021fc:	e134      	b.n	8002468 <DRV_Init+0x344>

		drv_config_1_t w_config_1;
		w_config_1.raw_data = 0;
 80021fe:	2028      	movs	r0, #40	@ 0x28
 8002200:	183b      	adds	r3, r7, r0
 8002202:	2200      	movs	r2, #0
 8002204:	701a      	strb	r2, [r3, #0]
		w_config_1.en_ola = 1;
 8002206:	183b      	adds	r3, r7, r0
 8002208:	781a      	ldrb	r2, [r3, #0]
 800220a:	2180      	movs	r1, #128	@ 0x80
 800220c:	4249      	negs	r1, r1
 800220e:	430a      	orrs	r2, r1
 8002210:	701a      	strb	r2, [r3, #0]
		w_config_1.ocp_retry = 1;
 8002212:	183b      	adds	r3, r7, r0
 8002214:	781a      	ldrb	r2, [r3, #0]
 8002216:	2108      	movs	r1, #8
 8002218:	430a      	orrs	r2, r1
 800221a:	701a      	strb	r2, [r3, #0]
		w_config_1.ola_retry = 1;
 800221c:	183b      	adds	r3, r7, r0
 800221e:	781a      	ldrb	r2, [r3, #0]
 8002220:	2101      	movs	r1, #1
 8002222:	430a      	orrs	r2, r1
 8002224:	701a      	strb	r2, [r3, #0]
		w_config_1.ssc_dis = 1;
 8002226:	183b      	adds	r3, r7, r0
 8002228:	781a      	ldrb	r2, [r3, #0]
 800222a:	2110      	movs	r1, #16
 800222c:	430a      	orrs	r2, r1
 800222e:	701a      	strb	r2, [r3, #0]
		w_config_1.tsd_retry = 1;
 8002230:	183b      	adds	r3, r7, r0
 8002232:	781a      	ldrb	r2, [r3, #0]
 8002234:	2104      	movs	r1, #4
 8002236:	430a      	orrs	r2, r1
 8002238:	701a      	strb	r2, [r3, #0]
		w_config_1.vmov_retry = 1;
 800223a:	183b      	adds	r3, r7, r0
 800223c:	781a      	ldrb	r2, [r3, #0]
 800223e:	2102      	movs	r1, #2
 8002240:	430a      	orrs	r2, r1
 8002242:	701a      	strb	r2, [r3, #0]
		w_config_1.vmov_sel = VMOV_SEL_18V;
 8002244:	183b      	adds	r3, r7, r0
 8002246:	781a      	ldrb	r2, [r3, #0]
 8002248:	2160      	movs	r1, #96	@ 0x60
 800224a:	438a      	bics	r2, r1
 800224c:	1c11      	adds	r1, r2, #0
 800224e:	2240      	movs	r2, #64	@ 0x40
 8002250:	430a      	orrs	r2, r1
 8002252:	701a      	strb	r2, [r3, #0]
		status = DRV_SetConfig1(&w_config_1);
 8002254:	252f      	movs	r5, #47	@ 0x2f
 8002256:	197c      	adds	r4, r7, r5
 8002258:	183b      	adds	r3, r7, r0
 800225a:	0018      	movs	r0, r3
 800225c:	f000 fa04 	bl	8002668 <DRV_SetConfig1>
 8002260:	0003      	movs	r3, r0
 8002262:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK){return status;}
 8002264:	197b      	adds	r3, r7, r5
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	b25b      	sxtb	r3, r3
 800226a:	2b00      	cmp	r3, #0
 800226c:	d003      	beq.n	8002276 <DRV_Init+0x152>
 800226e:	197b      	adds	r3, r7, r5
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	b25b      	sxtb	r3, r3
 8002274:	e0f8      	b.n	8002468 <DRV_Init+0x344>

		drv_config_2_t w_config_2;
		w_config_2.raw_data = 0;
 8002276:	2024      	movs	r0, #36	@ 0x24
 8002278:	183b      	adds	r3, r7, r0
 800227a:	2200      	movs	r2, #0
 800227c:	701a      	strb	r2, [r3, #0]
		w_config_2.pwm_extend = 0;
 800227e:	183b      	adds	r3, r7, r0
 8002280:	781a      	ldrb	r2, [r3, #0]
 8002282:	217f      	movs	r1, #127	@ 0x7f
 8002284:	400a      	ands	r2, r1
 8002286:	701a      	strb	r2, [r3, #0]
		w_config_2.s_diag = S_DIAG_MODE_3;
 8002288:	183b      	adds	r3, r7, r0
 800228a:	781a      	ldrb	r2, [r3, #0]
 800228c:	2160      	movs	r1, #96	@ 0x60
 800228e:	430a      	orrs	r2, r1
 8002290:	701a      	strb	r2, [r3, #0]
		w_config_2.s_itrip = S_ITRIP_DISABLE;
 8002292:	183b      	adds	r3, r7, r0
 8002294:	781a      	ldrb	r2, [r3, #0]
 8002296:	2107      	movs	r1, #7
 8002298:	438a      	bics	r2, r1
 800229a:	701a      	strb	r2, [r3, #0]
		status = DRV_SetConfig2(&w_config_2);
 800229c:	252f      	movs	r5, #47	@ 0x2f
 800229e:	197c      	adds	r4, r7, r5
 80022a0:	183b      	adds	r3, r7, r0
 80022a2:	0018      	movs	r0, r3
 80022a4:	f000 fa56 	bl	8002754 <DRV_SetConfig2>
 80022a8:	0003      	movs	r3, r0
 80022aa:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK){return status;}
 80022ac:	197b      	adds	r3, r7, r5
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	b25b      	sxtb	r3, r3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <DRV_Init+0x19a>
 80022b6:	197b      	adds	r3, r7, r5
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	b25b      	sxtb	r3, r3
 80022bc:	e0d4      	b.n	8002468 <DRV_Init+0x344>

		// Configure PH/EN Mode
		drv_config_3_t w_config_3;
		w_config_3.raw_data = 0;
 80022be:	2020      	movs	r0, #32
 80022c0:	183b      	adds	r3, r7, r0
 80022c2:	2200      	movs	r2, #0
 80022c4:	701a      	strb	r2, [r3, #0]
		w_config_3.s_mode = S_MODE_PH_EN;
 80022c6:	183b      	adds	r3, r7, r0
 80022c8:	781a      	ldrb	r2, [r3, #0]
 80022ca:	2103      	movs	r1, #3
 80022cc:	438a      	bics	r2, r1
 80022ce:	701a      	strb	r2, [r3, #0]
		w_config_3.toff = TOFF_40US;
 80022d0:	183b      	adds	r3, r7, r0
 80022d2:	781a      	ldrb	r2, [r3, #0]
 80022d4:	213f      	movs	r1, #63	@ 0x3f
 80022d6:	400a      	ands	r2, r1
 80022d8:	1c11      	adds	r1, r2, #0
 80022da:	2280      	movs	r2, #128	@ 0x80
 80022dc:	4252      	negs	r2, r2
 80022de:	430a      	orrs	r2, r1
 80022e0:	701a      	strb	r2, [r3, #0]
		w_config_3.s_sr = 0;
 80022e2:	183b      	adds	r3, r7, r0
 80022e4:	781a      	ldrb	r2, [r3, #0]
 80022e6:	211c      	movs	r1, #28
 80022e8:	438a      	bics	r2, r1
 80022ea:	701a      	strb	r2, [r3, #0]
		status = DRV_SetConfig3(&w_config_3);
 80022ec:	252f      	movs	r5, #47	@ 0x2f
 80022ee:	197c      	adds	r4, r7, r5
 80022f0:	183b      	adds	r3, r7, r0
 80022f2:	0018      	movs	r0, r3
 80022f4:	f000 faa4 	bl	8002840 <DRV_SetConfig3>
 80022f8:	0003      	movs	r3, r0
 80022fa:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK){return status;}
 80022fc:	197b      	adds	r3, r7, r5
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	b25b      	sxtb	r3, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	d003      	beq.n	800230e <DRV_Init+0x1ea>
 8002306:	197b      	adds	r3, r7, r5
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	b25b      	sxtb	r3, r3
 800230c:	e0ac      	b.n	8002468 <DRV_Init+0x344>

		// Configure the DRV to allow the SPI bit configuration to control the h-bridge
		drv_config_4_t w_config_4;
		w_config_4.raw_data = 0;
 800230e:	201c      	movs	r0, #28
 8002310:	183b      	adds	r3, r7, r0
 8002312:	2200      	movs	r2, #0
 8002314:	701a      	strb	r2, [r3, #0]
		w_config_4.drvoff_sel = DRVOFF_SEL_OR;
 8002316:	183b      	adds	r3, r7, r0
 8002318:	781a      	ldrb	r2, [r3, #0]
 800231a:	2104      	movs	r1, #4
 800231c:	438a      	bics	r2, r1
 800231e:	701a      	strb	r2, [r3, #0]
		w_config_4.en_in1_sel = EN_IN1_SEL_OR;
 8002320:	183b      	adds	r3, r7, r0
 8002322:	781a      	ldrb	r2, [r3, #0]
 8002324:	2102      	movs	r1, #2
 8002326:	438a      	bics	r2, r1
 8002328:	701a      	strb	r2, [r3, #0]
		w_config_4.ph_in2_sel = PH_IN2_SEL_OR;
 800232a:	183b      	adds	r3, r7, r0
 800232c:	781a      	ldrb	r2, [r3, #0]
 800232e:	2101      	movs	r1, #1
 8002330:	438a      	bics	r2, r1
 8002332:	701a      	strb	r2, [r3, #0]
		w_config_4.tocp_sel = TOCP_SEL_6US;
 8002334:	183b      	adds	r3, r7, r0
 8002336:	781a      	ldrb	r2, [r3, #0]
 8002338:	213f      	movs	r1, #63	@ 0x3f
 800233a:	400a      	ands	r2, r1
 800233c:	701a      	strb	r2, [r3, #0]
		w_config_4.ocp_sel = OCP_SEL_100;
 800233e:	183b      	adds	r3, r7, r0
 8002340:	781a      	ldrb	r2, [r3, #0]
 8002342:	2118      	movs	r1, #24
 8002344:	438a      	bics	r2, r1
 8002346:	701a      	strb	r2, [r3, #0]
		status = DRV_SetConfig4(&w_config_4);
 8002348:	252f      	movs	r5, #47	@ 0x2f
 800234a:	197c      	adds	r4, r7, r5
 800234c:	183b      	adds	r3, r7, r0
 800234e:	0018      	movs	r0, r3
 8002350:	f000 faec 	bl	800292c <DRV_SetConfig4>
 8002354:	0003      	movs	r3, r0
 8002356:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK){return status;}
 8002358:	197b      	adds	r3, r7, r5
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	b25b      	sxtb	r3, r3
 800235e:	2b00      	cmp	r3, #0
 8002360:	d003      	beq.n	800236a <DRV_Init+0x246>
 8002362:	197b      	adds	r3, r7, r5
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	b25b      	sxtb	r3, r3
 8002368:	e07e      	b.n	8002468 <DRV_Init+0x344>

		// Lock the Config Registers. Refer to section 8.6.1.5
		command.reg_lock = REG_LOCK;
 800236a:	202c      	movs	r0, #44	@ 0x2c
 800236c:	183b      	adds	r3, r7, r0
 800236e:	781a      	ldrb	r2, [r3, #0]
 8002370:	2103      	movs	r1, #3
 8002372:	438a      	bics	r2, r1
 8002374:	1c11      	adds	r1, r2, #0
 8002376:	2202      	movs	r2, #2
 8002378:	430a      	orrs	r2, r1
 800237a:	701a      	strb	r2, [r3, #0]
		status = DRV_SetCommand(&command);
 800237c:	252f      	movs	r5, #47	@ 0x2f
 800237e:	197c      	adds	r4, r7, r5
 8002380:	183b      	adds	r3, r7, r0
 8002382:	0018      	movs	r0, r3
 8002384:	f000 f8c4 	bl	8002510 <DRV_SetCommand>
 8002388:	0003      	movs	r3, r0
 800238a:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK){return status;}
 800238c:	197b      	adds	r3, r7, r5
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	b25b      	sxtb	r3, r3
 8002392:	2b00      	cmp	r3, #0
 8002394:	d003      	beq.n	800239e <DRV_Init+0x27a>
 8002396:	197b      	adds	r3, r7, r5
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	b25b      	sxtb	r3, r3
 800239c:	e064      	b.n	8002468 <DRV_Init+0x344>
		drv_config_1_t r_config_1;
		drv_config_2_t r_config_2;
		drv_config_3_t r_config_3;
		drv_config_4_t r_config_4;

		status = DRV_GetConfig1(&r_config_1);
 800239e:	252f      	movs	r5, #47	@ 0x2f
 80023a0:	197c      	adds	r4, r7, r5
 80023a2:	2318      	movs	r3, #24
 80023a4:	18fb      	adds	r3, r7, r3
 80023a6:	0018      	movs	r0, r3
 80023a8:	f000 f91e 	bl	80025e8 <DRV_GetConfig1>
 80023ac:	0003      	movs	r3, r0
 80023ae:	7023      	strb	r3, [r4, #0]
		status |= DRV_GetConfig2(&r_config_2);
 80023b0:	2314      	movs	r3, #20
 80023b2:	18fb      	adds	r3, r7, r3
 80023b4:	0018      	movs	r0, r3
 80023b6:	f000 f98d 	bl	80026d4 <DRV_GetConfig2>
 80023ba:	0003      	movs	r3, r0
 80023bc:	0019      	movs	r1, r3
 80023be:	002c      	movs	r4, r5
 80023c0:	193b      	adds	r3, r7, r4
 80023c2:	193a      	adds	r2, r7, r4
 80023c4:	7812      	ldrb	r2, [r2, #0]
 80023c6:	430a      	orrs	r2, r1
 80023c8:	701a      	strb	r2, [r3, #0]
		status |= DRV_GetConfig3(&r_config_3);
 80023ca:	2310      	movs	r3, #16
 80023cc:	18fb      	adds	r3, r7, r3
 80023ce:	0018      	movs	r0, r3
 80023d0:	f000 f9f6 	bl	80027c0 <DRV_GetConfig3>
 80023d4:	0003      	movs	r3, r0
 80023d6:	0019      	movs	r1, r3
 80023d8:	193b      	adds	r3, r7, r4
 80023da:	193a      	adds	r2, r7, r4
 80023dc:	7812      	ldrb	r2, [r2, #0]
 80023de:	430a      	orrs	r2, r1
 80023e0:	701a      	strb	r2, [r3, #0]
		status |= DRV_GetConfig4(&r_config_4);
 80023e2:	230c      	movs	r3, #12
 80023e4:	18fb      	adds	r3, r7, r3
 80023e6:	0018      	movs	r0, r3
 80023e8:	f000 fa60 	bl	80028ac <DRV_GetConfig4>
 80023ec:	0003      	movs	r3, r0
 80023ee:	0019      	movs	r1, r3
 80023f0:	193b      	adds	r3, r7, r4
 80023f2:	193a      	adds	r2, r7, r4
 80023f4:	7812      	ldrb	r2, [r2, #0]
 80023f6:	430a      	orrs	r2, r1
 80023f8:	701a      	strb	r2, [r3, #0]
		if(status != HAL_OK){return status;}
 80023fa:	193b      	adds	r3, r7, r4
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	b25b      	sxtb	r3, r3
 8002400:	2b00      	cmp	r3, #0
 8002402:	d003      	beq.n	800240c <DRV_Init+0x2e8>
 8002404:	193b      	adds	r3, r7, r4
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	b25b      	sxtb	r3, r3
 800240a:	e02d      	b.n	8002468 <DRV_Init+0x344>

		if(r_config_1.raw_data != w_config_1.raw_data){return HAL_ERROR;}
 800240c:	2318      	movs	r3, #24
 800240e:	18fb      	adds	r3, r7, r3
 8002410:	781a      	ldrb	r2, [r3, #0]
 8002412:	2328      	movs	r3, #40	@ 0x28
 8002414:	18fb      	adds	r3, r7, r3
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	429a      	cmp	r2, r3
 800241a:	d001      	beq.n	8002420 <DRV_Init+0x2fc>
 800241c:	2301      	movs	r3, #1
 800241e:	e023      	b.n	8002468 <DRV_Init+0x344>
		if(r_config_2.raw_data != w_config_2.raw_data){return HAL_ERROR;}
 8002420:	2314      	movs	r3, #20
 8002422:	18fb      	adds	r3, r7, r3
 8002424:	781a      	ldrb	r2, [r3, #0]
 8002426:	2324      	movs	r3, #36	@ 0x24
 8002428:	18fb      	adds	r3, r7, r3
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	429a      	cmp	r2, r3
 800242e:	d001      	beq.n	8002434 <DRV_Init+0x310>
 8002430:	2301      	movs	r3, #1
 8002432:	e019      	b.n	8002468 <DRV_Init+0x344>
		if(r_config_3.raw_data != w_config_3.raw_data){return HAL_ERROR;}
 8002434:	2310      	movs	r3, #16
 8002436:	18fb      	adds	r3, r7, r3
 8002438:	781a      	ldrb	r2, [r3, #0]
 800243a:	2320      	movs	r3, #32
 800243c:	18fb      	adds	r3, r7, r3
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	429a      	cmp	r2, r3
 8002442:	d001      	beq.n	8002448 <DRV_Init+0x324>
 8002444:	2301      	movs	r3, #1
 8002446:	e00f      	b.n	8002468 <DRV_Init+0x344>
		if(r_config_4.raw_data != w_config_4.raw_data){return HAL_ERROR;}
 8002448:	230c      	movs	r3, #12
 800244a:	18fb      	adds	r3, r7, r3
 800244c:	781a      	ldrb	r2, [r3, #0]
 800244e:	231c      	movs	r3, #28
 8002450:	18fb      	adds	r3, r7, r3
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	429a      	cmp	r2, r3
 8002456:	d003      	beq.n	8002460 <DRV_Init+0x33c>
 8002458:	2301      	movs	r3, #1
 800245a:	e005      	b.n	8002468 <DRV_Init+0x344>
	}
	else
	{
		return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e003      	b.n	8002468 <DRV_Init+0x344>
	}
	return status;
 8002460:	232f      	movs	r3, #47	@ 0x2f
 8002462:	18fb      	adds	r3, r7, r3
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	b25b      	sxtb	r3, r3
}
 8002468:	0018      	movs	r0, r3
 800246a:	46bd      	mov	sp, r7
 800246c:	b00c      	add	sp, #48	@ 0x30
 800246e:	bdb0      	pop	{r4, r5, r7, pc}
 8002470:	200002f8 	.word	0x200002f8
 8002474:	40012c00 	.word	0x40012c00
 8002478:	20000474 	.word	0x20000474

0800247c <DRV_GetDeviceId>:

int8_t DRV_GetDeviceId(uint8_t* device_id)
{
 800247c:	b590      	push	{r4, r7, lr}
 800247e:	b087      	sub	sp, #28
 8002480:	af02      	add	r7, sp, #8
 8002482:	6078      	str	r0, [r7, #4]
	int8_t status = HAL_OK;
 8002484:	240f      	movs	r4, #15
 8002486:	193b      	adds	r3, r7, r4
 8002488:	2200      	movs	r2, #0
 800248a:	701a      	strb	r2, [r3, #0]
	tx_data[0] = (DEVICE_ID | READ_MASK);
 800248c:	4b1c      	ldr	r3, [pc, #112]	@ (8002500 <DRV_GetDeviceId+0x84>)
 800248e:	2240      	movs	r2, #64	@ 0x40
 8002490:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0;
 8002492:	4b1b      	ldr	r3, [pc, #108]	@ (8002500 <DRV_GetDeviceId+0x84>)
 8002494:	2200      	movs	r2, #0
 8002496:	705a      	strb	r2, [r3, #1]
	rx_data[0] = 0;
 8002498:	4b1a      	ldr	r3, [pc, #104]	@ (8002504 <DRV_GetDeviceId+0x88>)
 800249a:	2200      	movs	r2, #0
 800249c:	701a      	strb	r2, [r3, #0]
	rx_data[0] = 0;
 800249e:	4b19      	ldr	r3, [pc, #100]	@ (8002504 <DRV_GetDeviceId+0x88>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_RESET);
 80024a4:	4b18      	ldr	r3, [pc, #96]	@ (8002508 <DRV_GetDeviceId+0x8c>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	2101      	movs	r1, #1
 80024aa:	0018      	movs	r0, r3
 80024ac:	f004 faed 	bl	8006a8a <HAL_GPIO_WritePin>
	status = HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 100);
 80024b0:	4a14      	ldr	r2, [pc, #80]	@ (8002504 <DRV_GetDeviceId+0x88>)
 80024b2:	4913      	ldr	r1, [pc, #76]	@ (8002500 <DRV_GetDeviceId+0x84>)
 80024b4:	4815      	ldr	r0, [pc, #84]	@ (800250c <DRV_GetDeviceId+0x90>)
 80024b6:	2364      	movs	r3, #100	@ 0x64
 80024b8:	9300      	str	r3, [sp, #0]
 80024ba:	2302      	movs	r3, #2
 80024bc:	f007 fa82 	bl	80099c4 <HAL_SPI_TransmitReceive>
 80024c0:	0003      	movs	r3, r0
 80024c2:	001a      	movs	r2, r3
 80024c4:	193b      	adds	r3, r7, r4
 80024c6:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_SET);
 80024c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002508 <DRV_GetDeviceId+0x8c>)
 80024ca:	2201      	movs	r2, #1
 80024cc:	2101      	movs	r1, #1
 80024ce:	0018      	movs	r0, r3
 80024d0:	f004 fadb 	bl	8006a8a <HAL_GPIO_WritePin>
	if(status != HAL_OK){return status;}
 80024d4:	193b      	adds	r3, r7, r4
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	b25b      	sxtb	r3, r3
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <DRV_GetDeviceId+0x6a>
 80024de:	193b      	adds	r3, r7, r4
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	b25b      	sxtb	r3, r3
 80024e4:	e007      	b.n	80024f6 <DRV_GetDeviceId+0x7a>

	(*device_id) = rx_data[1];
 80024e6:	4b07      	ldr	r3, [pc, #28]	@ (8002504 <DRV_GetDeviceId+0x88>)
 80024e8:	785a      	ldrb	r2, [r3, #1]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	701a      	strb	r2, [r3, #0]
	return status;
 80024ee:	230f      	movs	r3, #15
 80024f0:	18fb      	adds	r3, r7, r3
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	b25b      	sxtb	r3, r3
}
 80024f6:	0018      	movs	r0, r3
 80024f8:	46bd      	mov	sp, r7
 80024fa:	b005      	add	sp, #20
 80024fc:	bd90      	pop	{r4, r7, pc}
 80024fe:	46c0      	nop			@ (mov r8, r8)
 8002500:	200002fc 	.word	0x200002fc
 8002504:	20000300 	.word	0x20000300
 8002508:	50000c00 	.word	0x50000c00
 800250c:	20000410 	.word	0x20000410

08002510 <DRV_SetCommand>:
	command->raw_data = rx_data[1];
	return status;
}

int8_t DRV_SetCommand(drv_command_t* command)
{
 8002510:	b590      	push	{r4, r7, lr}
 8002512:	b087      	sub	sp, #28
 8002514:	af02      	add	r7, sp, #8
 8002516:	6078      	str	r0, [r7, #4]
	int8_t status = HAL_OK;
 8002518:	240f      	movs	r4, #15
 800251a:	193b      	adds	r3, r7, r4
 800251c:	2200      	movs	r2, #0
 800251e:	701a      	strb	r2, [r3, #0]

	tx_data[0] = COMMAND;
 8002520:	4b12      	ldr	r3, [pc, #72]	@ (800256c <DRV_SetCommand+0x5c>)
 8002522:	2208      	movs	r2, #8
 8002524:	701a      	strb	r2, [r3, #0]
	tx_data[1] = command->raw_data;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	781a      	ldrb	r2, [r3, #0]
 800252a:	4b10      	ldr	r3, [pc, #64]	@ (800256c <DRV_SetCommand+0x5c>)
 800252c:	705a      	strb	r2, [r3, #1]

	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_RESET);
 800252e:	4b10      	ldr	r3, [pc, #64]	@ (8002570 <DRV_SetCommand+0x60>)
 8002530:	2200      	movs	r2, #0
 8002532:	2101      	movs	r1, #1
 8002534:	0018      	movs	r0, r3
 8002536:	f004 faa8 	bl	8006a8a <HAL_GPIO_WritePin>
	status = HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 100);
 800253a:	4a0e      	ldr	r2, [pc, #56]	@ (8002574 <DRV_SetCommand+0x64>)
 800253c:	490b      	ldr	r1, [pc, #44]	@ (800256c <DRV_SetCommand+0x5c>)
 800253e:	480e      	ldr	r0, [pc, #56]	@ (8002578 <DRV_SetCommand+0x68>)
 8002540:	2364      	movs	r3, #100	@ 0x64
 8002542:	9300      	str	r3, [sp, #0]
 8002544:	2302      	movs	r3, #2
 8002546:	f007 fa3d 	bl	80099c4 <HAL_SPI_TransmitReceive>
 800254a:	0003      	movs	r3, r0
 800254c:	001a      	movs	r2, r3
 800254e:	193b      	adds	r3, r7, r4
 8002550:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_SET);
 8002552:	4b07      	ldr	r3, [pc, #28]	@ (8002570 <DRV_SetCommand+0x60>)
 8002554:	2201      	movs	r2, #1
 8002556:	2101      	movs	r1, #1
 8002558:	0018      	movs	r0, r3
 800255a:	f004 fa96 	bl	8006a8a <HAL_GPIO_WritePin>
	return status;
 800255e:	193b      	adds	r3, r7, r4
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	b25b      	sxtb	r3, r3
}
 8002564:	0018      	movs	r0, r3
 8002566:	46bd      	mov	sp, r7
 8002568:	b005      	add	sp, #20
 800256a:	bd90      	pop	{r4, r7, pc}
 800256c:	200002fc 	.word	0x200002fc
 8002570:	50000c00 	.word	0x50000c00
 8002574:	20000300 	.word	0x20000300
 8002578:	20000410 	.word	0x20000410

0800257c <DRV_SetSpiIn>:
	spi_in->raw_data = rx_data[1];
	return status;
}

int8_t DRV_SetSpiIn(drv_spi_in_t* spi_in)
{
 800257c:	b590      	push	{r4, r7, lr}
 800257e:	b087      	sub	sp, #28
 8002580:	af02      	add	r7, sp, #8
 8002582:	6078      	str	r0, [r7, #4]
	int8_t status = HAL_OK;
 8002584:	240f      	movs	r4, #15
 8002586:	193b      	adds	r3, r7, r4
 8002588:	2200      	movs	r2, #0
 800258a:	701a      	strb	r2, [r3, #0]

	tx_data[0] = SPI_IN;
 800258c:	4b12      	ldr	r3, [pc, #72]	@ (80025d8 <DRV_SetSpiIn+0x5c>)
 800258e:	2209      	movs	r2, #9
 8002590:	701a      	strb	r2, [r3, #0]
	tx_data[1] = spi_in->raw_data;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	781a      	ldrb	r2, [r3, #0]
 8002596:	4b10      	ldr	r3, [pc, #64]	@ (80025d8 <DRV_SetSpiIn+0x5c>)
 8002598:	705a      	strb	r2, [r3, #1]

	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_RESET);
 800259a:	4b10      	ldr	r3, [pc, #64]	@ (80025dc <DRV_SetSpiIn+0x60>)
 800259c:	2200      	movs	r2, #0
 800259e:	2101      	movs	r1, #1
 80025a0:	0018      	movs	r0, r3
 80025a2:	f004 fa72 	bl	8006a8a <HAL_GPIO_WritePin>
	status = HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 100);
 80025a6:	4a0e      	ldr	r2, [pc, #56]	@ (80025e0 <DRV_SetSpiIn+0x64>)
 80025a8:	490b      	ldr	r1, [pc, #44]	@ (80025d8 <DRV_SetSpiIn+0x5c>)
 80025aa:	480e      	ldr	r0, [pc, #56]	@ (80025e4 <DRV_SetSpiIn+0x68>)
 80025ac:	2364      	movs	r3, #100	@ 0x64
 80025ae:	9300      	str	r3, [sp, #0]
 80025b0:	2302      	movs	r3, #2
 80025b2:	f007 fa07 	bl	80099c4 <HAL_SPI_TransmitReceive>
 80025b6:	0003      	movs	r3, r0
 80025b8:	001a      	movs	r2, r3
 80025ba:	193b      	adds	r3, r7, r4
 80025bc:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_SET);
 80025be:	4b07      	ldr	r3, [pc, #28]	@ (80025dc <DRV_SetSpiIn+0x60>)
 80025c0:	2201      	movs	r2, #1
 80025c2:	2101      	movs	r1, #1
 80025c4:	0018      	movs	r0, r3
 80025c6:	f004 fa60 	bl	8006a8a <HAL_GPIO_WritePin>
	return status;
 80025ca:	193b      	adds	r3, r7, r4
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	b25b      	sxtb	r3, r3
}
 80025d0:	0018      	movs	r0, r3
 80025d2:	46bd      	mov	sp, r7
 80025d4:	b005      	add	sp, #20
 80025d6:	bd90      	pop	{r4, r7, pc}
 80025d8:	200002fc 	.word	0x200002fc
 80025dc:	50000c00 	.word	0x50000c00
 80025e0:	20000300 	.word	0x20000300
 80025e4:	20000410 	.word	0x20000410

080025e8 <DRV_GetConfig1>:

int8_t DRV_GetConfig1(drv_config_1_t* config_1)
{
 80025e8:	b590      	push	{r4, r7, lr}
 80025ea:	b087      	sub	sp, #28
 80025ec:	af02      	add	r7, sp, #8
 80025ee:	6078      	str	r0, [r7, #4]
	int8_t status = HAL_OK;
 80025f0:	240f      	movs	r4, #15
 80025f2:	193b      	adds	r3, r7, r4
 80025f4:	2200      	movs	r2, #0
 80025f6:	701a      	strb	r2, [r3, #0]

	tx_data[0] = (CONFIG_1 | READ_MASK);
 80025f8:	4b17      	ldr	r3, [pc, #92]	@ (8002658 <DRV_GetConfig1+0x70>)
 80025fa:	224a      	movs	r2, #74	@ 0x4a
 80025fc:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0;
 80025fe:	4b16      	ldr	r3, [pc, #88]	@ (8002658 <DRV_GetConfig1+0x70>)
 8002600:	2200      	movs	r2, #0
 8002602:	705a      	strb	r2, [r3, #1]
	rx_data[0] = 0;
 8002604:	4b15      	ldr	r3, [pc, #84]	@ (800265c <DRV_GetConfig1+0x74>)
 8002606:	2200      	movs	r2, #0
 8002608:	701a      	strb	r2, [r3, #0]
	rx_data[1] = 0;
 800260a:	4b14      	ldr	r3, [pc, #80]	@ (800265c <DRV_GetConfig1+0x74>)
 800260c:	2200      	movs	r2, #0
 800260e:	705a      	strb	r2, [r3, #1]

	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_RESET);
 8002610:	4b13      	ldr	r3, [pc, #76]	@ (8002660 <DRV_GetConfig1+0x78>)
 8002612:	2200      	movs	r2, #0
 8002614:	2101      	movs	r1, #1
 8002616:	0018      	movs	r0, r3
 8002618:	f004 fa37 	bl	8006a8a <HAL_GPIO_WritePin>
	status = HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 100);
 800261c:	4a0f      	ldr	r2, [pc, #60]	@ (800265c <DRV_GetConfig1+0x74>)
 800261e:	490e      	ldr	r1, [pc, #56]	@ (8002658 <DRV_GetConfig1+0x70>)
 8002620:	4810      	ldr	r0, [pc, #64]	@ (8002664 <DRV_GetConfig1+0x7c>)
 8002622:	2364      	movs	r3, #100	@ 0x64
 8002624:	9300      	str	r3, [sp, #0]
 8002626:	2302      	movs	r3, #2
 8002628:	f007 f9cc 	bl	80099c4 <HAL_SPI_TransmitReceive>
 800262c:	0003      	movs	r3, r0
 800262e:	001a      	movs	r2, r3
 8002630:	193b      	adds	r3, r7, r4
 8002632:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_SET);
 8002634:	4b0a      	ldr	r3, [pc, #40]	@ (8002660 <DRV_GetConfig1+0x78>)
 8002636:	2201      	movs	r2, #1
 8002638:	2101      	movs	r1, #1
 800263a:	0018      	movs	r0, r3
 800263c:	f004 fa25 	bl	8006a8a <HAL_GPIO_WritePin>

	config_1->raw_data = rx_data[1];
 8002640:	4b06      	ldr	r3, [pc, #24]	@ (800265c <DRV_GetConfig1+0x74>)
 8002642:	785a      	ldrb	r2, [r3, #1]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	701a      	strb	r2, [r3, #0]
	return status;
 8002648:	193b      	adds	r3, r7, r4
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	b25b      	sxtb	r3, r3
}
 800264e:	0018      	movs	r0, r3
 8002650:	46bd      	mov	sp, r7
 8002652:	b005      	add	sp, #20
 8002654:	bd90      	pop	{r4, r7, pc}
 8002656:	46c0      	nop			@ (mov r8, r8)
 8002658:	200002fc 	.word	0x200002fc
 800265c:	20000300 	.word	0x20000300
 8002660:	50000c00 	.word	0x50000c00
 8002664:	20000410 	.word	0x20000410

08002668 <DRV_SetConfig1>:

int8_t DRV_SetConfig1(drv_config_1_t* config_1)
{
 8002668:	b590      	push	{r4, r7, lr}
 800266a:	b087      	sub	sp, #28
 800266c:	af02      	add	r7, sp, #8
 800266e:	6078      	str	r0, [r7, #4]
	int8_t status = HAL_OK;
 8002670:	240f      	movs	r4, #15
 8002672:	193b      	adds	r3, r7, r4
 8002674:	2200      	movs	r2, #0
 8002676:	701a      	strb	r2, [r3, #0]

	tx_data[0] = CONFIG_1;
 8002678:	4b12      	ldr	r3, [pc, #72]	@ (80026c4 <DRV_SetConfig1+0x5c>)
 800267a:	220a      	movs	r2, #10
 800267c:	701a      	strb	r2, [r3, #0]
	tx_data[1] = config_1->raw_data;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	781a      	ldrb	r2, [r3, #0]
 8002682:	4b10      	ldr	r3, [pc, #64]	@ (80026c4 <DRV_SetConfig1+0x5c>)
 8002684:	705a      	strb	r2, [r3, #1]

	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_RESET);
 8002686:	4b10      	ldr	r3, [pc, #64]	@ (80026c8 <DRV_SetConfig1+0x60>)
 8002688:	2200      	movs	r2, #0
 800268a:	2101      	movs	r1, #1
 800268c:	0018      	movs	r0, r3
 800268e:	f004 f9fc 	bl	8006a8a <HAL_GPIO_WritePin>
	status = HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 100);
 8002692:	4a0e      	ldr	r2, [pc, #56]	@ (80026cc <DRV_SetConfig1+0x64>)
 8002694:	490b      	ldr	r1, [pc, #44]	@ (80026c4 <DRV_SetConfig1+0x5c>)
 8002696:	480e      	ldr	r0, [pc, #56]	@ (80026d0 <DRV_SetConfig1+0x68>)
 8002698:	2364      	movs	r3, #100	@ 0x64
 800269a:	9300      	str	r3, [sp, #0]
 800269c:	2302      	movs	r3, #2
 800269e:	f007 f991 	bl	80099c4 <HAL_SPI_TransmitReceive>
 80026a2:	0003      	movs	r3, r0
 80026a4:	001a      	movs	r2, r3
 80026a6:	193b      	adds	r3, r7, r4
 80026a8:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_SET);
 80026aa:	4b07      	ldr	r3, [pc, #28]	@ (80026c8 <DRV_SetConfig1+0x60>)
 80026ac:	2201      	movs	r2, #1
 80026ae:	2101      	movs	r1, #1
 80026b0:	0018      	movs	r0, r3
 80026b2:	f004 f9ea 	bl	8006a8a <HAL_GPIO_WritePin>
	return status;
 80026b6:	193b      	adds	r3, r7, r4
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	b25b      	sxtb	r3, r3
}
 80026bc:	0018      	movs	r0, r3
 80026be:	46bd      	mov	sp, r7
 80026c0:	b005      	add	sp, #20
 80026c2:	bd90      	pop	{r4, r7, pc}
 80026c4:	200002fc 	.word	0x200002fc
 80026c8:	50000c00 	.word	0x50000c00
 80026cc:	20000300 	.word	0x20000300
 80026d0:	20000410 	.word	0x20000410

080026d4 <DRV_GetConfig2>:

int8_t DRV_GetConfig2(drv_config_2_t* config_2)
{
 80026d4:	b590      	push	{r4, r7, lr}
 80026d6:	b087      	sub	sp, #28
 80026d8:	af02      	add	r7, sp, #8
 80026da:	6078      	str	r0, [r7, #4]
	int8_t status = HAL_OK;
 80026dc:	240f      	movs	r4, #15
 80026de:	193b      	adds	r3, r7, r4
 80026e0:	2200      	movs	r2, #0
 80026e2:	701a      	strb	r2, [r3, #0]

	tx_data[0] = (CONFIG_2 | READ_MASK);
 80026e4:	4b17      	ldr	r3, [pc, #92]	@ (8002744 <DRV_GetConfig2+0x70>)
 80026e6:	224b      	movs	r2, #75	@ 0x4b
 80026e8:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0;
 80026ea:	4b16      	ldr	r3, [pc, #88]	@ (8002744 <DRV_GetConfig2+0x70>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	705a      	strb	r2, [r3, #1]
	rx_data[0] = 0;
 80026f0:	4b15      	ldr	r3, [pc, #84]	@ (8002748 <DRV_GetConfig2+0x74>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	701a      	strb	r2, [r3, #0]
	rx_data[1] = 0;
 80026f6:	4b14      	ldr	r3, [pc, #80]	@ (8002748 <DRV_GetConfig2+0x74>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	705a      	strb	r2, [r3, #1]

	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_RESET);
 80026fc:	4b13      	ldr	r3, [pc, #76]	@ (800274c <DRV_GetConfig2+0x78>)
 80026fe:	2200      	movs	r2, #0
 8002700:	2101      	movs	r1, #1
 8002702:	0018      	movs	r0, r3
 8002704:	f004 f9c1 	bl	8006a8a <HAL_GPIO_WritePin>
	status = HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 100);
 8002708:	4a0f      	ldr	r2, [pc, #60]	@ (8002748 <DRV_GetConfig2+0x74>)
 800270a:	490e      	ldr	r1, [pc, #56]	@ (8002744 <DRV_GetConfig2+0x70>)
 800270c:	4810      	ldr	r0, [pc, #64]	@ (8002750 <DRV_GetConfig2+0x7c>)
 800270e:	2364      	movs	r3, #100	@ 0x64
 8002710:	9300      	str	r3, [sp, #0]
 8002712:	2302      	movs	r3, #2
 8002714:	f007 f956 	bl	80099c4 <HAL_SPI_TransmitReceive>
 8002718:	0003      	movs	r3, r0
 800271a:	001a      	movs	r2, r3
 800271c:	193b      	adds	r3, r7, r4
 800271e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_SET);
 8002720:	4b0a      	ldr	r3, [pc, #40]	@ (800274c <DRV_GetConfig2+0x78>)
 8002722:	2201      	movs	r2, #1
 8002724:	2101      	movs	r1, #1
 8002726:	0018      	movs	r0, r3
 8002728:	f004 f9af 	bl	8006a8a <HAL_GPIO_WritePin>

	config_2->raw_data = rx_data[1];
 800272c:	4b06      	ldr	r3, [pc, #24]	@ (8002748 <DRV_GetConfig2+0x74>)
 800272e:	785a      	ldrb	r2, [r3, #1]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	701a      	strb	r2, [r3, #0]
	return status;
 8002734:	193b      	adds	r3, r7, r4
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	b25b      	sxtb	r3, r3
}
 800273a:	0018      	movs	r0, r3
 800273c:	46bd      	mov	sp, r7
 800273e:	b005      	add	sp, #20
 8002740:	bd90      	pop	{r4, r7, pc}
 8002742:	46c0      	nop			@ (mov r8, r8)
 8002744:	200002fc 	.word	0x200002fc
 8002748:	20000300 	.word	0x20000300
 800274c:	50000c00 	.word	0x50000c00
 8002750:	20000410 	.word	0x20000410

08002754 <DRV_SetConfig2>:

int8_t DRV_SetConfig2(drv_config_2_t* config_2)
{
 8002754:	b590      	push	{r4, r7, lr}
 8002756:	b087      	sub	sp, #28
 8002758:	af02      	add	r7, sp, #8
 800275a:	6078      	str	r0, [r7, #4]
	int8_t status = HAL_OK;
 800275c:	240f      	movs	r4, #15
 800275e:	193b      	adds	r3, r7, r4
 8002760:	2200      	movs	r2, #0
 8002762:	701a      	strb	r2, [r3, #0]

	tx_data[0] = CONFIG_2;
 8002764:	4b12      	ldr	r3, [pc, #72]	@ (80027b0 <DRV_SetConfig2+0x5c>)
 8002766:	220b      	movs	r2, #11
 8002768:	701a      	strb	r2, [r3, #0]
	tx_data[1] = config_2->raw_data;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	781a      	ldrb	r2, [r3, #0]
 800276e:	4b10      	ldr	r3, [pc, #64]	@ (80027b0 <DRV_SetConfig2+0x5c>)
 8002770:	705a      	strb	r2, [r3, #1]

	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_RESET);
 8002772:	4b10      	ldr	r3, [pc, #64]	@ (80027b4 <DRV_SetConfig2+0x60>)
 8002774:	2200      	movs	r2, #0
 8002776:	2101      	movs	r1, #1
 8002778:	0018      	movs	r0, r3
 800277a:	f004 f986 	bl	8006a8a <HAL_GPIO_WritePin>
	status = HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 100);
 800277e:	4a0e      	ldr	r2, [pc, #56]	@ (80027b8 <DRV_SetConfig2+0x64>)
 8002780:	490b      	ldr	r1, [pc, #44]	@ (80027b0 <DRV_SetConfig2+0x5c>)
 8002782:	480e      	ldr	r0, [pc, #56]	@ (80027bc <DRV_SetConfig2+0x68>)
 8002784:	2364      	movs	r3, #100	@ 0x64
 8002786:	9300      	str	r3, [sp, #0]
 8002788:	2302      	movs	r3, #2
 800278a:	f007 f91b 	bl	80099c4 <HAL_SPI_TransmitReceive>
 800278e:	0003      	movs	r3, r0
 8002790:	001a      	movs	r2, r3
 8002792:	193b      	adds	r3, r7, r4
 8002794:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_SET);
 8002796:	4b07      	ldr	r3, [pc, #28]	@ (80027b4 <DRV_SetConfig2+0x60>)
 8002798:	2201      	movs	r2, #1
 800279a:	2101      	movs	r1, #1
 800279c:	0018      	movs	r0, r3
 800279e:	f004 f974 	bl	8006a8a <HAL_GPIO_WritePin>
	return status;
 80027a2:	193b      	adds	r3, r7, r4
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	b25b      	sxtb	r3, r3
}
 80027a8:	0018      	movs	r0, r3
 80027aa:	46bd      	mov	sp, r7
 80027ac:	b005      	add	sp, #20
 80027ae:	bd90      	pop	{r4, r7, pc}
 80027b0:	200002fc 	.word	0x200002fc
 80027b4:	50000c00 	.word	0x50000c00
 80027b8:	20000300 	.word	0x20000300
 80027bc:	20000410 	.word	0x20000410

080027c0 <DRV_GetConfig3>:

int8_t DRV_GetConfig3(drv_config_3_t* config_3)
{
 80027c0:	b590      	push	{r4, r7, lr}
 80027c2:	b087      	sub	sp, #28
 80027c4:	af02      	add	r7, sp, #8
 80027c6:	6078      	str	r0, [r7, #4]
	int8_t status = HAL_OK;
 80027c8:	240f      	movs	r4, #15
 80027ca:	193b      	adds	r3, r7, r4
 80027cc:	2200      	movs	r2, #0
 80027ce:	701a      	strb	r2, [r3, #0]

	tx_data[0] = (CONFIG_3 | READ_MASK);
 80027d0:	4b17      	ldr	r3, [pc, #92]	@ (8002830 <DRV_GetConfig3+0x70>)
 80027d2:	224c      	movs	r2, #76	@ 0x4c
 80027d4:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0;
 80027d6:	4b16      	ldr	r3, [pc, #88]	@ (8002830 <DRV_GetConfig3+0x70>)
 80027d8:	2200      	movs	r2, #0
 80027da:	705a      	strb	r2, [r3, #1]
	rx_data[0] = 0;
 80027dc:	4b15      	ldr	r3, [pc, #84]	@ (8002834 <DRV_GetConfig3+0x74>)
 80027de:	2200      	movs	r2, #0
 80027e0:	701a      	strb	r2, [r3, #0]
	rx_data[1] = 0;
 80027e2:	4b14      	ldr	r3, [pc, #80]	@ (8002834 <DRV_GetConfig3+0x74>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	705a      	strb	r2, [r3, #1]

	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_RESET);
 80027e8:	4b13      	ldr	r3, [pc, #76]	@ (8002838 <DRV_GetConfig3+0x78>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	2101      	movs	r1, #1
 80027ee:	0018      	movs	r0, r3
 80027f0:	f004 f94b 	bl	8006a8a <HAL_GPIO_WritePin>
	status = HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 100);
 80027f4:	4a0f      	ldr	r2, [pc, #60]	@ (8002834 <DRV_GetConfig3+0x74>)
 80027f6:	490e      	ldr	r1, [pc, #56]	@ (8002830 <DRV_GetConfig3+0x70>)
 80027f8:	4810      	ldr	r0, [pc, #64]	@ (800283c <DRV_GetConfig3+0x7c>)
 80027fa:	2364      	movs	r3, #100	@ 0x64
 80027fc:	9300      	str	r3, [sp, #0]
 80027fe:	2302      	movs	r3, #2
 8002800:	f007 f8e0 	bl	80099c4 <HAL_SPI_TransmitReceive>
 8002804:	0003      	movs	r3, r0
 8002806:	001a      	movs	r2, r3
 8002808:	193b      	adds	r3, r7, r4
 800280a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_SET);
 800280c:	4b0a      	ldr	r3, [pc, #40]	@ (8002838 <DRV_GetConfig3+0x78>)
 800280e:	2201      	movs	r2, #1
 8002810:	2101      	movs	r1, #1
 8002812:	0018      	movs	r0, r3
 8002814:	f004 f939 	bl	8006a8a <HAL_GPIO_WritePin>

	config_3->raw_data = rx_data[1];
 8002818:	4b06      	ldr	r3, [pc, #24]	@ (8002834 <DRV_GetConfig3+0x74>)
 800281a:	785a      	ldrb	r2, [r3, #1]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	701a      	strb	r2, [r3, #0]
	return status;
 8002820:	193b      	adds	r3, r7, r4
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	b25b      	sxtb	r3, r3
}
 8002826:	0018      	movs	r0, r3
 8002828:	46bd      	mov	sp, r7
 800282a:	b005      	add	sp, #20
 800282c:	bd90      	pop	{r4, r7, pc}
 800282e:	46c0      	nop			@ (mov r8, r8)
 8002830:	200002fc 	.word	0x200002fc
 8002834:	20000300 	.word	0x20000300
 8002838:	50000c00 	.word	0x50000c00
 800283c:	20000410 	.word	0x20000410

08002840 <DRV_SetConfig3>:

int8_t DRV_SetConfig3(drv_config_3_t* config_3)
{
 8002840:	b590      	push	{r4, r7, lr}
 8002842:	b087      	sub	sp, #28
 8002844:	af02      	add	r7, sp, #8
 8002846:	6078      	str	r0, [r7, #4]
	int8_t status = HAL_OK;
 8002848:	240f      	movs	r4, #15
 800284a:	193b      	adds	r3, r7, r4
 800284c:	2200      	movs	r2, #0
 800284e:	701a      	strb	r2, [r3, #0]

	tx_data[0] = CONFIG_3;
 8002850:	4b12      	ldr	r3, [pc, #72]	@ (800289c <DRV_SetConfig3+0x5c>)
 8002852:	220c      	movs	r2, #12
 8002854:	701a      	strb	r2, [r3, #0]
	tx_data[1] = config_3->raw_data;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	781a      	ldrb	r2, [r3, #0]
 800285a:	4b10      	ldr	r3, [pc, #64]	@ (800289c <DRV_SetConfig3+0x5c>)
 800285c:	705a      	strb	r2, [r3, #1]

	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_RESET);
 800285e:	4b10      	ldr	r3, [pc, #64]	@ (80028a0 <DRV_SetConfig3+0x60>)
 8002860:	2200      	movs	r2, #0
 8002862:	2101      	movs	r1, #1
 8002864:	0018      	movs	r0, r3
 8002866:	f004 f910 	bl	8006a8a <HAL_GPIO_WritePin>
	status = HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 100);
 800286a:	4a0e      	ldr	r2, [pc, #56]	@ (80028a4 <DRV_SetConfig3+0x64>)
 800286c:	490b      	ldr	r1, [pc, #44]	@ (800289c <DRV_SetConfig3+0x5c>)
 800286e:	480e      	ldr	r0, [pc, #56]	@ (80028a8 <DRV_SetConfig3+0x68>)
 8002870:	2364      	movs	r3, #100	@ 0x64
 8002872:	9300      	str	r3, [sp, #0]
 8002874:	2302      	movs	r3, #2
 8002876:	f007 f8a5 	bl	80099c4 <HAL_SPI_TransmitReceive>
 800287a:	0003      	movs	r3, r0
 800287c:	001a      	movs	r2, r3
 800287e:	193b      	adds	r3, r7, r4
 8002880:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_SET);
 8002882:	4b07      	ldr	r3, [pc, #28]	@ (80028a0 <DRV_SetConfig3+0x60>)
 8002884:	2201      	movs	r2, #1
 8002886:	2101      	movs	r1, #1
 8002888:	0018      	movs	r0, r3
 800288a:	f004 f8fe 	bl	8006a8a <HAL_GPIO_WritePin>
	return status;
 800288e:	193b      	adds	r3, r7, r4
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	b25b      	sxtb	r3, r3
}
 8002894:	0018      	movs	r0, r3
 8002896:	46bd      	mov	sp, r7
 8002898:	b005      	add	sp, #20
 800289a:	bd90      	pop	{r4, r7, pc}
 800289c:	200002fc 	.word	0x200002fc
 80028a0:	50000c00 	.word	0x50000c00
 80028a4:	20000300 	.word	0x20000300
 80028a8:	20000410 	.word	0x20000410

080028ac <DRV_GetConfig4>:

int8_t DRV_GetConfig4(drv_config_4_t* config_4)
{
 80028ac:	b590      	push	{r4, r7, lr}
 80028ae:	b087      	sub	sp, #28
 80028b0:	af02      	add	r7, sp, #8
 80028b2:	6078      	str	r0, [r7, #4]
	int8_t status = HAL_OK;
 80028b4:	240f      	movs	r4, #15
 80028b6:	193b      	adds	r3, r7, r4
 80028b8:	2200      	movs	r2, #0
 80028ba:	701a      	strb	r2, [r3, #0]

	tx_data[0] = (CONFIG_4 | READ_MASK);
 80028bc:	4b17      	ldr	r3, [pc, #92]	@ (800291c <DRV_GetConfig4+0x70>)
 80028be:	224d      	movs	r2, #77	@ 0x4d
 80028c0:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0;
 80028c2:	4b16      	ldr	r3, [pc, #88]	@ (800291c <DRV_GetConfig4+0x70>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	705a      	strb	r2, [r3, #1]
	rx_data[0] = 0;
 80028c8:	4b15      	ldr	r3, [pc, #84]	@ (8002920 <DRV_GetConfig4+0x74>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	701a      	strb	r2, [r3, #0]
	rx_data[1] = 0;
 80028ce:	4b14      	ldr	r3, [pc, #80]	@ (8002920 <DRV_GetConfig4+0x74>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	705a      	strb	r2, [r3, #1]

	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_RESET);
 80028d4:	4b13      	ldr	r3, [pc, #76]	@ (8002924 <DRV_GetConfig4+0x78>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	2101      	movs	r1, #1
 80028da:	0018      	movs	r0, r3
 80028dc:	f004 f8d5 	bl	8006a8a <HAL_GPIO_WritePin>
	status = HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 100);
 80028e0:	4a0f      	ldr	r2, [pc, #60]	@ (8002920 <DRV_GetConfig4+0x74>)
 80028e2:	490e      	ldr	r1, [pc, #56]	@ (800291c <DRV_GetConfig4+0x70>)
 80028e4:	4810      	ldr	r0, [pc, #64]	@ (8002928 <DRV_GetConfig4+0x7c>)
 80028e6:	2364      	movs	r3, #100	@ 0x64
 80028e8:	9300      	str	r3, [sp, #0]
 80028ea:	2302      	movs	r3, #2
 80028ec:	f007 f86a 	bl	80099c4 <HAL_SPI_TransmitReceive>
 80028f0:	0003      	movs	r3, r0
 80028f2:	001a      	movs	r2, r3
 80028f4:	193b      	adds	r3, r7, r4
 80028f6:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_SET);
 80028f8:	4b0a      	ldr	r3, [pc, #40]	@ (8002924 <DRV_GetConfig4+0x78>)
 80028fa:	2201      	movs	r2, #1
 80028fc:	2101      	movs	r1, #1
 80028fe:	0018      	movs	r0, r3
 8002900:	f004 f8c3 	bl	8006a8a <HAL_GPIO_WritePin>

	config_4->raw_data = rx_data[1];
 8002904:	4b06      	ldr	r3, [pc, #24]	@ (8002920 <DRV_GetConfig4+0x74>)
 8002906:	785a      	ldrb	r2, [r3, #1]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	701a      	strb	r2, [r3, #0]
	return status;
 800290c:	193b      	adds	r3, r7, r4
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	b25b      	sxtb	r3, r3
}
 8002912:	0018      	movs	r0, r3
 8002914:	46bd      	mov	sp, r7
 8002916:	b005      	add	sp, #20
 8002918:	bd90      	pop	{r4, r7, pc}
 800291a:	46c0      	nop			@ (mov r8, r8)
 800291c:	200002fc 	.word	0x200002fc
 8002920:	20000300 	.word	0x20000300
 8002924:	50000c00 	.word	0x50000c00
 8002928:	20000410 	.word	0x20000410

0800292c <DRV_SetConfig4>:

int8_t DRV_SetConfig4(drv_config_4_t* config_4)
{
 800292c:	b590      	push	{r4, r7, lr}
 800292e:	b087      	sub	sp, #28
 8002930:	af02      	add	r7, sp, #8
 8002932:	6078      	str	r0, [r7, #4]
	int8_t status = HAL_OK;
 8002934:	240f      	movs	r4, #15
 8002936:	193b      	adds	r3, r7, r4
 8002938:	2200      	movs	r2, #0
 800293a:	701a      	strb	r2, [r3, #0]

	tx_data[0] = CONFIG_4;
 800293c:	4b12      	ldr	r3, [pc, #72]	@ (8002988 <DRV_SetConfig4+0x5c>)
 800293e:	220d      	movs	r2, #13
 8002940:	701a      	strb	r2, [r3, #0]
	tx_data[1] = config_4->raw_data;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	781a      	ldrb	r2, [r3, #0]
 8002946:	4b10      	ldr	r3, [pc, #64]	@ (8002988 <DRV_SetConfig4+0x5c>)
 8002948:	705a      	strb	r2, [r3, #1]

	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_RESET);
 800294a:	4b10      	ldr	r3, [pc, #64]	@ (800298c <DRV_SetConfig4+0x60>)
 800294c:	2200      	movs	r2, #0
 800294e:	2101      	movs	r1, #1
 8002950:	0018      	movs	r0, r3
 8002952:	f004 f89a 	bl	8006a8a <HAL_GPIO_WritePin>
	status = HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 100);
 8002956:	4a0e      	ldr	r2, [pc, #56]	@ (8002990 <DRV_SetConfig4+0x64>)
 8002958:	490b      	ldr	r1, [pc, #44]	@ (8002988 <DRV_SetConfig4+0x5c>)
 800295a:	480e      	ldr	r0, [pc, #56]	@ (8002994 <DRV_SetConfig4+0x68>)
 800295c:	2364      	movs	r3, #100	@ 0x64
 800295e:	9300      	str	r3, [sp, #0]
 8002960:	2302      	movs	r3, #2
 8002962:	f007 f82f 	bl	80099c4 <HAL_SPI_TransmitReceive>
 8002966:	0003      	movs	r3, r0
 8002968:	001a      	movs	r2, r3
 800296a:	193b      	adds	r3, r7, r4
 800296c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_SET);
 800296e:	4b07      	ldr	r3, [pc, #28]	@ (800298c <DRV_SetConfig4+0x60>)
 8002970:	2201      	movs	r2, #1
 8002972:	2101      	movs	r1, #1
 8002974:	0018      	movs	r0, r3
 8002976:	f004 f888 	bl	8006a8a <HAL_GPIO_WritePin>
	return status;
 800297a:	193b      	adds	r3, r7, r4
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	b25b      	sxtb	r3, r3
}
 8002980:	0018      	movs	r0, r3
 8002982:	46bd      	mov	sp, r7
 8002984:	b005      	add	sp, #20
 8002986:	bd90      	pop	{r4, r7, pc}
 8002988:	200002fc 	.word	0x200002fc
 800298c:	50000c00 	.word	0x50000c00
 8002990:	20000300 	.word	0x20000300
 8002994:	20000410 	.word	0x20000410

08002998 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	0002      	movs	r2, r0
 80029a0:	1dfb      	adds	r3, r7, #7
 80029a2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80029a4:	1dfb      	adds	r3, r7, #7
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80029aa:	d809      	bhi.n	80029c0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029ac:	1dfb      	adds	r3, r7, #7
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	001a      	movs	r2, r3
 80029b2:	231f      	movs	r3, #31
 80029b4:	401a      	ands	r2, r3
 80029b6:	4b04      	ldr	r3, [pc, #16]	@ (80029c8 <__NVIC_EnableIRQ+0x30>)
 80029b8:	2101      	movs	r1, #1
 80029ba:	4091      	lsls	r1, r2
 80029bc:	000a      	movs	r2, r1
 80029be:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80029c0:	46c0      	nop			@ (mov r8, r8)
 80029c2:	46bd      	mov	sp, r7
 80029c4:	b002      	add	sp, #8
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	e000e100 	.word	0xe000e100

080029cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029cc:	b590      	push	{r4, r7, lr}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	0002      	movs	r2, r0
 80029d4:	6039      	str	r1, [r7, #0]
 80029d6:	1dfb      	adds	r3, r7, #7
 80029d8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80029da:	1dfb      	adds	r3, r7, #7
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	2b7f      	cmp	r3, #127	@ 0x7f
 80029e0:	d828      	bhi.n	8002a34 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80029e2:	4a2f      	ldr	r2, [pc, #188]	@ (8002aa0 <__NVIC_SetPriority+0xd4>)
 80029e4:	1dfb      	adds	r3, r7, #7
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	b25b      	sxtb	r3, r3
 80029ea:	089b      	lsrs	r3, r3, #2
 80029ec:	33c0      	adds	r3, #192	@ 0xc0
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	589b      	ldr	r3, [r3, r2]
 80029f2:	1dfa      	adds	r2, r7, #7
 80029f4:	7812      	ldrb	r2, [r2, #0]
 80029f6:	0011      	movs	r1, r2
 80029f8:	2203      	movs	r2, #3
 80029fa:	400a      	ands	r2, r1
 80029fc:	00d2      	lsls	r2, r2, #3
 80029fe:	21ff      	movs	r1, #255	@ 0xff
 8002a00:	4091      	lsls	r1, r2
 8002a02:	000a      	movs	r2, r1
 8002a04:	43d2      	mvns	r2, r2
 8002a06:	401a      	ands	r2, r3
 8002a08:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	019b      	lsls	r3, r3, #6
 8002a0e:	22ff      	movs	r2, #255	@ 0xff
 8002a10:	401a      	ands	r2, r3
 8002a12:	1dfb      	adds	r3, r7, #7
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	0018      	movs	r0, r3
 8002a18:	2303      	movs	r3, #3
 8002a1a:	4003      	ands	r3, r0
 8002a1c:	00db      	lsls	r3, r3, #3
 8002a1e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a20:	481f      	ldr	r0, [pc, #124]	@ (8002aa0 <__NVIC_SetPriority+0xd4>)
 8002a22:	1dfb      	adds	r3, r7, #7
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	b25b      	sxtb	r3, r3
 8002a28:	089b      	lsrs	r3, r3, #2
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	33c0      	adds	r3, #192	@ 0xc0
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002a32:	e031      	b.n	8002a98 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a34:	4a1b      	ldr	r2, [pc, #108]	@ (8002aa4 <__NVIC_SetPriority+0xd8>)
 8002a36:	1dfb      	adds	r3, r7, #7
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	0019      	movs	r1, r3
 8002a3c:	230f      	movs	r3, #15
 8002a3e:	400b      	ands	r3, r1
 8002a40:	3b08      	subs	r3, #8
 8002a42:	089b      	lsrs	r3, r3, #2
 8002a44:	3306      	adds	r3, #6
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	18d3      	adds	r3, r2, r3
 8002a4a:	3304      	adds	r3, #4
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	1dfa      	adds	r2, r7, #7
 8002a50:	7812      	ldrb	r2, [r2, #0]
 8002a52:	0011      	movs	r1, r2
 8002a54:	2203      	movs	r2, #3
 8002a56:	400a      	ands	r2, r1
 8002a58:	00d2      	lsls	r2, r2, #3
 8002a5a:	21ff      	movs	r1, #255	@ 0xff
 8002a5c:	4091      	lsls	r1, r2
 8002a5e:	000a      	movs	r2, r1
 8002a60:	43d2      	mvns	r2, r2
 8002a62:	401a      	ands	r2, r3
 8002a64:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	019b      	lsls	r3, r3, #6
 8002a6a:	22ff      	movs	r2, #255	@ 0xff
 8002a6c:	401a      	ands	r2, r3
 8002a6e:	1dfb      	adds	r3, r7, #7
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	0018      	movs	r0, r3
 8002a74:	2303      	movs	r3, #3
 8002a76:	4003      	ands	r3, r0
 8002a78:	00db      	lsls	r3, r3, #3
 8002a7a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a7c:	4809      	ldr	r0, [pc, #36]	@ (8002aa4 <__NVIC_SetPriority+0xd8>)
 8002a7e:	1dfb      	adds	r3, r7, #7
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	001c      	movs	r4, r3
 8002a84:	230f      	movs	r3, #15
 8002a86:	4023      	ands	r3, r4
 8002a88:	3b08      	subs	r3, #8
 8002a8a:	089b      	lsrs	r3, r3, #2
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	3306      	adds	r3, #6
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	18c3      	adds	r3, r0, r3
 8002a94:	3304      	adds	r3, #4
 8002a96:	601a      	str	r2, [r3, #0]
}
 8002a98:	46c0      	nop			@ (mov r8, r8)
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	b003      	add	sp, #12
 8002a9e:	bd90      	pop	{r4, r7, pc}
 8002aa0:	e000e100 	.word	0xe000e100
 8002aa4:	e000ed00 	.word	0xe000ed00

08002aa8 <LL_ADC_DMA_GetRegAddr>:
  * @param  Register This parameter can be one of the following values:
  *         @arg @ref LL_ADC_DMA_REG_REGULAR_DATA
  * @retval ADC register address
  */
__STATIC_INLINE uint32_t LL_ADC_DMA_GetRegAddr(ADC_TypeDef *ADCx, uint32_t Register)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(Register);

  /* Retrieve address of register DR */
  return (uint32_t) &(ADCx->DR);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	3340      	adds	r3, #64	@ 0x40
}
 8002ab6:	0018      	movs	r0, r3
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	b002      	add	sp, #8
 8002abc:	bd80      	pop	{r7, pc}
	...

08002ac0 <LL_ADC_SetTriggerFrequencyMode>:
  *         @arg @ref LL_ADC_TRIGGER_FREQ_HIGH
  *         @arg @ref LL_ADC_TRIGGER_FREQ_LOW
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetTriggerFrequencyMode(ADC_TypeDef *ADCx, uint32_t TriggerFrequencyMode)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_LFTRIG, TriggerFrequencyMode);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	4a05      	ldr	r2, [pc, #20]	@ (8002ae4 <LL_ADC_SetTriggerFrequencyMode+0x24>)
 8002ad0:	401a      	ands	r2, r3
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	431a      	orrs	r2, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	611a      	str	r2, [r3, #16]
}
 8002ada:	46c0      	nop			@ (mov r8, r8)
 8002adc:	46bd      	mov	sp, r7
 8002ade:	b002      	add	sp, #8
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	46c0      	nop			@ (mov r8, r8)
 8002ae4:	dfffffff 	.word	0xdfffffff

08002ae8 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	695b      	ldr	r3, [r3, #20]
 8002af8:	68ba      	ldr	r2, [r7, #8]
 8002afa:	2104      	movs	r1, #4
 8002afc:	400a      	ands	r2, r1
 8002afe:	2107      	movs	r1, #7
 8002b00:	4091      	lsls	r1, r2
 8002b02:	000a      	movs	r2, r1
 8002b04:	43d2      	mvns	r2, r2
 8002b06:	401a      	ands	r2, r3
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	2104      	movs	r1, #4
 8002b0c:	400b      	ands	r3, r1
 8002b0e:	6879      	ldr	r1, [r7, #4]
 8002b10:	4099      	lsls	r1, r3
 8002b12:	000b      	movs	r3, r1
 8002b14:	431a      	orrs	r2, r3
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002b1a:	46c0      	nop			@ (mov r8, r8)
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	b004      	add	sp, #16
 8002b20:	bd80      	pop	{r7, pc}
	...

08002b24 <LL_ADC_REG_SetSequencerConfigurable>:
  *         @arg @ref LL_ADC_REG_SEQ_FIXED
  *         @arg @ref LL_ADC_REG_SEQ_CONFIGURABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerConfigurable(ADC_TypeDef *ADCx, uint32_t Configurability)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_CHSELRMOD, Configurability);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	4a05      	ldr	r2, [pc, #20]	@ (8002b48 <LL_ADC_REG_SetSequencerConfigurable+0x24>)
 8002b34:	401a      	ands	r2, r3
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	431a      	orrs	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	60da      	str	r2, [r3, #12]
}
 8002b3e:	46c0      	nop			@ (mov r8, r8)
 8002b40:	46bd      	mov	sp, r7
 8002b42:	b002      	add	sp, #8
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	46c0      	nop			@ (mov r8, r8)
 8002b48:	ffdfffff 	.word	0xffdfffff

08002b4c <LL_ADC_REG_SetSequencerScanDirection>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_FORWARD
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_BACKWARD
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerScanDirection(ADC_TypeDef *ADCx, uint32_t ScanDirection)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	2204      	movs	r2, #4
 8002b5c:	4393      	bics	r3, r2
 8002b5e:	001a      	movs	r2, r3
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	431a      	orrs	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	60da      	str	r2, [r3, #12]
}
 8002b68:	46c0      	nop			@ (mov r8, r8)
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	b002      	add	sp, #8
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	025b      	lsls	r3, r3, #9
 8002b82:	0a5b      	lsrs	r3, r3, #9
 8002b84:	431a      	orrs	r2, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002b8a:	46c0      	nop			@ (mov r8, r8)
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	b002      	add	sp, #8
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <LL_ADC_SetOverSamplingScope>:
  *         @arg @ref LL_ADC_OVS_DISABLE
  *         @arg @ref LL_ADC_OVS_GRP_REGULAR_CONTINUED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b082      	sub	sp, #8
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
 8002b9a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_OVSE, OvsScope);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	4393      	bics	r3, r2
 8002ba4:	001a      	movs	r2, r3
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	431a      	orrs	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	611a      	str	r2, [r3, #16]
}
 8002bae:	46c0      	nop			@ (mov r8, r8)
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	b002      	add	sp, #8
 8002bb4:	bd80      	pop	{r7, pc}
	...

08002bb8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	4a05      	ldr	r2, [pc, #20]	@ (8002bdc <LL_ADC_EnableInternalRegulator+0x24>)
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	2280      	movs	r2, #128	@ 0x80
 8002bca:	0552      	lsls	r2, r2, #21
 8002bcc:	431a      	orrs	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002bd2:	46c0      	nop			@ (mov r8, r8)
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	b002      	add	sp, #8
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	46c0      	nop			@ (mov r8, r8)
 8002bdc:	6fffffe8 	.word	0x6fffffe8

08002be0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	2201      	movs	r2, #1
 8002bee:	4013      	ands	r3, r2
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d101      	bne.n	8002bf8 <LL_ADC_IsEnabled+0x18>
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e000      	b.n	8002bfa <LL_ADC_IsEnabled+0x1a>
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	0018      	movs	r0, r3
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	b002      	add	sp, #8
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b082      	sub	sp, #8
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	2202      	movs	r2, #2
 8002c10:	4013      	ands	r3, r2
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d101      	bne.n	8002c1a <LL_ADC_IsDisableOngoing+0x18>
 8002c16:	2301      	movs	r3, #1
 8002c18:	e000      	b.n	8002c1c <LL_ADC_IsDisableOngoing+0x1a>
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	0018      	movs	r0, r3
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	b002      	add	sp, #8
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	4a04      	ldr	r2, [pc, #16]	@ (8002c44 <LL_ADC_REG_StartConversion+0x20>)
 8002c32:	4013      	ands	r3, r2
 8002c34:	2204      	movs	r2, #4
 8002c36:	431a      	orrs	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002c3c:	46c0      	nop			@ (mov r8, r8)
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	b002      	add	sp, #8
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	7fffffe8 	.word	0x7fffffe8

08002c48 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	2204      	movs	r2, #4
 8002c56:	4013      	ands	r3, r2
 8002c58:	2b04      	cmp	r3, #4
 8002c5a:	d101      	bne.n	8002c60 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e000      	b.n	8002c62 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	0018      	movs	r0, r3
 8002c64:	46bd      	mov	sp, r7
 8002c66:	b002      	add	sp, #8
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <LL_ADC_IsActiveFlag_CCRDY>:
  * @rmtoll ISR      CCRDY          LL_ADC_IsActiveFlag_CCRDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_CCRDY(ADC_TypeDef *ADCx)
{
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b082      	sub	sp, #8
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_CCRDY) == (LL_ADC_FLAG_CCRDY)) ? 1UL : 0UL);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	2380      	movs	r3, #128	@ 0x80
 8002c78:	019b      	lsls	r3, r3, #6
 8002c7a:	401a      	ands	r2, r3
 8002c7c:	2380      	movs	r3, #128	@ 0x80
 8002c7e:	019b      	lsls	r3, r3, #6
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d101      	bne.n	8002c88 <LL_ADC_IsActiveFlag_CCRDY+0x1e>
 8002c84:	2301      	movs	r3, #1
 8002c86:	e000      	b.n	8002c8a <LL_ADC_IsActiveFlag_CCRDY+0x20>
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	0018      	movs	r0, r3
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	b002      	add	sp, #8
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <LL_ADC_ClearFlag_CCRDY>:
  * @rmtoll ISR      CCRDY          LL_ADC_ClearFlag_CCRDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE void LL_ADC_ClearFlag_CCRDY(ADC_TypeDef *ADCx)
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b082      	sub	sp, #8
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_CCRDY);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2280      	movs	r2, #128	@ 0x80
 8002c9e:	0192      	lsls	r2, r2, #6
 8002ca0:	601a      	str	r2, [r3, #0]
}
 8002ca2:	46c0      	nop			@ (mov r8, r8)
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	b002      	add	sp, #8
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <LL_ADC_EnableIT_OVR>:
  * @rmtoll IER      OVRIE          LL_ADC_EnableIT_OVR
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_OVR(ADC_TypeDef *ADCx)
{
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b082      	sub	sp, #8
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_OVR);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	2210      	movs	r2, #16
 8002cb8:	431a      	orrs	r2, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	605a      	str	r2, [r3, #4]
}
 8002cbe:	46c0      	nop			@ (mov r8, r8)
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	b002      	add	sp, #8
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <LL_ADC_DisableIT_EOC>:
  * @rmtoll IER      EOCIE          LL_ADC_DisableIT_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b082      	sub	sp, #8
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	2204      	movs	r2, #4
 8002cd4:	4393      	bics	r3, r2
 8002cd6:	001a      	movs	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	605a      	str	r2, [r3, #4]
}
 8002cdc:	46c0      	nop			@ (mov r8, r8)
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	b002      	add	sp, #8
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <LL_ADC_DisableIT_EOS>:
  * @rmtoll IER      EOSIE          LL_ADC_DisableIT_EOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2208      	movs	r2, #8
 8002cf2:	4393      	bics	r3, r2
 8002cf4:	001a      	movs	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	605a      	str	r2, [r3, #4]
}
 8002cfa:	46c0      	nop			@ (mov r8, r8)
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	b002      	add	sp, #8
 8002d00:	bd80      	pop	{r7, pc}
	...

08002d04 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_TIM17
  *         @arg @ref LL_APB1_GRP2_PERIPH_ADC
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR2, Periphs);
 8002d0c:	4b07      	ldr	r3, [pc, #28]	@ (8002d2c <LL_APB1_GRP2_EnableClock+0x28>)
 8002d0e:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8002d10:	4b06      	ldr	r3, [pc, #24]	@ (8002d2c <LL_APB1_GRP2_EnableClock+0x28>)
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	430a      	orrs	r2, r1
 8002d16:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 8002d18:	4b04      	ldr	r3, [pc, #16]	@ (8002d2c <LL_APB1_GRP2_EnableClock+0x28>)
 8002d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d22:	68fb      	ldr	r3, [r7, #12]
}
 8002d24:	46c0      	nop			@ (mov r8, r8)
 8002d26:	46bd      	mov	sp, r7
 8002d28:	b004      	add	sp, #16
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	40021000 	.word	0x40021000

08002d30 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOD
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8002d38:	4b07      	ldr	r3, [pc, #28]	@ (8002d58 <LL_IOP_GRP1_EnableClock+0x28>)
 8002d3a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002d3c:	4b06      	ldr	r3, [pc, #24]	@ (8002d58 <LL_IOP_GRP1_EnableClock+0x28>)
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	430a      	orrs	r2, r1
 8002d42:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8002d44:	4b04      	ldr	r3, [pc, #16]	@ (8002d58 <LL_IOP_GRP1_EnableClock+0x28>)
 8002d46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
}
 8002d50:	46c0      	nop			@ (mov r8, r8)
 8002d52:	46bd      	mov	sp, r7
 8002d54:	b004      	add	sp, #16
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	40021000 	.word	0x40021000

08002d5c <LL_SYSTICK_IsActiveCounterFlag>:
  * @note   It can be used in timeout function on application side.
  * @rmtoll STK_CTRL     COUNTFLAG     LL_SYSTICK_IsActiveCounterFlag
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
  return (((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk)) ? 1UL : 0UL);
 8002d60:	4b07      	ldr	r3, [pc, #28]	@ (8002d80 <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	2380      	movs	r3, #128	@ 0x80
 8002d66:	025b      	lsls	r3, r3, #9
 8002d68:	401a      	ands	r2, r3
 8002d6a:	2380      	movs	r3, #128	@ 0x80
 8002d6c:	025b      	lsls	r3, r3, #9
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d101      	bne.n	8002d76 <LL_SYSTICK_IsActiveCounterFlag+0x1a>
 8002d72:	2301      	movs	r3, #1
 8002d74:	e000      	b.n	8002d78 <LL_SYSTICK_IsActiveCounterFlag+0x1c>
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	0018      	movs	r0, r3
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	46c0      	nop			@ (mov r8, r8)
 8002d80:	e000e010 	.word	0xe000e010

08002d84 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_5 (*)
  * @note (*) Availability depends on devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_EN);
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	3b01      	subs	r3, #1
 8002d96:	4a0a      	ldr	r2, [pc, #40]	@ (8002dc0 <LL_DMA_EnableChannel+0x3c>)
 8002d98:	5cd3      	ldrb	r3, [r2, r3]
 8002d9a:	001a      	movs	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	18d3      	adds	r3, r2, r3
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	3b01      	subs	r3, #1
 8002da6:	4906      	ldr	r1, [pc, #24]	@ (8002dc0 <LL_DMA_EnableChannel+0x3c>)
 8002da8:	5ccb      	ldrb	r3, [r1, r3]
 8002daa:	0019      	movs	r1, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	18cb      	adds	r3, r1, r3
 8002db0:	2101      	movs	r1, #1
 8002db2:	430a      	orrs	r2, r1
 8002db4:	601a      	str	r2, [r3, #0]
}
 8002db6:	46c0      	nop			@ (mov r8, r8)
 8002db8:	46bd      	mov	sp, r7
 8002dba:	b004      	add	sp, #16
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	46c0      	nop			@ (mov r8, r8)
 8002dc0:	0800d2bc 	.word	0x0800d2bc

08002dc4 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR,
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	4a0b      	ldr	r2, [pc, #44]	@ (8002e08 <LL_DMA_SetDataTransferDirection+0x44>)
 8002dda:	5cd3      	ldrb	r3, [r2, r3]
 8002ddc:	001a      	movs	r2, r3
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	18d3      	adds	r3, r2, r3
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a09      	ldr	r2, [pc, #36]	@ (8002e0c <LL_DMA_SetDataTransferDirection+0x48>)
 8002de6:	4013      	ands	r3, r2
 8002de8:	0019      	movs	r1, r3
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	3b01      	subs	r3, #1
 8002dee:	4a06      	ldr	r2, [pc, #24]	@ (8002e08 <LL_DMA_SetDataTransferDirection+0x44>)
 8002df0:	5cd3      	ldrb	r3, [r2, r3]
 8002df2:	001a      	movs	r2, r3
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	18d3      	adds	r3, r2, r3
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	601a      	str	r2, [r3, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 8002dfe:	46c0      	nop			@ (mov r8, r8)
 8002e00:	46bd      	mov	sp, r7
 8002e02:	b006      	add	sp, #24
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	46c0      	nop			@ (mov r8, r8)
 8002e08:	0800d2bc 	.word	0x0800d2bc
 8002e0c:	ffffbfef 	.word	0xffffbfef

08002e10 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_CIRC,
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	3b01      	subs	r3, #1
 8002e24:	4a0b      	ldr	r2, [pc, #44]	@ (8002e54 <LL_DMA_SetMode+0x44>)
 8002e26:	5cd3      	ldrb	r3, [r2, r3]
 8002e28:	001a      	movs	r2, r3
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	18d3      	adds	r3, r2, r3
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2220      	movs	r2, #32
 8002e32:	4393      	bics	r3, r2
 8002e34:	0019      	movs	r1, r3
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	4a06      	ldr	r2, [pc, #24]	@ (8002e54 <LL_DMA_SetMode+0x44>)
 8002e3c:	5cd3      	ldrb	r3, [r2, r3]
 8002e3e:	001a      	movs	r2, r3
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	18d3      	adds	r3, r2, r3
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	430a      	orrs	r2, r1
 8002e48:	601a      	str	r2, [r3, #0]
             Mode);
}
 8002e4a:	46c0      	nop			@ (mov r8, r8)
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	b006      	add	sp, #24
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	46c0      	nop			@ (mov r8, r8)
 8002e54:	0800d2bc 	.word	0x0800d2bc

08002e58 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b086      	sub	sp, #24
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_PINC,
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	4a0b      	ldr	r2, [pc, #44]	@ (8002e9c <LL_DMA_SetPeriphIncMode+0x44>)
 8002e6e:	5cd3      	ldrb	r3, [r2, r3]
 8002e70:	001a      	movs	r2, r3
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	18d3      	adds	r3, r2, r3
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2240      	movs	r2, #64	@ 0x40
 8002e7a:	4393      	bics	r3, r2
 8002e7c:	0019      	movs	r1, r3
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	3b01      	subs	r3, #1
 8002e82:	4a06      	ldr	r2, [pc, #24]	@ (8002e9c <LL_DMA_SetPeriphIncMode+0x44>)
 8002e84:	5cd3      	ldrb	r3, [r2, r3]
 8002e86:	001a      	movs	r2, r3
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	18d3      	adds	r3, r2, r3
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcIncMode);
}
 8002e92:	46c0      	nop			@ (mov r8, r8)
 8002e94:	46bd      	mov	sp, r7
 8002e96:	b006      	add	sp, #24
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	46c0      	nop			@ (mov r8, r8)
 8002e9c:	0800d2bc 	.word	0x0800d2bc

08002ea0 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b086      	sub	sp, #24
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_MINC,
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	4a0b      	ldr	r2, [pc, #44]	@ (8002ee4 <LL_DMA_SetMemoryIncMode+0x44>)
 8002eb6:	5cd3      	ldrb	r3, [r2, r3]
 8002eb8:	001a      	movs	r2, r3
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	18d3      	adds	r3, r2, r3
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2280      	movs	r2, #128	@ 0x80
 8002ec2:	4393      	bics	r3, r2
 8002ec4:	0019      	movs	r1, r3
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	4a06      	ldr	r2, [pc, #24]	@ (8002ee4 <LL_DMA_SetMemoryIncMode+0x44>)
 8002ecc:	5cd3      	ldrb	r3, [r2, r3]
 8002ece:	001a      	movs	r2, r3
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	18d3      	adds	r3, r2, r3
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstIncMode);
}
 8002eda:	46c0      	nop			@ (mov r8, r8)
 8002edc:	46bd      	mov	sp, r7
 8002ede:	b006      	add	sp, #24
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	46c0      	nop			@ (mov r8, r8)
 8002ee4:	0800d2bc 	.word	0x0800d2bc

08002ee8 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b086      	sub	sp, #24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_PSIZE,
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	3b01      	subs	r3, #1
 8002efc:	4a0b      	ldr	r2, [pc, #44]	@ (8002f2c <LL_DMA_SetPeriphSize+0x44>)
 8002efe:	5cd3      	ldrb	r3, [r2, r3]
 8002f00:	001a      	movs	r2, r3
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	18d3      	adds	r3, r2, r3
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a09      	ldr	r2, [pc, #36]	@ (8002f30 <LL_DMA_SetPeriphSize+0x48>)
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	0019      	movs	r1, r3
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	3b01      	subs	r3, #1
 8002f12:	4a06      	ldr	r2, [pc, #24]	@ (8002f2c <LL_DMA_SetPeriphSize+0x44>)
 8002f14:	5cd3      	ldrb	r3, [r2, r3]
 8002f16:	001a      	movs	r2, r3
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	18d3      	adds	r3, r2, r3
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcDataSize);
}
 8002f22:	46c0      	nop			@ (mov r8, r8)
 8002f24:	46bd      	mov	sp, r7
 8002f26:	b006      	add	sp, #24
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	46c0      	nop			@ (mov r8, r8)
 8002f2c:	0800d2bc 	.word	0x0800d2bc
 8002f30:	fffffcff 	.word	0xfffffcff

08002f34 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b086      	sub	sp, #24
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_MSIZE,
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	3b01      	subs	r3, #1
 8002f48:	4a0b      	ldr	r2, [pc, #44]	@ (8002f78 <LL_DMA_SetMemorySize+0x44>)
 8002f4a:	5cd3      	ldrb	r3, [r2, r3]
 8002f4c:	001a      	movs	r2, r3
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	18d3      	adds	r3, r2, r3
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a09      	ldr	r2, [pc, #36]	@ (8002f7c <LL_DMA_SetMemorySize+0x48>)
 8002f56:	4013      	ands	r3, r2
 8002f58:	0019      	movs	r1, r3
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	4a06      	ldr	r2, [pc, #24]	@ (8002f78 <LL_DMA_SetMemorySize+0x44>)
 8002f60:	5cd3      	ldrb	r3, [r2, r3]
 8002f62:	001a      	movs	r2, r3
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	18d3      	adds	r3, r2, r3
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstDataSize);
}
 8002f6e:	46c0      	nop			@ (mov r8, r8)
 8002f70:	46bd      	mov	sp, r7
 8002f72:	b006      	add	sp, #24
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	46c0      	nop			@ (mov r8, r8)
 8002f78:	0800d2bc 	.word	0x0800d2bc
 8002f7c:	fffff3ff 	.word	0xfffff3ff

08002f80 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_PL,
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	3b01      	subs	r3, #1
 8002f94:	4a0b      	ldr	r2, [pc, #44]	@ (8002fc4 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8002f96:	5cd3      	ldrb	r3, [r2, r3]
 8002f98:	001a      	movs	r2, r3
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	18d3      	adds	r3, r2, r3
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a09      	ldr	r2, [pc, #36]	@ (8002fc8 <LL_DMA_SetChannelPriorityLevel+0x48>)
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	0019      	movs	r1, r3
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	4a06      	ldr	r2, [pc, #24]	@ (8002fc4 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8002fac:	5cd3      	ldrb	r3, [r2, r3]
 8002fae:	001a      	movs	r2, r3
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	18d3      	adds	r3, r2, r3
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	601a      	str	r2, [r3, #0]
             Priority);
}
 8002fba:	46c0      	nop			@ (mov r8, r8)
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	b006      	add	sp, #24
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	46c0      	nop			@ (mov r8, r8)
 8002fc4:	0800d2bc 	.word	0x0800d2bc
 8002fc8:	ffffcfff 	.word	0xffffcfff

08002fcc <LL_DMA_SetDataLength>:
  * @note (*) Availability depends on devices
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b086      	sub	sp, #24
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CNDTR,
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	4a0a      	ldr	r2, [pc, #40]	@ (800300c <LL_DMA_SetDataLength+0x40>)
 8002fe2:	5cd3      	ldrb	r3, [r2, r3]
 8002fe4:	001a      	movs	r2, r3
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	18d3      	adds	r3, r2, r3
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	0c1b      	lsrs	r3, r3, #16
 8002fee:	0419      	lsls	r1, r3, #16
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	4a05      	ldr	r2, [pc, #20]	@ (800300c <LL_DMA_SetDataLength+0x40>)
 8002ff6:	5cd3      	ldrb	r3, [r2, r3]
 8002ff8:	001a      	movs	r2, r3
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	18d3      	adds	r3, r2, r3
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	430a      	orrs	r2, r1
 8003002:	605a      	str	r2, [r3, #4]
             DMA_CNDTR_NDT, NbData);
}
 8003004:	46c0      	nop			@ (mov r8, r8)
 8003006:	46bd      	mov	sp, r7
 8003008:	b006      	add	sp, #24
 800300a:	bd80      	pop	{r7, pc}
 800300c:	0800d2bc 	.word	0x0800d2bc

08003010 <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddress,
                                            uint32_t DstAddress, uint32_t Direction)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b086      	sub	sp, #24
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]
 800301c:	603b      	str	r3, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	617b      	str	r3, [r7, #20]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 8003022:	6a3b      	ldr	r3, [r7, #32]
 8003024:	2b10      	cmp	r3, #16
 8003026:	d112      	bne.n	800304e <LL_DMA_ConfigAddresses+0x3e>
  {
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CMAR, SrcAddress);
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	3b01      	subs	r3, #1
 800302c:	4a13      	ldr	r2, [pc, #76]	@ (800307c <LL_DMA_ConfigAddresses+0x6c>)
 800302e:	5cd3      	ldrb	r3, [r2, r3]
 8003030:	001a      	movs	r2, r3
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	18d3      	adds	r3, r2, r3
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	60da      	str	r2, [r3, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CPAR, DstAddress);
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	3b01      	subs	r3, #1
 800303e:	4a0f      	ldr	r2, [pc, #60]	@ (800307c <LL_DMA_ConfigAddresses+0x6c>)
 8003040:	5cd3      	ldrb	r3, [r2, r3]
 8003042:	001a      	movs	r2, r3
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	18d3      	adds	r3, r2, r3
 8003048:	683a      	ldr	r2, [r7, #0]
 800304a:	609a      	str	r2, [r3, #8]
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CPAR, SrcAddress);
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CMAR, DstAddress);
  }
}
 800304c:	e011      	b.n	8003072 <LL_DMA_ConfigAddresses+0x62>
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CPAR, SrcAddress);
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	3b01      	subs	r3, #1
 8003052:	4a0a      	ldr	r2, [pc, #40]	@ (800307c <LL_DMA_ConfigAddresses+0x6c>)
 8003054:	5cd3      	ldrb	r3, [r2, r3]
 8003056:	001a      	movs	r2, r3
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	18d3      	adds	r3, r2, r3
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	609a      	str	r2, [r3, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CMAR, DstAddress);
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	3b01      	subs	r3, #1
 8003064:	4a05      	ldr	r2, [pc, #20]	@ (800307c <LL_DMA_ConfigAddresses+0x6c>)
 8003066:	5cd3      	ldrb	r3, [r2, r3]
 8003068:	001a      	movs	r2, r3
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	18d3      	adds	r3, r2, r3
 800306e:	683a      	ldr	r2, [r7, #0]
 8003070:	60da      	str	r2, [r3, #12]
}
 8003072:	46c0      	nop			@ (mov r8, r8)
 8003074:	46bd      	mov	sp, r7
 8003076:	b006      	add	sp, #24
 8003078:	bd80      	pop	{r7, pc}
 800307a:	46c0      	nop			@ (mov r8, r8)
 800307c:	0800d2bc 	.word	0x0800d2bc

08003080 <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMAMUX_REQ_USART2_TX
  * @note (*) Availability depends on devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Request)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
  (void)(DMAx);
  MODIFY_REG(((DMAMUX_Channel_TypeDef *)((uint32_t)DMAMUX1_Channel0 + (DMAMUX_CCR_SIZE * (Channel - 1UL))))->CCR,
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	4a0a      	ldr	r2, [pc, #40]	@ (80030b8 <LL_DMA_SetPeriphRequest+0x38>)
 8003090:	4694      	mov	ip, r2
 8003092:	4463      	add	r3, ip
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	22ff      	movs	r2, #255	@ 0xff
 800309a:	4393      	bics	r3, r2
 800309c:	0019      	movs	r1, r3
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	4a05      	ldr	r2, [pc, #20]	@ (80030b8 <LL_DMA_SetPeriphRequest+0x38>)
 80030a2:	4694      	mov	ip, r2
 80030a4:	4463      	add	r3, ip
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	601a      	str	r2, [r3, #0]
             DMAMUX_CxCR_DMAREQ_ID, Request);
}
 80030ae:	46c0      	nop			@ (mov r8, r8)
 80030b0:	46bd      	mov	sp, r7
 80030b2:	b004      	add	sp, #16
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	46c0      	nop			@ (mov r8, r8)
 80030b8:	100081ff 	.word	0x100081ff

080030bc <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_5 (*)
  * @note (*) Availability depends on devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_TCIE);
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	3b01      	subs	r3, #1
 80030ce:	4a0a      	ldr	r2, [pc, #40]	@ (80030f8 <LL_DMA_EnableIT_TC+0x3c>)
 80030d0:	5cd3      	ldrb	r3, [r2, r3]
 80030d2:	001a      	movs	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	18d3      	adds	r3, r2, r3
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	3b01      	subs	r3, #1
 80030de:	4906      	ldr	r1, [pc, #24]	@ (80030f8 <LL_DMA_EnableIT_TC+0x3c>)
 80030e0:	5ccb      	ldrb	r3, [r1, r3]
 80030e2:	0019      	movs	r1, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	18cb      	adds	r3, r1, r3
 80030e8:	2102      	movs	r1, #2
 80030ea:	430a      	orrs	r2, r1
 80030ec:	601a      	str	r2, [r3, #0]
}
 80030ee:	46c0      	nop			@ (mov r8, r8)
 80030f0:	46bd      	mov	sp, r7
 80030f2:	b004      	add	sp, #16
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	46c0      	nop			@ (mov r8, r8)
 80030f8:	0800d2bc 	.word	0x0800d2bc

080030fc <LL_DMA_EnableIT_HT>:
  *         @arg @ref LL_DMA_CHANNEL_5 (*)
  * @note (*) Availability depends on devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_HTIE);
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	3b01      	subs	r3, #1
 800310e:	4a0a      	ldr	r2, [pc, #40]	@ (8003138 <LL_DMA_EnableIT_HT+0x3c>)
 8003110:	5cd3      	ldrb	r3, [r2, r3]
 8003112:	001a      	movs	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	18d3      	adds	r3, r2, r3
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	3b01      	subs	r3, #1
 800311e:	4906      	ldr	r1, [pc, #24]	@ (8003138 <LL_DMA_EnableIT_HT+0x3c>)
 8003120:	5ccb      	ldrb	r3, [r1, r3]
 8003122:	0019      	movs	r1, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	18cb      	adds	r3, r1, r3
 8003128:	2104      	movs	r1, #4
 800312a:	430a      	orrs	r2, r1
 800312c:	601a      	str	r2, [r3, #0]
}
 800312e:	46c0      	nop			@ (mov r8, r8)
 8003130:	46bd      	mov	sp, r7
 8003132:	b004      	add	sp, #16
 8003134:	bd80      	pop	{r7, pc}
 8003136:	46c0      	nop			@ (mov r8, r8)
 8003138:	0800d2bc 	.word	0x0800d2bc

0800313c <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_5 (*)
  * @note (*) Availability depends on devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_TEIE);
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	3b01      	subs	r3, #1
 800314e:	4a0a      	ldr	r2, [pc, #40]	@ (8003178 <LL_DMA_EnableIT_TE+0x3c>)
 8003150:	5cd3      	ldrb	r3, [r2, r3]
 8003152:	001a      	movs	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	18d3      	adds	r3, r2, r3
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	3b01      	subs	r3, #1
 800315e:	4906      	ldr	r1, [pc, #24]	@ (8003178 <LL_DMA_EnableIT_TE+0x3c>)
 8003160:	5ccb      	ldrb	r3, [r1, r3]
 8003162:	0019      	movs	r1, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	18cb      	adds	r3, r1, r3
 8003168:	2108      	movs	r1, #8
 800316a:	430a      	orrs	r2, r1
 800316c:	601a      	str	r2, [r3, #0]
}
 800316e:	46c0      	nop			@ (mov r8, r8)
 8003170:	46bd      	mov	sp, r7
 8003172:	b004      	add	sp, #16
 8003174:	bd80      	pop	{r7, pc}
 8003176:	46c0      	nop			@ (mov r8, r8)
 8003178:	0800d2bc 	.word	0x0800d2bc

0800317c <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
	// Refresh the Encoder Speed (pulses / 10 minutes)
	holding_register_database[ENCODER_SPEED] = (int16_t)((((uint32_t)encoder_pulse)*600UL*10000UL) / (htim14.Init.Period + 1UL));
 8003184:	4b0b      	ldr	r3, [pc, #44]	@ (80031b4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	001a      	movs	r2, r3
 800318a:	4b0b      	ldr	r3, [pc, #44]	@ (80031b8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800318c:	435a      	muls	r2, r3
 800318e:	4b0b      	ldr	r3, [pc, #44]	@ (80031bc <HAL_TIM_PeriodElapsedCallback+0x40>)
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	3301      	adds	r3, #1
 8003194:	0019      	movs	r1, r3
 8003196:	0010      	movs	r0, r2
 8003198:	f7fc ffb6 	bl	8000108 <__udivsi3>
 800319c:	0003      	movs	r3, r0
 800319e:	b299      	uxth	r1, r3
 80031a0:	4b07      	ldr	r3, [pc, #28]	@ (80031c0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80031a2:	227c      	movs	r2, #124	@ 0x7c
 80031a4:	5299      	strh	r1, [r3, r2]
	encoder_pulse = 0;
 80031a6:	4b03      	ldr	r3, [pc, #12]	@ (80031b4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]
}
 80031ac:	46c0      	nop			@ (mov r8, r8)
 80031ae:	46bd      	mov	sp, r7
 80031b0:	b002      	add	sp, #8
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	200006a4 	.word	0x200006a4
 80031b8:	005b8d80 	.word	0x005b8d80
 80031bc:	200004c0 	.word	0x200004c0
 80031c0:	20000014 	.word	0x20000014

080031c4 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80031c4:	b5b0      	push	{r4, r5, r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	0002      	movs	r2, r0
 80031cc:	1dbb      	adds	r3, r7, #6
 80031ce:	801a      	strh	r2, [r3, #0]
	GPIO_PinState pulse_b = HAL_GPIO_ReadPin(Encoder_Pulse_B_GPIO_Port, Encoder_Pulse_B_Pin);
 80031d0:	250f      	movs	r5, #15
 80031d2:	197c      	adds	r4, r7, r5
 80031d4:	2380      	movs	r3, #128	@ 0x80
 80031d6:	01db      	lsls	r3, r3, #7
 80031d8:	4a0c      	ldr	r2, [pc, #48]	@ (800320c <HAL_GPIO_EXTI_Rising_Callback+0x48>)
 80031da:	0019      	movs	r1, r3
 80031dc:	0010      	movs	r0, r2
 80031de:	f003 fc37 	bl	8006a50 <HAL_GPIO_ReadPin>
 80031e2:	0003      	movs	r3, r0
 80031e4:	7023      	strb	r3, [r4, #0]
	if(pulse_b == GPIO_PIN_SET)
 80031e6:	197b      	adds	r3, r7, r5
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d105      	bne.n	80031fa <HAL_GPIO_EXTI_Rising_Callback+0x36>
	{
		encoder_pulse++;
 80031ee:	4b08      	ldr	r3, [pc, #32]	@ (8003210 <HAL_GPIO_EXTI_Rising_Callback+0x4c>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	1c5a      	adds	r2, r3, #1
 80031f4:	4b06      	ldr	r3, [pc, #24]	@ (8003210 <HAL_GPIO_EXTI_Rising_Callback+0x4c>)
 80031f6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		encoder_pulse--;
	}
}
 80031f8:	e004      	b.n	8003204 <HAL_GPIO_EXTI_Rising_Callback+0x40>
		encoder_pulse--;
 80031fa:	4b05      	ldr	r3, [pc, #20]	@ (8003210 <HAL_GPIO_EXTI_Rising_Callback+0x4c>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	1e5a      	subs	r2, r3, #1
 8003200:	4b03      	ldr	r3, [pc, #12]	@ (8003210 <HAL_GPIO_EXTI_Rising_Callback+0x4c>)
 8003202:	601a      	str	r2, [r3, #0]
}
 8003204:	46c0      	nop			@ (mov r8, r8)
 8003206:	46bd      	mov	sp, r7
 8003208:	b004      	add	sp, #16
 800320a:	bdb0      	pop	{r4, r5, r7, pc}
 800320c:	50000400 	.word	0x50000400
 8003210:	200006a4 	.word	0x200006a4

08003214 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003214:	b5b0      	push	{r4, r5, r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	int8_t modbus_status = HAL_OK;
 800321a:	2317      	movs	r3, #23
 800321c:	18fb      	adds	r3, r7, r3
 800321e:	2200      	movs	r2, #0
 8003220:	701a      	strb	r2, [r3, #0]
	int8_t i2c_status = HAL_OK;
 8003222:	230d      	movs	r3, #13
 8003224:	18fb      	adds	r3, r7, r3
 8003226:	2200      	movs	r2, #0
 8003228:	701a      	strb	r2, [r3, #0]
	int8_t adc_status = HAL_OK;
 800322a:	230c      	movs	r3, #12
 800322c:	18fb      	adds	r3, r7, r3
 800322e:	2200      	movs	r2, #0
 8003230:	701a      	strb	r2, [r3, #0]
	uint8_t modbus_tx_len = 0;
 8003232:	230b      	movs	r3, #11
 8003234:	18fb      	adds	r3, r7, r3
 8003236:	2200      	movs	r2, #0
 8003238:	701a      	strb	r2, [r3, #0]
	uint16_t encoder_refresh = 10000;
 800323a:	2314      	movs	r3, #20
 800323c:	18fb      	adds	r3, r7, r3
 800323e:	4ad8      	ldr	r2, [pc, #864]	@ (80035a0 <main+0x38c>)
 8003240:	801a      	strh	r2, [r3, #0]
	uint8_t actuate_complete[NUM_ACTUATORS];
	uint8_t macro_consistency_count[NUM_ACTUATORS];
	uint8_t micro_consistency_count[NUM_ACTUATORS];
	uint32_t actuator_time = 0;
 8003242:	2300      	movs	r3, #0
 8003244:	613b      	str	r3, [r7, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003246:	f002 fc4a 	bl	8005ade <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800324a:	f000 fb6d 	bl	8003928 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800324e:	f000 ff41 	bl	80040d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8003252:	f000 ff13 	bl	800407c <MX_DMA_Init>
  MX_ADC1_Init();
 8003256:	f000 fba5 	bl	80039a4 <MX_ADC1_Init>
  MX_I2C1_Init();
 800325a:	f000 fd6f 	bl	8003d3c <MX_I2C1_Init>
  MX_SPI1_Init();
 800325e:	f000 fdad 	bl	8003dbc <MX_SPI1_Init>
  MX_TIM1_Init();
 8003262:	f000 fde9 	bl	8003e38 <MX_TIM1_Init>
  MX_TIM14_Init();
 8003266:	f000 fe91 	bl	8003f8c <MX_TIM14_Init>
  MX_USART1_UART_Init();
 800326a:	f000 feb7 	bl	8003fdc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // Initialize the pin mapping table
  pin_map[0] = Actuator_A_EN_Pin;
 800326e:	4bcd      	ldr	r3, [pc, #820]	@ (80035a4 <main+0x390>)
 8003270:	2240      	movs	r2, #64	@ 0x40
 8003272:	801a      	strh	r2, [r3, #0]
  pin_map[1] = Actuator_B_EN_Pin;
 8003274:	4bcb      	ldr	r3, [pc, #812]	@ (80035a4 <main+0x390>)
 8003276:	2280      	movs	r2, #128	@ 0x80
 8003278:	805a      	strh	r2, [r3, #2]
  pin_map[2] = Actuator_C_EN_Pin;
 800327a:	4bca      	ldr	r3, [pc, #808]	@ (80035a4 <main+0x390>)
 800327c:	2201      	movs	r2, #1
 800327e:	809a      	strh	r2, [r3, #4]

  port_map[0] = Actuator_A_EN_GPIO_Port;
 8003280:	4bc9      	ldr	r3, [pc, #804]	@ (80035a8 <main+0x394>)
 8003282:	4aca      	ldr	r2, [pc, #808]	@ (80035ac <main+0x398>)
 8003284:	601a      	str	r2, [r3, #0]
  port_map[1] = Actuator_B_EN_GPIO_Port;
 8003286:	4bc8      	ldr	r3, [pc, #800]	@ (80035a8 <main+0x394>)
 8003288:	4ac8      	ldr	r2, [pc, #800]	@ (80035ac <main+0x398>)
 800328a:	605a      	str	r2, [r3, #4]
  port_map[2] = Actuator_C_EN_GPIO_Port;
 800328c:	4bc6      	ldr	r3, [pc, #792]	@ (80035a8 <main+0x394>)
 800328e:	4ac8      	ldr	r2, [pc, #800]	@ (80035b0 <main+0x39c>)
 8003290:	609a      	str	r2, [r3, #8]

  // Initialize the PID constraints to defaults
  pid_constraints.Kp = 1;              // Proportional gain constant
 8003292:	4bc8      	ldr	r3, [pc, #800]	@ (80035b4 <main+0x3a0>)
 8003294:	22fe      	movs	r2, #254	@ 0xfe
 8003296:	0592      	lsls	r2, r2, #22
 8003298:	601a      	str	r2, [r3, #0]
  pid_constraints.Ki = 0.1;            // Integral gain constant
 800329a:	4bc6      	ldr	r3, [pc, #792]	@ (80035b4 <main+0x3a0>)
 800329c:	4ac6      	ldr	r2, [pc, #792]	@ (80035b8 <main+0x3a4>)
 800329e:	605a      	str	r2, [r3, #4]
  pid_constraints.Kd = 5;              // Derivative gain constant
 80032a0:	4bc4      	ldr	r3, [pc, #784]	@ (80035b4 <main+0x3a0>)
 80032a2:	4ac6      	ldr	r2, [pc, #792]	@ (80035bc <main+0x3a8>)
 80032a4:	609a      	str	r2, [r3, #8]
  pid_constraints.Kaw = 0.1;           // Anti-windup gain constant
 80032a6:	4bc3      	ldr	r3, [pc, #780]	@ (80035b4 <main+0x3a0>)
 80032a8:	4ac3      	ldr	r2, [pc, #780]	@ (80035b8 <main+0x3a4>)
 80032aa:	60da      	str	r2, [r3, #12]
  pid_constraints.T_C = 1;             // Time constant for derivative filtering
 80032ac:	4bc1      	ldr	r3, [pc, #772]	@ (80035b4 <main+0x3a0>)
 80032ae:	22fe      	movs	r2, #254	@ 0xfe
 80032b0:	0592      	lsls	r2, r2, #22
 80032b2:	611a      	str	r2, [r3, #16]
  pid_constraints.T = 100;             // Time step
 80032b4:	4bbf      	ldr	r3, [pc, #764]	@ (80035b4 <main+0x3a0>)
 80032b6:	4ac2      	ldr	r2, [pc, #776]	@ (80035c0 <main+0x3ac>)
 80032b8:	615a      	str	r2, [r3, #20]
  pid_constraints.max = 100;           // Max command
 80032ba:	4bbe      	ldr	r3, [pc, #760]	@ (80035b4 <main+0x3a0>)
 80032bc:	4ac0      	ldr	r2, [pc, #768]	@ (80035c0 <main+0x3ac>)
 80032be:	619a      	str	r2, [r3, #24]
  pid_constraints.min = 15;            // Min command
 80032c0:	4bbc      	ldr	r3, [pc, #752]	@ (80035b4 <main+0x3a0>)
 80032c2:	4ac0      	ldr	r2, [pc, #768]	@ (80035c4 <main+0x3b0>)
 80032c4:	61da      	str	r2, [r3, #28]
  pid_constraints.max_rate = 40;       // Max rate of change of the command
 80032c6:	4bbb      	ldr	r3, [pc, #748]	@ (80035b4 <main+0x3a0>)
 80032c8:	4abf      	ldr	r2, [pc, #764]	@ (80035c8 <main+0x3b4>)
 80032ca:	621a      	str	r2, [r3, #32]
  pid_constraints.integral = 0;        // Integral term
 80032cc:	4bb9      	ldr	r3, [pc, #740]	@ (80035b4 <main+0x3a0>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	625a      	str	r2, [r3, #36]	@ 0x24
  pid_constraints.err_prev = 0;        // Previous error
 80032d2:	4bb8      	ldr	r3, [pc, #736]	@ (80035b4 <main+0x3a0>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	629a      	str	r2, [r3, #40]	@ 0x28
  pid_constraints.deriv_prev = 0;      // Previous derivative
 80032d8:	4bb6      	ldr	r3, [pc, #728]	@ (80035b4 <main+0x3a0>)
 80032da:	2200      	movs	r2, #0
 80032dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  pid_constraints.command_sat_prev = 0;// Previous saturated command
 80032de:	4bb5      	ldr	r3, [pc, #724]	@ (80035b4 <main+0x3a0>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	631a      	str	r2, [r3, #48]	@ 0x30
  pid_constraints.command_prev = 0;    // Previous command
 80032e4:	4bb3      	ldr	r3, [pc, #716]	@ (80035b4 <main+0x3a0>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	635a      	str	r2, [r3, #52]	@ 0x34

  if(modbus_set_rx() != HAL_OK)
 80032ea:	f001 fbe7 	bl	8004abc <modbus_set_rx>
 80032ee:	1e03      	subs	r3, r0, #0
 80032f0:	d001      	beq.n	80032f6 <main+0xe2>
  {
	  Error_Handler();
 80032f2:	f000 ffc9 	bl	8004288 <Error_Handler>
  }

  /* Perform ADC activation procedure to make it ready to convert. */
  ADC_Activate();
 80032f6:	f001 fe5d 	bl	8004fb4 <ADC_Activate>
  if ((LL_ADC_IsEnabled(ADC1) == 1)               &&
 80032fa:	4bb4      	ldr	r3, [pc, #720]	@ (80035cc <main+0x3b8>)
 80032fc:	0018      	movs	r0, r3
 80032fe:	f7ff fc6f 	bl	8002be0 <LL_ADC_IsEnabled>
 8003302:	0003      	movs	r3, r0
 8003304:	2b01      	cmp	r3, #1
 8003306:	d10f      	bne.n	8003328 <main+0x114>
	  (LL_ADC_IsDisableOngoing(ADC1) == 0)        &&
 8003308:	4bb0      	ldr	r3, [pc, #704]	@ (80035cc <main+0x3b8>)
 800330a:	0018      	movs	r0, r3
 800330c:	f7ff fc79 	bl	8002c02 <LL_ADC_IsDisableOngoing>
 8003310:	1e03      	subs	r3, r0, #0
  if ((LL_ADC_IsEnabled(ADC1) == 1)               &&
 8003312:	d109      	bne.n	8003328 <main+0x114>
	  (LL_ADC_REG_IsConversionOngoing(ADC1) == 0))
 8003314:	4bad      	ldr	r3, [pc, #692]	@ (80035cc <main+0x3b8>)
 8003316:	0018      	movs	r0, r3
 8003318:	f7ff fc96 	bl	8002c48 <LL_ADC_REG_IsConversionOngoing>
 800331c:	1e03      	subs	r3, r0, #0
	  (LL_ADC_IsDisableOngoing(ADC1) == 0)        &&
 800331e:	d103      	bne.n	8003328 <main+0x114>
  {
	  LL_ADC_REG_StartConversion(ADC1);
 8003320:	4baa      	ldr	r3, [pc, #680]	@ (80035cc <main+0x3b8>)
 8003322:	0018      	movs	r0, r3
 8003324:	f7ff fc7e 	bl	8002c24 <LL_ADC_REG_StartConversion>
  }

  bno055_init();
 8003328:	f7fd ffe4 	bl	80012f4 <bno055_init>

  	if(DRV_Init(DRV8244P_Q1) != HAL_OK)
 800332c:	2046      	movs	r0, #70	@ 0x46
 800332e:	f7fe fef9 	bl	8002124 <DRV_Init>
 8003332:	1e03      	subs	r3, r0, #0
 8003334:	d001      	beq.n	800333a <main+0x126>
  	{
  		Error_Handler();
 8003336:	f000 ffa7 	bl	8004288 <Error_Handler>
	* target_actuator
	* 0: Actuator A
	* 1: Actuator B
	* 2: Actuator C
	*/
  	uint8_t target_actuator = 0;
 800333a:	230f      	movs	r3, #15
 800333c:	18fb      	adds	r3, r7, r3
 800333e:	2200      	movs	r2, #0
 8003340:	701a      	strb	r2, [r3, #0]
  	actuate_complete[0] = 0;
 8003342:	2108      	movs	r1, #8
 8003344:	187b      	adds	r3, r7, r1
 8003346:	2200      	movs	r2, #0
 8003348:	701a      	strb	r2, [r3, #0]
  	actuate_complete[1] = 0;
 800334a:	187b      	adds	r3, r7, r1
 800334c:	2200      	movs	r2, #0
 800334e:	705a      	strb	r2, [r3, #1]
  	actuate_complete[2] = 0;
 8003350:	187b      	adds	r3, r7, r1
 8003352:	2200      	movs	r2, #0
 8003354:	709a      	strb	r2, [r3, #2]

  	HAL_TIM_Base_Start_IT(&htim14);
 8003356:	4b9e      	ldr	r3, [pc, #632]	@ (80035d0 <main+0x3bc>)
 8003358:	0018      	movs	r0, r3
 800335a:	f006 ff9d 	bl	800a298 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */


  while (1)
  {
	  if(modbus_rx())
 800335e:	f001 f81b 	bl	8004398 <modbus_rx>
 8003362:	1e03      	subs	r3, r0, #0
 8003364:	d100      	bne.n	8003368 <main+0x154>
 8003366:	e081      	b.n	800346c <main+0x258>
	  {
		  if(get_rx_buffer(0) == holding_register_database[MODBUS_ID]) // Check Slave ID
 8003368:	2000      	movs	r0, #0
 800336a:	f001 fcbb 	bl	8004ce4 <get_rx_buffer>
 800336e:	0003      	movs	r3, r0
 8003370:	001a      	movs	r2, r3
 8003372:	4b98      	ldr	r3, [pc, #608]	@ (80035d4 <main+0x3c0>)
 8003374:	881b      	ldrh	r3, [r3, #0]
 8003376:	429a      	cmp	r2, r3
 8003378:	d139      	bne.n	80033ee <main+0x1da>
		  {
			  switch(get_rx_buffer(1))
 800337a:	2001      	movs	r0, #1
 800337c:	f001 fcb2 	bl	8004ce4 <get_rx_buffer>
 8003380:	0003      	movs	r3, r0
 8003382:	2b03      	cmp	r3, #3
 8003384:	d002      	beq.n	800338c <main+0x178>
 8003386:	2b10      	cmp	r3, #16
 8003388:	d00a      	beq.n	80033a0 <main+0x18c>
 800338a:	e013      	b.n	80033b4 <main+0x1a0>
			  {
				  case 0x03:
				  {
					  // Return holding registers
					  modbus_status = return_holding_registers(&modbus_tx_len);
 800338c:	2317      	movs	r3, #23
 800338e:	18fc      	adds	r4, r7, r3
 8003390:	230b      	movs	r3, #11
 8003392:	18fb      	adds	r3, r7, r3
 8003394:	0018      	movs	r0, r3
 8003396:	f001 f811 	bl	80043bc <return_holding_registers>
 800339a:	0003      	movs	r3, r0
 800339c:	7023      	strb	r3, [r4, #0]
					  break;
 800339e:	e011      	b.n	80033c4 <main+0x1b0>
				  }
				  case 0x10:
				  {
					  // Write holding registers
					  modbus_status = edit_multiple_registers(&modbus_tx_len);
 80033a0:	2317      	movs	r3, #23
 80033a2:	18fc      	adds	r4, r7, r3
 80033a4:	230b      	movs	r3, #11
 80033a6:	18fb      	adds	r3, r7, r3
 80033a8:	0018      	movs	r0, r3
 80033aa:	f001 f8b3 	bl	8004514 <edit_multiple_registers>
 80033ae:	0003      	movs	r3, r0
 80033b0:	7023      	strb	r3, [r4, #0]
					  break;
 80033b2:	e007      	b.n	80033c4 <main+0x1b0>
				  }
				  default:
				  {
					  modbus_status = modbus_exception(MB_ILLEGAL_FUNCTION);
 80033b4:	2317      	movs	r3, #23
 80033b6:	18fc      	adds	r4, r7, r3
 80033b8:	2004      	movs	r0, #4
 80033ba:	f001 f9ad 	bl	8004718 <modbus_exception>
 80033be:	0003      	movs	r3, r0
 80033c0:	7023      	strb	r3, [r4, #0]
					  break;
 80033c2:	46c0      	nop			@ (mov r8, r8)
				  }
			  }
			  if(modbus_status != 0)
 80033c4:	2117      	movs	r1, #23
 80033c6:	187b      	adds	r3, r7, r1
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	b25b      	sxtb	r3, r3
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d04d      	beq.n	800346c <main+0x258>
			  {
				  holding_register_database[MB_ERRORS] |= 1U << ((modbus_status) + (MB_FATAL_ERROR - RANGE_ERROR));
 80033d0:	4b80      	ldr	r3, [pc, #512]	@ (80035d4 <main+0x3c0>)
 80033d2:	891a      	ldrh	r2, [r3, #8]
 80033d4:	187b      	adds	r3, r7, r1
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	b25b      	sxtb	r3, r3
 80033da:	3307      	adds	r3, #7
 80033dc:	2101      	movs	r1, #1
 80033de:	4099      	lsls	r1, r3
 80033e0:	000b      	movs	r3, r1
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	4313      	orrs	r3, r2
 80033e6:	b29a      	uxth	r2, r3
 80033e8:	4b7a      	ldr	r3, [pc, #488]	@ (80035d4 <main+0x3c0>)
 80033ea:	811a      	strh	r2, [r3, #8]
 80033ec:	e03e      	b.n	800346c <main+0x258>
			  }
		  }
		  // Special case where you retrieve the modbus ID
		  else if((get_rx_buffer(0) == 0xFF) && // modbus_id = 0xFF = 255
 80033ee:	2000      	movs	r0, #0
 80033f0:	f001 fc78 	bl	8004ce4 <get_rx_buffer>
 80033f4:	0003      	movs	r3, r0
 80033f6:	2bff      	cmp	r3, #255	@ 0xff
 80033f8:	d138      	bne.n	800346c <main+0x258>
			(get_rx_buffer(1) == 0x03) && // Function code = read_holding_registers
 80033fa:	2001      	movs	r0, #1
 80033fc:	f001 fc72 	bl	8004ce4 <get_rx_buffer>
 8003400:	0003      	movs	r3, r0
		  else if((get_rx_buffer(0) == 0xFF) && // modbus_id = 0xFF = 255
 8003402:	2b03      	cmp	r3, #3
 8003404:	d132      	bne.n	800346c <main+0x258>
			(((get_rx_buffer(2) << 8) | get_rx_buffer(3)) == 0x00) && // Address to read = 0
 8003406:	2002      	movs	r0, #2
 8003408:	f001 fc6c 	bl	8004ce4 <get_rx_buffer>
 800340c:	0003      	movs	r3, r0
 800340e:	021c      	lsls	r4, r3, #8
 8003410:	2003      	movs	r0, #3
 8003412:	f001 fc67 	bl	8004ce4 <get_rx_buffer>
 8003416:	0003      	movs	r3, r0
 8003418:	4323      	orrs	r3, r4
			(get_rx_buffer(1) == 0x03) && // Function code = read_holding_registers
 800341a:	d127      	bne.n	800346c <main+0x258>
			(((get_rx_buffer(4) << 8) | get_rx_buffer(5)) == 1)) // # of registers to read = 1
 800341c:	2004      	movs	r0, #4
 800341e:	f001 fc61 	bl	8004ce4 <get_rx_buffer>
 8003422:	0003      	movs	r3, r0
 8003424:	021c      	lsls	r4, r3, #8
 8003426:	2005      	movs	r0, #5
 8003428:	f001 fc5c 	bl	8004ce4 <get_rx_buffer>
 800342c:	0003      	movs	r3, r0
 800342e:	4323      	orrs	r3, r4
			(((get_rx_buffer(2) << 8) | get_rx_buffer(3)) == 0x00) && // Address to read = 0
 8003430:	2b01      	cmp	r3, #1
 8003432:	d11b      	bne.n	800346c <main+0x258>
		  {

			  modbus_status = return_holding_registers(&modbus_tx_len);
 8003434:	2517      	movs	r5, #23
 8003436:	197c      	adds	r4, r7, r5
 8003438:	230b      	movs	r3, #11
 800343a:	18fb      	adds	r3, r7, r3
 800343c:	0018      	movs	r0, r3
 800343e:	f000 ffbd 	bl	80043bc <return_holding_registers>
 8003442:	0003      	movs	r3, r0
 8003444:	7023      	strb	r3, [r4, #0]
			  if(modbus_status != 0)
 8003446:	197b      	adds	r3, r7, r5
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	b25b      	sxtb	r3, r3
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00d      	beq.n	800346c <main+0x258>
			  {
				  holding_register_database[MB_ERRORS] |= 1U << ((modbus_status) + (MB_FATAL_ERROR - RANGE_ERROR));
 8003450:	4b60      	ldr	r3, [pc, #384]	@ (80035d4 <main+0x3c0>)
 8003452:	891a      	ldrh	r2, [r3, #8]
 8003454:	197b      	adds	r3, r7, r5
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	b25b      	sxtb	r3, r3
 800345a:	3307      	adds	r3, #7
 800345c:	2101      	movs	r1, #1
 800345e:	4099      	lsls	r1, r3
 8003460:	000b      	movs	r3, r1
 8003462:	b29b      	uxth	r3, r3
 8003464:	4313      	orrs	r3, r2
 8003466:	b29a      	uxth	r2, r3
 8003468:	4b5a      	ldr	r3, [pc, #360]	@ (80035d4 <main+0x3c0>)
 800346a:	811a      	strh	r2, [r3, #8]
			  }
		  }
	  }
	  modbus_status = monitor_modbus();
 800346c:	2517      	movs	r5, #23
 800346e:	197c      	adds	r4, r7, r5
 8003470:	f001 fb48 	bl	8004b04 <monitor_modbus>
 8003474:	0003      	movs	r3, r0
 8003476:	7023      	strb	r3, [r4, #0]
	  if(modbus_status != HAL_OK && modbus_status != HAL_BUSY)
 8003478:	197b      	adds	r3, r7, r5
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	b25b      	sxtb	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d100      	bne.n	8003484 <main+0x270>
 8003482:	e086      	b.n	8003592 <main+0x37e>
 8003484:	197b      	adds	r3, r7, r5
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	b25b      	sxtb	r3, r3
 800348a:	2b02      	cmp	r3, #2
 800348c:	d100      	bne.n	8003490 <main+0x27c>
 800348e:	e080      	b.n	8003592 <main+0x37e>
	  {
		  switch(modbus_status)
 8003490:	197b      	adds	r3, r7, r5
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	b25b      	sxtb	r3, r3
 8003496:	2b15      	cmp	r3, #21
 8003498:	d05b      	beq.n	8003552 <main+0x33e>
 800349a:	dd00      	ble.n	800349e <main+0x28a>
 800349c:	e09d      	b.n	80035da <main+0x3c6>
 800349e:	2b14      	cmp	r3, #20
 80034a0:	d036      	beq.n	8003510 <main+0x2fc>
 80034a2:	dd00      	ble.n	80034a6 <main+0x292>
 80034a4:	e099      	b.n	80035da <main+0x3c6>
 80034a6:	2b12      	cmp	r3, #18
 80034a8:	d000      	beq.n	80034ac <main+0x298>
 80034aa:	e074      	b.n	8003596 <main+0x382>
		  {
			  case MB_TX_TIMEOUT:
			  {
				  for(uint8_t i = 0; i < holding_register_database[MB_TRANSMIT_RETRIES]; i++)
 80034ac:	230e      	movs	r3, #14
 80034ae:	18fb      	adds	r3, r7, r3
 80034b0:	2200      	movs	r2, #0
 80034b2:	701a      	strb	r2, [r3, #0]
 80034b4:	e023      	b.n	80034fe <main+0x2ea>
				  {
					  modbus_status = modbus_send(modbus_tx_len);
 80034b6:	230b      	movs	r3, #11
 80034b8:	18fb      	adds	r3, r7, r3
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	2517      	movs	r5, #23
 80034be:	197c      	adds	r4, r7, r5
 80034c0:	0018      	movs	r0, r3
 80034c2:	f001 fa37 	bl	8004934 <modbus_send>
 80034c6:	0003      	movs	r3, r0
 80034c8:	7023      	strb	r3, [r4, #0]
					  if(modbus_status != HAL_OK)
 80034ca:	0029      	movs	r1, r5
 80034cc:	187b      	adds	r3, r7, r1
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	b25b      	sxtb	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00d      	beq.n	80034f2 <main+0x2de>
					  {
						  holding_register_database[MB_ERRORS] |= 1U << ((modbus_status) + (MB_FATAL_ERROR - RANGE_ERROR));
 80034d6:	4b3f      	ldr	r3, [pc, #252]	@ (80035d4 <main+0x3c0>)
 80034d8:	891a      	ldrh	r2, [r3, #8]
 80034da:	187b      	adds	r3, r7, r1
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	b25b      	sxtb	r3, r3
 80034e0:	3307      	adds	r3, #7
 80034e2:	2101      	movs	r1, #1
 80034e4:	4099      	lsls	r1, r3
 80034e6:	000b      	movs	r3, r1
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	4313      	orrs	r3, r2
 80034ec:	b29a      	uxth	r2, r3
 80034ee:	4b39      	ldr	r3, [pc, #228]	@ (80035d4 <main+0x3c0>)
 80034f0:	811a      	strh	r2, [r3, #8]
				  for(uint8_t i = 0; i < holding_register_database[MB_TRANSMIT_RETRIES]; i++)
 80034f2:	210e      	movs	r1, #14
 80034f4:	187b      	adds	r3, r7, r1
 80034f6:	781a      	ldrb	r2, [r3, #0]
 80034f8:	187b      	adds	r3, r7, r1
 80034fa:	3201      	adds	r2, #1
 80034fc:	701a      	strb	r2, [r3, #0]
 80034fe:	230e      	movs	r3, #14
 8003500:	18fb      	adds	r3, r7, r3
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	b29a      	uxth	r2, r3
 8003506:	4b33      	ldr	r3, [pc, #204]	@ (80035d4 <main+0x3c0>)
 8003508:	88db      	ldrh	r3, [r3, #6]
 800350a:	429a      	cmp	r2, r3
 800350c:	d3d3      	bcc.n	80034b6 <main+0x2a2>
					  }
				  }
				  break;
 800350e:	e064      	b.n	80035da <main+0x3c6>
				  // Error only relates to Modbus Master Nodes
				  break;
			  }
			  case MB_UART_ERROR:
			  {
				  modbus_status = modbus_set_rx();
 8003510:	2517      	movs	r5, #23
 8003512:	197c      	adds	r4, r7, r5
 8003514:	f001 fad2 	bl	8004abc <modbus_set_rx>
 8003518:	0003      	movs	r3, r0
 800351a:	7023      	strb	r3, [r4, #0]
				  if(modbus_status != 0)
 800351c:	0029      	movs	r1, r5
 800351e:	187b      	adds	r3, r7, r1
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	b25b      	sxtb	r3, r3
 8003524:	2b00      	cmp	r3, #0
 8003526:	d038      	beq.n	800359a <main+0x386>
				  {
					  holding_register_database[MB_ERRORS] |= 1U << ((modbus_status) + (MB_FATAL_ERROR - RANGE_ERROR));
 8003528:	4b2a      	ldr	r3, [pc, #168]	@ (80035d4 <main+0x3c0>)
 800352a:	891a      	ldrh	r2, [r3, #8]
 800352c:	187b      	adds	r3, r7, r1
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	b25b      	sxtb	r3, r3
 8003532:	3307      	adds	r3, #7
 8003534:	2101      	movs	r1, #1
 8003536:	4099      	lsls	r1, r3
 8003538:	000b      	movs	r3, r1
 800353a:	b29b      	uxth	r3, r3
 800353c:	4313      	orrs	r3, r2
 800353e:	b29a      	uxth	r2, r3
 8003540:	4b24      	ldr	r3, [pc, #144]	@ (80035d4 <main+0x3c0>)
 8003542:	811a      	strh	r2, [r3, #8]
				  }
				  break;
 8003544:	e029      	b.n	800359a <main+0x386>
			  }
			  case MB_FATAL_ERROR:
			  {
				  while(modbus_status != HAL_OK)
				  {
					  modbus_status = modbus_reset();
 8003546:	2317      	movs	r3, #23
 8003548:	18fc      	adds	r4, r7, r3
 800354a:	f001 fa49 	bl	80049e0 <modbus_reset>
 800354e:	0003      	movs	r3, r0
 8003550:	7023      	strb	r3, [r4, #0]
				  while(modbus_status != HAL_OK)
 8003552:	2517      	movs	r5, #23
 8003554:	197b      	adds	r3, r7, r5
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	b25b      	sxtb	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d1f3      	bne.n	8003546 <main+0x332>
				  }
				  modbus_status = modbus_set_rx();
 800355e:	197c      	adds	r4, r7, r5
 8003560:	f001 faac 	bl	8004abc <modbus_set_rx>
 8003564:	0003      	movs	r3, r0
 8003566:	7023      	strb	r3, [r4, #0]
				  if(modbus_status != 0)
 8003568:	0029      	movs	r1, r5
 800356a:	187b      	adds	r3, r7, r1
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	b25b      	sxtb	r3, r3
 8003570:	2b00      	cmp	r3, #0
 8003572:	d031      	beq.n	80035d8 <main+0x3c4>
				  {
					  holding_register_database[MB_ERRORS] |= 1U << ((modbus_status) + (MB_FATAL_ERROR - RANGE_ERROR));
 8003574:	4b17      	ldr	r3, [pc, #92]	@ (80035d4 <main+0x3c0>)
 8003576:	891a      	ldrh	r2, [r3, #8]
 8003578:	187b      	adds	r3, r7, r1
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	b25b      	sxtb	r3, r3
 800357e:	3307      	adds	r3, #7
 8003580:	2101      	movs	r1, #1
 8003582:	4099      	lsls	r1, r3
 8003584:	000b      	movs	r3, r1
 8003586:	b29b      	uxth	r3, r3
 8003588:	4313      	orrs	r3, r2
 800358a:	b29a      	uxth	r2, r3
 800358c:	4b11      	ldr	r3, [pc, #68]	@ (80035d4 <main+0x3c0>)
 800358e:	811a      	strh	r2, [r3, #8]
				  }
				  break;
 8003590:	e022      	b.n	80035d8 <main+0x3c4>
			  }
			  default:
 8003592:	46c0      	nop			@ (mov r8, r8)
 8003594:	e021      	b.n	80035da <main+0x3c6>
				  break;
 8003596:	46c0      	nop			@ (mov r8, r8)
 8003598:	e01f      	b.n	80035da <main+0x3c6>
				  break;
 800359a:	46c0      	nop			@ (mov r8, r8)
 800359c:	e01d      	b.n	80035da <main+0x3c6>
 800359e:	46c0      	nop			@ (mov r8, r8)
 80035a0:	00002710 	.word	0x00002710
 80035a4:	20000690 	.word	0x20000690
 80035a8:	20000698 	.word	0x20000698
 80035ac:	50000800 	.word	0x50000800
 80035b0:	50000400 	.word	0x50000400
 80035b4:	20000658 	.word	0x20000658
 80035b8:	3dcccccd 	.word	0x3dcccccd
 80035bc:	40a00000 	.word	0x40a00000
 80035c0:	42c80000 	.word	0x42c80000
 80035c4:	41700000 	.word	0x41700000
 80035c8:	42200000 	.word	0x42200000
 80035cc:	40012400 	.word	0x40012400
 80035d0:	200004c0 	.word	0x200004c0
 80035d4:	20000014 	.word	0x20000014
				  break;
 80035d8:	46c0      	nop			@ (mov r8, r8)
				  // Unknown error
			  }
		  }
	  }

	  if(!holding_register_database[I2C_SHUTDOWN])
 80035da:	4bcf      	ldr	r3, [pc, #828]	@ (8003918 <main+0x704>)
 80035dc:	899b      	ldrh	r3, [r3, #12]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d136      	bne.n	8003650 <main+0x43c>
	  {
		  if(bno055_rx())
 80035e2:	f7fe f899 	bl	8001718 <bno055_rx>
 80035e6:	1e03      	subs	r3, r0, #0
 80035e8:	d019      	beq.n	800361e <main+0x40a>
		  {
			  i2c_status = bno055_queue_transaction();
 80035ea:	250d      	movs	r5, #13
 80035ec:	197c      	adds	r4, r7, r5
 80035ee:	f7fe f8a7 	bl	8001740 <bno055_queue_transaction>
 80035f2:	0003      	movs	r3, r0
 80035f4:	7023      	strb	r3, [r4, #0]
			  if(i2c_status != 0)
 80035f6:	0029      	movs	r1, r5
 80035f8:	187b      	adds	r3, r7, r1
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	b25b      	sxtb	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00d      	beq.n	800361e <main+0x40a>
			  {
				  holding_register_database[I2C_ERRORS] |= 1U << ((i2c_status) + (I2C_FATAL_ERROR - I2C_TX_TIMEOUT));
 8003602:	4bc5      	ldr	r3, [pc, #788]	@ (8003918 <main+0x704>)
 8003604:	895a      	ldrh	r2, [r3, #10]
 8003606:	187b      	adds	r3, r7, r1
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	b25b      	sxtb	r3, r3
 800360c:	3303      	adds	r3, #3
 800360e:	2101      	movs	r1, #1
 8003610:	4099      	lsls	r1, r3
 8003612:	000b      	movs	r3, r1
 8003614:	b29b      	uxth	r3, r3
 8003616:	4313      	orrs	r3, r2
 8003618:	b29a      	uxth	r2, r3
 800361a:	4bbf      	ldr	r3, [pc, #764]	@ (8003918 <main+0x704>)
 800361c:	815a      	strh	r2, [r3, #10]
			  }
		  }

		  i2c_status = monitor_i2c();
 800361e:	250d      	movs	r5, #13
 8003620:	197c      	adds	r4, r7, r5
 8003622:	f7fe f907 	bl	8001834 <monitor_i2c>
 8003626:	0003      	movs	r3, r0
 8003628:	7023      	strb	r3, [r4, #0]
		  if(i2c_status != HAL_OK && i2c_status != HAL_BUSY)
 800362a:	197b      	adds	r3, r7, r5
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	b25b      	sxtb	r3, r3
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00d      	beq.n	8003650 <main+0x43c>
 8003634:	197b      	adds	r3, r7, r5
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	b25b      	sxtb	r3, r3
 800363a:	2b02      	cmp	r3, #2
 800363c:	d008      	beq.n	8003650 <main+0x43c>
		  {
			  switch(i2c_status)
 800363e:	197b      	adds	r3, r7, r5
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	b25b      	sxtb	r3, r3
 8003644:	2b19      	cmp	r3, #25
 8003646:	d104      	bne.n	8003652 <main+0x43e>
					  break;
				  }
				  case I2C_FATAL_ERROR:
				  {
					  // Disable the I2C peripheral
					  holding_register_database[I2C_SHUTDOWN] = 1;
 8003648:	4bb3      	ldr	r3, [pc, #716]	@ (8003918 <main+0x704>)
 800364a:	2201      	movs	r2, #1
 800364c:	819a      	strh	r2, [r3, #12]
					  break;
 800364e:	e000      	b.n	8003652 <main+0x43e>
				  }
				  default:
 8003650:	46c0      	nop			@ (mov r8, r8)
			  }
		  }
	  }

	  // If the actuator is in the Micro range
	  if(((holding_register_database[ADC_6 + target_actuator]) >= (holding_register_database[ACTUATOR_A_TARGET + target_actuator] - ACTUATOR_TOLERANCE)) &&
 8003652:	200f      	movs	r0, #15
 8003654:	183b      	adds	r3, r7, r0
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	330f      	adds	r3, #15
 800365a:	001a      	movs	r2, r3
 800365c:	4bae      	ldr	r3, [pc, #696]	@ (8003918 <main+0x704>)
 800365e:	0052      	lsls	r2, r2, #1
 8003660:	5ad3      	ldrh	r3, [r2, r3]
 8003662:	0019      	movs	r1, r3
 8003664:	183b      	adds	r3, r7, r0
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	3340      	adds	r3, #64	@ 0x40
 800366a:	001a      	movs	r2, r3
 800366c:	4baa      	ldr	r3, [pc, #680]	@ (8003918 <main+0x704>)
 800366e:	0052      	lsls	r2, r2, #1
 8003670:	5ad3      	ldrh	r3, [r2, r3]
 8003672:	3b05      	subs	r3, #5
 8003674:	4299      	cmp	r1, r3
 8003676:	db5b      	blt.n	8003730 <main+0x51c>
		 ((holding_register_database[ADC_6 + target_actuator]) <= (holding_register_database[ACTUATOR_A_TARGET + target_actuator] + ACTUATOR_TOLERANCE)))
 8003678:	183b      	adds	r3, r7, r0
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	330f      	adds	r3, #15
 800367e:	001a      	movs	r2, r3
 8003680:	4ba5      	ldr	r3, [pc, #660]	@ (8003918 <main+0x704>)
 8003682:	0052      	lsls	r2, r2, #1
 8003684:	5ad3      	ldrh	r3, [r2, r3]
 8003686:	0019      	movs	r1, r3
 8003688:	183b      	adds	r3, r7, r0
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	3340      	adds	r3, #64	@ 0x40
 800368e:	001a      	movs	r2, r3
 8003690:	4ba1      	ldr	r3, [pc, #644]	@ (8003918 <main+0x704>)
 8003692:	0052      	lsls	r2, r2, #1
 8003694:	5ad3      	ldrh	r3, [r2, r3]
 8003696:	3305      	adds	r3, #5
	  if(((holding_register_database[ADC_6 + target_actuator]) >= (holding_register_database[ACTUATOR_A_TARGET + target_actuator] - ACTUATOR_TOLERANCE)) &&
 8003698:	4299      	cmp	r1, r3
 800369a:	dc49      	bgt.n	8003730 <main+0x51c>
	  {
		  micro_consistency_count[target_actuator]++;
 800369c:	183b      	adds	r3, r7, r0
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	003a      	movs	r2, r7
 80036a2:	5cd2      	ldrb	r2, [r2, r3]
 80036a4:	3201      	adds	r2, #1
 80036a6:	b2d1      	uxtb	r1, r2
 80036a8:	003a      	movs	r2, r7
 80036aa:	54d1      	strb	r1, [r2, r3]
		  if(micro_consistency_count[target_actuator] >= 5)
 80036ac:	183b      	adds	r3, r7, r0
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	003a      	movs	r2, r7
 80036b2:	5cd3      	ldrb	r3, [r2, r3]
 80036b4:	2b04      	cmp	r3, #4
 80036b6:	d800      	bhi.n	80036ba <main+0x4a6>
 80036b8:	e0d2      	b.n	8003860 <main+0x64c>
		  {
			  micro_consistency_count[target_actuator] = 5;
 80036ba:	183b      	adds	r3, r7, r0
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	003a      	movs	r2, r7
 80036c0:	2105      	movs	r1, #5
 80036c2:	54d1      	strb	r1, [r2, r3]
			  actuate_complete[target_actuator] = 1;
 80036c4:	183b      	adds	r3, r7, r0
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	2008      	movs	r0, #8
 80036ca:	183a      	adds	r2, r7, r0
 80036cc:	2101      	movs	r1, #1
 80036ce:	54d1      	strb	r1, [r2, r3]
			  if(actuate_complete[0] == 1 &&
 80036d0:	0002      	movs	r2, r0
 80036d2:	18bb      	adds	r3, r7, r2
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d10e      	bne.n	80036f8 <main+0x4e4>
				 actuate_complete[1] == 1 &&
 80036da:	18bb      	adds	r3, r7, r2
 80036dc:	785b      	ldrb	r3, [r3, #1]
			  if(actuate_complete[0] == 1 &&
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d10a      	bne.n	80036f8 <main+0x4e4>
				 actuate_complete[2] == 1 &&
 80036e2:	18bb      	adds	r3, r7, r2
 80036e4:	789b      	ldrb	r3, [r3, #2]
				 actuate_complete[1] == 1 &&
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d106      	bne.n	80036f8 <main+0x4e4>
				 !DRV_GetShutoff())
 80036ea:	f7fe fb43 	bl	8001d74 <DRV_GetShutoff>
 80036ee:	1e03      	subs	r3, r0, #0
				 actuate_complete[2] == 1 &&
 80036f0:	d102      	bne.n	80036f8 <main+0x4e4>
			  {
				  DRV_Shutoff();
 80036f2:	f7fe fb35 	bl	8001d60 <DRV_Shutoff>
		  if(micro_consistency_count[target_actuator] >= 5)
 80036f6:	e0b3      	b.n	8003860 <main+0x64c>
			  }
			  else if(!DRV_GetShutoff())
 80036f8:	f7fe fb3c 	bl	8001d74 <DRV_GetShutoff>
 80036fc:	1e03      	subs	r3, r0, #0
 80036fe:	d000      	beq.n	8003702 <main+0x4ee>
 8003700:	e0ae      	b.n	8003860 <main+0x64c>
			  {
				  // Move to the next actuator and force it to run if it isn't in the requested range
				  actuator_time = HAL_GetTick() - ((uint32_t)holding_register_database[ACTUATOR_TIME]);
 8003702:	f002 fa5f 	bl	8005bc4 <HAL_GetTick>
 8003706:	0002      	movs	r2, r0
 8003708:	4b83      	ldr	r3, [pc, #524]	@ (8003918 <main+0x704>)
 800370a:	2186      	movs	r1, #134	@ 0x86
 800370c:	5a5b      	ldrh	r3, [r3, r1]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	613b      	str	r3, [r7, #16]
				  target_actuator = ((target_actuator + 1) == NUM_ACTUATORS)? 0: target_actuator + 1;
 8003712:	220f      	movs	r2, #15
 8003714:	18bb      	adds	r3, r7, r2
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	2b02      	cmp	r3, #2
 800371a:	d004      	beq.n	8003726 <main+0x512>
 800371c:	18bb      	adds	r3, r7, r2
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	3301      	adds	r3, #1
 8003722:	b2da      	uxtb	r2, r3
 8003724:	e000      	b.n	8003728 <main+0x514>
 8003726:	2200      	movs	r2, #0
 8003728:	230f      	movs	r3, #15
 800372a:	18fb      	adds	r3, r7, r3
 800372c:	701a      	strb	r2, [r3, #0]
		  if(micro_consistency_count[target_actuator] >= 5)
 800372e:	e097      	b.n	8003860 <main+0x64c>
			  }
		  }
	  }
	  else
	  {
		  micro_consistency_count[target_actuator] = 0;
 8003730:	240f      	movs	r4, #15
 8003732:	193b      	adds	r3, r7, r4
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	003a      	movs	r2, r7
 8003738:	2100      	movs	r1, #0
 800373a:	54d1      	strb	r1, [r2, r3]
		  // if the DRV is shutoff
		  if(DRV_GetShutoff())
 800373c:	f7fe fb1a 	bl	8001d74 <DRV_GetShutoff>
 8003740:	1e03      	subs	r3, r0, #0
 8003742:	d100      	bne.n	8003746 <main+0x532>
 8003744:	e06f      	b.n	8003826 <main+0x612>
		  {
			  // If the ADC is outside of the Macro range
			  if(((holding_register_database[ADC_6 + target_actuator]) <= (holding_register_database[ACTUATOR_A_TARGET + target_actuator] - ACTUATOR_TOLERANCE_MACRO)) ||
 8003746:	0021      	movs	r1, r4
 8003748:	187b      	adds	r3, r7, r1
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	3340      	adds	r3, #64	@ 0x40
 800374e:	001a      	movs	r2, r3
 8003750:	4b71      	ldr	r3, [pc, #452]	@ (8003918 <main+0x704>)
 8003752:	0052      	lsls	r2, r2, #1
 8003754:	5ad3      	ldrh	r3, [r2, r3]
 8003756:	3b18      	subs	r3, #24
 8003758:	0008      	movs	r0, r1
 800375a:	187a      	adds	r2, r7, r1
 800375c:	7812      	ldrb	r2, [r2, #0]
 800375e:	320f      	adds	r2, #15
 8003760:	0011      	movs	r1, r2
 8003762:	4a6d      	ldr	r2, [pc, #436]	@ (8003918 <main+0x704>)
 8003764:	0049      	lsls	r1, r1, #1
 8003766:	5a8a      	ldrh	r2, [r1, r2]
 8003768:	4293      	cmp	r3, r2
 800376a:	dc11      	bgt.n	8003790 <main+0x57c>
				 ((holding_register_database[ADC_6 + target_actuator]) >= (holding_register_database[ACTUATOR_A_TARGET + target_actuator] + ACTUATOR_TOLERANCE_MACRO)))
 800376c:	0001      	movs	r1, r0
 800376e:	187b      	adds	r3, r7, r1
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	3340      	adds	r3, #64	@ 0x40
 8003774:	001a      	movs	r2, r3
 8003776:	4b68      	ldr	r3, [pc, #416]	@ (8003918 <main+0x704>)
 8003778:	0052      	lsls	r2, r2, #1
 800377a:	5ad3      	ldrh	r3, [r2, r3]
 800377c:	3318      	adds	r3, #24
 800377e:	187a      	adds	r2, r7, r1
 8003780:	7812      	ldrb	r2, [r2, #0]
 8003782:	320f      	adds	r2, #15
 8003784:	0011      	movs	r1, r2
 8003786:	4a64      	ldr	r2, [pc, #400]	@ (8003918 <main+0x704>)
 8003788:	0049      	lsls	r1, r1, #1
 800378a:	5a8a      	ldrh	r2, [r1, r2]
			  if(((holding_register_database[ADC_6 + target_actuator]) <= (holding_register_database[ACTUATOR_A_TARGET + target_actuator] - ACTUATOR_TOLERANCE_MACRO)) ||
 800378c:	4293      	cmp	r3, r2
 800378e:	da35      	bge.n	80037fc <main+0x5e8>
			  {
				  macro_consistency_count[target_actuator]++;
 8003790:	200f      	movs	r0, #15
 8003792:	183b      	adds	r3, r7, r0
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	1d3a      	adds	r2, r7, #4
 8003798:	5cd2      	ldrb	r2, [r2, r3]
 800379a:	3201      	adds	r2, #1
 800379c:	b2d1      	uxtb	r1, r2
 800379e:	1d3a      	adds	r2, r7, #4
 80037a0:	54d1      	strb	r1, [r2, r3]
				  if(macro_consistency_count[target_actuator] >= 10)
 80037a2:	183b      	adds	r3, r7, r0
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	1d3a      	adds	r2, r7, #4
 80037a8:	5cd3      	ldrb	r3, [r2, r3]
 80037aa:	2b09      	cmp	r3, #9
 80037ac:	d959      	bls.n	8003862 <main+0x64e>
				  {
					  macro_consistency_count[target_actuator] = 10;
 80037ae:	183b      	adds	r3, r7, r0
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	1d3a      	adds	r2, r7, #4
 80037b4:	210a      	movs	r1, #10
 80037b6:	54d1      	strb	r1, [r2, r3]
					  DRV_Activate(target_actuator, holding_register_database[ADC_6 + target_actuator], holding_register_database[ACTUATOR_A_TARGET + target_actuator]);
 80037b8:	183b      	adds	r3, r7, r0
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	330f      	adds	r3, #15
 80037be:	001a      	movs	r2, r3
 80037c0:	4b55      	ldr	r3, [pc, #340]	@ (8003918 <main+0x704>)
 80037c2:	0052      	lsls	r2, r2, #1
 80037c4:	5ad1      	ldrh	r1, [r2, r3]
 80037c6:	183b      	adds	r3, r7, r0
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	3340      	adds	r3, #64	@ 0x40
 80037cc:	001a      	movs	r2, r3
 80037ce:	4b52      	ldr	r3, [pc, #328]	@ (8003918 <main+0x704>)
 80037d0:	0052      	lsls	r2, r2, #1
 80037d2:	5ad2      	ldrh	r2, [r2, r3]
 80037d4:	183b      	adds	r3, r7, r0
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	0018      	movs	r0, r3
 80037da:	f7fe fad5 	bl	8001d88 <DRV_Activate>
					  actuator_time = HAL_GetTick();
 80037de:	f002 f9f1 	bl	8005bc4 <HAL_GetTick>
 80037e2:	0003      	movs	r3, r0
 80037e4:	613b      	str	r3, [r7, #16]
					  actuate_complete[0] = 0;
 80037e6:	2108      	movs	r1, #8
 80037e8:	187b      	adds	r3, r7, r1
 80037ea:	2200      	movs	r2, #0
 80037ec:	701a      	strb	r2, [r3, #0]
					  actuate_complete[1] = 0;
 80037ee:	187b      	adds	r3, r7, r1
 80037f0:	2200      	movs	r2, #0
 80037f2:	705a      	strb	r2, [r3, #1]
					  actuate_complete[2] = 0;
 80037f4:	187b      	adds	r3, r7, r1
 80037f6:	2200      	movs	r2, #0
 80037f8:	709a      	strb	r2, [r3, #2]
				  if(macro_consistency_count[target_actuator] >= 10)
 80037fa:	e032      	b.n	8003862 <main+0x64e>
				  }
			  }
			  else
			  {
				 // Check a different actuator
				  macro_consistency_count[target_actuator] = 0;
 80037fc:	200f      	movs	r0, #15
 80037fe:	183b      	adds	r3, r7, r0
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	1d3a      	adds	r2, r7, #4
 8003804:	2100      	movs	r1, #0
 8003806:	54d1      	strb	r1, [r2, r3]
				  target_actuator = ((target_actuator + 1) == NUM_ACTUATORS)? 0: target_actuator + 1;
 8003808:	0002      	movs	r2, r0
 800380a:	18bb      	adds	r3, r7, r2
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	2b02      	cmp	r3, #2
 8003810:	d004      	beq.n	800381c <main+0x608>
 8003812:	18bb      	adds	r3, r7, r2
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	3301      	adds	r3, #1
 8003818:	b2da      	uxtb	r2, r3
 800381a:	e000      	b.n	800381e <main+0x60a>
 800381c:	2200      	movs	r2, #0
 800381e:	230f      	movs	r3, #15
 8003820:	18fb      	adds	r3, r7, r3
 8003822:	701a      	strb	r2, [r3, #0]
 8003824:	e01d      	b.n	8003862 <main+0x64e>
			  }
		  }
		  else
		  {
			  // If the actuator has been running for a given amount of time
			  if((HAL_GetTick() - actuator_time) >= ((uint32_t)holding_register_database[ACTUATOR_TIME]))
 8003826:	f002 f9cd 	bl	8005bc4 <HAL_GetTick>
 800382a:	0002      	movs	r2, r0
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	4a39      	ldr	r2, [pc, #228]	@ (8003918 <main+0x704>)
 8003832:	2186      	movs	r1, #134	@ 0x86
 8003834:	5a52      	ldrh	r2, [r2, r1]
 8003836:	4293      	cmp	r3, r2
 8003838:	d313      	bcc.n	8003862 <main+0x64e>
			  {
				  actuator_time = HAL_GetTick();
 800383a:	f002 f9c3 	bl	8005bc4 <HAL_GetTick>
 800383e:	0003      	movs	r3, r0
 8003840:	613b      	str	r3, [r7, #16]
				  target_actuator = ((target_actuator + 1) == NUM_ACTUATORS)? 0: target_actuator + 1;
 8003842:	220f      	movs	r2, #15
 8003844:	18bb      	adds	r3, r7, r2
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	2b02      	cmp	r3, #2
 800384a:	d004      	beq.n	8003856 <main+0x642>
 800384c:	18bb      	adds	r3, r7, r2
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	3301      	adds	r3, #1
 8003852:	b2da      	uxtb	r2, r3
 8003854:	e000      	b.n	8003858 <main+0x644>
 8003856:	2200      	movs	r2, #0
 8003858:	230f      	movs	r3, #15
 800385a:	18fb      	adds	r3, r7, r3
 800385c:	701a      	strb	r2, [r3, #0]
 800385e:	e000      	b.n	8003862 <main+0x64e>
		  if(micro_consistency_count[target_actuator] >= 5)
 8003860:	46c0      	nop			@ (mov r8, r8)
			  }
		  }
	  }
	  actuate(target_actuator, holding_register_database[ADC_6 + target_actuator], holding_register_database[ACTUATOR_A_TARGET + target_actuator]);
 8003862:	200f      	movs	r0, #15
 8003864:	183b      	adds	r3, r7, r0
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	330f      	adds	r3, #15
 800386a:	001a      	movs	r2, r3
 800386c:	4b2a      	ldr	r3, [pc, #168]	@ (8003918 <main+0x704>)
 800386e:	0052      	lsls	r2, r2, #1
 8003870:	5ad1      	ldrh	r1, [r2, r3]
 8003872:	183b      	adds	r3, r7, r0
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	3340      	adds	r3, #64	@ 0x40
 8003878:	001a      	movs	r2, r3
 800387a:	4b27      	ldr	r3, [pc, #156]	@ (8003918 <main+0x704>)
 800387c:	0052      	lsls	r2, r2, #1
 800387e:	5ad2      	ldrh	r2, [r2, r3]
 8003880:	183b      	adds	r3, r7, r0
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	0018      	movs	r0, r3
 8003886:	f7fe f96b 	bl	8001b60 <actuate>

	  // Monitor any ADC Errors
	  adc_status = monitor_adc();
 800388a:	250c      	movs	r5, #12
 800388c:	197c      	adds	r4, r7, r5
 800388e:	f001 fc1b 	bl	80050c8 <monitor_adc>
 8003892:	0003      	movs	r3, r0
 8003894:	7023      	strb	r3, [r4, #0]
	  if(adc_status != HAL_OK)
 8003896:	197b      	adds	r3, r7, r5
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	b25b      	sxtb	r3, r3
 800389c:	2b00      	cmp	r3, #0
 800389e:	d002      	beq.n	80038a6 <main+0x692>
	  {
		  // An Overrun has occurred as shown in ADC1_IRQHandler in stm32c0xx_it.c. Log the error
		  holding_register_database[ADC_ERRORS] = 1;
 80038a0:	4b1d      	ldr	r3, [pc, #116]	@ (8003918 <main+0x704>)
 80038a2:	2201      	movs	r2, #1
 80038a4:	81da      	strh	r2, [r3, #14]
	  }

	  // Handle the User changing the encoder refresh rate (does not log potential errors)
	  if(encoder_refresh != holding_register_database[ENCODER_REFRESH])
 80038a6:	4b1c      	ldr	r3, [pc, #112]	@ (8003918 <main+0x704>)
 80038a8:	227e      	movs	r2, #126	@ 0x7e
 80038aa:	5a9b      	ldrh	r3, [r3, r2]
 80038ac:	2414      	movs	r4, #20
 80038ae:	193a      	adds	r2, r7, r4
 80038b0:	8812      	ldrh	r2, [r2, #0]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d100      	bne.n	80038b8 <main+0x6a4>
 80038b6:	e552      	b.n	800335e <main+0x14a>
	  {
		  HAL_TIM_Base_Stop_IT(&htim14);
 80038b8:	4b18      	ldr	r3, [pc, #96]	@ (800391c <main+0x708>)
 80038ba:	0018      	movs	r0, r3
 80038bc:	f006 fd40 	bl	800a340 <HAL_TIM_Base_Stop_IT>
		  HAL_TIM_Base_DeInit(&htim14);
 80038c0:	4b16      	ldr	r3, [pc, #88]	@ (800391c <main+0x708>)
 80038c2:	0018      	movs	r0, r3
 80038c4:	f006 fc8a 	bl	800a1dc <HAL_TIM_Base_DeInit>
		  __HAL_RCC_TIM14_FORCE_RESET();
 80038c8:	4b15      	ldr	r3, [pc, #84]	@ (8003920 <main+0x70c>)
 80038ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80038cc:	4b14      	ldr	r3, [pc, #80]	@ (8003920 <main+0x70c>)
 80038ce:	2180      	movs	r1, #128	@ 0x80
 80038d0:	0209      	lsls	r1, r1, #8
 80038d2:	430a      	orrs	r2, r1
 80038d4:	631a      	str	r2, [r3, #48]	@ 0x30
		  HAL_Delay(10);
 80038d6:	200a      	movs	r0, #10
 80038d8:	f002 f97e 	bl	8005bd8 <HAL_Delay>
		  __HAL_RCC_TIM14_RELEASE_RESET();
 80038dc:	4b10      	ldr	r3, [pc, #64]	@ (8003920 <main+0x70c>)
 80038de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80038e0:	4b0f      	ldr	r3, [pc, #60]	@ (8003920 <main+0x70c>)
 80038e2:	4910      	ldr	r1, [pc, #64]	@ (8003924 <main+0x710>)
 80038e4:	400a      	ands	r2, r1
 80038e6:	631a      	str	r2, [r3, #48]	@ 0x30
		  HAL_Delay(10);
 80038e8:	200a      	movs	r0, #10
 80038ea:	f002 f975 	bl	8005bd8 <HAL_Delay>
		  htim14.Init.Period = holding_register_database[ENCODER_REFRESH] - 1;
 80038ee:	4b0a      	ldr	r3, [pc, #40]	@ (8003918 <main+0x704>)
 80038f0:	227e      	movs	r2, #126	@ 0x7e
 80038f2:	5a9b      	ldrh	r3, [r3, r2]
 80038f4:	3b01      	subs	r3, #1
 80038f6:	001a      	movs	r2, r3
 80038f8:	4b08      	ldr	r3, [pc, #32]	@ (800391c <main+0x708>)
 80038fa:	60da      	str	r2, [r3, #12]
		  HAL_TIM_Base_Init(&htim14);
 80038fc:	4b07      	ldr	r3, [pc, #28]	@ (800391c <main+0x708>)
 80038fe:	0018      	movs	r0, r3
 8003900:	f006 fc14 	bl	800a12c <HAL_TIM_Base_Init>
		  HAL_TIM_Base_Start_IT(&htim14);
 8003904:	4b05      	ldr	r3, [pc, #20]	@ (800391c <main+0x708>)
 8003906:	0018      	movs	r0, r3
 8003908:	f006 fcc6 	bl	800a298 <HAL_TIM_Base_Start_IT>
		  encoder_refresh = holding_register_database[ENCODER_REFRESH];
 800390c:	193b      	adds	r3, r7, r4
 800390e:	4a02      	ldr	r2, [pc, #8]	@ (8003918 <main+0x704>)
 8003910:	217e      	movs	r1, #126	@ 0x7e
 8003912:	5a52      	ldrh	r2, [r2, r1]
 8003914:	801a      	strh	r2, [r3, #0]
	  if(modbus_rx())
 8003916:	e522      	b.n	800335e <main+0x14a>
 8003918:	20000014 	.word	0x20000014
 800391c:	200004c0 	.word	0x200004c0
 8003920:	40021000 	.word	0x40021000
 8003924:	ffff7fff 	.word	0xffff7fff

08003928 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003928:	b590      	push	{r4, r7, lr}
 800392a:	b08f      	sub	sp, #60	@ 0x3c
 800392c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800392e:	2418      	movs	r4, #24
 8003930:	193b      	adds	r3, r7, r4
 8003932:	0018      	movs	r0, r3
 8003934:	2320      	movs	r3, #32
 8003936:	001a      	movs	r2, r3
 8003938:	2100      	movs	r1, #0
 800393a:	f009 fc45 	bl	800d1c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800393e:	1d3b      	adds	r3, r7, #4
 8003940:	0018      	movs	r0, r3
 8003942:	2314      	movs	r3, #20
 8003944:	001a      	movs	r2, r3
 8003946:	2100      	movs	r1, #0
 8003948:	f009 fc3e 	bl	800d1c8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800394c:	193b      	adds	r3, r7, r4
 800394e:	2201      	movs	r2, #1
 8003950:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003952:	193b      	adds	r3, r7, r4
 8003954:	2280      	movs	r2, #128	@ 0x80
 8003956:	0252      	lsls	r2, r2, #9
 8003958:	605a      	str	r2, [r3, #4]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800395a:	193b      	adds	r3, r7, r4
 800395c:	0018      	movs	r0, r3
 800395e:	f005 fab1 	bl	8008ec4 <HAL_RCC_OscConfig>
 8003962:	1e03      	subs	r3, r0, #0
 8003964:	d001      	beq.n	800396a <SystemClock_Config+0x42>
  {
    Error_Handler();
 8003966:	f000 fc8f 	bl	8004288 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800396a:	1d3b      	adds	r3, r7, #4
 800396c:	2207      	movs	r2, #7
 800396e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8003970:	1d3b      	adds	r3, r7, #4
 8003972:	2201      	movs	r2, #1
 8003974:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003976:	1d3b      	adds	r3, r7, #4
 8003978:	2200      	movs	r2, #0
 800397a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800397c:	1d3b      	adds	r3, r7, #4
 800397e:	2200      	movs	r2, #0
 8003980:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8003982:	1d3b      	adds	r3, r7, #4
 8003984:	2200      	movs	r2, #0
 8003986:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003988:	1d3b      	adds	r3, r7, #4
 800398a:	2100      	movs	r1, #0
 800398c:	0018      	movs	r0, r3
 800398e:	f005 fcbf 	bl	8009310 <HAL_RCC_ClockConfig>
 8003992:	1e03      	subs	r3, r0, #0
 8003994:	d001      	beq.n	800399a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8003996:	f000 fc77 	bl	8004288 <Error_Handler>
  }
}
 800399a:	46c0      	nop			@ (mov r8, r8)
 800399c:	46bd      	mov	sp, r7
 800399e:	b00f      	add	sp, #60	@ 0x3c
 80039a0:	bd90      	pop	{r4, r7, pc}
	...

080039a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80039a4:	b590      	push	{r4, r7, lr}
 80039a6:	b09d      	sub	sp, #116	@ 0x74
 80039a8:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80039aa:	2350      	movs	r3, #80	@ 0x50
 80039ac:	18fb      	adds	r3, r7, r3
 80039ae:	0018      	movs	r0, r3
 80039b0:	2310      	movs	r3, #16
 80039b2:	001a      	movs	r2, r3
 80039b4:	2100      	movs	r1, #0
 80039b6:	f009 fc07 	bl	800d1c8 <memset>
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80039ba:	2338      	movs	r3, #56	@ 0x38
 80039bc:	18fb      	adds	r3, r7, r3
 80039be:	0018      	movs	r0, r3
 80039c0:	2318      	movs	r3, #24
 80039c2:	001a      	movs	r2, r3
 80039c4:	2100      	movs	r1, #0
 80039c6:	f009 fbff 	bl	800d1c8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039ca:	2320      	movs	r3, #32
 80039cc:	18fb      	adds	r3, r7, r3
 80039ce:	0018      	movs	r0, r3
 80039d0:	2318      	movs	r3, #24
 80039d2:	001a      	movs	r2, r3
 80039d4:	2100      	movs	r1, #0
 80039d6:	f009 fbf7 	bl	800d1c8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80039da:	003b      	movs	r3, r7
 80039dc:	0018      	movs	r0, r3
 80039de:	2320      	movs	r3, #32
 80039e0:	001a      	movs	r2, r3
 80039e2:	2100      	movs	r1, #0
 80039e4:	f009 fbf0 	bl	800d1c8 <memset>

  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80039e8:	003b      	movs	r3, r7
 80039ea:	2220      	movs	r2, #32
 80039ec:	601a      	str	r2, [r3, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80039ee:	003b      	movs	r3, r7
 80039f0:	2200      	movs	r2, #0
 80039f2:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80039f4:	003b      	movs	r3, r7
 80039f6:	0018      	movs	r0, r3
 80039f8:	f005 fe30 	bl	800965c <HAL_RCCEx_PeriphCLKConfig>
 80039fc:	1e03      	subs	r3, r0, #0
 80039fe:	d001      	beq.n	8003a04 <MX_ADC1_Init+0x60>
  {
    Error_Handler();
 8003a00:	f000 fc42 	bl	8004288 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC);
 8003a04:	2380      	movs	r3, #128	@ 0x80
 8003a06:	035b      	lsls	r3, r3, #13
 8003a08:	0018      	movs	r0, r3
 8003a0a:	f7ff f97b 	bl	8002d04 <LL_APB1_GRP2_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8003a0e:	2001      	movs	r0, #1
 8003a10:	f7ff f98e 	bl	8002d30 <LL_IOP_GRP1_EnableClock>
  PA5   ------> ADC1_IN5
  PA6   ------> ADC1_IN6
  PA7   ------> ADC1_IN7
  PA8   ------> ADC1_IN8
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8003a14:	2420      	movs	r4, #32
 8003a16:	193b      	adds	r3, r7, r4
 8003a18:	2201      	movs	r2, #1
 8003a1a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8003a1c:	193b      	adds	r3, r7, r4
 8003a1e:	2203      	movs	r2, #3
 8003a20:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003a22:	193b      	adds	r3, r7, r4
 8003a24:	2200      	movs	r2, #0
 8003a26:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a28:	193a      	adds	r2, r7, r4
 8003a2a:	23a0      	movs	r3, #160	@ 0xa0
 8003a2c:	05db      	lsls	r3, r3, #23
 8003a2e:	0011      	movs	r1, r2
 8003a30:	0018      	movs	r0, r3
 8003a32:	f009 fb6e 	bl	800d112 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8003a36:	193b      	adds	r3, r7, r4
 8003a38:	2202      	movs	r2, #2
 8003a3a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8003a3c:	193b      	adds	r3, r7, r4
 8003a3e:	2203      	movs	r2, #3
 8003a40:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003a42:	193b      	adds	r3, r7, r4
 8003a44:	2200      	movs	r2, #0
 8003a46:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a48:	193a      	adds	r2, r7, r4
 8003a4a:	23a0      	movs	r3, #160	@ 0xa0
 8003a4c:	05db      	lsls	r3, r3, #23
 8003a4e:	0011      	movs	r1, r2
 8003a50:	0018      	movs	r0, r3
 8003a52:	f009 fb5e 	bl	800d112 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8003a56:	193b      	adds	r3, r7, r4
 8003a58:	2204      	movs	r2, #4
 8003a5a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8003a5c:	193b      	adds	r3, r7, r4
 8003a5e:	2203      	movs	r2, #3
 8003a60:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003a62:	193b      	adds	r3, r7, r4
 8003a64:	2200      	movs	r2, #0
 8003a66:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a68:	193a      	adds	r2, r7, r4
 8003a6a:	23a0      	movs	r3, #160	@ 0xa0
 8003a6c:	05db      	lsls	r3, r3, #23
 8003a6e:	0011      	movs	r1, r2
 8003a70:	0018      	movs	r0, r3
 8003a72:	f009 fb4e 	bl	800d112 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8003a76:	193b      	adds	r3, r7, r4
 8003a78:	2208      	movs	r2, #8
 8003a7a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8003a7c:	193b      	adds	r3, r7, r4
 8003a7e:	2203      	movs	r2, #3
 8003a80:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003a82:	193b      	adds	r3, r7, r4
 8003a84:	2200      	movs	r2, #0
 8003a86:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a88:	193a      	adds	r2, r7, r4
 8003a8a:	23a0      	movs	r3, #160	@ 0xa0
 8003a8c:	05db      	lsls	r3, r3, #23
 8003a8e:	0011      	movs	r1, r2
 8003a90:	0018      	movs	r0, r3
 8003a92:	f009 fb3e 	bl	800d112 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8003a96:	193b      	adds	r3, r7, r4
 8003a98:	2210      	movs	r2, #16
 8003a9a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8003a9c:	193b      	adds	r3, r7, r4
 8003a9e:	2203      	movs	r2, #3
 8003aa0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003aa2:	193b      	adds	r3, r7, r4
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aa8:	193a      	adds	r2, r7, r4
 8003aaa:	23a0      	movs	r3, #160	@ 0xa0
 8003aac:	05db      	lsls	r3, r3, #23
 8003aae:	0011      	movs	r1, r2
 8003ab0:	0018      	movs	r0, r3
 8003ab2:	f009 fb2e 	bl	800d112 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8003ab6:	193b      	adds	r3, r7, r4
 8003ab8:	2220      	movs	r2, #32
 8003aba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8003abc:	193b      	adds	r3, r7, r4
 8003abe:	2203      	movs	r2, #3
 8003ac0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003ac2:	193b      	adds	r3, r7, r4
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ac8:	193a      	adds	r2, r7, r4
 8003aca:	23a0      	movs	r3, #160	@ 0xa0
 8003acc:	05db      	lsls	r3, r3, #23
 8003ace:	0011      	movs	r1, r2
 8003ad0:	0018      	movs	r0, r3
 8003ad2:	f009 fb1e 	bl	800d112 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8003ad6:	193b      	adds	r3, r7, r4
 8003ad8:	2240      	movs	r2, #64	@ 0x40
 8003ada:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8003adc:	193b      	adds	r3, r7, r4
 8003ade:	2203      	movs	r2, #3
 8003ae0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003ae2:	193b      	adds	r3, r7, r4
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ae8:	193a      	adds	r2, r7, r4
 8003aea:	23a0      	movs	r3, #160	@ 0xa0
 8003aec:	05db      	lsls	r3, r3, #23
 8003aee:	0011      	movs	r1, r2
 8003af0:	0018      	movs	r0, r3
 8003af2:	f009 fb0e 	bl	800d112 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8003af6:	193b      	adds	r3, r7, r4
 8003af8:	2280      	movs	r2, #128	@ 0x80
 8003afa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8003afc:	193b      	adds	r3, r7, r4
 8003afe:	2203      	movs	r2, #3
 8003b00:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003b02:	193b      	adds	r3, r7, r4
 8003b04:	2200      	movs	r2, #0
 8003b06:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b08:	193a      	adds	r2, r7, r4
 8003b0a:	23a0      	movs	r3, #160	@ 0xa0
 8003b0c:	05db      	lsls	r3, r3, #23
 8003b0e:	0011      	movs	r1, r2
 8003b10:	0018      	movs	r0, r3
 8003b12:	f009 fafe 	bl	800d112 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8003b16:	0021      	movs	r1, r4
 8003b18:	187b      	adds	r3, r7, r1
 8003b1a:	2280      	movs	r2, #128	@ 0x80
 8003b1c:	0052      	lsls	r2, r2, #1
 8003b1e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8003b20:	187b      	adds	r3, r7, r1
 8003b22:	2203      	movs	r2, #3
 8003b24:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003b26:	187b      	adds	r3, r7, r1
 8003b28:	2200      	movs	r2, #0
 8003b2a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b2c:	187a      	adds	r2, r7, r1
 8003b2e:	23a0      	movs	r3, #160	@ 0xa0
 8003b30:	05db      	lsls	r3, r3, #23
 8003b32:	0011      	movs	r1, r2
 8003b34:	0018      	movs	r0, r3
 8003b36:	f009 faec 	bl	800d112 <LL_GPIO_Init>

  /* ADC1 DMA Init */

  /* ADC1 Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_1, LL_DMAMUX_REQ_ADC1);
 8003b3a:	4b7a      	ldr	r3, [pc, #488]	@ (8003d24 <MX_ADC1_Init+0x380>)
 8003b3c:	2205      	movs	r2, #5
 8003b3e:	2101      	movs	r1, #1
 8003b40:	0018      	movs	r0, r3
 8003b42:	f7ff fa9d 	bl	8003080 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8003b46:	4b77      	ldr	r3, [pc, #476]	@ (8003d24 <MX_ADC1_Init+0x380>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	2101      	movs	r1, #1
 8003b4c:	0018      	movs	r0, r3
 8003b4e:	f7ff f939 	bl	8002dc4 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_LOW);
 8003b52:	4b74      	ldr	r3, [pc, #464]	@ (8003d24 <MX_ADC1_Init+0x380>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	2101      	movs	r1, #1
 8003b58:	0018      	movs	r0, r3
 8003b5a:	f7ff fa11 	bl	8002f80 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_CIRCULAR);
 8003b5e:	4b71      	ldr	r3, [pc, #452]	@ (8003d24 <MX_ADC1_Init+0x380>)
 8003b60:	2220      	movs	r2, #32
 8003b62:	2101      	movs	r1, #1
 8003b64:	0018      	movs	r0, r3
 8003b66:	f7ff f953 	bl	8002e10 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 8003b6a:	4b6e      	ldr	r3, [pc, #440]	@ (8003d24 <MX_ADC1_Init+0x380>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	2101      	movs	r1, #1
 8003b70:	0018      	movs	r0, r3
 8003b72:	f7ff f971 	bl	8002e58 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 8003b76:	4b6b      	ldr	r3, [pc, #428]	@ (8003d24 <MX_ADC1_Init+0x380>)
 8003b78:	2280      	movs	r2, #128	@ 0x80
 8003b7a:	2101      	movs	r1, #1
 8003b7c:	0018      	movs	r0, r3
 8003b7e:	f7ff f98f 	bl	8002ea0 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_HALFWORD);
 8003b82:	2380      	movs	r3, #128	@ 0x80
 8003b84:	005b      	lsls	r3, r3, #1
 8003b86:	4867      	ldr	r0, [pc, #412]	@ (8003d24 <MX_ADC1_Init+0x380>)
 8003b88:	001a      	movs	r2, r3
 8003b8a:	2101      	movs	r1, #1
 8003b8c:	f7ff f9ac 	bl	8002ee8 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_HALFWORD);
 8003b90:	2380      	movs	r3, #128	@ 0x80
 8003b92:	00db      	lsls	r3, r3, #3
 8003b94:	4863      	ldr	r0, [pc, #396]	@ (8003d24 <MX_ADC1_Init+0x380>)
 8003b96:	001a      	movs	r2, r3
 8003b98:	2101      	movs	r1, #1
 8003b9a:	f7ff f9cb 	bl	8002f34 <LL_DMA_SetMemorySize>

  /* ADC1 interrupt Init */
  NVIC_SetPriority(ADC1_IRQn, 0);
 8003b9e:	2100      	movs	r1, #0
 8003ba0:	200c      	movs	r0, #12
 8003ba2:	f7fe ff13 	bl	80029cc <__NVIC_SetPriority>
  NVIC_EnableIRQ(ADC1_IRQn);
 8003ba6:	200c      	movs	r0, #12
 8003ba8:	f7fe fef6 	bl	8002998 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN ADC1_Init 1 */

  /* Set DMA transfer addresses of source and destination */
  LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_1, LL_ADC_DMA_GetRegAddr(ADC1, LL_ADC_DMA_REG_REGULAR_DATA),
 8003bac:	4b5e      	ldr	r3, [pc, #376]	@ (8003d28 <MX_ADC1_Init+0x384>)
 8003bae:	2100      	movs	r1, #0
 8003bb0:	0018      	movs	r0, r3
 8003bb2:	f7fe ff79 	bl	8002aa8 <LL_ADC_DMA_GetRegAddr>
 8003bb6:	0001      	movs	r1, r0
 8003bb8:	4b5c      	ldr	r3, [pc, #368]	@ (8003d2c <MX_ADC1_Init+0x388>)
 8003bba:	485a      	ldr	r0, [pc, #360]	@ (8003d24 <MX_ADC1_Init+0x380>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	9200      	str	r2, [sp, #0]
 8003bc0:	000a      	movs	r2, r1
 8003bc2:	2101      	movs	r1, #1
 8003bc4:	f7ff fa24 	bl	8003010 <LL_DMA_ConfigAddresses>
		  (uint32_t)&holding_register_database[ADC_0],
		  LL_DMA_DIRECTION_PERIPH_TO_MEMORY);

  /* Set DMA transfer size */
  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_1, 9);
 8003bc8:	4b56      	ldr	r3, [pc, #344]	@ (8003d24 <MX_ADC1_Init+0x380>)
 8003bca:	2209      	movs	r2, #9
 8003bcc:	2101      	movs	r1, #1
 8003bce:	0018      	movs	r0, r3
 8003bd0:	f7ff f9fc 	bl	8002fcc <LL_DMA_SetDataLength>

  /* Enable DMA transfer interruption: transfer complete */
  LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_1);
 8003bd4:	4b53      	ldr	r3, [pc, #332]	@ (8003d24 <MX_ADC1_Init+0x380>)
 8003bd6:	2101      	movs	r1, #1
 8003bd8:	0018      	movs	r0, r3
 8003bda:	f7ff fa6f 	bl	80030bc <LL_DMA_EnableIT_TC>

  /* Enable DMA transfer interruption: transfer half complete */
  LL_DMA_EnableIT_HT(DMA1, LL_DMA_CHANNEL_1);
 8003bde:	4b51      	ldr	r3, [pc, #324]	@ (8003d24 <MX_ADC1_Init+0x380>)
 8003be0:	2101      	movs	r1, #1
 8003be2:	0018      	movs	r0, r3
 8003be4:	f7ff fa8a 	bl	80030fc <LL_DMA_EnableIT_HT>

  /* Enable DMA transfer interruption: transfer error */
  LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_1);
 8003be8:	4b4e      	ldr	r3, [pc, #312]	@ (8003d24 <MX_ADC1_Init+0x380>)
 8003bea:	2101      	movs	r1, #1
 8003bec:	0018      	movs	r0, r3
 8003bee:	f7ff faa5 	bl	800313c <LL_DMA_EnableIT_TE>

  /* Enable the DMA transfer */
  LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_1);
 8003bf2:	4b4c      	ldr	r3, [pc, #304]	@ (8003d24 <MX_ADC1_Init+0x380>)
 8003bf4:	2101      	movs	r1, #1
 8003bf6:	0018      	movs	r0, r3
 8003bf8:	f7ff f8c4 	bl	8002d84 <LL_DMA_EnableChannel>
   #define ADC_CHANNEL_CONF_RDY_TIMEOUT_MS ( 1U)
   #if (USE_TIMEOUT == 1)
   uint32_t Timeout ; /* Variable used for Timeout management */
   #endif /* USE_TIMEOUT */

  ADC_InitStruct.Clock = LL_ADC_CLOCK_SYNC_PCLK_DIV2;
 8003bfc:	2150      	movs	r1, #80	@ 0x50
 8003bfe:	187b      	adds	r3, r7, r1
 8003c00:	2280      	movs	r2, #128	@ 0x80
 8003c02:	05d2      	lsls	r2, r2, #23
 8003c04:	601a      	str	r2, [r3, #0]
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8003c06:	187b      	adds	r3, r7, r1
 8003c08:	2200      	movs	r2, #0
 8003c0a:	605a      	str	r2, [r3, #4]
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8003c0c:	187b      	adds	r3, r7, r1
 8003c0e:	2200      	movs	r2, #0
 8003c10:	609a      	str	r2, [r3, #8]
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8003c12:	187b      	adds	r3, r7, r1
 8003c14:	2200      	movs	r2, #0
 8003c16:	60da      	str	r2, [r3, #12]
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8003c18:	187b      	adds	r3, r7, r1
 8003c1a:	4a43      	ldr	r2, [pc, #268]	@ (8003d28 <MX_ADC1_Init+0x384>)
 8003c1c:	0019      	movs	r1, r3
 8003c1e:	0010      	movs	r0, r2
 8003c20:	f009 f924 	bl	800ce6c <LL_ADC_Init>
  LL_ADC_REG_SetSequencerConfigurable(ADC1, LL_ADC_REG_SEQ_FIXED);
 8003c24:	4b40      	ldr	r3, [pc, #256]	@ (8003d28 <MX_ADC1_Init+0x384>)
 8003c26:	2100      	movs	r1, #0
 8003c28:	0018      	movs	r0, r3
 8003c2a:	f7fe ff7b 	bl	8002b24 <LL_ADC_REG_SetSequencerConfigurable>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8003c2e:	2138      	movs	r1, #56	@ 0x38
 8003c30:	187b      	adds	r3, r7, r1
 8003c32:	2200      	movs	r2, #0
 8003c34:	601a      	str	r2, [r3, #0]
  ADC_REG_InitStruct.SequencerLength = 0;
 8003c36:	187b      	adds	r3, r7, r1
 8003c38:	2200      	movs	r2, #0
 8003c3a:	605a      	str	r2, [r3, #4]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8003c3c:	187b      	adds	r3, r7, r1
 8003c3e:	2200      	movs	r2, #0
 8003c40:	609a      	str	r2, [r3, #8]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 8003c42:	187b      	adds	r3, r7, r1
 8003c44:	2280      	movs	r2, #128	@ 0x80
 8003c46:	0192      	lsls	r2, r2, #6
 8003c48:	60da      	str	r2, [r3, #12]
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 8003c4a:	187b      	adds	r3, r7, r1
 8003c4c:	2203      	movs	r2, #3
 8003c4e:	611a      	str	r2, [r3, #16]
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8003c50:	187b      	adds	r3, r7, r1
 8003c52:	2200      	movs	r2, #0
 8003c54:	615a      	str	r2, [r3, #20]
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8003c56:	187b      	adds	r3, r7, r1
 8003c58:	4a33      	ldr	r2, [pc, #204]	@ (8003d28 <MX_ADC1_Init+0x384>)
 8003c5a:	0019      	movs	r1, r3
 8003c5c:	0010      	movs	r0, r2
 8003c5e:	f009 f93b 	bl	800ced8 <LL_ADC_REG_Init>
  LL_ADC_REG_SetSequencerScanDirection(ADC1, LL_ADC_REG_SEQ_SCAN_DIR_FORWARD);
 8003c62:	4b31      	ldr	r3, [pc, #196]	@ (8003d28 <MX_ADC1_Init+0x384>)
 8003c64:	2100      	movs	r1, #0
 8003c66:	0018      	movs	r0, r3
 8003c68:	f7fe ff70 	bl	8002b4c <LL_ADC_REG_SetSequencerScanDirection>
  LL_ADC_SetOverSamplingScope(ADC1, LL_ADC_OVS_DISABLE);
 8003c6c:	4b2e      	ldr	r3, [pc, #184]	@ (8003d28 <MX_ADC1_Init+0x384>)
 8003c6e:	2100      	movs	r1, #0
 8003c70:	0018      	movs	r0, r3
 8003c72:	f7fe ff8e 	bl	8002b92 <LL_ADC_SetOverSamplingScope>
  LL_ADC_SetTriggerFrequencyMode(ADC1, LL_ADC_CLOCK_FREQ_MODE_HIGH);
 8003c76:	4b2c      	ldr	r3, [pc, #176]	@ (8003d28 <MX_ADC1_Init+0x384>)
 8003c78:	2100      	movs	r1, #0
 8003c7a:	0018      	movs	r0, r3
 8003c7c:	f7fe ff20 	bl	8002ac0 <LL_ADC_SetTriggerFrequencyMode>
  LL_ADC_REG_SetSequencerChAdd(ADC1, LL_ADC_CHANNEL_0|LL_ADC_CHANNEL_1
 8003c80:	4a2b      	ldr	r2, [pc, #172]	@ (8003d30 <MX_ADC1_Init+0x38c>)
 8003c82:	4b29      	ldr	r3, [pc, #164]	@ (8003d28 <MX_ADC1_Init+0x384>)
 8003c84:	0011      	movs	r1, r2
 8003c86:	0018      	movs	r0, r3
 8003c88:	f7fe ff72 	bl	8002b70 <LL_ADC_REG_SetSequencerChAdd>
                              |LL_ADC_CHANNEL_6|LL_ADC_CHANNEL_7
                              |LL_ADC_CHANNEL_8);

   /* Poll for ADC channel configuration ready */
   #if (USE_TIMEOUT == 1)
   Timeout = ADC_CHANNEL_CONF_RDY_TIMEOUT_MS;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	667b      	str	r3, [r7, #100]	@ 0x64
   #endif /* USE_TIMEOUT */
   while (LL_ADC_IsActiveFlag_CCRDY(ADC1) == 0)
 8003c90:	e00a      	b.n	8003ca8 <MX_ADC1_Init+0x304>
     {
   #if (USE_TIMEOUT == 1)
   /* Check Systick counter flag to decrement the time-out value */
   if (LL_SYSTICK_IsActiveCounterFlag())
 8003c92:	f7ff f863 	bl	8002d5c <LL_SYSTICK_IsActiveCounterFlag>
 8003c96:	1e03      	subs	r3, r0, #0
 8003c98:	d006      	beq.n	8003ca8 <MX_ADC1_Init+0x304>
     {
   if(Timeout-- == 0)
 8003c9a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c9c:	1e5a      	subs	r2, r3, #1
 8003c9e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d101      	bne.n	8003ca8 <MX_ADC1_Init+0x304>
         {
   Error_Handler();
 8003ca4:	f000 faf0 	bl	8004288 <Error_Handler>
   while (LL_ADC_IsActiveFlag_CCRDY(ADC1) == 0)
 8003ca8:	4b1f      	ldr	r3, [pc, #124]	@ (8003d28 <MX_ADC1_Init+0x384>)
 8003caa:	0018      	movs	r0, r3
 8003cac:	f7fe ffdd 	bl	8002c6a <LL_ADC_IsActiveFlag_CCRDY>
 8003cb0:	1e03      	subs	r3, r0, #0
 8003cb2:	d0ee      	beq.n	8003c92 <MX_ADC1_Init+0x2ee>
         }
     }
   #endif /* USE_TIMEOUT */
     }
   /* Clear flag ADC channel configuration ready */
   LL_ADC_ClearFlag_CCRDY(ADC1);
 8003cb4:	4b1c      	ldr	r3, [pc, #112]	@ (8003d28 <MX_ADC1_Init+0x384>)
 8003cb6:	0018      	movs	r0, r3
 8003cb8:	f7fe ffeb 	bl	8002c92 <LL_ADC_ClearFlag_CCRDY>
  LL_ADC_SetSamplingTimeCommonChannels(ADC1, LL_ADC_SAMPLINGTIME_COMMON_1, LL_ADC_SAMPLINGTIME_160CYCLES_5);
 8003cbc:	4b1a      	ldr	r3, [pc, #104]	@ (8003d28 <MX_ADC1_Init+0x384>)
 8003cbe:	2207      	movs	r2, #7
 8003cc0:	2100      	movs	r1, #0
 8003cc2:	0018      	movs	r0, r3
 8003cc4:	f7fe ff10 	bl	8002ae8 <LL_ADC_SetSamplingTimeCommonChannels>
  LL_ADC_DisableIT_EOC(ADC1);
 8003cc8:	4b17      	ldr	r3, [pc, #92]	@ (8003d28 <MX_ADC1_Init+0x384>)
 8003cca:	0018      	movs	r0, r3
 8003ccc:	f7fe fffb 	bl	8002cc6 <LL_ADC_DisableIT_EOC>
  LL_ADC_DisableIT_EOS(ADC1);
 8003cd0:	4b15      	ldr	r3, [pc, #84]	@ (8003d28 <MX_ADC1_Init+0x384>)
 8003cd2:	0018      	movs	r0, r3
 8003cd4:	f7ff f806 	bl	8002ce4 <LL_ADC_DisableIT_EOS>

   /* Enable ADC internal voltage regulator */
   LL_ADC_EnableInternalRegulator(ADC1);
 8003cd8:	4b13      	ldr	r3, [pc, #76]	@ (8003d28 <MX_ADC1_Init+0x384>)
 8003cda:	0018      	movs	r0, r3
 8003cdc:	f7fe ff6c 	bl	8002bb8 <LL_ADC_EnableInternalRegulator>
   /* Note: Variable divided by 2 to compensate partially */
   /* CPU processing cycles (depends on compilation optimization). */
   /* Note: If system core clock frequency is below 200kHz, wait time */
   /* is only a few CPU processing cycles. */
   uint32_t wait_loop_index;
   wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8003ce0:	4b14      	ldr	r3, [pc, #80]	@ (8003d34 <MX_ADC1_Init+0x390>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4914      	ldr	r1, [pc, #80]	@ (8003d38 <MX_ADC1_Init+0x394>)
 8003ce6:	0018      	movs	r0, r3
 8003ce8:	f7fc fa0e 	bl	8000108 <__udivsi3>
 8003cec:	0003      	movs	r3, r0
 8003cee:	001a      	movs	r2, r3
 8003cf0:	0013      	movs	r3, r2
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	189b      	adds	r3, r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	210a      	movs	r1, #10
 8003cfa:	0018      	movs	r0, r3
 8003cfc:	f7fc fa04 	bl	8000108 <__udivsi3>
 8003d00:	0003      	movs	r3, r0
 8003d02:	663b      	str	r3, [r7, #96]	@ 0x60
   while(wait_loop_index != 0)
 8003d04:	e002      	b.n	8003d0c <MX_ADC1_Init+0x368>
     {
   wait_loop_index--;
 8003d06:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003d08:	3b01      	subs	r3, #1
 8003d0a:	663b      	str	r3, [r7, #96]	@ 0x60
   while(wait_loop_index != 0)
 8003d0c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1f9      	bne.n	8003d06 <MX_ADC1_Init+0x362>
     }
  /* USER CODE BEGIN ADC1_Init 2 */

   LL_ADC_EnableIT_OVR(ADC1);
 8003d12:	4b05      	ldr	r3, [pc, #20]	@ (8003d28 <MX_ADC1_Init+0x384>)
 8003d14:	0018      	movs	r0, r3
 8003d16:	f7fe ffc8 	bl	8002caa <LL_ADC_EnableIT_OVR>

  /* USER CODE END ADC1_Init 2 */

}
 8003d1a:	46c0      	nop			@ (mov r8, r8)
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	b01b      	add	sp, #108	@ 0x6c
 8003d20:	bd90      	pop	{r4, r7, pc}
 8003d22:	46c0      	nop			@ (mov r8, r8)
 8003d24:	40020000 	.word	0x40020000
 8003d28:	40012400 	.word	0x40012400
 8003d2c:	20000026 	.word	0x20000026
 8003d30:	3c0001ff 	.word	0x3c0001ff
 8003d34:	200000b8 	.word	0x200000b8
 8003d38:	00030d40 	.word	0x00030d40

08003d3c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003d40:	4b1b      	ldr	r3, [pc, #108]	@ (8003db0 <MX_I2C1_Init+0x74>)
 8003d42:	4a1c      	ldr	r2, [pc, #112]	@ (8003db4 <MX_I2C1_Init+0x78>)
 8003d44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010020B;
 8003d46:	4b1a      	ldr	r3, [pc, #104]	@ (8003db0 <MX_I2C1_Init+0x74>)
 8003d48:	4a1b      	ldr	r2, [pc, #108]	@ (8003db8 <MX_I2C1_Init+0x7c>)
 8003d4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003d4c:	4b18      	ldr	r3, [pc, #96]	@ (8003db0 <MX_I2C1_Init+0x74>)
 8003d4e:	2200      	movs	r2, #0
 8003d50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003d52:	4b17      	ldr	r3, [pc, #92]	@ (8003db0 <MX_I2C1_Init+0x74>)
 8003d54:	2201      	movs	r2, #1
 8003d56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003d58:	4b15      	ldr	r3, [pc, #84]	@ (8003db0 <MX_I2C1_Init+0x74>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003d5e:	4b14      	ldr	r3, [pc, #80]	@ (8003db0 <MX_I2C1_Init+0x74>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003d64:	4b12      	ldr	r3, [pc, #72]	@ (8003db0 <MX_I2C1_Init+0x74>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003d6a:	4b11      	ldr	r3, [pc, #68]	@ (8003db0 <MX_I2C1_Init+0x74>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003d70:	4b0f      	ldr	r3, [pc, #60]	@ (8003db0 <MX_I2C1_Init+0x74>)
 8003d72:	2200      	movs	r2, #0
 8003d74:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003d76:	4b0e      	ldr	r3, [pc, #56]	@ (8003db0 <MX_I2C1_Init+0x74>)
 8003d78:	0018      	movs	r0, r3
 8003d7a:	f002 fed7 	bl	8006b2c <HAL_I2C_Init>
 8003d7e:	1e03      	subs	r3, r0, #0
 8003d80:	d001      	beq.n	8003d86 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003d82:	f000 fa81 	bl	8004288 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003d86:	4b0a      	ldr	r3, [pc, #40]	@ (8003db0 <MX_I2C1_Init+0x74>)
 8003d88:	2100      	movs	r1, #0
 8003d8a:	0018      	movs	r0, r3
 8003d8c:	f005 f802 	bl	8008d94 <HAL_I2CEx_ConfigAnalogFilter>
 8003d90:	1e03      	subs	r3, r0, #0
 8003d92:	d001      	beq.n	8003d98 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003d94:	f000 fa78 	bl	8004288 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003d98:	4b05      	ldr	r3, [pc, #20]	@ (8003db0 <MX_I2C1_Init+0x74>)
 8003d9a:	2100      	movs	r1, #0
 8003d9c:	0018      	movs	r0, r3
 8003d9e:	f005 f845 	bl	8008e2c <HAL_I2CEx_ConfigDigitalFilter>
 8003da2:	1e03      	subs	r3, r0, #0
 8003da4:	d001      	beq.n	8003daa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003da6:	f000 fa6f 	bl	8004288 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003daa:	46c0      	nop			@ (mov r8, r8)
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	20000304 	.word	0x20000304
 8003db4:	40005400 	.word	0x40005400
 8003db8:	0010020b 	.word	0x0010020b

08003dbc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003dc0:	4b1b      	ldr	r3, [pc, #108]	@ (8003e30 <MX_SPI1_Init+0x74>)
 8003dc2:	4a1c      	ldr	r2, [pc, #112]	@ (8003e34 <MX_SPI1_Init+0x78>)
 8003dc4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003dc6:	4b1a      	ldr	r3, [pc, #104]	@ (8003e30 <MX_SPI1_Init+0x74>)
 8003dc8:	2282      	movs	r2, #130	@ 0x82
 8003dca:	0052      	lsls	r2, r2, #1
 8003dcc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003dce:	4b18      	ldr	r3, [pc, #96]	@ (8003e30 <MX_SPI1_Init+0x74>)
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003dd4:	4b16      	ldr	r3, [pc, #88]	@ (8003e30 <MX_SPI1_Init+0x74>)
 8003dd6:	22e0      	movs	r2, #224	@ 0xe0
 8003dd8:	00d2      	lsls	r2, r2, #3
 8003dda:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ddc:	4b14      	ldr	r3, [pc, #80]	@ (8003e30 <MX_SPI1_Init+0x74>)
 8003dde:	2200      	movs	r2, #0
 8003de0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003de2:	4b13      	ldr	r3, [pc, #76]	@ (8003e30 <MX_SPI1_Init+0x74>)
 8003de4:	2201      	movs	r2, #1
 8003de6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003de8:	4b11      	ldr	r3, [pc, #68]	@ (8003e30 <MX_SPI1_Init+0x74>)
 8003dea:	2280      	movs	r2, #128	@ 0x80
 8003dec:	0092      	lsls	r2, r2, #2
 8003dee:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003df0:	4b0f      	ldr	r3, [pc, #60]	@ (8003e30 <MX_SPI1_Init+0x74>)
 8003df2:	2210      	movs	r2, #16
 8003df4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003df6:	4b0e      	ldr	r3, [pc, #56]	@ (8003e30 <MX_SPI1_Init+0x74>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8003e30 <MX_SPI1_Init+0x74>)
 8003dfe:	2200      	movs	r2, #0
 8003e00:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e02:	4b0b      	ldr	r3, [pc, #44]	@ (8003e30 <MX_SPI1_Init+0x74>)
 8003e04:	2200      	movs	r2, #0
 8003e06:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003e08:	4b09      	ldr	r3, [pc, #36]	@ (8003e30 <MX_SPI1_Init+0x74>)
 8003e0a:	2207      	movs	r2, #7
 8003e0c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003e0e:	4b08      	ldr	r3, [pc, #32]	@ (8003e30 <MX_SPI1_Init+0x74>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003e14:	4b06      	ldr	r3, [pc, #24]	@ (8003e30 <MX_SPI1_Init+0x74>)
 8003e16:	2200      	movs	r2, #0
 8003e18:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003e1a:	4b05      	ldr	r3, [pc, #20]	@ (8003e30 <MX_SPI1_Init+0x74>)
 8003e1c:	0018      	movs	r0, r3
 8003e1e:	f005 fd19 	bl	8009854 <HAL_SPI_Init>
 8003e22:	1e03      	subs	r3, r0, #0
 8003e24:	d001      	beq.n	8003e2a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003e26:	f000 fa2f 	bl	8004288 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003e2a:	46c0      	nop			@ (mov r8, r8)
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	20000410 	.word	0x20000410
 8003e34:	40013000 	.word	0x40013000

08003e38 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b098      	sub	sp, #96	@ 0x60
 8003e3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e3e:	2354      	movs	r3, #84	@ 0x54
 8003e40:	18fb      	adds	r3, r7, r3
 8003e42:	0018      	movs	r0, r3
 8003e44:	230c      	movs	r3, #12
 8003e46:	001a      	movs	r2, r3
 8003e48:	2100      	movs	r1, #0
 8003e4a:	f009 f9bd 	bl	800d1c8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003e4e:	2338      	movs	r3, #56	@ 0x38
 8003e50:	18fb      	adds	r3, r7, r3
 8003e52:	0018      	movs	r0, r3
 8003e54:	231c      	movs	r3, #28
 8003e56:	001a      	movs	r2, r3
 8003e58:	2100      	movs	r1, #0
 8003e5a:	f009 f9b5 	bl	800d1c8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003e5e:	1d3b      	adds	r3, r7, #4
 8003e60:	0018      	movs	r0, r3
 8003e62:	2334      	movs	r3, #52	@ 0x34
 8003e64:	001a      	movs	r2, r3
 8003e66:	2100      	movs	r1, #0
 8003e68:	f009 f9ae 	bl	800d1c8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003e6c:	4b45      	ldr	r3, [pc, #276]	@ (8003f84 <MX_TIM1_Init+0x14c>)
 8003e6e:	4a46      	ldr	r2, [pc, #280]	@ (8003f88 <MX_TIM1_Init+0x150>)
 8003e70:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 8003e72:	4b44      	ldr	r3, [pc, #272]	@ (8003f84 <MX_TIM1_Init+0x14c>)
 8003e74:	224f      	movs	r2, #79	@ 0x4f
 8003e76:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e78:	4b42      	ldr	r3, [pc, #264]	@ (8003f84 <MX_TIM1_Init+0x14c>)
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8003e7e:	4b41      	ldr	r3, [pc, #260]	@ (8003f84 <MX_TIM1_Init+0x14c>)
 8003e80:	2263      	movs	r2, #99	@ 0x63
 8003e82:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e84:	4b3f      	ldr	r3, [pc, #252]	@ (8003f84 <MX_TIM1_Init+0x14c>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003e8a:	4b3e      	ldr	r3, [pc, #248]	@ (8003f84 <MX_TIM1_Init+0x14c>)
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003e90:	4b3c      	ldr	r3, [pc, #240]	@ (8003f84 <MX_TIM1_Init+0x14c>)
 8003e92:	2280      	movs	r2, #128	@ 0x80
 8003e94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003e96:	4b3b      	ldr	r3, [pc, #236]	@ (8003f84 <MX_TIM1_Init+0x14c>)
 8003e98:	0018      	movs	r0, r3
 8003e9a:	f006 fa7f 	bl	800a39c <HAL_TIM_PWM_Init>
 8003e9e:	1e03      	subs	r3, r0, #0
 8003ea0:	d001      	beq.n	8003ea6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8003ea2:	f000 f9f1 	bl	8004288 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ea6:	2154      	movs	r1, #84	@ 0x54
 8003ea8:	187b      	adds	r3, r7, r1
 8003eaa:	2200      	movs	r2, #0
 8003eac:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003eae:	187b      	adds	r3, r7, r1
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003eb4:	187b      	adds	r3, r7, r1
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003eba:	187a      	adds	r2, r7, r1
 8003ebc:	4b31      	ldr	r3, [pc, #196]	@ (8003f84 <MX_TIM1_Init+0x14c>)
 8003ebe:	0011      	movs	r1, r2
 8003ec0:	0018      	movs	r0, r3
 8003ec2:	f007 f90d 	bl	800b0e0 <HAL_TIMEx_MasterConfigSynchronization>
 8003ec6:	1e03      	subs	r3, r0, #0
 8003ec8:	d001      	beq.n	8003ece <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8003eca:	f000 f9dd 	bl	8004288 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ece:	2138      	movs	r1, #56	@ 0x38
 8003ed0:	187b      	adds	r3, r7, r1
 8003ed2:	2260      	movs	r2, #96	@ 0x60
 8003ed4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003ed6:	187b      	adds	r3, r7, r1
 8003ed8:	2200      	movs	r2, #0
 8003eda:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003edc:	187b      	adds	r3, r7, r1
 8003ede:	2200      	movs	r2, #0
 8003ee0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003ee2:	187b      	adds	r3, r7, r1
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ee8:	187b      	adds	r3, r7, r1
 8003eea:	2200      	movs	r2, #0
 8003eec:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003eee:	187b      	adds	r3, r7, r1
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003ef4:	187b      	adds	r3, r7, r1
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003efa:	1879      	adds	r1, r7, r1
 8003efc:	4b21      	ldr	r3, [pc, #132]	@ (8003f84 <MX_TIM1_Init+0x14c>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	0018      	movs	r0, r3
 8003f02:	f006 fc89 	bl	800a818 <HAL_TIM_PWM_ConfigChannel>
 8003f06:	1e03      	subs	r3, r0, #0
 8003f08:	d001      	beq.n	8003f0e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8003f0a:	f000 f9bd 	bl	8004288 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003f0e:	1d3b      	adds	r3, r7, #4
 8003f10:	2200      	movs	r2, #0
 8003f12:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003f14:	1d3b      	adds	r3, r7, #4
 8003f16:	2200      	movs	r2, #0
 8003f18:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003f1a:	1d3b      	adds	r3, r7, #4
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003f20:	1d3b      	adds	r3, r7, #4
 8003f22:	2200      	movs	r2, #0
 8003f24:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003f26:	1d3b      	adds	r3, r7, #4
 8003f28:	2200      	movs	r2, #0
 8003f2a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003f2c:	1d3b      	adds	r3, r7, #4
 8003f2e:	2280      	movs	r2, #128	@ 0x80
 8003f30:	0192      	lsls	r2, r2, #6
 8003f32:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003f34:	1d3b      	adds	r3, r7, #4
 8003f36:	2200      	movs	r2, #0
 8003f38:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003f3a:	1d3b      	adds	r3, r7, #4
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003f40:	1d3b      	adds	r3, r7, #4
 8003f42:	2200      	movs	r2, #0
 8003f44:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003f46:	1d3b      	adds	r3, r7, #4
 8003f48:	2280      	movs	r2, #128	@ 0x80
 8003f4a:	0492      	lsls	r2, r2, #18
 8003f4c:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003f4e:	1d3b      	adds	r3, r7, #4
 8003f50:	2200      	movs	r2, #0
 8003f52:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003f54:	1d3b      	adds	r3, r7, #4
 8003f56:	2200      	movs	r2, #0
 8003f58:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003f5a:	1d3b      	adds	r3, r7, #4
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003f60:	1d3a      	adds	r2, r7, #4
 8003f62:	4b08      	ldr	r3, [pc, #32]	@ (8003f84 <MX_TIM1_Init+0x14c>)
 8003f64:	0011      	movs	r1, r2
 8003f66:	0018      	movs	r0, r3
 8003f68:	f007 f922 	bl	800b1b0 <HAL_TIMEx_ConfigBreakDeadTime>
 8003f6c:	1e03      	subs	r3, r0, #0
 8003f6e:	d001      	beq.n	8003f74 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8003f70:	f000 f98a 	bl	8004288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003f74:	4b03      	ldr	r3, [pc, #12]	@ (8003f84 <MX_TIM1_Init+0x14c>)
 8003f76:	0018      	movs	r0, r3
 8003f78:	f001 faa6 	bl	80054c8 <HAL_TIM_MspPostInit>

}
 8003f7c:	46c0      	nop			@ (mov r8, r8)
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	b018      	add	sp, #96	@ 0x60
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	20000474 	.word	0x20000474
 8003f88:	40012c00 	.word	0x40012c00

08003f8c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8003f90:	4b0e      	ldr	r3, [pc, #56]	@ (8003fcc <MX_TIM14_Init+0x40>)
 8003f92:	4a0f      	ldr	r2, [pc, #60]	@ (8003fd0 <MX_TIM14_Init+0x44>)
 8003f94:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 800 - 1 ;
 8003f96:	4b0d      	ldr	r3, [pc, #52]	@ (8003fcc <MX_TIM14_Init+0x40>)
 8003f98:	4a0e      	ldr	r2, [pc, #56]	@ (8003fd4 <MX_TIM14_Init+0x48>)
 8003f9a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8003fcc <MX_TIM14_Init+0x40>)
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000 - 1;
 8003fa2:	4b0a      	ldr	r3, [pc, #40]	@ (8003fcc <MX_TIM14_Init+0x40>)
 8003fa4:	4a0c      	ldr	r2, [pc, #48]	@ (8003fd8 <MX_TIM14_Init+0x4c>)
 8003fa6:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fa8:	4b08      	ldr	r3, [pc, #32]	@ (8003fcc <MX_TIM14_Init+0x40>)
 8003faa:	2200      	movs	r2, #0
 8003fac:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fae:	4b07      	ldr	r3, [pc, #28]	@ (8003fcc <MX_TIM14_Init+0x40>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8003fb4:	4b05      	ldr	r3, [pc, #20]	@ (8003fcc <MX_TIM14_Init+0x40>)
 8003fb6:	0018      	movs	r0, r3
 8003fb8:	f006 f8b8 	bl	800a12c <HAL_TIM_Base_Init>
 8003fbc:	1e03      	subs	r3, r0, #0
 8003fbe:	d001      	beq.n	8003fc4 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8003fc0:	f000 f962 	bl	8004288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8003fc4:	46c0      	nop			@ (mov r8, r8)
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	46c0      	nop			@ (mov r8, r8)
 8003fcc:	200004c0 	.word	0x200004c0
 8003fd0:	40002000 	.word	0x40002000
 8003fd4:	0000031f 	.word	0x0000031f
 8003fd8:	0000270f 	.word	0x0000270f

08003fdc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003fe0:	4b24      	ldr	r3, [pc, #144]	@ (8004074 <MX_USART1_UART_Init+0x98>)
 8003fe2:	4a25      	ldr	r2, [pc, #148]	@ (8004078 <MX_USART1_UART_Init+0x9c>)
 8003fe4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003fe6:	4b23      	ldr	r3, [pc, #140]	@ (8004074 <MX_USART1_UART_Init+0x98>)
 8003fe8:	22e1      	movs	r2, #225	@ 0xe1
 8003fea:	0252      	lsls	r2, r2, #9
 8003fec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003fee:	4b21      	ldr	r3, [pc, #132]	@ (8004074 <MX_USART1_UART_Init+0x98>)
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003ff4:	4b1f      	ldr	r3, [pc, #124]	@ (8004074 <MX_USART1_UART_Init+0x98>)
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003ffa:	4b1e      	ldr	r3, [pc, #120]	@ (8004074 <MX_USART1_UART_Init+0x98>)
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004000:	4b1c      	ldr	r3, [pc, #112]	@ (8004074 <MX_USART1_UART_Init+0x98>)
 8004002:	220c      	movs	r2, #12
 8004004:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004006:	4b1b      	ldr	r3, [pc, #108]	@ (8004074 <MX_USART1_UART_Init+0x98>)
 8004008:	2200      	movs	r2, #0
 800400a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800400c:	4b19      	ldr	r3, [pc, #100]	@ (8004074 <MX_USART1_UART_Init+0x98>)
 800400e:	2200      	movs	r2, #0
 8004010:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004012:	4b18      	ldr	r3, [pc, #96]	@ (8004074 <MX_USART1_UART_Init+0x98>)
 8004014:	2200      	movs	r2, #0
 8004016:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004018:	4b16      	ldr	r3, [pc, #88]	@ (8004074 <MX_USART1_UART_Init+0x98>)
 800401a:	2200      	movs	r2, #0
 800401c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800401e:	4b15      	ldr	r3, [pc, #84]	@ (8004074 <MX_USART1_UART_Init+0x98>)
 8004020:	2200      	movs	r2, #0
 8004022:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8004024:	4813      	ldr	r0, [pc, #76]	@ (8004074 <MX_USART1_UART_Init+0x98>)
 8004026:	2300      	movs	r3, #0
 8004028:	2200      	movs	r2, #0
 800402a:	2100      	movs	r1, #0
 800402c:	f008 fce4 	bl	800c9f8 <HAL_RS485Ex_Init>
 8004030:	1e03      	subs	r3, r0, #0
 8004032:	d001      	beq.n	8004038 <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 8004034:	f000 f928 	bl	8004288 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004038:	4b0e      	ldr	r3, [pc, #56]	@ (8004074 <MX_USART1_UART_Init+0x98>)
 800403a:	2100      	movs	r1, #0
 800403c:	0018      	movs	r0, r3
 800403e:	f008 fd9f 	bl	800cb80 <HAL_UARTEx_SetTxFifoThreshold>
 8004042:	1e03      	subs	r3, r0, #0
 8004044:	d001      	beq.n	800404a <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 8004046:	f000 f91f 	bl	8004288 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800404a:	4b0a      	ldr	r3, [pc, #40]	@ (8004074 <MX_USART1_UART_Init+0x98>)
 800404c:	2100      	movs	r1, #0
 800404e:	0018      	movs	r0, r3
 8004050:	f008 fdd6 	bl	800cc00 <HAL_UARTEx_SetRxFifoThreshold>
 8004054:	1e03      	subs	r3, r0, #0
 8004056:	d001      	beq.n	800405c <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 8004058:	f000 f916 	bl	8004288 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800405c:	4b05      	ldr	r3, [pc, #20]	@ (8004074 <MX_USART1_UART_Init+0x98>)
 800405e:	0018      	movs	r0, r3
 8004060:	f008 fd54 	bl	800cb0c <HAL_UARTEx_DisableFifoMode>
 8004064:	1e03      	subs	r3, r0, #0
 8004066:	d001      	beq.n	800406c <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 8004068:	f000 f90e 	bl	8004288 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800406c:	46c0      	nop			@ (mov r8, r8)
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	46c0      	nop			@ (mov r8, r8)
 8004074:	2000050c 	.word	0x2000050c
 8004078:	40013800 	.word	0x40013800

0800407c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004082:	4b13      	ldr	r3, [pc, #76]	@ (80040d0 <MX_DMA_Init+0x54>)
 8004084:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004086:	4b12      	ldr	r3, [pc, #72]	@ (80040d0 <MX_DMA_Init+0x54>)
 8004088:	2101      	movs	r1, #1
 800408a:	430a      	orrs	r2, r1
 800408c:	639a      	str	r2, [r3, #56]	@ 0x38
 800408e:	4b10      	ldr	r3, [pc, #64]	@ (80040d0 <MX_DMA_Init+0x54>)
 8004090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004092:	2201      	movs	r2, #1
 8004094:	4013      	ands	r3, r2
 8004096:	607b      	str	r3, [r7, #4]
 8004098:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, 0);
 800409a:	2100      	movs	r1, #0
 800409c:	2009      	movs	r0, #9
 800409e:	f7fe fc95 	bl	80029cc <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80040a2:	2009      	movs	r0, #9
 80040a4:	f7fe fc78 	bl	8002998 <__NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80040a8:	2200      	movs	r2, #0
 80040aa:	2100      	movs	r1, #0
 80040ac:	200a      	movs	r0, #10
 80040ae:	f001 fe85 	bl	8005dbc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80040b2:	200a      	movs	r0, #10
 80040b4:	f001 fe97 	bl	8005de6 <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_DMA1_CH4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_DMA1_CH4_5_IRQn, 0, 0);
 80040b8:	2200      	movs	r2, #0
 80040ba:	2100      	movs	r1, #0
 80040bc:	200b      	movs	r0, #11
 80040be:	f001 fe7d 	bl	8005dbc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_DMA1_CH4_5_IRQn);
 80040c2:	200b      	movs	r0, #11
 80040c4:	f001 fe8f 	bl	8005de6 <HAL_NVIC_EnableIRQ>

}
 80040c8:	46c0      	nop			@ (mov r8, r8)
 80040ca:	46bd      	mov	sp, r7
 80040cc:	b002      	add	sp, #8
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	40021000 	.word	0x40021000

080040d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80040d4:	b590      	push	{r4, r7, lr}
 80040d6:	b08b      	sub	sp, #44	@ 0x2c
 80040d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040da:	2414      	movs	r4, #20
 80040dc:	193b      	adds	r3, r7, r4
 80040de:	0018      	movs	r0, r3
 80040e0:	2314      	movs	r3, #20
 80040e2:	001a      	movs	r2, r3
 80040e4:	2100      	movs	r1, #0
 80040e6:	f009 f86f 	bl	800d1c8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80040ea:	4b62      	ldr	r3, [pc, #392]	@ (8004274 <MX_GPIO_Init+0x1a0>)
 80040ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040ee:	4b61      	ldr	r3, [pc, #388]	@ (8004274 <MX_GPIO_Init+0x1a0>)
 80040f0:	2104      	movs	r1, #4
 80040f2:	430a      	orrs	r2, r1
 80040f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80040f6:	4b5f      	ldr	r3, [pc, #380]	@ (8004274 <MX_GPIO_Init+0x1a0>)
 80040f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040fa:	2204      	movs	r2, #4
 80040fc:	4013      	ands	r3, r2
 80040fe:	613b      	str	r3, [r7, #16]
 8004100:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004102:	4b5c      	ldr	r3, [pc, #368]	@ (8004274 <MX_GPIO_Init+0x1a0>)
 8004104:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004106:	4b5b      	ldr	r3, [pc, #364]	@ (8004274 <MX_GPIO_Init+0x1a0>)
 8004108:	2120      	movs	r1, #32
 800410a:	430a      	orrs	r2, r1
 800410c:	635a      	str	r2, [r3, #52]	@ 0x34
 800410e:	4b59      	ldr	r3, [pc, #356]	@ (8004274 <MX_GPIO_Init+0x1a0>)
 8004110:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004112:	2220      	movs	r2, #32
 8004114:	4013      	ands	r3, r2
 8004116:	60fb      	str	r3, [r7, #12]
 8004118:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800411a:	4b56      	ldr	r3, [pc, #344]	@ (8004274 <MX_GPIO_Init+0x1a0>)
 800411c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800411e:	4b55      	ldr	r3, [pc, #340]	@ (8004274 <MX_GPIO_Init+0x1a0>)
 8004120:	2101      	movs	r1, #1
 8004122:	430a      	orrs	r2, r1
 8004124:	635a      	str	r2, [r3, #52]	@ 0x34
 8004126:	4b53      	ldr	r3, [pc, #332]	@ (8004274 <MX_GPIO_Init+0x1a0>)
 8004128:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800412a:	2201      	movs	r2, #1
 800412c:	4013      	ands	r3, r2
 800412e:	60bb      	str	r3, [r7, #8]
 8004130:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004132:	4b50      	ldr	r3, [pc, #320]	@ (8004274 <MX_GPIO_Init+0x1a0>)
 8004134:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004136:	4b4f      	ldr	r3, [pc, #316]	@ (8004274 <MX_GPIO_Init+0x1a0>)
 8004138:	2102      	movs	r1, #2
 800413a:	430a      	orrs	r2, r1
 800413c:	635a      	str	r2, [r3, #52]	@ 0x34
 800413e:	4b4d      	ldr	r3, [pc, #308]	@ (8004274 <MX_GPIO_Init+0x1a0>)
 8004140:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004142:	2202      	movs	r2, #2
 8004144:	4013      	ands	r3, r2
 8004146:	607b      	str	r3, [r7, #4]
 8004148:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800414a:	4b4a      	ldr	r3, [pc, #296]	@ (8004274 <MX_GPIO_Init+0x1a0>)
 800414c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800414e:	4b49      	ldr	r3, [pc, #292]	@ (8004274 <MX_GPIO_Init+0x1a0>)
 8004150:	2108      	movs	r1, #8
 8004152:	430a      	orrs	r2, r1
 8004154:	635a      	str	r2, [r3, #52]	@ 0x34
 8004156:	4b47      	ldr	r3, [pc, #284]	@ (8004274 <MX_GPIO_Init+0x1a0>)
 8004158:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800415a:	2208      	movs	r2, #8
 800415c:	4013      	ands	r3, r2
 800415e:	603b      	str	r3, [r7, #0]
 8004160:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Actuator_C_EN_GPIO_Port, Actuator_C_EN_Pin, GPIO_PIN_RESET);
 8004162:	4b45      	ldr	r3, [pc, #276]	@ (8004278 <MX_GPIO_Init+0x1a4>)
 8004164:	2200      	movs	r2, #0
 8004166:	2101      	movs	r1, #1
 8004168:	0018      	movs	r0, r3
 800416a:	f002 fc8e 	bl	8006a8a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Actuator_A_EN_Pin|Actuator_B_EN_Pin, GPIO_PIN_RESET);
 800416e:	4b43      	ldr	r3, [pc, #268]	@ (800427c <MX_GPIO_Init+0x1a8>)
 8004170:	2200      	movs	r2, #0
 8004172:	21c0      	movs	r1, #192	@ 0xc0
 8004174:	0018      	movs	r0, r3
 8004176:	f002 fc88 	bl	8006a8a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_SET);
 800417a:	4b41      	ldr	r3, [pc, #260]	@ (8004280 <MX_GPIO_Init+0x1ac>)
 800417c:	2201      	movs	r2, #1
 800417e:	2101      	movs	r1, #1
 8004180:	0018      	movs	r0, r3
 8004182:	f002 fc82 	bl	8006a8a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Actuator_C_EN_Pin */
  GPIO_InitStruct.Pin = Actuator_C_EN_Pin;
 8004186:	193b      	adds	r3, r7, r4
 8004188:	2201      	movs	r2, #1
 800418a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800418c:	193b      	adds	r3, r7, r4
 800418e:	2201      	movs	r2, #1
 8004190:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004192:	193b      	adds	r3, r7, r4
 8004194:	2200      	movs	r2, #0
 8004196:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004198:	193b      	adds	r3, r7, r4
 800419a:	2200      	movs	r2, #0
 800419c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Actuator_C_EN_GPIO_Port, &GPIO_InitStruct);
 800419e:	193b      	adds	r3, r7, r4
 80041a0:	4a35      	ldr	r2, [pc, #212]	@ (8004278 <MX_GPIO_Init+0x1a4>)
 80041a2:	0019      	movs	r1, r3
 80041a4:	0010      	movs	r0, r2
 80041a6:	f002 fa09 	bl	80065bc <HAL_GPIO_Init>

  /*Configure GPIO pin : Encoder_Pulse_A_Pin */
  GPIO_InitStruct.Pin = Encoder_Pulse_A_Pin;
 80041aa:	0021      	movs	r1, r4
 80041ac:	187b      	adds	r3, r7, r1
 80041ae:	2280      	movs	r2, #128	@ 0x80
 80041b0:	0192      	lsls	r2, r2, #6
 80041b2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80041b4:	000c      	movs	r4, r1
 80041b6:	193b      	adds	r3, r7, r4
 80041b8:	4a32      	ldr	r2, [pc, #200]	@ (8004284 <MX_GPIO_Init+0x1b0>)
 80041ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041bc:	193b      	adds	r3, r7, r4
 80041be:	2200      	movs	r2, #0
 80041c0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Encoder_Pulse_A_GPIO_Port, &GPIO_InitStruct);
 80041c2:	193b      	adds	r3, r7, r4
 80041c4:	4a2c      	ldr	r2, [pc, #176]	@ (8004278 <MX_GPIO_Init+0x1a4>)
 80041c6:	0019      	movs	r1, r3
 80041c8:	0010      	movs	r0, r2
 80041ca:	f002 f9f7 	bl	80065bc <HAL_GPIO_Init>

  /*Configure GPIO pin : Encoder_Pulse_B_Pin */
  GPIO_InitStruct.Pin = Encoder_Pulse_B_Pin;
 80041ce:	0021      	movs	r1, r4
 80041d0:	187b      	adds	r3, r7, r1
 80041d2:	2280      	movs	r2, #128	@ 0x80
 80041d4:	01d2      	lsls	r2, r2, #7
 80041d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80041d8:	000c      	movs	r4, r1
 80041da:	193b      	adds	r3, r7, r4
 80041dc:	2200      	movs	r2, #0
 80041de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041e0:	193b      	adds	r3, r7, r4
 80041e2:	2200      	movs	r2, #0
 80041e4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Encoder_Pulse_B_GPIO_Port, &GPIO_InitStruct);
 80041e6:	193b      	adds	r3, r7, r4
 80041e8:	4a23      	ldr	r2, [pc, #140]	@ (8004278 <MX_GPIO_Init+0x1a4>)
 80041ea:	0019      	movs	r1, r3
 80041ec:	0010      	movs	r0, r2
 80041ee:	f002 f9e5 	bl	80065bc <HAL_GPIO_Init>

  /*Configure GPIO pins : Actuator_A_EN_Pin Actuator_B_EN_Pin */
  GPIO_InitStruct.Pin = Actuator_A_EN_Pin|Actuator_B_EN_Pin;
 80041f2:	193b      	adds	r3, r7, r4
 80041f4:	22c0      	movs	r2, #192	@ 0xc0
 80041f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041f8:	193b      	adds	r3, r7, r4
 80041fa:	2201      	movs	r2, #1
 80041fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041fe:	193b      	adds	r3, r7, r4
 8004200:	2200      	movs	r2, #0
 8004202:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004204:	193b      	adds	r3, r7, r4
 8004206:	2200      	movs	r2, #0
 8004208:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800420a:	193b      	adds	r3, r7, r4
 800420c:	4a1b      	ldr	r2, [pc, #108]	@ (800427c <MX_GPIO_Init+0x1a8>)
 800420e:	0019      	movs	r1, r3
 8004210:	0010      	movs	r0, r2
 8004212:	f002 f9d3 	bl	80065bc <HAL_GPIO_Init>

  /*Configure GPIO pin : Actuator_CS_Pin */
  GPIO_InitStruct.Pin = Actuator_CS_Pin;
 8004216:	193b      	adds	r3, r7, r4
 8004218:	2201      	movs	r2, #1
 800421a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800421c:	193b      	adds	r3, r7, r4
 800421e:	2201      	movs	r2, #1
 8004220:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004222:	193b      	adds	r3, r7, r4
 8004224:	2200      	movs	r2, #0
 8004226:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004228:	193b      	adds	r3, r7, r4
 800422a:	2203      	movs	r2, #3
 800422c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Actuator_CS_GPIO_Port, &GPIO_InitStruct);
 800422e:	193b      	adds	r3, r7, r4
 8004230:	4a13      	ldr	r2, [pc, #76]	@ (8004280 <MX_GPIO_Init+0x1ac>)
 8004232:	0019      	movs	r1, r3
 8004234:	0010      	movs	r0, r2
 8004236:	f002 f9c1 	bl	80065bc <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_Reset_Pin */
  GPIO_InitStruct.Pin = IMU_Reset_Pin;
 800423a:	0021      	movs	r1, r4
 800423c:	187b      	adds	r3, r7, r1
 800423e:	2202      	movs	r2, #2
 8004240:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004242:	187b      	adds	r3, r7, r1
 8004244:	2200      	movs	r2, #0
 8004246:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004248:	187b      	adds	r3, r7, r1
 800424a:	2200      	movs	r2, #0
 800424c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(IMU_Reset_GPIO_Port, &GPIO_InitStruct);
 800424e:	187b      	adds	r3, r7, r1
 8004250:	4a0b      	ldr	r2, [pc, #44]	@ (8004280 <MX_GPIO_Init+0x1ac>)
 8004252:	0019      	movs	r1, r3
 8004254:	0010      	movs	r0, r2
 8004256:	f002 f9b1 	bl	80065bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800425a:	2200      	movs	r2, #0
 800425c:	2100      	movs	r1, #0
 800425e:	2007      	movs	r0, #7
 8004260:	f001 fdac 	bl	8005dbc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8004264:	2007      	movs	r0, #7
 8004266:	f001 fdbe 	bl	8005de6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800426a:	46c0      	nop			@ (mov r8, r8)
 800426c:	46bd      	mov	sp, r7
 800426e:	b00b      	add	sp, #44	@ 0x2c
 8004270:	bd90      	pop	{r4, r7, pc}
 8004272:	46c0      	nop			@ (mov r8, r8)
 8004274:	40021000 	.word	0x40021000
 8004278:	50000400 	.word	0x50000400
 800427c:	50000800 	.word	0x50000800
 8004280:	50000c00 	.word	0x50000c00
 8004284:	10110000 	.word	0x10110000

08004288 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800428c:	b672      	cpsid	i
}
 800428e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004290:	46c0      	nop			@ (mov r8, r8)
 8004292:	e7fd      	b.n	8004290 <Error_Handler+0x8>

08004294 <HAL_UARTEx_RxEventCallback>:

/*
 * Modbus reception handler function
 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	000a      	movs	r2, r1
 800429e:	1cbb      	adds	r3, r7, #2
 80042a0:	801a      	strh	r2, [r3, #0]
	if(modbus_header)
 80042a2:	4b24      	ldr	r3, [pc, #144]	@ (8004334 <HAL_UARTEx_RxEventCallback+0xa0>)
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d026      	beq.n	80042fa <HAL_UARTEx_RxEventCallback+0x66>
	{
		// Log the time for chunk miss error handling
		chunk_time = HAL_GetTick();
 80042ac:	f001 fc8a 	bl	8005bc4 <HAL_GetTick>
 80042b0:	0002      	movs	r2, r0
 80042b2:	4b21      	ldr	r3, [pc, #132]	@ (8004338 <HAL_UARTEx_RxEventCallback+0xa4>)
 80042b4:	601a      	str	r2, [r3, #0]
		modbus_header = 0;
 80042b6:	4b1f      	ldr	r3, [pc, #124]	@ (8004334 <HAL_UARTEx_RxEventCallback+0xa0>)
 80042b8:	2200      	movs	r2, #0
 80042ba:	701a      	strb	r2, [r3, #0]

		// Setup the DMA to receive the # message bytes + crc + 1 in the event that the # bytes is in the message
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, &modbus_rx_buffer[6], (uint16_t)(((modbus_rx_buffer[4] << 8) | modbus_rx_buffer[5])*2 + 2 + 1));
 80042bc:	4b1f      	ldr	r3, [pc, #124]	@ (800433c <HAL_UARTEx_RxEventCallback+0xa8>)
 80042be:	791b      	ldrb	r3, [r3, #4]
 80042c0:	021b      	lsls	r3, r3, #8
 80042c2:	4a1e      	ldr	r2, [pc, #120]	@ (800433c <HAL_UARTEx_RxEventCallback+0xa8>)
 80042c4:	7952      	ldrb	r2, [r2, #5]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	3301      	adds	r3, #1
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	18db      	adds	r3, r3, r3
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	3301      	adds	r3, #1
 80042d4:	b29a      	uxth	r2, r3
 80042d6:	491a      	ldr	r1, [pc, #104]	@ (8004340 <HAL_UARTEx_RxEventCallback+0xac>)
 80042d8:	4b1a      	ldr	r3, [pc, #104]	@ (8004344 <HAL_UARTEx_RxEventCallback+0xb0>)
 80042da:	0018      	movs	r0, r3
 80042dc:	f008 fcd2 	bl	800cc84 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(huart1.hdmarx, DMA_IT_HT);
 80042e0:	4b18      	ldr	r3, [pc, #96]	@ (8004344 <HAL_UARTEx_RxEventCallback+0xb0>)
 80042e2:	2280      	movs	r2, #128	@ 0x80
 80042e4:	589b      	ldr	r3, [r3, r2]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	4b16      	ldr	r3, [pc, #88]	@ (8004344 <HAL_UARTEx_RxEventCallback+0xb0>)
 80042ec:	2180      	movs	r1, #128	@ 0x80
 80042ee:	585b      	ldr	r3, [r3, r1]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2104      	movs	r1, #4
 80042f4:	438a      	bics	r2, r1
 80042f6:	601a      	str	r2, [r3, #0]
#ifdef MB_SLAVE
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, modbus_rx_buffer, 6);
		__HAL_DMA_DISABLE_IT(huart1.hdmarx, DMA_IT_HT);
#endif
	}
}
 80042f8:	e017      	b.n	800432a <HAL_UARTEx_RxEventCallback+0x96>
		modbus_header = 1;
 80042fa:	4b0e      	ldr	r3, [pc, #56]	@ (8004334 <HAL_UARTEx_RxEventCallback+0xa0>)
 80042fc:	2201      	movs	r2, #1
 80042fe:	701a      	strb	r2, [r3, #0]
		uart_rx_int = 1;
 8004300:	4b11      	ldr	r3, [pc, #68]	@ (8004348 <HAL_UARTEx_RxEventCallback+0xb4>)
 8004302:	2201      	movs	r2, #1
 8004304:	701a      	strb	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, modbus_rx_buffer, 6);
 8004306:	490d      	ldr	r1, [pc, #52]	@ (800433c <HAL_UARTEx_RxEventCallback+0xa8>)
 8004308:	4b0e      	ldr	r3, [pc, #56]	@ (8004344 <HAL_UARTEx_RxEventCallback+0xb0>)
 800430a:	2206      	movs	r2, #6
 800430c:	0018      	movs	r0, r3
 800430e:	f008 fcb9 	bl	800cc84 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(huart1.hdmarx, DMA_IT_HT);
 8004312:	4b0c      	ldr	r3, [pc, #48]	@ (8004344 <HAL_UARTEx_RxEventCallback+0xb0>)
 8004314:	2280      	movs	r2, #128	@ 0x80
 8004316:	589b      	ldr	r3, [r3, r2]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	4b09      	ldr	r3, [pc, #36]	@ (8004344 <HAL_UARTEx_RxEventCallback+0xb0>)
 800431e:	2180      	movs	r1, #128	@ 0x80
 8004320:	585b      	ldr	r3, [r3, r1]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2104      	movs	r1, #4
 8004326:	438a      	bics	r2, r1
 8004328:	601a      	str	r2, [r3, #0]
}
 800432a:	46c0      	nop			@ (mov r8, r8)
 800432c:	46bd      	mov	sp, r7
 800432e:	b002      	add	sp, #8
 8004330:	bd80      	pop	{r7, pc}
 8004332:	46c0      	nop			@ (mov r8, r8)
 8004334:	200000b4 	.word	0x200000b4
 8004338:	200008ac 	.word	0x200008ac
 800433c:	200006a8 	.word	0x200006a8
 8004340:	200006ae 	.word	0x200006ae
 8004344:	2000050c 	.word	0x2000050c
 8004348:	200008b0 	.word	0x200008b0

0800434c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
	uart_tx_int = 1;
 8004354:	4b03      	ldr	r3, [pc, #12]	@ (8004364 <HAL_UART_TxCpltCallback+0x18>)
 8004356:	2201      	movs	r2, #1
 8004358:	701a      	strb	r2, [r3, #0]
}
 800435a:	46c0      	nop			@ (mov r8, r8)
 800435c:	46bd      	mov	sp, r7
 800435e:	b002      	add	sp, #8
 8004360:	bd80      	pop	{r7, pc}
 8004362:	46c0      	nop			@ (mov r8, r8)
 8004364:	200000b5 	.word	0x200000b5

08004368 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
	uart_err_int = 1;
 8004370:	4b07      	ldr	r3, [pc, #28]	@ (8004390 <HAL_UART_ErrorCallback+0x28>)
 8004372:	2201      	movs	r2, #1
 8004374:	701a      	strb	r2, [r3, #0]
	__HAL_UART_DISABLE_IT(&huart1, UART_IT_MASK);
 8004376:	4b07      	ldr	r3, [pc, #28]	@ (8004394 <HAL_UART_ErrorCallback+0x2c>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	689a      	ldr	r2, [r3, #8]
 800437c:	4b05      	ldr	r3, [pc, #20]	@ (8004394 <HAL_UART_ErrorCallback+0x2c>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	0052      	lsls	r2, r2, #1
 8004382:	0852      	lsrs	r2, r2, #1
 8004384:	609a      	str	r2, [r3, #8]
}
 8004386:	46c0      	nop			@ (mov r8, r8)
 8004388:	46bd      	mov	sp, r7
 800438a:	b002      	add	sp, #8
 800438c:	bd80      	pop	{r7, pc}
 800438e:	46c0      	nop			@ (mov r8, r8)
 8004390:	200008b1 	.word	0x200008b1
 8004394:	2000050c 	.word	0x2000050c

08004398 <modbus_rx>:

// Modbus Slave Functions ---------------------------------------------------------------------

#ifdef MB_SLAVE
uint8_t modbus_rx()
{
 8004398:	b580      	push	{r7, lr}
 800439a:	af00      	add	r7, sp, #0
	if(uart_rx_int)
 800439c:	4b06      	ldr	r3, [pc, #24]	@ (80043b8 <modbus_rx+0x20>)
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d004      	beq.n	80043b0 <modbus_rx+0x18>
	{
		uart_rx_int = 0;
 80043a6:	4b04      	ldr	r3, [pc, #16]	@ (80043b8 <modbus_rx+0x20>)
 80043a8:	2200      	movs	r2, #0
 80043aa:	701a      	strb	r2, [r3, #0]
		return 1;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e000      	b.n	80043b2 <modbus_rx+0x1a>
	}
	return 0;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	0018      	movs	r0, r3
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	200008b0 	.word	0x200008b0

080043bc <return_holding_registers>:

int8_t return_holding_registers(uint8_t* tx_len)
{
 80043bc:	b5b0      	push	{r4, r5, r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
	(*tx_len) = 0;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	701a      	strb	r2, [r3, #0]

	// Handle Error Checking
	uint16_t first_register_address = (get_rx_buffer(2) << 8) | get_rx_buffer(3);
 80043ca:	2002      	movs	r0, #2
 80043cc:	f000 fc8a 	bl	8004ce4 <get_rx_buffer>
 80043d0:	0003      	movs	r3, r0
 80043d2:	021b      	lsls	r3, r3, #8
 80043d4:	b21c      	sxth	r4, r3
 80043d6:	2003      	movs	r0, #3
 80043d8:	f000 fc84 	bl	8004ce4 <get_rx_buffer>
 80043dc:	0003      	movs	r3, r0
 80043de:	b21b      	sxth	r3, r3
 80043e0:	4323      	orrs	r3, r4
 80043e2:	b21a      	sxth	r2, r3
 80043e4:	230c      	movs	r3, #12
 80043e6:	18fb      	adds	r3, r7, r3
 80043e8:	801a      	strh	r2, [r3, #0]

	// Get the number of registers requested by the master
	uint16_t num_registers = (get_rx_buffer(4) << 8) | get_rx_buffer(5);
 80043ea:	2004      	movs	r0, #4
 80043ec:	f000 fc7a 	bl	8004ce4 <get_rx_buffer>
 80043f0:	0003      	movs	r3, r0
 80043f2:	021b      	lsls	r3, r3, #8
 80043f4:	b21c      	sxth	r4, r3
 80043f6:	2005      	movs	r0, #5
 80043f8:	f000 fc74 	bl	8004ce4 <get_rx_buffer>
 80043fc:	0003      	movs	r3, r0
 80043fe:	b21b      	sxth	r3, r3
 8004400:	4323      	orrs	r3, r4
 8004402:	b21a      	sxth	r2, r3
 8004404:	210a      	movs	r1, #10
 8004406:	187b      	adds	r3, r7, r1
 8004408:	801a      	strh	r2, [r3, #0]

	if(num_registers > RX_BUFFER_SIZE || num_registers < 1) // 125 is the limit according to modbus protocol
 800440a:	000a      	movs	r2, r1
 800440c:	18bb      	adds	r3, r7, r2
 800440e:	881b      	ldrh	r3, [r3, #0]
 8004410:	2b7d      	cmp	r3, #125	@ 0x7d
 8004412:	d803      	bhi.n	800441c <return_holding_registers+0x60>
 8004414:	18bb      	adds	r3, r7, r2
 8004416:	881b      	ldrh	r3, [r3, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d104      	bne.n	8004426 <return_holding_registers+0x6a>
	{
		return modbus_exception(MB_ILLEGAL_DATA_VALUE);
 800441c:	2006      	movs	r0, #6
 800441e:	f000 f97b 	bl	8004718 <modbus_exception>
 8004422:	0003      	movs	r3, r0
 8004424:	e06e      	b.n	8004504 <return_holding_registers+0x148>
	}

	uint16_t last_register_address = first_register_address + (num_registers - 1);
 8004426:	230a      	movs	r3, #10
 8004428:	18fa      	adds	r2, r7, r3
 800442a:	230c      	movs	r3, #12
 800442c:	18fb      	adds	r3, r7, r3
 800442e:	8812      	ldrh	r2, [r2, #0]
 8004430:	881b      	ldrh	r3, [r3, #0]
 8004432:	18d3      	adds	r3, r2, r3
 8004434:	b29a      	uxth	r2, r3
 8004436:	2108      	movs	r1, #8
 8004438:	187b      	adds	r3, r7, r1
 800443a:	3a01      	subs	r2, #1
 800443c:	801a      	strh	r2, [r3, #0]

	if(last_register_address > NUM_HOLDING_REGISTERS)
 800443e:	187b      	adds	r3, r7, r1
 8004440:	881b      	ldrh	r3, [r3, #0]
 8004442:	2b50      	cmp	r3, #80	@ 0x50
 8004444:	d904      	bls.n	8004450 <return_holding_registers+0x94>
	{
		return modbus_exception(MB_ILLEGAL_DATA_ADDRESS);
 8004446:	2005      	movs	r0, #5
 8004448:	f000 f966 	bl	8004718 <modbus_exception>
 800444c:	0003      	movs	r3, r0
 800444e:	e059      	b.n	8004504 <return_holding_registers+0x148>
	}

	// Return register values
	modbus_tx_buffer[0] = get_rx_buffer(0); // Append Slave id
 8004450:	2000      	movs	r0, #0
 8004452:	f000 fc47 	bl	8004ce4 <get_rx_buffer>
 8004456:	0003      	movs	r3, r0
 8004458:	001a      	movs	r2, r3
 800445a:	4b2c      	ldr	r3, [pc, #176]	@ (800450c <return_holding_registers+0x150>)
 800445c:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = get_rx_buffer(1); // Append Function Code
 800445e:	2001      	movs	r0, #1
 8004460:	f000 fc40 	bl	8004ce4 <get_rx_buffer>
 8004464:	0003      	movs	r3, r0
 8004466:	001a      	movs	r2, r3
 8004468:	4b28      	ldr	r3, [pc, #160]	@ (800450c <return_holding_registers+0x150>)
 800446a:	705a      	strb	r2, [r3, #1]
	modbus_tx_buffer[2] = num_registers * 2; // Append number of bytes
 800446c:	230a      	movs	r3, #10
 800446e:	18fb      	adds	r3, r7, r3
 8004470:	881b      	ldrh	r3, [r3, #0]
 8004472:	b2db      	uxtb	r3, r3
 8004474:	18db      	adds	r3, r3, r3
 8004476:	b2da      	uxtb	r2, r3
 8004478:	4b24      	ldr	r3, [pc, #144]	@ (800450c <return_holding_registers+0x150>)
 800447a:	709a      	strb	r2, [r3, #2]
	(*tx_len) = 3;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2203      	movs	r2, #3
 8004480:	701a      	strb	r2, [r3, #0]

	// Append the Register Values
	for(uint8_t i = 0; i < num_registers; i++)
 8004482:	230f      	movs	r3, #15
 8004484:	18fb      	adds	r3, r7, r3
 8004486:	2200      	movs	r2, #0
 8004488:	701a      	strb	r2, [r3, #0]
 800448a:	e02c      	b.n	80044e6 <return_holding_registers+0x12a>
	{
		modbus_tx_buffer[(*tx_len)++] = high_byte(holding_register_database[first_register_address + i]);
 800448c:	250c      	movs	r5, #12
 800448e:	197b      	adds	r3, r7, r5
 8004490:	881a      	ldrh	r2, [r3, #0]
 8004492:	240f      	movs	r4, #15
 8004494:	193b      	adds	r3, r7, r4
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	18d2      	adds	r2, r2, r3
 800449a:	4b1d      	ldr	r3, [pc, #116]	@ (8004510 <return_holding_registers+0x154>)
 800449c:	0052      	lsls	r2, r2, #1
 800449e:	5ad3      	ldrh	r3, [r2, r3]
 80044a0:	0a1b      	lsrs	r3, r3, #8
 80044a2:	b299      	uxth	r1, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	1c5a      	adds	r2, r3, #1
 80044aa:	b2d0      	uxtb	r0, r2
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	7010      	strb	r0, [r2, #0]
 80044b0:	001a      	movs	r2, r3
 80044b2:	b2c9      	uxtb	r1, r1
 80044b4:	4b15      	ldr	r3, [pc, #84]	@ (800450c <return_holding_registers+0x150>)
 80044b6:	5499      	strb	r1, [r3, r2]
		modbus_tx_buffer[(*tx_len)++] = low_byte(holding_register_database[first_register_address + i]);
 80044b8:	197b      	adds	r3, r7, r5
 80044ba:	881a      	ldrh	r2, [r3, #0]
 80044bc:	193b      	adds	r3, r7, r4
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	18d2      	adds	r2, r2, r3
 80044c2:	4b13      	ldr	r3, [pc, #76]	@ (8004510 <return_holding_registers+0x154>)
 80044c4:	0052      	lsls	r2, r2, #1
 80044c6:	5ad1      	ldrh	r1, [r2, r3]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	1c5a      	adds	r2, r3, #1
 80044ce:	b2d0      	uxtb	r0, r2
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	7010      	strb	r0, [r2, #0]
 80044d4:	001a      	movs	r2, r3
 80044d6:	b2c9      	uxtb	r1, r1
 80044d8:	4b0c      	ldr	r3, [pc, #48]	@ (800450c <return_holding_registers+0x150>)
 80044da:	5499      	strb	r1, [r3, r2]
	for(uint8_t i = 0; i < num_registers; i++)
 80044dc:	193b      	adds	r3, r7, r4
 80044de:	781a      	ldrb	r2, [r3, #0]
 80044e0:	193b      	adds	r3, r7, r4
 80044e2:	3201      	adds	r2, #1
 80044e4:	701a      	strb	r2, [r3, #0]
 80044e6:	230f      	movs	r3, #15
 80044e8:	18fb      	adds	r3, r7, r3
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	220a      	movs	r2, #10
 80044f0:	18ba      	adds	r2, r7, r2
 80044f2:	8812      	ldrh	r2, [r2, #0]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d8c9      	bhi.n	800448c <return_holding_registers+0xd0>
	}
	return modbus_send((*tx_len));
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	0018      	movs	r0, r3
 80044fe:	f000 fa19 	bl	8004934 <modbus_send>
 8004502:	0003      	movs	r3, r0
}
 8004504:	0018      	movs	r0, r3
 8004506:	46bd      	mov	sp, r7
 8004508:	b004      	add	sp, #16
 800450a:	bdb0      	pop	{r4, r5, r7, pc}
 800450c:	200007a8 	.word	0x200007a8
 8004510:	20000014 	.word	0x20000014

08004514 <edit_multiple_registers>:

int8_t edit_multiple_registers(uint8_t *tx_len)
{
 8004514:	b5b0      	push	{r4, r5, r7, lr}
 8004516:	b086      	sub	sp, #24
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
	(*tx_len) = 0;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	701a      	strb	r2, [r3, #0]

	// Handle Error Checking
	uint16_t first_register_address = (get_rx_buffer(2) << 8) | get_rx_buffer(3);
 8004522:	2002      	movs	r0, #2
 8004524:	f000 fbde 	bl	8004ce4 <get_rx_buffer>
 8004528:	0003      	movs	r3, r0
 800452a:	021b      	lsls	r3, r3, #8
 800452c:	b21c      	sxth	r4, r3
 800452e:	2003      	movs	r0, #3
 8004530:	f000 fbd8 	bl	8004ce4 <get_rx_buffer>
 8004534:	0003      	movs	r3, r0
 8004536:	b21b      	sxth	r3, r3
 8004538:	4323      	orrs	r3, r4
 800453a:	b21a      	sxth	r2, r3
 800453c:	2314      	movs	r3, #20
 800453e:	18fb      	adds	r3, r7, r3
 8004540:	801a      	strh	r2, [r3, #0]

	uint16_t num_registers = (get_rx_buffer(4) << 8) | get_rx_buffer(5);
 8004542:	2004      	movs	r0, #4
 8004544:	f000 fbce 	bl	8004ce4 <get_rx_buffer>
 8004548:	0003      	movs	r3, r0
 800454a:	021b      	lsls	r3, r3, #8
 800454c:	b21c      	sxth	r4, r3
 800454e:	2005      	movs	r0, #5
 8004550:	f000 fbc8 	bl	8004ce4 <get_rx_buffer>
 8004554:	0003      	movs	r3, r0
 8004556:	b21b      	sxth	r3, r3
 8004558:	4323      	orrs	r3, r4
 800455a:	b21a      	sxth	r2, r3
 800455c:	2112      	movs	r1, #18
 800455e:	187b      	adds	r3, r7, r1
 8004560:	801a      	strh	r2, [r3, #0]

	if(num_registers > 125 || num_registers < 1) // 125 is the limit according to modbus protocol
 8004562:	000a      	movs	r2, r1
 8004564:	18bb      	adds	r3, r7, r2
 8004566:	881b      	ldrh	r3, [r3, #0]
 8004568:	2b7d      	cmp	r3, #125	@ 0x7d
 800456a:	d803      	bhi.n	8004574 <edit_multiple_registers+0x60>
 800456c:	18bb      	adds	r3, r7, r2
 800456e:	881b      	ldrh	r3, [r3, #0]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d104      	bne.n	800457e <edit_multiple_registers+0x6a>
	{
		return modbus_exception(MB_ILLEGAL_DATA_VALUE);
 8004574:	2006      	movs	r0, #6
 8004576:	f000 f8cf 	bl	8004718 <modbus_exception>
 800457a:	0003      	movs	r3, r0
 800457c:	e0c3      	b.n	8004706 <edit_multiple_registers+0x1f2>
	}

	uint16_t last_register_address = first_register_address + (num_registers - 1);
 800457e:	2312      	movs	r3, #18
 8004580:	18fa      	adds	r2, r7, r3
 8004582:	2314      	movs	r3, #20
 8004584:	18fb      	adds	r3, r7, r3
 8004586:	8812      	ldrh	r2, [r2, #0]
 8004588:	881b      	ldrh	r3, [r3, #0]
 800458a:	18d3      	adds	r3, r2, r3
 800458c:	b29a      	uxth	r2, r3
 800458e:	2110      	movs	r1, #16
 8004590:	187b      	adds	r3, r7, r1
 8004592:	3a01      	subs	r2, #1
 8004594:	801a      	strh	r2, [r3, #0]

	if(last_register_address > NUM_HOLDING_REGISTERS)
 8004596:	187b      	adds	r3, r7, r1
 8004598:	881b      	ldrh	r3, [r3, #0]
 800459a:	2b50      	cmp	r3, #80	@ 0x50
 800459c:	d904      	bls.n	80045a8 <edit_multiple_registers+0x94>
	{
		return modbus_exception(MB_ILLEGAL_DATA_ADDRESS);
 800459e:	2005      	movs	r0, #5
 80045a0:	f000 f8ba 	bl	8004718 <modbus_exception>
 80045a4:	0003      	movs	r3, r0
 80045a6:	e0ae      	b.n	8004706 <edit_multiple_registers+0x1f2>
	}

	// Protect Read only values
	if(((first_register_address >= ADC_0) && (first_register_address <= ENCODER_SPEED)) ||
 80045a8:	2214      	movs	r2, #20
 80045aa:	18bb      	adds	r3, r7, r2
 80045ac:	881b      	ldrh	r3, [r3, #0]
 80045ae:	2b08      	cmp	r3, #8
 80045b0:	d903      	bls.n	80045ba <edit_multiple_registers+0xa6>
 80045b2:	18bb      	adds	r3, r7, r2
 80045b4:	881b      	ldrh	r3, [r3, #0]
 80045b6:	2b3e      	cmp	r3, #62	@ 0x3e
 80045b8:	d912      	bls.n	80045e0 <edit_multiple_registers+0xcc>
 80045ba:	2210      	movs	r2, #16
 80045bc:	18bb      	adds	r3, r7, r2
 80045be:	881b      	ldrh	r3, [r3, #0]
 80045c0:	2b08      	cmp	r3, #8
 80045c2:	d903      	bls.n	80045cc <edit_multiple_registers+0xb8>
		 ((last_register_address >= ADC_0) && (last_register_address <= ENCODER_SPEED)) ||
 80045c4:	18bb      	adds	r3, r7, r2
 80045c6:	881b      	ldrh	r3, [r3, #0]
 80045c8:	2b3e      	cmp	r3, #62	@ 0x3e
 80045ca:	d909      	bls.n	80045e0 <edit_multiple_registers+0xcc>
 80045cc:	2314      	movs	r3, #20
 80045ce:	18fb      	adds	r3, r7, r3
 80045d0:	881b      	ldrh	r3, [r3, #0]
 80045d2:	2b08      	cmp	r3, #8
 80045d4:	d809      	bhi.n	80045ea <edit_multiple_registers+0xd6>
		 ((first_register_address < ADC_0) && (last_register_address > ENCODER_SPEED)))
 80045d6:	2310      	movs	r3, #16
 80045d8:	18fb      	adds	r3, r7, r3
 80045da:	881b      	ldrh	r3, [r3, #0]
 80045dc:	2b3e      	cmp	r3, #62	@ 0x3e
 80045de:	d904      	bls.n	80045ea <edit_multiple_registers+0xd6>
	{
		// Ensure that sensor values are restricted to read-only
		return modbus_exception(MB_ILLEGAL_FUNCTION);
 80045e0:	2004      	movs	r0, #4
 80045e2:	f000 f899 	bl	8004718 <modbus_exception>
 80045e6:	0003      	movs	r3, r0
 80045e8:	e08d      	b.n	8004706 <edit_multiple_registers+0x1f2>
	}

	// Edit holding registers
	modbus_tx_buffer[0] = get_rx_buffer(0); // Append Slave id
 80045ea:	2000      	movs	r0, #0
 80045ec:	f000 fb7a 	bl	8004ce4 <get_rx_buffer>
 80045f0:	0003      	movs	r3, r0
 80045f2:	001a      	movs	r2, r3
 80045f4:	4b46      	ldr	r3, [pc, #280]	@ (8004710 <edit_multiple_registers+0x1fc>)
 80045f6:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = get_rx_buffer(1); // Append Function Code
 80045f8:	2001      	movs	r0, #1
 80045fa:	f000 fb73 	bl	8004ce4 <get_rx_buffer>
 80045fe:	0003      	movs	r3, r0
 8004600:	001a      	movs	r2, r3
 8004602:	4b43      	ldr	r3, [pc, #268]	@ (8004710 <edit_multiple_registers+0x1fc>)
 8004604:	705a      	strb	r2, [r3, #1]
	// Append the Write Address (high byte then low byte)
	modbus_tx_buffer[2] = get_rx_buffer(2);
 8004606:	2002      	movs	r0, #2
 8004608:	f000 fb6c 	bl	8004ce4 <get_rx_buffer>
 800460c:	0003      	movs	r3, r0
 800460e:	001a      	movs	r2, r3
 8004610:	4b3f      	ldr	r3, [pc, #252]	@ (8004710 <edit_multiple_registers+0x1fc>)
 8004612:	709a      	strb	r2, [r3, #2]
	modbus_tx_buffer[3] = get_rx_buffer(3);
 8004614:	2003      	movs	r0, #3
 8004616:	f000 fb65 	bl	8004ce4 <get_rx_buffer>
 800461a:	0003      	movs	r3, r0
 800461c:	001a      	movs	r2, r3
 800461e:	4b3c      	ldr	r3, [pc, #240]	@ (8004710 <edit_multiple_registers+0x1fc>)
 8004620:	70da      	strb	r2, [r3, #3]
	// Append the quantity of registers to be written (high byte then low byte)
	modbus_tx_buffer[4] = get_rx_buffer(4);
 8004622:	2004      	movs	r0, #4
 8004624:	f000 fb5e 	bl	8004ce4 <get_rx_buffer>
 8004628:	0003      	movs	r3, r0
 800462a:	001a      	movs	r2, r3
 800462c:	4b38      	ldr	r3, [pc, #224]	@ (8004710 <edit_multiple_registers+0x1fc>)
 800462e:	711a      	strb	r2, [r3, #4]
	modbus_tx_buffer[5] = get_rx_buffer(5);
 8004630:	2005      	movs	r0, #5
 8004632:	f000 fb57 	bl	8004ce4 <get_rx_buffer>
 8004636:	0003      	movs	r3, r0
 8004638:	001a      	movs	r2, r3
 800463a:	4b35      	ldr	r3, [pc, #212]	@ (8004710 <edit_multiple_registers+0x1fc>)
 800463c:	715a      	strb	r2, [r3, #5]
	(*tx_len) = 6;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2206      	movs	r2, #6
 8004642:	701a      	strb	r2, [r3, #0]

	for(uint8_t i = 0; i < num_registers; i++)
 8004644:	2317      	movs	r3, #23
 8004646:	18fb      	adds	r3, r7, r3
 8004648:	2200      	movs	r2, #0
 800464a:	701a      	strb	r2, [r3, #0]
 800464c:	e032      	b.n	80046b4 <edit_multiple_registers+0x1a0>
	{
		holding_register_database[first_register_address + i] = (get_rx_buffer(2 * i + 7) << 8) | get_rx_buffer(2 * i + 8);
 800464e:	2517      	movs	r5, #23
 8004650:	197b      	adds	r3, r7, r5
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	18db      	adds	r3, r3, r3
 8004656:	b2db      	uxtb	r3, r3
 8004658:	3307      	adds	r3, #7
 800465a:	b2db      	uxtb	r3, r3
 800465c:	0018      	movs	r0, r3
 800465e:	f000 fb41 	bl	8004ce4 <get_rx_buffer>
 8004662:	0003      	movs	r3, r0
 8004664:	021b      	lsls	r3, r3, #8
 8004666:	b21c      	sxth	r4, r3
 8004668:	197b      	adds	r3, r7, r5
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	3304      	adds	r3, #4
 800466e:	b2db      	uxtb	r3, r3
 8004670:	18db      	adds	r3, r3, r3
 8004672:	b2db      	uxtb	r3, r3
 8004674:	0018      	movs	r0, r3
 8004676:	f000 fb35 	bl	8004ce4 <get_rx_buffer>
 800467a:	0003      	movs	r3, r0
 800467c:	b21b      	sxth	r3, r3
 800467e:	4323      	orrs	r3, r4
 8004680:	b219      	sxth	r1, r3
 8004682:	2014      	movs	r0, #20
 8004684:	183b      	adds	r3, r7, r0
 8004686:	881a      	ldrh	r2, [r3, #0]
 8004688:	197b      	adds	r3, r7, r5
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	18d2      	adds	r2, r2, r3
 800468e:	b289      	uxth	r1, r1
 8004690:	4b20      	ldr	r3, [pc, #128]	@ (8004714 <edit_multiple_registers+0x200>)
 8004692:	0052      	lsls	r2, r2, #1
 8004694:	52d1      	strh	r1, [r2, r3]

		// Handle the range boundaries of each writable register
		handle_range(first_register_address + i);
 8004696:	197b      	adds	r3, r7, r5
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	b29a      	uxth	r2, r3
 800469c:	183b      	adds	r3, r7, r0
 800469e:	881b      	ldrh	r3, [r3, #0]
 80046a0:	18d3      	adds	r3, r2, r3
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	0018      	movs	r0, r3
 80046a6:	f000 f85f 	bl	8004768 <handle_range>
	for(uint8_t i = 0; i < num_registers; i++)
 80046aa:	197b      	adds	r3, r7, r5
 80046ac:	781a      	ldrb	r2, [r3, #0]
 80046ae:	197b      	adds	r3, r7, r5
 80046b0:	3201      	adds	r2, #1
 80046b2:	701a      	strb	r2, [r3, #0]
 80046b4:	2317      	movs	r3, #23
 80046b6:	18fb      	adds	r3, r7, r3
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	2212      	movs	r2, #18
 80046be:	18ba      	adds	r2, r7, r2
 80046c0:	8812      	ldrh	r2, [r2, #0]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d8c3      	bhi.n	800464e <edit_multiple_registers+0x13a>

	// TIMING WORKAROUND START
//	HAL_Delay(1);
	// TIMING WORKAROUND END

	int8_t status = modbus_send((*tx_len));
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	250f      	movs	r5, #15
 80046cc:	197c      	adds	r4, r7, r5
 80046ce:	0018      	movs	r0, r3
 80046d0:	f000 f930 	bl	8004934 <modbus_send>
 80046d4:	0003      	movs	r3, r0
 80046d6:	7023      	strb	r3, [r4, #0]

	if(status == MB_SUCCESS)
 80046d8:	197b      	adds	r3, r7, r5
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	b25b      	sxtb	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d10d      	bne.n	80046fe <edit_multiple_registers+0x1ea>
	{
		// Special Case Modbus Baud Rate Modification
		if((first_register_address <= 1) && last_register_address >= 1)
 80046e2:	2314      	movs	r3, #20
 80046e4:	18fb      	adds	r3, r7, r3
 80046e6:	881b      	ldrh	r3, [r3, #0]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d808      	bhi.n	80046fe <edit_multiple_registers+0x1ea>
 80046ec:	2310      	movs	r3, #16
 80046ee:	18fb      	adds	r3, r7, r3
 80046f0:	881b      	ldrh	r3, [r3, #0]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d003      	beq.n	80046fe <edit_multiple_registers+0x1ea>
		{
			return modbus_change_baud_rate();
 80046f6:	f000 fa69 	bl	8004bcc <modbus_change_baud_rate>
 80046fa:	0003      	movs	r3, r0
 80046fc:	e003      	b.n	8004706 <edit_multiple_registers+0x1f2>
		}
	}
	return status;
 80046fe:	230f      	movs	r3, #15
 8004700:	18fb      	adds	r3, r7, r3
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	b25b      	sxtb	r3, r3
}
 8004706:	0018      	movs	r0, r3
 8004708:	46bd      	mov	sp, r7
 800470a:	b006      	add	sp, #24
 800470c:	bdb0      	pop	{r4, r5, r7, pc}
 800470e:	46c0      	nop			@ (mov r8, r8)
 8004710:	200007a8 	.word	0x200007a8
 8004714:	20000014 	.word	0x20000014

08004718 <modbus_exception>:

int8_t modbus_exception(int8_t exception_code)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	0002      	movs	r2, r0
 8004720:	1dfb      	adds	r3, r7, #7
 8004722:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[0] = get_rx_buffer(0);
 8004724:	2000      	movs	r0, #0
 8004726:	f000 fadd 	bl	8004ce4 <get_rx_buffer>
 800472a:	0003      	movs	r3, r0
 800472c:	001a      	movs	r2, r3
 800472e:	4b0d      	ldr	r3, [pc, #52]	@ (8004764 <modbus_exception+0x4c>)
 8004730:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = get_rx_buffer(1) | 0x80;
 8004732:	2001      	movs	r0, #1
 8004734:	f000 fad6 	bl	8004ce4 <get_rx_buffer>
 8004738:	0003      	movs	r3, r0
 800473a:	001a      	movs	r2, r3
 800473c:	2380      	movs	r3, #128	@ 0x80
 800473e:	425b      	negs	r3, r3
 8004740:	4313      	orrs	r3, r2
 8004742:	b2da      	uxtb	r2, r3
 8004744:	4b07      	ldr	r3, [pc, #28]	@ (8004764 <modbus_exception+0x4c>)
 8004746:	705a      	strb	r2, [r3, #1]
	modbus_tx_buffer[2] = exception_code - 3; // Subtract 3 to match the modbus defined error code value
 8004748:	1dfb      	adds	r3, r7, #7
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	3b03      	subs	r3, #3
 800474e:	b2da      	uxtb	r2, r3
 8004750:	4b04      	ldr	r3, [pc, #16]	@ (8004764 <modbus_exception+0x4c>)
 8004752:	709a      	strb	r2, [r3, #2]

	return modbus_send(3);
 8004754:	2003      	movs	r0, #3
 8004756:	f000 f8ed 	bl	8004934 <modbus_send>
 800475a:	0003      	movs	r3, r0
}
 800475c:	0018      	movs	r0, r3
 800475e:	46bd      	mov	sp, r7
 8004760:	b002      	add	sp, #8
 8004762:	bd80      	pop	{r7, pc}
 8004764:	200007a8 	.word	0x200007a8

08004768 <handle_range>:

void handle_range(uint16_t holding_register)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
 800476e:	0002      	movs	r2, r0
 8004770:	1dbb      	adds	r3, r7, #6
 8004772:	801a      	strh	r2, [r3, #0]
	switch(holding_register)
 8004774:	1dbb      	adds	r3, r7, #6
 8004776:	881b      	ldrh	r3, [r3, #0]
 8004778:	2b42      	cmp	r3, #66	@ 0x42
 800477a:	d900      	bls.n	800477e <handle_range+0x16>
 800477c:	e0cc      	b.n	8004918 <handle_range+0x1b0>
 800477e:	009a      	lsls	r2, r3, #2
 8004780:	4b67      	ldr	r3, [pc, #412]	@ (8004920 <handle_range+0x1b8>)
 8004782:	18d3      	adds	r3, r2, r3
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	469f      	mov	pc, r3
	{
		case MODBUS_ID:
		{
			if(holding_register_database[holding_register] > 0xFF)
 8004788:	1dbb      	adds	r3, r7, #6
 800478a:	881a      	ldrh	r2, [r3, #0]
 800478c:	4b65      	ldr	r3, [pc, #404]	@ (8004924 <handle_range+0x1bc>)
 800478e:	0052      	lsls	r2, r2, #1
 8004790:	5ad3      	ldrh	r3, [r2, r3]
 8004792:	2bff      	cmp	r3, #255	@ 0xff
 8004794:	d800      	bhi.n	8004798 <handle_range+0x30>
 8004796:	e0ae      	b.n	80048f6 <handle_range+0x18e>
			{
				holding_register_database[holding_register] = 0xFF;
 8004798:	1dbb      	adds	r3, r7, #6
 800479a:	881a      	ldrh	r2, [r3, #0]
 800479c:	4b61      	ldr	r3, [pc, #388]	@ (8004924 <handle_range+0x1bc>)
 800479e:	0052      	lsls	r2, r2, #1
 80047a0:	21ff      	movs	r1, #255	@ 0xff
 80047a2:	52d1      	strh	r1, [r2, r3]
			}
			break;
 80047a4:	e0a7      	b.n	80048f6 <handle_range+0x18e>
		}
		case MB_BAUD_RATE:
		{
			if(holding_register_database[holding_register] < BAUD_RATE_4800)
 80047a6:	1dbb      	adds	r3, r7, #6
 80047a8:	881a      	ldrh	r2, [r3, #0]
 80047aa:	4b5e      	ldr	r3, [pc, #376]	@ (8004924 <handle_range+0x1bc>)
 80047ac:	0052      	lsls	r2, r2, #1
 80047ae:	5ad3      	ldrh	r3, [r2, r3]
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d806      	bhi.n	80047c2 <handle_range+0x5a>
			{
				holding_register_database[holding_register] = BAUD_RATE_4800;
 80047b4:	1dbb      	adds	r3, r7, #6
 80047b6:	881a      	ldrh	r2, [r3, #0]
 80047b8:	4b5a      	ldr	r3, [pc, #360]	@ (8004924 <handle_range+0x1bc>)
 80047ba:	0052      	lsls	r2, r2, #1
 80047bc:	2102      	movs	r1, #2
 80047be:	52d1      	strh	r1, [r2, r3]
			}
			else if(holding_register_database[holding_register] > BAUD_RATE_256000)
			{
				holding_register_database[holding_register] = BAUD_RATE_256000;
			}
			break;
 80047c0:	e09b      	b.n	80048fa <handle_range+0x192>
			else if(holding_register_database[holding_register] > BAUD_RATE_256000)
 80047c2:	1dbb      	adds	r3, r7, #6
 80047c4:	881a      	ldrh	r2, [r3, #0]
 80047c6:	4b57      	ldr	r3, [pc, #348]	@ (8004924 <handle_range+0x1bc>)
 80047c8:	0052      	lsls	r2, r2, #1
 80047ca:	5ad3      	ldrh	r3, [r2, r3]
 80047cc:	2b09      	cmp	r3, #9
 80047ce:	d800      	bhi.n	80047d2 <handle_range+0x6a>
 80047d0:	e093      	b.n	80048fa <handle_range+0x192>
				holding_register_database[holding_register] = BAUD_RATE_256000;
 80047d2:	1dbb      	adds	r3, r7, #6
 80047d4:	881a      	ldrh	r2, [r3, #0]
 80047d6:	4b53      	ldr	r3, [pc, #332]	@ (8004924 <handle_range+0x1bc>)
 80047d8:	0052      	lsls	r2, r2, #1
 80047da:	2109      	movs	r1, #9
 80047dc:	52d1      	strh	r1, [r2, r3]
			break;
 80047de:	e08c      	b.n	80048fa <handle_range+0x192>
		}
		case MB_TRANSMIT_TIMEOUT:
		{
			if(holding_register_database[holding_register] < 5)
 80047e0:	1dbb      	adds	r3, r7, #6
 80047e2:	881a      	ldrh	r2, [r3, #0]
 80047e4:	4b4f      	ldr	r3, [pc, #316]	@ (8004924 <handle_range+0x1bc>)
 80047e6:	0052      	lsls	r2, r2, #1
 80047e8:	5ad3      	ldrh	r3, [r2, r3]
 80047ea:	2b04      	cmp	r3, #4
 80047ec:	d806      	bhi.n	80047fc <handle_range+0x94>
			{
				holding_register_database[holding_register] = 5;
 80047ee:	1dbb      	adds	r3, r7, #6
 80047f0:	881a      	ldrh	r2, [r3, #0]
 80047f2:	4b4c      	ldr	r3, [pc, #304]	@ (8004924 <handle_range+0x1bc>)
 80047f4:	0052      	lsls	r2, r2, #1
 80047f6:	2105      	movs	r1, #5
 80047f8:	52d1      	strh	r1, [r2, r3]
			}
			else if(holding_register_database[holding_register] > 1000)
			{
				holding_register_database[holding_register] = 1000;
			}
			break;
 80047fa:	e080      	b.n	80048fe <handle_range+0x196>
			else if(holding_register_database[holding_register] > 1000)
 80047fc:	1dbb      	adds	r3, r7, #6
 80047fe:	881a      	ldrh	r2, [r3, #0]
 8004800:	4b48      	ldr	r3, [pc, #288]	@ (8004924 <handle_range+0x1bc>)
 8004802:	0052      	lsls	r2, r2, #1
 8004804:	5ad2      	ldrh	r2, [r2, r3]
 8004806:	23fa      	movs	r3, #250	@ 0xfa
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	429a      	cmp	r2, r3
 800480c:	d800      	bhi.n	8004810 <handle_range+0xa8>
 800480e:	e076      	b.n	80048fe <handle_range+0x196>
				holding_register_database[holding_register] = 1000;
 8004810:	1dbb      	adds	r3, r7, #6
 8004812:	881a      	ldrh	r2, [r3, #0]
 8004814:	4b43      	ldr	r3, [pc, #268]	@ (8004924 <handle_range+0x1bc>)
 8004816:	0052      	lsls	r2, r2, #1
 8004818:	21fa      	movs	r1, #250	@ 0xfa
 800481a:	0089      	lsls	r1, r1, #2
 800481c:	52d1      	strh	r1, [r2, r3]
			break;
 800481e:	e06e      	b.n	80048fe <handle_range+0x196>
		}
		case MB_TRANSMIT_RETRIES:
		{
			if(holding_register_database[holding_register] > 5)
 8004820:	1dbb      	adds	r3, r7, #6
 8004822:	881a      	ldrh	r2, [r3, #0]
 8004824:	4b3f      	ldr	r3, [pc, #252]	@ (8004924 <handle_range+0x1bc>)
 8004826:	0052      	lsls	r2, r2, #1
 8004828:	5ad3      	ldrh	r3, [r2, r3]
 800482a:	2b05      	cmp	r3, #5
 800482c:	d800      	bhi.n	8004830 <handle_range+0xc8>
 800482e:	e068      	b.n	8004902 <handle_range+0x19a>
			{
				holding_register_database[holding_register] = 5;
 8004830:	1dbb      	adds	r3, r7, #6
 8004832:	881a      	ldrh	r2, [r3, #0]
 8004834:	4b3b      	ldr	r3, [pc, #236]	@ (8004924 <handle_range+0x1bc>)
 8004836:	0052      	lsls	r2, r2, #1
 8004838:	2105      	movs	r1, #5
 800483a:	52d1      	strh	r1, [r2, r3]
			}
			break;
 800483c:	e061      	b.n	8004902 <handle_range+0x19a>
		}
		case MB_ERRORS:
		{
			if(holding_register_database[holding_register] > 0x3FF)
 800483e:	1dbb      	adds	r3, r7, #6
 8004840:	881a      	ldrh	r2, [r3, #0]
 8004842:	4b38      	ldr	r3, [pc, #224]	@ (8004924 <handle_range+0x1bc>)
 8004844:	0052      	lsls	r2, r2, #1
 8004846:	5ad2      	ldrh	r2, [r2, r3]
 8004848:	2380      	movs	r3, #128	@ 0x80
 800484a:	00db      	lsls	r3, r3, #3
 800484c:	429a      	cmp	r2, r3
 800484e:	d35a      	bcc.n	8004906 <handle_range+0x19e>
			{
				holding_register_database[holding_register] = 0x3FF;
 8004850:	1dbb      	adds	r3, r7, #6
 8004852:	881a      	ldrh	r2, [r3, #0]
 8004854:	4b33      	ldr	r3, [pc, #204]	@ (8004924 <handle_range+0x1bc>)
 8004856:	0052      	lsls	r2, r2, #1
 8004858:	4933      	ldr	r1, [pc, #204]	@ (8004928 <handle_range+0x1c0>)
 800485a:	52d1      	strh	r1, [r2, r3]
			}
			break;
 800485c:	e053      	b.n	8004906 <handle_range+0x19e>
		}
		case I2C_ERRORS:
		{
			if(holding_register_database[holding_register] > 0x7F)
 800485e:	1dbb      	adds	r3, r7, #6
 8004860:	881a      	ldrh	r2, [r3, #0]
 8004862:	4b30      	ldr	r3, [pc, #192]	@ (8004924 <handle_range+0x1bc>)
 8004864:	0052      	lsls	r2, r2, #1
 8004866:	5ad3      	ldrh	r3, [r2, r3]
 8004868:	2b7f      	cmp	r3, #127	@ 0x7f
 800486a:	d94e      	bls.n	800490a <handle_range+0x1a2>
			{
				holding_register_database[holding_register] = 0x7F;
 800486c:	1dbb      	adds	r3, r7, #6
 800486e:	881a      	ldrh	r2, [r3, #0]
 8004870:	4b2c      	ldr	r3, [pc, #176]	@ (8004924 <handle_range+0x1bc>)
 8004872:	0052      	lsls	r2, r2, #1
 8004874:	217f      	movs	r1, #127	@ 0x7f
 8004876:	52d1      	strh	r1, [r2, r3]
			}
			break;
 8004878:	e047      	b.n	800490a <handle_range+0x1a2>
		}
		case I2C_SHUTDOWN ... AUTOPILOT:
		{
			if(holding_register_database[holding_register] > 1)
 800487a:	1dbb      	adds	r3, r7, #6
 800487c:	881a      	ldrh	r2, [r3, #0]
 800487e:	4b29      	ldr	r3, [pc, #164]	@ (8004924 <handle_range+0x1bc>)
 8004880:	0052      	lsls	r2, r2, #1
 8004882:	5ad3      	ldrh	r3, [r2, r3]
 8004884:	2b01      	cmp	r3, #1
 8004886:	d942      	bls.n	800490e <handle_range+0x1a6>
			{
				holding_register_database[holding_register] = 1;
 8004888:	1dbb      	adds	r3, r7, #6
 800488a:	881a      	ldrh	r2, [r3, #0]
 800488c:	4b25      	ldr	r3, [pc, #148]	@ (8004924 <handle_range+0x1bc>)
 800488e:	0052      	lsls	r2, r2, #1
 8004890:	2101      	movs	r1, #1
 8004892:	52d1      	strh	r1, [r2, r3]
			}
			break;
 8004894:	e03b      	b.n	800490e <handle_range+0x1a6>
		}
		case ENCODER_REFRESH:
		{
			if(holding_register_database[holding_register] < 1000)
 8004896:	1dbb      	adds	r3, r7, #6
 8004898:	881a      	ldrh	r2, [r3, #0]
 800489a:	4b22      	ldr	r3, [pc, #136]	@ (8004924 <handle_range+0x1bc>)
 800489c:	0052      	lsls	r2, r2, #1
 800489e:	5ad2      	ldrh	r2, [r2, r3]
 80048a0:	23fa      	movs	r3, #250	@ 0xfa
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d207      	bcs.n	80048b8 <handle_range+0x150>
			{
				holding_register_database[holding_register] = 1000;
 80048a8:	1dbb      	adds	r3, r7, #6
 80048aa:	881a      	ldrh	r2, [r3, #0]
 80048ac:	4b1d      	ldr	r3, [pc, #116]	@ (8004924 <handle_range+0x1bc>)
 80048ae:	0052      	lsls	r2, r2, #1
 80048b0:	21fa      	movs	r1, #250	@ 0xfa
 80048b2:	0089      	lsls	r1, r1, #2
 80048b4:	52d1      	strh	r1, [r2, r3]
			}
			else if(holding_register_database[holding_register] > 10000)
			{
				holding_register_database[holding_register] = 10000;
			}
			break;
 80048b6:	e02c      	b.n	8004912 <handle_range+0x1aa>
			else if(holding_register_database[holding_register] > 10000)
 80048b8:	1dbb      	adds	r3, r7, #6
 80048ba:	881a      	ldrh	r2, [r3, #0]
 80048bc:	4b19      	ldr	r3, [pc, #100]	@ (8004924 <handle_range+0x1bc>)
 80048be:	0052      	lsls	r2, r2, #1
 80048c0:	5ad3      	ldrh	r3, [r2, r3]
 80048c2:	4a1a      	ldr	r2, [pc, #104]	@ (800492c <handle_range+0x1c4>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d924      	bls.n	8004912 <handle_range+0x1aa>
				holding_register_database[holding_register] = 10000;
 80048c8:	1dbb      	adds	r3, r7, #6
 80048ca:	881a      	ldrh	r2, [r3, #0]
 80048cc:	4b15      	ldr	r3, [pc, #84]	@ (8004924 <handle_range+0x1bc>)
 80048ce:	0052      	lsls	r2, r2, #1
 80048d0:	4916      	ldr	r1, [pc, #88]	@ (800492c <handle_range+0x1c4>)
 80048d2:	52d1      	strh	r1, [r2, r3]
			break;
 80048d4:	e01d      	b.n	8004912 <handle_range+0x1aa>
		}
		case ACTUATOR_A_TARGET ... ACTUATOR_C_TARGET:
		{
			if(holding_register_database[holding_register] > 0x0FFF)
 80048d6:	1dbb      	adds	r3, r7, #6
 80048d8:	881a      	ldrh	r2, [r3, #0]
 80048da:	4b12      	ldr	r3, [pc, #72]	@ (8004924 <handle_range+0x1bc>)
 80048dc:	0052      	lsls	r2, r2, #1
 80048de:	5ad2      	ldrh	r2, [r2, r3]
 80048e0:	2380      	movs	r3, #128	@ 0x80
 80048e2:	015b      	lsls	r3, r3, #5
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d316      	bcc.n	8004916 <handle_range+0x1ae>
			{
				holding_register_database[holding_register] = 0x0FFF;
 80048e8:	1dbb      	adds	r3, r7, #6
 80048ea:	881a      	ldrh	r2, [r3, #0]
 80048ec:	4b0d      	ldr	r3, [pc, #52]	@ (8004924 <handle_range+0x1bc>)
 80048ee:	0052      	lsls	r2, r2, #1
 80048f0:	490f      	ldr	r1, [pc, #60]	@ (8004930 <handle_range+0x1c8>)
 80048f2:	52d1      	strh	r1, [r2, r3]
			}
			break;
 80048f4:	e00f      	b.n	8004916 <handle_range+0x1ae>
			break;
 80048f6:	46c0      	nop			@ (mov r8, r8)
 80048f8:	e00e      	b.n	8004918 <handle_range+0x1b0>
			break;
 80048fa:	46c0      	nop			@ (mov r8, r8)
 80048fc:	e00c      	b.n	8004918 <handle_range+0x1b0>
			break;
 80048fe:	46c0      	nop			@ (mov r8, r8)
 8004900:	e00a      	b.n	8004918 <handle_range+0x1b0>
			break;
 8004902:	46c0      	nop			@ (mov r8, r8)
 8004904:	e008      	b.n	8004918 <handle_range+0x1b0>
			break;
 8004906:	46c0      	nop			@ (mov r8, r8)
 8004908:	e006      	b.n	8004918 <handle_range+0x1b0>
			break;
 800490a:	46c0      	nop			@ (mov r8, r8)
 800490c:	e004      	b.n	8004918 <handle_range+0x1b0>
			break;
 800490e:	46c0      	nop			@ (mov r8, r8)
 8004910:	e002      	b.n	8004918 <handle_range+0x1b0>
			break;
 8004912:	46c0      	nop			@ (mov r8, r8)
 8004914:	e000      	b.n	8004918 <handle_range+0x1b0>
			break;
 8004916:	46c0      	nop			@ (mov r8, r8)
		}
	}
}
 8004918:	46c0      	nop			@ (mov r8, r8)
 800491a:	46bd      	mov	sp, r7
 800491c:	b002      	add	sp, #8
 800491e:	bd80      	pop	{r7, pc}
 8004920:	0800d4c4 	.word	0x0800d4c4
 8004924:	20000014 	.word	0x20000014
 8004928:	000003ff 	.word	0x000003ff
 800492c:	00002710 	.word	0x00002710
 8004930:	00000fff 	.word	0x00000fff

08004934 <modbus_send>:
#endif // MB_SLAVE

// General Modbus Functions -------------------------------------------------------------------

int8_t modbus_send(uint8_t size)
{
 8004934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004936:	b085      	sub	sp, #20
 8004938:	af00      	add	r7, sp, #0
 800493a:	0002      	movs	r2, r0
 800493c:	1dfb      	adds	r3, r7, #7
 800493e:	701a      	strb	r2, [r3, #0]
	int8_t status = HAL_OK;
 8004940:	250f      	movs	r5, #15
 8004942:	197b      	adds	r3, r7, r5
 8004944:	2200      	movs	r2, #0
 8004946:	701a      	strb	r2, [r3, #0]
	// Append CRC (low byte then high byte)
	uint16_t crc = crc_16(modbus_tx_buffer, size);
 8004948:	260c      	movs	r6, #12
 800494a:	19bc      	adds	r4, r7, r6
 800494c:	1dfb      	adds	r3, r7, #7
 800494e:	781a      	ldrb	r2, [r3, #0]
 8004950:	4b1f      	ldr	r3, [pc, #124]	@ (80049d0 <modbus_send+0x9c>)
 8004952:	0011      	movs	r1, r2
 8004954:	0018      	movs	r0, r3
 8004956:	f000 f9f3 	bl	8004d40 <crc_16>
 800495a:	0003      	movs	r3, r0
 800495c:	8023      	strh	r3, [r4, #0]
	modbus_tx_buffer[size] = low_byte(crc);
 800495e:	1dfb      	adds	r3, r7, #7
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	19ba      	adds	r2, r7, r6
 8004964:	8812      	ldrh	r2, [r2, #0]
 8004966:	b2d1      	uxtb	r1, r2
 8004968:	4a19      	ldr	r2, [pc, #100]	@ (80049d0 <modbus_send+0x9c>)
 800496a:	54d1      	strb	r1, [r2, r3]
	modbus_tx_buffer[size + 1] = high_byte(crc);
 800496c:	19bb      	adds	r3, r7, r6
 800496e:	881b      	ldrh	r3, [r3, #0]
 8004970:	0a1b      	lsrs	r3, r3, #8
 8004972:	b29a      	uxth	r2, r3
 8004974:	1dfb      	adds	r3, r7, #7
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	3301      	adds	r3, #1
 800497a:	b2d1      	uxtb	r1, r2
 800497c:	4a14      	ldr	r2, [pc, #80]	@ (80049d0 <modbus_send+0x9c>)
 800497e:	54d1      	strb	r1, [r2, r3]

	uart_tx_int = 0; // This will enable tx timeout monitoring
 8004980:	4b14      	ldr	r3, [pc, #80]	@ (80049d4 <modbus_send+0xa0>)
 8004982:	2200      	movs	r2, #0
 8004984:	701a      	strb	r2, [r3, #0]
	tx_time = HAL_GetTick();
 8004986:	f001 f91d 	bl	8005bc4 <HAL_GetTick>
 800498a:	0002      	movs	r2, r0
 800498c:	4b12      	ldr	r3, [pc, #72]	@ (80049d8 <modbus_send+0xa4>)
 800498e:	601a      	str	r2, [r3, #0]
	status = HAL_UART_Transmit_DMA(&huart1, modbus_tx_buffer, size + 2);
 8004990:	1dfb      	adds	r3, r7, #7
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	b29b      	uxth	r3, r3
 8004996:	3302      	adds	r3, #2
 8004998:	b29a      	uxth	r2, r3
 800499a:	490d      	ldr	r1, [pc, #52]	@ (80049d0 <modbus_send+0x9c>)
 800499c:	4b0f      	ldr	r3, [pc, #60]	@ (80049dc <modbus_send+0xa8>)
 800499e:	0018      	movs	r0, r3
 80049a0:	f006 fcfa 	bl	800b398 <HAL_UART_Transmit_DMA>
 80049a4:	0003      	movs	r3, r0
 80049a6:	001a      	movs	r2, r3
 80049a8:	197b      	adds	r3, r7, r5
 80049aa:	701a      	strb	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(huart1.hdmatx, DMA_IT_HT);
 80049ac:	4b0b      	ldr	r3, [pc, #44]	@ (80049dc <modbus_send+0xa8>)
 80049ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	4b09      	ldr	r3, [pc, #36]	@ (80049dc <modbus_send+0xa8>)
 80049b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2104      	movs	r1, #4
 80049bc:	438a      	bics	r2, r1
 80049be:	601a      	str	r2, [r3, #0]
	return status;
 80049c0:	197b      	adds	r3, r7, r5
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	b25b      	sxtb	r3, r3
}
 80049c6:	0018      	movs	r0, r3
 80049c8:	46bd      	mov	sp, r7
 80049ca:	b005      	add	sp, #20
 80049cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049ce:	46c0      	nop			@ (mov r8, r8)
 80049d0:	200007a8 	.word	0x200007a8
 80049d4:	200000b5 	.word	0x200000b5
 80049d8:	200008a8 	.word	0x200008a8
 80049dc:	2000050c 	.word	0x2000050c

080049e0 <modbus_reset>:

int8_t modbus_reset()
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
	int8_t status = 0;
 80049e6:	1dfb      	adds	r3, r7, #7
 80049e8:	2200      	movs	r2, #0
 80049ea:	701a      	strb	r2, [r3, #0]
	status = HAL_UART_Abort(&huart1);
 80049ec:	4b30      	ldr	r3, [pc, #192]	@ (8004ab0 <modbus_reset+0xd0>)
 80049ee:	0018      	movs	r0, r3
 80049f0:	f006 fd64 	bl	800b4bc <HAL_UART_Abort>
 80049f4:	0003      	movs	r3, r0
 80049f6:	001a      	movs	r2, r3
 80049f8:	1dfb      	adds	r3, r7, #7
 80049fa:	701a      	strb	r2, [r3, #0]
	status |= HAL_UART_DeInit(&huart1);
 80049fc:	4b2c      	ldr	r3, [pc, #176]	@ (8004ab0 <modbus_reset+0xd0>)
 80049fe:	0018      	movs	r0, r3
 8004a00:	f006 fc8a 	bl	800b318 <HAL_UART_DeInit>
 8004a04:	0003      	movs	r3, r0
 8004a06:	b259      	sxtb	r1, r3
 8004a08:	1dfb      	adds	r3, r7, #7
 8004a0a:	1dfa      	adds	r2, r7, #7
 8004a0c:	7812      	ldrb	r2, [r2, #0]
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	701a      	strb	r2, [r3, #0]
	__USART1_FORCE_RESET();
 8004a12:	4b28      	ldr	r3, [pc, #160]	@ (8004ab4 <modbus_reset+0xd4>)
 8004a14:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a16:	4b27      	ldr	r3, [pc, #156]	@ (8004ab4 <modbus_reset+0xd4>)
 8004a18:	2180      	movs	r1, #128	@ 0x80
 8004a1a:	01c9      	lsls	r1, r1, #7
 8004a1c:	430a      	orrs	r2, r1
 8004a1e:	631a      	str	r2, [r3, #48]	@ 0x30
	HAL_Delay(100);
 8004a20:	2064      	movs	r0, #100	@ 0x64
 8004a22:	f001 f8d9 	bl	8005bd8 <HAL_Delay>
	__USART1_RELEASE_RESET();
 8004a26:	4b23      	ldr	r3, [pc, #140]	@ (8004ab4 <modbus_reset+0xd4>)
 8004a28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a2a:	4b22      	ldr	r3, [pc, #136]	@ (8004ab4 <modbus_reset+0xd4>)
 8004a2c:	4922      	ldr	r1, [pc, #136]	@ (8004ab8 <modbus_reset+0xd8>)
 8004a2e:	400a      	ands	r2, r1
 8004a30:	631a      	str	r2, [r3, #48]	@ 0x30
	status = HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0);
 8004a32:	481f      	ldr	r0, [pc, #124]	@ (8004ab0 <modbus_reset+0xd0>)
 8004a34:	2300      	movs	r3, #0
 8004a36:	2200      	movs	r2, #0
 8004a38:	2100      	movs	r1, #0
 8004a3a:	f007 ffdd 	bl	800c9f8 <HAL_RS485Ex_Init>
 8004a3e:	0003      	movs	r3, r0
 8004a40:	001a      	movs	r2, r3
 8004a42:	1dfb      	adds	r3, r7, #7
 8004a44:	701a      	strb	r2, [r3, #0]
	status |= HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8);
 8004a46:	4b1a      	ldr	r3, [pc, #104]	@ (8004ab0 <modbus_reset+0xd0>)
 8004a48:	2100      	movs	r1, #0
 8004a4a:	0018      	movs	r0, r3
 8004a4c:	f008 f898 	bl	800cb80 <HAL_UARTEx_SetTxFifoThreshold>
 8004a50:	0003      	movs	r3, r0
 8004a52:	b259      	sxtb	r1, r3
 8004a54:	1dfb      	adds	r3, r7, #7
 8004a56:	1dfa      	adds	r2, r7, #7
 8004a58:	7812      	ldrb	r2, [r2, #0]
 8004a5a:	430a      	orrs	r2, r1
 8004a5c:	701a      	strb	r2, [r3, #0]
	status |= HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8);
 8004a5e:	4b14      	ldr	r3, [pc, #80]	@ (8004ab0 <modbus_reset+0xd0>)
 8004a60:	2100      	movs	r1, #0
 8004a62:	0018      	movs	r0, r3
 8004a64:	f008 f8cc 	bl	800cc00 <HAL_UARTEx_SetRxFifoThreshold>
 8004a68:	0003      	movs	r3, r0
 8004a6a:	b259      	sxtb	r1, r3
 8004a6c:	1dfb      	adds	r3, r7, #7
 8004a6e:	1dfa      	adds	r2, r7, #7
 8004a70:	7812      	ldrb	r2, [r2, #0]
 8004a72:	430a      	orrs	r2, r1
 8004a74:	701a      	strb	r2, [r3, #0]
	status |= HAL_UARTEx_DisableFifoMode(&huart1);
 8004a76:	4b0e      	ldr	r3, [pc, #56]	@ (8004ab0 <modbus_reset+0xd0>)
 8004a78:	0018      	movs	r0, r3
 8004a7a:	f008 f847 	bl	800cb0c <HAL_UARTEx_DisableFifoMode>
 8004a7e:	0003      	movs	r3, r0
 8004a80:	b259      	sxtb	r1, r3
 8004a82:	1dfb      	adds	r3, r7, #7
 8004a84:	1dfa      	adds	r2, r7, #7
 8004a86:	7812      	ldrb	r2, [r2, #0]
 8004a88:	430a      	orrs	r2, r1
 8004a8a:	701a      	strb	r2, [r3, #0]
	if(status != HAL_OK)
 8004a8c:	1dfb      	adds	r3, r7, #7
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	b25b      	sxtb	r3, r3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d004      	beq.n	8004aa0 <modbus_reset+0xc0>
	{
		return handle_modbus_error(MB_FATAL_ERROR);
 8004a96:	2015      	movs	r0, #21
 8004a98:	f000 f934 	bl	8004d04 <handle_modbus_error>
 8004a9c:	0003      	movs	r3, r0
 8004a9e:	e002      	b.n	8004aa6 <modbus_reset+0xc6>
	}
	return status;
 8004aa0:	1dfb      	adds	r3, r7, #7
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	b25b      	sxtb	r3, r3
}
 8004aa6:	0018      	movs	r0, r3
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	b002      	add	sp, #8
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	46c0      	nop			@ (mov r8, r8)
 8004ab0:	2000050c 	.word	0x2000050c
 8004ab4:	40021000 	.word	0x40021000
 8004ab8:	ffffbfff 	.word	0xffffbfff

08004abc <modbus_set_rx>:

int8_t modbus_set_rx()
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
	int8_t status = HAL_UARTEx_ReceiveToIdle_DMA(&huart1, modbus_rx_buffer, 6);
 8004ac2:	490e      	ldr	r1, [pc, #56]	@ (8004afc <modbus_set_rx+0x40>)
 8004ac4:	4b0e      	ldr	r3, [pc, #56]	@ (8004b00 <modbus_set_rx+0x44>)
 8004ac6:	2206      	movs	r2, #6
 8004ac8:	0018      	movs	r0, r3
 8004aca:	f008 f8db 	bl	800cc84 <HAL_UARTEx_ReceiveToIdle_DMA>
 8004ace:	0003      	movs	r3, r0
 8004ad0:	001a      	movs	r2, r3
 8004ad2:	1dfb      	adds	r3, r7, #7
 8004ad4:	701a      	strb	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(huart1.hdmarx, DMA_IT_HT);
 8004ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8004b00 <modbus_set_rx+0x44>)
 8004ad8:	2280      	movs	r2, #128	@ 0x80
 8004ada:	589b      	ldr	r3, [r3, r2]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	4b07      	ldr	r3, [pc, #28]	@ (8004b00 <modbus_set_rx+0x44>)
 8004ae2:	2180      	movs	r1, #128	@ 0x80
 8004ae4:	585b      	ldr	r3, [r3, r1]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2104      	movs	r1, #4
 8004aea:	438a      	bics	r2, r1
 8004aec:	601a      	str	r2, [r3, #0]

	return status;
 8004aee:	1dfb      	adds	r3, r7, #7
 8004af0:	781b      	ldrb	r3, [r3, #0]
 8004af2:	b25b      	sxtb	r3, r3
}
 8004af4:	0018      	movs	r0, r3
 8004af6:	46bd      	mov	sp, r7
 8004af8:	b002      	add	sp, #8
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	200006a8 	.word	0x200006a8
 8004b00:	2000050c 	.word	0x2000050c

08004b04 <monitor_modbus>:

int8_t monitor_modbus()
{
 8004b04:	b590      	push	{r4, r7, lr}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
	int8_t status = MB_SUCCESS;
 8004b0a:	1dfb      	adds	r3, r7, #7
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	701a      	strb	r2, [r3, #0]

	// Chunk miss handling
	status = handle_chunk_miss();
 8004b10:	1dfc      	adds	r4, r7, #7
 8004b12:	f000 f95b 	bl	8004dcc <handle_chunk_miss>
 8004b16:	0003      	movs	r3, r0
 8004b18:	7023      	strb	r3, [r4, #0]
	if(status != MB_SUCCESS)
 8004b1a:	1dfb      	adds	r3, r7, #7
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	b25b      	sxtb	r3, r3
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d012      	beq.n	8004b4a <monitor_modbus+0x46>
	{
		status = modbus_reset();
 8004b24:	1dfc      	adds	r4, r7, #7
 8004b26:	f7ff ff5b 	bl	80049e0 <modbus_reset>
 8004b2a:	0003      	movs	r3, r0
 8004b2c:	7023      	strb	r3, [r4, #0]
		if(status != MB_SUCCESS)
 8004b2e:	1dfb      	adds	r3, r7, #7
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	b25b      	sxtb	r3, r3
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d003      	beq.n	8004b40 <monitor_modbus+0x3c>
		{
			return status;
 8004b38:	1dfb      	adds	r3, r7, #7
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	b25b      	sxtb	r3, r3
 8004b3e:	e039      	b.n	8004bb4 <monitor_modbus+0xb0>
		}
		return handle_modbus_error(MB_UART_ERROR);
 8004b40:	2014      	movs	r0, #20
 8004b42:	f000 f8df 	bl	8004d04 <handle_modbus_error>
 8004b46:	0003      	movs	r3, r0
 8004b48:	e034      	b.n	8004bb4 <monitor_modbus+0xb0>
	}

	// Uart error handling
	if(uart_err_int)
 8004b4a:	4b1c      	ldr	r3, [pc, #112]	@ (8004bbc <monitor_modbus+0xb8>)
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d015      	beq.n	8004b80 <monitor_modbus+0x7c>
	{
		uart_err_int = 0;
 8004b54:	4b19      	ldr	r3, [pc, #100]	@ (8004bbc <monitor_modbus+0xb8>)
 8004b56:	2200      	movs	r2, #0
 8004b58:	701a      	strb	r2, [r3, #0]
		status = modbus_reset();
 8004b5a:	1dfc      	adds	r4, r7, #7
 8004b5c:	f7ff ff40 	bl	80049e0 <modbus_reset>
 8004b60:	0003      	movs	r3, r0
 8004b62:	7023      	strb	r3, [r4, #0]
		if(status != MB_SUCCESS)
 8004b64:	1dfb      	adds	r3, r7, #7
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	b25b      	sxtb	r3, r3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d003      	beq.n	8004b76 <monitor_modbus+0x72>
		{
			return status;
 8004b6e:	1dfb      	adds	r3, r7, #7
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	b25b      	sxtb	r3, r3
 8004b74:	e01e      	b.n	8004bb4 <monitor_modbus+0xb0>
		}
		return handle_modbus_error(MB_UART_ERROR);
 8004b76:	2014      	movs	r0, #20
 8004b78:	f000 f8c4 	bl	8004d04 <handle_modbus_error>
 8004b7c:	0003      	movs	r3, r0
 8004b7e:	e019      	b.n	8004bb4 <monitor_modbus+0xb0>
	}

	// TX timeout handling
	if(!uart_tx_int)
 8004b80:	4b0f      	ldr	r3, [pc, #60]	@ (8004bc0 <monitor_modbus+0xbc>)
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d111      	bne.n	8004bae <monitor_modbus+0xaa>
	{
		if(HAL_GetTick() - tx_time >= holding_register_database[MB_TRANSMIT_TIMEOUT])
 8004b8a:	f001 f81b 	bl	8005bc4 <HAL_GetTick>
 8004b8e:	0002      	movs	r2, r0
 8004b90:	4b0c      	ldr	r3, [pc, #48]	@ (8004bc4 <monitor_modbus+0xc0>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	4a0c      	ldr	r2, [pc, #48]	@ (8004bc8 <monitor_modbus+0xc4>)
 8004b98:	8892      	ldrh	r2, [r2, #4]
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d304      	bcc.n	8004ba8 <monitor_modbus+0xa4>
		{
			return handle_modbus_error(MB_TX_TIMEOUT);
 8004b9e:	2012      	movs	r0, #18
 8004ba0:	f000 f8b0 	bl	8004d04 <handle_modbus_error>
 8004ba4:	0003      	movs	r3, r0
 8004ba6:	e005      	b.n	8004bb4 <monitor_modbus+0xb0>
		}
		status = HAL_BUSY;
 8004ba8:	1dfb      	adds	r3, r7, #7
 8004baa:	2202      	movs	r2, #2
 8004bac:	701a      	strb	r2, [r3, #0]
			}
			status = HAL_BUSY;
		}
	}
#endif
	return status;
 8004bae:	1dfb      	adds	r3, r7, #7
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	b25b      	sxtb	r3, r3
}
 8004bb4:	0018      	movs	r0, r3
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	b003      	add	sp, #12
 8004bba:	bd90      	pop	{r4, r7, pc}
 8004bbc:	200008b1 	.word	0x200008b1
 8004bc0:	200000b5 	.word	0x200000b5
 8004bc4:	200008a8 	.word	0x200008a8
 8004bc8:	20000014 	.word	0x20000014

08004bcc <modbus_change_baud_rate>:

	return status;
}

int8_t modbus_change_baud_rate()
{
 8004bcc:	b590      	push	{r4, r7, lr}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
	int8_t status = 0;
 8004bd2:	1dfb      	adds	r3, r7, #7
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	701a      	strb	r2, [r3, #0]

	switch(holding_register_database[MB_BAUD_RATE])
 8004bd8:	4b3f      	ldr	r3, [pc, #252]	@ (8004cd8 <modbus_change_baud_rate+0x10c>)
 8004bda:	885b      	ldrh	r3, [r3, #2]
 8004bdc:	2b09      	cmp	r3, #9
 8004bde:	d831      	bhi.n	8004c44 <modbus_change_baud_rate+0x78>
 8004be0:	009a      	lsls	r2, r3, #2
 8004be2:	4b3e      	ldr	r3, [pc, #248]	@ (8004cdc <modbus_change_baud_rate+0x110>)
 8004be4:	18d3      	adds	r3, r2, r3
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	469f      	mov	pc, r3
	{
		case BAUD_RATE_2400:
		{
			huart1.Init.BaudRate = 2400;
 8004bea:	4b3d      	ldr	r3, [pc, #244]	@ (8004ce0 <modbus_change_baud_rate+0x114>)
 8004bec:	2296      	movs	r2, #150	@ 0x96
 8004bee:	0112      	lsls	r2, r2, #4
 8004bf0:	605a      	str	r2, [r3, #4]
			break;
 8004bf2:	e04e      	b.n	8004c92 <modbus_change_baud_rate+0xc6>
		}
		case BAUD_RATE_4800:
		{
			huart1.Init.BaudRate = 4800;
 8004bf4:	4b3a      	ldr	r3, [pc, #232]	@ (8004ce0 <modbus_change_baud_rate+0x114>)
 8004bf6:	2296      	movs	r2, #150	@ 0x96
 8004bf8:	0152      	lsls	r2, r2, #5
 8004bfa:	605a      	str	r2, [r3, #4]
			break;
 8004bfc:	e049      	b.n	8004c92 <modbus_change_baud_rate+0xc6>
		}
		case BAUD_RATE_9600:
		{
			huart1.Init.BaudRate = 9600;
 8004bfe:	4b38      	ldr	r3, [pc, #224]	@ (8004ce0 <modbus_change_baud_rate+0x114>)
 8004c00:	2296      	movs	r2, #150	@ 0x96
 8004c02:	0192      	lsls	r2, r2, #6
 8004c04:	605a      	str	r2, [r3, #4]
			break;
 8004c06:	e044      	b.n	8004c92 <modbus_change_baud_rate+0xc6>
		}
		case BAUD_RATE_19200:
		{
			huart1.Init.BaudRate = 19200;
 8004c08:	4b35      	ldr	r3, [pc, #212]	@ (8004ce0 <modbus_change_baud_rate+0x114>)
 8004c0a:	2296      	movs	r2, #150	@ 0x96
 8004c0c:	01d2      	lsls	r2, r2, #7
 8004c0e:	605a      	str	r2, [r3, #4]
			break;
 8004c10:	e03f      	b.n	8004c92 <modbus_change_baud_rate+0xc6>
		}
		case BAUD_RATE_38400:
		{
			huart1.Init.BaudRate = 38400;
 8004c12:	4b33      	ldr	r3, [pc, #204]	@ (8004ce0 <modbus_change_baud_rate+0x114>)
 8004c14:	2296      	movs	r2, #150	@ 0x96
 8004c16:	0212      	lsls	r2, r2, #8
 8004c18:	605a      	str	r2, [r3, #4]
			break;
 8004c1a:	e03a      	b.n	8004c92 <modbus_change_baud_rate+0xc6>
		}
		case BAUD_RATE_57600:
		{
			huart1.Init.BaudRate = 57600;
 8004c1c:	4b30      	ldr	r3, [pc, #192]	@ (8004ce0 <modbus_change_baud_rate+0x114>)
 8004c1e:	22e1      	movs	r2, #225	@ 0xe1
 8004c20:	0212      	lsls	r2, r2, #8
 8004c22:	605a      	str	r2, [r3, #4]
			break;
 8004c24:	e035      	b.n	8004c92 <modbus_change_baud_rate+0xc6>
		}
		case BAUD_RATE_115200:
		{
			huart1.Init.BaudRate = 115200;
 8004c26:	4b2e      	ldr	r3, [pc, #184]	@ (8004ce0 <modbus_change_baud_rate+0x114>)
 8004c28:	22e1      	movs	r2, #225	@ 0xe1
 8004c2a:	0252      	lsls	r2, r2, #9
 8004c2c:	605a      	str	r2, [r3, #4]
			break;
 8004c2e:	e030      	b.n	8004c92 <modbus_change_baud_rate+0xc6>
		}
		case BAUD_RATE_128000:
		{
			huart1.Init.BaudRate = 128000;
 8004c30:	4b2b      	ldr	r3, [pc, #172]	@ (8004ce0 <modbus_change_baud_rate+0x114>)
 8004c32:	22fa      	movs	r2, #250	@ 0xfa
 8004c34:	0252      	lsls	r2, r2, #9
 8004c36:	605a      	str	r2, [r3, #4]
			break;
 8004c38:	e02b      	b.n	8004c92 <modbus_change_baud_rate+0xc6>
		}
		case BAUD_RATE_256000:
		{
			huart1.Init.BaudRate = 256000;
 8004c3a:	4b29      	ldr	r3, [pc, #164]	@ (8004ce0 <modbus_change_baud_rate+0x114>)
 8004c3c:	22fa      	movs	r2, #250	@ 0xfa
 8004c3e:	0292      	lsls	r2, r2, #10
 8004c40:	605a      	str	r2, [r3, #4]
			break;
 8004c42:	e026      	b.n	8004c92 <modbus_change_baud_rate+0xc6>
		}
		default:
		{
			holding_register_database[MB_BAUD_RATE] = BAUD_RATE_9600;
 8004c44:	4b24      	ldr	r3, [pc, #144]	@ (8004cd8 <modbus_change_baud_rate+0x10c>)
 8004c46:	2203      	movs	r2, #3
 8004c48:	805a      	strh	r2, [r3, #2]
			huart1.Init.BaudRate = 9600;
 8004c4a:	4b25      	ldr	r3, [pc, #148]	@ (8004ce0 <modbus_change_baud_rate+0x114>)
 8004c4c:	2296      	movs	r2, #150	@ 0x96
 8004c4e:	0192      	lsls	r2, r2, #6
 8004c50:	605a      	str	r2, [r3, #4]
			status = UART_SetConfig(&huart1);
 8004c52:	4b23      	ldr	r3, [pc, #140]	@ (8004ce0 <modbus_change_baud_rate+0x114>)
 8004c54:	0018      	movs	r0, r3
 8004c56:	f007 f89b 	bl	800bd90 <UART_SetConfig>
 8004c5a:	0003      	movs	r3, r0
 8004c5c:	001a      	movs	r2, r3
 8004c5e:	1dfb      	adds	r3, r7, #7
 8004c60:	701a      	strb	r2, [r3, #0]
			if(status == HAL_OK)
 8004c62:	1dfb      	adds	r3, r7, #7
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	b25b      	sxtb	r3, r3
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d10d      	bne.n	8004c88 <modbus_change_baud_rate+0xbc>
			{
				status = modbus_reset();
 8004c6c:	1dfc      	adds	r4, r7, #7
 8004c6e:	f7ff feb7 	bl	80049e0 <modbus_reset>
 8004c72:	0003      	movs	r3, r0
 8004c74:	7023      	strb	r3, [r4, #0]
				if(status != HAL_OK)
 8004c76:	1dfb      	adds	r3, r7, #7
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	b25b      	sxtb	r3, r3
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d003      	beq.n	8004c88 <modbus_change_baud_rate+0xbc>
				{
					return status;
 8004c80:	1dfb      	adds	r3, r7, #7
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	b25b      	sxtb	r3, r3
 8004c86:	e022      	b.n	8004cce <modbus_change_baud_rate+0x102>
				}
			}
			return handle_modbus_error(RANGE_ERROR);
 8004c88:	200e      	movs	r0, #14
 8004c8a:	f000 f83b 	bl	8004d04 <handle_modbus_error>
 8004c8e:	0003      	movs	r3, r0
 8004c90:	e01d      	b.n	8004cce <modbus_change_baud_rate+0x102>
		}
	}
	status = UART_SetConfig(&huart1);
 8004c92:	4b13      	ldr	r3, [pc, #76]	@ (8004ce0 <modbus_change_baud_rate+0x114>)
 8004c94:	0018      	movs	r0, r3
 8004c96:	f007 f87b 	bl	800bd90 <UART_SetConfig>
 8004c9a:	0003      	movs	r3, r0
 8004c9c:	001a      	movs	r2, r3
 8004c9e:	1dfb      	adds	r3, r7, #7
 8004ca0:	701a      	strb	r2, [r3, #0]
	if(status == HAL_OK)
 8004ca2:	1dfb      	adds	r3, r7, #7
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	b25b      	sxtb	r3, r3
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d10d      	bne.n	8004cc8 <modbus_change_baud_rate+0xfc>
	{
		// Log error, reset UART
		status = modbus_reset();
 8004cac:	1dfc      	adds	r4, r7, #7
 8004cae:	f7ff fe97 	bl	80049e0 <modbus_reset>
 8004cb2:	0003      	movs	r3, r0
 8004cb4:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK)
 8004cb6:	1dfb      	adds	r3, r7, #7
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	b25b      	sxtb	r3, r3
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d003      	beq.n	8004cc8 <modbus_change_baud_rate+0xfc>
		{
			return status;
 8004cc0:	1dfb      	adds	r3, r7, #7
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	b25b      	sxtb	r3, r3
 8004cc6:	e002      	b.n	8004cce <modbus_change_baud_rate+0x102>
		}
	}

	return modbus_set_rx();
 8004cc8:	f7ff fef8 	bl	8004abc <modbus_set_rx>
 8004ccc:	0003      	movs	r3, r0
}
 8004cce:	0018      	movs	r0, r3
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	b003      	add	sp, #12
 8004cd4:	bd90      	pop	{r4, r7, pc}
 8004cd6:	46c0      	nop			@ (mov r8, r8)
 8004cd8:	20000014 	.word	0x20000014
 8004cdc:	0800d5d0 	.word	0x0800d5d0
 8004ce0:	2000050c 	.word	0x2000050c

08004ce4 <get_rx_buffer>:
}


// Low Level Functions -------------------------------------------------------------------------
uint8_t get_rx_buffer(uint8_t index)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	0002      	movs	r2, r0
 8004cec:	1dfb      	adds	r3, r7, #7
 8004cee:	701a      	strb	r2, [r3, #0]
	if (index < MODBUS_RX_BUFFER_SIZE)
	{
		return modbus_rx_buffer[index];
 8004cf0:	1dfb      	adds	r3, r7, #7
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	4a02      	ldr	r2, [pc, #8]	@ (8004d00 <get_rx_buffer+0x1c>)
 8004cf6:	5cd3      	ldrb	r3, [r2, r3]
	}
	return 0xFF;
}
 8004cf8:	0018      	movs	r0, r3
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	b002      	add	sp, #8
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	200006a8 	.word	0x200006a8

08004d04 <handle_modbus_error>:

int8_t handle_modbus_error(int8_t error_code)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	0002      	movs	r2, r0
 8004d0c:	1dfb      	adds	r3, r7, #7
 8004d0e:	701a      	strb	r2, [r3, #0]
	holding_register_database[MB_ERRORS] |= 1U << (error_code - RANGE_ERROR);
 8004d10:	4b0a      	ldr	r3, [pc, #40]	@ (8004d3c <handle_modbus_error+0x38>)
 8004d12:	891a      	ldrh	r2, [r3, #8]
 8004d14:	1dfb      	adds	r3, r7, #7
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	b25b      	sxtb	r3, r3
 8004d1a:	3b0e      	subs	r3, #14
 8004d1c:	2101      	movs	r1, #1
 8004d1e:	4099      	lsls	r1, r3
 8004d20:	000b      	movs	r3, r1
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	4313      	orrs	r3, r2
 8004d26:	b29a      	uxth	r2, r3
 8004d28:	4b04      	ldr	r3, [pc, #16]	@ (8004d3c <handle_modbus_error+0x38>)
 8004d2a:	811a      	strh	r2, [r3, #8]
	return error_code;
 8004d2c:	1dfb      	adds	r3, r7, #7
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	b25b      	sxtb	r3, r3
}
 8004d32:	0018      	movs	r0, r3
 8004d34:	46bd      	mov	sp, r7
 8004d36:	b002      	add	sp, #8
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	46c0      	nop			@ (mov r8, r8)
 8004d3c:	20000014 	.word	0x20000014

08004d40 <crc_16>:

// Private Functions ---------------------------------------------------------------------------

uint16_t crc_16(uint8_t *data, uint8_t size)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	000a      	movs	r2, r1
 8004d4a:	1cfb      	adds	r3, r7, #3
 8004d4c:	701a      	strb	r2, [r3, #0]
	uint8_t crc_hi = 0xFF;
 8004d4e:	230f      	movs	r3, #15
 8004d50:	18fb      	adds	r3, r7, r3
 8004d52:	22ff      	movs	r2, #255	@ 0xff
 8004d54:	701a      	strb	r2, [r3, #0]
	uint8_t crc_low = 0xFF;
 8004d56:	230e      	movs	r3, #14
 8004d58:	18fb      	adds	r3, r7, r3
 8004d5a:	22ff      	movs	r2, #255	@ 0xff
 8004d5c:	701a      	strb	r2, [r3, #0]
	 unsigned int i; /* will index into CRC lookup */

	/* pass through message buffer */
	while (size--)
 8004d5e:	e019      	b.n	8004d94 <crc_16+0x54>
	{
		i = crc_low ^ *data++; /* calculate the CRC  */
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	1c5a      	adds	r2, r3, #1
 8004d64:	607a      	str	r2, [r7, #4]
 8004d66:	781a      	ldrb	r2, [r3, #0]
 8004d68:	200e      	movs	r0, #14
 8004d6a:	183b      	adds	r3, r7, r0
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	4053      	eors	r3, r2
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	60bb      	str	r3, [r7, #8]
		crc_low = crc_hi ^ table_crc_hi[i];
 8004d74:	4a13      	ldr	r2, [pc, #76]	@ (8004dc4 <crc_16+0x84>)
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	18d3      	adds	r3, r2, r3
 8004d7a:	7819      	ldrb	r1, [r3, #0]
 8004d7c:	183b      	adds	r3, r7, r0
 8004d7e:	200f      	movs	r0, #15
 8004d80:	183a      	adds	r2, r7, r0
 8004d82:	7812      	ldrb	r2, [r2, #0]
 8004d84:	404a      	eors	r2, r1
 8004d86:	701a      	strb	r2, [r3, #0]
		crc_hi = table_crc_lo[i];
 8004d88:	183b      	adds	r3, r7, r0
 8004d8a:	490f      	ldr	r1, [pc, #60]	@ (8004dc8 <crc_16+0x88>)
 8004d8c:	68ba      	ldr	r2, [r7, #8]
 8004d8e:	188a      	adds	r2, r1, r2
 8004d90:	7812      	ldrb	r2, [r2, #0]
 8004d92:	701a      	strb	r2, [r3, #0]
	while (size--)
 8004d94:	1cfb      	adds	r3, r7, #3
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	1cfa      	adds	r2, r7, #3
 8004d9a:	1e59      	subs	r1, r3, #1
 8004d9c:	7011      	strb	r1, [r2, #0]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1de      	bne.n	8004d60 <crc_16+0x20>
	}

	return (crc_hi << 8 | crc_low);
 8004da2:	230f      	movs	r3, #15
 8004da4:	18fb      	adds	r3, r7, r3
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	021b      	lsls	r3, r3, #8
 8004daa:	b21a      	sxth	r2, r3
 8004dac:	230e      	movs	r3, #14
 8004dae:	18fb      	adds	r3, r7, r3
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	b21b      	sxth	r3, r3
 8004db4:	4313      	orrs	r3, r2
 8004db6:	b21b      	sxth	r3, r3
 8004db8:	b29b      	uxth	r3, r3
}
 8004dba:	0018      	movs	r0, r3
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	b004      	add	sp, #16
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	46c0      	nop			@ (mov r8, r8)
 8004dc4:	0800d2c4 	.word	0x0800d2c4
 8004dc8:	0800d3c4 	.word	0x0800d3c4

08004dcc <handle_chunk_miss>:

int8_t handle_chunk_miss()
{
 8004dcc:	b590      	push	{r4, r7, lr}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
	if(modbus_header == 0)
 8004dd2:	4b15      	ldr	r3, [pc, #84]	@ (8004e28 <handle_chunk_miss+0x5c>)
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d120      	bne.n	8004e1e <handle_chunk_miss+0x52>
	{
		if(HAL_GetTick() - chunk_time > 10)
 8004ddc:	f000 fef2 	bl	8005bc4 <HAL_GetTick>
 8004de0:	0002      	movs	r2, r0
 8004de2:	4b12      	ldr	r3, [pc, #72]	@ (8004e2c <handle_chunk_miss+0x60>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	2b0a      	cmp	r3, #10
 8004dea:	d918      	bls.n	8004e1e <handle_chunk_miss+0x52>
		{
			modbus_header = 1;
 8004dec:	4b0e      	ldr	r3, [pc, #56]	@ (8004e28 <handle_chunk_miss+0x5c>)
 8004dee:	2201      	movs	r2, #1
 8004df0:	701a      	strb	r2, [r3, #0]
			int8_t status = HAL_UART_Abort(&huart1);
 8004df2:	4b0f      	ldr	r3, [pc, #60]	@ (8004e30 <handle_chunk_miss+0x64>)
 8004df4:	0018      	movs	r0, r3
 8004df6:	f006 fb61 	bl	800b4bc <HAL_UART_Abort>
 8004dfa:	0003      	movs	r3, r0
 8004dfc:	001a      	movs	r2, r3
 8004dfe:	1dfb      	adds	r3, r7, #7
 8004e00:	701a      	strb	r2, [r3, #0]
			if(status == HAL_OK)
 8004e02:	1dfb      	adds	r3, r7, #7
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	b25b      	sxtb	r3, r3
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d104      	bne.n	8004e16 <handle_chunk_miss+0x4a>
			{
				status = modbus_set_rx();
 8004e0c:	1dfc      	adds	r4, r7, #7
 8004e0e:	f7ff fe55 	bl	8004abc <modbus_set_rx>
 8004e12:	0003      	movs	r3, r0
 8004e14:	7023      	strb	r3, [r4, #0]
			}
			return status;
 8004e16:	1dfb      	adds	r3, r7, #7
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	b25b      	sxtb	r3, r3
 8004e1c:	e000      	b.n	8004e20 <handle_chunk_miss+0x54>
		}
	}
	return MB_SUCCESS;
 8004e1e:	2300      	movs	r3, #0
}
 8004e20:	0018      	movs	r0, r3
 8004e22:	46bd      	mov	sp, r7
 8004e24:	b003      	add	sp, #12
 8004e26:	bd90      	pop	{r4, r7, pc}
 8004e28:	200000b4 	.word	0x200000b4
 8004e2c:	200008ac 	.word	0x200008ac
 8004e30:	2000050c 	.word	0x2000050c

08004e34 <LL_ADC_REG_SetDMATransfer>:
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	2203      	movs	r2, #3
 8004e44:	4393      	bics	r3, r2
 8004e46:	001a      	movs	r2, r3
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	431a      	orrs	r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	60da      	str	r2, [r3, #12]
}
 8004e50:	46c0      	nop			@ (mov r8, r8)
 8004e52:	46bd      	mov	sp, r7
 8004e54:	b002      	add	sp, #8
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <LL_ADC_REG_GetDMATransfer>:
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b082      	sub	sp, #8
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	2203      	movs	r2, #3
 8004e66:	4013      	ands	r3, r2
}
 8004e68:	0018      	movs	r0, r3
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	b002      	add	sp, #8
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <LL_ADC_EnableInternalRegulator>:
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b082      	sub	sp, #8
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	4a05      	ldr	r2, [pc, #20]	@ (8004e94 <LL_ADC_EnableInternalRegulator+0x24>)
 8004e7e:	4013      	ands	r3, r2
 8004e80:	2280      	movs	r2, #128	@ 0x80
 8004e82:	0552      	lsls	r2, r2, #21
 8004e84:	431a      	orrs	r2, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	609a      	str	r2, [r3, #8]
}
 8004e8a:	46c0      	nop			@ (mov r8, r8)
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	b002      	add	sp, #8
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	46c0      	nop			@ (mov r8, r8)
 8004e94:	6fffffe8 	.word	0x6fffffe8

08004e98 <LL_ADC_Enable>:
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	4a04      	ldr	r2, [pc, #16]	@ (8004eb8 <LL_ADC_Enable+0x20>)
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	431a      	orrs	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	609a      	str	r2, [r3, #8]
}
 8004eb0:	46c0      	nop			@ (mov r8, r8)
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	b002      	add	sp, #8
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	7fffffe8 	.word	0x7fffffe8

08004ebc <LL_ADC_IsEnabled>:
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b082      	sub	sp, #8
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	2201      	movs	r2, #1
 8004eca:	4013      	ands	r3, r2
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d101      	bne.n	8004ed4 <LL_ADC_IsEnabled+0x18>
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e000      	b.n	8004ed6 <LL_ADC_IsEnabled+0x1a>
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	0018      	movs	r0, r3
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	b002      	add	sp, #8
 8004edc:	bd80      	pop	{r7, pc}
	...

08004ee0 <LL_ADC_StartCalibration>:
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	4a05      	ldr	r2, [pc, #20]	@ (8004f04 <LL_ADC_StartCalibration+0x24>)
 8004eee:	4013      	ands	r3, r2
 8004ef0:	2280      	movs	r2, #128	@ 0x80
 8004ef2:	0612      	lsls	r2, r2, #24
 8004ef4:	431a      	orrs	r2, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	609a      	str	r2, [r3, #8]
}
 8004efa:	46c0      	nop			@ (mov r8, r8)
 8004efc:	46bd      	mov	sp, r7
 8004efe:	b002      	add	sp, #8
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	46c0      	nop			@ (mov r8, r8)
 8004f04:	7fffffe8 	.word	0x7fffffe8

08004f08 <LL_ADC_IsCalibrationOnGoing>:
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	0fdb      	lsrs	r3, r3, #31
 8004f16:	07da      	lsls	r2, r3, #31
 8004f18:	2380      	movs	r3, #128	@ 0x80
 8004f1a:	061b      	lsls	r3, r3, #24
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d101      	bne.n	8004f24 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004f20:	2301      	movs	r3, #1
 8004f22:	e000      	b.n	8004f26 <LL_ADC_IsCalibrationOnGoing+0x1e>
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	0018      	movs	r0, r3
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	b002      	add	sp, #8
 8004f2c:	bd80      	pop	{r7, pc}

08004f2e <LL_ADC_IsActiveFlag_ADRDY>:
{
 8004f2e:	b580      	push	{r7, lr}
 8004f30:	b082      	sub	sp, #8
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d101      	bne.n	8004f46 <LL_ADC_IsActiveFlag_ADRDY+0x18>
 8004f42:	2301      	movs	r3, #1
 8004f44:	e000      	b.n	8004f48 <LL_ADC_IsActiveFlag_ADRDY+0x1a>
 8004f46:	2300      	movs	r3, #0
}
 8004f48:	0018      	movs	r0, r3
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	b002      	add	sp, #8
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <LL_SYSTICK_IsActiveCounterFlag>:
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	af00      	add	r7, sp, #0
  return (((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk)) ? 1UL : 0UL);
 8004f54:	4b07      	ldr	r3, [pc, #28]	@ (8004f74 <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	2380      	movs	r3, #128	@ 0x80
 8004f5a:	025b      	lsls	r3, r3, #9
 8004f5c:	401a      	ands	r2, r3
 8004f5e:	2380      	movs	r3, #128	@ 0x80
 8004f60:	025b      	lsls	r3, r3, #9
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d101      	bne.n	8004f6a <LL_SYSTICK_IsActiveCounterFlag+0x1a>
 8004f66:	2301      	movs	r3, #1
 8004f68:	e000      	b.n	8004f6c <LL_SYSTICK_IsActiveCounterFlag+0x1c>
 8004f6a:	2300      	movs	r3, #0
}
 8004f6c:	0018      	movs	r0, r3
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	46c0      	nop			@ (mov r8, r8)
 8004f74:	e000e010 	.word	0xe000e010

08004f78 <ADC_ConvCpltCallback>:
#define VAR_CONVERTED_DATA_INIT_VALUE    (__LL_ADC_DIGITAL_SCALE(LL_ADC_RESOLUTION_12B) + 1)

volatile uint8_t low_half_safe;
volatile uint8_t adc_err_int;
void ADC_ConvCpltCallback()
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	af00      	add	r7, sp, #0
	low_half_safe = 0;
 8004f7c:	4b02      	ldr	r3, [pc, #8]	@ (8004f88 <ADC_ConvCpltCallback+0x10>)
 8004f7e:	2200      	movs	r2, #0
 8004f80:	701a      	strb	r2, [r3, #0]
}
 8004f82:	46c0      	nop			@ (mov r8, r8)
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	200008b2 	.word	0x200008b2

08004f8c <ADC_ConvHalfCpltCallback>:

void ADC_ConvHalfCpltCallback()
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	af00      	add	r7, sp, #0
	low_half_safe = 1;
 8004f90:	4b02      	ldr	r3, [pc, #8]	@ (8004f9c <ADC_ConvHalfCpltCallback+0x10>)
 8004f92:	2201      	movs	r2, #1
 8004f94:	701a      	strb	r2, [r3, #0]
}
 8004f96:	46c0      	nop			@ (mov r8, r8)
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	200008b2 	.word	0x200008b2

08004fa0 <ADC_ErrorCallback>:

void ADC_ErrorCallback()
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	af00      	add	r7, sp, #0
	adc_err_int = 1;
 8004fa4:	4b02      	ldr	r3, [pc, #8]	@ (8004fb0 <ADC_ErrorCallback+0x10>)
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	701a      	strb	r2, [r3, #0]
}
 8004faa:	46c0      	nop			@ (mov r8, r8)
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	200008b3 	.word	0x200008b3

08004fb4 <ADC_Activate>:

void ADC_Activate()
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
	low_half_safe = 0;
 8004fba:	4b3e      	ldr	r3, [pc, #248]	@ (80050b4 <ADC_Activate+0x100>)
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	701a      	strb	r2, [r3, #0]
	adc_err_int = 0;
 8004fc0:	4b3d      	ldr	r3, [pc, #244]	@ (80050b8 <ADC_Activate+0x104>)
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	701a      	strb	r2, [r3, #0]
	__IO uint32_t wait_loop_index = 0U;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	60bb      	str	r3, [r7, #8]
	__IO uint32_t backup_setting_adc_dma_transfer = 0U;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	607b      	str	r3, [r7, #4]
	#if (USE_TIMEOUT == 1)
	uint32_t Timeout = 0U; /* Variable used for timeout management */
 8004fce:	2300      	movs	r3, #0
 8004fd0:	60fb      	str	r3, [r7, #12]
	/*       implemented anyway to show the best practice usages                */
	/*       corresponding to reference manual procedure.                       */
	/*       Software can be optimized by removing some of these checks, if     */
	/*       they are not relevant considering previous settings and actions    */
	/*       in user application.                                               */
	if (LL_ADC_IsEnabled(ADC1) == 0)
 8004fd2:	4b3a      	ldr	r3, [pc, #232]	@ (80050bc <ADC_Activate+0x108>)
 8004fd4:	0018      	movs	r0, r3
 8004fd6:	f7ff ff71 	bl	8004ebc <LL_ADC_IsEnabled>
 8004fda:	1e03      	subs	r3, r0, #0
 8004fdc:	d166      	bne.n	80050ac <ADC_Activate+0xf8>
	{
		/* Enable ADC internal voltage regulator */
		LL_ADC_EnableInternalRegulator(ADC1);
 8004fde:	4b37      	ldr	r3, [pc, #220]	@ (80050bc <ADC_Activate+0x108>)
 8004fe0:	0018      	movs	r0, r3
 8004fe2:	f7ff ff45 	bl	8004e70 <LL_ADC_EnableInternalRegulator>
		/* Compute number of CPU cycles to wait for, from delay in us.            */
		/* Note: Variable divided by 2 to compensate partially                    */
		/*       CPU processing cycles (depends on compilation optimization).     */
		/* Note: If system core clock frequency is below 200kHz, wait time        */
		/*       is only a few CPU processing cycles.                             */
		wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8004fe6:	4b36      	ldr	r3, [pc, #216]	@ (80050c0 <ADC_Activate+0x10c>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4936      	ldr	r1, [pc, #216]	@ (80050c4 <ADC_Activate+0x110>)
 8004fec:	0018      	movs	r0, r3
 8004fee:	f7fb f88b 	bl	8000108 <__udivsi3>
 8004ff2:	0003      	movs	r3, r0
 8004ff4:	001a      	movs	r2, r3
 8004ff6:	0013      	movs	r3, r2
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	189b      	adds	r3, r3, r2
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	210a      	movs	r1, #10
 8005000:	0018      	movs	r0, r3
 8005002:	f7fb f881 	bl	8000108 <__udivsi3>
 8005006:	0003      	movs	r3, r0
 8005008:	60bb      	str	r3, [r7, #8]
		while(wait_loop_index != 0)
 800500a:	e002      	b.n	8005012 <ADC_Activate+0x5e>
		{
			wait_loop_index--;
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	3b01      	subs	r3, #1
 8005010:	60bb      	str	r3, [r7, #8]
		while(wait_loop_index != 0)
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d1f9      	bne.n	800500c <ADC_Activate+0x58>
		/* Note: Specificity of this STM32 series: Calibration factor is           */
		/*       available in data register and also transferred by DMA.           */
		/*       To not insert ADC calibration factor among ADC conversion data   */
		/*       in DMA destination address, DMA transfer must be disabled during */
		/*       calibration.                                                     */
		backup_setting_adc_dma_transfer = LL_ADC_REG_GetDMATransfer(ADC1);
 8005018:	4b28      	ldr	r3, [pc, #160]	@ (80050bc <ADC_Activate+0x108>)
 800501a:	0018      	movs	r0, r3
 800501c:	f7ff ff1c 	bl	8004e58 <LL_ADC_REG_GetDMATransfer>
 8005020:	0003      	movs	r3, r0
 8005022:	607b      	str	r3, [r7, #4]
		LL_ADC_REG_SetDMATransfer(ADC1, LL_ADC_REG_DMA_TRANSFER_NONE);
 8005024:	4b25      	ldr	r3, [pc, #148]	@ (80050bc <ADC_Activate+0x108>)
 8005026:	2100      	movs	r1, #0
 8005028:	0018      	movs	r0, r3
 800502a:	f7ff ff03 	bl	8004e34 <LL_ADC_REG_SetDMATransfer>

		/* Run ADC self calibration */
		LL_ADC_StartCalibration(ADC1);
 800502e:	4b23      	ldr	r3, [pc, #140]	@ (80050bc <ADC_Activate+0x108>)
 8005030:	0018      	movs	r0, r3
 8005032:	f7ff ff55 	bl	8004ee0 <LL_ADC_StartCalibration>

		/* Poll for ADC effectively calibrated */
#if (USE_TIMEOUT == 1)
		Timeout = ADC_CALIBRATION_TIMEOUT_MS;
 8005036:	2301      	movs	r3, #1
 8005038:	60fb      	str	r3, [r7, #12]
#endif /* USE_TIMEOUT */

		while (LL_ADC_IsCalibrationOnGoing(ADC1) != 0)
 800503a:	e00a      	b.n	8005052 <ADC_Activate+0x9e>
		{
#if (USE_TIMEOUT == 1)
			/* Check Systick counter flag to decrement the time-out value */
			if (LL_SYSTICK_IsActiveCounterFlag())
 800503c:	f7ff ff88 	bl	8004f50 <LL_SYSTICK_IsActiveCounterFlag>
 8005040:	1e03      	subs	r3, r0, #0
 8005042:	d006      	beq.n	8005052 <ADC_Activate+0x9e>
			{
				if(Timeout-- == 0)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	1e5a      	subs	r2, r3, #1
 8005048:	60fa      	str	r2, [r7, #12]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d101      	bne.n	8005052 <ADC_Activate+0x9e>
				{
					/* Error: Time-out */
					Error_Handler();
 800504e:	f7ff f91b 	bl	8004288 <Error_Handler>
		while (LL_ADC_IsCalibrationOnGoing(ADC1) != 0)
 8005052:	4b1a      	ldr	r3, [pc, #104]	@ (80050bc <ADC_Activate+0x108>)
 8005054:	0018      	movs	r0, r3
 8005056:	f7ff ff57 	bl	8004f08 <LL_ADC_IsCalibrationOnGoing>
 800505a:	1e03      	subs	r3, r0, #0
 800505c:	d1ee      	bne.n	800503c <ADC_Activate+0x88>
			}
#endif /* USE_TIMEOUT */
		}

		/* Restore ADC DMA transfer request after calibration */
		LL_ADC_REG_SetDMATransfer(ADC1, backup_setting_adc_dma_transfer);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a16      	ldr	r2, [pc, #88]	@ (80050bc <ADC_Activate+0x108>)
 8005062:	0019      	movs	r1, r3
 8005064:	0010      	movs	r0, r2
 8005066:	f7ff fee5 	bl	8004e34 <LL_ADC_REG_SetDMATransfer>

		/* Delay between ADC end of calibration and ADC enable.                   */
		/* Note: Variable divided by 2 to compensate partially                    */
		/*       CPU processing cycles (depends on compilation optimization).     */
		wait_loop_index = (ADC_DELAY_CALIB_ENABLE_CPU_CYCLES >> 1);
 800506a:	2320      	movs	r3, #32
 800506c:	60bb      	str	r3, [r7, #8]
		while(wait_loop_index != 0)
 800506e:	e002      	b.n	8005076 <ADC_Activate+0xc2>
		{
			wait_loop_index--;
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	3b01      	subs	r3, #1
 8005074:	60bb      	str	r3, [r7, #8]
		while(wait_loop_index != 0)
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d1f9      	bne.n	8005070 <ADC_Activate+0xbc>
		}

		/* Enable ADC */
		LL_ADC_Enable(ADC1);
 800507c:	4b0f      	ldr	r3, [pc, #60]	@ (80050bc <ADC_Activate+0x108>)
 800507e:	0018      	movs	r0, r3
 8005080:	f7ff ff0a 	bl	8004e98 <LL_ADC_Enable>


		/* Poll for ADC ready to convert */
#if (USE_TIMEOUT == 1)
		Timeout = ADC_ENABLE_TIMEOUT_MS;
 8005084:	2301      	movs	r3, #1
 8005086:	60fb      	str	r3, [r7, #12]
#endif /* USE_TIMEOUT */

		while (LL_ADC_IsActiveFlag_ADRDY(ADC1) == 0)
 8005088:	e00a      	b.n	80050a0 <ADC_Activate+0xec>
		{
#if (USE_TIMEOUT == 1)
			/* Check Systick counter flag to decrement the time-out value */
			if (LL_SYSTICK_IsActiveCounterFlag())
 800508a:	f7ff ff61 	bl	8004f50 <LL_SYSTICK_IsActiveCounterFlag>
 800508e:	1e03      	subs	r3, r0, #0
 8005090:	d006      	beq.n	80050a0 <ADC_Activate+0xec>
			{
				if(Timeout-- == 0)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	1e5a      	subs	r2, r3, #1
 8005096:	60fa      	str	r2, [r7, #12]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d101      	bne.n	80050a0 <ADC_Activate+0xec>
				{
					/* Error: Time-out */
					Error_Handler();
 800509c:	f7ff f8f4 	bl	8004288 <Error_Handler>
		while (LL_ADC_IsActiveFlag_ADRDY(ADC1) == 0)
 80050a0:	4b06      	ldr	r3, [pc, #24]	@ (80050bc <ADC_Activate+0x108>)
 80050a2:	0018      	movs	r0, r3
 80050a4:	f7ff ff43 	bl	8004f2e <LL_ADC_IsActiveFlag_ADRDY>
 80050a8:	1e03      	subs	r3, r0, #0
 80050aa:	d0ee      	beq.n	800508a <ADC_Activate+0xd6>
	/*       using function:                                                    */
	/*       "LL_ADC_REG_StartConversion();"                                    */

	/*## Operation on ADC hierarchical scope: ADC group injected ###############*/
	/* Note: Feature not available on this STM32 series */
}
 80050ac:	46c0      	nop			@ (mov r8, r8)
 80050ae:	46bd      	mov	sp, r7
 80050b0:	b004      	add	sp, #16
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	200008b2 	.word	0x200008b2
 80050b8:	200008b3 	.word	0x200008b3
 80050bc:	40012400 	.word	0x40012400
 80050c0:	200000b8 	.word	0x200000b8
 80050c4:	00030d40 	.word	0x00030d40

080050c8 <monitor_adc>:

int8_t monitor_adc()
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	af00      	add	r7, sp, #0
	if(adc_err_int)
 80050cc:	4b06      	ldr	r3, [pc, #24]	@ (80050e8 <monitor_adc+0x20>)
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d004      	beq.n	80050e0 <monitor_adc+0x18>
	{
		adc_err_int = 0;
 80050d6:	4b04      	ldr	r3, [pc, #16]	@ (80050e8 <monitor_adc+0x20>)
 80050d8:	2200      	movs	r2, #0
 80050da:	701a      	strb	r2, [r3, #0]
		return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	e000      	b.n	80050e2 <monitor_adc+0x1a>
	}
	return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	0018      	movs	r0, r3
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	200008b3 	.word	0x200008b3

080050ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b082      	sub	sp, #8
 80050f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050f2:	4b0f      	ldr	r3, [pc, #60]	@ (8005130 <HAL_MspInit+0x44>)
 80050f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80050f6:	4b0e      	ldr	r3, [pc, #56]	@ (8005130 <HAL_MspInit+0x44>)
 80050f8:	2101      	movs	r1, #1
 80050fa:	430a      	orrs	r2, r1
 80050fc:	641a      	str	r2, [r3, #64]	@ 0x40
 80050fe:	4b0c      	ldr	r3, [pc, #48]	@ (8005130 <HAL_MspInit+0x44>)
 8005100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005102:	2201      	movs	r2, #1
 8005104:	4013      	ands	r3, r2
 8005106:	607b      	str	r3, [r7, #4]
 8005108:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800510a:	4b09      	ldr	r3, [pc, #36]	@ (8005130 <HAL_MspInit+0x44>)
 800510c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800510e:	4b08      	ldr	r3, [pc, #32]	@ (8005130 <HAL_MspInit+0x44>)
 8005110:	2180      	movs	r1, #128	@ 0x80
 8005112:	0549      	lsls	r1, r1, #21
 8005114:	430a      	orrs	r2, r1
 8005116:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005118:	4b05      	ldr	r3, [pc, #20]	@ (8005130 <HAL_MspInit+0x44>)
 800511a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800511c:	2380      	movs	r3, #128	@ 0x80
 800511e:	055b      	lsls	r3, r3, #21
 8005120:	4013      	ands	r3, r2
 8005122:	603b      	str	r3, [r7, #0]
 8005124:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005126:	46c0      	nop			@ (mov r8, r8)
 8005128:	46bd      	mov	sp, r7
 800512a:	b002      	add	sp, #8
 800512c:	bd80      	pop	{r7, pc}
 800512e:	46c0      	nop			@ (mov r8, r8)
 8005130:	40021000 	.word	0x40021000

08005134 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005134:	b590      	push	{r4, r7, lr}
 8005136:	b093      	sub	sp, #76	@ 0x4c
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800513c:	2334      	movs	r3, #52	@ 0x34
 800513e:	18fb      	adds	r3, r7, r3
 8005140:	0018      	movs	r0, r3
 8005142:	2314      	movs	r3, #20
 8005144:	001a      	movs	r2, r3
 8005146:	2100      	movs	r1, #0
 8005148:	f008 f83e 	bl	800d1c8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800514c:	2414      	movs	r4, #20
 800514e:	193b      	adds	r3, r7, r4
 8005150:	0018      	movs	r0, r3
 8005152:	2320      	movs	r3, #32
 8005154:	001a      	movs	r2, r3
 8005156:	2100      	movs	r1, #0
 8005158:	f008 f836 	bl	800d1c8 <memset>
  if(hi2c->Instance==I2C1)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a51      	ldr	r2, [pc, #324]	@ (80052a8 <HAL_I2C_MspInit+0x174>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d000      	beq.n	8005168 <HAL_I2C_MspInit+0x34>
 8005166:	e09a      	b.n	800529e <HAL_I2C_MspInit+0x16a>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8005168:	193b      	adds	r3, r7, r4
 800516a:	2202      	movs	r2, #2
 800516c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800516e:	193b      	adds	r3, r7, r4
 8005170:	2200      	movs	r2, #0
 8005172:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005174:	193b      	adds	r3, r7, r4
 8005176:	0018      	movs	r0, r3
 8005178:	f004 fa70 	bl	800965c <HAL_RCCEx_PeriphCLKConfig>
 800517c:	1e03      	subs	r3, r0, #0
 800517e:	d001      	beq.n	8005184 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8005180:	f7ff f882 	bl	8004288 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005184:	4b49      	ldr	r3, [pc, #292]	@ (80052ac <HAL_I2C_MspInit+0x178>)
 8005186:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005188:	4b48      	ldr	r3, [pc, #288]	@ (80052ac <HAL_I2C_MspInit+0x178>)
 800518a:	2101      	movs	r1, #1
 800518c:	430a      	orrs	r2, r1
 800518e:	635a      	str	r2, [r3, #52]	@ 0x34
 8005190:	4b46      	ldr	r3, [pc, #280]	@ (80052ac <HAL_I2C_MspInit+0x178>)
 8005192:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005194:	2201      	movs	r2, #1
 8005196:	4013      	ands	r3, r2
 8005198:	613b      	str	r3, [r7, #16]
 800519a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9 [PA11]     ------> I2C1_SCL
    PA10 [PA12]     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800519c:	2134      	movs	r1, #52	@ 0x34
 800519e:	187b      	adds	r3, r7, r1
 80051a0:	22c0      	movs	r2, #192	@ 0xc0
 80051a2:	00d2      	lsls	r2, r2, #3
 80051a4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80051a6:	187b      	adds	r3, r7, r1
 80051a8:	2212      	movs	r2, #18
 80051aa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051ac:	187b      	adds	r3, r7, r1
 80051ae:	2200      	movs	r2, #0
 80051b0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051b2:	187b      	adds	r3, r7, r1
 80051b4:	2200      	movs	r2, #0
 80051b6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80051b8:	187b      	adds	r3, r7, r1
 80051ba:	2206      	movs	r2, #6
 80051bc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051be:	187a      	adds	r2, r7, r1
 80051c0:	23a0      	movs	r3, #160	@ 0xa0
 80051c2:	05db      	lsls	r3, r3, #23
 80051c4:	0011      	movs	r1, r2
 80051c6:	0018      	movs	r0, r3
 80051c8:	f001 f9f8 	bl	80065bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80051cc:	4b37      	ldr	r3, [pc, #220]	@ (80052ac <HAL_I2C_MspInit+0x178>)
 80051ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80051d0:	4b36      	ldr	r3, [pc, #216]	@ (80052ac <HAL_I2C_MspInit+0x178>)
 80051d2:	2180      	movs	r1, #128	@ 0x80
 80051d4:	0389      	lsls	r1, r1, #14
 80051d6:	430a      	orrs	r2, r1
 80051d8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80051da:	4b34      	ldr	r3, [pc, #208]	@ (80052ac <HAL_I2C_MspInit+0x178>)
 80051dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80051de:	2380      	movs	r3, #128	@ 0x80
 80051e0:	039b      	lsls	r3, r3, #14
 80051e2:	4013      	ands	r3, r2
 80051e4:	60fb      	str	r3, [r7, #12]
 80051e6:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel4;
 80051e8:	4b31      	ldr	r3, [pc, #196]	@ (80052b0 <HAL_I2C_MspInit+0x17c>)
 80051ea:	4a32      	ldr	r2, [pc, #200]	@ (80052b4 <HAL_I2C_MspInit+0x180>)
 80051ec:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 80051ee:	4b30      	ldr	r3, [pc, #192]	@ (80052b0 <HAL_I2C_MspInit+0x17c>)
 80051f0:	220a      	movs	r2, #10
 80051f2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80051f4:	4b2e      	ldr	r3, [pc, #184]	@ (80052b0 <HAL_I2C_MspInit+0x17c>)
 80051f6:	2200      	movs	r2, #0
 80051f8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80051fa:	4b2d      	ldr	r3, [pc, #180]	@ (80052b0 <HAL_I2C_MspInit+0x17c>)
 80051fc:	2200      	movs	r2, #0
 80051fe:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005200:	4b2b      	ldr	r3, [pc, #172]	@ (80052b0 <HAL_I2C_MspInit+0x17c>)
 8005202:	2280      	movs	r2, #128	@ 0x80
 8005204:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005206:	4b2a      	ldr	r3, [pc, #168]	@ (80052b0 <HAL_I2C_MspInit+0x17c>)
 8005208:	2200      	movs	r2, #0
 800520a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800520c:	4b28      	ldr	r3, [pc, #160]	@ (80052b0 <HAL_I2C_MspInit+0x17c>)
 800520e:	2200      	movs	r2, #0
 8005210:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8005212:	4b27      	ldr	r3, [pc, #156]	@ (80052b0 <HAL_I2C_MspInit+0x17c>)
 8005214:	2200      	movs	r2, #0
 8005216:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005218:	4b25      	ldr	r3, [pc, #148]	@ (80052b0 <HAL_I2C_MspInit+0x17c>)
 800521a:	2280      	movs	r2, #128	@ 0x80
 800521c:	0152      	lsls	r2, r2, #5
 800521e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8005220:	4b23      	ldr	r3, [pc, #140]	@ (80052b0 <HAL_I2C_MspInit+0x17c>)
 8005222:	0018      	movs	r0, r3
 8005224:	f000 fe0c 	bl	8005e40 <HAL_DMA_Init>
 8005228:	1e03      	subs	r3, r0, #0
 800522a:	d001      	beq.n	8005230 <HAL_I2C_MspInit+0xfc>
    {
      Error_Handler();
 800522c:	f7ff f82c 	bl	8004288 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a1f      	ldr	r2, [pc, #124]	@ (80052b0 <HAL_I2C_MspInit+0x17c>)
 8005234:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005236:	4b1e      	ldr	r3, [pc, #120]	@ (80052b0 <HAL_I2C_MspInit+0x17c>)
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel5;
 800523c:	4b1e      	ldr	r3, [pc, #120]	@ (80052b8 <HAL_I2C_MspInit+0x184>)
 800523e:	4a1f      	ldr	r2, [pc, #124]	@ (80052bc <HAL_I2C_MspInit+0x188>)
 8005240:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8005242:	4b1d      	ldr	r3, [pc, #116]	@ (80052b8 <HAL_I2C_MspInit+0x184>)
 8005244:	220b      	movs	r2, #11
 8005246:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005248:	4b1b      	ldr	r3, [pc, #108]	@ (80052b8 <HAL_I2C_MspInit+0x184>)
 800524a:	2210      	movs	r2, #16
 800524c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800524e:	4b1a      	ldr	r3, [pc, #104]	@ (80052b8 <HAL_I2C_MspInit+0x184>)
 8005250:	2200      	movs	r2, #0
 8005252:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005254:	4b18      	ldr	r3, [pc, #96]	@ (80052b8 <HAL_I2C_MspInit+0x184>)
 8005256:	2280      	movs	r2, #128	@ 0x80
 8005258:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800525a:	4b17      	ldr	r3, [pc, #92]	@ (80052b8 <HAL_I2C_MspInit+0x184>)
 800525c:	2200      	movs	r2, #0
 800525e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005260:	4b15      	ldr	r3, [pc, #84]	@ (80052b8 <HAL_I2C_MspInit+0x184>)
 8005262:	2200      	movs	r2, #0
 8005264:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8005266:	4b14      	ldr	r3, [pc, #80]	@ (80052b8 <HAL_I2C_MspInit+0x184>)
 8005268:	2200      	movs	r2, #0
 800526a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800526c:	4b12      	ldr	r3, [pc, #72]	@ (80052b8 <HAL_I2C_MspInit+0x184>)
 800526e:	2200      	movs	r2, #0
 8005270:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8005272:	4b11      	ldr	r3, [pc, #68]	@ (80052b8 <HAL_I2C_MspInit+0x184>)
 8005274:	0018      	movs	r0, r3
 8005276:	f000 fde3 	bl	8005e40 <HAL_DMA_Init>
 800527a:	1e03      	subs	r3, r0, #0
 800527c:	d001      	beq.n	8005282 <HAL_I2C_MspInit+0x14e>
    {
      Error_Handler();
 800527e:	f7ff f803 	bl	8004288 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a0c      	ldr	r2, [pc, #48]	@ (80052b8 <HAL_I2C_MspInit+0x184>)
 8005286:	639a      	str	r2, [r3, #56]	@ 0x38
 8005288:	4b0b      	ldr	r3, [pc, #44]	@ (80052b8 <HAL_I2C_MspInit+0x184>)
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 3, 0);
 800528e:	2200      	movs	r2, #0
 8005290:	2103      	movs	r1, #3
 8005292:	2017      	movs	r0, #23
 8005294:	f000 fd92 	bl	8005dbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8005298:	2017      	movs	r0, #23
 800529a:	f000 fda4 	bl	8005de6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800529e:	46c0      	nop			@ (mov r8, r8)
 80052a0:	46bd      	mov	sp, r7
 80052a2:	b013      	add	sp, #76	@ 0x4c
 80052a4:	bd90      	pop	{r4, r7, pc}
 80052a6:	46c0      	nop			@ (mov r8, r8)
 80052a8:	40005400 	.word	0x40005400
 80052ac:	40021000 	.word	0x40021000
 80052b0:	20000358 	.word	0x20000358
 80052b4:	40020044 	.word	0x40020044
 80052b8:	200003b4 	.word	0x200003b4
 80052bc:	40020058 	.word	0x40020058

080052c0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a14      	ldr	r2, [pc, #80]	@ (8005320 <HAL_I2C_MspDeInit+0x60>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d122      	bne.n	8005318 <HAL_I2C_MspDeInit+0x58>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80052d2:	4b14      	ldr	r3, [pc, #80]	@ (8005324 <HAL_I2C_MspDeInit+0x64>)
 80052d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80052d6:	4b13      	ldr	r3, [pc, #76]	@ (8005324 <HAL_I2C_MspDeInit+0x64>)
 80052d8:	4913      	ldr	r1, [pc, #76]	@ (8005328 <HAL_I2C_MspDeInit+0x68>)
 80052da:	400a      	ands	r2, r1
 80052dc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /**I2C1 GPIO Configuration
    PA9 [PA11]     ------> I2C1_SCL
    PA10 [PA12]     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9);
 80052de:	2380      	movs	r3, #128	@ 0x80
 80052e0:	009a      	lsls	r2, r3, #2
 80052e2:	23a0      	movs	r3, #160	@ 0xa0
 80052e4:	05db      	lsls	r3, r3, #23
 80052e6:	0011      	movs	r1, r2
 80052e8:	0018      	movs	r0, r3
 80052ea:	f001 fad9 	bl	80068a0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_10);
 80052ee:	2380      	movs	r3, #128	@ 0x80
 80052f0:	00da      	lsls	r2, r3, #3
 80052f2:	23a0      	movs	r3, #160	@ 0xa0
 80052f4:	05db      	lsls	r3, r3, #23
 80052f6:	0011      	movs	r1, r2
 80052f8:	0018      	movs	r0, r3
 80052fa:	f001 fad1 	bl	80068a0 <HAL_GPIO_DeInit>

    /* I2C1 DMA DeInit */
    HAL_DMA_DeInit(hi2c->hdmarx);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005302:	0018      	movs	r0, r3
 8005304:	f000 fe26 	bl	8005f54 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hi2c->hdmatx);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800530c:	0018      	movs	r0, r3
 800530e:	f000 fe21 	bl	8005f54 <HAL_DMA_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_IRQn);
 8005312:	2017      	movs	r0, #23
 8005314:	f000 fd77 	bl	8005e06 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8005318:	46c0      	nop			@ (mov r8, r8)
 800531a:	46bd      	mov	sp, r7
 800531c:	b002      	add	sp, #8
 800531e:	bd80      	pop	{r7, pc}
 8005320:	40005400 	.word	0x40005400
 8005324:	40021000 	.word	0x40021000
 8005328:	ffdfffff 	.word	0xffdfffff

0800532c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800532c:	b590      	push	{r4, r7, lr}
 800532e:	b093      	sub	sp, #76	@ 0x4c
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005334:	2334      	movs	r3, #52	@ 0x34
 8005336:	18fb      	adds	r3, r7, r3
 8005338:	0018      	movs	r0, r3
 800533a:	2314      	movs	r3, #20
 800533c:	001a      	movs	r2, r3
 800533e:	2100      	movs	r1, #0
 8005340:	f007 ff42 	bl	800d1c8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005344:	2414      	movs	r4, #20
 8005346:	193b      	adds	r3, r7, r4
 8005348:	0018      	movs	r0, r3
 800534a:	2320      	movs	r3, #32
 800534c:	001a      	movs	r2, r3
 800534e:	2100      	movs	r1, #0
 8005350:	f007 ff3a 	bl	800d1c8 <memset>
  if(hspi->Instance==SPI1)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a34      	ldr	r2, [pc, #208]	@ (800542c <HAL_SPI_MspInit+0x100>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d162      	bne.n	8005424 <HAL_SPI_MspInit+0xf8>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 800535e:	193b      	adds	r3, r7, r4
 8005360:	2204      	movs	r2, #4
 8005362:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 8005364:	193b      	adds	r3, r7, r4
 8005366:	2200      	movs	r2, #0
 8005368:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800536a:	193b      	adds	r3, r7, r4
 800536c:	0018      	movs	r0, r3
 800536e:	f004 f975 	bl	800965c <HAL_RCCEx_PeriphCLKConfig>
 8005372:	1e03      	subs	r3, r0, #0
 8005374:	d001      	beq.n	800537a <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8005376:	f7fe ff87 	bl	8004288 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800537a:	4b2d      	ldr	r3, [pc, #180]	@ (8005430 <HAL_SPI_MspInit+0x104>)
 800537c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800537e:	4b2c      	ldr	r3, [pc, #176]	@ (8005430 <HAL_SPI_MspInit+0x104>)
 8005380:	2180      	movs	r1, #128	@ 0x80
 8005382:	0149      	lsls	r1, r1, #5
 8005384:	430a      	orrs	r2, r1
 8005386:	641a      	str	r2, [r3, #64]	@ 0x40
 8005388:	4b29      	ldr	r3, [pc, #164]	@ (8005430 <HAL_SPI_MspInit+0x104>)
 800538a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800538c:	2380      	movs	r3, #128	@ 0x80
 800538e:	015b      	lsls	r3, r3, #5
 8005390:	4013      	ands	r3, r2
 8005392:	613b      	str	r3, [r7, #16]
 8005394:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005396:	4b26      	ldr	r3, [pc, #152]	@ (8005430 <HAL_SPI_MspInit+0x104>)
 8005398:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800539a:	4b25      	ldr	r3, [pc, #148]	@ (8005430 <HAL_SPI_MspInit+0x104>)
 800539c:	2101      	movs	r1, #1
 800539e:	430a      	orrs	r2, r1
 80053a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80053a2:	4b23      	ldr	r3, [pc, #140]	@ (8005430 <HAL_SPI_MspInit+0x104>)
 80053a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053a6:	2201      	movs	r2, #1
 80053a8:	4013      	ands	r3, r2
 80053aa:	60fb      	str	r3, [r7, #12]
 80053ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80053ae:	4b20      	ldr	r3, [pc, #128]	@ (8005430 <HAL_SPI_MspInit+0x104>)
 80053b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053b2:	4b1f      	ldr	r3, [pc, #124]	@ (8005430 <HAL_SPI_MspInit+0x104>)
 80053b4:	2102      	movs	r1, #2
 80053b6:	430a      	orrs	r2, r1
 80053b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80053ba:	4b1d      	ldr	r3, [pc, #116]	@ (8005430 <HAL_SPI_MspInit+0x104>)
 80053bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053be:	2202      	movs	r2, #2
 80053c0:	4013      	ands	r3, r2
 80053c2:	60bb      	str	r3, [r7, #8]
 80053c4:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA11 [PA9]     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80053c6:	2134      	movs	r1, #52	@ 0x34
 80053c8:	187b      	adds	r3, r7, r1
 80053ca:	2280      	movs	r2, #128	@ 0x80
 80053cc:	0112      	lsls	r2, r2, #4
 80053ce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053d0:	000c      	movs	r4, r1
 80053d2:	193b      	adds	r3, r7, r4
 80053d4:	2202      	movs	r2, #2
 80053d6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053d8:	193b      	adds	r3, r7, r4
 80053da:	2200      	movs	r2, #0
 80053dc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053de:	193b      	adds	r3, r7, r4
 80053e0:	2200      	movs	r2, #0
 80053e2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80053e4:	193b      	adds	r3, r7, r4
 80053e6:	2200      	movs	r2, #0
 80053e8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053ea:	193a      	adds	r2, r7, r4
 80053ec:	23a0      	movs	r3, #160	@ 0xa0
 80053ee:	05db      	lsls	r3, r3, #23
 80053f0:	0011      	movs	r1, r2
 80053f2:	0018      	movs	r0, r3
 80053f4:	f001 f8e2 	bl	80065bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80053f8:	0021      	movs	r1, r4
 80053fa:	187b      	adds	r3, r7, r1
 80053fc:	2228      	movs	r2, #40	@ 0x28
 80053fe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005400:	187b      	adds	r3, r7, r1
 8005402:	2202      	movs	r2, #2
 8005404:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005406:	187b      	adds	r3, r7, r1
 8005408:	2200      	movs	r2, #0
 800540a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800540c:	187b      	adds	r3, r7, r1
 800540e:	2200      	movs	r2, #0
 8005410:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8005412:	187b      	adds	r3, r7, r1
 8005414:	2200      	movs	r2, #0
 8005416:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005418:	187b      	adds	r3, r7, r1
 800541a:	4a06      	ldr	r2, [pc, #24]	@ (8005434 <HAL_SPI_MspInit+0x108>)
 800541c:	0019      	movs	r1, r3
 800541e:	0010      	movs	r0, r2
 8005420:	f001 f8cc 	bl	80065bc <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8005424:	46c0      	nop			@ (mov r8, r8)
 8005426:	46bd      	mov	sp, r7
 8005428:	b013      	add	sp, #76	@ 0x4c
 800542a:	bd90      	pop	{r4, r7, pc}
 800542c:	40013000 	.word	0x40013000
 8005430:	40021000 	.word	0x40021000
 8005434:	50000400 	.word	0x50000400

08005438 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a0a      	ldr	r2, [pc, #40]	@ (8005470 <HAL_TIM_PWM_MspInit+0x38>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d10d      	bne.n	8005466 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800544a:	4b0a      	ldr	r3, [pc, #40]	@ (8005474 <HAL_TIM_PWM_MspInit+0x3c>)
 800544c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800544e:	4b09      	ldr	r3, [pc, #36]	@ (8005474 <HAL_TIM_PWM_MspInit+0x3c>)
 8005450:	2180      	movs	r1, #128	@ 0x80
 8005452:	0109      	lsls	r1, r1, #4
 8005454:	430a      	orrs	r2, r1
 8005456:	641a      	str	r2, [r3, #64]	@ 0x40
 8005458:	4b06      	ldr	r3, [pc, #24]	@ (8005474 <HAL_TIM_PWM_MspInit+0x3c>)
 800545a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800545c:	2380      	movs	r3, #128	@ 0x80
 800545e:	011b      	lsls	r3, r3, #4
 8005460:	4013      	ands	r3, r2
 8005462:	60fb      	str	r3, [r7, #12]
 8005464:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8005466:	46c0      	nop			@ (mov r8, r8)
 8005468:	46bd      	mov	sp, r7
 800546a:	b004      	add	sp, #16
 800546c:	bd80      	pop	{r7, pc}
 800546e:	46c0      	nop			@ (mov r8, r8)
 8005470:	40012c00 	.word	0x40012c00
 8005474:	40021000 	.word	0x40021000

08005478 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a0e      	ldr	r2, [pc, #56]	@ (80054c0 <HAL_TIM_Base_MspInit+0x48>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d115      	bne.n	80054b6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 800548a:	4b0e      	ldr	r3, [pc, #56]	@ (80054c4 <HAL_TIM_Base_MspInit+0x4c>)
 800548c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800548e:	4b0d      	ldr	r3, [pc, #52]	@ (80054c4 <HAL_TIM_Base_MspInit+0x4c>)
 8005490:	2180      	movs	r1, #128	@ 0x80
 8005492:	0209      	lsls	r1, r1, #8
 8005494:	430a      	orrs	r2, r1
 8005496:	641a      	str	r2, [r3, #64]	@ 0x40
 8005498:	4b0a      	ldr	r3, [pc, #40]	@ (80054c4 <HAL_TIM_Base_MspInit+0x4c>)
 800549a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800549c:	2380      	movs	r3, #128	@ 0x80
 800549e:	021b      	lsls	r3, r3, #8
 80054a0:	4013      	ands	r3, r2
 80054a2:	60fb      	str	r3, [r7, #12]
 80054a4:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 80054a6:	2200      	movs	r2, #0
 80054a8:	2100      	movs	r1, #0
 80054aa:	2013      	movs	r0, #19
 80054ac:	f000 fc86 	bl	8005dbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80054b0:	2013      	movs	r0, #19
 80054b2:	f000 fc98 	bl	8005de6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM14_MspInit 1 */

  }

}
 80054b6:	46c0      	nop			@ (mov r8, r8)
 80054b8:	46bd      	mov	sp, r7
 80054ba:	b004      	add	sp, #16
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	46c0      	nop			@ (mov r8, r8)
 80054c0:	40002000 	.word	0x40002000
 80054c4:	40021000 	.word	0x40021000

080054c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80054c8:	b590      	push	{r4, r7, lr}
 80054ca:	b089      	sub	sp, #36	@ 0x24
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054d0:	240c      	movs	r4, #12
 80054d2:	193b      	adds	r3, r7, r4
 80054d4:	0018      	movs	r0, r3
 80054d6:	2314      	movs	r3, #20
 80054d8:	001a      	movs	r2, r3
 80054da:	2100      	movs	r1, #0
 80054dc:	f007 fe74 	bl	800d1c8 <memset>
  if(htim->Instance==TIM1)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a15      	ldr	r2, [pc, #84]	@ (800553c <HAL_TIM_MspPostInit+0x74>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d123      	bne.n	8005532 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054ea:	4b15      	ldr	r3, [pc, #84]	@ (8005540 <HAL_TIM_MspPostInit+0x78>)
 80054ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80054ee:	4b14      	ldr	r3, [pc, #80]	@ (8005540 <HAL_TIM_MspPostInit+0x78>)
 80054f0:	2101      	movs	r1, #1
 80054f2:	430a      	orrs	r2, r1
 80054f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80054f6:	4b12      	ldr	r3, [pc, #72]	@ (8005540 <HAL_TIM_MspPostInit+0x78>)
 80054f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054fa:	2201      	movs	r2, #1
 80054fc:	4013      	ands	r3, r2
 80054fe:	60bb      	str	r3, [r7, #8]
 8005500:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA15     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = Actuator_PWM_Pin;
 8005502:	193b      	adds	r3, r7, r4
 8005504:	2280      	movs	r2, #128	@ 0x80
 8005506:	0212      	lsls	r2, r2, #8
 8005508:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800550a:	0021      	movs	r1, r4
 800550c:	187b      	adds	r3, r7, r1
 800550e:	2202      	movs	r2, #2
 8005510:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005512:	187b      	adds	r3, r7, r1
 8005514:	2200      	movs	r2, #0
 8005516:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005518:	187b      	adds	r3, r7, r1
 800551a:	2200      	movs	r2, #0
 800551c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800551e:	187b      	adds	r3, r7, r1
 8005520:	2202      	movs	r2, #2
 8005522:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(Actuator_PWM_GPIO_Port, &GPIO_InitStruct);
 8005524:	187a      	adds	r2, r7, r1
 8005526:	23a0      	movs	r3, #160	@ 0xa0
 8005528:	05db      	lsls	r3, r3, #23
 800552a:	0011      	movs	r1, r2
 800552c:	0018      	movs	r0, r3
 800552e:	f001 f845 	bl	80065bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005532:	46c0      	nop			@ (mov r8, r8)
 8005534:	46bd      	mov	sp, r7
 8005536:	b009      	add	sp, #36	@ 0x24
 8005538:	bd90      	pop	{r4, r7, pc}
 800553a:	46c0      	nop			@ (mov r8, r8)
 800553c:	40012c00 	.word	0x40012c00
 8005540:	40021000 	.word	0x40021000

08005544 <HAL_TIM_Base_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b082      	sub	sp, #8
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a07      	ldr	r2, [pc, #28]	@ (8005570 <HAL_TIM_Base_MspDeInit+0x2c>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d108      	bne.n	8005568 <HAL_TIM_Base_MspDeInit+0x24>
  {
  /* USER CODE BEGIN TIM14_MspDeInit 0 */

  /* USER CODE END TIM14_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM14_CLK_DISABLE();
 8005556:	4b07      	ldr	r3, [pc, #28]	@ (8005574 <HAL_TIM_Base_MspDeInit+0x30>)
 8005558:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800555a:	4b06      	ldr	r3, [pc, #24]	@ (8005574 <HAL_TIM_Base_MspDeInit+0x30>)
 800555c:	4906      	ldr	r1, [pc, #24]	@ (8005578 <HAL_TIM_Base_MspDeInit+0x34>)
 800555e:	400a      	ands	r2, r1
 8005560:	641a      	str	r2, [r3, #64]	@ 0x40

    /* TIM14 interrupt DeInit */
    HAL_NVIC_DisableIRQ(TIM14_IRQn);
 8005562:	2013      	movs	r0, #19
 8005564:	f000 fc4f 	bl	8005e06 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN TIM14_MspDeInit 1 */

  /* USER CODE END TIM14_MspDeInit 1 */
  }

}
 8005568:	46c0      	nop			@ (mov r8, r8)
 800556a:	46bd      	mov	sp, r7
 800556c:	b002      	add	sp, #8
 800556e:	bd80      	pop	{r7, pc}
 8005570:	40002000 	.word	0x40002000
 8005574:	40021000 	.word	0x40021000
 8005578:	ffff7fff 	.word	0xffff7fff

0800557c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800557c:	b590      	push	{r4, r7, lr}
 800557e:	b095      	sub	sp, #84	@ 0x54
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005584:	233c      	movs	r3, #60	@ 0x3c
 8005586:	18fb      	adds	r3, r7, r3
 8005588:	0018      	movs	r0, r3
 800558a:	2314      	movs	r3, #20
 800558c:	001a      	movs	r2, r3
 800558e:	2100      	movs	r1, #0
 8005590:	f007 fe1a 	bl	800d1c8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005594:	241c      	movs	r4, #28
 8005596:	193b      	adds	r3, r7, r4
 8005598:	0018      	movs	r0, r3
 800559a:	2320      	movs	r3, #32
 800559c:	001a      	movs	r2, r3
 800559e:	2100      	movs	r1, #0
 80055a0:	f007 fe12 	bl	800d1c8 <memset>
  if(huart->Instance==USART1)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a74      	ldr	r2, [pc, #464]	@ (800577c <HAL_UART_MspInit+0x200>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d000      	beq.n	80055b0 <HAL_UART_MspInit+0x34>
 80055ae:	e0e1      	b.n	8005774 <HAL_UART_MspInit+0x1f8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80055b0:	193b      	adds	r3, r7, r4
 80055b2:	2201      	movs	r2, #1
 80055b4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80055b6:	193b      	adds	r3, r7, r4
 80055b8:	2200      	movs	r2, #0
 80055ba:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80055bc:	193b      	adds	r3, r7, r4
 80055be:	0018      	movs	r0, r3
 80055c0:	f004 f84c 	bl	800965c <HAL_RCCEx_PeriphCLKConfig>
 80055c4:	1e03      	subs	r3, r0, #0
 80055c6:	d001      	beq.n	80055cc <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80055c8:	f7fe fe5e 	bl	8004288 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80055cc:	4b6c      	ldr	r3, [pc, #432]	@ (8005780 <HAL_UART_MspInit+0x204>)
 80055ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80055d0:	4b6b      	ldr	r3, [pc, #428]	@ (8005780 <HAL_UART_MspInit+0x204>)
 80055d2:	2180      	movs	r1, #128	@ 0x80
 80055d4:	01c9      	lsls	r1, r1, #7
 80055d6:	430a      	orrs	r2, r1
 80055d8:	641a      	str	r2, [r3, #64]	@ 0x40
 80055da:	4b69      	ldr	r3, [pc, #420]	@ (8005780 <HAL_UART_MspInit+0x204>)
 80055dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80055de:	2380      	movs	r3, #128	@ 0x80
 80055e0:	01db      	lsls	r3, r3, #7
 80055e2:	4013      	ands	r3, r2
 80055e4:	61bb      	str	r3, [r7, #24]
 80055e6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80055e8:	4b65      	ldr	r3, [pc, #404]	@ (8005780 <HAL_UART_MspInit+0x204>)
 80055ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055ec:	4b64      	ldr	r3, [pc, #400]	@ (8005780 <HAL_UART_MspInit+0x204>)
 80055ee:	2104      	movs	r1, #4
 80055f0:	430a      	orrs	r2, r1
 80055f2:	635a      	str	r2, [r3, #52]	@ 0x34
 80055f4:	4b62      	ldr	r3, [pc, #392]	@ (8005780 <HAL_UART_MspInit+0x204>)
 80055f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055f8:	2204      	movs	r2, #4
 80055fa:	4013      	ands	r3, r2
 80055fc:	617b      	str	r3, [r7, #20]
 80055fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005600:	4b5f      	ldr	r3, [pc, #380]	@ (8005780 <HAL_UART_MspInit+0x204>)
 8005602:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005604:	4b5e      	ldr	r3, [pc, #376]	@ (8005780 <HAL_UART_MspInit+0x204>)
 8005606:	2102      	movs	r1, #2
 8005608:	430a      	orrs	r2, r1
 800560a:	635a      	str	r2, [r3, #52]	@ 0x34
 800560c:	4b5c      	ldr	r3, [pc, #368]	@ (8005780 <HAL_UART_MspInit+0x204>)
 800560e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005610:	2202      	movs	r2, #2
 8005612:	4013      	ands	r3, r2
 8005614:	613b      	str	r3, [r7, #16]
 8005616:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005618:	4b59      	ldr	r3, [pc, #356]	@ (8005780 <HAL_UART_MspInit+0x204>)
 800561a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800561c:	4b58      	ldr	r3, [pc, #352]	@ (8005780 <HAL_UART_MspInit+0x204>)
 800561e:	2101      	movs	r1, #1
 8005620:	430a      	orrs	r2, r1
 8005622:	635a      	str	r2, [r3, #52]	@ 0x34
 8005624:	4b56      	ldr	r3, [pc, #344]	@ (8005780 <HAL_UART_MspInit+0x204>)
 8005626:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005628:	2201      	movs	r2, #1
 800562a:	4013      	ands	r3, r2
 800562c:	60fb      	str	r3, [r7, #12]
 800562e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC14-OSCX_IN(PC14)     ------> USART1_TX
    PB2     ------> USART1_RX
    PA12 [PA10]     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8005630:	213c      	movs	r1, #60	@ 0x3c
 8005632:	187b      	adds	r3, r7, r1
 8005634:	2280      	movs	r2, #128	@ 0x80
 8005636:	01d2      	lsls	r2, r2, #7
 8005638:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800563a:	000c      	movs	r4, r1
 800563c:	193b      	adds	r3, r7, r4
 800563e:	2202      	movs	r2, #2
 8005640:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005642:	193b      	adds	r3, r7, r4
 8005644:	2200      	movs	r2, #0
 8005646:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005648:	193b      	adds	r3, r7, r4
 800564a:	2200      	movs	r2, #0
 800564c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 800564e:	193b      	adds	r3, r7, r4
 8005650:	2200      	movs	r2, #0
 8005652:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005654:	193b      	adds	r3, r7, r4
 8005656:	4a4b      	ldr	r2, [pc, #300]	@ (8005784 <HAL_UART_MspInit+0x208>)
 8005658:	0019      	movs	r1, r3
 800565a:	0010      	movs	r0, r2
 800565c:	f000 ffae 	bl	80065bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005660:	193b      	adds	r3, r7, r4
 8005662:	2204      	movs	r2, #4
 8005664:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005666:	193b      	adds	r3, r7, r4
 8005668:	2202      	movs	r2, #2
 800566a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800566c:	193b      	adds	r3, r7, r4
 800566e:	2200      	movs	r2, #0
 8005670:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005672:	193b      	adds	r3, r7, r4
 8005674:	2200      	movs	r2, #0
 8005676:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8005678:	193b      	adds	r3, r7, r4
 800567a:	2200      	movs	r2, #0
 800567c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800567e:	193b      	adds	r3, r7, r4
 8005680:	4a41      	ldr	r2, [pc, #260]	@ (8005788 <HAL_UART_MspInit+0x20c>)
 8005682:	0019      	movs	r1, r3
 8005684:	0010      	movs	r0, r2
 8005686:	f000 ff99 	bl	80065bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800568a:	0021      	movs	r1, r4
 800568c:	187b      	adds	r3, r7, r1
 800568e:	2280      	movs	r2, #128	@ 0x80
 8005690:	0152      	lsls	r2, r2, #5
 8005692:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005694:	187b      	adds	r3, r7, r1
 8005696:	2202      	movs	r2, #2
 8005698:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800569a:	187b      	adds	r3, r7, r1
 800569c:	2200      	movs	r2, #0
 800569e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056a0:	187b      	adds	r3, r7, r1
 80056a2:	2200      	movs	r2, #0
 80056a4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80056a6:	187b      	adds	r3, r7, r1
 80056a8:	2201      	movs	r2, #1
 80056aa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056ac:	187a      	adds	r2, r7, r1
 80056ae:	23a0      	movs	r3, #160	@ 0xa0
 80056b0:	05db      	lsls	r3, r3, #23
 80056b2:	0011      	movs	r1, r2
 80056b4:	0018      	movs	r0, r3
 80056b6:	f000 ff81 	bl	80065bc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 80056ba:	4b34      	ldr	r3, [pc, #208]	@ (800578c <HAL_UART_MspInit+0x210>)
 80056bc:	4a34      	ldr	r2, [pc, #208]	@ (8005790 <HAL_UART_MspInit+0x214>)
 80056be:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80056c0:	4b32      	ldr	r3, [pc, #200]	@ (800578c <HAL_UART_MspInit+0x210>)
 80056c2:	2232      	movs	r2, #50	@ 0x32
 80056c4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80056c6:	4b31      	ldr	r3, [pc, #196]	@ (800578c <HAL_UART_MspInit+0x210>)
 80056c8:	2200      	movs	r2, #0
 80056ca:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80056cc:	4b2f      	ldr	r3, [pc, #188]	@ (800578c <HAL_UART_MspInit+0x210>)
 80056ce:	2200      	movs	r2, #0
 80056d0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80056d2:	4b2e      	ldr	r3, [pc, #184]	@ (800578c <HAL_UART_MspInit+0x210>)
 80056d4:	2280      	movs	r2, #128	@ 0x80
 80056d6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80056d8:	4b2c      	ldr	r3, [pc, #176]	@ (800578c <HAL_UART_MspInit+0x210>)
 80056da:	2200      	movs	r2, #0
 80056dc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80056de:	4b2b      	ldr	r3, [pc, #172]	@ (800578c <HAL_UART_MspInit+0x210>)
 80056e0:	2200      	movs	r2, #0
 80056e2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80056e4:	4b29      	ldr	r3, [pc, #164]	@ (800578c <HAL_UART_MspInit+0x210>)
 80056e6:	2200      	movs	r2, #0
 80056e8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80056ea:	4b28      	ldr	r3, [pc, #160]	@ (800578c <HAL_UART_MspInit+0x210>)
 80056ec:	22c0      	movs	r2, #192	@ 0xc0
 80056ee:	0192      	lsls	r2, r2, #6
 80056f0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80056f2:	4b26      	ldr	r3, [pc, #152]	@ (800578c <HAL_UART_MspInit+0x210>)
 80056f4:	0018      	movs	r0, r3
 80056f6:	f000 fba3 	bl	8005e40 <HAL_DMA_Init>
 80056fa:	1e03      	subs	r3, r0, #0
 80056fc:	d001      	beq.n	8005702 <HAL_UART_MspInit+0x186>
    {
      Error_Handler();
 80056fe:	f7fe fdc3 	bl	8004288 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2180      	movs	r1, #128	@ 0x80
 8005706:	4a21      	ldr	r2, [pc, #132]	@ (800578c <HAL_UART_MspInit+0x210>)
 8005708:	505a      	str	r2, [r3, r1]
 800570a:	4b20      	ldr	r3, [pc, #128]	@ (800578c <HAL_UART_MspInit+0x210>)
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel3;
 8005710:	4b20      	ldr	r3, [pc, #128]	@ (8005794 <HAL_UART_MspInit+0x218>)
 8005712:	4a21      	ldr	r2, [pc, #132]	@ (8005798 <HAL_UART_MspInit+0x21c>)
 8005714:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8005716:	4b1f      	ldr	r3, [pc, #124]	@ (8005794 <HAL_UART_MspInit+0x218>)
 8005718:	2233      	movs	r2, #51	@ 0x33
 800571a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800571c:	4b1d      	ldr	r3, [pc, #116]	@ (8005794 <HAL_UART_MspInit+0x218>)
 800571e:	2210      	movs	r2, #16
 8005720:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005722:	4b1c      	ldr	r3, [pc, #112]	@ (8005794 <HAL_UART_MspInit+0x218>)
 8005724:	2200      	movs	r2, #0
 8005726:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005728:	4b1a      	ldr	r3, [pc, #104]	@ (8005794 <HAL_UART_MspInit+0x218>)
 800572a:	2280      	movs	r2, #128	@ 0x80
 800572c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800572e:	4b19      	ldr	r3, [pc, #100]	@ (8005794 <HAL_UART_MspInit+0x218>)
 8005730:	2200      	movs	r2, #0
 8005732:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005734:	4b17      	ldr	r3, [pc, #92]	@ (8005794 <HAL_UART_MspInit+0x218>)
 8005736:	2200      	movs	r2, #0
 8005738:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800573a:	4b16      	ldr	r3, [pc, #88]	@ (8005794 <HAL_UART_MspInit+0x218>)
 800573c:	2200      	movs	r2, #0
 800573e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8005740:	4b14      	ldr	r3, [pc, #80]	@ (8005794 <HAL_UART_MspInit+0x218>)
 8005742:	2280      	movs	r2, #128	@ 0x80
 8005744:	0192      	lsls	r2, r2, #6
 8005746:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005748:	4b12      	ldr	r3, [pc, #72]	@ (8005794 <HAL_UART_MspInit+0x218>)
 800574a:	0018      	movs	r0, r3
 800574c:	f000 fb78 	bl	8005e40 <HAL_DMA_Init>
 8005750:	1e03      	subs	r3, r0, #0
 8005752:	d001      	beq.n	8005758 <HAL_UART_MspInit+0x1dc>
    {
      Error_Handler();
 8005754:	f7fe fd98 	bl	8004288 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	4a0e      	ldr	r2, [pc, #56]	@ (8005794 <HAL_UART_MspInit+0x218>)
 800575c:	67da      	str	r2, [r3, #124]	@ 0x7c
 800575e:	4b0d      	ldr	r3, [pc, #52]	@ (8005794 <HAL_UART_MspInit+0x218>)
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005764:	2200      	movs	r2, #0
 8005766:	2100      	movs	r1, #0
 8005768:	201b      	movs	r0, #27
 800576a:	f000 fb27 	bl	8005dbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800576e:	201b      	movs	r0, #27
 8005770:	f000 fb39 	bl	8005de6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8005774:	46c0      	nop			@ (mov r8, r8)
 8005776:	46bd      	mov	sp, r7
 8005778:	b015      	add	sp, #84	@ 0x54
 800577a:	bd90      	pop	{r4, r7, pc}
 800577c:	40013800 	.word	0x40013800
 8005780:	40021000 	.word	0x40021000
 8005784:	50000800 	.word	0x50000800
 8005788:	50000400 	.word	0x50000400
 800578c:	200005a0 	.word	0x200005a0
 8005790:	4002001c 	.word	0x4002001c
 8005794:	200005fc 	.word	0x200005fc
 8005798:	40020030 	.word	0x40020030

0800579c <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b082      	sub	sp, #8
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a17      	ldr	r2, [pc, #92]	@ (8005808 <HAL_UART_MspDeInit+0x6c>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d127      	bne.n	80057fe <HAL_UART_MspDeInit+0x62>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80057ae:	4b17      	ldr	r3, [pc, #92]	@ (800580c <HAL_UART_MspDeInit+0x70>)
 80057b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80057b2:	4b16      	ldr	r3, [pc, #88]	@ (800580c <HAL_UART_MspDeInit+0x70>)
 80057b4:	4916      	ldr	r1, [pc, #88]	@ (8005810 <HAL_UART_MspDeInit+0x74>)
 80057b6:	400a      	ands	r2, r1
 80057b8:	641a      	str	r2, [r3, #64]	@ 0x40
    /**USART1 GPIO Configuration
    PC14-OSCX_IN(PC14)     ------> USART1_TX
    PB2     ------> USART1_RX
    PA12 [PA10]     ------> USART1_DE
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_14);
 80057ba:	2380      	movs	r3, #128	@ 0x80
 80057bc:	01db      	lsls	r3, r3, #7
 80057be:	4a15      	ldr	r2, [pc, #84]	@ (8005814 <HAL_UART_MspDeInit+0x78>)
 80057c0:	0019      	movs	r1, r3
 80057c2:	0010      	movs	r0, r2
 80057c4:	f001 f86c 	bl	80068a0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2);
 80057c8:	4b13      	ldr	r3, [pc, #76]	@ (8005818 <HAL_UART_MspDeInit+0x7c>)
 80057ca:	2104      	movs	r1, #4
 80057cc:	0018      	movs	r0, r3
 80057ce:	f001 f867 	bl	80068a0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_12);
 80057d2:	2380      	movs	r3, #128	@ 0x80
 80057d4:	015a      	lsls	r2, r3, #5
 80057d6:	23a0      	movs	r3, #160	@ 0xa0
 80057d8:	05db      	lsls	r3, r3, #23
 80057da:	0011      	movs	r1, r2
 80057dc:	0018      	movs	r0, r3
 80057de:	f001 f85f 	bl	80068a0 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2280      	movs	r2, #128	@ 0x80
 80057e6:	589b      	ldr	r3, [r3, r2]
 80057e8:	0018      	movs	r0, r3
 80057ea:	f000 fbb3 	bl	8005f54 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80057f2:	0018      	movs	r0, r3
 80057f4:	f000 fbae 	bl	8005f54 <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80057f8:	201b      	movs	r0, #27
 80057fa:	f000 fb04 	bl	8005e06 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 80057fe:	46c0      	nop			@ (mov r8, r8)
 8005800:	46bd      	mov	sp, r7
 8005802:	b002      	add	sp, #8
 8005804:	bd80      	pop	{r7, pc}
 8005806:	46c0      	nop			@ (mov r8, r8)
 8005808:	40013800 	.word	0x40013800
 800580c:	40021000 	.word	0x40021000
 8005810:	ffffbfff 	.word	0xffffbfff
 8005814:	50000800 	.word	0x50000800
 8005818:	50000400 	.word	0x50000400

0800581c <LL_ADC_IsActiveFlag_OVR>:
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b082      	sub	sp, #8
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_OVR) == (LL_ADC_FLAG_OVR)) ? 1UL : 0UL);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	2210      	movs	r2, #16
 800582a:	4013      	ands	r3, r2
 800582c:	2b10      	cmp	r3, #16
 800582e:	d101      	bne.n	8005834 <LL_ADC_IsActiveFlag_OVR+0x18>
 8005830:	2301      	movs	r3, #1
 8005832:	e000      	b.n	8005836 <LL_ADC_IsActiveFlag_OVR+0x1a>
 8005834:	2300      	movs	r3, #0
}
 8005836:	0018      	movs	r0, r3
 8005838:	46bd      	mov	sp, r7
 800583a:	b002      	add	sp, #8
 800583c:	bd80      	pop	{r7, pc}

0800583e <LL_ADC_ClearFlag_OVR>:
{
 800583e:	b580      	push	{r7, lr}
 8005840:	b082      	sub	sp, #8
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_OVR);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2210      	movs	r2, #16
 800584a:	601a      	str	r2, [r3, #0]
}
 800584c:	46c0      	nop			@ (mov r8, r8)
 800584e:	46bd      	mov	sp, r7
 8005850:	b002      	add	sp, #8
 8005852:	bd80      	pop	{r7, pc}

08005854 <LL_DMA_IsActiveFlag_TC1>:
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b082      	sub	sp, #8
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF1) == (DMA_ISR_TCIF1)) ? 1UL : 0UL);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	2202      	movs	r2, #2
 8005862:	4013      	ands	r3, r2
 8005864:	2b02      	cmp	r3, #2
 8005866:	d101      	bne.n	800586c <LL_DMA_IsActiveFlag_TC1+0x18>
 8005868:	2301      	movs	r3, #1
 800586a:	e000      	b.n	800586e <LL_DMA_IsActiveFlag_TC1+0x1a>
 800586c:	2300      	movs	r3, #0
}
 800586e:	0018      	movs	r0, r3
 8005870:	46bd      	mov	sp, r7
 8005872:	b002      	add	sp, #8
 8005874:	bd80      	pop	{r7, pc}

08005876 <LL_DMA_IsActiveFlag_HT1>:
{
 8005876:	b580      	push	{r7, lr}
 8005878:	b082      	sub	sp, #8
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF1) == (DMA_ISR_HTIF1)) ? 1UL : 0UL);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	2204      	movs	r2, #4
 8005884:	4013      	ands	r3, r2
 8005886:	2b04      	cmp	r3, #4
 8005888:	d101      	bne.n	800588e <LL_DMA_IsActiveFlag_HT1+0x18>
 800588a:	2301      	movs	r3, #1
 800588c:	e000      	b.n	8005890 <LL_DMA_IsActiveFlag_HT1+0x1a>
 800588e:	2300      	movs	r3, #0
}
 8005890:	0018      	movs	r0, r3
 8005892:	46bd      	mov	sp, r7
 8005894:	b002      	add	sp, #8
 8005896:	bd80      	pop	{r7, pc}

08005898 <LL_DMA_IsActiveFlag_TE1>:
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF1) == (DMA_ISR_TEIF1)) ? 1UL : 0UL);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2208      	movs	r2, #8
 80058a6:	4013      	ands	r3, r2
 80058a8:	2b08      	cmp	r3, #8
 80058aa:	d101      	bne.n	80058b0 <LL_DMA_IsActiveFlag_TE1+0x18>
 80058ac:	2301      	movs	r3, #1
 80058ae:	e000      	b.n	80058b2 <LL_DMA_IsActiveFlag_TE1+0x1a>
 80058b0:	2300      	movs	r3, #0
}
 80058b2:	0018      	movs	r0, r3
 80058b4:	46bd      	mov	sp, r7
 80058b6:	b002      	add	sp, #8
 80058b8:	bd80      	pop	{r7, pc}

080058ba <LL_DMA_ClearFlag_TC1>:
{
 80058ba:	b580      	push	{r7, lr}
 80058bc:	b082      	sub	sp, #8
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2202      	movs	r2, #2
 80058c6:	605a      	str	r2, [r3, #4]
}
 80058c8:	46c0      	nop			@ (mov r8, r8)
 80058ca:	46bd      	mov	sp, r7
 80058cc:	b002      	add	sp, #8
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <LL_DMA_ClearFlag_HT1>:
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b082      	sub	sp, #8
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF1);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2204      	movs	r2, #4
 80058dc:	605a      	str	r2, [r3, #4]
}
 80058de:	46c0      	nop			@ (mov r8, r8)
 80058e0:	46bd      	mov	sp, r7
 80058e2:	b002      	add	sp, #8
 80058e4:	bd80      	pop	{r7, pc}

080058e6 <LL_DMA_ClearFlag_TE1>:
{
 80058e6:	b580      	push	{r7, lr}
 80058e8:	b082      	sub	sp, #8
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF1);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2208      	movs	r2, #8
 80058f2:	605a      	str	r2, [r3, #4]
}
 80058f4:	46c0      	nop			@ (mov r8, r8)
 80058f6:	46bd      	mov	sp, r7
 80058f8:	b002      	add	sp, #8
 80058fa:	bd80      	pop	{r7, pc}

080058fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005900:	46c0      	nop			@ (mov r8, r8)
 8005902:	e7fd      	b.n	8005900 <NMI_Handler+0x4>

08005904 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005908:	46c0      	nop			@ (mov r8, r8)
 800590a:	e7fd      	b.n	8005908 <HardFault_Handler+0x4>

0800590c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005910:	46c0      	nop			@ (mov r8, r8)
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}

08005916 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005916:	b580      	push	{r7, lr}
 8005918:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800591a:	46c0      	nop			@ (mov r8, r8)
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005924:	f000 f93c 	bl	8005ba0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005928:	46c0      	nop			@ (mov r8, r8)
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}

0800592e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800592e:	b580      	push	{r7, lr}
 8005930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encoder_Pulse_A_Pin);
 8005932:	2380      	movs	r3, #128	@ 0x80
 8005934:	019b      	lsls	r3, r3, #6
 8005936:	0018      	movs	r0, r3
 8005938:	f001 f8c4 	bl	8006ac4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800593c:	46c0      	nop			@ (mov r8, r8)
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
	...

08005944 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
  /* Check whether DMA transfer complete caused the DMA interruption */
  if(LL_DMA_IsActiveFlag_TC1(DMA1) == 1)
 8005948:	4b15      	ldr	r3, [pc, #84]	@ (80059a0 <DMA1_Channel1_IRQHandler+0x5c>)
 800594a:	0018      	movs	r0, r3
 800594c:	f7ff ff82 	bl	8005854 <LL_DMA_IsActiveFlag_TC1>
 8005950:	0003      	movs	r3, r0
 8005952:	2b01      	cmp	r3, #1
 8005954:	d106      	bne.n	8005964 <DMA1_Channel1_IRQHandler+0x20>
  {
	/* Clear flag DMA transfer complete */
	LL_DMA_ClearFlag_TC1(DMA1);
 8005956:	4b12      	ldr	r3, [pc, #72]	@ (80059a0 <DMA1_Channel1_IRQHandler+0x5c>)
 8005958:	0018      	movs	r0, r3
 800595a:	f7ff ffae 	bl	80058ba <LL_DMA_ClearFlag_TC1>

	/* Call interruption treatment function */
	ADC_ConvCpltCallback();
 800595e:	f7ff fb0b 	bl	8004f78 <ADC_ConvCpltCallback>
 8005962:	e00c      	b.n	800597e <DMA1_Channel1_IRQHandler+0x3a>
  }
  else if(LL_DMA_IsActiveFlag_HT1(DMA1) == 1)
 8005964:	4b0e      	ldr	r3, [pc, #56]	@ (80059a0 <DMA1_Channel1_IRQHandler+0x5c>)
 8005966:	0018      	movs	r0, r3
 8005968:	f7ff ff85 	bl	8005876 <LL_DMA_IsActiveFlag_HT1>
 800596c:	0003      	movs	r3, r0
 800596e:	2b01      	cmp	r3, #1
 8005970:	d105      	bne.n	800597e <DMA1_Channel1_IRQHandler+0x3a>
  {
	  /* Clear flag DMA half transfer complete */
	  LL_DMA_ClearFlag_HT1(DMA1);
 8005972:	4b0b      	ldr	r3, [pc, #44]	@ (80059a0 <DMA1_Channel1_IRQHandler+0x5c>)
 8005974:	0018      	movs	r0, r3
 8005976:	f7ff ffab 	bl	80058d0 <LL_DMA_ClearFlag_HT1>

	  /* Call interruption treatment function */
	  ADC_ConvHalfCpltCallback();
 800597a:	f7ff fb07 	bl	8004f8c <ADC_ConvHalfCpltCallback>
  }
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
  /* Check whether DMA transfer error caused the DMA interruption */
  if(LL_DMA_IsActiveFlag_TE1(DMA1) == 1)
 800597e:	4b08      	ldr	r3, [pc, #32]	@ (80059a0 <DMA1_Channel1_IRQHandler+0x5c>)
 8005980:	0018      	movs	r0, r3
 8005982:	f7ff ff89 	bl	8005898 <LL_DMA_IsActiveFlag_TE1>
 8005986:	0003      	movs	r3, r0
 8005988:	2b01      	cmp	r3, #1
 800598a:	d105      	bne.n	8005998 <DMA1_Channel1_IRQHandler+0x54>
  {
	  /* Clear flag DMA transfer error */
	  LL_DMA_ClearFlag_TE1(DMA1);
 800598c:	4b04      	ldr	r3, [pc, #16]	@ (80059a0 <DMA1_Channel1_IRQHandler+0x5c>)
 800598e:	0018      	movs	r0, r3
 8005990:	f7ff ffa9 	bl	80058e6 <LL_DMA_ClearFlag_TE1>

	  /* Call interruption treatment function */
	  ADC_ErrorCallback();
 8005994:	f7ff fb04 	bl	8004fa0 <ADC_ErrorCallback>
  }
  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005998:	46c0      	nop			@ (mov r8, r8)
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	46c0      	nop			@ (mov r8, r8)
 80059a0:	40020000 	.word	0x40020000

080059a4 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80059a8:	4b05      	ldr	r3, [pc, #20]	@ (80059c0 <DMA1_Channel2_3_IRQHandler+0x1c>)
 80059aa:	0018      	movs	r0, r3
 80059ac:	f000 fcae 	bl	800630c <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80059b0:	4b04      	ldr	r3, [pc, #16]	@ (80059c4 <DMA1_Channel2_3_IRQHandler+0x20>)
 80059b2:	0018      	movs	r0, r3
 80059b4:	f000 fcaa 	bl	800630c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80059b8:	46c0      	nop			@ (mov r8, r8)
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	46c0      	nop			@ (mov r8, r8)
 80059c0:	200005a0 	.word	0x200005a0
 80059c4:	200005fc 	.word	0x200005fc

080059c8 <DMAMUX1_DMA1_CH4_5_IRQHandler>:

/**
  * @brief This function handles DMAMUX1, DMA1 Channel 4 and 5.
  */
void DMAMUX1_DMA1_CH4_5_IRQHandler(void)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_DMA1_CH4_5_IRQn 0 */

  /* USER CODE END DMAMUX1_DMA1_CH4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80059cc:	4b05      	ldr	r3, [pc, #20]	@ (80059e4 <DMAMUX1_DMA1_CH4_5_IRQHandler+0x1c>)
 80059ce:	0018      	movs	r0, r3
 80059d0:	f000 fc9c 	bl	800630c <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80059d4:	4b04      	ldr	r3, [pc, #16]	@ (80059e8 <DMAMUX1_DMA1_CH4_5_IRQHandler+0x20>)
 80059d6:	0018      	movs	r0, r3
 80059d8:	f000 fc98 	bl	800630c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_DMA1_CH4_5_IRQn 1 */

  /* USER CODE END DMAMUX1_DMA1_CH4_5_IRQn 1 */
}
 80059dc:	46c0      	nop			@ (mov r8, r8)
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	46c0      	nop			@ (mov r8, r8)
 80059e4:	20000358 	.word	0x20000358
 80059e8:	200003b4 	.word	0x200003b4

080059ec <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */
  /* Check whether ADC group regular overrun caused the ADC interruption */
  if(LL_ADC_IsActiveFlag_OVR(ADC1) != 0)
 80059f0:	4b07      	ldr	r3, [pc, #28]	@ (8005a10 <ADC1_IRQHandler+0x24>)
 80059f2:	0018      	movs	r0, r3
 80059f4:	f7ff ff12 	bl	800581c <LL_ADC_IsActiveFlag_OVR>
 80059f8:	1e03      	subs	r3, r0, #0
 80059fa:	d005      	beq.n	8005a08 <ADC1_IRQHandler+0x1c>
  {
	/* Clear flag ADC group regular overrun */
	LL_ADC_ClearFlag_OVR(ADC1);
 80059fc:	4b04      	ldr	r3, [pc, #16]	@ (8005a10 <ADC1_IRQHandler+0x24>)
 80059fe:	0018      	movs	r0, r3
 8005a00:	f7ff ff1d 	bl	800583e <LL_ADC_ClearFlag_OVR>

	/* Call interruption treatment function */
	ADC_ErrorCallback();
 8005a04:	f7ff facc 	bl	8004fa0 <ADC_ErrorCallback>
  }
  /* USER CODE END ADC1_IRQn 0 */
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8005a08:	46c0      	nop			@ (mov r8, r8)
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	46c0      	nop			@ (mov r8, r8)
 8005a10:	40012400 	.word	0x40012400

08005a14 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8005a18:	4b03      	ldr	r3, [pc, #12]	@ (8005a28 <TIM14_IRQHandler+0x14>)
 8005a1a:	0018      	movs	r0, r3
 8005a1c:	f004 fdf4 	bl	800a608 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8005a20:	46c0      	nop			@ (mov r8, r8)
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
 8005a26:	46c0      	nop			@ (mov r8, r8)
 8005a28:	200004c0 	.word	0x200004c0

08005a2c <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 interrupt (combined with EXTI 23).
  */
void I2C1_IRQHandler(void)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8005a30:	4b09      	ldr	r3, [pc, #36]	@ (8005a58 <I2C1_IRQHandler+0x2c>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	699a      	ldr	r2, [r3, #24]
 8005a36:	23e0      	movs	r3, #224	@ 0xe0
 8005a38:	00db      	lsls	r3, r3, #3
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	d004      	beq.n	8005a48 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8005a3e:	4b06      	ldr	r3, [pc, #24]	@ (8005a58 <I2C1_IRQHandler+0x2c>)
 8005a40:	0018      	movs	r0, r3
 8005a42:	f001 fc93 	bl	800736c <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8005a46:	e003      	b.n	8005a50 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8005a48:	4b03      	ldr	r3, [pc, #12]	@ (8005a58 <I2C1_IRQHandler+0x2c>)
 8005a4a:	0018      	movs	r0, r3
 8005a4c:	f001 fc74 	bl	8007338 <HAL_I2C_EV_IRQHandler>
}
 8005a50:	46c0      	nop			@ (mov r8, r8)
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	46c0      	nop			@ (mov r8, r8)
 8005a58:	20000304 	.word	0x20000304

08005a5c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 interrupt.
  */
void USART1_IRQHandler(void)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005a60:	4b03      	ldr	r3, [pc, #12]	@ (8005a70 <USART1_IRQHandler+0x14>)
 8005a62:	0018      	movs	r0, r3
 8005a64:	f005 fe36 	bl	800b6d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005a68:	46c0      	nop			@ (mov r8, r8)
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	46c0      	nop			@ (mov r8, r8)
 8005a70:	2000050c 	.word	0x2000050c

08005a74 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005a78:	4b03      	ldr	r3, [pc, #12]	@ (8005a88 <SystemInit+0x14>)
 8005a7a:	2280      	movs	r2, #128	@ 0x80
 8005a7c:	0512      	lsls	r2, r2, #20
 8005a7e:	609a      	str	r2, [r3, #8]
#endif
}
 8005a80:	46c0      	nop			@ (mov r8, r8)
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	46c0      	nop			@ (mov r8, r8)
 8005a88:	e000ed00 	.word	0xe000ed00

08005a8c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005a8c:	480d      	ldr	r0, [pc, #52]	@ (8005ac4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005a8e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8005a90:	f7ff fff0 	bl	8005a74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005a94:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8005a96:	e003      	b.n	8005aa0 <LoopCopyDataInit>

08005a98 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005a98:	4b0b      	ldr	r3, [pc, #44]	@ (8005ac8 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8005a9a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005a9c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8005a9e:	3104      	adds	r1, #4

08005aa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005aa0:	480a      	ldr	r0, [pc, #40]	@ (8005acc <LoopForever+0xa>)
  ldr r3, =_edata
 8005aa2:	4b0b      	ldr	r3, [pc, #44]	@ (8005ad0 <LoopForever+0xe>)
  adds r2, r0, r1
 8005aa4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8005aa6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8005aa8:	d3f6      	bcc.n	8005a98 <CopyDataInit>
  ldr r2, =_sbss
 8005aaa:	4a0a      	ldr	r2, [pc, #40]	@ (8005ad4 <LoopForever+0x12>)
  b LoopFillZerobss
 8005aac:	e002      	b.n	8005ab4 <LoopFillZerobss>

08005aae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8005aae:	2300      	movs	r3, #0
  str  r3, [r2]
 8005ab0:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005ab2:	3204      	adds	r2, #4

08005ab4 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8005ab4:	4b08      	ldr	r3, [pc, #32]	@ (8005ad8 <LoopForever+0x16>)
  cmp r2, r3
 8005ab6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8005ab8:	d3f9      	bcc.n	8005aae <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8005aba:	f007 fb8d 	bl	800d1d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005abe:	f7fd fba9 	bl	8003214 <main>

08005ac2 <LoopForever>:

LoopForever:
    b LoopForever
 8005ac2:	e7fe      	b.n	8005ac2 <LoopForever>
  ldr   r0, =_estack
 8005ac4:	20006000 	.word	0x20006000
  ldr r3, =_sidata
 8005ac8:	0800d6dc 	.word	0x0800d6dc
  ldr r0, =_sdata
 8005acc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8005ad0:	200000c4 	.word	0x200000c4
  ldr r2, =_sbss
 8005ad4:	200000c4 	.word	0x200000c4
  ldr r3, = _ebss
 8005ad8:	200008b8 	.word	0x200008b8

08005adc <EXTI0_1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005adc:	e7fe      	b.n	8005adc <EXTI0_1_IRQHandler>

08005ade <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005ade:	b580      	push	{r7, lr}
 8005ae0:	b082      	sub	sp, #8
 8005ae2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005ae4:	1dfb      	adds	r3, r7, #7
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005aea:	2003      	movs	r0, #3
 8005aec:	f000 f80e 	bl	8005b0c <HAL_InitTick>
 8005af0:	1e03      	subs	r3, r0, #0
 8005af2:	d003      	beq.n	8005afc <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8005af4:	1dfb      	adds	r3, r7, #7
 8005af6:	2201      	movs	r2, #1
 8005af8:	701a      	strb	r2, [r3, #0]
 8005afa:	e001      	b.n	8005b00 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005afc:	f7ff faf6 	bl	80050ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005b00:	1dfb      	adds	r3, r7, #7
 8005b02:	781b      	ldrb	r3, [r3, #0]
}
 8005b04:	0018      	movs	r0, r3
 8005b06:	46bd      	mov	sp, r7
 8005b08:	b002      	add	sp, #8
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005b0c:	b590      	push	{r4, r7, lr}
 8005b0e:	b085      	sub	sp, #20
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005b14:	230f      	movs	r3, #15
 8005b16:	18fb      	adds	r3, r7, r3
 8005b18:	2200      	movs	r2, #0
 8005b1a:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8005b1c:	4b1d      	ldr	r3, [pc, #116]	@ (8005b94 <HAL_InitTick+0x88>)
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d02b      	beq.n	8005b7c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8005b24:	4b1c      	ldr	r3, [pc, #112]	@ (8005b98 <HAL_InitTick+0x8c>)
 8005b26:	681c      	ldr	r4, [r3, #0]
 8005b28:	4b1a      	ldr	r3, [pc, #104]	@ (8005b94 <HAL_InitTick+0x88>)
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	0019      	movs	r1, r3
 8005b2e:	23fa      	movs	r3, #250	@ 0xfa
 8005b30:	0098      	lsls	r0, r3, #2
 8005b32:	f7fa fae9 	bl	8000108 <__udivsi3>
 8005b36:	0003      	movs	r3, r0
 8005b38:	0019      	movs	r1, r3
 8005b3a:	0020      	movs	r0, r4
 8005b3c:	f7fa fae4 	bl	8000108 <__udivsi3>
 8005b40:	0003      	movs	r3, r0
 8005b42:	0018      	movs	r0, r3
 8005b44:	f000 f96f 	bl	8005e26 <HAL_SYSTICK_Config>
 8005b48:	1e03      	subs	r3, r0, #0
 8005b4a:	d112      	bne.n	8005b72 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2b03      	cmp	r3, #3
 8005b50:	d80a      	bhi.n	8005b68 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005b52:	6879      	ldr	r1, [r7, #4]
 8005b54:	2301      	movs	r3, #1
 8005b56:	425b      	negs	r3, r3
 8005b58:	2200      	movs	r2, #0
 8005b5a:	0018      	movs	r0, r3
 8005b5c:	f000 f92e 	bl	8005dbc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005b60:	4b0e      	ldr	r3, [pc, #56]	@ (8005b9c <HAL_InitTick+0x90>)
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	601a      	str	r2, [r3, #0]
 8005b66:	e00d      	b.n	8005b84 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8005b68:	230f      	movs	r3, #15
 8005b6a:	18fb      	adds	r3, r7, r3
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	701a      	strb	r2, [r3, #0]
 8005b70:	e008      	b.n	8005b84 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005b72:	230f      	movs	r3, #15
 8005b74:	18fb      	adds	r3, r7, r3
 8005b76:	2201      	movs	r2, #1
 8005b78:	701a      	strb	r2, [r3, #0]
 8005b7a:	e003      	b.n	8005b84 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005b7c:	230f      	movs	r3, #15
 8005b7e:	18fb      	adds	r3, r7, r3
 8005b80:	2201      	movs	r2, #1
 8005b82:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8005b84:	230f      	movs	r3, #15
 8005b86:	18fb      	adds	r3, r7, r3
 8005b88:	781b      	ldrb	r3, [r3, #0]
}
 8005b8a:	0018      	movs	r0, r3
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	b005      	add	sp, #20
 8005b90:	bd90      	pop	{r4, r7, pc}
 8005b92:	46c0      	nop			@ (mov r8, r8)
 8005b94:	200000c0 	.word	0x200000c0
 8005b98:	200000b8 	.word	0x200000b8
 8005b9c:	200000bc 	.word	0x200000bc

08005ba0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005ba4:	4b05      	ldr	r3, [pc, #20]	@ (8005bbc <HAL_IncTick+0x1c>)
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	001a      	movs	r2, r3
 8005baa:	4b05      	ldr	r3, [pc, #20]	@ (8005bc0 <HAL_IncTick+0x20>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	18d2      	adds	r2, r2, r3
 8005bb0:	4b03      	ldr	r3, [pc, #12]	@ (8005bc0 <HAL_IncTick+0x20>)
 8005bb2:	601a      	str	r2, [r3, #0]
}
 8005bb4:	46c0      	nop			@ (mov r8, r8)
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	46c0      	nop			@ (mov r8, r8)
 8005bbc:	200000c0 	.word	0x200000c0
 8005bc0:	200008b4 	.word	0x200008b4

08005bc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	af00      	add	r7, sp, #0
  return uwTick;
 8005bc8:	4b02      	ldr	r3, [pc, #8]	@ (8005bd4 <HAL_GetTick+0x10>)
 8005bca:	681b      	ldr	r3, [r3, #0]
}
 8005bcc:	0018      	movs	r0, r3
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	46c0      	nop			@ (mov r8, r8)
 8005bd4:	200008b4 	.word	0x200008b4

08005bd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005be0:	f7ff fff0 	bl	8005bc4 <HAL_GetTick>
 8005be4:	0003      	movs	r3, r0
 8005be6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	3301      	adds	r3, #1
 8005bf0:	d005      	beq.n	8005bfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8005c1c <HAL_Delay+0x44>)
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	001a      	movs	r2, r3
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	189b      	adds	r3, r3, r2
 8005bfc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005bfe:	46c0      	nop			@ (mov r8, r8)
 8005c00:	f7ff ffe0 	bl	8005bc4 <HAL_GetTick>
 8005c04:	0002      	movs	r2, r0
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	1ad3      	subs	r3, r2, r3
 8005c0a:	68fa      	ldr	r2, [r7, #12]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d8f7      	bhi.n	8005c00 <HAL_Delay+0x28>
  {
  }
}
 8005c10:	46c0      	nop			@ (mov r8, r8)
 8005c12:	46c0      	nop			@ (mov r8, r8)
 8005c14:	46bd      	mov	sp, r7
 8005c16:	b004      	add	sp, #16
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	46c0      	nop			@ (mov r8, r8)
 8005c1c:	200000c0 	.word	0x200000c0

08005c20 <__NVIC_EnableIRQ>:
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b082      	sub	sp, #8
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	0002      	movs	r2, r0
 8005c28:	1dfb      	adds	r3, r7, #7
 8005c2a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005c2c:	1dfb      	adds	r3, r7, #7
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c32:	d809      	bhi.n	8005c48 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c34:	1dfb      	adds	r3, r7, #7
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	001a      	movs	r2, r3
 8005c3a:	231f      	movs	r3, #31
 8005c3c:	401a      	ands	r2, r3
 8005c3e:	4b04      	ldr	r3, [pc, #16]	@ (8005c50 <__NVIC_EnableIRQ+0x30>)
 8005c40:	2101      	movs	r1, #1
 8005c42:	4091      	lsls	r1, r2
 8005c44:	000a      	movs	r2, r1
 8005c46:	601a      	str	r2, [r3, #0]
}
 8005c48:	46c0      	nop			@ (mov r8, r8)
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	b002      	add	sp, #8
 8005c4e:	bd80      	pop	{r7, pc}
 8005c50:	e000e100 	.word	0xe000e100

08005c54 <__NVIC_DisableIRQ>:
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b082      	sub	sp, #8
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	0002      	movs	r2, r0
 8005c5c:	1dfb      	adds	r3, r7, #7
 8005c5e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005c60:	1dfb      	adds	r3, r7, #7
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c66:	d810      	bhi.n	8005c8a <__NVIC_DisableIRQ+0x36>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c68:	1dfb      	adds	r3, r7, #7
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	001a      	movs	r2, r3
 8005c6e:	231f      	movs	r3, #31
 8005c70:	4013      	ands	r3, r2
 8005c72:	4908      	ldr	r1, [pc, #32]	@ (8005c94 <__NVIC_DisableIRQ+0x40>)
 8005c74:	2201      	movs	r2, #1
 8005c76:	409a      	lsls	r2, r3
 8005c78:	0013      	movs	r3, r2
 8005c7a:	2280      	movs	r2, #128	@ 0x80
 8005c7c:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005c7e:	f3bf 8f4f 	dsb	sy
}
 8005c82:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8005c84:	f3bf 8f6f 	isb	sy
}
 8005c88:	46c0      	nop			@ (mov r8, r8)
}
 8005c8a:	46c0      	nop			@ (mov r8, r8)
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	b002      	add	sp, #8
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	46c0      	nop			@ (mov r8, r8)
 8005c94:	e000e100 	.word	0xe000e100

08005c98 <__NVIC_SetPriority>:
{
 8005c98:	b590      	push	{r4, r7, lr}
 8005c9a:	b083      	sub	sp, #12
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	0002      	movs	r2, r0
 8005ca0:	6039      	str	r1, [r7, #0]
 8005ca2:	1dfb      	adds	r3, r7, #7
 8005ca4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005ca6:	1dfb      	adds	r3, r7, #7
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	2b7f      	cmp	r3, #127	@ 0x7f
 8005cac:	d828      	bhi.n	8005d00 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005cae:	4a2f      	ldr	r2, [pc, #188]	@ (8005d6c <__NVIC_SetPriority+0xd4>)
 8005cb0:	1dfb      	adds	r3, r7, #7
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	b25b      	sxtb	r3, r3
 8005cb6:	089b      	lsrs	r3, r3, #2
 8005cb8:	33c0      	adds	r3, #192	@ 0xc0
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	589b      	ldr	r3, [r3, r2]
 8005cbe:	1dfa      	adds	r2, r7, #7
 8005cc0:	7812      	ldrb	r2, [r2, #0]
 8005cc2:	0011      	movs	r1, r2
 8005cc4:	2203      	movs	r2, #3
 8005cc6:	400a      	ands	r2, r1
 8005cc8:	00d2      	lsls	r2, r2, #3
 8005cca:	21ff      	movs	r1, #255	@ 0xff
 8005ccc:	4091      	lsls	r1, r2
 8005cce:	000a      	movs	r2, r1
 8005cd0:	43d2      	mvns	r2, r2
 8005cd2:	401a      	ands	r2, r3
 8005cd4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	019b      	lsls	r3, r3, #6
 8005cda:	22ff      	movs	r2, #255	@ 0xff
 8005cdc:	401a      	ands	r2, r3
 8005cde:	1dfb      	adds	r3, r7, #7
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	0018      	movs	r0, r3
 8005ce4:	2303      	movs	r3, #3
 8005ce6:	4003      	ands	r3, r0
 8005ce8:	00db      	lsls	r3, r3, #3
 8005cea:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005cec:	481f      	ldr	r0, [pc, #124]	@ (8005d6c <__NVIC_SetPriority+0xd4>)
 8005cee:	1dfb      	adds	r3, r7, #7
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	b25b      	sxtb	r3, r3
 8005cf4:	089b      	lsrs	r3, r3, #2
 8005cf6:	430a      	orrs	r2, r1
 8005cf8:	33c0      	adds	r3, #192	@ 0xc0
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	501a      	str	r2, [r3, r0]
}
 8005cfe:	e031      	b.n	8005d64 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005d00:	4a1b      	ldr	r2, [pc, #108]	@ (8005d70 <__NVIC_SetPriority+0xd8>)
 8005d02:	1dfb      	adds	r3, r7, #7
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	0019      	movs	r1, r3
 8005d08:	230f      	movs	r3, #15
 8005d0a:	400b      	ands	r3, r1
 8005d0c:	3b08      	subs	r3, #8
 8005d0e:	089b      	lsrs	r3, r3, #2
 8005d10:	3306      	adds	r3, #6
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	18d3      	adds	r3, r2, r3
 8005d16:	3304      	adds	r3, #4
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	1dfa      	adds	r2, r7, #7
 8005d1c:	7812      	ldrb	r2, [r2, #0]
 8005d1e:	0011      	movs	r1, r2
 8005d20:	2203      	movs	r2, #3
 8005d22:	400a      	ands	r2, r1
 8005d24:	00d2      	lsls	r2, r2, #3
 8005d26:	21ff      	movs	r1, #255	@ 0xff
 8005d28:	4091      	lsls	r1, r2
 8005d2a:	000a      	movs	r2, r1
 8005d2c:	43d2      	mvns	r2, r2
 8005d2e:	401a      	ands	r2, r3
 8005d30:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	019b      	lsls	r3, r3, #6
 8005d36:	22ff      	movs	r2, #255	@ 0xff
 8005d38:	401a      	ands	r2, r3
 8005d3a:	1dfb      	adds	r3, r7, #7
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	0018      	movs	r0, r3
 8005d40:	2303      	movs	r3, #3
 8005d42:	4003      	ands	r3, r0
 8005d44:	00db      	lsls	r3, r3, #3
 8005d46:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005d48:	4809      	ldr	r0, [pc, #36]	@ (8005d70 <__NVIC_SetPriority+0xd8>)
 8005d4a:	1dfb      	adds	r3, r7, #7
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	001c      	movs	r4, r3
 8005d50:	230f      	movs	r3, #15
 8005d52:	4023      	ands	r3, r4
 8005d54:	3b08      	subs	r3, #8
 8005d56:	089b      	lsrs	r3, r3, #2
 8005d58:	430a      	orrs	r2, r1
 8005d5a:	3306      	adds	r3, #6
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	18c3      	adds	r3, r0, r3
 8005d60:	3304      	adds	r3, #4
 8005d62:	601a      	str	r2, [r3, #0]
}
 8005d64:	46c0      	nop			@ (mov r8, r8)
 8005d66:	46bd      	mov	sp, r7
 8005d68:	b003      	add	sp, #12
 8005d6a:	bd90      	pop	{r4, r7, pc}
 8005d6c:	e000e100 	.word	0xe000e100
 8005d70:	e000ed00 	.word	0xe000ed00

08005d74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b082      	sub	sp, #8
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	1e5a      	subs	r2, r3, #1
 8005d80:	2380      	movs	r3, #128	@ 0x80
 8005d82:	045b      	lsls	r3, r3, #17
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d301      	bcc.n	8005d8c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e010      	b.n	8005dae <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005d8c:	4b0a      	ldr	r3, [pc, #40]	@ (8005db8 <SysTick_Config+0x44>)
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	3a01      	subs	r2, #1
 8005d92:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005d94:	2301      	movs	r3, #1
 8005d96:	425b      	negs	r3, r3
 8005d98:	2103      	movs	r1, #3
 8005d9a:	0018      	movs	r0, r3
 8005d9c:	f7ff ff7c 	bl	8005c98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005da0:	4b05      	ldr	r3, [pc, #20]	@ (8005db8 <SysTick_Config+0x44>)
 8005da2:	2200      	movs	r2, #0
 8005da4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005da6:	4b04      	ldr	r3, [pc, #16]	@ (8005db8 <SysTick_Config+0x44>)
 8005da8:	2207      	movs	r2, #7
 8005daa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	0018      	movs	r0, r3
 8005db0:	46bd      	mov	sp, r7
 8005db2:	b002      	add	sp, #8
 8005db4:	bd80      	pop	{r7, pc}
 8005db6:	46c0      	nop			@ (mov r8, r8)
 8005db8:	e000e010 	.word	0xe000e010

08005dbc <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b084      	sub	sp, #16
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60b9      	str	r1, [r7, #8]
 8005dc4:	607a      	str	r2, [r7, #4]
 8005dc6:	210f      	movs	r1, #15
 8005dc8:	187b      	adds	r3, r7, r1
 8005dca:	1c02      	adds	r2, r0, #0
 8005dcc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8005dce:	68ba      	ldr	r2, [r7, #8]
 8005dd0:	187b      	adds	r3, r7, r1
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	b25b      	sxtb	r3, r3
 8005dd6:	0011      	movs	r1, r2
 8005dd8:	0018      	movs	r0, r3
 8005dda:	f7ff ff5d 	bl	8005c98 <__NVIC_SetPriority>
}
 8005dde:	46c0      	nop			@ (mov r8, r8)
 8005de0:	46bd      	mov	sp, r7
 8005de2:	b004      	add	sp, #16
 8005de4:	bd80      	pop	{r7, pc}

08005de6 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005de6:	b580      	push	{r7, lr}
 8005de8:	b082      	sub	sp, #8
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	0002      	movs	r2, r0
 8005dee:	1dfb      	adds	r3, r7, #7
 8005df0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005df2:	1dfb      	adds	r3, r7, #7
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	b25b      	sxtb	r3, r3
 8005df8:	0018      	movs	r0, r3
 8005dfa:	f7ff ff11 	bl	8005c20 <__NVIC_EnableIRQ>
}
 8005dfe:	46c0      	nop			@ (mov r8, r8)
 8005e00:	46bd      	mov	sp, r7
 8005e02:	b002      	add	sp, #8
 8005e04:	bd80      	pop	{r7, pc}

08005e06 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005e06:	b580      	push	{r7, lr}
 8005e08:	b082      	sub	sp, #8
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	0002      	movs	r2, r0
 8005e0e:	1dfb      	adds	r3, r7, #7
 8005e10:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005e12:	1dfb      	adds	r3, r7, #7
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	b25b      	sxtb	r3, r3
 8005e18:	0018      	movs	r0, r3
 8005e1a:	f7ff ff1b 	bl	8005c54 <__NVIC_DisableIRQ>
}
 8005e1e:	46c0      	nop			@ (mov r8, r8)
 8005e20:	46bd      	mov	sp, r7
 8005e22:	b002      	add	sp, #8
 8005e24:	bd80      	pop	{r7, pc}

08005e26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005e26:	b580      	push	{r7, lr}
 8005e28:	b082      	sub	sp, #8
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	0018      	movs	r0, r3
 8005e32:	f7ff ff9f 	bl	8005d74 <SysTick_Config>
 8005e36:	0003      	movs	r3, r0
}
 8005e38:	0018      	movs	r0, r3
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	b002      	add	sp, #8
 8005e3e:	bd80      	pop	{r7, pc}

08005e40 <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b082      	sub	sp, #8
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d101      	bne.n	8005e52 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e077      	b.n	8005f42 <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a3d      	ldr	r2, [pc, #244]	@ (8005f4c <HAL_DMA_Init+0x10c>)
 8005e58:	4694      	mov	ip, r2
 8005e5a:	4463      	add	r3, ip
 8005e5c:	2114      	movs	r1, #20
 8005e5e:	0018      	movs	r0, r3
 8005e60:	f7fa f952 	bl	8000108 <__udivsi3>
 8005e64:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 8005e66:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2225      	movs	r2, #37	@ 0x25
 8005e70:	2102      	movs	r1, #2
 8005e72:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4934      	ldr	r1, [pc, #208]	@ (8005f50 <HAL_DMA_Init+0x110>)
 8005e80:	400a      	ands	r2, r1
 8005e82:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	6819      	ldr	r1, [r3, #0]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	689a      	ldr	r2, [r3, #8]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	431a      	orrs	r2, r3
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	691b      	ldr	r3, [r3, #16]
 8005e98:	431a      	orrs	r2, r3
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	695b      	ldr	r3, [r3, #20]
 8005e9e:	431a      	orrs	r2, r3
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	699b      	ldr	r3, [r3, #24]
 8005ea4:	431a      	orrs	r2, r3
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	69db      	ldr	r3, [r3, #28]
 8005eaa:	431a      	orrs	r2, r3
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6a1b      	ldr	r3, [r3, #32]
 8005eb0:	431a      	orrs	r2, r3
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	430a      	orrs	r2, r1
 8005eb8:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	0018      	movs	r0, r3
 8005ebe:	f000 fb2d 	bl	800651c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	689a      	ldr	r2, [r3, #8]
 8005ec6:	2380      	movs	r3, #128	@ 0x80
 8005ec8:	01db      	lsls	r3, r3, #7
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d102      	bne.n	8005ed4 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	685a      	ldr	r2, [r3, #4]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005edc:	21ff      	movs	r1, #255	@ 0xff
 8005ede:	400a      	ands	r2, r1
 8005ee0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005eea:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d011      	beq.n	8005f18 <HAL_DMA_Init+0xd8>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	2b04      	cmp	r3, #4
 8005efa:	d80d      	bhi.n	8005f18 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	0018      	movs	r0, r3
 8005f00:	f000 fb38 	bl	8006574 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f08:	2200      	movs	r2, #0
 8005f0a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8005f14:	605a      	str	r2, [r3, #4]
 8005f16:	e008      	b.n	8005f2a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2225      	movs	r2, #37	@ 0x25
 8005f34:	2101      	movs	r1, #1
 8005f36:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2224      	movs	r2, #36	@ 0x24
 8005f3c:	2100      	movs	r1, #0
 8005f3e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f40:	2300      	movs	r3, #0
}
 8005f42:	0018      	movs	r0, r3
 8005f44:	46bd      	mov	sp, r7
 8005f46:	b002      	add	sp, #8
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	46c0      	nop			@ (mov r8, r8)
 8005f4c:	bffdfff8 	.word	0xbffdfff8
 8005f50:	ffff800f 	.word	0xffff800f

08005f54 <HAL_DMA_DeInit>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b082      	sub	sp, #8
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d101      	bne.n	8005f66 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e066      	b.n	8006034 <HAL_DMA_DeInit+0xe0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2101      	movs	r1, #1
 8005f72:	438a      	bics	r2, r1
 8005f74:	601a      	str	r2, [r3, #0]

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a30      	ldr	r2, [pc, #192]	@ (800603c <HAL_DMA_DeInit+0xe8>)
 8005f7c:	4694      	mov	ip, r2
 8005f7e:	4463      	add	r3, ip
 8005f80:	2114      	movs	r1, #20
 8005f82:	0018      	movs	r0, r3
 8005f84:	f7fa f8c0 	bl	8000108 <__udivsi3>
 8005f88:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 8005f8a:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	2200      	movs	r2, #0
 8005f96:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8005f98:	4b29      	ldr	r3, [pc, #164]	@ (8006040 <HAL_DMA_DeInit+0xec>)
 8005f9a:	6859      	ldr	r1, [r3, #4]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fa0:	221c      	movs	r2, #28
 8005fa2:	4013      	ands	r3, r2
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	409a      	lsls	r2, r3
 8005fa8:	4b25      	ldr	r3, [pc, #148]	@ (8006040 <HAL_DMA_DeInit+0xec>)
 8005faa:	430a      	orrs	r2, r1
 8005fac:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	0018      	movs	r0, r3
 8005fb2:	f000 fab3 	bl	800651c <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fba:	2200      	movs	r2, #0
 8005fbc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005fc6:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d010      	beq.n	8005ff2 <HAL_DMA_DeInit+0x9e>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	2b04      	cmp	r3, #4
 8005fd6:	d80c      	bhi.n	8005ff2 <HAL_DMA_DeInit+0x9e>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	0018      	movs	r0, r3
 8005fdc:	f000 faca 	bl	8006574 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8005ff0:	605a      	str	r2, [r3, #4]
  }

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2200      	movs	r2, #0
 8006008:	639a      	str	r2, [r3, #56]	@ 0x38

  hdma->DMAmuxRequestGen = 0U;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma->DMAmuxRequestGenStatus = 0U;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2225      	movs	r2, #37	@ 0x25
 8006026:	2100      	movs	r1, #0
 8006028:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2224      	movs	r2, #36	@ 0x24
 800602e:	2100      	movs	r1, #0
 8006030:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006032:	2300      	movs	r3, #0
}
 8006034:	0018      	movs	r0, r3
 8006036:	46bd      	mov	sp, r7
 8006038:	b002      	add	sp, #8
 800603a:	bd80      	pop	{r7, pc}
 800603c:	bffdfff8 	.word	0xbffdfff8
 8006040:	40020000 	.word	0x40020000

08006044 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b086      	sub	sp, #24
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	607a      	str	r2, [r7, #4]
 8006050:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006052:	2317      	movs	r3, #23
 8006054:	18fb      	adds	r3, r7, r3
 8006056:	2200      	movs	r2, #0
 8006058:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2224      	movs	r2, #36	@ 0x24
 800605e:	5c9b      	ldrb	r3, [r3, r2]
 8006060:	2b01      	cmp	r3, #1
 8006062:	d101      	bne.n	8006068 <HAL_DMA_Start_IT+0x24>
 8006064:	2302      	movs	r3, #2
 8006066:	e070      	b.n	800614a <HAL_DMA_Start_IT+0x106>
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2224      	movs	r2, #36	@ 0x24
 800606c:	2101      	movs	r1, #1
 800606e:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2225      	movs	r2, #37	@ 0x25
 8006074:	5c9b      	ldrb	r3, [r3, r2]
 8006076:	b2db      	uxtb	r3, r3
 8006078:	2b01      	cmp	r3, #1
 800607a:	d157      	bne.n	800612c <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2225      	movs	r2, #37	@ 0x25
 8006080:	2102      	movs	r1, #2
 8006082:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2200      	movs	r2, #0
 8006088:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	2101      	movs	r1, #1
 8006096:	438a      	bics	r2, r1
 8006098:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	68b9      	ldr	r1, [r7, #8]
 80060a0:	68f8      	ldr	r0, [r7, #12]
 80060a2:	f000 f9fb 	bl	800649c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d008      	beq.n	80060c0 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	210e      	movs	r1, #14
 80060ba:	430a      	orrs	r2, r1
 80060bc:	601a      	str	r2, [r3, #0]
 80060be:	e00f      	b.n	80060e0 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2104      	movs	r1, #4
 80060cc:	438a      	bics	r2, r1
 80060ce:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	210a      	movs	r1, #10
 80060dc:	430a      	orrs	r2, r1
 80060de:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	2380      	movs	r3, #128	@ 0x80
 80060e8:	025b      	lsls	r3, r3, #9
 80060ea:	4013      	ands	r3, r2
 80060ec:	d008      	beq.n	8006100 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060f8:	2180      	movs	r1, #128	@ 0x80
 80060fa:	0049      	lsls	r1, r1, #1
 80060fc:	430a      	orrs	r2, r1
 80060fe:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006104:	2b00      	cmp	r3, #0
 8006106:	d008      	beq.n	800611a <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006112:	2180      	movs	r1, #128	@ 0x80
 8006114:	0049      	lsls	r1, r1, #1
 8006116:	430a      	orrs	r2, r1
 8006118:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2101      	movs	r1, #1
 8006126:	430a      	orrs	r2, r1
 8006128:	601a      	str	r2, [r3, #0]
 800612a:	e007      	b.n	800613c <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2224      	movs	r2, #36	@ 0x24
 8006130:	2100      	movs	r1, #0
 8006132:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8006134:	2317      	movs	r3, #23
 8006136:	18fb      	adds	r3, r7, r3
 8006138:	2202      	movs	r2, #2
 800613a:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2224      	movs	r2, #36	@ 0x24
 8006140:	2100      	movs	r1, #0
 8006142:	5499      	strb	r1, [r3, r2]

  return status;
 8006144:	2317      	movs	r3, #23
 8006146:	18fb      	adds	r3, r7, r3
 8006148:	781b      	ldrb	r3, [r3, #0]
}
 800614a:	0018      	movs	r0, r3
 800614c:	46bd      	mov	sp, r7
 800614e:	b006      	add	sp, #24
 8006150:	bd80      	pop	{r7, pc}
	...

08006154 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b082      	sub	sp, #8
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d101      	bne.n	8006166 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	e050      	b.n	8006208 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2225      	movs	r2, #37	@ 0x25
 800616a:	5c9b      	ldrb	r3, [r3, r2]
 800616c:	b2db      	uxtb	r3, r3
 800616e:	2b02      	cmp	r3, #2
 8006170:	d008      	beq.n	8006184 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2204      	movs	r2, #4
 8006176:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2224      	movs	r2, #36	@ 0x24
 800617c:	2100      	movs	r1, #0
 800617e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8006180:	2301      	movs	r3, #1
 8006182:	e041      	b.n	8006208 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	210e      	movs	r1, #14
 8006190:	438a      	bics	r2, r1
 8006192:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800619e:	491c      	ldr	r1, [pc, #112]	@ (8006210 <HAL_DMA_Abort+0xbc>)
 80061a0:	400a      	ands	r2, r1
 80061a2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2101      	movs	r1, #1
 80061b0:	438a      	bics	r2, r1
 80061b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 80061b4:	4b17      	ldr	r3, [pc, #92]	@ (8006214 <HAL_DMA_Abort+0xc0>)
 80061b6:	6859      	ldr	r1, [r3, #4]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061bc:	221c      	movs	r2, #28
 80061be:	4013      	ands	r3, r2
 80061c0:	2201      	movs	r2, #1
 80061c2:	409a      	lsls	r2, r3
 80061c4:	4b13      	ldr	r3, [pc, #76]	@ (8006214 <HAL_DMA_Abort+0xc0>)
 80061c6:	430a      	orrs	r2, r1
 80061c8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80061d2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d00c      	beq.n	80061f6 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061e6:	490a      	ldr	r1, [pc, #40]	@ (8006210 <HAL_DMA_Abort+0xbc>)
 80061e8:	400a      	ands	r2, r1
 80061ea:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80061f4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2225      	movs	r2, #37	@ 0x25
 80061fa:	2101      	movs	r1, #1
 80061fc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2224      	movs	r2, #36	@ 0x24
 8006202:	2100      	movs	r1, #0
 8006204:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8006206:	2300      	movs	r3, #0
}
 8006208:	0018      	movs	r0, r3
 800620a:	46bd      	mov	sp, r7
 800620c:	b002      	add	sp, #8
 800620e:	bd80      	pop	{r7, pc}
 8006210:	fffffeff 	.word	0xfffffeff
 8006214:	40020000 	.word	0x40020000

08006218 <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006220:	230f      	movs	r3, #15
 8006222:	18fb      	adds	r3, r7, r3
 8006224:	2200      	movs	r2, #0
 8006226:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2224      	movs	r2, #36	@ 0x24
 800622c:	2100      	movs	r1, #0
 800622e:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2224      	movs	r2, #36	@ 0x24
 8006234:	5c9b      	ldrb	r3, [r3, r2]
 8006236:	2b01      	cmp	r3, #1
 8006238:	d101      	bne.n	800623e <HAL_DMA_Abort_IT+0x26>
 800623a:	2302      	movs	r3, #2
 800623c:	e05e      	b.n	80062fc <HAL_DMA_Abort_IT+0xe4>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2224      	movs	r2, #36	@ 0x24
 8006242:	2101      	movs	r1, #1
 8006244:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2225      	movs	r2, #37	@ 0x25
 800624a:	5c9b      	ldrb	r3, [r3, r2]
 800624c:	b2db      	uxtb	r3, r3
 800624e:	2b02      	cmp	r3, #2
 8006250:	d007      	beq.n	8006262 <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2204      	movs	r2, #4
 8006256:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8006258:	230f      	movs	r3, #15
 800625a:	18fb      	adds	r3, r7, r3
 800625c:	2201      	movs	r2, #1
 800625e:	701a      	strb	r2, [r3, #0]
 8006260:	e049      	b.n	80062f6 <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	210e      	movs	r1, #14
 800626e:	438a      	bics	r2, r1
 8006270:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	2101      	movs	r1, #1
 800627e:	438a      	bics	r2, r1
 8006280:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800628c:	491d      	ldr	r1, [pc, #116]	@ (8006304 <HAL_DMA_Abort_IT+0xec>)
 800628e:	400a      	ands	r2, r1
 8006290:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 8006292:	4b1d      	ldr	r3, [pc, #116]	@ (8006308 <HAL_DMA_Abort_IT+0xf0>)
 8006294:	6859      	ldr	r1, [r3, #4]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800629a:	221c      	movs	r2, #28
 800629c:	4013      	ands	r3, r2
 800629e:	2201      	movs	r2, #1
 80062a0:	409a      	lsls	r2, r3
 80062a2:	4b19      	ldr	r3, [pc, #100]	@ (8006308 <HAL_DMA_Abort_IT+0xf0>)
 80062a4:	430a      	orrs	r2, r1
 80062a6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80062b0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d00c      	beq.n	80062d4 <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062c4:	490f      	ldr	r1, [pc, #60]	@ (8006304 <HAL_DMA_Abort_IT+0xec>)
 80062c6:	400a      	ands	r2, r1
 80062c8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80062d2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2225      	movs	r2, #37	@ 0x25
 80062d8:	2101      	movs	r1, #1
 80062da:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2224      	movs	r2, #36	@ 0x24
 80062e0:	2100      	movs	r1, #0
 80062e2:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d004      	beq.n	80062f6 <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	0010      	movs	r0, r2
 80062f4:	4798      	blx	r3
    }
  }
  return status;
 80062f6:	230f      	movs	r3, #15
 80062f8:	18fb      	adds	r3, r7, r3
 80062fa:	781b      	ldrb	r3, [r3, #0]
}
 80062fc:	0018      	movs	r0, r3
 80062fe:	46bd      	mov	sp, r7
 8006300:	b004      	add	sp, #16
 8006302:	bd80      	pop	{r7, pc}
 8006304:	fffffeff 	.word	0xfffffeff
 8006308:	40020000 	.word	0x40020000

0800630c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 8006314:	4b55      	ldr	r3, [pc, #340]	@ (800646c <HAL_DMA_IRQHandler+0x160>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006326:	221c      	movs	r2, #28
 8006328:	4013      	ands	r3, r2
 800632a:	2204      	movs	r2, #4
 800632c:	409a      	lsls	r2, r3
 800632e:	0013      	movs	r3, r2
 8006330:	68fa      	ldr	r2, [r7, #12]
 8006332:	4013      	ands	r3, r2
 8006334:	d027      	beq.n	8006386 <HAL_DMA_IRQHandler+0x7a>
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	2204      	movs	r2, #4
 800633a:	4013      	ands	r3, r2
 800633c:	d023      	beq.n	8006386 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	2220      	movs	r2, #32
 8006346:	4013      	ands	r3, r2
 8006348:	d107      	bne.n	800635a <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	2104      	movs	r1, #4
 8006356:	438a      	bics	r2, r1
 8006358:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 800635a:	4b44      	ldr	r3, [pc, #272]	@ (800646c <HAL_DMA_IRQHandler+0x160>)
 800635c:	6859      	ldr	r1, [r3, #4]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006362:	221c      	movs	r2, #28
 8006364:	4013      	ands	r3, r2
 8006366:	2204      	movs	r2, #4
 8006368:	409a      	lsls	r2, r3
 800636a:	4b40      	ldr	r3, [pc, #256]	@ (800646c <HAL_DMA_IRQHandler+0x160>)
 800636c:	430a      	orrs	r2, r1
 800636e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006374:	2b00      	cmp	r3, #0
 8006376:	d100      	bne.n	800637a <HAL_DMA_IRQHandler+0x6e>
 8006378:	e073      	b.n	8006462 <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	0010      	movs	r0, r2
 8006382:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8006384:	e06d      	b.n	8006462 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800638a:	221c      	movs	r2, #28
 800638c:	4013      	ands	r3, r2
 800638e:	2202      	movs	r2, #2
 8006390:	409a      	lsls	r2, r3
 8006392:	0013      	movs	r3, r2
 8006394:	68fa      	ldr	r2, [r7, #12]
 8006396:	4013      	ands	r3, r2
 8006398:	d02e      	beq.n	80063f8 <HAL_DMA_IRQHandler+0xec>
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	2202      	movs	r2, #2
 800639e:	4013      	ands	r3, r2
 80063a0:	d02a      	beq.n	80063f8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	2220      	movs	r2, #32
 80063aa:	4013      	ands	r3, r2
 80063ac:	d10b      	bne.n	80063c6 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	210a      	movs	r1, #10
 80063ba:	438a      	bics	r2, r1
 80063bc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2225      	movs	r2, #37	@ 0x25
 80063c2:	2101      	movs	r1, #1
 80063c4:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 80063c6:	4b29      	ldr	r3, [pc, #164]	@ (800646c <HAL_DMA_IRQHandler+0x160>)
 80063c8:	6859      	ldr	r1, [r3, #4]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063ce:	221c      	movs	r2, #28
 80063d0:	4013      	ands	r3, r2
 80063d2:	2202      	movs	r2, #2
 80063d4:	409a      	lsls	r2, r3
 80063d6:	4b25      	ldr	r3, [pc, #148]	@ (800646c <HAL_DMA_IRQHandler+0x160>)
 80063d8:	430a      	orrs	r2, r1
 80063da:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2224      	movs	r2, #36	@ 0x24
 80063e0:	2100      	movs	r1, #0
 80063e2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d03a      	beq.n	8006462 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	0010      	movs	r0, r2
 80063f4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80063f6:	e034      	b.n	8006462 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063fc:	221c      	movs	r2, #28
 80063fe:	4013      	ands	r3, r2
 8006400:	2208      	movs	r2, #8
 8006402:	409a      	lsls	r2, r3
 8006404:	0013      	movs	r3, r2
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	4013      	ands	r3, r2
 800640a:	d02b      	beq.n	8006464 <HAL_DMA_IRQHandler+0x158>
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	2208      	movs	r2, #8
 8006410:	4013      	ands	r3, r2
 8006412:	d027      	beq.n	8006464 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	210e      	movs	r1, #14
 8006420:	438a      	bics	r2, r1
 8006422:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8006424:	4b11      	ldr	r3, [pc, #68]	@ (800646c <HAL_DMA_IRQHandler+0x160>)
 8006426:	6859      	ldr	r1, [r3, #4]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800642c:	221c      	movs	r2, #28
 800642e:	4013      	ands	r3, r2
 8006430:	2201      	movs	r2, #1
 8006432:	409a      	lsls	r2, r3
 8006434:	4b0d      	ldr	r3, [pc, #52]	@ (800646c <HAL_DMA_IRQHandler+0x160>)
 8006436:	430a      	orrs	r2, r1
 8006438:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2201      	movs	r2, #1
 800643e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2225      	movs	r2, #37	@ 0x25
 8006444:	2101      	movs	r1, #1
 8006446:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2224      	movs	r2, #36	@ 0x24
 800644c:	2100      	movs	r1, #0
 800644e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006454:	2b00      	cmp	r3, #0
 8006456:	d005      	beq.n	8006464 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	0010      	movs	r0, r2
 8006460:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006462:	46c0      	nop			@ (mov r8, r8)
 8006464:	46c0      	nop			@ (mov r8, r8)
}
 8006466:	46bd      	mov	sp, r7
 8006468:	b004      	add	sp, #16
 800646a:	bd80      	pop	{r7, pc}
 800646c:	40020000 	.word	0x40020000

08006470 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b082      	sub	sp, #8
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2225      	movs	r2, #37	@ 0x25
 800647c:	5c9b      	ldrb	r3, [r3, r2]
 800647e:	b2db      	uxtb	r3, r3
}
 8006480:	0018      	movs	r0, r3
 8006482:	46bd      	mov	sp, r7
 8006484:	b002      	add	sp, #8
 8006486:	bd80      	pop	{r7, pc}

08006488 <HAL_DMA_GetError>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b082      	sub	sp, #8
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8006494:	0018      	movs	r0, r3
 8006496:	46bd      	mov	sp, r7
 8006498:	b002      	add	sp, #8
 800649a:	bd80      	pop	{r7, pc}

0800649c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	607a      	str	r2, [r7, #4]
 80064a8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064ae:	68fa      	ldr	r2, [r7, #12]
 80064b0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80064b2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d004      	beq.n	80064c6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064c0:	68fa      	ldr	r2, [r7, #12]
 80064c2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80064c4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 80064c6:	4b14      	ldr	r3, [pc, #80]	@ (8006518 <DMA_SetConfig+0x7c>)
 80064c8:	6859      	ldr	r1, [r3, #4]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ce:	221c      	movs	r2, #28
 80064d0:	4013      	ands	r3, r2
 80064d2:	2201      	movs	r2, #1
 80064d4:	409a      	lsls	r2, r3
 80064d6:	4b10      	ldr	r3, [pc, #64]	@ (8006518 <DMA_SetConfig+0x7c>)
 80064d8:	430a      	orrs	r2, r1
 80064da:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	683a      	ldr	r2, [r7, #0]
 80064e2:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	2b10      	cmp	r3, #16
 80064ea:	d108      	bne.n	80064fe <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	68ba      	ldr	r2, [r7, #8]
 80064fa:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80064fc:	e007      	b.n	800650e <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	68ba      	ldr	r2, [r7, #8]
 8006504:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	60da      	str	r2, [r3, #12]
}
 800650e:	46c0      	nop			@ (mov r8, r8)
 8006510:	46bd      	mov	sp, r7
 8006512:	b004      	add	sp, #16
 8006514:	bd80      	pop	{r7, pc}
 8006516:	46c0      	nop			@ (mov r8, r8)
 8006518:	40020000 	.word	0x40020000

0800651c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	001a      	movs	r2, r3
 800652a:	23ff      	movs	r3, #255	@ 0xff
 800652c:	4013      	ands	r3, r2
 800652e:	3b08      	subs	r3, #8
 8006530:	2114      	movs	r1, #20
 8006532:	0018      	movs	r0, r3
 8006534:	f7f9 fde8 	bl	8000108 <__udivsi3>
 8006538:	0003      	movs	r3, r0
 800653a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006540:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8006542:	4a0a      	ldr	r2, [pc, #40]	@ (800656c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8006544:	4694      	mov	ip, r2
 8006546:	4463      	add	r3, ip
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	001a      	movs	r2, r3
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	645a      	str	r2, [r3, #68]	@ 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	4a07      	ldr	r2, [pc, #28]	@ (8006570 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8006554:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	221c      	movs	r2, #28
 800655a:	4013      	ands	r3, r2
 800655c:	2201      	movs	r2, #1
 800655e:	409a      	lsls	r2, r3
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8006564:	46c0      	nop			@ (mov r8, r8)
 8006566:	46bd      	mov	sp, r7
 8006568:	b004      	add	sp, #16
 800656a:	bd80      	pop	{r7, pc}
 800656c:	10008200 	.word	0x10008200
 8006570:	40020880 	.word	0x40020880

08006574 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b084      	sub	sp, #16
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	22ff      	movs	r2, #255	@ 0xff
 8006582:	4013      	ands	r3, r2
 8006584:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	4a0a      	ldr	r2, [pc, #40]	@ (80065b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800658a:	4694      	mov	ip, r2
 800658c:	4463      	add	r3, ip
 800658e:	009b      	lsls	r3, r3, #2
 8006590:	001a      	movs	r2, r3
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	651a      	str	r2, [r3, #80]	@ 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a07      	ldr	r2, [pc, #28]	@ (80065b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800659a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	3b01      	subs	r3, #1
 80065a0:	2203      	movs	r2, #3
 80065a2:	4013      	ands	r3, r2
 80065a4:	2201      	movs	r2, #1
 80065a6:	409a      	lsls	r2, r3
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80065ac:	46c0      	nop			@ (mov r8, r8)
 80065ae:	46bd      	mov	sp, r7
 80065b0:	b004      	add	sp, #16
 80065b2:	bd80      	pop	{r7, pc}
 80065b4:	1000823f 	.word	0x1000823f
 80065b8:	40020940 	.word	0x40020940

080065bc <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b086      	sub	sp, #24
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80065c6:	2300      	movs	r3, #0
 80065c8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80065ca:	e153      	b.n	8006874 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	2101      	movs	r1, #1
 80065d2:	693a      	ldr	r2, [r7, #16]
 80065d4:	4091      	lsls	r1, r2
 80065d6:	000a      	movs	r2, r1
 80065d8:	4013      	ands	r3, r2
 80065da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d100      	bne.n	80065e4 <HAL_GPIO_Init+0x28>
 80065e2:	e144      	b.n	800686e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	2b02      	cmp	r3, #2
 80065ea:	d003      	beq.n	80065f4 <HAL_GPIO_Init+0x38>
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	2b12      	cmp	r3, #18
 80065f2:	d125      	bne.n	8006640 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	08da      	lsrs	r2, r3, #3
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	3208      	adds	r2, #8
 80065fc:	0092      	lsls	r2, r2, #2
 80065fe:	58d3      	ldr	r3, [r2, r3]
 8006600:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	2207      	movs	r2, #7
 8006606:	4013      	ands	r3, r2
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	220f      	movs	r2, #15
 800660c:	409a      	lsls	r2, r3
 800660e:	0013      	movs	r3, r2
 8006610:	43da      	mvns	r2, r3
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	4013      	ands	r3, r2
 8006616:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	691b      	ldr	r3, [r3, #16]
 800661c:	220f      	movs	r2, #15
 800661e:	401a      	ands	r2, r3
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	2107      	movs	r1, #7
 8006624:	400b      	ands	r3, r1
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	409a      	lsls	r2, r3
 800662a:	0013      	movs	r3, r2
 800662c:	697a      	ldr	r2, [r7, #20]
 800662e:	4313      	orrs	r3, r2
 8006630:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	08da      	lsrs	r2, r3, #3
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	3208      	adds	r2, #8
 800663a:	0092      	lsls	r2, r2, #2
 800663c:	6979      	ldr	r1, [r7, #20]
 800663e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	005b      	lsls	r3, r3, #1
 800664a:	2203      	movs	r2, #3
 800664c:	409a      	lsls	r2, r3
 800664e:	0013      	movs	r3, r2
 8006650:	43da      	mvns	r2, r3
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	4013      	ands	r3, r2
 8006656:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	2203      	movs	r2, #3
 800665e:	401a      	ands	r2, r3
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	005b      	lsls	r3, r3, #1
 8006664:	409a      	lsls	r2, r3
 8006666:	0013      	movs	r3, r2
 8006668:	697a      	ldr	r2, [r7, #20]
 800666a:	4313      	orrs	r3, r2
 800666c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	697a      	ldr	r2, [r7, #20]
 8006672:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	2b01      	cmp	r3, #1
 800667a:	d00b      	beq.n	8006694 <HAL_GPIO_Init+0xd8>
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	2b02      	cmp	r3, #2
 8006682:	d007      	beq.n	8006694 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006688:	2b11      	cmp	r3, #17
 800668a:	d003      	beq.n	8006694 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	2b12      	cmp	r3, #18
 8006692:	d130      	bne.n	80066f6 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	005b      	lsls	r3, r3, #1
 800669e:	2203      	movs	r2, #3
 80066a0:	409a      	lsls	r2, r3
 80066a2:	0013      	movs	r3, r2
 80066a4:	43da      	mvns	r2, r3
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	4013      	ands	r3, r2
 80066aa:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	68da      	ldr	r2, [r3, #12]
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	005b      	lsls	r3, r3, #1
 80066b4:	409a      	lsls	r2, r3
 80066b6:	0013      	movs	r3, r2
 80066b8:	697a      	ldr	r2, [r7, #20]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	697a      	ldr	r2, [r7, #20]
 80066c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80066ca:	2201      	movs	r2, #1
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	409a      	lsls	r2, r3
 80066d0:	0013      	movs	r3, r2
 80066d2:	43da      	mvns	r2, r3
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	4013      	ands	r3, r2
 80066d8:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	091b      	lsrs	r3, r3, #4
 80066e0:	2201      	movs	r2, #1
 80066e2:	401a      	ands	r2, r3
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	409a      	lsls	r2, r3
 80066e8:	0013      	movs	r3, r2
 80066ea:	697a      	ldr	r2, [r7, #20]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	697a      	ldr	r2, [r7, #20]
 80066f4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	2b03      	cmp	r3, #3
 80066fc:	d017      	beq.n	800672e <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	68db      	ldr	r3, [r3, #12]
 8006702:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	005b      	lsls	r3, r3, #1
 8006708:	2203      	movs	r2, #3
 800670a:	409a      	lsls	r2, r3
 800670c:	0013      	movs	r3, r2
 800670e:	43da      	mvns	r2, r3
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	4013      	ands	r3, r2
 8006714:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	689a      	ldr	r2, [r3, #8]
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	005b      	lsls	r3, r3, #1
 800671e:	409a      	lsls	r2, r3
 8006720:	0013      	movs	r3, r2
 8006722:	697a      	ldr	r2, [r7, #20]
 8006724:	4313      	orrs	r3, r2
 8006726:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	697a      	ldr	r2, [r7, #20]
 800672c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	685a      	ldr	r2, [r3, #4]
 8006732:	2380      	movs	r3, #128	@ 0x80
 8006734:	055b      	lsls	r3, r3, #21
 8006736:	4013      	ands	r3, r2
 8006738:	d100      	bne.n	800673c <HAL_GPIO_Init+0x180>
 800673a:	e098      	b.n	800686e <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800673c:	4a53      	ldr	r2, [pc, #332]	@ (800688c <HAL_GPIO_Init+0x2d0>)
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	089b      	lsrs	r3, r3, #2
 8006742:	3318      	adds	r3, #24
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	589b      	ldr	r3, [r3, r2]
 8006748:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	2203      	movs	r2, #3
 800674e:	4013      	ands	r3, r2
 8006750:	00db      	lsls	r3, r3, #3
 8006752:	220f      	movs	r2, #15
 8006754:	409a      	lsls	r2, r3
 8006756:	0013      	movs	r3, r2
 8006758:	43da      	mvns	r2, r3
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	4013      	ands	r3, r2
 800675e:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	23a0      	movs	r3, #160	@ 0xa0
 8006764:	05db      	lsls	r3, r3, #23
 8006766:	429a      	cmp	r2, r3
 8006768:	d019      	beq.n	800679e <HAL_GPIO_Init+0x1e2>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a48      	ldr	r2, [pc, #288]	@ (8006890 <HAL_GPIO_Init+0x2d4>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d013      	beq.n	800679a <HAL_GPIO_Init+0x1de>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a47      	ldr	r2, [pc, #284]	@ (8006894 <HAL_GPIO_Init+0x2d8>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d00d      	beq.n	8006796 <HAL_GPIO_Init+0x1da>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a46      	ldr	r2, [pc, #280]	@ (8006898 <HAL_GPIO_Init+0x2dc>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d007      	beq.n	8006792 <HAL_GPIO_Init+0x1d6>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a45      	ldr	r2, [pc, #276]	@ (800689c <HAL_GPIO_Init+0x2e0>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d101      	bne.n	800678e <HAL_GPIO_Init+0x1d2>
 800678a:	2305      	movs	r3, #5
 800678c:	e008      	b.n	80067a0 <HAL_GPIO_Init+0x1e4>
 800678e:	2306      	movs	r3, #6
 8006790:	e006      	b.n	80067a0 <HAL_GPIO_Init+0x1e4>
 8006792:	2303      	movs	r3, #3
 8006794:	e004      	b.n	80067a0 <HAL_GPIO_Init+0x1e4>
 8006796:	2302      	movs	r3, #2
 8006798:	e002      	b.n	80067a0 <HAL_GPIO_Init+0x1e4>
 800679a:	2301      	movs	r3, #1
 800679c:	e000      	b.n	80067a0 <HAL_GPIO_Init+0x1e4>
 800679e:	2300      	movs	r3, #0
 80067a0:	693a      	ldr	r2, [r7, #16]
 80067a2:	2103      	movs	r1, #3
 80067a4:	400a      	ands	r2, r1
 80067a6:	00d2      	lsls	r2, r2, #3
 80067a8:	4093      	lsls	r3, r2
 80067aa:	697a      	ldr	r2, [r7, #20]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80067b0:	4936      	ldr	r1, [pc, #216]	@ (800688c <HAL_GPIO_Init+0x2d0>)
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	089b      	lsrs	r3, r3, #2
 80067b6:	3318      	adds	r3, #24
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	697a      	ldr	r2, [r7, #20]
 80067bc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 80067be:	4a33      	ldr	r2, [pc, #204]	@ (800688c <HAL_GPIO_Init+0x2d0>)
 80067c0:	2380      	movs	r3, #128	@ 0x80
 80067c2:	58d3      	ldr	r3, [r2, r3]
 80067c4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	43da      	mvns	r2, r3
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	4013      	ands	r3, r2
 80067ce:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	685a      	ldr	r2, [r3, #4]
 80067d4:	2380      	movs	r3, #128	@ 0x80
 80067d6:	025b      	lsls	r3, r3, #9
 80067d8:	4013      	ands	r3, r2
 80067da:	d003      	beq.n	80067e4 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 80067dc:	697a      	ldr	r2, [r7, #20]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80067e4:	4929      	ldr	r1, [pc, #164]	@ (800688c <HAL_GPIO_Init+0x2d0>)
 80067e6:	2280      	movs	r2, #128	@ 0x80
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 80067ec:	4a27      	ldr	r2, [pc, #156]	@ (800688c <HAL_GPIO_Init+0x2d0>)
 80067ee:	2384      	movs	r3, #132	@ 0x84
 80067f0:	58d3      	ldr	r3, [r2, r3]
 80067f2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	43da      	mvns	r2, r3
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	4013      	ands	r3, r2
 80067fc:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	685a      	ldr	r2, [r3, #4]
 8006802:	2380      	movs	r3, #128	@ 0x80
 8006804:	029b      	lsls	r3, r3, #10
 8006806:	4013      	ands	r3, r2
 8006808:	d003      	beq.n	8006812 <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 800680a:	697a      	ldr	r2, [r7, #20]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	4313      	orrs	r3, r2
 8006810:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8006812:	491e      	ldr	r1, [pc, #120]	@ (800688c <HAL_GPIO_Init+0x2d0>)
 8006814:	2284      	movs	r2, #132	@ 0x84
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800681a:	4b1c      	ldr	r3, [pc, #112]	@ (800688c <HAL_GPIO_Init+0x2d0>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	43da      	mvns	r2, r3
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	4013      	ands	r3, r2
 8006828:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	685a      	ldr	r2, [r3, #4]
 800682e:	2380      	movs	r3, #128	@ 0x80
 8006830:	035b      	lsls	r3, r3, #13
 8006832:	4013      	ands	r3, r2
 8006834:	d003      	beq.n	800683e <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 8006836:	697a      	ldr	r2, [r7, #20]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	4313      	orrs	r3, r2
 800683c:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 800683e:	4b13      	ldr	r3, [pc, #76]	@ (800688c <HAL_GPIO_Init+0x2d0>)
 8006840:	697a      	ldr	r2, [r7, #20]
 8006842:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8006844:	4b11      	ldr	r3, [pc, #68]	@ (800688c <HAL_GPIO_Init+0x2d0>)
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	43da      	mvns	r2, r3
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	4013      	ands	r3, r2
 8006852:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	685a      	ldr	r2, [r3, #4]
 8006858:	2380      	movs	r3, #128	@ 0x80
 800685a:	039b      	lsls	r3, r3, #14
 800685c:	4013      	ands	r3, r2
 800685e:	d003      	beq.n	8006868 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8006860:	697a      	ldr	r2, [r7, #20]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	4313      	orrs	r3, r2
 8006866:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8006868:	4b08      	ldr	r3, [pc, #32]	@ (800688c <HAL_GPIO_Init+0x2d0>)
 800686a:	697a      	ldr	r2, [r7, #20]
 800686c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	3301      	adds	r3, #1
 8006872:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	40da      	lsrs	r2, r3
 800687c:	1e13      	subs	r3, r2, #0
 800687e:	d000      	beq.n	8006882 <HAL_GPIO_Init+0x2c6>
 8006880:	e6a4      	b.n	80065cc <HAL_GPIO_Init+0x10>
  }
}
 8006882:	46c0      	nop			@ (mov r8, r8)
 8006884:	46c0      	nop			@ (mov r8, r8)
 8006886:	46bd      	mov	sp, r7
 8006888:	b006      	add	sp, #24
 800688a:	bd80      	pop	{r7, pc}
 800688c:	40021800 	.word	0x40021800
 8006890:	50000400 	.word	0x50000400
 8006894:	50000800 	.word	0x50000800
 8006898:	50000c00 	.word	0x50000c00
 800689c:	50001400 	.word	0x50001400

080068a0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b086      	sub	sp, #24
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80068aa:	2300      	movs	r3, #0
 80068ac:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 80068ae:	e0ba      	b.n	8006a26 <HAL_GPIO_DeInit+0x186>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 80068b0:	2201      	movs	r2, #1
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	409a      	lsls	r2, r3
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	4013      	ands	r3, r2
 80068ba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0U)
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d100      	bne.n	80068c4 <HAL_GPIO_DeInit+0x24>
 80068c2:	e0ad      	b.n	8006a20 <HAL_GPIO_DeInit+0x180>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = EXTI->EXTICR[position >> 2U];
 80068c4:	4a5d      	ldr	r2, [pc, #372]	@ (8006a3c <HAL_GPIO_DeInit+0x19c>)
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	089b      	lsrs	r3, r3, #2
 80068ca:	3318      	adds	r3, #24
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	589b      	ldr	r3, [r3, r2]
 80068d0:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	2203      	movs	r2, #3
 80068d6:	4013      	ands	r3, r2
 80068d8:	00db      	lsls	r3, r3, #3
 80068da:	220f      	movs	r2, #15
 80068dc:	409a      	lsls	r2, r3
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	4013      	ands	r3, r2
 80068e2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos)))
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	23a0      	movs	r3, #160	@ 0xa0
 80068e8:	05db      	lsls	r3, r3, #23
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d019      	beq.n	8006922 <HAL_GPIO_DeInit+0x82>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4a53      	ldr	r2, [pc, #332]	@ (8006a40 <HAL_GPIO_DeInit+0x1a0>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d013      	beq.n	800691e <HAL_GPIO_DeInit+0x7e>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	4a52      	ldr	r2, [pc, #328]	@ (8006a44 <HAL_GPIO_DeInit+0x1a4>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d00d      	beq.n	800691a <HAL_GPIO_DeInit+0x7a>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4a51      	ldr	r2, [pc, #324]	@ (8006a48 <HAL_GPIO_DeInit+0x1a8>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d007      	beq.n	8006916 <HAL_GPIO_DeInit+0x76>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	4a50      	ldr	r2, [pc, #320]	@ (8006a4c <HAL_GPIO_DeInit+0x1ac>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d101      	bne.n	8006912 <HAL_GPIO_DeInit+0x72>
 800690e:	2305      	movs	r3, #5
 8006910:	e008      	b.n	8006924 <HAL_GPIO_DeInit+0x84>
 8006912:	2306      	movs	r3, #6
 8006914:	e006      	b.n	8006924 <HAL_GPIO_DeInit+0x84>
 8006916:	2303      	movs	r3, #3
 8006918:	e004      	b.n	8006924 <HAL_GPIO_DeInit+0x84>
 800691a:	2302      	movs	r3, #2
 800691c:	e002      	b.n	8006924 <HAL_GPIO_DeInit+0x84>
 800691e:	2301      	movs	r3, #1
 8006920:	e000      	b.n	8006924 <HAL_GPIO_DeInit+0x84>
 8006922:	2300      	movs	r3, #0
 8006924:	697a      	ldr	r2, [r7, #20]
 8006926:	2103      	movs	r1, #3
 8006928:	400a      	ands	r2, r1
 800692a:	00d2      	lsls	r2, r2, #3
 800692c:	4093      	lsls	r3, r2
 800692e:	68fa      	ldr	r2, [r7, #12]
 8006930:	429a      	cmp	r2, r3
 8006932:	d136      	bne.n	80069a2 <HAL_GPIO_DeInit+0x102>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8006934:	4a41      	ldr	r2, [pc, #260]	@ (8006a3c <HAL_GPIO_DeInit+0x19c>)
 8006936:	2380      	movs	r3, #128	@ 0x80
 8006938:	58d3      	ldr	r3, [r2, r3]
 800693a:	693a      	ldr	r2, [r7, #16]
 800693c:	43d2      	mvns	r2, r2
 800693e:	493f      	ldr	r1, [pc, #252]	@ (8006a3c <HAL_GPIO_DeInit+0x19c>)
 8006940:	4013      	ands	r3, r2
 8006942:	2280      	movs	r2, #128	@ 0x80
 8006944:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 8006946:	4a3d      	ldr	r2, [pc, #244]	@ (8006a3c <HAL_GPIO_DeInit+0x19c>)
 8006948:	2384      	movs	r3, #132	@ 0x84
 800694a:	58d3      	ldr	r3, [r2, r3]
 800694c:	693a      	ldr	r2, [r7, #16]
 800694e:	43d2      	mvns	r2, r2
 8006950:	493a      	ldr	r1, [pc, #232]	@ (8006a3c <HAL_GPIO_DeInit+0x19c>)
 8006952:	4013      	ands	r3, r2
 8006954:	2284      	movs	r2, #132	@ 0x84
 8006956:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8006958:	4b38      	ldr	r3, [pc, #224]	@ (8006a3c <HAL_GPIO_DeInit+0x19c>)
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	43d9      	mvns	r1, r3
 8006960:	4b36      	ldr	r3, [pc, #216]	@ (8006a3c <HAL_GPIO_DeInit+0x19c>)
 8006962:	400a      	ands	r2, r1
 8006964:	601a      	str	r2, [r3, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8006966:	4b35      	ldr	r3, [pc, #212]	@ (8006a3c <HAL_GPIO_DeInit+0x19c>)
 8006968:	685a      	ldr	r2, [r3, #4]
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	43d9      	mvns	r1, r3
 800696e:	4b33      	ldr	r3, [pc, #204]	@ (8006a3c <HAL_GPIO_DeInit+0x19c>)
 8006970:	400a      	ands	r2, r1
 8006972:	605a      	str	r2, [r3, #4]

        tmp = (0x0FUL) << (8U * (position & 0x03U));
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	2203      	movs	r2, #3
 8006978:	4013      	ands	r3, r2
 800697a:	00db      	lsls	r3, r3, #3
 800697c:	220f      	movs	r2, #15
 800697e:	409a      	lsls	r2, r3
 8006980:	0013      	movs	r3, r2
 8006982:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2U] &= ~tmp;
 8006984:	4a2d      	ldr	r2, [pc, #180]	@ (8006a3c <HAL_GPIO_DeInit+0x19c>)
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	089b      	lsrs	r3, r3, #2
 800698a:	3318      	adds	r3, #24
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	589a      	ldr	r2, [r3, r2]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	43d9      	mvns	r1, r3
 8006994:	4829      	ldr	r0, [pc, #164]	@ (8006a3c <HAL_GPIO_DeInit+0x19c>)
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	089b      	lsrs	r3, r3, #2
 800699a:	400a      	ands	r2, r1
 800699c:	3318      	adds	r3, #24
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681a      	ldr	r2, [r3, #0]
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	005b      	lsls	r3, r3, #1
 80069aa:	2103      	movs	r1, #3
 80069ac:	4099      	lsls	r1, r3
 80069ae:	000b      	movs	r3, r1
 80069b0:	431a      	orrs	r2, r3
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	08da      	lsrs	r2, r3, #3
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	3208      	adds	r2, #8
 80069be:	0092      	lsls	r2, r2, #2
 80069c0:	58d3      	ldr	r3, [r2, r3]
 80069c2:	697a      	ldr	r2, [r7, #20]
 80069c4:	2107      	movs	r1, #7
 80069c6:	400a      	ands	r2, r1
 80069c8:	0092      	lsls	r2, r2, #2
 80069ca:	210f      	movs	r1, #15
 80069cc:	4091      	lsls	r1, r2
 80069ce:	000a      	movs	r2, r1
 80069d0:	43d1      	mvns	r1, r2
 80069d2:	697a      	ldr	r2, [r7, #20]
 80069d4:	08d2      	lsrs	r2, r2, #3
 80069d6:	4019      	ands	r1, r3
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	3208      	adds	r2, #8
 80069dc:	0092      	lsls	r2, r2, #2
 80069de:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	689b      	ldr	r3, [r3, #8]
 80069e4:	697a      	ldr	r2, [r7, #20]
 80069e6:	0052      	lsls	r2, r2, #1
 80069e8:	2103      	movs	r1, #3
 80069ea:	4091      	lsls	r1, r2
 80069ec:	000a      	movs	r2, r1
 80069ee:	43d2      	mvns	r2, r2
 80069f0:	401a      	ands	r2, r3
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	2101      	movs	r1, #1
 80069fc:	697a      	ldr	r2, [r7, #20]
 80069fe:	4091      	lsls	r1, r2
 8006a00:	000a      	movs	r2, r1
 8006a02:	43d2      	mvns	r2, r2
 8006a04:	401a      	ands	r2, r3
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	68db      	ldr	r3, [r3, #12]
 8006a0e:	697a      	ldr	r2, [r7, #20]
 8006a10:	0052      	lsls	r2, r2, #1
 8006a12:	2103      	movs	r1, #3
 8006a14:	4091      	lsls	r1, r2
 8006a16:	000a      	movs	r2, r1
 8006a18:	43d2      	mvns	r2, r2
 8006a1a:	401a      	ands	r2, r3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	60da      	str	r2, [r3, #12]
    }

    position++;
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	3301      	adds	r3, #1
 8006a24:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 8006a26:	683a      	ldr	r2, [r7, #0]
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	40da      	lsrs	r2, r3
 8006a2c:	1e13      	subs	r3, r2, #0
 8006a2e:	d000      	beq.n	8006a32 <HAL_GPIO_DeInit+0x192>
 8006a30:	e73e      	b.n	80068b0 <HAL_GPIO_DeInit+0x10>
  }
}
 8006a32:	46c0      	nop			@ (mov r8, r8)
 8006a34:	46c0      	nop			@ (mov r8, r8)
 8006a36:	46bd      	mov	sp, r7
 8006a38:	b006      	add	sp, #24
 8006a3a:	bd80      	pop	{r7, pc}
 8006a3c:	40021800 	.word	0x40021800
 8006a40:	50000400 	.word	0x50000400
 8006a44:	50000800 	.word	0x50000800
 8006a48:	50000c00 	.word	0x50000c00
 8006a4c:	50001400 	.word	0x50001400

08006a50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	000a      	movs	r2, r1
 8006a5a:	1cbb      	adds	r3, r7, #2
 8006a5c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	691b      	ldr	r3, [r3, #16]
 8006a62:	1cba      	adds	r2, r7, #2
 8006a64:	8812      	ldrh	r2, [r2, #0]
 8006a66:	4013      	ands	r3, r2
 8006a68:	d004      	beq.n	8006a74 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8006a6a:	230f      	movs	r3, #15
 8006a6c:	18fb      	adds	r3, r7, r3
 8006a6e:	2201      	movs	r2, #1
 8006a70:	701a      	strb	r2, [r3, #0]
 8006a72:	e003      	b.n	8006a7c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006a74:	230f      	movs	r3, #15
 8006a76:	18fb      	adds	r3, r7, r3
 8006a78:	2200      	movs	r2, #0
 8006a7a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8006a7c:	230f      	movs	r3, #15
 8006a7e:	18fb      	adds	r3, r7, r3
 8006a80:	781b      	ldrb	r3, [r3, #0]
}
 8006a82:	0018      	movs	r0, r3
 8006a84:	46bd      	mov	sp, r7
 8006a86:	b004      	add	sp, #16
 8006a88:	bd80      	pop	{r7, pc}

08006a8a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006a8a:	b580      	push	{r7, lr}
 8006a8c:	b082      	sub	sp, #8
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
 8006a92:	0008      	movs	r0, r1
 8006a94:	0011      	movs	r1, r2
 8006a96:	1cbb      	adds	r3, r7, #2
 8006a98:	1c02      	adds	r2, r0, #0
 8006a9a:	801a      	strh	r2, [r3, #0]
 8006a9c:	1c7b      	adds	r3, r7, #1
 8006a9e:	1c0a      	adds	r2, r1, #0
 8006aa0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006aa2:	1c7b      	adds	r3, r7, #1
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d004      	beq.n	8006ab4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006aaa:	1cbb      	adds	r3, r7, #2
 8006aac:	881a      	ldrh	r2, [r3, #0]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006ab2:	e003      	b.n	8006abc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006ab4:	1cbb      	adds	r3, r7, #2
 8006ab6:	881a      	ldrh	r2, [r3, #0]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006abc:	46c0      	nop			@ (mov r8, r8)
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	b002      	add	sp, #8
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b082      	sub	sp, #8
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	0002      	movs	r2, r0
 8006acc:	1dbb      	adds	r3, r7, #6
 8006ace:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8006ad0:	4b10      	ldr	r3, [pc, #64]	@ (8006b14 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8006ad2:	68db      	ldr	r3, [r3, #12]
 8006ad4:	1dba      	adds	r2, r7, #6
 8006ad6:	8812      	ldrh	r2, [r2, #0]
 8006ad8:	4013      	ands	r3, r2
 8006ada:	d008      	beq.n	8006aee <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8006adc:	4b0d      	ldr	r3, [pc, #52]	@ (8006b14 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8006ade:	1dba      	adds	r2, r7, #6
 8006ae0:	8812      	ldrh	r2, [r2, #0]
 8006ae2:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8006ae4:	1dbb      	adds	r3, r7, #6
 8006ae6:	881b      	ldrh	r3, [r3, #0]
 8006ae8:	0018      	movs	r0, r3
 8006aea:	f7fc fb6b 	bl	80031c4 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8006aee:	4b09      	ldr	r3, [pc, #36]	@ (8006b14 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8006af0:	691b      	ldr	r3, [r3, #16]
 8006af2:	1dba      	adds	r2, r7, #6
 8006af4:	8812      	ldrh	r2, [r2, #0]
 8006af6:	4013      	ands	r3, r2
 8006af8:	d008      	beq.n	8006b0c <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8006afa:	4b06      	ldr	r3, [pc, #24]	@ (8006b14 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8006afc:	1dba      	adds	r2, r7, #6
 8006afe:	8812      	ldrh	r2, [r2, #0]
 8006b00:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8006b02:	1dbb      	adds	r3, r7, #6
 8006b04:	881b      	ldrh	r3, [r3, #0]
 8006b06:	0018      	movs	r0, r3
 8006b08:	f000 f806 	bl	8006b18 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8006b0c:	46c0      	nop			@ (mov r8, r8)
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	b002      	add	sp, #8
 8006b12:	bd80      	pop	{r7, pc}
 8006b14:	40021800 	.word	0x40021800

08006b18 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b082      	sub	sp, #8
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	0002      	movs	r2, r0
 8006b20:	1dbb      	adds	r3, r7, #6
 8006b22:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8006b24:	46c0      	nop			@ (mov r8, r8)
 8006b26:	46bd      	mov	sp, r7
 8006b28:	b002      	add	sp, #8
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b082      	sub	sp, #8
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d101      	bne.n	8006b3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e08f      	b.n	8006c5e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2241      	movs	r2, #65	@ 0x41
 8006b42:	5c9b      	ldrb	r3, [r3, r2]
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d107      	bne.n	8006b5a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2240      	movs	r2, #64	@ 0x40
 8006b4e:	2100      	movs	r1, #0
 8006b50:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	0018      	movs	r0, r3
 8006b56:	f7fe faed 	bl	8005134 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2241      	movs	r2, #65	@ 0x41
 8006b5e:	2124      	movs	r1, #36	@ 0x24
 8006b60:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	2101      	movs	r1, #1
 8006b6e:	438a      	bics	r2, r1
 8006b70:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	685a      	ldr	r2, [r3, #4]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	493b      	ldr	r1, [pc, #236]	@ (8006c68 <HAL_I2C_Init+0x13c>)
 8006b7c:	400a      	ands	r2, r1
 8006b7e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	689a      	ldr	r2, [r3, #8]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4938      	ldr	r1, [pc, #224]	@ (8006c6c <HAL_I2C_Init+0x140>)
 8006b8c:	400a      	ands	r2, r1
 8006b8e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	68db      	ldr	r3, [r3, #12]
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d108      	bne.n	8006baa <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	689a      	ldr	r2, [r3, #8]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	2180      	movs	r1, #128	@ 0x80
 8006ba2:	0209      	lsls	r1, r1, #8
 8006ba4:	430a      	orrs	r2, r1
 8006ba6:	609a      	str	r2, [r3, #8]
 8006ba8:	e007      	b.n	8006bba <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	689a      	ldr	r2, [r3, #8]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	2184      	movs	r1, #132	@ 0x84
 8006bb4:	0209      	lsls	r1, r1, #8
 8006bb6:	430a      	orrs	r2, r1
 8006bb8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	68db      	ldr	r3, [r3, #12]
 8006bbe:	2b02      	cmp	r3, #2
 8006bc0:	d109      	bne.n	8006bd6 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	685a      	ldr	r2, [r3, #4]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	2180      	movs	r1, #128	@ 0x80
 8006bce:	0109      	lsls	r1, r1, #4
 8006bd0:	430a      	orrs	r2, r1
 8006bd2:	605a      	str	r2, [r3, #4]
 8006bd4:	e007      	b.n	8006be6 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	685a      	ldr	r2, [r3, #4]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4923      	ldr	r1, [pc, #140]	@ (8006c70 <HAL_I2C_Init+0x144>)
 8006be2:	400a      	ands	r2, r1
 8006be4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	685a      	ldr	r2, [r3, #4]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4920      	ldr	r1, [pc, #128]	@ (8006c74 <HAL_I2C_Init+0x148>)
 8006bf2:	430a      	orrs	r2, r1
 8006bf4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	68da      	ldr	r2, [r3, #12]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	491a      	ldr	r1, [pc, #104]	@ (8006c6c <HAL_I2C_Init+0x140>)
 8006c02:	400a      	ands	r2, r1
 8006c04:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	691a      	ldr	r2, [r3, #16]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	695b      	ldr	r3, [r3, #20]
 8006c0e:	431a      	orrs	r2, r3
 8006c10:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	699b      	ldr	r3, [r3, #24]
 8006c16:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	430a      	orrs	r2, r1
 8006c1e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	69d9      	ldr	r1, [r3, #28]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6a1a      	ldr	r2, [r3, #32]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	430a      	orrs	r2, r1
 8006c2e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	681a      	ldr	r2, [r3, #0]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	2101      	movs	r1, #1
 8006c3c:	430a      	orrs	r2, r1
 8006c3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2241      	movs	r2, #65	@ 0x41
 8006c4a:	2120      	movs	r1, #32
 8006c4c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2200      	movs	r2, #0
 8006c52:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2242      	movs	r2, #66	@ 0x42
 8006c58:	2100      	movs	r1, #0
 8006c5a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006c5c:	2300      	movs	r3, #0
}
 8006c5e:	0018      	movs	r0, r3
 8006c60:	46bd      	mov	sp, r7
 8006c62:	b002      	add	sp, #8
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	46c0      	nop			@ (mov r8, r8)
 8006c68:	f0ffffff 	.word	0xf0ffffff
 8006c6c:	ffff7fff 	.word	0xffff7fff
 8006c70:	fffff7ff 	.word	0xfffff7ff
 8006c74:	02008000 	.word	0x02008000

08006c78 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b082      	sub	sp, #8
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d101      	bne.n	8006c8a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	e022      	b.n	8006cd0 <HAL_I2C_DeInit+0x58>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2241      	movs	r2, #65	@ 0x41
 8006c8e:	2124      	movs	r1, #36	@ 0x24
 8006c90:	5499      	strb	r1, [r3, r2]

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	2101      	movs	r1, #1
 8006c9e:	438a      	bics	r2, r1
 8006ca0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	0018      	movs	r0, r3
 8006ca6:	f7fe fb0b 	bl	80052c0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2200      	movs	r2, #0
 8006cae:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2241      	movs	r2, #65	@ 0x41
 8006cb4:	2100      	movs	r1, #0
 8006cb6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2242      	movs	r2, #66	@ 0x42
 8006cc2:	2100      	movs	r1, #0
 8006cc4:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2240      	movs	r2, #64	@ 0x40
 8006cca:	2100      	movs	r1, #0
 8006ccc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006cce:	2300      	movs	r3, #0
}
 8006cd0:	0018      	movs	r0, r3
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	b002      	add	sp, #8
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8006cd8:	b5b0      	push	{r4, r5, r7, lr}
 8006cda:	b08a      	sub	sp, #40	@ 0x28
 8006cdc:	af02      	add	r7, sp, #8
 8006cde:	60f8      	str	r0, [r7, #12]
 8006ce0:	0008      	movs	r0, r1
 8006ce2:	607a      	str	r2, [r7, #4]
 8006ce4:	0019      	movs	r1, r3
 8006ce6:	230a      	movs	r3, #10
 8006ce8:	18fb      	adds	r3, r7, r3
 8006cea:	1c02      	adds	r2, r0, #0
 8006cec:	801a      	strh	r2, [r3, #0]
 8006cee:	2308      	movs	r3, #8
 8006cf0:	18fb      	adds	r3, r7, r3
 8006cf2:	1c0a      	adds	r2, r1, #0
 8006cf4:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2241      	movs	r2, #65	@ 0x41
 8006cfe:	5c9b      	ldrb	r3, [r3, r2]
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	2b20      	cmp	r3, #32
 8006d04:	d000      	beq.n	8006d08 <HAL_I2C_Master_Transmit_DMA+0x30>
 8006d06:	e0ff      	b.n	8006f08 <HAL_I2C_Master_Transmit_DMA+0x230>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	699a      	ldr	r2, [r3, #24]
 8006d0e:	2380      	movs	r3, #128	@ 0x80
 8006d10:	021b      	lsls	r3, r3, #8
 8006d12:	401a      	ands	r2, r3
 8006d14:	2380      	movs	r3, #128	@ 0x80
 8006d16:	021b      	lsls	r3, r3, #8
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d101      	bne.n	8006d20 <HAL_I2C_Master_Transmit_DMA+0x48>
    {
      return HAL_BUSY;
 8006d1c:	2302      	movs	r3, #2
 8006d1e:	e0f4      	b.n	8006f0a <HAL_I2C_Master_Transmit_DMA+0x232>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2240      	movs	r2, #64	@ 0x40
 8006d24:	5c9b      	ldrb	r3, [r3, r2]
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d101      	bne.n	8006d2e <HAL_I2C_Master_Transmit_DMA+0x56>
 8006d2a:	2302      	movs	r3, #2
 8006d2c:	e0ed      	b.n	8006f0a <HAL_I2C_Master_Transmit_DMA+0x232>
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2240      	movs	r2, #64	@ 0x40
 8006d32:	2101      	movs	r1, #1
 8006d34:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2241      	movs	r2, #65	@ 0x41
 8006d3a:	2121      	movs	r1, #33	@ 0x21
 8006d3c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2242      	movs	r2, #66	@ 0x42
 8006d42:	2110      	movs	r1, #16
 8006d44:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2208      	movs	r2, #8
 8006d56:	18ba      	adds	r2, r7, r2
 8006d58:	8812      	ldrh	r2, [r2, #0]
 8006d5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	4a6d      	ldr	r2, [pc, #436]	@ (8006f14 <HAL_I2C_Master_Transmit_DMA+0x23c>)
 8006d60:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	4a6c      	ldr	r2, [pc, #432]	@ (8006f18 <HAL_I2C_Master_Transmit_DMA+0x240>)
 8006d66:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	2bff      	cmp	r3, #255	@ 0xff
 8006d70:	d906      	bls.n	8006d80 <HAL_I2C_Master_Transmit_DMA+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	22ff      	movs	r2, #255	@ 0xff
 8006d76:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8006d78:	2380      	movs	r3, #128	@ 0x80
 8006d7a:	045b      	lsls	r3, r3, #17
 8006d7c:	61fb      	str	r3, [r7, #28]
 8006d7e:	e007      	b.n	8006d90 <HAL_I2C_Master_Transmit_DMA+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d84:	b29a      	uxth	r2, r3
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8006d8a:	2380      	movs	r3, #128	@ 0x80
 8006d8c:	049b      	lsls	r3, r3, #18
 8006d8e:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d01a      	beq.n	8006dce <HAL_I2C_Master_Transmit_DMA+0xf6>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d9c:	781a      	ldrb	r2, [r3, #0]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006da8:	1c5a      	adds	r2, r3, #1
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006db2:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	b29a      	uxth	r2, r3
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006dc6:	3b01      	subs	r3, #1
 8006dc8:	b29a      	uxth	r2, r3
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d100      	bne.n	8006dd8 <HAL_I2C_Master_Transmit_DMA+0x100>
 8006dd6:	e07c      	b.n	8006ed2 <HAL_I2C_Master_Transmit_DMA+0x1fa>
    {
      if (hi2c->hdmatx != NULL)
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d025      	beq.n	8006e2c <HAL_I2C_Master_Transmit_DMA+0x154>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006de4:	4a4d      	ldr	r2, [pc, #308]	@ (8006f1c <HAL_I2C_Master_Transmit_DMA+0x244>)
 8006de6:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dec:	4a4c      	ldr	r2, [pc, #304]	@ (8006f20 <HAL_I2C_Master_Transmit_DMA+0x248>)
 8006dee:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006df4:	2200      	movs	r2, #0
 8006df6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e08:	0019      	movs	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8006e10:	001a      	movs	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8006e16:	2517      	movs	r5, #23
 8006e18:	197c      	adds	r4, r7, r5
 8006e1a:	f7ff f913 	bl	8006044 <HAL_DMA_Start_IT>
 8006e1e:	0003      	movs	r3, r0
 8006e20:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8006e22:	197b      	adds	r3, r7, r5
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d13f      	bne.n	8006eaa <HAL_I2C_Master_Transmit_DMA+0x1d2>
 8006e2a:	e013      	b.n	8006e54 <HAL_I2C_Master_Transmit_DMA+0x17c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2241      	movs	r2, #65	@ 0x41
 8006e30:	2120      	movs	r1, #32
 8006e32:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2242      	movs	r2, #66	@ 0x42
 8006e38:	2100      	movs	r1, #0
 8006e3a:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e40:	2280      	movs	r2, #128	@ 0x80
 8006e42:	431a      	orrs	r2, r3
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2240      	movs	r2, #64	@ 0x40
 8006e4c:	2100      	movs	r1, #0
 8006e4e:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	e05a      	b.n	8006f0a <HAL_I2C_Master_Transmit_DMA+0x232>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e58:	b2db      	uxtb	r3, r3
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	b2da      	uxtb	r2, r3
 8006e5e:	69fc      	ldr	r4, [r7, #28]
 8006e60:	230a      	movs	r3, #10
 8006e62:	18fb      	adds	r3, r7, r3
 8006e64:	8819      	ldrh	r1, [r3, #0]
 8006e66:	68f8      	ldr	r0, [r7, #12]
 8006e68:	4b2e      	ldr	r3, [pc, #184]	@ (8006f24 <HAL_I2C_Master_Transmit_DMA+0x24c>)
 8006e6a:	9300      	str	r3, [sp, #0]
 8006e6c:	0023      	movs	r3, r4
 8006e6e:	f001 fe69 	bl	8008b44 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e76:	b29a      	uxth	r2, r3
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e7c:	1ad3      	subs	r3, r2, r3
 8006e7e:	b29a      	uxth	r2, r3
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2240      	movs	r2, #64	@ 0x40
 8006e88:	2100      	movs	r1, #0
 8006e8a:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2110      	movs	r1, #16
 8006e90:	0018      	movs	r0, r3
 8006e92:	f001 fe91 	bl	8008bb8 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	2180      	movs	r1, #128	@ 0x80
 8006ea2:	01c9      	lsls	r1, r1, #7
 8006ea4:	430a      	orrs	r2, r1
 8006ea6:	601a      	str	r2, [r3, #0]
 8006ea8:	e02c      	b.n	8006f04 <HAL_I2C_Master_Transmit_DMA+0x22c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2241      	movs	r2, #65	@ 0x41
 8006eae:	2120      	movs	r1, #32
 8006eb0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2242      	movs	r2, #66	@ 0x42
 8006eb6:	2100      	movs	r1, #0
 8006eb8:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ebe:	2210      	movs	r2, #16
 8006ec0:	431a      	orrs	r2, r3
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2240      	movs	r2, #64	@ 0x40
 8006eca:	2100      	movs	r1, #0
 8006ecc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e01b      	b.n	8006f0a <HAL_I2C_Master_Transmit_DMA+0x232>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	4a14      	ldr	r2, [pc, #80]	@ (8006f28 <HAL_I2C_Master_Transmit_DMA+0x250>)
 8006ed6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 8006ed8:	69bb      	ldr	r3, [r7, #24]
 8006eda:	b2da      	uxtb	r2, r3
 8006edc:	2380      	movs	r3, #128	@ 0x80
 8006ede:	049c      	lsls	r4, r3, #18
 8006ee0:	230a      	movs	r3, #10
 8006ee2:	18fb      	adds	r3, r7, r3
 8006ee4:	8819      	ldrh	r1, [r3, #0]
 8006ee6:	68f8      	ldr	r0, [r7, #12]
 8006ee8:	4b0e      	ldr	r3, [pc, #56]	@ (8006f24 <HAL_I2C_Master_Transmit_DMA+0x24c>)
 8006eea:	9300      	str	r3, [sp, #0]
 8006eec:	0023      	movs	r3, r4
 8006eee:	f001 fe29 	bl	8008b44 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2240      	movs	r2, #64	@ 0x40
 8006ef6:	2100      	movs	r1, #0
 8006ef8:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2101      	movs	r1, #1
 8006efe:	0018      	movs	r0, r3
 8006f00:	f001 fe5a 	bl	8008bb8 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8006f04:	2300      	movs	r3, #0
 8006f06:	e000      	b.n	8006f0a <HAL_I2C_Master_Transmit_DMA+0x232>
  }
  else
  {
    return HAL_BUSY;
 8006f08:	2302      	movs	r3, #2
  }
}
 8006f0a:	0018      	movs	r0, r3
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	b008      	add	sp, #32
 8006f10:	bdb0      	pop	{r4, r5, r7, pc}
 8006f12:	46c0      	nop			@ (mov r8, r8)
 8006f14:	ffff0000 	.word	0xffff0000
 8006f18:	080078e9 	.word	0x080078e9
 8006f1c:	08008995 	.word	0x08008995
 8006f20:	08008ad5 	.word	0x08008ad5
 8006f24:	80002000 	.word	0x80002000
 8006f28:	08007481 	.word	0x08007481

08006f2c <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8006f2c:	b5b0      	push	{r4, r5, r7, lr}
 8006f2e:	b088      	sub	sp, #32
 8006f30:	af02      	add	r7, sp, #8
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	0008      	movs	r0, r1
 8006f36:	607a      	str	r2, [r7, #4]
 8006f38:	0019      	movs	r1, r3
 8006f3a:	230a      	movs	r3, #10
 8006f3c:	18fb      	adds	r3, r7, r3
 8006f3e:	1c02      	adds	r2, r0, #0
 8006f40:	801a      	strh	r2, [r3, #0]
 8006f42:	2308      	movs	r3, #8
 8006f44:	18fb      	adds	r3, r7, r3
 8006f46:	1c0a      	adds	r2, r1, #0
 8006f48:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2241      	movs	r2, #65	@ 0x41
 8006f4e:	5c9b      	ldrb	r3, [r3, r2]
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	2b20      	cmp	r3, #32
 8006f54:	d000      	beq.n	8006f58 <HAL_I2C_Master_Receive_DMA+0x2c>
 8006f56:	e0dd      	b.n	8007114 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	699a      	ldr	r2, [r3, #24]
 8006f5e:	2380      	movs	r3, #128	@ 0x80
 8006f60:	021b      	lsls	r3, r3, #8
 8006f62:	401a      	ands	r2, r3
 8006f64:	2380      	movs	r3, #128	@ 0x80
 8006f66:	021b      	lsls	r3, r3, #8
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d101      	bne.n	8006f70 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 8006f6c:	2302      	movs	r3, #2
 8006f6e:	e0d2      	b.n	8007116 <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2240      	movs	r2, #64	@ 0x40
 8006f74:	5c9b      	ldrb	r3, [r3, r2]
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	d101      	bne.n	8006f7e <HAL_I2C_Master_Receive_DMA+0x52>
 8006f7a:	2302      	movs	r3, #2
 8006f7c:	e0cb      	b.n	8007116 <HAL_I2C_Master_Receive_DMA+0x1ea>
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2240      	movs	r2, #64	@ 0x40
 8006f82:	2101      	movs	r1, #1
 8006f84:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2241      	movs	r2, #65	@ 0x41
 8006f8a:	2122      	movs	r1, #34	@ 0x22
 8006f8c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2242      	movs	r2, #66	@ 0x42
 8006f92:	2110      	movs	r1, #16
 8006f94:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2208      	movs	r2, #8
 8006fa6:	18ba      	adds	r2, r7, r2
 8006fa8:	8812      	ldrh	r2, [r2, #0]
 8006faa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	4a5c      	ldr	r2, [pc, #368]	@ (8007120 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 8006fb0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	4a5b      	ldr	r2, [pc, #364]	@ (8007124 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 8006fb6:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	2bff      	cmp	r3, #255	@ 0xff
 8006fc0:	d906      	bls.n	8006fd0 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	22ff      	movs	r2, #255	@ 0xff
 8006fc6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8006fc8:	2380      	movs	r3, #128	@ 0x80
 8006fca:	045b      	lsls	r3, r3, #17
 8006fcc:	617b      	str	r3, [r7, #20]
 8006fce:	e007      	b.n	8006fe0 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fd4:	b29a      	uxth	r2, r3
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8006fda:	2380      	movs	r3, #128	@ 0x80
 8006fdc:	049b      	lsls	r3, r3, #18
 8006fde:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d100      	bne.n	8006fea <HAL_I2C_Master_Receive_DMA+0xbe>
 8006fe8:	e078      	b.n	80070dc <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d023      	beq.n	800703a <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ff6:	4a4c      	ldr	r2, [pc, #304]	@ (8007128 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 8006ff8:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ffe:	4a4b      	ldr	r2, [pc, #300]	@ (800712c <HAL_I2C_Master_Receive_DMA+0x200>)
 8007000:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007006:	2200      	movs	r2, #0
 8007008:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800700e:	2200      	movs	r2, #0
 8007010:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	3324      	adds	r3, #36	@ 0x24
 800701c:	0019      	movs	r1, r3
 800701e:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8007024:	2513      	movs	r5, #19
 8007026:	197c      	adds	r4, r7, r5
 8007028:	f7ff f80c 	bl	8006044 <HAL_DMA_Start_IT>
 800702c:	0003      	movs	r3, r0
 800702e:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8007030:	197b      	adds	r3, r7, r5
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d13d      	bne.n	80070b4 <HAL_I2C_Master_Receive_DMA+0x188>
 8007038:	e013      	b.n	8007062 <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2241      	movs	r2, #65	@ 0x41
 800703e:	2120      	movs	r1, #32
 8007040:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2242      	movs	r2, #66	@ 0x42
 8007046:	2100      	movs	r1, #0
 8007048:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800704e:	2280      	movs	r2, #128	@ 0x80
 8007050:	431a      	orrs	r2, r3
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2240      	movs	r2, #64	@ 0x40
 800705a:	2100      	movs	r1, #0
 800705c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800705e:	2301      	movs	r3, #1
 8007060:	e059      	b.n	8007116 <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007066:	b2da      	uxtb	r2, r3
 8007068:	697c      	ldr	r4, [r7, #20]
 800706a:	230a      	movs	r3, #10
 800706c:	18fb      	adds	r3, r7, r3
 800706e:	8819      	ldrh	r1, [r3, #0]
 8007070:	68f8      	ldr	r0, [r7, #12]
 8007072:	4b2f      	ldr	r3, [pc, #188]	@ (8007130 <HAL_I2C_Master_Receive_DMA+0x204>)
 8007074:	9300      	str	r3, [sp, #0]
 8007076:	0023      	movs	r3, r4
 8007078:	f001 fd64 	bl	8008b44 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007080:	b29a      	uxth	r2, r3
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007086:	1ad3      	subs	r3, r2, r3
 8007088:	b29a      	uxth	r2, r3
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2240      	movs	r2, #64	@ 0x40
 8007092:	2100      	movs	r1, #0
 8007094:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2110      	movs	r1, #16
 800709a:	0018      	movs	r0, r3
 800709c:	f001 fd8c 	bl	8008bb8 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	2180      	movs	r1, #128	@ 0x80
 80070ac:	0209      	lsls	r1, r1, #8
 80070ae:	430a      	orrs	r2, r1
 80070b0:	601a      	str	r2, [r3, #0]
 80070b2:	e02d      	b.n	8007110 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2241      	movs	r2, #65	@ 0x41
 80070b8:	2120      	movs	r1, #32
 80070ba:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2242      	movs	r2, #66	@ 0x42
 80070c0:	2100      	movs	r1, #0
 80070c2:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070c8:	2210      	movs	r2, #16
 80070ca:	431a      	orrs	r2, r3
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2240      	movs	r2, #64	@ 0x40
 80070d4:	2100      	movs	r1, #0
 80070d6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80070d8:	2301      	movs	r3, #1
 80070da:	e01c      	b.n	8007116 <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	4a15      	ldr	r2, [pc, #84]	@ (8007134 <HAL_I2C_Master_Receive_DMA+0x208>)
 80070e0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070e6:	b2da      	uxtb	r2, r3
 80070e8:	2380      	movs	r3, #128	@ 0x80
 80070ea:	049c      	lsls	r4, r3, #18
 80070ec:	230a      	movs	r3, #10
 80070ee:	18fb      	adds	r3, r7, r3
 80070f0:	8819      	ldrh	r1, [r3, #0]
 80070f2:	68f8      	ldr	r0, [r7, #12]
 80070f4:	4b0e      	ldr	r3, [pc, #56]	@ (8007130 <HAL_I2C_Master_Receive_DMA+0x204>)
 80070f6:	9300      	str	r3, [sp, #0]
 80070f8:	0023      	movs	r3, r4
 80070fa:	f001 fd23 	bl	8008b44 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2240      	movs	r2, #64	@ 0x40
 8007102:	2100      	movs	r1, #0
 8007104:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2102      	movs	r1, #2
 800710a:	0018      	movs	r0, r3
 800710c:	f001 fd54 	bl	8008bb8 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8007110:	2300      	movs	r3, #0
 8007112:	e000      	b.n	8007116 <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007114:	2302      	movs	r3, #2
  }
}
 8007116:	0018      	movs	r0, r3
 8007118:	46bd      	mov	sp, r7
 800711a:	b006      	add	sp, #24
 800711c:	bdb0      	pop	{r4, r5, r7, pc}
 800711e:	46c0      	nop			@ (mov r8, r8)
 8007120:	ffff0000 	.word	0xffff0000
 8007124:	080078e9 	.word	0x080078e9
 8007128:	08008a35 	.word	0x08008a35
 800712c:	08008ad5 	.word	0x08008ad5
 8007130:	80002400 	.word	0x80002400
 8007134:	08007481 	.word	0x08007481

08007138 <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8007138:	b5b0      	push	{r4, r5, r7, lr}
 800713a:	b088      	sub	sp, #32
 800713c:	af02      	add	r7, sp, #8
 800713e:	60f8      	str	r0, [r7, #12]
 8007140:	000c      	movs	r4, r1
 8007142:	0010      	movs	r0, r2
 8007144:	0019      	movs	r1, r3
 8007146:	230a      	movs	r3, #10
 8007148:	18fb      	adds	r3, r7, r3
 800714a:	1c22      	adds	r2, r4, #0
 800714c:	801a      	strh	r2, [r3, #0]
 800714e:	2308      	movs	r3, #8
 8007150:	18fb      	adds	r3, r7, r3
 8007152:	1c02      	adds	r2, r0, #0
 8007154:	801a      	strh	r2, [r3, #0]
 8007156:	1dbb      	adds	r3, r7, #6
 8007158:	1c0a      	adds	r2, r1, #0
 800715a:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2241      	movs	r2, #65	@ 0x41
 8007160:	5c9b      	ldrb	r3, [r3, r2]
 8007162:	b2db      	uxtb	r3, r3
 8007164:	2b20      	cmp	r3, #32
 8007166:	d000      	beq.n	800716a <HAL_I2C_Mem_Read_DMA+0x32>
 8007168:	e0d6      	b.n	8007318 <HAL_I2C_Mem_Read_DMA+0x1e0>
  {
    if ((pData == NULL) || (Size == 0U))
 800716a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800716c:	2b00      	cmp	r3, #0
 800716e:	d004      	beq.n	800717a <HAL_I2C_Mem_Read_DMA+0x42>
 8007170:	232c      	movs	r3, #44	@ 0x2c
 8007172:	18fb      	adds	r3, r7, r3
 8007174:	881b      	ldrh	r3, [r3, #0]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d105      	bne.n	8007186 <HAL_I2C_Mem_Read_DMA+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2280      	movs	r2, #128	@ 0x80
 800717e:	0092      	lsls	r2, r2, #2
 8007180:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8007182:	2301      	movs	r3, #1
 8007184:	e0c9      	b.n	800731a <HAL_I2C_Mem_Read_DMA+0x1e2>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	699a      	ldr	r2, [r3, #24]
 800718c:	2380      	movs	r3, #128	@ 0x80
 800718e:	021b      	lsls	r3, r3, #8
 8007190:	401a      	ands	r2, r3
 8007192:	2380      	movs	r3, #128	@ 0x80
 8007194:	021b      	lsls	r3, r3, #8
 8007196:	429a      	cmp	r2, r3
 8007198:	d101      	bne.n	800719e <HAL_I2C_Mem_Read_DMA+0x66>
    {
      return HAL_BUSY;
 800719a:	2302      	movs	r3, #2
 800719c:	e0bd      	b.n	800731a <HAL_I2C_Mem_Read_DMA+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2240      	movs	r2, #64	@ 0x40
 80071a2:	5c9b      	ldrb	r3, [r3, r2]
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d101      	bne.n	80071ac <HAL_I2C_Mem_Read_DMA+0x74>
 80071a8:	2302      	movs	r3, #2
 80071aa:	e0b6      	b.n	800731a <HAL_I2C_Mem_Read_DMA+0x1e2>
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2240      	movs	r2, #64	@ 0x40
 80071b0:	2101      	movs	r1, #1
 80071b2:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2241      	movs	r2, #65	@ 0x41
 80071b8:	2122      	movs	r1, #34	@ 0x22
 80071ba:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2242      	movs	r2, #66	@ 0x42
 80071c0:	2140      	movs	r1, #64	@ 0x40
 80071c2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2200      	movs	r2, #0
 80071c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80071ce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	222c      	movs	r2, #44	@ 0x2c
 80071d4:	18ba      	adds	r2, r7, r2
 80071d6:	8812      	ldrh	r2, [r2, #0]
 80071d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	4a51      	ldr	r2, [pc, #324]	@ (8007324 <HAL_I2C_Mem_Read_DMA+0x1ec>)
 80071de:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	4a51      	ldr	r2, [pc, #324]	@ (8007328 <HAL_I2C_Mem_Read_DMA+0x1f0>)
 80071e4:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 80071e6:	230a      	movs	r3, #10
 80071e8:	18fb      	adds	r3, r7, r3
 80071ea:	881a      	ldrh	r2, [r3, #0]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	64da      	str	r2, [r3, #76]	@ 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	2bff      	cmp	r3, #255	@ 0xff
 80071f8:	d903      	bls.n	8007202 <HAL_I2C_Mem_Read_DMA+0xca>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	22ff      	movs	r2, #255	@ 0xff
 80071fe:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007200:	e004      	b.n	800720c <HAL_I2C_Mem_Read_DMA+0xd4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007206:	b29a      	uxth	r2, r3
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800720c:	1dbb      	adds	r3, r7, #6
 800720e:	881b      	ldrh	r3, [r3, #0]
 8007210:	2b01      	cmp	r3, #1
 8007212:	d10b      	bne.n	800722c <HAL_I2C_Mem_Read_DMA+0xf4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007214:	2308      	movs	r3, #8
 8007216:	18fb      	adds	r3, r7, r3
 8007218:	881b      	ldrh	r3, [r3, #0]
 800721a:	b2da      	uxtb	r2, r3
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2201      	movs	r2, #1
 8007226:	4252      	negs	r2, r2
 8007228:	651a      	str	r2, [r3, #80]	@ 0x50
 800722a:	e00e      	b.n	800724a <HAL_I2C_Mem_Read_DMA+0x112>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800722c:	2108      	movs	r1, #8
 800722e:	187b      	adds	r3, r7, r1
 8007230:	881b      	ldrh	r3, [r3, #0]
 8007232:	0a1b      	lsrs	r3, r3, #8
 8007234:	b29b      	uxth	r3, r3
 8007236:	b2da      	uxtb	r2, r3
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 800723e:	187b      	adds	r3, r7, r1
 8007240:	881b      	ldrh	r3, [r3, #0]
 8007242:	b2db      	uxtb	r3, r3
 8007244:	001a      	movs	r2, r3
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if (hi2c->hdmarx != NULL)
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800724e:	2b00      	cmp	r3, #0
 8007250:	d023      	beq.n	800729a <HAL_I2C_Mem_Read_DMA+0x162>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007256:	4a35      	ldr	r2, [pc, #212]	@ (800732c <HAL_I2C_Mem_Read_DMA+0x1f4>)
 8007258:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800725e:	4a34      	ldr	r2, [pc, #208]	@ (8007330 <HAL_I2C_Mem_Read_DMA+0x1f8>)
 8007260:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007266:	2200      	movs	r2, #0
 8007268:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->hdmarx->XferAbortCallback = NULL;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800726e:	2200      	movs	r2, #0
 8007270:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	3324      	adds	r3, #36	@ 0x24
 800727c:	0019      	movs	r1, r3
 800727e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
                                       hi2c->XferSize);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8007284:	2517      	movs	r5, #23
 8007286:	197c      	adds	r4, r7, r5
 8007288:	f7fe fedc 	bl	8006044 <HAL_DMA_Start_IT>
 800728c:	0003      	movs	r3, r0
 800728e:	7023      	strb	r3, [r4, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8007290:	197b      	adds	r3, r7, r5
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d12b      	bne.n	80072f0 <HAL_I2C_Mem_Read_DMA+0x1b8>
 8007298:	e013      	b.n	80072c2 <HAL_I2C_Mem_Read_DMA+0x18a>
      hi2c->State     = HAL_I2C_STATE_READY;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2241      	movs	r2, #65	@ 0x41
 800729e:	2120      	movs	r1, #32
 80072a0:	5499      	strb	r1, [r3, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2242      	movs	r2, #66	@ 0x42
 80072a6:	2100      	movs	r1, #0
 80072a8:	5499      	strb	r1, [r3, r2]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072ae:	2280      	movs	r2, #128	@ 0x80
 80072b0:	431a      	orrs	r2, r3
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2240      	movs	r2, #64	@ 0x40
 80072ba:	2100      	movs	r1, #0
 80072bc:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80072be:	2301      	movs	r3, #1
 80072c0:	e02b      	b.n	800731a <HAL_I2C_Mem_Read_DMA+0x1e2>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80072c2:	1dbb      	adds	r3, r7, #6
 80072c4:	881b      	ldrh	r3, [r3, #0]
 80072c6:	b2da      	uxtb	r2, r3
 80072c8:	230a      	movs	r3, #10
 80072ca:	18fb      	adds	r3, r7, r3
 80072cc:	8819      	ldrh	r1, [r3, #0]
 80072ce:	68f8      	ldr	r0, [r7, #12]
 80072d0:	4b18      	ldr	r3, [pc, #96]	@ (8007334 <HAL_I2C_Mem_Read_DMA+0x1fc>)
 80072d2:	9300      	str	r3, [sp, #0]
 80072d4:	2300      	movs	r3, #0
 80072d6:	f001 fc35 	bl	8008b44 <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2240      	movs	r2, #64	@ 0x40
 80072de:	2100      	movs	r1, #0
 80072e0:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2101      	movs	r1, #1
 80072e6:	0018      	movs	r0, r3
 80072e8:	f001 fc66 	bl	8008bb8 <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 80072ec:	2300      	movs	r3, #0
 80072ee:	e014      	b.n	800731a <HAL_I2C_Mem_Read_DMA+0x1e2>
      hi2c->State     = HAL_I2C_STATE_READY;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2241      	movs	r2, #65	@ 0x41
 80072f4:	2120      	movs	r1, #32
 80072f6:	5499      	strb	r1, [r3, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2242      	movs	r2, #66	@ 0x42
 80072fc:	2100      	movs	r1, #0
 80072fe:	5499      	strb	r1, [r3, r2]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007304:	2210      	movs	r2, #16
 8007306:	431a      	orrs	r2, r3
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2240      	movs	r2, #64	@ 0x40
 8007310:	2100      	movs	r1, #0
 8007312:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8007314:	2301      	movs	r3, #1
 8007316:	e000      	b.n	800731a <HAL_I2C_Mem_Read_DMA+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007318:	2302      	movs	r3, #2
  }
}
 800731a:	0018      	movs	r0, r3
 800731c:	46bd      	mov	sp, r7
 800731e:	b006      	add	sp, #24
 8007320:	bdb0      	pop	{r4, r5, r7, pc}
 8007322:	46c0      	nop			@ (mov r8, r8)
 8007324:	ffff0000 	.word	0xffff0000
 8007328:	08007ae1 	.word	0x08007ae1
 800732c:	08008a35 	.word	0x08008a35
 8007330:	08008ad5 	.word	0x08008ad5
 8007334:	80002000 	.word	0x80002000

08007338 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b084      	sub	sp, #16
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	699b      	ldr	r3, [r3, #24]
 8007346:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007354:	2b00      	cmp	r3, #0
 8007356:	d005      	beq.n	8007364 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800735c:	68ba      	ldr	r2, [r7, #8]
 800735e:	68f9      	ldr	r1, [r7, #12]
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	4798      	blx	r3
  }
}
 8007364:	46c0      	nop			@ (mov r8, r8)
 8007366:	46bd      	mov	sp, r7
 8007368:	b004      	add	sp, #16
 800736a:	bd80      	pop	{r7, pc}

0800736c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b086      	sub	sp, #24
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	699b      	ldr	r3, [r3, #24]
 800737a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007384:	697a      	ldr	r2, [r7, #20]
 8007386:	2380      	movs	r3, #128	@ 0x80
 8007388:	005b      	lsls	r3, r3, #1
 800738a:	4013      	ands	r3, r2
 800738c:	d00e      	beq.n	80073ac <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	2280      	movs	r2, #128	@ 0x80
 8007392:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007394:	d00a      	beq.n	80073ac <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800739a:	2201      	movs	r2, #1
 800739c:	431a      	orrs	r2, r3
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	2280      	movs	r2, #128	@ 0x80
 80073a8:	0052      	lsls	r2, r2, #1
 80073aa:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80073ac:	697a      	ldr	r2, [r7, #20]
 80073ae:	2380      	movs	r3, #128	@ 0x80
 80073b0:	00db      	lsls	r3, r3, #3
 80073b2:	4013      	ands	r3, r2
 80073b4:	d00e      	beq.n	80073d4 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	2280      	movs	r2, #128	@ 0x80
 80073ba:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80073bc:	d00a      	beq.n	80073d4 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073c2:	2208      	movs	r2, #8
 80073c4:	431a      	orrs	r2, r3
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	2280      	movs	r2, #128	@ 0x80
 80073d0:	00d2      	lsls	r2, r2, #3
 80073d2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80073d4:	697a      	ldr	r2, [r7, #20]
 80073d6:	2380      	movs	r3, #128	@ 0x80
 80073d8:	009b      	lsls	r3, r3, #2
 80073da:	4013      	ands	r3, r2
 80073dc:	d00e      	beq.n	80073fc <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	2280      	movs	r2, #128	@ 0x80
 80073e2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80073e4:	d00a      	beq.n	80073fc <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073ea:	2202      	movs	r2, #2
 80073ec:	431a      	orrs	r2, r3
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	2280      	movs	r2, #128	@ 0x80
 80073f8:	0092      	lsls	r2, r2, #2
 80073fa:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007400:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	220b      	movs	r2, #11
 8007406:	4013      	ands	r3, r2
 8007408:	d005      	beq.n	8007416 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 800740a:	68fa      	ldr	r2, [r7, #12]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	0011      	movs	r1, r2
 8007410:	0018      	movs	r0, r3
 8007412:	f001 f971 	bl	80086f8 <I2C_ITError>
  }
}
 8007416:	46c0      	nop			@ (mov r8, r8)
 8007418:	46bd      	mov	sp, r7
 800741a:	b006      	add	sp, #24
 800741c:	bd80      	pop	{r7, pc}

0800741e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800741e:	b580      	push	{r7, lr}
 8007420:	b082      	sub	sp, #8
 8007422:	af00      	add	r7, sp, #0
 8007424:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007426:	46c0      	nop			@ (mov r8, r8)
 8007428:	46bd      	mov	sp, r7
 800742a:	b002      	add	sp, #8
 800742c:	bd80      	pop	{r7, pc}

0800742e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800742e:	b580      	push	{r7, lr}
 8007430:	b082      	sub	sp, #8
 8007432:	af00      	add	r7, sp, #0
 8007434:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007436:	46c0      	nop			@ (mov r8, r8)
 8007438:	46bd      	mov	sp, r7
 800743a:	b002      	add	sp, #8
 800743c:	bd80      	pop	{r7, pc}

0800743e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800743e:	b580      	push	{r7, lr}
 8007440:	b082      	sub	sp, #8
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
 8007446:	0008      	movs	r0, r1
 8007448:	0011      	movs	r1, r2
 800744a:	1cfb      	adds	r3, r7, #3
 800744c:	1c02      	adds	r2, r0, #0
 800744e:	701a      	strb	r2, [r3, #0]
 8007450:	003b      	movs	r3, r7
 8007452:	1c0a      	adds	r2, r1, #0
 8007454:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007456:	46c0      	nop			@ (mov r8, r8)
 8007458:	46bd      	mov	sp, r7
 800745a:	b002      	add	sp, #8
 800745c:	bd80      	pop	{r7, pc}

0800745e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800745e:	b580      	push	{r7, lr}
 8007460:	b082      	sub	sp, #8
 8007462:	af00      	add	r7, sp, #0
 8007464:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8007466:	46c0      	nop			@ (mov r8, r8)
 8007468:	46bd      	mov	sp, r7
 800746a:	b002      	add	sp, #8
 800746c:	bd80      	pop	{r7, pc}

0800746e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800746e:	b580      	push	{r7, lr}
 8007470:	b082      	sub	sp, #8
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007476:	46c0      	nop			@ (mov r8, r8)
 8007478:	46bd      	mov	sp, r7
 800747a:	b002      	add	sp, #8
 800747c:	bd80      	pop	{r7, pc}
	...

08007480 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8007480:	b590      	push	{r4, r7, lr}
 8007482:	b089      	sub	sp, #36	@ 0x24
 8007484:	af02      	add	r7, sp, #8
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	60b9      	str	r1, [r7, #8]
 800748a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2240      	movs	r2, #64	@ 0x40
 8007494:	5c9b      	ldrb	r3, [r3, r2]
 8007496:	2b01      	cmp	r3, #1
 8007498:	d101      	bne.n	800749e <I2C_Master_ISR_IT+0x1e>
 800749a:	2302      	movs	r3, #2
 800749c:	e11d      	b.n	80076da <I2C_Master_ISR_IT+0x25a>
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2240      	movs	r2, #64	@ 0x40
 80074a2:	2101      	movs	r1, #1
 80074a4:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	2210      	movs	r2, #16
 80074aa:	4013      	ands	r3, r2
 80074ac:	d012      	beq.n	80074d4 <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2210      	movs	r2, #16
 80074b2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80074b4:	d00e      	beq.n	80074d4 <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	2210      	movs	r2, #16
 80074bc:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074c2:	2204      	movs	r2, #4
 80074c4:	431a      	orrs	r2, r3
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	0018      	movs	r0, r3
 80074ce:	f001 fa3e 	bl	800894e <I2C_Flush_TXDR>
 80074d2:	e0ef      	b.n	80076b4 <I2C_Master_ISR_IT+0x234>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	2204      	movs	r2, #4
 80074d8:	4013      	ands	r3, r2
 80074da:	d021      	beq.n	8007520 <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2204      	movs	r2, #4
 80074e0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80074e2:	d01d      	beq.n	8007520 <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	2204      	movs	r2, #4
 80074e8:	4393      	bics	r3, r2
 80074ea:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074f6:	b2d2      	uxtb	r2, r2
 80074f8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074fe:	1c5a      	adds	r2, r3, #1
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007508:	3b01      	subs	r3, #1
 800750a:	b29a      	uxth	r2, r3
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007514:	b29b      	uxth	r3, r3
 8007516:	3b01      	subs	r3, #1
 8007518:	b29a      	uxth	r2, r3
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800751e:	e0c9      	b.n	80076b4 <I2C_Master_ISR_IT+0x234>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	2240      	movs	r2, #64	@ 0x40
 8007524:	4013      	ands	r3, r2
 8007526:	d126      	bne.n	8007576 <I2C_Master_ISR_IT+0xf6>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	2202      	movs	r2, #2
 800752c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800752e:	d022      	beq.n	8007576 <I2C_Master_ISR_IT+0xf6>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2202      	movs	r2, #2
 8007534:	4013      	ands	r3, r2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007536:	d01e      	beq.n	8007576 <I2C_Master_ISR_IT+0xf6>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800753c:	b29b      	uxth	r3, r3
 800753e:	2b00      	cmp	r3, #0
 8007540:	d100      	bne.n	8007544 <I2C_Master_ISR_IT+0xc4>
 8007542:	e0b7      	b.n	80076b4 <I2C_Master_ISR_IT+0x234>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007548:	781a      	ldrb	r2, [r3, #0]
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007554:	1c5a      	adds	r2, r3, #1
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800755e:	3b01      	subs	r3, #1
 8007560:	b29a      	uxth	r2, r3
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800756a:	b29b      	uxth	r3, r3
 800756c:	3b01      	subs	r3, #1
 800756e:	b29a      	uxth	r2, r3
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8007574:	e09e      	b.n	80076b4 <I2C_Master_ISR_IT+0x234>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	2280      	movs	r2, #128	@ 0x80
 800757a:	4013      	ands	r3, r2
 800757c:	d100      	bne.n	8007580 <I2C_Master_ISR_IT+0x100>
 800757e:	e069      	b.n	8007654 <I2C_Master_ISR_IT+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2240      	movs	r2, #64	@ 0x40
 8007584:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8007586:	d065      	beq.n	8007654 <I2C_Master_ISR_IT+0x1d4>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800758c:	b29b      	uxth	r3, r3
 800758e:	2b00      	cmp	r3, #0
 8007590:	d04a      	beq.n	8007628 <I2C_Master_ISR_IT+0x1a8>
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007596:	2b00      	cmp	r3, #0
 8007598:	d146      	bne.n	8007628 <I2C_Master_ISR_IT+0x1a8>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	b29a      	uxth	r2, r3
 80075a2:	2112      	movs	r1, #18
 80075a4:	187b      	adds	r3, r7, r1
 80075a6:	0592      	lsls	r2, r2, #22
 80075a8:	0d92      	lsrs	r2, r2, #22
 80075aa:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	2bff      	cmp	r3, #255	@ 0xff
 80075b4:	d910      	bls.n	80075d8 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	22ff      	movs	r2, #255	@ 0xff
 80075ba:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075c0:	b2da      	uxtb	r2, r3
 80075c2:	2380      	movs	r3, #128	@ 0x80
 80075c4:	045c      	lsls	r4, r3, #17
 80075c6:	187b      	adds	r3, r7, r1
 80075c8:	8819      	ldrh	r1, [r3, #0]
 80075ca:	68f8      	ldr	r0, [r7, #12]
 80075cc:	2300      	movs	r3, #0
 80075ce:	9300      	str	r3, [sp, #0]
 80075d0:	0023      	movs	r3, r4
 80075d2:	f001 fab7 	bl	8008b44 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80075d6:	e03c      	b.n	8007652 <I2C_Master_ISR_IT+0x1d2>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075dc:	b29a      	uxth	r2, r3
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075e6:	4a3f      	ldr	r2, [pc, #252]	@ (80076e4 <I2C_Master_ISR_IT+0x264>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d00e      	beq.n	800760a <I2C_Master_ISR_IT+0x18a>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075f0:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80075f6:	2312      	movs	r3, #18
 80075f8:	18fb      	adds	r3, r7, r3
 80075fa:	8819      	ldrh	r1, [r3, #0]
 80075fc:	68f8      	ldr	r0, [r7, #12]
 80075fe:	2300      	movs	r3, #0
 8007600:	9300      	str	r3, [sp, #0]
 8007602:	0023      	movs	r3, r4
 8007604:	f001 fa9e 	bl	8008b44 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007608:	e023      	b.n	8007652 <I2C_Master_ISR_IT+0x1d2>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800760e:	b2da      	uxtb	r2, r3
 8007610:	2380      	movs	r3, #128	@ 0x80
 8007612:	049c      	lsls	r4, r3, #18
 8007614:	2312      	movs	r3, #18
 8007616:	18fb      	adds	r3, r7, r3
 8007618:	8819      	ldrh	r1, [r3, #0]
 800761a:	68f8      	ldr	r0, [r7, #12]
 800761c:	2300      	movs	r3, #0
 800761e:	9300      	str	r3, [sp, #0]
 8007620:	0023      	movs	r3, r4
 8007622:	f001 fa8f 	bl	8008b44 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007626:	e014      	b.n	8007652 <I2C_Master_ISR_IT+0x1d2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	685a      	ldr	r2, [r3, #4]
 800762e:	2380      	movs	r3, #128	@ 0x80
 8007630:	049b      	lsls	r3, r3, #18
 8007632:	401a      	ands	r2, r3
 8007634:	2380      	movs	r3, #128	@ 0x80
 8007636:	049b      	lsls	r3, r3, #18
 8007638:	429a      	cmp	r2, r3
 800763a:	d004      	beq.n	8007646 <I2C_Master_ISR_IT+0x1c6>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	0018      	movs	r0, r3
 8007640:	f000 fd06 	bl	8008050 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007644:	e036      	b.n	80076b4 <I2C_Master_ISR_IT+0x234>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2140      	movs	r1, #64	@ 0x40
 800764a:	0018      	movs	r0, r3
 800764c:	f001 f854 	bl	80086f8 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007650:	e030      	b.n	80076b4 <I2C_Master_ISR_IT+0x234>
 8007652:	e02f      	b.n	80076b4 <I2C_Master_ISR_IT+0x234>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	2240      	movs	r2, #64	@ 0x40
 8007658:	4013      	ands	r3, r2
 800765a:	d02b      	beq.n	80076b4 <I2C_Master_ISR_IT+0x234>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2240      	movs	r2, #64	@ 0x40
 8007660:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8007662:	d027      	beq.n	80076b4 <I2C_Master_ISR_IT+0x234>
  {
    if (hi2c->XferCount == 0U)
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007668:	b29b      	uxth	r3, r3
 800766a:	2b00      	cmp	r3, #0
 800766c:	d11d      	bne.n	80076aa <I2C_Master_ISR_IT+0x22a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	685a      	ldr	r2, [r3, #4]
 8007674:	2380      	movs	r3, #128	@ 0x80
 8007676:	049b      	lsls	r3, r3, #18
 8007678:	401a      	ands	r2, r3
 800767a:	2380      	movs	r3, #128	@ 0x80
 800767c:	049b      	lsls	r3, r3, #18
 800767e:	429a      	cmp	r2, r3
 8007680:	d018      	beq.n	80076b4 <I2C_Master_ISR_IT+0x234>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007686:	4a17      	ldr	r2, [pc, #92]	@ (80076e4 <I2C_Master_ISR_IT+0x264>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d109      	bne.n	80076a0 <I2C_Master_ISR_IT+0x220>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	685a      	ldr	r2, [r3, #4]
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	2180      	movs	r1, #128	@ 0x80
 8007698:	01c9      	lsls	r1, r1, #7
 800769a:	430a      	orrs	r2, r1
 800769c:	605a      	str	r2, [r3, #4]
 800769e:	e009      	b.n	80076b4 <I2C_Master_ISR_IT+0x234>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	0018      	movs	r0, r3
 80076a4:	f000 fcd4 	bl	8008050 <I2C_ITMasterSeqCplt>
 80076a8:	e004      	b.n	80076b4 <I2C_Master_ISR_IT+0x234>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2140      	movs	r1, #64	@ 0x40
 80076ae:	0018      	movs	r0, r3
 80076b0:	f001 f822 	bl	80086f8 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	2220      	movs	r2, #32
 80076b8:	4013      	ands	r3, r2
 80076ba:	d009      	beq.n	80076d0 <I2C_Master_ISR_IT+0x250>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2220      	movs	r2, #32
 80076c0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80076c2:	d005      	beq.n	80076d0 <I2C_Master_ISR_IT+0x250>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80076c4:	697a      	ldr	r2, [r7, #20]
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	0011      	movs	r1, r2
 80076ca:	0018      	movs	r0, r3
 80076cc:	f000 fd66 	bl	800819c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2240      	movs	r2, #64	@ 0x40
 80076d4:	2100      	movs	r1, #0
 80076d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80076d8:	2300      	movs	r3, #0
}
 80076da:	0018      	movs	r0, r3
 80076dc:	46bd      	mov	sp, r7
 80076de:	b007      	add	sp, #28
 80076e0:	bd90      	pop	{r4, r7, pc}
 80076e2:	46c0      	nop			@ (mov r8, r8)
 80076e4:	ffff0000 	.word	0xffff0000

080076e8 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b086      	sub	sp, #24
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	60f8      	str	r0, [r7, #12]
 80076f0:	60b9      	str	r1, [r7, #8]
 80076f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076f8:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2240      	movs	r2, #64	@ 0x40
 8007702:	5c9b      	ldrb	r3, [r3, r2]
 8007704:	2b01      	cmp	r3, #1
 8007706:	d101      	bne.n	800770c <I2C_Slave_ISR_IT+0x24>
 8007708:	2302      	movs	r3, #2
 800770a:	e0e7      	b.n	80078dc <I2C_Slave_ISR_IT+0x1f4>
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2240      	movs	r2, #64	@ 0x40
 8007710:	2101      	movs	r1, #1
 8007712:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	2220      	movs	r2, #32
 8007718:	4013      	ands	r3, r2
 800771a:	d00a      	beq.n	8007732 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2220      	movs	r2, #32
 8007720:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007722:	d006      	beq.n	8007732 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8007724:	693a      	ldr	r2, [r7, #16]
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	0011      	movs	r1, r2
 800772a:	0018      	movs	r0, r3
 800772c:	f000 fe04 	bl	8008338 <I2C_ITSlaveCplt>
 8007730:	e0cf      	b.n	80078d2 <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	2210      	movs	r2, #16
 8007736:	4013      	ands	r3, r2
 8007738:	d052      	beq.n	80077e0 <I2C_Slave_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2210      	movs	r2, #16
 800773e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007740:	d04e      	beq.n	80077e0 <I2C_Slave_ISR_IT+0xf8>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007746:	b29b      	uxth	r3, r3
 8007748:	2b00      	cmp	r3, #0
 800774a:	d12d      	bne.n	80077a8 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2241      	movs	r2, #65	@ 0x41
 8007750:	5c9b      	ldrb	r3, [r3, r2]
 8007752:	b2db      	uxtb	r3, r3
 8007754:	2b28      	cmp	r3, #40	@ 0x28
 8007756:	d10b      	bne.n	8007770 <I2C_Slave_ISR_IT+0x88>
 8007758:	697a      	ldr	r2, [r7, #20]
 800775a:	2380      	movs	r3, #128	@ 0x80
 800775c:	049b      	lsls	r3, r3, #18
 800775e:	429a      	cmp	r2, r3
 8007760:	d106      	bne.n	8007770 <I2C_Slave_ISR_IT+0x88>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007762:	693a      	ldr	r2, [r7, #16]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	0011      	movs	r1, r2
 8007768:	0018      	movs	r0, r3
 800776a:	f000 ff6d 	bl	8008648 <I2C_ITListenCplt>
 800776e:	e036      	b.n	80077de <I2C_Slave_ISR_IT+0xf6>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2241      	movs	r2, #65	@ 0x41
 8007774:	5c9b      	ldrb	r3, [r3, r2]
 8007776:	b2db      	uxtb	r3, r3
 8007778:	2b29      	cmp	r3, #41	@ 0x29
 800777a:	d110      	bne.n	800779e <I2C_Slave_ISR_IT+0xb6>
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	4a59      	ldr	r2, [pc, #356]	@ (80078e4 <I2C_Slave_ISR_IT+0x1fc>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d00c      	beq.n	800779e <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	2210      	movs	r2, #16
 800778a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	0018      	movs	r0, r3
 8007790:	f001 f8dd 	bl	800894e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	0018      	movs	r0, r3
 8007798:	f000 fc9c 	bl	80080d4 <I2C_ITSlaveSeqCplt>
 800779c:	e01f      	b.n	80077de <I2C_Slave_ISR_IT+0xf6>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	2210      	movs	r2, #16
 80077a4:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80077a6:	e091      	b.n	80078cc <I2C_Slave_ISR_IT+0x1e4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	2210      	movs	r2, #16
 80077ae:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077b4:	2204      	movs	r2, #4
 80077b6:	431a      	orrs	r2, r3
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d005      	beq.n	80077ce <I2C_Slave_ISR_IT+0xe6>
 80077c2:	697a      	ldr	r2, [r7, #20]
 80077c4:	2380      	movs	r3, #128	@ 0x80
 80077c6:	045b      	lsls	r3, r3, #17
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d000      	beq.n	80077ce <I2C_Slave_ISR_IT+0xe6>
 80077cc:	e07e      	b.n	80078cc <I2C_Slave_ISR_IT+0x1e4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	0011      	movs	r1, r2
 80077d6:	0018      	movs	r0, r3
 80077d8:	f000 ff8e 	bl	80086f8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80077dc:	e076      	b.n	80078cc <I2C_Slave_ISR_IT+0x1e4>
 80077de:	e075      	b.n	80078cc <I2C_Slave_ISR_IT+0x1e4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	2204      	movs	r2, #4
 80077e4:	4013      	ands	r3, r2
 80077e6:	d02f      	beq.n	8007848 <I2C_Slave_ISR_IT+0x160>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2204      	movs	r2, #4
 80077ec:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80077ee:	d02b      	beq.n	8007848 <I2C_Slave_ISR_IT+0x160>
  {
    if (hi2c->XferCount > 0U)
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d018      	beq.n	800782c <I2C_Slave_ISR_IT+0x144>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007804:	b2d2      	uxtb	r2, r2
 8007806:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800780c:	1c5a      	adds	r2, r3, #1
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007816:	3b01      	subs	r3, #1
 8007818:	b29a      	uxth	r2, r3
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007822:	b29b      	uxth	r3, r3
 8007824:	3b01      	subs	r3, #1
 8007826:	b29a      	uxth	r2, r3
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007830:	b29b      	uxth	r3, r3
 8007832:	2b00      	cmp	r3, #0
 8007834:	d14c      	bne.n	80078d0 <I2C_Slave_ISR_IT+0x1e8>
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	4a2a      	ldr	r2, [pc, #168]	@ (80078e4 <I2C_Slave_ISR_IT+0x1fc>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d048      	beq.n	80078d0 <I2C_Slave_ISR_IT+0x1e8>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	0018      	movs	r0, r3
 8007842:	f000 fc47 	bl	80080d4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8007846:	e043      	b.n	80078d0 <I2C_Slave_ISR_IT+0x1e8>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	2208      	movs	r2, #8
 800784c:	4013      	ands	r3, r2
 800784e:	d00a      	beq.n	8007866 <I2C_Slave_ISR_IT+0x17e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2208      	movs	r2, #8
 8007854:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007856:	d006      	beq.n	8007866 <I2C_Slave_ISR_IT+0x17e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8007858:	693a      	ldr	r2, [r7, #16]
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	0011      	movs	r1, r2
 800785e:	0018      	movs	r0, r3
 8007860:	f000 fb52 	bl	8007f08 <I2C_ITAddrCplt>
 8007864:	e035      	b.n	80078d2 <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	2202      	movs	r2, #2
 800786a:	4013      	ands	r3, r2
 800786c:	d031      	beq.n	80078d2 <I2C_Slave_ISR_IT+0x1ea>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2202      	movs	r2, #2
 8007872:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007874:	d02d      	beq.n	80078d2 <I2C_Slave_ISR_IT+0x1ea>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800787a:	b29b      	uxth	r3, r3
 800787c:	2b00      	cmp	r3, #0
 800787e:	d018      	beq.n	80078b2 <I2C_Slave_ISR_IT+0x1ca>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007884:	781a      	ldrb	r2, [r3, #0]
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007890:	1c5a      	adds	r2, r3, #1
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800789a:	b29b      	uxth	r3, r3
 800789c:	3b01      	subs	r3, #1
 800789e:	b29a      	uxth	r2, r3
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078a8:	3b01      	subs	r3, #1
 80078aa:	b29a      	uxth	r2, r3
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	851a      	strh	r2, [r3, #40]	@ 0x28
 80078b0:	e00f      	b.n	80078d2 <I2C_Slave_ISR_IT+0x1ea>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80078b2:	697a      	ldr	r2, [r7, #20]
 80078b4:	2380      	movs	r3, #128	@ 0x80
 80078b6:	045b      	lsls	r3, r3, #17
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d002      	beq.n	80078c2 <I2C_Slave_ISR_IT+0x1da>
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d107      	bne.n	80078d2 <I2C_Slave_ISR_IT+0x1ea>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	0018      	movs	r0, r3
 80078c6:	f000 fc05 	bl	80080d4 <I2C_ITSlaveSeqCplt>
 80078ca:	e002      	b.n	80078d2 <I2C_Slave_ISR_IT+0x1ea>
    if (hi2c->XferCount == 0U)
 80078cc:	46c0      	nop			@ (mov r8, r8)
 80078ce:	e000      	b.n	80078d2 <I2C_Slave_ISR_IT+0x1ea>
    if ((hi2c->XferCount == 0U) && \
 80078d0:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2240      	movs	r2, #64	@ 0x40
 80078d6:	2100      	movs	r1, #0
 80078d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80078da:	2300      	movs	r3, #0
}
 80078dc:	0018      	movs	r0, r3
 80078de:	46bd      	mov	sp, r7
 80078e0:	b006      	add	sp, #24
 80078e2:	bd80      	pop	{r7, pc}
 80078e4:	ffff0000 	.word	0xffff0000

080078e8 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80078e8:	b590      	push	{r4, r7, lr}
 80078ea:	b089      	sub	sp, #36	@ 0x24
 80078ec:	af02      	add	r7, sp, #8
 80078ee:	60f8      	str	r0, [r7, #12]
 80078f0:	60b9      	str	r1, [r7, #8]
 80078f2:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2240      	movs	r2, #64	@ 0x40
 80078f8:	5c9b      	ldrb	r3, [r3, r2]
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	d101      	bne.n	8007902 <I2C_Master_ISR_DMA+0x1a>
 80078fe:	2302      	movs	r3, #2
 8007900:	e0e7      	b.n	8007ad2 <I2C_Master_ISR_DMA+0x1ea>
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2240      	movs	r2, #64	@ 0x40
 8007906:	2101      	movs	r1, #1
 8007908:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	2210      	movs	r2, #16
 800790e:	4013      	ands	r3, r2
 8007910:	d017      	beq.n	8007942 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2210      	movs	r2, #16
 8007916:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007918:	d013      	beq.n	8007942 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	2210      	movs	r2, #16
 8007920:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007926:	2204      	movs	r2, #4
 8007928:	431a      	orrs	r2, r3
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2120      	movs	r1, #32
 8007932:	0018      	movs	r0, r3
 8007934:	f001 f940 	bl	8008bb8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	0018      	movs	r0, r3
 800793c:	f001 f807 	bl	800894e <I2C_Flush_TXDR>
 8007940:	e0c2      	b.n	8007ac8 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	2280      	movs	r2, #128	@ 0x80
 8007946:	4013      	ands	r3, r2
 8007948:	d100      	bne.n	800794c <I2C_Master_ISR_DMA+0x64>
 800794a:	e07c      	b.n	8007a46 <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2240      	movs	r2, #64	@ 0x40
 8007950:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007952:	d100      	bne.n	8007956 <I2C_Master_ISR_DMA+0x6e>
 8007954:	e077      	b.n	8007a46 <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	2140      	movs	r1, #64	@ 0x40
 8007962:	438a      	bics	r2, r1
 8007964:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800796a:	b29b      	uxth	r3, r3
 800796c:	2b00      	cmp	r3, #0
 800796e:	d055      	beq.n	8007a1c <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	b29a      	uxth	r2, r3
 8007978:	2312      	movs	r3, #18
 800797a:	18fb      	adds	r3, r7, r3
 800797c:	0592      	lsls	r2, r2, #22
 800797e:	0d92      	lsrs	r2, r2, #22
 8007980:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007986:	b29b      	uxth	r3, r3
 8007988:	2bff      	cmp	r3, #255	@ 0xff
 800798a:	d906      	bls.n	800799a <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	22ff      	movs	r2, #255	@ 0xff
 8007990:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8007992:	2380      	movs	r3, #128	@ 0x80
 8007994:	045b      	lsls	r3, r3, #17
 8007996:	617b      	str	r3, [r7, #20]
 8007998:	e010      	b.n	80079bc <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800799e:	b29a      	uxth	r2, r3
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079a8:	4a4c      	ldr	r2, [pc, #304]	@ (8007adc <I2C_Master_ISR_DMA+0x1f4>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d003      	beq.n	80079b6 <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079b2:	617b      	str	r3, [r7, #20]
 80079b4:	e002      	b.n	80079bc <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80079b6:	2380      	movs	r3, #128	@ 0x80
 80079b8:	049b      	lsls	r3, r3, #18
 80079ba:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079c0:	b2da      	uxtb	r2, r3
 80079c2:	697c      	ldr	r4, [r7, #20]
 80079c4:	2312      	movs	r3, #18
 80079c6:	18fb      	adds	r3, r7, r3
 80079c8:	8819      	ldrh	r1, [r3, #0]
 80079ca:	68f8      	ldr	r0, [r7, #12]
 80079cc:	2300      	movs	r3, #0
 80079ce:	9300      	str	r3, [sp, #0]
 80079d0:	0023      	movs	r3, r4
 80079d2:	f001 f8b7 	bl	8008b44 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079da:	b29a      	uxth	r2, r3
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079e0:	1ad3      	subs	r3, r2, r3
 80079e2:	b29a      	uxth	r2, r3
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2241      	movs	r2, #65	@ 0x41
 80079ec:	5c9b      	ldrb	r3, [r3, r2]
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	2b22      	cmp	r3, #34	@ 0x22
 80079f2:	d109      	bne.n	8007a08 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	2180      	movs	r1, #128	@ 0x80
 8007a00:	0209      	lsls	r1, r1, #8
 8007a02:	430a      	orrs	r2, r1
 8007a04:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007a06:	e05f      	b.n	8007ac8 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	681a      	ldr	r2, [r3, #0]
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	2180      	movs	r1, #128	@ 0x80
 8007a14:	01c9      	lsls	r1, r1, #7
 8007a16:	430a      	orrs	r2, r1
 8007a18:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007a1a:	e055      	b.n	8007ac8 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	685a      	ldr	r2, [r3, #4]
 8007a22:	2380      	movs	r3, #128	@ 0x80
 8007a24:	049b      	lsls	r3, r3, #18
 8007a26:	401a      	ands	r2, r3
 8007a28:	2380      	movs	r3, #128	@ 0x80
 8007a2a:	049b      	lsls	r3, r3, #18
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d004      	beq.n	8007a3a <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	0018      	movs	r0, r3
 8007a34:	f000 fb0c 	bl	8008050 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8007a38:	e046      	b.n	8007ac8 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2140      	movs	r1, #64	@ 0x40
 8007a3e:	0018      	movs	r0, r3
 8007a40:	f000 fe5a 	bl	80086f8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8007a44:	e040      	b.n	8007ac8 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	2240      	movs	r2, #64	@ 0x40
 8007a4a:	4013      	ands	r3, r2
 8007a4c:	d02c      	beq.n	8007aa8 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2240      	movs	r2, #64	@ 0x40
 8007a52:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007a54:	d028      	beq.n	8007aa8 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d11d      	bne.n	8007a9c <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	685a      	ldr	r2, [r3, #4]
 8007a66:	2380      	movs	r3, #128	@ 0x80
 8007a68:	049b      	lsls	r3, r3, #18
 8007a6a:	401a      	ands	r2, r3
 8007a6c:	2380      	movs	r3, #128	@ 0x80
 8007a6e:	049b      	lsls	r3, r3, #18
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d028      	beq.n	8007ac6 <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a78:	4a18      	ldr	r2, [pc, #96]	@ (8007adc <I2C_Master_ISR_DMA+0x1f4>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d109      	bne.n	8007a92 <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	685a      	ldr	r2, [r3, #4]
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	2180      	movs	r1, #128	@ 0x80
 8007a8a:	01c9      	lsls	r1, r1, #7
 8007a8c:	430a      	orrs	r2, r1
 8007a8e:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8007a90:	e019      	b.n	8007ac6 <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	0018      	movs	r0, r3
 8007a96:	f000 fadb 	bl	8008050 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8007a9a:	e014      	b.n	8007ac6 <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2140      	movs	r1, #64	@ 0x40
 8007aa0:	0018      	movs	r0, r3
 8007aa2:	f000 fe29 	bl	80086f8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007aa6:	e00e      	b.n	8007ac6 <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	2220      	movs	r2, #32
 8007aac:	4013      	ands	r3, r2
 8007aae:	d00b      	beq.n	8007ac8 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2220      	movs	r2, #32
 8007ab4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007ab6:	d007      	beq.n	8007ac8 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8007ab8:	68ba      	ldr	r2, [r7, #8]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	0011      	movs	r1, r2
 8007abe:	0018      	movs	r0, r3
 8007ac0:	f000 fb6c 	bl	800819c <I2C_ITMasterCplt>
 8007ac4:	e000      	b.n	8007ac8 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 8007ac6:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2240      	movs	r2, #64	@ 0x40
 8007acc:	2100      	movs	r1, #0
 8007ace:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007ad0:	2300      	movs	r3, #0
}
 8007ad2:	0018      	movs	r0, r3
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	b007      	add	sp, #28
 8007ad8:	bd90      	pop	{r4, r7, pc}
 8007ada:	46c0      	nop			@ (mov r8, r8)
 8007adc:	ffff0000 	.word	0xffff0000

08007ae0 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8007ae0:	b590      	push	{r4, r7, lr}
 8007ae2:	b089      	sub	sp, #36	@ 0x24
 8007ae4:	af02      	add	r7, sp, #8
 8007ae6:	60f8      	str	r0, [r7, #12]
 8007ae8:	60b9      	str	r1, [r7, #8]
 8007aea:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8007aec:	4b90      	ldr	r3, [pc, #576]	@ (8007d30 <I2C_Mem_ISR_DMA+0x250>)
 8007aee:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2240      	movs	r2, #64	@ 0x40
 8007af4:	5c9b      	ldrb	r3, [r3, r2]
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d101      	bne.n	8007afe <I2C_Mem_ISR_DMA+0x1e>
 8007afa:	2302      	movs	r3, #2
 8007afc:	e113      	b.n	8007d26 <I2C_Mem_ISR_DMA+0x246>
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2240      	movs	r2, #64	@ 0x40
 8007b02:	2101      	movs	r1, #1
 8007b04:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	2210      	movs	r2, #16
 8007b0a:	4013      	ands	r3, r2
 8007b0c:	d017      	beq.n	8007b3e <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2210      	movs	r2, #16
 8007b12:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007b14:	d013      	beq.n	8007b3e <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	2210      	movs	r2, #16
 8007b1c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b22:	2204      	movs	r2, #4
 8007b24:	431a      	orrs	r2, r3
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2120      	movs	r1, #32
 8007b2e:	0018      	movs	r0, r3
 8007b30:	f001 f842 	bl	8008bb8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	0018      	movs	r0, r3
 8007b38:	f000 ff09 	bl	800894e <I2C_Flush_TXDR>
 8007b3c:	e0ee      	b.n	8007d1c <I2C_Mem_ISR_DMA+0x23c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	2202      	movs	r2, #2
 8007b42:	4013      	ands	r3, r2
 8007b44:	d00d      	beq.n	8007b62 <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2202      	movs	r2, #2
 8007b4a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007b4c:	d009      	beq.n	8007b62 <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	68fa      	ldr	r2, [r7, #12]
 8007b54:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007b56:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	4252      	negs	r2, r2
 8007b5e:	651a      	str	r2, [r3, #80]	@ 0x50
 8007b60:	e0dc      	b.n	8007d1c <I2C_Mem_ISR_DMA+0x23c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	2280      	movs	r2, #128	@ 0x80
 8007b66:	4013      	ands	r3, r2
 8007b68:	d063      	beq.n	8007c32 <I2C_Mem_ISR_DMA+0x152>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2240      	movs	r2, #64	@ 0x40
 8007b6e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007b70:	d05f      	beq.n	8007c32 <I2C_Mem_ISR_DMA+0x152>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2101      	movs	r1, #1
 8007b76:	0018      	movs	r0, r3
 8007b78:	f001 f8a8 	bl	8008ccc <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2110      	movs	r1, #16
 8007b80:	0018      	movs	r0, r3
 8007b82:	f001 f819 	bl	8008bb8 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d04a      	beq.n	8007c26 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	2bff      	cmp	r3, #255	@ 0xff
 8007b98:	d910      	bls.n	8007bbc <I2C_Mem_ISR_DMA+0xdc>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	22ff      	movs	r2, #255	@ 0xff
 8007b9e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ba4:	b299      	uxth	r1, r3
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007baa:	b2da      	uxtb	r2, r3
 8007bac:	2380      	movs	r3, #128	@ 0x80
 8007bae:	045b      	lsls	r3, r3, #17
 8007bb0:	68f8      	ldr	r0, [r7, #12]
 8007bb2:	2400      	movs	r4, #0
 8007bb4:	9400      	str	r4, [sp, #0]
 8007bb6:	f000 ffc5 	bl	8008b44 <I2C_TransferConfig>
 8007bba:	e011      	b.n	8007be0 <I2C_Mem_ISR_DMA+0x100>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bc0:	b29a      	uxth	r2, r3
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007bca:	b299      	uxth	r1, r3
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007bd0:	b2da      	uxtb	r2, r3
 8007bd2:	2380      	movs	r3, #128	@ 0x80
 8007bd4:	049b      	lsls	r3, r3, #18
 8007bd6:	68f8      	ldr	r0, [r7, #12]
 8007bd8:	2400      	movs	r4, #0
 8007bda:	9400      	str	r4, [sp, #0]
 8007bdc:	f000 ffb2 	bl	8008b44 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007be4:	b29a      	uxth	r2, r3
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007bea:	1ad3      	subs	r3, r2, r3
 8007bec:	b29a      	uxth	r2, r3
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2241      	movs	r2, #65	@ 0x41
 8007bf6:	5c9b      	ldrb	r3, [r3, r2]
 8007bf8:	b2db      	uxtb	r3, r3
 8007bfa:	2b22      	cmp	r3, #34	@ 0x22
 8007bfc:	d109      	bne.n	8007c12 <I2C_Mem_ISR_DMA+0x132>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	681a      	ldr	r2, [r3, #0]
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	2180      	movs	r1, #128	@ 0x80
 8007c0a:	0209      	lsls	r1, r1, #8
 8007c0c:	430a      	orrs	r2, r1
 8007c0e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007c10:	e084      	b.n	8007d1c <I2C_Mem_ISR_DMA+0x23c>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	681a      	ldr	r2, [r3, #0]
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	2180      	movs	r1, #128	@ 0x80
 8007c1e:	01c9      	lsls	r1, r1, #7
 8007c20:	430a      	orrs	r2, r1
 8007c22:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007c24:	e07a      	b.n	8007d1c <I2C_Mem_ISR_DMA+0x23c>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2140      	movs	r1, #64	@ 0x40
 8007c2a:	0018      	movs	r0, r3
 8007c2c:	f000 fd64 	bl	80086f8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8007c30:	e074      	b.n	8007d1c <I2C_Mem_ISR_DMA+0x23c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	2240      	movs	r2, #64	@ 0x40
 8007c36:	4013      	ands	r3, r2
 8007c38:	d062      	beq.n	8007d00 <I2C_Mem_ISR_DMA+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2240      	movs	r2, #64	@ 0x40
 8007c3e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007c40:	d05e      	beq.n	8007d00 <I2C_Mem_ISR_DMA+0x220>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2101      	movs	r1, #1
 8007c46:	0018      	movs	r0, r3
 8007c48:	f001 f840 	bl	8008ccc <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2110      	movs	r1, #16
 8007c50:	0018      	movs	r0, r3
 8007c52:	f000 ffb1 	bl	8008bb8 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2241      	movs	r2, #65	@ 0x41
 8007c5a:	5c9b      	ldrb	r3, [r3, r2]
 8007c5c:	b2db      	uxtb	r3, r3
 8007c5e:	2b22      	cmp	r3, #34	@ 0x22
 8007c60:	d101      	bne.n	8007c66 <I2C_Mem_ISR_DMA+0x186>
    {
      direction = I2C_GENERATE_START_READ;
 8007c62:	4b34      	ldr	r3, [pc, #208]	@ (8007d34 <I2C_Mem_ISR_DMA+0x254>)
 8007c64:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	2bff      	cmp	r3, #255	@ 0xff
 8007c6e:	d911      	bls.n	8007c94 <I2C_Mem_ISR_DMA+0x1b4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	22ff      	movs	r2, #255	@ 0xff
 8007c74:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c7a:	b299      	uxth	r1, r3
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c80:	b2da      	uxtb	r2, r3
 8007c82:	2380      	movs	r3, #128	@ 0x80
 8007c84:	045c      	lsls	r4, r3, #17
 8007c86:	68f8      	ldr	r0, [r7, #12]
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	9300      	str	r3, [sp, #0]
 8007c8c:	0023      	movs	r3, r4
 8007c8e:	f000 ff59 	bl	8008b44 <I2C_TransferConfig>
 8007c92:	e012      	b.n	8007cba <I2C_Mem_ISR_DMA+0x1da>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c98:	b29a      	uxth	r2, r3
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ca2:	b299      	uxth	r1, r3
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ca8:	b2da      	uxtb	r2, r3
 8007caa:	2380      	movs	r3, #128	@ 0x80
 8007cac:	049c      	lsls	r4, r3, #18
 8007cae:	68f8      	ldr	r0, [r7, #12]
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	9300      	str	r3, [sp, #0]
 8007cb4:	0023      	movs	r3, r4
 8007cb6:	f000 ff45 	bl	8008b44 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007cbe:	b29a      	uxth	r2, r3
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007cc4:	1ad3      	subs	r3, r2, r3
 8007cc6:	b29a      	uxth	r2, r3
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2241      	movs	r2, #65	@ 0x41
 8007cd0:	5c9b      	ldrb	r3, [r3, r2]
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	2b22      	cmp	r3, #34	@ 0x22
 8007cd6:	d109      	bne.n	8007cec <I2C_Mem_ISR_DMA+0x20c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	681a      	ldr	r2, [r3, #0]
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	2180      	movs	r1, #128	@ 0x80
 8007ce4:	0209      	lsls	r1, r1, #8
 8007ce6:	430a      	orrs	r2, r1
 8007ce8:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007cea:	e017      	b.n	8007d1c <I2C_Mem_ISR_DMA+0x23c>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	681a      	ldr	r2, [r3, #0]
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	2180      	movs	r1, #128	@ 0x80
 8007cf8:	01c9      	lsls	r1, r1, #7
 8007cfa:	430a      	orrs	r2, r1
 8007cfc:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007cfe:	e00d      	b.n	8007d1c <I2C_Mem_ISR_DMA+0x23c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	2220      	movs	r2, #32
 8007d04:	4013      	ands	r3, r2
 8007d06:	d009      	beq.n	8007d1c <I2C_Mem_ISR_DMA+0x23c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2220      	movs	r2, #32
 8007d0c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007d0e:	d005      	beq.n	8007d1c <I2C_Mem_ISR_DMA+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8007d10:	68ba      	ldr	r2, [r7, #8]
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	0011      	movs	r1, r2
 8007d16:	0018      	movs	r0, r3
 8007d18:	f000 fa40 	bl	800819c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2240      	movs	r2, #64	@ 0x40
 8007d20:	2100      	movs	r1, #0
 8007d22:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007d24:	2300      	movs	r3, #0
}
 8007d26:	0018      	movs	r0, r3
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	b007      	add	sp, #28
 8007d2c:	bd90      	pop	{r4, r7, pc}
 8007d2e:	46c0      	nop			@ (mov r8, r8)
 8007d30:	80002000 	.word	0x80002000
 8007d34:	80002400 	.word	0x80002400

08007d38 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b088      	sub	sp, #32
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	60f8      	str	r0, [r7, #12]
 8007d40:	60b9      	str	r1, [r7, #8]
 8007d42:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d48:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2240      	movs	r2, #64	@ 0x40
 8007d52:	5c9b      	ldrb	r3, [r3, r2]
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	d101      	bne.n	8007d5c <I2C_Slave_ISR_DMA+0x24>
 8007d58:	2302      	movs	r3, #2
 8007d5a:	e0ce      	b.n	8007efa <I2C_Slave_ISR_DMA+0x1c2>
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2240      	movs	r2, #64	@ 0x40
 8007d60:	2101      	movs	r1, #1
 8007d62:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	2220      	movs	r2, #32
 8007d68:	4013      	ands	r3, r2
 8007d6a:	d00a      	beq.n	8007d82 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2220      	movs	r2, #32
 8007d70:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007d72:	d006      	beq.n	8007d82 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8007d74:	68ba      	ldr	r2, [r7, #8]
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	0011      	movs	r1, r2
 8007d7a:	0018      	movs	r0, r3
 8007d7c:	f000 fadc 	bl	8008338 <I2C_ITSlaveCplt>
 8007d80:	e0b6      	b.n	8007ef0 <I2C_Slave_ISR_DMA+0x1b8>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	2210      	movs	r2, #16
 8007d86:	4013      	ands	r3, r2
 8007d88:	d100      	bne.n	8007d8c <I2C_Slave_ISR_DMA+0x54>
 8007d8a:	e0a3      	b.n	8007ed4 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2210      	movs	r2, #16
 8007d90:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007d92:	d100      	bne.n	8007d96 <I2C_Slave_ISR_DMA+0x5e>
 8007d94:	e09e      	b.n	8007ed4 <I2C_Slave_ISR_DMA+0x19c>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007d96:	687a      	ldr	r2, [r7, #4]
 8007d98:	2380      	movs	r3, #128	@ 0x80
 8007d9a:	01db      	lsls	r3, r3, #7
 8007d9c:	4013      	ands	r3, r2
 8007d9e:	d105      	bne.n	8007dac <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8007da0:	687a      	ldr	r2, [r7, #4]
 8007da2:	2380      	movs	r3, #128	@ 0x80
 8007da4:	021b      	lsls	r3, r3, #8
 8007da6:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007da8:	d100      	bne.n	8007dac <I2C_Slave_ISR_DMA+0x74>
 8007daa:	e08c      	b.n	8007ec6 <I2C_Slave_ISR_DMA+0x18e>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d00c      	beq.n	8007dce <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8007db4:	687a      	ldr	r2, [r7, #4]
 8007db6:	2380      	movs	r3, #128	@ 0x80
 8007db8:	021b      	lsls	r3, r3, #8
 8007dba:	4013      	ands	r3, r2
 8007dbc:	d007      	beq.n	8007dce <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d101      	bne.n	8007dce <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d00c      	beq.n	8007df0 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8007dd6:	687a      	ldr	r2, [r7, #4]
 8007dd8:	2380      	movs	r3, #128	@ 0x80
 8007dda:	01db      	lsls	r3, r3, #7
 8007ddc:	4013      	ands	r3, r2
 8007dde:	d007      	beq.n	8007df0 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d101      	bne.n	8007df0 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 8007dec:	2301      	movs	r3, #1
 8007dee:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8007df0:	69fb      	ldr	r3, [r7, #28]
 8007df2:	2b01      	cmp	r3, #1
 8007df4:	d12d      	bne.n	8007e52 <I2C_Slave_ISR_DMA+0x11a>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2241      	movs	r2, #65	@ 0x41
 8007dfa:	5c9b      	ldrb	r3, [r3, r2]
 8007dfc:	b2db      	uxtb	r3, r3
 8007dfe:	2b28      	cmp	r3, #40	@ 0x28
 8007e00:	d10b      	bne.n	8007e1a <I2C_Slave_ISR_DMA+0xe2>
 8007e02:	69ba      	ldr	r2, [r7, #24]
 8007e04:	2380      	movs	r3, #128	@ 0x80
 8007e06:	049b      	lsls	r3, r3, #18
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	d106      	bne.n	8007e1a <I2C_Slave_ISR_DMA+0xe2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8007e0c:	68ba      	ldr	r2, [r7, #8]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	0011      	movs	r1, r2
 8007e12:	0018      	movs	r0, r3
 8007e14:	f000 fc18 	bl	8008648 <I2C_ITListenCplt>
 8007e18:	e054      	b.n	8007ec4 <I2C_Slave_ISR_DMA+0x18c>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	2241      	movs	r2, #65	@ 0x41
 8007e1e:	5c9b      	ldrb	r3, [r3, r2]
 8007e20:	b2db      	uxtb	r3, r3
 8007e22:	2b29      	cmp	r3, #41	@ 0x29
 8007e24:	d110      	bne.n	8007e48 <I2C_Slave_ISR_DMA+0x110>
 8007e26:	69bb      	ldr	r3, [r7, #24]
 8007e28:	4a36      	ldr	r2, [pc, #216]	@ (8007f04 <I2C_Slave_ISR_DMA+0x1cc>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d00c      	beq.n	8007e48 <I2C_Slave_ISR_DMA+0x110>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	2210      	movs	r2, #16
 8007e34:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	0018      	movs	r0, r3
 8007e3a:	f000 fd88 	bl	800894e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	0018      	movs	r0, r3
 8007e42:	f000 f947 	bl	80080d4 <I2C_ITSlaveSeqCplt>
 8007e46:	e03d      	b.n	8007ec4 <I2C_Slave_ISR_DMA+0x18c>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	2210      	movs	r2, #16
 8007e4e:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8007e50:	e03e      	b.n	8007ed0 <I2C_Slave_ISR_DMA+0x198>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	2210      	movs	r2, #16
 8007e58:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e5e:	2204      	movs	r2, #4
 8007e60:	431a      	orrs	r2, r3
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8007e66:	2317      	movs	r3, #23
 8007e68:	18fb      	adds	r3, r7, r3
 8007e6a:	68fa      	ldr	r2, [r7, #12]
 8007e6c:	2141      	movs	r1, #65	@ 0x41
 8007e6e:	5c52      	ldrb	r2, [r2, r1]
 8007e70:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007e72:	69bb      	ldr	r3, [r7, #24]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d004      	beq.n	8007e82 <I2C_Slave_ISR_DMA+0x14a>
 8007e78:	69ba      	ldr	r2, [r7, #24]
 8007e7a:	2380      	movs	r3, #128	@ 0x80
 8007e7c:	045b      	lsls	r3, r3, #17
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	d126      	bne.n	8007ed0 <I2C_Slave_ISR_DMA+0x198>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007e82:	2217      	movs	r2, #23
 8007e84:	18bb      	adds	r3, r7, r2
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	2b21      	cmp	r3, #33	@ 0x21
 8007e8a:	d003      	beq.n	8007e94 <I2C_Slave_ISR_DMA+0x15c>
 8007e8c:	18bb      	adds	r3, r7, r2
 8007e8e:	781b      	ldrb	r3, [r3, #0]
 8007e90:	2b29      	cmp	r3, #41	@ 0x29
 8007e92:	d103      	bne.n	8007e9c <I2C_Slave_ISR_DMA+0x164>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2221      	movs	r2, #33	@ 0x21
 8007e98:	631a      	str	r2, [r3, #48]	@ 0x30
 8007e9a:	e00b      	b.n	8007eb4 <I2C_Slave_ISR_DMA+0x17c>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007e9c:	2217      	movs	r2, #23
 8007e9e:	18bb      	adds	r3, r7, r2
 8007ea0:	781b      	ldrb	r3, [r3, #0]
 8007ea2:	2b22      	cmp	r3, #34	@ 0x22
 8007ea4:	d003      	beq.n	8007eae <I2C_Slave_ISR_DMA+0x176>
 8007ea6:	18bb      	adds	r3, r7, r2
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	2b2a      	cmp	r3, #42	@ 0x2a
 8007eac:	d102      	bne.n	8007eb4 <I2C_Slave_ISR_DMA+0x17c>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2222      	movs	r2, #34	@ 0x22
 8007eb2:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	0011      	movs	r1, r2
 8007ebc:	0018      	movs	r0, r3
 8007ebe:	f000 fc1b 	bl	80086f8 <I2C_ITError>
      if (treatdmanack == 1U)
 8007ec2:	e005      	b.n	8007ed0 <I2C_Slave_ISR_DMA+0x198>
 8007ec4:	e004      	b.n	8007ed0 <I2C_Slave_ISR_DMA+0x198>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	2210      	movs	r2, #16
 8007ecc:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007ece:	e00f      	b.n	8007ef0 <I2C_Slave_ISR_DMA+0x1b8>
      if (treatdmanack == 1U)
 8007ed0:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007ed2:	e00d      	b.n	8007ef0 <I2C_Slave_ISR_DMA+0x1b8>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	2208      	movs	r2, #8
 8007ed8:	4013      	ands	r3, r2
 8007eda:	d009      	beq.n	8007ef0 <I2C_Slave_ISR_DMA+0x1b8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2208      	movs	r2, #8
 8007ee0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007ee2:	d005      	beq.n	8007ef0 <I2C_Slave_ISR_DMA+0x1b8>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8007ee4:	68ba      	ldr	r2, [r7, #8]
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	0011      	movs	r1, r2
 8007eea:	0018      	movs	r0, r3
 8007eec:	f000 f80c 	bl	8007f08 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	2240      	movs	r2, #64	@ 0x40
 8007ef4:	2100      	movs	r1, #0
 8007ef6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007ef8:	2300      	movs	r3, #0
}
 8007efa:	0018      	movs	r0, r3
 8007efc:	46bd      	mov	sp, r7
 8007efe:	b008      	add	sp, #32
 8007f00:	bd80      	pop	{r7, pc}
 8007f02:	46c0      	nop			@ (mov r8, r8)
 8007f04:	ffff0000 	.word	0xffff0000

08007f08 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007f08:	b5b0      	push	{r4, r5, r7, lr}
 8007f0a:	b084      	sub	sp, #16
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2241      	movs	r2, #65	@ 0x41
 8007f16:	5c9b      	ldrb	r3, [r3, r2]
 8007f18:	b2db      	uxtb	r3, r3
 8007f1a:	001a      	movs	r2, r3
 8007f1c:	2328      	movs	r3, #40	@ 0x28
 8007f1e:	4013      	ands	r3, r2
 8007f20:	2b28      	cmp	r3, #40	@ 0x28
 8007f22:	d000      	beq.n	8007f26 <I2C_ITAddrCplt+0x1e>
 8007f24:	e088      	b.n	8008038 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	699b      	ldr	r3, [r3, #24]
 8007f2c:	0c1b      	lsrs	r3, r3, #16
 8007f2e:	b2da      	uxtb	r2, r3
 8007f30:	250f      	movs	r5, #15
 8007f32:	197b      	adds	r3, r7, r5
 8007f34:	2101      	movs	r1, #1
 8007f36:	400a      	ands	r2, r1
 8007f38:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	699b      	ldr	r3, [r3, #24]
 8007f40:	0c1b      	lsrs	r3, r3, #16
 8007f42:	b29a      	uxth	r2, r3
 8007f44:	200c      	movs	r0, #12
 8007f46:	183b      	adds	r3, r7, r0
 8007f48:	21fe      	movs	r1, #254	@ 0xfe
 8007f4a:	400a      	ands	r2, r1
 8007f4c:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	689b      	ldr	r3, [r3, #8]
 8007f54:	b29a      	uxth	r2, r3
 8007f56:	240a      	movs	r4, #10
 8007f58:	193b      	adds	r3, r7, r4
 8007f5a:	0592      	lsls	r2, r2, #22
 8007f5c:	0d92      	lsrs	r2, r2, #22
 8007f5e:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	68db      	ldr	r3, [r3, #12]
 8007f66:	b29a      	uxth	r2, r3
 8007f68:	2308      	movs	r3, #8
 8007f6a:	18fb      	adds	r3, r7, r3
 8007f6c:	21fe      	movs	r1, #254	@ 0xfe
 8007f6e:	400a      	ands	r2, r1
 8007f70:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	68db      	ldr	r3, [r3, #12]
 8007f76:	2b02      	cmp	r3, #2
 8007f78:	d148      	bne.n	800800c <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8007f7a:	0021      	movs	r1, r4
 8007f7c:	187b      	adds	r3, r7, r1
 8007f7e:	881b      	ldrh	r3, [r3, #0]
 8007f80:	09db      	lsrs	r3, r3, #7
 8007f82:	b29a      	uxth	r2, r3
 8007f84:	183b      	adds	r3, r7, r0
 8007f86:	881b      	ldrh	r3, [r3, #0]
 8007f88:	4053      	eors	r3, r2
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	001a      	movs	r2, r3
 8007f8e:	2306      	movs	r3, #6
 8007f90:	4013      	ands	r3, r2
 8007f92:	d120      	bne.n	8007fd6 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8007f94:	183b      	adds	r3, r7, r0
 8007f96:	187a      	adds	r2, r7, r1
 8007f98:	8812      	ldrh	r2, [r2, #0]
 8007f9a:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fa0:	1c5a      	adds	r2, r3, #1
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007faa:	2b02      	cmp	r3, #2
 8007fac:	d14c      	bne.n	8008048 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	2208      	movs	r2, #8
 8007fba:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2240      	movs	r2, #64	@ 0x40
 8007fc0:	2100      	movs	r1, #0
 8007fc2:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007fc4:	183b      	adds	r3, r7, r0
 8007fc6:	881a      	ldrh	r2, [r3, #0]
 8007fc8:	197b      	adds	r3, r7, r5
 8007fca:	7819      	ldrb	r1, [r3, #0]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	0018      	movs	r0, r3
 8007fd0:	f7ff fa35 	bl	800743e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007fd4:	e038      	b.n	8008048 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8007fd6:	240c      	movs	r4, #12
 8007fd8:	193b      	adds	r3, r7, r4
 8007fda:	2208      	movs	r2, #8
 8007fdc:	18ba      	adds	r2, r7, r2
 8007fde:	8812      	ldrh	r2, [r2, #0]
 8007fe0:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007fe2:	2380      	movs	r3, #128	@ 0x80
 8007fe4:	021a      	lsls	r2, r3, #8
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	0011      	movs	r1, r2
 8007fea:	0018      	movs	r0, r3
 8007fec:	f000 fe6e 	bl	8008ccc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2240      	movs	r2, #64	@ 0x40
 8007ff4:	2100      	movs	r1, #0
 8007ff6:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007ff8:	193b      	adds	r3, r7, r4
 8007ffa:	881a      	ldrh	r2, [r3, #0]
 8007ffc:	230f      	movs	r3, #15
 8007ffe:	18fb      	adds	r3, r7, r3
 8008000:	7819      	ldrb	r1, [r3, #0]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	0018      	movs	r0, r3
 8008006:	f7ff fa1a 	bl	800743e <HAL_I2C_AddrCallback>
}
 800800a:	e01d      	b.n	8008048 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800800c:	2380      	movs	r3, #128	@ 0x80
 800800e:	021a      	lsls	r2, r3, #8
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	0011      	movs	r1, r2
 8008014:	0018      	movs	r0, r3
 8008016:	f000 fe59 	bl	8008ccc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2240      	movs	r2, #64	@ 0x40
 800801e:	2100      	movs	r1, #0
 8008020:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008022:	230c      	movs	r3, #12
 8008024:	18fb      	adds	r3, r7, r3
 8008026:	881a      	ldrh	r2, [r3, #0]
 8008028:	230f      	movs	r3, #15
 800802a:	18fb      	adds	r3, r7, r3
 800802c:	7819      	ldrb	r1, [r3, #0]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	0018      	movs	r0, r3
 8008032:	f7ff fa04 	bl	800743e <HAL_I2C_AddrCallback>
}
 8008036:	e007      	b.n	8008048 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	2208      	movs	r2, #8
 800803e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2240      	movs	r2, #64	@ 0x40
 8008044:	2100      	movs	r1, #0
 8008046:	5499      	strb	r1, [r3, r2]
}
 8008048:	46c0      	nop			@ (mov r8, r8)
 800804a:	46bd      	mov	sp, r7
 800804c:	b004      	add	sp, #16
 800804e:	bdb0      	pop	{r4, r5, r7, pc}

08008050 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b082      	sub	sp, #8
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2242      	movs	r2, #66	@ 0x42
 800805c:	2100      	movs	r1, #0
 800805e:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2241      	movs	r2, #65	@ 0x41
 8008064:	5c9b      	ldrb	r3, [r3, r2]
 8008066:	b2db      	uxtb	r3, r3
 8008068:	2b21      	cmp	r3, #33	@ 0x21
 800806a:	d117      	bne.n	800809c <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2241      	movs	r2, #65	@ 0x41
 8008070:	2120      	movs	r1, #32
 8008072:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2211      	movs	r2, #17
 8008078:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2200      	movs	r2, #0
 800807e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2101      	movs	r1, #1
 8008084:	0018      	movs	r0, r3
 8008086:	f000 fe21 	bl	8008ccc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2240      	movs	r2, #64	@ 0x40
 800808e:	2100      	movs	r1, #0
 8008090:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	0018      	movs	r0, r3
 8008096:	f7f9 f8ed 	bl	8001274 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800809a:	e016      	b.n	80080ca <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2241      	movs	r2, #65	@ 0x41
 80080a0:	2120      	movs	r1, #32
 80080a2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2212      	movs	r2, #18
 80080a8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2200      	movs	r2, #0
 80080ae:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2102      	movs	r1, #2
 80080b4:	0018      	movs	r0, r3
 80080b6:	f000 fe09 	bl	8008ccc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2240      	movs	r2, #64	@ 0x40
 80080be:	2100      	movs	r1, #0
 80080c0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	0018      	movs	r0, r3
 80080c6:	f7f9 f8e3 	bl	8001290 <HAL_I2C_MasterRxCpltCallback>
}
 80080ca:	46c0      	nop			@ (mov r8, r8)
 80080cc:	46bd      	mov	sp, r7
 80080ce:	b002      	add	sp, #8
 80080d0:	bd80      	pop	{r7, pc}
	...

080080d4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b084      	sub	sp, #16
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2242      	movs	r2, #66	@ 0x42
 80080e8:	2100      	movs	r1, #0
 80080ea:	5499      	strb	r1, [r3, r2]

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80080ec:	68fa      	ldr	r2, [r7, #12]
 80080ee:	2380      	movs	r3, #128	@ 0x80
 80080f0:	01db      	lsls	r3, r3, #7
 80080f2:	4013      	ands	r3, r2
 80080f4:	d008      	beq.n	8008108 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4924      	ldr	r1, [pc, #144]	@ (8008194 <I2C_ITSlaveSeqCplt+0xc0>)
 8008102:	400a      	ands	r2, r1
 8008104:	601a      	str	r2, [r3, #0]
 8008106:	e00c      	b.n	8008122 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008108:	68fa      	ldr	r2, [r7, #12]
 800810a:	2380      	movs	r3, #128	@ 0x80
 800810c:	021b      	lsls	r3, r3, #8
 800810e:	4013      	ands	r3, r2
 8008110:	d007      	beq.n	8008122 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	681a      	ldr	r2, [r3, #0]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	491e      	ldr	r1, [pc, #120]	@ (8008198 <I2C_ITSlaveSeqCplt+0xc4>)
 800811e:	400a      	ands	r2, r1
 8008120:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2241      	movs	r2, #65	@ 0x41
 8008126:	5c9b      	ldrb	r3, [r3, r2]
 8008128:	b2db      	uxtb	r3, r3
 800812a:	2b29      	cmp	r3, #41	@ 0x29
 800812c:	d114      	bne.n	8008158 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2241      	movs	r2, #65	@ 0x41
 8008132:	2128      	movs	r1, #40	@ 0x28
 8008134:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2221      	movs	r2, #33	@ 0x21
 800813a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2101      	movs	r1, #1
 8008140:	0018      	movs	r0, r3
 8008142:	f000 fdc3 	bl	8008ccc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2240      	movs	r2, #64	@ 0x40
 800814a:	2100      	movs	r1, #0
 800814c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	0018      	movs	r0, r3
 8008152:	f7ff f964 	bl	800741e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008156:	e019      	b.n	800818c <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2241      	movs	r2, #65	@ 0x41
 800815c:	5c9b      	ldrb	r3, [r3, r2]
 800815e:	b2db      	uxtb	r3, r3
 8008160:	2b2a      	cmp	r3, #42	@ 0x2a
 8008162:	d113      	bne.n	800818c <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2241      	movs	r2, #65	@ 0x41
 8008168:	2128      	movs	r1, #40	@ 0x28
 800816a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2222      	movs	r2, #34	@ 0x22
 8008170:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2102      	movs	r1, #2
 8008176:	0018      	movs	r0, r3
 8008178:	f000 fda8 	bl	8008ccc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2240      	movs	r2, #64	@ 0x40
 8008180:	2100      	movs	r1, #0
 8008182:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	0018      	movs	r0, r3
 8008188:	f7ff f951 	bl	800742e <HAL_I2C_SlaveRxCpltCallback>
}
 800818c:	46c0      	nop			@ (mov r8, r8)
 800818e:	46bd      	mov	sp, r7
 8008190:	b004      	add	sp, #16
 8008192:	bd80      	pop	{r7, pc}
 8008194:	ffffbfff 	.word	0xffffbfff
 8008198:	ffff7fff 	.word	0xffff7fff

0800819c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b086      	sub	sp, #24
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	2220      	movs	r2, #32
 80081b0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2241      	movs	r2, #65	@ 0x41
 80081b6:	5c9b      	ldrb	r3, [r3, r2]
 80081b8:	b2db      	uxtb	r3, r3
 80081ba:	2b21      	cmp	r3, #33	@ 0x21
 80081bc:	d108      	bne.n	80081d0 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2101      	movs	r1, #1
 80081c2:	0018      	movs	r0, r3
 80081c4:	f000 fd82 	bl	8008ccc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2211      	movs	r2, #17
 80081cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80081ce:	e00d      	b.n	80081ec <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2241      	movs	r2, #65	@ 0x41
 80081d4:	5c9b      	ldrb	r3, [r3, r2]
 80081d6:	b2db      	uxtb	r3, r3
 80081d8:	2b22      	cmp	r3, #34	@ 0x22
 80081da:	d107      	bne.n	80081ec <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2102      	movs	r1, #2
 80081e0:	0018      	movs	r0, r3
 80081e2:	f000 fd73 	bl	8008ccc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2212      	movs	r2, #18
 80081ea:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	685a      	ldr	r2, [r3, #4]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	494e      	ldr	r1, [pc, #312]	@ (8008330 <I2C_ITMasterCplt+0x194>)
 80081f8:	400a      	ands	r2, r1
 80081fa:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2200      	movs	r2, #0
 8008200:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	4a4b      	ldr	r2, [pc, #300]	@ (8008334 <I2C_ITMasterCplt+0x198>)
 8008206:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	2210      	movs	r2, #16
 800820c:	4013      	ands	r3, r2
 800820e:	d009      	beq.n	8008224 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	2210      	movs	r2, #16
 8008216:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800821c:	2204      	movs	r2, #4
 800821e:	431a      	orrs	r2, r3
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2241      	movs	r2, #65	@ 0x41
 8008228:	5c9b      	ldrb	r3, [r3, r2]
 800822a:	b2db      	uxtb	r3, r3
 800822c:	2b60      	cmp	r3, #96	@ 0x60
 800822e:	d109      	bne.n	8008244 <I2C_ITMasterCplt+0xa8>
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	2204      	movs	r2, #4
 8008234:	4013      	ands	r3, r2
 8008236:	d005      	beq.n	8008244 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800823e:	b2db      	uxtb	r3, r3
 8008240:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8008242:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	0018      	movs	r0, r3
 8008248:	f000 fb81 	bl	800894e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008250:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2241      	movs	r2, #65	@ 0x41
 8008256:	5c9b      	ldrb	r3, [r3, r2]
 8008258:	b2db      	uxtb	r3, r3
 800825a:	2b60      	cmp	r3, #96	@ 0x60
 800825c:	d002      	beq.n	8008264 <I2C_ITMasterCplt+0xc8>
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d007      	beq.n	8008274 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	0011      	movs	r1, r2
 800826c:	0018      	movs	r0, r3
 800826e:	f000 fa43 	bl	80086f8 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008272:	e058      	b.n	8008326 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2241      	movs	r2, #65	@ 0x41
 8008278:	5c9b      	ldrb	r3, [r3, r2]
 800827a:	b2db      	uxtb	r3, r3
 800827c:	2b21      	cmp	r3, #33	@ 0x21
 800827e:	d126      	bne.n	80082ce <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2241      	movs	r2, #65	@ 0x41
 8008284:	2120      	movs	r1, #32
 8008286:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2200      	movs	r2, #0
 800828c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2242      	movs	r2, #66	@ 0x42
 8008292:	5c9b      	ldrb	r3, [r3, r2]
 8008294:	b2db      	uxtb	r3, r3
 8008296:	2b40      	cmp	r3, #64	@ 0x40
 8008298:	d10c      	bne.n	80082b4 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2242      	movs	r2, #66	@ 0x42
 800829e:	2100      	movs	r1, #0
 80082a0:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2240      	movs	r2, #64	@ 0x40
 80082a6:	2100      	movs	r1, #0
 80082a8:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	0018      	movs	r0, r3
 80082ae:	f7f8 ffc5 	bl	800123c <HAL_I2C_MemTxCpltCallback>
}
 80082b2:	e038      	b.n	8008326 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2242      	movs	r2, #66	@ 0x42
 80082b8:	2100      	movs	r1, #0
 80082ba:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2240      	movs	r2, #64	@ 0x40
 80082c0:	2100      	movs	r1, #0
 80082c2:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	0018      	movs	r0, r3
 80082c8:	f7f8 ffd4 	bl	8001274 <HAL_I2C_MasterTxCpltCallback>
}
 80082cc:	e02b      	b.n	8008326 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2241      	movs	r2, #65	@ 0x41
 80082d2:	5c9b      	ldrb	r3, [r3, r2]
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	2b22      	cmp	r3, #34	@ 0x22
 80082d8:	d125      	bne.n	8008326 <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2241      	movs	r2, #65	@ 0x41
 80082de:	2120      	movs	r1, #32
 80082e0:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2200      	movs	r2, #0
 80082e6:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2242      	movs	r2, #66	@ 0x42
 80082ec:	5c9b      	ldrb	r3, [r3, r2]
 80082ee:	b2db      	uxtb	r3, r3
 80082f0:	2b40      	cmp	r3, #64	@ 0x40
 80082f2:	d10c      	bne.n	800830e <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2242      	movs	r2, #66	@ 0x42
 80082f8:	2100      	movs	r1, #0
 80082fa:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2240      	movs	r2, #64	@ 0x40
 8008300:	2100      	movs	r1, #0
 8008302:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	0018      	movs	r0, r3
 8008308:	f7f8 ffa6 	bl	8001258 <HAL_I2C_MemRxCpltCallback>
}
 800830c:	e00b      	b.n	8008326 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2242      	movs	r2, #66	@ 0x42
 8008312:	2100      	movs	r1, #0
 8008314:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2240      	movs	r2, #64	@ 0x40
 800831a:	2100      	movs	r1, #0
 800831c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	0018      	movs	r0, r3
 8008322:	f7f8 ffb5 	bl	8001290 <HAL_I2C_MasterRxCpltCallback>
}
 8008326:	46c0      	nop			@ (mov r8, r8)
 8008328:	46bd      	mov	sp, r7
 800832a:	b006      	add	sp, #24
 800832c:	bd80      	pop	{r7, pc}
 800832e:	46c0      	nop			@ (mov r8, r8)
 8008330:	fe00e800 	.word	0xfe00e800
 8008334:	ffff0000 	.word	0xffff0000

08008338 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b086      	sub	sp, #24
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
 8008340:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008352:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008354:	200b      	movs	r0, #11
 8008356:	183b      	adds	r3, r7, r0
 8008358:	687a      	ldr	r2, [r7, #4]
 800835a:	2141      	movs	r1, #65	@ 0x41
 800835c:	5c52      	ldrb	r2, [r2, r1]
 800835e:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	2220      	movs	r2, #32
 8008366:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008368:	183b      	adds	r3, r7, r0
 800836a:	781b      	ldrb	r3, [r3, #0]
 800836c:	2b21      	cmp	r3, #33	@ 0x21
 800836e:	d003      	beq.n	8008378 <I2C_ITSlaveCplt+0x40>
 8008370:	183b      	adds	r3, r7, r0
 8008372:	781b      	ldrb	r3, [r3, #0]
 8008374:	2b29      	cmp	r3, #41	@ 0x29
 8008376:	d109      	bne.n	800838c <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8008378:	4aac      	ldr	r2, [pc, #688]	@ (800862c <I2C_ITSlaveCplt+0x2f4>)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	0011      	movs	r1, r2
 800837e:	0018      	movs	r0, r3
 8008380:	f000 fca4 	bl	8008ccc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2221      	movs	r2, #33	@ 0x21
 8008388:	631a      	str	r2, [r3, #48]	@ 0x30
 800838a:	e020      	b.n	80083ce <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800838c:	220b      	movs	r2, #11
 800838e:	18bb      	adds	r3, r7, r2
 8008390:	781b      	ldrb	r3, [r3, #0]
 8008392:	2b22      	cmp	r3, #34	@ 0x22
 8008394:	d003      	beq.n	800839e <I2C_ITSlaveCplt+0x66>
 8008396:	18bb      	adds	r3, r7, r2
 8008398:	781b      	ldrb	r3, [r3, #0]
 800839a:	2b2a      	cmp	r3, #42	@ 0x2a
 800839c:	d109      	bne.n	80083b2 <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800839e:	4aa4      	ldr	r2, [pc, #656]	@ (8008630 <I2C_ITSlaveCplt+0x2f8>)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	0011      	movs	r1, r2
 80083a4:	0018      	movs	r0, r3
 80083a6:	f000 fc91 	bl	8008ccc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2222      	movs	r2, #34	@ 0x22
 80083ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80083b0:	e00d      	b.n	80083ce <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80083b2:	230b      	movs	r3, #11
 80083b4:	18fb      	adds	r3, r7, r3
 80083b6:	781b      	ldrb	r3, [r3, #0]
 80083b8:	2b28      	cmp	r3, #40	@ 0x28
 80083ba:	d108      	bne.n	80083ce <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80083bc:	4a9d      	ldr	r2, [pc, #628]	@ (8008634 <I2C_ITSlaveCplt+0x2fc>)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	0011      	movs	r1, r2
 80083c2:	0018      	movs	r0, r3
 80083c4:	f000 fc82 	bl	8008ccc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2200      	movs	r2, #0
 80083cc:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	685a      	ldr	r2, [r3, #4]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	2180      	movs	r1, #128	@ 0x80
 80083da:	0209      	lsls	r1, r1, #8
 80083dc:	430a      	orrs	r2, r1
 80083de:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	685a      	ldr	r2, [r3, #4]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4993      	ldr	r1, [pc, #588]	@ (8008638 <I2C_ITSlaveCplt+0x300>)
 80083ec:	400a      	ands	r2, r1
 80083ee:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	0018      	movs	r0, r3
 80083f4:	f000 faab 	bl	800894e <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80083f8:	693a      	ldr	r2, [r7, #16]
 80083fa:	2380      	movs	r3, #128	@ 0x80
 80083fc:	01db      	lsls	r3, r3, #7
 80083fe:	4013      	ands	r3, r2
 8008400:	d013      	beq.n	800842a <I2C_ITSlaveCplt+0xf2>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	681a      	ldr	r2, [r3, #0]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	498b      	ldr	r1, [pc, #556]	@ (800863c <I2C_ITSlaveCplt+0x304>)
 800840e:	400a      	ands	r2, r1
 8008410:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008416:	2b00      	cmp	r3, #0
 8008418:	d01f      	beq.n	800845a <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	b29a      	uxth	r2, r3
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008428:	e017      	b.n	800845a <I2C_ITSlaveCplt+0x122>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800842a:	693a      	ldr	r2, [r7, #16]
 800842c:	2380      	movs	r3, #128	@ 0x80
 800842e:	021b      	lsls	r3, r3, #8
 8008430:	4013      	ands	r3, r2
 8008432:	d012      	beq.n	800845a <I2C_ITSlaveCplt+0x122>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	681a      	ldr	r2, [r3, #0]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4980      	ldr	r1, [pc, #512]	@ (8008640 <I2C_ITSlaveCplt+0x308>)
 8008440:	400a      	ands	r2, r1
 8008442:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008448:	2b00      	cmp	r3, #0
 800844a:	d006      	beq.n	800845a <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	b29a      	uxth	r2, r3
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	2204      	movs	r2, #4
 800845e:	4013      	ands	r3, r2
 8008460:	d020      	beq.n	80084a4 <I2C_ITSlaveCplt+0x16c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	2204      	movs	r2, #4
 8008466:	4393      	bics	r3, r2
 8008468:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008474:	b2d2      	uxtb	r2, r2
 8008476:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800847c:	1c5a      	adds	r2, r3, #1
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008486:	2b00      	cmp	r3, #0
 8008488:	d00c      	beq.n	80084a4 <I2C_ITSlaveCplt+0x16c>
    {
      hi2c->XferSize--;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800848e:	3b01      	subs	r3, #1
 8008490:	b29a      	uxth	r2, r3
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800849a:	b29b      	uxth	r3, r3
 800849c:	3b01      	subs	r3, #1
 800849e:	b29a      	uxth	r2, r3
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084a8:	b29b      	uxth	r3, r3
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d005      	beq.n	80084ba <I2C_ITSlaveCplt+0x182>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084b2:	2204      	movs	r2, #4
 80084b4:	431a      	orrs	r2, r3
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	2210      	movs	r2, #16
 80084be:	4013      	ands	r3, r2
 80084c0:	d04f      	beq.n	8008562 <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	2210      	movs	r2, #16
 80084c6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80084c8:	d04b      	beq.n	8008562 <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084ce:	b29b      	uxth	r3, r3
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d12d      	bne.n	8008530 <I2C_ITSlaveCplt+0x1f8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2241      	movs	r2, #65	@ 0x41
 80084d8:	5c9b      	ldrb	r3, [r3, r2]
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	2b28      	cmp	r3, #40	@ 0x28
 80084de:	d10b      	bne.n	80084f8 <I2C_ITSlaveCplt+0x1c0>
 80084e0:	68fa      	ldr	r2, [r7, #12]
 80084e2:	2380      	movs	r3, #128	@ 0x80
 80084e4:	049b      	lsls	r3, r3, #18
 80084e6:	429a      	cmp	r2, r3
 80084e8:	d106      	bne.n	80084f8 <I2C_ITSlaveCplt+0x1c0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80084ea:	697a      	ldr	r2, [r7, #20]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	0011      	movs	r1, r2
 80084f0:	0018      	movs	r0, r3
 80084f2:	f000 f8a9 	bl	8008648 <I2C_ITListenCplt>
 80084f6:	e034      	b.n	8008562 <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2241      	movs	r2, #65	@ 0x41
 80084fc:	5c9b      	ldrb	r3, [r3, r2]
 80084fe:	b2db      	uxtb	r3, r3
 8008500:	2b29      	cmp	r3, #41	@ 0x29
 8008502:	d110      	bne.n	8008526 <I2C_ITSlaveCplt+0x1ee>
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	4a4f      	ldr	r2, [pc, #316]	@ (8008644 <I2C_ITSlaveCplt+0x30c>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d00c      	beq.n	8008526 <I2C_ITSlaveCplt+0x1ee>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	2210      	movs	r2, #16
 8008512:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	0018      	movs	r0, r3
 8008518:	f000 fa19 	bl	800894e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	0018      	movs	r0, r3
 8008520:	f7ff fdd8 	bl	80080d4 <I2C_ITSlaveSeqCplt>
 8008524:	e01d      	b.n	8008562 <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	2210      	movs	r2, #16
 800852c:	61da      	str	r2, [r3, #28]
 800852e:	e018      	b.n	8008562 <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	2210      	movs	r2, #16
 8008536:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800853c:	2204      	movs	r2, #4
 800853e:	431a      	orrs	r2, r3
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d004      	beq.n	8008554 <I2C_ITSlaveCplt+0x21c>
 800854a:	68fa      	ldr	r2, [r7, #12]
 800854c:	2380      	movs	r3, #128	@ 0x80
 800854e:	045b      	lsls	r3, r3, #17
 8008550:	429a      	cmp	r2, r3
 8008552:	d106      	bne.n	8008562 <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	0011      	movs	r1, r2
 800855c:	0018      	movs	r0, r3
 800855e:	f000 f8cb 	bl	80086f8 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2242      	movs	r2, #66	@ 0x42
 8008566:	2100      	movs	r1, #0
 8008568:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2200      	movs	r2, #0
 800856e:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008574:	2b00      	cmp	r3, #0
 8008576:	d013      	beq.n	80085a0 <I2C_ITSlaveCplt+0x268>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	0011      	movs	r1, r2
 8008580:	0018      	movs	r0, r3
 8008582:	f000 f8b9 	bl	80086f8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2241      	movs	r2, #65	@ 0x41
 800858a:	5c9b      	ldrb	r3, [r3, r2]
 800858c:	b2db      	uxtb	r3, r3
 800858e:	2b28      	cmp	r3, #40	@ 0x28
 8008590:	d147      	bne.n	8008622 <I2C_ITSlaveCplt+0x2ea>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8008592:	697a      	ldr	r2, [r7, #20]
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	0011      	movs	r1, r2
 8008598:	0018      	movs	r0, r3
 800859a:	f000 f855 	bl	8008648 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800859e:	e040      	b.n	8008622 <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085a4:	4a27      	ldr	r2, [pc, #156]	@ (8008644 <I2C_ITSlaveCplt+0x30c>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d016      	beq.n	80085d8 <I2C_ITSlaveCplt+0x2a0>
    I2C_ITSlaveSeqCplt(hi2c);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	0018      	movs	r0, r3
 80085ae:	f7ff fd91 	bl	80080d4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	4a23      	ldr	r2, [pc, #140]	@ (8008644 <I2C_ITSlaveCplt+0x30c>)
 80085b6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2241      	movs	r2, #65	@ 0x41
 80085bc:	2120      	movs	r1, #32
 80085be:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2200      	movs	r2, #0
 80085c4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2240      	movs	r2, #64	@ 0x40
 80085ca:	2100      	movs	r1, #0
 80085cc:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	0018      	movs	r0, r3
 80085d2:	f7fe ff44 	bl	800745e <HAL_I2C_ListenCpltCallback>
}
 80085d6:	e024      	b.n	8008622 <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2241      	movs	r2, #65	@ 0x41
 80085dc:	5c9b      	ldrb	r3, [r3, r2]
 80085de:	b2db      	uxtb	r3, r3
 80085e0:	2b22      	cmp	r3, #34	@ 0x22
 80085e2:	d10f      	bne.n	8008604 <I2C_ITSlaveCplt+0x2cc>
    hi2c->State = HAL_I2C_STATE_READY;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2241      	movs	r2, #65	@ 0x41
 80085e8:	2120      	movs	r1, #32
 80085ea:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2200      	movs	r2, #0
 80085f0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2240      	movs	r2, #64	@ 0x40
 80085f6:	2100      	movs	r1, #0
 80085f8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	0018      	movs	r0, r3
 80085fe:	f7fe ff16 	bl	800742e <HAL_I2C_SlaveRxCpltCallback>
}
 8008602:	e00e      	b.n	8008622 <I2C_ITSlaveCplt+0x2ea>
    hi2c->State = HAL_I2C_STATE_READY;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2241      	movs	r2, #65	@ 0x41
 8008608:	2120      	movs	r1, #32
 800860a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2200      	movs	r2, #0
 8008610:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2240      	movs	r2, #64	@ 0x40
 8008616:	2100      	movs	r1, #0
 8008618:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	0018      	movs	r0, r3
 800861e:	f7fe fefe 	bl	800741e <HAL_I2C_SlaveTxCpltCallback>
}
 8008622:	46c0      	nop			@ (mov r8, r8)
 8008624:	46bd      	mov	sp, r7
 8008626:	b006      	add	sp, #24
 8008628:	bd80      	pop	{r7, pc}
 800862a:	46c0      	nop			@ (mov r8, r8)
 800862c:	00008001 	.word	0x00008001
 8008630:	00008002 	.word	0x00008002
 8008634:	00008003 	.word	0x00008003
 8008638:	fe00e800 	.word	0xfe00e800
 800863c:	ffffbfff 	.word	0xffffbfff
 8008640:	ffff7fff 	.word	0xffff7fff
 8008644:	ffff0000 	.word	0xffff0000

08008648 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b082      	sub	sp, #8
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	4a26      	ldr	r2, [pc, #152]	@ (80086f0 <I2C_ITListenCplt+0xa8>)
 8008656:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2200      	movs	r2, #0
 800865c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2241      	movs	r2, #65	@ 0x41
 8008662:	2120      	movs	r1, #32
 8008664:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2242      	movs	r2, #66	@ 0x42
 800866a:	2100      	movs	r1, #0
 800866c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2200      	movs	r2, #0
 8008672:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	2204      	movs	r2, #4
 8008678:	4013      	ands	r3, r2
 800867a:	d022      	beq.n	80086c2 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008686:	b2d2      	uxtb	r2, r2
 8008688:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800868e:	1c5a      	adds	r2, r3, #1
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008698:	2b00      	cmp	r3, #0
 800869a:	d012      	beq.n	80086c2 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80086a0:	3b01      	subs	r3, #1
 80086a2:	b29a      	uxth	r2, r3
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086ac:	b29b      	uxth	r3, r3
 80086ae:	3b01      	subs	r3, #1
 80086b0:	b29a      	uxth	r2, r3
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086ba:	2204      	movs	r2, #4
 80086bc:	431a      	orrs	r2, r3
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80086c2:	4a0c      	ldr	r2, [pc, #48]	@ (80086f4 <I2C_ITListenCplt+0xac>)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	0011      	movs	r1, r2
 80086c8:	0018      	movs	r0, r3
 80086ca:	f000 faff 	bl	8008ccc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	2210      	movs	r2, #16
 80086d4:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2240      	movs	r2, #64	@ 0x40
 80086da:	2100      	movs	r1, #0
 80086dc:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	0018      	movs	r0, r3
 80086e2:	f7fe febc 	bl	800745e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80086e6:	46c0      	nop			@ (mov r8, r8)
 80086e8:	46bd      	mov	sp, r7
 80086ea:	b002      	add	sp, #8
 80086ec:	bd80      	pop	{r7, pc}
 80086ee:	46c0      	nop			@ (mov r8, r8)
 80086f0:	ffff0000 	.word	0xffff0000
 80086f4:	00008003 	.word	0x00008003

080086f8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b084      	sub	sp, #16
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008702:	200f      	movs	r0, #15
 8008704:	183b      	adds	r3, r7, r0
 8008706:	687a      	ldr	r2, [r7, #4]
 8008708:	2141      	movs	r1, #65	@ 0x41
 800870a:	5c52      	ldrb	r2, [r2, r1]
 800870c:	701a      	strb	r2, [r3, #0]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2242      	movs	r2, #66	@ 0x42
 8008712:	2100      	movs	r1, #0
 8008714:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	4a72      	ldr	r2, [pc, #456]	@ (80088e4 <I2C_ITError+0x1ec>)
 800871a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2200      	movs	r2, #0
 8008720:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	431a      	orrs	r2, r3
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800872e:	183b      	adds	r3, r7, r0
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	2b28      	cmp	r3, #40	@ 0x28
 8008734:	d007      	beq.n	8008746 <I2C_ITError+0x4e>
 8008736:	183b      	adds	r3, r7, r0
 8008738:	781b      	ldrb	r3, [r3, #0]
 800873a:	2b29      	cmp	r3, #41	@ 0x29
 800873c:	d003      	beq.n	8008746 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800873e:	183b      	adds	r3, r7, r0
 8008740:	781b      	ldrb	r3, [r3, #0]
 8008742:	2b2a      	cmp	r3, #42	@ 0x2a
 8008744:	d10c      	bne.n	8008760 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2103      	movs	r1, #3
 800874a:	0018      	movs	r0, r3
 800874c:	f000 fabe 	bl	8008ccc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2241      	movs	r2, #65	@ 0x41
 8008754:	2128      	movs	r1, #40	@ 0x28
 8008756:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	4a63      	ldr	r2, [pc, #396]	@ (80088e8 <I2C_ITError+0x1f0>)
 800875c:	635a      	str	r2, [r3, #52]	@ 0x34
 800875e:	e032      	b.n	80087c6 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008760:	4a62      	ldr	r2, [pc, #392]	@ (80088ec <I2C_ITError+0x1f4>)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	0011      	movs	r1, r2
 8008766:	0018      	movs	r0, r3
 8008768:	f000 fab0 	bl	8008ccc <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	0018      	movs	r0, r3
 8008770:	f000 f8ed 	bl	800894e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2241      	movs	r2, #65	@ 0x41
 8008778:	5c9b      	ldrb	r3, [r3, r2]
 800877a:	b2db      	uxtb	r3, r3
 800877c:	2b60      	cmp	r3, #96	@ 0x60
 800877e:	d01f      	beq.n	80087c0 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2241      	movs	r2, #65	@ 0x41
 8008784:	2120      	movs	r1, #32
 8008786:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	699b      	ldr	r3, [r3, #24]
 800878e:	2220      	movs	r2, #32
 8008790:	4013      	ands	r3, r2
 8008792:	2b20      	cmp	r3, #32
 8008794:	d114      	bne.n	80087c0 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	699b      	ldr	r3, [r3, #24]
 800879c:	2210      	movs	r2, #16
 800879e:	4013      	ands	r3, r2
 80087a0:	2b10      	cmp	r3, #16
 80087a2:	d109      	bne.n	80087b8 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	2210      	movs	r2, #16
 80087aa:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087b0:	2204      	movs	r2, #4
 80087b2:	431a      	orrs	r2, r3
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	2220      	movs	r2, #32
 80087be:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2200      	movs	r2, #0
 80087c4:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087ca:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d03b      	beq.n	800884c <I2C_ITError+0x154>
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	2b11      	cmp	r3, #17
 80087d8:	d002      	beq.n	80087e0 <I2C_ITError+0xe8>
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	2b21      	cmp	r3, #33	@ 0x21
 80087de:	d135      	bne.n	800884c <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	681a      	ldr	r2, [r3, #0]
 80087e6:	2380      	movs	r3, #128	@ 0x80
 80087e8:	01db      	lsls	r3, r3, #7
 80087ea:	401a      	ands	r2, r3
 80087ec:	2380      	movs	r3, #128	@ 0x80
 80087ee:	01db      	lsls	r3, r3, #7
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d107      	bne.n	8008804 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	681a      	ldr	r2, [r3, #0]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	493c      	ldr	r1, [pc, #240]	@ (80088f0 <I2C_ITError+0x1f8>)
 8008800:	400a      	ands	r2, r1
 8008802:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008808:	0018      	movs	r0, r3
 800880a:	f7fd fe31 	bl	8006470 <HAL_DMA_GetState>
 800880e:	0003      	movs	r3, r0
 8008810:	2b01      	cmp	r3, #1
 8008812:	d016      	beq.n	8008842 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008818:	4a36      	ldr	r2, [pc, #216]	@ (80088f4 <I2C_ITError+0x1fc>)
 800881a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2240      	movs	r2, #64	@ 0x40
 8008820:	2100      	movs	r1, #0
 8008822:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008828:	0018      	movs	r0, r3
 800882a:	f7fd fcf5 	bl	8006218 <HAL_DMA_Abort_IT>
 800882e:	1e03      	subs	r3, r0, #0
 8008830:	d051      	beq.n	80088d6 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008836:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800883c:	0018      	movs	r0, r3
 800883e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008840:	e049      	b.n	80088d6 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	0018      	movs	r0, r3
 8008846:	f000 f859 	bl	80088fc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800884a:	e044      	b.n	80088d6 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008850:	2b00      	cmp	r3, #0
 8008852:	d03b      	beq.n	80088cc <I2C_ITError+0x1d4>
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	2b12      	cmp	r3, #18
 8008858:	d002      	beq.n	8008860 <I2C_ITError+0x168>
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	2b22      	cmp	r3, #34	@ 0x22
 800885e:	d135      	bne.n	80088cc <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	681a      	ldr	r2, [r3, #0]
 8008866:	2380      	movs	r3, #128	@ 0x80
 8008868:	021b      	lsls	r3, r3, #8
 800886a:	401a      	ands	r2, r3
 800886c:	2380      	movs	r3, #128	@ 0x80
 800886e:	021b      	lsls	r3, r3, #8
 8008870:	429a      	cmp	r2, r3
 8008872:	d107      	bne.n	8008884 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	681a      	ldr	r2, [r3, #0]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	491e      	ldr	r1, [pc, #120]	@ (80088f8 <I2C_ITError+0x200>)
 8008880:	400a      	ands	r2, r1
 8008882:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008888:	0018      	movs	r0, r3
 800888a:	f7fd fdf1 	bl	8006470 <HAL_DMA_GetState>
 800888e:	0003      	movs	r3, r0
 8008890:	2b01      	cmp	r3, #1
 8008892:	d016      	beq.n	80088c2 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008898:	4a16      	ldr	r2, [pc, #88]	@ (80088f4 <I2C_ITError+0x1fc>)
 800889a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2240      	movs	r2, #64	@ 0x40
 80088a0:	2100      	movs	r1, #0
 80088a2:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088a8:	0018      	movs	r0, r3
 80088aa:	f7fd fcb5 	bl	8006218 <HAL_DMA_Abort_IT>
 80088ae:	1e03      	subs	r3, r0, #0
 80088b0:	d013      	beq.n	80088da <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088bc:	0018      	movs	r0, r3
 80088be:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80088c0:	e00b      	b.n	80088da <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	0018      	movs	r0, r3
 80088c6:	f000 f819 	bl	80088fc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80088ca:	e006      	b.n	80088da <I2C_ITError+0x1e2>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	0018      	movs	r0, r3
 80088d0:	f000 f814 	bl	80088fc <I2C_TreatErrorCallback>
  }
}
 80088d4:	e002      	b.n	80088dc <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80088d6:	46c0      	nop			@ (mov r8, r8)
 80088d8:	e000      	b.n	80088dc <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80088da:	46c0      	nop			@ (mov r8, r8)
}
 80088dc:	46c0      	nop			@ (mov r8, r8)
 80088de:	46bd      	mov	sp, r7
 80088e0:	b004      	add	sp, #16
 80088e2:	bd80      	pop	{r7, pc}
 80088e4:	ffff0000 	.word	0xffff0000
 80088e8:	080076e9 	.word	0x080076e9
 80088ec:	00008003 	.word	0x00008003
 80088f0:	ffffbfff 	.word	0xffffbfff
 80088f4:	08008b07 	.word	0x08008b07
 80088f8:	ffff7fff 	.word	0xffff7fff

080088fc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b082      	sub	sp, #8
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2241      	movs	r2, #65	@ 0x41
 8008908:	5c9b      	ldrb	r3, [r3, r2]
 800890a:	b2db      	uxtb	r3, r3
 800890c:	2b60      	cmp	r3, #96	@ 0x60
 800890e:	d10f      	bne.n	8008930 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2241      	movs	r2, #65	@ 0x41
 8008914:	2120      	movs	r1, #32
 8008916:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2200      	movs	r2, #0
 800891c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2240      	movs	r2, #64	@ 0x40
 8008922:	2100      	movs	r1, #0
 8008924:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	0018      	movs	r0, r3
 800892a:	f7fe fda0 	bl	800746e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800892e:	e00a      	b.n	8008946 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2200      	movs	r2, #0
 8008934:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2240      	movs	r2, #64	@ 0x40
 800893a:	2100      	movs	r1, #0
 800893c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	0018      	movs	r0, r3
 8008942:	f7f8 fcb3 	bl	80012ac <HAL_I2C_ErrorCallback>
}
 8008946:	46c0      	nop			@ (mov r8, r8)
 8008948:	46bd      	mov	sp, r7
 800894a:	b002      	add	sp, #8
 800894c:	bd80      	pop	{r7, pc}

0800894e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800894e:	b580      	push	{r7, lr}
 8008950:	b082      	sub	sp, #8
 8008952:	af00      	add	r7, sp, #0
 8008954:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	699b      	ldr	r3, [r3, #24]
 800895c:	2202      	movs	r2, #2
 800895e:	4013      	ands	r3, r2
 8008960:	2b02      	cmp	r3, #2
 8008962:	d103      	bne.n	800896c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	2200      	movs	r2, #0
 800896a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	699b      	ldr	r3, [r3, #24]
 8008972:	2201      	movs	r2, #1
 8008974:	4013      	ands	r3, r2
 8008976:	2b01      	cmp	r3, #1
 8008978:	d007      	beq.n	800898a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	699a      	ldr	r2, [r3, #24]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	2101      	movs	r1, #1
 8008986:	430a      	orrs	r2, r1
 8008988:	619a      	str	r2, [r3, #24]
  }
}
 800898a:	46c0      	nop			@ (mov r8, r8)
 800898c:	46bd      	mov	sp, r7
 800898e:	b002      	add	sp, #8
 8008990:	bd80      	pop	{r7, pc}
	...

08008994 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b084      	sub	sp, #16
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089a0:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	681a      	ldr	r2, [r3, #0]
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4920      	ldr	r1, [pc, #128]	@ (8008a30 <I2C_DMAMasterTransmitCplt+0x9c>)
 80089ae:	400a      	ands	r2, r1
 80089b0:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089b6:	b29b      	uxth	r3, r3
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d105      	bne.n	80089c8 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2120      	movs	r1, #32
 80089c0:	0018      	movs	r0, r3
 80089c2:	f000 f8f9 	bl	8008bb8 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80089c6:	e02e      	b.n	8008a26 <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089cc:	68fa      	ldr	r2, [r7, #12]
 80089ce:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80089d0:	189a      	adds	r2, r3, r2
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089da:	b29b      	uxth	r3, r3
 80089dc:	2bff      	cmp	r3, #255	@ 0xff
 80089de:	d903      	bls.n	80089e8 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	22ff      	movs	r2, #255	@ 0xff
 80089e4:	851a      	strh	r2, [r3, #40]	@ 0x28
 80089e6:	e004      	b.n	80089f2 <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089ec:	b29a      	uxth	r2, r3
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089fa:	0019      	movs	r1, r3
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	3328      	adds	r3, #40	@ 0x28
 8008a02:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8008a08:	f7fd fb1c 	bl	8006044 <HAL_DMA_Start_IT>
 8008a0c:	1e03      	subs	r3, r0, #0
 8008a0e:	d005      	beq.n	8008a1c <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2110      	movs	r1, #16
 8008a14:	0018      	movs	r0, r3
 8008a16:	f7ff fe6f 	bl	80086f8 <I2C_ITError>
}
 8008a1a:	e004      	b.n	8008a26 <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	2140      	movs	r1, #64	@ 0x40
 8008a20:	0018      	movs	r0, r3
 8008a22:	f000 f8c9 	bl	8008bb8 <I2C_Enable_IRQ>
}
 8008a26:	46c0      	nop			@ (mov r8, r8)
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	b004      	add	sp, #16
 8008a2c:	bd80      	pop	{r7, pc}
 8008a2e:	46c0      	nop			@ (mov r8, r8)
 8008a30:	ffffbfff 	.word	0xffffbfff

08008a34 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b084      	sub	sp, #16
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a40:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	681a      	ldr	r2, [r3, #0]
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4920      	ldr	r1, [pc, #128]	@ (8008ad0 <I2C_DMAMasterReceiveCplt+0x9c>)
 8008a4e:	400a      	ands	r2, r1
 8008a50:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d105      	bne.n	8008a68 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	2120      	movs	r1, #32
 8008a60:	0018      	movs	r0, r3
 8008a62:	f000 f8a9 	bl	8008bb8 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8008a66:	e02e      	b.n	8008ac6 <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a6c:	68fa      	ldr	r2, [r7, #12]
 8008a6e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8008a70:	189a      	adds	r2, r3, r2
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a7a:	b29b      	uxth	r3, r3
 8008a7c:	2bff      	cmp	r3, #255	@ 0xff
 8008a7e:	d903      	bls.n	8008a88 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	22ff      	movs	r2, #255	@ 0xff
 8008a84:	851a      	strh	r2, [r3, #40]	@ 0x28
 8008a86:	e004      	b.n	8008a92 <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a8c:	b29a      	uxth	r2, r3
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	3324      	adds	r3, #36	@ 0x24
 8008a9c:	0019      	movs	r1, r3
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008aa2:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8008aa8:	f7fd facc 	bl	8006044 <HAL_DMA_Start_IT>
 8008aac:	1e03      	subs	r3, r0, #0
 8008aae:	d005      	beq.n	8008abc <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	2110      	movs	r1, #16
 8008ab4:	0018      	movs	r0, r3
 8008ab6:	f7ff fe1f 	bl	80086f8 <I2C_ITError>
}
 8008aba:	e004      	b.n	8008ac6 <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	2140      	movs	r1, #64	@ 0x40
 8008ac0:	0018      	movs	r0, r3
 8008ac2:	f000 f879 	bl	8008bb8 <I2C_Enable_IRQ>
}
 8008ac6:	46c0      	nop			@ (mov r8, r8)
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	b004      	add	sp, #16
 8008acc:	bd80      	pop	{r7, pc}
 8008ace:	46c0      	nop			@ (mov r8, r8)
 8008ad0:	ffff7fff 	.word	0xffff7fff

08008ad4 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b084      	sub	sp, #16
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ae0:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	685a      	ldr	r2, [r3, #4]
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	2180      	movs	r1, #128	@ 0x80
 8008aee:	0209      	lsls	r1, r1, #8
 8008af0:	430a      	orrs	r2, r1
 8008af2:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	2110      	movs	r1, #16
 8008af8:	0018      	movs	r0, r3
 8008afa:	f7ff fdfd 	bl	80086f8 <I2C_ITError>
}
 8008afe:	46c0      	nop			@ (mov r8, r8)
 8008b00:	46bd      	mov	sp, r7
 8008b02:	b004      	add	sp, #16
 8008b04:	bd80      	pop	{r7, pc}

08008b06 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008b06:	b580      	push	{r7, lr}
 8008b08:	b084      	sub	sp, #16
 8008b0a:	af00      	add	r7, sp, #0
 8008b0c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b12:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d003      	beq.n	8008b24 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b20:	2200      	movs	r2, #0
 8008b22:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d003      	beq.n	8008b34 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b30:	2200      	movs	r2, #0
 8008b32:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	0018      	movs	r0, r3
 8008b38:	f7ff fee0 	bl	80088fc <I2C_TreatErrorCallback>
}
 8008b3c:	46c0      	nop			@ (mov r8, r8)
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	b004      	add	sp, #16
 8008b42:	bd80      	pop	{r7, pc}

08008b44 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008b44:	b590      	push	{r4, r7, lr}
 8008b46:	b087      	sub	sp, #28
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	60f8      	str	r0, [r7, #12]
 8008b4c:	0008      	movs	r0, r1
 8008b4e:	0011      	movs	r1, r2
 8008b50:	607b      	str	r3, [r7, #4]
 8008b52:	240a      	movs	r4, #10
 8008b54:	193b      	adds	r3, r7, r4
 8008b56:	1c02      	adds	r2, r0, #0
 8008b58:	801a      	strh	r2, [r3, #0]
 8008b5a:	2009      	movs	r0, #9
 8008b5c:	183b      	adds	r3, r7, r0
 8008b5e:	1c0a      	adds	r2, r1, #0
 8008b60:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008b62:	193b      	adds	r3, r7, r4
 8008b64:	881b      	ldrh	r3, [r3, #0]
 8008b66:	059b      	lsls	r3, r3, #22
 8008b68:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008b6a:	183b      	adds	r3, r7, r0
 8008b6c:	781b      	ldrb	r3, [r3, #0]
 8008b6e:	0419      	lsls	r1, r3, #16
 8008b70:	23ff      	movs	r3, #255	@ 0xff
 8008b72:	041b      	lsls	r3, r3, #16
 8008b74:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008b76:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	005b      	lsls	r3, r3, #1
 8008b82:	085b      	lsrs	r3, r3, #1
 8008b84:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	685b      	ldr	r3, [r3, #4]
 8008b8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008b8e:	0d51      	lsrs	r1, r2, #21
 8008b90:	2280      	movs	r2, #128	@ 0x80
 8008b92:	00d2      	lsls	r2, r2, #3
 8008b94:	400a      	ands	r2, r1
 8008b96:	4907      	ldr	r1, [pc, #28]	@ (8008bb4 <I2C_TransferConfig+0x70>)
 8008b98:	430a      	orrs	r2, r1
 8008b9a:	43d2      	mvns	r2, r2
 8008b9c:	401a      	ands	r2, r3
 8008b9e:	0011      	movs	r1, r2
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	697a      	ldr	r2, [r7, #20]
 8008ba6:	430a      	orrs	r2, r1
 8008ba8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008baa:	46c0      	nop			@ (mov r8, r8)
 8008bac:	46bd      	mov	sp, r7
 8008bae:	b007      	add	sp, #28
 8008bb0:	bd90      	pop	{r4, r7, pc}
 8008bb2:	46c0      	nop			@ (mov r8, r8)
 8008bb4:	03ff63ff 	.word	0x03ff63ff

08008bb8 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b084      	sub	sp, #16
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
 8008bc0:	000a      	movs	r2, r1
 8008bc2:	1cbb      	adds	r3, r7, #2
 8008bc4:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	60fb      	str	r3, [r7, #12]

#if defined(HAL_DMA_MODULE_ENABLED)
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008bce:	4b3c      	ldr	r3, [pc, #240]	@ (8008cc0 <I2C_Enable_IRQ+0x108>)
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	d035      	beq.n	8008c40 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8008bd8:	4b3a      	ldr	r3, [pc, #232]	@ (8008cc4 <I2C_Enable_IRQ+0x10c>)
 8008bda:	429a      	cmp	r2, r3
 8008bdc:	d030      	beq.n	8008c40 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8008be2:	4b39      	ldr	r3, [pc, #228]	@ (8008cc8 <I2C_Enable_IRQ+0x110>)
 8008be4:	429a      	cmp	r2, r3
 8008be6:	d02b      	beq.n	8008c40 <I2C_Enable_IRQ+0x88>
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008be8:	1cbb      	adds	r3, r7, #2
 8008bea:	2200      	movs	r2, #0
 8008bec:	5e9b      	ldrsh	r3, [r3, r2]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	da03      	bge.n	8008bfa <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	22b8      	movs	r2, #184	@ 0xb8
 8008bf6:	4313      	orrs	r3, r2
 8008bf8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008bfa:	1cbb      	adds	r3, r7, #2
 8008bfc:	881b      	ldrh	r3, [r3, #0]
 8008bfe:	2201      	movs	r2, #1
 8008c00:	4013      	ands	r3, r2
 8008c02:	d003      	beq.n	8008c0c <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	22f2      	movs	r2, #242	@ 0xf2
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008c0c:	1cbb      	adds	r3, r7, #2
 8008c0e:	881b      	ldrh	r3, [r3, #0]
 8008c10:	2202      	movs	r2, #2
 8008c12:	4013      	ands	r3, r2
 8008c14:	d003      	beq.n	8008c1e <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	22f4      	movs	r2, #244	@ 0xf4
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008c1e:	1cbb      	adds	r3, r7, #2
 8008c20:	881b      	ldrh	r3, [r3, #0]
 8008c22:	2b10      	cmp	r3, #16
 8008c24:	d103      	bne.n	8008c2e <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	2290      	movs	r2, #144	@ 0x90
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008c2e:	1cbb      	adds	r3, r7, #2
 8008c30:	881b      	ldrh	r3, [r3, #0]
 8008c32:	2b20      	cmp	r3, #32
 8008c34:	d137      	bne.n	8008ca6 <I2C_Enable_IRQ+0xee>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2220      	movs	r2, #32
 8008c3a:	4313      	orrs	r3, r2
 8008c3c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008c3e:	e032      	b.n	8008ca6 <I2C_Enable_IRQ+0xee>
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008c40:	1cbb      	adds	r3, r7, #2
 8008c42:	2200      	movs	r2, #0
 8008c44:	5e9b      	ldrsh	r3, [r3, r2]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	da03      	bge.n	8008c52 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	22b8      	movs	r2, #184	@ 0xb8
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008c52:	1cbb      	adds	r3, r7, #2
 8008c54:	881b      	ldrh	r3, [r3, #0]
 8008c56:	2201      	movs	r2, #1
 8008c58:	4013      	ands	r3, r2
 8008c5a:	d003      	beq.n	8008c64 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	22f2      	movs	r2, #242	@ 0xf2
 8008c60:	4313      	orrs	r3, r2
 8008c62:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008c64:	1cbb      	adds	r3, r7, #2
 8008c66:	881b      	ldrh	r3, [r3, #0]
 8008c68:	2202      	movs	r2, #2
 8008c6a:	4013      	ands	r3, r2
 8008c6c:	d003      	beq.n	8008c76 <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	22f4      	movs	r2, #244	@ 0xf4
 8008c72:	4313      	orrs	r3, r2
 8008c74:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008c76:	1cbb      	adds	r3, r7, #2
 8008c78:	881b      	ldrh	r3, [r3, #0]
 8008c7a:	2b10      	cmp	r3, #16
 8008c7c:	d103      	bne.n	8008c86 <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	2290      	movs	r2, #144	@ 0x90
 8008c82:	4313      	orrs	r3, r2
 8008c84:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008c86:	1cbb      	adds	r3, r7, #2
 8008c88:	881b      	ldrh	r3, [r3, #0]
 8008c8a:	2b20      	cmp	r3, #32
 8008c8c:	d103      	bne.n	8008c96 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	2260      	movs	r2, #96	@ 0x60
 8008c92:	4313      	orrs	r3, r2
 8008c94:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008c96:	1cbb      	adds	r3, r7, #2
 8008c98:	881b      	ldrh	r3, [r3, #0]
 8008c9a:	2b40      	cmp	r3, #64	@ 0x40
 8008c9c:	d103      	bne.n	8008ca6 <I2C_Enable_IRQ+0xee>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	2240      	movs	r2, #64	@ 0x40
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	60fb      	str	r3, [r7, #12]
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	6819      	ldr	r1, [r3, #0]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	68fa      	ldr	r2, [r7, #12]
 8008cb2:	430a      	orrs	r2, r1
 8008cb4:	601a      	str	r2, [r3, #0]
}
 8008cb6:	46c0      	nop			@ (mov r8, r8)
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	b004      	add	sp, #16
 8008cbc:	bd80      	pop	{r7, pc}
 8008cbe:	46c0      	nop			@ (mov r8, r8)
 8008cc0:	080078e9 	.word	0x080078e9
 8008cc4:	08007d39 	.word	0x08007d39
 8008cc8:	08007ae1 	.word	0x08007ae1

08008ccc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b084      	sub	sp, #16
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	000a      	movs	r2, r1
 8008cd6:	1cbb      	adds	r3, r7, #2
 8008cd8:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008cde:	1cbb      	adds	r3, r7, #2
 8008ce0:	881b      	ldrh	r3, [r3, #0]
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	4013      	ands	r3, r2
 8008ce6:	d010      	beq.n	8008d0a <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2242      	movs	r2, #66	@ 0x42
 8008cec:	4313      	orrs	r3, r2
 8008cee:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2241      	movs	r2, #65	@ 0x41
 8008cf4:	5c9b      	ldrb	r3, [r3, r2]
 8008cf6:	b2db      	uxtb	r3, r3
 8008cf8:	001a      	movs	r2, r3
 8008cfa:	2328      	movs	r3, #40	@ 0x28
 8008cfc:	4013      	ands	r3, r2
 8008cfe:	2b28      	cmp	r3, #40	@ 0x28
 8008d00:	d003      	beq.n	8008d0a <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	22b0      	movs	r2, #176	@ 0xb0
 8008d06:	4313      	orrs	r3, r2
 8008d08:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008d0a:	1cbb      	adds	r3, r7, #2
 8008d0c:	881b      	ldrh	r3, [r3, #0]
 8008d0e:	2202      	movs	r2, #2
 8008d10:	4013      	ands	r3, r2
 8008d12:	d010      	beq.n	8008d36 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	2244      	movs	r2, #68	@ 0x44
 8008d18:	4313      	orrs	r3, r2
 8008d1a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2241      	movs	r2, #65	@ 0x41
 8008d20:	5c9b      	ldrb	r3, [r3, r2]
 8008d22:	b2db      	uxtb	r3, r3
 8008d24:	001a      	movs	r2, r3
 8008d26:	2328      	movs	r3, #40	@ 0x28
 8008d28:	4013      	ands	r3, r2
 8008d2a:	2b28      	cmp	r3, #40	@ 0x28
 8008d2c:	d003      	beq.n	8008d36 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	22b0      	movs	r2, #176	@ 0xb0
 8008d32:	4313      	orrs	r3, r2
 8008d34:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008d36:	1cbb      	adds	r3, r7, #2
 8008d38:	2200      	movs	r2, #0
 8008d3a:	5e9b      	ldrsh	r3, [r3, r2]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	da03      	bge.n	8008d48 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	22b8      	movs	r2, #184	@ 0xb8
 8008d44:	4313      	orrs	r3, r2
 8008d46:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008d48:	1cbb      	adds	r3, r7, #2
 8008d4a:	881b      	ldrh	r3, [r3, #0]
 8008d4c:	2b10      	cmp	r3, #16
 8008d4e:	d103      	bne.n	8008d58 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	2290      	movs	r2, #144	@ 0x90
 8008d54:	4313      	orrs	r3, r2
 8008d56:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008d58:	1cbb      	adds	r3, r7, #2
 8008d5a:	881b      	ldrh	r3, [r3, #0]
 8008d5c:	2b20      	cmp	r3, #32
 8008d5e:	d103      	bne.n	8008d68 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	2220      	movs	r2, #32
 8008d64:	4313      	orrs	r3, r2
 8008d66:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008d68:	1cbb      	adds	r3, r7, #2
 8008d6a:	881b      	ldrh	r3, [r3, #0]
 8008d6c:	2b40      	cmp	r3, #64	@ 0x40
 8008d6e:	d103      	bne.n	8008d78 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2240      	movs	r2, #64	@ 0x40
 8008d74:	4313      	orrs	r3, r2
 8008d76:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	681a      	ldr	r2, [r3, #0]
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	43d9      	mvns	r1, r3
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	400a      	ands	r2, r1
 8008d88:	601a      	str	r2, [r3, #0]
}
 8008d8a:	46c0      	nop			@ (mov r8, r8)
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	b004      	add	sp, #16
 8008d90:	bd80      	pop	{r7, pc}
	...

08008d94 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b082      	sub	sp, #8
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2241      	movs	r2, #65	@ 0x41
 8008da2:	5c9b      	ldrb	r3, [r3, r2]
 8008da4:	b2db      	uxtb	r3, r3
 8008da6:	2b20      	cmp	r3, #32
 8008da8:	d138      	bne.n	8008e1c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2240      	movs	r2, #64	@ 0x40
 8008dae:	5c9b      	ldrb	r3, [r3, r2]
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	d101      	bne.n	8008db8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008db4:	2302      	movs	r3, #2
 8008db6:	e032      	b.n	8008e1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2240      	movs	r2, #64	@ 0x40
 8008dbc:	2101      	movs	r1, #1
 8008dbe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2241      	movs	r2, #65	@ 0x41
 8008dc4:	2124      	movs	r1, #36	@ 0x24
 8008dc6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	681a      	ldr	r2, [r3, #0]
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	2101      	movs	r1, #1
 8008dd4:	438a      	bics	r2, r1
 8008dd6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	681a      	ldr	r2, [r3, #0]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	4911      	ldr	r1, [pc, #68]	@ (8008e28 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8008de4:	400a      	ands	r2, r1
 8008de6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	6819      	ldr	r1, [r3, #0]
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	683a      	ldr	r2, [r7, #0]
 8008df4:	430a      	orrs	r2, r1
 8008df6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	681a      	ldr	r2, [r3, #0]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	2101      	movs	r1, #1
 8008e04:	430a      	orrs	r2, r1
 8008e06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2241      	movs	r2, #65	@ 0x41
 8008e0c:	2120      	movs	r1, #32
 8008e0e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2240      	movs	r2, #64	@ 0x40
 8008e14:	2100      	movs	r1, #0
 8008e16:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008e18:	2300      	movs	r3, #0
 8008e1a:	e000      	b.n	8008e1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008e1c:	2302      	movs	r3, #2
  }
}
 8008e1e:	0018      	movs	r0, r3
 8008e20:	46bd      	mov	sp, r7
 8008e22:	b002      	add	sp, #8
 8008e24:	bd80      	pop	{r7, pc}
 8008e26:	46c0      	nop			@ (mov r8, r8)
 8008e28:	ffffefff 	.word	0xffffefff

08008e2c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b084      	sub	sp, #16
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
 8008e34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2241      	movs	r2, #65	@ 0x41
 8008e3a:	5c9b      	ldrb	r3, [r3, r2]
 8008e3c:	b2db      	uxtb	r3, r3
 8008e3e:	2b20      	cmp	r3, #32
 8008e40:	d139      	bne.n	8008eb6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2240      	movs	r2, #64	@ 0x40
 8008e46:	5c9b      	ldrb	r3, [r3, r2]
 8008e48:	2b01      	cmp	r3, #1
 8008e4a:	d101      	bne.n	8008e50 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008e4c:	2302      	movs	r3, #2
 8008e4e:	e033      	b.n	8008eb8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2240      	movs	r2, #64	@ 0x40
 8008e54:	2101      	movs	r1, #1
 8008e56:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2241      	movs	r2, #65	@ 0x41
 8008e5c:	2124      	movs	r1, #36	@ 0x24
 8008e5e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	681a      	ldr	r2, [r3, #0]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	2101      	movs	r1, #1
 8008e6c:	438a      	bics	r2, r1
 8008e6e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	4a11      	ldr	r2, [pc, #68]	@ (8008ec0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8008e7c:	4013      	ands	r3, r2
 8008e7e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	021b      	lsls	r3, r3, #8
 8008e84:	68fa      	ldr	r2, [r7, #12]
 8008e86:	4313      	orrs	r3, r2
 8008e88:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	68fa      	ldr	r2, [r7, #12]
 8008e90:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	681a      	ldr	r2, [r3, #0]
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	2101      	movs	r1, #1
 8008e9e:	430a      	orrs	r2, r1
 8008ea0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2241      	movs	r2, #65	@ 0x41
 8008ea6:	2120      	movs	r1, #32
 8008ea8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2240      	movs	r2, #64	@ 0x40
 8008eae:	2100      	movs	r1, #0
 8008eb0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	e000      	b.n	8008eb8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008eb6:	2302      	movs	r3, #2
  }
}
 8008eb8:	0018      	movs	r0, r3
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	b004      	add	sp, #16
 8008ebe:	bd80      	pop	{r7, pc}
 8008ec0:	fffff0ff 	.word	0xfffff0ff

08008ec4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b086      	sub	sp, #24
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d101      	bne.n	8008ed6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	e20f      	b.n	80092f6 <HAL_RCC_OscConfig+0x432>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	2201      	movs	r2, #1
 8008edc:	4013      	ands	r3, r2
 8008ede:	d100      	bne.n	8008ee2 <HAL_RCC_OscConfig+0x1e>
 8008ee0:	e069      	b.n	8008fb6 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008ee2:	4bc8      	ldr	r3, [pc, #800]	@ (8009204 <HAL_RCC_OscConfig+0x340>)
 8008ee4:	689b      	ldr	r3, [r3, #8]
 8008ee6:	2238      	movs	r2, #56	@ 0x38
 8008ee8:	4013      	ands	r3, r2
 8008eea:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	2b08      	cmp	r3, #8
 8008ef0:	d105      	bne.n	8008efe <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	685b      	ldr	r3, [r3, #4]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d15d      	bne.n	8008fb6 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8008efa:	2301      	movs	r3, #1
 8008efc:	e1fb      	b.n	80092f6 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	685a      	ldr	r2, [r3, #4]
 8008f02:	2380      	movs	r3, #128	@ 0x80
 8008f04:	025b      	lsls	r3, r3, #9
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d107      	bne.n	8008f1a <HAL_RCC_OscConfig+0x56>
 8008f0a:	4bbe      	ldr	r3, [pc, #760]	@ (8009204 <HAL_RCC_OscConfig+0x340>)
 8008f0c:	681a      	ldr	r2, [r3, #0]
 8008f0e:	4bbd      	ldr	r3, [pc, #756]	@ (8009204 <HAL_RCC_OscConfig+0x340>)
 8008f10:	2180      	movs	r1, #128	@ 0x80
 8008f12:	0249      	lsls	r1, r1, #9
 8008f14:	430a      	orrs	r2, r1
 8008f16:	601a      	str	r2, [r3, #0]
 8008f18:	e020      	b.n	8008f5c <HAL_RCC_OscConfig+0x98>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	685a      	ldr	r2, [r3, #4]
 8008f1e:	23a0      	movs	r3, #160	@ 0xa0
 8008f20:	02db      	lsls	r3, r3, #11
 8008f22:	429a      	cmp	r2, r3
 8008f24:	d10e      	bne.n	8008f44 <HAL_RCC_OscConfig+0x80>
 8008f26:	4bb7      	ldr	r3, [pc, #732]	@ (8009204 <HAL_RCC_OscConfig+0x340>)
 8008f28:	681a      	ldr	r2, [r3, #0]
 8008f2a:	4bb6      	ldr	r3, [pc, #728]	@ (8009204 <HAL_RCC_OscConfig+0x340>)
 8008f2c:	2180      	movs	r1, #128	@ 0x80
 8008f2e:	02c9      	lsls	r1, r1, #11
 8008f30:	430a      	orrs	r2, r1
 8008f32:	601a      	str	r2, [r3, #0]
 8008f34:	4bb3      	ldr	r3, [pc, #716]	@ (8009204 <HAL_RCC_OscConfig+0x340>)
 8008f36:	681a      	ldr	r2, [r3, #0]
 8008f38:	4bb2      	ldr	r3, [pc, #712]	@ (8009204 <HAL_RCC_OscConfig+0x340>)
 8008f3a:	2180      	movs	r1, #128	@ 0x80
 8008f3c:	0249      	lsls	r1, r1, #9
 8008f3e:	430a      	orrs	r2, r1
 8008f40:	601a      	str	r2, [r3, #0]
 8008f42:	e00b      	b.n	8008f5c <HAL_RCC_OscConfig+0x98>
 8008f44:	4baf      	ldr	r3, [pc, #700]	@ (8009204 <HAL_RCC_OscConfig+0x340>)
 8008f46:	681a      	ldr	r2, [r3, #0]
 8008f48:	4bae      	ldr	r3, [pc, #696]	@ (8009204 <HAL_RCC_OscConfig+0x340>)
 8008f4a:	49af      	ldr	r1, [pc, #700]	@ (8009208 <HAL_RCC_OscConfig+0x344>)
 8008f4c:	400a      	ands	r2, r1
 8008f4e:	601a      	str	r2, [r3, #0]
 8008f50:	4bac      	ldr	r3, [pc, #688]	@ (8009204 <HAL_RCC_OscConfig+0x340>)
 8008f52:	681a      	ldr	r2, [r3, #0]
 8008f54:	4bab      	ldr	r3, [pc, #684]	@ (8009204 <HAL_RCC_OscConfig+0x340>)
 8008f56:	49ad      	ldr	r1, [pc, #692]	@ (800920c <HAL_RCC_OscConfig+0x348>)
 8008f58:	400a      	ands	r2, r1
 8008f5a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	685b      	ldr	r3, [r3, #4]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d014      	beq.n	8008f8e <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f64:	f7fc fe2e 	bl	8005bc4 <HAL_GetTick>
 8008f68:	0003      	movs	r3, r0
 8008f6a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008f6c:	e008      	b.n	8008f80 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8008f6e:	f7fc fe29 	bl	8005bc4 <HAL_GetTick>
 8008f72:	0002      	movs	r2, r0
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	1ad3      	subs	r3, r2, r3
 8008f78:	2b64      	cmp	r3, #100	@ 0x64
 8008f7a:	d901      	bls.n	8008f80 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8008f7c:	2303      	movs	r3, #3
 8008f7e:	e1ba      	b.n	80092f6 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008f80:	4ba0      	ldr	r3, [pc, #640]	@ (8009204 <HAL_RCC_OscConfig+0x340>)
 8008f82:	681a      	ldr	r2, [r3, #0]
 8008f84:	2380      	movs	r3, #128	@ 0x80
 8008f86:	029b      	lsls	r3, r3, #10
 8008f88:	4013      	ands	r3, r2
 8008f8a:	d0f0      	beq.n	8008f6e <HAL_RCC_OscConfig+0xaa>
 8008f8c:	e013      	b.n	8008fb6 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f8e:	f7fc fe19 	bl	8005bc4 <HAL_GetTick>
 8008f92:	0003      	movs	r3, r0
 8008f94:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008f96:	e008      	b.n	8008faa <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8008f98:	f7fc fe14 	bl	8005bc4 <HAL_GetTick>
 8008f9c:	0002      	movs	r2, r0
 8008f9e:	693b      	ldr	r3, [r7, #16]
 8008fa0:	1ad3      	subs	r3, r2, r3
 8008fa2:	2b64      	cmp	r3, #100	@ 0x64
 8008fa4:	d901      	bls.n	8008faa <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8008fa6:	2303      	movs	r3, #3
 8008fa8:	e1a5      	b.n	80092f6 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008faa:	4b96      	ldr	r3, [pc, #600]	@ (8009204 <HAL_RCC_OscConfig+0x340>)
 8008fac:	681a      	ldr	r2, [r3, #0]
 8008fae:	2380      	movs	r3, #128	@ 0x80
 8008fb0:	029b      	lsls	r3, r3, #10
 8008fb2:	4013      	ands	r3, r2
 8008fb4:	d1f0      	bne.n	8008f98 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	2202      	movs	r2, #2
 8008fbc:	4013      	ands	r3, r2
 8008fbe:	d100      	bne.n	8008fc2 <HAL_RCC_OscConfig+0xfe>
 8008fc0:	e086      	b.n	80090d0 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008fc2:	4b90      	ldr	r3, [pc, #576]	@ (8009204 <HAL_RCC_OscConfig+0x340>)
 8008fc4:	689b      	ldr	r3, [r3, #8]
 8008fc6:	2238      	movs	r2, #56	@ 0x38
 8008fc8:	4013      	ands	r3, r2
 8008fca:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d12f      	bne.n	8009032 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	68db      	ldr	r3, [r3, #12]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d101      	bne.n	8008fde <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8008fda:	2301      	movs	r3, #1
 8008fdc:	e18b      	b.n	80092f6 <HAL_RCC_OscConfig+0x432>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008fde:	4b89      	ldr	r3, [pc, #548]	@ (8009204 <HAL_RCC_OscConfig+0x340>)
 8008fe0:	685b      	ldr	r3, [r3, #4]
 8008fe2:	4a8b      	ldr	r2, [pc, #556]	@ (8009210 <HAL_RCC_OscConfig+0x34c>)
 8008fe4:	4013      	ands	r3, r2
 8008fe6:	0019      	movs	r1, r3
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	695b      	ldr	r3, [r3, #20]
 8008fec:	021a      	lsls	r2, r3, #8
 8008fee:	4b85      	ldr	r3, [pc, #532]	@ (8009204 <HAL_RCC_OscConfig+0x340>)
 8008ff0:	430a      	orrs	r2, r1
 8008ff2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8008ff4:	697b      	ldr	r3, [r7, #20]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d112      	bne.n	8009020 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8008ffa:	4b82      	ldr	r3, [pc, #520]	@ (8009204 <HAL_RCC_OscConfig+0x340>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	4a85      	ldr	r2, [pc, #532]	@ (8009214 <HAL_RCC_OscConfig+0x350>)
 8009000:	4013      	ands	r3, r2
 8009002:	0019      	movs	r1, r3
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	691a      	ldr	r2, [r3, #16]
 8009008:	4b7e      	ldr	r3, [pc, #504]	@ (8009204 <HAL_RCC_OscConfig+0x340>)
 800900a:	430a      	orrs	r2, r1
 800900c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800900e:	4b7d      	ldr	r3, [pc, #500]	@ (8009204 <HAL_RCC_OscConfig+0x340>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	0adb      	lsrs	r3, r3, #11
 8009014:	2207      	movs	r2, #7
 8009016:	4013      	ands	r3, r2
 8009018:	4a7f      	ldr	r2, [pc, #508]	@ (8009218 <HAL_RCC_OscConfig+0x354>)
 800901a:	40da      	lsrs	r2, r3
 800901c:	4b7f      	ldr	r3, [pc, #508]	@ (800921c <HAL_RCC_OscConfig+0x358>)
 800901e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8009020:	4b7f      	ldr	r3, [pc, #508]	@ (8009220 <HAL_RCC_OscConfig+0x35c>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	0018      	movs	r0, r3
 8009026:	f7fc fd71 	bl	8005b0c <HAL_InitTick>
 800902a:	1e03      	subs	r3, r0, #0
 800902c:	d050      	beq.n	80090d0 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 800902e:	2301      	movs	r3, #1
 8009030:	e161      	b.n	80092f6 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	68db      	ldr	r3, [r3, #12]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d030      	beq.n	800909c <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800903a:	4b72      	ldr	r3, [pc, #456]	@ (8009204 <HAL_RCC_OscConfig+0x340>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	4a75      	ldr	r2, [pc, #468]	@ (8009214 <HAL_RCC_OscConfig+0x350>)
 8009040:	4013      	ands	r3, r2
 8009042:	0019      	movs	r1, r3
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	691a      	ldr	r2, [r3, #16]
 8009048:	4b6e      	ldr	r3, [pc, #440]	@ (8009204 <HAL_RCC_OscConfig+0x340>)
 800904a:	430a      	orrs	r2, r1
 800904c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 800904e:	4b6d      	ldr	r3, [pc, #436]	@ (8009204 <HAL_RCC_OscConfig+0x340>)
 8009050:	681a      	ldr	r2, [r3, #0]
 8009052:	4b6c      	ldr	r3, [pc, #432]	@ (8009204 <HAL_RCC_OscConfig+0x340>)
 8009054:	2180      	movs	r1, #128	@ 0x80
 8009056:	0049      	lsls	r1, r1, #1
 8009058:	430a      	orrs	r2, r1
 800905a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800905c:	f7fc fdb2 	bl	8005bc4 <HAL_GetTick>
 8009060:	0003      	movs	r3, r0
 8009062:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009064:	e008      	b.n	8009078 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8009066:	f7fc fdad 	bl	8005bc4 <HAL_GetTick>
 800906a:	0002      	movs	r2, r0
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	1ad3      	subs	r3, r2, r3
 8009070:	2b02      	cmp	r3, #2
 8009072:	d901      	bls.n	8009078 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8009074:	2303      	movs	r3, #3
 8009076:	e13e      	b.n	80092f6 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009078:	4b62      	ldr	r3, [pc, #392]	@ (8009204 <HAL_RCC_OscConfig+0x340>)
 800907a:	681a      	ldr	r2, [r3, #0]
 800907c:	2380      	movs	r3, #128	@ 0x80
 800907e:	00db      	lsls	r3, r3, #3
 8009080:	4013      	ands	r3, r2
 8009082:	d0f0      	beq.n	8009066 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009084:	4b5f      	ldr	r3, [pc, #380]	@ (8009204 <HAL_RCC_OscConfig+0x340>)
 8009086:	685b      	ldr	r3, [r3, #4]
 8009088:	4a61      	ldr	r2, [pc, #388]	@ (8009210 <HAL_RCC_OscConfig+0x34c>)
 800908a:	4013      	ands	r3, r2
 800908c:	0019      	movs	r1, r3
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	695b      	ldr	r3, [r3, #20]
 8009092:	021a      	lsls	r2, r3, #8
 8009094:	4b5b      	ldr	r3, [pc, #364]	@ (8009204 <HAL_RCC_OscConfig+0x340>)
 8009096:	430a      	orrs	r2, r1
 8009098:	605a      	str	r2, [r3, #4]
 800909a:	e019      	b.n	80090d0 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 800909c:	4b59      	ldr	r3, [pc, #356]	@ (8009204 <HAL_RCC_OscConfig+0x340>)
 800909e:	681a      	ldr	r2, [r3, #0]
 80090a0:	4b58      	ldr	r3, [pc, #352]	@ (8009204 <HAL_RCC_OscConfig+0x340>)
 80090a2:	4960      	ldr	r1, [pc, #384]	@ (8009224 <HAL_RCC_OscConfig+0x360>)
 80090a4:	400a      	ands	r2, r1
 80090a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090a8:	f7fc fd8c 	bl	8005bc4 <HAL_GetTick>
 80090ac:	0003      	movs	r3, r0
 80090ae:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80090b0:	e008      	b.n	80090c4 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80090b2:	f7fc fd87 	bl	8005bc4 <HAL_GetTick>
 80090b6:	0002      	movs	r2, r0
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	1ad3      	subs	r3, r2, r3
 80090bc:	2b02      	cmp	r3, #2
 80090be:	d901      	bls.n	80090c4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80090c0:	2303      	movs	r3, #3
 80090c2:	e118      	b.n	80092f6 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80090c4:	4b4f      	ldr	r3, [pc, #316]	@ (8009204 <HAL_RCC_OscConfig+0x340>)
 80090c6:	681a      	ldr	r2, [r3, #0]
 80090c8:	2380      	movs	r3, #128	@ 0x80
 80090ca:	00db      	lsls	r3, r3, #3
 80090cc:	4013      	ands	r3, r2
 80090ce:	d1f0      	bne.n	80090b2 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	2208      	movs	r2, #8
 80090d6:	4013      	ands	r3, r2
 80090d8:	d042      	beq.n	8009160 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80090da:	4b4a      	ldr	r3, [pc, #296]	@ (8009204 <HAL_RCC_OscConfig+0x340>)
 80090dc:	689b      	ldr	r3, [r3, #8]
 80090de:	2238      	movs	r2, #56	@ 0x38
 80090e0:	4013      	ands	r3, r2
 80090e2:	2b18      	cmp	r3, #24
 80090e4:	d105      	bne.n	80090f2 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	699b      	ldr	r3, [r3, #24]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d138      	bne.n	8009160 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80090ee:	2301      	movs	r3, #1
 80090f0:	e101      	b.n	80092f6 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	699b      	ldr	r3, [r3, #24]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d019      	beq.n	800912e <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80090fa:	4b42      	ldr	r3, [pc, #264]	@ (8009204 <HAL_RCC_OscConfig+0x340>)
 80090fc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80090fe:	4b41      	ldr	r3, [pc, #260]	@ (8009204 <HAL_RCC_OscConfig+0x340>)
 8009100:	2101      	movs	r1, #1
 8009102:	430a      	orrs	r2, r1
 8009104:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009106:	f7fc fd5d 	bl	8005bc4 <HAL_GetTick>
 800910a:	0003      	movs	r3, r0
 800910c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800910e:	e008      	b.n	8009122 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8009110:	f7fc fd58 	bl	8005bc4 <HAL_GetTick>
 8009114:	0002      	movs	r2, r0
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	1ad3      	subs	r3, r2, r3
 800911a:	2b02      	cmp	r3, #2
 800911c:	d901      	bls.n	8009122 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 800911e:	2303      	movs	r3, #3
 8009120:	e0e9      	b.n	80092f6 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8009122:	4b38      	ldr	r3, [pc, #224]	@ (8009204 <HAL_RCC_OscConfig+0x340>)
 8009124:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009126:	2202      	movs	r2, #2
 8009128:	4013      	ands	r3, r2
 800912a:	d0f1      	beq.n	8009110 <HAL_RCC_OscConfig+0x24c>
 800912c:	e018      	b.n	8009160 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800912e:	4b35      	ldr	r3, [pc, #212]	@ (8009204 <HAL_RCC_OscConfig+0x340>)
 8009130:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009132:	4b34      	ldr	r3, [pc, #208]	@ (8009204 <HAL_RCC_OscConfig+0x340>)
 8009134:	2101      	movs	r1, #1
 8009136:	438a      	bics	r2, r1
 8009138:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800913a:	f7fc fd43 	bl	8005bc4 <HAL_GetTick>
 800913e:	0003      	movs	r3, r0
 8009140:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8009142:	e008      	b.n	8009156 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8009144:	f7fc fd3e 	bl	8005bc4 <HAL_GetTick>
 8009148:	0002      	movs	r2, r0
 800914a:	693b      	ldr	r3, [r7, #16]
 800914c:	1ad3      	subs	r3, r2, r3
 800914e:	2b02      	cmp	r3, #2
 8009150:	d901      	bls.n	8009156 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8009152:	2303      	movs	r3, #3
 8009154:	e0cf      	b.n	80092f6 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8009156:	4b2b      	ldr	r3, [pc, #172]	@ (8009204 <HAL_RCC_OscConfig+0x340>)
 8009158:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800915a:	2202      	movs	r2, #2
 800915c:	4013      	ands	r3, r2
 800915e:	d1f1      	bne.n	8009144 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	2204      	movs	r2, #4
 8009166:	4013      	ands	r3, r2
 8009168:	d100      	bne.n	800916c <HAL_RCC_OscConfig+0x2a8>
 800916a:	e084      	b.n	8009276 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 800916c:	230f      	movs	r3, #15
 800916e:	18fb      	adds	r3, r7, r3
 8009170:	2200      	movs	r2, #0
 8009172:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8009174:	4b23      	ldr	r3, [pc, #140]	@ (8009204 <HAL_RCC_OscConfig+0x340>)
 8009176:	689b      	ldr	r3, [r3, #8]
 8009178:	2238      	movs	r2, #56	@ 0x38
 800917a:	4013      	ands	r3, r2
 800917c:	2b20      	cmp	r3, #32
 800917e:	d106      	bne.n	800918e <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	689b      	ldr	r3, [r3, #8]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d000      	beq.n	800918a <HAL_RCC_OscConfig+0x2c6>
 8009188:	e075      	b.n	8009276 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 800918a:	2301      	movs	r3, #1
 800918c:	e0b3      	b.n	80092f6 <HAL_RCC_OscConfig+0x432>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	689b      	ldr	r3, [r3, #8]
 8009192:	2b01      	cmp	r3, #1
 8009194:	d106      	bne.n	80091a4 <HAL_RCC_OscConfig+0x2e0>
 8009196:	4b1b      	ldr	r3, [pc, #108]	@ (8009204 <HAL_RCC_OscConfig+0x340>)
 8009198:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800919a:	4b1a      	ldr	r3, [pc, #104]	@ (8009204 <HAL_RCC_OscConfig+0x340>)
 800919c:	2101      	movs	r1, #1
 800919e:	430a      	orrs	r2, r1
 80091a0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80091a2:	e01c      	b.n	80091de <HAL_RCC_OscConfig+0x31a>
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	689b      	ldr	r3, [r3, #8]
 80091a8:	2b05      	cmp	r3, #5
 80091aa:	d10c      	bne.n	80091c6 <HAL_RCC_OscConfig+0x302>
 80091ac:	4b15      	ldr	r3, [pc, #84]	@ (8009204 <HAL_RCC_OscConfig+0x340>)
 80091ae:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80091b0:	4b14      	ldr	r3, [pc, #80]	@ (8009204 <HAL_RCC_OscConfig+0x340>)
 80091b2:	2104      	movs	r1, #4
 80091b4:	430a      	orrs	r2, r1
 80091b6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80091b8:	4b12      	ldr	r3, [pc, #72]	@ (8009204 <HAL_RCC_OscConfig+0x340>)
 80091ba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80091bc:	4b11      	ldr	r3, [pc, #68]	@ (8009204 <HAL_RCC_OscConfig+0x340>)
 80091be:	2101      	movs	r1, #1
 80091c0:	430a      	orrs	r2, r1
 80091c2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80091c4:	e00b      	b.n	80091de <HAL_RCC_OscConfig+0x31a>
 80091c6:	4b0f      	ldr	r3, [pc, #60]	@ (8009204 <HAL_RCC_OscConfig+0x340>)
 80091c8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80091ca:	4b0e      	ldr	r3, [pc, #56]	@ (8009204 <HAL_RCC_OscConfig+0x340>)
 80091cc:	2101      	movs	r1, #1
 80091ce:	438a      	bics	r2, r1
 80091d0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80091d2:	4b0c      	ldr	r3, [pc, #48]	@ (8009204 <HAL_RCC_OscConfig+0x340>)
 80091d4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80091d6:	4b0b      	ldr	r3, [pc, #44]	@ (8009204 <HAL_RCC_OscConfig+0x340>)
 80091d8:	2104      	movs	r1, #4
 80091da:	438a      	bics	r2, r1
 80091dc:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	689b      	ldr	r3, [r3, #8]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d028      	beq.n	8009238 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091e6:	f7fc fced 	bl	8005bc4 <HAL_GetTick>
 80091ea:	0003      	movs	r3, r0
 80091ec:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80091ee:	e01d      	b.n	800922c <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80091f0:	f7fc fce8 	bl	8005bc4 <HAL_GetTick>
 80091f4:	0002      	movs	r2, r0
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	1ad3      	subs	r3, r2, r3
 80091fa:	4a0b      	ldr	r2, [pc, #44]	@ (8009228 <HAL_RCC_OscConfig+0x364>)
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d915      	bls.n	800922c <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8009200:	2303      	movs	r3, #3
 8009202:	e078      	b.n	80092f6 <HAL_RCC_OscConfig+0x432>
 8009204:	40021000 	.word	0x40021000
 8009208:	fffeffff 	.word	0xfffeffff
 800920c:	fffbffff 	.word	0xfffbffff
 8009210:	ffff80ff 	.word	0xffff80ff
 8009214:	ffffc7ff 	.word	0xffffc7ff
 8009218:	02dc6c00 	.word	0x02dc6c00
 800921c:	200000b8 	.word	0x200000b8
 8009220:	200000bc 	.word	0x200000bc
 8009224:	fffffeff 	.word	0xfffffeff
 8009228:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800922c:	4b34      	ldr	r3, [pc, #208]	@ (8009300 <HAL_RCC_OscConfig+0x43c>)
 800922e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009230:	2202      	movs	r2, #2
 8009232:	4013      	ands	r3, r2
 8009234:	d0dc      	beq.n	80091f0 <HAL_RCC_OscConfig+0x32c>
 8009236:	e013      	b.n	8009260 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009238:	f7fc fcc4 	bl	8005bc4 <HAL_GetTick>
 800923c:	0003      	movs	r3, r0
 800923e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8009240:	e009      	b.n	8009256 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009242:	f7fc fcbf 	bl	8005bc4 <HAL_GetTick>
 8009246:	0002      	movs	r2, r0
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	1ad3      	subs	r3, r2, r3
 800924c:	4a2d      	ldr	r2, [pc, #180]	@ (8009304 <HAL_RCC_OscConfig+0x440>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d901      	bls.n	8009256 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8009252:	2303      	movs	r3, #3
 8009254:	e04f      	b.n	80092f6 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8009256:	4b2a      	ldr	r3, [pc, #168]	@ (8009300 <HAL_RCC_OscConfig+0x43c>)
 8009258:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800925a:	2202      	movs	r2, #2
 800925c:	4013      	ands	r3, r2
 800925e:	d1f0      	bne.n	8009242 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8009260:	230f      	movs	r3, #15
 8009262:	18fb      	adds	r3, r7, r3
 8009264:	781b      	ldrb	r3, [r3, #0]
 8009266:	2b01      	cmp	r3, #1
 8009268:	d105      	bne.n	8009276 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800926a:	4b25      	ldr	r3, [pc, #148]	@ (8009300 <HAL_RCC_OscConfig+0x43c>)
 800926c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800926e:	4b24      	ldr	r3, [pc, #144]	@ (8009300 <HAL_RCC_OscConfig+0x43c>)
 8009270:	4925      	ldr	r1, [pc, #148]	@ (8009308 <HAL_RCC_OscConfig+0x444>)
 8009272:	400a      	ands	r2, r1
 8009274:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_CR_HSIUSB48ON)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	2210      	movs	r2, #16
 800927c:	4013      	ands	r3, r2
 800927e:	d039      	beq.n	80092f4 <HAL_RCC_OscConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	69db      	ldr	r3, [r3, #28]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d01b      	beq.n	80092c0 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009288:	4b1d      	ldr	r3, [pc, #116]	@ (8009300 <HAL_RCC_OscConfig+0x43c>)
 800928a:	681a      	ldr	r2, [r3, #0]
 800928c:	4b1c      	ldr	r3, [pc, #112]	@ (8009300 <HAL_RCC_OscConfig+0x43c>)
 800928e:	2180      	movs	r1, #128	@ 0x80
 8009290:	03c9      	lsls	r1, r1, #15
 8009292:	430a      	orrs	r2, r1
 8009294:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009296:	f7fc fc95 	bl	8005bc4 <HAL_GetTick>
 800929a:	0003      	movs	r3, r0
 800929c:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 800929e:	e008      	b.n	80092b2 <HAL_RCC_OscConfig+0x3ee>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80092a0:	f7fc fc90 	bl	8005bc4 <HAL_GetTick>
 80092a4:	0002      	movs	r2, r0
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	1ad3      	subs	r3, r2, r3
 80092aa:	2b02      	cmp	r3, #2
 80092ac:	d901      	bls.n	80092b2 <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 80092ae:	2303      	movs	r3, #3
 80092b0:	e021      	b.n	80092f6 <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 80092b2:	4b13      	ldr	r3, [pc, #76]	@ (8009300 <HAL_RCC_OscConfig+0x43c>)
 80092b4:	681a      	ldr	r2, [r3, #0]
 80092b6:	2380      	movs	r3, #128	@ 0x80
 80092b8:	041b      	lsls	r3, r3, #16
 80092ba:	4013      	ands	r3, r2
 80092bc:	d0f0      	beq.n	80092a0 <HAL_RCC_OscConfig+0x3dc>
 80092be:	e019      	b.n	80092f4 <HAL_RCC_OscConfig+0x430>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80092c0:	4b0f      	ldr	r3, [pc, #60]	@ (8009300 <HAL_RCC_OscConfig+0x43c>)
 80092c2:	681a      	ldr	r2, [r3, #0]
 80092c4:	4b0e      	ldr	r3, [pc, #56]	@ (8009300 <HAL_RCC_OscConfig+0x43c>)
 80092c6:	4911      	ldr	r1, [pc, #68]	@ (800930c <HAL_RCC_OscConfig+0x448>)
 80092c8:	400a      	ands	r2, r1
 80092ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092cc:	f7fc fc7a 	bl	8005bc4 <HAL_GetTick>
 80092d0:	0003      	movs	r3, r0
 80092d2:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 80092d4:	e008      	b.n	80092e8 <HAL_RCC_OscConfig+0x424>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80092d6:	f7fc fc75 	bl	8005bc4 <HAL_GetTick>
 80092da:	0002      	movs	r2, r0
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	1ad3      	subs	r3, r2, r3
 80092e0:	2b02      	cmp	r3, #2
 80092e2:	d901      	bls.n	80092e8 <HAL_RCC_OscConfig+0x424>
        {
          return HAL_TIMEOUT;
 80092e4:	2303      	movs	r3, #3
 80092e6:	e006      	b.n	80092f6 <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 80092e8:	4b05      	ldr	r3, [pc, #20]	@ (8009300 <HAL_RCC_OscConfig+0x43c>)
 80092ea:	681a      	ldr	r2, [r3, #0]
 80092ec:	2380      	movs	r3, #128	@ 0x80
 80092ee:	041b      	lsls	r3, r3, #16
 80092f0:	4013      	ands	r3, r2
 80092f2:	d1f0      	bne.n	80092d6 <HAL_RCC_OscConfig+0x412>
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 80092f4:	2300      	movs	r3, #0
}
 80092f6:	0018      	movs	r0, r3
 80092f8:	46bd      	mov	sp, r7
 80092fa:	b006      	add	sp, #24
 80092fc:	bd80      	pop	{r7, pc}
 80092fe:	46c0      	nop			@ (mov r8, r8)
 8009300:	40021000 	.word	0x40021000
 8009304:	00001388 	.word	0x00001388
 8009308:	efffffff 	.word	0xefffffff
 800930c:	ffbfffff 	.word	0xffbfffff

08009310 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b084      	sub	sp, #16
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
 8009318:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d101      	bne.n	8009324 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009320:	2301      	movs	r3, #1
 8009322:	e0f6      	b.n	8009512 <HAL_RCC_ClockConfig+0x202>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009324:	4b7d      	ldr	r3, [pc, #500]	@ (800951c <HAL_RCC_ClockConfig+0x20c>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	2207      	movs	r2, #7
 800932a:	4013      	ands	r3, r2
 800932c:	683a      	ldr	r2, [r7, #0]
 800932e:	429a      	cmp	r2, r3
 8009330:	d91e      	bls.n	8009370 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009332:	4b7a      	ldr	r3, [pc, #488]	@ (800951c <HAL_RCC_ClockConfig+0x20c>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	2207      	movs	r2, #7
 8009338:	4393      	bics	r3, r2
 800933a:	0019      	movs	r1, r3
 800933c:	4b77      	ldr	r3, [pc, #476]	@ (800951c <HAL_RCC_ClockConfig+0x20c>)
 800933e:	683a      	ldr	r2, [r7, #0]
 8009340:	430a      	orrs	r2, r1
 8009342:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009344:	f7fc fc3e 	bl	8005bc4 <HAL_GetTick>
 8009348:	0003      	movs	r3, r0
 800934a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800934c:	e009      	b.n	8009362 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800934e:	f7fc fc39 	bl	8005bc4 <HAL_GetTick>
 8009352:	0002      	movs	r2, r0
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	1ad3      	subs	r3, r2, r3
 8009358:	4a71      	ldr	r2, [pc, #452]	@ (8009520 <HAL_RCC_ClockConfig+0x210>)
 800935a:	4293      	cmp	r3, r2
 800935c:	d901      	bls.n	8009362 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800935e:	2303      	movs	r3, #3
 8009360:	e0d7      	b.n	8009512 <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009362:	4b6e      	ldr	r3, [pc, #440]	@ (800951c <HAL_RCC_ClockConfig+0x20c>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	2207      	movs	r2, #7
 8009368:	4013      	ands	r3, r2
 800936a:	683a      	ldr	r2, [r7, #0]
 800936c:	429a      	cmp	r2, r3
 800936e:	d1ee      	bne.n	800934e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	2202      	movs	r2, #2
 8009376:	4013      	ands	r3, r2
 8009378:	d017      	beq.n	80093aa <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	2204      	movs	r2, #4
 8009380:	4013      	ands	r3, r2
 8009382:	d008      	beq.n	8009396 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8009384:	4b67      	ldr	r3, [pc, #412]	@ (8009524 <HAL_RCC_ClockConfig+0x214>)
 8009386:	689b      	ldr	r3, [r3, #8]
 8009388:	4a67      	ldr	r2, [pc, #412]	@ (8009528 <HAL_RCC_ClockConfig+0x218>)
 800938a:	401a      	ands	r2, r3
 800938c:	4b65      	ldr	r3, [pc, #404]	@ (8009524 <HAL_RCC_ClockConfig+0x214>)
 800938e:	21b0      	movs	r1, #176	@ 0xb0
 8009390:	0109      	lsls	r1, r1, #4
 8009392:	430a      	orrs	r2, r1
 8009394:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009396:	4b63      	ldr	r3, [pc, #396]	@ (8009524 <HAL_RCC_ClockConfig+0x214>)
 8009398:	689b      	ldr	r3, [r3, #8]
 800939a:	4a64      	ldr	r2, [pc, #400]	@ (800952c <HAL_RCC_ClockConfig+0x21c>)
 800939c:	4013      	ands	r3, r2
 800939e:	0019      	movs	r1, r3
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	68da      	ldr	r2, [r3, #12]
 80093a4:	4b5f      	ldr	r3, [pc, #380]	@ (8009524 <HAL_RCC_ClockConfig+0x214>)
 80093a6:	430a      	orrs	r2, r1
 80093a8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	2201      	movs	r2, #1
 80093b0:	4013      	ands	r3, r2
 80093b2:	d100      	bne.n	80093b6 <HAL_RCC_ClockConfig+0xa6>
 80093b4:	e061      	b.n	800947a <HAL_RCC_ClockConfig+0x16a>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 80093b6:	4b5b      	ldr	r3, [pc, #364]	@ (8009524 <HAL_RCC_ClockConfig+0x214>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	221c      	movs	r2, #28
 80093bc:	4393      	bics	r3, r2
 80093be:	0019      	movs	r1, r3
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	689a      	ldr	r2, [r3, #8]
 80093c4:	4b57      	ldr	r3, [pc, #348]	@ (8009524 <HAL_RCC_ClockConfig+0x214>)
 80093c6:	430a      	orrs	r2, r1
 80093c8:	601a      	str	r2, [r3, #0]
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	685b      	ldr	r3, [r3, #4]
 80093ce:	2b01      	cmp	r3, #1
 80093d0:	d107      	bne.n	80093e2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80093d2:	4b54      	ldr	r3, [pc, #336]	@ (8009524 <HAL_RCC_ClockConfig+0x214>)
 80093d4:	681a      	ldr	r2, [r3, #0]
 80093d6:	2380      	movs	r3, #128	@ 0x80
 80093d8:	029b      	lsls	r3, r3, #10
 80093da:	4013      	ands	r3, r2
 80093dc:	d12b      	bne.n	8009436 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 80093de:	2301      	movs	r3, #1
 80093e0:	e097      	b.n	8009512 <HAL_RCC_ClockConfig+0x202>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	685b      	ldr	r3, [r3, #4]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d107      	bne.n	80093fa <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80093ea:	4b4e      	ldr	r3, [pc, #312]	@ (8009524 <HAL_RCC_ClockConfig+0x214>)
 80093ec:	681a      	ldr	r2, [r3, #0]
 80093ee:	2380      	movs	r3, #128	@ 0x80
 80093f0:	00db      	lsls	r3, r3, #3
 80093f2:	4013      	ands	r3, r2
 80093f4:	d11f      	bne.n	8009436 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 80093f6:	2301      	movs	r3, #1
 80093f8:	e08b      	b.n	8009512 <HAL_RCC_ClockConfig+0x202>
      }
    }
#if defined(RCC_HSI48_SUPPORT)
    /* HSIUSB48 is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSIUSB48)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	685b      	ldr	r3, [r3, #4]
 80093fe:	2b02      	cmp	r3, #2
 8009400:	d107      	bne.n	8009412 <HAL_RCC_ClockConfig+0x102>
    {
      /* Check the HSIUSB48 ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 8009402:	4b48      	ldr	r3, [pc, #288]	@ (8009524 <HAL_RCC_ClockConfig+0x214>)
 8009404:	681a      	ldr	r2, [r3, #0]
 8009406:	2380      	movs	r3, #128	@ 0x80
 8009408:	041b      	lsls	r3, r3, #16
 800940a:	4013      	ands	r3, r2
 800940c:	d113      	bne.n	8009436 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 800940e:	2301      	movs	r3, #1
 8009410:	e07f      	b.n	8009512 <HAL_RCC_ClockConfig+0x202>
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	685b      	ldr	r3, [r3, #4]
 8009416:	2b03      	cmp	r3, #3
 8009418:	d106      	bne.n	8009428 <HAL_RCC_ClockConfig+0x118>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800941a:	4b42      	ldr	r3, [pc, #264]	@ (8009524 <HAL_RCC_ClockConfig+0x214>)
 800941c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800941e:	2202      	movs	r2, #2
 8009420:	4013      	ands	r3, r2
 8009422:	d108      	bne.n	8009436 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8009424:	2301      	movs	r3, #1
 8009426:	e074      	b.n	8009512 <HAL_RCC_ClockConfig+0x202>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8009428:	4b3e      	ldr	r3, [pc, #248]	@ (8009524 <HAL_RCC_ClockConfig+0x214>)
 800942a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800942c:	2202      	movs	r2, #2
 800942e:	4013      	ands	r3, r2
 8009430:	d101      	bne.n	8009436 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8009432:	2301      	movs	r3, #1
 8009434:	e06d      	b.n	8009512 <HAL_RCC_ClockConfig+0x202>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009436:	4b3b      	ldr	r3, [pc, #236]	@ (8009524 <HAL_RCC_ClockConfig+0x214>)
 8009438:	689b      	ldr	r3, [r3, #8]
 800943a:	2207      	movs	r2, #7
 800943c:	4393      	bics	r3, r2
 800943e:	0019      	movs	r1, r3
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	685a      	ldr	r2, [r3, #4]
 8009444:	4b37      	ldr	r3, [pc, #220]	@ (8009524 <HAL_RCC_ClockConfig+0x214>)
 8009446:	430a      	orrs	r2, r1
 8009448:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800944a:	f7fc fbbb 	bl	8005bc4 <HAL_GetTick>
 800944e:	0003      	movs	r3, r0
 8009450:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009452:	e009      	b.n	8009468 <HAL_RCC_ClockConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8009454:	f7fc fbb6 	bl	8005bc4 <HAL_GetTick>
 8009458:	0002      	movs	r2, r0
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	1ad3      	subs	r3, r2, r3
 800945e:	4a30      	ldr	r2, [pc, #192]	@ (8009520 <HAL_RCC_ClockConfig+0x210>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d901      	bls.n	8009468 <HAL_RCC_ClockConfig+0x158>
      {
        return HAL_TIMEOUT;
 8009464:	2303      	movs	r3, #3
 8009466:	e054      	b.n	8009512 <HAL_RCC_ClockConfig+0x202>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009468:	4b2e      	ldr	r3, [pc, #184]	@ (8009524 <HAL_RCC_ClockConfig+0x214>)
 800946a:	689b      	ldr	r3, [r3, #8]
 800946c:	2238      	movs	r2, #56	@ 0x38
 800946e:	401a      	ands	r2, r3
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	685b      	ldr	r3, [r3, #4]
 8009474:	00db      	lsls	r3, r3, #3
 8009476:	429a      	cmp	r2, r3
 8009478:	d1ec      	bne.n	8009454 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800947a:	4b28      	ldr	r3, [pc, #160]	@ (800951c <HAL_RCC_ClockConfig+0x20c>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	2207      	movs	r2, #7
 8009480:	4013      	ands	r3, r2
 8009482:	683a      	ldr	r2, [r7, #0]
 8009484:	429a      	cmp	r2, r3
 8009486:	d21e      	bcs.n	80094c6 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009488:	4b24      	ldr	r3, [pc, #144]	@ (800951c <HAL_RCC_ClockConfig+0x20c>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	2207      	movs	r2, #7
 800948e:	4393      	bics	r3, r2
 8009490:	0019      	movs	r1, r3
 8009492:	4b22      	ldr	r3, [pc, #136]	@ (800951c <HAL_RCC_ClockConfig+0x20c>)
 8009494:	683a      	ldr	r2, [r7, #0]
 8009496:	430a      	orrs	r2, r1
 8009498:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800949a:	f7fc fb93 	bl	8005bc4 <HAL_GetTick>
 800949e:	0003      	movs	r3, r0
 80094a0:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80094a2:	e009      	b.n	80094b8 <HAL_RCC_ClockConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80094a4:	f7fc fb8e 	bl	8005bc4 <HAL_GetTick>
 80094a8:	0002      	movs	r2, r0
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	1ad3      	subs	r3, r2, r3
 80094ae:	4a1c      	ldr	r2, [pc, #112]	@ (8009520 <HAL_RCC_ClockConfig+0x210>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d901      	bls.n	80094b8 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_TIMEOUT;
 80094b4:	2303      	movs	r3, #3
 80094b6:	e02c      	b.n	8009512 <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80094b8:	4b18      	ldr	r3, [pc, #96]	@ (800951c <HAL_RCC_ClockConfig+0x20c>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	2207      	movs	r2, #7
 80094be:	4013      	ands	r3, r2
 80094c0:	683a      	ldr	r2, [r7, #0]
 80094c2:	429a      	cmp	r2, r3
 80094c4:	d1ee      	bne.n	80094a4 <HAL_RCC_ClockConfig+0x194>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	2204      	movs	r2, #4
 80094cc:	4013      	ands	r3, r2
 80094ce:	d009      	beq.n	80094e4 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80094d0:	4b14      	ldr	r3, [pc, #80]	@ (8009524 <HAL_RCC_ClockConfig+0x214>)
 80094d2:	689b      	ldr	r3, [r3, #8]
 80094d4:	4a16      	ldr	r2, [pc, #88]	@ (8009530 <HAL_RCC_ClockConfig+0x220>)
 80094d6:	4013      	ands	r3, r2
 80094d8:	0019      	movs	r1, r3
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	691a      	ldr	r2, [r3, #16]
 80094de:	4b11      	ldr	r3, [pc, #68]	@ (8009524 <HAL_RCC_ClockConfig+0x214>)
 80094e0:	430a      	orrs	r2, r1
 80094e2:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80094e4:	f000 f82c 	bl	8009540 <HAL_RCC_GetSysClockFreq>
 80094e8:	0001      	movs	r1, r0
 80094ea:	4b0e      	ldr	r3, [pc, #56]	@ (8009524 <HAL_RCC_ClockConfig+0x214>)
 80094ec:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80094ee:	0a1b      	lsrs	r3, r3, #8
 80094f0:	220f      	movs	r2, #15
 80094f2:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80094f4:	4b0f      	ldr	r3, [pc, #60]	@ (8009534 <HAL_RCC_ClockConfig+0x224>)
 80094f6:	0092      	lsls	r2, r2, #2
 80094f8:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80094fa:	221f      	movs	r2, #31
 80094fc:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80094fe:	000a      	movs	r2, r1
 8009500:	40da      	lsrs	r2, r3
 8009502:	4b0d      	ldr	r3, [pc, #52]	@ (8009538 <HAL_RCC_ClockConfig+0x228>)
 8009504:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8009506:	4b0d      	ldr	r3, [pc, #52]	@ (800953c <HAL_RCC_ClockConfig+0x22c>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	0018      	movs	r0, r3
 800950c:	f7fc fafe 	bl	8005b0c <HAL_InitTick>
 8009510:	0003      	movs	r3, r0
}
 8009512:	0018      	movs	r0, r3
 8009514:	46bd      	mov	sp, r7
 8009516:	b004      	add	sp, #16
 8009518:	bd80      	pop	{r7, pc}
 800951a:	46c0      	nop			@ (mov r8, r8)
 800951c:	40022000 	.word	0x40022000
 8009520:	00001388 	.word	0x00001388
 8009524:	40021000 	.word	0x40021000
 8009528:	ffff84ff 	.word	0xffff84ff
 800952c:	fffff0ff 	.word	0xfffff0ff
 8009530:	ffff8fff 	.word	0xffff8fff
 8009534:	0800d5f8 	.word	0x0800d5f8
 8009538:	200000b8 	.word	0x200000b8
 800953c:	200000bc 	.word	0x200000bc

08009540 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b084      	sub	sp, #16
 8009544:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 8009546:	4b27      	ldr	r3, [pc, #156]	@ (80095e4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	089b      	lsrs	r3, r3, #2
 800954c:	2207      	movs	r2, #7
 800954e:	4013      	ands	r3, r2
 8009550:	3301      	adds	r3, #1
 8009552:	60bb      	str	r3, [r7, #8]
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8009554:	4b23      	ldr	r3, [pc, #140]	@ (80095e4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8009556:	689b      	ldr	r3, [r3, #8]
 8009558:	2238      	movs	r2, #56	@ 0x38
 800955a:	4013      	ands	r3, r2
 800955c:	d10f      	bne.n	800957e <HAL_RCC_GetSysClockFreq+0x3e>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800955e:	4b21      	ldr	r3, [pc, #132]	@ (80095e4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	0adb      	lsrs	r3, r3, #11
 8009564:	2207      	movs	r2, #7
 8009566:	4013      	ands	r3, r2
 8009568:	2201      	movs	r2, #1
 800956a:	409a      	lsls	r2, r3
 800956c:	0013      	movs	r3, r2
 800956e:	607b      	str	r3, [r7, #4]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8009570:	6879      	ldr	r1, [r7, #4]
 8009572:	481d      	ldr	r0, [pc, #116]	@ (80095e8 <HAL_RCC_GetSysClockFreq+0xa8>)
 8009574:	f7f6 fdc8 	bl	8000108 <__udivsi3>
 8009578:	0003      	movs	r3, r0
 800957a:	60fb      	str	r3, [r7, #12]
 800957c:	e027      	b.n	80095ce <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800957e:	4b19      	ldr	r3, [pc, #100]	@ (80095e4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8009580:	689b      	ldr	r3, [r3, #8]
 8009582:	2238      	movs	r2, #56	@ 0x38
 8009584:	4013      	ands	r3, r2
 8009586:	2b08      	cmp	r3, #8
 8009588:	d102      	bne.n	8009590 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800958a:	4b18      	ldr	r3, [pc, #96]	@ (80095ec <HAL_RCC_GetSysClockFreq+0xac>)
 800958c:	60fb      	str	r3, [r7, #12]
 800958e:	e01e      	b.n	80095ce <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8009590:	4b14      	ldr	r3, [pc, #80]	@ (80095e4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8009592:	689b      	ldr	r3, [r3, #8]
 8009594:	2238      	movs	r2, #56	@ 0x38
 8009596:	4013      	ands	r3, r2
 8009598:	2b20      	cmp	r3, #32
 800959a:	d103      	bne.n	80095a4 <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800959c:	2380      	movs	r3, #128	@ 0x80
 800959e:	021b      	lsls	r3, r3, #8
 80095a0:	60fb      	str	r3, [r7, #12]
 80095a2:	e014      	b.n	80095ce <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80095a4:	4b0f      	ldr	r3, [pc, #60]	@ (80095e4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80095a6:	689b      	ldr	r3, [r3, #8]
 80095a8:	2238      	movs	r2, #56	@ 0x38
 80095aa:	4013      	ands	r3, r2
 80095ac:	2b18      	cmp	r3, #24
 80095ae:	d103      	bne.n	80095b8 <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80095b0:	23fa      	movs	r3, #250	@ 0xfa
 80095b2:	01db      	lsls	r3, r3, #7
 80095b4:	60fb      	str	r3, [r7, #12]
 80095b6:	e00a      	b.n	80095ce <HAL_RCC_GetSysClockFreq+0x8e>
  }
#if defined(RCC_HSI48_SUPPORT)
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI48)
 80095b8:	4b0a      	ldr	r3, [pc, #40]	@ (80095e4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80095ba:	689b      	ldr	r3, [r3, #8]
 80095bc:	2238      	movs	r2, #56	@ 0x38
 80095be:	4013      	ands	r3, r2
 80095c0:	2b10      	cmp	r3, #16
 80095c2:	d102      	bne.n	80095ca <HAL_RCC_GetSysClockFreq+0x8a>
  {
    /* HSI48 used as system clock source */
    sysclockfreq = HSI48_VALUE;
 80095c4:	4b08      	ldr	r3, [pc, #32]	@ (80095e8 <HAL_RCC_GetSysClockFreq+0xa8>)
 80095c6:	60fb      	str	r3, [r7, #12]
 80095c8:	e001      	b.n	80095ce <HAL_RCC_GetSysClockFreq+0x8e>
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 80095ca:	2300      	movs	r3, #0
 80095cc:	60fb      	str	r3, [r7, #12]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 80095ce:	68b9      	ldr	r1, [r7, #8]
 80095d0:	68f8      	ldr	r0, [r7, #12]
 80095d2:	f7f6 fd99 	bl	8000108 <__udivsi3>
 80095d6:	0003      	movs	r3, r0
 80095d8:	60fb      	str	r3, [r7, #12]
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 80095da:	68fb      	ldr	r3, [r7, #12]
}
 80095dc:	0018      	movs	r0, r3
 80095de:	46bd      	mov	sp, r7
 80095e0:	b004      	add	sp, #16
 80095e2:	bd80      	pop	{r7, pc}
 80095e4:	40021000 	.word	0x40021000
 80095e8:	02dc6c00 	.word	0x02dc6c00
 80095ec:	007a1200 	.word	0x007a1200

080095f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80095f4:	f7ff ffa4 	bl	8009540 <HAL_RCC_GetSysClockFreq>
 80095f8:	0001      	movs	r1, r0
 80095fa:	4b09      	ldr	r3, [pc, #36]	@ (8009620 <HAL_RCC_GetHCLKFreq+0x30>)
 80095fc:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80095fe:	0a1b      	lsrs	r3, r3, #8
 8009600:	220f      	movs	r2, #15
 8009602:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8009604:	4b07      	ldr	r3, [pc, #28]	@ (8009624 <HAL_RCC_GetHCLKFreq+0x34>)
 8009606:	0092      	lsls	r2, r2, #2
 8009608:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800960a:	221f      	movs	r2, #31
 800960c:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800960e:	000a      	movs	r2, r1
 8009610:	40da      	lsrs	r2, r3
 8009612:	4b05      	ldr	r3, [pc, #20]	@ (8009628 <HAL_RCC_GetHCLKFreq+0x38>)
 8009614:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 8009616:	4b04      	ldr	r3, [pc, #16]	@ (8009628 <HAL_RCC_GetHCLKFreq+0x38>)
 8009618:	681b      	ldr	r3, [r3, #0]
}
 800961a:	0018      	movs	r0, r3
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}
 8009620:	40021000 	.word	0x40021000
 8009624:	0800d5f8 	.word	0x0800d5f8
 8009628:	200000b8 	.word	0x200000b8

0800962c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8009630:	f7ff ffde 	bl	80095f0 <HAL_RCC_GetHCLKFreq>
 8009634:	0001      	movs	r1, r0
 8009636:	4b07      	ldr	r3, [pc, #28]	@ (8009654 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009638:	689b      	ldr	r3, [r3, #8]
 800963a:	0b1b      	lsrs	r3, r3, #12
 800963c:	2207      	movs	r2, #7
 800963e:	401a      	ands	r2, r3
 8009640:	4b05      	ldr	r3, [pc, #20]	@ (8009658 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8009642:	0092      	lsls	r2, r2, #2
 8009644:	58d3      	ldr	r3, [r2, r3]
 8009646:	221f      	movs	r2, #31
 8009648:	4013      	ands	r3, r2
 800964a:	40d9      	lsrs	r1, r3
 800964c:	000b      	movs	r3, r1
}
 800964e:	0018      	movs	r0, r3
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}
 8009654:	40021000 	.word	0x40021000
 8009658:	0800d638 	.word	0x0800d638

0800965c <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b086      	sub	sp, #24
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8009664:	2313      	movs	r3, #19
 8009666:	18fb      	adds	r3, r7, r3
 8009668:	2200      	movs	r2, #0
 800966a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800966c:	2312      	movs	r3, #18
 800966e:	18fb      	adds	r3, r7, r3
 8009670:	2200      	movs	r2, #0
 8009672:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	2240      	movs	r2, #64	@ 0x40
 800967a:	4013      	ands	r3, r2
 800967c:	d100      	bne.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0x24>
 800967e:	e079      	b.n	8009774 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009680:	2011      	movs	r0, #17
 8009682:	183b      	adds	r3, r7, r0
 8009684:	2200      	movs	r2, #0
 8009686:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009688:	4b6a      	ldr	r3, [pc, #424]	@ (8009834 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800968a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800968c:	2380      	movs	r3, #128	@ 0x80
 800968e:	055b      	lsls	r3, r3, #21
 8009690:	4013      	ands	r3, r2
 8009692:	d110      	bne.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009694:	4b67      	ldr	r3, [pc, #412]	@ (8009834 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009696:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009698:	4b66      	ldr	r3, [pc, #408]	@ (8009834 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800969a:	2180      	movs	r1, #128	@ 0x80
 800969c:	0549      	lsls	r1, r1, #21
 800969e:	430a      	orrs	r2, r1
 80096a0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80096a2:	4b64      	ldr	r3, [pc, #400]	@ (8009834 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80096a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80096a6:	2380      	movs	r3, #128	@ 0x80
 80096a8:	055b      	lsls	r3, r3, #21
 80096aa:	4013      	ands	r3, r2
 80096ac:	60bb      	str	r3, [r7, #8]
 80096ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80096b0:	183b      	adds	r3, r7, r0
 80096b2:	2201      	movs	r2, #1
 80096b4:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 80096b6:	4b5f      	ldr	r3, [pc, #380]	@ (8009834 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80096b8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80096ba:	23c0      	movs	r3, #192	@ 0xc0
 80096bc:	009b      	lsls	r3, r3, #2
 80096be:	4013      	ands	r3, r2
 80096c0:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80096c2:	697b      	ldr	r3, [r7, #20]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d019      	beq.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	69db      	ldr	r3, [r3, #28]
 80096cc:	697a      	ldr	r2, [r7, #20]
 80096ce:	429a      	cmp	r2, r3
 80096d0:	d014      	beq.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 80096d2:	4b58      	ldr	r3, [pc, #352]	@ (8009834 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80096d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80096d6:	4a58      	ldr	r2, [pc, #352]	@ (8009838 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80096d8:	4013      	ands	r3, r2
 80096da:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80096dc:	4b55      	ldr	r3, [pc, #340]	@ (8009834 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80096de:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80096e0:	4b54      	ldr	r3, [pc, #336]	@ (8009834 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80096e2:	2180      	movs	r1, #128	@ 0x80
 80096e4:	0249      	lsls	r1, r1, #9
 80096e6:	430a      	orrs	r2, r1
 80096e8:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 80096ea:	4b52      	ldr	r3, [pc, #328]	@ (8009834 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80096ec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80096ee:	4b51      	ldr	r3, [pc, #324]	@ (8009834 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80096f0:	4952      	ldr	r1, [pc, #328]	@ (800983c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80096f2:	400a      	ands	r2, r1
 80096f4:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 80096f6:	4b4f      	ldr	r3, [pc, #316]	@ (8009834 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80096f8:	697a      	ldr	r2, [r7, #20]
 80096fa:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	2201      	movs	r2, #1
 8009700:	4013      	ands	r3, r2
 8009702:	d016      	beq.n	8009732 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009704:	f7fc fa5e 	bl	8005bc4 <HAL_GetTick>
 8009708:	0003      	movs	r3, r0
 800970a:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800970c:	e00c      	b.n	8009728 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800970e:	f7fc fa59 	bl	8005bc4 <HAL_GetTick>
 8009712:	0002      	movs	r2, r0
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	1ad3      	subs	r3, r2, r3
 8009718:	4a49      	ldr	r2, [pc, #292]	@ (8009840 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d904      	bls.n	8009728 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 800971e:	2313      	movs	r3, #19
 8009720:	18fb      	adds	r3, r7, r3
 8009722:	2203      	movs	r2, #3
 8009724:	701a      	strb	r2, [r3, #0]
          break;
 8009726:	e004      	b.n	8009732 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8009728:	4b42      	ldr	r3, [pc, #264]	@ (8009834 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800972a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800972c:	2202      	movs	r2, #2
 800972e:	4013      	ands	r3, r2
 8009730:	d0ed      	beq.n	800970e <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 8009732:	2313      	movs	r3, #19
 8009734:	18fb      	adds	r3, r7, r3
 8009736:	781b      	ldrb	r3, [r3, #0]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d10a      	bne.n	8009752 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800973c:	4b3d      	ldr	r3, [pc, #244]	@ (8009834 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800973e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009740:	4a3d      	ldr	r2, [pc, #244]	@ (8009838 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8009742:	4013      	ands	r3, r2
 8009744:	0019      	movs	r1, r3
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	69da      	ldr	r2, [r3, #28]
 800974a:	4b3a      	ldr	r3, [pc, #232]	@ (8009834 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800974c:	430a      	orrs	r2, r1
 800974e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009750:	e005      	b.n	800975e <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009752:	2312      	movs	r3, #18
 8009754:	18fb      	adds	r3, r7, r3
 8009756:	2213      	movs	r2, #19
 8009758:	18ba      	adds	r2, r7, r2
 800975a:	7812      	ldrb	r2, [r2, #0]
 800975c:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800975e:	2311      	movs	r3, #17
 8009760:	18fb      	adds	r3, r7, r3
 8009762:	781b      	ldrb	r3, [r3, #0]
 8009764:	2b01      	cmp	r3, #1
 8009766:	d105      	bne.n	8009774 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009768:	4b32      	ldr	r3, [pc, #200]	@ (8009834 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800976a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800976c:	4b31      	ldr	r3, [pc, #196]	@ (8009834 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800976e:	4935      	ldr	r1, [pc, #212]	@ (8009844 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8009770:	400a      	ands	r2, r1
 8009772:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	2201      	movs	r2, #1
 800977a:	4013      	ands	r3, r2
 800977c:	d009      	beq.n	8009792 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800977e:	4b2d      	ldr	r3, [pc, #180]	@ (8009834 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009780:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009782:	2203      	movs	r2, #3
 8009784:	4393      	bics	r3, r2
 8009786:	0019      	movs	r1, r3
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	689a      	ldr	r2, [r3, #8]
 800978c:	4b29      	ldr	r3, [pc, #164]	@ (8009834 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800978e:	430a      	orrs	r2, r1
 8009790:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	2202      	movs	r2, #2
 8009798:	4013      	ands	r3, r2
 800979a:	d009      	beq.n	80097b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800979c:	4b25      	ldr	r3, [pc, #148]	@ (8009834 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800979e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097a0:	4a29      	ldr	r2, [pc, #164]	@ (8009848 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80097a2:	4013      	ands	r3, r2
 80097a4:	0019      	movs	r1, r3
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	68da      	ldr	r2, [r3, #12]
 80097aa:	4b22      	ldr	r3, [pc, #136]	@ (8009834 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80097ac:	430a      	orrs	r2, r1
 80097ae:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	2220      	movs	r2, #32
 80097b6:	4013      	ands	r3, r2
 80097b8:	d008      	beq.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80097ba:	4b1e      	ldr	r3, [pc, #120]	@ (8009834 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80097bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097be:	009b      	lsls	r3, r3, #2
 80097c0:	0899      	lsrs	r1, r3, #2
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	699a      	ldr	r2, [r3, #24]
 80097c6:	4b1b      	ldr	r3, [pc, #108]	@ (8009834 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80097c8:	430a      	orrs	r2, r1
 80097ca:	655a      	str	r2, [r3, #84]	@ 0x54

  }
#if defined (USB_DRD_FS)
  /*-------------------------- USB clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	2208      	movs	r2, #8
 80097d2:	4013      	ands	r3, r2
 80097d4:	d009      	beq.n	80097ea <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80097d6:	4b17      	ldr	r3, [pc, #92]	@ (8009834 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80097d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097da:	4a1c      	ldr	r2, [pc, #112]	@ (800984c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80097dc:	4013      	ands	r3, r2
 80097de:	0019      	movs	r1, r3
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	695a      	ldr	r2, [r3, #20]
 80097e4:	4b13      	ldr	r3, [pc, #76]	@ (8009834 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80097e6:	430a      	orrs	r2, r1
 80097e8:	659a      	str	r2, [r3, #88]	@ 0x58

  }
#endif /* USB_DRD_FS */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	2204      	movs	r2, #4
 80097f0:	4013      	ands	r3, r2
 80097f2:	d009      	beq.n	8009808 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80097f4:	4b0f      	ldr	r3, [pc, #60]	@ (8009834 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80097f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097f8:	4a15      	ldr	r2, [pc, #84]	@ (8009850 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80097fa:	4013      	ands	r3, r2
 80097fc:	0019      	movs	r1, r3
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	691a      	ldr	r2, [r3, #16]
 8009802:	4b0c      	ldr	r3, [pc, #48]	@ (8009834 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009804:	430a      	orrs	r2, r1
 8009806:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	2280      	movs	r2, #128	@ 0x80
 800980e:	4013      	ands	r3, r2
 8009810:	d009      	beq.n	8009826 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8009812:	4b08      	ldr	r3, [pc, #32]	@ (8009834 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	22e0      	movs	r2, #224	@ 0xe0
 8009818:	4393      	bics	r3, r2
 800981a:	0019      	movs	r1, r3
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	685a      	ldr	r2, [r3, #4]
 8009820:	4b04      	ldr	r3, [pc, #16]	@ (8009834 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009822:	430a      	orrs	r2, r1
 8009824:	601a      	str	r2, [r3, #0]
  }
  return status;
 8009826:	2312      	movs	r3, #18
 8009828:	18fb      	adds	r3, r7, r3
 800982a:	781b      	ldrb	r3, [r3, #0]
}
 800982c:	0018      	movs	r0, r3
 800982e:	46bd      	mov	sp, r7
 8009830:	b006      	add	sp, #24
 8009832:	bd80      	pop	{r7, pc}
 8009834:	40021000 	.word	0x40021000
 8009838:	fffffcff 	.word	0xfffffcff
 800983c:	fffeffff 	.word	0xfffeffff
 8009840:	00001388 	.word	0x00001388
 8009844:	efffffff 	.word	0xefffffff
 8009848:	ffffcfff 	.word	0xffffcfff
 800984c:	ffffefff 	.word	0xffffefff
 8009850:	ffff3fff 	.word	0xffff3fff

08009854 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b084      	sub	sp, #16
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d101      	bne.n	8009866 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009862:	2301      	movs	r3, #1
 8009864:	e0a8      	b.n	80099b8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800986a:	2b00      	cmp	r3, #0
 800986c:	d109      	bne.n	8009882 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	685a      	ldr	r2, [r3, #4]
 8009872:	2382      	movs	r3, #130	@ 0x82
 8009874:	005b      	lsls	r3, r3, #1
 8009876:	429a      	cmp	r2, r3
 8009878:	d009      	beq.n	800988e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2200      	movs	r2, #0
 800987e:	61da      	str	r2, [r3, #28]
 8009880:	e005      	b.n	800988e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2200      	movs	r2, #0
 8009886:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2200      	movs	r2, #0
 800988c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2200      	movs	r2, #0
 8009892:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	225d      	movs	r2, #93	@ 0x5d
 8009898:	5c9b      	ldrb	r3, [r3, r2]
 800989a:	b2db      	uxtb	r3, r3
 800989c:	2b00      	cmp	r3, #0
 800989e:	d107      	bne.n	80098b0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	225c      	movs	r2, #92	@ 0x5c
 80098a4:	2100      	movs	r1, #0
 80098a6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	0018      	movs	r0, r3
 80098ac:	f7fb fd3e 	bl	800532c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	225d      	movs	r2, #93	@ 0x5d
 80098b4:	2102      	movs	r1, #2
 80098b6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	681a      	ldr	r2, [r3, #0]
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	2140      	movs	r1, #64	@ 0x40
 80098c4:	438a      	bics	r2, r1
 80098c6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	68da      	ldr	r2, [r3, #12]
 80098cc:	23e0      	movs	r3, #224	@ 0xe0
 80098ce:	00db      	lsls	r3, r3, #3
 80098d0:	429a      	cmp	r2, r3
 80098d2:	d902      	bls.n	80098da <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80098d4:	2300      	movs	r3, #0
 80098d6:	60fb      	str	r3, [r7, #12]
 80098d8:	e002      	b.n	80098e0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80098da:	2380      	movs	r3, #128	@ 0x80
 80098dc:	015b      	lsls	r3, r3, #5
 80098de:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	68da      	ldr	r2, [r3, #12]
 80098e4:	23f0      	movs	r3, #240	@ 0xf0
 80098e6:	011b      	lsls	r3, r3, #4
 80098e8:	429a      	cmp	r2, r3
 80098ea:	d008      	beq.n	80098fe <HAL_SPI_Init+0xaa>
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	68da      	ldr	r2, [r3, #12]
 80098f0:	23e0      	movs	r3, #224	@ 0xe0
 80098f2:	00db      	lsls	r3, r3, #3
 80098f4:	429a      	cmp	r2, r3
 80098f6:	d002      	beq.n	80098fe <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2200      	movs	r2, #0
 80098fc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	685a      	ldr	r2, [r3, #4]
 8009902:	2382      	movs	r3, #130	@ 0x82
 8009904:	005b      	lsls	r3, r3, #1
 8009906:	401a      	ands	r2, r3
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6899      	ldr	r1, [r3, #8]
 800990c:	2384      	movs	r3, #132	@ 0x84
 800990e:	021b      	lsls	r3, r3, #8
 8009910:	400b      	ands	r3, r1
 8009912:	431a      	orrs	r2, r3
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	691b      	ldr	r3, [r3, #16]
 8009918:	2102      	movs	r1, #2
 800991a:	400b      	ands	r3, r1
 800991c:	431a      	orrs	r2, r3
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	695b      	ldr	r3, [r3, #20]
 8009922:	2101      	movs	r1, #1
 8009924:	400b      	ands	r3, r1
 8009926:	431a      	orrs	r2, r3
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	6999      	ldr	r1, [r3, #24]
 800992c:	2380      	movs	r3, #128	@ 0x80
 800992e:	009b      	lsls	r3, r3, #2
 8009930:	400b      	ands	r3, r1
 8009932:	431a      	orrs	r2, r3
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	69db      	ldr	r3, [r3, #28]
 8009938:	2138      	movs	r1, #56	@ 0x38
 800993a:	400b      	ands	r3, r1
 800993c:	431a      	orrs	r2, r3
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6a1b      	ldr	r3, [r3, #32]
 8009942:	2180      	movs	r1, #128	@ 0x80
 8009944:	400b      	ands	r3, r1
 8009946:	431a      	orrs	r2, r3
 8009948:	0011      	movs	r1, r2
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800994e:	2380      	movs	r3, #128	@ 0x80
 8009950:	019b      	lsls	r3, r3, #6
 8009952:	401a      	ands	r2, r3
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	430a      	orrs	r2, r1
 800995a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	699b      	ldr	r3, [r3, #24]
 8009960:	0c1b      	lsrs	r3, r3, #16
 8009962:	2204      	movs	r2, #4
 8009964:	401a      	ands	r2, r3
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800996a:	2110      	movs	r1, #16
 800996c:	400b      	ands	r3, r1
 800996e:	431a      	orrs	r2, r3
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009974:	2108      	movs	r1, #8
 8009976:	400b      	ands	r3, r1
 8009978:	431a      	orrs	r2, r3
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	68d9      	ldr	r1, [r3, #12]
 800997e:	23f0      	movs	r3, #240	@ 0xf0
 8009980:	011b      	lsls	r3, r3, #4
 8009982:	400b      	ands	r3, r1
 8009984:	431a      	orrs	r2, r3
 8009986:	0011      	movs	r1, r2
 8009988:	68fa      	ldr	r2, [r7, #12]
 800998a:	2380      	movs	r3, #128	@ 0x80
 800998c:	015b      	lsls	r3, r3, #5
 800998e:	401a      	ands	r2, r3
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	430a      	orrs	r2, r1
 8009996:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	69da      	ldr	r2, [r3, #28]
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	4907      	ldr	r1, [pc, #28]	@ (80099c0 <HAL_SPI_Init+0x16c>)
 80099a4:	400a      	ands	r2, r1
 80099a6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2200      	movs	r2, #0
 80099ac:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	225d      	movs	r2, #93	@ 0x5d
 80099b2:	2101      	movs	r1, #1
 80099b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80099b6:	2300      	movs	r3, #0
}
 80099b8:	0018      	movs	r0, r3
 80099ba:	46bd      	mov	sp, r7
 80099bc:	b004      	add	sp, #16
 80099be:	bd80      	pop	{r7, pc}
 80099c0:	fffff7ff 	.word	0xfffff7ff

080099c4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b08a      	sub	sp, #40	@ 0x28
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	60f8      	str	r0, [r7, #12]
 80099cc:	60b9      	str	r1, [r7, #8]
 80099ce:	607a      	str	r2, [r7, #4]
 80099d0:	001a      	movs	r2, r3
 80099d2:	1cbb      	adds	r3, r7, #2
 80099d4:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80099d6:	2301      	movs	r3, #1
 80099d8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80099da:	f7fc f8f3 	bl	8005bc4 <HAL_GetTick>
 80099de:	0003      	movs	r3, r0
 80099e0:	623b      	str	r3, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80099e2:	201f      	movs	r0, #31
 80099e4:	183b      	adds	r3, r7, r0
 80099e6:	68fa      	ldr	r2, [r7, #12]
 80099e8:	215d      	movs	r1, #93	@ 0x5d
 80099ea:	5c52      	ldrb	r2, [r2, r1]
 80099ec:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	685b      	ldr	r3, [r3, #4]
 80099f2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80099f4:	2316      	movs	r3, #22
 80099f6:	18fb      	adds	r3, r7, r3
 80099f8:	1cba      	adds	r2, r7, #2
 80099fa:	8812      	ldrh	r2, [r2, #0]
 80099fc:	801a      	strh	r2, [r3, #0]
  initial_RxXferCount = Size;
 80099fe:	2314      	movs	r3, #20
 8009a00:	18fb      	adds	r3, r7, r3
 8009a02:	1cba      	adds	r2, r7, #2
 8009a04:	8812      	ldrh	r2, [r2, #0]
 8009a06:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009a08:	183b      	adds	r3, r7, r0
 8009a0a:	781b      	ldrb	r3, [r3, #0]
 8009a0c:	2b01      	cmp	r3, #1
 8009a0e:	d00e      	beq.n	8009a2e <HAL_SPI_TransmitReceive+0x6a>
 8009a10:	69ba      	ldr	r2, [r7, #24]
 8009a12:	2382      	movs	r3, #130	@ 0x82
 8009a14:	005b      	lsls	r3, r3, #1
 8009a16:	429a      	cmp	r2, r3
 8009a18:	d107      	bne.n	8009a2a <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	689b      	ldr	r3, [r3, #8]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d103      	bne.n	8009a2a <HAL_SPI_TransmitReceive+0x66>
 8009a22:	183b      	adds	r3, r7, r0
 8009a24:	781b      	ldrb	r3, [r3, #0]
 8009a26:	2b04      	cmp	r3, #4
 8009a28:	d001      	beq.n	8009a2e <HAL_SPI_TransmitReceive+0x6a>
  {
    return HAL_BUSY;
 8009a2a:	2302      	movs	r3, #2
 8009a2c:	e203      	b.n	8009e36 <HAL_SPI_TransmitReceive+0x472>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d006      	beq.n	8009a42 <HAL_SPI_TransmitReceive+0x7e>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d003      	beq.n	8009a42 <HAL_SPI_TransmitReceive+0x7e>
 8009a3a:	1cbb      	adds	r3, r7, #2
 8009a3c:	881b      	ldrh	r3, [r3, #0]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d101      	bne.n	8009a46 <HAL_SPI_TransmitReceive+0x82>
  {
    return HAL_ERROR;
 8009a42:	2301      	movs	r3, #1
 8009a44:	e1f7      	b.n	8009e36 <HAL_SPI_TransmitReceive+0x472>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	225c      	movs	r2, #92	@ 0x5c
 8009a4a:	5c9b      	ldrb	r3, [r3, r2]
 8009a4c:	2b01      	cmp	r3, #1
 8009a4e:	d101      	bne.n	8009a54 <HAL_SPI_TransmitReceive+0x90>
 8009a50:	2302      	movs	r3, #2
 8009a52:	e1f0      	b.n	8009e36 <HAL_SPI_TransmitReceive+0x472>
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	225c      	movs	r2, #92	@ 0x5c
 8009a58:	2101      	movs	r1, #1
 8009a5a:	5499      	strb	r1, [r3, r2]

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	225d      	movs	r2, #93	@ 0x5d
 8009a60:	5c9b      	ldrb	r3, [r3, r2]
 8009a62:	b2db      	uxtb	r3, r3
 8009a64:	2b04      	cmp	r3, #4
 8009a66:	d003      	beq.n	8009a70 <HAL_SPI_TransmitReceive+0xac>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	225d      	movs	r2, #93	@ 0x5d
 8009a6c:	2105      	movs	r1, #5
 8009a6e:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	2200      	movs	r2, #0
 8009a74:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	687a      	ldr	r2, [r7, #4]
 8009a7a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	1cba      	adds	r2, r7, #2
 8009a80:	2146      	movs	r1, #70	@ 0x46
 8009a82:	8812      	ldrh	r2, [r2, #0]
 8009a84:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	1cba      	adds	r2, r7, #2
 8009a8a:	2144      	movs	r1, #68	@ 0x44
 8009a8c:	8812      	ldrh	r2, [r2, #0]
 8009a8e:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	68ba      	ldr	r2, [r7, #8]
 8009a94:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	1cba      	adds	r2, r7, #2
 8009a9a:	8812      	ldrh	r2, [r2, #0]
 8009a9c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	1cba      	adds	r2, r7, #2
 8009aa2:	8812      	ldrh	r2, [r2, #0]
 8009aa4:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	2200      	movs	r2, #0
 8009ab0:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	68da      	ldr	r2, [r3, #12]
 8009ab6:	23e0      	movs	r3, #224	@ 0xe0
 8009ab8:	00db      	lsls	r3, r3, #3
 8009aba:	429a      	cmp	r2, r3
 8009abc:	d804      	bhi.n	8009ac8 <HAL_SPI_TransmitReceive+0x104>
 8009abe:	2314      	movs	r3, #20
 8009ac0:	18fb      	adds	r3, r7, r3
 8009ac2:	881b      	ldrh	r3, [r3, #0]
 8009ac4:	2b01      	cmp	r3, #1
 8009ac6:	d908      	bls.n	8009ada <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	685a      	ldr	r2, [r3, #4]
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	49c1      	ldr	r1, [pc, #772]	@ (8009dd8 <HAL_SPI_TransmitReceive+0x414>)
 8009ad4:	400a      	ands	r2, r1
 8009ad6:	605a      	str	r2, [r3, #4]
 8009ad8:	e008      	b.n	8009aec <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	685a      	ldr	r2, [r3, #4]
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	2180      	movs	r1, #128	@ 0x80
 8009ae6:	0149      	lsls	r1, r1, #5
 8009ae8:	430a      	orrs	r2, r1
 8009aea:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	2240      	movs	r2, #64	@ 0x40
 8009af4:	4013      	ands	r3, r2
 8009af6:	2b40      	cmp	r3, #64	@ 0x40
 8009af8:	d007      	beq.n	8009b0a <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	681a      	ldr	r2, [r3, #0]
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	2140      	movs	r1, #64	@ 0x40
 8009b06:	430a      	orrs	r2, r1
 8009b08:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	68da      	ldr	r2, [r3, #12]
 8009b0e:	23e0      	movs	r3, #224	@ 0xe0
 8009b10:	00db      	lsls	r3, r3, #3
 8009b12:	429a      	cmp	r2, r3
 8009b14:	d800      	bhi.n	8009b18 <HAL_SPI_TransmitReceive+0x154>
 8009b16:	e084      	b.n	8009c22 <HAL_SPI_TransmitReceive+0x25e>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	685b      	ldr	r3, [r3, #4]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d005      	beq.n	8009b2c <HAL_SPI_TransmitReceive+0x168>
 8009b20:	2316      	movs	r3, #22
 8009b22:	18fb      	adds	r3, r7, r3
 8009b24:	881b      	ldrh	r3, [r3, #0]
 8009b26:	2b01      	cmp	r3, #1
 8009b28:	d000      	beq.n	8009b2c <HAL_SPI_TransmitReceive+0x168>
 8009b2a:	e06e      	b.n	8009c0a <HAL_SPI_TransmitReceive+0x246>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b30:	881a      	ldrh	r2, [r3, #0]
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b3c:	1c9a      	adds	r2, r3, #2
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009b46:	b29b      	uxth	r3, r3
 8009b48:	3b01      	subs	r3, #1
 8009b4a:	b29a      	uxth	r2, r3
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009b50:	e05b      	b.n	8009c0a <HAL_SPI_TransmitReceive+0x246>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	689b      	ldr	r3, [r3, #8]
 8009b58:	2202      	movs	r2, #2
 8009b5a:	4013      	ands	r3, r2
 8009b5c:	2b02      	cmp	r3, #2
 8009b5e:	d11b      	bne.n	8009b98 <HAL_SPI_TransmitReceive+0x1d4>
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009b64:	b29b      	uxth	r3, r3
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d016      	beq.n	8009b98 <HAL_SPI_TransmitReceive+0x1d4>
 8009b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b6c:	2b01      	cmp	r3, #1
 8009b6e:	d113      	bne.n	8009b98 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b74:	881a      	ldrh	r2, [r3, #0]
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b80:	1c9a      	adds	r2, r3, #2
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009b8a:	b29b      	uxth	r3, r3
 8009b8c:	3b01      	subs	r3, #1
 8009b8e:	b29a      	uxth	r2, r3
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009b94:	2300      	movs	r3, #0
 8009b96:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	689b      	ldr	r3, [r3, #8]
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	4013      	ands	r3, r2
 8009ba2:	2b01      	cmp	r3, #1
 8009ba4:	d11c      	bne.n	8009be0 <HAL_SPI_TransmitReceive+0x21c>
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	2246      	movs	r2, #70	@ 0x46
 8009baa:	5a9b      	ldrh	r3, [r3, r2]
 8009bac:	b29b      	uxth	r3, r3
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d016      	beq.n	8009be0 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	68da      	ldr	r2, [r3, #12]
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bbc:	b292      	uxth	r2, r2
 8009bbe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bc4:	1c9a      	adds	r2, r3, #2
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	2246      	movs	r2, #70	@ 0x46
 8009bce:	5a9b      	ldrh	r3, [r3, r2]
 8009bd0:	b29b      	uxth	r3, r3
 8009bd2:	3b01      	subs	r3, #1
 8009bd4:	b299      	uxth	r1, r3
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	2246      	movs	r2, #70	@ 0x46
 8009bda:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009bdc:	2301      	movs	r3, #1
 8009bde:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009be0:	f7fb fff0 	bl	8005bc4 <HAL_GetTick>
 8009be4:	0002      	movs	r2, r0
 8009be6:	6a3b      	ldr	r3, [r7, #32]
 8009be8:	1ad3      	subs	r3, r2, r3
 8009bea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009bec:	429a      	cmp	r2, r3
 8009bee:	d80c      	bhi.n	8009c0a <HAL_SPI_TransmitReceive+0x246>
 8009bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bf2:	3301      	adds	r3, #1
 8009bf4:	d009      	beq.n	8009c0a <HAL_SPI_TransmitReceive+0x246>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	225d      	movs	r2, #93	@ 0x5d
 8009bfa:	2101      	movs	r1, #1
 8009bfc:	5499      	strb	r1, [r3, r2]
        __HAL_UNLOCK(hspi);
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	225c      	movs	r2, #92	@ 0x5c
 8009c02:	2100      	movs	r1, #0
 8009c04:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8009c06:	2303      	movs	r3, #3
 8009c08:	e115      	b.n	8009e36 <HAL_SPI_TransmitReceive+0x472>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009c0e:	b29b      	uxth	r3, r3
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d19e      	bne.n	8009b52 <HAL_SPI_TransmitReceive+0x18e>
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	2246      	movs	r2, #70	@ 0x46
 8009c18:	5a9b      	ldrh	r3, [r3, r2]
 8009c1a:	b29b      	uxth	r3, r3
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d198      	bne.n	8009b52 <HAL_SPI_TransmitReceive+0x18e>
 8009c20:	e0e9      	b.n	8009df6 <HAL_SPI_TransmitReceive+0x432>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	685b      	ldr	r3, [r3, #4]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d005      	beq.n	8009c36 <HAL_SPI_TransmitReceive+0x272>
 8009c2a:	2316      	movs	r3, #22
 8009c2c:	18fb      	adds	r3, r7, r3
 8009c2e:	881b      	ldrh	r3, [r3, #0]
 8009c30:	2b01      	cmp	r3, #1
 8009c32:	d000      	beq.n	8009c36 <HAL_SPI_TransmitReceive+0x272>
 8009c34:	e0d2      	b.n	8009ddc <HAL_SPI_TransmitReceive+0x418>
    {
      if (hspi->TxXferCount > 1U)
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009c3a:	b29b      	uxth	r3, r3
 8009c3c:	2b01      	cmp	r3, #1
 8009c3e:	d912      	bls.n	8009c66 <HAL_SPI_TransmitReceive+0x2a2>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c44:	881a      	ldrh	r2, [r3, #0]
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c50:	1c9a      	adds	r2, r3, #2
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009c5a:	b29b      	uxth	r3, r3
 8009c5c:	3b02      	subs	r3, #2
 8009c5e:	b29a      	uxth	r2, r3
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009c64:	e0ba      	b.n	8009ddc <HAL_SPI_TransmitReceive+0x418>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	330c      	adds	r3, #12
 8009c70:	7812      	ldrb	r2, [r2, #0]
 8009c72:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c78:	1c5a      	adds	r2, r3, #1
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009c82:	b29b      	uxth	r3, r3
 8009c84:	3b01      	subs	r3, #1
 8009c86:	b29a      	uxth	r2, r3
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009c8c:	e0a6      	b.n	8009ddc <HAL_SPI_TransmitReceive+0x418>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	689b      	ldr	r3, [r3, #8]
 8009c94:	2202      	movs	r2, #2
 8009c96:	4013      	ands	r3, r2
 8009c98:	2b02      	cmp	r3, #2
 8009c9a:	d134      	bne.n	8009d06 <HAL_SPI_TransmitReceive+0x342>
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009ca0:	b29b      	uxth	r3, r3
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d02f      	beq.n	8009d06 <HAL_SPI_TransmitReceive+0x342>
 8009ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ca8:	2b01      	cmp	r3, #1
 8009caa:	d12c      	bne.n	8009d06 <HAL_SPI_TransmitReceive+0x342>
      {
        if (hspi->TxXferCount > 1U)
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009cb0:	b29b      	uxth	r3, r3
 8009cb2:	2b01      	cmp	r3, #1
 8009cb4:	d912      	bls.n	8009cdc <HAL_SPI_TransmitReceive+0x318>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cba:	881a      	ldrh	r2, [r3, #0]
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cc6:	1c9a      	adds	r2, r3, #2
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009cd0:	b29b      	uxth	r3, r3
 8009cd2:	3b02      	subs	r3, #2
 8009cd4:	b29a      	uxth	r2, r3
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009cda:	e012      	b.n	8009d02 <HAL_SPI_TransmitReceive+0x33e>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	330c      	adds	r3, #12
 8009ce6:	7812      	ldrb	r2, [r2, #0]
 8009ce8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cee:	1c5a      	adds	r2, r3, #1
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009cf8:	b29b      	uxth	r3, r3
 8009cfa:	3b01      	subs	r3, #1
 8009cfc:	b29a      	uxth	r2, r3
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009d02:	2300      	movs	r3, #0
 8009d04:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	689b      	ldr	r3, [r3, #8]
 8009d0c:	2201      	movs	r2, #1
 8009d0e:	4013      	ands	r3, r2
 8009d10:	2b01      	cmp	r3, #1
 8009d12:	d149      	bne.n	8009da8 <HAL_SPI_TransmitReceive+0x3e4>
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	2246      	movs	r2, #70	@ 0x46
 8009d18:	5a9b      	ldrh	r3, [r3, r2]
 8009d1a:	b29b      	uxth	r3, r3
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d043      	beq.n	8009da8 <HAL_SPI_TransmitReceive+0x3e4>
      {
        if (hspi->RxXferCount > 1U)
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	2246      	movs	r2, #70	@ 0x46
 8009d24:	5a9b      	ldrh	r3, [r3, r2]
 8009d26:	b29b      	uxth	r3, r3
 8009d28:	2b01      	cmp	r3, #1
 8009d2a:	d924      	bls.n	8009d76 <HAL_SPI_TransmitReceive+0x3b2>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	68da      	ldr	r2, [r3, #12]
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d36:	b292      	uxth	r2, r2
 8009d38:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d3e:	1c9a      	adds	r2, r3, #2
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	2246      	movs	r2, #70	@ 0x46
 8009d48:	5a9b      	ldrh	r3, [r3, r2]
 8009d4a:	b29b      	uxth	r3, r3
 8009d4c:	3b02      	subs	r3, #2
 8009d4e:	b299      	uxth	r1, r3
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	2246      	movs	r2, #70	@ 0x46
 8009d54:	5299      	strh	r1, [r3, r2]
          if (hspi->RxXferCount <= 1U)
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	2246      	movs	r2, #70	@ 0x46
 8009d5a:	5a9b      	ldrh	r3, [r3, r2]
 8009d5c:	b29b      	uxth	r3, r3
 8009d5e:	2b01      	cmp	r3, #1
 8009d60:	d820      	bhi.n	8009da4 <HAL_SPI_TransmitReceive+0x3e0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	685a      	ldr	r2, [r3, #4]
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	2180      	movs	r1, #128	@ 0x80
 8009d6e:	0149      	lsls	r1, r1, #5
 8009d70:	430a      	orrs	r2, r1
 8009d72:	605a      	str	r2, [r3, #4]
 8009d74:	e016      	b.n	8009da4 <HAL_SPI_TransmitReceive+0x3e0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	330c      	adds	r3, #12
 8009d7c:	001a      	movs	r2, r3
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d82:	7812      	ldrb	r2, [r2, #0]
 8009d84:	b2d2      	uxtb	r2, r2
 8009d86:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d8c:	1c5a      	adds	r2, r3, #1
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	2246      	movs	r2, #70	@ 0x46
 8009d96:	5a9b      	ldrh	r3, [r3, r2]
 8009d98:	b29b      	uxth	r3, r3
 8009d9a:	3b01      	subs	r3, #1
 8009d9c:	b299      	uxth	r1, r3
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	2246      	movs	r2, #70	@ 0x46
 8009da2:	5299      	strh	r1, [r3, r2]
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009da4:	2301      	movs	r3, #1
 8009da6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009da8:	f7fb ff0c 	bl	8005bc4 <HAL_GetTick>
 8009dac:	0002      	movs	r2, r0
 8009dae:	6a3b      	ldr	r3, [r7, #32]
 8009db0:	1ad3      	subs	r3, r2, r3
 8009db2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009db4:	429a      	cmp	r2, r3
 8009db6:	d802      	bhi.n	8009dbe <HAL_SPI_TransmitReceive+0x3fa>
 8009db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dba:	3301      	adds	r3, #1
 8009dbc:	d102      	bne.n	8009dc4 <HAL_SPI_TransmitReceive+0x400>
 8009dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d10b      	bne.n	8009ddc <HAL_SPI_TransmitReceive+0x418>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	225d      	movs	r2, #93	@ 0x5d
 8009dc8:	2101      	movs	r1, #1
 8009dca:	5499      	strb	r1, [r3, r2]
        __HAL_UNLOCK(hspi);
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	225c      	movs	r2, #92	@ 0x5c
 8009dd0:	2100      	movs	r1, #0
 8009dd2:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8009dd4:	2303      	movs	r3, #3
 8009dd6:	e02e      	b.n	8009e36 <HAL_SPI_TransmitReceive+0x472>
 8009dd8:	ffffefff 	.word	0xffffefff
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009de0:	b29b      	uxth	r3, r3
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d000      	beq.n	8009de8 <HAL_SPI_TransmitReceive+0x424>
 8009de6:	e752      	b.n	8009c8e <HAL_SPI_TransmitReceive+0x2ca>
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	2246      	movs	r2, #70	@ 0x46
 8009dec:	5a9b      	ldrh	r3, [r3, r2]
 8009dee:	b29b      	uxth	r3, r3
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d000      	beq.n	8009df6 <HAL_SPI_TransmitReceive+0x432>
 8009df4:	e74b      	b.n	8009c8e <HAL_SPI_TransmitReceive+0x2ca>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009df6:	6a3a      	ldr	r2, [r7, #32]
 8009df8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	0018      	movs	r0, r3
 8009dfe:	f000 f94f 	bl	800a0a0 <SPI_EndRxTxTransaction>
 8009e02:	1e03      	subs	r3, r0, #0
 8009e04:	d008      	beq.n	8009e18 <HAL_SPI_TransmitReceive+0x454>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	2220      	movs	r2, #32
 8009e0a:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	225c      	movs	r2, #92	@ 0x5c
 8009e10:	2100      	movs	r1, #0
 8009e12:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8009e14:	2301      	movs	r3, #1
 8009e16:	e00e      	b.n	8009e36 <HAL_SPI_TransmitReceive+0x472>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	225d      	movs	r2, #93	@ 0x5d
 8009e1c:	2101      	movs	r1, #1
 8009e1e:	5499      	strb	r1, [r3, r2]
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	225c      	movs	r2, #92	@ 0x5c
 8009e24:	2100      	movs	r1, #0
 8009e26:	5499      	strb	r1, [r3, r2]

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d001      	beq.n	8009e34 <HAL_SPI_TransmitReceive+0x470>
  {
    return HAL_ERROR;
 8009e30:	2301      	movs	r3, #1
 8009e32:	e000      	b.n	8009e36 <HAL_SPI_TransmitReceive+0x472>
  }
  else
  {
    return HAL_OK;
 8009e34:	2300      	movs	r3, #0
  }
}
 8009e36:	0018      	movs	r0, r3
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	b00a      	add	sp, #40	@ 0x28
 8009e3c:	bd80      	pop	{r7, pc}
 8009e3e:	46c0      	nop			@ (mov r8, r8)

08009e40 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b088      	sub	sp, #32
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	60f8      	str	r0, [r7, #12]
 8009e48:	60b9      	str	r1, [r7, #8]
 8009e4a:	603b      	str	r3, [r7, #0]
 8009e4c:	1dfb      	adds	r3, r7, #7
 8009e4e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009e50:	f7fb feb8 	bl	8005bc4 <HAL_GetTick>
 8009e54:	0002      	movs	r2, r0
 8009e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e58:	1a9b      	subs	r3, r3, r2
 8009e5a:	683a      	ldr	r2, [r7, #0]
 8009e5c:	18d3      	adds	r3, r2, r3
 8009e5e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009e60:	f7fb feb0 	bl	8005bc4 <HAL_GetTick>
 8009e64:	0003      	movs	r3, r0
 8009e66:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009e68:	4b3a      	ldr	r3, [pc, #232]	@ (8009f54 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	015b      	lsls	r3, r3, #5
 8009e6e:	0d1b      	lsrs	r3, r3, #20
 8009e70:	69fa      	ldr	r2, [r7, #28]
 8009e72:	4353      	muls	r3, r2
 8009e74:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009e76:	e058      	b.n	8009f2a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	3301      	adds	r3, #1
 8009e7c:	d055      	beq.n	8009f2a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009e7e:	f7fb fea1 	bl	8005bc4 <HAL_GetTick>
 8009e82:	0002      	movs	r2, r0
 8009e84:	69bb      	ldr	r3, [r7, #24]
 8009e86:	1ad3      	subs	r3, r2, r3
 8009e88:	69fa      	ldr	r2, [r7, #28]
 8009e8a:	429a      	cmp	r2, r3
 8009e8c:	d902      	bls.n	8009e94 <SPI_WaitFlagStateUntilTimeout+0x54>
 8009e8e:	69fb      	ldr	r3, [r7, #28]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d142      	bne.n	8009f1a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	685a      	ldr	r2, [r3, #4]
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	21e0      	movs	r1, #224	@ 0xe0
 8009ea0:	438a      	bics	r2, r1
 8009ea2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	685a      	ldr	r2, [r3, #4]
 8009ea8:	2382      	movs	r3, #130	@ 0x82
 8009eaa:	005b      	lsls	r3, r3, #1
 8009eac:	429a      	cmp	r2, r3
 8009eae:	d113      	bne.n	8009ed8 <SPI_WaitFlagStateUntilTimeout+0x98>
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	689a      	ldr	r2, [r3, #8]
 8009eb4:	2380      	movs	r3, #128	@ 0x80
 8009eb6:	021b      	lsls	r3, r3, #8
 8009eb8:	429a      	cmp	r2, r3
 8009eba:	d005      	beq.n	8009ec8 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	689a      	ldr	r2, [r3, #8]
 8009ec0:	2380      	movs	r3, #128	@ 0x80
 8009ec2:	00db      	lsls	r3, r3, #3
 8009ec4:	429a      	cmp	r2, r3
 8009ec6:	d107      	bne.n	8009ed8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	681a      	ldr	r2, [r3, #0]
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	2140      	movs	r1, #64	@ 0x40
 8009ed4:	438a      	bics	r2, r1
 8009ed6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009edc:	2380      	movs	r3, #128	@ 0x80
 8009ede:	019b      	lsls	r3, r3, #6
 8009ee0:	429a      	cmp	r2, r3
 8009ee2:	d110      	bne.n	8009f06 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	681a      	ldr	r2, [r3, #0]
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	491a      	ldr	r1, [pc, #104]	@ (8009f58 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8009ef0:	400a      	ands	r2, r1
 8009ef2:	601a      	str	r2, [r3, #0]
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	681a      	ldr	r2, [r3, #0]
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	2180      	movs	r1, #128	@ 0x80
 8009f00:	0189      	lsls	r1, r1, #6
 8009f02:	430a      	orrs	r2, r1
 8009f04:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	225d      	movs	r2, #93	@ 0x5d
 8009f0a:	2101      	movs	r1, #1
 8009f0c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	225c      	movs	r2, #92	@ 0x5c
 8009f12:	2100      	movs	r1, #0
 8009f14:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009f16:	2303      	movs	r3, #3
 8009f18:	e017      	b.n	8009f4a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009f1a:	697b      	ldr	r3, [r7, #20]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d101      	bne.n	8009f24 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8009f20:	2300      	movs	r3, #0
 8009f22:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009f24:	697b      	ldr	r3, [r7, #20]
 8009f26:	3b01      	subs	r3, #1
 8009f28:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	689b      	ldr	r3, [r3, #8]
 8009f30:	68ba      	ldr	r2, [r7, #8]
 8009f32:	4013      	ands	r3, r2
 8009f34:	68ba      	ldr	r2, [r7, #8]
 8009f36:	1ad3      	subs	r3, r2, r3
 8009f38:	425a      	negs	r2, r3
 8009f3a:	4153      	adcs	r3, r2
 8009f3c:	b2db      	uxtb	r3, r3
 8009f3e:	001a      	movs	r2, r3
 8009f40:	1dfb      	adds	r3, r7, #7
 8009f42:	781b      	ldrb	r3, [r3, #0]
 8009f44:	429a      	cmp	r2, r3
 8009f46:	d197      	bne.n	8009e78 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009f48:	2300      	movs	r3, #0
}
 8009f4a:	0018      	movs	r0, r3
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	b008      	add	sp, #32
 8009f50:	bd80      	pop	{r7, pc}
 8009f52:	46c0      	nop			@ (mov r8, r8)
 8009f54:	200000b8 	.word	0x200000b8
 8009f58:	ffffdfff 	.word	0xffffdfff

08009f5c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b08a      	sub	sp, #40	@ 0x28
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	60f8      	str	r0, [r7, #12]
 8009f64:	60b9      	str	r1, [r7, #8]
 8009f66:	607a      	str	r2, [r7, #4]
 8009f68:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009f6a:	2317      	movs	r3, #23
 8009f6c:	18fb      	adds	r3, r7, r3
 8009f6e:	2200      	movs	r2, #0
 8009f70:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009f72:	f7fb fe27 	bl	8005bc4 <HAL_GetTick>
 8009f76:	0002      	movs	r2, r0
 8009f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f7a:	1a9b      	subs	r3, r3, r2
 8009f7c:	683a      	ldr	r2, [r7, #0]
 8009f7e:	18d3      	adds	r3, r2, r3
 8009f80:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8009f82:	f7fb fe1f 	bl	8005bc4 <HAL_GetTick>
 8009f86:	0003      	movs	r3, r0
 8009f88:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	330c      	adds	r3, #12
 8009f90:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009f92:	4b41      	ldr	r3, [pc, #260]	@ (800a098 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8009f94:	681a      	ldr	r2, [r3, #0]
 8009f96:	0013      	movs	r3, r2
 8009f98:	009b      	lsls	r3, r3, #2
 8009f9a:	189b      	adds	r3, r3, r2
 8009f9c:	00da      	lsls	r2, r3, #3
 8009f9e:	1ad3      	subs	r3, r2, r3
 8009fa0:	0d1b      	lsrs	r3, r3, #20
 8009fa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009fa4:	4353      	muls	r3, r2
 8009fa6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009fa8:	e068      	b.n	800a07c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009faa:	68ba      	ldr	r2, [r7, #8]
 8009fac:	23c0      	movs	r3, #192	@ 0xc0
 8009fae:	00db      	lsls	r3, r3, #3
 8009fb0:	429a      	cmp	r2, r3
 8009fb2:	d10a      	bne.n	8009fca <SPI_WaitFifoStateUntilTimeout+0x6e>
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d107      	bne.n	8009fca <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009fba:	69fb      	ldr	r3, [r7, #28]
 8009fbc:	781b      	ldrb	r3, [r3, #0]
 8009fbe:	b2da      	uxtb	r2, r3
 8009fc0:	2117      	movs	r1, #23
 8009fc2:	187b      	adds	r3, r7, r1
 8009fc4:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009fc6:	187b      	adds	r3, r7, r1
 8009fc8:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	3301      	adds	r3, #1
 8009fce:	d055      	beq.n	800a07c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009fd0:	f7fb fdf8 	bl	8005bc4 <HAL_GetTick>
 8009fd4:	0002      	movs	r2, r0
 8009fd6:	6a3b      	ldr	r3, [r7, #32]
 8009fd8:	1ad3      	subs	r3, r2, r3
 8009fda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009fdc:	429a      	cmp	r2, r3
 8009fde:	d902      	bls.n	8009fe6 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8009fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d142      	bne.n	800a06c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	685a      	ldr	r2, [r3, #4]
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	21e0      	movs	r1, #224	@ 0xe0
 8009ff2:	438a      	bics	r2, r1
 8009ff4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	685a      	ldr	r2, [r3, #4]
 8009ffa:	2382      	movs	r3, #130	@ 0x82
 8009ffc:	005b      	lsls	r3, r3, #1
 8009ffe:	429a      	cmp	r2, r3
 800a000:	d113      	bne.n	800a02a <SPI_WaitFifoStateUntilTimeout+0xce>
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	689a      	ldr	r2, [r3, #8]
 800a006:	2380      	movs	r3, #128	@ 0x80
 800a008:	021b      	lsls	r3, r3, #8
 800a00a:	429a      	cmp	r2, r3
 800a00c:	d005      	beq.n	800a01a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	689a      	ldr	r2, [r3, #8]
 800a012:	2380      	movs	r3, #128	@ 0x80
 800a014:	00db      	lsls	r3, r3, #3
 800a016:	429a      	cmp	r2, r3
 800a018:	d107      	bne.n	800a02a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	681a      	ldr	r2, [r3, #0]
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	2140      	movs	r1, #64	@ 0x40
 800a026:	438a      	bics	r2, r1
 800a028:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a02e:	2380      	movs	r3, #128	@ 0x80
 800a030:	019b      	lsls	r3, r3, #6
 800a032:	429a      	cmp	r2, r3
 800a034:	d110      	bne.n	800a058 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	681a      	ldr	r2, [r3, #0]
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	4916      	ldr	r1, [pc, #88]	@ (800a09c <SPI_WaitFifoStateUntilTimeout+0x140>)
 800a042:	400a      	ands	r2, r1
 800a044:	601a      	str	r2, [r3, #0]
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	681a      	ldr	r2, [r3, #0]
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	2180      	movs	r1, #128	@ 0x80
 800a052:	0189      	lsls	r1, r1, #6
 800a054:	430a      	orrs	r2, r1
 800a056:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	225d      	movs	r2, #93	@ 0x5d
 800a05c:	2101      	movs	r1, #1
 800a05e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	225c      	movs	r2, #92	@ 0x5c
 800a064:	2100      	movs	r1, #0
 800a066:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a068:	2303      	movs	r3, #3
 800a06a:	e010      	b.n	800a08e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a06c:	69bb      	ldr	r3, [r7, #24]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d101      	bne.n	800a076 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800a072:	2300      	movs	r3, #0
 800a074:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800a076:	69bb      	ldr	r3, [r7, #24]
 800a078:	3b01      	subs	r3, #1
 800a07a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	689b      	ldr	r3, [r3, #8]
 800a082:	68ba      	ldr	r2, [r7, #8]
 800a084:	4013      	ands	r3, r2
 800a086:	687a      	ldr	r2, [r7, #4]
 800a088:	429a      	cmp	r2, r3
 800a08a:	d18e      	bne.n	8009faa <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800a08c:	2300      	movs	r3, #0
}
 800a08e:	0018      	movs	r0, r3
 800a090:	46bd      	mov	sp, r7
 800a092:	b00a      	add	sp, #40	@ 0x28
 800a094:	bd80      	pop	{r7, pc}
 800a096:	46c0      	nop			@ (mov r8, r8)
 800a098:	200000b8 	.word	0x200000b8
 800a09c:	ffffdfff 	.word	0xffffdfff

0800a0a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b086      	sub	sp, #24
 800a0a4:	af02      	add	r7, sp, #8
 800a0a6:	60f8      	str	r0, [r7, #12]
 800a0a8:	60b9      	str	r1, [r7, #8]
 800a0aa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a0ac:	68ba      	ldr	r2, [r7, #8]
 800a0ae:	23c0      	movs	r3, #192	@ 0xc0
 800a0b0:	0159      	lsls	r1, r3, #5
 800a0b2:	68f8      	ldr	r0, [r7, #12]
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	9300      	str	r3, [sp, #0]
 800a0b8:	0013      	movs	r3, r2
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	f7ff ff4e 	bl	8009f5c <SPI_WaitFifoStateUntilTimeout>
 800a0c0:	1e03      	subs	r3, r0, #0
 800a0c2:	d007      	beq.n	800a0d4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a0c8:	2220      	movs	r2, #32
 800a0ca:	431a      	orrs	r2, r3
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a0d0:	2303      	movs	r3, #3
 800a0d2:	e027      	b.n	800a124 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a0d4:	68ba      	ldr	r2, [r7, #8]
 800a0d6:	68f8      	ldr	r0, [r7, #12]
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	9300      	str	r3, [sp, #0]
 800a0dc:	0013      	movs	r3, r2
 800a0de:	2200      	movs	r2, #0
 800a0e0:	2180      	movs	r1, #128	@ 0x80
 800a0e2:	f7ff fead 	bl	8009e40 <SPI_WaitFlagStateUntilTimeout>
 800a0e6:	1e03      	subs	r3, r0, #0
 800a0e8:	d007      	beq.n	800a0fa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a0ee:	2220      	movs	r2, #32
 800a0f0:	431a      	orrs	r2, r3
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a0f6:	2303      	movs	r3, #3
 800a0f8:	e014      	b.n	800a124 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a0fa:	68ba      	ldr	r2, [r7, #8]
 800a0fc:	23c0      	movs	r3, #192	@ 0xc0
 800a0fe:	00d9      	lsls	r1, r3, #3
 800a100:	68f8      	ldr	r0, [r7, #12]
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	9300      	str	r3, [sp, #0]
 800a106:	0013      	movs	r3, r2
 800a108:	2200      	movs	r2, #0
 800a10a:	f7ff ff27 	bl	8009f5c <SPI_WaitFifoStateUntilTimeout>
 800a10e:	1e03      	subs	r3, r0, #0
 800a110:	d007      	beq.n	800a122 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a116:	2220      	movs	r2, #32
 800a118:	431a      	orrs	r2, r3
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a11e:	2303      	movs	r3, #3
 800a120:	e000      	b.n	800a124 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a122:	2300      	movs	r3, #0
}
 800a124:	0018      	movs	r0, r3
 800a126:	46bd      	mov	sp, r7
 800a128:	b004      	add	sp, #16
 800a12a:	bd80      	pop	{r7, pc}

0800a12c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b082      	sub	sp, #8
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d101      	bne.n	800a13e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a13a:	2301      	movs	r3, #1
 800a13c:	e04a      	b.n	800a1d4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	223d      	movs	r2, #61	@ 0x3d
 800a142:	5c9b      	ldrb	r3, [r3, r2]
 800a144:	b2db      	uxtb	r3, r3
 800a146:	2b00      	cmp	r3, #0
 800a148:	d107      	bne.n	800a15a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	223c      	movs	r2, #60	@ 0x3c
 800a14e:	2100      	movs	r1, #0
 800a150:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	0018      	movs	r0, r3
 800a156:	f7fb f98f 	bl	8005478 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	223d      	movs	r2, #61	@ 0x3d
 800a15e:	2102      	movs	r1, #2
 800a160:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681a      	ldr	r2, [r3, #0]
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	3304      	adds	r3, #4
 800a16a:	0019      	movs	r1, r3
 800a16c:	0010      	movs	r0, r2
 800a16e:	f000 fc73 	bl	800aa58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2248      	movs	r2, #72	@ 0x48
 800a176:	2101      	movs	r1, #1
 800a178:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	223e      	movs	r2, #62	@ 0x3e
 800a17e:	2101      	movs	r1, #1
 800a180:	5499      	strb	r1, [r3, r2]
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	223f      	movs	r2, #63	@ 0x3f
 800a186:	2101      	movs	r1, #1
 800a188:	5499      	strb	r1, [r3, r2]
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2240      	movs	r2, #64	@ 0x40
 800a18e:	2101      	movs	r1, #1
 800a190:	5499      	strb	r1, [r3, r2]
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2241      	movs	r2, #65	@ 0x41
 800a196:	2101      	movs	r1, #1
 800a198:	5499      	strb	r1, [r3, r2]
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2242      	movs	r2, #66	@ 0x42
 800a19e:	2101      	movs	r1, #1
 800a1a0:	5499      	strb	r1, [r3, r2]
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2243      	movs	r2, #67	@ 0x43
 800a1a6:	2101      	movs	r1, #1
 800a1a8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2244      	movs	r2, #68	@ 0x44
 800a1ae:	2101      	movs	r1, #1
 800a1b0:	5499      	strb	r1, [r3, r2]
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2245      	movs	r2, #69	@ 0x45
 800a1b6:	2101      	movs	r1, #1
 800a1b8:	5499      	strb	r1, [r3, r2]
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2246      	movs	r2, #70	@ 0x46
 800a1be:	2101      	movs	r1, #1
 800a1c0:	5499      	strb	r1, [r3, r2]
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2247      	movs	r2, #71	@ 0x47
 800a1c6:	2101      	movs	r1, #1
 800a1c8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	223d      	movs	r2, #61	@ 0x3d
 800a1ce:	2101      	movs	r1, #1
 800a1d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a1d2:	2300      	movs	r3, #0
}
 800a1d4:	0018      	movs	r0, r3
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	b002      	add	sp, #8
 800a1da:	bd80      	pop	{r7, pc}

0800a1dc <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b082      	sub	sp, #8
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	223d      	movs	r2, #61	@ 0x3d
 800a1e8:	2102      	movs	r1, #2
 800a1ea:	5499      	strb	r1, [r3, r2]

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	6a1b      	ldr	r3, [r3, #32]
 800a1f2:	4a27      	ldr	r2, [pc, #156]	@ (800a290 <HAL_TIM_Base_DeInit+0xb4>)
 800a1f4:	4013      	ands	r3, r2
 800a1f6:	d10d      	bne.n	800a214 <HAL_TIM_Base_DeInit+0x38>
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	6a1b      	ldr	r3, [r3, #32]
 800a1fe:	4a25      	ldr	r2, [pc, #148]	@ (800a294 <HAL_TIM_Base_DeInit+0xb8>)
 800a200:	4013      	ands	r3, r2
 800a202:	d107      	bne.n	800a214 <HAL_TIM_Base_DeInit+0x38>
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	681a      	ldr	r2, [r3, #0]
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	2101      	movs	r1, #1
 800a210:	438a      	bics	r2, r1
 800a212:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	0018      	movs	r0, r3
 800a218:	f7fb f994 	bl	8005544 <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2248      	movs	r2, #72	@ 0x48
 800a220:	2100      	movs	r1, #0
 800a222:	5499      	strb	r1, [r3, r2]

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	223e      	movs	r2, #62	@ 0x3e
 800a228:	2100      	movs	r1, #0
 800a22a:	5499      	strb	r1, [r3, r2]
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	223f      	movs	r2, #63	@ 0x3f
 800a230:	2100      	movs	r1, #0
 800a232:	5499      	strb	r1, [r3, r2]
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2240      	movs	r2, #64	@ 0x40
 800a238:	2100      	movs	r1, #0
 800a23a:	5499      	strb	r1, [r3, r2]
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2241      	movs	r2, #65	@ 0x41
 800a240:	2100      	movs	r1, #0
 800a242:	5499      	strb	r1, [r3, r2]
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2242      	movs	r2, #66	@ 0x42
 800a248:	2100      	movs	r1, #0
 800a24a:	5499      	strb	r1, [r3, r2]
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2243      	movs	r2, #67	@ 0x43
 800a250:	2100      	movs	r1, #0
 800a252:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2244      	movs	r2, #68	@ 0x44
 800a258:	2100      	movs	r1, #0
 800a25a:	5499      	strb	r1, [r3, r2]
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2245      	movs	r2, #69	@ 0x45
 800a260:	2100      	movs	r1, #0
 800a262:	5499      	strb	r1, [r3, r2]
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2246      	movs	r2, #70	@ 0x46
 800a268:	2100      	movs	r1, #0
 800a26a:	5499      	strb	r1, [r3, r2]
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2247      	movs	r2, #71	@ 0x47
 800a270:	2100      	movs	r1, #0
 800a272:	5499      	strb	r1, [r3, r2]

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	223d      	movs	r2, #61	@ 0x3d
 800a278:	2100      	movs	r1, #0
 800a27a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	223c      	movs	r2, #60	@ 0x3c
 800a280:	2100      	movs	r1, #0
 800a282:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a284:	2300      	movs	r3, #0
}
 800a286:	0018      	movs	r0, r3
 800a288:	46bd      	mov	sp, r7
 800a28a:	b002      	add	sp, #8
 800a28c:	bd80      	pop	{r7, pc}
 800a28e:	46c0      	nop			@ (mov r8, r8)
 800a290:	00001111 	.word	0x00001111
 800a294:	00000444 	.word	0x00000444

0800a298 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b084      	sub	sp, #16
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	223d      	movs	r2, #61	@ 0x3d
 800a2a4:	5c9b      	ldrb	r3, [r3, r2]
 800a2a6:	b2db      	uxtb	r3, r3
 800a2a8:	2b01      	cmp	r3, #1
 800a2aa:	d001      	beq.n	800a2b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	e03d      	b.n	800a32c <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	223d      	movs	r2, #61	@ 0x3d
 800a2b4:	2102      	movs	r1, #2
 800a2b6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	68da      	ldr	r2, [r3, #12]
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	2101      	movs	r1, #1
 800a2c4:	430a      	orrs	r2, r1
 800a2c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	4a19      	ldr	r2, [pc, #100]	@ (800a334 <HAL_TIM_Base_Start_IT+0x9c>)
 800a2ce:	4293      	cmp	r3, r2
 800a2d0:	d00a      	beq.n	800a2e8 <HAL_TIM_Base_Start_IT+0x50>
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681a      	ldr	r2, [r3, #0]
 800a2d6:	2380      	movs	r3, #128	@ 0x80
 800a2d8:	05db      	lsls	r3, r3, #23
 800a2da:	429a      	cmp	r2, r3
 800a2dc:	d004      	beq.n	800a2e8 <HAL_TIM_Base_Start_IT+0x50>
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	4a15      	ldr	r2, [pc, #84]	@ (800a338 <HAL_TIM_Base_Start_IT+0xa0>)
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	d116      	bne.n	800a316 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	689b      	ldr	r3, [r3, #8]
 800a2ee:	4a13      	ldr	r2, [pc, #76]	@ (800a33c <HAL_TIM_Base_Start_IT+0xa4>)
 800a2f0:	4013      	ands	r3, r2
 800a2f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	2b06      	cmp	r3, #6
 800a2f8:	d016      	beq.n	800a328 <HAL_TIM_Base_Start_IT+0x90>
 800a2fa:	68fa      	ldr	r2, [r7, #12]
 800a2fc:	2380      	movs	r3, #128	@ 0x80
 800a2fe:	025b      	lsls	r3, r3, #9
 800a300:	429a      	cmp	r2, r3
 800a302:	d011      	beq.n	800a328 <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	681a      	ldr	r2, [r3, #0]
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	2101      	movs	r1, #1
 800a310:	430a      	orrs	r2, r1
 800a312:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a314:	e008      	b.n	800a328 <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	681a      	ldr	r2, [r3, #0]
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	2101      	movs	r1, #1
 800a322:	430a      	orrs	r2, r1
 800a324:	601a      	str	r2, [r3, #0]
 800a326:	e000      	b.n	800a32a <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a328:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800a32a:	2300      	movs	r3, #0
}
 800a32c:	0018      	movs	r0, r3
 800a32e:	46bd      	mov	sp, r7
 800a330:	b004      	add	sp, #16
 800a332:	bd80      	pop	{r7, pc}
 800a334:	40012c00 	.word	0x40012c00
 800a338:	40000400 	.word	0x40000400
 800a33c:	00010007 	.word	0x00010007

0800a340 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b082      	sub	sp, #8
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	68da      	ldr	r2, [r3, #12]
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	2101      	movs	r1, #1
 800a354:	438a      	bics	r2, r1
 800a356:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	6a1b      	ldr	r3, [r3, #32]
 800a35e:	4a0d      	ldr	r2, [pc, #52]	@ (800a394 <HAL_TIM_Base_Stop_IT+0x54>)
 800a360:	4013      	ands	r3, r2
 800a362:	d10d      	bne.n	800a380 <HAL_TIM_Base_Stop_IT+0x40>
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	6a1b      	ldr	r3, [r3, #32]
 800a36a:	4a0b      	ldr	r2, [pc, #44]	@ (800a398 <HAL_TIM_Base_Stop_IT+0x58>)
 800a36c:	4013      	ands	r3, r2
 800a36e:	d107      	bne.n	800a380 <HAL_TIM_Base_Stop_IT+0x40>
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	681a      	ldr	r2, [r3, #0]
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	2101      	movs	r1, #1
 800a37c:	438a      	bics	r2, r1
 800a37e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	223d      	movs	r2, #61	@ 0x3d
 800a384:	2101      	movs	r1, #1
 800a386:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800a388:	2300      	movs	r3, #0
}
 800a38a:	0018      	movs	r0, r3
 800a38c:	46bd      	mov	sp, r7
 800a38e:	b002      	add	sp, #8
 800a390:	bd80      	pop	{r7, pc}
 800a392:	46c0      	nop			@ (mov r8, r8)
 800a394:	00001111 	.word	0x00001111
 800a398:	00000444 	.word	0x00000444

0800a39c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b082      	sub	sp, #8
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d101      	bne.n	800a3ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	e04a      	b.n	800a444 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	223d      	movs	r2, #61	@ 0x3d
 800a3b2:	5c9b      	ldrb	r3, [r3, r2]
 800a3b4:	b2db      	uxtb	r3, r3
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d107      	bne.n	800a3ca <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	223c      	movs	r2, #60	@ 0x3c
 800a3be:	2100      	movs	r1, #0
 800a3c0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	0018      	movs	r0, r3
 800a3c6:	f7fb f837 	bl	8005438 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	223d      	movs	r2, #61	@ 0x3d
 800a3ce:	2102      	movs	r1, #2
 800a3d0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681a      	ldr	r2, [r3, #0]
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	3304      	adds	r3, #4
 800a3da:	0019      	movs	r1, r3
 800a3dc:	0010      	movs	r0, r2
 800a3de:	f000 fb3b 	bl	800aa58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2248      	movs	r2, #72	@ 0x48
 800a3e6:	2101      	movs	r1, #1
 800a3e8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	223e      	movs	r2, #62	@ 0x3e
 800a3ee:	2101      	movs	r1, #1
 800a3f0:	5499      	strb	r1, [r3, r2]
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	223f      	movs	r2, #63	@ 0x3f
 800a3f6:	2101      	movs	r1, #1
 800a3f8:	5499      	strb	r1, [r3, r2]
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2240      	movs	r2, #64	@ 0x40
 800a3fe:	2101      	movs	r1, #1
 800a400:	5499      	strb	r1, [r3, r2]
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2241      	movs	r2, #65	@ 0x41
 800a406:	2101      	movs	r1, #1
 800a408:	5499      	strb	r1, [r3, r2]
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2242      	movs	r2, #66	@ 0x42
 800a40e:	2101      	movs	r1, #1
 800a410:	5499      	strb	r1, [r3, r2]
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2243      	movs	r2, #67	@ 0x43
 800a416:	2101      	movs	r1, #1
 800a418:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2244      	movs	r2, #68	@ 0x44
 800a41e:	2101      	movs	r1, #1
 800a420:	5499      	strb	r1, [r3, r2]
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2245      	movs	r2, #69	@ 0x45
 800a426:	2101      	movs	r1, #1
 800a428:	5499      	strb	r1, [r3, r2]
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2246      	movs	r2, #70	@ 0x46
 800a42e:	2101      	movs	r1, #1
 800a430:	5499      	strb	r1, [r3, r2]
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2247      	movs	r2, #71	@ 0x47
 800a436:	2101      	movs	r1, #1
 800a438:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	223d      	movs	r2, #61	@ 0x3d
 800a43e:	2101      	movs	r1, #1
 800a440:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a442:	2300      	movs	r3, #0
}
 800a444:	0018      	movs	r0, r3
 800a446:	46bd      	mov	sp, r7
 800a448:	b002      	add	sp, #8
 800a44a:	bd80      	pop	{r7, pc}

0800a44c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b084      	sub	sp, #16
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
 800a454:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d108      	bne.n	800a46e <HAL_TIM_PWM_Start+0x22>
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	223e      	movs	r2, #62	@ 0x3e
 800a460:	5c9b      	ldrb	r3, [r3, r2]
 800a462:	b2db      	uxtb	r3, r3
 800a464:	3b01      	subs	r3, #1
 800a466:	1e5a      	subs	r2, r3, #1
 800a468:	4193      	sbcs	r3, r2
 800a46a:	b2db      	uxtb	r3, r3
 800a46c:	e037      	b.n	800a4de <HAL_TIM_PWM_Start+0x92>
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	2b04      	cmp	r3, #4
 800a472:	d108      	bne.n	800a486 <HAL_TIM_PWM_Start+0x3a>
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	223f      	movs	r2, #63	@ 0x3f
 800a478:	5c9b      	ldrb	r3, [r3, r2]
 800a47a:	b2db      	uxtb	r3, r3
 800a47c:	3b01      	subs	r3, #1
 800a47e:	1e5a      	subs	r2, r3, #1
 800a480:	4193      	sbcs	r3, r2
 800a482:	b2db      	uxtb	r3, r3
 800a484:	e02b      	b.n	800a4de <HAL_TIM_PWM_Start+0x92>
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	2b08      	cmp	r3, #8
 800a48a:	d108      	bne.n	800a49e <HAL_TIM_PWM_Start+0x52>
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2240      	movs	r2, #64	@ 0x40
 800a490:	5c9b      	ldrb	r3, [r3, r2]
 800a492:	b2db      	uxtb	r3, r3
 800a494:	3b01      	subs	r3, #1
 800a496:	1e5a      	subs	r2, r3, #1
 800a498:	4193      	sbcs	r3, r2
 800a49a:	b2db      	uxtb	r3, r3
 800a49c:	e01f      	b.n	800a4de <HAL_TIM_PWM_Start+0x92>
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	2b0c      	cmp	r3, #12
 800a4a2:	d108      	bne.n	800a4b6 <HAL_TIM_PWM_Start+0x6a>
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2241      	movs	r2, #65	@ 0x41
 800a4a8:	5c9b      	ldrb	r3, [r3, r2]
 800a4aa:	b2db      	uxtb	r3, r3
 800a4ac:	3b01      	subs	r3, #1
 800a4ae:	1e5a      	subs	r2, r3, #1
 800a4b0:	4193      	sbcs	r3, r2
 800a4b2:	b2db      	uxtb	r3, r3
 800a4b4:	e013      	b.n	800a4de <HAL_TIM_PWM_Start+0x92>
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	2b10      	cmp	r3, #16
 800a4ba:	d108      	bne.n	800a4ce <HAL_TIM_PWM_Start+0x82>
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2242      	movs	r2, #66	@ 0x42
 800a4c0:	5c9b      	ldrb	r3, [r3, r2]
 800a4c2:	b2db      	uxtb	r3, r3
 800a4c4:	3b01      	subs	r3, #1
 800a4c6:	1e5a      	subs	r2, r3, #1
 800a4c8:	4193      	sbcs	r3, r2
 800a4ca:	b2db      	uxtb	r3, r3
 800a4cc:	e007      	b.n	800a4de <HAL_TIM_PWM_Start+0x92>
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2243      	movs	r2, #67	@ 0x43
 800a4d2:	5c9b      	ldrb	r3, [r3, r2]
 800a4d4:	b2db      	uxtb	r3, r3
 800a4d6:	3b01      	subs	r3, #1
 800a4d8:	1e5a      	subs	r2, r3, #1
 800a4da:	4193      	sbcs	r3, r2
 800a4dc:	b2db      	uxtb	r3, r3
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d001      	beq.n	800a4e6 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	e081      	b.n	800a5ea <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d104      	bne.n	800a4f6 <HAL_TIM_PWM_Start+0xaa>
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	223e      	movs	r2, #62	@ 0x3e
 800a4f0:	2102      	movs	r1, #2
 800a4f2:	5499      	strb	r1, [r3, r2]
 800a4f4:	e023      	b.n	800a53e <HAL_TIM_PWM_Start+0xf2>
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	2b04      	cmp	r3, #4
 800a4fa:	d104      	bne.n	800a506 <HAL_TIM_PWM_Start+0xba>
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	223f      	movs	r2, #63	@ 0x3f
 800a500:	2102      	movs	r1, #2
 800a502:	5499      	strb	r1, [r3, r2]
 800a504:	e01b      	b.n	800a53e <HAL_TIM_PWM_Start+0xf2>
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	2b08      	cmp	r3, #8
 800a50a:	d104      	bne.n	800a516 <HAL_TIM_PWM_Start+0xca>
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2240      	movs	r2, #64	@ 0x40
 800a510:	2102      	movs	r1, #2
 800a512:	5499      	strb	r1, [r3, r2]
 800a514:	e013      	b.n	800a53e <HAL_TIM_PWM_Start+0xf2>
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	2b0c      	cmp	r3, #12
 800a51a:	d104      	bne.n	800a526 <HAL_TIM_PWM_Start+0xda>
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2241      	movs	r2, #65	@ 0x41
 800a520:	2102      	movs	r1, #2
 800a522:	5499      	strb	r1, [r3, r2]
 800a524:	e00b      	b.n	800a53e <HAL_TIM_PWM_Start+0xf2>
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	2b10      	cmp	r3, #16
 800a52a:	d104      	bne.n	800a536 <HAL_TIM_PWM_Start+0xea>
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2242      	movs	r2, #66	@ 0x42
 800a530:	2102      	movs	r1, #2
 800a532:	5499      	strb	r1, [r3, r2]
 800a534:	e003      	b.n	800a53e <HAL_TIM_PWM_Start+0xf2>
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2243      	movs	r2, #67	@ 0x43
 800a53a:	2102      	movs	r1, #2
 800a53c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	6839      	ldr	r1, [r7, #0]
 800a544:	2201      	movs	r2, #1
 800a546:	0018      	movs	r0, r3
 800a548:	f000 fda6 	bl	800b098 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	4a28      	ldr	r2, [pc, #160]	@ (800a5f4 <HAL_TIM_PWM_Start+0x1a8>)
 800a552:	4293      	cmp	r3, r2
 800a554:	d009      	beq.n	800a56a <HAL_TIM_PWM_Start+0x11e>
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	4a27      	ldr	r2, [pc, #156]	@ (800a5f8 <HAL_TIM_PWM_Start+0x1ac>)
 800a55c:	4293      	cmp	r3, r2
 800a55e:	d004      	beq.n	800a56a <HAL_TIM_PWM_Start+0x11e>
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	4a25      	ldr	r2, [pc, #148]	@ (800a5fc <HAL_TIM_PWM_Start+0x1b0>)
 800a566:	4293      	cmp	r3, r2
 800a568:	d101      	bne.n	800a56e <HAL_TIM_PWM_Start+0x122>
 800a56a:	2301      	movs	r3, #1
 800a56c:	e000      	b.n	800a570 <HAL_TIM_PWM_Start+0x124>
 800a56e:	2300      	movs	r3, #0
 800a570:	2b00      	cmp	r3, #0
 800a572:	d008      	beq.n	800a586 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	2180      	movs	r1, #128	@ 0x80
 800a580:	0209      	lsls	r1, r1, #8
 800a582:	430a      	orrs	r2, r1
 800a584:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	4a1a      	ldr	r2, [pc, #104]	@ (800a5f4 <HAL_TIM_PWM_Start+0x1a8>)
 800a58c:	4293      	cmp	r3, r2
 800a58e:	d00a      	beq.n	800a5a6 <HAL_TIM_PWM_Start+0x15a>
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681a      	ldr	r2, [r3, #0]
 800a594:	2380      	movs	r3, #128	@ 0x80
 800a596:	05db      	lsls	r3, r3, #23
 800a598:	429a      	cmp	r2, r3
 800a59a:	d004      	beq.n	800a5a6 <HAL_TIM_PWM_Start+0x15a>
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	4a17      	ldr	r2, [pc, #92]	@ (800a600 <HAL_TIM_PWM_Start+0x1b4>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d116      	bne.n	800a5d4 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	689b      	ldr	r3, [r3, #8]
 800a5ac:	4a15      	ldr	r2, [pc, #84]	@ (800a604 <HAL_TIM_PWM_Start+0x1b8>)
 800a5ae:	4013      	ands	r3, r2
 800a5b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	2b06      	cmp	r3, #6
 800a5b6:	d016      	beq.n	800a5e6 <HAL_TIM_PWM_Start+0x19a>
 800a5b8:	68fa      	ldr	r2, [r7, #12]
 800a5ba:	2380      	movs	r3, #128	@ 0x80
 800a5bc:	025b      	lsls	r3, r3, #9
 800a5be:	429a      	cmp	r2, r3
 800a5c0:	d011      	beq.n	800a5e6 <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	681a      	ldr	r2, [r3, #0]
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	2101      	movs	r1, #1
 800a5ce:	430a      	orrs	r2, r1
 800a5d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5d2:	e008      	b.n	800a5e6 <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	681a      	ldr	r2, [r3, #0]
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	2101      	movs	r1, #1
 800a5e0:	430a      	orrs	r2, r1
 800a5e2:	601a      	str	r2, [r3, #0]
 800a5e4:	e000      	b.n	800a5e8 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5e6:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800a5e8:	2300      	movs	r3, #0
}
 800a5ea:	0018      	movs	r0, r3
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	b004      	add	sp, #16
 800a5f0:	bd80      	pop	{r7, pc}
 800a5f2:	46c0      	nop			@ (mov r8, r8)
 800a5f4:	40012c00 	.word	0x40012c00
 800a5f8:	40014400 	.word	0x40014400
 800a5fc:	40014800 	.word	0x40014800
 800a600:	40000400 	.word	0x40000400
 800a604:	00010007 	.word	0x00010007

0800a608 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b084      	sub	sp, #16
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	68db      	ldr	r3, [r3, #12]
 800a616:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	691b      	ldr	r3, [r3, #16]
 800a61e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	2202      	movs	r2, #2
 800a624:	4013      	ands	r3, r2
 800a626:	d021      	beq.n	800a66c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	2202      	movs	r2, #2
 800a62c:	4013      	ands	r3, r2
 800a62e:	d01d      	beq.n	800a66c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	2203      	movs	r2, #3
 800a636:	4252      	negs	r2, r2
 800a638:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2201      	movs	r2, #1
 800a63e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	699b      	ldr	r3, [r3, #24]
 800a646:	2203      	movs	r2, #3
 800a648:	4013      	ands	r3, r2
 800a64a:	d004      	beq.n	800a656 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	0018      	movs	r0, r3
 800a650:	f000 f9ea 	bl	800aa28 <HAL_TIM_IC_CaptureCallback>
 800a654:	e007      	b.n	800a666 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	0018      	movs	r0, r3
 800a65a:	f000 f9dd 	bl	800aa18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	0018      	movs	r0, r3
 800a662:	f000 f9e9 	bl	800aa38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2200      	movs	r2, #0
 800a66a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	2204      	movs	r2, #4
 800a670:	4013      	ands	r3, r2
 800a672:	d022      	beq.n	800a6ba <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	2204      	movs	r2, #4
 800a678:	4013      	ands	r3, r2
 800a67a:	d01e      	beq.n	800a6ba <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	2205      	movs	r2, #5
 800a682:	4252      	negs	r2, r2
 800a684:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2202      	movs	r2, #2
 800a68a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	699a      	ldr	r2, [r3, #24]
 800a692:	23c0      	movs	r3, #192	@ 0xc0
 800a694:	009b      	lsls	r3, r3, #2
 800a696:	4013      	ands	r3, r2
 800a698:	d004      	beq.n	800a6a4 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	0018      	movs	r0, r3
 800a69e:	f000 f9c3 	bl	800aa28 <HAL_TIM_IC_CaptureCallback>
 800a6a2:	e007      	b.n	800a6b4 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	0018      	movs	r0, r3
 800a6a8:	f000 f9b6 	bl	800aa18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	0018      	movs	r0, r3
 800a6b0:	f000 f9c2 	bl	800aa38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	2208      	movs	r2, #8
 800a6be:	4013      	ands	r3, r2
 800a6c0:	d021      	beq.n	800a706 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	2208      	movs	r2, #8
 800a6c6:	4013      	ands	r3, r2
 800a6c8:	d01d      	beq.n	800a706 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	2209      	movs	r2, #9
 800a6d0:	4252      	negs	r2, r2
 800a6d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2204      	movs	r2, #4
 800a6d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	69db      	ldr	r3, [r3, #28]
 800a6e0:	2203      	movs	r2, #3
 800a6e2:	4013      	ands	r3, r2
 800a6e4:	d004      	beq.n	800a6f0 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	0018      	movs	r0, r3
 800a6ea:	f000 f99d 	bl	800aa28 <HAL_TIM_IC_CaptureCallback>
 800a6ee:	e007      	b.n	800a700 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	0018      	movs	r0, r3
 800a6f4:	f000 f990 	bl	800aa18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	0018      	movs	r0, r3
 800a6fc:	f000 f99c 	bl	800aa38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2200      	movs	r2, #0
 800a704:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a706:	68bb      	ldr	r3, [r7, #8]
 800a708:	2210      	movs	r2, #16
 800a70a:	4013      	ands	r3, r2
 800a70c:	d022      	beq.n	800a754 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	2210      	movs	r2, #16
 800a712:	4013      	ands	r3, r2
 800a714:	d01e      	beq.n	800a754 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	2211      	movs	r2, #17
 800a71c:	4252      	negs	r2, r2
 800a71e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2208      	movs	r2, #8
 800a724:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	69da      	ldr	r2, [r3, #28]
 800a72c:	23c0      	movs	r3, #192	@ 0xc0
 800a72e:	009b      	lsls	r3, r3, #2
 800a730:	4013      	ands	r3, r2
 800a732:	d004      	beq.n	800a73e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	0018      	movs	r0, r3
 800a738:	f000 f976 	bl	800aa28 <HAL_TIM_IC_CaptureCallback>
 800a73c:	e007      	b.n	800a74e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	0018      	movs	r0, r3
 800a742:	f000 f969 	bl	800aa18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	0018      	movs	r0, r3
 800a74a:	f000 f975 	bl	800aa38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2200      	movs	r2, #0
 800a752:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	2201      	movs	r2, #1
 800a758:	4013      	ands	r3, r2
 800a75a:	d00c      	beq.n	800a776 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	2201      	movs	r2, #1
 800a760:	4013      	ands	r3, r2
 800a762:	d008      	beq.n	800a776 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	2202      	movs	r2, #2
 800a76a:	4252      	negs	r2, r2
 800a76c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	0018      	movs	r0, r3
 800a772:	f7f8 fd03 	bl	800317c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a776:	68bb      	ldr	r3, [r7, #8]
 800a778:	2280      	movs	r2, #128	@ 0x80
 800a77a:	4013      	ands	r3, r2
 800a77c:	d104      	bne.n	800a788 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a77e:	68ba      	ldr	r2, [r7, #8]
 800a780:	2380      	movs	r3, #128	@ 0x80
 800a782:	019b      	lsls	r3, r3, #6
 800a784:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a786:	d00b      	beq.n	800a7a0 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	2280      	movs	r2, #128	@ 0x80
 800a78c:	4013      	ands	r3, r2
 800a78e:	d007      	beq.n	800a7a0 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	4a1e      	ldr	r2, [pc, #120]	@ (800a810 <HAL_TIM_IRQHandler+0x208>)
 800a796:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	0018      	movs	r0, r3
 800a79c:	f000 fdac 	bl	800b2f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a7a0:	68ba      	ldr	r2, [r7, #8]
 800a7a2:	2380      	movs	r3, #128	@ 0x80
 800a7a4:	005b      	lsls	r3, r3, #1
 800a7a6:	4013      	ands	r3, r2
 800a7a8:	d00b      	beq.n	800a7c2 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	2280      	movs	r2, #128	@ 0x80
 800a7ae:	4013      	ands	r3, r2
 800a7b0:	d007      	beq.n	800a7c2 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	4a17      	ldr	r2, [pc, #92]	@ (800a814 <HAL_TIM_IRQHandler+0x20c>)
 800a7b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	0018      	movs	r0, r3
 800a7be:	f000 fda3 	bl	800b308 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	2240      	movs	r2, #64	@ 0x40
 800a7c6:	4013      	ands	r3, r2
 800a7c8:	d00c      	beq.n	800a7e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	2240      	movs	r2, #64	@ 0x40
 800a7ce:	4013      	ands	r3, r2
 800a7d0:	d008      	beq.n	800a7e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	2241      	movs	r2, #65	@ 0x41
 800a7d8:	4252      	negs	r2, r2
 800a7da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	0018      	movs	r0, r3
 800a7e0:	f000 f932 	bl	800aa48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	2220      	movs	r2, #32
 800a7e8:	4013      	ands	r3, r2
 800a7ea:	d00c      	beq.n	800a806 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	2220      	movs	r2, #32
 800a7f0:	4013      	ands	r3, r2
 800a7f2:	d008      	beq.n	800a806 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	2221      	movs	r2, #33	@ 0x21
 800a7fa:	4252      	negs	r2, r2
 800a7fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	0018      	movs	r0, r3
 800a802:	f000 fd71 	bl	800b2e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a806:	46c0      	nop			@ (mov r8, r8)
 800a808:	46bd      	mov	sp, r7
 800a80a:	b004      	add	sp, #16
 800a80c:	bd80      	pop	{r7, pc}
 800a80e:	46c0      	nop			@ (mov r8, r8)
 800a810:	ffffdf7f 	.word	0xffffdf7f
 800a814:	fffffeff 	.word	0xfffffeff

0800a818 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b086      	sub	sp, #24
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	60f8      	str	r0, [r7, #12]
 800a820:	60b9      	str	r1, [r7, #8]
 800a822:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a824:	2317      	movs	r3, #23
 800a826:	18fb      	adds	r3, r7, r3
 800a828:	2200      	movs	r2, #0
 800a82a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	223c      	movs	r2, #60	@ 0x3c
 800a830:	5c9b      	ldrb	r3, [r3, r2]
 800a832:	2b01      	cmp	r3, #1
 800a834:	d101      	bne.n	800a83a <HAL_TIM_PWM_ConfigChannel+0x22>
 800a836:	2302      	movs	r3, #2
 800a838:	e0e5      	b.n	800aa06 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	223c      	movs	r2, #60	@ 0x3c
 800a83e:	2101      	movs	r1, #1
 800a840:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2b14      	cmp	r3, #20
 800a846:	d900      	bls.n	800a84a <HAL_TIM_PWM_ConfigChannel+0x32>
 800a848:	e0d1      	b.n	800a9ee <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	009a      	lsls	r2, r3, #2
 800a84e:	4b70      	ldr	r3, [pc, #448]	@ (800aa10 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800a850:	18d3      	adds	r3, r2, r3
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	68ba      	ldr	r2, [r7, #8]
 800a85c:	0011      	movs	r1, r2
 800a85e:	0018      	movs	r0, r3
 800a860:	f000 f97e 	bl	800ab60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	699a      	ldr	r2, [r3, #24]
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	2108      	movs	r1, #8
 800a870:	430a      	orrs	r2, r1
 800a872:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	699a      	ldr	r2, [r3, #24]
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	2104      	movs	r1, #4
 800a880:	438a      	bics	r2, r1
 800a882:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	6999      	ldr	r1, [r3, #24]
 800a88a:	68bb      	ldr	r3, [r7, #8]
 800a88c:	691a      	ldr	r2, [r3, #16]
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	430a      	orrs	r2, r1
 800a894:	619a      	str	r2, [r3, #24]
      break;
 800a896:	e0af      	b.n	800a9f8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	68ba      	ldr	r2, [r7, #8]
 800a89e:	0011      	movs	r1, r2
 800a8a0:	0018      	movs	r0, r3
 800a8a2:	f000 f9dd 	bl	800ac60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	699a      	ldr	r2, [r3, #24]
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	2180      	movs	r1, #128	@ 0x80
 800a8b2:	0109      	lsls	r1, r1, #4
 800a8b4:	430a      	orrs	r2, r1
 800a8b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	699a      	ldr	r2, [r3, #24]
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	4954      	ldr	r1, [pc, #336]	@ (800aa14 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800a8c4:	400a      	ands	r2, r1
 800a8c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	6999      	ldr	r1, [r3, #24]
 800a8ce:	68bb      	ldr	r3, [r7, #8]
 800a8d0:	691b      	ldr	r3, [r3, #16]
 800a8d2:	021a      	lsls	r2, r3, #8
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	430a      	orrs	r2, r1
 800a8da:	619a      	str	r2, [r3, #24]
      break;
 800a8dc:	e08c      	b.n	800a9f8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	68ba      	ldr	r2, [r7, #8]
 800a8e4:	0011      	movs	r1, r2
 800a8e6:	0018      	movs	r0, r3
 800a8e8:	f000 fa38 	bl	800ad5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	69da      	ldr	r2, [r3, #28]
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	2108      	movs	r1, #8
 800a8f8:	430a      	orrs	r2, r1
 800a8fa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	69da      	ldr	r2, [r3, #28]
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	2104      	movs	r1, #4
 800a908:	438a      	bics	r2, r1
 800a90a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	69d9      	ldr	r1, [r3, #28]
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	691a      	ldr	r2, [r3, #16]
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	430a      	orrs	r2, r1
 800a91c:	61da      	str	r2, [r3, #28]
      break;
 800a91e:	e06b      	b.n	800a9f8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	68ba      	ldr	r2, [r7, #8]
 800a926:	0011      	movs	r1, r2
 800a928:	0018      	movs	r0, r3
 800a92a:	f000 fa99 	bl	800ae60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	69da      	ldr	r2, [r3, #28]
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	2180      	movs	r1, #128	@ 0x80
 800a93a:	0109      	lsls	r1, r1, #4
 800a93c:	430a      	orrs	r2, r1
 800a93e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	69da      	ldr	r2, [r3, #28]
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	4932      	ldr	r1, [pc, #200]	@ (800aa14 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800a94c:	400a      	ands	r2, r1
 800a94e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	69d9      	ldr	r1, [r3, #28]
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	691b      	ldr	r3, [r3, #16]
 800a95a:	021a      	lsls	r2, r3, #8
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	430a      	orrs	r2, r1
 800a962:	61da      	str	r2, [r3, #28]
      break;
 800a964:	e048      	b.n	800a9f8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	68ba      	ldr	r2, [r7, #8]
 800a96c:	0011      	movs	r1, r2
 800a96e:	0018      	movs	r0, r3
 800a970:	f000 fada 	bl	800af28 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	2108      	movs	r1, #8
 800a980:	430a      	orrs	r2, r1
 800a982:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	2104      	movs	r1, #4
 800a990:	438a      	bics	r2, r1
 800a992:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	691a      	ldr	r2, [r3, #16]
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	430a      	orrs	r2, r1
 800a9a4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a9a6:	e027      	b.n	800a9f8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	68ba      	ldr	r2, [r7, #8]
 800a9ae:	0011      	movs	r1, r2
 800a9b0:	0018      	movs	r0, r3
 800a9b2:	f000 fb13 	bl	800afdc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	2180      	movs	r1, #128	@ 0x80
 800a9c2:	0109      	lsls	r1, r1, #4
 800a9c4:	430a      	orrs	r2, r1
 800a9c6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	4910      	ldr	r1, [pc, #64]	@ (800aa14 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800a9d4:	400a      	ands	r2, r1
 800a9d6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	691b      	ldr	r3, [r3, #16]
 800a9e2:	021a      	lsls	r2, r3, #8
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	430a      	orrs	r2, r1
 800a9ea:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a9ec:	e004      	b.n	800a9f8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800a9ee:	2317      	movs	r3, #23
 800a9f0:	18fb      	adds	r3, r7, r3
 800a9f2:	2201      	movs	r2, #1
 800a9f4:	701a      	strb	r2, [r3, #0]
      break;
 800a9f6:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	223c      	movs	r2, #60	@ 0x3c
 800a9fc:	2100      	movs	r1, #0
 800a9fe:	5499      	strb	r1, [r3, r2]

  return status;
 800aa00:	2317      	movs	r3, #23
 800aa02:	18fb      	adds	r3, r7, r3
 800aa04:	781b      	ldrb	r3, [r3, #0]
}
 800aa06:	0018      	movs	r0, r3
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	b006      	add	sp, #24
 800aa0c:	bd80      	pop	{r7, pc}
 800aa0e:	46c0      	nop			@ (mov r8, r8)
 800aa10:	0800d658 	.word	0x0800d658
 800aa14:	fffffbff 	.word	0xfffffbff

0800aa18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b082      	sub	sp, #8
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aa20:	46c0      	nop			@ (mov r8, r8)
 800aa22:	46bd      	mov	sp, r7
 800aa24:	b002      	add	sp, #8
 800aa26:	bd80      	pop	{r7, pc}

0800aa28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b082      	sub	sp, #8
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aa30:	46c0      	nop			@ (mov r8, r8)
 800aa32:	46bd      	mov	sp, r7
 800aa34:	b002      	add	sp, #8
 800aa36:	bd80      	pop	{r7, pc}

0800aa38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b082      	sub	sp, #8
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aa40:	46c0      	nop			@ (mov r8, r8)
 800aa42:	46bd      	mov	sp, r7
 800aa44:	b002      	add	sp, #8
 800aa46:	bd80      	pop	{r7, pc}

0800aa48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b082      	sub	sp, #8
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aa50:	46c0      	nop			@ (mov r8, r8)
 800aa52:	46bd      	mov	sp, r7
 800aa54:	b002      	add	sp, #8
 800aa56:	bd80      	pop	{r7, pc}

0800aa58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b084      	sub	sp, #16
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
 800aa60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	4a37      	ldr	r2, [pc, #220]	@ (800ab48 <TIM_Base_SetConfig+0xf0>)
 800aa6c:	4293      	cmp	r3, r2
 800aa6e:	d008      	beq.n	800aa82 <TIM_Base_SetConfig+0x2a>
 800aa70:	687a      	ldr	r2, [r7, #4]
 800aa72:	2380      	movs	r3, #128	@ 0x80
 800aa74:	05db      	lsls	r3, r3, #23
 800aa76:	429a      	cmp	r2, r3
 800aa78:	d003      	beq.n	800aa82 <TIM_Base_SetConfig+0x2a>
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	4a33      	ldr	r2, [pc, #204]	@ (800ab4c <TIM_Base_SetConfig+0xf4>)
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	d108      	bne.n	800aa94 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	2270      	movs	r2, #112	@ 0x70
 800aa86:	4393      	bics	r3, r2
 800aa88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	685b      	ldr	r3, [r3, #4]
 800aa8e:	68fa      	ldr	r2, [r7, #12]
 800aa90:	4313      	orrs	r3, r2
 800aa92:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	4a2c      	ldr	r2, [pc, #176]	@ (800ab48 <TIM_Base_SetConfig+0xf0>)
 800aa98:	4293      	cmp	r3, r2
 800aa9a:	d014      	beq.n	800aac6 <TIM_Base_SetConfig+0x6e>
 800aa9c:	687a      	ldr	r2, [r7, #4]
 800aa9e:	2380      	movs	r3, #128	@ 0x80
 800aaa0:	05db      	lsls	r3, r3, #23
 800aaa2:	429a      	cmp	r2, r3
 800aaa4:	d00f      	beq.n	800aac6 <TIM_Base_SetConfig+0x6e>
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	4a28      	ldr	r2, [pc, #160]	@ (800ab4c <TIM_Base_SetConfig+0xf4>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d00b      	beq.n	800aac6 <TIM_Base_SetConfig+0x6e>
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	4a27      	ldr	r2, [pc, #156]	@ (800ab50 <TIM_Base_SetConfig+0xf8>)
 800aab2:	4293      	cmp	r3, r2
 800aab4:	d007      	beq.n	800aac6 <TIM_Base_SetConfig+0x6e>
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	4a26      	ldr	r2, [pc, #152]	@ (800ab54 <TIM_Base_SetConfig+0xfc>)
 800aaba:	4293      	cmp	r3, r2
 800aabc:	d003      	beq.n	800aac6 <TIM_Base_SetConfig+0x6e>
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	4a25      	ldr	r2, [pc, #148]	@ (800ab58 <TIM_Base_SetConfig+0x100>)
 800aac2:	4293      	cmp	r3, r2
 800aac4:	d108      	bne.n	800aad8 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	4a24      	ldr	r2, [pc, #144]	@ (800ab5c <TIM_Base_SetConfig+0x104>)
 800aaca:	4013      	ands	r3, r2
 800aacc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	68db      	ldr	r3, [r3, #12]
 800aad2:	68fa      	ldr	r2, [r7, #12]
 800aad4:	4313      	orrs	r3, r2
 800aad6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	2280      	movs	r2, #128	@ 0x80
 800aadc:	4393      	bics	r3, r2
 800aade:	001a      	movs	r2, r3
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	695b      	ldr	r3, [r3, #20]
 800aae4:	4313      	orrs	r3, r2
 800aae6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	68fa      	ldr	r2, [r7, #12]
 800aaec:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aaee:	683b      	ldr	r3, [r7, #0]
 800aaf0:	689a      	ldr	r2, [r3, #8]
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	681a      	ldr	r2, [r3, #0]
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	4a11      	ldr	r2, [pc, #68]	@ (800ab48 <TIM_Base_SetConfig+0xf0>)
 800ab02:	4293      	cmp	r3, r2
 800ab04:	d007      	beq.n	800ab16 <TIM_Base_SetConfig+0xbe>
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	4a12      	ldr	r2, [pc, #72]	@ (800ab54 <TIM_Base_SetConfig+0xfc>)
 800ab0a:	4293      	cmp	r3, r2
 800ab0c:	d003      	beq.n	800ab16 <TIM_Base_SetConfig+0xbe>
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	4a11      	ldr	r2, [pc, #68]	@ (800ab58 <TIM_Base_SetConfig+0x100>)
 800ab12:	4293      	cmp	r3, r2
 800ab14:	d103      	bne.n	800ab1e <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	691a      	ldr	r2, [r3, #16]
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	2201      	movs	r2, #1
 800ab22:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	691b      	ldr	r3, [r3, #16]
 800ab28:	2201      	movs	r2, #1
 800ab2a:	4013      	ands	r3, r2
 800ab2c:	2b01      	cmp	r3, #1
 800ab2e:	d106      	bne.n	800ab3e <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	691b      	ldr	r3, [r3, #16]
 800ab34:	2201      	movs	r2, #1
 800ab36:	4393      	bics	r3, r2
 800ab38:	001a      	movs	r2, r3
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	611a      	str	r2, [r3, #16]
  }
}
 800ab3e:	46c0      	nop			@ (mov r8, r8)
 800ab40:	46bd      	mov	sp, r7
 800ab42:	b004      	add	sp, #16
 800ab44:	bd80      	pop	{r7, pc}
 800ab46:	46c0      	nop			@ (mov r8, r8)
 800ab48:	40012c00 	.word	0x40012c00
 800ab4c:	40000400 	.word	0x40000400
 800ab50:	40002000 	.word	0x40002000
 800ab54:	40014400 	.word	0x40014400
 800ab58:	40014800 	.word	0x40014800
 800ab5c:	fffffcff 	.word	0xfffffcff

0800ab60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b086      	sub	sp, #24
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
 800ab68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6a1b      	ldr	r3, [r3, #32]
 800ab6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6a1b      	ldr	r3, [r3, #32]
 800ab74:	2201      	movs	r2, #1
 800ab76:	4393      	bics	r3, r2
 800ab78:	001a      	movs	r2, r3
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	685b      	ldr	r3, [r3, #4]
 800ab82:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	699b      	ldr	r3, [r3, #24]
 800ab88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	4a2e      	ldr	r2, [pc, #184]	@ (800ac48 <TIM_OC1_SetConfig+0xe8>)
 800ab8e:	4013      	ands	r3, r2
 800ab90:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	2203      	movs	r2, #3
 800ab96:	4393      	bics	r3, r2
 800ab98:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	68fa      	ldr	r2, [r7, #12]
 800aba0:	4313      	orrs	r3, r2
 800aba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800aba4:	697b      	ldr	r3, [r7, #20]
 800aba6:	2202      	movs	r2, #2
 800aba8:	4393      	bics	r3, r2
 800abaa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	689b      	ldr	r3, [r3, #8]
 800abb0:	697a      	ldr	r2, [r7, #20]
 800abb2:	4313      	orrs	r3, r2
 800abb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	4a24      	ldr	r2, [pc, #144]	@ (800ac4c <TIM_OC1_SetConfig+0xec>)
 800abba:	4293      	cmp	r3, r2
 800abbc:	d007      	beq.n	800abce <TIM_OC1_SetConfig+0x6e>
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	4a23      	ldr	r2, [pc, #140]	@ (800ac50 <TIM_OC1_SetConfig+0xf0>)
 800abc2:	4293      	cmp	r3, r2
 800abc4:	d003      	beq.n	800abce <TIM_OC1_SetConfig+0x6e>
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	4a22      	ldr	r2, [pc, #136]	@ (800ac54 <TIM_OC1_SetConfig+0xf4>)
 800abca:	4293      	cmp	r3, r2
 800abcc:	d10c      	bne.n	800abe8 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800abce:	697b      	ldr	r3, [r7, #20]
 800abd0:	2208      	movs	r2, #8
 800abd2:	4393      	bics	r3, r2
 800abd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	68db      	ldr	r3, [r3, #12]
 800abda:	697a      	ldr	r2, [r7, #20]
 800abdc:	4313      	orrs	r3, r2
 800abde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800abe0:	697b      	ldr	r3, [r7, #20]
 800abe2:	2204      	movs	r2, #4
 800abe4:	4393      	bics	r3, r2
 800abe6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	4a18      	ldr	r2, [pc, #96]	@ (800ac4c <TIM_OC1_SetConfig+0xec>)
 800abec:	4293      	cmp	r3, r2
 800abee:	d007      	beq.n	800ac00 <TIM_OC1_SetConfig+0xa0>
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	4a17      	ldr	r2, [pc, #92]	@ (800ac50 <TIM_OC1_SetConfig+0xf0>)
 800abf4:	4293      	cmp	r3, r2
 800abf6:	d003      	beq.n	800ac00 <TIM_OC1_SetConfig+0xa0>
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	4a16      	ldr	r2, [pc, #88]	@ (800ac54 <TIM_OC1_SetConfig+0xf4>)
 800abfc:	4293      	cmp	r3, r2
 800abfe:	d111      	bne.n	800ac24 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ac00:	693b      	ldr	r3, [r7, #16]
 800ac02:	4a15      	ldr	r2, [pc, #84]	@ (800ac58 <TIM_OC1_SetConfig+0xf8>)
 800ac04:	4013      	ands	r3, r2
 800ac06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ac08:	693b      	ldr	r3, [r7, #16]
 800ac0a:	4a14      	ldr	r2, [pc, #80]	@ (800ac5c <TIM_OC1_SetConfig+0xfc>)
 800ac0c:	4013      	ands	r3, r2
 800ac0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	695b      	ldr	r3, [r3, #20]
 800ac14:	693a      	ldr	r2, [r7, #16]
 800ac16:	4313      	orrs	r3, r2
 800ac18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	699b      	ldr	r3, [r3, #24]
 800ac1e:	693a      	ldr	r2, [r7, #16]
 800ac20:	4313      	orrs	r3, r2
 800ac22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	693a      	ldr	r2, [r7, #16]
 800ac28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	68fa      	ldr	r2, [r7, #12]
 800ac2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	685a      	ldr	r2, [r3, #4]
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	697a      	ldr	r2, [r7, #20]
 800ac3c:	621a      	str	r2, [r3, #32]
}
 800ac3e:	46c0      	nop			@ (mov r8, r8)
 800ac40:	46bd      	mov	sp, r7
 800ac42:	b006      	add	sp, #24
 800ac44:	bd80      	pop	{r7, pc}
 800ac46:	46c0      	nop			@ (mov r8, r8)
 800ac48:	fffeff8f 	.word	0xfffeff8f
 800ac4c:	40012c00 	.word	0x40012c00
 800ac50:	40014400 	.word	0x40014400
 800ac54:	40014800 	.word	0x40014800
 800ac58:	fffffeff 	.word	0xfffffeff
 800ac5c:	fffffdff 	.word	0xfffffdff

0800ac60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b086      	sub	sp, #24
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
 800ac68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	6a1b      	ldr	r3, [r3, #32]
 800ac6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	6a1b      	ldr	r3, [r3, #32]
 800ac74:	2210      	movs	r2, #16
 800ac76:	4393      	bics	r3, r2
 800ac78:	001a      	movs	r2, r3
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	685b      	ldr	r3, [r3, #4]
 800ac82:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	699b      	ldr	r3, [r3, #24]
 800ac88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	4a2c      	ldr	r2, [pc, #176]	@ (800ad40 <TIM_OC2_SetConfig+0xe0>)
 800ac8e:	4013      	ands	r3, r2
 800ac90:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	4a2b      	ldr	r2, [pc, #172]	@ (800ad44 <TIM_OC2_SetConfig+0xe4>)
 800ac96:	4013      	ands	r3, r2
 800ac98:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	021b      	lsls	r3, r3, #8
 800aca0:	68fa      	ldr	r2, [r7, #12]
 800aca2:	4313      	orrs	r3, r2
 800aca4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800aca6:	697b      	ldr	r3, [r7, #20]
 800aca8:	2220      	movs	r2, #32
 800acaa:	4393      	bics	r3, r2
 800acac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	689b      	ldr	r3, [r3, #8]
 800acb2:	011b      	lsls	r3, r3, #4
 800acb4:	697a      	ldr	r2, [r7, #20]
 800acb6:	4313      	orrs	r3, r2
 800acb8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	4a22      	ldr	r2, [pc, #136]	@ (800ad48 <TIM_OC2_SetConfig+0xe8>)
 800acbe:	4293      	cmp	r3, r2
 800acc0:	d10d      	bne.n	800acde <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800acc2:	697b      	ldr	r3, [r7, #20]
 800acc4:	2280      	movs	r2, #128	@ 0x80
 800acc6:	4393      	bics	r3, r2
 800acc8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	68db      	ldr	r3, [r3, #12]
 800acce:	011b      	lsls	r3, r3, #4
 800acd0:	697a      	ldr	r2, [r7, #20]
 800acd2:	4313      	orrs	r3, r2
 800acd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	2240      	movs	r2, #64	@ 0x40
 800acda:	4393      	bics	r3, r2
 800acdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	4a19      	ldr	r2, [pc, #100]	@ (800ad48 <TIM_OC2_SetConfig+0xe8>)
 800ace2:	4293      	cmp	r3, r2
 800ace4:	d007      	beq.n	800acf6 <TIM_OC2_SetConfig+0x96>
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	4a18      	ldr	r2, [pc, #96]	@ (800ad4c <TIM_OC2_SetConfig+0xec>)
 800acea:	4293      	cmp	r3, r2
 800acec:	d003      	beq.n	800acf6 <TIM_OC2_SetConfig+0x96>
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	4a17      	ldr	r2, [pc, #92]	@ (800ad50 <TIM_OC2_SetConfig+0xf0>)
 800acf2:	4293      	cmp	r3, r2
 800acf4:	d113      	bne.n	800ad1e <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800acf6:	693b      	ldr	r3, [r7, #16]
 800acf8:	4a16      	ldr	r2, [pc, #88]	@ (800ad54 <TIM_OC2_SetConfig+0xf4>)
 800acfa:	4013      	ands	r3, r2
 800acfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800acfe:	693b      	ldr	r3, [r7, #16]
 800ad00:	4a15      	ldr	r2, [pc, #84]	@ (800ad58 <TIM_OC2_SetConfig+0xf8>)
 800ad02:	4013      	ands	r3, r2
 800ad04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	695b      	ldr	r3, [r3, #20]
 800ad0a:	009b      	lsls	r3, r3, #2
 800ad0c:	693a      	ldr	r2, [r7, #16]
 800ad0e:	4313      	orrs	r3, r2
 800ad10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	699b      	ldr	r3, [r3, #24]
 800ad16:	009b      	lsls	r3, r3, #2
 800ad18:	693a      	ldr	r2, [r7, #16]
 800ad1a:	4313      	orrs	r3, r2
 800ad1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	693a      	ldr	r2, [r7, #16]
 800ad22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	68fa      	ldr	r2, [r7, #12]
 800ad28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	685a      	ldr	r2, [r3, #4]
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	697a      	ldr	r2, [r7, #20]
 800ad36:	621a      	str	r2, [r3, #32]
}
 800ad38:	46c0      	nop			@ (mov r8, r8)
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	b006      	add	sp, #24
 800ad3e:	bd80      	pop	{r7, pc}
 800ad40:	feff8fff 	.word	0xfeff8fff
 800ad44:	fffffcff 	.word	0xfffffcff
 800ad48:	40012c00 	.word	0x40012c00
 800ad4c:	40014400 	.word	0x40014400
 800ad50:	40014800 	.word	0x40014800
 800ad54:	fffffbff 	.word	0xfffffbff
 800ad58:	fffff7ff 	.word	0xfffff7ff

0800ad5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b086      	sub	sp, #24
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
 800ad64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6a1b      	ldr	r3, [r3, #32]
 800ad6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	6a1b      	ldr	r3, [r3, #32]
 800ad70:	4a31      	ldr	r2, [pc, #196]	@ (800ae38 <TIM_OC3_SetConfig+0xdc>)
 800ad72:	401a      	ands	r2, r3
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	685b      	ldr	r3, [r3, #4]
 800ad7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	69db      	ldr	r3, [r3, #28]
 800ad82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	4a2d      	ldr	r2, [pc, #180]	@ (800ae3c <TIM_OC3_SetConfig+0xe0>)
 800ad88:	4013      	ands	r3, r2
 800ad8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	2203      	movs	r2, #3
 800ad90:	4393      	bics	r3, r2
 800ad92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	68fa      	ldr	r2, [r7, #12]
 800ad9a:	4313      	orrs	r3, r2
 800ad9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ad9e:	697b      	ldr	r3, [r7, #20]
 800ada0:	4a27      	ldr	r2, [pc, #156]	@ (800ae40 <TIM_OC3_SetConfig+0xe4>)
 800ada2:	4013      	ands	r3, r2
 800ada4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	689b      	ldr	r3, [r3, #8]
 800adaa:	021b      	lsls	r3, r3, #8
 800adac:	697a      	ldr	r2, [r7, #20]
 800adae:	4313      	orrs	r3, r2
 800adb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	4a23      	ldr	r2, [pc, #140]	@ (800ae44 <TIM_OC3_SetConfig+0xe8>)
 800adb6:	4293      	cmp	r3, r2
 800adb8:	d10d      	bne.n	800add6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800adba:	697b      	ldr	r3, [r7, #20]
 800adbc:	4a22      	ldr	r2, [pc, #136]	@ (800ae48 <TIM_OC3_SetConfig+0xec>)
 800adbe:	4013      	ands	r3, r2
 800adc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	68db      	ldr	r3, [r3, #12]
 800adc6:	021b      	lsls	r3, r3, #8
 800adc8:	697a      	ldr	r2, [r7, #20]
 800adca:	4313      	orrs	r3, r2
 800adcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	4a1e      	ldr	r2, [pc, #120]	@ (800ae4c <TIM_OC3_SetConfig+0xf0>)
 800add2:	4013      	ands	r3, r2
 800add4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	4a1a      	ldr	r2, [pc, #104]	@ (800ae44 <TIM_OC3_SetConfig+0xe8>)
 800adda:	4293      	cmp	r3, r2
 800addc:	d007      	beq.n	800adee <TIM_OC3_SetConfig+0x92>
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	4a1b      	ldr	r2, [pc, #108]	@ (800ae50 <TIM_OC3_SetConfig+0xf4>)
 800ade2:	4293      	cmp	r3, r2
 800ade4:	d003      	beq.n	800adee <TIM_OC3_SetConfig+0x92>
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	4a1a      	ldr	r2, [pc, #104]	@ (800ae54 <TIM_OC3_SetConfig+0xf8>)
 800adea:	4293      	cmp	r3, r2
 800adec:	d113      	bne.n	800ae16 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800adee:	693b      	ldr	r3, [r7, #16]
 800adf0:	4a19      	ldr	r2, [pc, #100]	@ (800ae58 <TIM_OC3_SetConfig+0xfc>)
 800adf2:	4013      	ands	r3, r2
 800adf4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800adf6:	693b      	ldr	r3, [r7, #16]
 800adf8:	4a18      	ldr	r2, [pc, #96]	@ (800ae5c <TIM_OC3_SetConfig+0x100>)
 800adfa:	4013      	ands	r3, r2
 800adfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	695b      	ldr	r3, [r3, #20]
 800ae02:	011b      	lsls	r3, r3, #4
 800ae04:	693a      	ldr	r2, [r7, #16]
 800ae06:	4313      	orrs	r3, r2
 800ae08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	699b      	ldr	r3, [r3, #24]
 800ae0e:	011b      	lsls	r3, r3, #4
 800ae10:	693a      	ldr	r2, [r7, #16]
 800ae12:	4313      	orrs	r3, r2
 800ae14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	693a      	ldr	r2, [r7, #16]
 800ae1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	68fa      	ldr	r2, [r7, #12]
 800ae20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	685a      	ldr	r2, [r3, #4]
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	697a      	ldr	r2, [r7, #20]
 800ae2e:	621a      	str	r2, [r3, #32]
}
 800ae30:	46c0      	nop			@ (mov r8, r8)
 800ae32:	46bd      	mov	sp, r7
 800ae34:	b006      	add	sp, #24
 800ae36:	bd80      	pop	{r7, pc}
 800ae38:	fffffeff 	.word	0xfffffeff
 800ae3c:	fffeff8f 	.word	0xfffeff8f
 800ae40:	fffffdff 	.word	0xfffffdff
 800ae44:	40012c00 	.word	0x40012c00
 800ae48:	fffff7ff 	.word	0xfffff7ff
 800ae4c:	fffffbff 	.word	0xfffffbff
 800ae50:	40014400 	.word	0x40014400
 800ae54:	40014800 	.word	0x40014800
 800ae58:	ffffefff 	.word	0xffffefff
 800ae5c:	ffffdfff 	.word	0xffffdfff

0800ae60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b086      	sub	sp, #24
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
 800ae68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	6a1b      	ldr	r3, [r3, #32]
 800ae6e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	6a1b      	ldr	r3, [r3, #32]
 800ae74:	4a24      	ldr	r2, [pc, #144]	@ (800af08 <TIM_OC4_SetConfig+0xa8>)
 800ae76:	401a      	ands	r2, r3
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	685b      	ldr	r3, [r3, #4]
 800ae80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	69db      	ldr	r3, [r3, #28]
 800ae86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	4a20      	ldr	r2, [pc, #128]	@ (800af0c <TIM_OC4_SetConfig+0xac>)
 800ae8c:	4013      	ands	r3, r2
 800ae8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	4a1f      	ldr	r2, [pc, #124]	@ (800af10 <TIM_OC4_SetConfig+0xb0>)
 800ae94:	4013      	ands	r3, r2
 800ae96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	021b      	lsls	r3, r3, #8
 800ae9e:	68fa      	ldr	r2, [r7, #12]
 800aea0:	4313      	orrs	r3, r2
 800aea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800aea4:	693b      	ldr	r3, [r7, #16]
 800aea6:	4a1b      	ldr	r2, [pc, #108]	@ (800af14 <TIM_OC4_SetConfig+0xb4>)
 800aea8:	4013      	ands	r3, r2
 800aeaa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	689b      	ldr	r3, [r3, #8]
 800aeb0:	031b      	lsls	r3, r3, #12
 800aeb2:	693a      	ldr	r2, [r7, #16]
 800aeb4:	4313      	orrs	r3, r2
 800aeb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	4a17      	ldr	r2, [pc, #92]	@ (800af18 <TIM_OC4_SetConfig+0xb8>)
 800aebc:	4293      	cmp	r3, r2
 800aebe:	d007      	beq.n	800aed0 <TIM_OC4_SetConfig+0x70>
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	4a16      	ldr	r2, [pc, #88]	@ (800af1c <TIM_OC4_SetConfig+0xbc>)
 800aec4:	4293      	cmp	r3, r2
 800aec6:	d003      	beq.n	800aed0 <TIM_OC4_SetConfig+0x70>
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	4a15      	ldr	r2, [pc, #84]	@ (800af20 <TIM_OC4_SetConfig+0xc0>)
 800aecc:	4293      	cmp	r3, r2
 800aece:	d109      	bne.n	800aee4 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800aed0:	697b      	ldr	r3, [r7, #20]
 800aed2:	4a14      	ldr	r2, [pc, #80]	@ (800af24 <TIM_OC4_SetConfig+0xc4>)
 800aed4:	4013      	ands	r3, r2
 800aed6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	695b      	ldr	r3, [r3, #20]
 800aedc:	019b      	lsls	r3, r3, #6
 800aede:	697a      	ldr	r2, [r7, #20]
 800aee0:	4313      	orrs	r3, r2
 800aee2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	697a      	ldr	r2, [r7, #20]
 800aee8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	68fa      	ldr	r2, [r7, #12]
 800aeee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	685a      	ldr	r2, [r3, #4]
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	693a      	ldr	r2, [r7, #16]
 800aefc:	621a      	str	r2, [r3, #32]
}
 800aefe:	46c0      	nop			@ (mov r8, r8)
 800af00:	46bd      	mov	sp, r7
 800af02:	b006      	add	sp, #24
 800af04:	bd80      	pop	{r7, pc}
 800af06:	46c0      	nop			@ (mov r8, r8)
 800af08:	ffffefff 	.word	0xffffefff
 800af0c:	feff8fff 	.word	0xfeff8fff
 800af10:	fffffcff 	.word	0xfffffcff
 800af14:	ffffdfff 	.word	0xffffdfff
 800af18:	40012c00 	.word	0x40012c00
 800af1c:	40014400 	.word	0x40014400
 800af20:	40014800 	.word	0x40014800
 800af24:	ffffbfff 	.word	0xffffbfff

0800af28 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b086      	sub	sp, #24
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
 800af30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	6a1b      	ldr	r3, [r3, #32]
 800af36:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6a1b      	ldr	r3, [r3, #32]
 800af3c:	4a21      	ldr	r2, [pc, #132]	@ (800afc4 <TIM_OC5_SetConfig+0x9c>)
 800af3e:	401a      	ands	r2, r3
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	685b      	ldr	r3, [r3, #4]
 800af48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	4a1d      	ldr	r2, [pc, #116]	@ (800afc8 <TIM_OC5_SetConfig+0xa0>)
 800af54:	4013      	ands	r3, r2
 800af56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	68fa      	ldr	r2, [r7, #12]
 800af5e:	4313      	orrs	r3, r2
 800af60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800af62:	693b      	ldr	r3, [r7, #16]
 800af64:	4a19      	ldr	r2, [pc, #100]	@ (800afcc <TIM_OC5_SetConfig+0xa4>)
 800af66:	4013      	ands	r3, r2
 800af68:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	689b      	ldr	r3, [r3, #8]
 800af6e:	041b      	lsls	r3, r3, #16
 800af70:	693a      	ldr	r2, [r7, #16]
 800af72:	4313      	orrs	r3, r2
 800af74:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	4a15      	ldr	r2, [pc, #84]	@ (800afd0 <TIM_OC5_SetConfig+0xa8>)
 800af7a:	4293      	cmp	r3, r2
 800af7c:	d007      	beq.n	800af8e <TIM_OC5_SetConfig+0x66>
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	4a14      	ldr	r2, [pc, #80]	@ (800afd4 <TIM_OC5_SetConfig+0xac>)
 800af82:	4293      	cmp	r3, r2
 800af84:	d003      	beq.n	800af8e <TIM_OC5_SetConfig+0x66>
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	4a13      	ldr	r2, [pc, #76]	@ (800afd8 <TIM_OC5_SetConfig+0xb0>)
 800af8a:	4293      	cmp	r3, r2
 800af8c:	d109      	bne.n	800afa2 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800af8e:	697b      	ldr	r3, [r7, #20]
 800af90:	4a0c      	ldr	r2, [pc, #48]	@ (800afc4 <TIM_OC5_SetConfig+0x9c>)
 800af92:	4013      	ands	r3, r2
 800af94:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	695b      	ldr	r3, [r3, #20]
 800af9a:	021b      	lsls	r3, r3, #8
 800af9c:	697a      	ldr	r2, [r7, #20]
 800af9e:	4313      	orrs	r3, r2
 800afa0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	697a      	ldr	r2, [r7, #20]
 800afa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	68fa      	ldr	r2, [r7, #12]
 800afac:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	685a      	ldr	r2, [r3, #4]
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	693a      	ldr	r2, [r7, #16]
 800afba:	621a      	str	r2, [r3, #32]
}
 800afbc:	46c0      	nop			@ (mov r8, r8)
 800afbe:	46bd      	mov	sp, r7
 800afc0:	b006      	add	sp, #24
 800afc2:	bd80      	pop	{r7, pc}
 800afc4:	fffeffff 	.word	0xfffeffff
 800afc8:	fffeff8f 	.word	0xfffeff8f
 800afcc:	fffdffff 	.word	0xfffdffff
 800afd0:	40012c00 	.word	0x40012c00
 800afd4:	40014400 	.word	0x40014400
 800afd8:	40014800 	.word	0x40014800

0800afdc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b086      	sub	sp, #24
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
 800afe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	6a1b      	ldr	r3, [r3, #32]
 800afea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	6a1b      	ldr	r3, [r3, #32]
 800aff0:	4a22      	ldr	r2, [pc, #136]	@ (800b07c <TIM_OC6_SetConfig+0xa0>)
 800aff2:	401a      	ands	r2, r3
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	685b      	ldr	r3, [r3, #4]
 800affc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	4a1e      	ldr	r2, [pc, #120]	@ (800b080 <TIM_OC6_SetConfig+0xa4>)
 800b008:	4013      	ands	r3, r2
 800b00a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b00c:	683b      	ldr	r3, [r7, #0]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	021b      	lsls	r3, r3, #8
 800b012:	68fa      	ldr	r2, [r7, #12]
 800b014:	4313      	orrs	r3, r2
 800b016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b018:	693b      	ldr	r3, [r7, #16]
 800b01a:	4a1a      	ldr	r2, [pc, #104]	@ (800b084 <TIM_OC6_SetConfig+0xa8>)
 800b01c:	4013      	ands	r3, r2
 800b01e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	689b      	ldr	r3, [r3, #8]
 800b024:	051b      	lsls	r3, r3, #20
 800b026:	693a      	ldr	r2, [r7, #16]
 800b028:	4313      	orrs	r3, r2
 800b02a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	4a16      	ldr	r2, [pc, #88]	@ (800b088 <TIM_OC6_SetConfig+0xac>)
 800b030:	4293      	cmp	r3, r2
 800b032:	d007      	beq.n	800b044 <TIM_OC6_SetConfig+0x68>
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	4a15      	ldr	r2, [pc, #84]	@ (800b08c <TIM_OC6_SetConfig+0xb0>)
 800b038:	4293      	cmp	r3, r2
 800b03a:	d003      	beq.n	800b044 <TIM_OC6_SetConfig+0x68>
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	4a14      	ldr	r2, [pc, #80]	@ (800b090 <TIM_OC6_SetConfig+0xb4>)
 800b040:	4293      	cmp	r3, r2
 800b042:	d109      	bne.n	800b058 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b044:	697b      	ldr	r3, [r7, #20]
 800b046:	4a13      	ldr	r2, [pc, #76]	@ (800b094 <TIM_OC6_SetConfig+0xb8>)
 800b048:	4013      	ands	r3, r2
 800b04a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	695b      	ldr	r3, [r3, #20]
 800b050:	029b      	lsls	r3, r3, #10
 800b052:	697a      	ldr	r2, [r7, #20]
 800b054:	4313      	orrs	r3, r2
 800b056:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	697a      	ldr	r2, [r7, #20]
 800b05c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	68fa      	ldr	r2, [r7, #12]
 800b062:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	685a      	ldr	r2, [r3, #4]
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	693a      	ldr	r2, [r7, #16]
 800b070:	621a      	str	r2, [r3, #32]
}
 800b072:	46c0      	nop			@ (mov r8, r8)
 800b074:	46bd      	mov	sp, r7
 800b076:	b006      	add	sp, #24
 800b078:	bd80      	pop	{r7, pc}
 800b07a:	46c0      	nop			@ (mov r8, r8)
 800b07c:	ffefffff 	.word	0xffefffff
 800b080:	feff8fff 	.word	0xfeff8fff
 800b084:	ffdfffff 	.word	0xffdfffff
 800b088:	40012c00 	.word	0x40012c00
 800b08c:	40014400 	.word	0x40014400
 800b090:	40014800 	.word	0x40014800
 800b094:	fffbffff 	.word	0xfffbffff

0800b098 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b086      	sub	sp, #24
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	60f8      	str	r0, [r7, #12]
 800b0a0:	60b9      	str	r1, [r7, #8]
 800b0a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	221f      	movs	r2, #31
 800b0a8:	4013      	ands	r3, r2
 800b0aa:	2201      	movs	r2, #1
 800b0ac:	409a      	lsls	r2, r3
 800b0ae:	0013      	movs	r3, r2
 800b0b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	6a1b      	ldr	r3, [r3, #32]
 800b0b6:	697a      	ldr	r2, [r7, #20]
 800b0b8:	43d2      	mvns	r2, r2
 800b0ba:	401a      	ands	r2, r3
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	6a1a      	ldr	r2, [r3, #32]
 800b0c4:	68bb      	ldr	r3, [r7, #8]
 800b0c6:	211f      	movs	r1, #31
 800b0c8:	400b      	ands	r3, r1
 800b0ca:	6879      	ldr	r1, [r7, #4]
 800b0cc:	4099      	lsls	r1, r3
 800b0ce:	000b      	movs	r3, r1
 800b0d0:	431a      	orrs	r2, r3
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	621a      	str	r2, [r3, #32]
}
 800b0d6:	46c0      	nop			@ (mov r8, r8)
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	b006      	add	sp, #24
 800b0dc:	bd80      	pop	{r7, pc}
	...

0800b0e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b084      	sub	sp, #16
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
 800b0e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	223c      	movs	r2, #60	@ 0x3c
 800b0ee:	5c9b      	ldrb	r3, [r3, r2]
 800b0f0:	2b01      	cmp	r3, #1
 800b0f2:	d101      	bne.n	800b0f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b0f4:	2302      	movs	r3, #2
 800b0f6:	e050      	b.n	800b19a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	223c      	movs	r2, #60	@ 0x3c
 800b0fc:	2101      	movs	r1, #1
 800b0fe:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	223d      	movs	r2, #61	@ 0x3d
 800b104:	2102      	movs	r1, #2
 800b106:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	685b      	ldr	r3, [r3, #4]
 800b10e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	689b      	ldr	r3, [r3, #8]
 800b116:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	4a21      	ldr	r2, [pc, #132]	@ (800b1a4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b11e:	4293      	cmp	r3, r2
 800b120:	d108      	bne.n	800b134 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	4a20      	ldr	r2, [pc, #128]	@ (800b1a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b126:	4013      	ands	r3, r2
 800b128:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	685b      	ldr	r3, [r3, #4]
 800b12e:	68fa      	ldr	r2, [r7, #12]
 800b130:	4313      	orrs	r3, r2
 800b132:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	2270      	movs	r2, #112	@ 0x70
 800b138:	4393      	bics	r3, r2
 800b13a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	68fa      	ldr	r2, [r7, #12]
 800b142:	4313      	orrs	r3, r2
 800b144:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	68fa      	ldr	r2, [r7, #12]
 800b14c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	4a14      	ldr	r2, [pc, #80]	@ (800b1a4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b154:	4293      	cmp	r3, r2
 800b156:	d00a      	beq.n	800b16e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681a      	ldr	r2, [r3, #0]
 800b15c:	2380      	movs	r3, #128	@ 0x80
 800b15e:	05db      	lsls	r3, r3, #23
 800b160:	429a      	cmp	r2, r3
 800b162:	d004      	beq.n	800b16e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	4a10      	ldr	r2, [pc, #64]	@ (800b1ac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b16a:	4293      	cmp	r3, r2
 800b16c:	d10c      	bne.n	800b188 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b16e:	68bb      	ldr	r3, [r7, #8]
 800b170:	2280      	movs	r2, #128	@ 0x80
 800b172:	4393      	bics	r3, r2
 800b174:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	689b      	ldr	r3, [r3, #8]
 800b17a:	68ba      	ldr	r2, [r7, #8]
 800b17c:	4313      	orrs	r3, r2
 800b17e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	68ba      	ldr	r2, [r7, #8]
 800b186:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	223d      	movs	r2, #61	@ 0x3d
 800b18c:	2101      	movs	r1, #1
 800b18e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	223c      	movs	r2, #60	@ 0x3c
 800b194:	2100      	movs	r1, #0
 800b196:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b198:	2300      	movs	r3, #0
}
 800b19a:	0018      	movs	r0, r3
 800b19c:	46bd      	mov	sp, r7
 800b19e:	b004      	add	sp, #16
 800b1a0:	bd80      	pop	{r7, pc}
 800b1a2:	46c0      	nop			@ (mov r8, r8)
 800b1a4:	40012c00 	.word	0x40012c00
 800b1a8:	ff0fffff 	.word	0xff0fffff
 800b1ac:	40000400 	.word	0x40000400

0800b1b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b084      	sub	sp, #16
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
 800b1b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	223c      	movs	r2, #60	@ 0x3c
 800b1c2:	5c9b      	ldrb	r3, [r3, r2]
 800b1c4:	2b01      	cmp	r3, #1
 800b1c6:	d101      	bne.n	800b1cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b1c8:	2302      	movs	r3, #2
 800b1ca:	e06f      	b.n	800b2ac <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	223c      	movs	r2, #60	@ 0x3c
 800b1d0:	2101      	movs	r1, #1
 800b1d2:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	22ff      	movs	r2, #255	@ 0xff
 800b1d8:	4393      	bics	r3, r2
 800b1da:	001a      	movs	r2, r3
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	68db      	ldr	r3, [r3, #12]
 800b1e0:	4313      	orrs	r3, r2
 800b1e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	4a33      	ldr	r2, [pc, #204]	@ (800b2b4 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 800b1e8:	401a      	ands	r2, r3
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	689b      	ldr	r3, [r3, #8]
 800b1ee:	4313      	orrs	r3, r2
 800b1f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	4a30      	ldr	r2, [pc, #192]	@ (800b2b8 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800b1f6:	401a      	ands	r2, r3
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	685b      	ldr	r3, [r3, #4]
 800b1fc:	4313      	orrs	r3, r2
 800b1fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	4a2e      	ldr	r2, [pc, #184]	@ (800b2bc <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 800b204:	401a      	ands	r2, r3
 800b206:	683b      	ldr	r3, [r7, #0]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	4313      	orrs	r3, r2
 800b20c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	4a2b      	ldr	r2, [pc, #172]	@ (800b2c0 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800b212:	401a      	ands	r2, r3
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	691b      	ldr	r3, [r3, #16]
 800b218:	4313      	orrs	r3, r2
 800b21a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	4a29      	ldr	r2, [pc, #164]	@ (800b2c4 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800b220:	401a      	ands	r2, r3
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	695b      	ldr	r3, [r3, #20]
 800b226:	4313      	orrs	r3, r2
 800b228:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	4a26      	ldr	r2, [pc, #152]	@ (800b2c8 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800b22e:	401a      	ands	r2, r3
 800b230:	683b      	ldr	r3, [r7, #0]
 800b232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b234:	4313      	orrs	r3, r2
 800b236:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	4a24      	ldr	r2, [pc, #144]	@ (800b2cc <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800b23c:	401a      	ands	r2, r3
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	699b      	ldr	r3, [r3, #24]
 800b242:	041b      	lsls	r3, r3, #16
 800b244:	4313      	orrs	r3, r2
 800b246:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	4a21      	ldr	r2, [pc, #132]	@ (800b2d0 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800b24c:	401a      	ands	r2, r3
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	69db      	ldr	r3, [r3, #28]
 800b252:	4313      	orrs	r3, r2
 800b254:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	4a1e      	ldr	r2, [pc, #120]	@ (800b2d4 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800b25c:	4293      	cmp	r3, r2
 800b25e:	d11c      	bne.n	800b29a <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	4a1d      	ldr	r2, [pc, #116]	@ (800b2d8 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800b264:	401a      	ands	r2, r3
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b26a:	051b      	lsls	r3, r3, #20
 800b26c:	4313      	orrs	r3, r2
 800b26e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	4a1a      	ldr	r2, [pc, #104]	@ (800b2dc <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800b274:	401a      	ands	r2, r3
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	6a1b      	ldr	r3, [r3, #32]
 800b27a:	4313      	orrs	r3, r2
 800b27c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	4a17      	ldr	r2, [pc, #92]	@ (800b2e0 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800b282:	401a      	ands	r2, r3
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b288:	4313      	orrs	r3, r2
 800b28a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	4a15      	ldr	r2, [pc, #84]	@ (800b2e4 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800b290:	401a      	ands	r2, r3
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b296:	4313      	orrs	r3, r2
 800b298:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	68fa      	ldr	r2, [r7, #12]
 800b2a0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	223c      	movs	r2, #60	@ 0x3c
 800b2a6:	2100      	movs	r1, #0
 800b2a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b2aa:	2300      	movs	r3, #0
}
 800b2ac:	0018      	movs	r0, r3
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	b004      	add	sp, #16
 800b2b2:	bd80      	pop	{r7, pc}
 800b2b4:	fffffcff 	.word	0xfffffcff
 800b2b8:	fffffbff 	.word	0xfffffbff
 800b2bc:	fffff7ff 	.word	0xfffff7ff
 800b2c0:	ffffefff 	.word	0xffffefff
 800b2c4:	ffffdfff 	.word	0xffffdfff
 800b2c8:	ffffbfff 	.word	0xffffbfff
 800b2cc:	fff0ffff 	.word	0xfff0ffff
 800b2d0:	efffffff 	.word	0xefffffff
 800b2d4:	40012c00 	.word	0x40012c00
 800b2d8:	ff0fffff 	.word	0xff0fffff
 800b2dc:	feffffff 	.word	0xfeffffff
 800b2e0:	fdffffff 	.word	0xfdffffff
 800b2e4:	dfffffff 	.word	0xdfffffff

0800b2e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b082      	sub	sp, #8
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b2f0:	46c0      	nop			@ (mov r8, r8)
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	b002      	add	sp, #8
 800b2f6:	bd80      	pop	{r7, pc}

0800b2f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b082      	sub	sp, #8
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b300:	46c0      	nop			@ (mov r8, r8)
 800b302:	46bd      	mov	sp, r7
 800b304:	b002      	add	sp, #8
 800b306:	bd80      	pop	{r7, pc}

0800b308 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b082      	sub	sp, #8
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b310:	46c0      	nop			@ (mov r8, r8)
 800b312:	46bd      	mov	sp, r7
 800b314:	b002      	add	sp, #8
 800b316:	bd80      	pop	{r7, pc}

0800b318 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b082      	sub	sp, #8
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d101      	bne.n	800b32a <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800b326:	2301      	movs	r3, #1
 800b328:	e032      	b.n	800b390 <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	2288      	movs	r2, #136	@ 0x88
 800b32e:	2124      	movs	r1, #36	@ 0x24
 800b330:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	681a      	ldr	r2, [r3, #0]
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	2101      	movs	r1, #1
 800b33e:	438a      	bics	r2, r1
 800b340:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	2200      	movs	r2, #0
 800b348:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	2200      	movs	r2, #0
 800b350:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	2200      	movs	r2, #0
 800b358:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	0018      	movs	r0, r3
 800b35e:	f7fa fa1d 	bl	800579c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	2290      	movs	r2, #144	@ 0x90
 800b366:	2100      	movs	r1, #0
 800b368:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	2288      	movs	r2, #136	@ 0x88
 800b36e:	2100      	movs	r1, #0
 800b370:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	228c      	movs	r2, #140	@ 0x8c
 800b376:	2100      	movs	r1, #0
 800b378:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	2200      	movs	r2, #0
 800b37e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2200      	movs	r2, #0
 800b384:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	2284      	movs	r2, #132	@ 0x84
 800b38a:	2100      	movs	r1, #0
 800b38c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b38e:	2300      	movs	r3, #0
}
 800b390:	0018      	movs	r0, r3
 800b392:	46bd      	mov	sp, r7
 800b394:	b002      	add	sp, #8
 800b396:	bd80      	pop	{r7, pc}

0800b398 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b088      	sub	sp, #32
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	60f8      	str	r0, [r7, #12]
 800b3a0:	60b9      	str	r1, [r7, #8]
 800b3a2:	1dbb      	adds	r3, r7, #6
 800b3a4:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	2288      	movs	r2, #136	@ 0x88
 800b3aa:	589b      	ldr	r3, [r3, r2]
 800b3ac:	2b20      	cmp	r3, #32
 800b3ae:	d000      	beq.n	800b3b2 <HAL_UART_Transmit_DMA+0x1a>
 800b3b0:	e079      	b.n	800b4a6 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b3b2:	68bb      	ldr	r3, [r7, #8]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d003      	beq.n	800b3c0 <HAL_UART_Transmit_DMA+0x28>
 800b3b8:	1dbb      	adds	r3, r7, #6
 800b3ba:	881b      	ldrh	r3, [r3, #0]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d101      	bne.n	800b3c4 <HAL_UART_Transmit_DMA+0x2c>
    {
      return HAL_ERROR;
 800b3c0:	2301      	movs	r3, #1
 800b3c2:	e071      	b.n	800b4a8 <HAL_UART_Transmit_DMA+0x110>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	689a      	ldr	r2, [r3, #8]
 800b3c8:	2380      	movs	r3, #128	@ 0x80
 800b3ca:	015b      	lsls	r3, r3, #5
 800b3cc:	429a      	cmp	r2, r3
 800b3ce:	d109      	bne.n	800b3e4 <HAL_UART_Transmit_DMA+0x4c>
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	691b      	ldr	r3, [r3, #16]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d105      	bne.n	800b3e4 <HAL_UART_Transmit_DMA+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	2201      	movs	r2, #1
 800b3dc:	4013      	ands	r3, r2
 800b3de:	d001      	beq.n	800b3e4 <HAL_UART_Transmit_DMA+0x4c>
      {
        return  HAL_ERROR;
 800b3e0:	2301      	movs	r3, #1
 800b3e2:	e061      	b.n	800b4a8 <HAL_UART_Transmit_DMA+0x110>
      }
    }

    huart->pTxBuffPtr  = pData;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	68ba      	ldr	r2, [r7, #8]
 800b3e8:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	1dba      	adds	r2, r7, #6
 800b3ee:	2154      	movs	r1, #84	@ 0x54
 800b3f0:	8812      	ldrh	r2, [r2, #0]
 800b3f2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	1dba      	adds	r2, r7, #6
 800b3f8:	2156      	movs	r1, #86	@ 0x56
 800b3fa:	8812      	ldrh	r2, [r2, #0]
 800b3fc:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	2290      	movs	r2, #144	@ 0x90
 800b402:	2100      	movs	r1, #0
 800b404:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	2288      	movs	r2, #136	@ 0x88
 800b40a:	2121      	movs	r1, #33	@ 0x21
 800b40c:	5099      	str	r1, [r3, r2]

    if (huart->hdmatx != NULL)
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b412:	2b00      	cmp	r3, #0
 800b414:	d028      	beq.n	800b468 <HAL_UART_Transmit_DMA+0xd0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b41a:	4a25      	ldr	r2, [pc, #148]	@ (800b4b0 <HAL_UART_Transmit_DMA+0x118>)
 800b41c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b422:	4a24      	ldr	r2, [pc, #144]	@ (800b4b4 <HAL_UART_Transmit_DMA+0x11c>)
 800b424:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b42a:	4a23      	ldr	r2, [pc, #140]	@ (800b4b8 <HAL_UART_Transmit_DMA+0x120>)
 800b42c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b432:	2200      	movs	r2, #0
 800b434:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b43e:	0019      	movs	r1, r3
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	3328      	adds	r3, #40	@ 0x28
 800b446:	001a      	movs	r2, r3
 800b448:	1dbb      	adds	r3, r7, #6
 800b44a:	881b      	ldrh	r3, [r3, #0]
 800b44c:	f7fa fdfa 	bl	8006044 <HAL_DMA_Start_IT>
 800b450:	1e03      	subs	r3, r0, #0
 800b452:	d009      	beq.n	800b468 <HAL_UART_Transmit_DMA+0xd0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	2290      	movs	r2, #144	@ 0x90
 800b458:	2110      	movs	r1, #16
 800b45a:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	2288      	movs	r2, #136	@ 0x88
 800b460:	2120      	movs	r1, #32
 800b462:	5099      	str	r1, [r3, r2]

        return HAL_ERROR;
 800b464:	2301      	movs	r3, #1
 800b466:	e01f      	b.n	800b4a8 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	2240      	movs	r2, #64	@ 0x40
 800b46e:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800b470:	f3ef 8310 	mrs	r3, PRIMASK
 800b474:	613b      	str	r3, [r7, #16]
  return(result);
 800b476:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b478:	61fb      	str	r3, [r7, #28]
 800b47a:	2301      	movs	r3, #1
 800b47c:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b47e:	697b      	ldr	r3, [r7, #20]
 800b480:	f383 8810 	msr	PRIMASK, r3
}
 800b484:	46c0      	nop			@ (mov r8, r8)
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	689a      	ldr	r2, [r3, #8]
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	2180      	movs	r1, #128	@ 0x80
 800b492:	430a      	orrs	r2, r1
 800b494:	609a      	str	r2, [r3, #8]
 800b496:	69fb      	ldr	r3, [r7, #28]
 800b498:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b49a:	69bb      	ldr	r3, [r7, #24]
 800b49c:	f383 8810 	msr	PRIMASK, r3
}
 800b4a0:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	e000      	b.n	800b4a8 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800b4a6:	2302      	movs	r3, #2
  }
}
 800b4a8:	0018      	movs	r0, r3
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	b008      	add	sp, #32
 800b4ae:	bd80      	pop	{r7, pc}
 800b4b0:	0800c6c1 	.word	0x0800c6c1
 800b4b4:	0800c759 	.word	0x0800c759
 800b4b8:	0800c8eb 	.word	0x0800c8eb

0800b4bc <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b096      	sub	sp, #88	@ 0x58
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800b4c4:	f3ef 8310 	mrs	r3, PRIMASK
 800b4c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 800b4ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b4cc:	657b      	str	r3, [r7, #84]	@ 0x54
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b4d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4d4:	f383 8810 	msr	PRIMASK, r3
}
 800b4d8:	46c0      	nop			@ (mov r8, r8)
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	681a      	ldr	r2, [r3, #0]
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	4979      	ldr	r1, [pc, #484]	@ (800b6cc <HAL_UART_Abort+0x210>)
 800b4e6:	400a      	ands	r2, r1
 800b4e8:	601a      	str	r2, [r3, #0]
 800b4ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b4ec:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b4ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4f0:	f383 8810 	msr	PRIMASK, r3
}
 800b4f4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800b4f6:	f3ef 8310 	mrs	r3, PRIMASK
 800b4fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 800b4fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 800b4fe:	653b      	str	r3, [r7, #80]	@ 0x50
 800b500:	2301      	movs	r3, #1
 800b502:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b504:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b506:	f383 8810 	msr	PRIMASK, r3
}
 800b50a:	46c0      	nop			@ (mov r8, r8)
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	689a      	ldr	r2, [r3, #8]
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	496e      	ldr	r1, [pc, #440]	@ (800b6d0 <HAL_UART_Abort+0x214>)
 800b518:	400a      	ands	r2, r1
 800b51a:	609a      	str	r2, [r3, #8]
 800b51c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b51e:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b520:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b522:	f383 8810 	msr	PRIMASK, r3
}
 800b526:	46c0      	nop			@ (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b52c:	2b01      	cmp	r3, #1
 800b52e:	d118      	bne.n	800b562 <HAL_UART_Abort+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800b530:	f3ef 8310 	mrs	r3, PRIMASK
 800b534:	623b      	str	r3, [r7, #32]
  return(result);
 800b536:	6a3b      	ldr	r3, [r7, #32]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800b538:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b53a:	2301      	movs	r3, #1
 800b53c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b53e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b540:	f383 8810 	msr	PRIMASK, r3
}
 800b544:	46c0      	nop			@ (mov r8, r8)
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	681a      	ldr	r2, [r3, #0]
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	2110      	movs	r1, #16
 800b552:	438a      	bics	r2, r1
 800b554:	601a      	str	r2, [r3, #0]
 800b556:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b558:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b55a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b55c:	f383 8810 	msr	PRIMASK, r3
}
 800b560:	46c0      	nop			@ (mov r8, r8)
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	689b      	ldr	r3, [r3, #8]
 800b568:	2280      	movs	r2, #128	@ 0x80
 800b56a:	4013      	ands	r3, r2
 800b56c:	2b80      	cmp	r3, #128	@ 0x80
 800b56e:	d135      	bne.n	800b5dc <HAL_UART_Abort+0x120>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800b570:	f3ef 8310 	mrs	r3, PRIMASK
 800b574:	617b      	str	r3, [r7, #20]
  return(result);
 800b576:	697b      	ldr	r3, [r7, #20]
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b578:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b57a:	2301      	movs	r3, #1
 800b57c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b57e:	69bb      	ldr	r3, [r7, #24]
 800b580:	f383 8810 	msr	PRIMASK, r3
}
 800b584:	46c0      	nop			@ (mov r8, r8)
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	689a      	ldr	r2, [r3, #8]
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	2180      	movs	r1, #128	@ 0x80
 800b592:	438a      	bics	r2, r1
 800b594:	609a      	str	r2, [r3, #8]
 800b596:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b598:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b59a:	69fb      	ldr	r3, [r7, #28]
 800b59c:	f383 8810 	msr	PRIMASK, r3
}
 800b5a0:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d018      	beq.n	800b5dc <HAL_UART_Abort+0x120>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b5b6:	0018      	movs	r0, r3
 800b5b8:	f7fa fdcc 	bl	8006154 <HAL_DMA_Abort>
 800b5bc:	1e03      	subs	r3, r0, #0
 800b5be:	d00d      	beq.n	800b5dc <HAL_UART_Abort+0x120>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b5c4:	0018      	movs	r0, r3
 800b5c6:	f7fa ff5f 	bl	8006488 <HAL_DMA_GetError>
 800b5ca:	0003      	movs	r3, r0
 800b5cc:	2b20      	cmp	r3, #32
 800b5ce:	d105      	bne.n	800b5dc <HAL_UART_Abort+0x120>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2290      	movs	r2, #144	@ 0x90
 800b5d4:	2110      	movs	r1, #16
 800b5d6:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 800b5d8:	2303      	movs	r3, #3
 800b5da:	e072      	b.n	800b6c2 <HAL_UART_Abort+0x206>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	689b      	ldr	r3, [r3, #8]
 800b5e2:	2240      	movs	r2, #64	@ 0x40
 800b5e4:	4013      	ands	r3, r2
 800b5e6:	2b40      	cmp	r3, #64	@ 0x40
 800b5e8:	d139      	bne.n	800b65e <HAL_UART_Abort+0x1a2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800b5ea:	f3ef 8310 	mrs	r3, PRIMASK
 800b5ee:	60bb      	str	r3, [r7, #8]
  return(result);
 800b5f0:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b5f2:	647b      	str	r3, [r7, #68]	@ 0x44
 800b5f4:	2301      	movs	r3, #1
 800b5f6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	f383 8810 	msr	PRIMASK, r3
}
 800b5fe:	46c0      	nop			@ (mov r8, r8)
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	689a      	ldr	r2, [r3, #8]
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	2140      	movs	r1, #64	@ 0x40
 800b60c:	438a      	bics	r2, r1
 800b60e:	609a      	str	r2, [r3, #8]
 800b610:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b612:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b614:	693b      	ldr	r3, [r7, #16]
 800b616:	f383 8810 	msr	PRIMASK, r3
}
 800b61a:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2280      	movs	r2, #128	@ 0x80
 800b620:	589b      	ldr	r3, [r3, r2]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d01b      	beq.n	800b65e <HAL_UART_Abort+0x1a2>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	2280      	movs	r2, #128	@ 0x80
 800b62a:	589b      	ldr	r3, [r3, r2]
 800b62c:	2200      	movs	r2, #0
 800b62e:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2280      	movs	r2, #128	@ 0x80
 800b634:	589b      	ldr	r3, [r3, r2]
 800b636:	0018      	movs	r0, r3
 800b638:	f7fa fd8c 	bl	8006154 <HAL_DMA_Abort>
 800b63c:	1e03      	subs	r3, r0, #0
 800b63e:	d00e      	beq.n	800b65e <HAL_UART_Abort+0x1a2>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2280      	movs	r2, #128	@ 0x80
 800b644:	589b      	ldr	r3, [r3, r2]
 800b646:	0018      	movs	r0, r3
 800b648:	f7fa ff1e 	bl	8006488 <HAL_DMA_GetError>
 800b64c:	0003      	movs	r3, r0
 800b64e:	2b20      	cmp	r3, #32
 800b650:	d105      	bne.n	800b65e <HAL_UART_Abort+0x1a2>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2290      	movs	r2, #144	@ 0x90
 800b656:	2110      	movs	r1, #16
 800b658:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 800b65a:	2303      	movs	r3, #3
 800b65c:	e031      	b.n	800b6c2 <HAL_UART_Abort+0x206>
    }
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	2256      	movs	r2, #86	@ 0x56
 800b662:	2100      	movs	r1, #0
 800b664:	5299      	strh	r1, [r3, r2]
  huart->RxXferCount = 0U;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	225e      	movs	r2, #94	@ 0x5e
 800b66a:	2100      	movs	r1, #0
 800b66c:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	220f      	movs	r2, #15
 800b674:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800b67a:	2380      	movs	r3, #128	@ 0x80
 800b67c:	059b      	lsls	r3, r3, #22
 800b67e:	429a      	cmp	r2, r3
 800b680:	d107      	bne.n	800b692 <HAL_UART_Abort+0x1d6>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	699a      	ldr	r2, [r3, #24]
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	2110      	movs	r1, #16
 800b68e:	430a      	orrs	r2, r1
 800b690:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	699a      	ldr	r2, [r3, #24]
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	2108      	movs	r1, #8
 800b69e:	430a      	orrs	r2, r1
 800b6a0:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2288      	movs	r2, #136	@ 0x88
 800b6a6:	2120      	movs	r1, #32
 800b6a8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	228c      	movs	r2, #140	@ 0x8c
 800b6ae:	2120      	movs	r1, #32
 800b6b0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	66da      	str	r2, [r3, #108]	@ 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2290      	movs	r2, #144	@ 0x90
 800b6bc:	2100      	movs	r1, #0
 800b6be:	5099      	str	r1, [r3, r2]

  return HAL_OK;
 800b6c0:	2300      	movs	r3, #0
}
 800b6c2:	0018      	movs	r0, r3
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	b016      	add	sp, #88	@ 0x58
 800b6c8:	bd80      	pop	{r7, pc}
 800b6ca:	46c0      	nop			@ (mov r8, r8)
 800b6cc:	fffffe1f 	.word	0xfffffe1f
 800b6d0:	ef7ffffe 	.word	0xef7ffffe

0800b6d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b6d4:	b5b0      	push	{r4, r5, r7, lr}
 800b6d6:	b0aa      	sub	sp, #168	@ 0xa8
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	69db      	ldr	r3, [r3, #28]
 800b6e2:	22a4      	movs	r2, #164	@ 0xa4
 800b6e4:	18b9      	adds	r1, r7, r2
 800b6e6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	20a0      	movs	r0, #160	@ 0xa0
 800b6f0:	1839      	adds	r1, r7, r0
 800b6f2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	689b      	ldr	r3, [r3, #8]
 800b6fa:	249c      	movs	r4, #156	@ 0x9c
 800b6fc:	1939      	adds	r1, r7, r4
 800b6fe:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b700:	0011      	movs	r1, r2
 800b702:	18bb      	adds	r3, r7, r2
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	4aa2      	ldr	r2, [pc, #648]	@ (800b990 <HAL_UART_IRQHandler+0x2bc>)
 800b708:	4013      	ands	r3, r2
 800b70a:	2298      	movs	r2, #152	@ 0x98
 800b70c:	18bd      	adds	r5, r7, r2
 800b70e:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800b710:	18bb      	adds	r3, r7, r2
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d11a      	bne.n	800b74e <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b718:	187b      	adds	r3, r7, r1
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	2220      	movs	r2, #32
 800b71e:	4013      	ands	r3, r2
 800b720:	d015      	beq.n	800b74e <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b722:	183b      	adds	r3, r7, r0
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	2220      	movs	r2, #32
 800b728:	4013      	ands	r3, r2
 800b72a:	d105      	bne.n	800b738 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b72c:	193b      	adds	r3, r7, r4
 800b72e:	681a      	ldr	r2, [r3, #0]
 800b730:	2380      	movs	r3, #128	@ 0x80
 800b732:	055b      	lsls	r3, r3, #21
 800b734:	4013      	ands	r3, r2
 800b736:	d00a      	beq.n	800b74e <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d100      	bne.n	800b742 <HAL_UART_IRQHandler+0x6e>
 800b740:	e2fb      	b.n	800bd3a <HAL_UART_IRQHandler+0x666>
      {
        huart->RxISR(huart);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b746:	687a      	ldr	r2, [r7, #4]
 800b748:	0010      	movs	r0, r2
 800b74a:	4798      	blx	r3
      }
      return;
 800b74c:	e2f5      	b.n	800bd3a <HAL_UART_IRQHandler+0x666>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b74e:	2398      	movs	r3, #152	@ 0x98
 800b750:	18fb      	adds	r3, r7, r3
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d100      	bne.n	800b75a <HAL_UART_IRQHandler+0x86>
 800b758:	e122      	b.n	800b9a0 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b75a:	239c      	movs	r3, #156	@ 0x9c
 800b75c:	18fb      	adds	r3, r7, r3
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	4a8c      	ldr	r2, [pc, #560]	@ (800b994 <HAL_UART_IRQHandler+0x2c0>)
 800b762:	4013      	ands	r3, r2
 800b764:	d106      	bne.n	800b774 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b766:	23a0      	movs	r3, #160	@ 0xa0
 800b768:	18fb      	adds	r3, r7, r3
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	4a8a      	ldr	r2, [pc, #552]	@ (800b998 <HAL_UART_IRQHandler+0x2c4>)
 800b76e:	4013      	ands	r3, r2
 800b770:	d100      	bne.n	800b774 <HAL_UART_IRQHandler+0xa0>
 800b772:	e115      	b.n	800b9a0 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b774:	23a4      	movs	r3, #164	@ 0xa4
 800b776:	18fb      	adds	r3, r7, r3
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	2201      	movs	r2, #1
 800b77c:	4013      	ands	r3, r2
 800b77e:	d012      	beq.n	800b7a6 <HAL_UART_IRQHandler+0xd2>
 800b780:	23a0      	movs	r3, #160	@ 0xa0
 800b782:	18fb      	adds	r3, r7, r3
 800b784:	681a      	ldr	r2, [r3, #0]
 800b786:	2380      	movs	r3, #128	@ 0x80
 800b788:	005b      	lsls	r3, r3, #1
 800b78a:	4013      	ands	r3, r2
 800b78c:	d00b      	beq.n	800b7a6 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	2201      	movs	r2, #1
 800b794:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	2290      	movs	r2, #144	@ 0x90
 800b79a:	589b      	ldr	r3, [r3, r2]
 800b79c:	2201      	movs	r2, #1
 800b79e:	431a      	orrs	r2, r3
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2190      	movs	r1, #144	@ 0x90
 800b7a4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b7a6:	23a4      	movs	r3, #164	@ 0xa4
 800b7a8:	18fb      	adds	r3, r7, r3
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	2202      	movs	r2, #2
 800b7ae:	4013      	ands	r3, r2
 800b7b0:	d011      	beq.n	800b7d6 <HAL_UART_IRQHandler+0x102>
 800b7b2:	239c      	movs	r3, #156	@ 0x9c
 800b7b4:	18fb      	adds	r3, r7, r3
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	2201      	movs	r2, #1
 800b7ba:	4013      	ands	r3, r2
 800b7bc:	d00b      	beq.n	800b7d6 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	2202      	movs	r2, #2
 800b7c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2290      	movs	r2, #144	@ 0x90
 800b7ca:	589b      	ldr	r3, [r3, r2]
 800b7cc:	2204      	movs	r2, #4
 800b7ce:	431a      	orrs	r2, r3
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2190      	movs	r1, #144	@ 0x90
 800b7d4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b7d6:	23a4      	movs	r3, #164	@ 0xa4
 800b7d8:	18fb      	adds	r3, r7, r3
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	2204      	movs	r2, #4
 800b7de:	4013      	ands	r3, r2
 800b7e0:	d011      	beq.n	800b806 <HAL_UART_IRQHandler+0x132>
 800b7e2:	239c      	movs	r3, #156	@ 0x9c
 800b7e4:	18fb      	adds	r3, r7, r3
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	2201      	movs	r2, #1
 800b7ea:	4013      	ands	r3, r2
 800b7ec:	d00b      	beq.n	800b806 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	2204      	movs	r2, #4
 800b7f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	2290      	movs	r2, #144	@ 0x90
 800b7fa:	589b      	ldr	r3, [r3, r2]
 800b7fc:	2202      	movs	r2, #2
 800b7fe:	431a      	orrs	r2, r3
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2190      	movs	r1, #144	@ 0x90
 800b804:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b806:	23a4      	movs	r3, #164	@ 0xa4
 800b808:	18fb      	adds	r3, r7, r3
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	2208      	movs	r2, #8
 800b80e:	4013      	ands	r3, r2
 800b810:	d017      	beq.n	800b842 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b812:	23a0      	movs	r3, #160	@ 0xa0
 800b814:	18fb      	adds	r3, r7, r3
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	2220      	movs	r2, #32
 800b81a:	4013      	ands	r3, r2
 800b81c:	d105      	bne.n	800b82a <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b81e:	239c      	movs	r3, #156	@ 0x9c
 800b820:	18fb      	adds	r3, r7, r3
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	4a5b      	ldr	r2, [pc, #364]	@ (800b994 <HAL_UART_IRQHandler+0x2c0>)
 800b826:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b828:	d00b      	beq.n	800b842 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	2208      	movs	r2, #8
 800b830:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	2290      	movs	r2, #144	@ 0x90
 800b836:	589b      	ldr	r3, [r3, r2]
 800b838:	2208      	movs	r2, #8
 800b83a:	431a      	orrs	r2, r3
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2190      	movs	r1, #144	@ 0x90
 800b840:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b842:	23a4      	movs	r3, #164	@ 0xa4
 800b844:	18fb      	adds	r3, r7, r3
 800b846:	681a      	ldr	r2, [r3, #0]
 800b848:	2380      	movs	r3, #128	@ 0x80
 800b84a:	011b      	lsls	r3, r3, #4
 800b84c:	4013      	ands	r3, r2
 800b84e:	d013      	beq.n	800b878 <HAL_UART_IRQHandler+0x1a4>
 800b850:	23a0      	movs	r3, #160	@ 0xa0
 800b852:	18fb      	adds	r3, r7, r3
 800b854:	681a      	ldr	r2, [r3, #0]
 800b856:	2380      	movs	r3, #128	@ 0x80
 800b858:	04db      	lsls	r3, r3, #19
 800b85a:	4013      	ands	r3, r2
 800b85c:	d00c      	beq.n	800b878 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	2280      	movs	r2, #128	@ 0x80
 800b864:	0112      	lsls	r2, r2, #4
 800b866:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2290      	movs	r2, #144	@ 0x90
 800b86c:	589b      	ldr	r3, [r3, r2]
 800b86e:	2220      	movs	r2, #32
 800b870:	431a      	orrs	r2, r3
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	2190      	movs	r1, #144	@ 0x90
 800b876:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2290      	movs	r2, #144	@ 0x90
 800b87c:	589b      	ldr	r3, [r3, r2]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d100      	bne.n	800b884 <HAL_UART_IRQHandler+0x1b0>
 800b882:	e25c      	b.n	800bd3e <HAL_UART_IRQHandler+0x66a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b884:	23a4      	movs	r3, #164	@ 0xa4
 800b886:	18fb      	adds	r3, r7, r3
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	2220      	movs	r2, #32
 800b88c:	4013      	ands	r3, r2
 800b88e:	d015      	beq.n	800b8bc <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b890:	23a0      	movs	r3, #160	@ 0xa0
 800b892:	18fb      	adds	r3, r7, r3
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	2220      	movs	r2, #32
 800b898:	4013      	ands	r3, r2
 800b89a:	d106      	bne.n	800b8aa <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b89c:	239c      	movs	r3, #156	@ 0x9c
 800b89e:	18fb      	adds	r3, r7, r3
 800b8a0:	681a      	ldr	r2, [r3, #0]
 800b8a2:	2380      	movs	r3, #128	@ 0x80
 800b8a4:	055b      	lsls	r3, r3, #21
 800b8a6:	4013      	ands	r3, r2
 800b8a8:	d008      	beq.n	800b8bc <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d004      	beq.n	800b8bc <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b8b6:	687a      	ldr	r2, [r7, #4]
 800b8b8:	0010      	movs	r0, r2
 800b8ba:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2290      	movs	r2, #144	@ 0x90
 800b8c0:	589b      	ldr	r3, [r3, r2]
 800b8c2:	2194      	movs	r1, #148	@ 0x94
 800b8c4:	187a      	adds	r2, r7, r1
 800b8c6:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	689b      	ldr	r3, [r3, #8]
 800b8ce:	2240      	movs	r2, #64	@ 0x40
 800b8d0:	4013      	ands	r3, r2
 800b8d2:	2b40      	cmp	r3, #64	@ 0x40
 800b8d4:	d004      	beq.n	800b8e0 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b8d6:	187b      	adds	r3, r7, r1
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	2228      	movs	r2, #40	@ 0x28
 800b8dc:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b8de:	d04c      	beq.n	800b97a <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	0018      	movs	r0, r3
 800b8e4:	f000 fe86 	bl	800c5f4 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	689b      	ldr	r3, [r3, #8]
 800b8ee:	2240      	movs	r2, #64	@ 0x40
 800b8f0:	4013      	ands	r3, r2
 800b8f2:	2b40      	cmp	r3, #64	@ 0x40
 800b8f4:	d13c      	bne.n	800b970 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800b8f6:	f3ef 8310 	mrs	r3, PRIMASK
 800b8fa:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800b8fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b8fe:	2090      	movs	r0, #144	@ 0x90
 800b900:	183a      	adds	r2, r7, r0
 800b902:	6013      	str	r3, [r2, #0]
 800b904:	2301      	movs	r3, #1
 800b906:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b908:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b90a:	f383 8810 	msr	PRIMASK, r3
}
 800b90e:	46c0      	nop			@ (mov r8, r8)
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	689a      	ldr	r2, [r3, #8]
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	2140      	movs	r1, #64	@ 0x40
 800b91c:	438a      	bics	r2, r1
 800b91e:	609a      	str	r2, [r3, #8]
 800b920:	183b      	adds	r3, r7, r0
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b926:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b928:	f383 8810 	msr	PRIMASK, r3
}
 800b92c:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	2280      	movs	r2, #128	@ 0x80
 800b932:	589b      	ldr	r3, [r3, r2]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d016      	beq.n	800b966 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2280      	movs	r2, #128	@ 0x80
 800b93c:	589b      	ldr	r3, [r3, r2]
 800b93e:	4a17      	ldr	r2, [pc, #92]	@ (800b99c <HAL_UART_IRQHandler+0x2c8>)
 800b940:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	2280      	movs	r2, #128	@ 0x80
 800b946:	589b      	ldr	r3, [r3, r2]
 800b948:	0018      	movs	r0, r3
 800b94a:	f7fa fc65 	bl	8006218 <HAL_DMA_Abort_IT>
 800b94e:	1e03      	subs	r3, r0, #0
 800b950:	d01c      	beq.n	800b98c <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2280      	movs	r2, #128	@ 0x80
 800b956:	589b      	ldr	r3, [r3, r2]
 800b958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b95a:	687a      	ldr	r2, [r7, #4]
 800b95c:	2180      	movs	r1, #128	@ 0x80
 800b95e:	5852      	ldr	r2, [r2, r1]
 800b960:	0010      	movs	r0, r2
 800b962:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b964:	e012      	b.n	800b98c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	0018      	movs	r0, r3
 800b96a:	f7f8 fcfd 	bl	8004368 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b96e:	e00d      	b.n	800b98c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	0018      	movs	r0, r3
 800b974:	f7f8 fcf8 	bl	8004368 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b978:	e008      	b.n	800b98c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	0018      	movs	r0, r3
 800b97e:	f7f8 fcf3 	bl	8004368 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	2290      	movs	r2, #144	@ 0x90
 800b986:	2100      	movs	r1, #0
 800b988:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800b98a:	e1d8      	b.n	800bd3e <HAL_UART_IRQHandler+0x66a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b98c:	46c0      	nop			@ (mov r8, r8)
    return;
 800b98e:	e1d6      	b.n	800bd3e <HAL_UART_IRQHandler+0x66a>
 800b990:	0000080f 	.word	0x0000080f
 800b994:	10000001 	.word	0x10000001
 800b998:	04000120 	.word	0x04000120
 800b99c:	0800c971 	.word	0x0800c971

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b9a4:	2b01      	cmp	r3, #1
 800b9a6:	d000      	beq.n	800b9aa <HAL_UART_IRQHandler+0x2d6>
 800b9a8:	e15d      	b.n	800bc66 <HAL_UART_IRQHandler+0x592>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b9aa:	23a4      	movs	r3, #164	@ 0xa4
 800b9ac:	18fb      	adds	r3, r7, r3
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	2210      	movs	r2, #16
 800b9b2:	4013      	ands	r3, r2
 800b9b4:	d100      	bne.n	800b9b8 <HAL_UART_IRQHandler+0x2e4>
 800b9b6:	e156      	b.n	800bc66 <HAL_UART_IRQHandler+0x592>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b9b8:	23a0      	movs	r3, #160	@ 0xa0
 800b9ba:	18fb      	adds	r3, r7, r3
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	2210      	movs	r2, #16
 800b9c0:	4013      	ands	r3, r2
 800b9c2:	d100      	bne.n	800b9c6 <HAL_UART_IRQHandler+0x2f2>
 800b9c4:	e14f      	b.n	800bc66 <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	2210      	movs	r2, #16
 800b9cc:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	689b      	ldr	r3, [r3, #8]
 800b9d4:	2240      	movs	r2, #64	@ 0x40
 800b9d6:	4013      	ands	r3, r2
 800b9d8:	2b40      	cmp	r3, #64	@ 0x40
 800b9da:	d000      	beq.n	800b9de <HAL_UART_IRQHandler+0x30a>
 800b9dc:	e0c3      	b.n	800bb66 <HAL_UART_IRQHandler+0x492>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	2280      	movs	r2, #128	@ 0x80
 800b9e2:	589b      	ldr	r3, [r3, r2]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	685a      	ldr	r2, [r3, #4]
 800b9e8:	217e      	movs	r1, #126	@ 0x7e
 800b9ea:	187b      	adds	r3, r7, r1
 800b9ec:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800b9ee:	187b      	adds	r3, r7, r1
 800b9f0:	881b      	ldrh	r3, [r3, #0]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d100      	bne.n	800b9f8 <HAL_UART_IRQHandler+0x324>
 800b9f6:	e097      	b.n	800bb28 <HAL_UART_IRQHandler+0x454>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	225c      	movs	r2, #92	@ 0x5c
 800b9fc:	5a9b      	ldrh	r3, [r3, r2]
 800b9fe:	187a      	adds	r2, r7, r1
 800ba00:	8812      	ldrh	r2, [r2, #0]
 800ba02:	429a      	cmp	r2, r3
 800ba04:	d300      	bcc.n	800ba08 <HAL_UART_IRQHandler+0x334>
 800ba06:	e08f      	b.n	800bb28 <HAL_UART_IRQHandler+0x454>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	187a      	adds	r2, r7, r1
 800ba0c:	215e      	movs	r1, #94	@ 0x5e
 800ba0e:	8812      	ldrh	r2, [r2, #0]
 800ba10:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	2280      	movs	r2, #128	@ 0x80
 800ba16:	589b      	ldr	r3, [r3, r2]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	2220      	movs	r2, #32
 800ba1e:	4013      	ands	r3, r2
 800ba20:	d170      	bne.n	800bb04 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800ba22:	f3ef 8310 	mrs	r3, PRIMASK
 800ba26:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800ba28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ba2a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ba2c:	2301      	movs	r3, #1
 800ba2e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba32:	f383 8810 	msr	PRIMASK, r3
}
 800ba36:	46c0      	nop			@ (mov r8, r8)
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	681a      	ldr	r2, [r3, #0]
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	49c4      	ldr	r1, [pc, #784]	@ (800bd54 <HAL_UART_IRQHandler+0x680>)
 800ba44:	400a      	ands	r2, r1
 800ba46:	601a      	str	r2, [r3, #0]
 800ba48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ba4a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba4e:	f383 8810 	msr	PRIMASK, r3
}
 800ba52:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800ba54:	f3ef 8310 	mrs	r3, PRIMASK
 800ba58:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800ba5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba5c:	677b      	str	r3, [r7, #116]	@ 0x74
 800ba5e:	2301      	movs	r3, #1
 800ba60:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba64:	f383 8810 	msr	PRIMASK, r3
}
 800ba68:	46c0      	nop			@ (mov r8, r8)
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	689a      	ldr	r2, [r3, #8]
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	2101      	movs	r1, #1
 800ba76:	438a      	bics	r2, r1
 800ba78:	609a      	str	r2, [r3, #8]
 800ba7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ba7c:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba80:	f383 8810 	msr	PRIMASK, r3
}
 800ba84:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800ba86:	f3ef 8310 	mrs	r3, PRIMASK
 800ba8a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800ba8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ba8e:	673b      	str	r3, [r7, #112]	@ 0x70
 800ba90:	2301      	movs	r3, #1
 800ba92:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba96:	f383 8810 	msr	PRIMASK, r3
}
 800ba9a:	46c0      	nop			@ (mov r8, r8)
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	689a      	ldr	r2, [r3, #8]
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	2140      	movs	r1, #64	@ 0x40
 800baa8:	438a      	bics	r2, r1
 800baaa:	609a      	str	r2, [r3, #8]
 800baac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800baae:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bab0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bab2:	f383 8810 	msr	PRIMASK, r3
}
 800bab6:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	228c      	movs	r2, #140	@ 0x8c
 800babc:	2120      	movs	r1, #32
 800babe:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2200      	movs	r2, #0
 800bac4:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800bac6:	f3ef 8310 	mrs	r3, PRIMASK
 800baca:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 800bacc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bace:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bad0:	2301      	movs	r3, #1
 800bad2:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bad4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bad6:	f383 8810 	msr	PRIMASK, r3
}
 800bada:	46c0      	nop			@ (mov r8, r8)
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	681a      	ldr	r2, [r3, #0]
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	2110      	movs	r1, #16
 800bae8:	438a      	bics	r2, r1
 800baea:	601a      	str	r2, [r3, #0]
 800baec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800baee:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800baf0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800baf2:	f383 8810 	msr	PRIMASK, r3
}
 800baf6:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2280      	movs	r2, #128	@ 0x80
 800bafc:	589b      	ldr	r3, [r3, r2]
 800bafe:	0018      	movs	r0, r3
 800bb00:	f7fa fb28 	bl	8006154 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2202      	movs	r2, #2
 800bb08:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	225c      	movs	r2, #92	@ 0x5c
 800bb0e:	5a9a      	ldrh	r2, [r3, r2]
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	215e      	movs	r1, #94	@ 0x5e
 800bb14:	5a5b      	ldrh	r3, [r3, r1]
 800bb16:	b29b      	uxth	r3, r3
 800bb18:	1ad3      	subs	r3, r2, r3
 800bb1a:	b29a      	uxth	r2, r3
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	0011      	movs	r1, r2
 800bb20:	0018      	movs	r0, r3
 800bb22:	f7f8 fbb7 	bl	8004294 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800bb26:	e10c      	b.n	800bd42 <HAL_UART_IRQHandler+0x66e>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	225c      	movs	r2, #92	@ 0x5c
 800bb2c:	5a9b      	ldrh	r3, [r3, r2]
 800bb2e:	227e      	movs	r2, #126	@ 0x7e
 800bb30:	18ba      	adds	r2, r7, r2
 800bb32:	8812      	ldrh	r2, [r2, #0]
 800bb34:	429a      	cmp	r2, r3
 800bb36:	d000      	beq.n	800bb3a <HAL_UART_IRQHandler+0x466>
 800bb38:	e103      	b.n	800bd42 <HAL_UART_IRQHandler+0x66e>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	2280      	movs	r2, #128	@ 0x80
 800bb3e:	589b      	ldr	r3, [r3, r2]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	2220      	movs	r2, #32
 800bb46:	4013      	ands	r3, r2
 800bb48:	2b20      	cmp	r3, #32
 800bb4a:	d000      	beq.n	800bb4e <HAL_UART_IRQHandler+0x47a>
 800bb4c:	e0f9      	b.n	800bd42 <HAL_UART_IRQHandler+0x66e>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	2202      	movs	r2, #2
 800bb52:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	225c      	movs	r2, #92	@ 0x5c
 800bb58:	5a9a      	ldrh	r2, [r3, r2]
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	0011      	movs	r1, r2
 800bb5e:	0018      	movs	r0, r3
 800bb60:	f7f8 fb98 	bl	8004294 <HAL_UARTEx_RxEventCallback>
      return;
 800bb64:	e0ed      	b.n	800bd42 <HAL_UART_IRQHandler+0x66e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	225c      	movs	r2, #92	@ 0x5c
 800bb6a:	5a99      	ldrh	r1, [r3, r2]
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	225e      	movs	r2, #94	@ 0x5e
 800bb70:	5a9b      	ldrh	r3, [r3, r2]
 800bb72:	b29a      	uxth	r2, r3
 800bb74:	208e      	movs	r0, #142	@ 0x8e
 800bb76:	183b      	adds	r3, r7, r0
 800bb78:	1a8a      	subs	r2, r1, r2
 800bb7a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	225e      	movs	r2, #94	@ 0x5e
 800bb80:	5a9b      	ldrh	r3, [r3, r2]
 800bb82:	b29b      	uxth	r3, r3
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d100      	bne.n	800bb8a <HAL_UART_IRQHandler+0x4b6>
 800bb88:	e0dd      	b.n	800bd46 <HAL_UART_IRQHandler+0x672>
          && (nb_rx_data > 0U))
 800bb8a:	183b      	adds	r3, r7, r0
 800bb8c:	881b      	ldrh	r3, [r3, #0]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d100      	bne.n	800bb94 <HAL_UART_IRQHandler+0x4c0>
 800bb92:	e0d8      	b.n	800bd46 <HAL_UART_IRQHandler+0x672>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800bb94:	f3ef 8310 	mrs	r3, PRIMASK
 800bb98:	60fb      	str	r3, [r7, #12]
  return(result);
 800bb9a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bb9c:	2488      	movs	r4, #136	@ 0x88
 800bb9e:	193a      	adds	r2, r7, r4
 800bba0:	6013      	str	r3, [r2, #0]
 800bba2:	2301      	movs	r3, #1
 800bba4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bba6:	693b      	ldr	r3, [r7, #16]
 800bba8:	f383 8810 	msr	PRIMASK, r3
}
 800bbac:	46c0      	nop			@ (mov r8, r8)
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	681a      	ldr	r2, [r3, #0]
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	4967      	ldr	r1, [pc, #412]	@ (800bd58 <HAL_UART_IRQHandler+0x684>)
 800bbba:	400a      	ands	r2, r1
 800bbbc:	601a      	str	r2, [r3, #0]
 800bbbe:	193b      	adds	r3, r7, r4
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bbc4:	697b      	ldr	r3, [r7, #20]
 800bbc6:	f383 8810 	msr	PRIMASK, r3
}
 800bbca:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800bbcc:	f3ef 8310 	mrs	r3, PRIMASK
 800bbd0:	61bb      	str	r3, [r7, #24]
  return(result);
 800bbd2:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bbd4:	2484      	movs	r4, #132	@ 0x84
 800bbd6:	193a      	adds	r2, r7, r4
 800bbd8:	6013      	str	r3, [r2, #0]
 800bbda:	2301      	movs	r3, #1
 800bbdc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bbde:	69fb      	ldr	r3, [r7, #28]
 800bbe0:	f383 8810 	msr	PRIMASK, r3
}
 800bbe4:	46c0      	nop			@ (mov r8, r8)
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	689a      	ldr	r2, [r3, #8]
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	495a      	ldr	r1, [pc, #360]	@ (800bd5c <HAL_UART_IRQHandler+0x688>)
 800bbf2:	400a      	ands	r2, r1
 800bbf4:	609a      	str	r2, [r3, #8]
 800bbf6:	193b      	adds	r3, r7, r4
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bbfc:	6a3b      	ldr	r3, [r7, #32]
 800bbfe:	f383 8810 	msr	PRIMASK, r3
}
 800bc02:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	228c      	movs	r2, #140	@ 0x8c
 800bc08:	2120      	movs	r1, #32
 800bc0a:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2200      	movs	r2, #0
 800bc10:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	2200      	movs	r2, #0
 800bc16:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800bc18:	f3ef 8310 	mrs	r3, PRIMASK
 800bc1c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800bc1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc20:	2480      	movs	r4, #128	@ 0x80
 800bc22:	193a      	adds	r2, r7, r4
 800bc24:	6013      	str	r3, [r2, #0]
 800bc26:	2301      	movs	r3, #1
 800bc28:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bc2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc2c:	f383 8810 	msr	PRIMASK, r3
}
 800bc30:	46c0      	nop			@ (mov r8, r8)
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	681a      	ldr	r2, [r3, #0]
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	2110      	movs	r1, #16
 800bc3e:	438a      	bics	r2, r1
 800bc40:	601a      	str	r2, [r3, #0]
 800bc42:	193b      	adds	r3, r7, r4
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bc48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc4a:	f383 8810 	msr	PRIMASK, r3
}
 800bc4e:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	2202      	movs	r2, #2
 800bc54:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bc56:	183b      	adds	r3, r7, r0
 800bc58:	881a      	ldrh	r2, [r3, #0]
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	0011      	movs	r1, r2
 800bc5e:	0018      	movs	r0, r3
 800bc60:	f7f8 fb18 	bl	8004294 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bc64:	e06f      	b.n	800bd46 <HAL_UART_IRQHandler+0x672>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bc66:	23a4      	movs	r3, #164	@ 0xa4
 800bc68:	18fb      	adds	r3, r7, r3
 800bc6a:	681a      	ldr	r2, [r3, #0]
 800bc6c:	2380      	movs	r3, #128	@ 0x80
 800bc6e:	035b      	lsls	r3, r3, #13
 800bc70:	4013      	ands	r3, r2
 800bc72:	d010      	beq.n	800bc96 <HAL_UART_IRQHandler+0x5c2>
 800bc74:	239c      	movs	r3, #156	@ 0x9c
 800bc76:	18fb      	adds	r3, r7, r3
 800bc78:	681a      	ldr	r2, [r3, #0]
 800bc7a:	2380      	movs	r3, #128	@ 0x80
 800bc7c:	03db      	lsls	r3, r3, #15
 800bc7e:	4013      	ands	r3, r2
 800bc80:	d009      	beq.n	800bc96 <HAL_UART_IRQHandler+0x5c2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	2280      	movs	r2, #128	@ 0x80
 800bc88:	0352      	lsls	r2, r2, #13
 800bc8a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	0018      	movs	r0, r3
 800bc90:	f000 ff24 	bl	800cadc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bc94:	e05a      	b.n	800bd4c <HAL_UART_IRQHandler+0x678>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800bc96:	23a4      	movs	r3, #164	@ 0xa4
 800bc98:	18fb      	adds	r3, r7, r3
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	2280      	movs	r2, #128	@ 0x80
 800bc9e:	4013      	ands	r3, r2
 800bca0:	d016      	beq.n	800bcd0 <HAL_UART_IRQHandler+0x5fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800bca2:	23a0      	movs	r3, #160	@ 0xa0
 800bca4:	18fb      	adds	r3, r7, r3
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	2280      	movs	r2, #128	@ 0x80
 800bcaa:	4013      	ands	r3, r2
 800bcac:	d106      	bne.n	800bcbc <HAL_UART_IRQHandler+0x5e8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800bcae:	239c      	movs	r3, #156	@ 0x9c
 800bcb0:	18fb      	adds	r3, r7, r3
 800bcb2:	681a      	ldr	r2, [r3, #0]
 800bcb4:	2380      	movs	r3, #128	@ 0x80
 800bcb6:	041b      	lsls	r3, r3, #16
 800bcb8:	4013      	ands	r3, r2
 800bcba:	d009      	beq.n	800bcd0 <HAL_UART_IRQHandler+0x5fc>
  {
    if (huart->TxISR != NULL)
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d042      	beq.n	800bd4a <HAL_UART_IRQHandler+0x676>
    {
      huart->TxISR(huart);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bcc8:	687a      	ldr	r2, [r7, #4]
 800bcca:	0010      	movs	r0, r2
 800bccc:	4798      	blx	r3
    }
    return;
 800bcce:	e03c      	b.n	800bd4a <HAL_UART_IRQHandler+0x676>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bcd0:	23a4      	movs	r3, #164	@ 0xa4
 800bcd2:	18fb      	adds	r3, r7, r3
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	2240      	movs	r2, #64	@ 0x40
 800bcd8:	4013      	ands	r3, r2
 800bcda:	d00a      	beq.n	800bcf2 <HAL_UART_IRQHandler+0x61e>
 800bcdc:	23a0      	movs	r3, #160	@ 0xa0
 800bcde:	18fb      	adds	r3, r7, r3
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	2240      	movs	r2, #64	@ 0x40
 800bce4:	4013      	ands	r3, r2
 800bce6:	d004      	beq.n	800bcf2 <HAL_UART_IRQHandler+0x61e>
  {
    UART_EndTransmit_IT(huart);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	0018      	movs	r0, r3
 800bcec:	f000 fe57 	bl	800c99e <UART_EndTransmit_IT>
    return;
 800bcf0:	e02c      	b.n	800bd4c <HAL_UART_IRQHandler+0x678>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800bcf2:	23a4      	movs	r3, #164	@ 0xa4
 800bcf4:	18fb      	adds	r3, r7, r3
 800bcf6:	681a      	ldr	r2, [r3, #0]
 800bcf8:	2380      	movs	r3, #128	@ 0x80
 800bcfa:	041b      	lsls	r3, r3, #16
 800bcfc:	4013      	ands	r3, r2
 800bcfe:	d00b      	beq.n	800bd18 <HAL_UART_IRQHandler+0x644>
 800bd00:	23a0      	movs	r3, #160	@ 0xa0
 800bd02:	18fb      	adds	r3, r7, r3
 800bd04:	681a      	ldr	r2, [r3, #0]
 800bd06:	2380      	movs	r3, #128	@ 0x80
 800bd08:	05db      	lsls	r3, r3, #23
 800bd0a:	4013      	ands	r3, r2
 800bd0c:	d004      	beq.n	800bd18 <HAL_UART_IRQHandler+0x644>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	0018      	movs	r0, r3
 800bd12:	f000 fef3 	bl	800cafc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bd16:	e019      	b.n	800bd4c <HAL_UART_IRQHandler+0x678>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800bd18:	23a4      	movs	r3, #164	@ 0xa4
 800bd1a:	18fb      	adds	r3, r7, r3
 800bd1c:	681a      	ldr	r2, [r3, #0]
 800bd1e:	2380      	movs	r3, #128	@ 0x80
 800bd20:	045b      	lsls	r3, r3, #17
 800bd22:	4013      	ands	r3, r2
 800bd24:	d012      	beq.n	800bd4c <HAL_UART_IRQHandler+0x678>
 800bd26:	23a0      	movs	r3, #160	@ 0xa0
 800bd28:	18fb      	adds	r3, r7, r3
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	da0d      	bge.n	800bd4c <HAL_UART_IRQHandler+0x678>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	0018      	movs	r0, r3
 800bd34:	f000 feda 	bl	800caec <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bd38:	e008      	b.n	800bd4c <HAL_UART_IRQHandler+0x678>
      return;
 800bd3a:	46c0      	nop			@ (mov r8, r8)
 800bd3c:	e006      	b.n	800bd4c <HAL_UART_IRQHandler+0x678>
    return;
 800bd3e:	46c0      	nop			@ (mov r8, r8)
 800bd40:	e004      	b.n	800bd4c <HAL_UART_IRQHandler+0x678>
      return;
 800bd42:	46c0      	nop			@ (mov r8, r8)
 800bd44:	e002      	b.n	800bd4c <HAL_UART_IRQHandler+0x678>
      return;
 800bd46:	46c0      	nop			@ (mov r8, r8)
 800bd48:	e000      	b.n	800bd4c <HAL_UART_IRQHandler+0x678>
    return;
 800bd4a:	46c0      	nop			@ (mov r8, r8)
  }
}
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	b02a      	add	sp, #168	@ 0xa8
 800bd50:	bdb0      	pop	{r4, r5, r7, pc}
 800bd52:	46c0      	nop			@ (mov r8, r8)
 800bd54:	fffffeff 	.word	0xfffffeff
 800bd58:	fffffedf 	.word	0xfffffedf
 800bd5c:	effffffe 	.word	0xeffffffe

0800bd60 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b082      	sub	sp, #8
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800bd68:	46c0      	nop			@ (mov r8, r8)
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	b002      	add	sp, #8
 800bd6e:	bd80      	pop	{r7, pc}

0800bd70 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b082      	sub	sp, #8
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800bd78:	46c0      	nop			@ (mov r8, r8)
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	b002      	add	sp, #8
 800bd7e:	bd80      	pop	{r7, pc}

0800bd80 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b082      	sub	sp, #8
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800bd88:	46c0      	nop			@ (mov r8, r8)
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	b002      	add	sp, #8
 800bd8e:	bd80      	pop	{r7, pc}

0800bd90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b088      	sub	sp, #32
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bd98:	231e      	movs	r3, #30
 800bd9a:	18fb      	adds	r3, r7, r3
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	689a      	ldr	r2, [r3, #8]
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	691b      	ldr	r3, [r3, #16]
 800bda8:	431a      	orrs	r2, r3
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	695b      	ldr	r3, [r3, #20]
 800bdae:	431a      	orrs	r2, r3
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	69db      	ldr	r3, [r3, #28]
 800bdb4:	4313      	orrs	r3, r2
 800bdb6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	4aab      	ldr	r2, [pc, #684]	@ (800c06c <UART_SetConfig+0x2dc>)
 800bdc0:	4013      	ands	r3, r2
 800bdc2:	0019      	movs	r1, r3
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	697a      	ldr	r2, [r7, #20]
 800bdca:	430a      	orrs	r2, r1
 800bdcc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	685b      	ldr	r3, [r3, #4]
 800bdd4:	4aa6      	ldr	r2, [pc, #664]	@ (800c070 <UART_SetConfig+0x2e0>)
 800bdd6:	4013      	ands	r3, r2
 800bdd8:	0019      	movs	r1, r3
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	68da      	ldr	r2, [r3, #12]
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	430a      	orrs	r2, r1
 800bde4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	699b      	ldr	r3, [r3, #24]
 800bdea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	6a1b      	ldr	r3, [r3, #32]
 800bdf0:	697a      	ldr	r2, [r7, #20]
 800bdf2:	4313      	orrs	r3, r2
 800bdf4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	689b      	ldr	r3, [r3, #8]
 800bdfc:	4a9d      	ldr	r2, [pc, #628]	@ (800c074 <UART_SetConfig+0x2e4>)
 800bdfe:	4013      	ands	r3, r2
 800be00:	0019      	movs	r1, r3
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	697a      	ldr	r2, [r7, #20]
 800be08:	430a      	orrs	r2, r1
 800be0a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be12:	220f      	movs	r2, #15
 800be14:	4393      	bics	r3, r2
 800be16:	0019      	movs	r1, r3
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	430a      	orrs	r2, r1
 800be22:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	4a93      	ldr	r2, [pc, #588]	@ (800c078 <UART_SetConfig+0x2e8>)
 800be2a:	4293      	cmp	r3, r2
 800be2c:	d127      	bne.n	800be7e <UART_SetConfig+0xee>
 800be2e:	4b93      	ldr	r3, [pc, #588]	@ (800c07c <UART_SetConfig+0x2ec>)
 800be30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800be32:	2203      	movs	r2, #3
 800be34:	4013      	ands	r3, r2
 800be36:	2b03      	cmp	r3, #3
 800be38:	d017      	beq.n	800be6a <UART_SetConfig+0xda>
 800be3a:	d81b      	bhi.n	800be74 <UART_SetConfig+0xe4>
 800be3c:	2b02      	cmp	r3, #2
 800be3e:	d00a      	beq.n	800be56 <UART_SetConfig+0xc6>
 800be40:	d818      	bhi.n	800be74 <UART_SetConfig+0xe4>
 800be42:	2b00      	cmp	r3, #0
 800be44:	d002      	beq.n	800be4c <UART_SetConfig+0xbc>
 800be46:	2b01      	cmp	r3, #1
 800be48:	d00a      	beq.n	800be60 <UART_SetConfig+0xd0>
 800be4a:	e013      	b.n	800be74 <UART_SetConfig+0xe4>
 800be4c:	231f      	movs	r3, #31
 800be4e:	18fb      	adds	r3, r7, r3
 800be50:	2200      	movs	r2, #0
 800be52:	701a      	strb	r2, [r3, #0]
 800be54:	e021      	b.n	800be9a <UART_SetConfig+0x10a>
 800be56:	231f      	movs	r3, #31
 800be58:	18fb      	adds	r3, r7, r3
 800be5a:	2202      	movs	r2, #2
 800be5c:	701a      	strb	r2, [r3, #0]
 800be5e:	e01c      	b.n	800be9a <UART_SetConfig+0x10a>
 800be60:	231f      	movs	r3, #31
 800be62:	18fb      	adds	r3, r7, r3
 800be64:	2204      	movs	r2, #4
 800be66:	701a      	strb	r2, [r3, #0]
 800be68:	e017      	b.n	800be9a <UART_SetConfig+0x10a>
 800be6a:	231f      	movs	r3, #31
 800be6c:	18fb      	adds	r3, r7, r3
 800be6e:	2208      	movs	r2, #8
 800be70:	701a      	strb	r2, [r3, #0]
 800be72:	e012      	b.n	800be9a <UART_SetConfig+0x10a>
 800be74:	231f      	movs	r3, #31
 800be76:	18fb      	adds	r3, r7, r3
 800be78:	2210      	movs	r2, #16
 800be7a:	701a      	strb	r2, [r3, #0]
 800be7c:	e00d      	b.n	800be9a <UART_SetConfig+0x10a>
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	4a7f      	ldr	r2, [pc, #508]	@ (800c080 <UART_SetConfig+0x2f0>)
 800be84:	4293      	cmp	r3, r2
 800be86:	d104      	bne.n	800be92 <UART_SetConfig+0x102>
 800be88:	231f      	movs	r3, #31
 800be8a:	18fb      	adds	r3, r7, r3
 800be8c:	2200      	movs	r2, #0
 800be8e:	701a      	strb	r2, [r3, #0]
 800be90:	e003      	b.n	800be9a <UART_SetConfig+0x10a>
 800be92:	231f      	movs	r3, #31
 800be94:	18fb      	adds	r3, r7, r3
 800be96:	2210      	movs	r2, #16
 800be98:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	69da      	ldr	r2, [r3, #28]
 800be9e:	2380      	movs	r3, #128	@ 0x80
 800bea0:	021b      	lsls	r3, r3, #8
 800bea2:	429a      	cmp	r2, r3
 800bea4:	d000      	beq.n	800bea8 <UART_SetConfig+0x118>
 800bea6:	e06f      	b.n	800bf88 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 800bea8:	231f      	movs	r3, #31
 800beaa:	18fb      	adds	r3, r7, r3
 800beac:	781b      	ldrb	r3, [r3, #0]
 800beae:	2b08      	cmp	r3, #8
 800beb0:	d01f      	beq.n	800bef2 <UART_SetConfig+0x162>
 800beb2:	dc22      	bgt.n	800befa <UART_SetConfig+0x16a>
 800beb4:	2b04      	cmp	r3, #4
 800beb6:	d017      	beq.n	800bee8 <UART_SetConfig+0x158>
 800beb8:	dc1f      	bgt.n	800befa <UART_SetConfig+0x16a>
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d002      	beq.n	800bec4 <UART_SetConfig+0x134>
 800bebe:	2b02      	cmp	r3, #2
 800bec0:	d005      	beq.n	800bece <UART_SetConfig+0x13e>
 800bec2:	e01a      	b.n	800befa <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bec4:	f7fd fbb2 	bl	800962c <HAL_RCC_GetPCLK1Freq>
 800bec8:	0003      	movs	r3, r0
 800beca:	61bb      	str	r3, [r7, #24]
        break;
 800becc:	e01c      	b.n	800bf08 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 800bece:	4b6b      	ldr	r3, [pc, #428]	@ (800c07c <UART_SetConfig+0x2ec>)
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	095b      	lsrs	r3, r3, #5
 800bed4:	2207      	movs	r2, #7
 800bed6:	4013      	ands	r3, r2
 800bed8:	3301      	adds	r3, #1
 800beda:	0019      	movs	r1, r3
 800bedc:	4869      	ldr	r0, [pc, #420]	@ (800c084 <UART_SetConfig+0x2f4>)
 800bede:	f7f4 f913 	bl	8000108 <__udivsi3>
 800bee2:	0003      	movs	r3, r0
 800bee4:	61bb      	str	r3, [r7, #24]
        break;
 800bee6:	e00f      	b.n	800bf08 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bee8:	f7fd fb2a 	bl	8009540 <HAL_RCC_GetSysClockFreq>
 800beec:	0003      	movs	r3, r0
 800beee:	61bb      	str	r3, [r7, #24]
        break;
 800bef0:	e00a      	b.n	800bf08 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bef2:	2380      	movs	r3, #128	@ 0x80
 800bef4:	021b      	lsls	r3, r3, #8
 800bef6:	61bb      	str	r3, [r7, #24]
        break;
 800bef8:	e006      	b.n	800bf08 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 800befa:	2300      	movs	r3, #0
 800befc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800befe:	231e      	movs	r3, #30
 800bf00:	18fb      	adds	r3, r7, r3
 800bf02:	2201      	movs	r2, #1
 800bf04:	701a      	strb	r2, [r3, #0]
        break;
 800bf06:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bf08:	69bb      	ldr	r3, [r7, #24]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d100      	bne.n	800bf10 <UART_SetConfig+0x180>
 800bf0e:	e097      	b.n	800c040 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bf14:	4b5c      	ldr	r3, [pc, #368]	@ (800c088 <UART_SetConfig+0x2f8>)
 800bf16:	0052      	lsls	r2, r2, #1
 800bf18:	5ad3      	ldrh	r3, [r2, r3]
 800bf1a:	0019      	movs	r1, r3
 800bf1c:	69b8      	ldr	r0, [r7, #24]
 800bf1e:	f7f4 f8f3 	bl	8000108 <__udivsi3>
 800bf22:	0003      	movs	r3, r0
 800bf24:	005a      	lsls	r2, r3, #1
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	685b      	ldr	r3, [r3, #4]
 800bf2a:	085b      	lsrs	r3, r3, #1
 800bf2c:	18d2      	adds	r2, r2, r3
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	685b      	ldr	r3, [r3, #4]
 800bf32:	0019      	movs	r1, r3
 800bf34:	0010      	movs	r0, r2
 800bf36:	f7f4 f8e7 	bl	8000108 <__udivsi3>
 800bf3a:	0003      	movs	r3, r0
 800bf3c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bf3e:	693b      	ldr	r3, [r7, #16]
 800bf40:	2b0f      	cmp	r3, #15
 800bf42:	d91c      	bls.n	800bf7e <UART_SetConfig+0x1ee>
 800bf44:	693a      	ldr	r2, [r7, #16]
 800bf46:	2380      	movs	r3, #128	@ 0x80
 800bf48:	025b      	lsls	r3, r3, #9
 800bf4a:	429a      	cmp	r2, r3
 800bf4c:	d217      	bcs.n	800bf7e <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bf4e:	693b      	ldr	r3, [r7, #16]
 800bf50:	b29a      	uxth	r2, r3
 800bf52:	200e      	movs	r0, #14
 800bf54:	183b      	adds	r3, r7, r0
 800bf56:	210f      	movs	r1, #15
 800bf58:	438a      	bics	r2, r1
 800bf5a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bf5c:	693b      	ldr	r3, [r7, #16]
 800bf5e:	085b      	lsrs	r3, r3, #1
 800bf60:	b29b      	uxth	r3, r3
 800bf62:	2207      	movs	r2, #7
 800bf64:	4013      	ands	r3, r2
 800bf66:	b299      	uxth	r1, r3
 800bf68:	183b      	adds	r3, r7, r0
 800bf6a:	183a      	adds	r2, r7, r0
 800bf6c:	8812      	ldrh	r2, [r2, #0]
 800bf6e:	430a      	orrs	r2, r1
 800bf70:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	183a      	adds	r2, r7, r0
 800bf78:	8812      	ldrh	r2, [r2, #0]
 800bf7a:	60da      	str	r2, [r3, #12]
 800bf7c:	e060      	b.n	800c040 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 800bf7e:	231e      	movs	r3, #30
 800bf80:	18fb      	adds	r3, r7, r3
 800bf82:	2201      	movs	r2, #1
 800bf84:	701a      	strb	r2, [r3, #0]
 800bf86:	e05b      	b.n	800c040 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bf88:	231f      	movs	r3, #31
 800bf8a:	18fb      	adds	r3, r7, r3
 800bf8c:	781b      	ldrb	r3, [r3, #0]
 800bf8e:	2b08      	cmp	r3, #8
 800bf90:	d01f      	beq.n	800bfd2 <UART_SetConfig+0x242>
 800bf92:	dc22      	bgt.n	800bfda <UART_SetConfig+0x24a>
 800bf94:	2b04      	cmp	r3, #4
 800bf96:	d017      	beq.n	800bfc8 <UART_SetConfig+0x238>
 800bf98:	dc1f      	bgt.n	800bfda <UART_SetConfig+0x24a>
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d002      	beq.n	800bfa4 <UART_SetConfig+0x214>
 800bf9e:	2b02      	cmp	r3, #2
 800bfa0:	d005      	beq.n	800bfae <UART_SetConfig+0x21e>
 800bfa2:	e01a      	b.n	800bfda <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bfa4:	f7fd fb42 	bl	800962c <HAL_RCC_GetPCLK1Freq>
 800bfa8:	0003      	movs	r3, r0
 800bfaa:	61bb      	str	r3, [r7, #24]
        break;
 800bfac:	e01c      	b.n	800bfe8 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 800bfae:	4b33      	ldr	r3, [pc, #204]	@ (800c07c <UART_SetConfig+0x2ec>)
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	095b      	lsrs	r3, r3, #5
 800bfb4:	2207      	movs	r2, #7
 800bfb6:	4013      	ands	r3, r2
 800bfb8:	3301      	adds	r3, #1
 800bfba:	0019      	movs	r1, r3
 800bfbc:	4831      	ldr	r0, [pc, #196]	@ (800c084 <UART_SetConfig+0x2f4>)
 800bfbe:	f7f4 f8a3 	bl	8000108 <__udivsi3>
 800bfc2:	0003      	movs	r3, r0
 800bfc4:	61bb      	str	r3, [r7, #24]
        break;
 800bfc6:	e00f      	b.n	800bfe8 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bfc8:	f7fd faba 	bl	8009540 <HAL_RCC_GetSysClockFreq>
 800bfcc:	0003      	movs	r3, r0
 800bfce:	61bb      	str	r3, [r7, #24]
        break;
 800bfd0:	e00a      	b.n	800bfe8 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bfd2:	2380      	movs	r3, #128	@ 0x80
 800bfd4:	021b      	lsls	r3, r3, #8
 800bfd6:	61bb      	str	r3, [r7, #24]
        break;
 800bfd8:	e006      	b.n	800bfe8 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 800bfda:	2300      	movs	r3, #0
 800bfdc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800bfde:	231e      	movs	r3, #30
 800bfe0:	18fb      	adds	r3, r7, r3
 800bfe2:	2201      	movs	r2, #1
 800bfe4:	701a      	strb	r2, [r3, #0]
        break;
 800bfe6:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800bfe8:	69bb      	ldr	r3, [r7, #24]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d028      	beq.n	800c040 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bff2:	4b25      	ldr	r3, [pc, #148]	@ (800c088 <UART_SetConfig+0x2f8>)
 800bff4:	0052      	lsls	r2, r2, #1
 800bff6:	5ad3      	ldrh	r3, [r2, r3]
 800bff8:	0019      	movs	r1, r3
 800bffa:	69b8      	ldr	r0, [r7, #24]
 800bffc:	f7f4 f884 	bl	8000108 <__udivsi3>
 800c000:	0003      	movs	r3, r0
 800c002:	001a      	movs	r2, r3
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	685b      	ldr	r3, [r3, #4]
 800c008:	085b      	lsrs	r3, r3, #1
 800c00a:	18d2      	adds	r2, r2, r3
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	685b      	ldr	r3, [r3, #4]
 800c010:	0019      	movs	r1, r3
 800c012:	0010      	movs	r0, r2
 800c014:	f7f4 f878 	bl	8000108 <__udivsi3>
 800c018:	0003      	movs	r3, r0
 800c01a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c01c:	693b      	ldr	r3, [r7, #16]
 800c01e:	2b0f      	cmp	r3, #15
 800c020:	d90a      	bls.n	800c038 <UART_SetConfig+0x2a8>
 800c022:	693a      	ldr	r2, [r7, #16]
 800c024:	2380      	movs	r3, #128	@ 0x80
 800c026:	025b      	lsls	r3, r3, #9
 800c028:	429a      	cmp	r2, r3
 800c02a:	d205      	bcs.n	800c038 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c02c:	693b      	ldr	r3, [r7, #16]
 800c02e:	b29a      	uxth	r2, r3
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	60da      	str	r2, [r3, #12]
 800c036:	e003      	b.n	800c040 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 800c038:	231e      	movs	r3, #30
 800c03a:	18fb      	adds	r3, r7, r3
 800c03c:	2201      	movs	r2, #1
 800c03e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	226a      	movs	r2, #106	@ 0x6a
 800c044:	2101      	movs	r1, #1
 800c046:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2268      	movs	r2, #104	@ 0x68
 800c04c:	2101      	movs	r1, #1
 800c04e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2200      	movs	r2, #0
 800c054:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	2200      	movs	r2, #0
 800c05a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c05c:	231e      	movs	r3, #30
 800c05e:	18fb      	adds	r3, r7, r3
 800c060:	781b      	ldrb	r3, [r3, #0]
}
 800c062:	0018      	movs	r0, r3
 800c064:	46bd      	mov	sp, r7
 800c066:	b008      	add	sp, #32
 800c068:	bd80      	pop	{r7, pc}
 800c06a:	46c0      	nop			@ (mov r8, r8)
 800c06c:	cfff69f3 	.word	0xcfff69f3
 800c070:	ffffcfff 	.word	0xffffcfff
 800c074:	11fff4ff 	.word	0x11fff4ff
 800c078:	40013800 	.word	0x40013800
 800c07c:	40021000 	.word	0x40021000
 800c080:	40004400 	.word	0x40004400
 800c084:	02dc6c00 	.word	0x02dc6c00
 800c088:	0800d6ac 	.word	0x0800d6ac

0800c08c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b082      	sub	sp, #8
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c098:	2208      	movs	r2, #8
 800c09a:	4013      	ands	r3, r2
 800c09c:	d00b      	beq.n	800c0b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	685b      	ldr	r3, [r3, #4]
 800c0a4:	4a4a      	ldr	r2, [pc, #296]	@ (800c1d0 <UART_AdvFeatureConfig+0x144>)
 800c0a6:	4013      	ands	r3, r2
 800c0a8:	0019      	movs	r1, r3
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	430a      	orrs	r2, r1
 800c0b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0ba:	2201      	movs	r2, #1
 800c0bc:	4013      	ands	r3, r2
 800c0be:	d00b      	beq.n	800c0d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	685b      	ldr	r3, [r3, #4]
 800c0c6:	4a43      	ldr	r2, [pc, #268]	@ (800c1d4 <UART_AdvFeatureConfig+0x148>)
 800c0c8:	4013      	ands	r3, r2
 800c0ca:	0019      	movs	r1, r3
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	430a      	orrs	r2, r1
 800c0d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0dc:	2202      	movs	r2, #2
 800c0de:	4013      	ands	r3, r2
 800c0e0:	d00b      	beq.n	800c0fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	685b      	ldr	r3, [r3, #4]
 800c0e8:	4a3b      	ldr	r2, [pc, #236]	@ (800c1d8 <UART_AdvFeatureConfig+0x14c>)
 800c0ea:	4013      	ands	r3, r2
 800c0ec:	0019      	movs	r1, r3
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	430a      	orrs	r2, r1
 800c0f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0fe:	2204      	movs	r2, #4
 800c100:	4013      	ands	r3, r2
 800c102:	d00b      	beq.n	800c11c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	685b      	ldr	r3, [r3, #4]
 800c10a:	4a34      	ldr	r2, [pc, #208]	@ (800c1dc <UART_AdvFeatureConfig+0x150>)
 800c10c:	4013      	ands	r3, r2
 800c10e:	0019      	movs	r1, r3
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	430a      	orrs	r2, r1
 800c11a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c120:	2210      	movs	r2, #16
 800c122:	4013      	ands	r3, r2
 800c124:	d00b      	beq.n	800c13e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	689b      	ldr	r3, [r3, #8]
 800c12c:	4a2c      	ldr	r2, [pc, #176]	@ (800c1e0 <UART_AdvFeatureConfig+0x154>)
 800c12e:	4013      	ands	r3, r2
 800c130:	0019      	movs	r1, r3
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	430a      	orrs	r2, r1
 800c13c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c142:	2220      	movs	r2, #32
 800c144:	4013      	ands	r3, r2
 800c146:	d00b      	beq.n	800c160 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	689b      	ldr	r3, [r3, #8]
 800c14e:	4a25      	ldr	r2, [pc, #148]	@ (800c1e4 <UART_AdvFeatureConfig+0x158>)
 800c150:	4013      	ands	r3, r2
 800c152:	0019      	movs	r1, r3
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	430a      	orrs	r2, r1
 800c15e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c164:	2240      	movs	r2, #64	@ 0x40
 800c166:	4013      	ands	r3, r2
 800c168:	d01d      	beq.n	800c1a6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	685b      	ldr	r3, [r3, #4]
 800c170:	4a1d      	ldr	r2, [pc, #116]	@ (800c1e8 <UART_AdvFeatureConfig+0x15c>)
 800c172:	4013      	ands	r3, r2
 800c174:	0019      	movs	r1, r3
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	430a      	orrs	r2, r1
 800c180:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c186:	2380      	movs	r3, #128	@ 0x80
 800c188:	035b      	lsls	r3, r3, #13
 800c18a:	429a      	cmp	r2, r3
 800c18c:	d10b      	bne.n	800c1a6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	685b      	ldr	r3, [r3, #4]
 800c194:	4a15      	ldr	r2, [pc, #84]	@ (800c1ec <UART_AdvFeatureConfig+0x160>)
 800c196:	4013      	ands	r3, r2
 800c198:	0019      	movs	r1, r3
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	430a      	orrs	r2, r1
 800c1a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1aa:	2280      	movs	r2, #128	@ 0x80
 800c1ac:	4013      	ands	r3, r2
 800c1ae:	d00b      	beq.n	800c1c8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	685b      	ldr	r3, [r3, #4]
 800c1b6:	4a0e      	ldr	r2, [pc, #56]	@ (800c1f0 <UART_AdvFeatureConfig+0x164>)
 800c1b8:	4013      	ands	r3, r2
 800c1ba:	0019      	movs	r1, r3
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	430a      	orrs	r2, r1
 800c1c6:	605a      	str	r2, [r3, #4]
  }
}
 800c1c8:	46c0      	nop			@ (mov r8, r8)
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	b002      	add	sp, #8
 800c1ce:	bd80      	pop	{r7, pc}
 800c1d0:	ffff7fff 	.word	0xffff7fff
 800c1d4:	fffdffff 	.word	0xfffdffff
 800c1d8:	fffeffff 	.word	0xfffeffff
 800c1dc:	fffbffff 	.word	0xfffbffff
 800c1e0:	ffffefff 	.word	0xffffefff
 800c1e4:	ffffdfff 	.word	0xffffdfff
 800c1e8:	ffefffff 	.word	0xffefffff
 800c1ec:	ff9fffff 	.word	0xff9fffff
 800c1f0:	fff7ffff 	.word	0xfff7ffff

0800c1f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b092      	sub	sp, #72	@ 0x48
 800c1f8:	af02      	add	r7, sp, #8
 800c1fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	2290      	movs	r2, #144	@ 0x90
 800c200:	2100      	movs	r1, #0
 800c202:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c204:	f7f9 fcde 	bl	8005bc4 <HAL_GetTick>
 800c208:	0003      	movs	r3, r0
 800c20a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	2208      	movs	r2, #8
 800c214:	4013      	ands	r3, r2
 800c216:	2b08      	cmp	r3, #8
 800c218:	d12d      	bne.n	800c276 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c21a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c21c:	2280      	movs	r2, #128	@ 0x80
 800c21e:	0391      	lsls	r1, r2, #14
 800c220:	6878      	ldr	r0, [r7, #4]
 800c222:	4a47      	ldr	r2, [pc, #284]	@ (800c340 <UART_CheckIdleState+0x14c>)
 800c224:	9200      	str	r2, [sp, #0]
 800c226:	2200      	movs	r2, #0
 800c228:	f000 f88e 	bl	800c348 <UART_WaitOnFlagUntilTimeout>
 800c22c:	1e03      	subs	r3, r0, #0
 800c22e:	d022      	beq.n	800c276 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800c230:	f3ef 8310 	mrs	r3, PRIMASK
 800c234:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800c236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c238:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c23a:	2301      	movs	r3, #1
 800c23c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c23e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c240:	f383 8810 	msr	PRIMASK, r3
}
 800c244:	46c0      	nop			@ (mov r8, r8)
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	681a      	ldr	r2, [r3, #0]
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	2180      	movs	r1, #128	@ 0x80
 800c252:	438a      	bics	r2, r1
 800c254:	601a      	str	r2, [r3, #0]
 800c256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c258:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c25a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c25c:	f383 8810 	msr	PRIMASK, r3
}
 800c260:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2288      	movs	r2, #136	@ 0x88
 800c266:	2120      	movs	r1, #32
 800c268:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	2284      	movs	r2, #132	@ 0x84
 800c26e:	2100      	movs	r1, #0
 800c270:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c272:	2303      	movs	r3, #3
 800c274:	e060      	b.n	800c338 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	2204      	movs	r2, #4
 800c27e:	4013      	ands	r3, r2
 800c280:	2b04      	cmp	r3, #4
 800c282:	d146      	bne.n	800c312 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c284:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c286:	2280      	movs	r2, #128	@ 0x80
 800c288:	03d1      	lsls	r1, r2, #15
 800c28a:	6878      	ldr	r0, [r7, #4]
 800c28c:	4a2c      	ldr	r2, [pc, #176]	@ (800c340 <UART_CheckIdleState+0x14c>)
 800c28e:	9200      	str	r2, [sp, #0]
 800c290:	2200      	movs	r2, #0
 800c292:	f000 f859 	bl	800c348 <UART_WaitOnFlagUntilTimeout>
 800c296:	1e03      	subs	r3, r0, #0
 800c298:	d03b      	beq.n	800c312 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800c29a:	f3ef 8310 	mrs	r3, PRIMASK
 800c29e:	60fb      	str	r3, [r7, #12]
  return(result);
 800c2a0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c2a2:	637b      	str	r3, [r7, #52]	@ 0x34
 800c2a4:	2301      	movs	r3, #1
 800c2a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c2a8:	693b      	ldr	r3, [r7, #16]
 800c2aa:	f383 8810 	msr	PRIMASK, r3
}
 800c2ae:	46c0      	nop			@ (mov r8, r8)
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	681a      	ldr	r2, [r3, #0]
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	4922      	ldr	r1, [pc, #136]	@ (800c344 <UART_CheckIdleState+0x150>)
 800c2bc:	400a      	ands	r2, r1
 800c2be:	601a      	str	r2, [r3, #0]
 800c2c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c2c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c2c4:	697b      	ldr	r3, [r7, #20]
 800c2c6:	f383 8810 	msr	PRIMASK, r3
}
 800c2ca:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800c2cc:	f3ef 8310 	mrs	r3, PRIMASK
 800c2d0:	61bb      	str	r3, [r7, #24]
  return(result);
 800c2d2:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c2d4:	633b      	str	r3, [r7, #48]	@ 0x30
 800c2d6:	2301      	movs	r3, #1
 800c2d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c2da:	69fb      	ldr	r3, [r7, #28]
 800c2dc:	f383 8810 	msr	PRIMASK, r3
}
 800c2e0:	46c0      	nop			@ (mov r8, r8)
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	689a      	ldr	r2, [r3, #8]
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	2101      	movs	r1, #1
 800c2ee:	438a      	bics	r2, r1
 800c2f0:	609a      	str	r2, [r3, #8]
 800c2f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2f4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c2f6:	6a3b      	ldr	r3, [r7, #32]
 800c2f8:	f383 8810 	msr	PRIMASK, r3
}
 800c2fc:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	228c      	movs	r2, #140	@ 0x8c
 800c302:	2120      	movs	r1, #32
 800c304:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	2284      	movs	r2, #132	@ 0x84
 800c30a:	2100      	movs	r1, #0
 800c30c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c30e:	2303      	movs	r3, #3
 800c310:	e012      	b.n	800c338 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	2288      	movs	r2, #136	@ 0x88
 800c316:	2120      	movs	r1, #32
 800c318:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	228c      	movs	r2, #140	@ 0x8c
 800c31e:	2120      	movs	r1, #32
 800c320:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	2200      	movs	r2, #0
 800c326:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	2200      	movs	r2, #0
 800c32c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	2284      	movs	r2, #132	@ 0x84
 800c332:	2100      	movs	r1, #0
 800c334:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c336:	2300      	movs	r3, #0
}
 800c338:	0018      	movs	r0, r3
 800c33a:	46bd      	mov	sp, r7
 800c33c:	b010      	add	sp, #64	@ 0x40
 800c33e:	bd80      	pop	{r7, pc}
 800c340:	01ffffff 	.word	0x01ffffff
 800c344:	fffffedf 	.word	0xfffffedf

0800c348 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b084      	sub	sp, #16
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	60f8      	str	r0, [r7, #12]
 800c350:	60b9      	str	r1, [r7, #8]
 800c352:	603b      	str	r3, [r7, #0]
 800c354:	1dfb      	adds	r3, r7, #7
 800c356:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c358:	e051      	b.n	800c3fe <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c35a:	69bb      	ldr	r3, [r7, #24]
 800c35c:	3301      	adds	r3, #1
 800c35e:	d04e      	beq.n	800c3fe <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c360:	f7f9 fc30 	bl	8005bc4 <HAL_GetTick>
 800c364:	0002      	movs	r2, r0
 800c366:	683b      	ldr	r3, [r7, #0]
 800c368:	1ad3      	subs	r3, r2, r3
 800c36a:	69ba      	ldr	r2, [r7, #24]
 800c36c:	429a      	cmp	r2, r3
 800c36e:	d302      	bcc.n	800c376 <UART_WaitOnFlagUntilTimeout+0x2e>
 800c370:	69bb      	ldr	r3, [r7, #24]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d101      	bne.n	800c37a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800c376:	2303      	movs	r3, #3
 800c378:	e051      	b.n	800c41e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	2204      	movs	r2, #4
 800c382:	4013      	ands	r3, r2
 800c384:	d03b      	beq.n	800c3fe <UART_WaitOnFlagUntilTimeout+0xb6>
 800c386:	68bb      	ldr	r3, [r7, #8]
 800c388:	2b80      	cmp	r3, #128	@ 0x80
 800c38a:	d038      	beq.n	800c3fe <UART_WaitOnFlagUntilTimeout+0xb6>
 800c38c:	68bb      	ldr	r3, [r7, #8]
 800c38e:	2b40      	cmp	r3, #64	@ 0x40
 800c390:	d035      	beq.n	800c3fe <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	69db      	ldr	r3, [r3, #28]
 800c398:	2208      	movs	r2, #8
 800c39a:	4013      	ands	r3, r2
 800c39c:	2b08      	cmp	r3, #8
 800c39e:	d111      	bne.n	800c3c4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	2208      	movs	r2, #8
 800c3a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	0018      	movs	r0, r3
 800c3ac:	f000 f922 	bl	800c5f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	2290      	movs	r2, #144	@ 0x90
 800c3b4:	2108      	movs	r1, #8
 800c3b6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	2284      	movs	r2, #132	@ 0x84
 800c3bc:	2100      	movs	r1, #0
 800c3be:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800c3c0:	2301      	movs	r3, #1
 800c3c2:	e02c      	b.n	800c41e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	69da      	ldr	r2, [r3, #28]
 800c3ca:	2380      	movs	r3, #128	@ 0x80
 800c3cc:	011b      	lsls	r3, r3, #4
 800c3ce:	401a      	ands	r2, r3
 800c3d0:	2380      	movs	r3, #128	@ 0x80
 800c3d2:	011b      	lsls	r3, r3, #4
 800c3d4:	429a      	cmp	r2, r3
 800c3d6:	d112      	bne.n	800c3fe <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	2280      	movs	r2, #128	@ 0x80
 800c3de:	0112      	lsls	r2, r2, #4
 800c3e0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	0018      	movs	r0, r3
 800c3e6:	f000 f905 	bl	800c5f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	2290      	movs	r2, #144	@ 0x90
 800c3ee:	2120      	movs	r1, #32
 800c3f0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	2284      	movs	r2, #132	@ 0x84
 800c3f6:	2100      	movs	r1, #0
 800c3f8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800c3fa:	2303      	movs	r3, #3
 800c3fc:	e00f      	b.n	800c41e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	69db      	ldr	r3, [r3, #28]
 800c404:	68ba      	ldr	r2, [r7, #8]
 800c406:	4013      	ands	r3, r2
 800c408:	68ba      	ldr	r2, [r7, #8]
 800c40a:	1ad3      	subs	r3, r2, r3
 800c40c:	425a      	negs	r2, r3
 800c40e:	4153      	adcs	r3, r2
 800c410:	b2db      	uxtb	r3, r3
 800c412:	001a      	movs	r2, r3
 800c414:	1dfb      	adds	r3, r7, #7
 800c416:	781b      	ldrb	r3, [r3, #0]
 800c418:	429a      	cmp	r2, r3
 800c41a:	d09e      	beq.n	800c35a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c41c:	2300      	movs	r3, #0
}
 800c41e:	0018      	movs	r0, r3
 800c420:	46bd      	mov	sp, r7
 800c422:	b004      	add	sp, #16
 800c424:	bd80      	pop	{r7, pc}
	...

0800c428 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b090      	sub	sp, #64	@ 0x40
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	60f8      	str	r0, [r7, #12]
 800c430:	60b9      	str	r1, [r7, #8]
 800c432:	1dbb      	adds	r3, r7, #6
 800c434:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	68ba      	ldr	r2, [r7, #8]
 800c43a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	1dba      	adds	r2, r7, #6
 800c440:	215c      	movs	r1, #92	@ 0x5c
 800c442:	8812      	ldrh	r2, [r2, #0]
 800c444:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	2290      	movs	r2, #144	@ 0x90
 800c44a:	2100      	movs	r1, #0
 800c44c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	228c      	movs	r2, #140	@ 0x8c
 800c452:	2122      	movs	r1, #34	@ 0x22
 800c454:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	2280      	movs	r2, #128	@ 0x80
 800c45a:	589b      	ldr	r3, [r3, r2]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d02d      	beq.n	800c4bc <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	2280      	movs	r2, #128	@ 0x80
 800c464:	589b      	ldr	r3, [r3, r2]
 800c466:	4a40      	ldr	r2, [pc, #256]	@ (800c568 <UART_Start_Receive_DMA+0x140>)
 800c468:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	2280      	movs	r2, #128	@ 0x80
 800c46e:	589b      	ldr	r3, [r3, r2]
 800c470:	4a3e      	ldr	r2, [pc, #248]	@ (800c56c <UART_Start_Receive_DMA+0x144>)
 800c472:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	2280      	movs	r2, #128	@ 0x80
 800c478:	589b      	ldr	r3, [r3, r2]
 800c47a:	4a3d      	ldr	r2, [pc, #244]	@ (800c570 <UART_Start_Receive_DMA+0x148>)
 800c47c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	2280      	movs	r2, #128	@ 0x80
 800c482:	589b      	ldr	r3, [r3, r2]
 800c484:	2200      	movs	r2, #0
 800c486:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	2280      	movs	r2, #128	@ 0x80
 800c48c:	5898      	ldr	r0, [r3, r2]
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	3324      	adds	r3, #36	@ 0x24
 800c494:	0019      	movs	r1, r3
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c49a:	001a      	movs	r2, r3
 800c49c:	1dbb      	adds	r3, r7, #6
 800c49e:	881b      	ldrh	r3, [r3, #0]
 800c4a0:	f7f9 fdd0 	bl	8006044 <HAL_DMA_Start_IT>
 800c4a4:	1e03      	subs	r3, r0, #0
 800c4a6:	d009      	beq.n	800c4bc <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	2290      	movs	r2, #144	@ 0x90
 800c4ac:	2110      	movs	r1, #16
 800c4ae:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	228c      	movs	r2, #140	@ 0x8c
 800c4b4:	2120      	movs	r1, #32
 800c4b6:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 800c4b8:	2301      	movs	r3, #1
 800c4ba:	e050      	b.n	800c55e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	691b      	ldr	r3, [r3, #16]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d019      	beq.n	800c4f8 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800c4c4:	f3ef 8310 	mrs	r3, PRIMASK
 800c4c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800c4ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c4cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c4ce:	2301      	movs	r3, #1
 800c4d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c4d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4d4:	f383 8810 	msr	PRIMASK, r3
}
 800c4d8:	46c0      	nop			@ (mov r8, r8)
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	681a      	ldr	r2, [r3, #0]
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	2180      	movs	r1, #128	@ 0x80
 800c4e6:	0049      	lsls	r1, r1, #1
 800c4e8:	430a      	orrs	r2, r1
 800c4ea:	601a      	str	r2, [r3, #0]
 800c4ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4ee:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c4f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4f2:	f383 8810 	msr	PRIMASK, r3
}
 800c4f6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800c4f8:	f3ef 8310 	mrs	r3, PRIMASK
 800c4fc:	613b      	str	r3, [r7, #16]
  return(result);
 800c4fe:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c500:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c502:	2301      	movs	r3, #1
 800c504:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c506:	697b      	ldr	r3, [r7, #20]
 800c508:	f383 8810 	msr	PRIMASK, r3
}
 800c50c:	46c0      	nop			@ (mov r8, r8)
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	689a      	ldr	r2, [r3, #8]
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	2101      	movs	r1, #1
 800c51a:	430a      	orrs	r2, r1
 800c51c:	609a      	str	r2, [r3, #8]
 800c51e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c520:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c522:	69bb      	ldr	r3, [r7, #24]
 800c524:	f383 8810 	msr	PRIMASK, r3
}
 800c528:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800c52a:	f3ef 8310 	mrs	r3, PRIMASK
 800c52e:	61fb      	str	r3, [r7, #28]
  return(result);
 800c530:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c532:	637b      	str	r3, [r7, #52]	@ 0x34
 800c534:	2301      	movs	r3, #1
 800c536:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c538:	6a3b      	ldr	r3, [r7, #32]
 800c53a:	f383 8810 	msr	PRIMASK, r3
}
 800c53e:	46c0      	nop			@ (mov r8, r8)
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	689a      	ldr	r2, [r3, #8]
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	2140      	movs	r1, #64	@ 0x40
 800c54c:	430a      	orrs	r2, r1
 800c54e:	609a      	str	r2, [r3, #8]
 800c550:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c552:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c556:	f383 8810 	msr	PRIMASK, r3
}
 800c55a:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 800c55c:	2300      	movs	r3, #0
}
 800c55e:	0018      	movs	r0, r3
 800c560:	46bd      	mov	sp, r7
 800c562:	b010      	add	sp, #64	@ 0x40
 800c564:	bd80      	pop	{r7, pc}
 800c566:	46c0      	nop			@ (mov r8, r8)
 800c568:	0800c779 	.word	0x0800c779
 800c56c:	0800c8a9 	.word	0x0800c8a9
 800c570:	0800c8eb 	.word	0x0800c8eb

0800c574 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b08a      	sub	sp, #40	@ 0x28
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800c57c:	f3ef 8310 	mrs	r3, PRIMASK
 800c580:	60bb      	str	r3, [r7, #8]
  return(result);
 800c582:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c584:	627b      	str	r3, [r7, #36]	@ 0x24
 800c586:	2301      	movs	r3, #1
 800c588:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	f383 8810 	msr	PRIMASK, r3
}
 800c590:	46c0      	nop			@ (mov r8, r8)
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	681a      	ldr	r2, [r3, #0]
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	21c0      	movs	r1, #192	@ 0xc0
 800c59e:	438a      	bics	r2, r1
 800c5a0:	601a      	str	r2, [r3, #0]
 800c5a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c5a6:	693b      	ldr	r3, [r7, #16]
 800c5a8:	f383 8810 	msr	PRIMASK, r3
}
 800c5ac:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800c5ae:	f3ef 8310 	mrs	r3, PRIMASK
 800c5b2:	617b      	str	r3, [r7, #20]
  return(result);
 800c5b4:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c5b6:	623b      	str	r3, [r7, #32]
 800c5b8:	2301      	movs	r3, #1
 800c5ba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c5bc:	69bb      	ldr	r3, [r7, #24]
 800c5be:	f383 8810 	msr	PRIMASK, r3
}
 800c5c2:	46c0      	nop			@ (mov r8, r8)
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	689a      	ldr	r2, [r3, #8]
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	4908      	ldr	r1, [pc, #32]	@ (800c5f0 <UART_EndTxTransfer+0x7c>)
 800c5d0:	400a      	ands	r2, r1
 800c5d2:	609a      	str	r2, [r3, #8]
 800c5d4:	6a3b      	ldr	r3, [r7, #32]
 800c5d6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c5d8:	69fb      	ldr	r3, [r7, #28]
 800c5da:	f383 8810 	msr	PRIMASK, r3
}
 800c5de:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2288      	movs	r2, #136	@ 0x88
 800c5e4:	2120      	movs	r1, #32
 800c5e6:	5099      	str	r1, [r3, r2]
}
 800c5e8:	46c0      	nop			@ (mov r8, r8)
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	b00a      	add	sp, #40	@ 0x28
 800c5ee:	bd80      	pop	{r7, pc}
 800c5f0:	ff7fffff 	.word	0xff7fffff

0800c5f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b08e      	sub	sp, #56	@ 0x38
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800c5fc:	f3ef 8310 	mrs	r3, PRIMASK
 800c600:	617b      	str	r3, [r7, #20]
  return(result);
 800c602:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c604:	637b      	str	r3, [r7, #52]	@ 0x34
 800c606:	2301      	movs	r3, #1
 800c608:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c60a:	69bb      	ldr	r3, [r7, #24]
 800c60c:	f383 8810 	msr	PRIMASK, r3
}
 800c610:	46c0      	nop			@ (mov r8, r8)
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	681a      	ldr	r2, [r3, #0]
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	4926      	ldr	r1, [pc, #152]	@ (800c6b8 <UART_EndRxTransfer+0xc4>)
 800c61e:	400a      	ands	r2, r1
 800c620:	601a      	str	r2, [r3, #0]
 800c622:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c624:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c626:	69fb      	ldr	r3, [r7, #28]
 800c628:	f383 8810 	msr	PRIMASK, r3
}
 800c62c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800c62e:	f3ef 8310 	mrs	r3, PRIMASK
 800c632:	623b      	str	r3, [r7, #32]
  return(result);
 800c634:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c636:	633b      	str	r3, [r7, #48]	@ 0x30
 800c638:	2301      	movs	r3, #1
 800c63a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c63c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c63e:	f383 8810 	msr	PRIMASK, r3
}
 800c642:	46c0      	nop			@ (mov r8, r8)
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	689a      	ldr	r2, [r3, #8]
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	491b      	ldr	r1, [pc, #108]	@ (800c6bc <UART_EndRxTransfer+0xc8>)
 800c650:	400a      	ands	r2, r1
 800c652:	609a      	str	r2, [r3, #8]
 800c654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c656:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c65a:	f383 8810 	msr	PRIMASK, r3
}
 800c65e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c664:	2b01      	cmp	r3, #1
 800c666:	d118      	bne.n	800c69a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800c668:	f3ef 8310 	mrs	r3, PRIMASK
 800c66c:	60bb      	str	r3, [r7, #8]
  return(result);
 800c66e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c670:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c672:	2301      	movs	r3, #1
 800c674:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	f383 8810 	msr	PRIMASK, r3
}
 800c67c:	46c0      	nop			@ (mov r8, r8)
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	681a      	ldr	r2, [r3, #0]
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	2110      	movs	r1, #16
 800c68a:	438a      	bics	r2, r1
 800c68c:	601a      	str	r2, [r3, #0]
 800c68e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c690:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c692:	693b      	ldr	r3, [r7, #16]
 800c694:	f383 8810 	msr	PRIMASK, r3
}
 800c698:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	228c      	movs	r2, #140	@ 0x8c
 800c69e:	2120      	movs	r1, #32
 800c6a0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c6ae:	46c0      	nop			@ (mov r8, r8)
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	b00e      	add	sp, #56	@ 0x38
 800c6b4:	bd80      	pop	{r7, pc}
 800c6b6:	46c0      	nop			@ (mov r8, r8)
 800c6b8:	fffffedf 	.word	0xfffffedf
 800c6bc:	effffffe 	.word	0xeffffffe

0800c6c0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b08c      	sub	sp, #48	@ 0x30
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6cc:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	2220      	movs	r2, #32
 800c6d6:	4013      	ands	r3, r2
 800c6d8:	d135      	bne.n	800c746 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 800c6da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6dc:	2256      	movs	r2, #86	@ 0x56
 800c6de:	2100      	movs	r1, #0
 800c6e0:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800c6e2:	f3ef 8310 	mrs	r3, PRIMASK
 800c6e6:	60fb      	str	r3, [r7, #12]
  return(result);
 800c6e8:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c6ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c6ec:	2301      	movs	r3, #1
 800c6ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c6f0:	693b      	ldr	r3, [r7, #16]
 800c6f2:	f383 8810 	msr	PRIMASK, r3
}
 800c6f6:	46c0      	nop			@ (mov r8, r8)
 800c6f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	689a      	ldr	r2, [r3, #8]
 800c6fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	2180      	movs	r1, #128	@ 0x80
 800c704:	438a      	bics	r2, r1
 800c706:	609a      	str	r2, [r3, #8]
 800c708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c70a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c70c:	697b      	ldr	r3, [r7, #20]
 800c70e:	f383 8810 	msr	PRIMASK, r3
}
 800c712:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800c714:	f3ef 8310 	mrs	r3, PRIMASK
 800c718:	61bb      	str	r3, [r7, #24]
  return(result);
 800c71a:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c71c:	627b      	str	r3, [r7, #36]	@ 0x24
 800c71e:	2301      	movs	r3, #1
 800c720:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c722:	69fb      	ldr	r3, [r7, #28]
 800c724:	f383 8810 	msr	PRIMASK, r3
}
 800c728:	46c0      	nop			@ (mov r8, r8)
 800c72a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	681a      	ldr	r2, [r3, #0]
 800c730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	2140      	movs	r1, #64	@ 0x40
 800c736:	430a      	orrs	r2, r1
 800c738:	601a      	str	r2, [r3, #0]
 800c73a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c73c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c73e:	6a3b      	ldr	r3, [r7, #32]
 800c740:	f383 8810 	msr	PRIMASK, r3
}
 800c744:	e004      	b.n	800c750 <UART_DMATransmitCplt+0x90>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 800c746:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c748:	0018      	movs	r0, r3
 800c74a:	f7f7 fdff 	bl	800434c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c74e:	46c0      	nop			@ (mov r8, r8)
 800c750:	46c0      	nop			@ (mov r8, r8)
 800c752:	46bd      	mov	sp, r7
 800c754:	b00c      	add	sp, #48	@ 0x30
 800c756:	bd80      	pop	{r7, pc}

0800c758 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b084      	sub	sp, #16
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c764:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	0018      	movs	r0, r3
 800c76a:	f7ff faf9 	bl	800bd60 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c76e:	46c0      	nop			@ (mov r8, r8)
 800c770:	46bd      	mov	sp, r7
 800c772:	b004      	add	sp, #16
 800c774:	bd80      	pop	{r7, pc}
	...

0800c778 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b094      	sub	sp, #80	@ 0x50
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c784:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	2220      	movs	r2, #32
 800c78e:	4013      	ands	r3, r2
 800c790:	d16f      	bne.n	800c872 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800c792:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c794:	225e      	movs	r2, #94	@ 0x5e
 800c796:	2100      	movs	r1, #0
 800c798:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800c79a:	f3ef 8310 	mrs	r3, PRIMASK
 800c79e:	61bb      	str	r3, [r7, #24]
  return(result);
 800c7a0:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c7a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c7a4:	2301      	movs	r3, #1
 800c7a6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c7a8:	69fb      	ldr	r3, [r7, #28]
 800c7aa:	f383 8810 	msr	PRIMASK, r3
}
 800c7ae:	46c0      	nop			@ (mov r8, r8)
 800c7b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	681a      	ldr	r2, [r3, #0]
 800c7b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	493a      	ldr	r1, [pc, #232]	@ (800c8a4 <UART_DMAReceiveCplt+0x12c>)
 800c7bc:	400a      	ands	r2, r1
 800c7be:	601a      	str	r2, [r3, #0]
 800c7c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c7c2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c7c4:	6a3b      	ldr	r3, [r7, #32]
 800c7c6:	f383 8810 	msr	PRIMASK, r3
}
 800c7ca:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800c7cc:	f3ef 8310 	mrs	r3, PRIMASK
 800c7d0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800c7d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c7d4:	647b      	str	r3, [r7, #68]	@ 0x44
 800c7d6:	2301      	movs	r3, #1
 800c7d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c7da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7dc:	f383 8810 	msr	PRIMASK, r3
}
 800c7e0:	46c0      	nop			@ (mov r8, r8)
 800c7e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	689a      	ldr	r2, [r3, #8]
 800c7e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	2101      	movs	r1, #1
 800c7ee:	438a      	bics	r2, r1
 800c7f0:	609a      	str	r2, [r3, #8]
 800c7f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c7f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c7f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7f8:	f383 8810 	msr	PRIMASK, r3
}
 800c7fc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800c7fe:	f3ef 8310 	mrs	r3, PRIMASK
 800c802:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800c804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c806:	643b      	str	r3, [r7, #64]	@ 0x40
 800c808:	2301      	movs	r3, #1
 800c80a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c80c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c80e:	f383 8810 	msr	PRIMASK, r3
}
 800c812:	46c0      	nop			@ (mov r8, r8)
 800c814:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	689a      	ldr	r2, [r3, #8]
 800c81a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	2140      	movs	r1, #64	@ 0x40
 800c820:	438a      	bics	r2, r1
 800c822:	609a      	str	r2, [r3, #8]
 800c824:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c826:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c82a:	f383 8810 	msr	PRIMASK, r3
}
 800c82e:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c830:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c832:	228c      	movs	r2, #140	@ 0x8c
 800c834:	2120      	movs	r1, #32
 800c836:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c838:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c83a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c83c:	2b01      	cmp	r3, #1
 800c83e:	d118      	bne.n	800c872 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800c840:	f3ef 8310 	mrs	r3, PRIMASK
 800c844:	60fb      	str	r3, [r7, #12]
  return(result);
 800c846:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c848:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c84a:	2301      	movs	r3, #1
 800c84c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c84e:	693b      	ldr	r3, [r7, #16]
 800c850:	f383 8810 	msr	PRIMASK, r3
}
 800c854:	46c0      	nop			@ (mov r8, r8)
 800c856:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	681a      	ldr	r2, [r3, #0]
 800c85c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	2110      	movs	r1, #16
 800c862:	438a      	bics	r2, r1
 800c864:	601a      	str	r2, [r3, #0]
 800c866:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c868:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c86a:	697b      	ldr	r3, [r7, #20]
 800c86c:	f383 8810 	msr	PRIMASK, r3
}
 800c870:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c872:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c874:	2200      	movs	r2, #0
 800c876:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c878:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c87a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c87c:	2b01      	cmp	r3, #1
 800c87e:	d108      	bne.n	800c892 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c880:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c882:	225c      	movs	r2, #92	@ 0x5c
 800c884:	5a9a      	ldrh	r2, [r3, r2]
 800c886:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c888:	0011      	movs	r1, r2
 800c88a:	0018      	movs	r0, r3
 800c88c:	f7f7 fd02 	bl	8004294 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c890:	e003      	b.n	800c89a <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 800c892:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c894:	0018      	movs	r0, r3
 800c896:	f7ff fa6b 	bl	800bd70 <HAL_UART_RxCpltCallback>
}
 800c89a:	46c0      	nop			@ (mov r8, r8)
 800c89c:	46bd      	mov	sp, r7
 800c89e:	b014      	add	sp, #80	@ 0x50
 800c8a0:	bd80      	pop	{r7, pc}
 800c8a2:	46c0      	nop			@ (mov r8, r8)
 800c8a4:	fffffeff 	.word	0xfffffeff

0800c8a8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b084      	sub	sp, #16
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8b4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	2201      	movs	r2, #1
 800c8ba:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c8c0:	2b01      	cmp	r3, #1
 800c8c2:	d10a      	bne.n	800c8da <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	225c      	movs	r2, #92	@ 0x5c
 800c8c8:	5a9b      	ldrh	r3, [r3, r2]
 800c8ca:	085b      	lsrs	r3, r3, #1
 800c8cc:	b29a      	uxth	r2, r3
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	0011      	movs	r1, r2
 800c8d2:	0018      	movs	r0, r3
 800c8d4:	f7f7 fcde 	bl	8004294 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c8d8:	e003      	b.n	800c8e2 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	0018      	movs	r0, r3
 800c8de:	f7ff fa4f 	bl	800bd80 <HAL_UART_RxHalfCpltCallback>
}
 800c8e2:	46c0      	nop			@ (mov r8, r8)
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	b004      	add	sp, #16
 800c8e8:	bd80      	pop	{r7, pc}

0800c8ea <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c8ea:	b580      	push	{r7, lr}
 800c8ec:	b086      	sub	sp, #24
 800c8ee:	af00      	add	r7, sp, #0
 800c8f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8f6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c8f8:	697b      	ldr	r3, [r7, #20]
 800c8fa:	2288      	movs	r2, #136	@ 0x88
 800c8fc:	589b      	ldr	r3, [r3, r2]
 800c8fe:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c900:	697b      	ldr	r3, [r7, #20]
 800c902:	228c      	movs	r2, #140	@ 0x8c
 800c904:	589b      	ldr	r3, [r3, r2]
 800c906:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c908:	697b      	ldr	r3, [r7, #20]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	689b      	ldr	r3, [r3, #8]
 800c90e:	2280      	movs	r2, #128	@ 0x80
 800c910:	4013      	ands	r3, r2
 800c912:	2b80      	cmp	r3, #128	@ 0x80
 800c914:	d10a      	bne.n	800c92c <UART_DMAError+0x42>
 800c916:	693b      	ldr	r3, [r7, #16]
 800c918:	2b21      	cmp	r3, #33	@ 0x21
 800c91a:	d107      	bne.n	800c92c <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c91c:	697b      	ldr	r3, [r7, #20]
 800c91e:	2256      	movs	r2, #86	@ 0x56
 800c920:	2100      	movs	r1, #0
 800c922:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800c924:	697b      	ldr	r3, [r7, #20]
 800c926:	0018      	movs	r0, r3
 800c928:	f7ff fe24 	bl	800c574 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c92c:	697b      	ldr	r3, [r7, #20]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	689b      	ldr	r3, [r3, #8]
 800c932:	2240      	movs	r2, #64	@ 0x40
 800c934:	4013      	ands	r3, r2
 800c936:	2b40      	cmp	r3, #64	@ 0x40
 800c938:	d10a      	bne.n	800c950 <UART_DMAError+0x66>
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	2b22      	cmp	r3, #34	@ 0x22
 800c93e:	d107      	bne.n	800c950 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c940:	697b      	ldr	r3, [r7, #20]
 800c942:	225e      	movs	r2, #94	@ 0x5e
 800c944:	2100      	movs	r1, #0
 800c946:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800c948:	697b      	ldr	r3, [r7, #20]
 800c94a:	0018      	movs	r0, r3
 800c94c:	f7ff fe52 	bl	800c5f4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c950:	697b      	ldr	r3, [r7, #20]
 800c952:	2290      	movs	r2, #144	@ 0x90
 800c954:	589b      	ldr	r3, [r3, r2]
 800c956:	2210      	movs	r2, #16
 800c958:	431a      	orrs	r2, r3
 800c95a:	697b      	ldr	r3, [r7, #20]
 800c95c:	2190      	movs	r1, #144	@ 0x90
 800c95e:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c960:	697b      	ldr	r3, [r7, #20]
 800c962:	0018      	movs	r0, r3
 800c964:	f7f7 fd00 	bl	8004368 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c968:	46c0      	nop			@ (mov r8, r8)
 800c96a:	46bd      	mov	sp, r7
 800c96c:	b006      	add	sp, #24
 800c96e:	bd80      	pop	{r7, pc}

0800c970 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c970:	b580      	push	{r7, lr}
 800c972:	b084      	sub	sp, #16
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c97c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	225e      	movs	r2, #94	@ 0x5e
 800c982:	2100      	movs	r1, #0
 800c984:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	2256      	movs	r2, #86	@ 0x56
 800c98a:	2100      	movs	r1, #0
 800c98c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	0018      	movs	r0, r3
 800c992:	f7f7 fce9 	bl	8004368 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c996:	46c0      	nop			@ (mov r8, r8)
 800c998:	46bd      	mov	sp, r7
 800c99a:	b004      	add	sp, #16
 800c99c:	bd80      	pop	{r7, pc}

0800c99e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c99e:	b580      	push	{r7, lr}
 800c9a0:	b086      	sub	sp, #24
 800c9a2:	af00      	add	r7, sp, #0
 800c9a4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800c9a6:	f3ef 8310 	mrs	r3, PRIMASK
 800c9aa:	60bb      	str	r3, [r7, #8]
  return(result);
 800c9ac:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c9ae:	617b      	str	r3, [r7, #20]
 800c9b0:	2301      	movs	r3, #1
 800c9b2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	f383 8810 	msr	PRIMASK, r3
}
 800c9ba:	46c0      	nop			@ (mov r8, r8)
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	681a      	ldr	r2, [r3, #0]
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	2140      	movs	r1, #64	@ 0x40
 800c9c8:	438a      	bics	r2, r1
 800c9ca:	601a      	str	r2, [r3, #0]
 800c9cc:	697b      	ldr	r3, [r7, #20]
 800c9ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c9d0:	693b      	ldr	r3, [r7, #16]
 800c9d2:	f383 8810 	msr	PRIMASK, r3
}
 800c9d6:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	2288      	movs	r2, #136	@ 0x88
 800c9dc:	2120      	movs	r1, #32
 800c9de:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	0018      	movs	r0, r3
 800c9ea:	f7f7 fcaf 	bl	800434c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c9ee:	46c0      	nop			@ (mov r8, r8)
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	b006      	add	sp, #24
 800c9f4:	bd80      	pop	{r7, pc}
	...

0800c9f8 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b086      	sub	sp, #24
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	60f8      	str	r0, [r7, #12]
 800ca00:	60b9      	str	r1, [r7, #8]
 800ca02:	607a      	str	r2, [r7, #4]
 800ca04:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d101      	bne.n	800ca10 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 800ca0c:	2301      	movs	r3, #1
 800ca0e:	e05d      	b.n	800cacc <HAL_RS485Ex_Init+0xd4>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	2288      	movs	r2, #136	@ 0x88
 800ca14:	589b      	ldr	r3, [r3, r2]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d107      	bne.n	800ca2a <HAL_RS485Ex_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	2284      	movs	r2, #132	@ 0x84
 800ca1e:	2100      	movs	r1, #0
 800ca20:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	0018      	movs	r0, r3
 800ca26:	f7f8 fda9 	bl	800557c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	2288      	movs	r2, #136	@ 0x88
 800ca2e:	2124      	movs	r1, #36	@ 0x24
 800ca30:	5099      	str	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	681a      	ldr	r2, [r3, #0]
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	2101      	movs	r1, #1
 800ca3e:	438a      	bics	r2, r1
 800ca40:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d003      	beq.n	800ca52 <HAL_RS485Ex_Init+0x5a>
  {
    UART_AdvFeatureConfig(huart);
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	0018      	movs	r0, r3
 800ca4e:	f7ff fb1d 	bl	800c08c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	0018      	movs	r0, r3
 800ca56:	f7ff f99b 	bl	800bd90 <UART_SetConfig>
 800ca5a:	0003      	movs	r3, r0
 800ca5c:	2b01      	cmp	r3, #1
 800ca5e:	d101      	bne.n	800ca64 <HAL_RS485Ex_Init+0x6c>
  {
    return HAL_ERROR;
 800ca60:	2301      	movs	r3, #1
 800ca62:	e033      	b.n	800cacc <HAL_RS485Ex_Init+0xd4>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	689a      	ldr	r2, [r3, #8]
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	2180      	movs	r1, #128	@ 0x80
 800ca70:	01c9      	lsls	r1, r1, #7
 800ca72:	430a      	orrs	r2, r1
 800ca74:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	689b      	ldr	r3, [r3, #8]
 800ca7c:	4a15      	ldr	r2, [pc, #84]	@ (800cad4 <HAL_RS485Ex_Init+0xdc>)
 800ca7e:	4013      	ands	r3, r2
 800ca80:	0019      	movs	r1, r3
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	68ba      	ldr	r2, [r7, #8]
 800ca88:	430a      	orrs	r2, r1
 800ca8a:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	055b      	lsls	r3, r3, #21
 800ca90:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800ca92:	683b      	ldr	r3, [r7, #0]
 800ca94:	041b      	lsls	r3, r3, #16
 800ca96:	697a      	ldr	r2, [r7, #20]
 800ca98:	4313      	orrs	r3, r2
 800ca9a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	4a0d      	ldr	r2, [pc, #52]	@ (800cad8 <HAL_RS485Ex_Init+0xe0>)
 800caa4:	4013      	ands	r3, r2
 800caa6:	0019      	movs	r1, r3
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	697a      	ldr	r2, [r7, #20]
 800caae:	430a      	orrs	r2, r1
 800cab0:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	681a      	ldr	r2, [r3, #0]
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	2101      	movs	r1, #1
 800cabe:	430a      	orrs	r2, r1
 800cac0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	0018      	movs	r0, r3
 800cac6:	f7ff fb95 	bl	800c1f4 <UART_CheckIdleState>
 800caca:	0003      	movs	r3, r0
}
 800cacc:	0018      	movs	r0, r3
 800cace:	46bd      	mov	sp, r7
 800cad0:	b006      	add	sp, #24
 800cad2:	bd80      	pop	{r7, pc}
 800cad4:	ffff7fff 	.word	0xffff7fff
 800cad8:	fc00ffff 	.word	0xfc00ffff

0800cadc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b082      	sub	sp, #8
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800cae4:	46c0      	nop			@ (mov r8, r8)
 800cae6:	46bd      	mov	sp, r7
 800cae8:	b002      	add	sp, #8
 800caea:	bd80      	pop	{r7, pc}

0800caec <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800caec:	b580      	push	{r7, lr}
 800caee:	b082      	sub	sp, #8
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800caf4:	46c0      	nop			@ (mov r8, r8)
 800caf6:	46bd      	mov	sp, r7
 800caf8:	b002      	add	sp, #8
 800cafa:	bd80      	pop	{r7, pc}

0800cafc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b082      	sub	sp, #8
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800cb04:	46c0      	nop			@ (mov r8, r8)
 800cb06:	46bd      	mov	sp, r7
 800cb08:	b002      	add	sp, #8
 800cb0a:	bd80      	pop	{r7, pc}

0800cb0c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b084      	sub	sp, #16
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	2284      	movs	r2, #132	@ 0x84
 800cb18:	5c9b      	ldrb	r3, [r3, r2]
 800cb1a:	2b01      	cmp	r3, #1
 800cb1c:	d101      	bne.n	800cb22 <HAL_UARTEx_DisableFifoMode+0x16>
 800cb1e:	2302      	movs	r3, #2
 800cb20:	e027      	b.n	800cb72 <HAL_UARTEx_DisableFifoMode+0x66>
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	2284      	movs	r2, #132	@ 0x84
 800cb26:	2101      	movs	r1, #1
 800cb28:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	2288      	movs	r2, #136	@ 0x88
 800cb2e:	2124      	movs	r1, #36	@ 0x24
 800cb30:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	681a      	ldr	r2, [r3, #0]
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	2101      	movs	r1, #1
 800cb46:	438a      	bics	r2, r1
 800cb48:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	4a0b      	ldr	r2, [pc, #44]	@ (800cb7c <HAL_UARTEx_DisableFifoMode+0x70>)
 800cb4e:	4013      	ands	r3, r2
 800cb50:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	2200      	movs	r2, #0
 800cb56:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	68fa      	ldr	r2, [r7, #12]
 800cb5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	2288      	movs	r2, #136	@ 0x88
 800cb64:	2120      	movs	r1, #32
 800cb66:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	2284      	movs	r2, #132	@ 0x84
 800cb6c:	2100      	movs	r1, #0
 800cb6e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800cb70:	2300      	movs	r3, #0
}
 800cb72:	0018      	movs	r0, r3
 800cb74:	46bd      	mov	sp, r7
 800cb76:	b004      	add	sp, #16
 800cb78:	bd80      	pop	{r7, pc}
 800cb7a:	46c0      	nop			@ (mov r8, r8)
 800cb7c:	dfffffff 	.word	0xdfffffff

0800cb80 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b084      	sub	sp, #16
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
 800cb88:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	2284      	movs	r2, #132	@ 0x84
 800cb8e:	5c9b      	ldrb	r3, [r3, r2]
 800cb90:	2b01      	cmp	r3, #1
 800cb92:	d101      	bne.n	800cb98 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cb94:	2302      	movs	r3, #2
 800cb96:	e02e      	b.n	800cbf6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	2284      	movs	r2, #132	@ 0x84
 800cb9c:	2101      	movs	r1, #1
 800cb9e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2288      	movs	r2, #136	@ 0x88
 800cba4:	2124      	movs	r1, #36	@ 0x24
 800cba6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	681a      	ldr	r2, [r3, #0]
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	2101      	movs	r1, #1
 800cbbc:	438a      	bics	r2, r1
 800cbbe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	689b      	ldr	r3, [r3, #8]
 800cbc6:	00db      	lsls	r3, r3, #3
 800cbc8:	08d9      	lsrs	r1, r3, #3
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	683a      	ldr	r2, [r7, #0]
 800cbd0:	430a      	orrs	r2, r1
 800cbd2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	0018      	movs	r0, r3
 800cbd8:	f000 f8bc 	bl	800cd54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	68fa      	ldr	r2, [r7, #12]
 800cbe2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	2288      	movs	r2, #136	@ 0x88
 800cbe8:	2120      	movs	r1, #32
 800cbea:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	2284      	movs	r2, #132	@ 0x84
 800cbf0:	2100      	movs	r1, #0
 800cbf2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800cbf4:	2300      	movs	r3, #0
}
 800cbf6:	0018      	movs	r0, r3
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	b004      	add	sp, #16
 800cbfc:	bd80      	pop	{r7, pc}
	...

0800cc00 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b084      	sub	sp, #16
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
 800cc08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	2284      	movs	r2, #132	@ 0x84
 800cc0e:	5c9b      	ldrb	r3, [r3, r2]
 800cc10:	2b01      	cmp	r3, #1
 800cc12:	d101      	bne.n	800cc18 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cc14:	2302      	movs	r3, #2
 800cc16:	e02f      	b.n	800cc78 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	2284      	movs	r2, #132	@ 0x84
 800cc1c:	2101      	movs	r1, #1
 800cc1e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	2288      	movs	r2, #136	@ 0x88
 800cc24:	2124      	movs	r1, #36	@ 0x24
 800cc26:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	681a      	ldr	r2, [r3, #0]
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	2101      	movs	r1, #1
 800cc3c:	438a      	bics	r2, r1
 800cc3e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	689b      	ldr	r3, [r3, #8]
 800cc46:	4a0e      	ldr	r2, [pc, #56]	@ (800cc80 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800cc48:	4013      	ands	r3, r2
 800cc4a:	0019      	movs	r1, r3
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	683a      	ldr	r2, [r7, #0]
 800cc52:	430a      	orrs	r2, r1
 800cc54:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	0018      	movs	r0, r3
 800cc5a:	f000 f87b 	bl	800cd54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	68fa      	ldr	r2, [r7, #12]
 800cc64:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	2288      	movs	r2, #136	@ 0x88
 800cc6a:	2120      	movs	r1, #32
 800cc6c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	2284      	movs	r2, #132	@ 0x84
 800cc72:	2100      	movs	r1, #0
 800cc74:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800cc76:	2300      	movs	r3, #0
}
 800cc78:	0018      	movs	r0, r3
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	b004      	add	sp, #16
 800cc7e:	bd80      	pop	{r7, pc}
 800cc80:	f1ffffff 	.word	0xf1ffffff

0800cc84 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cc84:	b5b0      	push	{r4, r5, r7, lr}
 800cc86:	b08a      	sub	sp, #40	@ 0x28
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	60f8      	str	r0, [r7, #12]
 800cc8c:	60b9      	str	r1, [r7, #8]
 800cc8e:	1dbb      	adds	r3, r7, #6
 800cc90:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	228c      	movs	r2, #140	@ 0x8c
 800cc96:	589b      	ldr	r3, [r3, r2]
 800cc98:	2b20      	cmp	r3, #32
 800cc9a:	d156      	bne.n	800cd4a <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 800cc9c:	68bb      	ldr	r3, [r7, #8]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d003      	beq.n	800ccaa <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800cca2:	1dbb      	adds	r3, r7, #6
 800cca4:	881b      	ldrh	r3, [r3, #0]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d101      	bne.n	800ccae <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800ccaa:	2301      	movs	r3, #1
 800ccac:	e04e      	b.n	800cd4c <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	689a      	ldr	r2, [r3, #8]
 800ccb2:	2380      	movs	r3, #128	@ 0x80
 800ccb4:	015b      	lsls	r3, r3, #5
 800ccb6:	429a      	cmp	r2, r3
 800ccb8:	d109      	bne.n	800ccce <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	691b      	ldr	r3, [r3, #16]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d105      	bne.n	800ccce <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800ccc2:	68bb      	ldr	r3, [r7, #8]
 800ccc4:	2201      	movs	r2, #1
 800ccc6:	4013      	ands	r3, r2
 800ccc8:	d001      	beq.n	800ccce <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 800ccca:	2301      	movs	r3, #1
 800cccc:	e03e      	b.n	800cd4c <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	2201      	movs	r2, #1
 800ccd2:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800ccda:	2527      	movs	r5, #39	@ 0x27
 800ccdc:	197c      	adds	r4, r7, r5
 800ccde:	1dbb      	adds	r3, r7, #6
 800cce0:	881a      	ldrh	r2, [r3, #0]
 800cce2:	68b9      	ldr	r1, [r7, #8]
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	0018      	movs	r0, r3
 800cce8:	f7ff fb9e 	bl	800c428 <UART_Start_Receive_DMA>
 800ccec:	0003      	movs	r3, r0
 800ccee:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800ccf0:	197b      	adds	r3, r7, r5
 800ccf2:	781b      	ldrb	r3, [r3, #0]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d124      	bne.n	800cd42 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ccfc:	2b01      	cmp	r3, #1
 800ccfe:	d11c      	bne.n	800cd3a <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	2210      	movs	r2, #16
 800cd06:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800cd08:	f3ef 8310 	mrs	r3, PRIMASK
 800cd0c:	617b      	str	r3, [r7, #20]
  return(result);
 800cd0e:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cd10:	623b      	str	r3, [r7, #32]
 800cd12:	2301      	movs	r3, #1
 800cd14:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cd16:	69bb      	ldr	r3, [r7, #24]
 800cd18:	f383 8810 	msr	PRIMASK, r3
}
 800cd1c:	46c0      	nop			@ (mov r8, r8)
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	681a      	ldr	r2, [r3, #0]
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	2110      	movs	r1, #16
 800cd2a:	430a      	orrs	r2, r1
 800cd2c:	601a      	str	r2, [r3, #0]
 800cd2e:	6a3b      	ldr	r3, [r7, #32]
 800cd30:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cd32:	69fb      	ldr	r3, [r7, #28]
 800cd34:	f383 8810 	msr	PRIMASK, r3
}
 800cd38:	e003      	b.n	800cd42 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800cd3a:	2327      	movs	r3, #39	@ 0x27
 800cd3c:	18fb      	adds	r3, r7, r3
 800cd3e:	2201      	movs	r2, #1
 800cd40:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 800cd42:	2327      	movs	r3, #39	@ 0x27
 800cd44:	18fb      	adds	r3, r7, r3
 800cd46:	781b      	ldrb	r3, [r3, #0]
 800cd48:	e000      	b.n	800cd4c <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 800cd4a:	2302      	movs	r3, #2
  }
}
 800cd4c:	0018      	movs	r0, r3
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	b00a      	add	sp, #40	@ 0x28
 800cd52:	bdb0      	pop	{r4, r5, r7, pc}

0800cd54 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cd54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd56:	b085      	sub	sp, #20
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d108      	bne.n	800cd76 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	226a      	movs	r2, #106	@ 0x6a
 800cd68:	2101      	movs	r1, #1
 800cd6a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	2268      	movs	r2, #104	@ 0x68
 800cd70:	2101      	movs	r1, #1
 800cd72:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cd74:	e043      	b.n	800cdfe <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cd76:	260f      	movs	r6, #15
 800cd78:	19bb      	adds	r3, r7, r6
 800cd7a:	2208      	movs	r2, #8
 800cd7c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cd7e:	200e      	movs	r0, #14
 800cd80:	183b      	adds	r3, r7, r0
 800cd82:	2208      	movs	r2, #8
 800cd84:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	689b      	ldr	r3, [r3, #8]
 800cd8c:	0e5b      	lsrs	r3, r3, #25
 800cd8e:	b2da      	uxtb	r2, r3
 800cd90:	240d      	movs	r4, #13
 800cd92:	193b      	adds	r3, r7, r4
 800cd94:	2107      	movs	r1, #7
 800cd96:	400a      	ands	r2, r1
 800cd98:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	689b      	ldr	r3, [r3, #8]
 800cda0:	0f5b      	lsrs	r3, r3, #29
 800cda2:	b2da      	uxtb	r2, r3
 800cda4:	250c      	movs	r5, #12
 800cda6:	197b      	adds	r3, r7, r5
 800cda8:	2107      	movs	r1, #7
 800cdaa:	400a      	ands	r2, r1
 800cdac:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cdae:	183b      	adds	r3, r7, r0
 800cdb0:	781b      	ldrb	r3, [r3, #0]
 800cdb2:	197a      	adds	r2, r7, r5
 800cdb4:	7812      	ldrb	r2, [r2, #0]
 800cdb6:	4914      	ldr	r1, [pc, #80]	@ (800ce08 <UARTEx_SetNbDataToProcess+0xb4>)
 800cdb8:	5c8a      	ldrb	r2, [r1, r2]
 800cdba:	435a      	muls	r2, r3
 800cdbc:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800cdbe:	197b      	adds	r3, r7, r5
 800cdc0:	781b      	ldrb	r3, [r3, #0]
 800cdc2:	4a12      	ldr	r2, [pc, #72]	@ (800ce0c <UARTEx_SetNbDataToProcess+0xb8>)
 800cdc4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cdc6:	0019      	movs	r1, r3
 800cdc8:	f7f3 fa28 	bl	800021c <__divsi3>
 800cdcc:	0003      	movs	r3, r0
 800cdce:	b299      	uxth	r1, r3
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	226a      	movs	r2, #106	@ 0x6a
 800cdd4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cdd6:	19bb      	adds	r3, r7, r6
 800cdd8:	781b      	ldrb	r3, [r3, #0]
 800cdda:	193a      	adds	r2, r7, r4
 800cddc:	7812      	ldrb	r2, [r2, #0]
 800cdde:	490a      	ldr	r1, [pc, #40]	@ (800ce08 <UARTEx_SetNbDataToProcess+0xb4>)
 800cde0:	5c8a      	ldrb	r2, [r1, r2]
 800cde2:	435a      	muls	r2, r3
 800cde4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800cde6:	193b      	adds	r3, r7, r4
 800cde8:	781b      	ldrb	r3, [r3, #0]
 800cdea:	4a08      	ldr	r2, [pc, #32]	@ (800ce0c <UARTEx_SetNbDataToProcess+0xb8>)
 800cdec:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cdee:	0019      	movs	r1, r3
 800cdf0:	f7f3 fa14 	bl	800021c <__divsi3>
 800cdf4:	0003      	movs	r3, r0
 800cdf6:	b299      	uxth	r1, r3
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	2268      	movs	r2, #104	@ 0x68
 800cdfc:	5299      	strh	r1, [r3, r2]
}
 800cdfe:	46c0      	nop			@ (mov r8, r8)
 800ce00:	46bd      	mov	sp, r7
 800ce02:	b005      	add	sp, #20
 800ce04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce06:	46c0      	nop			@ (mov r8, r8)
 800ce08:	0800d6c4 	.word	0x0800d6c4
 800ce0c:	0800d6cc 	.word	0x0800d6cc

0800ce10 <LL_ADC_REG_GetSequencerConfigurable>:
{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b082      	sub	sp, #8
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_CHSELRMOD));
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	68da      	ldr	r2, [r3, #12]
 800ce1c:	2380      	movs	r3, #128	@ 0x80
 800ce1e:	039b      	lsls	r3, r3, #14
 800ce20:	4013      	ands	r3, r2
}
 800ce22:	0018      	movs	r0, r3
 800ce24:	46bd      	mov	sp, r7
 800ce26:	b002      	add	sp, #8
 800ce28:	bd80      	pop	{r7, pc}

0800ce2a <LL_ADC_REG_SetSequencerLength>:
{
 800ce2a:	b580      	push	{r7, lr}
 800ce2c:	b082      	sub	sp, #8
 800ce2e:	af00      	add	r7, sp, #0
 800ce30:	6078      	str	r0, [r7, #4]
 800ce32:	6039      	str	r1, [r7, #0]
  SET_BIT(ADCx->CHSELR, SequencerNbRanks);
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ce38:	683b      	ldr	r3, [r7, #0]
 800ce3a:	431a      	orrs	r2, r3
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800ce40:	46c0      	nop			@ (mov r8, r8)
 800ce42:	46bd      	mov	sp, r7
 800ce44:	b002      	add	sp, #8
 800ce46:	bd80      	pop	{r7, pc}

0800ce48 <LL_ADC_IsEnabled>:
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b082      	sub	sp, #8
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	689b      	ldr	r3, [r3, #8]
 800ce54:	2201      	movs	r2, #1
 800ce56:	4013      	ands	r3, r2
 800ce58:	2b01      	cmp	r3, #1
 800ce5a:	d101      	bne.n	800ce60 <LL_ADC_IsEnabled+0x18>
 800ce5c:	2301      	movs	r3, #1
 800ce5e:	e000      	b.n	800ce62 <LL_ADC_IsEnabled+0x1a>
 800ce60:	2300      	movs	r3, #0
}
 800ce62:	0018      	movs	r0, r3
 800ce64:	46bd      	mov	sp, r7
 800ce66:	b002      	add	sp, #8
 800ce68:	bd80      	pop	{r7, pc}
	...

0800ce6c <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b084      	sub	sp, #16
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
 800ce74:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800ce76:	230f      	movs	r3, #15
 800ce78:	18fb      	adds	r3, r7, r3
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	0018      	movs	r0, r3
 800ce82:	f7ff ffe1 	bl	800ce48 <LL_ADC_IsEnabled>
 800ce86:	1e03      	subs	r3, r0, #0
 800ce88:	d118      	bne.n	800cebc <LL_ADC_Init+0x50>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR1,
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	68db      	ldr	r3, [r3, #12]
 800ce8e:	4a11      	ldr	r2, [pc, #68]	@ (800ced4 <LL_ADC_Init+0x68>)
 800ce90:	401a      	ands	r2, r3
 800ce92:	683b      	ldr	r3, [r7, #0]
 800ce94:	6859      	ldr	r1, [r3, #4]
 800ce96:	683b      	ldr	r3, [r7, #0]
 800ce98:	689b      	ldr	r3, [r3, #8]
 800ce9a:	4319      	orrs	r1, r3
 800ce9c:	683b      	ldr	r3, [r7, #0]
 800ce9e:	68db      	ldr	r3, [r3, #12]
 800cea0:	430b      	orrs	r3, r1
 800cea2:	431a      	orrs	r2, r3
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	60da      	str	r2, [r3, #12]
               ADC_InitStruct->Resolution
               | ADC_InitStruct->DataAlignment
               | ADC_InitStruct->LowPowerMode
              );

    MODIFY_REG(ADCx->CFGR2,
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	691b      	ldr	r3, [r3, #16]
 800ceac:	009b      	lsls	r3, r3, #2
 800ceae:	089a      	lsrs	r2, r3, #2
 800ceb0:	683b      	ldr	r3, [r7, #0]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	431a      	orrs	r2, r3
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	611a      	str	r2, [r3, #16]
 800ceba:	e003      	b.n	800cec4 <LL_ADC_Init+0x58>
              );
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800cebc:	230f      	movs	r3, #15
 800cebe:	18fb      	adds	r3, r7, r3
 800cec0:	2201      	movs	r2, #1
 800cec2:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800cec4:	230f      	movs	r3, #15
 800cec6:	18fb      	adds	r3, r7, r3
 800cec8:	781b      	ldrb	r3, [r3, #0]
}
 800ceca:	0018      	movs	r0, r3
 800cecc:	46bd      	mov	sp, r7
 800cece:	b004      	add	sp, #16
 800ced0:	bd80      	pop	{r7, pc}
 800ced2:	46c0      	nop			@ (mov r8, r8)
 800ced4:	ffff3fc7 	.word	0xffff3fc7

0800ced8 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 800ced8:	b580      	push	{r7, lr}
 800ceda:	b084      	sub	sp, #16
 800cedc:	af00      	add	r7, sp, #0
 800cede:	6078      	str	r0, [r7, #4]
 800cee0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800cee2:	230f      	movs	r3, #15
 800cee4:	18fb      	adds	r3, r7, r3
 800cee6:	2200      	movs	r2, #0
 800cee8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_ADC_REG_TRIG_SOURCE(ADC_REG_InitStruct->TriggerSource));
  assert_param(IS_LL_ADC_REG_CONTINUOUS_MODE(ADC_REG_InitStruct->ContinuousMode));
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));

  if (LL_ADC_REG_GetSequencerConfigurable(ADCx) != LL_ADC_REG_SEQ_FIXED)
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	0018      	movs	r0, r3
 800ceee:	f7ff ff8f 	bl	800ce10 <LL_ADC_REG_GetSequencerConfigurable>
  {
    assert_param(IS_LL_ADC_REG_SEQ_SCAN_LENGTH(ADC_REG_InitStruct->SequencerLength));
  }

  if ((LL_ADC_REG_GetSequencerConfigurable(ADCx) == LL_ADC_REG_SEQ_FIXED)
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	0018      	movs	r0, r3
 800cef6:	f7ff ff8b 	bl	800ce10 <LL_ADC_REG_GetSequencerConfigurable>
                 || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  }

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	0018      	movs	r0, r3
 800cefe:	f7ff ffa3 	bl	800ce48 <LL_ADC_IsEnabled>
 800cf02:	1e03      	subs	r3, r0, #0
 800cf04:	d13f      	bne.n	800cf86 <LL_ADC_REG_Init+0xae>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by    */
    /*       setting of trigger source to SW start.                           */
    if ((LL_ADC_REG_GetSequencerConfigurable(ADCx) == LL_ADC_REG_SEQ_FIXED)
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	0018      	movs	r0, r3
 800cf0a:	f7ff ff81 	bl	800ce10 <LL_ADC_REG_GetSequencerConfigurable>
 800cf0e:	1e03      	subs	r3, r0, #0
 800cf10:	d003      	beq.n	800cf1a <LL_ADC_REG_Init+0x42>
        || (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 800cf12:	683b      	ldr	r3, [r7, #0]
 800cf14:	685b      	ldr	r3, [r3, #4]
 800cf16:	2bf0      	cmp	r3, #240	@ 0xf0
 800cf18:	d015      	beq.n	800cf46 <LL_ADC_REG_Init+0x6e>
       )
    {
      /* Case of sequencer mode fixed
         or sequencer length >= 2 ranks with sequencer mode fully configurable:
         discontinuous mode configured */
      MODIFY_REG(ADCx->CFGR1,
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	68db      	ldr	r3, [r3, #12]
 800cf1e:	4a1f      	ldr	r2, [pc, #124]	@ (800cf9c <LL_ADC_REG_Init+0xc4>)
 800cf20:	401a      	ands	r2, r3
 800cf22:	683b      	ldr	r3, [r7, #0]
 800cf24:	6819      	ldr	r1, [r3, #0]
 800cf26:	683b      	ldr	r3, [r7, #0]
 800cf28:	689b      	ldr	r3, [r3, #8]
 800cf2a:	4319      	orrs	r1, r3
 800cf2c:	683b      	ldr	r3, [r7, #0]
 800cf2e:	68db      	ldr	r3, [r3, #12]
 800cf30:	4319      	orrs	r1, r3
 800cf32:	683b      	ldr	r3, [r7, #0]
 800cf34:	691b      	ldr	r3, [r3, #16]
 800cf36:	4319      	orrs	r1, r3
 800cf38:	683b      	ldr	r3, [r7, #0]
 800cf3a:	695b      	ldr	r3, [r3, #20]
 800cf3c:	430b      	orrs	r3, r1
 800cf3e:	431a      	orrs	r2, r3
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	60da      	str	r2, [r3, #12]
 800cf44:	e011      	b.n	800cf6a <LL_ADC_REG_Init+0x92>
    else
    {
      /* Case of sequencer mode fully configurable
         and sequencer length 1 rank (sequencer disabled):
         discontinuous mode discarded (fixed to disable) */
      MODIFY_REG(ADCx->CFGR1,
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	68db      	ldr	r3, [r3, #12]
 800cf4a:	4a14      	ldr	r2, [pc, #80]	@ (800cf9c <LL_ADC_REG_Init+0xc4>)
 800cf4c:	401a      	ands	r2, r3
 800cf4e:	683b      	ldr	r3, [r7, #0]
 800cf50:	6819      	ldr	r1, [r3, #0]
 800cf52:	683b      	ldr	r3, [r7, #0]
 800cf54:	68db      	ldr	r3, [r3, #12]
 800cf56:	4319      	orrs	r1, r3
 800cf58:	683b      	ldr	r3, [r7, #0]
 800cf5a:	691b      	ldr	r3, [r3, #16]
 800cf5c:	4319      	orrs	r1, r3
 800cf5e:	683b      	ldr	r3, [r7, #0]
 800cf60:	695b      	ldr	r3, [r3, #20]
 800cf62:	430b      	orrs	r3, r1
 800cf64:	431a      	orrs	r2, r3
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	60da      	str	r2, [r3, #12]
                 | ADC_REG_InitStruct->Overrun
                );
    }

    /* Set ADC group regular sequencer length */
    if (LL_ADC_REG_GetSequencerConfigurable(ADCx) != LL_ADC_REG_SEQ_FIXED)
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	0018      	movs	r0, r3
 800cf6e:	f7ff ff4f 	bl	800ce10 <LL_ADC_REG_GetSequencerConfigurable>
 800cf72:	1e03      	subs	r3, r0, #0
 800cf74:	d00b      	beq.n	800cf8e <LL_ADC_REG_Init+0xb6>
    {
      LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 800cf76:	683b      	ldr	r3, [r7, #0]
 800cf78:	685a      	ldr	r2, [r3, #4]
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	0011      	movs	r1, r2
 800cf7e:	0018      	movs	r0, r3
 800cf80:	f7ff ff53 	bl	800ce2a <LL_ADC_REG_SetSequencerLength>
 800cf84:	e003      	b.n	800cf8e <LL_ADC_REG_Init+0xb6>
    }
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800cf86:	230f      	movs	r3, #15
 800cf88:	18fb      	adds	r3, r7, r3
 800cf8a:	2201      	movs	r2, #1
 800cf8c:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800cf8e:	230f      	movs	r3, #15
 800cf90:	18fb      	adds	r3, r7, r3
 800cf92:	781b      	ldrb	r3, [r3, #0]
}
 800cf94:	0018      	movs	r0, r3
 800cf96:	46bd      	mov	sp, r7
 800cf98:	b004      	add	sp, #16
 800cf9a:	bd80      	pop	{r7, pc}
 800cf9c:	fffec23c 	.word	0xfffec23c

0800cfa0 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b084      	sub	sp, #16
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	60f8      	str	r0, [r7, #12]
 800cfa8:	60b9      	str	r1, [r7, #8]
 800cfaa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	6819      	ldr	r1, [r3, #0]
 800cfb0:	68bb      	ldr	r3, [r7, #8]
 800cfb2:	435b      	muls	r3, r3
 800cfb4:	001a      	movs	r2, r3
 800cfb6:	0013      	movs	r3, r2
 800cfb8:	005b      	lsls	r3, r3, #1
 800cfba:	189b      	adds	r3, r3, r2
 800cfbc:	43db      	mvns	r3, r3
 800cfbe:	400b      	ands	r3, r1
 800cfc0:	001a      	movs	r2, r3
 800cfc2:	68bb      	ldr	r3, [r7, #8]
 800cfc4:	435b      	muls	r3, r3
 800cfc6:	6879      	ldr	r1, [r7, #4]
 800cfc8:	434b      	muls	r3, r1
 800cfca:	431a      	orrs	r2, r3
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	601a      	str	r2, [r3, #0]
}
 800cfd0:	46c0      	nop			@ (mov r8, r8)
 800cfd2:	46bd      	mov	sp, r7
 800cfd4:	b004      	add	sp, #16
 800cfd6:	bd80      	pop	{r7, pc}

0800cfd8 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b084      	sub	sp, #16
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	60f8      	str	r0, [r7, #12]
 800cfe0:	60b9      	str	r1, [r7, #8]
 800cfe2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	685b      	ldr	r3, [r3, #4]
 800cfe8:	68ba      	ldr	r2, [r7, #8]
 800cfea:	43d2      	mvns	r2, r2
 800cfec:	401a      	ands	r2, r3
 800cfee:	68bb      	ldr	r3, [r7, #8]
 800cff0:	6879      	ldr	r1, [r7, #4]
 800cff2:	434b      	muls	r3, r1
 800cff4:	431a      	orrs	r2, r3
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	605a      	str	r2, [r3, #4]
}
 800cffa:	46c0      	nop			@ (mov r8, r8)
 800cffc:	46bd      	mov	sp, r7
 800cffe:	b004      	add	sp, #16
 800d000:	bd80      	pop	{r7, pc}

0800d002 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800d002:	b580      	push	{r7, lr}
 800d004:	b084      	sub	sp, #16
 800d006:	af00      	add	r7, sp, #0
 800d008:	60f8      	str	r0, [r7, #12]
 800d00a:	60b9      	str	r1, [r7, #8]
 800d00c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	6899      	ldr	r1, [r3, #8]
 800d012:	68bb      	ldr	r3, [r7, #8]
 800d014:	435b      	muls	r3, r3
 800d016:	001a      	movs	r2, r3
 800d018:	0013      	movs	r3, r2
 800d01a:	005b      	lsls	r3, r3, #1
 800d01c:	189b      	adds	r3, r3, r2
 800d01e:	43db      	mvns	r3, r3
 800d020:	400b      	ands	r3, r1
 800d022:	001a      	movs	r2, r3
 800d024:	68bb      	ldr	r3, [r7, #8]
 800d026:	435b      	muls	r3, r3
 800d028:	6879      	ldr	r1, [r7, #4]
 800d02a:	434b      	muls	r3, r1
 800d02c:	431a      	orrs	r2, r3
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	609a      	str	r2, [r3, #8]
}
 800d032:	46c0      	nop			@ (mov r8, r8)
 800d034:	46bd      	mov	sp, r7
 800d036:	b004      	add	sp, #16
 800d038:	bd80      	pop	{r7, pc}

0800d03a <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800d03a:	b580      	push	{r7, lr}
 800d03c:	b084      	sub	sp, #16
 800d03e:	af00      	add	r7, sp, #0
 800d040:	60f8      	str	r0, [r7, #12]
 800d042:	60b9      	str	r1, [r7, #8]
 800d044:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	68d9      	ldr	r1, [r3, #12]
 800d04a:	68bb      	ldr	r3, [r7, #8]
 800d04c:	435b      	muls	r3, r3
 800d04e:	001a      	movs	r2, r3
 800d050:	0013      	movs	r3, r2
 800d052:	005b      	lsls	r3, r3, #1
 800d054:	189b      	adds	r3, r3, r2
 800d056:	43db      	mvns	r3, r3
 800d058:	400b      	ands	r3, r1
 800d05a:	001a      	movs	r2, r3
 800d05c:	68bb      	ldr	r3, [r7, #8]
 800d05e:	435b      	muls	r3, r3
 800d060:	6879      	ldr	r1, [r7, #4]
 800d062:	434b      	muls	r3, r1
 800d064:	431a      	orrs	r2, r3
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	60da      	str	r2, [r3, #12]
}
 800d06a:	46c0      	nop			@ (mov r8, r8)
 800d06c:	46bd      	mov	sp, r7
 800d06e:	b004      	add	sp, #16
 800d070:	bd80      	pop	{r7, pc}

0800d072 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800d072:	b580      	push	{r7, lr}
 800d074:	b084      	sub	sp, #16
 800d076:	af00      	add	r7, sp, #0
 800d078:	60f8      	str	r0, [r7, #12]
 800d07a:	60b9      	str	r1, [r7, #8]
 800d07c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	6a19      	ldr	r1, [r3, #32]
 800d082:	68bb      	ldr	r3, [r7, #8]
 800d084:	435b      	muls	r3, r3
 800d086:	68ba      	ldr	r2, [r7, #8]
 800d088:	4353      	muls	r3, r2
 800d08a:	68ba      	ldr	r2, [r7, #8]
 800d08c:	435a      	muls	r2, r3
 800d08e:	0013      	movs	r3, r2
 800d090:	011b      	lsls	r3, r3, #4
 800d092:	1a9b      	subs	r3, r3, r2
 800d094:	43db      	mvns	r3, r3
 800d096:	400b      	ands	r3, r1
 800d098:	001a      	movs	r2, r3
 800d09a:	68bb      	ldr	r3, [r7, #8]
 800d09c:	435b      	muls	r3, r3
 800d09e:	68b9      	ldr	r1, [r7, #8]
 800d0a0:	434b      	muls	r3, r1
 800d0a2:	68b9      	ldr	r1, [r7, #8]
 800d0a4:	434b      	muls	r3, r1
 800d0a6:	6879      	ldr	r1, [r7, #4]
 800d0a8:	434b      	muls	r3, r1
 800d0aa:	431a      	orrs	r2, r3
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	621a      	str	r2, [r3, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 800d0b0:	46c0      	nop			@ (mov r8, r8)
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	b004      	add	sp, #16
 800d0b6:	bd80      	pop	{r7, pc}

0800d0b8 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b084      	sub	sp, #16
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	60f8      	str	r0, [r7, #12]
 800d0c0:	60b9      	str	r1, [r7, #8]
 800d0c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800d0c8:	68bb      	ldr	r3, [r7, #8]
 800d0ca:	0a1b      	lsrs	r3, r3, #8
 800d0cc:	68ba      	ldr	r2, [r7, #8]
 800d0ce:	0a12      	lsrs	r2, r2, #8
 800d0d0:	4353      	muls	r3, r2
 800d0d2:	68ba      	ldr	r2, [r7, #8]
 800d0d4:	0a12      	lsrs	r2, r2, #8
 800d0d6:	4353      	muls	r3, r2
 800d0d8:	68ba      	ldr	r2, [r7, #8]
 800d0da:	0a12      	lsrs	r2, r2, #8
 800d0dc:	435a      	muls	r2, r3
 800d0de:	0013      	movs	r3, r2
 800d0e0:	011b      	lsls	r3, r3, #4
 800d0e2:	1a9b      	subs	r3, r3, r2
 800d0e4:	43db      	mvns	r3, r3
 800d0e6:	400b      	ands	r3, r1
 800d0e8:	001a      	movs	r2, r3
 800d0ea:	68bb      	ldr	r3, [r7, #8]
 800d0ec:	0a1b      	lsrs	r3, r3, #8
 800d0ee:	68b9      	ldr	r1, [r7, #8]
 800d0f0:	0a09      	lsrs	r1, r1, #8
 800d0f2:	434b      	muls	r3, r1
 800d0f4:	68b9      	ldr	r1, [r7, #8]
 800d0f6:	0a09      	lsrs	r1, r1, #8
 800d0f8:	434b      	muls	r3, r1
 800d0fa:	68b9      	ldr	r1, [r7, #8]
 800d0fc:	0a09      	lsrs	r1, r1, #8
 800d0fe:	434b      	muls	r3, r1
 800d100:	6879      	ldr	r1, [r7, #4]
 800d102:	434b      	muls	r3, r1
 800d104:	431a      	orrs	r2, r3
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	625a      	str	r2, [r3, #36]	@ 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 800d10a:	46c0      	nop			@ (mov r8, r8)
 800d10c:	46bd      	mov	sp, r7
 800d10e:	b004      	add	sp, #16
 800d110:	bd80      	pop	{r7, pc}

0800d112 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800d112:	b580      	push	{r7, lr}
 800d114:	b084      	sub	sp, #16
 800d116:	af00      	add	r7, sp, #0
 800d118:	6078      	str	r0, [r7, #4]
 800d11a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 800d11c:	2300      	movs	r3, #0
 800d11e:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800d120:	e047      	b.n	800d1b2 <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800d122:	683b      	ldr	r3, [r7, #0]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	2101      	movs	r1, #1
 800d128:	68fa      	ldr	r2, [r7, #12]
 800d12a:	4091      	lsls	r1, r2
 800d12c:	000a      	movs	r2, r1
 800d12e:	4013      	ands	r3, r2
 800d130:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 800d132:	68bb      	ldr	r3, [r7, #8]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d039      	beq.n	800d1ac <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800d138:	683b      	ldr	r3, [r7, #0]
 800d13a:	685b      	ldr	r3, [r3, #4]
 800d13c:	2b01      	cmp	r3, #1
 800d13e:	d003      	beq.n	800d148 <LL_GPIO_Init+0x36>
 800d140:	683b      	ldr	r3, [r7, #0]
 800d142:	685b      	ldr	r3, [r3, #4]
 800d144:	2b02      	cmp	r3, #2
 800d146:	d10d      	bne.n	800d164 <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800d148:	683b      	ldr	r3, [r7, #0]
 800d14a:	689a      	ldr	r2, [r3, #8]
 800d14c:	68b9      	ldr	r1, [r7, #8]
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	0018      	movs	r0, r3
 800d152:	f7ff ff56 	bl	800d002 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800d156:	683b      	ldr	r3, [r7, #0]
 800d158:	68da      	ldr	r2, [r3, #12]
 800d15a:	68b9      	ldr	r1, [r7, #8]
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	0018      	movs	r0, r3
 800d160:	f7ff ff3a 	bl	800cfd8 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800d164:	683b      	ldr	r3, [r7, #0]
 800d166:	691a      	ldr	r2, [r3, #16]
 800d168:	68b9      	ldr	r1, [r7, #8]
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	0018      	movs	r0, r3
 800d16e:	f7ff ff64 	bl	800d03a <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800d172:	683b      	ldr	r3, [r7, #0]
 800d174:	685b      	ldr	r3, [r3, #4]
 800d176:	2b02      	cmp	r3, #2
 800d178:	d111      	bne.n	800d19e <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800d17a:	68bb      	ldr	r3, [r7, #8]
 800d17c:	2bff      	cmp	r3, #255	@ 0xff
 800d17e:	d807      	bhi.n	800d190 <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800d180:	683b      	ldr	r3, [r7, #0]
 800d182:	695a      	ldr	r2, [r3, #20]
 800d184:	68b9      	ldr	r1, [r7, #8]
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	0018      	movs	r0, r3
 800d18a:	f7ff ff72 	bl	800d072 <LL_GPIO_SetAFPin_0_7>
 800d18e:	e006      	b.n	800d19e <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800d190:	683b      	ldr	r3, [r7, #0]
 800d192:	695a      	ldr	r2, [r3, #20]
 800d194:	68b9      	ldr	r1, [r7, #8]
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	0018      	movs	r0, r3
 800d19a:	f7ff ff8d 	bl	800d0b8 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800d19e:	683b      	ldr	r3, [r7, #0]
 800d1a0:	685a      	ldr	r2, [r3, #4]
 800d1a2:	68b9      	ldr	r1, [r7, #8]
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	0018      	movs	r0, r3
 800d1a8:	f7ff fefa 	bl	800cfa0 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	3301      	adds	r3, #1
 800d1b0:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800d1b2:	683b      	ldr	r3, [r7, #0]
 800d1b4:	681a      	ldr	r2, [r3, #0]
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	40da      	lsrs	r2, r3
 800d1ba:	1e13      	subs	r3, r2, #0
 800d1bc:	d1b1      	bne.n	800d122 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 800d1be:	2300      	movs	r3, #0
}
 800d1c0:	0018      	movs	r0, r3
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	b004      	add	sp, #16
 800d1c6:	bd80      	pop	{r7, pc}

0800d1c8 <memset>:
 800d1c8:	0003      	movs	r3, r0
 800d1ca:	1882      	adds	r2, r0, r2
 800d1cc:	4293      	cmp	r3, r2
 800d1ce:	d100      	bne.n	800d1d2 <memset+0xa>
 800d1d0:	4770      	bx	lr
 800d1d2:	7019      	strb	r1, [r3, #0]
 800d1d4:	3301      	adds	r3, #1
 800d1d6:	e7f9      	b.n	800d1cc <memset+0x4>

0800d1d8 <__libc_init_array>:
 800d1d8:	b570      	push	{r4, r5, r6, lr}
 800d1da:	2600      	movs	r6, #0
 800d1dc:	4c0c      	ldr	r4, [pc, #48]	@ (800d210 <__libc_init_array+0x38>)
 800d1de:	4d0d      	ldr	r5, [pc, #52]	@ (800d214 <__libc_init_array+0x3c>)
 800d1e0:	1b64      	subs	r4, r4, r5
 800d1e2:	10a4      	asrs	r4, r4, #2
 800d1e4:	42a6      	cmp	r6, r4
 800d1e6:	d109      	bne.n	800d1fc <__libc_init_array+0x24>
 800d1e8:	2600      	movs	r6, #0
 800d1ea:	f000 f819 	bl	800d220 <_init>
 800d1ee:	4c0a      	ldr	r4, [pc, #40]	@ (800d218 <__libc_init_array+0x40>)
 800d1f0:	4d0a      	ldr	r5, [pc, #40]	@ (800d21c <__libc_init_array+0x44>)
 800d1f2:	1b64      	subs	r4, r4, r5
 800d1f4:	10a4      	asrs	r4, r4, #2
 800d1f6:	42a6      	cmp	r6, r4
 800d1f8:	d105      	bne.n	800d206 <__libc_init_array+0x2e>
 800d1fa:	bd70      	pop	{r4, r5, r6, pc}
 800d1fc:	00b3      	lsls	r3, r6, #2
 800d1fe:	58eb      	ldr	r3, [r5, r3]
 800d200:	4798      	blx	r3
 800d202:	3601      	adds	r6, #1
 800d204:	e7ee      	b.n	800d1e4 <__libc_init_array+0xc>
 800d206:	00b3      	lsls	r3, r6, #2
 800d208:	58eb      	ldr	r3, [r5, r3]
 800d20a:	4798      	blx	r3
 800d20c:	3601      	adds	r6, #1
 800d20e:	e7f2      	b.n	800d1f6 <__libc_init_array+0x1e>
 800d210:	0800d6d4 	.word	0x0800d6d4
 800d214:	0800d6d4 	.word	0x0800d6d4
 800d218:	0800d6d8 	.word	0x0800d6d8
 800d21c:	0800d6d4 	.word	0x0800d6d4

0800d220 <_init>:
 800d220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d222:	46c0      	nop			@ (mov r8, r8)
 800d224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d226:	bc08      	pop	{r3}
 800d228:	469e      	mov	lr, r3
 800d22a:	4770      	bx	lr

0800d22c <_fini>:
 800d22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d22e:	46c0      	nop			@ (mov r8, r8)
 800d230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d232:	bc08      	pop	{r3}
 800d234:	469e      	mov	lr, r3
 800d236:	4770      	bx	lr
