
BelowGroundBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a900  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000418  0800a9c0  0800a9c0  0000b9c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800add8  0800add8  0000c0c0  2**0
                  CONTENTS
  4 .ARM          00000000  0800add8  0800add8  0000c0c0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800add8  0800add8  0000c0c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800add8  0800add8  0000bdd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800addc  0800addc  0000bddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c0  20000000  0800ade0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007e0  200000c0  0800aea0  0000c0c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008a0  0800aea0  0000c8a0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000c0c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a5f3  00000000  00000000  0000c0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035f3  00000000  00000000  000266db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001810  00000000  00000000  00029cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012f0  00000000  00000000  0002b4e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019c11  00000000  00000000  0002c7d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c678  00000000  00000000  000463e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f1fc  00000000  00000000  00062a59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00101c55  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058f4  00000000  00000000  00101c98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  0010758c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000c0 	.word	0x200000c0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800a9a8 	.word	0x0800a9a8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000c4 	.word	0x200000c4
 8000104:	0800a9a8 	.word	0x0800a9a8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <HAL_I2C_MemTxCpltCallback>:
void bno055_delay(uint32_t time);
int8_t bno055_write(uint8_t *data, uint8_t len);
int8_t bno055_read(uint8_t reg, uint8_t *data, uint8_t len);

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
	i2c_tx_int = 1;
 80003fc:	4b03      	ldr	r3, [pc, #12]	@ (800040c <HAL_I2C_MemTxCpltCallback+0x18>)
 80003fe:	2201      	movs	r2, #1
 8000400:	701a      	strb	r2, [r3, #0]
}
 8000402:	46c0      	nop			@ (mov r8, r8)
 8000404:	46bd      	mov	sp, r7
 8000406:	b002      	add	sp, #8
 8000408:	bd80      	pop	{r7, pc}
 800040a:	46c0      	nop			@ (mov r8, r8)
 800040c:	2000000e 	.word	0x2000000e

08000410 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
	i2c_rx_int = 1;
 8000418:	4b03      	ldr	r3, [pc, #12]	@ (8000428 <HAL_I2C_MemRxCpltCallback+0x18>)
 800041a:	2201      	movs	r2, #1
 800041c:	701a      	strb	r2, [r3, #0]
}
 800041e:	46c0      	nop			@ (mov r8, r8)
 8000420:	46bd      	mov	sp, r7
 8000422:	b002      	add	sp, #8
 8000424:	bd80      	pop	{r7, pc}
 8000426:	46c0      	nop			@ (mov r8, r8)
 8000428:	2000000f 	.word	0x2000000f

0800042c <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
	i2c_tx_int = 1;
 8000434:	4b03      	ldr	r3, [pc, #12]	@ (8000444 <HAL_I2C_MasterTxCpltCallback+0x18>)
 8000436:	2201      	movs	r2, #1
 8000438:	701a      	strb	r2, [r3, #0]
}
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	46bd      	mov	sp, r7
 800043e:	b002      	add	sp, #8
 8000440:	bd80      	pop	{r7, pc}
 8000442:	46c0      	nop			@ (mov r8, r8)
 8000444:	2000000e 	.word	0x2000000e

08000448 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
	i2c_rx_int = 1;
 8000450:	4b03      	ldr	r3, [pc, #12]	@ (8000460 <HAL_I2C_MasterRxCpltCallback+0x18>)
 8000452:	2201      	movs	r2, #1
 8000454:	701a      	strb	r2, [r3, #0]
}
 8000456:	46c0      	nop			@ (mov r8, r8)
 8000458:	46bd      	mov	sp, r7
 800045a:	b002      	add	sp, #8
 800045c:	bd80      	pop	{r7, pc}
 800045e:	46c0      	nop			@ (mov r8, r8)
 8000460:	2000000f 	.word	0x2000000f

08000464 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
	// Do something
	i2c_err_int = 1;
 800046c:	4b07      	ldr	r3, [pc, #28]	@ (800048c <HAL_I2C_ErrorCallback+0x28>)
 800046e:	2201      	movs	r2, #1
 8000470:	701a      	strb	r2, [r3, #0]
	__HAL_I2C_DISABLE_IT(&hi2c1, I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI |
 8000472:	4b07      	ldr	r3, [pc, #28]	@ (8000490 <HAL_I2C_ErrorCallback+0x2c>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	681a      	ldr	r2, [r3, #0]
 8000478:	4b05      	ldr	r3, [pc, #20]	@ (8000490 <HAL_I2C_ErrorCallback+0x2c>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	21fe      	movs	r1, #254	@ 0xfe
 800047e:	438a      	bics	r2, r1
 8000480:	601a      	str	r2, [r3, #0]
										 I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI);
}
 8000482:	46c0      	nop			@ (mov r8, r8)
 8000484:	46bd      	mov	sp, r7
 8000486:	b002      	add	sp, #8
 8000488:	bd80      	pop	{r7, pc}
 800048a:	46c0      	nop			@ (mov r8, r8)
 800048c:	200002e8 	.word	0x200002e8
 8000490:	200002ec 	.word	0x200002ec

08000494 <bno055_delay>:


void bno055_delay(uint32_t time)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	0018      	movs	r0, r3
 80004a0:	f003 fc14 	bl	8003ccc <HAL_Delay>
#endif
}
 80004a4:	46c0      	nop			@ (mov r8, r8)
 80004a6:	46bd      	mov	sp, r7
 80004a8:	b002      	add	sp, #8
 80004aa:	bd80      	pop	{r7, pc}

080004ac <bno055_init>:

int8_t bno055_init()
{
 80004ac:	b590      	push	{r4, r7, lr}
 80004ae:	b083      	sub	sp, #12
 80004b0:	af00      	add	r7, sp, #0
	int8_t status = HAL_OK;
 80004b2:	1dfb      	adds	r3, r7, #7
 80004b4:	2200      	movs	r2, #0
 80004b6:	701a      	strb	r2, [r3, #0]

	// Set up the local IMU
	bno055_address = BNO055_I2C_ADDR_LO << 1;
 80004b8:	4b1d      	ldr	r3, [pc, #116]	@ (8000530 <bno055_init+0x84>)
 80004ba:	2250      	movs	r2, #80	@ 0x50
 80004bc:	701a      	strb	r2, [r3, #0]
	status = bno055_setup();
 80004be:	1dfc      	adds	r4, r7, #7
 80004c0:	f000 f98a 	bl	80007d8 <bno055_setup>
 80004c4:	0003      	movs	r3, r0
 80004c6:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80004c8:	1dfb      	adds	r3, r7, #7
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	b25b      	sxtb	r3, r3
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d003      	beq.n	80004da <bno055_init+0x2e>
 80004d2:	1dfb      	adds	r3, r7, #7
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	b25b      	sxtb	r3, r3
 80004d8:	e026      	b.n	8000528 <bno055_init+0x7c>

	status = bno055_setOperationModeNDOF();
 80004da:	1dfc      	adds	r4, r7, #7
 80004dc:	f000 f895 	bl	800060a <bno055_setOperationModeNDOF>
 80004e0:	0003      	movs	r3, r0
 80004e2:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80004e4:	1dfb      	adds	r3, r7, #7
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	b25b      	sxtb	r3, r3
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d003      	beq.n	80004f6 <bno055_init+0x4a>
 80004ee:	1dfb      	adds	r3, r7, #7
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	b25b      	sxtb	r3, r3
 80004f4:	e018      	b.n	8000528 <bno055_init+0x7c>

	// Setup the remote IMU
	bno055_address = BNO055_I2C_ADDR_HI << 1;
 80004f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000530 <bno055_init+0x84>)
 80004f8:	2252      	movs	r2, #82	@ 0x52
 80004fa:	701a      	strb	r2, [r3, #0]
	status = bno055_setup();
 80004fc:	1dfc      	adds	r4, r7, #7
 80004fe:	f000 f96b 	bl	80007d8 <bno055_setup>
 8000502:	0003      	movs	r3, r0
 8000504:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8000506:	1dfb      	adds	r3, r7, #7
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	b25b      	sxtb	r3, r3
 800050c:	2b00      	cmp	r3, #0
 800050e:	d003      	beq.n	8000518 <bno055_init+0x6c>
 8000510:	1dfb      	adds	r3, r7, #7
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	b25b      	sxtb	r3, r3
 8000516:	e007      	b.n	8000528 <bno055_init+0x7c>

	status = bno055_setOperationModeNDOF();
 8000518:	1dfc      	adds	r4, r7, #7
 800051a:	f000 f876 	bl	800060a <bno055_setOperationModeNDOF>
 800051e:	0003      	movs	r3, r0
 8000520:	7023      	strb	r3, [r4, #0]
	return status;
 8000522:	1dfb      	adds	r3, r7, #7
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	b25b      	sxtb	r3, r3
}
 8000528:	0018      	movs	r0, r3
 800052a:	46bd      	mov	sp, r7
 800052c:	b003      	add	sp, #12
 800052e:	bd90      	pop	{r4, r7, pc}
 8000530:	200002dd 	.word	0x200002dd

08000534 <bno055_setPage>:

int8_t bno055_setPage(uint8_t page)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	0002      	movs	r2, r0
 800053c:	1dfb      	adds	r3, r7, #7
 800053e:	701a      	strb	r2, [r3, #0]
	i2c_tx_buffer[0] = BNO055_PAGE_ID;
 8000540:	4b08      	ldr	r3, [pc, #32]	@ (8000564 <bno055_setPage+0x30>)
 8000542:	2207      	movs	r2, #7
 8000544:	701a      	strb	r2, [r3, #0]
	i2c_tx_buffer[1] = page;
 8000546:	4b07      	ldr	r3, [pc, #28]	@ (8000564 <bno055_setPage+0x30>)
 8000548:	1dfa      	adds	r2, r7, #7
 800054a:	7812      	ldrb	r2, [r2, #0]
 800054c:	705a      	strb	r2, [r3, #1]
	return bno055_write(i2c_tx_buffer, 2);
 800054e:	4b05      	ldr	r3, [pc, #20]	@ (8000564 <bno055_setPage+0x30>)
 8000550:	2102      	movs	r1, #2
 8000552:	0018      	movs	r0, r3
 8000554:	f000 fab0 	bl	8000ab8 <bno055_write>
 8000558:	0003      	movs	r3, r0
}
 800055a:	0018      	movs	r0, r3
 800055c:	46bd      	mov	sp, r7
 800055e:	b002      	add	sp, #8
 8000560:	bd80      	pop	{r7, pc}
 8000562:	46c0      	nop			@ (mov r8, r8)
 8000564:	200000dc 	.word	0x200000dc

08000568 <bno055_setOperationMode>:
{
	return bno055_read(BNO055_OPR_MODE, mode, 1);
}

int8_t bno055_setOperationMode(bno055_opmode_t mode)
{
 8000568:	b5b0      	push	{r4, r5, r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af00      	add	r7, sp, #0
 800056e:	0002      	movs	r2, r0
 8000570:	1dfb      	adds	r3, r7, #7
 8000572:	701a      	strb	r2, [r3, #0]
	int8_t status = HAL_OK;
 8000574:	210f      	movs	r1, #15
 8000576:	187b      	adds	r3, r7, r1
 8000578:	2200      	movs	r2, #0
 800057a:	701a      	strb	r2, [r3, #0]
	i2c_tx_buffer[0] = BNO055_OPR_MODE;
 800057c:	4b1d      	ldr	r3, [pc, #116]	@ (80005f4 <bno055_setOperationMode+0x8c>)
 800057e:	223d      	movs	r2, #61	@ 0x3d
 8000580:	701a      	strb	r2, [r3, #0]
	i2c_tx_buffer[1] = mode;
 8000582:	4b1c      	ldr	r3, [pc, #112]	@ (80005f4 <bno055_setOperationMode+0x8c>)
 8000584:	1dfa      	adds	r2, r7, #7
 8000586:	7812      	ldrb	r2, [r2, #0]
 8000588:	705a      	strb	r2, [r3, #1]
	status = bno055_write(i2c_tx_buffer, 2);
 800058a:	000d      	movs	r5, r1
 800058c:	187c      	adds	r4, r7, r1
 800058e:	4b19      	ldr	r3, [pc, #100]	@ (80005f4 <bno055_setOperationMode+0x8c>)
 8000590:	2102      	movs	r1, #2
 8000592:	0018      	movs	r0, r3
 8000594:	f000 fa90 	bl	8000ab8 <bno055_write>
 8000598:	0003      	movs	r3, r0
 800059a:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800059c:	197b      	adds	r3, r7, r5
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	b25b      	sxtb	r3, r3
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d003      	beq.n	80005ae <bno055_setOperationMode+0x46>
 80005a6:	197b      	adds	r3, r7, r5
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	b25b      	sxtb	r3, r3
 80005ac:	e01e      	b.n	80005ec <bno055_setOperationMode+0x84>

	status = bno055_poll_transaction();
 80005ae:	250f      	movs	r5, #15
 80005b0:	197c      	adds	r4, r7, r5
 80005b2:	f000 f8bf 	bl	8000734 <bno055_poll_transaction>
 80005b6:	0003      	movs	r3, r0
 80005b8:	7023      	strb	r3, [r4, #0]
//	bno055_writeData(BNO055_OPR_MODE, mode);
	if(status != HAL_OK){return status;}
 80005ba:	002a      	movs	r2, r5
 80005bc:	18bb      	adds	r3, r7, r2
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	b25b      	sxtb	r3, r3
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d003      	beq.n	80005ce <bno055_setOperationMode+0x66>
 80005c6:	18bb      	adds	r3, r7, r2
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	b25b      	sxtb	r3, r3
 80005cc:	e00e      	b.n	80005ec <bno055_setOperationMode+0x84>

	if (mode == BNO055_OPERATION_MODE_CONFIG)
 80005ce:	1dfb      	adds	r3, r7, #7
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d103      	bne.n	80005de <bno055_setOperationMode+0x76>
	{
		bno055_delay(19);
 80005d6:	2013      	movs	r0, #19
 80005d8:	f7ff ff5c 	bl	8000494 <bno055_delay>
 80005dc:	e002      	b.n	80005e4 <bno055_setOperationMode+0x7c>
	}
	else
	{
		bno055_delay(7);
 80005de:	2007      	movs	r0, #7
 80005e0:	f7ff ff58 	bl	8000494 <bno055_delay>
	}
	return status;
 80005e4:	230f      	movs	r3, #15
 80005e6:	18fb      	adds	r3, r7, r3
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	b25b      	sxtb	r3, r3
}
 80005ec:	0018      	movs	r0, r3
 80005ee:	46bd      	mov	sp, r7
 80005f0:	b004      	add	sp, #16
 80005f2:	bdb0      	pop	{r4, r5, r7, pc}
 80005f4:	200000dc 	.word	0x200000dc

080005f8 <bno055_setOperationModeConfig>:

int8_t bno055_setOperationModeConfig()
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
	return bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 80005fc:	2000      	movs	r0, #0
 80005fe:	f7ff ffb3 	bl	8000568 <bno055_setOperationMode>
 8000602:	0003      	movs	r3, r0
}
 8000604:	0018      	movs	r0, r3
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}

0800060a <bno055_setOperationModeNDOF>:

int8_t bno055_setOperationModeNDOF()
{
 800060a:	b580      	push	{r7, lr}
 800060c:	af00      	add	r7, sp, #0
	return bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 800060e:	200c      	movs	r0, #12
 8000610:	f7ff ffaa 	bl	8000568 <bno055_setOperationMode>
 8000614:	0003      	movs	r3, r0
}
 8000616:	0018      	movs	r0, r3
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}

0800061c <bno055_setExternalCrystalUse>:

int8_t bno055_setExternalCrystalUse(uint8_t state)
{
 800061c:	b5b0      	push	{r4, r5, r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	0002      	movs	r2, r0
 8000624:	1dfb      	adds	r3, r7, #7
 8000626:	701a      	strb	r2, [r3, #0]
	int8_t status = HAL_OK;
 8000628:	250f      	movs	r5, #15
 800062a:	197b      	adds	r3, r7, r5
 800062c:	2200      	movs	r2, #0
 800062e:	701a      	strb	r2, [r3, #0]
	status = bno055_setPage(0);
 8000630:	197c      	adds	r4, r7, r5
 8000632:	2000      	movs	r0, #0
 8000634:	f7ff ff7e 	bl	8000534 <bno055_setPage>
 8000638:	0003      	movs	r3, r0
 800063a:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800063c:	002a      	movs	r2, r5
 800063e:	18bb      	adds	r3, r7, r2
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	b25b      	sxtb	r3, r3
 8000644:	2b00      	cmp	r3, #0
 8000646:	d003      	beq.n	8000650 <bno055_setExternalCrystalUse+0x34>
 8000648:	18bb      	adds	r3, r7, r2
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	b25b      	sxtb	r3, r3
 800064e:	e069      	b.n	8000724 <bno055_setExternalCrystalUse+0x108>

	status = bno055_poll_transaction();
 8000650:	250f      	movs	r5, #15
 8000652:	197c      	adds	r4, r7, r5
 8000654:	f000 f86e 	bl	8000734 <bno055_poll_transaction>
 8000658:	0003      	movs	r3, r0
 800065a:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800065c:	002a      	movs	r2, r5
 800065e:	18bb      	adds	r3, r7, r2
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	b25b      	sxtb	r3, r3
 8000664:	2b00      	cmp	r3, #0
 8000666:	d003      	beq.n	8000670 <bno055_setExternalCrystalUse+0x54>
 8000668:	18bb      	adds	r3, r7, r2
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	b25b      	sxtb	r3, r3
 800066e:	e059      	b.n	8000724 <bno055_setExternalCrystalUse+0x108>

	status = bno055_read(BNO055_SYS_TRIGGER, i2c_rx_buffer, 1);
 8000670:	250f      	movs	r5, #15
 8000672:	197c      	adds	r4, r7, r5
 8000674:	4b2d      	ldr	r3, [pc, #180]	@ (800072c <bno055_setExternalCrystalUse+0x110>)
 8000676:	2201      	movs	r2, #1
 8000678:	0019      	movs	r1, r3
 800067a:	203f      	movs	r0, #63	@ 0x3f
 800067c:	f000 fa56 	bl	8000b2c <bno055_read>
 8000680:	0003      	movs	r3, r0
 8000682:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8000684:	197b      	adds	r3, r7, r5
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	b25b      	sxtb	r3, r3
 800068a:	2b00      	cmp	r3, #0
 800068c:	d003      	beq.n	8000696 <bno055_setExternalCrystalUse+0x7a>
 800068e:	197b      	adds	r3, r7, r5
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	b25b      	sxtb	r3, r3
 8000694:	e046      	b.n	8000724 <bno055_setExternalCrystalUse+0x108>

	status = bno055_poll_transaction();
 8000696:	250f      	movs	r5, #15
 8000698:	197c      	adds	r4, r7, r5
 800069a:	f000 f84b 	bl	8000734 <bno055_poll_transaction>
 800069e:	0003      	movs	r3, r0
 80006a0:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80006a2:	002a      	movs	r2, r5
 80006a4:	18bb      	adds	r3, r7, r2
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	b25b      	sxtb	r3, r3
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d003      	beq.n	80006b6 <bno055_setExternalCrystalUse+0x9a>
 80006ae:	18bb      	adds	r3, r7, r2
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	b25b      	sxtb	r3, r3
 80006b4:	e036      	b.n	8000724 <bno055_setExternalCrystalUse+0x108>

	i2c_rx_buffer[0] |= (state == 1) ? 0x80 : 0x0;
 80006b6:	4b1d      	ldr	r3, [pc, #116]	@ (800072c <bno055_setExternalCrystalUse+0x110>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	b25a      	sxtb	r2, r3
 80006bc:	1dfb      	adds	r3, r7, #7
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d102      	bne.n	80006ca <bno055_setExternalCrystalUse+0xae>
 80006c4:	2380      	movs	r3, #128	@ 0x80
 80006c6:	425b      	negs	r3, r3
 80006c8:	e000      	b.n	80006cc <bno055_setExternalCrystalUse+0xb0>
 80006ca:	2300      	movs	r3, #0
 80006cc:	4313      	orrs	r3, r2
 80006ce:	b25b      	sxtb	r3, r3
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	4b16      	ldr	r3, [pc, #88]	@ (800072c <bno055_setExternalCrystalUse+0x110>)
 80006d4:	701a      	strb	r2, [r3, #0]
	i2c_tx_buffer[0] = BNO055_SYS_TRIGGER;
 80006d6:	4b16      	ldr	r3, [pc, #88]	@ (8000730 <bno055_setExternalCrystalUse+0x114>)
 80006d8:	223f      	movs	r2, #63	@ 0x3f
 80006da:	701a      	strb	r2, [r3, #0]
	i2c_tx_buffer[1] = i2c_rx_buffer[0];
 80006dc:	4b13      	ldr	r3, [pc, #76]	@ (800072c <bno055_setExternalCrystalUse+0x110>)
 80006de:	781a      	ldrb	r2, [r3, #0]
 80006e0:	4b13      	ldr	r3, [pc, #76]	@ (8000730 <bno055_setExternalCrystalUse+0x114>)
 80006e2:	705a      	strb	r2, [r3, #1]
	status = bno055_write(i2c_tx_buffer, 2);
 80006e4:	250f      	movs	r5, #15
 80006e6:	197c      	adds	r4, r7, r5
 80006e8:	4b11      	ldr	r3, [pc, #68]	@ (8000730 <bno055_setExternalCrystalUse+0x114>)
 80006ea:	2102      	movs	r1, #2
 80006ec:	0018      	movs	r0, r3
 80006ee:	f000 f9e3 	bl	8000ab8 <bno055_write>
 80006f2:	0003      	movs	r3, r0
 80006f4:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80006f6:	197b      	adds	r3, r7, r5
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	b25b      	sxtb	r3, r3
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d003      	beq.n	8000708 <bno055_setExternalCrystalUse+0xec>
 8000700:	197b      	adds	r3, r7, r5
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	b25b      	sxtb	r3, r3
 8000706:	e00d      	b.n	8000724 <bno055_setExternalCrystalUse+0x108>

	status = bno055_poll_transaction();
 8000708:	250f      	movs	r5, #15
 800070a:	197c      	adds	r4, r7, r5
 800070c:	f000 f812 	bl	8000734 <bno055_poll_transaction>
 8000710:	0003      	movs	r3, r0
 8000712:	7023      	strb	r3, [r4, #0]
	bno055_delay(700);
 8000714:	23af      	movs	r3, #175	@ 0xaf
 8000716:	009b      	lsls	r3, r3, #2
 8000718:	0018      	movs	r0, r3
 800071a:	f7ff febb 	bl	8000494 <bno055_delay>
	return status;
 800071e:	197b      	adds	r3, r7, r5
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	b25b      	sxtb	r3, r3
}
 8000724:	0018      	movs	r0, r3
 8000726:	46bd      	mov	sp, r7
 8000728:	b004      	add	sp, #16
 800072a:	bdb0      	pop	{r4, r5, r7, pc}
 800072c:	200001dc 	.word	0x200001dc
 8000730:	200000dc 	.word	0x200000dc

08000734 <bno055_poll_transaction>:

int8_t bno055_enableExternalCrystal() { return bno055_setExternalCrystalUse(1); }
int8_t bno055_disableExternalCrystal() { return bno055_setExternalCrystalUse(0); }

int8_t bno055_poll_transaction()
{
 8000734:	b590      	push	{r4, r7, lr}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
	int8_t status = HAL_BUSY;
 800073a:	1dfb      	adds	r3, r7, #7
 800073c:	2202      	movs	r2, #2
 800073e:	701a      	strb	r2, [r3, #0]

	while(status == HAL_BUSY)
 8000740:	e004      	b.n	800074c <bno055_poll_transaction+0x18>
	{
		status = monitor_i2c();
 8000742:	1dfc      	adds	r4, r7, #7
 8000744:	f000 f952 	bl	80009ec <monitor_i2c>
 8000748:	0003      	movs	r3, r0
 800074a:	7023      	strb	r3, [r4, #0]
	while(status == HAL_BUSY)
 800074c:	1dfb      	adds	r3, r7, #7
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	b25b      	sxtb	r3, r3
 8000752:	2b02      	cmp	r3, #2
 8000754:	d0f5      	beq.n	8000742 <bno055_poll_transaction+0xe>
	}

	return status;
 8000756:	1dfb      	adds	r3, r7, #7
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	b25b      	sxtb	r3, r3
}
 800075c:	0018      	movs	r0, r3
 800075e:	46bd      	mov	sp, r7
 8000760:	b003      	add	sp, #12
 8000762:	bd90      	pop	{r4, r7, pc}

08000764 <bno055_reset>:

int8_t bno055_reset()
{
 8000764:	b590      	push	{r4, r7, lr}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
	int8_t status = HAL_OK;
 800076a:	1dfb      	adds	r3, r7, #7
 800076c:	2200      	movs	r2, #0
 800076e:	701a      	strb	r2, [r3, #0]
	i2c_tx_buffer[0] = BNO055_SYS_TRIGGER;
 8000770:	4b18      	ldr	r3, [pc, #96]	@ (80007d4 <bno055_reset+0x70>)
 8000772:	223f      	movs	r2, #63	@ 0x3f
 8000774:	701a      	strb	r2, [r3, #0]
	i2c_tx_buffer[1] = 0x20;
 8000776:	4b17      	ldr	r3, [pc, #92]	@ (80007d4 <bno055_reset+0x70>)
 8000778:	2220      	movs	r2, #32
 800077a:	705a      	strb	r2, [r3, #1]
	status = bno055_write(i2c_tx_buffer, 2);
 800077c:	1dfc      	adds	r4, r7, #7
 800077e:	4b15      	ldr	r3, [pc, #84]	@ (80007d4 <bno055_reset+0x70>)
 8000780:	2102      	movs	r1, #2
 8000782:	0018      	movs	r0, r3
 8000784:	f000 f998 	bl	8000ab8 <bno055_write>
 8000788:	0003      	movs	r3, r0
 800078a:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800078c:	1dfb      	adds	r3, r7, #7
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	b25b      	sxtb	r3, r3
 8000792:	2b00      	cmp	r3, #0
 8000794:	d003      	beq.n	800079e <bno055_reset+0x3a>
 8000796:	1dfb      	adds	r3, r7, #7
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	b25b      	sxtb	r3, r3
 800079c:	e015      	b.n	80007ca <bno055_reset+0x66>

	status = bno055_poll_transaction();
 800079e:	1dfc      	adds	r4, r7, #7
 80007a0:	f7ff ffc8 	bl	8000734 <bno055_poll_transaction>
 80007a4:	0003      	movs	r3, r0
 80007a6:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80007a8:	1dfb      	adds	r3, r7, #7
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	b25b      	sxtb	r3, r3
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d003      	beq.n	80007ba <bno055_reset+0x56>
 80007b2:	1dfb      	adds	r3, r7, #7
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	b25b      	sxtb	r3, r3
 80007b8:	e007      	b.n	80007ca <bno055_reset+0x66>

	bno055_delay(700);
 80007ba:	23af      	movs	r3, #175	@ 0xaf
 80007bc:	009b      	lsls	r3, r3, #2
 80007be:	0018      	movs	r0, r3
 80007c0:	f7ff fe68 	bl	8000494 <bno055_delay>
	return status;
 80007c4:	1dfb      	adds	r3, r7, #7
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	b25b      	sxtb	r3, r3
}
 80007ca:	0018      	movs	r0, r3
 80007cc:	46bd      	mov	sp, r7
 80007ce:	b003      	add	sp, #12
 80007d0:	bd90      	pop	{r4, r7, pc}
 80007d2:	46c0      	nop			@ (mov r8, r8)
 80007d4:	200000dc 	.word	0x200000dc

080007d8 <bno055_setup>:

	return bno055_read(BNO055_TEMP, (uint8_t*) temp, 1);
}

int8_t bno055_setup()
{
 80007d8:	b590      	push	{r4, r7, lr}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
	int8_t status = HAL_OK;
 80007de:	1dfb      	adds	r3, r7, #7
 80007e0:	2200      	movs	r2, #0
 80007e2:	701a      	strb	r2, [r3, #0]
	read_index = 0;
 80007e4:	4b38      	ldr	r3, [pc, #224]	@ (80008c8 <bno055_setup+0xf0>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	701a      	strb	r2, [r3, #0]
	status = bno055_reset();
 80007ea:	1dfc      	adds	r4, r7, #7
 80007ec:	f7ff ffba 	bl	8000764 <bno055_reset>
 80007f0:	0003      	movs	r3, r0
 80007f2:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80007f4:	1dfb      	adds	r3, r7, #7
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	b25b      	sxtb	r3, r3
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d003      	beq.n	8000806 <bno055_setup+0x2e>
 80007fe:	1dfb      	adds	r3, r7, #7
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	b25b      	sxtb	r3, r3
 8000804:	e05c      	b.n	80008c0 <bno055_setup+0xe8>

	status = bno055_read(BNO055_CHIP_ID, i2c_rx_buffer, 1);
 8000806:	1dfc      	adds	r4, r7, #7
 8000808:	4b30      	ldr	r3, [pc, #192]	@ (80008cc <bno055_setup+0xf4>)
 800080a:	2201      	movs	r2, #1
 800080c:	0019      	movs	r1, r3
 800080e:	2000      	movs	r0, #0
 8000810:	f000 f98c 	bl	8000b2c <bno055_read>
 8000814:	0003      	movs	r3, r0
 8000816:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8000818:	1dfb      	adds	r3, r7, #7
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	b25b      	sxtb	r3, r3
 800081e:	2b00      	cmp	r3, #0
 8000820:	d003      	beq.n	800082a <bno055_setup+0x52>
 8000822:	1dfb      	adds	r3, r7, #7
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	b25b      	sxtb	r3, r3
 8000828:	e04a      	b.n	80008c0 <bno055_setup+0xe8>

	status = bno055_poll_transaction();
 800082a:	1dfc      	adds	r4, r7, #7
 800082c:	f7ff ff82 	bl	8000734 <bno055_poll_transaction>
 8000830:	0003      	movs	r3, r0
 8000832:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8000834:	1dfb      	adds	r3, r7, #7
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	b25b      	sxtb	r3, r3
 800083a:	2b00      	cmp	r3, #0
 800083c:	d003      	beq.n	8000846 <bno055_setup+0x6e>
 800083e:	1dfb      	adds	r3, r7, #7
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	b25b      	sxtb	r3, r3
 8000844:	e03c      	b.n	80008c0 <bno055_setup+0xe8>

	if(i2c_rx_buffer[0] != BNO055_ID)
 8000846:	4b21      	ldr	r3, [pc, #132]	@ (80008cc <bno055_setup+0xf4>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	2ba0      	cmp	r3, #160	@ 0xa0
 800084c:	d001      	beq.n	8000852 <bno055_setup+0x7a>
	{
		return HAL_ERROR;
 800084e:	2301      	movs	r3, #1
 8000850:	e036      	b.n	80008c0 <bno055_setup+0xe8>
	}
	status = bno055_setPage(0);
 8000852:	1dfc      	adds	r4, r7, #7
 8000854:	2000      	movs	r0, #0
 8000856:	f7ff fe6d 	bl	8000534 <bno055_setPage>
 800085a:	0003      	movs	r3, r0
 800085c:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800085e:	1dfb      	adds	r3, r7, #7
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	b25b      	sxtb	r3, r3
 8000864:	2b00      	cmp	r3, #0
 8000866:	d003      	beq.n	8000870 <bno055_setup+0x98>
 8000868:	1dfb      	adds	r3, r7, #7
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	b25b      	sxtb	r3, r3
 800086e:	e027      	b.n	80008c0 <bno055_setup+0xe8>

	status = bno055_poll_transaction();
 8000870:	1dfc      	adds	r4, r7, #7
 8000872:	f7ff ff5f 	bl	8000734 <bno055_poll_transaction>
 8000876:	0003      	movs	r3, r0
 8000878:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800087a:	1dfb      	adds	r3, r7, #7
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	b25b      	sxtb	r3, r3
 8000880:	2b00      	cmp	r3, #0
 8000882:	d003      	beq.n	800088c <bno055_setup+0xb4>
 8000884:	1dfb      	adds	r3, r7, #7
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	b25b      	sxtb	r3, r3
 800088a:	e019      	b.n	80008c0 <bno055_setup+0xe8>

	status = bno055_setExternalCrystalUse(0);
 800088c:	1dfc      	adds	r4, r7, #7
 800088e:	2000      	movs	r0, #0
 8000890:	f7ff fec4 	bl	800061c <bno055_setExternalCrystalUse>
 8000894:	0003      	movs	r3, r0
 8000896:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8000898:	1dfb      	adds	r3, r7, #7
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	b25b      	sxtb	r3, r3
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d003      	beq.n	80008aa <bno055_setup+0xd2>
 80008a2:	1dfb      	adds	r3, r7, #7
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	b25b      	sxtb	r3, r3
 80008a8:	e00a      	b.n	80008c0 <bno055_setup+0xe8>

	// Select BNO055 config mode
	status = bno055_setOperationModeConfig();
 80008aa:	1dfc      	adds	r4, r7, #7
 80008ac:	f7ff fea4 	bl	80005f8 <bno055_setOperationModeConfig>
 80008b0:	0003      	movs	r3, r0
 80008b2:	7023      	strb	r3, [r4, #0]
	bno055_delay(10);
 80008b4:	200a      	movs	r0, #10
 80008b6:	f7ff fded 	bl	8000494 <bno055_delay>
	return status;
 80008ba:	1dfb      	adds	r3, r7, #7
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	b25b      	sxtb	r3, r3
}
 80008c0:	0018      	movs	r0, r3
 80008c2:	46bd      	mov	sp, r7
 80008c4:	b003      	add	sp, #12
 80008c6:	bd90      	pop	{r4, r7, pc}
 80008c8:	200002dc 	.word	0x200002dc
 80008cc:	200001dc 	.word	0x200001dc

080008d0 <bno055_rx>:
		bno055_read(mem_read_map[i].reg, &buffer[6 * i], mem_read_map[i].reg_len);
	}
}

uint8_t bno055_rx()
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
	if(i2c_rx_int)
 80008d4:	4b07      	ldr	r3, [pc, #28]	@ (80008f4 <bno055_rx+0x24>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d004      	beq.n	80008e8 <bno055_rx+0x18>
	{
		i2c_rx_int = 0;
 80008de:	4b05      	ldr	r3, [pc, #20]	@ (80008f4 <bno055_rx+0x24>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	701a      	strb	r2, [r3, #0]
		return 1;
 80008e4:	2301      	movs	r3, #1
 80008e6:	e002      	b.n	80008ee <bno055_rx+0x1e>
	}
	return i2c_rx_int;
 80008e8:	4b02      	ldr	r3, [pc, #8]	@ (80008f4 <bno055_rx+0x24>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	b2db      	uxtb	r3, r3
}
 80008ee:	0018      	movs	r0, r3
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	2000000f 	.word	0x2000000f

080008f8 <bno055_queue_transaction>:

int8_t bno055_queue_transaction()
{
 80008f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008fa:	b085      	sub	sp, #20
 80008fc:	af02      	add	r7, sp, #8
	uint8_t status = HAL_OK;
 80008fe:	1d7b      	adds	r3, r7, #5
 8000900:	2200      	movs	r2, #0
 8000902:	701a      	strb	r2, [r3, #0]
	uint16_t start_register = 0;
 8000904:	1dbb      	adds	r3, r7, #6
 8000906:	2200      	movs	r2, #0
 8000908:	801a      	strh	r2, [r3, #0]
	if(bno055_address == BNO055_I2C_ADDR_LO << 1)
 800090a:	4b30      	ldr	r3, [pc, #192]	@ (80009cc <bno055_queue_transaction+0xd4>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	2b50      	cmp	r3, #80	@ 0x50
 8000910:	d103      	bne.n	800091a <bno055_queue_transaction+0x22>
	{
		start_register = ACCELEROMETER_X;
 8000912:	1dbb      	adds	r3, r7, #6
 8000914:	2212      	movs	r2, #18
 8000916:	801a      	strh	r2, [r3, #0]
 8000918:	e002      	b.n	8000920 <bno055_queue_transaction+0x28>
	}
	else
	{
		start_register = REMOTE_ACCELEROMETER_X;
 800091a:	1dbb      	adds	r3, r7, #6
 800091c:	2228      	movs	r2, #40	@ 0x28
 800091e:	801a      	strh	r2, [r3, #0]
	}
	i2c_rx_int = 0;
 8000920:	4b2b      	ldr	r3, [pc, #172]	@ (80009d0 <bno055_queue_transaction+0xd8>)
 8000922:	2200      	movs	r2, #0
 8000924:	701a      	strb	r2, [r3, #0]
	i2c_rx_time = HAL_GetTick();
 8000926:	f003 f9c7 	bl	8003cb8 <HAL_GetTick>
 800092a:	0002      	movs	r2, r0
 800092c:	4b29      	ldr	r3, [pc, #164]	@ (80009d4 <bno055_queue_transaction+0xdc>)
 800092e:	601a      	str	r2, [r3, #0]
	status = HAL_I2C_Mem_Read_DMA(&hi2c1, bno055_address, mem_read_map[read_index].reg,
 8000930:	4b26      	ldr	r3, [pc, #152]	@ (80009cc <bno055_queue_transaction+0xd4>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	001d      	movs	r5, r3
 8000936:	4b28      	ldr	r3, [pc, #160]	@ (80009d8 <bno055_queue_transaction+0xe0>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	001a      	movs	r2, r3
 800093c:	4b27      	ldr	r3, [pc, #156]	@ (80009dc <bno055_queue_transaction+0xe4>)
 800093e:	0052      	lsls	r2, r2, #1
 8000940:	5cd3      	ldrb	r3, [r2, r3]
 8000942:	001e      	movs	r6, r3
			I2C_MEMADD_SIZE_8BIT, (uint8_t*)(&holding_register_database[start_register + (3 * read_index)]),
 8000944:	1dbb      	adds	r3, r7, #6
 8000946:	881a      	ldrh	r2, [r3, #0]
 8000948:	4b23      	ldr	r3, [pc, #140]	@ (80009d8 <bno055_queue_transaction+0xe0>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	0019      	movs	r1, r3
 800094e:	000b      	movs	r3, r1
 8000950:	005b      	lsls	r3, r3, #1
 8000952:	185b      	adds	r3, r3, r1
 8000954:	18d3      	adds	r3, r2, r3
 8000956:	005a      	lsls	r2, r3, #1
 8000958:	4b21      	ldr	r3, [pc, #132]	@ (80009e0 <bno055_queue_transaction+0xe8>)
 800095a:	18d3      	adds	r3, r2, r3
			mem_read_map[read_index].reg_len);
 800095c:	4a1e      	ldr	r2, [pc, #120]	@ (80009d8 <bno055_queue_transaction+0xe0>)
 800095e:	7812      	ldrb	r2, [r2, #0]
 8000960:	491e      	ldr	r1, [pc, #120]	@ (80009dc <bno055_queue_transaction+0xe4>)
 8000962:	0052      	lsls	r2, r2, #1
 8000964:	188a      	adds	r2, r1, r2
 8000966:	3201      	adds	r2, #1
 8000968:	7812      	ldrb	r2, [r2, #0]
	status = HAL_I2C_Mem_Read_DMA(&hi2c1, bno055_address, mem_read_map[read_index].reg,
 800096a:	1d7c      	adds	r4, r7, #5
 800096c:	481d      	ldr	r0, [pc, #116]	@ (80009e4 <bno055_queue_transaction+0xec>)
 800096e:	9201      	str	r2, [sp, #4]
 8000970:	9300      	str	r3, [sp, #0]
 8000972:	2301      	movs	r3, #1
 8000974:	0032      	movs	r2, r6
 8000976:	0029      	movs	r1, r5
 8000978:	f004 fc58 	bl	800522c <HAL_I2C_Mem_Read_DMA>
 800097c:	0003      	movs	r3, r0
 800097e:	7023      	strb	r3, [r4, #0]
	__HAL_DMA_DISABLE_IT(&hdma_i2c1_rx, DMA_IT_HT);
 8000980:	4b19      	ldr	r3, [pc, #100]	@ (80009e8 <bno055_queue_transaction+0xf0>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	681a      	ldr	r2, [r3, #0]
 8000986:	4b18      	ldr	r3, [pc, #96]	@ (80009e8 <bno055_queue_transaction+0xf0>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	2104      	movs	r1, #4
 800098c:	438a      	bics	r2, r1
 800098e:	601a      	str	r2, [r3, #0]

	if(read_index == NUM_VECTORS - 1)
 8000990:	4b11      	ldr	r3, [pc, #68]	@ (80009d8 <bno055_queue_transaction+0xe0>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	2b06      	cmp	r3, #6
 8000996:	d10c      	bne.n	80009b2 <bno055_queue_transaction+0xba>
	{
		// Reset the read index
		read_index = 0;
 8000998:	4b0f      	ldr	r3, [pc, #60]	@ (80009d8 <bno055_queue_transaction+0xe0>)
 800099a:	2200      	movs	r2, #0
 800099c:	701a      	strb	r2, [r3, #0]
		// Switch to the other IMU
		bno055_address = (bno055_address == (BNO055_I2C_ADDR_LO << 1))? (BNO055_I2C_ADDR_HI << 1): (BNO055_I2C_ADDR_LO << 1);
 800099e:	4b0b      	ldr	r3, [pc, #44]	@ (80009cc <bno055_queue_transaction+0xd4>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	2b50      	cmp	r3, #80	@ 0x50
 80009a4:	d101      	bne.n	80009aa <bno055_queue_transaction+0xb2>
 80009a6:	2252      	movs	r2, #82	@ 0x52
 80009a8:	e000      	b.n	80009ac <bno055_queue_transaction+0xb4>
 80009aa:	2250      	movs	r2, #80	@ 0x50
 80009ac:	4b07      	ldr	r3, [pc, #28]	@ (80009cc <bno055_queue_transaction+0xd4>)
 80009ae:	701a      	strb	r2, [r3, #0]
 80009b0:	e005      	b.n	80009be <bno055_queue_transaction+0xc6>
	}
	else
	{
		// Increment the read index to read the next vector on the next run
		read_index = read_index + 1;
 80009b2:	4b09      	ldr	r3, [pc, #36]	@ (80009d8 <bno055_queue_transaction+0xe0>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	3301      	adds	r3, #1
 80009b8:	b2da      	uxtb	r2, r3
 80009ba:	4b07      	ldr	r3, [pc, #28]	@ (80009d8 <bno055_queue_transaction+0xe0>)
 80009bc:	701a      	strb	r2, [r3, #0]
	}
	return status;
 80009be:	1d7b      	adds	r3, r7, #5
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	b25b      	sxtb	r3, r3
}
 80009c4:	0018      	movs	r0, r3
 80009c6:	46bd      	mov	sp, r7
 80009c8:	b003      	add	sp, #12
 80009ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009cc:	200002dd 	.word	0x200002dd
 80009d0:	2000000f 	.word	0x2000000f
 80009d4:	200002e4 	.word	0x200002e4
 80009d8:	200002dc 	.word	0x200002dc
 80009dc:	20000000 	.word	0x20000000
 80009e0:	20000010 	.word	0x20000010
 80009e4:	200002ec 	.word	0x200002ec
 80009e8:	20000340 	.word	0x20000340

080009ec <monitor_i2c>:
//	status = bno055_write(i2c_rx_buffer, 2);
//	status |= bno055_poll_transaction();
}

int8_t monitor_i2c()
{
 80009ec:	b590      	push	{r4, r7, lr}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
	int8_t status = HAL_OK;
 80009f2:	1dfb      	adds	r3, r7, #7
 80009f4:	2200      	movs	r2, #0
 80009f6:	701a      	strb	r2, [r3, #0]

	// I2C error handling
	if(i2c_err_int)
 80009f8:	4b2a      	ldr	r3, [pc, #168]	@ (8000aa4 <monitor_i2c+0xb8>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d018      	beq.n	8000a34 <monitor_i2c+0x48>
	{
		i2c_err_int = 0;
 8000a02:	4b28      	ldr	r3, [pc, #160]	@ (8000aa4 <monitor_i2c+0xb8>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	701a      	strb	r2, [r3, #0]
		status = i2c_reset();
 8000a08:	1dfc      	adds	r4, r7, #7
 8000a0a:	f000 f909 	bl	8000c20 <i2c_reset>
 8000a0e:	0003      	movs	r3, r0
 8000a10:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK)
 8000a12:	1dfb      	adds	r3, r7, #7
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	b25b      	sxtb	r3, r3
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d006      	beq.n	8000a2a <monitor_i2c+0x3e>
		{
			i2c_rx_int = 1;
 8000a1c:	4b22      	ldr	r3, [pc, #136]	@ (8000aa8 <monitor_i2c+0xbc>)
 8000a1e:	2201      	movs	r2, #1
 8000a20:	701a      	strb	r2, [r3, #0]
			return status;
 8000a22:	1dfb      	adds	r3, r7, #7
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	b25b      	sxtb	r3, r3
 8000a28:	e037      	b.n	8000a9a <monitor_i2c+0xae>
		}
		return handle_i2c_error(I2C_ERROR);
 8000a2a:	2018      	movs	r0, #24
 8000a2c:	f000 f956 	bl	8000cdc <handle_i2c_error>
 8000a30:	0003      	movs	r3, r0
 8000a32:	e032      	b.n	8000a9a <monitor_i2c+0xae>
	}

	// TX timeout handling
	if(!i2c_tx_int)
 8000a34:	4b1d      	ldr	r3, [pc, #116]	@ (8000aac <monitor_i2c+0xc0>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d112      	bne.n	8000a64 <monitor_i2c+0x78>
	{
		if(HAL_GetTick() - i2c_tx_time >= 20)
 8000a3e:	f003 f93b 	bl	8003cb8 <HAL_GetTick>
 8000a42:	0002      	movs	r2, r0
 8000a44:	4b1a      	ldr	r3, [pc, #104]	@ (8000ab0 <monitor_i2c+0xc4>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	1ad3      	subs	r3, r2, r3
 8000a4a:	2b13      	cmp	r3, #19
 8000a4c:	d907      	bls.n	8000a5e <monitor_i2c+0x72>
		{
			i2c_tx_int = 1;
 8000a4e:	4b17      	ldr	r3, [pc, #92]	@ (8000aac <monitor_i2c+0xc0>)
 8000a50:	2201      	movs	r2, #1
 8000a52:	701a      	strb	r2, [r3, #0]
			return handle_i2c_error(I2C_TX_TIMEOUT);
 8000a54:	2016      	movs	r0, #22
 8000a56:	f000 f941 	bl	8000cdc <handle_i2c_error>
 8000a5a:	0003      	movs	r3, r0
 8000a5c:	e01d      	b.n	8000a9a <monitor_i2c+0xae>
		}
		status = HAL_BUSY;
 8000a5e:	1dfb      	adds	r3, r7, #7
 8000a60:	2202      	movs	r2, #2
 8000a62:	701a      	strb	r2, [r3, #0]
	}

	// RX timeout handling
	if(!i2c_rx_int)
 8000a64:	4b10      	ldr	r3, [pc, #64]	@ (8000aa8 <monitor_i2c+0xbc>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d112      	bne.n	8000a94 <monitor_i2c+0xa8>
	{
		if(HAL_GetTick() - i2c_rx_time >= 20)
 8000a6e:	f003 f923 	bl	8003cb8 <HAL_GetTick>
 8000a72:	0002      	movs	r2, r0
 8000a74:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab4 <monitor_i2c+0xc8>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	1ad3      	subs	r3, r2, r3
 8000a7a:	2b13      	cmp	r3, #19
 8000a7c:	d907      	bls.n	8000a8e <monitor_i2c+0xa2>
		{
			i2c_rx_int = 1;
 8000a7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa8 <monitor_i2c+0xbc>)
 8000a80:	2201      	movs	r2, #1
 8000a82:	701a      	strb	r2, [r3, #0]
			return handle_i2c_error(I2C_RX_TIMEOUT);
 8000a84:	2017      	movs	r0, #23
 8000a86:	f000 f929 	bl	8000cdc <handle_i2c_error>
 8000a8a:	0003      	movs	r3, r0
 8000a8c:	e005      	b.n	8000a9a <monitor_i2c+0xae>
		}
		status = HAL_BUSY;
 8000a8e:	1dfb      	adds	r3, r7, #7
 8000a90:	2202      	movs	r2, #2
 8000a92:	701a      	strb	r2, [r3, #0]
	}

	return status;
 8000a94:	1dfb      	adds	r3, r7, #7
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	b25b      	sxtb	r3, r3
}
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	b003      	add	sp, #12
 8000aa0:	bd90      	pop	{r4, r7, pc}
 8000aa2:	46c0      	nop			@ (mov r8, r8)
 8000aa4:	200002e8 	.word	0x200002e8
 8000aa8:	2000000f 	.word	0x2000000f
 8000aac:	2000000e 	.word	0x2000000e
 8000ab0:	200002e0 	.word	0x200002e0
 8000ab4:	200002e4 	.word	0x200002e4

08000ab8 <bno055_write>:

int8_t bno055_write(uint8_t *data, uint8_t len)
{
 8000ab8:	b590      	push	{r4, r7, lr}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	000a      	movs	r2, r1
 8000ac2:	1cfb      	adds	r3, r7, #3
 8000ac4:	701a      	strb	r2, [r3, #0]
	int8_t status = HAL_OK;
 8000ac6:	240f      	movs	r4, #15
 8000ac8:	193b      	adds	r3, r7, r4
 8000aca:	2200      	movs	r2, #0
 8000acc:	701a      	strb	r2, [r3, #0]
	i2c_tx_int = 0;
 8000ace:	4b12      	ldr	r3, [pc, #72]	@ (8000b18 <bno055_write+0x60>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	701a      	strb	r2, [r3, #0]
	i2c_tx_time = HAL_GetTick();
 8000ad4:	f003 f8f0 	bl	8003cb8 <HAL_GetTick>
 8000ad8:	0002      	movs	r2, r0
 8000ada:	4b10      	ldr	r3, [pc, #64]	@ (8000b1c <bno055_write+0x64>)
 8000adc:	601a      	str	r2, [r3, #0]
	status = HAL_I2C_Master_Transmit_DMA(&hi2c1, bno055_address, data, len);
 8000ade:	4b10      	ldr	r3, [pc, #64]	@ (8000b20 <bno055_write+0x68>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	0019      	movs	r1, r3
 8000ae4:	1cfb      	adds	r3, r7, #3
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	b29b      	uxth	r3, r3
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	480d      	ldr	r0, [pc, #52]	@ (8000b24 <bno055_write+0x6c>)
 8000aee:	f004 f96d 	bl	8004dcc <HAL_I2C_Master_Transmit_DMA>
 8000af2:	0003      	movs	r3, r0
 8000af4:	001a      	movs	r2, r3
 8000af6:	193b      	adds	r3, r7, r4
 8000af8:	701a      	strb	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(&hdma_i2c1_tx, DMA_IT_HT);
 8000afa:	4b0b      	ldr	r3, [pc, #44]	@ (8000b28 <bno055_write+0x70>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	4b09      	ldr	r3, [pc, #36]	@ (8000b28 <bno055_write+0x70>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2104      	movs	r1, #4
 8000b06:	438a      	bics	r2, r1
 8000b08:	601a      	str	r2, [r3, #0]

	return status;
 8000b0a:	193b      	adds	r3, r7, r4
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	b25b      	sxtb	r3, r3
}
 8000b10:	0018      	movs	r0, r3
 8000b12:	46bd      	mov	sp, r7
 8000b14:	b005      	add	sp, #20
 8000b16:	bd90      	pop	{r4, r7, pc}
 8000b18:	2000000e 	.word	0x2000000e
 8000b1c:	200002e0 	.word	0x200002e0
 8000b20:	200002dd 	.word	0x200002dd
 8000b24:	200002ec 	.word	0x200002ec
 8000b28:	2000039c 	.word	0x2000039c

08000b2c <bno055_read>:

int8_t bno055_read(uint8_t reg, uint8_t *data, uint8_t len)
{
 8000b2c:	b5b0      	push	{r4, r5, r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6039      	str	r1, [r7, #0]
 8000b34:	0011      	movs	r1, r2
 8000b36:	1dfb      	adds	r3, r7, #7
 8000b38:	1c02      	adds	r2, r0, #0
 8000b3a:	701a      	strb	r2, [r3, #0]
 8000b3c:	1dbb      	adds	r3, r7, #6
 8000b3e:	1c0a      	adds	r2, r1, #0
 8000b40:	701a      	strb	r2, [r3, #0]
	int8_t status = HAL_OK;
 8000b42:	240f      	movs	r4, #15
 8000b44:	193b      	adds	r3, r7, r4
 8000b46:	2200      	movs	r2, #0
 8000b48:	701a      	strb	r2, [r3, #0]
	i2c_tx_int = 0;
 8000b4a:	4b2d      	ldr	r3, [pc, #180]	@ (8000c00 <bno055_read+0xd4>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	701a      	strb	r2, [r3, #0]
	i2c_tx_time = HAL_GetTick();
 8000b50:	f003 f8b2 	bl	8003cb8 <HAL_GetTick>
 8000b54:	0002      	movs	r2, r0
 8000b56:	4b2b      	ldr	r3, [pc, #172]	@ (8000c04 <bno055_read+0xd8>)
 8000b58:	601a      	str	r2, [r3, #0]
	status = HAL_I2C_Master_Transmit_DMA(&hi2c1, bno055_address, &reg, 1);
 8000b5a:	4b2b      	ldr	r3, [pc, #172]	@ (8000c08 <bno055_read+0xdc>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	0019      	movs	r1, r3
 8000b60:	1dfa      	adds	r2, r7, #7
 8000b62:	482a      	ldr	r0, [pc, #168]	@ (8000c0c <bno055_read+0xe0>)
 8000b64:	2301      	movs	r3, #1
 8000b66:	f004 f931 	bl	8004dcc <HAL_I2C_Master_Transmit_DMA>
 8000b6a:	0003      	movs	r3, r0
 8000b6c:	001a      	movs	r2, r3
 8000b6e:	193b      	adds	r3, r7, r4
 8000b70:	701a      	strb	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(&hdma_i2c1_tx, DMA_IT_HT);
 8000b72:	4b27      	ldr	r3, [pc, #156]	@ (8000c10 <bno055_read+0xe4>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	4b25      	ldr	r3, [pc, #148]	@ (8000c10 <bno055_read+0xe4>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2104      	movs	r1, #4
 8000b7e:	438a      	bics	r2, r1
 8000b80:	601a      	str	r2, [r3, #0]
	if(status != HAL_OK){return status;}
 8000b82:	193b      	adds	r3, r7, r4
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	b25b      	sxtb	r3, r3
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d003      	beq.n	8000b94 <bno055_read+0x68>
 8000b8c:	193b      	adds	r3, r7, r4
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	b25b      	sxtb	r3, r3
 8000b92:	e031      	b.n	8000bf8 <bno055_read+0xcc>
	status = bno055_poll_transaction();
 8000b94:	250f      	movs	r5, #15
 8000b96:	197c      	adds	r4, r7, r5
 8000b98:	f7ff fdcc 	bl	8000734 <bno055_poll_transaction>
 8000b9c:	0003      	movs	r3, r0
 8000b9e:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8000ba0:	002a      	movs	r2, r5
 8000ba2:	18bb      	adds	r3, r7, r2
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	b25b      	sxtb	r3, r3
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d003      	beq.n	8000bb4 <bno055_read+0x88>
 8000bac:	18bb      	adds	r3, r7, r2
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	b25b      	sxtb	r3, r3
 8000bb2:	e021      	b.n	8000bf8 <bno055_read+0xcc>

	i2c_rx_int = 0;
 8000bb4:	4b17      	ldr	r3, [pc, #92]	@ (8000c14 <bno055_read+0xe8>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	701a      	strb	r2, [r3, #0]
	i2c_rx_time = HAL_GetTick();
 8000bba:	f003 f87d 	bl	8003cb8 <HAL_GetTick>
 8000bbe:	0002      	movs	r2, r0
 8000bc0:	4b15      	ldr	r3, [pc, #84]	@ (8000c18 <bno055_read+0xec>)
 8000bc2:	601a      	str	r2, [r3, #0]
	status = HAL_I2C_Master_Receive_DMA(&hi2c1, bno055_address, data, len);
 8000bc4:	4b10      	ldr	r3, [pc, #64]	@ (8000c08 <bno055_read+0xdc>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	0019      	movs	r1, r3
 8000bca:	1dbb      	adds	r3, r7, #6
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	b29b      	uxth	r3, r3
 8000bd0:	683a      	ldr	r2, [r7, #0]
 8000bd2:	480e      	ldr	r0, [pc, #56]	@ (8000c0c <bno055_read+0xe0>)
 8000bd4:	f004 fa24 	bl	8005020 <HAL_I2C_Master_Receive_DMA>
 8000bd8:	0003      	movs	r3, r0
 8000bda:	001a      	movs	r2, r3
 8000bdc:	200f      	movs	r0, #15
 8000bde:	183b      	adds	r3, r7, r0
 8000be0:	701a      	strb	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(&hdma_i2c1_rx, DMA_IT_HT);
 8000be2:	4b0e      	ldr	r3, [pc, #56]	@ (8000c1c <bno055_read+0xf0>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	4b0c      	ldr	r3, [pc, #48]	@ (8000c1c <bno055_read+0xf0>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2104      	movs	r1, #4
 8000bee:	438a      	bics	r2, r1
 8000bf0:	601a      	str	r2, [r3, #0]

	return status;
 8000bf2:	183b      	adds	r3, r7, r0
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	b25b      	sxtb	r3, r3
}
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	b004      	add	sp, #16
 8000bfe:	bdb0      	pop	{r4, r5, r7, pc}
 8000c00:	2000000e 	.word	0x2000000e
 8000c04:	200002e0 	.word	0x200002e0
 8000c08:	200002dd 	.word	0x200002dd
 8000c0c:	200002ec 	.word	0x200002ec
 8000c10:	2000039c 	.word	0x2000039c
 8000c14:	2000000f 	.word	0x2000000f
 8000c18:	200002e4 	.word	0x200002e4
 8000c1c:	20000340 	.word	0x20000340

08000c20 <i2c_reset>:

int8_t i2c_reset()
{
 8000c20:	b590      	push	{r4, r7, lr}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
	int8_t status = HAL_OK;
 8000c26:	1dfb      	adds	r3, r7, #7
 8000c28:	2200      	movs	r2, #0
 8000c2a:	701a      	strb	r2, [r3, #0]
	status = bno055_poll_transaction();
 8000c2c:	1dfc      	adds	r4, r7, #7
 8000c2e:	f7ff fd81 	bl	8000734 <bno055_poll_transaction>
 8000c32:	0003      	movs	r3, r0
 8000c34:	7023      	strb	r3, [r4, #0]
	status |= HAL_I2C_DeInit(&hi2c1);
 8000c36:	4b26      	ldr	r3, [pc, #152]	@ (8000cd0 <i2c_reset+0xb0>)
 8000c38:	0018      	movs	r0, r3
 8000c3a:	f004 f897 	bl	8004d6c <HAL_I2C_DeInit>
 8000c3e:	0003      	movs	r3, r0
 8000c40:	b259      	sxtb	r1, r3
 8000c42:	1dfb      	adds	r3, r7, #7
 8000c44:	1dfa      	adds	r2, r7, #7
 8000c46:	7812      	ldrb	r2, [r2, #0]
 8000c48:	430a      	orrs	r2, r1
 8000c4a:	701a      	strb	r2, [r3, #0]
	__I2C1_FORCE_RESET();
 8000c4c:	4b21      	ldr	r3, [pc, #132]	@ (8000cd4 <i2c_reset+0xb4>)
 8000c4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c50:	4b20      	ldr	r3, [pc, #128]	@ (8000cd4 <i2c_reset+0xb4>)
 8000c52:	2180      	movs	r1, #128	@ 0x80
 8000c54:	0389      	lsls	r1, r1, #14
 8000c56:	430a      	orrs	r2, r1
 8000c58:	62da      	str	r2, [r3, #44]	@ 0x2c
	HAL_Delay(100);
 8000c5a:	2064      	movs	r0, #100	@ 0x64
 8000c5c:	f003 f836 	bl	8003ccc <HAL_Delay>
	__I2C1_RELEASE_RESET();
 8000c60:	4b1c      	ldr	r3, [pc, #112]	@ (8000cd4 <i2c_reset+0xb4>)
 8000c62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c64:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd4 <i2c_reset+0xb4>)
 8000c66:	491c      	ldr	r1, [pc, #112]	@ (8000cd8 <i2c_reset+0xb8>)
 8000c68:	400a      	ands	r2, r1
 8000c6a:	62da      	str	r2, [r3, #44]	@ 0x2c
	status = HAL_I2C_Init(&hi2c1);
 8000c6c:	4b18      	ldr	r3, [pc, #96]	@ (8000cd0 <i2c_reset+0xb0>)
 8000c6e:	0018      	movs	r0, r3
 8000c70:	f003 ffd6 	bl	8004c20 <HAL_I2C_Init>
 8000c74:	0003      	movs	r3, r0
 8000c76:	001a      	movs	r2, r3
 8000c78:	1dfb      	adds	r3, r7, #7
 8000c7a:	701a      	strb	r2, [r3, #0]
	status |= HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE);
 8000c7c:	4b14      	ldr	r3, [pc, #80]	@ (8000cd0 <i2c_reset+0xb0>)
 8000c7e:	2100      	movs	r1, #0
 8000c80:	0018      	movs	r0, r3
 8000c82:	f006 f901 	bl	8006e88 <HAL_I2CEx_ConfigAnalogFilter>
 8000c86:	0003      	movs	r3, r0
 8000c88:	b259      	sxtb	r1, r3
 8000c8a:	1dfb      	adds	r3, r7, #7
 8000c8c:	1dfa      	adds	r2, r7, #7
 8000c8e:	7812      	ldrb	r2, [r2, #0]
 8000c90:	430a      	orrs	r2, r1
 8000c92:	701a      	strb	r2, [r3, #0]
	status |= HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0);
 8000c94:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd0 <i2c_reset+0xb0>)
 8000c96:	2100      	movs	r1, #0
 8000c98:	0018      	movs	r0, r3
 8000c9a:	f006 f941 	bl	8006f20 <HAL_I2CEx_ConfigDigitalFilter>
 8000c9e:	0003      	movs	r3, r0
 8000ca0:	b259      	sxtb	r1, r3
 8000ca2:	1dfb      	adds	r3, r7, #7
 8000ca4:	1dfa      	adds	r2, r7, #7
 8000ca6:	7812      	ldrb	r2, [r2, #0]
 8000ca8:	430a      	orrs	r2, r1
 8000caa:	701a      	strb	r2, [r3, #0]
	if(status != HAL_OK)
 8000cac:	1dfb      	adds	r3, r7, #7
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	b25b      	sxtb	r3, r3
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d004      	beq.n	8000cc0 <i2c_reset+0xa0>
	{
		return handle_i2c_error(I2C_FATAL_ERROR);
 8000cb6:	2019      	movs	r0, #25
 8000cb8:	f000 f810 	bl	8000cdc <handle_i2c_error>
 8000cbc:	0003      	movs	r3, r0
 8000cbe:	e002      	b.n	8000cc6 <i2c_reset+0xa6>
	}
	return status;
 8000cc0:	1dfb      	adds	r3, r7, #7
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	b25b      	sxtb	r3, r3
}
 8000cc6:	0018      	movs	r0, r3
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	b003      	add	sp, #12
 8000ccc:	bd90      	pop	{r4, r7, pc}
 8000cce:	46c0      	nop			@ (mov r8, r8)
 8000cd0:	200002ec 	.word	0x200002ec
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	ffdfffff 	.word	0xffdfffff

08000cdc <handle_i2c_error>:

int8_t handle_i2c_error(int8_t error_code)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	0002      	movs	r2, r0
 8000ce4:	1dfb      	adds	r3, r7, #7
 8000ce6:	701a      	strb	r2, [r3, #0]
	holding_register_database[I2C_ERRORS] |= 1U << (error_code - I2C_TX_TIMEOUT);
 8000ce8:	4b0a      	ldr	r3, [pc, #40]	@ (8000d14 <handle_i2c_error+0x38>)
 8000cea:	895a      	ldrh	r2, [r3, #10]
 8000cec:	1dfb      	adds	r3, r7, #7
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	b25b      	sxtb	r3, r3
 8000cf2:	3b16      	subs	r3, #22
 8000cf4:	2101      	movs	r1, #1
 8000cf6:	4099      	lsls	r1, r3
 8000cf8:	000b      	movs	r3, r1
 8000cfa:	b29b      	uxth	r3, r3
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	b29a      	uxth	r2, r3
 8000d00:	4b04      	ldr	r3, [pc, #16]	@ (8000d14 <handle_i2c_error+0x38>)
 8000d02:	815a      	strh	r2, [r3, #10]
	return error_code;
 8000d04:	1dfb      	adds	r3, r7, #7
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	b25b      	sxtb	r3, r3
}
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	b002      	add	sp, #8
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	46c0      	nop			@ (mov r8, r8)
 8000d14:	20000010 	.word	0x20000010

08000d18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	0002      	movs	r2, r0
 8000d20:	1dfb      	adds	r3, r7, #7
 8000d22:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d24:	1dfb      	adds	r3, r7, #7
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	2b7f      	cmp	r3, #127	@ 0x7f
 8000d2a:	d809      	bhi.n	8000d40 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d2c:	1dfb      	adds	r3, r7, #7
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	001a      	movs	r2, r3
 8000d32:	231f      	movs	r3, #31
 8000d34:	401a      	ands	r2, r3
 8000d36:	4b04      	ldr	r3, [pc, #16]	@ (8000d48 <__NVIC_EnableIRQ+0x30>)
 8000d38:	2101      	movs	r1, #1
 8000d3a:	4091      	lsls	r1, r2
 8000d3c:	000a      	movs	r2, r1
 8000d3e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000d40:	46c0      	nop			@ (mov r8, r8)
 8000d42:	46bd      	mov	sp, r7
 8000d44:	b002      	add	sp, #8
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	e000e100 	.word	0xe000e100

08000d4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d4c:	b590      	push	{r4, r7, lr}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	0002      	movs	r2, r0
 8000d54:	6039      	str	r1, [r7, #0]
 8000d56:	1dfb      	adds	r3, r7, #7
 8000d58:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d5a:	1dfb      	adds	r3, r7, #7
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000d60:	d828      	bhi.n	8000db4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d62:	4a2f      	ldr	r2, [pc, #188]	@ (8000e20 <__NVIC_SetPriority+0xd4>)
 8000d64:	1dfb      	adds	r3, r7, #7
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	b25b      	sxtb	r3, r3
 8000d6a:	089b      	lsrs	r3, r3, #2
 8000d6c:	33c0      	adds	r3, #192	@ 0xc0
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	589b      	ldr	r3, [r3, r2]
 8000d72:	1dfa      	adds	r2, r7, #7
 8000d74:	7812      	ldrb	r2, [r2, #0]
 8000d76:	0011      	movs	r1, r2
 8000d78:	2203      	movs	r2, #3
 8000d7a:	400a      	ands	r2, r1
 8000d7c:	00d2      	lsls	r2, r2, #3
 8000d7e:	21ff      	movs	r1, #255	@ 0xff
 8000d80:	4091      	lsls	r1, r2
 8000d82:	000a      	movs	r2, r1
 8000d84:	43d2      	mvns	r2, r2
 8000d86:	401a      	ands	r2, r3
 8000d88:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	019b      	lsls	r3, r3, #6
 8000d8e:	22ff      	movs	r2, #255	@ 0xff
 8000d90:	401a      	ands	r2, r3
 8000d92:	1dfb      	adds	r3, r7, #7
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	0018      	movs	r0, r3
 8000d98:	2303      	movs	r3, #3
 8000d9a:	4003      	ands	r3, r0
 8000d9c:	00db      	lsls	r3, r3, #3
 8000d9e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000da0:	481f      	ldr	r0, [pc, #124]	@ (8000e20 <__NVIC_SetPriority+0xd4>)
 8000da2:	1dfb      	adds	r3, r7, #7
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	b25b      	sxtb	r3, r3
 8000da8:	089b      	lsrs	r3, r3, #2
 8000daa:	430a      	orrs	r2, r1
 8000dac:	33c0      	adds	r3, #192	@ 0xc0
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000db2:	e031      	b.n	8000e18 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000db4:	4a1b      	ldr	r2, [pc, #108]	@ (8000e24 <__NVIC_SetPriority+0xd8>)
 8000db6:	1dfb      	adds	r3, r7, #7
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	0019      	movs	r1, r3
 8000dbc:	230f      	movs	r3, #15
 8000dbe:	400b      	ands	r3, r1
 8000dc0:	3b08      	subs	r3, #8
 8000dc2:	089b      	lsrs	r3, r3, #2
 8000dc4:	3306      	adds	r3, #6
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	18d3      	adds	r3, r2, r3
 8000dca:	3304      	adds	r3, #4
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	1dfa      	adds	r2, r7, #7
 8000dd0:	7812      	ldrb	r2, [r2, #0]
 8000dd2:	0011      	movs	r1, r2
 8000dd4:	2203      	movs	r2, #3
 8000dd6:	400a      	ands	r2, r1
 8000dd8:	00d2      	lsls	r2, r2, #3
 8000dda:	21ff      	movs	r1, #255	@ 0xff
 8000ddc:	4091      	lsls	r1, r2
 8000dde:	000a      	movs	r2, r1
 8000de0:	43d2      	mvns	r2, r2
 8000de2:	401a      	ands	r2, r3
 8000de4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	019b      	lsls	r3, r3, #6
 8000dea:	22ff      	movs	r2, #255	@ 0xff
 8000dec:	401a      	ands	r2, r3
 8000dee:	1dfb      	adds	r3, r7, #7
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	0018      	movs	r0, r3
 8000df4:	2303      	movs	r3, #3
 8000df6:	4003      	ands	r3, r0
 8000df8:	00db      	lsls	r3, r3, #3
 8000dfa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dfc:	4809      	ldr	r0, [pc, #36]	@ (8000e24 <__NVIC_SetPriority+0xd8>)
 8000dfe:	1dfb      	adds	r3, r7, #7
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	001c      	movs	r4, r3
 8000e04:	230f      	movs	r3, #15
 8000e06:	4023      	ands	r3, r4
 8000e08:	3b08      	subs	r3, #8
 8000e0a:	089b      	lsrs	r3, r3, #2
 8000e0c:	430a      	orrs	r2, r1
 8000e0e:	3306      	adds	r3, #6
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	18c3      	adds	r3, r0, r3
 8000e14:	3304      	adds	r3, #4
 8000e16:	601a      	str	r2, [r3, #0]
}
 8000e18:	46c0      	nop			@ (mov r8, r8)
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	b003      	add	sp, #12
 8000e1e:	bd90      	pop	{r4, r7, pc}
 8000e20:	e000e100 	.word	0xe000e100
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <LL_ADC_DMA_GetRegAddr>:
  * @param  Register This parameter can be one of the following values:
  *         @arg @ref LL_ADC_DMA_REG_REGULAR_DATA
  * @retval ADC register address
  */
__STATIC_INLINE uint32_t LL_ADC_DMA_GetRegAddr(ADC_TypeDef *ADCx, uint32_t Register)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(Register);

  /* Retrieve address of register DR */
  return (uint32_t) &(ADCx->DR);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	3340      	adds	r3, #64	@ 0x40
}
 8000e36:	0018      	movs	r0, r3
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	b002      	add	sp, #8
 8000e3c:	bd80      	pop	{r7, pc}
	...

08000e40 <LL_ADC_SetTriggerFrequencyMode>:
  *         @arg @ref LL_ADC_TRIGGER_FREQ_HIGH
  *         @arg @ref LL_ADC_TRIGGER_FREQ_LOW
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetTriggerFrequencyMode(ADC_TypeDef *ADCx, uint32_t TriggerFrequencyMode)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_LFTRIG, TriggerFrequencyMode);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	691b      	ldr	r3, [r3, #16]
 8000e4e:	4a05      	ldr	r2, [pc, #20]	@ (8000e64 <LL_ADC_SetTriggerFrequencyMode+0x24>)
 8000e50:	401a      	ands	r2, r3
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	431a      	orrs	r2, r3
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	611a      	str	r2, [r3, #16]
}
 8000e5a:	46c0      	nop			@ (mov r8, r8)
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	b002      	add	sp, #8
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	46c0      	nop			@ (mov r8, r8)
 8000e64:	dfffffff 	.word	0xdfffffff

08000e68 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	695b      	ldr	r3, [r3, #20]
 8000e78:	68ba      	ldr	r2, [r7, #8]
 8000e7a:	2104      	movs	r1, #4
 8000e7c:	400a      	ands	r2, r1
 8000e7e:	2107      	movs	r1, #7
 8000e80:	4091      	lsls	r1, r2
 8000e82:	000a      	movs	r2, r1
 8000e84:	43d2      	mvns	r2, r2
 8000e86:	401a      	ands	r2, r3
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	2104      	movs	r1, #4
 8000e8c:	400b      	ands	r3, r1
 8000e8e:	6879      	ldr	r1, [r7, #4]
 8000e90:	4099      	lsls	r1, r3
 8000e92:	000b      	movs	r3, r1
 8000e94:	431a      	orrs	r2, r3
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000e9a:	46c0      	nop			@ (mov r8, r8)
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	b004      	add	sp, #16
 8000ea0:	bd80      	pop	{r7, pc}
	...

08000ea4 <LL_ADC_REG_SetSequencerConfigurable>:
  *         @arg @ref LL_ADC_REG_SEQ_FIXED
  *         @arg @ref LL_ADC_REG_SEQ_CONFIGURABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerConfigurable(ADC_TypeDef *ADCx, uint32_t Configurability)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_CHSELRMOD, Configurability);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	68db      	ldr	r3, [r3, #12]
 8000eb2:	4a05      	ldr	r2, [pc, #20]	@ (8000ec8 <LL_ADC_REG_SetSequencerConfigurable+0x24>)
 8000eb4:	401a      	ands	r2, r3
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	431a      	orrs	r2, r3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	60da      	str	r2, [r3, #12]
}
 8000ebe:	46c0      	nop			@ (mov r8, r8)
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	b002      	add	sp, #8
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	46c0      	nop			@ (mov r8, r8)
 8000ec8:	ffdfffff 	.word	0xffdfffff

08000ecc <LL_ADC_REG_SetSequencerScanDirection>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_FORWARD
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_BACKWARD
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerScanDirection(ADC_TypeDef *ADCx, uint32_t ScanDirection)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	68db      	ldr	r3, [r3, #12]
 8000eda:	2204      	movs	r2, #4
 8000edc:	4393      	bics	r3, r2
 8000ede:	001a      	movs	r2, r3
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	431a      	orrs	r2, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	60da      	str	r2, [r3, #12]
}
 8000ee8:	46c0      	nop			@ (mov r8, r8)
 8000eea:	46bd      	mov	sp, r7
 8000eec:	b002      	add	sp, #8
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	025b      	lsls	r3, r3, #9
 8000f02:	0a5b      	lsrs	r3, r3, #9
 8000f04:	431a      	orrs	r2, r3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000f0a:	46c0      	nop			@ (mov r8, r8)
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	b002      	add	sp, #8
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <LL_ADC_SetOverSamplingScope>:
  *         @arg @ref LL_ADC_OVS_DISABLE
  *         @arg @ref LL_ADC_OVS_GRP_REGULAR_CONTINUED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b082      	sub	sp, #8
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
 8000f1a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_OVSE, OvsScope);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	691b      	ldr	r3, [r3, #16]
 8000f20:	2201      	movs	r2, #1
 8000f22:	4393      	bics	r3, r2
 8000f24:	001a      	movs	r2, r3
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	431a      	orrs	r2, r3
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	611a      	str	r2, [r3, #16]
}
 8000f2e:	46c0      	nop			@ (mov r8, r8)
 8000f30:	46bd      	mov	sp, r7
 8000f32:	b002      	add	sp, #8
 8000f34:	bd80      	pop	{r7, pc}
	...

08000f38 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	4a05      	ldr	r2, [pc, #20]	@ (8000f5c <LL_ADC_EnableInternalRegulator+0x24>)
 8000f46:	4013      	ands	r3, r2
 8000f48:	2280      	movs	r2, #128	@ 0x80
 8000f4a:	0552      	lsls	r2, r2, #21
 8000f4c:	431a      	orrs	r2, r3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000f52:	46c0      	nop			@ (mov r8, r8)
 8000f54:	46bd      	mov	sp, r7
 8000f56:	b002      	add	sp, #8
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	46c0      	nop			@ (mov r8, r8)
 8000f5c:	6fffffe8 	.word	0x6fffffe8

08000f60 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	4013      	ands	r3, r2
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d101      	bne.n	8000f78 <LL_ADC_IsEnabled+0x18>
 8000f74:	2301      	movs	r3, #1
 8000f76:	e000      	b.n	8000f7a <LL_ADC_IsEnabled+0x1a>
 8000f78:	2300      	movs	r3, #0
}
 8000f7a:	0018      	movs	r0, r3
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	b002      	add	sp, #8
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b082      	sub	sp, #8
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	2202      	movs	r2, #2
 8000f90:	4013      	ands	r3, r2
 8000f92:	2b02      	cmp	r3, #2
 8000f94:	d101      	bne.n	8000f9a <LL_ADC_IsDisableOngoing+0x18>
 8000f96:	2301      	movs	r3, #1
 8000f98:	e000      	b.n	8000f9c <LL_ADC_IsDisableOngoing+0x1a>
 8000f9a:	2300      	movs	r3, #0
}
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	b002      	add	sp, #8
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	4a04      	ldr	r2, [pc, #16]	@ (8000fc4 <LL_ADC_REG_StartConversion+0x20>)
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	2204      	movs	r2, #4
 8000fb6:	431a      	orrs	r2, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000fbc:	46c0      	nop			@ (mov r8, r8)
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	b002      	add	sp, #8
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	7fffffe8 	.word	0x7fffffe8

08000fc8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	2204      	movs	r2, #4
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	2b04      	cmp	r3, #4
 8000fda:	d101      	bne.n	8000fe0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e000      	b.n	8000fe2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	b002      	add	sp, #8
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <LL_ADC_IsActiveFlag_CCRDY>:
  * @rmtoll ISR      CCRDY          LL_ADC_IsActiveFlag_CCRDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_CCRDY(ADC_TypeDef *ADCx)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b082      	sub	sp, #8
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_CCRDY) == (LL_ADC_FLAG_CCRDY)) ? 1UL : 0UL);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	2380      	movs	r3, #128	@ 0x80
 8000ff8:	019b      	lsls	r3, r3, #6
 8000ffa:	401a      	ands	r2, r3
 8000ffc:	2380      	movs	r3, #128	@ 0x80
 8000ffe:	019b      	lsls	r3, r3, #6
 8001000:	429a      	cmp	r2, r3
 8001002:	d101      	bne.n	8001008 <LL_ADC_IsActiveFlag_CCRDY+0x1e>
 8001004:	2301      	movs	r3, #1
 8001006:	e000      	b.n	800100a <LL_ADC_IsActiveFlag_CCRDY+0x20>
 8001008:	2300      	movs	r3, #0
}
 800100a:	0018      	movs	r0, r3
 800100c:	46bd      	mov	sp, r7
 800100e:	b002      	add	sp, #8
 8001010:	bd80      	pop	{r7, pc}

08001012 <LL_ADC_ClearFlag_CCRDY>:
  * @rmtoll ISR      CCRDY          LL_ADC_ClearFlag_CCRDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE void LL_ADC_ClearFlag_CCRDY(ADC_TypeDef *ADCx)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b082      	sub	sp, #8
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_CCRDY);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2280      	movs	r2, #128	@ 0x80
 800101e:	0192      	lsls	r2, r2, #6
 8001020:	601a      	str	r2, [r3, #0]
}
 8001022:	46c0      	nop			@ (mov r8, r8)
 8001024:	46bd      	mov	sp, r7
 8001026:	b002      	add	sp, #8
 8001028:	bd80      	pop	{r7, pc}

0800102a <LL_ADC_EnableIT_OVR>:
  * @rmtoll IER      OVRIE          LL_ADC_EnableIT_OVR
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_OVR(ADC_TypeDef *ADCx)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b082      	sub	sp, #8
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_OVR);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	2210      	movs	r2, #16
 8001038:	431a      	orrs	r2, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	605a      	str	r2, [r3, #4]
}
 800103e:	46c0      	nop			@ (mov r8, r8)
 8001040:	46bd      	mov	sp, r7
 8001042:	b002      	add	sp, #8
 8001044:	bd80      	pop	{r7, pc}

08001046 <LL_ADC_DisableIT_EOC>:
  * @rmtoll IER      EOCIE          LL_ADC_DisableIT_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b082      	sub	sp, #8
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	2204      	movs	r2, #4
 8001054:	4393      	bics	r3, r2
 8001056:	001a      	movs	r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	605a      	str	r2, [r3, #4]
}
 800105c:	46c0      	nop			@ (mov r8, r8)
 800105e:	46bd      	mov	sp, r7
 8001060:	b002      	add	sp, #8
 8001062:	bd80      	pop	{r7, pc}

08001064 <LL_ADC_DisableIT_EOS>:
  * @rmtoll IER      EOSIE          LL_ADC_DisableIT_EOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	2208      	movs	r2, #8
 8001072:	4393      	bics	r3, r2
 8001074:	001a      	movs	r2, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	605a      	str	r2, [r3, #4]
}
 800107a:	46c0      	nop			@ (mov r8, r8)
 800107c:	46bd      	mov	sp, r7
 800107e:	b002      	add	sp, #8
 8001080:	bd80      	pop	{r7, pc}
	...

08001084 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_TIM17
  *         @arg @ref LL_APB1_GRP2_PERIPH_ADC
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR2, Periphs);
 800108c:	4b07      	ldr	r3, [pc, #28]	@ (80010ac <LL_APB1_GRP2_EnableClock+0x28>)
 800108e:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8001090:	4b06      	ldr	r3, [pc, #24]	@ (80010ac <LL_APB1_GRP2_EnableClock+0x28>)
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	430a      	orrs	r2, r1
 8001096:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 8001098:	4b04      	ldr	r3, [pc, #16]	@ (80010ac <LL_APB1_GRP2_EnableClock+0x28>)
 800109a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800109c:	687a      	ldr	r2, [r7, #4]
 800109e:	4013      	ands	r3, r2
 80010a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010a2:	68fb      	ldr	r3, [r7, #12]
}
 80010a4:	46c0      	nop			@ (mov r8, r8)
 80010a6:	46bd      	mov	sp, r7
 80010a8:	b004      	add	sp, #16
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	40021000 	.word	0x40021000

080010b0 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOD
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 80010b8:	4b07      	ldr	r3, [pc, #28]	@ (80010d8 <LL_IOP_GRP1_EnableClock+0x28>)
 80010ba:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80010bc:	4b06      	ldr	r3, [pc, #24]	@ (80010d8 <LL_IOP_GRP1_EnableClock+0x28>)
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	430a      	orrs	r2, r1
 80010c2:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80010c4:	4b04      	ldr	r3, [pc, #16]	@ (80010d8 <LL_IOP_GRP1_EnableClock+0x28>)
 80010c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	4013      	ands	r3, r2
 80010cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010ce:	68fb      	ldr	r3, [r7, #12]
}
 80010d0:	46c0      	nop			@ (mov r8, r8)
 80010d2:	46bd      	mov	sp, r7
 80010d4:	b004      	add	sp, #16
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40021000 	.word	0x40021000

080010dc <LL_SYSTICK_IsActiveCounterFlag>:
  * @note   It can be used in timeout function on application side.
  * @rmtoll STK_CTRL     COUNTFLAG     LL_SYSTICK_IsActiveCounterFlag
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  return (((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk)) ? 1UL : 0UL);
 80010e0:	4b07      	ldr	r3, [pc, #28]	@ (8001100 <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	2380      	movs	r3, #128	@ 0x80
 80010e6:	025b      	lsls	r3, r3, #9
 80010e8:	401a      	ands	r2, r3
 80010ea:	2380      	movs	r3, #128	@ 0x80
 80010ec:	025b      	lsls	r3, r3, #9
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d101      	bne.n	80010f6 <LL_SYSTICK_IsActiveCounterFlag+0x1a>
 80010f2:	2301      	movs	r3, #1
 80010f4:	e000      	b.n	80010f8 <LL_SYSTICK_IsActiveCounterFlag+0x1c>
 80010f6:	2300      	movs	r3, #0
}
 80010f8:	0018      	movs	r0, r3
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	46c0      	nop			@ (mov r8, r8)
 8001100:	e000e010 	.word	0xe000e010

08001104 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_5 (*)
  * @note (*) Availability depends on devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_EN);
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	3b01      	subs	r3, #1
 8001116:	4a0a      	ldr	r2, [pc, #40]	@ (8001140 <LL_DMA_EnableChannel+0x3c>)
 8001118:	5cd3      	ldrb	r3, [r2, r3]
 800111a:	001a      	movs	r2, r3
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	18d3      	adds	r3, r2, r3
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	3b01      	subs	r3, #1
 8001126:	4906      	ldr	r1, [pc, #24]	@ (8001140 <LL_DMA_EnableChannel+0x3c>)
 8001128:	5ccb      	ldrb	r3, [r1, r3]
 800112a:	0019      	movs	r1, r3
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	18cb      	adds	r3, r1, r3
 8001130:	2101      	movs	r1, #1
 8001132:	430a      	orrs	r2, r1
 8001134:	601a      	str	r2, [r3, #0]
}
 8001136:	46c0      	nop			@ (mov r8, r8)
 8001138:	46bd      	mov	sp, r7
 800113a:	b004      	add	sp, #16
 800113c:	bd80      	pop	{r7, pc}
 800113e:	46c0      	nop			@ (mov r8, r8)
 8001140:	0800a9c0 	.word	0x0800a9c0

08001144 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR,
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	3b01      	subs	r3, #1
 8001158:	4a0b      	ldr	r2, [pc, #44]	@ (8001188 <LL_DMA_SetDataTransferDirection+0x44>)
 800115a:	5cd3      	ldrb	r3, [r2, r3]
 800115c:	001a      	movs	r2, r3
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	18d3      	adds	r3, r2, r3
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a09      	ldr	r2, [pc, #36]	@ (800118c <LL_DMA_SetDataTransferDirection+0x48>)
 8001166:	4013      	ands	r3, r2
 8001168:	0019      	movs	r1, r3
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	3b01      	subs	r3, #1
 800116e:	4a06      	ldr	r2, [pc, #24]	@ (8001188 <LL_DMA_SetDataTransferDirection+0x44>)
 8001170:	5cd3      	ldrb	r3, [r2, r3]
 8001172:	001a      	movs	r2, r3
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	18d3      	adds	r3, r2, r3
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	430a      	orrs	r2, r1
 800117c:	601a      	str	r2, [r3, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 800117e:	46c0      	nop			@ (mov r8, r8)
 8001180:	46bd      	mov	sp, r7
 8001182:	b006      	add	sp, #24
 8001184:	bd80      	pop	{r7, pc}
 8001186:	46c0      	nop			@ (mov r8, r8)
 8001188:	0800a9c0 	.word	0x0800a9c0
 800118c:	ffffbfef 	.word	0xffffbfef

08001190 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_CIRC,
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	4a0b      	ldr	r2, [pc, #44]	@ (80011d4 <LL_DMA_SetMode+0x44>)
 80011a6:	5cd3      	ldrb	r3, [r2, r3]
 80011a8:	001a      	movs	r2, r3
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	18d3      	adds	r3, r2, r3
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2220      	movs	r2, #32
 80011b2:	4393      	bics	r3, r2
 80011b4:	0019      	movs	r1, r3
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	3b01      	subs	r3, #1
 80011ba:	4a06      	ldr	r2, [pc, #24]	@ (80011d4 <LL_DMA_SetMode+0x44>)
 80011bc:	5cd3      	ldrb	r3, [r2, r3]
 80011be:	001a      	movs	r2, r3
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	18d3      	adds	r3, r2, r3
 80011c4:	687a      	ldr	r2, [r7, #4]
 80011c6:	430a      	orrs	r2, r1
 80011c8:	601a      	str	r2, [r3, #0]
             Mode);
}
 80011ca:	46c0      	nop			@ (mov r8, r8)
 80011cc:	46bd      	mov	sp, r7
 80011ce:	b006      	add	sp, #24
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	46c0      	nop			@ (mov r8, r8)
 80011d4:	0800a9c0 	.word	0x0800a9c0

080011d8 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_PINC,
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	3b01      	subs	r3, #1
 80011ec:	4a0b      	ldr	r2, [pc, #44]	@ (800121c <LL_DMA_SetPeriphIncMode+0x44>)
 80011ee:	5cd3      	ldrb	r3, [r2, r3]
 80011f0:	001a      	movs	r2, r3
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	18d3      	adds	r3, r2, r3
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2240      	movs	r2, #64	@ 0x40
 80011fa:	4393      	bics	r3, r2
 80011fc:	0019      	movs	r1, r3
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	3b01      	subs	r3, #1
 8001202:	4a06      	ldr	r2, [pc, #24]	@ (800121c <LL_DMA_SetPeriphIncMode+0x44>)
 8001204:	5cd3      	ldrb	r3, [r2, r3]
 8001206:	001a      	movs	r2, r3
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	18d3      	adds	r3, r2, r3
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	430a      	orrs	r2, r1
 8001210:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcIncMode);
}
 8001212:	46c0      	nop			@ (mov r8, r8)
 8001214:	46bd      	mov	sp, r7
 8001216:	b006      	add	sp, #24
 8001218:	bd80      	pop	{r7, pc}
 800121a:	46c0      	nop			@ (mov r8, r8)
 800121c:	0800a9c0 	.word	0x0800a9c0

08001220 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_MINC,
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	3b01      	subs	r3, #1
 8001234:	4a0b      	ldr	r2, [pc, #44]	@ (8001264 <LL_DMA_SetMemoryIncMode+0x44>)
 8001236:	5cd3      	ldrb	r3, [r2, r3]
 8001238:	001a      	movs	r2, r3
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	18d3      	adds	r3, r2, r3
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2280      	movs	r2, #128	@ 0x80
 8001242:	4393      	bics	r3, r2
 8001244:	0019      	movs	r1, r3
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	3b01      	subs	r3, #1
 800124a:	4a06      	ldr	r2, [pc, #24]	@ (8001264 <LL_DMA_SetMemoryIncMode+0x44>)
 800124c:	5cd3      	ldrb	r3, [r2, r3]
 800124e:	001a      	movs	r2, r3
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	18d3      	adds	r3, r2, r3
 8001254:	687a      	ldr	r2, [r7, #4]
 8001256:	430a      	orrs	r2, r1
 8001258:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstIncMode);
}
 800125a:	46c0      	nop			@ (mov r8, r8)
 800125c:	46bd      	mov	sp, r7
 800125e:	b006      	add	sp, #24
 8001260:	bd80      	pop	{r7, pc}
 8001262:	46c0      	nop			@ (mov r8, r8)
 8001264:	0800a9c0 	.word	0x0800a9c0

08001268 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_PSIZE,
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	3b01      	subs	r3, #1
 800127c:	4a0b      	ldr	r2, [pc, #44]	@ (80012ac <LL_DMA_SetPeriphSize+0x44>)
 800127e:	5cd3      	ldrb	r3, [r2, r3]
 8001280:	001a      	movs	r2, r3
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	18d3      	adds	r3, r2, r3
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a09      	ldr	r2, [pc, #36]	@ (80012b0 <LL_DMA_SetPeriphSize+0x48>)
 800128a:	4013      	ands	r3, r2
 800128c:	0019      	movs	r1, r3
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	3b01      	subs	r3, #1
 8001292:	4a06      	ldr	r2, [pc, #24]	@ (80012ac <LL_DMA_SetPeriphSize+0x44>)
 8001294:	5cd3      	ldrb	r3, [r2, r3]
 8001296:	001a      	movs	r2, r3
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	18d3      	adds	r3, r2, r3
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	430a      	orrs	r2, r1
 80012a0:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcDataSize);
}
 80012a2:	46c0      	nop			@ (mov r8, r8)
 80012a4:	46bd      	mov	sp, r7
 80012a6:	b006      	add	sp, #24
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	46c0      	nop			@ (mov r8, r8)
 80012ac:	0800a9c0 	.word	0x0800a9c0
 80012b0:	fffffcff 	.word	0xfffffcff

080012b4 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_MSIZE,
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	3b01      	subs	r3, #1
 80012c8:	4a0b      	ldr	r2, [pc, #44]	@ (80012f8 <LL_DMA_SetMemorySize+0x44>)
 80012ca:	5cd3      	ldrb	r3, [r2, r3]
 80012cc:	001a      	movs	r2, r3
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	18d3      	adds	r3, r2, r3
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a09      	ldr	r2, [pc, #36]	@ (80012fc <LL_DMA_SetMemorySize+0x48>)
 80012d6:	4013      	ands	r3, r2
 80012d8:	0019      	movs	r1, r3
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	3b01      	subs	r3, #1
 80012de:	4a06      	ldr	r2, [pc, #24]	@ (80012f8 <LL_DMA_SetMemorySize+0x44>)
 80012e0:	5cd3      	ldrb	r3, [r2, r3]
 80012e2:	001a      	movs	r2, r3
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	18d3      	adds	r3, r2, r3
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	430a      	orrs	r2, r1
 80012ec:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstDataSize);
}
 80012ee:	46c0      	nop			@ (mov r8, r8)
 80012f0:	46bd      	mov	sp, r7
 80012f2:	b006      	add	sp, #24
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	46c0      	nop			@ (mov r8, r8)
 80012f8:	0800a9c0 	.word	0x0800a9c0
 80012fc:	fffff3ff 	.word	0xfffff3ff

08001300 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_PL,
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	3b01      	subs	r3, #1
 8001314:	4a0b      	ldr	r2, [pc, #44]	@ (8001344 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8001316:	5cd3      	ldrb	r3, [r2, r3]
 8001318:	001a      	movs	r2, r3
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	18d3      	adds	r3, r2, r3
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a09      	ldr	r2, [pc, #36]	@ (8001348 <LL_DMA_SetChannelPriorityLevel+0x48>)
 8001322:	4013      	ands	r3, r2
 8001324:	0019      	movs	r1, r3
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	3b01      	subs	r3, #1
 800132a:	4a06      	ldr	r2, [pc, #24]	@ (8001344 <LL_DMA_SetChannelPriorityLevel+0x44>)
 800132c:	5cd3      	ldrb	r3, [r2, r3]
 800132e:	001a      	movs	r2, r3
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	18d3      	adds	r3, r2, r3
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	430a      	orrs	r2, r1
 8001338:	601a      	str	r2, [r3, #0]
             Priority);
}
 800133a:	46c0      	nop			@ (mov r8, r8)
 800133c:	46bd      	mov	sp, r7
 800133e:	b006      	add	sp, #24
 8001340:	bd80      	pop	{r7, pc}
 8001342:	46c0      	nop			@ (mov r8, r8)
 8001344:	0800a9c0 	.word	0x0800a9c0
 8001348:	ffffcfff 	.word	0xffffcfff

0800134c <LL_DMA_SetDataLength>:
  * @note (*) Availability depends on devices
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CNDTR,
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	3b01      	subs	r3, #1
 8001360:	4a0a      	ldr	r2, [pc, #40]	@ (800138c <LL_DMA_SetDataLength+0x40>)
 8001362:	5cd3      	ldrb	r3, [r2, r3]
 8001364:	001a      	movs	r2, r3
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	18d3      	adds	r3, r2, r3
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	0c1b      	lsrs	r3, r3, #16
 800136e:	0419      	lsls	r1, r3, #16
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	3b01      	subs	r3, #1
 8001374:	4a05      	ldr	r2, [pc, #20]	@ (800138c <LL_DMA_SetDataLength+0x40>)
 8001376:	5cd3      	ldrb	r3, [r2, r3]
 8001378:	001a      	movs	r2, r3
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	18d3      	adds	r3, r2, r3
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	430a      	orrs	r2, r1
 8001382:	605a      	str	r2, [r3, #4]
             DMA_CNDTR_NDT, NbData);
}
 8001384:	46c0      	nop			@ (mov r8, r8)
 8001386:	46bd      	mov	sp, r7
 8001388:	b006      	add	sp, #24
 800138a:	bd80      	pop	{r7, pc}
 800138c:	0800a9c0 	.word	0x0800a9c0

08001390 <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddress,
                                            uint32_t DstAddress, uint32_t Direction)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
 800139c:	603b      	str	r3, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	617b      	str	r3, [r7, #20]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 80013a2:	6a3b      	ldr	r3, [r7, #32]
 80013a4:	2b10      	cmp	r3, #16
 80013a6:	d112      	bne.n	80013ce <LL_DMA_ConfigAddresses+0x3e>
  {
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CMAR, SrcAddress);
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	3b01      	subs	r3, #1
 80013ac:	4a13      	ldr	r2, [pc, #76]	@ (80013fc <LL_DMA_ConfigAddresses+0x6c>)
 80013ae:	5cd3      	ldrb	r3, [r2, r3]
 80013b0:	001a      	movs	r2, r3
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	18d3      	adds	r3, r2, r3
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	60da      	str	r2, [r3, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CPAR, DstAddress);
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	3b01      	subs	r3, #1
 80013be:	4a0f      	ldr	r2, [pc, #60]	@ (80013fc <LL_DMA_ConfigAddresses+0x6c>)
 80013c0:	5cd3      	ldrb	r3, [r2, r3]
 80013c2:	001a      	movs	r2, r3
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	18d3      	adds	r3, r2, r3
 80013c8:	683a      	ldr	r2, [r7, #0]
 80013ca:	609a      	str	r2, [r3, #8]
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CPAR, SrcAddress);
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CMAR, DstAddress);
  }
}
 80013cc:	e011      	b.n	80013f2 <LL_DMA_ConfigAddresses+0x62>
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CPAR, SrcAddress);
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	3b01      	subs	r3, #1
 80013d2:	4a0a      	ldr	r2, [pc, #40]	@ (80013fc <LL_DMA_ConfigAddresses+0x6c>)
 80013d4:	5cd3      	ldrb	r3, [r2, r3]
 80013d6:	001a      	movs	r2, r3
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	18d3      	adds	r3, r2, r3
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	609a      	str	r2, [r3, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CMAR, DstAddress);
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	3b01      	subs	r3, #1
 80013e4:	4a05      	ldr	r2, [pc, #20]	@ (80013fc <LL_DMA_ConfigAddresses+0x6c>)
 80013e6:	5cd3      	ldrb	r3, [r2, r3]
 80013e8:	001a      	movs	r2, r3
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	18d3      	adds	r3, r2, r3
 80013ee:	683a      	ldr	r2, [r7, #0]
 80013f0:	60da      	str	r2, [r3, #12]
}
 80013f2:	46c0      	nop			@ (mov r8, r8)
 80013f4:	46bd      	mov	sp, r7
 80013f6:	b006      	add	sp, #24
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	46c0      	nop			@ (mov r8, r8)
 80013fc:	0800a9c0 	.word	0x0800a9c0

08001400 <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMAMUX_REQ_USART2_TX
  * @note (*) Availability depends on devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Request)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	607a      	str	r2, [r7, #4]
  (void)(DMAx);
  MODIFY_REG(((DMAMUX_Channel_TypeDef *)((uint32_t)DMAMUX1_Channel0 + (DMAMUX_CCR_SIZE * (Channel - 1UL))))->CCR,
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	4a0a      	ldr	r2, [pc, #40]	@ (8001438 <LL_DMA_SetPeriphRequest+0x38>)
 8001410:	4694      	mov	ip, r2
 8001412:	4463      	add	r3, ip
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	22ff      	movs	r2, #255	@ 0xff
 800141a:	4393      	bics	r3, r2
 800141c:	0019      	movs	r1, r3
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	4a05      	ldr	r2, [pc, #20]	@ (8001438 <LL_DMA_SetPeriphRequest+0x38>)
 8001422:	4694      	mov	ip, r2
 8001424:	4463      	add	r3, ip
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	430a      	orrs	r2, r1
 800142c:	601a      	str	r2, [r3, #0]
             DMAMUX_CxCR_DMAREQ_ID, Request);
}
 800142e:	46c0      	nop			@ (mov r8, r8)
 8001430:	46bd      	mov	sp, r7
 8001432:	b004      	add	sp, #16
 8001434:	bd80      	pop	{r7, pc}
 8001436:	46c0      	nop			@ (mov r8, r8)
 8001438:	100081ff 	.word	0x100081ff

0800143c <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_5 (*)
  * @note (*) Availability depends on devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_TCIE);
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	3b01      	subs	r3, #1
 800144e:	4a0a      	ldr	r2, [pc, #40]	@ (8001478 <LL_DMA_EnableIT_TC+0x3c>)
 8001450:	5cd3      	ldrb	r3, [r2, r3]
 8001452:	001a      	movs	r2, r3
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	18d3      	adds	r3, r2, r3
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	3b01      	subs	r3, #1
 800145e:	4906      	ldr	r1, [pc, #24]	@ (8001478 <LL_DMA_EnableIT_TC+0x3c>)
 8001460:	5ccb      	ldrb	r3, [r1, r3]
 8001462:	0019      	movs	r1, r3
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	18cb      	adds	r3, r1, r3
 8001468:	2102      	movs	r1, #2
 800146a:	430a      	orrs	r2, r1
 800146c:	601a      	str	r2, [r3, #0]
}
 800146e:	46c0      	nop			@ (mov r8, r8)
 8001470:	46bd      	mov	sp, r7
 8001472:	b004      	add	sp, #16
 8001474:	bd80      	pop	{r7, pc}
 8001476:	46c0      	nop			@ (mov r8, r8)
 8001478:	0800a9c0 	.word	0x0800a9c0

0800147c <LL_DMA_EnableIT_HT>:
  *         @arg @ref LL_DMA_CHANNEL_5 (*)
  * @note (*) Availability depends on devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_HTIE);
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	3b01      	subs	r3, #1
 800148e:	4a0a      	ldr	r2, [pc, #40]	@ (80014b8 <LL_DMA_EnableIT_HT+0x3c>)
 8001490:	5cd3      	ldrb	r3, [r2, r3]
 8001492:	001a      	movs	r2, r3
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	18d3      	adds	r3, r2, r3
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	3b01      	subs	r3, #1
 800149e:	4906      	ldr	r1, [pc, #24]	@ (80014b8 <LL_DMA_EnableIT_HT+0x3c>)
 80014a0:	5ccb      	ldrb	r3, [r1, r3]
 80014a2:	0019      	movs	r1, r3
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	18cb      	adds	r3, r1, r3
 80014a8:	2104      	movs	r1, #4
 80014aa:	430a      	orrs	r2, r1
 80014ac:	601a      	str	r2, [r3, #0]
}
 80014ae:	46c0      	nop			@ (mov r8, r8)
 80014b0:	46bd      	mov	sp, r7
 80014b2:	b004      	add	sp, #16
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	46c0      	nop			@ (mov r8, r8)
 80014b8:	0800a9c0 	.word	0x0800a9c0

080014bc <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_5 (*)
  * @note (*) Availability depends on devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_TEIE);
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	3b01      	subs	r3, #1
 80014ce:	4a0a      	ldr	r2, [pc, #40]	@ (80014f8 <LL_DMA_EnableIT_TE+0x3c>)
 80014d0:	5cd3      	ldrb	r3, [r2, r3]
 80014d2:	001a      	movs	r2, r3
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	18d3      	adds	r3, r2, r3
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	3b01      	subs	r3, #1
 80014de:	4906      	ldr	r1, [pc, #24]	@ (80014f8 <LL_DMA_EnableIT_TE+0x3c>)
 80014e0:	5ccb      	ldrb	r3, [r1, r3]
 80014e2:	0019      	movs	r1, r3
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	18cb      	adds	r3, r1, r3
 80014e8:	2108      	movs	r1, #8
 80014ea:	430a      	orrs	r2, r1
 80014ec:	601a      	str	r2, [r3, #0]
}
 80014ee:	46c0      	nop			@ (mov r8, r8)
 80014f0:	46bd      	mov	sp, r7
 80014f2:	b004      	add	sp, #16
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	46c0      	nop			@ (mov r8, r8)
 80014f8:	0800a9c0 	.word	0x0800a9c0

080014fc <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
	// Refresh the Encoder Speed (pulses / 10 minutes)
	holding_register_database[ENCODER_SPEED] = (int16_t)((((uint32_t)encoder_pulse)*600UL*10000UL) / (htim14.Init.Period + 1UL));
 8001504:	4b0b      	ldr	r3, [pc, #44]	@ (8001534 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	001a      	movs	r2, r3
 800150a:	4b0b      	ldr	r3, [pc, #44]	@ (8001538 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800150c:	435a      	muls	r2, r3
 800150e:	4b0b      	ldr	r3, [pc, #44]	@ (800153c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	3301      	adds	r3, #1
 8001514:	0019      	movs	r1, r3
 8001516:	0010      	movs	r0, r2
 8001518:	f7fe fdf6 	bl	8000108 <__udivsi3>
 800151c:	0003      	movs	r3, r0
 800151e:	b299      	uxth	r1, r3
 8001520:	4b07      	ldr	r3, [pc, #28]	@ (8001540 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001522:	227c      	movs	r2, #124	@ 0x7c
 8001524:	5299      	strh	r1, [r3, r2]
	encoder_pulse = 0;
 8001526:	4b03      	ldr	r3, [pc, #12]	@ (8001534 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
}
 800152c:	46c0      	nop			@ (mov r8, r8)
 800152e:	46bd      	mov	sp, r7
 8001530:	b002      	add	sp, #8
 8001532:	bd80      	pop	{r7, pc}
 8001534:	2000068c 	.word	0x2000068c
 8001538:	005b8d80 	.word	0x005b8d80
 800153c:	200004a8 	.word	0x200004a8
 8001540:	20000010 	.word	0x20000010

08001544 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8001544:	b5b0      	push	{r4, r5, r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	0002      	movs	r2, r0
 800154c:	1dbb      	adds	r3, r7, #6
 800154e:	801a      	strh	r2, [r3, #0]
	GPIO_PinState pulse_b = HAL_GPIO_ReadPin(Encoder_Pulse_B_GPIO_Port, Encoder_Pulse_B_Pin);
 8001550:	250f      	movs	r5, #15
 8001552:	197c      	adds	r4, r7, r5
 8001554:	2380      	movs	r3, #128	@ 0x80
 8001556:	01db      	lsls	r3, r3, #7
 8001558:	4a0c      	ldr	r2, [pc, #48]	@ (800158c <HAL_GPIO_EXTI_Rising_Callback+0x48>)
 800155a:	0019      	movs	r1, r3
 800155c:	0010      	movs	r0, r2
 800155e:	f003 faf1 	bl	8004b44 <HAL_GPIO_ReadPin>
 8001562:	0003      	movs	r3, r0
 8001564:	7023      	strb	r3, [r4, #0]
	if(pulse_b == GPIO_PIN_SET)
 8001566:	197b      	adds	r3, r7, r5
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d105      	bne.n	800157a <HAL_GPIO_EXTI_Rising_Callback+0x36>
	{
		encoder_pulse++;
 800156e:	4b08      	ldr	r3, [pc, #32]	@ (8001590 <HAL_GPIO_EXTI_Rising_Callback+0x4c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	1c5a      	adds	r2, r3, #1
 8001574:	4b06      	ldr	r3, [pc, #24]	@ (8001590 <HAL_GPIO_EXTI_Rising_Callback+0x4c>)
 8001576:	601a      	str	r2, [r3, #0]
	}
	else
	{
		encoder_pulse--;
	}
}
 8001578:	e004      	b.n	8001584 <HAL_GPIO_EXTI_Rising_Callback+0x40>
		encoder_pulse--;
 800157a:	4b05      	ldr	r3, [pc, #20]	@ (8001590 <HAL_GPIO_EXTI_Rising_Callback+0x4c>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	1e5a      	subs	r2, r3, #1
 8001580:	4b03      	ldr	r3, [pc, #12]	@ (8001590 <HAL_GPIO_EXTI_Rising_Callback+0x4c>)
 8001582:	601a      	str	r2, [r3, #0]
}
 8001584:	46c0      	nop			@ (mov r8, r8)
 8001586:	46bd      	mov	sp, r7
 8001588:	b004      	add	sp, #16
 800158a:	bdb0      	pop	{r4, r5, r7, pc}
 800158c:	50000400 	.word	0x50000400
 8001590:	2000068c 	.word	0x2000068c

08001594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001594:	b590      	push	{r4, r7, lr}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	int8_t modbus_status = HAL_OK;
 800159a:	1dfb      	adds	r3, r7, #7
 800159c:	2200      	movs	r2, #0
 800159e:	701a      	strb	r2, [r3, #0]
	int8_t i2c_status = HAL_OK;
 80015a0:	1cbb      	adds	r3, r7, #2
 80015a2:	2200      	movs	r2, #0
 80015a4:	701a      	strb	r2, [r3, #0]
	int8_t adc_status = HAL_OK;
 80015a6:	1c7b      	adds	r3, r7, #1
 80015a8:	2200      	movs	r2, #0
 80015aa:	701a      	strb	r2, [r3, #0]
	uint8_t modbus_tx_len = 0;
 80015ac:	003b      	movs	r3, r7
 80015ae:	2200      	movs	r2, #0
 80015b0:	701a      	strb	r2, [r3, #0]
	uint16_t encoder_refresh = 10000;
 80015b2:	1d3b      	adds	r3, r7, #4
 80015b4:	4ac5      	ldr	r2, [pc, #788]	@ (80018cc <main+0x338>)
 80015b6:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015b8:	f002 fb0b 	bl	8003bd2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015bc:	f000 fa2a 	bl	8001a14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015c0:	f000 fdfe 	bl	80021c0 <MX_GPIO_Init>
  MX_DMA_Init();
 80015c4:	f000 fdd0 	bl	8002168 <MX_DMA_Init>
  MX_ADC1_Init();
 80015c8:	f000 fa62 	bl	8001a90 <MX_ADC1_Init>
  MX_I2C1_Init();
 80015cc:	f000 fc2c 	bl	8001e28 <MX_I2C1_Init>
  MX_SPI1_Init();
 80015d0:	f000 fc6a 	bl	8001ea8 <MX_SPI1_Init>
  MX_TIM1_Init();
 80015d4:	f000 fca6 	bl	8001f24 <MX_TIM1_Init>
  MX_TIM14_Init();
 80015d8:	f000 fd4e 	bl	8002078 <MX_TIM14_Init>
  MX_USART1_UART_Init();
 80015dc:	f000 fd74 	bl	80020c8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // Initialize the pin mapping table
  pin_map[0] = Actuator_A_EN_Pin;
 80015e0:	4bbb      	ldr	r3, [pc, #748]	@ (80018d0 <main+0x33c>)
 80015e2:	2240      	movs	r2, #64	@ 0x40
 80015e4:	801a      	strh	r2, [r3, #0]
  pin_map[1] = Actuator_B_EN_Pin;
 80015e6:	4bba      	ldr	r3, [pc, #744]	@ (80018d0 <main+0x33c>)
 80015e8:	2280      	movs	r2, #128	@ 0x80
 80015ea:	805a      	strh	r2, [r3, #2]
  pin_map[2] = Actuator_C_EN_Pin;
 80015ec:	4bb8      	ldr	r3, [pc, #736]	@ (80018d0 <main+0x33c>)
 80015ee:	2201      	movs	r2, #1
 80015f0:	809a      	strh	r2, [r3, #4]

  port_map[0] = Actuator_A_EN_GPIO_Port;
 80015f2:	4bb8      	ldr	r3, [pc, #736]	@ (80018d4 <main+0x340>)
 80015f4:	4ab8      	ldr	r2, [pc, #736]	@ (80018d8 <main+0x344>)
 80015f6:	601a      	str	r2, [r3, #0]
  port_map[1] = Actuator_B_EN_GPIO_Port;
 80015f8:	4bb6      	ldr	r3, [pc, #728]	@ (80018d4 <main+0x340>)
 80015fa:	4ab7      	ldr	r2, [pc, #732]	@ (80018d8 <main+0x344>)
 80015fc:	605a      	str	r2, [r3, #4]
  port_map[2] = Actuator_C_EN_GPIO_Port;
 80015fe:	4bb5      	ldr	r3, [pc, #724]	@ (80018d4 <main+0x340>)
 8001600:	4ab6      	ldr	r2, [pc, #728]	@ (80018dc <main+0x348>)
 8001602:	609a      	str	r2, [r3, #8]

  // Initialize the PID constraints to defaults
  pid_constraints.Kp = 1;              // Proportional gain constant
 8001604:	4bb6      	ldr	r3, [pc, #728]	@ (80018e0 <main+0x34c>)
 8001606:	22fe      	movs	r2, #254	@ 0xfe
 8001608:	0592      	lsls	r2, r2, #22
 800160a:	601a      	str	r2, [r3, #0]
  pid_constraints.Ki = 0.1;            // Integral gain constant
 800160c:	4bb4      	ldr	r3, [pc, #720]	@ (80018e0 <main+0x34c>)
 800160e:	4ab5      	ldr	r2, [pc, #724]	@ (80018e4 <main+0x350>)
 8001610:	605a      	str	r2, [r3, #4]
  pid_constraints.Kd = 5;              // Derivative gain constant
 8001612:	4bb3      	ldr	r3, [pc, #716]	@ (80018e0 <main+0x34c>)
 8001614:	4ab4      	ldr	r2, [pc, #720]	@ (80018e8 <main+0x354>)
 8001616:	609a      	str	r2, [r3, #8]
  pid_constraints.Kaw = 0.1;           // Anti-windup gain constant
 8001618:	4bb1      	ldr	r3, [pc, #708]	@ (80018e0 <main+0x34c>)
 800161a:	4ab2      	ldr	r2, [pc, #712]	@ (80018e4 <main+0x350>)
 800161c:	60da      	str	r2, [r3, #12]
  pid_constraints.T_C = 1;             // Time constant for derivative filtering
 800161e:	4bb0      	ldr	r3, [pc, #704]	@ (80018e0 <main+0x34c>)
 8001620:	22fe      	movs	r2, #254	@ 0xfe
 8001622:	0592      	lsls	r2, r2, #22
 8001624:	611a      	str	r2, [r3, #16]
  pid_constraints.T = 100;             // Time step
 8001626:	4bae      	ldr	r3, [pc, #696]	@ (80018e0 <main+0x34c>)
 8001628:	4ab0      	ldr	r2, [pc, #704]	@ (80018ec <main+0x358>)
 800162a:	615a      	str	r2, [r3, #20]
  pid_constraints.max = 100;           // Max command
 800162c:	4bac      	ldr	r3, [pc, #688]	@ (80018e0 <main+0x34c>)
 800162e:	4aaf      	ldr	r2, [pc, #700]	@ (80018ec <main+0x358>)
 8001630:	619a      	str	r2, [r3, #24]
  pid_constraints.min = 15;            // Min command
 8001632:	4bab      	ldr	r3, [pc, #684]	@ (80018e0 <main+0x34c>)
 8001634:	4aae      	ldr	r2, [pc, #696]	@ (80018f0 <main+0x35c>)
 8001636:	61da      	str	r2, [r3, #28]
  pid_constraints.max_rate = 40;       // Max rate of change of the command
 8001638:	4ba9      	ldr	r3, [pc, #676]	@ (80018e0 <main+0x34c>)
 800163a:	4aae      	ldr	r2, [pc, #696]	@ (80018f4 <main+0x360>)
 800163c:	621a      	str	r2, [r3, #32]
  pid_constraints.integral = 0;        // Integral term
 800163e:	4ba8      	ldr	r3, [pc, #672]	@ (80018e0 <main+0x34c>)
 8001640:	2200      	movs	r2, #0
 8001642:	625a      	str	r2, [r3, #36]	@ 0x24
  pid_constraints.err_prev = 0;        // Previous error
 8001644:	4ba6      	ldr	r3, [pc, #664]	@ (80018e0 <main+0x34c>)
 8001646:	2200      	movs	r2, #0
 8001648:	629a      	str	r2, [r3, #40]	@ 0x28
  pid_constraints.deriv_prev = 0;      // Previous derivative
 800164a:	4ba5      	ldr	r3, [pc, #660]	@ (80018e0 <main+0x34c>)
 800164c:	2200      	movs	r2, #0
 800164e:	62da      	str	r2, [r3, #44]	@ 0x2c
  pid_constraints.command_sat_prev = 0;// Previous saturated command
 8001650:	4ba3      	ldr	r3, [pc, #652]	@ (80018e0 <main+0x34c>)
 8001652:	2200      	movs	r2, #0
 8001654:	631a      	str	r2, [r3, #48]	@ 0x30
  pid_constraints.command_prev = 0;    // Previous command
 8001656:	4ba2      	ldr	r3, [pc, #648]	@ (80018e0 <main+0x34c>)
 8001658:	2200      	movs	r2, #0
 800165a:	635a      	str	r2, [r3, #52]	@ 0x34

  if(modbus_set_rx() != HAL_OK)
 800165c:	f001 faa4 	bl	8002ba8 <modbus_set_rx>
 8001660:	1e03      	subs	r3, r0, #0
 8001662:	d001      	beq.n	8001668 <main+0xd4>
  {
	  Error_Handler();
 8001664:	f000 fe86 	bl	8002374 <Error_Handler>
  }

  /* Perform ADC activation procedure to make it ready to convert. */
  ADC_Activate();
 8001668:	f001 fd1e 	bl	80030a8 <ADC_Activate>
  if ((LL_ADC_IsEnabled(ADC1) == 1)               &&
 800166c:	4ba2      	ldr	r3, [pc, #648]	@ (80018f8 <main+0x364>)
 800166e:	0018      	movs	r0, r3
 8001670:	f7ff fc76 	bl	8000f60 <LL_ADC_IsEnabled>
 8001674:	0003      	movs	r3, r0
 8001676:	2b01      	cmp	r3, #1
 8001678:	d10f      	bne.n	800169a <main+0x106>
	  (LL_ADC_IsDisableOngoing(ADC1) == 0)        &&
 800167a:	4b9f      	ldr	r3, [pc, #636]	@ (80018f8 <main+0x364>)
 800167c:	0018      	movs	r0, r3
 800167e:	f7ff fc80 	bl	8000f82 <LL_ADC_IsDisableOngoing>
 8001682:	1e03      	subs	r3, r0, #0
  if ((LL_ADC_IsEnabled(ADC1) == 1)               &&
 8001684:	d109      	bne.n	800169a <main+0x106>
	  (LL_ADC_REG_IsConversionOngoing(ADC1) == 0))
 8001686:	4b9c      	ldr	r3, [pc, #624]	@ (80018f8 <main+0x364>)
 8001688:	0018      	movs	r0, r3
 800168a:	f7ff fc9d 	bl	8000fc8 <LL_ADC_REG_IsConversionOngoing>
 800168e:	1e03      	subs	r3, r0, #0
	  (LL_ADC_IsDisableOngoing(ADC1) == 0)        &&
 8001690:	d103      	bne.n	800169a <main+0x106>
  {
	  LL_ADC_REG_StartConversion(ADC1);
 8001692:	4b99      	ldr	r3, [pc, #612]	@ (80018f8 <main+0x364>)
 8001694:	0018      	movs	r0, r3
 8001696:	f7ff fc85 	bl	8000fa4 <LL_ADC_REG_StartConversion>
  }

  bno055_init();
 800169a:	f7fe ff07 	bl	80004ac <bno055_init>
  	actuate_complete[0] = 0;
  	actuate_complete[1] = 0;
  	actuate_complete[2] = 0;
#endif

  	HAL_TIM_Base_Start_IT(&htim14);
 800169e:	4b97      	ldr	r3, [pc, #604]	@ (80018fc <main+0x368>)
 80016a0:	0018      	movs	r0, r3
 80016a2:	f006 fabf 	bl	8007c24 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */


  while (1)
  {
	  if(modbus_rx())
 80016a6:	f000 feed 	bl	8002484 <modbus_rx>
 80016aa:	1e03      	subs	r3, r0, #0
 80016ac:	d100      	bne.n	80016b0 <main+0x11c>
 80016ae:	e079      	b.n	80017a4 <main+0x210>
	  {
		  if(get_rx_buffer(0) == holding_register_database[MODBUS_ID]) // Check Slave ID
 80016b0:	2000      	movs	r0, #0
 80016b2:	f001 fb91 	bl	8002dd8 <get_rx_buffer>
 80016b6:	0003      	movs	r3, r0
 80016b8:	001a      	movs	r2, r3
 80016ba:	4b91      	ldr	r3, [pc, #580]	@ (8001900 <main+0x36c>)
 80016bc:	881b      	ldrh	r3, [r3, #0]
 80016be:	429a      	cmp	r2, r3
 80016c0:	d133      	bne.n	800172a <main+0x196>
		  {
			  switch(get_rx_buffer(1))
 80016c2:	2001      	movs	r0, #1
 80016c4:	f001 fb88 	bl	8002dd8 <get_rx_buffer>
 80016c8:	0003      	movs	r3, r0
 80016ca:	2b03      	cmp	r3, #3
 80016cc:	d002      	beq.n	80016d4 <main+0x140>
 80016ce:	2b10      	cmp	r3, #16
 80016d0:	d008      	beq.n	80016e4 <main+0x150>
 80016d2:	e00f      	b.n	80016f4 <main+0x160>
			  {
				  case 0x03:
				  {
					  // Return holding registers
					  modbus_status = return_holding_registers(&modbus_tx_len);
 80016d4:	1dfc      	adds	r4, r7, #7
 80016d6:	003b      	movs	r3, r7
 80016d8:	0018      	movs	r0, r3
 80016da:	f000 fee5 	bl	80024a8 <return_holding_registers>
 80016de:	0003      	movs	r3, r0
 80016e0:	7023      	strb	r3, [r4, #0]
					  break;
 80016e2:	e00e      	b.n	8001702 <main+0x16e>
				  }
				  case 0x10:
				  {
					  // Write holding registers
					  modbus_status = edit_multiple_registers(&modbus_tx_len);
 80016e4:	1dfc      	adds	r4, r7, #7
 80016e6:	003b      	movs	r3, r7
 80016e8:	0018      	movs	r0, r3
 80016ea:	f000 ff89 	bl	8002600 <edit_multiple_registers>
 80016ee:	0003      	movs	r3, r0
 80016f0:	7023      	strb	r3, [r4, #0]
					  break;
 80016f2:	e006      	b.n	8001702 <main+0x16e>
				  }
				  default:
				  {
					  modbus_status = modbus_exception(MB_ILLEGAL_FUNCTION);
 80016f4:	1dfc      	adds	r4, r7, #7
 80016f6:	2004      	movs	r0, #4
 80016f8:	f001 f884 	bl	8002804 <modbus_exception>
 80016fc:	0003      	movs	r3, r0
 80016fe:	7023      	strb	r3, [r4, #0]
					  break;
 8001700:	46c0      	nop			@ (mov r8, r8)
				  }
			  }
			  if(modbus_status != 0)
 8001702:	1dfb      	adds	r3, r7, #7
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	b25b      	sxtb	r3, r3
 8001708:	2b00      	cmp	r3, #0
 800170a:	d04b      	beq.n	80017a4 <main+0x210>
			  {
				  holding_register_database[MB_ERRORS] |= 1U << ((modbus_status) + (MB_FATAL_ERROR - RANGE_ERROR));
 800170c:	4b7c      	ldr	r3, [pc, #496]	@ (8001900 <main+0x36c>)
 800170e:	891a      	ldrh	r2, [r3, #8]
 8001710:	1dfb      	adds	r3, r7, #7
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	b25b      	sxtb	r3, r3
 8001716:	3307      	adds	r3, #7
 8001718:	2101      	movs	r1, #1
 800171a:	4099      	lsls	r1, r3
 800171c:	000b      	movs	r3, r1
 800171e:	b29b      	uxth	r3, r3
 8001720:	4313      	orrs	r3, r2
 8001722:	b29a      	uxth	r2, r3
 8001724:	4b76      	ldr	r3, [pc, #472]	@ (8001900 <main+0x36c>)
 8001726:	811a      	strh	r2, [r3, #8]
 8001728:	e03c      	b.n	80017a4 <main+0x210>
			  }
		  }
		  // Special case where you retrieve the modbus ID
		  else if((get_rx_buffer(0) == 0xFF) && // modbus_id = 0xFF = 255
 800172a:	2000      	movs	r0, #0
 800172c:	f001 fb54 	bl	8002dd8 <get_rx_buffer>
 8001730:	0003      	movs	r3, r0
 8001732:	2bff      	cmp	r3, #255	@ 0xff
 8001734:	d136      	bne.n	80017a4 <main+0x210>
			(get_rx_buffer(1) == 0x03) && // Function code = read_holding_registers
 8001736:	2001      	movs	r0, #1
 8001738:	f001 fb4e 	bl	8002dd8 <get_rx_buffer>
 800173c:	0003      	movs	r3, r0
		  else if((get_rx_buffer(0) == 0xFF) && // modbus_id = 0xFF = 255
 800173e:	2b03      	cmp	r3, #3
 8001740:	d130      	bne.n	80017a4 <main+0x210>
			(((get_rx_buffer(2) << 8) | get_rx_buffer(3)) == 0x00) && // Address to read = 0
 8001742:	2002      	movs	r0, #2
 8001744:	f001 fb48 	bl	8002dd8 <get_rx_buffer>
 8001748:	0003      	movs	r3, r0
 800174a:	021c      	lsls	r4, r3, #8
 800174c:	2003      	movs	r0, #3
 800174e:	f001 fb43 	bl	8002dd8 <get_rx_buffer>
 8001752:	0003      	movs	r3, r0
 8001754:	4323      	orrs	r3, r4
			(get_rx_buffer(1) == 0x03) && // Function code = read_holding_registers
 8001756:	d125      	bne.n	80017a4 <main+0x210>
			(((get_rx_buffer(4) << 8) | get_rx_buffer(5)) == 1)) // # of registers to read = 1
 8001758:	2004      	movs	r0, #4
 800175a:	f001 fb3d 	bl	8002dd8 <get_rx_buffer>
 800175e:	0003      	movs	r3, r0
 8001760:	021c      	lsls	r4, r3, #8
 8001762:	2005      	movs	r0, #5
 8001764:	f001 fb38 	bl	8002dd8 <get_rx_buffer>
 8001768:	0003      	movs	r3, r0
 800176a:	4323      	orrs	r3, r4
			(((get_rx_buffer(2) << 8) | get_rx_buffer(3)) == 0x00) && // Address to read = 0
 800176c:	2b01      	cmp	r3, #1
 800176e:	d119      	bne.n	80017a4 <main+0x210>
		  {

			  modbus_status = return_holding_registers(&modbus_tx_len);
 8001770:	1dfc      	adds	r4, r7, #7
 8001772:	003b      	movs	r3, r7
 8001774:	0018      	movs	r0, r3
 8001776:	f000 fe97 	bl	80024a8 <return_holding_registers>
 800177a:	0003      	movs	r3, r0
 800177c:	7023      	strb	r3, [r4, #0]
			  if(modbus_status != 0)
 800177e:	1dfb      	adds	r3, r7, #7
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	b25b      	sxtb	r3, r3
 8001784:	2b00      	cmp	r3, #0
 8001786:	d00d      	beq.n	80017a4 <main+0x210>
			  {
				  holding_register_database[MB_ERRORS] |= 1U << ((modbus_status) + (MB_FATAL_ERROR - RANGE_ERROR));
 8001788:	4b5d      	ldr	r3, [pc, #372]	@ (8001900 <main+0x36c>)
 800178a:	891a      	ldrh	r2, [r3, #8]
 800178c:	1dfb      	adds	r3, r7, #7
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	b25b      	sxtb	r3, r3
 8001792:	3307      	adds	r3, #7
 8001794:	2101      	movs	r1, #1
 8001796:	4099      	lsls	r1, r3
 8001798:	000b      	movs	r3, r1
 800179a:	b29b      	uxth	r3, r3
 800179c:	4313      	orrs	r3, r2
 800179e:	b29a      	uxth	r2, r3
 80017a0:	4b57      	ldr	r3, [pc, #348]	@ (8001900 <main+0x36c>)
 80017a2:	811a      	strh	r2, [r3, #8]
			  }
		  }
	  }
	  modbus_status = monitor_modbus();
 80017a4:	1dfc      	adds	r4, r7, #7
 80017a6:	f001 fa23 	bl	8002bf0 <monitor_modbus>
 80017aa:	0003      	movs	r3, r0
 80017ac:	7023      	strb	r3, [r4, #0]
	  if(modbus_status != HAL_OK && modbus_status != HAL_BUSY)
 80017ae:	1dfb      	adds	r3, r7, #7
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	b25b      	sxtb	r3, r3
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d100      	bne.n	80017ba <main+0x226>
 80017b8:	e081      	b.n	80018be <main+0x32a>
 80017ba:	1dfb      	adds	r3, r7, #7
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	b25b      	sxtb	r3, r3
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d100      	bne.n	80017c6 <main+0x232>
 80017c4:	e07b      	b.n	80018be <main+0x32a>
	  {
		  switch(modbus_status)
 80017c6:	1dfb      	adds	r3, r7, #7
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	b25b      	sxtb	r3, r3
 80017cc:	2b15      	cmp	r3, #21
 80017ce:	d058      	beq.n	8001882 <main+0x2ee>
 80017d0:	dd00      	ble.n	80017d4 <main+0x240>
 80017d2:	e098      	b.n	8001906 <main+0x372>
 80017d4:	2b14      	cmp	r3, #20
 80017d6:	d036      	beq.n	8001846 <main+0x2b2>
 80017d8:	dd00      	ble.n	80017dc <main+0x248>
 80017da:	e094      	b.n	8001906 <main+0x372>
 80017dc:	2b12      	cmp	r3, #18
 80017de:	d000      	beq.n	80017e2 <main+0x24e>
 80017e0:	e06f      	b.n	80018c2 <main+0x32e>
		  {
			  case MB_TX_TIMEOUT:
			  {
				  for(uint8_t i = 0; i < holding_register_database[MB_TRANSMIT_RETRIES]; i++)
 80017e2:	1cfb      	adds	r3, r7, #3
 80017e4:	2200      	movs	r2, #0
 80017e6:	701a      	strb	r2, [r3, #0]
 80017e8:	e025      	b.n	8001836 <main+0x2a2>
				  {
					  modbus_status = modbus_send(modbus_tx_len);
 80017ea:	003b      	movs	r3, r7
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	1dfc      	adds	r4, r7, #7
 80017f0:	0018      	movs	r0, r3
 80017f2:	f001 f915 	bl	8002a20 <modbus_send>
 80017f6:	0003      	movs	r3, r0
 80017f8:	7023      	strb	r3, [r4, #0]
					  while(monitor_modbus() == HAL_BUSY);
 80017fa:	46c0      	nop			@ (mov r8, r8)
 80017fc:	f001 f9f8 	bl	8002bf0 <monitor_modbus>
 8001800:	0003      	movs	r3, r0
 8001802:	2b02      	cmp	r3, #2
 8001804:	d0fa      	beq.n	80017fc <main+0x268>
					  if(modbus_status != HAL_OK)
 8001806:	1dfb      	adds	r3, r7, #7
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	b25b      	sxtb	r3, r3
 800180c:	2b00      	cmp	r3, #0
 800180e:	d00d      	beq.n	800182c <main+0x298>
					  {
						  holding_register_database[MB_ERRORS] |= 1U << ((modbus_status) + (MB_FATAL_ERROR - RANGE_ERROR));
 8001810:	4b3b      	ldr	r3, [pc, #236]	@ (8001900 <main+0x36c>)
 8001812:	891a      	ldrh	r2, [r3, #8]
 8001814:	1dfb      	adds	r3, r7, #7
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	b25b      	sxtb	r3, r3
 800181a:	3307      	adds	r3, #7
 800181c:	2101      	movs	r1, #1
 800181e:	4099      	lsls	r1, r3
 8001820:	000b      	movs	r3, r1
 8001822:	b29b      	uxth	r3, r3
 8001824:	4313      	orrs	r3, r2
 8001826:	b29a      	uxth	r2, r3
 8001828:	4b35      	ldr	r3, [pc, #212]	@ (8001900 <main+0x36c>)
 800182a:	811a      	strh	r2, [r3, #8]
				  for(uint8_t i = 0; i < holding_register_database[MB_TRANSMIT_RETRIES]; i++)
 800182c:	1cfb      	adds	r3, r7, #3
 800182e:	781a      	ldrb	r2, [r3, #0]
 8001830:	1cfb      	adds	r3, r7, #3
 8001832:	3201      	adds	r2, #1
 8001834:	701a      	strb	r2, [r3, #0]
 8001836:	1cfb      	adds	r3, r7, #3
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	b29a      	uxth	r2, r3
 800183c:	4b30      	ldr	r3, [pc, #192]	@ (8001900 <main+0x36c>)
 800183e:	88db      	ldrh	r3, [r3, #6]
 8001840:	429a      	cmp	r2, r3
 8001842:	d3d2      	bcc.n	80017ea <main+0x256>
					  }
				  }
				  break;
 8001844:	e05f      	b.n	8001906 <main+0x372>
				  // Error only relates to Modbus Master Nodes
				  break;
			  }
			  case MB_UART_ERROR:
			  {
				  modbus_status = modbus_set_rx();
 8001846:	1dfc      	adds	r4, r7, #7
 8001848:	f001 f9ae 	bl	8002ba8 <modbus_set_rx>
 800184c:	0003      	movs	r3, r0
 800184e:	7023      	strb	r3, [r4, #0]
				  if(modbus_status != 0)
 8001850:	1dfb      	adds	r3, r7, #7
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	b25b      	sxtb	r3, r3
 8001856:	2b00      	cmp	r3, #0
 8001858:	d035      	beq.n	80018c6 <main+0x332>
				  {
					  holding_register_database[MB_ERRORS] |= 1U << ((modbus_status) + (MB_FATAL_ERROR - RANGE_ERROR));
 800185a:	4b29      	ldr	r3, [pc, #164]	@ (8001900 <main+0x36c>)
 800185c:	891a      	ldrh	r2, [r3, #8]
 800185e:	1dfb      	adds	r3, r7, #7
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	b25b      	sxtb	r3, r3
 8001864:	3307      	adds	r3, #7
 8001866:	2101      	movs	r1, #1
 8001868:	4099      	lsls	r1, r3
 800186a:	000b      	movs	r3, r1
 800186c:	b29b      	uxth	r3, r3
 800186e:	4313      	orrs	r3, r2
 8001870:	b29a      	uxth	r2, r3
 8001872:	4b23      	ldr	r3, [pc, #140]	@ (8001900 <main+0x36c>)
 8001874:	811a      	strh	r2, [r3, #8]
				  }
				  break;
 8001876:	e026      	b.n	80018c6 <main+0x332>
			  }
			  case MB_FATAL_ERROR:
			  {
				  while(modbus_status != HAL_OK)
				  {
					  modbus_status = modbus_reset();
 8001878:	1dfc      	adds	r4, r7, #7
 800187a:	f001 f927 	bl	8002acc <modbus_reset>
 800187e:	0003      	movs	r3, r0
 8001880:	7023      	strb	r3, [r4, #0]
				  while(modbus_status != HAL_OK)
 8001882:	1dfb      	adds	r3, r7, #7
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	b25b      	sxtb	r3, r3
 8001888:	2b00      	cmp	r3, #0
 800188a:	d1f5      	bne.n	8001878 <main+0x2e4>
				  }
				  modbus_status = modbus_set_rx();
 800188c:	1dfc      	adds	r4, r7, #7
 800188e:	f001 f98b 	bl	8002ba8 <modbus_set_rx>
 8001892:	0003      	movs	r3, r0
 8001894:	7023      	strb	r3, [r4, #0]
				  if(modbus_status != 0)
 8001896:	1dfb      	adds	r3, r7, #7
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	b25b      	sxtb	r3, r3
 800189c:	2b00      	cmp	r3, #0
 800189e:	d031      	beq.n	8001904 <main+0x370>
				  {
					  holding_register_database[MB_ERRORS] |= 1U << ((modbus_status) + (MB_FATAL_ERROR - RANGE_ERROR));
 80018a0:	4b17      	ldr	r3, [pc, #92]	@ (8001900 <main+0x36c>)
 80018a2:	891a      	ldrh	r2, [r3, #8]
 80018a4:	1dfb      	adds	r3, r7, #7
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	b25b      	sxtb	r3, r3
 80018aa:	3307      	adds	r3, #7
 80018ac:	2101      	movs	r1, #1
 80018ae:	4099      	lsls	r1, r3
 80018b0:	000b      	movs	r3, r1
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	4313      	orrs	r3, r2
 80018b6:	b29a      	uxth	r2, r3
 80018b8:	4b11      	ldr	r3, [pc, #68]	@ (8001900 <main+0x36c>)
 80018ba:	811a      	strh	r2, [r3, #8]
				  }
				  break;
 80018bc:	e022      	b.n	8001904 <main+0x370>
			  }
			  default:
 80018be:	46c0      	nop			@ (mov r8, r8)
 80018c0:	e021      	b.n	8001906 <main+0x372>
				  break;
 80018c2:	46c0      	nop			@ (mov r8, r8)
 80018c4:	e01f      	b.n	8001906 <main+0x372>
				  break;
 80018c6:	46c0      	nop			@ (mov r8, r8)
 80018c8:	e01d      	b.n	8001906 <main+0x372>
 80018ca:	46c0      	nop			@ (mov r8, r8)
 80018cc:	00002710 	.word	0x00002710
 80018d0:	20000678 	.word	0x20000678
 80018d4:	20000680 	.word	0x20000680
 80018d8:	50000800 	.word	0x50000800
 80018dc:	50000400 	.word	0x50000400
 80018e0:	20000640 	.word	0x20000640
 80018e4:	3dcccccd 	.word	0x3dcccccd
 80018e8:	40a00000 	.word	0x40a00000
 80018ec:	42c80000 	.word	0x42c80000
 80018f0:	41700000 	.word	0x41700000
 80018f4:	42200000 	.word	0x42200000
 80018f8:	40012400 	.word	0x40012400
 80018fc:	200004a8 	.word	0x200004a8
 8001900:	20000010 	.word	0x20000010
				  break;
 8001904:	46c0      	nop			@ (mov r8, r8)
				  // Unknown error
			  }
		  }
	  }

	  if(!holding_register_database[I2C_SHUTDOWN])
 8001906:	4b3f      	ldr	r3, [pc, #252]	@ (8001a04 <main+0x470>)
 8001908:	899b      	ldrh	r3, [r3, #12]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d133      	bne.n	8001976 <main+0x3e2>
	  {
		  if(bno055_rx())
 800190e:	f7fe ffdf 	bl	80008d0 <bno055_rx>
 8001912:	1e03      	subs	r3, r0, #0
 8001914:	d017      	beq.n	8001946 <main+0x3b2>
		  {
			  i2c_status = bno055_queue_transaction();
 8001916:	1cbc      	adds	r4, r7, #2
 8001918:	f7fe ffee 	bl	80008f8 <bno055_queue_transaction>
 800191c:	0003      	movs	r3, r0
 800191e:	7023      	strb	r3, [r4, #0]
			  if(i2c_status != 0)
 8001920:	1cbb      	adds	r3, r7, #2
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	b25b      	sxtb	r3, r3
 8001926:	2b00      	cmp	r3, #0
 8001928:	d00d      	beq.n	8001946 <main+0x3b2>
			  {
				  holding_register_database[I2C_ERRORS] |= 1U << ((i2c_status) + (I2C_FATAL_ERROR - I2C_TX_TIMEOUT));
 800192a:	4b36      	ldr	r3, [pc, #216]	@ (8001a04 <main+0x470>)
 800192c:	895a      	ldrh	r2, [r3, #10]
 800192e:	1cbb      	adds	r3, r7, #2
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	b25b      	sxtb	r3, r3
 8001934:	3303      	adds	r3, #3
 8001936:	2101      	movs	r1, #1
 8001938:	4099      	lsls	r1, r3
 800193a:	000b      	movs	r3, r1
 800193c:	b29b      	uxth	r3, r3
 800193e:	4313      	orrs	r3, r2
 8001940:	b29a      	uxth	r2, r3
 8001942:	4b30      	ldr	r3, [pc, #192]	@ (8001a04 <main+0x470>)
 8001944:	815a      	strh	r2, [r3, #10]
			  }
		  }

		  i2c_status = monitor_i2c();
 8001946:	1cbc      	adds	r4, r7, #2
 8001948:	f7ff f850 	bl	80009ec <monitor_i2c>
 800194c:	0003      	movs	r3, r0
 800194e:	7023      	strb	r3, [r4, #0]
		  if(i2c_status != HAL_OK && i2c_status != HAL_BUSY)
 8001950:	1cbb      	adds	r3, r7, #2
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	b25b      	sxtb	r3, r3
 8001956:	2b00      	cmp	r3, #0
 8001958:	d00d      	beq.n	8001976 <main+0x3e2>
 800195a:	1cbb      	adds	r3, r7, #2
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	b25b      	sxtb	r3, r3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d008      	beq.n	8001976 <main+0x3e2>
		  {
			  switch(i2c_status)
 8001964:	1cbb      	adds	r3, r7, #2
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	b25b      	sxtb	r3, r3
 800196a:	2b19      	cmp	r3, #25
 800196c:	d104      	bne.n	8001978 <main+0x3e4>
					  break;
				  }
				  case I2C_FATAL_ERROR:
				  {
					  // Disable the I2C peripheral
					  holding_register_database[I2C_SHUTDOWN] = 1;
 800196e:	4b25      	ldr	r3, [pc, #148]	@ (8001a04 <main+0x470>)
 8001970:	2201      	movs	r2, #1
 8001972:	819a      	strh	r2, [r3, #12]
					  break;
 8001974:	e000      	b.n	8001978 <main+0x3e4>
				  }
				  default:
 8001976:	46c0      	nop			@ (mov r8, r8)
	  }
	  actuate(target_actuator, holding_register_database[ADC_6 + target_actuator], holding_register_database[ACTUATOR_A_TARGET + target_actuator], &actuator_time);
#endif

	  // Monitor any ADC Errors
	  adc_status = monitor_adc();
 8001978:	1c7c      	adds	r4, r7, #1
 800197a:	f001 fc1f 	bl	80031bc <monitor_adc>
 800197e:	0003      	movs	r3, r0
 8001980:	7023      	strb	r3, [r4, #0]
	  if(adc_status != HAL_OK)
 8001982:	1c7b      	adds	r3, r7, #1
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	b25b      	sxtb	r3, r3
 8001988:	2b00      	cmp	r3, #0
 800198a:	d002      	beq.n	8001992 <main+0x3fe>
	  {
		  // An Overrun has occurred as shown in ADC1_IRQHandler in stm32c0xx_it.c. Log the error
		  holding_register_database[ADC_ERRORS] = 1;
 800198c:	4b1d      	ldr	r3, [pc, #116]	@ (8001a04 <main+0x470>)
 800198e:	2201      	movs	r2, #1
 8001990:	81da      	strh	r2, [r3, #14]
	  }

	  // Handle the User changing the encoder refresh rate (does not log potential errors)
	  if(encoder_refresh != holding_register_database[ENCODER_REFRESH])
 8001992:	4b1c      	ldr	r3, [pc, #112]	@ (8001a04 <main+0x470>)
 8001994:	227e      	movs	r2, #126	@ 0x7e
 8001996:	5a9b      	ldrh	r3, [r3, r2]
 8001998:	1d3a      	adds	r2, r7, #4
 800199a:	8812      	ldrh	r2, [r2, #0]
 800199c:	429a      	cmp	r2, r3
 800199e:	d100      	bne.n	80019a2 <main+0x40e>
 80019a0:	e681      	b.n	80016a6 <main+0x112>
	  {
		  HAL_TIM_Base_Stop_IT(&htim14);
 80019a2:	4b19      	ldr	r3, [pc, #100]	@ (8001a08 <main+0x474>)
 80019a4:	0018      	movs	r0, r3
 80019a6:	f006 f991 	bl	8007ccc <HAL_TIM_Base_Stop_IT>
		  HAL_TIM_Base_DeInit(&htim14);
 80019aa:	4b17      	ldr	r3, [pc, #92]	@ (8001a08 <main+0x474>)
 80019ac:	0018      	movs	r0, r3
 80019ae:	f006 f8db 	bl	8007b68 <HAL_TIM_Base_DeInit>
		  __HAL_RCC_TIM14_FORCE_RESET();
 80019b2:	4b16      	ldr	r3, [pc, #88]	@ (8001a0c <main+0x478>)
 80019b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80019b6:	4b15      	ldr	r3, [pc, #84]	@ (8001a0c <main+0x478>)
 80019b8:	2180      	movs	r1, #128	@ 0x80
 80019ba:	0209      	lsls	r1, r1, #8
 80019bc:	430a      	orrs	r2, r1
 80019be:	631a      	str	r2, [r3, #48]	@ 0x30
		  HAL_Delay(10);
 80019c0:	200a      	movs	r0, #10
 80019c2:	f002 f983 	bl	8003ccc <HAL_Delay>
		  __HAL_RCC_TIM14_RELEASE_RESET();
 80019c6:	4b11      	ldr	r3, [pc, #68]	@ (8001a0c <main+0x478>)
 80019c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80019ca:	4b10      	ldr	r3, [pc, #64]	@ (8001a0c <main+0x478>)
 80019cc:	4910      	ldr	r1, [pc, #64]	@ (8001a10 <main+0x47c>)
 80019ce:	400a      	ands	r2, r1
 80019d0:	631a      	str	r2, [r3, #48]	@ 0x30
		  HAL_Delay(10);
 80019d2:	200a      	movs	r0, #10
 80019d4:	f002 f97a 	bl	8003ccc <HAL_Delay>
		  htim14.Init.Period = holding_register_database[ENCODER_REFRESH] - 1;
 80019d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001a04 <main+0x470>)
 80019da:	227e      	movs	r2, #126	@ 0x7e
 80019dc:	5a9b      	ldrh	r3, [r3, r2]
 80019de:	3b01      	subs	r3, #1
 80019e0:	001a      	movs	r2, r3
 80019e2:	4b09      	ldr	r3, [pc, #36]	@ (8001a08 <main+0x474>)
 80019e4:	60da      	str	r2, [r3, #12]
		  HAL_TIM_Base_Init(&htim14);
 80019e6:	4b08      	ldr	r3, [pc, #32]	@ (8001a08 <main+0x474>)
 80019e8:	0018      	movs	r0, r3
 80019ea:	f006 f865 	bl	8007ab8 <HAL_TIM_Base_Init>
		  HAL_TIM_Base_Start_IT(&htim14);
 80019ee:	4b06      	ldr	r3, [pc, #24]	@ (8001a08 <main+0x474>)
 80019f0:	0018      	movs	r0, r3
 80019f2:	f006 f917 	bl	8007c24 <HAL_TIM_Base_Start_IT>
		  encoder_refresh = holding_register_database[ENCODER_REFRESH];
 80019f6:	1d3b      	adds	r3, r7, #4
 80019f8:	4a02      	ldr	r2, [pc, #8]	@ (8001a04 <main+0x470>)
 80019fa:	217e      	movs	r1, #126	@ 0x7e
 80019fc:	5a52      	ldrh	r2, [r2, r1]
 80019fe:	801a      	strh	r2, [r3, #0]
	  if(modbus_rx())
 8001a00:	e651      	b.n	80016a6 <main+0x112>
 8001a02:	46c0      	nop			@ (mov r8, r8)
 8001a04:	20000010 	.word	0x20000010
 8001a08:	200004a8 	.word	0x200004a8
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	ffff7fff 	.word	0xffff7fff

08001a14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a14:	b590      	push	{r4, r7, lr}
 8001a16:	b08f      	sub	sp, #60	@ 0x3c
 8001a18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a1a:	2418      	movs	r4, #24
 8001a1c:	193b      	adds	r3, r7, r4
 8001a1e:	0018      	movs	r0, r3
 8001a20:	2320      	movs	r3, #32
 8001a22:	001a      	movs	r2, r3
 8001a24:	2100      	movs	r1, #0
 8001a26:	f008 ff93 	bl	800a950 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a2a:	1d3b      	adds	r3, r7, #4
 8001a2c:	0018      	movs	r0, r3
 8001a2e:	2314      	movs	r3, #20
 8001a30:	001a      	movs	r2, r3
 8001a32:	2100      	movs	r1, #0
 8001a34:	f008 ff8c 	bl	800a950 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a38:	193b      	adds	r3, r7, r4
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a3e:	193b      	adds	r3, r7, r4
 8001a40:	2280      	movs	r2, #128	@ 0x80
 8001a42:	0252      	lsls	r2, r2, #9
 8001a44:	605a      	str	r2, [r3, #4]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a46:	193b      	adds	r3, r7, r4
 8001a48:	0018      	movs	r0, r3
 8001a4a:	f005 fab5 	bl	8006fb8 <HAL_RCC_OscConfig>
 8001a4e:	1e03      	subs	r3, r0, #0
 8001a50:	d001      	beq.n	8001a56 <SystemClock_Config+0x42>
  {
    Error_Handler();
 8001a52:	f000 fc8f 	bl	8002374 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a56:	1d3b      	adds	r3, r7, #4
 8001a58:	2207      	movs	r2, #7
 8001a5a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001a5c:	1d3b      	adds	r3, r7, #4
 8001a5e:	2201      	movs	r2, #1
 8001a60:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001a62:	1d3b      	adds	r3, r7, #4
 8001a64:	2200      	movs	r2, #0
 8001a66:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001a68:	1d3b      	adds	r3, r7, #4
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001a6e:	1d3b      	adds	r3, r7, #4
 8001a70:	2200      	movs	r2, #0
 8001a72:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a74:	1d3b      	adds	r3, r7, #4
 8001a76:	2100      	movs	r1, #0
 8001a78:	0018      	movs	r0, r3
 8001a7a:	f005 fcc3 	bl	8007404 <HAL_RCC_ClockConfig>
 8001a7e:	1e03      	subs	r3, r0, #0
 8001a80:	d001      	beq.n	8001a86 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001a82:	f000 fc77 	bl	8002374 <Error_Handler>
  }
}
 8001a86:	46c0      	nop			@ (mov r8, r8)
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	b00f      	add	sp, #60	@ 0x3c
 8001a8c:	bd90      	pop	{r4, r7, pc}
	...

08001a90 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a90:	b590      	push	{r4, r7, lr}
 8001a92:	b09d      	sub	sp, #116	@ 0x74
 8001a94:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8001a96:	2350      	movs	r3, #80	@ 0x50
 8001a98:	18fb      	adds	r3, r7, r3
 8001a9a:	0018      	movs	r0, r3
 8001a9c:	2310      	movs	r3, #16
 8001a9e:	001a      	movs	r2, r3
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	f008 ff55 	bl	800a950 <memset>
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8001aa6:	2338      	movs	r3, #56	@ 0x38
 8001aa8:	18fb      	adds	r3, r7, r3
 8001aaa:	0018      	movs	r0, r3
 8001aac:	2318      	movs	r3, #24
 8001aae:	001a      	movs	r2, r3
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	f008 ff4d 	bl	800a950 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab6:	2320      	movs	r3, #32
 8001ab8:	18fb      	adds	r3, r7, r3
 8001aba:	0018      	movs	r0, r3
 8001abc:	2318      	movs	r3, #24
 8001abe:	001a      	movs	r2, r3
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	f008 ff45 	bl	800a950 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ac6:	003b      	movs	r3, r7
 8001ac8:	0018      	movs	r0, r3
 8001aca:	2320      	movs	r3, #32
 8001acc:	001a      	movs	r2, r3
 8001ace:	2100      	movs	r1, #0
 8001ad0:	f008 ff3e 	bl	800a950 <memset>

  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001ad4:	003b      	movs	r3, r7
 8001ad6:	2220      	movs	r2, #32
 8001ad8:	601a      	str	r2, [r3, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8001ada:	003b      	movs	r3, r7
 8001adc:	2200      	movs	r2, #0
 8001ade:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ae0:	003b      	movs	r3, r7
 8001ae2:	0018      	movs	r0, r3
 8001ae4:	f005 fe34 	bl	8007750 <HAL_RCCEx_PeriphCLKConfig>
 8001ae8:	1e03      	subs	r3, r0, #0
 8001aea:	d001      	beq.n	8001af0 <MX_ADC1_Init+0x60>
  {
    Error_Handler();
 8001aec:	f000 fc42 	bl	8002374 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC);
 8001af0:	2380      	movs	r3, #128	@ 0x80
 8001af2:	035b      	lsls	r3, r3, #13
 8001af4:	0018      	movs	r0, r3
 8001af6:	f7ff fac5 	bl	8001084 <LL_APB1_GRP2_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8001afa:	2001      	movs	r0, #1
 8001afc:	f7ff fad8 	bl	80010b0 <LL_IOP_GRP1_EnableClock>
  PA5   ------> ADC1_IN5
  PA6   ------> ADC1_IN6
  PA7   ------> ADC1_IN7
  PA8   ------> ADC1_IN8
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8001b00:	2420      	movs	r4, #32
 8001b02:	193b      	adds	r3, r7, r4
 8001b04:	2201      	movs	r2, #1
 8001b06:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001b08:	193b      	adds	r3, r7, r4
 8001b0a:	2203      	movs	r2, #3
 8001b0c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b0e:	193b      	adds	r3, r7, r4
 8001b10:	2200      	movs	r2, #0
 8001b12:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b14:	193a      	adds	r2, r7, r4
 8001b16:	23a0      	movs	r3, #160	@ 0xa0
 8001b18:	05db      	lsls	r3, r3, #23
 8001b1a:	0011      	movs	r1, r2
 8001b1c:	0018      	movs	r0, r3
 8001b1e:	f008 febc 	bl	800a89a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8001b22:	193b      	adds	r3, r7, r4
 8001b24:	2202      	movs	r2, #2
 8001b26:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001b28:	193b      	adds	r3, r7, r4
 8001b2a:	2203      	movs	r2, #3
 8001b2c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b2e:	193b      	adds	r3, r7, r4
 8001b30:	2200      	movs	r2, #0
 8001b32:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b34:	193a      	adds	r2, r7, r4
 8001b36:	23a0      	movs	r3, #160	@ 0xa0
 8001b38:	05db      	lsls	r3, r3, #23
 8001b3a:	0011      	movs	r1, r2
 8001b3c:	0018      	movs	r0, r3
 8001b3e:	f008 feac 	bl	800a89a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8001b42:	193b      	adds	r3, r7, r4
 8001b44:	2204      	movs	r2, #4
 8001b46:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001b48:	193b      	adds	r3, r7, r4
 8001b4a:	2203      	movs	r2, #3
 8001b4c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b4e:	193b      	adds	r3, r7, r4
 8001b50:	2200      	movs	r2, #0
 8001b52:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b54:	193a      	adds	r2, r7, r4
 8001b56:	23a0      	movs	r3, #160	@ 0xa0
 8001b58:	05db      	lsls	r3, r3, #23
 8001b5a:	0011      	movs	r1, r2
 8001b5c:	0018      	movs	r0, r3
 8001b5e:	f008 fe9c 	bl	800a89a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8001b62:	193b      	adds	r3, r7, r4
 8001b64:	2208      	movs	r2, #8
 8001b66:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001b68:	193b      	adds	r3, r7, r4
 8001b6a:	2203      	movs	r2, #3
 8001b6c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b6e:	193b      	adds	r3, r7, r4
 8001b70:	2200      	movs	r2, #0
 8001b72:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b74:	193a      	adds	r2, r7, r4
 8001b76:	23a0      	movs	r3, #160	@ 0xa0
 8001b78:	05db      	lsls	r3, r3, #23
 8001b7a:	0011      	movs	r1, r2
 8001b7c:	0018      	movs	r0, r3
 8001b7e:	f008 fe8c 	bl	800a89a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8001b82:	193b      	adds	r3, r7, r4
 8001b84:	2210      	movs	r2, #16
 8001b86:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001b88:	193b      	adds	r3, r7, r4
 8001b8a:	2203      	movs	r2, #3
 8001b8c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b8e:	193b      	adds	r3, r7, r4
 8001b90:	2200      	movs	r2, #0
 8001b92:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b94:	193a      	adds	r2, r7, r4
 8001b96:	23a0      	movs	r3, #160	@ 0xa0
 8001b98:	05db      	lsls	r3, r3, #23
 8001b9a:	0011      	movs	r1, r2
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	f008 fe7c 	bl	800a89a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8001ba2:	193b      	adds	r3, r7, r4
 8001ba4:	2220      	movs	r2, #32
 8001ba6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001ba8:	193b      	adds	r3, r7, r4
 8001baa:	2203      	movs	r2, #3
 8001bac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001bae:	193b      	adds	r3, r7, r4
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb4:	193a      	adds	r2, r7, r4
 8001bb6:	23a0      	movs	r3, #160	@ 0xa0
 8001bb8:	05db      	lsls	r3, r3, #23
 8001bba:	0011      	movs	r1, r2
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	f008 fe6c 	bl	800a89a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8001bc2:	193b      	adds	r3, r7, r4
 8001bc4:	2240      	movs	r2, #64	@ 0x40
 8001bc6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001bc8:	193b      	adds	r3, r7, r4
 8001bca:	2203      	movs	r2, #3
 8001bcc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001bce:	193b      	adds	r3, r7, r4
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd4:	193a      	adds	r2, r7, r4
 8001bd6:	23a0      	movs	r3, #160	@ 0xa0
 8001bd8:	05db      	lsls	r3, r3, #23
 8001bda:	0011      	movs	r1, r2
 8001bdc:	0018      	movs	r0, r3
 8001bde:	f008 fe5c 	bl	800a89a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8001be2:	193b      	adds	r3, r7, r4
 8001be4:	2280      	movs	r2, #128	@ 0x80
 8001be6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001be8:	193b      	adds	r3, r7, r4
 8001bea:	2203      	movs	r2, #3
 8001bec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001bee:	193b      	adds	r3, r7, r4
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf4:	193a      	adds	r2, r7, r4
 8001bf6:	23a0      	movs	r3, #160	@ 0xa0
 8001bf8:	05db      	lsls	r3, r3, #23
 8001bfa:	0011      	movs	r1, r2
 8001bfc:	0018      	movs	r0, r3
 8001bfe:	f008 fe4c 	bl	800a89a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8001c02:	0021      	movs	r1, r4
 8001c04:	187b      	adds	r3, r7, r1
 8001c06:	2280      	movs	r2, #128	@ 0x80
 8001c08:	0052      	lsls	r2, r2, #1
 8001c0a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001c0c:	187b      	adds	r3, r7, r1
 8001c0e:	2203      	movs	r2, #3
 8001c10:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c12:	187b      	adds	r3, r7, r1
 8001c14:	2200      	movs	r2, #0
 8001c16:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c18:	187a      	adds	r2, r7, r1
 8001c1a:	23a0      	movs	r3, #160	@ 0xa0
 8001c1c:	05db      	lsls	r3, r3, #23
 8001c1e:	0011      	movs	r1, r2
 8001c20:	0018      	movs	r0, r3
 8001c22:	f008 fe3a 	bl	800a89a <LL_GPIO_Init>

  /* ADC1 DMA Init */

  /* ADC1 Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_1, LL_DMAMUX_REQ_ADC1);
 8001c26:	4b7a      	ldr	r3, [pc, #488]	@ (8001e10 <MX_ADC1_Init+0x380>)
 8001c28:	2205      	movs	r2, #5
 8001c2a:	2101      	movs	r1, #1
 8001c2c:	0018      	movs	r0, r3
 8001c2e:	f7ff fbe7 	bl	8001400 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8001c32:	4b77      	ldr	r3, [pc, #476]	@ (8001e10 <MX_ADC1_Init+0x380>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	2101      	movs	r1, #1
 8001c38:	0018      	movs	r0, r3
 8001c3a:	f7ff fa83 	bl	8001144 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_LOW);
 8001c3e:	4b74      	ldr	r3, [pc, #464]	@ (8001e10 <MX_ADC1_Init+0x380>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	2101      	movs	r1, #1
 8001c44:	0018      	movs	r0, r3
 8001c46:	f7ff fb5b 	bl	8001300 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_CIRCULAR);
 8001c4a:	4b71      	ldr	r3, [pc, #452]	@ (8001e10 <MX_ADC1_Init+0x380>)
 8001c4c:	2220      	movs	r2, #32
 8001c4e:	2101      	movs	r1, #1
 8001c50:	0018      	movs	r0, r3
 8001c52:	f7ff fa9d 	bl	8001190 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 8001c56:	4b6e      	ldr	r3, [pc, #440]	@ (8001e10 <MX_ADC1_Init+0x380>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	2101      	movs	r1, #1
 8001c5c:	0018      	movs	r0, r3
 8001c5e:	f7ff fabb 	bl	80011d8 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 8001c62:	4b6b      	ldr	r3, [pc, #428]	@ (8001e10 <MX_ADC1_Init+0x380>)
 8001c64:	2280      	movs	r2, #128	@ 0x80
 8001c66:	2101      	movs	r1, #1
 8001c68:	0018      	movs	r0, r3
 8001c6a:	f7ff fad9 	bl	8001220 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_HALFWORD);
 8001c6e:	2380      	movs	r3, #128	@ 0x80
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	4867      	ldr	r0, [pc, #412]	@ (8001e10 <MX_ADC1_Init+0x380>)
 8001c74:	001a      	movs	r2, r3
 8001c76:	2101      	movs	r1, #1
 8001c78:	f7ff faf6 	bl	8001268 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_HALFWORD);
 8001c7c:	2380      	movs	r3, #128	@ 0x80
 8001c7e:	00db      	lsls	r3, r3, #3
 8001c80:	4863      	ldr	r0, [pc, #396]	@ (8001e10 <MX_ADC1_Init+0x380>)
 8001c82:	001a      	movs	r2, r3
 8001c84:	2101      	movs	r1, #1
 8001c86:	f7ff fb15 	bl	80012b4 <LL_DMA_SetMemorySize>

  /* ADC1 interrupt Init */
  NVIC_SetPriority(ADC1_IRQn, 0);
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	200c      	movs	r0, #12
 8001c8e:	f7ff f85d 	bl	8000d4c <__NVIC_SetPriority>
  NVIC_EnableIRQ(ADC1_IRQn);
 8001c92:	200c      	movs	r0, #12
 8001c94:	f7ff f840 	bl	8000d18 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN ADC1_Init 1 */

  /* Set DMA transfer addresses of source and destination */
  LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_1, LL_ADC_DMA_GetRegAddr(ADC1, LL_ADC_DMA_REG_REGULAR_DATA),
 8001c98:	4b5e      	ldr	r3, [pc, #376]	@ (8001e14 <MX_ADC1_Init+0x384>)
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	0018      	movs	r0, r3
 8001c9e:	f7ff f8c3 	bl	8000e28 <LL_ADC_DMA_GetRegAddr>
 8001ca2:	0001      	movs	r1, r0
 8001ca4:	4b5c      	ldr	r3, [pc, #368]	@ (8001e18 <MX_ADC1_Init+0x388>)
 8001ca6:	485a      	ldr	r0, [pc, #360]	@ (8001e10 <MX_ADC1_Init+0x380>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	9200      	str	r2, [sp, #0]
 8001cac:	000a      	movs	r2, r1
 8001cae:	2101      	movs	r1, #1
 8001cb0:	f7ff fb6e 	bl	8001390 <LL_DMA_ConfigAddresses>
		  (uint32_t)&holding_register_database[ADC_0],
		  LL_DMA_DIRECTION_PERIPH_TO_MEMORY);

  /* Set DMA transfer size */
  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_1, 9);
 8001cb4:	4b56      	ldr	r3, [pc, #344]	@ (8001e10 <MX_ADC1_Init+0x380>)
 8001cb6:	2209      	movs	r2, #9
 8001cb8:	2101      	movs	r1, #1
 8001cba:	0018      	movs	r0, r3
 8001cbc:	f7ff fb46 	bl	800134c <LL_DMA_SetDataLength>

  /* Enable DMA transfer interruption: transfer complete */
  LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_1);
 8001cc0:	4b53      	ldr	r3, [pc, #332]	@ (8001e10 <MX_ADC1_Init+0x380>)
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	0018      	movs	r0, r3
 8001cc6:	f7ff fbb9 	bl	800143c <LL_DMA_EnableIT_TC>

  /* Enable DMA transfer interruption: transfer half complete */
  LL_DMA_EnableIT_HT(DMA1, LL_DMA_CHANNEL_1);
 8001cca:	4b51      	ldr	r3, [pc, #324]	@ (8001e10 <MX_ADC1_Init+0x380>)
 8001ccc:	2101      	movs	r1, #1
 8001cce:	0018      	movs	r0, r3
 8001cd0:	f7ff fbd4 	bl	800147c <LL_DMA_EnableIT_HT>

  /* Enable DMA transfer interruption: transfer error */
  LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_1);
 8001cd4:	4b4e      	ldr	r3, [pc, #312]	@ (8001e10 <MX_ADC1_Init+0x380>)
 8001cd6:	2101      	movs	r1, #1
 8001cd8:	0018      	movs	r0, r3
 8001cda:	f7ff fbef 	bl	80014bc <LL_DMA_EnableIT_TE>

  /* Enable the DMA transfer */
  LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_1);
 8001cde:	4b4c      	ldr	r3, [pc, #304]	@ (8001e10 <MX_ADC1_Init+0x380>)
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	0018      	movs	r0, r3
 8001ce4:	f7ff fa0e 	bl	8001104 <LL_DMA_EnableChannel>
   #define ADC_CHANNEL_CONF_RDY_TIMEOUT_MS ( 1U)
   #if (USE_TIMEOUT == 1)
   uint32_t Timeout ; /* Variable used for Timeout management */
   #endif /* USE_TIMEOUT */

  ADC_InitStruct.Clock = LL_ADC_CLOCK_SYNC_PCLK_DIV2;
 8001ce8:	2150      	movs	r1, #80	@ 0x50
 8001cea:	187b      	adds	r3, r7, r1
 8001cec:	2280      	movs	r2, #128	@ 0x80
 8001cee:	05d2      	lsls	r2, r2, #23
 8001cf0:	601a      	str	r2, [r3, #0]
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8001cf2:	187b      	adds	r3, r7, r1
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	605a      	str	r2, [r3, #4]
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8001cf8:	187b      	adds	r3, r7, r1
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	609a      	str	r2, [r3, #8]
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8001cfe:	187b      	adds	r3, r7, r1
 8001d00:	2200      	movs	r2, #0
 8001d02:	60da      	str	r2, [r3, #12]
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8001d04:	187b      	adds	r3, r7, r1
 8001d06:	4a43      	ldr	r2, [pc, #268]	@ (8001e14 <MX_ADC1_Init+0x384>)
 8001d08:	0019      	movs	r1, r3
 8001d0a:	0010      	movs	r0, r2
 8001d0c:	f008 fc72 	bl	800a5f4 <LL_ADC_Init>
  LL_ADC_REG_SetSequencerConfigurable(ADC1, LL_ADC_REG_SEQ_FIXED);
 8001d10:	4b40      	ldr	r3, [pc, #256]	@ (8001e14 <MX_ADC1_Init+0x384>)
 8001d12:	2100      	movs	r1, #0
 8001d14:	0018      	movs	r0, r3
 8001d16:	f7ff f8c5 	bl	8000ea4 <LL_ADC_REG_SetSequencerConfigurable>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8001d1a:	2138      	movs	r1, #56	@ 0x38
 8001d1c:	187b      	adds	r3, r7, r1
 8001d1e:	2200      	movs	r2, #0
 8001d20:	601a      	str	r2, [r3, #0]
  ADC_REG_InitStruct.SequencerLength = 0;
 8001d22:	187b      	adds	r3, r7, r1
 8001d24:	2200      	movs	r2, #0
 8001d26:	605a      	str	r2, [r3, #4]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8001d28:	187b      	adds	r3, r7, r1
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	609a      	str	r2, [r3, #8]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 8001d2e:	187b      	adds	r3, r7, r1
 8001d30:	2280      	movs	r2, #128	@ 0x80
 8001d32:	0192      	lsls	r2, r2, #6
 8001d34:	60da      	str	r2, [r3, #12]
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 8001d36:	187b      	adds	r3, r7, r1
 8001d38:	2203      	movs	r2, #3
 8001d3a:	611a      	str	r2, [r3, #16]
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8001d3c:	187b      	adds	r3, r7, r1
 8001d3e:	2200      	movs	r2, #0
 8001d40:	615a      	str	r2, [r3, #20]
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8001d42:	187b      	adds	r3, r7, r1
 8001d44:	4a33      	ldr	r2, [pc, #204]	@ (8001e14 <MX_ADC1_Init+0x384>)
 8001d46:	0019      	movs	r1, r3
 8001d48:	0010      	movs	r0, r2
 8001d4a:	f008 fc89 	bl	800a660 <LL_ADC_REG_Init>
  LL_ADC_REG_SetSequencerScanDirection(ADC1, LL_ADC_REG_SEQ_SCAN_DIR_FORWARD);
 8001d4e:	4b31      	ldr	r3, [pc, #196]	@ (8001e14 <MX_ADC1_Init+0x384>)
 8001d50:	2100      	movs	r1, #0
 8001d52:	0018      	movs	r0, r3
 8001d54:	f7ff f8ba 	bl	8000ecc <LL_ADC_REG_SetSequencerScanDirection>
  LL_ADC_SetOverSamplingScope(ADC1, LL_ADC_OVS_DISABLE);
 8001d58:	4b2e      	ldr	r3, [pc, #184]	@ (8001e14 <MX_ADC1_Init+0x384>)
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	0018      	movs	r0, r3
 8001d5e:	f7ff f8d8 	bl	8000f12 <LL_ADC_SetOverSamplingScope>
  LL_ADC_SetTriggerFrequencyMode(ADC1, LL_ADC_CLOCK_FREQ_MODE_HIGH);
 8001d62:	4b2c      	ldr	r3, [pc, #176]	@ (8001e14 <MX_ADC1_Init+0x384>)
 8001d64:	2100      	movs	r1, #0
 8001d66:	0018      	movs	r0, r3
 8001d68:	f7ff f86a 	bl	8000e40 <LL_ADC_SetTriggerFrequencyMode>
  LL_ADC_REG_SetSequencerChAdd(ADC1, LL_ADC_CHANNEL_0|LL_ADC_CHANNEL_1
 8001d6c:	4a2b      	ldr	r2, [pc, #172]	@ (8001e1c <MX_ADC1_Init+0x38c>)
 8001d6e:	4b29      	ldr	r3, [pc, #164]	@ (8001e14 <MX_ADC1_Init+0x384>)
 8001d70:	0011      	movs	r1, r2
 8001d72:	0018      	movs	r0, r3
 8001d74:	f7ff f8bc 	bl	8000ef0 <LL_ADC_REG_SetSequencerChAdd>
                              |LL_ADC_CHANNEL_6|LL_ADC_CHANNEL_7
                              |LL_ADC_CHANNEL_8);

   /* Poll for ADC channel configuration ready */
   #if (USE_TIMEOUT == 1)
   Timeout = ADC_CHANNEL_CONF_RDY_TIMEOUT_MS;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	667b      	str	r3, [r7, #100]	@ 0x64
   #endif /* USE_TIMEOUT */
   while (LL_ADC_IsActiveFlag_CCRDY(ADC1) == 0)
 8001d7c:	e00a      	b.n	8001d94 <MX_ADC1_Init+0x304>
     {
   #if (USE_TIMEOUT == 1)
   /* Check Systick counter flag to decrement the time-out value */
   if (LL_SYSTICK_IsActiveCounterFlag())
 8001d7e:	f7ff f9ad 	bl	80010dc <LL_SYSTICK_IsActiveCounterFlag>
 8001d82:	1e03      	subs	r3, r0, #0
 8001d84:	d006      	beq.n	8001d94 <MX_ADC1_Init+0x304>
     {
   if(Timeout-- == 0)
 8001d86:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001d88:	1e5a      	subs	r2, r3, #1
 8001d8a:	667a      	str	r2, [r7, #100]	@ 0x64
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d101      	bne.n	8001d94 <MX_ADC1_Init+0x304>
         {
   Error_Handler();
 8001d90:	f000 faf0 	bl	8002374 <Error_Handler>
   while (LL_ADC_IsActiveFlag_CCRDY(ADC1) == 0)
 8001d94:	4b1f      	ldr	r3, [pc, #124]	@ (8001e14 <MX_ADC1_Init+0x384>)
 8001d96:	0018      	movs	r0, r3
 8001d98:	f7ff f927 	bl	8000fea <LL_ADC_IsActiveFlag_CCRDY>
 8001d9c:	1e03      	subs	r3, r0, #0
 8001d9e:	d0ee      	beq.n	8001d7e <MX_ADC1_Init+0x2ee>
         }
     }
   #endif /* USE_TIMEOUT */
     }
   /* Clear flag ADC channel configuration ready */
   LL_ADC_ClearFlag_CCRDY(ADC1);
 8001da0:	4b1c      	ldr	r3, [pc, #112]	@ (8001e14 <MX_ADC1_Init+0x384>)
 8001da2:	0018      	movs	r0, r3
 8001da4:	f7ff f935 	bl	8001012 <LL_ADC_ClearFlag_CCRDY>
  LL_ADC_SetSamplingTimeCommonChannels(ADC1, LL_ADC_SAMPLINGTIME_COMMON_1, LL_ADC_SAMPLINGTIME_160CYCLES_5);
 8001da8:	4b1a      	ldr	r3, [pc, #104]	@ (8001e14 <MX_ADC1_Init+0x384>)
 8001daa:	2207      	movs	r2, #7
 8001dac:	2100      	movs	r1, #0
 8001dae:	0018      	movs	r0, r3
 8001db0:	f7ff f85a 	bl	8000e68 <LL_ADC_SetSamplingTimeCommonChannels>
  LL_ADC_DisableIT_EOC(ADC1);
 8001db4:	4b17      	ldr	r3, [pc, #92]	@ (8001e14 <MX_ADC1_Init+0x384>)
 8001db6:	0018      	movs	r0, r3
 8001db8:	f7ff f945 	bl	8001046 <LL_ADC_DisableIT_EOC>
  LL_ADC_DisableIT_EOS(ADC1);
 8001dbc:	4b15      	ldr	r3, [pc, #84]	@ (8001e14 <MX_ADC1_Init+0x384>)
 8001dbe:	0018      	movs	r0, r3
 8001dc0:	f7ff f950 	bl	8001064 <LL_ADC_DisableIT_EOS>

   /* Enable ADC internal voltage regulator */
   LL_ADC_EnableInternalRegulator(ADC1);
 8001dc4:	4b13      	ldr	r3, [pc, #76]	@ (8001e14 <MX_ADC1_Init+0x384>)
 8001dc6:	0018      	movs	r0, r3
 8001dc8:	f7ff f8b6 	bl	8000f38 <LL_ADC_EnableInternalRegulator>
   /* Note: Variable divided by 2 to compensate partially */
   /* CPU processing cycles (depends on compilation optimization). */
   /* Note: If system core clock frequency is below 200kHz, wait time */
   /* is only a few CPU processing cycles. */
   uint32_t wait_loop_index;
   wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8001dcc:	4b14      	ldr	r3, [pc, #80]	@ (8001e20 <MX_ADC1_Init+0x390>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4914      	ldr	r1, [pc, #80]	@ (8001e24 <MX_ADC1_Init+0x394>)
 8001dd2:	0018      	movs	r0, r3
 8001dd4:	f7fe f998 	bl	8000108 <__udivsi3>
 8001dd8:	0003      	movs	r3, r0
 8001dda:	001a      	movs	r2, r3
 8001ddc:	0013      	movs	r3, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	189b      	adds	r3, r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	210a      	movs	r1, #10
 8001de6:	0018      	movs	r0, r3
 8001de8:	f7fe f98e 	bl	8000108 <__udivsi3>
 8001dec:	0003      	movs	r3, r0
 8001dee:	663b      	str	r3, [r7, #96]	@ 0x60
   while(wait_loop_index != 0)
 8001df0:	e002      	b.n	8001df8 <MX_ADC1_Init+0x368>
     {
   wait_loop_index--;
 8001df2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001df4:	3b01      	subs	r3, #1
 8001df6:	663b      	str	r3, [r7, #96]	@ 0x60
   while(wait_loop_index != 0)
 8001df8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d1f9      	bne.n	8001df2 <MX_ADC1_Init+0x362>
     }
  /* USER CODE BEGIN ADC1_Init 2 */

   LL_ADC_EnableIT_OVR(ADC1);
 8001dfe:	4b05      	ldr	r3, [pc, #20]	@ (8001e14 <MX_ADC1_Init+0x384>)
 8001e00:	0018      	movs	r0, r3
 8001e02:	f7ff f912 	bl	800102a <LL_ADC_EnableIT_OVR>

  /* USER CODE END ADC1_Init 2 */

}
 8001e06:	46c0      	nop			@ (mov r8, r8)
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	b01b      	add	sp, #108	@ 0x6c
 8001e0c:	bd90      	pop	{r4, r7, pc}
 8001e0e:	46c0      	nop			@ (mov r8, r8)
 8001e10:	40020000 	.word	0x40020000
 8001e14:	40012400 	.word	0x40012400
 8001e18:	20000022 	.word	0x20000022
 8001e1c:	3c0001ff 	.word	0x3c0001ff
 8001e20:	200000b4 	.word	0x200000b4
 8001e24:	00030d40 	.word	0x00030d40

08001e28 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e2c:	4b1b      	ldr	r3, [pc, #108]	@ (8001e9c <MX_I2C1_Init+0x74>)
 8001e2e:	4a1c      	ldr	r2, [pc, #112]	@ (8001ea0 <MX_I2C1_Init+0x78>)
 8001e30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010020B;
 8001e32:	4b1a      	ldr	r3, [pc, #104]	@ (8001e9c <MX_I2C1_Init+0x74>)
 8001e34:	4a1b      	ldr	r2, [pc, #108]	@ (8001ea4 <MX_I2C1_Init+0x7c>)
 8001e36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001e38:	4b18      	ldr	r3, [pc, #96]	@ (8001e9c <MX_I2C1_Init+0x74>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e3e:	4b17      	ldr	r3, [pc, #92]	@ (8001e9c <MX_I2C1_Init+0x74>)
 8001e40:	2201      	movs	r2, #1
 8001e42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e44:	4b15      	ldr	r3, [pc, #84]	@ (8001e9c <MX_I2C1_Init+0x74>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001e4a:	4b14      	ldr	r3, [pc, #80]	@ (8001e9c <MX_I2C1_Init+0x74>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001e50:	4b12      	ldr	r3, [pc, #72]	@ (8001e9c <MX_I2C1_Init+0x74>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e56:	4b11      	ldr	r3, [pc, #68]	@ (8001e9c <MX_I2C1_Init+0x74>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e5c:	4b0f      	ldr	r3, [pc, #60]	@ (8001e9c <MX_I2C1_Init+0x74>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e62:	4b0e      	ldr	r3, [pc, #56]	@ (8001e9c <MX_I2C1_Init+0x74>)
 8001e64:	0018      	movs	r0, r3
 8001e66:	f002 fedb 	bl	8004c20 <HAL_I2C_Init>
 8001e6a:	1e03      	subs	r3, r0, #0
 8001e6c:	d001      	beq.n	8001e72 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001e6e:	f000 fa81 	bl	8002374 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e72:	4b0a      	ldr	r3, [pc, #40]	@ (8001e9c <MX_I2C1_Init+0x74>)
 8001e74:	2100      	movs	r1, #0
 8001e76:	0018      	movs	r0, r3
 8001e78:	f005 f806 	bl	8006e88 <HAL_I2CEx_ConfigAnalogFilter>
 8001e7c:	1e03      	subs	r3, r0, #0
 8001e7e:	d001      	beq.n	8001e84 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001e80:	f000 fa78 	bl	8002374 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001e84:	4b05      	ldr	r3, [pc, #20]	@ (8001e9c <MX_I2C1_Init+0x74>)
 8001e86:	2100      	movs	r1, #0
 8001e88:	0018      	movs	r0, r3
 8001e8a:	f005 f849 	bl	8006f20 <HAL_I2CEx_ConfigDigitalFilter>
 8001e8e:	1e03      	subs	r3, r0, #0
 8001e90:	d001      	beq.n	8001e96 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001e92:	f000 fa6f 	bl	8002374 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e96:	46c0      	nop			@ (mov r8, r8)
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	200002ec 	.word	0x200002ec
 8001ea0:	40005400 	.word	0x40005400
 8001ea4:	0010020b 	.word	0x0010020b

08001ea8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001eac:	4b1b      	ldr	r3, [pc, #108]	@ (8001f1c <MX_SPI1_Init+0x74>)
 8001eae:	4a1c      	ldr	r2, [pc, #112]	@ (8001f20 <MX_SPI1_Init+0x78>)
 8001eb0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001eb2:	4b1a      	ldr	r3, [pc, #104]	@ (8001f1c <MX_SPI1_Init+0x74>)
 8001eb4:	2282      	movs	r2, #130	@ 0x82
 8001eb6:	0052      	lsls	r2, r2, #1
 8001eb8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001eba:	4b18      	ldr	r3, [pc, #96]	@ (8001f1c <MX_SPI1_Init+0x74>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ec0:	4b16      	ldr	r3, [pc, #88]	@ (8001f1c <MX_SPI1_Init+0x74>)
 8001ec2:	22e0      	movs	r2, #224	@ 0xe0
 8001ec4:	00d2      	lsls	r2, r2, #3
 8001ec6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ec8:	4b14      	ldr	r3, [pc, #80]	@ (8001f1c <MX_SPI1_Init+0x74>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001ece:	4b13      	ldr	r3, [pc, #76]	@ (8001f1c <MX_SPI1_Init+0x74>)
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ed4:	4b11      	ldr	r3, [pc, #68]	@ (8001f1c <MX_SPI1_Init+0x74>)
 8001ed6:	2280      	movs	r2, #128	@ 0x80
 8001ed8:	0092      	lsls	r2, r2, #2
 8001eda:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001edc:	4b0f      	ldr	r3, [pc, #60]	@ (8001f1c <MX_SPI1_Init+0x74>)
 8001ede:	2210      	movs	r2, #16
 8001ee0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ee2:	4b0e      	ldr	r3, [pc, #56]	@ (8001f1c <MX_SPI1_Init+0x74>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8001f1c <MX_SPI1_Init+0x74>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001eee:	4b0b      	ldr	r3, [pc, #44]	@ (8001f1c <MX_SPI1_Init+0x74>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001ef4:	4b09      	ldr	r3, [pc, #36]	@ (8001f1c <MX_SPI1_Init+0x74>)
 8001ef6:	2207      	movs	r2, #7
 8001ef8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001efa:	4b08      	ldr	r3, [pc, #32]	@ (8001f1c <MX_SPI1_Init+0x74>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001f00:	4b06      	ldr	r3, [pc, #24]	@ (8001f1c <MX_SPI1_Init+0x74>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f06:	4b05      	ldr	r3, [pc, #20]	@ (8001f1c <MX_SPI1_Init+0x74>)
 8001f08:	0018      	movs	r0, r3
 8001f0a:	f005 fd1d 	bl	8007948 <HAL_SPI_Init>
 8001f0e:	1e03      	subs	r3, r0, #0
 8001f10:	d001      	beq.n	8001f16 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001f12:	f000 fa2f 	bl	8002374 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f16:	46c0      	nop			@ (mov r8, r8)
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	200003f8 	.word	0x200003f8
 8001f20:	40013000 	.word	0x40013000

08001f24 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b098      	sub	sp, #96	@ 0x60
 8001f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f2a:	2354      	movs	r3, #84	@ 0x54
 8001f2c:	18fb      	adds	r3, r7, r3
 8001f2e:	0018      	movs	r0, r3
 8001f30:	230c      	movs	r3, #12
 8001f32:	001a      	movs	r2, r3
 8001f34:	2100      	movs	r1, #0
 8001f36:	f008 fd0b 	bl	800a950 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f3a:	2338      	movs	r3, #56	@ 0x38
 8001f3c:	18fb      	adds	r3, r7, r3
 8001f3e:	0018      	movs	r0, r3
 8001f40:	231c      	movs	r3, #28
 8001f42:	001a      	movs	r2, r3
 8001f44:	2100      	movs	r1, #0
 8001f46:	f008 fd03 	bl	800a950 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f4a:	1d3b      	adds	r3, r7, #4
 8001f4c:	0018      	movs	r0, r3
 8001f4e:	2334      	movs	r3, #52	@ 0x34
 8001f50:	001a      	movs	r2, r3
 8001f52:	2100      	movs	r1, #0
 8001f54:	f008 fcfc 	bl	800a950 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f58:	4b45      	ldr	r3, [pc, #276]	@ (8002070 <MX_TIM1_Init+0x14c>)
 8001f5a:	4a46      	ldr	r2, [pc, #280]	@ (8002074 <MX_TIM1_Init+0x150>)
 8001f5c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 8001f5e:	4b44      	ldr	r3, [pc, #272]	@ (8002070 <MX_TIM1_Init+0x14c>)
 8001f60:	224f      	movs	r2, #79	@ 0x4f
 8001f62:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f64:	4b42      	ldr	r3, [pc, #264]	@ (8002070 <MX_TIM1_Init+0x14c>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8001f6a:	4b41      	ldr	r3, [pc, #260]	@ (8002070 <MX_TIM1_Init+0x14c>)
 8001f6c:	2263      	movs	r2, #99	@ 0x63
 8001f6e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f70:	4b3f      	ldr	r3, [pc, #252]	@ (8002070 <MX_TIM1_Init+0x14c>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f76:	4b3e      	ldr	r3, [pc, #248]	@ (8002070 <MX_TIM1_Init+0x14c>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f7c:	4b3c      	ldr	r3, [pc, #240]	@ (8002070 <MX_TIM1_Init+0x14c>)
 8001f7e:	2280      	movs	r2, #128	@ 0x80
 8001f80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001f82:	4b3b      	ldr	r3, [pc, #236]	@ (8002070 <MX_TIM1_Init+0x14c>)
 8001f84:	0018      	movs	r0, r3
 8001f86:	f005 fecf 	bl	8007d28 <HAL_TIM_PWM_Init>
 8001f8a:	1e03      	subs	r3, r0, #0
 8001f8c:	d001      	beq.n	8001f92 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001f8e:	f000 f9f1 	bl	8002374 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f92:	2154      	movs	r1, #84	@ 0x54
 8001f94:	187b      	adds	r3, r7, r1
 8001f96:	2200      	movs	r2, #0
 8001f98:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001f9a:	187b      	adds	r3, r7, r1
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fa0:	187b      	adds	r3, r7, r1
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001fa6:	187a      	adds	r2, r7, r1
 8001fa8:	4b31      	ldr	r3, [pc, #196]	@ (8002070 <MX_TIM1_Init+0x14c>)
 8001faa:	0011      	movs	r1, r2
 8001fac:	0018      	movs	r0, r3
 8001fae:	f006 fc5b 	bl	8008868 <HAL_TIMEx_MasterConfigSynchronization>
 8001fb2:	1e03      	subs	r3, r0, #0
 8001fb4:	d001      	beq.n	8001fba <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001fb6:	f000 f9dd 	bl	8002374 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fba:	2138      	movs	r1, #56	@ 0x38
 8001fbc:	187b      	adds	r3, r7, r1
 8001fbe:	2260      	movs	r2, #96	@ 0x60
 8001fc0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001fc2:	187b      	adds	r3, r7, r1
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fc8:	187b      	adds	r3, r7, r1
 8001fca:	2200      	movs	r2, #0
 8001fcc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001fce:	187b      	adds	r3, r7, r1
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fd4:	187b      	adds	r3, r7, r1
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001fda:	187b      	adds	r3, r7, r1
 8001fdc:	2200      	movs	r2, #0
 8001fde:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001fe0:	187b      	adds	r3, r7, r1
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fe6:	1879      	adds	r1, r7, r1
 8001fe8:	4b21      	ldr	r3, [pc, #132]	@ (8002070 <MX_TIM1_Init+0x14c>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	0018      	movs	r0, r3
 8001fee:	f005 fffb 	bl	8007fe8 <HAL_TIM_PWM_ConfigChannel>
 8001ff2:	1e03      	subs	r3, r0, #0
 8001ff4:	d001      	beq.n	8001ffa <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001ff6:	f000 f9bd 	bl	8002374 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ffa:	1d3b      	adds	r3, r7, #4
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002000:	1d3b      	adds	r3, r7, #4
 8002002:	2200      	movs	r2, #0
 8002004:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002006:	1d3b      	adds	r3, r7, #4
 8002008:	2200      	movs	r2, #0
 800200a:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800200c:	1d3b      	adds	r3, r7, #4
 800200e:	2200      	movs	r2, #0
 8002010:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002012:	1d3b      	adds	r3, r7, #4
 8002014:	2200      	movs	r2, #0
 8002016:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002018:	1d3b      	adds	r3, r7, #4
 800201a:	2280      	movs	r2, #128	@ 0x80
 800201c:	0192      	lsls	r2, r2, #6
 800201e:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002020:	1d3b      	adds	r3, r7, #4
 8002022:	2200      	movs	r2, #0
 8002024:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002026:	1d3b      	adds	r3, r7, #4
 8002028:	2200      	movs	r2, #0
 800202a:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800202c:	1d3b      	adds	r3, r7, #4
 800202e:	2200      	movs	r2, #0
 8002030:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002032:	1d3b      	adds	r3, r7, #4
 8002034:	2280      	movs	r2, #128	@ 0x80
 8002036:	0492      	lsls	r2, r2, #18
 8002038:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800203a:	1d3b      	adds	r3, r7, #4
 800203c:	2200      	movs	r2, #0
 800203e:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002040:	1d3b      	adds	r3, r7, #4
 8002042:	2200      	movs	r2, #0
 8002044:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002046:	1d3b      	adds	r3, r7, #4
 8002048:	2200      	movs	r2, #0
 800204a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800204c:	1d3a      	adds	r2, r7, #4
 800204e:	4b08      	ldr	r3, [pc, #32]	@ (8002070 <MX_TIM1_Init+0x14c>)
 8002050:	0011      	movs	r1, r2
 8002052:	0018      	movs	r0, r3
 8002054:	f006 fc70 	bl	8008938 <HAL_TIMEx_ConfigBreakDeadTime>
 8002058:	1e03      	subs	r3, r0, #0
 800205a:	d001      	beq.n	8002060 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 800205c:	f000 f98a 	bl	8002374 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002060:	4b03      	ldr	r3, [pc, #12]	@ (8002070 <MX_TIM1_Init+0x14c>)
 8002062:	0018      	movs	r0, r3
 8002064:	f001 faaa 	bl	80035bc <HAL_TIM_MspPostInit>

}
 8002068:	46c0      	nop			@ (mov r8, r8)
 800206a:	46bd      	mov	sp, r7
 800206c:	b018      	add	sp, #96	@ 0x60
 800206e:	bd80      	pop	{r7, pc}
 8002070:	2000045c 	.word	0x2000045c
 8002074:	40012c00 	.word	0x40012c00

08002078 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800207c:	4b0e      	ldr	r3, [pc, #56]	@ (80020b8 <MX_TIM14_Init+0x40>)
 800207e:	4a0f      	ldr	r2, [pc, #60]	@ (80020bc <MX_TIM14_Init+0x44>)
 8002080:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 800 - 1 ;
 8002082:	4b0d      	ldr	r3, [pc, #52]	@ (80020b8 <MX_TIM14_Init+0x40>)
 8002084:	4a0e      	ldr	r2, [pc, #56]	@ (80020c0 <MX_TIM14_Init+0x48>)
 8002086:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002088:	4b0b      	ldr	r3, [pc, #44]	@ (80020b8 <MX_TIM14_Init+0x40>)
 800208a:	2200      	movs	r2, #0
 800208c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000 - 1;
 800208e:	4b0a      	ldr	r3, [pc, #40]	@ (80020b8 <MX_TIM14_Init+0x40>)
 8002090:	4a0c      	ldr	r2, [pc, #48]	@ (80020c4 <MX_TIM14_Init+0x4c>)
 8002092:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002094:	4b08      	ldr	r3, [pc, #32]	@ (80020b8 <MX_TIM14_Init+0x40>)
 8002096:	2200      	movs	r2, #0
 8002098:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800209a:	4b07      	ldr	r3, [pc, #28]	@ (80020b8 <MX_TIM14_Init+0x40>)
 800209c:	2200      	movs	r2, #0
 800209e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80020a0:	4b05      	ldr	r3, [pc, #20]	@ (80020b8 <MX_TIM14_Init+0x40>)
 80020a2:	0018      	movs	r0, r3
 80020a4:	f005 fd08 	bl	8007ab8 <HAL_TIM_Base_Init>
 80020a8:	1e03      	subs	r3, r0, #0
 80020aa:	d001      	beq.n	80020b0 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 80020ac:	f000 f962 	bl	8002374 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80020b0:	46c0      	nop			@ (mov r8, r8)
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	46c0      	nop			@ (mov r8, r8)
 80020b8:	200004a8 	.word	0x200004a8
 80020bc:	40002000 	.word	0x40002000
 80020c0:	0000031f 	.word	0x0000031f
 80020c4:	0000270f 	.word	0x0000270f

080020c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80020cc:	4b24      	ldr	r3, [pc, #144]	@ (8002160 <MX_USART1_UART_Init+0x98>)
 80020ce:	4a25      	ldr	r2, [pc, #148]	@ (8002164 <MX_USART1_UART_Init+0x9c>)
 80020d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80020d2:	4b23      	ldr	r3, [pc, #140]	@ (8002160 <MX_USART1_UART_Init+0x98>)
 80020d4:	2296      	movs	r2, #150	@ 0x96
 80020d6:	0192      	lsls	r2, r2, #6
 80020d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020da:	4b21      	ldr	r3, [pc, #132]	@ (8002160 <MX_USART1_UART_Init+0x98>)
 80020dc:	2200      	movs	r2, #0
 80020de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80020e0:	4b1f      	ldr	r3, [pc, #124]	@ (8002160 <MX_USART1_UART_Init+0x98>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80020e6:	4b1e      	ldr	r3, [pc, #120]	@ (8002160 <MX_USART1_UART_Init+0x98>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80020ec:	4b1c      	ldr	r3, [pc, #112]	@ (8002160 <MX_USART1_UART_Init+0x98>)
 80020ee:	220c      	movs	r2, #12
 80020f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020f2:	4b1b      	ldr	r3, [pc, #108]	@ (8002160 <MX_USART1_UART_Init+0x98>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80020f8:	4b19      	ldr	r3, [pc, #100]	@ (8002160 <MX_USART1_UART_Init+0x98>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020fe:	4b18      	ldr	r3, [pc, #96]	@ (8002160 <MX_USART1_UART_Init+0x98>)
 8002100:	2200      	movs	r2, #0
 8002102:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002104:	4b16      	ldr	r3, [pc, #88]	@ (8002160 <MX_USART1_UART_Init+0x98>)
 8002106:	2200      	movs	r2, #0
 8002108:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800210a:	4b15      	ldr	r3, [pc, #84]	@ (8002160 <MX_USART1_UART_Init+0x98>)
 800210c:	2200      	movs	r2, #0
 800210e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8002110:	4813      	ldr	r0, [pc, #76]	@ (8002160 <MX_USART1_UART_Init+0x98>)
 8002112:	2300      	movs	r3, #0
 8002114:	2200      	movs	r2, #0
 8002116:	2100      	movs	r1, #0
 8002118:	f008 f832 	bl	800a180 <HAL_RS485Ex_Init>
 800211c:	1e03      	subs	r3, r0, #0
 800211e:	d001      	beq.n	8002124 <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 8002120:	f000 f928 	bl	8002374 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002124:	4b0e      	ldr	r3, [pc, #56]	@ (8002160 <MX_USART1_UART_Init+0x98>)
 8002126:	2100      	movs	r1, #0
 8002128:	0018      	movs	r0, r3
 800212a:	f008 f8ed 	bl	800a308 <HAL_UARTEx_SetTxFifoThreshold>
 800212e:	1e03      	subs	r3, r0, #0
 8002130:	d001      	beq.n	8002136 <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 8002132:	f000 f91f 	bl	8002374 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002136:	4b0a      	ldr	r3, [pc, #40]	@ (8002160 <MX_USART1_UART_Init+0x98>)
 8002138:	2100      	movs	r1, #0
 800213a:	0018      	movs	r0, r3
 800213c:	f008 f924 	bl	800a388 <HAL_UARTEx_SetRxFifoThreshold>
 8002140:	1e03      	subs	r3, r0, #0
 8002142:	d001      	beq.n	8002148 <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 8002144:	f000 f916 	bl	8002374 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002148:	4b05      	ldr	r3, [pc, #20]	@ (8002160 <MX_USART1_UART_Init+0x98>)
 800214a:	0018      	movs	r0, r3
 800214c:	f008 f8a2 	bl	800a294 <HAL_UARTEx_DisableFifoMode>
 8002150:	1e03      	subs	r3, r0, #0
 8002152:	d001      	beq.n	8002158 <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 8002154:	f000 f90e 	bl	8002374 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002158:	46c0      	nop			@ (mov r8, r8)
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	46c0      	nop			@ (mov r8, r8)
 8002160:	200004f4 	.word	0x200004f4
 8002164:	40013800 	.word	0x40013800

08002168 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800216e:	4b13      	ldr	r3, [pc, #76]	@ (80021bc <MX_DMA_Init+0x54>)
 8002170:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002172:	4b12      	ldr	r3, [pc, #72]	@ (80021bc <MX_DMA_Init+0x54>)
 8002174:	2101      	movs	r1, #1
 8002176:	430a      	orrs	r2, r1
 8002178:	639a      	str	r2, [r3, #56]	@ 0x38
 800217a:	4b10      	ldr	r3, [pc, #64]	@ (80021bc <MX_DMA_Init+0x54>)
 800217c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800217e:	2201      	movs	r2, #1
 8002180:	4013      	ands	r3, r2
 8002182:	607b      	str	r3, [r7, #4]
 8002184:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, 0);
 8002186:	2100      	movs	r1, #0
 8002188:	2009      	movs	r0, #9
 800218a:	f7fe fddf 	bl	8000d4c <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800218e:	2009      	movs	r0, #9
 8002190:	f7fe fdc2 	bl	8000d18 <__NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8002194:	2200      	movs	r2, #0
 8002196:	2100      	movs	r1, #0
 8002198:	200a      	movs	r0, #10
 800219a:	f001 fe89 	bl	8003eb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800219e:	200a      	movs	r0, #10
 80021a0:	f001 fe9b 	bl	8003eda <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_DMA1_CH4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_DMA1_CH4_5_IRQn, 0, 0);
 80021a4:	2200      	movs	r2, #0
 80021a6:	2100      	movs	r1, #0
 80021a8:	200b      	movs	r0, #11
 80021aa:	f001 fe81 	bl	8003eb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_DMA1_CH4_5_IRQn);
 80021ae:	200b      	movs	r0, #11
 80021b0:	f001 fe93 	bl	8003eda <HAL_NVIC_EnableIRQ>

}
 80021b4:	46c0      	nop			@ (mov r8, r8)
 80021b6:	46bd      	mov	sp, r7
 80021b8:	b002      	add	sp, #8
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40021000 	.word	0x40021000

080021c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021c0:	b590      	push	{r4, r7, lr}
 80021c2:	b08b      	sub	sp, #44	@ 0x2c
 80021c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c6:	2414      	movs	r4, #20
 80021c8:	193b      	adds	r3, r7, r4
 80021ca:	0018      	movs	r0, r3
 80021cc:	2314      	movs	r3, #20
 80021ce:	001a      	movs	r2, r3
 80021d0:	2100      	movs	r1, #0
 80021d2:	f008 fbbd 	bl	800a950 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021d6:	4b62      	ldr	r3, [pc, #392]	@ (8002360 <MX_GPIO_Init+0x1a0>)
 80021d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021da:	4b61      	ldr	r3, [pc, #388]	@ (8002360 <MX_GPIO_Init+0x1a0>)
 80021dc:	2104      	movs	r1, #4
 80021de:	430a      	orrs	r2, r1
 80021e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80021e2:	4b5f      	ldr	r3, [pc, #380]	@ (8002360 <MX_GPIO_Init+0x1a0>)
 80021e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021e6:	2204      	movs	r2, #4
 80021e8:	4013      	ands	r3, r2
 80021ea:	613b      	str	r3, [r7, #16]
 80021ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80021ee:	4b5c      	ldr	r3, [pc, #368]	@ (8002360 <MX_GPIO_Init+0x1a0>)
 80021f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021f2:	4b5b      	ldr	r3, [pc, #364]	@ (8002360 <MX_GPIO_Init+0x1a0>)
 80021f4:	2120      	movs	r1, #32
 80021f6:	430a      	orrs	r2, r1
 80021f8:	635a      	str	r2, [r3, #52]	@ 0x34
 80021fa:	4b59      	ldr	r3, [pc, #356]	@ (8002360 <MX_GPIO_Init+0x1a0>)
 80021fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021fe:	2220      	movs	r2, #32
 8002200:	4013      	ands	r3, r2
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002206:	4b56      	ldr	r3, [pc, #344]	@ (8002360 <MX_GPIO_Init+0x1a0>)
 8002208:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800220a:	4b55      	ldr	r3, [pc, #340]	@ (8002360 <MX_GPIO_Init+0x1a0>)
 800220c:	2101      	movs	r1, #1
 800220e:	430a      	orrs	r2, r1
 8002210:	635a      	str	r2, [r3, #52]	@ 0x34
 8002212:	4b53      	ldr	r3, [pc, #332]	@ (8002360 <MX_GPIO_Init+0x1a0>)
 8002214:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002216:	2201      	movs	r2, #1
 8002218:	4013      	ands	r3, r2
 800221a:	60bb      	str	r3, [r7, #8]
 800221c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800221e:	4b50      	ldr	r3, [pc, #320]	@ (8002360 <MX_GPIO_Init+0x1a0>)
 8002220:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002222:	4b4f      	ldr	r3, [pc, #316]	@ (8002360 <MX_GPIO_Init+0x1a0>)
 8002224:	2102      	movs	r1, #2
 8002226:	430a      	orrs	r2, r1
 8002228:	635a      	str	r2, [r3, #52]	@ 0x34
 800222a:	4b4d      	ldr	r3, [pc, #308]	@ (8002360 <MX_GPIO_Init+0x1a0>)
 800222c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800222e:	2202      	movs	r2, #2
 8002230:	4013      	ands	r3, r2
 8002232:	607b      	str	r3, [r7, #4]
 8002234:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002236:	4b4a      	ldr	r3, [pc, #296]	@ (8002360 <MX_GPIO_Init+0x1a0>)
 8002238:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800223a:	4b49      	ldr	r3, [pc, #292]	@ (8002360 <MX_GPIO_Init+0x1a0>)
 800223c:	2108      	movs	r1, #8
 800223e:	430a      	orrs	r2, r1
 8002240:	635a      	str	r2, [r3, #52]	@ 0x34
 8002242:	4b47      	ldr	r3, [pc, #284]	@ (8002360 <MX_GPIO_Init+0x1a0>)
 8002244:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002246:	2208      	movs	r2, #8
 8002248:	4013      	ands	r3, r2
 800224a:	603b      	str	r3, [r7, #0]
 800224c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Actuator_C_EN_GPIO_Port, Actuator_C_EN_Pin, GPIO_PIN_RESET);
 800224e:	4b45      	ldr	r3, [pc, #276]	@ (8002364 <MX_GPIO_Init+0x1a4>)
 8002250:	2200      	movs	r2, #0
 8002252:	2101      	movs	r1, #1
 8002254:	0018      	movs	r0, r3
 8002256:	f002 fc92 	bl	8004b7e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Actuator_A_EN_Pin|Actuator_B_EN_Pin, GPIO_PIN_RESET);
 800225a:	4b43      	ldr	r3, [pc, #268]	@ (8002368 <MX_GPIO_Init+0x1a8>)
 800225c:	2200      	movs	r2, #0
 800225e:	21c0      	movs	r1, #192	@ 0xc0
 8002260:	0018      	movs	r0, r3
 8002262:	f002 fc8c 	bl	8004b7e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_SET);
 8002266:	4b41      	ldr	r3, [pc, #260]	@ (800236c <MX_GPIO_Init+0x1ac>)
 8002268:	2201      	movs	r2, #1
 800226a:	2101      	movs	r1, #1
 800226c:	0018      	movs	r0, r3
 800226e:	f002 fc86 	bl	8004b7e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Actuator_C_EN_Pin */
  GPIO_InitStruct.Pin = Actuator_C_EN_Pin;
 8002272:	193b      	adds	r3, r7, r4
 8002274:	2201      	movs	r2, #1
 8002276:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002278:	193b      	adds	r3, r7, r4
 800227a:	2201      	movs	r2, #1
 800227c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227e:	193b      	adds	r3, r7, r4
 8002280:	2200      	movs	r2, #0
 8002282:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002284:	193b      	adds	r3, r7, r4
 8002286:	2200      	movs	r2, #0
 8002288:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Actuator_C_EN_GPIO_Port, &GPIO_InitStruct);
 800228a:	193b      	adds	r3, r7, r4
 800228c:	4a35      	ldr	r2, [pc, #212]	@ (8002364 <MX_GPIO_Init+0x1a4>)
 800228e:	0019      	movs	r1, r3
 8002290:	0010      	movs	r0, r2
 8002292:	f002 fa0d 	bl	80046b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Encoder_Pulse_A_Pin */
  GPIO_InitStruct.Pin = Encoder_Pulse_A_Pin;
 8002296:	0021      	movs	r1, r4
 8002298:	187b      	adds	r3, r7, r1
 800229a:	2280      	movs	r2, #128	@ 0x80
 800229c:	0192      	lsls	r2, r2, #6
 800229e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022a0:	000c      	movs	r4, r1
 80022a2:	193b      	adds	r3, r7, r4
 80022a4:	4a32      	ldr	r2, [pc, #200]	@ (8002370 <MX_GPIO_Init+0x1b0>)
 80022a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a8:	193b      	adds	r3, r7, r4
 80022aa:	2200      	movs	r2, #0
 80022ac:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Encoder_Pulse_A_GPIO_Port, &GPIO_InitStruct);
 80022ae:	193b      	adds	r3, r7, r4
 80022b0:	4a2c      	ldr	r2, [pc, #176]	@ (8002364 <MX_GPIO_Init+0x1a4>)
 80022b2:	0019      	movs	r1, r3
 80022b4:	0010      	movs	r0, r2
 80022b6:	f002 f9fb 	bl	80046b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Encoder_Pulse_B_Pin */
  GPIO_InitStruct.Pin = Encoder_Pulse_B_Pin;
 80022ba:	0021      	movs	r1, r4
 80022bc:	187b      	adds	r3, r7, r1
 80022be:	2280      	movs	r2, #128	@ 0x80
 80022c0:	01d2      	lsls	r2, r2, #7
 80022c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022c4:	000c      	movs	r4, r1
 80022c6:	193b      	adds	r3, r7, r4
 80022c8:	2200      	movs	r2, #0
 80022ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022cc:	193b      	adds	r3, r7, r4
 80022ce:	2200      	movs	r2, #0
 80022d0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Encoder_Pulse_B_GPIO_Port, &GPIO_InitStruct);
 80022d2:	193b      	adds	r3, r7, r4
 80022d4:	4a23      	ldr	r2, [pc, #140]	@ (8002364 <MX_GPIO_Init+0x1a4>)
 80022d6:	0019      	movs	r1, r3
 80022d8:	0010      	movs	r0, r2
 80022da:	f002 f9e9 	bl	80046b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Actuator_A_EN_Pin Actuator_B_EN_Pin */
  GPIO_InitStruct.Pin = Actuator_A_EN_Pin|Actuator_B_EN_Pin;
 80022de:	193b      	adds	r3, r7, r4
 80022e0:	22c0      	movs	r2, #192	@ 0xc0
 80022e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022e4:	193b      	adds	r3, r7, r4
 80022e6:	2201      	movs	r2, #1
 80022e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ea:	193b      	adds	r3, r7, r4
 80022ec:	2200      	movs	r2, #0
 80022ee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f0:	193b      	adds	r3, r7, r4
 80022f2:	2200      	movs	r2, #0
 80022f4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022f6:	193b      	adds	r3, r7, r4
 80022f8:	4a1b      	ldr	r2, [pc, #108]	@ (8002368 <MX_GPIO_Init+0x1a8>)
 80022fa:	0019      	movs	r1, r3
 80022fc:	0010      	movs	r0, r2
 80022fe:	f002 f9d7 	bl	80046b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Actuator_CS_Pin */
  GPIO_InitStruct.Pin = Actuator_CS_Pin;
 8002302:	193b      	adds	r3, r7, r4
 8002304:	2201      	movs	r2, #1
 8002306:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002308:	193b      	adds	r3, r7, r4
 800230a:	2201      	movs	r2, #1
 800230c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230e:	193b      	adds	r3, r7, r4
 8002310:	2200      	movs	r2, #0
 8002312:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002314:	193b      	adds	r3, r7, r4
 8002316:	2203      	movs	r2, #3
 8002318:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Actuator_CS_GPIO_Port, &GPIO_InitStruct);
 800231a:	193b      	adds	r3, r7, r4
 800231c:	4a13      	ldr	r2, [pc, #76]	@ (800236c <MX_GPIO_Init+0x1ac>)
 800231e:	0019      	movs	r1, r3
 8002320:	0010      	movs	r0, r2
 8002322:	f002 f9c5 	bl	80046b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_Reset_Pin */
  GPIO_InitStruct.Pin = IMU_Reset_Pin;
 8002326:	0021      	movs	r1, r4
 8002328:	187b      	adds	r3, r7, r1
 800232a:	2202      	movs	r2, #2
 800232c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800232e:	187b      	adds	r3, r7, r1
 8002330:	2200      	movs	r2, #0
 8002332:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002334:	187b      	adds	r3, r7, r1
 8002336:	2200      	movs	r2, #0
 8002338:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(IMU_Reset_GPIO_Port, &GPIO_InitStruct);
 800233a:	187b      	adds	r3, r7, r1
 800233c:	4a0b      	ldr	r2, [pc, #44]	@ (800236c <MX_GPIO_Init+0x1ac>)
 800233e:	0019      	movs	r1, r3
 8002340:	0010      	movs	r0, r2
 8002342:	f002 f9b5 	bl	80046b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8002346:	2200      	movs	r2, #0
 8002348:	2100      	movs	r1, #0
 800234a:	2007      	movs	r0, #7
 800234c:	f001 fdb0 	bl	8003eb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002350:	2007      	movs	r0, #7
 8002352:	f001 fdc2 	bl	8003eda <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002356:	46c0      	nop			@ (mov r8, r8)
 8002358:	46bd      	mov	sp, r7
 800235a:	b00b      	add	sp, #44	@ 0x2c
 800235c:	bd90      	pop	{r4, r7, pc}
 800235e:	46c0      	nop			@ (mov r8, r8)
 8002360:	40021000 	.word	0x40021000
 8002364:	50000400 	.word	0x50000400
 8002368:	50000800 	.word	0x50000800
 800236c:	50000c00 	.word	0x50000c00
 8002370:	10110000 	.word	0x10110000

08002374 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002378:	b672      	cpsid	i
}
 800237a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800237c:	46c0      	nop			@ (mov r8, r8)
 800237e:	e7fd      	b.n	800237c <Error_Handler+0x8>

08002380 <HAL_UARTEx_RxEventCallback>:

/*
 * Modbus reception handler function
 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	000a      	movs	r2, r1
 800238a:	1cbb      	adds	r3, r7, #2
 800238c:	801a      	strh	r2, [r3, #0]
	if(modbus_header)
 800238e:	4b24      	ldr	r3, [pc, #144]	@ (8002420 <HAL_UARTEx_RxEventCallback+0xa0>)
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	b2db      	uxtb	r3, r3
 8002394:	2b00      	cmp	r3, #0
 8002396:	d026      	beq.n	80023e6 <HAL_UARTEx_RxEventCallback+0x66>
	{
		// Log the time for chunk miss error handling
		chunk_time = HAL_GetTick();
 8002398:	f001 fc8e 	bl	8003cb8 <HAL_GetTick>
 800239c:	0002      	movs	r2, r0
 800239e:	4b21      	ldr	r3, [pc, #132]	@ (8002424 <HAL_UARTEx_RxEventCallback+0xa4>)
 80023a0:	601a      	str	r2, [r3, #0]
		modbus_header = 0;
 80023a2:	4b1f      	ldr	r3, [pc, #124]	@ (8002420 <HAL_UARTEx_RxEventCallback+0xa0>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	701a      	strb	r2, [r3, #0]

		// Setup the DMA to receive the # message bytes + crc + 1 in the event that the # bytes is in the message
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, &modbus_rx_buffer[6], (uint16_t)(((modbus_rx_buffer[4] << 8) | modbus_rx_buffer[5])*2 + 2 + 1));
 80023a8:	4b1f      	ldr	r3, [pc, #124]	@ (8002428 <HAL_UARTEx_RxEventCallback+0xa8>)
 80023aa:	791b      	ldrb	r3, [r3, #4]
 80023ac:	021b      	lsls	r3, r3, #8
 80023ae:	4a1e      	ldr	r2, [pc, #120]	@ (8002428 <HAL_UARTEx_RxEventCallback+0xa8>)
 80023b0:	7952      	ldrb	r2, [r2, #5]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	3301      	adds	r3, #1
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	18db      	adds	r3, r3, r3
 80023bc:	b29b      	uxth	r3, r3
 80023be:	3301      	adds	r3, #1
 80023c0:	b29a      	uxth	r2, r3
 80023c2:	491a      	ldr	r1, [pc, #104]	@ (800242c <HAL_UARTEx_RxEventCallback+0xac>)
 80023c4:	4b1a      	ldr	r3, [pc, #104]	@ (8002430 <HAL_UARTEx_RxEventCallback+0xb0>)
 80023c6:	0018      	movs	r0, r3
 80023c8:	f008 f820 	bl	800a40c <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(huart1.hdmarx, DMA_IT_HT);
 80023cc:	4b18      	ldr	r3, [pc, #96]	@ (8002430 <HAL_UARTEx_RxEventCallback+0xb0>)
 80023ce:	2280      	movs	r2, #128	@ 0x80
 80023d0:	589b      	ldr	r3, [r3, r2]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	4b16      	ldr	r3, [pc, #88]	@ (8002430 <HAL_UARTEx_RxEventCallback+0xb0>)
 80023d8:	2180      	movs	r1, #128	@ 0x80
 80023da:	585b      	ldr	r3, [r3, r1]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2104      	movs	r1, #4
 80023e0:	438a      	bics	r2, r1
 80023e2:	601a      	str	r2, [r3, #0]
#ifdef MB_SLAVE
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, modbus_rx_buffer, 6);
		__HAL_DMA_DISABLE_IT(huart1.hdmarx, DMA_IT_HT);
#endif
	}
}
 80023e4:	e017      	b.n	8002416 <HAL_UARTEx_RxEventCallback+0x96>
		modbus_header = 1;
 80023e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002420 <HAL_UARTEx_RxEventCallback+0xa0>)
 80023e8:	2201      	movs	r2, #1
 80023ea:	701a      	strb	r2, [r3, #0]
		uart_rx_int = 1;
 80023ec:	4b11      	ldr	r3, [pc, #68]	@ (8002434 <HAL_UARTEx_RxEventCallback+0xb4>)
 80023ee:	2201      	movs	r2, #1
 80023f0:	701a      	strb	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, modbus_rx_buffer, 6);
 80023f2:	490d      	ldr	r1, [pc, #52]	@ (8002428 <HAL_UARTEx_RxEventCallback+0xa8>)
 80023f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002430 <HAL_UARTEx_RxEventCallback+0xb0>)
 80023f6:	2206      	movs	r2, #6
 80023f8:	0018      	movs	r0, r3
 80023fa:	f008 f807 	bl	800a40c <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(huart1.hdmarx, DMA_IT_HT);
 80023fe:	4b0c      	ldr	r3, [pc, #48]	@ (8002430 <HAL_UARTEx_RxEventCallback+0xb0>)
 8002400:	2280      	movs	r2, #128	@ 0x80
 8002402:	589b      	ldr	r3, [r3, r2]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	4b09      	ldr	r3, [pc, #36]	@ (8002430 <HAL_UARTEx_RxEventCallback+0xb0>)
 800240a:	2180      	movs	r1, #128	@ 0x80
 800240c:	585b      	ldr	r3, [r3, r1]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2104      	movs	r1, #4
 8002412:	438a      	bics	r2, r1
 8002414:	601a      	str	r2, [r3, #0]
}
 8002416:	46c0      	nop			@ (mov r8, r8)
 8002418:	46bd      	mov	sp, r7
 800241a:	b002      	add	sp, #8
 800241c:	bd80      	pop	{r7, pc}
 800241e:	46c0      	nop			@ (mov r8, r8)
 8002420:	200000b0 	.word	0x200000b0
 8002424:	20000894 	.word	0x20000894
 8002428:	20000690 	.word	0x20000690
 800242c:	20000696 	.word	0x20000696
 8002430:	200004f4 	.word	0x200004f4
 8002434:	20000898 	.word	0x20000898

08002438 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
	uart_tx_int = 1;
 8002440:	4b03      	ldr	r3, [pc, #12]	@ (8002450 <HAL_UART_TxCpltCallback+0x18>)
 8002442:	2201      	movs	r2, #1
 8002444:	701a      	strb	r2, [r3, #0]
}
 8002446:	46c0      	nop			@ (mov r8, r8)
 8002448:	46bd      	mov	sp, r7
 800244a:	b002      	add	sp, #8
 800244c:	bd80      	pop	{r7, pc}
 800244e:	46c0      	nop			@ (mov r8, r8)
 8002450:	200000b1 	.word	0x200000b1

08002454 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
	uart_err_int = 1;
 800245c:	4b07      	ldr	r3, [pc, #28]	@ (800247c <HAL_UART_ErrorCallback+0x28>)
 800245e:	2201      	movs	r2, #1
 8002460:	701a      	strb	r2, [r3, #0]
	__HAL_UART_DISABLE_IT(&huart1, UART_IT_MASK);
 8002462:	4b07      	ldr	r3, [pc, #28]	@ (8002480 <HAL_UART_ErrorCallback+0x2c>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	689a      	ldr	r2, [r3, #8]
 8002468:	4b05      	ldr	r3, [pc, #20]	@ (8002480 <HAL_UART_ErrorCallback+0x2c>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	0052      	lsls	r2, r2, #1
 800246e:	0852      	lsrs	r2, r2, #1
 8002470:	609a      	str	r2, [r3, #8]
}
 8002472:	46c0      	nop			@ (mov r8, r8)
 8002474:	46bd      	mov	sp, r7
 8002476:	b002      	add	sp, #8
 8002478:	bd80      	pop	{r7, pc}
 800247a:	46c0      	nop			@ (mov r8, r8)
 800247c:	20000899 	.word	0x20000899
 8002480:	200004f4 	.word	0x200004f4

08002484 <modbus_rx>:

// Modbus Slave Functions ---------------------------------------------------------------------

#ifdef MB_SLAVE
uint8_t modbus_rx()
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
	if(uart_rx_int)
 8002488:	4b06      	ldr	r3, [pc, #24]	@ (80024a4 <modbus_rx+0x20>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2b00      	cmp	r3, #0
 8002490:	d004      	beq.n	800249c <modbus_rx+0x18>
	{
		uart_rx_int = 0;
 8002492:	4b04      	ldr	r3, [pc, #16]	@ (80024a4 <modbus_rx+0x20>)
 8002494:	2200      	movs	r2, #0
 8002496:	701a      	strb	r2, [r3, #0]
		return 1;
 8002498:	2301      	movs	r3, #1
 800249a:	e000      	b.n	800249e <modbus_rx+0x1a>
	}
	return 0;
 800249c:	2300      	movs	r3, #0
}
 800249e:	0018      	movs	r0, r3
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	20000898 	.word	0x20000898

080024a8 <return_holding_registers>:

int8_t return_holding_registers(uint8_t* tx_len)
{
 80024a8:	b5b0      	push	{r4, r5, r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
	(*tx_len) = 0;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	701a      	strb	r2, [r3, #0]

	// Handle Error Checking
	uint16_t first_register_address = (get_rx_buffer(2) << 8) | get_rx_buffer(3);
 80024b6:	2002      	movs	r0, #2
 80024b8:	f000 fc8e 	bl	8002dd8 <get_rx_buffer>
 80024bc:	0003      	movs	r3, r0
 80024be:	021b      	lsls	r3, r3, #8
 80024c0:	b21c      	sxth	r4, r3
 80024c2:	2003      	movs	r0, #3
 80024c4:	f000 fc88 	bl	8002dd8 <get_rx_buffer>
 80024c8:	0003      	movs	r3, r0
 80024ca:	b21b      	sxth	r3, r3
 80024cc:	4323      	orrs	r3, r4
 80024ce:	b21a      	sxth	r2, r3
 80024d0:	230c      	movs	r3, #12
 80024d2:	18fb      	adds	r3, r7, r3
 80024d4:	801a      	strh	r2, [r3, #0]

	// Get the number of registers requested by the master
	uint16_t num_registers = (get_rx_buffer(4) << 8) | get_rx_buffer(5);
 80024d6:	2004      	movs	r0, #4
 80024d8:	f000 fc7e 	bl	8002dd8 <get_rx_buffer>
 80024dc:	0003      	movs	r3, r0
 80024de:	021b      	lsls	r3, r3, #8
 80024e0:	b21c      	sxth	r4, r3
 80024e2:	2005      	movs	r0, #5
 80024e4:	f000 fc78 	bl	8002dd8 <get_rx_buffer>
 80024e8:	0003      	movs	r3, r0
 80024ea:	b21b      	sxth	r3, r3
 80024ec:	4323      	orrs	r3, r4
 80024ee:	b21a      	sxth	r2, r3
 80024f0:	210a      	movs	r1, #10
 80024f2:	187b      	adds	r3, r7, r1
 80024f4:	801a      	strh	r2, [r3, #0]

	if(num_registers > RX_BUFFER_SIZE || num_registers < 1) // 125 is the limit according to modbus protocol
 80024f6:	000a      	movs	r2, r1
 80024f8:	18bb      	adds	r3, r7, r2
 80024fa:	881b      	ldrh	r3, [r3, #0]
 80024fc:	2b7d      	cmp	r3, #125	@ 0x7d
 80024fe:	d803      	bhi.n	8002508 <return_holding_registers+0x60>
 8002500:	18bb      	adds	r3, r7, r2
 8002502:	881b      	ldrh	r3, [r3, #0]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d104      	bne.n	8002512 <return_holding_registers+0x6a>
	{
		return modbus_exception(MB_ILLEGAL_DATA_VALUE);
 8002508:	2006      	movs	r0, #6
 800250a:	f000 f97b 	bl	8002804 <modbus_exception>
 800250e:	0003      	movs	r3, r0
 8002510:	e06e      	b.n	80025f0 <return_holding_registers+0x148>
	}

	uint16_t last_register_address = first_register_address + (num_registers - 1);
 8002512:	230a      	movs	r3, #10
 8002514:	18fa      	adds	r2, r7, r3
 8002516:	230c      	movs	r3, #12
 8002518:	18fb      	adds	r3, r7, r3
 800251a:	8812      	ldrh	r2, [r2, #0]
 800251c:	881b      	ldrh	r3, [r3, #0]
 800251e:	18d3      	adds	r3, r2, r3
 8002520:	b29a      	uxth	r2, r3
 8002522:	2108      	movs	r1, #8
 8002524:	187b      	adds	r3, r7, r1
 8002526:	3a01      	subs	r2, #1
 8002528:	801a      	strh	r2, [r3, #0]

	if(last_register_address > NUM_HOLDING_REGISTERS)
 800252a:	187b      	adds	r3, r7, r1
 800252c:	881b      	ldrh	r3, [r3, #0]
 800252e:	2b50      	cmp	r3, #80	@ 0x50
 8002530:	d904      	bls.n	800253c <return_holding_registers+0x94>
	{
		return modbus_exception(MB_ILLEGAL_DATA_ADDRESS);
 8002532:	2005      	movs	r0, #5
 8002534:	f000 f966 	bl	8002804 <modbus_exception>
 8002538:	0003      	movs	r3, r0
 800253a:	e059      	b.n	80025f0 <return_holding_registers+0x148>
	}

	// Return register values
	modbus_tx_buffer[0] = get_rx_buffer(0); // Append Slave id
 800253c:	2000      	movs	r0, #0
 800253e:	f000 fc4b 	bl	8002dd8 <get_rx_buffer>
 8002542:	0003      	movs	r3, r0
 8002544:	001a      	movs	r2, r3
 8002546:	4b2c      	ldr	r3, [pc, #176]	@ (80025f8 <return_holding_registers+0x150>)
 8002548:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = get_rx_buffer(1); // Append Function Code
 800254a:	2001      	movs	r0, #1
 800254c:	f000 fc44 	bl	8002dd8 <get_rx_buffer>
 8002550:	0003      	movs	r3, r0
 8002552:	001a      	movs	r2, r3
 8002554:	4b28      	ldr	r3, [pc, #160]	@ (80025f8 <return_holding_registers+0x150>)
 8002556:	705a      	strb	r2, [r3, #1]
	modbus_tx_buffer[2] = num_registers * 2; // Append number of bytes
 8002558:	230a      	movs	r3, #10
 800255a:	18fb      	adds	r3, r7, r3
 800255c:	881b      	ldrh	r3, [r3, #0]
 800255e:	b2db      	uxtb	r3, r3
 8002560:	18db      	adds	r3, r3, r3
 8002562:	b2da      	uxtb	r2, r3
 8002564:	4b24      	ldr	r3, [pc, #144]	@ (80025f8 <return_holding_registers+0x150>)
 8002566:	709a      	strb	r2, [r3, #2]
	(*tx_len) = 3;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2203      	movs	r2, #3
 800256c:	701a      	strb	r2, [r3, #0]

	// Append the Register Values
	for(uint8_t i = 0; i < num_registers; i++)
 800256e:	230f      	movs	r3, #15
 8002570:	18fb      	adds	r3, r7, r3
 8002572:	2200      	movs	r2, #0
 8002574:	701a      	strb	r2, [r3, #0]
 8002576:	e02c      	b.n	80025d2 <return_holding_registers+0x12a>
	{
		modbus_tx_buffer[(*tx_len)++] = high_byte(holding_register_database[first_register_address + i]);
 8002578:	250c      	movs	r5, #12
 800257a:	197b      	adds	r3, r7, r5
 800257c:	881a      	ldrh	r2, [r3, #0]
 800257e:	240f      	movs	r4, #15
 8002580:	193b      	adds	r3, r7, r4
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	18d2      	adds	r2, r2, r3
 8002586:	4b1d      	ldr	r3, [pc, #116]	@ (80025fc <return_holding_registers+0x154>)
 8002588:	0052      	lsls	r2, r2, #1
 800258a:	5ad3      	ldrh	r3, [r2, r3]
 800258c:	0a1b      	lsrs	r3, r3, #8
 800258e:	b299      	uxth	r1, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	1c5a      	adds	r2, r3, #1
 8002596:	b2d0      	uxtb	r0, r2
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	7010      	strb	r0, [r2, #0]
 800259c:	001a      	movs	r2, r3
 800259e:	b2c9      	uxtb	r1, r1
 80025a0:	4b15      	ldr	r3, [pc, #84]	@ (80025f8 <return_holding_registers+0x150>)
 80025a2:	5499      	strb	r1, [r3, r2]
		modbus_tx_buffer[(*tx_len)++] = low_byte(holding_register_database[first_register_address + i]);
 80025a4:	197b      	adds	r3, r7, r5
 80025a6:	881a      	ldrh	r2, [r3, #0]
 80025a8:	193b      	adds	r3, r7, r4
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	18d2      	adds	r2, r2, r3
 80025ae:	4b13      	ldr	r3, [pc, #76]	@ (80025fc <return_holding_registers+0x154>)
 80025b0:	0052      	lsls	r2, r2, #1
 80025b2:	5ad1      	ldrh	r1, [r2, r3]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	1c5a      	adds	r2, r3, #1
 80025ba:	b2d0      	uxtb	r0, r2
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	7010      	strb	r0, [r2, #0]
 80025c0:	001a      	movs	r2, r3
 80025c2:	b2c9      	uxtb	r1, r1
 80025c4:	4b0c      	ldr	r3, [pc, #48]	@ (80025f8 <return_holding_registers+0x150>)
 80025c6:	5499      	strb	r1, [r3, r2]
	for(uint8_t i = 0; i < num_registers; i++)
 80025c8:	193b      	adds	r3, r7, r4
 80025ca:	781a      	ldrb	r2, [r3, #0]
 80025cc:	193b      	adds	r3, r7, r4
 80025ce:	3201      	adds	r2, #1
 80025d0:	701a      	strb	r2, [r3, #0]
 80025d2:	230f      	movs	r3, #15
 80025d4:	18fb      	adds	r3, r7, r3
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	b29b      	uxth	r3, r3
 80025da:	220a      	movs	r2, #10
 80025dc:	18ba      	adds	r2, r7, r2
 80025de:	8812      	ldrh	r2, [r2, #0]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d8c9      	bhi.n	8002578 <return_holding_registers+0xd0>
	}
	return modbus_send((*tx_len));
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	0018      	movs	r0, r3
 80025ea:	f000 fa19 	bl	8002a20 <modbus_send>
 80025ee:	0003      	movs	r3, r0
}
 80025f0:	0018      	movs	r0, r3
 80025f2:	46bd      	mov	sp, r7
 80025f4:	b004      	add	sp, #16
 80025f6:	bdb0      	pop	{r4, r5, r7, pc}
 80025f8:	20000790 	.word	0x20000790
 80025fc:	20000010 	.word	0x20000010

08002600 <edit_multiple_registers>:

int8_t edit_multiple_registers(uint8_t *tx_len)
{
 8002600:	b5b0      	push	{r4, r5, r7, lr}
 8002602:	b086      	sub	sp, #24
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
	(*tx_len) = 0;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	701a      	strb	r2, [r3, #0]

	// Handle Error Checking
	uint16_t first_register_address = (get_rx_buffer(2) << 8) | get_rx_buffer(3);
 800260e:	2002      	movs	r0, #2
 8002610:	f000 fbe2 	bl	8002dd8 <get_rx_buffer>
 8002614:	0003      	movs	r3, r0
 8002616:	021b      	lsls	r3, r3, #8
 8002618:	b21c      	sxth	r4, r3
 800261a:	2003      	movs	r0, #3
 800261c:	f000 fbdc 	bl	8002dd8 <get_rx_buffer>
 8002620:	0003      	movs	r3, r0
 8002622:	b21b      	sxth	r3, r3
 8002624:	4323      	orrs	r3, r4
 8002626:	b21a      	sxth	r2, r3
 8002628:	2314      	movs	r3, #20
 800262a:	18fb      	adds	r3, r7, r3
 800262c:	801a      	strh	r2, [r3, #0]

	uint16_t num_registers = (get_rx_buffer(4) << 8) | get_rx_buffer(5);
 800262e:	2004      	movs	r0, #4
 8002630:	f000 fbd2 	bl	8002dd8 <get_rx_buffer>
 8002634:	0003      	movs	r3, r0
 8002636:	021b      	lsls	r3, r3, #8
 8002638:	b21c      	sxth	r4, r3
 800263a:	2005      	movs	r0, #5
 800263c:	f000 fbcc 	bl	8002dd8 <get_rx_buffer>
 8002640:	0003      	movs	r3, r0
 8002642:	b21b      	sxth	r3, r3
 8002644:	4323      	orrs	r3, r4
 8002646:	b21a      	sxth	r2, r3
 8002648:	2112      	movs	r1, #18
 800264a:	187b      	adds	r3, r7, r1
 800264c:	801a      	strh	r2, [r3, #0]

	if(num_registers > 125 || num_registers < 1) // 125 is the limit according to modbus protocol
 800264e:	000a      	movs	r2, r1
 8002650:	18bb      	adds	r3, r7, r2
 8002652:	881b      	ldrh	r3, [r3, #0]
 8002654:	2b7d      	cmp	r3, #125	@ 0x7d
 8002656:	d803      	bhi.n	8002660 <edit_multiple_registers+0x60>
 8002658:	18bb      	adds	r3, r7, r2
 800265a:	881b      	ldrh	r3, [r3, #0]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d104      	bne.n	800266a <edit_multiple_registers+0x6a>
	{
		return modbus_exception(MB_ILLEGAL_DATA_VALUE);
 8002660:	2006      	movs	r0, #6
 8002662:	f000 f8cf 	bl	8002804 <modbus_exception>
 8002666:	0003      	movs	r3, r0
 8002668:	e0c3      	b.n	80027f2 <edit_multiple_registers+0x1f2>
	}

	uint16_t last_register_address = first_register_address + (num_registers - 1);
 800266a:	2312      	movs	r3, #18
 800266c:	18fa      	adds	r2, r7, r3
 800266e:	2314      	movs	r3, #20
 8002670:	18fb      	adds	r3, r7, r3
 8002672:	8812      	ldrh	r2, [r2, #0]
 8002674:	881b      	ldrh	r3, [r3, #0]
 8002676:	18d3      	adds	r3, r2, r3
 8002678:	b29a      	uxth	r2, r3
 800267a:	2110      	movs	r1, #16
 800267c:	187b      	adds	r3, r7, r1
 800267e:	3a01      	subs	r2, #1
 8002680:	801a      	strh	r2, [r3, #0]

	if(last_register_address > NUM_HOLDING_REGISTERS)
 8002682:	187b      	adds	r3, r7, r1
 8002684:	881b      	ldrh	r3, [r3, #0]
 8002686:	2b50      	cmp	r3, #80	@ 0x50
 8002688:	d904      	bls.n	8002694 <edit_multiple_registers+0x94>
	{
		return modbus_exception(MB_ILLEGAL_DATA_ADDRESS);
 800268a:	2005      	movs	r0, #5
 800268c:	f000 f8ba 	bl	8002804 <modbus_exception>
 8002690:	0003      	movs	r3, r0
 8002692:	e0ae      	b.n	80027f2 <edit_multiple_registers+0x1f2>
	}

	// Protect Read only values
	if(((first_register_address >= ADC_0) && (first_register_address <= ENCODER_SPEED)) ||
 8002694:	2214      	movs	r2, #20
 8002696:	18bb      	adds	r3, r7, r2
 8002698:	881b      	ldrh	r3, [r3, #0]
 800269a:	2b08      	cmp	r3, #8
 800269c:	d903      	bls.n	80026a6 <edit_multiple_registers+0xa6>
 800269e:	18bb      	adds	r3, r7, r2
 80026a0:	881b      	ldrh	r3, [r3, #0]
 80026a2:	2b3e      	cmp	r3, #62	@ 0x3e
 80026a4:	d912      	bls.n	80026cc <edit_multiple_registers+0xcc>
 80026a6:	2210      	movs	r2, #16
 80026a8:	18bb      	adds	r3, r7, r2
 80026aa:	881b      	ldrh	r3, [r3, #0]
 80026ac:	2b08      	cmp	r3, #8
 80026ae:	d903      	bls.n	80026b8 <edit_multiple_registers+0xb8>
		 ((last_register_address >= ADC_0) && (last_register_address <= ENCODER_SPEED)) ||
 80026b0:	18bb      	adds	r3, r7, r2
 80026b2:	881b      	ldrh	r3, [r3, #0]
 80026b4:	2b3e      	cmp	r3, #62	@ 0x3e
 80026b6:	d909      	bls.n	80026cc <edit_multiple_registers+0xcc>
 80026b8:	2314      	movs	r3, #20
 80026ba:	18fb      	adds	r3, r7, r3
 80026bc:	881b      	ldrh	r3, [r3, #0]
 80026be:	2b08      	cmp	r3, #8
 80026c0:	d809      	bhi.n	80026d6 <edit_multiple_registers+0xd6>
		 ((first_register_address < ADC_0) && (last_register_address > ENCODER_SPEED)))
 80026c2:	2310      	movs	r3, #16
 80026c4:	18fb      	adds	r3, r7, r3
 80026c6:	881b      	ldrh	r3, [r3, #0]
 80026c8:	2b3e      	cmp	r3, #62	@ 0x3e
 80026ca:	d904      	bls.n	80026d6 <edit_multiple_registers+0xd6>
	{
		// Ensure that sensor values are restricted to read-only
		return modbus_exception(MB_ILLEGAL_FUNCTION);
 80026cc:	2004      	movs	r0, #4
 80026ce:	f000 f899 	bl	8002804 <modbus_exception>
 80026d2:	0003      	movs	r3, r0
 80026d4:	e08d      	b.n	80027f2 <edit_multiple_registers+0x1f2>
	}

	// Edit holding registers
	modbus_tx_buffer[0] = get_rx_buffer(0); // Append Slave id
 80026d6:	2000      	movs	r0, #0
 80026d8:	f000 fb7e 	bl	8002dd8 <get_rx_buffer>
 80026dc:	0003      	movs	r3, r0
 80026de:	001a      	movs	r2, r3
 80026e0:	4b46      	ldr	r3, [pc, #280]	@ (80027fc <edit_multiple_registers+0x1fc>)
 80026e2:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = get_rx_buffer(1); // Append Function Code
 80026e4:	2001      	movs	r0, #1
 80026e6:	f000 fb77 	bl	8002dd8 <get_rx_buffer>
 80026ea:	0003      	movs	r3, r0
 80026ec:	001a      	movs	r2, r3
 80026ee:	4b43      	ldr	r3, [pc, #268]	@ (80027fc <edit_multiple_registers+0x1fc>)
 80026f0:	705a      	strb	r2, [r3, #1]
	// Append the Write Address (high byte then low byte)
	modbus_tx_buffer[2] = get_rx_buffer(2);
 80026f2:	2002      	movs	r0, #2
 80026f4:	f000 fb70 	bl	8002dd8 <get_rx_buffer>
 80026f8:	0003      	movs	r3, r0
 80026fa:	001a      	movs	r2, r3
 80026fc:	4b3f      	ldr	r3, [pc, #252]	@ (80027fc <edit_multiple_registers+0x1fc>)
 80026fe:	709a      	strb	r2, [r3, #2]
	modbus_tx_buffer[3] = get_rx_buffer(3);
 8002700:	2003      	movs	r0, #3
 8002702:	f000 fb69 	bl	8002dd8 <get_rx_buffer>
 8002706:	0003      	movs	r3, r0
 8002708:	001a      	movs	r2, r3
 800270a:	4b3c      	ldr	r3, [pc, #240]	@ (80027fc <edit_multiple_registers+0x1fc>)
 800270c:	70da      	strb	r2, [r3, #3]
	// Append the quantity of registers to be written (high byte then low byte)
	modbus_tx_buffer[4] = get_rx_buffer(4);
 800270e:	2004      	movs	r0, #4
 8002710:	f000 fb62 	bl	8002dd8 <get_rx_buffer>
 8002714:	0003      	movs	r3, r0
 8002716:	001a      	movs	r2, r3
 8002718:	4b38      	ldr	r3, [pc, #224]	@ (80027fc <edit_multiple_registers+0x1fc>)
 800271a:	711a      	strb	r2, [r3, #4]
	modbus_tx_buffer[5] = get_rx_buffer(5);
 800271c:	2005      	movs	r0, #5
 800271e:	f000 fb5b 	bl	8002dd8 <get_rx_buffer>
 8002722:	0003      	movs	r3, r0
 8002724:	001a      	movs	r2, r3
 8002726:	4b35      	ldr	r3, [pc, #212]	@ (80027fc <edit_multiple_registers+0x1fc>)
 8002728:	715a      	strb	r2, [r3, #5]
	(*tx_len) = 6;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2206      	movs	r2, #6
 800272e:	701a      	strb	r2, [r3, #0]

	for(uint8_t i = 0; i < num_registers; i++)
 8002730:	2317      	movs	r3, #23
 8002732:	18fb      	adds	r3, r7, r3
 8002734:	2200      	movs	r2, #0
 8002736:	701a      	strb	r2, [r3, #0]
 8002738:	e032      	b.n	80027a0 <edit_multiple_registers+0x1a0>
	{
		holding_register_database[first_register_address + i] = (get_rx_buffer(2 * i + 7) << 8) | get_rx_buffer(2 * i + 8);
 800273a:	2517      	movs	r5, #23
 800273c:	197b      	adds	r3, r7, r5
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	18db      	adds	r3, r3, r3
 8002742:	b2db      	uxtb	r3, r3
 8002744:	3307      	adds	r3, #7
 8002746:	b2db      	uxtb	r3, r3
 8002748:	0018      	movs	r0, r3
 800274a:	f000 fb45 	bl	8002dd8 <get_rx_buffer>
 800274e:	0003      	movs	r3, r0
 8002750:	021b      	lsls	r3, r3, #8
 8002752:	b21c      	sxth	r4, r3
 8002754:	197b      	adds	r3, r7, r5
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	3304      	adds	r3, #4
 800275a:	b2db      	uxtb	r3, r3
 800275c:	18db      	adds	r3, r3, r3
 800275e:	b2db      	uxtb	r3, r3
 8002760:	0018      	movs	r0, r3
 8002762:	f000 fb39 	bl	8002dd8 <get_rx_buffer>
 8002766:	0003      	movs	r3, r0
 8002768:	b21b      	sxth	r3, r3
 800276a:	4323      	orrs	r3, r4
 800276c:	b219      	sxth	r1, r3
 800276e:	2014      	movs	r0, #20
 8002770:	183b      	adds	r3, r7, r0
 8002772:	881a      	ldrh	r2, [r3, #0]
 8002774:	197b      	adds	r3, r7, r5
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	18d2      	adds	r2, r2, r3
 800277a:	b289      	uxth	r1, r1
 800277c:	4b20      	ldr	r3, [pc, #128]	@ (8002800 <edit_multiple_registers+0x200>)
 800277e:	0052      	lsls	r2, r2, #1
 8002780:	52d1      	strh	r1, [r2, r3]

		// Handle the range boundaries of each writable register
		handle_range(first_register_address + i);
 8002782:	197b      	adds	r3, r7, r5
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	b29a      	uxth	r2, r3
 8002788:	183b      	adds	r3, r7, r0
 800278a:	881b      	ldrh	r3, [r3, #0]
 800278c:	18d3      	adds	r3, r2, r3
 800278e:	b29b      	uxth	r3, r3
 8002790:	0018      	movs	r0, r3
 8002792:	f000 f85f 	bl	8002854 <handle_range>
	for(uint8_t i = 0; i < num_registers; i++)
 8002796:	197b      	adds	r3, r7, r5
 8002798:	781a      	ldrb	r2, [r3, #0]
 800279a:	197b      	adds	r3, r7, r5
 800279c:	3201      	adds	r2, #1
 800279e:	701a      	strb	r2, [r3, #0]
 80027a0:	2317      	movs	r3, #23
 80027a2:	18fb      	adds	r3, r7, r3
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	2212      	movs	r2, #18
 80027aa:	18ba      	adds	r2, r7, r2
 80027ac:	8812      	ldrh	r2, [r2, #0]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d8c3      	bhi.n	800273a <edit_multiple_registers+0x13a>

	// TIMING WORKAROUND START
//	HAL_Delay(1);
	// TIMING WORKAROUND END

	int8_t status = modbus_send((*tx_len));
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	250f      	movs	r5, #15
 80027b8:	197c      	adds	r4, r7, r5
 80027ba:	0018      	movs	r0, r3
 80027bc:	f000 f930 	bl	8002a20 <modbus_send>
 80027c0:	0003      	movs	r3, r0
 80027c2:	7023      	strb	r3, [r4, #0]

	if(status == MB_SUCCESS)
 80027c4:	197b      	adds	r3, r7, r5
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	b25b      	sxtb	r3, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d10d      	bne.n	80027ea <edit_multiple_registers+0x1ea>
	{
		// Special Case Modbus Baud Rate Modification
		if((first_register_address <= 1) && last_register_address >= 1)
 80027ce:	2314      	movs	r3, #20
 80027d0:	18fb      	adds	r3, r7, r3
 80027d2:	881b      	ldrh	r3, [r3, #0]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d808      	bhi.n	80027ea <edit_multiple_registers+0x1ea>
 80027d8:	2310      	movs	r3, #16
 80027da:	18fb      	adds	r3, r7, r3
 80027dc:	881b      	ldrh	r3, [r3, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d003      	beq.n	80027ea <edit_multiple_registers+0x1ea>
		{
			return modbus_change_baud_rate();
 80027e2:	f000 fa6d 	bl	8002cc0 <modbus_change_baud_rate>
 80027e6:	0003      	movs	r3, r0
 80027e8:	e003      	b.n	80027f2 <edit_multiple_registers+0x1f2>
		}
	}
	return status;
 80027ea:	230f      	movs	r3, #15
 80027ec:	18fb      	adds	r3, r7, r3
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	b25b      	sxtb	r3, r3
}
 80027f2:	0018      	movs	r0, r3
 80027f4:	46bd      	mov	sp, r7
 80027f6:	b006      	add	sp, #24
 80027f8:	bdb0      	pop	{r4, r5, r7, pc}
 80027fa:	46c0      	nop			@ (mov r8, r8)
 80027fc:	20000790 	.word	0x20000790
 8002800:	20000010 	.word	0x20000010

08002804 <modbus_exception>:

int8_t modbus_exception(int8_t exception_code)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	0002      	movs	r2, r0
 800280c:	1dfb      	adds	r3, r7, #7
 800280e:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[0] = get_rx_buffer(0);
 8002810:	2000      	movs	r0, #0
 8002812:	f000 fae1 	bl	8002dd8 <get_rx_buffer>
 8002816:	0003      	movs	r3, r0
 8002818:	001a      	movs	r2, r3
 800281a:	4b0d      	ldr	r3, [pc, #52]	@ (8002850 <modbus_exception+0x4c>)
 800281c:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = get_rx_buffer(1) | 0x80;
 800281e:	2001      	movs	r0, #1
 8002820:	f000 fada 	bl	8002dd8 <get_rx_buffer>
 8002824:	0003      	movs	r3, r0
 8002826:	001a      	movs	r2, r3
 8002828:	2380      	movs	r3, #128	@ 0x80
 800282a:	425b      	negs	r3, r3
 800282c:	4313      	orrs	r3, r2
 800282e:	b2da      	uxtb	r2, r3
 8002830:	4b07      	ldr	r3, [pc, #28]	@ (8002850 <modbus_exception+0x4c>)
 8002832:	705a      	strb	r2, [r3, #1]
	modbus_tx_buffer[2] = exception_code - 3; // Subtract 3 to match the modbus defined error code value
 8002834:	1dfb      	adds	r3, r7, #7
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	3b03      	subs	r3, #3
 800283a:	b2da      	uxtb	r2, r3
 800283c:	4b04      	ldr	r3, [pc, #16]	@ (8002850 <modbus_exception+0x4c>)
 800283e:	709a      	strb	r2, [r3, #2]

	return modbus_send(3);
 8002840:	2003      	movs	r0, #3
 8002842:	f000 f8ed 	bl	8002a20 <modbus_send>
 8002846:	0003      	movs	r3, r0
}
 8002848:	0018      	movs	r0, r3
 800284a:	46bd      	mov	sp, r7
 800284c:	b002      	add	sp, #8
 800284e:	bd80      	pop	{r7, pc}
 8002850:	20000790 	.word	0x20000790

08002854 <handle_range>:

void handle_range(uint16_t holding_register)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	0002      	movs	r2, r0
 800285c:	1dbb      	adds	r3, r7, #6
 800285e:	801a      	strh	r2, [r3, #0]
	switch(holding_register)
 8002860:	1dbb      	adds	r3, r7, #6
 8002862:	881b      	ldrh	r3, [r3, #0]
 8002864:	2b42      	cmp	r3, #66	@ 0x42
 8002866:	d900      	bls.n	800286a <handle_range+0x16>
 8002868:	e0cc      	b.n	8002a04 <handle_range+0x1b0>
 800286a:	009a      	lsls	r2, r3, #2
 800286c:	4b67      	ldr	r3, [pc, #412]	@ (8002a0c <handle_range+0x1b8>)
 800286e:	18d3      	adds	r3, r2, r3
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	469f      	mov	pc, r3
	{
		case MODBUS_ID:
		{
			if(holding_register_database[holding_register] > 0xFF)
 8002874:	1dbb      	adds	r3, r7, #6
 8002876:	881a      	ldrh	r2, [r3, #0]
 8002878:	4b65      	ldr	r3, [pc, #404]	@ (8002a10 <handle_range+0x1bc>)
 800287a:	0052      	lsls	r2, r2, #1
 800287c:	5ad3      	ldrh	r3, [r2, r3]
 800287e:	2bff      	cmp	r3, #255	@ 0xff
 8002880:	d800      	bhi.n	8002884 <handle_range+0x30>
 8002882:	e0ae      	b.n	80029e2 <handle_range+0x18e>
			{
				holding_register_database[holding_register] = 0xFF;
 8002884:	1dbb      	adds	r3, r7, #6
 8002886:	881a      	ldrh	r2, [r3, #0]
 8002888:	4b61      	ldr	r3, [pc, #388]	@ (8002a10 <handle_range+0x1bc>)
 800288a:	0052      	lsls	r2, r2, #1
 800288c:	21ff      	movs	r1, #255	@ 0xff
 800288e:	52d1      	strh	r1, [r2, r3]
			}
			break;
 8002890:	e0a7      	b.n	80029e2 <handle_range+0x18e>
		}
		case MB_BAUD_RATE:
		{
			if(holding_register_database[holding_register] < BAUD_RATE_4800)
 8002892:	1dbb      	adds	r3, r7, #6
 8002894:	881a      	ldrh	r2, [r3, #0]
 8002896:	4b5e      	ldr	r3, [pc, #376]	@ (8002a10 <handle_range+0x1bc>)
 8002898:	0052      	lsls	r2, r2, #1
 800289a:	5ad3      	ldrh	r3, [r2, r3]
 800289c:	2b01      	cmp	r3, #1
 800289e:	d806      	bhi.n	80028ae <handle_range+0x5a>
			{
				holding_register_database[holding_register] = BAUD_RATE_4800;
 80028a0:	1dbb      	adds	r3, r7, #6
 80028a2:	881a      	ldrh	r2, [r3, #0]
 80028a4:	4b5a      	ldr	r3, [pc, #360]	@ (8002a10 <handle_range+0x1bc>)
 80028a6:	0052      	lsls	r2, r2, #1
 80028a8:	2102      	movs	r1, #2
 80028aa:	52d1      	strh	r1, [r2, r3]
			}
			else if(holding_register_database[holding_register] > BAUD_RATE_256000)
			{
				holding_register_database[holding_register] = BAUD_RATE_256000;
			}
			break;
 80028ac:	e09b      	b.n	80029e6 <handle_range+0x192>
			else if(holding_register_database[holding_register] > BAUD_RATE_256000)
 80028ae:	1dbb      	adds	r3, r7, #6
 80028b0:	881a      	ldrh	r2, [r3, #0]
 80028b2:	4b57      	ldr	r3, [pc, #348]	@ (8002a10 <handle_range+0x1bc>)
 80028b4:	0052      	lsls	r2, r2, #1
 80028b6:	5ad3      	ldrh	r3, [r2, r3]
 80028b8:	2b09      	cmp	r3, #9
 80028ba:	d800      	bhi.n	80028be <handle_range+0x6a>
 80028bc:	e093      	b.n	80029e6 <handle_range+0x192>
				holding_register_database[holding_register] = BAUD_RATE_256000;
 80028be:	1dbb      	adds	r3, r7, #6
 80028c0:	881a      	ldrh	r2, [r3, #0]
 80028c2:	4b53      	ldr	r3, [pc, #332]	@ (8002a10 <handle_range+0x1bc>)
 80028c4:	0052      	lsls	r2, r2, #1
 80028c6:	2109      	movs	r1, #9
 80028c8:	52d1      	strh	r1, [r2, r3]
			break;
 80028ca:	e08c      	b.n	80029e6 <handle_range+0x192>
		}
		case MB_TRANSMIT_TIMEOUT:
		{
			if(holding_register_database[holding_register] < 5)
 80028cc:	1dbb      	adds	r3, r7, #6
 80028ce:	881a      	ldrh	r2, [r3, #0]
 80028d0:	4b4f      	ldr	r3, [pc, #316]	@ (8002a10 <handle_range+0x1bc>)
 80028d2:	0052      	lsls	r2, r2, #1
 80028d4:	5ad3      	ldrh	r3, [r2, r3]
 80028d6:	2b04      	cmp	r3, #4
 80028d8:	d806      	bhi.n	80028e8 <handle_range+0x94>
			{
				holding_register_database[holding_register] = 5;
 80028da:	1dbb      	adds	r3, r7, #6
 80028dc:	881a      	ldrh	r2, [r3, #0]
 80028de:	4b4c      	ldr	r3, [pc, #304]	@ (8002a10 <handle_range+0x1bc>)
 80028e0:	0052      	lsls	r2, r2, #1
 80028e2:	2105      	movs	r1, #5
 80028e4:	52d1      	strh	r1, [r2, r3]
			}
			else if(holding_register_database[holding_register] > 1000)
			{
				holding_register_database[holding_register] = 1000;
			}
			break;
 80028e6:	e080      	b.n	80029ea <handle_range+0x196>
			else if(holding_register_database[holding_register] > 1000)
 80028e8:	1dbb      	adds	r3, r7, #6
 80028ea:	881a      	ldrh	r2, [r3, #0]
 80028ec:	4b48      	ldr	r3, [pc, #288]	@ (8002a10 <handle_range+0x1bc>)
 80028ee:	0052      	lsls	r2, r2, #1
 80028f0:	5ad2      	ldrh	r2, [r2, r3]
 80028f2:	23fa      	movs	r3, #250	@ 0xfa
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d800      	bhi.n	80028fc <handle_range+0xa8>
 80028fa:	e076      	b.n	80029ea <handle_range+0x196>
				holding_register_database[holding_register] = 1000;
 80028fc:	1dbb      	adds	r3, r7, #6
 80028fe:	881a      	ldrh	r2, [r3, #0]
 8002900:	4b43      	ldr	r3, [pc, #268]	@ (8002a10 <handle_range+0x1bc>)
 8002902:	0052      	lsls	r2, r2, #1
 8002904:	21fa      	movs	r1, #250	@ 0xfa
 8002906:	0089      	lsls	r1, r1, #2
 8002908:	52d1      	strh	r1, [r2, r3]
			break;
 800290a:	e06e      	b.n	80029ea <handle_range+0x196>
		}
		case MB_TRANSMIT_RETRIES:
		{
			if(holding_register_database[holding_register] > 5)
 800290c:	1dbb      	adds	r3, r7, #6
 800290e:	881a      	ldrh	r2, [r3, #0]
 8002910:	4b3f      	ldr	r3, [pc, #252]	@ (8002a10 <handle_range+0x1bc>)
 8002912:	0052      	lsls	r2, r2, #1
 8002914:	5ad3      	ldrh	r3, [r2, r3]
 8002916:	2b05      	cmp	r3, #5
 8002918:	d800      	bhi.n	800291c <handle_range+0xc8>
 800291a:	e068      	b.n	80029ee <handle_range+0x19a>
			{
				holding_register_database[holding_register] = 5;
 800291c:	1dbb      	adds	r3, r7, #6
 800291e:	881a      	ldrh	r2, [r3, #0]
 8002920:	4b3b      	ldr	r3, [pc, #236]	@ (8002a10 <handle_range+0x1bc>)
 8002922:	0052      	lsls	r2, r2, #1
 8002924:	2105      	movs	r1, #5
 8002926:	52d1      	strh	r1, [r2, r3]
			}
			break;
 8002928:	e061      	b.n	80029ee <handle_range+0x19a>
		}
		case MB_ERRORS:
		{
			if(holding_register_database[holding_register] > 0x3FF)
 800292a:	1dbb      	adds	r3, r7, #6
 800292c:	881a      	ldrh	r2, [r3, #0]
 800292e:	4b38      	ldr	r3, [pc, #224]	@ (8002a10 <handle_range+0x1bc>)
 8002930:	0052      	lsls	r2, r2, #1
 8002932:	5ad2      	ldrh	r2, [r2, r3]
 8002934:	2380      	movs	r3, #128	@ 0x80
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	429a      	cmp	r2, r3
 800293a:	d35a      	bcc.n	80029f2 <handle_range+0x19e>
			{
				holding_register_database[holding_register] = 0x3FF;
 800293c:	1dbb      	adds	r3, r7, #6
 800293e:	881a      	ldrh	r2, [r3, #0]
 8002940:	4b33      	ldr	r3, [pc, #204]	@ (8002a10 <handle_range+0x1bc>)
 8002942:	0052      	lsls	r2, r2, #1
 8002944:	4933      	ldr	r1, [pc, #204]	@ (8002a14 <handle_range+0x1c0>)
 8002946:	52d1      	strh	r1, [r2, r3]
			}
			break;
 8002948:	e053      	b.n	80029f2 <handle_range+0x19e>
		}
		case I2C_ERRORS:
		{
			if(holding_register_database[holding_register] > 0x7F)
 800294a:	1dbb      	adds	r3, r7, #6
 800294c:	881a      	ldrh	r2, [r3, #0]
 800294e:	4b30      	ldr	r3, [pc, #192]	@ (8002a10 <handle_range+0x1bc>)
 8002950:	0052      	lsls	r2, r2, #1
 8002952:	5ad3      	ldrh	r3, [r2, r3]
 8002954:	2b7f      	cmp	r3, #127	@ 0x7f
 8002956:	d94e      	bls.n	80029f6 <handle_range+0x1a2>
			{
				holding_register_database[holding_register] = 0x7F;
 8002958:	1dbb      	adds	r3, r7, #6
 800295a:	881a      	ldrh	r2, [r3, #0]
 800295c:	4b2c      	ldr	r3, [pc, #176]	@ (8002a10 <handle_range+0x1bc>)
 800295e:	0052      	lsls	r2, r2, #1
 8002960:	217f      	movs	r1, #127	@ 0x7f
 8002962:	52d1      	strh	r1, [r2, r3]
			}
			break;
 8002964:	e047      	b.n	80029f6 <handle_range+0x1a2>
		}
		case I2C_SHUTDOWN ... AUTOPILOT:
		{
			if(holding_register_database[holding_register] > 1)
 8002966:	1dbb      	adds	r3, r7, #6
 8002968:	881a      	ldrh	r2, [r3, #0]
 800296a:	4b29      	ldr	r3, [pc, #164]	@ (8002a10 <handle_range+0x1bc>)
 800296c:	0052      	lsls	r2, r2, #1
 800296e:	5ad3      	ldrh	r3, [r2, r3]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d942      	bls.n	80029fa <handle_range+0x1a6>
			{
				holding_register_database[holding_register] = 1;
 8002974:	1dbb      	adds	r3, r7, #6
 8002976:	881a      	ldrh	r2, [r3, #0]
 8002978:	4b25      	ldr	r3, [pc, #148]	@ (8002a10 <handle_range+0x1bc>)
 800297a:	0052      	lsls	r2, r2, #1
 800297c:	2101      	movs	r1, #1
 800297e:	52d1      	strh	r1, [r2, r3]
			}
			break;
 8002980:	e03b      	b.n	80029fa <handle_range+0x1a6>
		}
		case ENCODER_REFRESH:
		{
			if(holding_register_database[holding_register] < 1000)
 8002982:	1dbb      	adds	r3, r7, #6
 8002984:	881a      	ldrh	r2, [r3, #0]
 8002986:	4b22      	ldr	r3, [pc, #136]	@ (8002a10 <handle_range+0x1bc>)
 8002988:	0052      	lsls	r2, r2, #1
 800298a:	5ad2      	ldrh	r2, [r2, r3]
 800298c:	23fa      	movs	r3, #250	@ 0xfa
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	429a      	cmp	r2, r3
 8002992:	d207      	bcs.n	80029a4 <handle_range+0x150>
			{
				holding_register_database[holding_register] = 1000;
 8002994:	1dbb      	adds	r3, r7, #6
 8002996:	881a      	ldrh	r2, [r3, #0]
 8002998:	4b1d      	ldr	r3, [pc, #116]	@ (8002a10 <handle_range+0x1bc>)
 800299a:	0052      	lsls	r2, r2, #1
 800299c:	21fa      	movs	r1, #250	@ 0xfa
 800299e:	0089      	lsls	r1, r1, #2
 80029a0:	52d1      	strh	r1, [r2, r3]
			}
			else if(holding_register_database[holding_register] > 10000)
			{
				holding_register_database[holding_register] = 10000;
			}
			break;
 80029a2:	e02c      	b.n	80029fe <handle_range+0x1aa>
			else if(holding_register_database[holding_register] > 10000)
 80029a4:	1dbb      	adds	r3, r7, #6
 80029a6:	881a      	ldrh	r2, [r3, #0]
 80029a8:	4b19      	ldr	r3, [pc, #100]	@ (8002a10 <handle_range+0x1bc>)
 80029aa:	0052      	lsls	r2, r2, #1
 80029ac:	5ad3      	ldrh	r3, [r2, r3]
 80029ae:	4a1a      	ldr	r2, [pc, #104]	@ (8002a18 <handle_range+0x1c4>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d924      	bls.n	80029fe <handle_range+0x1aa>
				holding_register_database[holding_register] = 10000;
 80029b4:	1dbb      	adds	r3, r7, #6
 80029b6:	881a      	ldrh	r2, [r3, #0]
 80029b8:	4b15      	ldr	r3, [pc, #84]	@ (8002a10 <handle_range+0x1bc>)
 80029ba:	0052      	lsls	r2, r2, #1
 80029bc:	4916      	ldr	r1, [pc, #88]	@ (8002a18 <handle_range+0x1c4>)
 80029be:	52d1      	strh	r1, [r2, r3]
			break;
 80029c0:	e01d      	b.n	80029fe <handle_range+0x1aa>
		}
		case ACTUATOR_A_TARGET ... ACTUATOR_C_TARGET:
		{
			if(holding_register_database[holding_register] > 0x0FFF)
 80029c2:	1dbb      	adds	r3, r7, #6
 80029c4:	881a      	ldrh	r2, [r3, #0]
 80029c6:	4b12      	ldr	r3, [pc, #72]	@ (8002a10 <handle_range+0x1bc>)
 80029c8:	0052      	lsls	r2, r2, #1
 80029ca:	5ad2      	ldrh	r2, [r2, r3]
 80029cc:	2380      	movs	r3, #128	@ 0x80
 80029ce:	015b      	lsls	r3, r3, #5
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d316      	bcc.n	8002a02 <handle_range+0x1ae>
			{
				holding_register_database[holding_register] = 0x0FFF;
 80029d4:	1dbb      	adds	r3, r7, #6
 80029d6:	881a      	ldrh	r2, [r3, #0]
 80029d8:	4b0d      	ldr	r3, [pc, #52]	@ (8002a10 <handle_range+0x1bc>)
 80029da:	0052      	lsls	r2, r2, #1
 80029dc:	490f      	ldr	r1, [pc, #60]	@ (8002a1c <handle_range+0x1c8>)
 80029de:	52d1      	strh	r1, [r2, r3]
			}
			break;
 80029e0:	e00f      	b.n	8002a02 <handle_range+0x1ae>
			break;
 80029e2:	46c0      	nop			@ (mov r8, r8)
 80029e4:	e00e      	b.n	8002a04 <handle_range+0x1b0>
			break;
 80029e6:	46c0      	nop			@ (mov r8, r8)
 80029e8:	e00c      	b.n	8002a04 <handle_range+0x1b0>
			break;
 80029ea:	46c0      	nop			@ (mov r8, r8)
 80029ec:	e00a      	b.n	8002a04 <handle_range+0x1b0>
			break;
 80029ee:	46c0      	nop			@ (mov r8, r8)
 80029f0:	e008      	b.n	8002a04 <handle_range+0x1b0>
			break;
 80029f2:	46c0      	nop			@ (mov r8, r8)
 80029f4:	e006      	b.n	8002a04 <handle_range+0x1b0>
			break;
 80029f6:	46c0      	nop			@ (mov r8, r8)
 80029f8:	e004      	b.n	8002a04 <handle_range+0x1b0>
			break;
 80029fa:	46c0      	nop			@ (mov r8, r8)
 80029fc:	e002      	b.n	8002a04 <handle_range+0x1b0>
			break;
 80029fe:	46c0      	nop			@ (mov r8, r8)
 8002a00:	e000      	b.n	8002a04 <handle_range+0x1b0>
			break;
 8002a02:	46c0      	nop			@ (mov r8, r8)
		}
	}
}
 8002a04:	46c0      	nop			@ (mov r8, r8)
 8002a06:	46bd      	mov	sp, r7
 8002a08:	b002      	add	sp, #8
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	0800abc8 	.word	0x0800abc8
 8002a10:	20000010 	.word	0x20000010
 8002a14:	000003ff 	.word	0x000003ff
 8002a18:	00002710 	.word	0x00002710
 8002a1c:	00000fff 	.word	0x00000fff

08002a20 <modbus_send>:
#endif // MB_SLAVE

// General Modbus Functions -------------------------------------------------------------------

int8_t modbus_send(uint8_t size)
{
 8002a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	0002      	movs	r2, r0
 8002a28:	1dfb      	adds	r3, r7, #7
 8002a2a:	701a      	strb	r2, [r3, #0]
	int8_t status = HAL_OK;
 8002a2c:	250f      	movs	r5, #15
 8002a2e:	197b      	adds	r3, r7, r5
 8002a30:	2200      	movs	r2, #0
 8002a32:	701a      	strb	r2, [r3, #0]
	// Append CRC (low byte then high byte)
	uint16_t crc = crc_16(modbus_tx_buffer, size);
 8002a34:	260c      	movs	r6, #12
 8002a36:	19bc      	adds	r4, r7, r6
 8002a38:	1dfb      	adds	r3, r7, #7
 8002a3a:	781a      	ldrb	r2, [r3, #0]
 8002a3c:	4b1f      	ldr	r3, [pc, #124]	@ (8002abc <modbus_send+0x9c>)
 8002a3e:	0011      	movs	r1, r2
 8002a40:	0018      	movs	r0, r3
 8002a42:	f000 f9f7 	bl	8002e34 <crc_16>
 8002a46:	0003      	movs	r3, r0
 8002a48:	8023      	strh	r3, [r4, #0]
	modbus_tx_buffer[size] = low_byte(crc);
 8002a4a:	1dfb      	adds	r3, r7, #7
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	19ba      	adds	r2, r7, r6
 8002a50:	8812      	ldrh	r2, [r2, #0]
 8002a52:	b2d1      	uxtb	r1, r2
 8002a54:	4a19      	ldr	r2, [pc, #100]	@ (8002abc <modbus_send+0x9c>)
 8002a56:	54d1      	strb	r1, [r2, r3]
	modbus_tx_buffer[size + 1] = high_byte(crc);
 8002a58:	19bb      	adds	r3, r7, r6
 8002a5a:	881b      	ldrh	r3, [r3, #0]
 8002a5c:	0a1b      	lsrs	r3, r3, #8
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	1dfb      	adds	r3, r7, #7
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	3301      	adds	r3, #1
 8002a66:	b2d1      	uxtb	r1, r2
 8002a68:	4a14      	ldr	r2, [pc, #80]	@ (8002abc <modbus_send+0x9c>)
 8002a6a:	54d1      	strb	r1, [r2, r3]

	uart_tx_int = 0; // This will enable tx timeout monitoring
 8002a6c:	4b14      	ldr	r3, [pc, #80]	@ (8002ac0 <modbus_send+0xa0>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	701a      	strb	r2, [r3, #0]
	tx_time = HAL_GetTick();
 8002a72:	f001 f921 	bl	8003cb8 <HAL_GetTick>
 8002a76:	0002      	movs	r2, r0
 8002a78:	4b12      	ldr	r3, [pc, #72]	@ (8002ac4 <modbus_send+0xa4>)
 8002a7a:	601a      	str	r2, [r3, #0]
	status = HAL_UART_Transmit_DMA(&huart1, modbus_tx_buffer, size + 2);
 8002a7c:	1dfb      	adds	r3, r7, #7
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	3302      	adds	r3, #2
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	490d      	ldr	r1, [pc, #52]	@ (8002abc <modbus_send+0x9c>)
 8002a88:	4b0f      	ldr	r3, [pc, #60]	@ (8002ac8 <modbus_send+0xa8>)
 8002a8a:	0018      	movs	r0, r3
 8002a8c:	f006 f848 	bl	8008b20 <HAL_UART_Transmit_DMA>
 8002a90:	0003      	movs	r3, r0
 8002a92:	001a      	movs	r2, r3
 8002a94:	197b      	adds	r3, r7, r5
 8002a96:	701a      	strb	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(huart1.hdmatx, DMA_IT_HT);
 8002a98:	4b0b      	ldr	r3, [pc, #44]	@ (8002ac8 <modbus_send+0xa8>)
 8002a9a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	4b09      	ldr	r3, [pc, #36]	@ (8002ac8 <modbus_send+0xa8>)
 8002aa2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2104      	movs	r1, #4
 8002aa8:	438a      	bics	r2, r1
 8002aaa:	601a      	str	r2, [r3, #0]
	return status;
 8002aac:	197b      	adds	r3, r7, r5
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	b25b      	sxtb	r3, r3
}
 8002ab2:	0018      	movs	r0, r3
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	b005      	add	sp, #20
 8002ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002aba:	46c0      	nop			@ (mov r8, r8)
 8002abc:	20000790 	.word	0x20000790
 8002ac0:	200000b1 	.word	0x200000b1
 8002ac4:	20000890 	.word	0x20000890
 8002ac8:	200004f4 	.word	0x200004f4

08002acc <modbus_reset>:

int8_t modbus_reset()
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
	int8_t status = 0;
 8002ad2:	1dfb      	adds	r3, r7, #7
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	701a      	strb	r2, [r3, #0]
	status = HAL_UART_Abort(&huart1);
 8002ad8:	4b30      	ldr	r3, [pc, #192]	@ (8002b9c <modbus_reset+0xd0>)
 8002ada:	0018      	movs	r0, r3
 8002adc:	f006 f8b2 	bl	8008c44 <HAL_UART_Abort>
 8002ae0:	0003      	movs	r3, r0
 8002ae2:	001a      	movs	r2, r3
 8002ae4:	1dfb      	adds	r3, r7, #7
 8002ae6:	701a      	strb	r2, [r3, #0]
	status |= HAL_UART_DeInit(&huart1);
 8002ae8:	4b2c      	ldr	r3, [pc, #176]	@ (8002b9c <modbus_reset+0xd0>)
 8002aea:	0018      	movs	r0, r3
 8002aec:	f005 ffd8 	bl	8008aa0 <HAL_UART_DeInit>
 8002af0:	0003      	movs	r3, r0
 8002af2:	b259      	sxtb	r1, r3
 8002af4:	1dfb      	adds	r3, r7, #7
 8002af6:	1dfa      	adds	r2, r7, #7
 8002af8:	7812      	ldrb	r2, [r2, #0]
 8002afa:	430a      	orrs	r2, r1
 8002afc:	701a      	strb	r2, [r3, #0]
	__USART1_FORCE_RESET();
 8002afe:	4b28      	ldr	r3, [pc, #160]	@ (8002ba0 <modbus_reset+0xd4>)
 8002b00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b02:	4b27      	ldr	r3, [pc, #156]	@ (8002ba0 <modbus_reset+0xd4>)
 8002b04:	2180      	movs	r1, #128	@ 0x80
 8002b06:	01c9      	lsls	r1, r1, #7
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	631a      	str	r2, [r3, #48]	@ 0x30
	HAL_Delay(100);
 8002b0c:	2064      	movs	r0, #100	@ 0x64
 8002b0e:	f001 f8dd 	bl	8003ccc <HAL_Delay>
	__USART1_RELEASE_RESET();
 8002b12:	4b23      	ldr	r3, [pc, #140]	@ (8002ba0 <modbus_reset+0xd4>)
 8002b14:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b16:	4b22      	ldr	r3, [pc, #136]	@ (8002ba0 <modbus_reset+0xd4>)
 8002b18:	4922      	ldr	r1, [pc, #136]	@ (8002ba4 <modbus_reset+0xd8>)
 8002b1a:	400a      	ands	r2, r1
 8002b1c:	631a      	str	r2, [r3, #48]	@ 0x30
	status = HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0);
 8002b1e:	481f      	ldr	r0, [pc, #124]	@ (8002b9c <modbus_reset+0xd0>)
 8002b20:	2300      	movs	r3, #0
 8002b22:	2200      	movs	r2, #0
 8002b24:	2100      	movs	r1, #0
 8002b26:	f007 fb2b 	bl	800a180 <HAL_RS485Ex_Init>
 8002b2a:	0003      	movs	r3, r0
 8002b2c:	001a      	movs	r2, r3
 8002b2e:	1dfb      	adds	r3, r7, #7
 8002b30:	701a      	strb	r2, [r3, #0]
	status |= HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8);
 8002b32:	4b1a      	ldr	r3, [pc, #104]	@ (8002b9c <modbus_reset+0xd0>)
 8002b34:	2100      	movs	r1, #0
 8002b36:	0018      	movs	r0, r3
 8002b38:	f007 fbe6 	bl	800a308 <HAL_UARTEx_SetTxFifoThreshold>
 8002b3c:	0003      	movs	r3, r0
 8002b3e:	b259      	sxtb	r1, r3
 8002b40:	1dfb      	adds	r3, r7, #7
 8002b42:	1dfa      	adds	r2, r7, #7
 8002b44:	7812      	ldrb	r2, [r2, #0]
 8002b46:	430a      	orrs	r2, r1
 8002b48:	701a      	strb	r2, [r3, #0]
	status |= HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8);
 8002b4a:	4b14      	ldr	r3, [pc, #80]	@ (8002b9c <modbus_reset+0xd0>)
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	0018      	movs	r0, r3
 8002b50:	f007 fc1a 	bl	800a388 <HAL_UARTEx_SetRxFifoThreshold>
 8002b54:	0003      	movs	r3, r0
 8002b56:	b259      	sxtb	r1, r3
 8002b58:	1dfb      	adds	r3, r7, #7
 8002b5a:	1dfa      	adds	r2, r7, #7
 8002b5c:	7812      	ldrb	r2, [r2, #0]
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	701a      	strb	r2, [r3, #0]
	status |= HAL_UARTEx_DisableFifoMode(&huart1);
 8002b62:	4b0e      	ldr	r3, [pc, #56]	@ (8002b9c <modbus_reset+0xd0>)
 8002b64:	0018      	movs	r0, r3
 8002b66:	f007 fb95 	bl	800a294 <HAL_UARTEx_DisableFifoMode>
 8002b6a:	0003      	movs	r3, r0
 8002b6c:	b259      	sxtb	r1, r3
 8002b6e:	1dfb      	adds	r3, r7, #7
 8002b70:	1dfa      	adds	r2, r7, #7
 8002b72:	7812      	ldrb	r2, [r2, #0]
 8002b74:	430a      	orrs	r2, r1
 8002b76:	701a      	strb	r2, [r3, #0]
	if(status != HAL_OK)
 8002b78:	1dfb      	adds	r3, r7, #7
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	b25b      	sxtb	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d004      	beq.n	8002b8c <modbus_reset+0xc0>
	{
		return handle_modbus_error(MB_FATAL_ERROR);
 8002b82:	2015      	movs	r0, #21
 8002b84:	f000 f938 	bl	8002df8 <handle_modbus_error>
 8002b88:	0003      	movs	r3, r0
 8002b8a:	e002      	b.n	8002b92 <modbus_reset+0xc6>
	}
	return status;
 8002b8c:	1dfb      	adds	r3, r7, #7
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	b25b      	sxtb	r3, r3
}
 8002b92:	0018      	movs	r0, r3
 8002b94:	46bd      	mov	sp, r7
 8002b96:	b002      	add	sp, #8
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	46c0      	nop			@ (mov r8, r8)
 8002b9c:	200004f4 	.word	0x200004f4
 8002ba0:	40021000 	.word	0x40021000
 8002ba4:	ffffbfff 	.word	0xffffbfff

08002ba8 <modbus_set_rx>:

int8_t modbus_set_rx()
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
	int8_t status = HAL_UARTEx_ReceiveToIdle_DMA(&huart1, modbus_rx_buffer, 6);
 8002bae:	490e      	ldr	r1, [pc, #56]	@ (8002be8 <modbus_set_rx+0x40>)
 8002bb0:	4b0e      	ldr	r3, [pc, #56]	@ (8002bec <modbus_set_rx+0x44>)
 8002bb2:	2206      	movs	r2, #6
 8002bb4:	0018      	movs	r0, r3
 8002bb6:	f007 fc29 	bl	800a40c <HAL_UARTEx_ReceiveToIdle_DMA>
 8002bba:	0003      	movs	r3, r0
 8002bbc:	001a      	movs	r2, r3
 8002bbe:	1dfb      	adds	r3, r7, #7
 8002bc0:	701a      	strb	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(huart1.hdmarx, DMA_IT_HT);
 8002bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8002bec <modbus_set_rx+0x44>)
 8002bc4:	2280      	movs	r2, #128	@ 0x80
 8002bc6:	589b      	ldr	r3, [r3, r2]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	4b07      	ldr	r3, [pc, #28]	@ (8002bec <modbus_set_rx+0x44>)
 8002bce:	2180      	movs	r1, #128	@ 0x80
 8002bd0:	585b      	ldr	r3, [r3, r1]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2104      	movs	r1, #4
 8002bd6:	438a      	bics	r2, r1
 8002bd8:	601a      	str	r2, [r3, #0]

	return status;
 8002bda:	1dfb      	adds	r3, r7, #7
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	b25b      	sxtb	r3, r3
}
 8002be0:	0018      	movs	r0, r3
 8002be2:	46bd      	mov	sp, r7
 8002be4:	b002      	add	sp, #8
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	20000690 	.word	0x20000690
 8002bec:	200004f4 	.word	0x200004f4

08002bf0 <monitor_modbus>:

int8_t monitor_modbus()
{
 8002bf0:	b590      	push	{r4, r7, lr}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
	int8_t status = MB_SUCCESS;
 8002bf6:	1dfb      	adds	r3, r7, #7
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	701a      	strb	r2, [r3, #0]

	// Chunk miss handling
	status = handle_chunk_miss();
 8002bfc:	1dfc      	adds	r4, r7, #7
 8002bfe:	f000 f95f 	bl	8002ec0 <handle_chunk_miss>
 8002c02:	0003      	movs	r3, r0
 8002c04:	7023      	strb	r3, [r4, #0]
	if(status != MB_SUCCESS)
 8002c06:	1dfb      	adds	r3, r7, #7
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	b25b      	sxtb	r3, r3
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d012      	beq.n	8002c36 <monitor_modbus+0x46>
	{
		status = modbus_reset();
 8002c10:	1dfc      	adds	r4, r7, #7
 8002c12:	f7ff ff5b 	bl	8002acc <modbus_reset>
 8002c16:	0003      	movs	r3, r0
 8002c18:	7023      	strb	r3, [r4, #0]
		if(status != MB_SUCCESS)
 8002c1a:	1dfb      	adds	r3, r7, #7
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	b25b      	sxtb	r3, r3
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d003      	beq.n	8002c2c <monitor_modbus+0x3c>
		{
			return status;
 8002c24:	1dfb      	adds	r3, r7, #7
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	b25b      	sxtb	r3, r3
 8002c2a:	e03c      	b.n	8002ca6 <monitor_modbus+0xb6>
		}
		return handle_modbus_error(MB_UART_ERROR);
 8002c2c:	2014      	movs	r0, #20
 8002c2e:	f000 f8e3 	bl	8002df8 <handle_modbus_error>
 8002c32:	0003      	movs	r3, r0
 8002c34:	e037      	b.n	8002ca6 <monitor_modbus+0xb6>
	}

	// Uart error handling
	if(uart_err_int)
 8002c36:	4b1e      	ldr	r3, [pc, #120]	@ (8002cb0 <monitor_modbus+0xc0>)
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d015      	beq.n	8002c6c <monitor_modbus+0x7c>
	{
		uart_err_int = 0;
 8002c40:	4b1b      	ldr	r3, [pc, #108]	@ (8002cb0 <monitor_modbus+0xc0>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	701a      	strb	r2, [r3, #0]
		status = modbus_reset();
 8002c46:	1dfc      	adds	r4, r7, #7
 8002c48:	f7ff ff40 	bl	8002acc <modbus_reset>
 8002c4c:	0003      	movs	r3, r0
 8002c4e:	7023      	strb	r3, [r4, #0]
		if(status != MB_SUCCESS)
 8002c50:	1dfb      	adds	r3, r7, #7
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	b25b      	sxtb	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d003      	beq.n	8002c62 <monitor_modbus+0x72>
		{
			return status;
 8002c5a:	1dfb      	adds	r3, r7, #7
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	b25b      	sxtb	r3, r3
 8002c60:	e021      	b.n	8002ca6 <monitor_modbus+0xb6>
		}
		return handle_modbus_error(MB_UART_ERROR);
 8002c62:	2014      	movs	r0, #20
 8002c64:	f000 f8c8 	bl	8002df8 <handle_modbus_error>
 8002c68:	0003      	movs	r3, r0
 8002c6a:	e01c      	b.n	8002ca6 <monitor_modbus+0xb6>
	}

	// TX timeout handling
	if(!uart_tx_int)
 8002c6c:	4b11      	ldr	r3, [pc, #68]	@ (8002cb4 <monitor_modbus+0xc4>)
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d114      	bne.n	8002ca0 <monitor_modbus+0xb0>
	{
		if(HAL_GetTick() - tx_time >= holding_register_database[MB_TRANSMIT_TIMEOUT])
 8002c76:	f001 f81f 	bl	8003cb8 <HAL_GetTick>
 8002c7a:	0002      	movs	r2, r0
 8002c7c:	4b0e      	ldr	r3, [pc, #56]	@ (8002cb8 <monitor_modbus+0xc8>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	4a0e      	ldr	r2, [pc, #56]	@ (8002cbc <monitor_modbus+0xcc>)
 8002c84:	8892      	ldrh	r2, [r2, #4]
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d307      	bcc.n	8002c9a <monitor_modbus+0xaa>
		{
			uart_tx_int = 1;
 8002c8a:	4b0a      	ldr	r3, [pc, #40]	@ (8002cb4 <monitor_modbus+0xc4>)
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	701a      	strb	r2, [r3, #0]
			return handle_modbus_error(MB_TX_TIMEOUT);
 8002c90:	2012      	movs	r0, #18
 8002c92:	f000 f8b1 	bl	8002df8 <handle_modbus_error>
 8002c96:	0003      	movs	r3, r0
 8002c98:	e005      	b.n	8002ca6 <monitor_modbus+0xb6>
		}
		status = HAL_BUSY;
 8002c9a:	1dfb      	adds	r3, r7, #7
 8002c9c:	2202      	movs	r2, #2
 8002c9e:	701a      	strb	r2, [r3, #0]
			}
			status = HAL_BUSY;
		}
	}
#endif
	return status;
 8002ca0:	1dfb      	adds	r3, r7, #7
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	b25b      	sxtb	r3, r3
}
 8002ca6:	0018      	movs	r0, r3
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	b003      	add	sp, #12
 8002cac:	bd90      	pop	{r4, r7, pc}
 8002cae:	46c0      	nop			@ (mov r8, r8)
 8002cb0:	20000899 	.word	0x20000899
 8002cb4:	200000b1 	.word	0x200000b1
 8002cb8:	20000890 	.word	0x20000890
 8002cbc:	20000010 	.word	0x20000010

08002cc0 <modbus_change_baud_rate>:

	return status;
}

int8_t modbus_change_baud_rate()
{
 8002cc0:	b590      	push	{r4, r7, lr}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
	int8_t status = 0;
 8002cc6:	1dfb      	adds	r3, r7, #7
 8002cc8:	2200      	movs	r2, #0
 8002cca:	701a      	strb	r2, [r3, #0]

	switch(holding_register_database[MB_BAUD_RATE])
 8002ccc:	4b3f      	ldr	r3, [pc, #252]	@ (8002dcc <modbus_change_baud_rate+0x10c>)
 8002cce:	885b      	ldrh	r3, [r3, #2]
 8002cd0:	2b09      	cmp	r3, #9
 8002cd2:	d831      	bhi.n	8002d38 <modbus_change_baud_rate+0x78>
 8002cd4:	009a      	lsls	r2, r3, #2
 8002cd6:	4b3e      	ldr	r3, [pc, #248]	@ (8002dd0 <modbus_change_baud_rate+0x110>)
 8002cd8:	18d3      	adds	r3, r2, r3
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	469f      	mov	pc, r3
	{
		case BAUD_RATE_2400:
		{
			huart1.Init.BaudRate = 2400;
 8002cde:	4b3d      	ldr	r3, [pc, #244]	@ (8002dd4 <modbus_change_baud_rate+0x114>)
 8002ce0:	2296      	movs	r2, #150	@ 0x96
 8002ce2:	0112      	lsls	r2, r2, #4
 8002ce4:	605a      	str	r2, [r3, #4]
			break;
 8002ce6:	e04e      	b.n	8002d86 <modbus_change_baud_rate+0xc6>
		}
		case BAUD_RATE_4800:
		{
			huart1.Init.BaudRate = 4800;
 8002ce8:	4b3a      	ldr	r3, [pc, #232]	@ (8002dd4 <modbus_change_baud_rate+0x114>)
 8002cea:	2296      	movs	r2, #150	@ 0x96
 8002cec:	0152      	lsls	r2, r2, #5
 8002cee:	605a      	str	r2, [r3, #4]
			break;
 8002cf0:	e049      	b.n	8002d86 <modbus_change_baud_rate+0xc6>
		}
		case BAUD_RATE_9600:
		{
			huart1.Init.BaudRate = 9600;
 8002cf2:	4b38      	ldr	r3, [pc, #224]	@ (8002dd4 <modbus_change_baud_rate+0x114>)
 8002cf4:	2296      	movs	r2, #150	@ 0x96
 8002cf6:	0192      	lsls	r2, r2, #6
 8002cf8:	605a      	str	r2, [r3, #4]
			break;
 8002cfa:	e044      	b.n	8002d86 <modbus_change_baud_rate+0xc6>
		}
		case BAUD_RATE_19200:
		{
			huart1.Init.BaudRate = 19200;
 8002cfc:	4b35      	ldr	r3, [pc, #212]	@ (8002dd4 <modbus_change_baud_rate+0x114>)
 8002cfe:	2296      	movs	r2, #150	@ 0x96
 8002d00:	01d2      	lsls	r2, r2, #7
 8002d02:	605a      	str	r2, [r3, #4]
			break;
 8002d04:	e03f      	b.n	8002d86 <modbus_change_baud_rate+0xc6>
		}
		case BAUD_RATE_38400:
		{
			huart1.Init.BaudRate = 38400;
 8002d06:	4b33      	ldr	r3, [pc, #204]	@ (8002dd4 <modbus_change_baud_rate+0x114>)
 8002d08:	2296      	movs	r2, #150	@ 0x96
 8002d0a:	0212      	lsls	r2, r2, #8
 8002d0c:	605a      	str	r2, [r3, #4]
			break;
 8002d0e:	e03a      	b.n	8002d86 <modbus_change_baud_rate+0xc6>
		}
		case BAUD_RATE_57600:
		{
			huart1.Init.BaudRate = 57600;
 8002d10:	4b30      	ldr	r3, [pc, #192]	@ (8002dd4 <modbus_change_baud_rate+0x114>)
 8002d12:	22e1      	movs	r2, #225	@ 0xe1
 8002d14:	0212      	lsls	r2, r2, #8
 8002d16:	605a      	str	r2, [r3, #4]
			break;
 8002d18:	e035      	b.n	8002d86 <modbus_change_baud_rate+0xc6>
		}
		case BAUD_RATE_115200:
		{
			huart1.Init.BaudRate = 115200;
 8002d1a:	4b2e      	ldr	r3, [pc, #184]	@ (8002dd4 <modbus_change_baud_rate+0x114>)
 8002d1c:	22e1      	movs	r2, #225	@ 0xe1
 8002d1e:	0252      	lsls	r2, r2, #9
 8002d20:	605a      	str	r2, [r3, #4]
			break;
 8002d22:	e030      	b.n	8002d86 <modbus_change_baud_rate+0xc6>
		}
		case BAUD_RATE_128000:
		{
			huart1.Init.BaudRate = 128000;
 8002d24:	4b2b      	ldr	r3, [pc, #172]	@ (8002dd4 <modbus_change_baud_rate+0x114>)
 8002d26:	22fa      	movs	r2, #250	@ 0xfa
 8002d28:	0252      	lsls	r2, r2, #9
 8002d2a:	605a      	str	r2, [r3, #4]
			break;
 8002d2c:	e02b      	b.n	8002d86 <modbus_change_baud_rate+0xc6>
		}
		case BAUD_RATE_256000:
		{
			huart1.Init.BaudRate = 256000;
 8002d2e:	4b29      	ldr	r3, [pc, #164]	@ (8002dd4 <modbus_change_baud_rate+0x114>)
 8002d30:	22fa      	movs	r2, #250	@ 0xfa
 8002d32:	0292      	lsls	r2, r2, #10
 8002d34:	605a      	str	r2, [r3, #4]
			break;
 8002d36:	e026      	b.n	8002d86 <modbus_change_baud_rate+0xc6>
		}
		default:
		{
			holding_register_database[MB_BAUD_RATE] = BAUD_RATE_9600;
 8002d38:	4b24      	ldr	r3, [pc, #144]	@ (8002dcc <modbus_change_baud_rate+0x10c>)
 8002d3a:	2203      	movs	r2, #3
 8002d3c:	805a      	strh	r2, [r3, #2]
			huart1.Init.BaudRate = 9600;
 8002d3e:	4b25      	ldr	r3, [pc, #148]	@ (8002dd4 <modbus_change_baud_rate+0x114>)
 8002d40:	2296      	movs	r2, #150	@ 0x96
 8002d42:	0192      	lsls	r2, r2, #6
 8002d44:	605a      	str	r2, [r3, #4]
			status = UART_SetConfig(&huart1);
 8002d46:	4b23      	ldr	r3, [pc, #140]	@ (8002dd4 <modbus_change_baud_rate+0x114>)
 8002d48:	0018      	movs	r0, r3
 8002d4a:	f006 fbe5 	bl	8009518 <UART_SetConfig>
 8002d4e:	0003      	movs	r3, r0
 8002d50:	001a      	movs	r2, r3
 8002d52:	1dfb      	adds	r3, r7, #7
 8002d54:	701a      	strb	r2, [r3, #0]
			if(status == HAL_OK)
 8002d56:	1dfb      	adds	r3, r7, #7
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	b25b      	sxtb	r3, r3
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d10d      	bne.n	8002d7c <modbus_change_baud_rate+0xbc>
			{
				status = modbus_reset();
 8002d60:	1dfc      	adds	r4, r7, #7
 8002d62:	f7ff feb3 	bl	8002acc <modbus_reset>
 8002d66:	0003      	movs	r3, r0
 8002d68:	7023      	strb	r3, [r4, #0]
				if(status != HAL_OK)
 8002d6a:	1dfb      	adds	r3, r7, #7
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	b25b      	sxtb	r3, r3
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d003      	beq.n	8002d7c <modbus_change_baud_rate+0xbc>
				{
					return status;
 8002d74:	1dfb      	adds	r3, r7, #7
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	b25b      	sxtb	r3, r3
 8002d7a:	e022      	b.n	8002dc2 <modbus_change_baud_rate+0x102>
				}
			}
			return handle_modbus_error(RANGE_ERROR);
 8002d7c:	200e      	movs	r0, #14
 8002d7e:	f000 f83b 	bl	8002df8 <handle_modbus_error>
 8002d82:	0003      	movs	r3, r0
 8002d84:	e01d      	b.n	8002dc2 <modbus_change_baud_rate+0x102>
		}
	}
	status = UART_SetConfig(&huart1);
 8002d86:	4b13      	ldr	r3, [pc, #76]	@ (8002dd4 <modbus_change_baud_rate+0x114>)
 8002d88:	0018      	movs	r0, r3
 8002d8a:	f006 fbc5 	bl	8009518 <UART_SetConfig>
 8002d8e:	0003      	movs	r3, r0
 8002d90:	001a      	movs	r2, r3
 8002d92:	1dfb      	adds	r3, r7, #7
 8002d94:	701a      	strb	r2, [r3, #0]
	if(status == HAL_OK)
 8002d96:	1dfb      	adds	r3, r7, #7
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	b25b      	sxtb	r3, r3
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d10d      	bne.n	8002dbc <modbus_change_baud_rate+0xfc>
	{
		// Log error, reset UART
		status = modbus_reset();
 8002da0:	1dfc      	adds	r4, r7, #7
 8002da2:	f7ff fe93 	bl	8002acc <modbus_reset>
 8002da6:	0003      	movs	r3, r0
 8002da8:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK)
 8002daa:	1dfb      	adds	r3, r7, #7
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	b25b      	sxtb	r3, r3
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d003      	beq.n	8002dbc <modbus_change_baud_rate+0xfc>
		{
			return status;
 8002db4:	1dfb      	adds	r3, r7, #7
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	b25b      	sxtb	r3, r3
 8002dba:	e002      	b.n	8002dc2 <modbus_change_baud_rate+0x102>
		}
	}

	return modbus_set_rx();
 8002dbc:	f7ff fef4 	bl	8002ba8 <modbus_set_rx>
 8002dc0:	0003      	movs	r3, r0
}
 8002dc2:	0018      	movs	r0, r3
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	b003      	add	sp, #12
 8002dc8:	bd90      	pop	{r4, r7, pc}
 8002dca:	46c0      	nop			@ (mov r8, r8)
 8002dcc:	20000010 	.word	0x20000010
 8002dd0:	0800acd4 	.word	0x0800acd4
 8002dd4:	200004f4 	.word	0x200004f4

08002dd8 <get_rx_buffer>:
}


// Low Level Functions -------------------------------------------------------------------------
uint8_t get_rx_buffer(uint8_t index)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	0002      	movs	r2, r0
 8002de0:	1dfb      	adds	r3, r7, #7
 8002de2:	701a      	strb	r2, [r3, #0]
	if (index < MODBUS_RX_BUFFER_SIZE)
	{
		return modbus_rx_buffer[index];
 8002de4:	1dfb      	adds	r3, r7, #7
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	4a02      	ldr	r2, [pc, #8]	@ (8002df4 <get_rx_buffer+0x1c>)
 8002dea:	5cd3      	ldrb	r3, [r2, r3]
	}
	return 0xFF;
}
 8002dec:	0018      	movs	r0, r3
 8002dee:	46bd      	mov	sp, r7
 8002df0:	b002      	add	sp, #8
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	20000690 	.word	0x20000690

08002df8 <handle_modbus_error>:

int8_t handle_modbus_error(int8_t error_code)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	0002      	movs	r2, r0
 8002e00:	1dfb      	adds	r3, r7, #7
 8002e02:	701a      	strb	r2, [r3, #0]
	holding_register_database[MB_ERRORS] |= 1U << (error_code - RANGE_ERROR);
 8002e04:	4b0a      	ldr	r3, [pc, #40]	@ (8002e30 <handle_modbus_error+0x38>)
 8002e06:	891a      	ldrh	r2, [r3, #8]
 8002e08:	1dfb      	adds	r3, r7, #7
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	b25b      	sxtb	r3, r3
 8002e0e:	3b0e      	subs	r3, #14
 8002e10:	2101      	movs	r1, #1
 8002e12:	4099      	lsls	r1, r3
 8002e14:	000b      	movs	r3, r1
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	b29a      	uxth	r2, r3
 8002e1c:	4b04      	ldr	r3, [pc, #16]	@ (8002e30 <handle_modbus_error+0x38>)
 8002e1e:	811a      	strh	r2, [r3, #8]
	return error_code;
 8002e20:	1dfb      	adds	r3, r7, #7
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	b25b      	sxtb	r3, r3
}
 8002e26:	0018      	movs	r0, r3
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	b002      	add	sp, #8
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	46c0      	nop			@ (mov r8, r8)
 8002e30:	20000010 	.word	0x20000010

08002e34 <crc_16>:

// Private Functions ---------------------------------------------------------------------------

uint16_t crc_16(uint8_t *data, uint8_t size)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	000a      	movs	r2, r1
 8002e3e:	1cfb      	adds	r3, r7, #3
 8002e40:	701a      	strb	r2, [r3, #0]
	uint8_t crc_hi = 0xFF;
 8002e42:	230f      	movs	r3, #15
 8002e44:	18fb      	adds	r3, r7, r3
 8002e46:	22ff      	movs	r2, #255	@ 0xff
 8002e48:	701a      	strb	r2, [r3, #0]
	uint8_t crc_low = 0xFF;
 8002e4a:	230e      	movs	r3, #14
 8002e4c:	18fb      	adds	r3, r7, r3
 8002e4e:	22ff      	movs	r2, #255	@ 0xff
 8002e50:	701a      	strb	r2, [r3, #0]
	 unsigned int i; /* will index into CRC lookup */

	/* pass through message buffer */
	while (size--)
 8002e52:	e019      	b.n	8002e88 <crc_16+0x54>
	{
		i = crc_low ^ *data++; /* calculate the CRC  */
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	1c5a      	adds	r2, r3, #1
 8002e58:	607a      	str	r2, [r7, #4]
 8002e5a:	781a      	ldrb	r2, [r3, #0]
 8002e5c:	200e      	movs	r0, #14
 8002e5e:	183b      	adds	r3, r7, r0
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	4053      	eors	r3, r2
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	60bb      	str	r3, [r7, #8]
		crc_low = crc_hi ^ table_crc_hi[i];
 8002e68:	4a13      	ldr	r2, [pc, #76]	@ (8002eb8 <crc_16+0x84>)
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	18d3      	adds	r3, r2, r3
 8002e6e:	7819      	ldrb	r1, [r3, #0]
 8002e70:	183b      	adds	r3, r7, r0
 8002e72:	200f      	movs	r0, #15
 8002e74:	183a      	adds	r2, r7, r0
 8002e76:	7812      	ldrb	r2, [r2, #0]
 8002e78:	404a      	eors	r2, r1
 8002e7a:	701a      	strb	r2, [r3, #0]
		crc_hi = table_crc_lo[i];
 8002e7c:	183b      	adds	r3, r7, r0
 8002e7e:	490f      	ldr	r1, [pc, #60]	@ (8002ebc <crc_16+0x88>)
 8002e80:	68ba      	ldr	r2, [r7, #8]
 8002e82:	188a      	adds	r2, r1, r2
 8002e84:	7812      	ldrb	r2, [r2, #0]
 8002e86:	701a      	strb	r2, [r3, #0]
	while (size--)
 8002e88:	1cfb      	adds	r3, r7, #3
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	1cfa      	adds	r2, r7, #3
 8002e8e:	1e59      	subs	r1, r3, #1
 8002e90:	7011      	strb	r1, [r2, #0]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1de      	bne.n	8002e54 <crc_16+0x20>
	}

	return (crc_hi << 8 | crc_low);
 8002e96:	230f      	movs	r3, #15
 8002e98:	18fb      	adds	r3, r7, r3
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	021b      	lsls	r3, r3, #8
 8002e9e:	b21a      	sxth	r2, r3
 8002ea0:	230e      	movs	r3, #14
 8002ea2:	18fb      	adds	r3, r7, r3
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	b21b      	sxth	r3, r3
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	b21b      	sxth	r3, r3
 8002eac:	b29b      	uxth	r3, r3
}
 8002eae:	0018      	movs	r0, r3
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	b004      	add	sp, #16
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	46c0      	nop			@ (mov r8, r8)
 8002eb8:	0800a9c8 	.word	0x0800a9c8
 8002ebc:	0800aac8 	.word	0x0800aac8

08002ec0 <handle_chunk_miss>:

int8_t handle_chunk_miss()
{
 8002ec0:	b590      	push	{r4, r7, lr}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
	if(modbus_header == 0)
 8002ec6:	4b15      	ldr	r3, [pc, #84]	@ (8002f1c <handle_chunk_miss+0x5c>)
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d120      	bne.n	8002f12 <handle_chunk_miss+0x52>
	{
		if(HAL_GetTick() - chunk_time > 10)
 8002ed0:	f000 fef2 	bl	8003cb8 <HAL_GetTick>
 8002ed4:	0002      	movs	r2, r0
 8002ed6:	4b12      	ldr	r3, [pc, #72]	@ (8002f20 <handle_chunk_miss+0x60>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	2b0a      	cmp	r3, #10
 8002ede:	d918      	bls.n	8002f12 <handle_chunk_miss+0x52>
		{
			modbus_header = 1;
 8002ee0:	4b0e      	ldr	r3, [pc, #56]	@ (8002f1c <handle_chunk_miss+0x5c>)
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	701a      	strb	r2, [r3, #0]
			int8_t status = HAL_UART_Abort(&huart1);
 8002ee6:	4b0f      	ldr	r3, [pc, #60]	@ (8002f24 <handle_chunk_miss+0x64>)
 8002ee8:	0018      	movs	r0, r3
 8002eea:	f005 feab 	bl	8008c44 <HAL_UART_Abort>
 8002eee:	0003      	movs	r3, r0
 8002ef0:	001a      	movs	r2, r3
 8002ef2:	1dfb      	adds	r3, r7, #7
 8002ef4:	701a      	strb	r2, [r3, #0]
			if(status == HAL_OK)
 8002ef6:	1dfb      	adds	r3, r7, #7
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	b25b      	sxtb	r3, r3
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d104      	bne.n	8002f0a <handle_chunk_miss+0x4a>
			{
				status = modbus_set_rx();
 8002f00:	1dfc      	adds	r4, r7, #7
 8002f02:	f7ff fe51 	bl	8002ba8 <modbus_set_rx>
 8002f06:	0003      	movs	r3, r0
 8002f08:	7023      	strb	r3, [r4, #0]
			}
			return status;
 8002f0a:	1dfb      	adds	r3, r7, #7
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	b25b      	sxtb	r3, r3
 8002f10:	e000      	b.n	8002f14 <handle_chunk_miss+0x54>
		}
	}
	return MB_SUCCESS;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	0018      	movs	r0, r3
 8002f16:	46bd      	mov	sp, r7
 8002f18:	b003      	add	sp, #12
 8002f1a:	bd90      	pop	{r4, r7, pc}
 8002f1c:	200000b0 	.word	0x200000b0
 8002f20:	20000894 	.word	0x20000894
 8002f24:	200004f4 	.word	0x200004f4

08002f28 <LL_ADC_REG_SetDMATransfer>:
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	2203      	movs	r2, #3
 8002f38:	4393      	bics	r3, r2
 8002f3a:	001a      	movs	r2, r3
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	431a      	orrs	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	60da      	str	r2, [r3, #12]
}
 8002f44:	46c0      	nop			@ (mov r8, r8)
 8002f46:	46bd      	mov	sp, r7
 8002f48:	b002      	add	sp, #8
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <LL_ADC_REG_GetDMATransfer>:
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	2203      	movs	r2, #3
 8002f5a:	4013      	ands	r3, r2
}
 8002f5c:	0018      	movs	r0, r3
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	b002      	add	sp, #8
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <LL_ADC_EnableInternalRegulator>:
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	4a05      	ldr	r2, [pc, #20]	@ (8002f88 <LL_ADC_EnableInternalRegulator+0x24>)
 8002f72:	4013      	ands	r3, r2
 8002f74:	2280      	movs	r2, #128	@ 0x80
 8002f76:	0552      	lsls	r2, r2, #21
 8002f78:	431a      	orrs	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	609a      	str	r2, [r3, #8]
}
 8002f7e:	46c0      	nop			@ (mov r8, r8)
 8002f80:	46bd      	mov	sp, r7
 8002f82:	b002      	add	sp, #8
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	46c0      	nop			@ (mov r8, r8)
 8002f88:	6fffffe8 	.word	0x6fffffe8

08002f8c <LL_ADC_Enable>:
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	4a04      	ldr	r2, [pc, #16]	@ (8002fac <LL_ADC_Enable+0x20>)
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	431a      	orrs	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	609a      	str	r2, [r3, #8]
}
 8002fa4:	46c0      	nop			@ (mov r8, r8)
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	b002      	add	sp, #8
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	7fffffe8 	.word	0x7fffffe8

08002fb0 <LL_ADC_IsEnabled>:
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d101      	bne.n	8002fc8 <LL_ADC_IsEnabled+0x18>
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e000      	b.n	8002fca <LL_ADC_IsEnabled+0x1a>
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	0018      	movs	r0, r3
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	b002      	add	sp, #8
 8002fd0:	bd80      	pop	{r7, pc}
	...

08002fd4 <LL_ADC_StartCalibration>:
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	4a05      	ldr	r2, [pc, #20]	@ (8002ff8 <LL_ADC_StartCalibration+0x24>)
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	2280      	movs	r2, #128	@ 0x80
 8002fe6:	0612      	lsls	r2, r2, #24
 8002fe8:	431a      	orrs	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	609a      	str	r2, [r3, #8]
}
 8002fee:	46c0      	nop			@ (mov r8, r8)
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	b002      	add	sp, #8
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	46c0      	nop			@ (mov r8, r8)
 8002ff8:	7fffffe8 	.word	0x7fffffe8

08002ffc <LL_ADC_IsCalibrationOnGoing>:
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	0fdb      	lsrs	r3, r3, #31
 800300a:	07da      	lsls	r2, r3, #31
 800300c:	2380      	movs	r3, #128	@ 0x80
 800300e:	061b      	lsls	r3, r3, #24
 8003010:	429a      	cmp	r2, r3
 8003012:	d101      	bne.n	8003018 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003014:	2301      	movs	r3, #1
 8003016:	e000      	b.n	800301a <LL_ADC_IsCalibrationOnGoing+0x1e>
 8003018:	2300      	movs	r3, #0
}
 800301a:	0018      	movs	r0, r3
 800301c:	46bd      	mov	sp, r7
 800301e:	b002      	add	sp, #8
 8003020:	bd80      	pop	{r7, pc}

08003022 <LL_ADC_IsActiveFlag_ADRDY>:
{
 8003022:	b580      	push	{r7, lr}
 8003024:	b082      	sub	sp, #8
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2201      	movs	r2, #1
 8003030:	4013      	ands	r3, r2
 8003032:	2b01      	cmp	r3, #1
 8003034:	d101      	bne.n	800303a <LL_ADC_IsActiveFlag_ADRDY+0x18>
 8003036:	2301      	movs	r3, #1
 8003038:	e000      	b.n	800303c <LL_ADC_IsActiveFlag_ADRDY+0x1a>
 800303a:	2300      	movs	r3, #0
}
 800303c:	0018      	movs	r0, r3
 800303e:	46bd      	mov	sp, r7
 8003040:	b002      	add	sp, #8
 8003042:	bd80      	pop	{r7, pc}

08003044 <LL_SYSTICK_IsActiveCounterFlag>:
{
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
  return (((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk)) ? 1UL : 0UL);
 8003048:	4b07      	ldr	r3, [pc, #28]	@ (8003068 <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	2380      	movs	r3, #128	@ 0x80
 800304e:	025b      	lsls	r3, r3, #9
 8003050:	401a      	ands	r2, r3
 8003052:	2380      	movs	r3, #128	@ 0x80
 8003054:	025b      	lsls	r3, r3, #9
 8003056:	429a      	cmp	r2, r3
 8003058:	d101      	bne.n	800305e <LL_SYSTICK_IsActiveCounterFlag+0x1a>
 800305a:	2301      	movs	r3, #1
 800305c:	e000      	b.n	8003060 <LL_SYSTICK_IsActiveCounterFlag+0x1c>
 800305e:	2300      	movs	r3, #0
}
 8003060:	0018      	movs	r0, r3
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	46c0      	nop			@ (mov r8, r8)
 8003068:	e000e010 	.word	0xe000e010

0800306c <ADC_ConvCpltCallback>:
#define VAR_CONVERTED_DATA_INIT_VALUE    (__LL_ADC_DIGITAL_SCALE(LL_ADC_RESOLUTION_12B) + 1)

volatile uint8_t low_half_safe;
volatile uint8_t adc_err_int;
void ADC_ConvCpltCallback()
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
	low_half_safe = 0;
 8003070:	4b02      	ldr	r3, [pc, #8]	@ (800307c <ADC_ConvCpltCallback+0x10>)
 8003072:	2200      	movs	r2, #0
 8003074:	701a      	strb	r2, [r3, #0]
}
 8003076:	46c0      	nop			@ (mov r8, r8)
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	2000089a 	.word	0x2000089a

08003080 <ADC_ConvHalfCpltCallback>:

void ADC_ConvHalfCpltCallback()
{
 8003080:	b580      	push	{r7, lr}
 8003082:	af00      	add	r7, sp, #0
	low_half_safe = 1;
 8003084:	4b02      	ldr	r3, [pc, #8]	@ (8003090 <ADC_ConvHalfCpltCallback+0x10>)
 8003086:	2201      	movs	r2, #1
 8003088:	701a      	strb	r2, [r3, #0]
}
 800308a:	46c0      	nop			@ (mov r8, r8)
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	2000089a 	.word	0x2000089a

08003094 <ADC_ErrorCallback>:

void ADC_ErrorCallback()
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
	adc_err_int = 1;
 8003098:	4b02      	ldr	r3, [pc, #8]	@ (80030a4 <ADC_ErrorCallback+0x10>)
 800309a:	2201      	movs	r2, #1
 800309c:	701a      	strb	r2, [r3, #0]
}
 800309e:	46c0      	nop			@ (mov r8, r8)
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	2000089b 	.word	0x2000089b

080030a8 <ADC_Activate>:

void ADC_Activate()
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
	low_half_safe = 0;
 80030ae:	4b3e      	ldr	r3, [pc, #248]	@ (80031a8 <ADC_Activate+0x100>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	701a      	strb	r2, [r3, #0]
	adc_err_int = 0;
 80030b4:	4b3d      	ldr	r3, [pc, #244]	@ (80031ac <ADC_Activate+0x104>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	701a      	strb	r2, [r3, #0]
	__IO uint32_t wait_loop_index = 0U;
 80030ba:	2300      	movs	r3, #0
 80030bc:	60bb      	str	r3, [r7, #8]
	__IO uint32_t backup_setting_adc_dma_transfer = 0U;
 80030be:	2300      	movs	r3, #0
 80030c0:	607b      	str	r3, [r7, #4]
	#if (USE_TIMEOUT == 1)
	uint32_t Timeout = 0U; /* Variable used for timeout management */
 80030c2:	2300      	movs	r3, #0
 80030c4:	60fb      	str	r3, [r7, #12]
	/*       implemented anyway to show the best practice usages                */
	/*       corresponding to reference manual procedure.                       */
	/*       Software can be optimized by removing some of these checks, if     */
	/*       they are not relevant considering previous settings and actions    */
	/*       in user application.                                               */
	if (LL_ADC_IsEnabled(ADC1) == 0)
 80030c6:	4b3a      	ldr	r3, [pc, #232]	@ (80031b0 <ADC_Activate+0x108>)
 80030c8:	0018      	movs	r0, r3
 80030ca:	f7ff ff71 	bl	8002fb0 <LL_ADC_IsEnabled>
 80030ce:	1e03      	subs	r3, r0, #0
 80030d0:	d166      	bne.n	80031a0 <ADC_Activate+0xf8>
	{
		/* Enable ADC internal voltage regulator */
		LL_ADC_EnableInternalRegulator(ADC1);
 80030d2:	4b37      	ldr	r3, [pc, #220]	@ (80031b0 <ADC_Activate+0x108>)
 80030d4:	0018      	movs	r0, r3
 80030d6:	f7ff ff45 	bl	8002f64 <LL_ADC_EnableInternalRegulator>
		/* Compute number of CPU cycles to wait for, from delay in us.            */
		/* Note: Variable divided by 2 to compensate partially                    */
		/*       CPU processing cycles (depends on compilation optimization).     */
		/* Note: If system core clock frequency is below 200kHz, wait time        */
		/*       is only a few CPU processing cycles.                             */
		wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 80030da:	4b36      	ldr	r3, [pc, #216]	@ (80031b4 <ADC_Activate+0x10c>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4936      	ldr	r1, [pc, #216]	@ (80031b8 <ADC_Activate+0x110>)
 80030e0:	0018      	movs	r0, r3
 80030e2:	f7fd f811 	bl	8000108 <__udivsi3>
 80030e6:	0003      	movs	r3, r0
 80030e8:	001a      	movs	r2, r3
 80030ea:	0013      	movs	r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	189b      	adds	r3, r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	210a      	movs	r1, #10
 80030f4:	0018      	movs	r0, r3
 80030f6:	f7fd f807 	bl	8000108 <__udivsi3>
 80030fa:	0003      	movs	r3, r0
 80030fc:	60bb      	str	r3, [r7, #8]
		while(wait_loop_index != 0)
 80030fe:	e002      	b.n	8003106 <ADC_Activate+0x5e>
		{
			wait_loop_index--;
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	3b01      	subs	r3, #1
 8003104:	60bb      	str	r3, [r7, #8]
		while(wait_loop_index != 0)
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1f9      	bne.n	8003100 <ADC_Activate+0x58>
		/* Note: Specificity of this STM32 series: Calibration factor is           */
		/*       available in data register and also transferred by DMA.           */
		/*       To not insert ADC calibration factor among ADC conversion data   */
		/*       in DMA destination address, DMA transfer must be disabled during */
		/*       calibration.                                                     */
		backup_setting_adc_dma_transfer = LL_ADC_REG_GetDMATransfer(ADC1);
 800310c:	4b28      	ldr	r3, [pc, #160]	@ (80031b0 <ADC_Activate+0x108>)
 800310e:	0018      	movs	r0, r3
 8003110:	f7ff ff1c 	bl	8002f4c <LL_ADC_REG_GetDMATransfer>
 8003114:	0003      	movs	r3, r0
 8003116:	607b      	str	r3, [r7, #4]
		LL_ADC_REG_SetDMATransfer(ADC1, LL_ADC_REG_DMA_TRANSFER_NONE);
 8003118:	4b25      	ldr	r3, [pc, #148]	@ (80031b0 <ADC_Activate+0x108>)
 800311a:	2100      	movs	r1, #0
 800311c:	0018      	movs	r0, r3
 800311e:	f7ff ff03 	bl	8002f28 <LL_ADC_REG_SetDMATransfer>

		/* Run ADC self calibration */
		LL_ADC_StartCalibration(ADC1);
 8003122:	4b23      	ldr	r3, [pc, #140]	@ (80031b0 <ADC_Activate+0x108>)
 8003124:	0018      	movs	r0, r3
 8003126:	f7ff ff55 	bl	8002fd4 <LL_ADC_StartCalibration>

		/* Poll for ADC effectively calibrated */
#if (USE_TIMEOUT == 1)
		Timeout = ADC_CALIBRATION_TIMEOUT_MS;
 800312a:	2301      	movs	r3, #1
 800312c:	60fb      	str	r3, [r7, #12]
#endif /* USE_TIMEOUT */

		while (LL_ADC_IsCalibrationOnGoing(ADC1) != 0)
 800312e:	e00a      	b.n	8003146 <ADC_Activate+0x9e>
		{
#if (USE_TIMEOUT == 1)
			/* Check Systick counter flag to decrement the time-out value */
			if (LL_SYSTICK_IsActiveCounterFlag())
 8003130:	f7ff ff88 	bl	8003044 <LL_SYSTICK_IsActiveCounterFlag>
 8003134:	1e03      	subs	r3, r0, #0
 8003136:	d006      	beq.n	8003146 <ADC_Activate+0x9e>
			{
				if(Timeout-- == 0)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	1e5a      	subs	r2, r3, #1
 800313c:	60fa      	str	r2, [r7, #12]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d101      	bne.n	8003146 <ADC_Activate+0x9e>
				{
					/* Error: Time-out */
					Error_Handler();
 8003142:	f7ff f917 	bl	8002374 <Error_Handler>
		while (LL_ADC_IsCalibrationOnGoing(ADC1) != 0)
 8003146:	4b1a      	ldr	r3, [pc, #104]	@ (80031b0 <ADC_Activate+0x108>)
 8003148:	0018      	movs	r0, r3
 800314a:	f7ff ff57 	bl	8002ffc <LL_ADC_IsCalibrationOnGoing>
 800314e:	1e03      	subs	r3, r0, #0
 8003150:	d1ee      	bne.n	8003130 <ADC_Activate+0x88>
			}
#endif /* USE_TIMEOUT */
		}

		/* Restore ADC DMA transfer request after calibration */
		LL_ADC_REG_SetDMATransfer(ADC1, backup_setting_adc_dma_transfer);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a16      	ldr	r2, [pc, #88]	@ (80031b0 <ADC_Activate+0x108>)
 8003156:	0019      	movs	r1, r3
 8003158:	0010      	movs	r0, r2
 800315a:	f7ff fee5 	bl	8002f28 <LL_ADC_REG_SetDMATransfer>

		/* Delay between ADC end of calibration and ADC enable.                   */
		/* Note: Variable divided by 2 to compensate partially                    */
		/*       CPU processing cycles (depends on compilation optimization).     */
		wait_loop_index = (ADC_DELAY_CALIB_ENABLE_CPU_CYCLES >> 1);
 800315e:	2320      	movs	r3, #32
 8003160:	60bb      	str	r3, [r7, #8]
		while(wait_loop_index != 0)
 8003162:	e002      	b.n	800316a <ADC_Activate+0xc2>
		{
			wait_loop_index--;
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	3b01      	subs	r3, #1
 8003168:	60bb      	str	r3, [r7, #8]
		while(wait_loop_index != 0)
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d1f9      	bne.n	8003164 <ADC_Activate+0xbc>
		}

		/* Enable ADC */
		LL_ADC_Enable(ADC1);
 8003170:	4b0f      	ldr	r3, [pc, #60]	@ (80031b0 <ADC_Activate+0x108>)
 8003172:	0018      	movs	r0, r3
 8003174:	f7ff ff0a 	bl	8002f8c <LL_ADC_Enable>


		/* Poll for ADC ready to convert */
#if (USE_TIMEOUT == 1)
		Timeout = ADC_ENABLE_TIMEOUT_MS;
 8003178:	2301      	movs	r3, #1
 800317a:	60fb      	str	r3, [r7, #12]
#endif /* USE_TIMEOUT */

		while (LL_ADC_IsActiveFlag_ADRDY(ADC1) == 0)
 800317c:	e00a      	b.n	8003194 <ADC_Activate+0xec>
		{
#if (USE_TIMEOUT == 1)
			/* Check Systick counter flag to decrement the time-out value */
			if (LL_SYSTICK_IsActiveCounterFlag())
 800317e:	f7ff ff61 	bl	8003044 <LL_SYSTICK_IsActiveCounterFlag>
 8003182:	1e03      	subs	r3, r0, #0
 8003184:	d006      	beq.n	8003194 <ADC_Activate+0xec>
			{
				if(Timeout-- == 0)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	1e5a      	subs	r2, r3, #1
 800318a:	60fa      	str	r2, [r7, #12]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d101      	bne.n	8003194 <ADC_Activate+0xec>
				{
					/* Error: Time-out */
					Error_Handler();
 8003190:	f7ff f8f0 	bl	8002374 <Error_Handler>
		while (LL_ADC_IsActiveFlag_ADRDY(ADC1) == 0)
 8003194:	4b06      	ldr	r3, [pc, #24]	@ (80031b0 <ADC_Activate+0x108>)
 8003196:	0018      	movs	r0, r3
 8003198:	f7ff ff43 	bl	8003022 <LL_ADC_IsActiveFlag_ADRDY>
 800319c:	1e03      	subs	r3, r0, #0
 800319e:	d0ee      	beq.n	800317e <ADC_Activate+0xd6>
	/*       using function:                                                    */
	/*       "LL_ADC_REG_StartConversion();"                                    */

	/*## Operation on ADC hierarchical scope: ADC group injected ###############*/
	/* Note: Feature not available on this STM32 series */
}
 80031a0:	46c0      	nop			@ (mov r8, r8)
 80031a2:	46bd      	mov	sp, r7
 80031a4:	b004      	add	sp, #16
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	2000089a 	.word	0x2000089a
 80031ac:	2000089b 	.word	0x2000089b
 80031b0:	40012400 	.word	0x40012400
 80031b4:	200000b4 	.word	0x200000b4
 80031b8:	00030d40 	.word	0x00030d40

080031bc <monitor_adc>:

int8_t monitor_adc()
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
	if(adc_err_int)
 80031c0:	4b06      	ldr	r3, [pc, #24]	@ (80031dc <monitor_adc+0x20>)
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d004      	beq.n	80031d4 <monitor_adc+0x18>
	{
		adc_err_int = 0;
 80031ca:	4b04      	ldr	r3, [pc, #16]	@ (80031dc <monitor_adc+0x20>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	701a      	strb	r2, [r3, #0]
		return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e000      	b.n	80031d6 <monitor_adc+0x1a>
	}
	return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	0018      	movs	r0, r3
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	2000089b 	.word	0x2000089b

080031e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031e6:	4b0f      	ldr	r3, [pc, #60]	@ (8003224 <HAL_MspInit+0x44>)
 80031e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031ea:	4b0e      	ldr	r3, [pc, #56]	@ (8003224 <HAL_MspInit+0x44>)
 80031ec:	2101      	movs	r1, #1
 80031ee:	430a      	orrs	r2, r1
 80031f0:	641a      	str	r2, [r3, #64]	@ 0x40
 80031f2:	4b0c      	ldr	r3, [pc, #48]	@ (8003224 <HAL_MspInit+0x44>)
 80031f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f6:	2201      	movs	r2, #1
 80031f8:	4013      	ands	r3, r2
 80031fa:	607b      	str	r3, [r7, #4]
 80031fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031fe:	4b09      	ldr	r3, [pc, #36]	@ (8003224 <HAL_MspInit+0x44>)
 8003200:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003202:	4b08      	ldr	r3, [pc, #32]	@ (8003224 <HAL_MspInit+0x44>)
 8003204:	2180      	movs	r1, #128	@ 0x80
 8003206:	0549      	lsls	r1, r1, #21
 8003208:	430a      	orrs	r2, r1
 800320a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800320c:	4b05      	ldr	r3, [pc, #20]	@ (8003224 <HAL_MspInit+0x44>)
 800320e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003210:	2380      	movs	r3, #128	@ 0x80
 8003212:	055b      	lsls	r3, r3, #21
 8003214:	4013      	ands	r3, r2
 8003216:	603b      	str	r3, [r7, #0]
 8003218:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800321a:	46c0      	nop			@ (mov r8, r8)
 800321c:	46bd      	mov	sp, r7
 800321e:	b002      	add	sp, #8
 8003220:	bd80      	pop	{r7, pc}
 8003222:	46c0      	nop			@ (mov r8, r8)
 8003224:	40021000 	.word	0x40021000

08003228 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003228:	b590      	push	{r4, r7, lr}
 800322a:	b093      	sub	sp, #76	@ 0x4c
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003230:	2334      	movs	r3, #52	@ 0x34
 8003232:	18fb      	adds	r3, r7, r3
 8003234:	0018      	movs	r0, r3
 8003236:	2314      	movs	r3, #20
 8003238:	001a      	movs	r2, r3
 800323a:	2100      	movs	r1, #0
 800323c:	f007 fb88 	bl	800a950 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003240:	2414      	movs	r4, #20
 8003242:	193b      	adds	r3, r7, r4
 8003244:	0018      	movs	r0, r3
 8003246:	2320      	movs	r3, #32
 8003248:	001a      	movs	r2, r3
 800324a:	2100      	movs	r1, #0
 800324c:	f007 fb80 	bl	800a950 <memset>
  if(hi2c->Instance==I2C1)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a51      	ldr	r2, [pc, #324]	@ (800339c <HAL_I2C_MspInit+0x174>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d000      	beq.n	800325c <HAL_I2C_MspInit+0x34>
 800325a:	e09a      	b.n	8003392 <HAL_I2C_MspInit+0x16a>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800325c:	193b      	adds	r3, r7, r4
 800325e:	2202      	movs	r2, #2
 8003260:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003262:	193b      	adds	r3, r7, r4
 8003264:	2200      	movs	r2, #0
 8003266:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003268:	193b      	adds	r3, r7, r4
 800326a:	0018      	movs	r0, r3
 800326c:	f004 fa70 	bl	8007750 <HAL_RCCEx_PeriphCLKConfig>
 8003270:	1e03      	subs	r3, r0, #0
 8003272:	d001      	beq.n	8003278 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8003274:	f7ff f87e 	bl	8002374 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003278:	4b49      	ldr	r3, [pc, #292]	@ (80033a0 <HAL_I2C_MspInit+0x178>)
 800327a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800327c:	4b48      	ldr	r3, [pc, #288]	@ (80033a0 <HAL_I2C_MspInit+0x178>)
 800327e:	2101      	movs	r1, #1
 8003280:	430a      	orrs	r2, r1
 8003282:	635a      	str	r2, [r3, #52]	@ 0x34
 8003284:	4b46      	ldr	r3, [pc, #280]	@ (80033a0 <HAL_I2C_MspInit+0x178>)
 8003286:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003288:	2201      	movs	r2, #1
 800328a:	4013      	ands	r3, r2
 800328c:	613b      	str	r3, [r7, #16]
 800328e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9 [PA11]     ------> I2C1_SCL
    PA10 [PA12]     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003290:	2134      	movs	r1, #52	@ 0x34
 8003292:	187b      	adds	r3, r7, r1
 8003294:	22c0      	movs	r2, #192	@ 0xc0
 8003296:	00d2      	lsls	r2, r2, #3
 8003298:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800329a:	187b      	adds	r3, r7, r1
 800329c:	2212      	movs	r2, #18
 800329e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a0:	187b      	adds	r3, r7, r1
 80032a2:	2200      	movs	r2, #0
 80032a4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032a6:	187b      	adds	r3, r7, r1
 80032a8:	2200      	movs	r2, #0
 80032aa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80032ac:	187b      	adds	r3, r7, r1
 80032ae:	2206      	movs	r2, #6
 80032b0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032b2:	187a      	adds	r2, r7, r1
 80032b4:	23a0      	movs	r3, #160	@ 0xa0
 80032b6:	05db      	lsls	r3, r3, #23
 80032b8:	0011      	movs	r1, r2
 80032ba:	0018      	movs	r0, r3
 80032bc:	f001 f9f8 	bl	80046b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80032c0:	4b37      	ldr	r3, [pc, #220]	@ (80033a0 <HAL_I2C_MspInit+0x178>)
 80032c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80032c4:	4b36      	ldr	r3, [pc, #216]	@ (80033a0 <HAL_I2C_MspInit+0x178>)
 80032c6:	2180      	movs	r1, #128	@ 0x80
 80032c8:	0389      	lsls	r1, r1, #14
 80032ca:	430a      	orrs	r2, r1
 80032cc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80032ce:	4b34      	ldr	r3, [pc, #208]	@ (80033a0 <HAL_I2C_MspInit+0x178>)
 80032d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80032d2:	2380      	movs	r3, #128	@ 0x80
 80032d4:	039b      	lsls	r3, r3, #14
 80032d6:	4013      	ands	r3, r2
 80032d8:	60fb      	str	r3, [r7, #12]
 80032da:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel4;
 80032dc:	4b31      	ldr	r3, [pc, #196]	@ (80033a4 <HAL_I2C_MspInit+0x17c>)
 80032de:	4a32      	ldr	r2, [pc, #200]	@ (80033a8 <HAL_I2C_MspInit+0x180>)
 80032e0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 80032e2:	4b30      	ldr	r3, [pc, #192]	@ (80033a4 <HAL_I2C_MspInit+0x17c>)
 80032e4:	220a      	movs	r2, #10
 80032e6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80032e8:	4b2e      	ldr	r3, [pc, #184]	@ (80033a4 <HAL_I2C_MspInit+0x17c>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032ee:	4b2d      	ldr	r3, [pc, #180]	@ (80033a4 <HAL_I2C_MspInit+0x17c>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80032f4:	4b2b      	ldr	r3, [pc, #172]	@ (80033a4 <HAL_I2C_MspInit+0x17c>)
 80032f6:	2280      	movs	r2, #128	@ 0x80
 80032f8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032fa:	4b2a      	ldr	r3, [pc, #168]	@ (80033a4 <HAL_I2C_MspInit+0x17c>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003300:	4b28      	ldr	r3, [pc, #160]	@ (80033a4 <HAL_I2C_MspInit+0x17c>)
 8003302:	2200      	movs	r2, #0
 8003304:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8003306:	4b27      	ldr	r3, [pc, #156]	@ (80033a4 <HAL_I2C_MspInit+0x17c>)
 8003308:	2200      	movs	r2, #0
 800330a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800330c:	4b25      	ldr	r3, [pc, #148]	@ (80033a4 <HAL_I2C_MspInit+0x17c>)
 800330e:	2280      	movs	r2, #128	@ 0x80
 8003310:	0152      	lsls	r2, r2, #5
 8003312:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8003314:	4b23      	ldr	r3, [pc, #140]	@ (80033a4 <HAL_I2C_MspInit+0x17c>)
 8003316:	0018      	movs	r0, r3
 8003318:	f000 fe0c 	bl	8003f34 <HAL_DMA_Init>
 800331c:	1e03      	subs	r3, r0, #0
 800331e:	d001      	beq.n	8003324 <HAL_I2C_MspInit+0xfc>
    {
      Error_Handler();
 8003320:	f7ff f828 	bl	8002374 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4a1f      	ldr	r2, [pc, #124]	@ (80033a4 <HAL_I2C_MspInit+0x17c>)
 8003328:	63da      	str	r2, [r3, #60]	@ 0x3c
 800332a:	4b1e      	ldr	r3, [pc, #120]	@ (80033a4 <HAL_I2C_MspInit+0x17c>)
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel5;
 8003330:	4b1e      	ldr	r3, [pc, #120]	@ (80033ac <HAL_I2C_MspInit+0x184>)
 8003332:	4a1f      	ldr	r2, [pc, #124]	@ (80033b0 <HAL_I2C_MspInit+0x188>)
 8003334:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8003336:	4b1d      	ldr	r3, [pc, #116]	@ (80033ac <HAL_I2C_MspInit+0x184>)
 8003338:	220b      	movs	r2, #11
 800333a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800333c:	4b1b      	ldr	r3, [pc, #108]	@ (80033ac <HAL_I2C_MspInit+0x184>)
 800333e:	2210      	movs	r2, #16
 8003340:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003342:	4b1a      	ldr	r3, [pc, #104]	@ (80033ac <HAL_I2C_MspInit+0x184>)
 8003344:	2200      	movs	r2, #0
 8003346:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003348:	4b18      	ldr	r3, [pc, #96]	@ (80033ac <HAL_I2C_MspInit+0x184>)
 800334a:	2280      	movs	r2, #128	@ 0x80
 800334c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800334e:	4b17      	ldr	r3, [pc, #92]	@ (80033ac <HAL_I2C_MspInit+0x184>)
 8003350:	2200      	movs	r2, #0
 8003352:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003354:	4b15      	ldr	r3, [pc, #84]	@ (80033ac <HAL_I2C_MspInit+0x184>)
 8003356:	2200      	movs	r2, #0
 8003358:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800335a:	4b14      	ldr	r3, [pc, #80]	@ (80033ac <HAL_I2C_MspInit+0x184>)
 800335c:	2200      	movs	r2, #0
 800335e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003360:	4b12      	ldr	r3, [pc, #72]	@ (80033ac <HAL_I2C_MspInit+0x184>)
 8003362:	2200      	movs	r2, #0
 8003364:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8003366:	4b11      	ldr	r3, [pc, #68]	@ (80033ac <HAL_I2C_MspInit+0x184>)
 8003368:	0018      	movs	r0, r3
 800336a:	f000 fde3 	bl	8003f34 <HAL_DMA_Init>
 800336e:	1e03      	subs	r3, r0, #0
 8003370:	d001      	beq.n	8003376 <HAL_I2C_MspInit+0x14e>
    {
      Error_Handler();
 8003372:	f7fe ffff 	bl	8002374 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a0c      	ldr	r2, [pc, #48]	@ (80033ac <HAL_I2C_MspInit+0x184>)
 800337a:	639a      	str	r2, [r3, #56]	@ 0x38
 800337c:	4b0b      	ldr	r3, [pc, #44]	@ (80033ac <HAL_I2C_MspInit+0x184>)
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 3, 0);
 8003382:	2200      	movs	r2, #0
 8003384:	2103      	movs	r1, #3
 8003386:	2017      	movs	r0, #23
 8003388:	f000 fd92 	bl	8003eb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 800338c:	2017      	movs	r0, #23
 800338e:	f000 fda4 	bl	8003eda <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003392:	46c0      	nop			@ (mov r8, r8)
 8003394:	46bd      	mov	sp, r7
 8003396:	b013      	add	sp, #76	@ 0x4c
 8003398:	bd90      	pop	{r4, r7, pc}
 800339a:	46c0      	nop			@ (mov r8, r8)
 800339c:	40005400 	.word	0x40005400
 80033a0:	40021000 	.word	0x40021000
 80033a4:	20000340 	.word	0x20000340
 80033a8:	40020044 	.word	0x40020044
 80033ac:	2000039c 	.word	0x2000039c
 80033b0:	40020058 	.word	0x40020058

080033b4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a14      	ldr	r2, [pc, #80]	@ (8003414 <HAL_I2C_MspDeInit+0x60>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d122      	bne.n	800340c <HAL_I2C_MspDeInit+0x58>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80033c6:	4b14      	ldr	r3, [pc, #80]	@ (8003418 <HAL_I2C_MspDeInit+0x64>)
 80033c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80033ca:	4b13      	ldr	r3, [pc, #76]	@ (8003418 <HAL_I2C_MspDeInit+0x64>)
 80033cc:	4913      	ldr	r1, [pc, #76]	@ (800341c <HAL_I2C_MspDeInit+0x68>)
 80033ce:	400a      	ands	r2, r1
 80033d0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /**I2C1 GPIO Configuration
    PA9 [PA11]     ------> I2C1_SCL
    PA10 [PA12]     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9);
 80033d2:	2380      	movs	r3, #128	@ 0x80
 80033d4:	009a      	lsls	r2, r3, #2
 80033d6:	23a0      	movs	r3, #160	@ 0xa0
 80033d8:	05db      	lsls	r3, r3, #23
 80033da:	0011      	movs	r1, r2
 80033dc:	0018      	movs	r0, r3
 80033de:	f001 fad9 	bl	8004994 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_10);
 80033e2:	2380      	movs	r3, #128	@ 0x80
 80033e4:	00da      	lsls	r2, r3, #3
 80033e6:	23a0      	movs	r3, #160	@ 0xa0
 80033e8:	05db      	lsls	r3, r3, #23
 80033ea:	0011      	movs	r1, r2
 80033ec:	0018      	movs	r0, r3
 80033ee:	f001 fad1 	bl	8004994 <HAL_GPIO_DeInit>

    /* I2C1 DMA DeInit */
    HAL_DMA_DeInit(hi2c->hdmarx);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033f6:	0018      	movs	r0, r3
 80033f8:	f000 fe26 	bl	8004048 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hi2c->hdmatx);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003400:	0018      	movs	r0, r3
 8003402:	f000 fe21 	bl	8004048 <HAL_DMA_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_IRQn);
 8003406:	2017      	movs	r0, #23
 8003408:	f000 fd77 	bl	8003efa <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800340c:	46c0      	nop			@ (mov r8, r8)
 800340e:	46bd      	mov	sp, r7
 8003410:	b002      	add	sp, #8
 8003412:	bd80      	pop	{r7, pc}
 8003414:	40005400 	.word	0x40005400
 8003418:	40021000 	.word	0x40021000
 800341c:	ffdfffff 	.word	0xffdfffff

08003420 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003420:	b590      	push	{r4, r7, lr}
 8003422:	b093      	sub	sp, #76	@ 0x4c
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003428:	2334      	movs	r3, #52	@ 0x34
 800342a:	18fb      	adds	r3, r7, r3
 800342c:	0018      	movs	r0, r3
 800342e:	2314      	movs	r3, #20
 8003430:	001a      	movs	r2, r3
 8003432:	2100      	movs	r1, #0
 8003434:	f007 fa8c 	bl	800a950 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003438:	2414      	movs	r4, #20
 800343a:	193b      	adds	r3, r7, r4
 800343c:	0018      	movs	r0, r3
 800343e:	2320      	movs	r3, #32
 8003440:	001a      	movs	r2, r3
 8003442:	2100      	movs	r1, #0
 8003444:	f007 fa84 	bl	800a950 <memset>
  if(hspi->Instance==SPI1)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a34      	ldr	r2, [pc, #208]	@ (8003520 <HAL_SPI_MspInit+0x100>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d162      	bne.n	8003518 <HAL_SPI_MspInit+0xf8>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 8003452:	193b      	adds	r3, r7, r4
 8003454:	2204      	movs	r2, #4
 8003456:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 8003458:	193b      	adds	r3, r7, r4
 800345a:	2200      	movs	r2, #0
 800345c:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800345e:	193b      	adds	r3, r7, r4
 8003460:	0018      	movs	r0, r3
 8003462:	f004 f975 	bl	8007750 <HAL_RCCEx_PeriphCLKConfig>
 8003466:	1e03      	subs	r3, r0, #0
 8003468:	d001      	beq.n	800346e <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 800346a:	f7fe ff83 	bl	8002374 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800346e:	4b2d      	ldr	r3, [pc, #180]	@ (8003524 <HAL_SPI_MspInit+0x104>)
 8003470:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003472:	4b2c      	ldr	r3, [pc, #176]	@ (8003524 <HAL_SPI_MspInit+0x104>)
 8003474:	2180      	movs	r1, #128	@ 0x80
 8003476:	0149      	lsls	r1, r1, #5
 8003478:	430a      	orrs	r2, r1
 800347a:	641a      	str	r2, [r3, #64]	@ 0x40
 800347c:	4b29      	ldr	r3, [pc, #164]	@ (8003524 <HAL_SPI_MspInit+0x104>)
 800347e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003480:	2380      	movs	r3, #128	@ 0x80
 8003482:	015b      	lsls	r3, r3, #5
 8003484:	4013      	ands	r3, r2
 8003486:	613b      	str	r3, [r7, #16]
 8003488:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800348a:	4b26      	ldr	r3, [pc, #152]	@ (8003524 <HAL_SPI_MspInit+0x104>)
 800348c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800348e:	4b25      	ldr	r3, [pc, #148]	@ (8003524 <HAL_SPI_MspInit+0x104>)
 8003490:	2101      	movs	r1, #1
 8003492:	430a      	orrs	r2, r1
 8003494:	635a      	str	r2, [r3, #52]	@ 0x34
 8003496:	4b23      	ldr	r3, [pc, #140]	@ (8003524 <HAL_SPI_MspInit+0x104>)
 8003498:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800349a:	2201      	movs	r2, #1
 800349c:	4013      	ands	r3, r2
 800349e:	60fb      	str	r3, [r7, #12]
 80034a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034a2:	4b20      	ldr	r3, [pc, #128]	@ (8003524 <HAL_SPI_MspInit+0x104>)
 80034a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034a6:	4b1f      	ldr	r3, [pc, #124]	@ (8003524 <HAL_SPI_MspInit+0x104>)
 80034a8:	2102      	movs	r1, #2
 80034aa:	430a      	orrs	r2, r1
 80034ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80034ae:	4b1d      	ldr	r3, [pc, #116]	@ (8003524 <HAL_SPI_MspInit+0x104>)
 80034b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034b2:	2202      	movs	r2, #2
 80034b4:	4013      	ands	r3, r2
 80034b6:	60bb      	str	r3, [r7, #8]
 80034b8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA11 [PA9]     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80034ba:	2134      	movs	r1, #52	@ 0x34
 80034bc:	187b      	adds	r3, r7, r1
 80034be:	2280      	movs	r2, #128	@ 0x80
 80034c0:	0112      	lsls	r2, r2, #4
 80034c2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c4:	000c      	movs	r4, r1
 80034c6:	193b      	adds	r3, r7, r4
 80034c8:	2202      	movs	r2, #2
 80034ca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034cc:	193b      	adds	r3, r7, r4
 80034ce:	2200      	movs	r2, #0
 80034d0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034d2:	193b      	adds	r3, r7, r4
 80034d4:	2200      	movs	r2, #0
 80034d6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80034d8:	193b      	adds	r3, r7, r4
 80034da:	2200      	movs	r2, #0
 80034dc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034de:	193a      	adds	r2, r7, r4
 80034e0:	23a0      	movs	r3, #160	@ 0xa0
 80034e2:	05db      	lsls	r3, r3, #23
 80034e4:	0011      	movs	r1, r2
 80034e6:	0018      	movs	r0, r3
 80034e8:	f001 f8e2 	bl	80046b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80034ec:	0021      	movs	r1, r4
 80034ee:	187b      	adds	r3, r7, r1
 80034f0:	2228      	movs	r2, #40	@ 0x28
 80034f2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f4:	187b      	adds	r3, r7, r1
 80034f6:	2202      	movs	r2, #2
 80034f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034fa:	187b      	adds	r3, r7, r1
 80034fc:	2200      	movs	r2, #0
 80034fe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003500:	187b      	adds	r3, r7, r1
 8003502:	2200      	movs	r2, #0
 8003504:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003506:	187b      	adds	r3, r7, r1
 8003508:	2200      	movs	r2, #0
 800350a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800350c:	187b      	adds	r3, r7, r1
 800350e:	4a06      	ldr	r2, [pc, #24]	@ (8003528 <HAL_SPI_MspInit+0x108>)
 8003510:	0019      	movs	r1, r3
 8003512:	0010      	movs	r0, r2
 8003514:	f001 f8cc 	bl	80046b0 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8003518:	46c0      	nop			@ (mov r8, r8)
 800351a:	46bd      	mov	sp, r7
 800351c:	b013      	add	sp, #76	@ 0x4c
 800351e:	bd90      	pop	{r4, r7, pc}
 8003520:	40013000 	.word	0x40013000
 8003524:	40021000 	.word	0x40021000
 8003528:	50000400 	.word	0x50000400

0800352c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a0a      	ldr	r2, [pc, #40]	@ (8003564 <HAL_TIM_PWM_MspInit+0x38>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d10d      	bne.n	800355a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800353e:	4b0a      	ldr	r3, [pc, #40]	@ (8003568 <HAL_TIM_PWM_MspInit+0x3c>)
 8003540:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003542:	4b09      	ldr	r3, [pc, #36]	@ (8003568 <HAL_TIM_PWM_MspInit+0x3c>)
 8003544:	2180      	movs	r1, #128	@ 0x80
 8003546:	0109      	lsls	r1, r1, #4
 8003548:	430a      	orrs	r2, r1
 800354a:	641a      	str	r2, [r3, #64]	@ 0x40
 800354c:	4b06      	ldr	r3, [pc, #24]	@ (8003568 <HAL_TIM_PWM_MspInit+0x3c>)
 800354e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003550:	2380      	movs	r3, #128	@ 0x80
 8003552:	011b      	lsls	r3, r3, #4
 8003554:	4013      	ands	r3, r2
 8003556:	60fb      	str	r3, [r7, #12]
 8003558:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800355a:	46c0      	nop			@ (mov r8, r8)
 800355c:	46bd      	mov	sp, r7
 800355e:	b004      	add	sp, #16
 8003560:	bd80      	pop	{r7, pc}
 8003562:	46c0      	nop			@ (mov r8, r8)
 8003564:	40012c00 	.word	0x40012c00
 8003568:	40021000 	.word	0x40021000

0800356c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a0e      	ldr	r2, [pc, #56]	@ (80035b4 <HAL_TIM_Base_MspInit+0x48>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d115      	bne.n	80035aa <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 800357e:	4b0e      	ldr	r3, [pc, #56]	@ (80035b8 <HAL_TIM_Base_MspInit+0x4c>)
 8003580:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003582:	4b0d      	ldr	r3, [pc, #52]	@ (80035b8 <HAL_TIM_Base_MspInit+0x4c>)
 8003584:	2180      	movs	r1, #128	@ 0x80
 8003586:	0209      	lsls	r1, r1, #8
 8003588:	430a      	orrs	r2, r1
 800358a:	641a      	str	r2, [r3, #64]	@ 0x40
 800358c:	4b0a      	ldr	r3, [pc, #40]	@ (80035b8 <HAL_TIM_Base_MspInit+0x4c>)
 800358e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003590:	2380      	movs	r3, #128	@ 0x80
 8003592:	021b      	lsls	r3, r3, #8
 8003594:	4013      	ands	r3, r2
 8003596:	60fb      	str	r3, [r7, #12]
 8003598:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 800359a:	2200      	movs	r2, #0
 800359c:	2100      	movs	r1, #0
 800359e:	2013      	movs	r0, #19
 80035a0:	f000 fc86 	bl	8003eb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80035a4:	2013      	movs	r0, #19
 80035a6:	f000 fc98 	bl	8003eda <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM14_MspInit 1 */

  }

}
 80035aa:	46c0      	nop			@ (mov r8, r8)
 80035ac:	46bd      	mov	sp, r7
 80035ae:	b004      	add	sp, #16
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	46c0      	nop			@ (mov r8, r8)
 80035b4:	40002000 	.word	0x40002000
 80035b8:	40021000 	.word	0x40021000

080035bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80035bc:	b590      	push	{r4, r7, lr}
 80035be:	b089      	sub	sp, #36	@ 0x24
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035c4:	240c      	movs	r4, #12
 80035c6:	193b      	adds	r3, r7, r4
 80035c8:	0018      	movs	r0, r3
 80035ca:	2314      	movs	r3, #20
 80035cc:	001a      	movs	r2, r3
 80035ce:	2100      	movs	r1, #0
 80035d0:	f007 f9be 	bl	800a950 <memset>
  if(htim->Instance==TIM1)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a15      	ldr	r2, [pc, #84]	@ (8003630 <HAL_TIM_MspPostInit+0x74>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d123      	bne.n	8003626 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035de:	4b15      	ldr	r3, [pc, #84]	@ (8003634 <HAL_TIM_MspPostInit+0x78>)
 80035e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035e2:	4b14      	ldr	r3, [pc, #80]	@ (8003634 <HAL_TIM_MspPostInit+0x78>)
 80035e4:	2101      	movs	r1, #1
 80035e6:	430a      	orrs	r2, r1
 80035e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80035ea:	4b12      	ldr	r3, [pc, #72]	@ (8003634 <HAL_TIM_MspPostInit+0x78>)
 80035ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035ee:	2201      	movs	r2, #1
 80035f0:	4013      	ands	r3, r2
 80035f2:	60bb      	str	r3, [r7, #8]
 80035f4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA15     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = Actuator_PWM_Pin;
 80035f6:	193b      	adds	r3, r7, r4
 80035f8:	2280      	movs	r2, #128	@ 0x80
 80035fa:	0212      	lsls	r2, r2, #8
 80035fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035fe:	0021      	movs	r1, r4
 8003600:	187b      	adds	r3, r7, r1
 8003602:	2202      	movs	r2, #2
 8003604:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003606:	187b      	adds	r3, r7, r1
 8003608:	2200      	movs	r2, #0
 800360a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800360c:	187b      	adds	r3, r7, r1
 800360e:	2200      	movs	r2, #0
 8003610:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003612:	187b      	adds	r3, r7, r1
 8003614:	2202      	movs	r2, #2
 8003616:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(Actuator_PWM_GPIO_Port, &GPIO_InitStruct);
 8003618:	187a      	adds	r2, r7, r1
 800361a:	23a0      	movs	r3, #160	@ 0xa0
 800361c:	05db      	lsls	r3, r3, #23
 800361e:	0011      	movs	r1, r2
 8003620:	0018      	movs	r0, r3
 8003622:	f001 f845 	bl	80046b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003626:	46c0      	nop			@ (mov r8, r8)
 8003628:	46bd      	mov	sp, r7
 800362a:	b009      	add	sp, #36	@ 0x24
 800362c:	bd90      	pop	{r4, r7, pc}
 800362e:	46c0      	nop			@ (mov r8, r8)
 8003630:	40012c00 	.word	0x40012c00
 8003634:	40021000 	.word	0x40021000

08003638 <HAL_TIM_Base_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a07      	ldr	r2, [pc, #28]	@ (8003664 <HAL_TIM_Base_MspDeInit+0x2c>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d108      	bne.n	800365c <HAL_TIM_Base_MspDeInit+0x24>
  {
  /* USER CODE BEGIN TIM14_MspDeInit 0 */

  /* USER CODE END TIM14_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM14_CLK_DISABLE();
 800364a:	4b07      	ldr	r3, [pc, #28]	@ (8003668 <HAL_TIM_Base_MspDeInit+0x30>)
 800364c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800364e:	4b06      	ldr	r3, [pc, #24]	@ (8003668 <HAL_TIM_Base_MspDeInit+0x30>)
 8003650:	4906      	ldr	r1, [pc, #24]	@ (800366c <HAL_TIM_Base_MspDeInit+0x34>)
 8003652:	400a      	ands	r2, r1
 8003654:	641a      	str	r2, [r3, #64]	@ 0x40

    /* TIM14 interrupt DeInit */
    HAL_NVIC_DisableIRQ(TIM14_IRQn);
 8003656:	2013      	movs	r0, #19
 8003658:	f000 fc4f 	bl	8003efa <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN TIM14_MspDeInit 1 */

  /* USER CODE END TIM14_MspDeInit 1 */
  }

}
 800365c:	46c0      	nop			@ (mov r8, r8)
 800365e:	46bd      	mov	sp, r7
 8003660:	b002      	add	sp, #8
 8003662:	bd80      	pop	{r7, pc}
 8003664:	40002000 	.word	0x40002000
 8003668:	40021000 	.word	0x40021000
 800366c:	ffff7fff 	.word	0xffff7fff

08003670 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003670:	b590      	push	{r4, r7, lr}
 8003672:	b095      	sub	sp, #84	@ 0x54
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003678:	233c      	movs	r3, #60	@ 0x3c
 800367a:	18fb      	adds	r3, r7, r3
 800367c:	0018      	movs	r0, r3
 800367e:	2314      	movs	r3, #20
 8003680:	001a      	movs	r2, r3
 8003682:	2100      	movs	r1, #0
 8003684:	f007 f964 	bl	800a950 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003688:	241c      	movs	r4, #28
 800368a:	193b      	adds	r3, r7, r4
 800368c:	0018      	movs	r0, r3
 800368e:	2320      	movs	r3, #32
 8003690:	001a      	movs	r2, r3
 8003692:	2100      	movs	r1, #0
 8003694:	f007 f95c 	bl	800a950 <memset>
  if(huart->Instance==USART1)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a74      	ldr	r2, [pc, #464]	@ (8003870 <HAL_UART_MspInit+0x200>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d000      	beq.n	80036a4 <HAL_UART_MspInit+0x34>
 80036a2:	e0e1      	b.n	8003868 <HAL_UART_MspInit+0x1f8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80036a4:	193b      	adds	r3, r7, r4
 80036a6:	2201      	movs	r2, #1
 80036a8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80036aa:	193b      	adds	r3, r7, r4
 80036ac:	2200      	movs	r2, #0
 80036ae:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80036b0:	193b      	adds	r3, r7, r4
 80036b2:	0018      	movs	r0, r3
 80036b4:	f004 f84c 	bl	8007750 <HAL_RCCEx_PeriphCLKConfig>
 80036b8:	1e03      	subs	r3, r0, #0
 80036ba:	d001      	beq.n	80036c0 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80036bc:	f7fe fe5a 	bl	8002374 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80036c0:	4b6c      	ldr	r3, [pc, #432]	@ (8003874 <HAL_UART_MspInit+0x204>)
 80036c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80036c4:	4b6b      	ldr	r3, [pc, #428]	@ (8003874 <HAL_UART_MspInit+0x204>)
 80036c6:	2180      	movs	r1, #128	@ 0x80
 80036c8:	01c9      	lsls	r1, r1, #7
 80036ca:	430a      	orrs	r2, r1
 80036cc:	641a      	str	r2, [r3, #64]	@ 0x40
 80036ce:	4b69      	ldr	r3, [pc, #420]	@ (8003874 <HAL_UART_MspInit+0x204>)
 80036d0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80036d2:	2380      	movs	r3, #128	@ 0x80
 80036d4:	01db      	lsls	r3, r3, #7
 80036d6:	4013      	ands	r3, r2
 80036d8:	61bb      	str	r3, [r7, #24]
 80036da:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036dc:	4b65      	ldr	r3, [pc, #404]	@ (8003874 <HAL_UART_MspInit+0x204>)
 80036de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036e0:	4b64      	ldr	r3, [pc, #400]	@ (8003874 <HAL_UART_MspInit+0x204>)
 80036e2:	2104      	movs	r1, #4
 80036e4:	430a      	orrs	r2, r1
 80036e6:	635a      	str	r2, [r3, #52]	@ 0x34
 80036e8:	4b62      	ldr	r3, [pc, #392]	@ (8003874 <HAL_UART_MspInit+0x204>)
 80036ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036ec:	2204      	movs	r2, #4
 80036ee:	4013      	ands	r3, r2
 80036f0:	617b      	str	r3, [r7, #20]
 80036f2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036f4:	4b5f      	ldr	r3, [pc, #380]	@ (8003874 <HAL_UART_MspInit+0x204>)
 80036f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036f8:	4b5e      	ldr	r3, [pc, #376]	@ (8003874 <HAL_UART_MspInit+0x204>)
 80036fa:	2102      	movs	r1, #2
 80036fc:	430a      	orrs	r2, r1
 80036fe:	635a      	str	r2, [r3, #52]	@ 0x34
 8003700:	4b5c      	ldr	r3, [pc, #368]	@ (8003874 <HAL_UART_MspInit+0x204>)
 8003702:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003704:	2202      	movs	r2, #2
 8003706:	4013      	ands	r3, r2
 8003708:	613b      	str	r3, [r7, #16]
 800370a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800370c:	4b59      	ldr	r3, [pc, #356]	@ (8003874 <HAL_UART_MspInit+0x204>)
 800370e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003710:	4b58      	ldr	r3, [pc, #352]	@ (8003874 <HAL_UART_MspInit+0x204>)
 8003712:	2101      	movs	r1, #1
 8003714:	430a      	orrs	r2, r1
 8003716:	635a      	str	r2, [r3, #52]	@ 0x34
 8003718:	4b56      	ldr	r3, [pc, #344]	@ (8003874 <HAL_UART_MspInit+0x204>)
 800371a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800371c:	2201      	movs	r2, #1
 800371e:	4013      	ands	r3, r2
 8003720:	60fb      	str	r3, [r7, #12]
 8003722:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC14-OSCX_IN(PC14)     ------> USART1_TX
    PB2     ------> USART1_RX
    PA12 [PA10]     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003724:	213c      	movs	r1, #60	@ 0x3c
 8003726:	187b      	adds	r3, r7, r1
 8003728:	2280      	movs	r2, #128	@ 0x80
 800372a:	01d2      	lsls	r2, r2, #7
 800372c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800372e:	000c      	movs	r4, r1
 8003730:	193b      	adds	r3, r7, r4
 8003732:	2202      	movs	r2, #2
 8003734:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003736:	193b      	adds	r3, r7, r4
 8003738:	2200      	movs	r2, #0
 800373a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800373c:	193b      	adds	r3, r7, r4
 800373e:	2200      	movs	r2, #0
 8003740:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8003742:	193b      	adds	r3, r7, r4
 8003744:	2200      	movs	r2, #0
 8003746:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003748:	193b      	adds	r3, r7, r4
 800374a:	4a4b      	ldr	r2, [pc, #300]	@ (8003878 <HAL_UART_MspInit+0x208>)
 800374c:	0019      	movs	r1, r3
 800374e:	0010      	movs	r0, r2
 8003750:	f000 ffae 	bl	80046b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003754:	193b      	adds	r3, r7, r4
 8003756:	2204      	movs	r2, #4
 8003758:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800375a:	193b      	adds	r3, r7, r4
 800375c:	2202      	movs	r2, #2
 800375e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003760:	193b      	adds	r3, r7, r4
 8003762:	2200      	movs	r2, #0
 8003764:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003766:	193b      	adds	r3, r7, r4
 8003768:	2200      	movs	r2, #0
 800376a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 800376c:	193b      	adds	r3, r7, r4
 800376e:	2200      	movs	r2, #0
 8003770:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003772:	193b      	adds	r3, r7, r4
 8003774:	4a41      	ldr	r2, [pc, #260]	@ (800387c <HAL_UART_MspInit+0x20c>)
 8003776:	0019      	movs	r1, r3
 8003778:	0010      	movs	r0, r2
 800377a:	f000 ff99 	bl	80046b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800377e:	0021      	movs	r1, r4
 8003780:	187b      	adds	r3, r7, r1
 8003782:	2280      	movs	r2, #128	@ 0x80
 8003784:	0152      	lsls	r2, r2, #5
 8003786:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003788:	187b      	adds	r3, r7, r1
 800378a:	2202      	movs	r2, #2
 800378c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800378e:	187b      	adds	r3, r7, r1
 8003790:	2200      	movs	r2, #0
 8003792:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003794:	187b      	adds	r3, r7, r1
 8003796:	2200      	movs	r2, #0
 8003798:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800379a:	187b      	adds	r3, r7, r1
 800379c:	2201      	movs	r2, #1
 800379e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037a0:	187a      	adds	r2, r7, r1
 80037a2:	23a0      	movs	r3, #160	@ 0xa0
 80037a4:	05db      	lsls	r3, r3, #23
 80037a6:	0011      	movs	r1, r2
 80037a8:	0018      	movs	r0, r3
 80037aa:	f000 ff81 	bl	80046b0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 80037ae:	4b34      	ldr	r3, [pc, #208]	@ (8003880 <HAL_UART_MspInit+0x210>)
 80037b0:	4a34      	ldr	r2, [pc, #208]	@ (8003884 <HAL_UART_MspInit+0x214>)
 80037b2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80037b4:	4b32      	ldr	r3, [pc, #200]	@ (8003880 <HAL_UART_MspInit+0x210>)
 80037b6:	2232      	movs	r2, #50	@ 0x32
 80037b8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80037ba:	4b31      	ldr	r3, [pc, #196]	@ (8003880 <HAL_UART_MspInit+0x210>)
 80037bc:	2200      	movs	r2, #0
 80037be:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037c0:	4b2f      	ldr	r3, [pc, #188]	@ (8003880 <HAL_UART_MspInit+0x210>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80037c6:	4b2e      	ldr	r3, [pc, #184]	@ (8003880 <HAL_UART_MspInit+0x210>)
 80037c8:	2280      	movs	r2, #128	@ 0x80
 80037ca:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80037cc:	4b2c      	ldr	r3, [pc, #176]	@ (8003880 <HAL_UART_MspInit+0x210>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80037d2:	4b2b      	ldr	r3, [pc, #172]	@ (8003880 <HAL_UART_MspInit+0x210>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80037d8:	4b29      	ldr	r3, [pc, #164]	@ (8003880 <HAL_UART_MspInit+0x210>)
 80037da:	2200      	movs	r2, #0
 80037dc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80037de:	4b28      	ldr	r3, [pc, #160]	@ (8003880 <HAL_UART_MspInit+0x210>)
 80037e0:	22c0      	movs	r2, #192	@ 0xc0
 80037e2:	0192      	lsls	r2, r2, #6
 80037e4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80037e6:	4b26      	ldr	r3, [pc, #152]	@ (8003880 <HAL_UART_MspInit+0x210>)
 80037e8:	0018      	movs	r0, r3
 80037ea:	f000 fba3 	bl	8003f34 <HAL_DMA_Init>
 80037ee:	1e03      	subs	r3, r0, #0
 80037f0:	d001      	beq.n	80037f6 <HAL_UART_MspInit+0x186>
    {
      Error_Handler();
 80037f2:	f7fe fdbf 	bl	8002374 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2180      	movs	r1, #128	@ 0x80
 80037fa:	4a21      	ldr	r2, [pc, #132]	@ (8003880 <HAL_UART_MspInit+0x210>)
 80037fc:	505a      	str	r2, [r3, r1]
 80037fe:	4b20      	ldr	r3, [pc, #128]	@ (8003880 <HAL_UART_MspInit+0x210>)
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel3;
 8003804:	4b20      	ldr	r3, [pc, #128]	@ (8003888 <HAL_UART_MspInit+0x218>)
 8003806:	4a21      	ldr	r2, [pc, #132]	@ (800388c <HAL_UART_MspInit+0x21c>)
 8003808:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800380a:	4b1f      	ldr	r3, [pc, #124]	@ (8003888 <HAL_UART_MspInit+0x218>)
 800380c:	2233      	movs	r2, #51	@ 0x33
 800380e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003810:	4b1d      	ldr	r3, [pc, #116]	@ (8003888 <HAL_UART_MspInit+0x218>)
 8003812:	2210      	movs	r2, #16
 8003814:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003816:	4b1c      	ldr	r3, [pc, #112]	@ (8003888 <HAL_UART_MspInit+0x218>)
 8003818:	2200      	movs	r2, #0
 800381a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800381c:	4b1a      	ldr	r3, [pc, #104]	@ (8003888 <HAL_UART_MspInit+0x218>)
 800381e:	2280      	movs	r2, #128	@ 0x80
 8003820:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003822:	4b19      	ldr	r3, [pc, #100]	@ (8003888 <HAL_UART_MspInit+0x218>)
 8003824:	2200      	movs	r2, #0
 8003826:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003828:	4b17      	ldr	r3, [pc, #92]	@ (8003888 <HAL_UART_MspInit+0x218>)
 800382a:	2200      	movs	r2, #0
 800382c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800382e:	4b16      	ldr	r3, [pc, #88]	@ (8003888 <HAL_UART_MspInit+0x218>)
 8003830:	2200      	movs	r2, #0
 8003832:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8003834:	4b14      	ldr	r3, [pc, #80]	@ (8003888 <HAL_UART_MspInit+0x218>)
 8003836:	2280      	movs	r2, #128	@ 0x80
 8003838:	0192      	lsls	r2, r2, #6
 800383a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800383c:	4b12      	ldr	r3, [pc, #72]	@ (8003888 <HAL_UART_MspInit+0x218>)
 800383e:	0018      	movs	r0, r3
 8003840:	f000 fb78 	bl	8003f34 <HAL_DMA_Init>
 8003844:	1e03      	subs	r3, r0, #0
 8003846:	d001      	beq.n	800384c <HAL_UART_MspInit+0x1dc>
    {
      Error_Handler();
 8003848:	f7fe fd94 	bl	8002374 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4a0e      	ldr	r2, [pc, #56]	@ (8003888 <HAL_UART_MspInit+0x218>)
 8003850:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003852:	4b0d      	ldr	r3, [pc, #52]	@ (8003888 <HAL_UART_MspInit+0x218>)
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003858:	2200      	movs	r2, #0
 800385a:	2100      	movs	r1, #0
 800385c:	201b      	movs	r0, #27
 800385e:	f000 fb27 	bl	8003eb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003862:	201b      	movs	r0, #27
 8003864:	f000 fb39 	bl	8003eda <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8003868:	46c0      	nop			@ (mov r8, r8)
 800386a:	46bd      	mov	sp, r7
 800386c:	b015      	add	sp, #84	@ 0x54
 800386e:	bd90      	pop	{r4, r7, pc}
 8003870:	40013800 	.word	0x40013800
 8003874:	40021000 	.word	0x40021000
 8003878:	50000800 	.word	0x50000800
 800387c:	50000400 	.word	0x50000400
 8003880:	20000588 	.word	0x20000588
 8003884:	4002001c 	.word	0x4002001c
 8003888:	200005e4 	.word	0x200005e4
 800388c:	40020030 	.word	0x40020030

08003890 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a17      	ldr	r2, [pc, #92]	@ (80038fc <HAL_UART_MspDeInit+0x6c>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d127      	bne.n	80038f2 <HAL_UART_MspDeInit+0x62>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80038a2:	4b17      	ldr	r3, [pc, #92]	@ (8003900 <HAL_UART_MspDeInit+0x70>)
 80038a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80038a6:	4b16      	ldr	r3, [pc, #88]	@ (8003900 <HAL_UART_MspDeInit+0x70>)
 80038a8:	4916      	ldr	r1, [pc, #88]	@ (8003904 <HAL_UART_MspDeInit+0x74>)
 80038aa:	400a      	ands	r2, r1
 80038ac:	641a      	str	r2, [r3, #64]	@ 0x40
    /**USART1 GPIO Configuration
    PC14-OSCX_IN(PC14)     ------> USART1_TX
    PB2     ------> USART1_RX
    PA12 [PA10]     ------> USART1_DE
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_14);
 80038ae:	2380      	movs	r3, #128	@ 0x80
 80038b0:	01db      	lsls	r3, r3, #7
 80038b2:	4a15      	ldr	r2, [pc, #84]	@ (8003908 <HAL_UART_MspDeInit+0x78>)
 80038b4:	0019      	movs	r1, r3
 80038b6:	0010      	movs	r0, r2
 80038b8:	f001 f86c 	bl	8004994 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2);
 80038bc:	4b13      	ldr	r3, [pc, #76]	@ (800390c <HAL_UART_MspDeInit+0x7c>)
 80038be:	2104      	movs	r1, #4
 80038c0:	0018      	movs	r0, r3
 80038c2:	f001 f867 	bl	8004994 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_12);
 80038c6:	2380      	movs	r3, #128	@ 0x80
 80038c8:	015a      	lsls	r2, r3, #5
 80038ca:	23a0      	movs	r3, #160	@ 0xa0
 80038cc:	05db      	lsls	r3, r3, #23
 80038ce:	0011      	movs	r1, r2
 80038d0:	0018      	movs	r0, r3
 80038d2:	f001 f85f 	bl	8004994 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2280      	movs	r2, #128	@ 0x80
 80038da:	589b      	ldr	r3, [r3, r2]
 80038dc:	0018      	movs	r0, r3
 80038de:	f000 fbb3 	bl	8004048 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80038e6:	0018      	movs	r0, r3
 80038e8:	f000 fbae 	bl	8004048 <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80038ec:	201b      	movs	r0, #27
 80038ee:	f000 fb04 	bl	8003efa <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 80038f2:	46c0      	nop			@ (mov r8, r8)
 80038f4:	46bd      	mov	sp, r7
 80038f6:	b002      	add	sp, #8
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	46c0      	nop			@ (mov r8, r8)
 80038fc:	40013800 	.word	0x40013800
 8003900:	40021000 	.word	0x40021000
 8003904:	ffffbfff 	.word	0xffffbfff
 8003908:	50000800 	.word	0x50000800
 800390c:	50000400 	.word	0x50000400

08003910 <LL_ADC_IsActiveFlag_OVR>:
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_OVR) == (LL_ADC_FLAG_OVR)) ? 1UL : 0UL);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2210      	movs	r2, #16
 800391e:	4013      	ands	r3, r2
 8003920:	2b10      	cmp	r3, #16
 8003922:	d101      	bne.n	8003928 <LL_ADC_IsActiveFlag_OVR+0x18>
 8003924:	2301      	movs	r3, #1
 8003926:	e000      	b.n	800392a <LL_ADC_IsActiveFlag_OVR+0x1a>
 8003928:	2300      	movs	r3, #0
}
 800392a:	0018      	movs	r0, r3
 800392c:	46bd      	mov	sp, r7
 800392e:	b002      	add	sp, #8
 8003930:	bd80      	pop	{r7, pc}

08003932 <LL_ADC_ClearFlag_OVR>:
{
 8003932:	b580      	push	{r7, lr}
 8003934:	b082      	sub	sp, #8
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_OVR);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2210      	movs	r2, #16
 800393e:	601a      	str	r2, [r3, #0]
}
 8003940:	46c0      	nop			@ (mov r8, r8)
 8003942:	46bd      	mov	sp, r7
 8003944:	b002      	add	sp, #8
 8003946:	bd80      	pop	{r7, pc}

08003948 <LL_DMA_IsActiveFlag_TC1>:
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF1) == (DMA_ISR_TCIF1)) ? 1UL : 0UL);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2202      	movs	r2, #2
 8003956:	4013      	ands	r3, r2
 8003958:	2b02      	cmp	r3, #2
 800395a:	d101      	bne.n	8003960 <LL_DMA_IsActiveFlag_TC1+0x18>
 800395c:	2301      	movs	r3, #1
 800395e:	e000      	b.n	8003962 <LL_DMA_IsActiveFlag_TC1+0x1a>
 8003960:	2300      	movs	r3, #0
}
 8003962:	0018      	movs	r0, r3
 8003964:	46bd      	mov	sp, r7
 8003966:	b002      	add	sp, #8
 8003968:	bd80      	pop	{r7, pc}

0800396a <LL_DMA_IsActiveFlag_HT1>:
{
 800396a:	b580      	push	{r7, lr}
 800396c:	b082      	sub	sp, #8
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF1) == (DMA_ISR_HTIF1)) ? 1UL : 0UL);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2204      	movs	r2, #4
 8003978:	4013      	ands	r3, r2
 800397a:	2b04      	cmp	r3, #4
 800397c:	d101      	bne.n	8003982 <LL_DMA_IsActiveFlag_HT1+0x18>
 800397e:	2301      	movs	r3, #1
 8003980:	e000      	b.n	8003984 <LL_DMA_IsActiveFlag_HT1+0x1a>
 8003982:	2300      	movs	r3, #0
}
 8003984:	0018      	movs	r0, r3
 8003986:	46bd      	mov	sp, r7
 8003988:	b002      	add	sp, #8
 800398a:	bd80      	pop	{r7, pc}

0800398c <LL_DMA_IsActiveFlag_TE1>:
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF1) == (DMA_ISR_TEIF1)) ? 1UL : 0UL);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2208      	movs	r2, #8
 800399a:	4013      	ands	r3, r2
 800399c:	2b08      	cmp	r3, #8
 800399e:	d101      	bne.n	80039a4 <LL_DMA_IsActiveFlag_TE1+0x18>
 80039a0:	2301      	movs	r3, #1
 80039a2:	e000      	b.n	80039a6 <LL_DMA_IsActiveFlag_TE1+0x1a>
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	0018      	movs	r0, r3
 80039a8:	46bd      	mov	sp, r7
 80039aa:	b002      	add	sp, #8
 80039ac:	bd80      	pop	{r7, pc}

080039ae <LL_DMA_ClearFlag_TC1>:
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b082      	sub	sp, #8
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2202      	movs	r2, #2
 80039ba:	605a      	str	r2, [r3, #4]
}
 80039bc:	46c0      	nop			@ (mov r8, r8)
 80039be:	46bd      	mov	sp, r7
 80039c0:	b002      	add	sp, #8
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <LL_DMA_ClearFlag_HT1>:
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF1);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2204      	movs	r2, #4
 80039d0:	605a      	str	r2, [r3, #4]
}
 80039d2:	46c0      	nop			@ (mov r8, r8)
 80039d4:	46bd      	mov	sp, r7
 80039d6:	b002      	add	sp, #8
 80039d8:	bd80      	pop	{r7, pc}

080039da <LL_DMA_ClearFlag_TE1>:
{
 80039da:	b580      	push	{r7, lr}
 80039dc:	b082      	sub	sp, #8
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF1);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2208      	movs	r2, #8
 80039e6:	605a      	str	r2, [r3, #4]
}
 80039e8:	46c0      	nop			@ (mov r8, r8)
 80039ea:	46bd      	mov	sp, r7
 80039ec:	b002      	add	sp, #8
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80039f4:	46c0      	nop			@ (mov r8, r8)
 80039f6:	e7fd      	b.n	80039f4 <NMI_Handler+0x4>

080039f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039fc:	46c0      	nop			@ (mov r8, r8)
 80039fe:	e7fd      	b.n	80039fc <HardFault_Handler+0x4>

08003a00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a04:	46c0      	nop			@ (mov r8, r8)
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a0e:	46c0      	nop			@ (mov r8, r8)
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a18:	f000 f93c 	bl	8003c94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a1c:	46c0      	nop			@ (mov r8, r8)
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8003a22:	b580      	push	{r7, lr}
 8003a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encoder_Pulse_A_Pin);
 8003a26:	2380      	movs	r3, #128	@ 0x80
 8003a28:	019b      	lsls	r3, r3, #6
 8003a2a:	0018      	movs	r0, r3
 8003a2c:	f001 f8c4 	bl	8004bb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8003a30:	46c0      	nop			@ (mov r8, r8)
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
	...

08003a38 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
  /* Check whether DMA transfer complete caused the DMA interruption */
  if(LL_DMA_IsActiveFlag_TC1(DMA1) == 1)
 8003a3c:	4b15      	ldr	r3, [pc, #84]	@ (8003a94 <DMA1_Channel1_IRQHandler+0x5c>)
 8003a3e:	0018      	movs	r0, r3
 8003a40:	f7ff ff82 	bl	8003948 <LL_DMA_IsActiveFlag_TC1>
 8003a44:	0003      	movs	r3, r0
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d106      	bne.n	8003a58 <DMA1_Channel1_IRQHandler+0x20>
  {
	/* Clear flag DMA transfer complete */
	LL_DMA_ClearFlag_TC1(DMA1);
 8003a4a:	4b12      	ldr	r3, [pc, #72]	@ (8003a94 <DMA1_Channel1_IRQHandler+0x5c>)
 8003a4c:	0018      	movs	r0, r3
 8003a4e:	f7ff ffae 	bl	80039ae <LL_DMA_ClearFlag_TC1>

	/* Call interruption treatment function */
	ADC_ConvCpltCallback();
 8003a52:	f7ff fb0b 	bl	800306c <ADC_ConvCpltCallback>
 8003a56:	e00c      	b.n	8003a72 <DMA1_Channel1_IRQHandler+0x3a>
  }
  else if(LL_DMA_IsActiveFlag_HT1(DMA1) == 1)
 8003a58:	4b0e      	ldr	r3, [pc, #56]	@ (8003a94 <DMA1_Channel1_IRQHandler+0x5c>)
 8003a5a:	0018      	movs	r0, r3
 8003a5c:	f7ff ff85 	bl	800396a <LL_DMA_IsActiveFlag_HT1>
 8003a60:	0003      	movs	r3, r0
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d105      	bne.n	8003a72 <DMA1_Channel1_IRQHandler+0x3a>
  {
	  /* Clear flag DMA half transfer complete */
	  LL_DMA_ClearFlag_HT1(DMA1);
 8003a66:	4b0b      	ldr	r3, [pc, #44]	@ (8003a94 <DMA1_Channel1_IRQHandler+0x5c>)
 8003a68:	0018      	movs	r0, r3
 8003a6a:	f7ff ffab 	bl	80039c4 <LL_DMA_ClearFlag_HT1>

	  /* Call interruption treatment function */
	  ADC_ConvHalfCpltCallback();
 8003a6e:	f7ff fb07 	bl	8003080 <ADC_ConvHalfCpltCallback>
  }
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
  /* Check whether DMA transfer error caused the DMA interruption */
  if(LL_DMA_IsActiveFlag_TE1(DMA1) == 1)
 8003a72:	4b08      	ldr	r3, [pc, #32]	@ (8003a94 <DMA1_Channel1_IRQHandler+0x5c>)
 8003a74:	0018      	movs	r0, r3
 8003a76:	f7ff ff89 	bl	800398c <LL_DMA_IsActiveFlag_TE1>
 8003a7a:	0003      	movs	r3, r0
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d105      	bne.n	8003a8c <DMA1_Channel1_IRQHandler+0x54>
  {
	  /* Clear flag DMA transfer error */
	  LL_DMA_ClearFlag_TE1(DMA1);
 8003a80:	4b04      	ldr	r3, [pc, #16]	@ (8003a94 <DMA1_Channel1_IRQHandler+0x5c>)
 8003a82:	0018      	movs	r0, r3
 8003a84:	f7ff ffa9 	bl	80039da <LL_DMA_ClearFlag_TE1>

	  /* Call interruption treatment function */
	  ADC_ErrorCallback();
 8003a88:	f7ff fb04 	bl	8003094 <ADC_ErrorCallback>
  }
  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003a8c:	46c0      	nop			@ (mov r8, r8)
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	46c0      	nop			@ (mov r8, r8)
 8003a94:	40020000 	.word	0x40020000

08003a98 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003a9c:	4b05      	ldr	r3, [pc, #20]	@ (8003ab4 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8003a9e:	0018      	movs	r0, r3
 8003aa0:	f000 fcae 	bl	8004400 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003aa4:	4b04      	ldr	r3, [pc, #16]	@ (8003ab8 <DMA1_Channel2_3_IRQHandler+0x20>)
 8003aa6:	0018      	movs	r0, r3
 8003aa8:	f000 fcaa 	bl	8004400 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8003aac:	46c0      	nop			@ (mov r8, r8)
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	46c0      	nop			@ (mov r8, r8)
 8003ab4:	20000588 	.word	0x20000588
 8003ab8:	200005e4 	.word	0x200005e4

08003abc <DMAMUX1_DMA1_CH4_5_IRQHandler>:

/**
  * @brief This function handles DMAMUX1, DMA1 Channel 4 and 5.
  */
void DMAMUX1_DMA1_CH4_5_IRQHandler(void)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_DMA1_CH4_5_IRQn 0 */

  /* USER CODE END DMAMUX1_DMA1_CH4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003ac0:	4b05      	ldr	r3, [pc, #20]	@ (8003ad8 <DMAMUX1_DMA1_CH4_5_IRQHandler+0x1c>)
 8003ac2:	0018      	movs	r0, r3
 8003ac4:	f000 fc9c 	bl	8004400 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8003ac8:	4b04      	ldr	r3, [pc, #16]	@ (8003adc <DMAMUX1_DMA1_CH4_5_IRQHandler+0x20>)
 8003aca:	0018      	movs	r0, r3
 8003acc:	f000 fc98 	bl	8004400 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_DMA1_CH4_5_IRQn 1 */

  /* USER CODE END DMAMUX1_DMA1_CH4_5_IRQn 1 */
}
 8003ad0:	46c0      	nop			@ (mov r8, r8)
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	46c0      	nop			@ (mov r8, r8)
 8003ad8:	20000340 	.word	0x20000340
 8003adc:	2000039c 	.word	0x2000039c

08003ae0 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */
  /* Check whether ADC group regular overrun caused the ADC interruption */
  if(LL_ADC_IsActiveFlag_OVR(ADC1) != 0)
 8003ae4:	4b07      	ldr	r3, [pc, #28]	@ (8003b04 <ADC1_IRQHandler+0x24>)
 8003ae6:	0018      	movs	r0, r3
 8003ae8:	f7ff ff12 	bl	8003910 <LL_ADC_IsActiveFlag_OVR>
 8003aec:	1e03      	subs	r3, r0, #0
 8003aee:	d005      	beq.n	8003afc <ADC1_IRQHandler+0x1c>
  {
	/* Clear flag ADC group regular overrun */
	LL_ADC_ClearFlag_OVR(ADC1);
 8003af0:	4b04      	ldr	r3, [pc, #16]	@ (8003b04 <ADC1_IRQHandler+0x24>)
 8003af2:	0018      	movs	r0, r3
 8003af4:	f7ff ff1d 	bl	8003932 <LL_ADC_ClearFlag_OVR>

	/* Call interruption treatment function */
	ADC_ErrorCallback();
 8003af8:	f7ff facc 	bl	8003094 <ADC_ErrorCallback>
  }
  /* USER CODE END ADC1_IRQn 0 */
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8003afc:	46c0      	nop			@ (mov r8, r8)
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	46c0      	nop			@ (mov r8, r8)
 8003b04:	40012400 	.word	0x40012400

08003b08 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8003b0c:	4b03      	ldr	r3, [pc, #12]	@ (8003b1c <TIM14_IRQHandler+0x14>)
 8003b0e:	0018      	movs	r0, r3
 8003b10:	f004 f962 	bl	8007dd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8003b14:	46c0      	nop			@ (mov r8, r8)
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	46c0      	nop			@ (mov r8, r8)
 8003b1c:	200004a8 	.word	0x200004a8

08003b20 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 interrupt (combined with EXTI 23).
  */
void I2C1_IRQHandler(void)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8003b24:	4b09      	ldr	r3, [pc, #36]	@ (8003b4c <I2C1_IRQHandler+0x2c>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	699a      	ldr	r2, [r3, #24]
 8003b2a:	23e0      	movs	r3, #224	@ 0xe0
 8003b2c:	00db      	lsls	r3, r3, #3
 8003b2e:	4013      	ands	r3, r2
 8003b30:	d004      	beq.n	8003b3c <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8003b32:	4b06      	ldr	r3, [pc, #24]	@ (8003b4c <I2C1_IRQHandler+0x2c>)
 8003b34:	0018      	movs	r0, r3
 8003b36:	f001 fc93 	bl	8005460 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8003b3a:	e003      	b.n	8003b44 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8003b3c:	4b03      	ldr	r3, [pc, #12]	@ (8003b4c <I2C1_IRQHandler+0x2c>)
 8003b3e:	0018      	movs	r0, r3
 8003b40:	f001 fc74 	bl	800542c <HAL_I2C_EV_IRQHandler>
}
 8003b44:	46c0      	nop			@ (mov r8, r8)
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	46c0      	nop			@ (mov r8, r8)
 8003b4c:	200002ec 	.word	0x200002ec

08003b50 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 interrupt.
  */
void USART1_IRQHandler(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003b54:	4b03      	ldr	r3, [pc, #12]	@ (8003b64 <USART1_IRQHandler+0x14>)
 8003b56:	0018      	movs	r0, r3
 8003b58:	f005 f980 	bl	8008e5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003b5c:	46c0      	nop			@ (mov r8, r8)
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	46c0      	nop			@ (mov r8, r8)
 8003b64:	200004f4 	.word	0x200004f4

08003b68 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003b6c:	4b03      	ldr	r3, [pc, #12]	@ (8003b7c <SystemInit+0x14>)
 8003b6e:	2280      	movs	r2, #128	@ 0x80
 8003b70:	0512      	lsls	r2, r2, #20
 8003b72:	609a      	str	r2, [r3, #8]
#endif
}
 8003b74:	46c0      	nop			@ (mov r8, r8)
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	46c0      	nop			@ (mov r8, r8)
 8003b7c:	e000ed00 	.word	0xe000ed00

08003b80 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003b80:	480d      	ldr	r0, [pc, #52]	@ (8003bb8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003b82:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003b84:	f7ff fff0 	bl	8003b68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003b88:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003b8a:	e003      	b.n	8003b94 <LoopCopyDataInit>

08003b8c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003b8c:	4b0b      	ldr	r3, [pc, #44]	@ (8003bbc <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8003b8e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003b90:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003b92:	3104      	adds	r1, #4

08003b94 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003b94:	480a      	ldr	r0, [pc, #40]	@ (8003bc0 <LoopForever+0xa>)
  ldr r3, =_edata
 8003b96:	4b0b      	ldr	r3, [pc, #44]	@ (8003bc4 <LoopForever+0xe>)
  adds r2, r0, r1
 8003b98:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003b9a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003b9c:	d3f6      	bcc.n	8003b8c <CopyDataInit>
  ldr r2, =_sbss
 8003b9e:	4a0a      	ldr	r2, [pc, #40]	@ (8003bc8 <LoopForever+0x12>)
  b LoopFillZerobss
 8003ba0:	e002      	b.n	8003ba8 <LoopFillZerobss>

08003ba2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003ba2:	2300      	movs	r3, #0
  str  r3, [r2]
 8003ba4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ba6:	3204      	adds	r2, #4

08003ba8 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8003ba8:	4b08      	ldr	r3, [pc, #32]	@ (8003bcc <LoopForever+0x16>)
  cmp r2, r3
 8003baa:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003bac:	d3f9      	bcc.n	8003ba2 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8003bae:	f006 fed7 	bl	800a960 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003bb2:	f7fd fcef 	bl	8001594 <main>

08003bb6 <LoopForever>:

LoopForever:
    b LoopForever
 8003bb6:	e7fe      	b.n	8003bb6 <LoopForever>
  ldr   r0, =_estack
 8003bb8:	20006000 	.word	0x20006000
  ldr r3, =_sidata
 8003bbc:	0800ade0 	.word	0x0800ade0
  ldr r0, =_sdata
 8003bc0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003bc4:	200000c0 	.word	0x200000c0
  ldr r2, =_sbss
 8003bc8:	200000c0 	.word	0x200000c0
  ldr r3, = _ebss
 8003bcc:	200008a0 	.word	0x200008a0

08003bd0 <EXTI0_1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003bd0:	e7fe      	b.n	8003bd0 <EXTI0_1_IRQHandler>

08003bd2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	b082      	sub	sp, #8
 8003bd6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003bd8:	1dfb      	adds	r3, r7, #7
 8003bda:	2200      	movs	r2, #0
 8003bdc:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003bde:	2003      	movs	r0, #3
 8003be0:	f000 f80e 	bl	8003c00 <HAL_InitTick>
 8003be4:	1e03      	subs	r3, r0, #0
 8003be6:	d003      	beq.n	8003bf0 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8003be8:	1dfb      	adds	r3, r7, #7
 8003bea:	2201      	movs	r2, #1
 8003bec:	701a      	strb	r2, [r3, #0]
 8003bee:	e001      	b.n	8003bf4 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003bf0:	f7ff faf6 	bl	80031e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003bf4:	1dfb      	adds	r3, r7, #7
 8003bf6:	781b      	ldrb	r3, [r3, #0]
}
 8003bf8:	0018      	movs	r0, r3
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	b002      	add	sp, #8
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c00:	b590      	push	{r4, r7, lr}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003c08:	230f      	movs	r3, #15
 8003c0a:	18fb      	adds	r3, r7, r3
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8003c10:	4b1d      	ldr	r3, [pc, #116]	@ (8003c88 <HAL_InitTick+0x88>)
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d02b      	beq.n	8003c70 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8003c18:	4b1c      	ldr	r3, [pc, #112]	@ (8003c8c <HAL_InitTick+0x8c>)
 8003c1a:	681c      	ldr	r4, [r3, #0]
 8003c1c:	4b1a      	ldr	r3, [pc, #104]	@ (8003c88 <HAL_InitTick+0x88>)
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	0019      	movs	r1, r3
 8003c22:	23fa      	movs	r3, #250	@ 0xfa
 8003c24:	0098      	lsls	r0, r3, #2
 8003c26:	f7fc fa6f 	bl	8000108 <__udivsi3>
 8003c2a:	0003      	movs	r3, r0
 8003c2c:	0019      	movs	r1, r3
 8003c2e:	0020      	movs	r0, r4
 8003c30:	f7fc fa6a 	bl	8000108 <__udivsi3>
 8003c34:	0003      	movs	r3, r0
 8003c36:	0018      	movs	r0, r3
 8003c38:	f000 f96f 	bl	8003f1a <HAL_SYSTICK_Config>
 8003c3c:	1e03      	subs	r3, r0, #0
 8003c3e:	d112      	bne.n	8003c66 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2b03      	cmp	r3, #3
 8003c44:	d80a      	bhi.n	8003c5c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c46:	6879      	ldr	r1, [r7, #4]
 8003c48:	2301      	movs	r3, #1
 8003c4a:	425b      	negs	r3, r3
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	0018      	movs	r0, r3
 8003c50:	f000 f92e 	bl	8003eb0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003c54:	4b0e      	ldr	r3, [pc, #56]	@ (8003c90 <HAL_InitTick+0x90>)
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	601a      	str	r2, [r3, #0]
 8003c5a:	e00d      	b.n	8003c78 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003c5c:	230f      	movs	r3, #15
 8003c5e:	18fb      	adds	r3, r7, r3
 8003c60:	2201      	movs	r2, #1
 8003c62:	701a      	strb	r2, [r3, #0]
 8003c64:	e008      	b.n	8003c78 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003c66:	230f      	movs	r3, #15
 8003c68:	18fb      	adds	r3, r7, r3
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	701a      	strb	r2, [r3, #0]
 8003c6e:	e003      	b.n	8003c78 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003c70:	230f      	movs	r3, #15
 8003c72:	18fb      	adds	r3, r7, r3
 8003c74:	2201      	movs	r2, #1
 8003c76:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003c78:	230f      	movs	r3, #15
 8003c7a:	18fb      	adds	r3, r7, r3
 8003c7c:	781b      	ldrb	r3, [r3, #0]
}
 8003c7e:	0018      	movs	r0, r3
 8003c80:	46bd      	mov	sp, r7
 8003c82:	b005      	add	sp, #20
 8003c84:	bd90      	pop	{r4, r7, pc}
 8003c86:	46c0      	nop			@ (mov r8, r8)
 8003c88:	200000bc 	.word	0x200000bc
 8003c8c:	200000b4 	.word	0x200000b4
 8003c90:	200000b8 	.word	0x200000b8

08003c94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003c98:	4b05      	ldr	r3, [pc, #20]	@ (8003cb0 <HAL_IncTick+0x1c>)
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	001a      	movs	r2, r3
 8003c9e:	4b05      	ldr	r3, [pc, #20]	@ (8003cb4 <HAL_IncTick+0x20>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	18d2      	adds	r2, r2, r3
 8003ca4:	4b03      	ldr	r3, [pc, #12]	@ (8003cb4 <HAL_IncTick+0x20>)
 8003ca6:	601a      	str	r2, [r3, #0]
}
 8003ca8:	46c0      	nop			@ (mov r8, r8)
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	46c0      	nop			@ (mov r8, r8)
 8003cb0:	200000bc 	.word	0x200000bc
 8003cb4:	2000089c 	.word	0x2000089c

08003cb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	af00      	add	r7, sp, #0
  return uwTick;
 8003cbc:	4b02      	ldr	r3, [pc, #8]	@ (8003cc8 <HAL_GetTick+0x10>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
}
 8003cc0:	0018      	movs	r0, r3
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	46c0      	nop			@ (mov r8, r8)
 8003cc8:	2000089c 	.word	0x2000089c

08003ccc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003cd4:	f7ff fff0 	bl	8003cb8 <HAL_GetTick>
 8003cd8:	0003      	movs	r3, r0
 8003cda:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	d005      	beq.n	8003cf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ce6:	4b0a      	ldr	r3, [pc, #40]	@ (8003d10 <HAL_Delay+0x44>)
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	001a      	movs	r2, r3
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	189b      	adds	r3, r3, r2
 8003cf0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003cf2:	46c0      	nop			@ (mov r8, r8)
 8003cf4:	f7ff ffe0 	bl	8003cb8 <HAL_GetTick>
 8003cf8:	0002      	movs	r2, r0
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d8f7      	bhi.n	8003cf4 <HAL_Delay+0x28>
  {
  }
}
 8003d04:	46c0      	nop			@ (mov r8, r8)
 8003d06:	46c0      	nop			@ (mov r8, r8)
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	b004      	add	sp, #16
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	46c0      	nop			@ (mov r8, r8)
 8003d10:	200000bc 	.word	0x200000bc

08003d14 <__NVIC_EnableIRQ>:
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	0002      	movs	r2, r0
 8003d1c:	1dfb      	adds	r3, r7, #7
 8003d1e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003d20:	1dfb      	adds	r3, r7, #7
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	2b7f      	cmp	r3, #127	@ 0x7f
 8003d26:	d809      	bhi.n	8003d3c <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d28:	1dfb      	adds	r3, r7, #7
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	001a      	movs	r2, r3
 8003d2e:	231f      	movs	r3, #31
 8003d30:	401a      	ands	r2, r3
 8003d32:	4b04      	ldr	r3, [pc, #16]	@ (8003d44 <__NVIC_EnableIRQ+0x30>)
 8003d34:	2101      	movs	r1, #1
 8003d36:	4091      	lsls	r1, r2
 8003d38:	000a      	movs	r2, r1
 8003d3a:	601a      	str	r2, [r3, #0]
}
 8003d3c:	46c0      	nop			@ (mov r8, r8)
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	b002      	add	sp, #8
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	e000e100 	.word	0xe000e100

08003d48 <__NVIC_DisableIRQ>:
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	0002      	movs	r2, r0
 8003d50:	1dfb      	adds	r3, r7, #7
 8003d52:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003d54:	1dfb      	adds	r3, r7, #7
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	2b7f      	cmp	r3, #127	@ 0x7f
 8003d5a:	d810      	bhi.n	8003d7e <__NVIC_DisableIRQ+0x36>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d5c:	1dfb      	adds	r3, r7, #7
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	001a      	movs	r2, r3
 8003d62:	231f      	movs	r3, #31
 8003d64:	4013      	ands	r3, r2
 8003d66:	4908      	ldr	r1, [pc, #32]	@ (8003d88 <__NVIC_DisableIRQ+0x40>)
 8003d68:	2201      	movs	r2, #1
 8003d6a:	409a      	lsls	r2, r3
 8003d6c:	0013      	movs	r3, r2
 8003d6e:	2280      	movs	r2, #128	@ 0x80
 8003d70:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003d72:	f3bf 8f4f 	dsb	sy
}
 8003d76:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8003d78:	f3bf 8f6f 	isb	sy
}
 8003d7c:	46c0      	nop			@ (mov r8, r8)
}
 8003d7e:	46c0      	nop			@ (mov r8, r8)
 8003d80:	46bd      	mov	sp, r7
 8003d82:	b002      	add	sp, #8
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	46c0      	nop			@ (mov r8, r8)
 8003d88:	e000e100 	.word	0xe000e100

08003d8c <__NVIC_SetPriority>:
{
 8003d8c:	b590      	push	{r4, r7, lr}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	0002      	movs	r2, r0
 8003d94:	6039      	str	r1, [r7, #0]
 8003d96:	1dfb      	adds	r3, r7, #7
 8003d98:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003d9a:	1dfb      	adds	r3, r7, #7
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	2b7f      	cmp	r3, #127	@ 0x7f
 8003da0:	d828      	bhi.n	8003df4 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003da2:	4a2f      	ldr	r2, [pc, #188]	@ (8003e60 <__NVIC_SetPriority+0xd4>)
 8003da4:	1dfb      	adds	r3, r7, #7
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	b25b      	sxtb	r3, r3
 8003daa:	089b      	lsrs	r3, r3, #2
 8003dac:	33c0      	adds	r3, #192	@ 0xc0
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	589b      	ldr	r3, [r3, r2]
 8003db2:	1dfa      	adds	r2, r7, #7
 8003db4:	7812      	ldrb	r2, [r2, #0]
 8003db6:	0011      	movs	r1, r2
 8003db8:	2203      	movs	r2, #3
 8003dba:	400a      	ands	r2, r1
 8003dbc:	00d2      	lsls	r2, r2, #3
 8003dbe:	21ff      	movs	r1, #255	@ 0xff
 8003dc0:	4091      	lsls	r1, r2
 8003dc2:	000a      	movs	r2, r1
 8003dc4:	43d2      	mvns	r2, r2
 8003dc6:	401a      	ands	r2, r3
 8003dc8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	019b      	lsls	r3, r3, #6
 8003dce:	22ff      	movs	r2, #255	@ 0xff
 8003dd0:	401a      	ands	r2, r3
 8003dd2:	1dfb      	adds	r3, r7, #7
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	0018      	movs	r0, r3
 8003dd8:	2303      	movs	r3, #3
 8003dda:	4003      	ands	r3, r0
 8003ddc:	00db      	lsls	r3, r3, #3
 8003dde:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003de0:	481f      	ldr	r0, [pc, #124]	@ (8003e60 <__NVIC_SetPriority+0xd4>)
 8003de2:	1dfb      	adds	r3, r7, #7
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	b25b      	sxtb	r3, r3
 8003de8:	089b      	lsrs	r3, r3, #2
 8003dea:	430a      	orrs	r2, r1
 8003dec:	33c0      	adds	r3, #192	@ 0xc0
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	501a      	str	r2, [r3, r0]
}
 8003df2:	e031      	b.n	8003e58 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003df4:	4a1b      	ldr	r2, [pc, #108]	@ (8003e64 <__NVIC_SetPriority+0xd8>)
 8003df6:	1dfb      	adds	r3, r7, #7
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	0019      	movs	r1, r3
 8003dfc:	230f      	movs	r3, #15
 8003dfe:	400b      	ands	r3, r1
 8003e00:	3b08      	subs	r3, #8
 8003e02:	089b      	lsrs	r3, r3, #2
 8003e04:	3306      	adds	r3, #6
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	18d3      	adds	r3, r2, r3
 8003e0a:	3304      	adds	r3, #4
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	1dfa      	adds	r2, r7, #7
 8003e10:	7812      	ldrb	r2, [r2, #0]
 8003e12:	0011      	movs	r1, r2
 8003e14:	2203      	movs	r2, #3
 8003e16:	400a      	ands	r2, r1
 8003e18:	00d2      	lsls	r2, r2, #3
 8003e1a:	21ff      	movs	r1, #255	@ 0xff
 8003e1c:	4091      	lsls	r1, r2
 8003e1e:	000a      	movs	r2, r1
 8003e20:	43d2      	mvns	r2, r2
 8003e22:	401a      	ands	r2, r3
 8003e24:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	019b      	lsls	r3, r3, #6
 8003e2a:	22ff      	movs	r2, #255	@ 0xff
 8003e2c:	401a      	ands	r2, r3
 8003e2e:	1dfb      	adds	r3, r7, #7
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	0018      	movs	r0, r3
 8003e34:	2303      	movs	r3, #3
 8003e36:	4003      	ands	r3, r0
 8003e38:	00db      	lsls	r3, r3, #3
 8003e3a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e3c:	4809      	ldr	r0, [pc, #36]	@ (8003e64 <__NVIC_SetPriority+0xd8>)
 8003e3e:	1dfb      	adds	r3, r7, #7
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	001c      	movs	r4, r3
 8003e44:	230f      	movs	r3, #15
 8003e46:	4023      	ands	r3, r4
 8003e48:	3b08      	subs	r3, #8
 8003e4a:	089b      	lsrs	r3, r3, #2
 8003e4c:	430a      	orrs	r2, r1
 8003e4e:	3306      	adds	r3, #6
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	18c3      	adds	r3, r0, r3
 8003e54:	3304      	adds	r3, #4
 8003e56:	601a      	str	r2, [r3, #0]
}
 8003e58:	46c0      	nop			@ (mov r8, r8)
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	b003      	add	sp, #12
 8003e5e:	bd90      	pop	{r4, r7, pc}
 8003e60:	e000e100 	.word	0xe000e100
 8003e64:	e000ed00 	.word	0xe000ed00

08003e68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	1e5a      	subs	r2, r3, #1
 8003e74:	2380      	movs	r3, #128	@ 0x80
 8003e76:	045b      	lsls	r3, r3, #17
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d301      	bcc.n	8003e80 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e010      	b.n	8003ea2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e80:	4b0a      	ldr	r3, [pc, #40]	@ (8003eac <SysTick_Config+0x44>)
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	3a01      	subs	r2, #1
 8003e86:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e88:	2301      	movs	r3, #1
 8003e8a:	425b      	negs	r3, r3
 8003e8c:	2103      	movs	r1, #3
 8003e8e:	0018      	movs	r0, r3
 8003e90:	f7ff ff7c 	bl	8003d8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e94:	4b05      	ldr	r3, [pc, #20]	@ (8003eac <SysTick_Config+0x44>)
 8003e96:	2200      	movs	r2, #0
 8003e98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e9a:	4b04      	ldr	r3, [pc, #16]	@ (8003eac <SysTick_Config+0x44>)
 8003e9c:	2207      	movs	r2, #7
 8003e9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ea0:	2300      	movs	r3, #0
}
 8003ea2:	0018      	movs	r0, r3
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	b002      	add	sp, #8
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	46c0      	nop			@ (mov r8, r8)
 8003eac:	e000e010 	.word	0xe000e010

08003eb0 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60b9      	str	r1, [r7, #8]
 8003eb8:	607a      	str	r2, [r7, #4]
 8003eba:	210f      	movs	r1, #15
 8003ebc:	187b      	adds	r3, r7, r1
 8003ebe:	1c02      	adds	r2, r0, #0
 8003ec0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003ec2:	68ba      	ldr	r2, [r7, #8]
 8003ec4:	187b      	adds	r3, r7, r1
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	b25b      	sxtb	r3, r3
 8003eca:	0011      	movs	r1, r2
 8003ecc:	0018      	movs	r0, r3
 8003ece:	f7ff ff5d 	bl	8003d8c <__NVIC_SetPriority>
}
 8003ed2:	46c0      	nop			@ (mov r8, r8)
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	b004      	add	sp, #16
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003eda:	b580      	push	{r7, lr}
 8003edc:	b082      	sub	sp, #8
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	0002      	movs	r2, r0
 8003ee2:	1dfb      	adds	r3, r7, #7
 8003ee4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ee6:	1dfb      	adds	r3, r7, #7
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	b25b      	sxtb	r3, r3
 8003eec:	0018      	movs	r0, r3
 8003eee:	f7ff ff11 	bl	8003d14 <__NVIC_EnableIRQ>
}
 8003ef2:	46c0      	nop			@ (mov r8, r8)
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	b002      	add	sp, #8
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b082      	sub	sp, #8
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	0002      	movs	r2, r0
 8003f02:	1dfb      	adds	r3, r7, #7
 8003f04:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003f06:	1dfb      	adds	r3, r7, #7
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	b25b      	sxtb	r3, r3
 8003f0c:	0018      	movs	r0, r3
 8003f0e:	f7ff ff1b 	bl	8003d48 <__NVIC_DisableIRQ>
}
 8003f12:	46c0      	nop			@ (mov r8, r8)
 8003f14:	46bd      	mov	sp, r7
 8003f16:	b002      	add	sp, #8
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b082      	sub	sp, #8
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	0018      	movs	r0, r3
 8003f26:	f7ff ff9f 	bl	8003e68 <SysTick_Config>
 8003f2a:	0003      	movs	r3, r0
}
 8003f2c:	0018      	movs	r0, r3
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	b002      	add	sp, #8
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e077      	b.n	8004036 <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a3d      	ldr	r2, [pc, #244]	@ (8004040 <HAL_DMA_Init+0x10c>)
 8003f4c:	4694      	mov	ip, r2
 8003f4e:	4463      	add	r3, ip
 8003f50:	2114      	movs	r1, #20
 8003f52:	0018      	movs	r0, r3
 8003f54:	f7fc f8d8 	bl	8000108 <__udivsi3>
 8003f58:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 8003f5a:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2225      	movs	r2, #37	@ 0x25
 8003f64:	2102      	movs	r1, #2
 8003f66:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4934      	ldr	r1, [pc, #208]	@ (8004044 <HAL_DMA_Init+0x110>)
 8003f74:	400a      	ands	r2, r1
 8003f76:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	6819      	ldr	r1, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	689a      	ldr	r2, [r3, #8]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	431a      	orrs	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	431a      	orrs	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	695b      	ldr	r3, [r3, #20]
 8003f92:	431a      	orrs	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	431a      	orrs	r2, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	69db      	ldr	r3, [r3, #28]
 8003f9e:	431a      	orrs	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a1b      	ldr	r3, [r3, #32]
 8003fa4:	431a      	orrs	r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	430a      	orrs	r2, r1
 8003fac:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	0018      	movs	r0, r3
 8003fb2:	f000 fb2d 	bl	8004610 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	689a      	ldr	r2, [r3, #8]
 8003fba:	2380      	movs	r3, #128	@ 0x80
 8003fbc:	01db      	lsls	r3, r3, #7
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d102      	bne.n	8003fc8 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685a      	ldr	r2, [r3, #4]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fd0:	21ff      	movs	r1, #255	@ 0xff
 8003fd2:	400a      	ands	r2, r1
 8003fd4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003fde:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d011      	beq.n	800400c <HAL_DMA_Init+0xd8>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	2b04      	cmp	r3, #4
 8003fee:	d80d      	bhi.n	800400c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	0018      	movs	r0, r3
 8003ff4:	f000 fb38 	bl	8004668 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8004008:	605a      	str	r2, [r3, #4]
 800400a:	e008      	b.n	800401e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2225      	movs	r2, #37	@ 0x25
 8004028:	2101      	movs	r1, #1
 800402a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2224      	movs	r2, #36	@ 0x24
 8004030:	2100      	movs	r1, #0
 8004032:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	0018      	movs	r0, r3
 8004038:	46bd      	mov	sp, r7
 800403a:	b002      	add	sp, #8
 800403c:	bd80      	pop	{r7, pc}
 800403e:	46c0      	nop			@ (mov r8, r8)
 8004040:	bffdfff8 	.word	0xbffdfff8
 8004044:	ffff800f 	.word	0xffff800f

08004048 <HAL_DMA_DeInit>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e066      	b.n	8004128 <HAL_DMA_DeInit+0xe0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2101      	movs	r1, #1
 8004066:	438a      	bics	r2, r1
 8004068:	601a      	str	r2, [r3, #0]

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a30      	ldr	r2, [pc, #192]	@ (8004130 <HAL_DMA_DeInit+0xe8>)
 8004070:	4694      	mov	ip, r2
 8004072:	4463      	add	r3, ip
 8004074:	2114      	movs	r1, #20
 8004076:	0018      	movs	r0, r3
 8004078:	f7fc f846 	bl	8000108 <__udivsi3>
 800407c:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 800407e:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2200      	movs	r2, #0
 800408a:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 800408c:	4b29      	ldr	r3, [pc, #164]	@ (8004134 <HAL_DMA_DeInit+0xec>)
 800408e:	6859      	ldr	r1, [r3, #4]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004094:	221c      	movs	r2, #28
 8004096:	4013      	ands	r3, r2
 8004098:	2201      	movs	r2, #1
 800409a:	409a      	lsls	r2, r3
 800409c:	4b25      	ldr	r3, [pc, #148]	@ (8004134 <HAL_DMA_DeInit+0xec>)
 800409e:	430a      	orrs	r2, r1
 80040a0:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	0018      	movs	r0, r3
 80040a6:	f000 fab3 	bl	8004610 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ae:	2200      	movs	r2, #0
 80040b0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80040ba:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d010      	beq.n	80040e6 <HAL_DMA_DeInit+0x9e>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	2b04      	cmp	r3, #4
 80040ca:	d80c      	bhi.n	80040e6 <HAL_DMA_DeInit+0x9e>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	0018      	movs	r0, r3
 80040d0:	f000 faca 	bl	8004668 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040d8:	2200      	movs	r2, #0
 80040da:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80040e4:	605a      	str	r2, [r3, #4]
  }

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	639a      	str	r2, [r3, #56]	@ 0x38

  hdma->DMAmuxRequestGen = 0U;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma->DMAmuxRequestGenStatus = 0U;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 0U;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2225      	movs	r2, #37	@ 0x25
 800411a:	2100      	movs	r1, #0
 800411c:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2224      	movs	r2, #36	@ 0x24
 8004122:	2100      	movs	r1, #0
 8004124:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004126:	2300      	movs	r3, #0
}
 8004128:	0018      	movs	r0, r3
 800412a:	46bd      	mov	sp, r7
 800412c:	b002      	add	sp, #8
 800412e:	bd80      	pop	{r7, pc}
 8004130:	bffdfff8 	.word	0xbffdfff8
 8004134:	40020000 	.word	0x40020000

08004138 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b086      	sub	sp, #24
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
 8004144:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004146:	2317      	movs	r3, #23
 8004148:	18fb      	adds	r3, r7, r3
 800414a:	2200      	movs	r2, #0
 800414c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2224      	movs	r2, #36	@ 0x24
 8004152:	5c9b      	ldrb	r3, [r3, r2]
 8004154:	2b01      	cmp	r3, #1
 8004156:	d101      	bne.n	800415c <HAL_DMA_Start_IT+0x24>
 8004158:	2302      	movs	r3, #2
 800415a:	e070      	b.n	800423e <HAL_DMA_Start_IT+0x106>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2224      	movs	r2, #36	@ 0x24
 8004160:	2101      	movs	r1, #1
 8004162:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2225      	movs	r2, #37	@ 0x25
 8004168:	5c9b      	ldrb	r3, [r3, r2]
 800416a:	b2db      	uxtb	r3, r3
 800416c:	2b01      	cmp	r3, #1
 800416e:	d157      	bne.n	8004220 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2225      	movs	r2, #37	@ 0x25
 8004174:	2102      	movs	r1, #2
 8004176:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2101      	movs	r1, #1
 800418a:	438a      	bics	r2, r1
 800418c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	68b9      	ldr	r1, [r7, #8]
 8004194:	68f8      	ldr	r0, [r7, #12]
 8004196:	f000 f9fb 	bl	8004590 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d008      	beq.n	80041b4 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	210e      	movs	r1, #14
 80041ae:	430a      	orrs	r2, r1
 80041b0:	601a      	str	r2, [r3, #0]
 80041b2:	e00f      	b.n	80041d4 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2104      	movs	r1, #4
 80041c0:	438a      	bics	r2, r1
 80041c2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	210a      	movs	r1, #10
 80041d0:	430a      	orrs	r2, r1
 80041d2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	2380      	movs	r3, #128	@ 0x80
 80041dc:	025b      	lsls	r3, r3, #9
 80041de:	4013      	ands	r3, r2
 80041e0:	d008      	beq.n	80041f4 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ec:	2180      	movs	r1, #128	@ 0x80
 80041ee:	0049      	lsls	r1, r1, #1
 80041f0:	430a      	orrs	r2, r1
 80041f2:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d008      	beq.n	800420e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004206:	2180      	movs	r1, #128	@ 0x80
 8004208:	0049      	lsls	r1, r1, #1
 800420a:	430a      	orrs	r2, r1
 800420c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2101      	movs	r1, #1
 800421a:	430a      	orrs	r2, r1
 800421c:	601a      	str	r2, [r3, #0]
 800421e:	e007      	b.n	8004230 <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2224      	movs	r2, #36	@ 0x24
 8004224:	2100      	movs	r1, #0
 8004226:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004228:	2317      	movs	r3, #23
 800422a:	18fb      	adds	r3, r7, r3
 800422c:	2202      	movs	r2, #2
 800422e:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2224      	movs	r2, #36	@ 0x24
 8004234:	2100      	movs	r1, #0
 8004236:	5499      	strb	r1, [r3, r2]

  return status;
 8004238:	2317      	movs	r3, #23
 800423a:	18fb      	adds	r3, r7, r3
 800423c:	781b      	ldrb	r3, [r3, #0]
}
 800423e:	0018      	movs	r0, r3
 8004240:	46bd      	mov	sp, r7
 8004242:	b006      	add	sp, #24
 8004244:	bd80      	pop	{r7, pc}
	...

08004248 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d101      	bne.n	800425a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e050      	b.n	80042fc <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2225      	movs	r2, #37	@ 0x25
 800425e:	5c9b      	ldrb	r3, [r3, r2]
 8004260:	b2db      	uxtb	r3, r3
 8004262:	2b02      	cmp	r3, #2
 8004264:	d008      	beq.n	8004278 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2204      	movs	r2, #4
 800426a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2224      	movs	r2, #36	@ 0x24
 8004270:	2100      	movs	r1, #0
 8004272:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e041      	b.n	80042fc <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	210e      	movs	r1, #14
 8004284:	438a      	bics	r2, r1
 8004286:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004292:	491c      	ldr	r1, [pc, #112]	@ (8004304 <HAL_DMA_Abort+0xbc>)
 8004294:	400a      	ands	r2, r1
 8004296:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2101      	movs	r1, #1
 80042a4:	438a      	bics	r2, r1
 80042a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 80042a8:	4b17      	ldr	r3, [pc, #92]	@ (8004308 <HAL_DMA_Abort+0xc0>)
 80042aa:	6859      	ldr	r1, [r3, #4]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b0:	221c      	movs	r2, #28
 80042b2:	4013      	ands	r3, r2
 80042b4:	2201      	movs	r2, #1
 80042b6:	409a      	lsls	r2, r3
 80042b8:	4b13      	ldr	r3, [pc, #76]	@ (8004308 <HAL_DMA_Abort+0xc0>)
 80042ba:	430a      	orrs	r2, r1
 80042bc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80042c6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00c      	beq.n	80042ea <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042da:	490a      	ldr	r1, [pc, #40]	@ (8004304 <HAL_DMA_Abort+0xbc>)
 80042dc:	400a      	ands	r2, r1
 80042de:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80042e8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2225      	movs	r2, #37	@ 0x25
 80042ee:	2101      	movs	r1, #1
 80042f0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2224      	movs	r2, #36	@ 0x24
 80042f6:	2100      	movs	r1, #0
 80042f8:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	0018      	movs	r0, r3
 80042fe:	46bd      	mov	sp, r7
 8004300:	b002      	add	sp, #8
 8004302:	bd80      	pop	{r7, pc}
 8004304:	fffffeff 	.word	0xfffffeff
 8004308:	40020000 	.word	0x40020000

0800430c <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004314:	230f      	movs	r3, #15
 8004316:	18fb      	adds	r3, r7, r3
 8004318:	2200      	movs	r2, #0
 800431a:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2224      	movs	r2, #36	@ 0x24
 8004320:	2100      	movs	r1, #0
 8004322:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2224      	movs	r2, #36	@ 0x24
 8004328:	5c9b      	ldrb	r3, [r3, r2]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d101      	bne.n	8004332 <HAL_DMA_Abort_IT+0x26>
 800432e:	2302      	movs	r3, #2
 8004330:	e05e      	b.n	80043f0 <HAL_DMA_Abort_IT+0xe4>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2224      	movs	r2, #36	@ 0x24
 8004336:	2101      	movs	r1, #1
 8004338:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2225      	movs	r2, #37	@ 0x25
 800433e:	5c9b      	ldrb	r3, [r3, r2]
 8004340:	b2db      	uxtb	r3, r3
 8004342:	2b02      	cmp	r3, #2
 8004344:	d007      	beq.n	8004356 <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2204      	movs	r2, #4
 800434a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800434c:	230f      	movs	r3, #15
 800434e:	18fb      	adds	r3, r7, r3
 8004350:	2201      	movs	r2, #1
 8004352:	701a      	strb	r2, [r3, #0]
 8004354:	e049      	b.n	80043ea <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	210e      	movs	r1, #14
 8004362:	438a      	bics	r2, r1
 8004364:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2101      	movs	r1, #1
 8004372:	438a      	bics	r2, r1
 8004374:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004380:	491d      	ldr	r1, [pc, #116]	@ (80043f8 <HAL_DMA_Abort_IT+0xec>)
 8004382:	400a      	ands	r2, r1
 8004384:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 8004386:	4b1d      	ldr	r3, [pc, #116]	@ (80043fc <HAL_DMA_Abort_IT+0xf0>)
 8004388:	6859      	ldr	r1, [r3, #4]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800438e:	221c      	movs	r2, #28
 8004390:	4013      	ands	r3, r2
 8004392:	2201      	movs	r2, #1
 8004394:	409a      	lsls	r2, r3
 8004396:	4b19      	ldr	r3, [pc, #100]	@ (80043fc <HAL_DMA_Abort_IT+0xf0>)
 8004398:	430a      	orrs	r2, r1
 800439a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80043a4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00c      	beq.n	80043c8 <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043b8:	490f      	ldr	r1, [pc, #60]	@ (80043f8 <HAL_DMA_Abort_IT+0xec>)
 80043ba:	400a      	ands	r2, r1
 80043bc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80043c6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2225      	movs	r2, #37	@ 0x25
 80043cc:	2101      	movs	r1, #1
 80043ce:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2224      	movs	r2, #36	@ 0x24
 80043d4:	2100      	movs	r1, #0
 80043d6:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d004      	beq.n	80043ea <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	0010      	movs	r0, r2
 80043e8:	4798      	blx	r3
    }
  }
  return status;
 80043ea:	230f      	movs	r3, #15
 80043ec:	18fb      	adds	r3, r7, r3
 80043ee:	781b      	ldrb	r3, [r3, #0]
}
 80043f0:	0018      	movs	r0, r3
 80043f2:	46bd      	mov	sp, r7
 80043f4:	b004      	add	sp, #16
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	fffffeff 	.word	0xfffffeff
 80043fc:	40020000 	.word	0x40020000

08004400 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 8004408:	4b55      	ldr	r3, [pc, #340]	@ (8004560 <HAL_DMA_IRQHandler+0x160>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800441a:	221c      	movs	r2, #28
 800441c:	4013      	ands	r3, r2
 800441e:	2204      	movs	r2, #4
 8004420:	409a      	lsls	r2, r3
 8004422:	0013      	movs	r3, r2
 8004424:	68fa      	ldr	r2, [r7, #12]
 8004426:	4013      	ands	r3, r2
 8004428:	d027      	beq.n	800447a <HAL_DMA_IRQHandler+0x7a>
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	2204      	movs	r2, #4
 800442e:	4013      	ands	r3, r2
 8004430:	d023      	beq.n	800447a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2220      	movs	r2, #32
 800443a:	4013      	ands	r3, r2
 800443c:	d107      	bne.n	800444e <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2104      	movs	r1, #4
 800444a:	438a      	bics	r2, r1
 800444c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 800444e:	4b44      	ldr	r3, [pc, #272]	@ (8004560 <HAL_DMA_IRQHandler+0x160>)
 8004450:	6859      	ldr	r1, [r3, #4]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004456:	221c      	movs	r2, #28
 8004458:	4013      	ands	r3, r2
 800445a:	2204      	movs	r2, #4
 800445c:	409a      	lsls	r2, r3
 800445e:	4b40      	ldr	r3, [pc, #256]	@ (8004560 <HAL_DMA_IRQHandler+0x160>)
 8004460:	430a      	orrs	r2, r1
 8004462:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004468:	2b00      	cmp	r3, #0
 800446a:	d100      	bne.n	800446e <HAL_DMA_IRQHandler+0x6e>
 800446c:	e073      	b.n	8004556 <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	0010      	movs	r0, r2
 8004476:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004478:	e06d      	b.n	8004556 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800447e:	221c      	movs	r2, #28
 8004480:	4013      	ands	r3, r2
 8004482:	2202      	movs	r2, #2
 8004484:	409a      	lsls	r2, r3
 8004486:	0013      	movs	r3, r2
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	4013      	ands	r3, r2
 800448c:	d02e      	beq.n	80044ec <HAL_DMA_IRQHandler+0xec>
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	2202      	movs	r2, #2
 8004492:	4013      	ands	r3, r2
 8004494:	d02a      	beq.n	80044ec <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2220      	movs	r2, #32
 800449e:	4013      	ands	r3, r2
 80044a0:	d10b      	bne.n	80044ba <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	210a      	movs	r1, #10
 80044ae:	438a      	bics	r2, r1
 80044b0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2225      	movs	r2, #37	@ 0x25
 80044b6:	2101      	movs	r1, #1
 80044b8:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 80044ba:	4b29      	ldr	r3, [pc, #164]	@ (8004560 <HAL_DMA_IRQHandler+0x160>)
 80044bc:	6859      	ldr	r1, [r3, #4]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c2:	221c      	movs	r2, #28
 80044c4:	4013      	ands	r3, r2
 80044c6:	2202      	movs	r2, #2
 80044c8:	409a      	lsls	r2, r3
 80044ca:	4b25      	ldr	r3, [pc, #148]	@ (8004560 <HAL_DMA_IRQHandler+0x160>)
 80044cc:	430a      	orrs	r2, r1
 80044ce:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2224      	movs	r2, #36	@ 0x24
 80044d4:	2100      	movs	r1, #0
 80044d6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d03a      	beq.n	8004556 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	0010      	movs	r0, r2
 80044e8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80044ea:	e034      	b.n	8004556 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f0:	221c      	movs	r2, #28
 80044f2:	4013      	ands	r3, r2
 80044f4:	2208      	movs	r2, #8
 80044f6:	409a      	lsls	r2, r3
 80044f8:	0013      	movs	r3, r2
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	4013      	ands	r3, r2
 80044fe:	d02b      	beq.n	8004558 <HAL_DMA_IRQHandler+0x158>
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	2208      	movs	r2, #8
 8004504:	4013      	ands	r3, r2
 8004506:	d027      	beq.n	8004558 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	210e      	movs	r1, #14
 8004514:	438a      	bics	r2, r1
 8004516:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8004518:	4b11      	ldr	r3, [pc, #68]	@ (8004560 <HAL_DMA_IRQHandler+0x160>)
 800451a:	6859      	ldr	r1, [r3, #4]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004520:	221c      	movs	r2, #28
 8004522:	4013      	ands	r3, r2
 8004524:	2201      	movs	r2, #1
 8004526:	409a      	lsls	r2, r3
 8004528:	4b0d      	ldr	r3, [pc, #52]	@ (8004560 <HAL_DMA_IRQHandler+0x160>)
 800452a:	430a      	orrs	r2, r1
 800452c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2201      	movs	r2, #1
 8004532:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2225      	movs	r2, #37	@ 0x25
 8004538:	2101      	movs	r1, #1
 800453a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2224      	movs	r2, #36	@ 0x24
 8004540:	2100      	movs	r1, #0
 8004542:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004548:	2b00      	cmp	r3, #0
 800454a:	d005      	beq.n	8004558 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	0010      	movs	r0, r2
 8004554:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004556:	46c0      	nop			@ (mov r8, r8)
 8004558:	46c0      	nop			@ (mov r8, r8)
}
 800455a:	46bd      	mov	sp, r7
 800455c:	b004      	add	sp, #16
 800455e:	bd80      	pop	{r7, pc}
 8004560:	40020000 	.word	0x40020000

08004564 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b082      	sub	sp, #8
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2225      	movs	r2, #37	@ 0x25
 8004570:	5c9b      	ldrb	r3, [r3, r2]
 8004572:	b2db      	uxtb	r3, r3
}
 8004574:	0018      	movs	r0, r3
 8004576:	46bd      	mov	sp, r7
 8004578:	b002      	add	sp, #8
 800457a:	bd80      	pop	{r7, pc}

0800457c <HAL_DMA_GetError>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8004588:	0018      	movs	r0, r3
 800458a:	46bd      	mov	sp, r7
 800458c:	b002      	add	sp, #8
 800458e:	bd80      	pop	{r7, pc}

08004590 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	60b9      	str	r1, [r7, #8]
 800459a:	607a      	str	r2, [r7, #4]
 800459c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80045a6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d004      	beq.n	80045ba <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80045b8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 80045ba:	4b14      	ldr	r3, [pc, #80]	@ (800460c <DMA_SetConfig+0x7c>)
 80045bc:	6859      	ldr	r1, [r3, #4]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045c2:	221c      	movs	r2, #28
 80045c4:	4013      	ands	r3, r2
 80045c6:	2201      	movs	r2, #1
 80045c8:	409a      	lsls	r2, r3
 80045ca:	4b10      	ldr	r3, [pc, #64]	@ (800460c <DMA_SetConfig+0x7c>)
 80045cc:	430a      	orrs	r2, r1
 80045ce:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	683a      	ldr	r2, [r7, #0]
 80045d6:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	2b10      	cmp	r3, #16
 80045de:	d108      	bne.n	80045f2 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68ba      	ldr	r2, [r7, #8]
 80045ee:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80045f0:	e007      	b.n	8004602 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68ba      	ldr	r2, [r7, #8]
 80045f8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	60da      	str	r2, [r3, #12]
}
 8004602:	46c0      	nop			@ (mov r8, r8)
 8004604:	46bd      	mov	sp, r7
 8004606:	b004      	add	sp, #16
 8004608:	bd80      	pop	{r7, pc}
 800460a:	46c0      	nop			@ (mov r8, r8)
 800460c:	40020000 	.word	0x40020000

08004610 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	001a      	movs	r2, r3
 800461e:	23ff      	movs	r3, #255	@ 0xff
 8004620:	4013      	ands	r3, r2
 8004622:	3b08      	subs	r3, #8
 8004624:	2114      	movs	r1, #20
 8004626:	0018      	movs	r0, r3
 8004628:	f7fb fd6e 	bl	8000108 <__udivsi3>
 800462c:	0003      	movs	r3, r0
 800462e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004634:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8004636:	4a0a      	ldr	r2, [pc, #40]	@ (8004660 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8004638:	4694      	mov	ip, r2
 800463a:	4463      	add	r3, ip
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	001a      	movs	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	645a      	str	r2, [r3, #68]	@ 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	4a07      	ldr	r2, [pc, #28]	@ (8004664 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8004648:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	221c      	movs	r2, #28
 800464e:	4013      	ands	r3, r2
 8004650:	2201      	movs	r2, #1
 8004652:	409a      	lsls	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8004658:	46c0      	nop			@ (mov r8, r8)
 800465a:	46bd      	mov	sp, r7
 800465c:	b004      	add	sp, #16
 800465e:	bd80      	pop	{r7, pc}
 8004660:	10008200 	.word	0x10008200
 8004664:	40020880 	.word	0x40020880

08004668 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	22ff      	movs	r2, #255	@ 0xff
 8004676:	4013      	ands	r3, r2
 8004678:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	4a0a      	ldr	r2, [pc, #40]	@ (80046a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800467e:	4694      	mov	ip, r2
 8004680:	4463      	add	r3, ip
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	001a      	movs	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	651a      	str	r2, [r3, #80]	@ 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a07      	ldr	r2, [pc, #28]	@ (80046ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800468e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	3b01      	subs	r3, #1
 8004694:	2203      	movs	r2, #3
 8004696:	4013      	ands	r3, r2
 8004698:	2201      	movs	r2, #1
 800469a:	409a      	lsls	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80046a0:	46c0      	nop			@ (mov r8, r8)
 80046a2:	46bd      	mov	sp, r7
 80046a4:	b004      	add	sp, #16
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	1000823f 	.word	0x1000823f
 80046ac:	40020940 	.word	0x40020940

080046b0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b086      	sub	sp, #24
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80046ba:	2300      	movs	r3, #0
 80046bc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80046be:	e153      	b.n	8004968 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2101      	movs	r1, #1
 80046c6:	693a      	ldr	r2, [r7, #16]
 80046c8:	4091      	lsls	r1, r2
 80046ca:	000a      	movs	r2, r1
 80046cc:	4013      	ands	r3, r2
 80046ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d100      	bne.n	80046d8 <HAL_GPIO_Init+0x28>
 80046d6:	e144      	b.n	8004962 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d003      	beq.n	80046e8 <HAL_GPIO_Init+0x38>
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	2b12      	cmp	r3, #18
 80046e6:	d125      	bne.n	8004734 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	08da      	lsrs	r2, r3, #3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	3208      	adds	r2, #8
 80046f0:	0092      	lsls	r2, r2, #2
 80046f2:	58d3      	ldr	r3, [r2, r3]
 80046f4:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	2207      	movs	r2, #7
 80046fa:	4013      	ands	r3, r2
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	220f      	movs	r2, #15
 8004700:	409a      	lsls	r2, r3
 8004702:	0013      	movs	r3, r2
 8004704:	43da      	mvns	r2, r3
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	4013      	ands	r3, r2
 800470a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	220f      	movs	r2, #15
 8004712:	401a      	ands	r2, r3
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	2107      	movs	r1, #7
 8004718:	400b      	ands	r3, r1
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	409a      	lsls	r2, r3
 800471e:	0013      	movs	r3, r2
 8004720:	697a      	ldr	r2, [r7, #20]
 8004722:	4313      	orrs	r3, r2
 8004724:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	08da      	lsrs	r2, r3, #3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	3208      	adds	r2, #8
 800472e:	0092      	lsls	r2, r2, #2
 8004730:	6979      	ldr	r1, [r7, #20]
 8004732:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	005b      	lsls	r3, r3, #1
 800473e:	2203      	movs	r2, #3
 8004740:	409a      	lsls	r2, r3
 8004742:	0013      	movs	r3, r2
 8004744:	43da      	mvns	r2, r3
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	4013      	ands	r3, r2
 800474a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	2203      	movs	r2, #3
 8004752:	401a      	ands	r2, r3
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	005b      	lsls	r3, r3, #1
 8004758:	409a      	lsls	r2, r3
 800475a:	0013      	movs	r3, r2
 800475c:	697a      	ldr	r2, [r7, #20]
 800475e:	4313      	orrs	r3, r2
 8004760:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	2b01      	cmp	r3, #1
 800476e:	d00b      	beq.n	8004788 <HAL_GPIO_Init+0xd8>
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	2b02      	cmp	r3, #2
 8004776:	d007      	beq.n	8004788 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800477c:	2b11      	cmp	r3, #17
 800477e:	d003      	beq.n	8004788 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	2b12      	cmp	r3, #18
 8004786:	d130      	bne.n	80047ea <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	005b      	lsls	r3, r3, #1
 8004792:	2203      	movs	r2, #3
 8004794:	409a      	lsls	r2, r3
 8004796:	0013      	movs	r3, r2
 8004798:	43da      	mvns	r2, r3
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	4013      	ands	r3, r2
 800479e:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	68da      	ldr	r2, [r3, #12]
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	005b      	lsls	r3, r3, #1
 80047a8:	409a      	lsls	r2, r3
 80047aa:	0013      	movs	r3, r2
 80047ac:	697a      	ldr	r2, [r7, #20]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	697a      	ldr	r2, [r7, #20]
 80047b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80047be:	2201      	movs	r2, #1
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	409a      	lsls	r2, r3
 80047c4:	0013      	movs	r3, r2
 80047c6:	43da      	mvns	r2, r3
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	4013      	ands	r3, r2
 80047cc:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	091b      	lsrs	r3, r3, #4
 80047d4:	2201      	movs	r2, #1
 80047d6:	401a      	ands	r2, r3
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	409a      	lsls	r2, r3
 80047dc:	0013      	movs	r3, r2
 80047de:	697a      	ldr	r2, [r7, #20]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	697a      	ldr	r2, [r7, #20]
 80047e8:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	2b03      	cmp	r3, #3
 80047f0:	d017      	beq.n	8004822 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	005b      	lsls	r3, r3, #1
 80047fc:	2203      	movs	r2, #3
 80047fe:	409a      	lsls	r2, r3
 8004800:	0013      	movs	r3, r2
 8004802:	43da      	mvns	r2, r3
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	4013      	ands	r3, r2
 8004808:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	689a      	ldr	r2, [r3, #8]
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	005b      	lsls	r3, r3, #1
 8004812:	409a      	lsls	r2, r3
 8004814:	0013      	movs	r3, r2
 8004816:	697a      	ldr	r2, [r7, #20]
 8004818:	4313      	orrs	r3, r2
 800481a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	697a      	ldr	r2, [r7, #20]
 8004820:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	685a      	ldr	r2, [r3, #4]
 8004826:	2380      	movs	r3, #128	@ 0x80
 8004828:	055b      	lsls	r3, r3, #21
 800482a:	4013      	ands	r3, r2
 800482c:	d100      	bne.n	8004830 <HAL_GPIO_Init+0x180>
 800482e:	e098      	b.n	8004962 <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8004830:	4a53      	ldr	r2, [pc, #332]	@ (8004980 <HAL_GPIO_Init+0x2d0>)
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	089b      	lsrs	r3, r3, #2
 8004836:	3318      	adds	r3, #24
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	589b      	ldr	r3, [r3, r2]
 800483c:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	2203      	movs	r2, #3
 8004842:	4013      	ands	r3, r2
 8004844:	00db      	lsls	r3, r3, #3
 8004846:	220f      	movs	r2, #15
 8004848:	409a      	lsls	r2, r3
 800484a:	0013      	movs	r3, r2
 800484c:	43da      	mvns	r2, r3
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	4013      	ands	r3, r2
 8004852:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	23a0      	movs	r3, #160	@ 0xa0
 8004858:	05db      	lsls	r3, r3, #23
 800485a:	429a      	cmp	r2, r3
 800485c:	d019      	beq.n	8004892 <HAL_GPIO_Init+0x1e2>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a48      	ldr	r2, [pc, #288]	@ (8004984 <HAL_GPIO_Init+0x2d4>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d013      	beq.n	800488e <HAL_GPIO_Init+0x1de>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a47      	ldr	r2, [pc, #284]	@ (8004988 <HAL_GPIO_Init+0x2d8>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d00d      	beq.n	800488a <HAL_GPIO_Init+0x1da>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a46      	ldr	r2, [pc, #280]	@ (800498c <HAL_GPIO_Init+0x2dc>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d007      	beq.n	8004886 <HAL_GPIO_Init+0x1d6>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a45      	ldr	r2, [pc, #276]	@ (8004990 <HAL_GPIO_Init+0x2e0>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d101      	bne.n	8004882 <HAL_GPIO_Init+0x1d2>
 800487e:	2305      	movs	r3, #5
 8004880:	e008      	b.n	8004894 <HAL_GPIO_Init+0x1e4>
 8004882:	2306      	movs	r3, #6
 8004884:	e006      	b.n	8004894 <HAL_GPIO_Init+0x1e4>
 8004886:	2303      	movs	r3, #3
 8004888:	e004      	b.n	8004894 <HAL_GPIO_Init+0x1e4>
 800488a:	2302      	movs	r3, #2
 800488c:	e002      	b.n	8004894 <HAL_GPIO_Init+0x1e4>
 800488e:	2301      	movs	r3, #1
 8004890:	e000      	b.n	8004894 <HAL_GPIO_Init+0x1e4>
 8004892:	2300      	movs	r3, #0
 8004894:	693a      	ldr	r2, [r7, #16]
 8004896:	2103      	movs	r1, #3
 8004898:	400a      	ands	r2, r1
 800489a:	00d2      	lsls	r2, r2, #3
 800489c:	4093      	lsls	r3, r2
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80048a4:	4936      	ldr	r1, [pc, #216]	@ (8004980 <HAL_GPIO_Init+0x2d0>)
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	089b      	lsrs	r3, r3, #2
 80048aa:	3318      	adds	r3, #24
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	697a      	ldr	r2, [r7, #20]
 80048b0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 80048b2:	4a33      	ldr	r2, [pc, #204]	@ (8004980 <HAL_GPIO_Init+0x2d0>)
 80048b4:	2380      	movs	r3, #128	@ 0x80
 80048b6:	58d3      	ldr	r3, [r2, r3]
 80048b8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	43da      	mvns	r2, r3
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	4013      	ands	r3, r2
 80048c2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	685a      	ldr	r2, [r3, #4]
 80048c8:	2380      	movs	r3, #128	@ 0x80
 80048ca:	025b      	lsls	r3, r3, #9
 80048cc:	4013      	ands	r3, r2
 80048ce:	d003      	beq.n	80048d8 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 80048d0:	697a      	ldr	r2, [r7, #20]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80048d8:	4929      	ldr	r1, [pc, #164]	@ (8004980 <HAL_GPIO_Init+0x2d0>)
 80048da:	2280      	movs	r2, #128	@ 0x80
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 80048e0:	4a27      	ldr	r2, [pc, #156]	@ (8004980 <HAL_GPIO_Init+0x2d0>)
 80048e2:	2384      	movs	r3, #132	@ 0x84
 80048e4:	58d3      	ldr	r3, [r2, r3]
 80048e6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	43da      	mvns	r2, r3
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	4013      	ands	r3, r2
 80048f0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	685a      	ldr	r2, [r3, #4]
 80048f6:	2380      	movs	r3, #128	@ 0x80
 80048f8:	029b      	lsls	r3, r3, #10
 80048fa:	4013      	ands	r3, r2
 80048fc:	d003      	beq.n	8004906 <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 80048fe:	697a      	ldr	r2, [r7, #20]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	4313      	orrs	r3, r2
 8004904:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8004906:	491e      	ldr	r1, [pc, #120]	@ (8004980 <HAL_GPIO_Init+0x2d0>)
 8004908:	2284      	movs	r2, #132	@ 0x84
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800490e:	4b1c      	ldr	r3, [pc, #112]	@ (8004980 <HAL_GPIO_Init+0x2d0>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	43da      	mvns	r2, r3
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	4013      	ands	r3, r2
 800491c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	685a      	ldr	r2, [r3, #4]
 8004922:	2380      	movs	r3, #128	@ 0x80
 8004924:	035b      	lsls	r3, r3, #13
 8004926:	4013      	ands	r3, r2
 8004928:	d003      	beq.n	8004932 <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 800492a:	697a      	ldr	r2, [r7, #20]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	4313      	orrs	r3, r2
 8004930:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8004932:	4b13      	ldr	r3, [pc, #76]	@ (8004980 <HAL_GPIO_Init+0x2d0>)
 8004934:	697a      	ldr	r2, [r7, #20]
 8004936:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8004938:	4b11      	ldr	r3, [pc, #68]	@ (8004980 <HAL_GPIO_Init+0x2d0>)
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	43da      	mvns	r2, r3
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	4013      	ands	r3, r2
 8004946:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	685a      	ldr	r2, [r3, #4]
 800494c:	2380      	movs	r3, #128	@ 0x80
 800494e:	039b      	lsls	r3, r3, #14
 8004950:	4013      	ands	r3, r2
 8004952:	d003      	beq.n	800495c <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8004954:	697a      	ldr	r2, [r7, #20]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	4313      	orrs	r3, r2
 800495a:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800495c:	4b08      	ldr	r3, [pc, #32]	@ (8004980 <HAL_GPIO_Init+0x2d0>)
 800495e:	697a      	ldr	r2, [r7, #20]
 8004960:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	3301      	adds	r3, #1
 8004966:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	40da      	lsrs	r2, r3
 8004970:	1e13      	subs	r3, r2, #0
 8004972:	d000      	beq.n	8004976 <HAL_GPIO_Init+0x2c6>
 8004974:	e6a4      	b.n	80046c0 <HAL_GPIO_Init+0x10>
  }
}
 8004976:	46c0      	nop			@ (mov r8, r8)
 8004978:	46c0      	nop			@ (mov r8, r8)
 800497a:	46bd      	mov	sp, r7
 800497c:	b006      	add	sp, #24
 800497e:	bd80      	pop	{r7, pc}
 8004980:	40021800 	.word	0x40021800
 8004984:	50000400 	.word	0x50000400
 8004988:	50000800 	.word	0x50000800
 800498c:	50000c00 	.word	0x50000c00
 8004990:	50001400 	.word	0x50001400

08004994 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b086      	sub	sp, #24
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800499e:	2300      	movs	r3, #0
 80049a0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 80049a2:	e0ba      	b.n	8004b1a <HAL_GPIO_DeInit+0x186>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 80049a4:	2201      	movs	r2, #1
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	409a      	lsls	r2, r3
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	4013      	ands	r3, r2
 80049ae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0U)
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d100      	bne.n	80049b8 <HAL_GPIO_DeInit+0x24>
 80049b6:	e0ad      	b.n	8004b14 <HAL_GPIO_DeInit+0x180>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = EXTI->EXTICR[position >> 2U];
 80049b8:	4a5d      	ldr	r2, [pc, #372]	@ (8004b30 <HAL_GPIO_DeInit+0x19c>)
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	089b      	lsrs	r3, r3, #2
 80049be:	3318      	adds	r3, #24
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	589b      	ldr	r3, [r3, r2]
 80049c4:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	2203      	movs	r2, #3
 80049ca:	4013      	ands	r3, r2
 80049cc:	00db      	lsls	r3, r3, #3
 80049ce:	220f      	movs	r2, #15
 80049d0:	409a      	lsls	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	4013      	ands	r3, r2
 80049d6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos)))
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	23a0      	movs	r3, #160	@ 0xa0
 80049dc:	05db      	lsls	r3, r3, #23
 80049de:	429a      	cmp	r2, r3
 80049e0:	d019      	beq.n	8004a16 <HAL_GPIO_DeInit+0x82>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a53      	ldr	r2, [pc, #332]	@ (8004b34 <HAL_GPIO_DeInit+0x1a0>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d013      	beq.n	8004a12 <HAL_GPIO_DeInit+0x7e>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a52      	ldr	r2, [pc, #328]	@ (8004b38 <HAL_GPIO_DeInit+0x1a4>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d00d      	beq.n	8004a0e <HAL_GPIO_DeInit+0x7a>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a51      	ldr	r2, [pc, #324]	@ (8004b3c <HAL_GPIO_DeInit+0x1a8>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d007      	beq.n	8004a0a <HAL_GPIO_DeInit+0x76>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a50      	ldr	r2, [pc, #320]	@ (8004b40 <HAL_GPIO_DeInit+0x1ac>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d101      	bne.n	8004a06 <HAL_GPIO_DeInit+0x72>
 8004a02:	2305      	movs	r3, #5
 8004a04:	e008      	b.n	8004a18 <HAL_GPIO_DeInit+0x84>
 8004a06:	2306      	movs	r3, #6
 8004a08:	e006      	b.n	8004a18 <HAL_GPIO_DeInit+0x84>
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e004      	b.n	8004a18 <HAL_GPIO_DeInit+0x84>
 8004a0e:	2302      	movs	r3, #2
 8004a10:	e002      	b.n	8004a18 <HAL_GPIO_DeInit+0x84>
 8004a12:	2301      	movs	r3, #1
 8004a14:	e000      	b.n	8004a18 <HAL_GPIO_DeInit+0x84>
 8004a16:	2300      	movs	r3, #0
 8004a18:	697a      	ldr	r2, [r7, #20]
 8004a1a:	2103      	movs	r1, #3
 8004a1c:	400a      	ands	r2, r1
 8004a1e:	00d2      	lsls	r2, r2, #3
 8004a20:	4093      	lsls	r3, r2
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d136      	bne.n	8004a96 <HAL_GPIO_DeInit+0x102>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8004a28:	4a41      	ldr	r2, [pc, #260]	@ (8004b30 <HAL_GPIO_DeInit+0x19c>)
 8004a2a:	2380      	movs	r3, #128	@ 0x80
 8004a2c:	58d3      	ldr	r3, [r2, r3]
 8004a2e:	693a      	ldr	r2, [r7, #16]
 8004a30:	43d2      	mvns	r2, r2
 8004a32:	493f      	ldr	r1, [pc, #252]	@ (8004b30 <HAL_GPIO_DeInit+0x19c>)
 8004a34:	4013      	ands	r3, r2
 8004a36:	2280      	movs	r2, #128	@ 0x80
 8004a38:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 8004a3a:	4a3d      	ldr	r2, [pc, #244]	@ (8004b30 <HAL_GPIO_DeInit+0x19c>)
 8004a3c:	2384      	movs	r3, #132	@ 0x84
 8004a3e:	58d3      	ldr	r3, [r2, r3]
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	43d2      	mvns	r2, r2
 8004a44:	493a      	ldr	r1, [pc, #232]	@ (8004b30 <HAL_GPIO_DeInit+0x19c>)
 8004a46:	4013      	ands	r3, r2
 8004a48:	2284      	movs	r2, #132	@ 0x84
 8004a4a:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8004a4c:	4b38      	ldr	r3, [pc, #224]	@ (8004b30 <HAL_GPIO_DeInit+0x19c>)
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	43d9      	mvns	r1, r3
 8004a54:	4b36      	ldr	r3, [pc, #216]	@ (8004b30 <HAL_GPIO_DeInit+0x19c>)
 8004a56:	400a      	ands	r2, r1
 8004a58:	601a      	str	r2, [r3, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8004a5a:	4b35      	ldr	r3, [pc, #212]	@ (8004b30 <HAL_GPIO_DeInit+0x19c>)
 8004a5c:	685a      	ldr	r2, [r3, #4]
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	43d9      	mvns	r1, r3
 8004a62:	4b33      	ldr	r3, [pc, #204]	@ (8004b30 <HAL_GPIO_DeInit+0x19c>)
 8004a64:	400a      	ands	r2, r1
 8004a66:	605a      	str	r2, [r3, #4]

        tmp = (0x0FUL) << (8U * (position & 0x03U));
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	2203      	movs	r2, #3
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	00db      	lsls	r3, r3, #3
 8004a70:	220f      	movs	r2, #15
 8004a72:	409a      	lsls	r2, r3
 8004a74:	0013      	movs	r3, r2
 8004a76:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2U] &= ~tmp;
 8004a78:	4a2d      	ldr	r2, [pc, #180]	@ (8004b30 <HAL_GPIO_DeInit+0x19c>)
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	089b      	lsrs	r3, r3, #2
 8004a7e:	3318      	adds	r3, #24
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	589a      	ldr	r2, [r3, r2]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	43d9      	mvns	r1, r3
 8004a88:	4829      	ldr	r0, [pc, #164]	@ (8004b30 <HAL_GPIO_DeInit+0x19c>)
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	089b      	lsrs	r3, r3, #2
 8004a8e:	400a      	ands	r2, r1
 8004a90:	3318      	adds	r3, #24
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	005b      	lsls	r3, r3, #1
 8004a9e:	2103      	movs	r1, #3
 8004aa0:	4099      	lsls	r1, r3
 8004aa2:	000b      	movs	r3, r1
 8004aa4:	431a      	orrs	r2, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	08da      	lsrs	r2, r3, #3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	3208      	adds	r2, #8
 8004ab2:	0092      	lsls	r2, r2, #2
 8004ab4:	58d3      	ldr	r3, [r2, r3]
 8004ab6:	697a      	ldr	r2, [r7, #20]
 8004ab8:	2107      	movs	r1, #7
 8004aba:	400a      	ands	r2, r1
 8004abc:	0092      	lsls	r2, r2, #2
 8004abe:	210f      	movs	r1, #15
 8004ac0:	4091      	lsls	r1, r2
 8004ac2:	000a      	movs	r2, r1
 8004ac4:	43d1      	mvns	r1, r2
 8004ac6:	697a      	ldr	r2, [r7, #20]
 8004ac8:	08d2      	lsrs	r2, r2, #3
 8004aca:	4019      	ands	r1, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	3208      	adds	r2, #8
 8004ad0:	0092      	lsls	r2, r2, #2
 8004ad2:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	697a      	ldr	r2, [r7, #20]
 8004ada:	0052      	lsls	r2, r2, #1
 8004adc:	2103      	movs	r1, #3
 8004ade:	4091      	lsls	r1, r2
 8004ae0:	000a      	movs	r2, r1
 8004ae2:	43d2      	mvns	r2, r2
 8004ae4:	401a      	ands	r2, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	2101      	movs	r1, #1
 8004af0:	697a      	ldr	r2, [r7, #20]
 8004af2:	4091      	lsls	r1, r2
 8004af4:	000a      	movs	r2, r1
 8004af6:	43d2      	mvns	r2, r2
 8004af8:	401a      	ands	r2, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	697a      	ldr	r2, [r7, #20]
 8004b04:	0052      	lsls	r2, r2, #1
 8004b06:	2103      	movs	r1, #3
 8004b08:	4091      	lsls	r1, r2
 8004b0a:	000a      	movs	r2, r1
 8004b0c:	43d2      	mvns	r2, r2
 8004b0e:	401a      	ands	r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	60da      	str	r2, [r3, #12]
    }

    position++;
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	3301      	adds	r3, #1
 8004b18:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 8004b1a:	683a      	ldr	r2, [r7, #0]
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	40da      	lsrs	r2, r3
 8004b20:	1e13      	subs	r3, r2, #0
 8004b22:	d000      	beq.n	8004b26 <HAL_GPIO_DeInit+0x192>
 8004b24:	e73e      	b.n	80049a4 <HAL_GPIO_DeInit+0x10>
  }
}
 8004b26:	46c0      	nop			@ (mov r8, r8)
 8004b28:	46c0      	nop			@ (mov r8, r8)
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	b006      	add	sp, #24
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	40021800 	.word	0x40021800
 8004b34:	50000400 	.word	0x50000400
 8004b38:	50000800 	.word	0x50000800
 8004b3c:	50000c00 	.word	0x50000c00
 8004b40:	50001400 	.word	0x50001400

08004b44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	000a      	movs	r2, r1
 8004b4e:	1cbb      	adds	r3, r7, #2
 8004b50:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	1cba      	adds	r2, r7, #2
 8004b58:	8812      	ldrh	r2, [r2, #0]
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	d004      	beq.n	8004b68 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004b5e:	230f      	movs	r3, #15
 8004b60:	18fb      	adds	r3, r7, r3
 8004b62:	2201      	movs	r2, #1
 8004b64:	701a      	strb	r2, [r3, #0]
 8004b66:	e003      	b.n	8004b70 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004b68:	230f      	movs	r3, #15
 8004b6a:	18fb      	adds	r3, r7, r3
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004b70:	230f      	movs	r3, #15
 8004b72:	18fb      	adds	r3, r7, r3
 8004b74:	781b      	ldrb	r3, [r3, #0]
}
 8004b76:	0018      	movs	r0, r3
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	b004      	add	sp, #16
 8004b7c:	bd80      	pop	{r7, pc}

08004b7e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b7e:	b580      	push	{r7, lr}
 8004b80:	b082      	sub	sp, #8
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]
 8004b86:	0008      	movs	r0, r1
 8004b88:	0011      	movs	r1, r2
 8004b8a:	1cbb      	adds	r3, r7, #2
 8004b8c:	1c02      	adds	r2, r0, #0
 8004b8e:	801a      	strh	r2, [r3, #0]
 8004b90:	1c7b      	adds	r3, r7, #1
 8004b92:	1c0a      	adds	r2, r1, #0
 8004b94:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b96:	1c7b      	adds	r3, r7, #1
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d004      	beq.n	8004ba8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004b9e:	1cbb      	adds	r3, r7, #2
 8004ba0:	881a      	ldrh	r2, [r3, #0]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004ba6:	e003      	b.n	8004bb0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004ba8:	1cbb      	adds	r3, r7, #2
 8004baa:	881a      	ldrh	r2, [r3, #0]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004bb0:	46c0      	nop			@ (mov r8, r8)
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	b002      	add	sp, #8
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b082      	sub	sp, #8
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	0002      	movs	r2, r0
 8004bc0:	1dbb      	adds	r3, r7, #6
 8004bc2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8004bc4:	4b10      	ldr	r3, [pc, #64]	@ (8004c08 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	1dba      	adds	r2, r7, #6
 8004bca:	8812      	ldrh	r2, [r2, #0]
 8004bcc:	4013      	ands	r3, r2
 8004bce:	d008      	beq.n	8004be2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8004bd0:	4b0d      	ldr	r3, [pc, #52]	@ (8004c08 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004bd2:	1dba      	adds	r2, r7, #6
 8004bd4:	8812      	ldrh	r2, [r2, #0]
 8004bd6:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8004bd8:	1dbb      	adds	r3, r7, #6
 8004bda:	881b      	ldrh	r3, [r3, #0]
 8004bdc:	0018      	movs	r0, r3
 8004bde:	f7fc fcb1 	bl	8001544 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8004be2:	4b09      	ldr	r3, [pc, #36]	@ (8004c08 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	1dba      	adds	r2, r7, #6
 8004be8:	8812      	ldrh	r2, [r2, #0]
 8004bea:	4013      	ands	r3, r2
 8004bec:	d008      	beq.n	8004c00 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8004bee:	4b06      	ldr	r3, [pc, #24]	@ (8004c08 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004bf0:	1dba      	adds	r2, r7, #6
 8004bf2:	8812      	ldrh	r2, [r2, #0]
 8004bf4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8004bf6:	1dbb      	adds	r3, r7, #6
 8004bf8:	881b      	ldrh	r3, [r3, #0]
 8004bfa:	0018      	movs	r0, r3
 8004bfc:	f000 f806 	bl	8004c0c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8004c00:	46c0      	nop			@ (mov r8, r8)
 8004c02:	46bd      	mov	sp, r7
 8004c04:	b002      	add	sp, #8
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	40021800 	.word	0x40021800

08004c0c <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	0002      	movs	r2, r0
 8004c14:	1dbb      	adds	r3, r7, #6
 8004c16:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8004c18:	46c0      	nop			@ (mov r8, r8)
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	b002      	add	sp, #8
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d101      	bne.n	8004c32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e08f      	b.n	8004d52 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2241      	movs	r2, #65	@ 0x41
 8004c36:	5c9b      	ldrb	r3, [r3, r2]
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d107      	bne.n	8004c4e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2240      	movs	r2, #64	@ 0x40
 8004c42:	2100      	movs	r1, #0
 8004c44:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	0018      	movs	r0, r3
 8004c4a:	f7fe faed 	bl	8003228 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2241      	movs	r2, #65	@ 0x41
 8004c52:	2124      	movs	r1, #36	@ 0x24
 8004c54:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2101      	movs	r1, #1
 8004c62:	438a      	bics	r2, r1
 8004c64:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685a      	ldr	r2, [r3, #4]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	493b      	ldr	r1, [pc, #236]	@ (8004d5c <HAL_I2C_Init+0x13c>)
 8004c70:	400a      	ands	r2, r1
 8004c72:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	689a      	ldr	r2, [r3, #8]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4938      	ldr	r1, [pc, #224]	@ (8004d60 <HAL_I2C_Init+0x140>)
 8004c80:	400a      	ands	r2, r1
 8004c82:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d108      	bne.n	8004c9e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	689a      	ldr	r2, [r3, #8]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2180      	movs	r1, #128	@ 0x80
 8004c96:	0209      	lsls	r1, r1, #8
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	609a      	str	r2, [r3, #8]
 8004c9c:	e007      	b.n	8004cae <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	689a      	ldr	r2, [r3, #8]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2184      	movs	r1, #132	@ 0x84
 8004ca8:	0209      	lsls	r1, r1, #8
 8004caa:	430a      	orrs	r2, r1
 8004cac:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	2b02      	cmp	r3, #2
 8004cb4:	d109      	bne.n	8004cca <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	685a      	ldr	r2, [r3, #4]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2180      	movs	r1, #128	@ 0x80
 8004cc2:	0109      	lsls	r1, r1, #4
 8004cc4:	430a      	orrs	r2, r1
 8004cc6:	605a      	str	r2, [r3, #4]
 8004cc8:	e007      	b.n	8004cda <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	685a      	ldr	r2, [r3, #4]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4923      	ldr	r1, [pc, #140]	@ (8004d64 <HAL_I2C_Init+0x144>)
 8004cd6:	400a      	ands	r2, r1
 8004cd8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	685a      	ldr	r2, [r3, #4]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4920      	ldr	r1, [pc, #128]	@ (8004d68 <HAL_I2C_Init+0x148>)
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68da      	ldr	r2, [r3, #12]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	491a      	ldr	r1, [pc, #104]	@ (8004d60 <HAL_I2C_Init+0x140>)
 8004cf6:	400a      	ands	r2, r1
 8004cf8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	691a      	ldr	r2, [r3, #16]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	695b      	ldr	r3, [r3, #20]
 8004d02:	431a      	orrs	r2, r3
 8004d04:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	699b      	ldr	r3, [r3, #24]
 8004d0a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	430a      	orrs	r2, r1
 8004d12:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	69d9      	ldr	r1, [r3, #28]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6a1a      	ldr	r2, [r3, #32]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	430a      	orrs	r2, r1
 8004d22:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2101      	movs	r1, #1
 8004d30:	430a      	orrs	r2, r1
 8004d32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2241      	movs	r2, #65	@ 0x41
 8004d3e:	2120      	movs	r1, #32
 8004d40:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2242      	movs	r2, #66	@ 0x42
 8004d4c:	2100      	movs	r1, #0
 8004d4e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	0018      	movs	r0, r3
 8004d54:	46bd      	mov	sp, r7
 8004d56:	b002      	add	sp, #8
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	46c0      	nop			@ (mov r8, r8)
 8004d5c:	f0ffffff 	.word	0xf0ffffff
 8004d60:	ffff7fff 	.word	0xffff7fff
 8004d64:	fffff7ff 	.word	0xfffff7ff
 8004d68:	02008000 	.word	0x02008000

08004d6c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d101      	bne.n	8004d7e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e022      	b.n	8004dc4 <HAL_I2C_DeInit+0x58>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2241      	movs	r2, #65	@ 0x41
 8004d82:	2124      	movs	r1, #36	@ 0x24
 8004d84:	5499      	strb	r1, [r3, r2]

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2101      	movs	r1, #1
 8004d92:	438a      	bics	r2, r1
 8004d94:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	0018      	movs	r0, r3
 8004d9a:	f7fe fb0b 	bl	80033b4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2241      	movs	r2, #65	@ 0x41
 8004da8:	2100      	movs	r1, #0
 8004daa:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2242      	movs	r2, #66	@ 0x42
 8004db6:	2100      	movs	r1, #0
 8004db8:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2240      	movs	r2, #64	@ 0x40
 8004dbe:	2100      	movs	r1, #0
 8004dc0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004dc2:	2300      	movs	r3, #0
}
 8004dc4:	0018      	movs	r0, r3
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	b002      	add	sp, #8
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8004dcc:	b5b0      	push	{r4, r5, r7, lr}
 8004dce:	b08a      	sub	sp, #40	@ 0x28
 8004dd0:	af02      	add	r7, sp, #8
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	0008      	movs	r0, r1
 8004dd6:	607a      	str	r2, [r7, #4]
 8004dd8:	0019      	movs	r1, r3
 8004dda:	230a      	movs	r3, #10
 8004ddc:	18fb      	adds	r3, r7, r3
 8004dde:	1c02      	adds	r2, r0, #0
 8004de0:	801a      	strh	r2, [r3, #0]
 8004de2:	2308      	movs	r3, #8
 8004de4:	18fb      	adds	r3, r7, r3
 8004de6:	1c0a      	adds	r2, r1, #0
 8004de8:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8004dea:	2300      	movs	r3, #0
 8004dec:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2241      	movs	r2, #65	@ 0x41
 8004df2:	5c9b      	ldrb	r3, [r3, r2]
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	2b20      	cmp	r3, #32
 8004df8:	d000      	beq.n	8004dfc <HAL_I2C_Master_Transmit_DMA+0x30>
 8004dfa:	e0ff      	b.n	8004ffc <HAL_I2C_Master_Transmit_DMA+0x230>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	699a      	ldr	r2, [r3, #24]
 8004e02:	2380      	movs	r3, #128	@ 0x80
 8004e04:	021b      	lsls	r3, r3, #8
 8004e06:	401a      	ands	r2, r3
 8004e08:	2380      	movs	r3, #128	@ 0x80
 8004e0a:	021b      	lsls	r3, r3, #8
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d101      	bne.n	8004e14 <HAL_I2C_Master_Transmit_DMA+0x48>
    {
      return HAL_BUSY;
 8004e10:	2302      	movs	r3, #2
 8004e12:	e0f4      	b.n	8004ffe <HAL_I2C_Master_Transmit_DMA+0x232>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2240      	movs	r2, #64	@ 0x40
 8004e18:	5c9b      	ldrb	r3, [r3, r2]
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d101      	bne.n	8004e22 <HAL_I2C_Master_Transmit_DMA+0x56>
 8004e1e:	2302      	movs	r3, #2
 8004e20:	e0ed      	b.n	8004ffe <HAL_I2C_Master_Transmit_DMA+0x232>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2240      	movs	r2, #64	@ 0x40
 8004e26:	2101      	movs	r1, #1
 8004e28:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2241      	movs	r2, #65	@ 0x41
 8004e2e:	2121      	movs	r1, #33	@ 0x21
 8004e30:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2242      	movs	r2, #66	@ 0x42
 8004e36:	2110      	movs	r1, #16
 8004e38:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2208      	movs	r2, #8
 8004e4a:	18ba      	adds	r2, r7, r2
 8004e4c:	8812      	ldrh	r2, [r2, #0]
 8004e4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	4a6d      	ldr	r2, [pc, #436]	@ (8005008 <HAL_I2C_Master_Transmit_DMA+0x23c>)
 8004e54:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	4a6c      	ldr	r2, [pc, #432]	@ (800500c <HAL_I2C_Master_Transmit_DMA+0x240>)
 8004e5a:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	2bff      	cmp	r3, #255	@ 0xff
 8004e64:	d906      	bls.n	8004e74 <HAL_I2C_Master_Transmit_DMA+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	22ff      	movs	r2, #255	@ 0xff
 8004e6a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004e6c:	2380      	movs	r3, #128	@ 0x80
 8004e6e:	045b      	lsls	r3, r3, #17
 8004e70:	61fb      	str	r3, [r7, #28]
 8004e72:	e007      	b.n	8004e84 <HAL_I2C_Master_Transmit_DMA+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e78:	b29a      	uxth	r2, r3
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004e7e:	2380      	movs	r3, #128	@ 0x80
 8004e80:	049b      	lsls	r3, r3, #18
 8004e82:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d01a      	beq.n	8004ec2 <HAL_I2C_Master_Transmit_DMA+0xf6>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e90:	781a      	ldrb	r2, [r3, #0]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e9c:	1c5a      	adds	r2, r3, #1
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ea6:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	b29a      	uxth	r2, r3
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	b29a      	uxth	r2, r3
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d100      	bne.n	8004ecc <HAL_I2C_Master_Transmit_DMA+0x100>
 8004eca:	e07c      	b.n	8004fc6 <HAL_I2C_Master_Transmit_DMA+0x1fa>
    {
      if (hi2c->hdmatx != NULL)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d025      	beq.n	8004f20 <HAL_I2C_Master_Transmit_DMA+0x154>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ed8:	4a4d      	ldr	r2, [pc, #308]	@ (8005010 <HAL_I2C_Master_Transmit_DMA+0x244>)
 8004eda:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ee0:	4a4c      	ldr	r2, [pc, #304]	@ (8005014 <HAL_I2C_Master_Transmit_DMA+0x248>)
 8004ee2:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ee8:	2200      	movs	r2, #0
 8004eea:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004efc:	0019      	movs	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8004f04:	001a      	movs	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8004f0a:	2517      	movs	r5, #23
 8004f0c:	197c      	adds	r4, r7, r5
 8004f0e:	f7ff f913 	bl	8004138 <HAL_DMA_Start_IT>
 8004f12:	0003      	movs	r3, r0
 8004f14:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8004f16:	197b      	adds	r3, r7, r5
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d13f      	bne.n	8004f9e <HAL_I2C_Master_Transmit_DMA+0x1d2>
 8004f1e:	e013      	b.n	8004f48 <HAL_I2C_Master_Transmit_DMA+0x17c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2241      	movs	r2, #65	@ 0x41
 8004f24:	2120      	movs	r1, #32
 8004f26:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2242      	movs	r2, #66	@ 0x42
 8004f2c:	2100      	movs	r1, #0
 8004f2e:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f34:	2280      	movs	r2, #128	@ 0x80
 8004f36:	431a      	orrs	r2, r3
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2240      	movs	r2, #64	@ 0x40
 8004f40:	2100      	movs	r1, #0
 8004f42:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e05a      	b.n	8004ffe <HAL_I2C_Master_Transmit_DMA+0x232>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	3301      	adds	r3, #1
 8004f50:	b2da      	uxtb	r2, r3
 8004f52:	69fc      	ldr	r4, [r7, #28]
 8004f54:	230a      	movs	r3, #10
 8004f56:	18fb      	adds	r3, r7, r3
 8004f58:	8819      	ldrh	r1, [r3, #0]
 8004f5a:	68f8      	ldr	r0, [r7, #12]
 8004f5c:	4b2e      	ldr	r3, [pc, #184]	@ (8005018 <HAL_I2C_Master_Transmit_DMA+0x24c>)
 8004f5e:	9300      	str	r3, [sp, #0]
 8004f60:	0023      	movs	r3, r4
 8004f62:	f001 fe69 	bl	8006c38 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f6a:	b29a      	uxth	r2, r3
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	b29a      	uxth	r2, r3
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2240      	movs	r2, #64	@ 0x40
 8004f7c:	2100      	movs	r1, #0
 8004f7e:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2110      	movs	r1, #16
 8004f84:	0018      	movs	r0, r3
 8004f86:	f001 fe91 	bl	8006cac <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2180      	movs	r1, #128	@ 0x80
 8004f96:	01c9      	lsls	r1, r1, #7
 8004f98:	430a      	orrs	r2, r1
 8004f9a:	601a      	str	r2, [r3, #0]
 8004f9c:	e02c      	b.n	8004ff8 <HAL_I2C_Master_Transmit_DMA+0x22c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2241      	movs	r2, #65	@ 0x41
 8004fa2:	2120      	movs	r1, #32
 8004fa4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2242      	movs	r2, #66	@ 0x42
 8004faa:	2100      	movs	r1, #0
 8004fac:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fb2:	2210      	movs	r2, #16
 8004fb4:	431a      	orrs	r2, r3
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2240      	movs	r2, #64	@ 0x40
 8004fbe:	2100      	movs	r1, #0
 8004fc0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e01b      	b.n	8004ffe <HAL_I2C_Master_Transmit_DMA+0x232>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	4a14      	ldr	r2, [pc, #80]	@ (800501c <HAL_I2C_Master_Transmit_DMA+0x250>)
 8004fca:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	b2da      	uxtb	r2, r3
 8004fd0:	2380      	movs	r3, #128	@ 0x80
 8004fd2:	049c      	lsls	r4, r3, #18
 8004fd4:	230a      	movs	r3, #10
 8004fd6:	18fb      	adds	r3, r7, r3
 8004fd8:	8819      	ldrh	r1, [r3, #0]
 8004fda:	68f8      	ldr	r0, [r7, #12]
 8004fdc:	4b0e      	ldr	r3, [pc, #56]	@ (8005018 <HAL_I2C_Master_Transmit_DMA+0x24c>)
 8004fde:	9300      	str	r3, [sp, #0]
 8004fe0:	0023      	movs	r3, r4
 8004fe2:	f001 fe29 	bl	8006c38 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2240      	movs	r2, #64	@ 0x40
 8004fea:	2100      	movs	r1, #0
 8004fec:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2101      	movs	r1, #1
 8004ff2:	0018      	movs	r0, r3
 8004ff4:	f001 fe5a 	bl	8006cac <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	e000      	b.n	8004ffe <HAL_I2C_Master_Transmit_DMA+0x232>
  }
  else
  {
    return HAL_BUSY;
 8004ffc:	2302      	movs	r3, #2
  }
}
 8004ffe:	0018      	movs	r0, r3
 8005000:	46bd      	mov	sp, r7
 8005002:	b008      	add	sp, #32
 8005004:	bdb0      	pop	{r4, r5, r7, pc}
 8005006:	46c0      	nop			@ (mov r8, r8)
 8005008:	ffff0000 	.word	0xffff0000
 800500c:	080059dd 	.word	0x080059dd
 8005010:	08006a89 	.word	0x08006a89
 8005014:	08006bc9 	.word	0x08006bc9
 8005018:	80002000 	.word	0x80002000
 800501c:	08005575 	.word	0x08005575

08005020 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8005020:	b5b0      	push	{r4, r5, r7, lr}
 8005022:	b088      	sub	sp, #32
 8005024:	af02      	add	r7, sp, #8
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	0008      	movs	r0, r1
 800502a:	607a      	str	r2, [r7, #4]
 800502c:	0019      	movs	r1, r3
 800502e:	230a      	movs	r3, #10
 8005030:	18fb      	adds	r3, r7, r3
 8005032:	1c02      	adds	r2, r0, #0
 8005034:	801a      	strh	r2, [r3, #0]
 8005036:	2308      	movs	r3, #8
 8005038:	18fb      	adds	r3, r7, r3
 800503a:	1c0a      	adds	r2, r1, #0
 800503c:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2241      	movs	r2, #65	@ 0x41
 8005042:	5c9b      	ldrb	r3, [r3, r2]
 8005044:	b2db      	uxtb	r3, r3
 8005046:	2b20      	cmp	r3, #32
 8005048:	d000      	beq.n	800504c <HAL_I2C_Master_Receive_DMA+0x2c>
 800504a:	e0dd      	b.n	8005208 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	699a      	ldr	r2, [r3, #24]
 8005052:	2380      	movs	r3, #128	@ 0x80
 8005054:	021b      	lsls	r3, r3, #8
 8005056:	401a      	ands	r2, r3
 8005058:	2380      	movs	r3, #128	@ 0x80
 800505a:	021b      	lsls	r3, r3, #8
 800505c:	429a      	cmp	r2, r3
 800505e:	d101      	bne.n	8005064 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 8005060:	2302      	movs	r3, #2
 8005062:	e0d2      	b.n	800520a <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2240      	movs	r2, #64	@ 0x40
 8005068:	5c9b      	ldrb	r3, [r3, r2]
 800506a:	2b01      	cmp	r3, #1
 800506c:	d101      	bne.n	8005072 <HAL_I2C_Master_Receive_DMA+0x52>
 800506e:	2302      	movs	r3, #2
 8005070:	e0cb      	b.n	800520a <HAL_I2C_Master_Receive_DMA+0x1ea>
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2240      	movs	r2, #64	@ 0x40
 8005076:	2101      	movs	r1, #1
 8005078:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2241      	movs	r2, #65	@ 0x41
 800507e:	2122      	movs	r1, #34	@ 0x22
 8005080:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2242      	movs	r2, #66	@ 0x42
 8005086:	2110      	movs	r1, #16
 8005088:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2200      	movs	r2, #0
 800508e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2208      	movs	r2, #8
 800509a:	18ba      	adds	r2, r7, r2
 800509c:	8812      	ldrh	r2, [r2, #0]
 800509e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	4a5c      	ldr	r2, [pc, #368]	@ (8005214 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 80050a4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	4a5b      	ldr	r2, [pc, #364]	@ (8005218 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 80050aa:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	2bff      	cmp	r3, #255	@ 0xff
 80050b4:	d906      	bls.n	80050c4 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	22ff      	movs	r2, #255	@ 0xff
 80050ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80050bc:	2380      	movs	r3, #128	@ 0x80
 80050be:	045b      	lsls	r3, r3, #17
 80050c0:	617b      	str	r3, [r7, #20]
 80050c2:	e007      	b.n	80050d4 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050c8:	b29a      	uxth	r2, r3
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80050ce:	2380      	movs	r3, #128	@ 0x80
 80050d0:	049b      	lsls	r3, r3, #18
 80050d2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d100      	bne.n	80050de <HAL_I2C_Master_Receive_DMA+0xbe>
 80050dc:	e078      	b.n	80051d0 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d023      	beq.n	800512e <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050ea:	4a4c      	ldr	r2, [pc, #304]	@ (800521c <HAL_I2C_Master_Receive_DMA+0x1fc>)
 80050ec:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050f2:	4a4b      	ldr	r2, [pc, #300]	@ (8005220 <HAL_I2C_Master_Receive_DMA+0x200>)
 80050f4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050fa:	2200      	movs	r2, #0
 80050fc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005102:	2200      	movs	r2, #0
 8005104:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	3324      	adds	r3, #36	@ 0x24
 8005110:	0019      	movs	r1, r3
 8005112:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005118:	2513      	movs	r5, #19
 800511a:	197c      	adds	r4, r7, r5
 800511c:	f7ff f80c 	bl	8004138 <HAL_DMA_Start_IT>
 8005120:	0003      	movs	r3, r0
 8005122:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005124:	197b      	adds	r3, r7, r5
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d13d      	bne.n	80051a8 <HAL_I2C_Master_Receive_DMA+0x188>
 800512c:	e013      	b.n	8005156 <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2241      	movs	r2, #65	@ 0x41
 8005132:	2120      	movs	r1, #32
 8005134:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2242      	movs	r2, #66	@ 0x42
 800513a:	2100      	movs	r1, #0
 800513c:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005142:	2280      	movs	r2, #128	@ 0x80
 8005144:	431a      	orrs	r2, r3
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2240      	movs	r2, #64	@ 0x40
 800514e:	2100      	movs	r1, #0
 8005150:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e059      	b.n	800520a <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800515a:	b2da      	uxtb	r2, r3
 800515c:	697c      	ldr	r4, [r7, #20]
 800515e:	230a      	movs	r3, #10
 8005160:	18fb      	adds	r3, r7, r3
 8005162:	8819      	ldrh	r1, [r3, #0]
 8005164:	68f8      	ldr	r0, [r7, #12]
 8005166:	4b2f      	ldr	r3, [pc, #188]	@ (8005224 <HAL_I2C_Master_Receive_DMA+0x204>)
 8005168:	9300      	str	r3, [sp, #0]
 800516a:	0023      	movs	r3, r4
 800516c:	f001 fd64 	bl	8006c38 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005174:	b29a      	uxth	r2, r3
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	b29a      	uxth	r2, r3
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2240      	movs	r2, #64	@ 0x40
 8005186:	2100      	movs	r1, #0
 8005188:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2110      	movs	r1, #16
 800518e:	0018      	movs	r0, r3
 8005190:	f001 fd8c 	bl	8006cac <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2180      	movs	r1, #128	@ 0x80
 80051a0:	0209      	lsls	r1, r1, #8
 80051a2:	430a      	orrs	r2, r1
 80051a4:	601a      	str	r2, [r3, #0]
 80051a6:	e02d      	b.n	8005204 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2241      	movs	r2, #65	@ 0x41
 80051ac:	2120      	movs	r1, #32
 80051ae:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2242      	movs	r2, #66	@ 0x42
 80051b4:	2100      	movs	r1, #0
 80051b6:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051bc:	2210      	movs	r2, #16
 80051be:	431a      	orrs	r2, r3
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2240      	movs	r2, #64	@ 0x40
 80051c8:	2100      	movs	r1, #0
 80051ca:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e01c      	b.n	800520a <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	4a15      	ldr	r2, [pc, #84]	@ (8005228 <HAL_I2C_Master_Receive_DMA+0x208>)
 80051d4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051da:	b2da      	uxtb	r2, r3
 80051dc:	2380      	movs	r3, #128	@ 0x80
 80051de:	049c      	lsls	r4, r3, #18
 80051e0:	230a      	movs	r3, #10
 80051e2:	18fb      	adds	r3, r7, r3
 80051e4:	8819      	ldrh	r1, [r3, #0]
 80051e6:	68f8      	ldr	r0, [r7, #12]
 80051e8:	4b0e      	ldr	r3, [pc, #56]	@ (8005224 <HAL_I2C_Master_Receive_DMA+0x204>)
 80051ea:	9300      	str	r3, [sp, #0]
 80051ec:	0023      	movs	r3, r4
 80051ee:	f001 fd23 	bl	8006c38 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2240      	movs	r2, #64	@ 0x40
 80051f6:	2100      	movs	r1, #0
 80051f8:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2102      	movs	r1, #2
 80051fe:	0018      	movs	r0, r3
 8005200:	f001 fd54 	bl	8006cac <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8005204:	2300      	movs	r3, #0
 8005206:	e000      	b.n	800520a <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005208:	2302      	movs	r3, #2
  }
}
 800520a:	0018      	movs	r0, r3
 800520c:	46bd      	mov	sp, r7
 800520e:	b006      	add	sp, #24
 8005210:	bdb0      	pop	{r4, r5, r7, pc}
 8005212:	46c0      	nop			@ (mov r8, r8)
 8005214:	ffff0000 	.word	0xffff0000
 8005218:	080059dd 	.word	0x080059dd
 800521c:	08006b29 	.word	0x08006b29
 8005220:	08006bc9 	.word	0x08006bc9
 8005224:	80002400 	.word	0x80002400
 8005228:	08005575 	.word	0x08005575

0800522c <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800522c:	b5b0      	push	{r4, r5, r7, lr}
 800522e:	b088      	sub	sp, #32
 8005230:	af02      	add	r7, sp, #8
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	000c      	movs	r4, r1
 8005236:	0010      	movs	r0, r2
 8005238:	0019      	movs	r1, r3
 800523a:	230a      	movs	r3, #10
 800523c:	18fb      	adds	r3, r7, r3
 800523e:	1c22      	adds	r2, r4, #0
 8005240:	801a      	strh	r2, [r3, #0]
 8005242:	2308      	movs	r3, #8
 8005244:	18fb      	adds	r3, r7, r3
 8005246:	1c02      	adds	r2, r0, #0
 8005248:	801a      	strh	r2, [r3, #0]
 800524a:	1dbb      	adds	r3, r7, #6
 800524c:	1c0a      	adds	r2, r1, #0
 800524e:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2241      	movs	r2, #65	@ 0x41
 8005254:	5c9b      	ldrb	r3, [r3, r2]
 8005256:	b2db      	uxtb	r3, r3
 8005258:	2b20      	cmp	r3, #32
 800525a:	d000      	beq.n	800525e <HAL_I2C_Mem_Read_DMA+0x32>
 800525c:	e0d6      	b.n	800540c <HAL_I2C_Mem_Read_DMA+0x1e0>
  {
    if ((pData == NULL) || (Size == 0U))
 800525e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005260:	2b00      	cmp	r3, #0
 8005262:	d004      	beq.n	800526e <HAL_I2C_Mem_Read_DMA+0x42>
 8005264:	232c      	movs	r3, #44	@ 0x2c
 8005266:	18fb      	adds	r3, r7, r3
 8005268:	881b      	ldrh	r3, [r3, #0]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d105      	bne.n	800527a <HAL_I2C_Mem_Read_DMA+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2280      	movs	r2, #128	@ 0x80
 8005272:	0092      	lsls	r2, r2, #2
 8005274:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e0c9      	b.n	800540e <HAL_I2C_Mem_Read_DMA+0x1e2>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	699a      	ldr	r2, [r3, #24]
 8005280:	2380      	movs	r3, #128	@ 0x80
 8005282:	021b      	lsls	r3, r3, #8
 8005284:	401a      	ands	r2, r3
 8005286:	2380      	movs	r3, #128	@ 0x80
 8005288:	021b      	lsls	r3, r3, #8
 800528a:	429a      	cmp	r2, r3
 800528c:	d101      	bne.n	8005292 <HAL_I2C_Mem_Read_DMA+0x66>
    {
      return HAL_BUSY;
 800528e:	2302      	movs	r3, #2
 8005290:	e0bd      	b.n	800540e <HAL_I2C_Mem_Read_DMA+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2240      	movs	r2, #64	@ 0x40
 8005296:	5c9b      	ldrb	r3, [r3, r2]
 8005298:	2b01      	cmp	r3, #1
 800529a:	d101      	bne.n	80052a0 <HAL_I2C_Mem_Read_DMA+0x74>
 800529c:	2302      	movs	r3, #2
 800529e:	e0b6      	b.n	800540e <HAL_I2C_Mem_Read_DMA+0x1e2>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2240      	movs	r2, #64	@ 0x40
 80052a4:	2101      	movs	r1, #1
 80052a6:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2241      	movs	r2, #65	@ 0x41
 80052ac:	2122      	movs	r1, #34	@ 0x22
 80052ae:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2242      	movs	r2, #66	@ 0x42
 80052b4:	2140      	movs	r1, #64	@ 0x40
 80052b6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2200      	movs	r2, #0
 80052bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	222c      	movs	r2, #44	@ 0x2c
 80052c8:	18ba      	adds	r2, r7, r2
 80052ca:	8812      	ldrh	r2, [r2, #0]
 80052cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	4a51      	ldr	r2, [pc, #324]	@ (8005418 <HAL_I2C_Mem_Read_DMA+0x1ec>)
 80052d2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	4a51      	ldr	r2, [pc, #324]	@ (800541c <HAL_I2C_Mem_Read_DMA+0x1f0>)
 80052d8:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 80052da:	230a      	movs	r3, #10
 80052dc:	18fb      	adds	r3, r7, r3
 80052de:	881a      	ldrh	r2, [r3, #0]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	64da      	str	r2, [r3, #76]	@ 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	2bff      	cmp	r3, #255	@ 0xff
 80052ec:	d903      	bls.n	80052f6 <HAL_I2C_Mem_Read_DMA+0xca>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	22ff      	movs	r2, #255	@ 0xff
 80052f2:	851a      	strh	r2, [r3, #40]	@ 0x28
 80052f4:	e004      	b.n	8005300 <HAL_I2C_Mem_Read_DMA+0xd4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052fa:	b29a      	uxth	r2, r3
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005300:	1dbb      	adds	r3, r7, #6
 8005302:	881b      	ldrh	r3, [r3, #0]
 8005304:	2b01      	cmp	r3, #1
 8005306:	d10b      	bne.n	8005320 <HAL_I2C_Mem_Read_DMA+0xf4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005308:	2308      	movs	r3, #8
 800530a:	18fb      	adds	r3, r7, r3
 800530c:	881b      	ldrh	r3, [r3, #0]
 800530e:	b2da      	uxtb	r2, r3
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2201      	movs	r2, #1
 800531a:	4252      	negs	r2, r2
 800531c:	651a      	str	r2, [r3, #80]	@ 0x50
 800531e:	e00e      	b.n	800533e <HAL_I2C_Mem_Read_DMA+0x112>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005320:	2108      	movs	r1, #8
 8005322:	187b      	adds	r3, r7, r1
 8005324:	881b      	ldrh	r3, [r3, #0]
 8005326:	0a1b      	lsrs	r3, r3, #8
 8005328:	b29b      	uxth	r3, r3
 800532a:	b2da      	uxtb	r2, r3
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8005332:	187b      	adds	r3, r7, r1
 8005334:	881b      	ldrh	r3, [r3, #0]
 8005336:	b2db      	uxtb	r3, r3
 8005338:	001a      	movs	r2, r3
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if (hi2c->hdmarx != NULL)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005342:	2b00      	cmp	r3, #0
 8005344:	d023      	beq.n	800538e <HAL_I2C_Mem_Read_DMA+0x162>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800534a:	4a35      	ldr	r2, [pc, #212]	@ (8005420 <HAL_I2C_Mem_Read_DMA+0x1f4>)
 800534c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005352:	4a34      	ldr	r2, [pc, #208]	@ (8005424 <HAL_I2C_Mem_Read_DMA+0x1f8>)
 8005354:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800535a:	2200      	movs	r2, #0
 800535c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->hdmarx->XferAbortCallback = NULL;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005362:	2200      	movs	r2, #0
 8005364:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	3324      	adds	r3, #36	@ 0x24
 8005370:	0019      	movs	r1, r3
 8005372:	6aba      	ldr	r2, [r7, #40]	@ 0x28
                                       hi2c->XferSize);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005378:	2517      	movs	r5, #23
 800537a:	197c      	adds	r4, r7, r5
 800537c:	f7fe fedc 	bl	8004138 <HAL_DMA_Start_IT>
 8005380:	0003      	movs	r3, r0
 8005382:	7023      	strb	r3, [r4, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8005384:	197b      	adds	r3, r7, r5
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d12b      	bne.n	80053e4 <HAL_I2C_Mem_Read_DMA+0x1b8>
 800538c:	e013      	b.n	80053b6 <HAL_I2C_Mem_Read_DMA+0x18a>
      hi2c->State     = HAL_I2C_STATE_READY;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2241      	movs	r2, #65	@ 0x41
 8005392:	2120      	movs	r1, #32
 8005394:	5499      	strb	r1, [r3, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2242      	movs	r2, #66	@ 0x42
 800539a:	2100      	movs	r1, #0
 800539c:	5499      	strb	r1, [r3, r2]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053a2:	2280      	movs	r2, #128	@ 0x80
 80053a4:	431a      	orrs	r2, r3
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2240      	movs	r2, #64	@ 0x40
 80053ae:	2100      	movs	r1, #0
 80053b0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e02b      	b.n	800540e <HAL_I2C_Mem_Read_DMA+0x1e2>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80053b6:	1dbb      	adds	r3, r7, #6
 80053b8:	881b      	ldrh	r3, [r3, #0]
 80053ba:	b2da      	uxtb	r2, r3
 80053bc:	230a      	movs	r3, #10
 80053be:	18fb      	adds	r3, r7, r3
 80053c0:	8819      	ldrh	r1, [r3, #0]
 80053c2:	68f8      	ldr	r0, [r7, #12]
 80053c4:	4b18      	ldr	r3, [pc, #96]	@ (8005428 <HAL_I2C_Mem_Read_DMA+0x1fc>)
 80053c6:	9300      	str	r3, [sp, #0]
 80053c8:	2300      	movs	r3, #0
 80053ca:	f001 fc35 	bl	8006c38 <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2240      	movs	r2, #64	@ 0x40
 80053d2:	2100      	movs	r1, #0
 80053d4:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2101      	movs	r1, #1
 80053da:	0018      	movs	r0, r3
 80053dc:	f001 fc66 	bl	8006cac <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 80053e0:	2300      	movs	r3, #0
 80053e2:	e014      	b.n	800540e <HAL_I2C_Mem_Read_DMA+0x1e2>
      hi2c->State     = HAL_I2C_STATE_READY;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2241      	movs	r2, #65	@ 0x41
 80053e8:	2120      	movs	r1, #32
 80053ea:	5499      	strb	r1, [r3, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2242      	movs	r2, #66	@ 0x42
 80053f0:	2100      	movs	r1, #0
 80053f2:	5499      	strb	r1, [r3, r2]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053f8:	2210      	movs	r2, #16
 80053fa:	431a      	orrs	r2, r3
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2240      	movs	r2, #64	@ 0x40
 8005404:	2100      	movs	r1, #0
 8005406:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e000      	b.n	800540e <HAL_I2C_Mem_Read_DMA+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800540c:	2302      	movs	r3, #2
  }
}
 800540e:	0018      	movs	r0, r3
 8005410:	46bd      	mov	sp, r7
 8005412:	b006      	add	sp, #24
 8005414:	bdb0      	pop	{r4, r5, r7, pc}
 8005416:	46c0      	nop			@ (mov r8, r8)
 8005418:	ffff0000 	.word	0xffff0000
 800541c:	08005bd5 	.word	0x08005bd5
 8005420:	08006b29 	.word	0x08006b29
 8005424:	08006bc9 	.word	0x08006bc9
 8005428:	80002000 	.word	0x80002000

0800542c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	699b      	ldr	r3, [r3, #24]
 800543a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005448:	2b00      	cmp	r3, #0
 800544a:	d005      	beq.n	8005458 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005450:	68ba      	ldr	r2, [r7, #8]
 8005452:	68f9      	ldr	r1, [r7, #12]
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	4798      	blx	r3
  }
}
 8005458:	46c0      	nop			@ (mov r8, r8)
 800545a:	46bd      	mov	sp, r7
 800545c:	b004      	add	sp, #16
 800545e:	bd80      	pop	{r7, pc}

08005460 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b086      	sub	sp, #24
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	699b      	ldr	r3, [r3, #24]
 800546e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005478:	697a      	ldr	r2, [r7, #20]
 800547a:	2380      	movs	r3, #128	@ 0x80
 800547c:	005b      	lsls	r3, r3, #1
 800547e:	4013      	ands	r3, r2
 8005480:	d00e      	beq.n	80054a0 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	2280      	movs	r2, #128	@ 0x80
 8005486:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005488:	d00a      	beq.n	80054a0 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800548e:	2201      	movs	r2, #1
 8005490:	431a      	orrs	r2, r3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	2280      	movs	r2, #128	@ 0x80
 800549c:	0052      	lsls	r2, r2, #1
 800549e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80054a0:	697a      	ldr	r2, [r7, #20]
 80054a2:	2380      	movs	r3, #128	@ 0x80
 80054a4:	00db      	lsls	r3, r3, #3
 80054a6:	4013      	ands	r3, r2
 80054a8:	d00e      	beq.n	80054c8 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	2280      	movs	r2, #128	@ 0x80
 80054ae:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80054b0:	d00a      	beq.n	80054c8 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054b6:	2208      	movs	r2, #8
 80054b8:	431a      	orrs	r2, r3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	2280      	movs	r2, #128	@ 0x80
 80054c4:	00d2      	lsls	r2, r2, #3
 80054c6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80054c8:	697a      	ldr	r2, [r7, #20]
 80054ca:	2380      	movs	r3, #128	@ 0x80
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	4013      	ands	r3, r2
 80054d0:	d00e      	beq.n	80054f0 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	2280      	movs	r2, #128	@ 0x80
 80054d6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80054d8:	d00a      	beq.n	80054f0 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054de:	2202      	movs	r2, #2
 80054e0:	431a      	orrs	r2, r3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2280      	movs	r2, #128	@ 0x80
 80054ec:	0092      	lsls	r2, r2, #2
 80054ee:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054f4:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	220b      	movs	r2, #11
 80054fa:	4013      	ands	r3, r2
 80054fc:	d005      	beq.n	800550a <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 80054fe:	68fa      	ldr	r2, [r7, #12]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	0011      	movs	r1, r2
 8005504:	0018      	movs	r0, r3
 8005506:	f001 f971 	bl	80067ec <I2C_ITError>
  }
}
 800550a:	46c0      	nop			@ (mov r8, r8)
 800550c:	46bd      	mov	sp, r7
 800550e:	b006      	add	sp, #24
 8005510:	bd80      	pop	{r7, pc}

08005512 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005512:	b580      	push	{r7, lr}
 8005514:	b082      	sub	sp, #8
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800551a:	46c0      	nop			@ (mov r8, r8)
 800551c:	46bd      	mov	sp, r7
 800551e:	b002      	add	sp, #8
 8005520:	bd80      	pop	{r7, pc}

08005522 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005522:	b580      	push	{r7, lr}
 8005524:	b082      	sub	sp, #8
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800552a:	46c0      	nop			@ (mov r8, r8)
 800552c:	46bd      	mov	sp, r7
 800552e:	b002      	add	sp, #8
 8005530:	bd80      	pop	{r7, pc}

08005532 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005532:	b580      	push	{r7, lr}
 8005534:	b082      	sub	sp, #8
 8005536:	af00      	add	r7, sp, #0
 8005538:	6078      	str	r0, [r7, #4]
 800553a:	0008      	movs	r0, r1
 800553c:	0011      	movs	r1, r2
 800553e:	1cfb      	adds	r3, r7, #3
 8005540:	1c02      	adds	r2, r0, #0
 8005542:	701a      	strb	r2, [r3, #0]
 8005544:	003b      	movs	r3, r7
 8005546:	1c0a      	adds	r2, r1, #0
 8005548:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800554a:	46c0      	nop			@ (mov r8, r8)
 800554c:	46bd      	mov	sp, r7
 800554e:	b002      	add	sp, #8
 8005550:	bd80      	pop	{r7, pc}

08005552 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005552:	b580      	push	{r7, lr}
 8005554:	b082      	sub	sp, #8
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800555a:	46c0      	nop			@ (mov r8, r8)
 800555c:	46bd      	mov	sp, r7
 800555e:	b002      	add	sp, #8
 8005560:	bd80      	pop	{r7, pc}

08005562 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005562:	b580      	push	{r7, lr}
 8005564:	b082      	sub	sp, #8
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800556a:	46c0      	nop			@ (mov r8, r8)
 800556c:	46bd      	mov	sp, r7
 800556e:	b002      	add	sp, #8
 8005570:	bd80      	pop	{r7, pc}
	...

08005574 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8005574:	b590      	push	{r4, r7, lr}
 8005576:	b089      	sub	sp, #36	@ 0x24
 8005578:	af02      	add	r7, sp, #8
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2240      	movs	r2, #64	@ 0x40
 8005588:	5c9b      	ldrb	r3, [r3, r2]
 800558a:	2b01      	cmp	r3, #1
 800558c:	d101      	bne.n	8005592 <I2C_Master_ISR_IT+0x1e>
 800558e:	2302      	movs	r3, #2
 8005590:	e11d      	b.n	80057ce <I2C_Master_ISR_IT+0x25a>
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2240      	movs	r2, #64	@ 0x40
 8005596:	2101      	movs	r1, #1
 8005598:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	2210      	movs	r2, #16
 800559e:	4013      	ands	r3, r2
 80055a0:	d012      	beq.n	80055c8 <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2210      	movs	r2, #16
 80055a6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80055a8:	d00e      	beq.n	80055c8 <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	2210      	movs	r2, #16
 80055b0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055b6:	2204      	movs	r2, #4
 80055b8:	431a      	orrs	r2, r3
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	0018      	movs	r0, r3
 80055c2:	f001 fa3e 	bl	8006a42 <I2C_Flush_TXDR>
 80055c6:	e0ef      	b.n	80057a8 <I2C_Master_ISR_IT+0x234>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	2204      	movs	r2, #4
 80055cc:	4013      	ands	r3, r2
 80055ce:	d021      	beq.n	8005614 <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2204      	movs	r2, #4
 80055d4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80055d6:	d01d      	beq.n	8005614 <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	2204      	movs	r2, #4
 80055dc:	4393      	bics	r3, r2
 80055de:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ea:	b2d2      	uxtb	r2, r2
 80055ec:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055f2:	1c5a      	adds	r2, r3, #1
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055fc:	3b01      	subs	r3, #1
 80055fe:	b29a      	uxth	r2, r3
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005608:	b29b      	uxth	r3, r3
 800560a:	3b01      	subs	r3, #1
 800560c:	b29a      	uxth	r2, r3
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005612:	e0c9      	b.n	80057a8 <I2C_Master_ISR_IT+0x234>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	2240      	movs	r2, #64	@ 0x40
 8005618:	4013      	ands	r3, r2
 800561a:	d126      	bne.n	800566a <I2C_Master_ISR_IT+0xf6>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	2202      	movs	r2, #2
 8005620:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8005622:	d022      	beq.n	800566a <I2C_Master_ISR_IT+0xf6>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2202      	movs	r2, #2
 8005628:	4013      	ands	r3, r2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800562a:	d01e      	beq.n	800566a <I2C_Master_ISR_IT+0xf6>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005630:	b29b      	uxth	r3, r3
 8005632:	2b00      	cmp	r3, #0
 8005634:	d100      	bne.n	8005638 <I2C_Master_ISR_IT+0xc4>
 8005636:	e0b7      	b.n	80057a8 <I2C_Master_ISR_IT+0x234>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800563c:	781a      	ldrb	r2, [r3, #0]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005648:	1c5a      	adds	r2, r3, #1
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005652:	3b01      	subs	r3, #1
 8005654:	b29a      	uxth	r2, r3
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800565e:	b29b      	uxth	r3, r3
 8005660:	3b01      	subs	r3, #1
 8005662:	b29a      	uxth	r2, r3
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8005668:	e09e      	b.n	80057a8 <I2C_Master_ISR_IT+0x234>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	2280      	movs	r2, #128	@ 0x80
 800566e:	4013      	ands	r3, r2
 8005670:	d100      	bne.n	8005674 <I2C_Master_ISR_IT+0x100>
 8005672:	e069      	b.n	8005748 <I2C_Master_ISR_IT+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2240      	movs	r2, #64	@ 0x40
 8005678:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800567a:	d065      	beq.n	8005748 <I2C_Master_ISR_IT+0x1d4>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005680:	b29b      	uxth	r3, r3
 8005682:	2b00      	cmp	r3, #0
 8005684:	d04a      	beq.n	800571c <I2C_Master_ISR_IT+0x1a8>
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800568a:	2b00      	cmp	r3, #0
 800568c:	d146      	bne.n	800571c <I2C_Master_ISR_IT+0x1a8>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	b29a      	uxth	r2, r3
 8005696:	2112      	movs	r1, #18
 8005698:	187b      	adds	r3, r7, r1
 800569a:	0592      	lsls	r2, r2, #22
 800569c:	0d92      	lsrs	r2, r2, #22
 800569e:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	2bff      	cmp	r3, #255	@ 0xff
 80056a8:	d910      	bls.n	80056cc <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	22ff      	movs	r2, #255	@ 0xff
 80056ae:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056b4:	b2da      	uxtb	r2, r3
 80056b6:	2380      	movs	r3, #128	@ 0x80
 80056b8:	045c      	lsls	r4, r3, #17
 80056ba:	187b      	adds	r3, r7, r1
 80056bc:	8819      	ldrh	r1, [r3, #0]
 80056be:	68f8      	ldr	r0, [r7, #12]
 80056c0:	2300      	movs	r3, #0
 80056c2:	9300      	str	r3, [sp, #0]
 80056c4:	0023      	movs	r3, r4
 80056c6:	f001 fab7 	bl	8006c38 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80056ca:	e03c      	b.n	8005746 <I2C_Master_ISR_IT+0x1d2>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056d0:	b29a      	uxth	r2, r3
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056da:	4a3f      	ldr	r2, [pc, #252]	@ (80057d8 <I2C_Master_ISR_IT+0x264>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d00e      	beq.n	80056fe <I2C_Master_ISR_IT+0x18a>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056e4:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80056ea:	2312      	movs	r3, #18
 80056ec:	18fb      	adds	r3, r7, r3
 80056ee:	8819      	ldrh	r1, [r3, #0]
 80056f0:	68f8      	ldr	r0, [r7, #12]
 80056f2:	2300      	movs	r3, #0
 80056f4:	9300      	str	r3, [sp, #0]
 80056f6:	0023      	movs	r3, r4
 80056f8:	f001 fa9e 	bl	8006c38 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80056fc:	e023      	b.n	8005746 <I2C_Master_ISR_IT+0x1d2>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005702:	b2da      	uxtb	r2, r3
 8005704:	2380      	movs	r3, #128	@ 0x80
 8005706:	049c      	lsls	r4, r3, #18
 8005708:	2312      	movs	r3, #18
 800570a:	18fb      	adds	r3, r7, r3
 800570c:	8819      	ldrh	r1, [r3, #0]
 800570e:	68f8      	ldr	r0, [r7, #12]
 8005710:	2300      	movs	r3, #0
 8005712:	9300      	str	r3, [sp, #0]
 8005714:	0023      	movs	r3, r4
 8005716:	f001 fa8f 	bl	8006c38 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800571a:	e014      	b.n	8005746 <I2C_Master_ISR_IT+0x1d2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	685a      	ldr	r2, [r3, #4]
 8005722:	2380      	movs	r3, #128	@ 0x80
 8005724:	049b      	lsls	r3, r3, #18
 8005726:	401a      	ands	r2, r3
 8005728:	2380      	movs	r3, #128	@ 0x80
 800572a:	049b      	lsls	r3, r3, #18
 800572c:	429a      	cmp	r2, r3
 800572e:	d004      	beq.n	800573a <I2C_Master_ISR_IT+0x1c6>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	0018      	movs	r0, r3
 8005734:	f000 fd06 	bl	8006144 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005738:	e036      	b.n	80057a8 <I2C_Master_ISR_IT+0x234>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2140      	movs	r1, #64	@ 0x40
 800573e:	0018      	movs	r0, r3
 8005740:	f001 f854 	bl	80067ec <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005744:	e030      	b.n	80057a8 <I2C_Master_ISR_IT+0x234>
 8005746:	e02f      	b.n	80057a8 <I2C_Master_ISR_IT+0x234>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	2240      	movs	r2, #64	@ 0x40
 800574c:	4013      	ands	r3, r2
 800574e:	d02b      	beq.n	80057a8 <I2C_Master_ISR_IT+0x234>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2240      	movs	r2, #64	@ 0x40
 8005754:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8005756:	d027      	beq.n	80057a8 <I2C_Master_ISR_IT+0x234>
  {
    if (hi2c->XferCount == 0U)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800575c:	b29b      	uxth	r3, r3
 800575e:	2b00      	cmp	r3, #0
 8005760:	d11d      	bne.n	800579e <I2C_Master_ISR_IT+0x22a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	685a      	ldr	r2, [r3, #4]
 8005768:	2380      	movs	r3, #128	@ 0x80
 800576a:	049b      	lsls	r3, r3, #18
 800576c:	401a      	ands	r2, r3
 800576e:	2380      	movs	r3, #128	@ 0x80
 8005770:	049b      	lsls	r3, r3, #18
 8005772:	429a      	cmp	r2, r3
 8005774:	d018      	beq.n	80057a8 <I2C_Master_ISR_IT+0x234>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800577a:	4a17      	ldr	r2, [pc, #92]	@ (80057d8 <I2C_Master_ISR_IT+0x264>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d109      	bne.n	8005794 <I2C_Master_ISR_IT+0x220>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	685a      	ldr	r2, [r3, #4]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2180      	movs	r1, #128	@ 0x80
 800578c:	01c9      	lsls	r1, r1, #7
 800578e:	430a      	orrs	r2, r1
 8005790:	605a      	str	r2, [r3, #4]
 8005792:	e009      	b.n	80057a8 <I2C_Master_ISR_IT+0x234>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	0018      	movs	r0, r3
 8005798:	f000 fcd4 	bl	8006144 <I2C_ITMasterSeqCplt>
 800579c:	e004      	b.n	80057a8 <I2C_Master_ISR_IT+0x234>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2140      	movs	r1, #64	@ 0x40
 80057a2:	0018      	movs	r0, r3
 80057a4:	f001 f822 	bl	80067ec <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	2220      	movs	r2, #32
 80057ac:	4013      	ands	r3, r2
 80057ae:	d009      	beq.n	80057c4 <I2C_Master_ISR_IT+0x250>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2220      	movs	r2, #32
 80057b4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80057b6:	d005      	beq.n	80057c4 <I2C_Master_ISR_IT+0x250>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80057b8:	697a      	ldr	r2, [r7, #20]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	0011      	movs	r1, r2
 80057be:	0018      	movs	r0, r3
 80057c0:	f000 fd66 	bl	8006290 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2240      	movs	r2, #64	@ 0x40
 80057c8:	2100      	movs	r1, #0
 80057ca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	0018      	movs	r0, r3
 80057d0:	46bd      	mov	sp, r7
 80057d2:	b007      	add	sp, #28
 80057d4:	bd90      	pop	{r4, r7, pc}
 80057d6:	46c0      	nop			@ (mov r8, r8)
 80057d8:	ffff0000 	.word	0xffff0000

080057dc <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b086      	sub	sp, #24
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	60b9      	str	r1, [r7, #8]
 80057e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ec:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2240      	movs	r2, #64	@ 0x40
 80057f6:	5c9b      	ldrb	r3, [r3, r2]
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d101      	bne.n	8005800 <I2C_Slave_ISR_IT+0x24>
 80057fc:	2302      	movs	r3, #2
 80057fe:	e0e7      	b.n	80059d0 <I2C_Slave_ISR_IT+0x1f4>
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2240      	movs	r2, #64	@ 0x40
 8005804:	2101      	movs	r1, #1
 8005806:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	2220      	movs	r2, #32
 800580c:	4013      	ands	r3, r2
 800580e:	d00a      	beq.n	8005826 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2220      	movs	r2, #32
 8005814:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005816:	d006      	beq.n	8005826 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005818:	693a      	ldr	r2, [r7, #16]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	0011      	movs	r1, r2
 800581e:	0018      	movs	r0, r3
 8005820:	f000 fe04 	bl	800642c <I2C_ITSlaveCplt>
 8005824:	e0cf      	b.n	80059c6 <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	2210      	movs	r2, #16
 800582a:	4013      	ands	r3, r2
 800582c:	d052      	beq.n	80058d4 <I2C_Slave_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2210      	movs	r2, #16
 8005832:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005834:	d04e      	beq.n	80058d4 <I2C_Slave_ISR_IT+0xf8>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800583a:	b29b      	uxth	r3, r3
 800583c:	2b00      	cmp	r3, #0
 800583e:	d12d      	bne.n	800589c <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2241      	movs	r2, #65	@ 0x41
 8005844:	5c9b      	ldrb	r3, [r3, r2]
 8005846:	b2db      	uxtb	r3, r3
 8005848:	2b28      	cmp	r3, #40	@ 0x28
 800584a:	d10b      	bne.n	8005864 <I2C_Slave_ISR_IT+0x88>
 800584c:	697a      	ldr	r2, [r7, #20]
 800584e:	2380      	movs	r3, #128	@ 0x80
 8005850:	049b      	lsls	r3, r3, #18
 8005852:	429a      	cmp	r2, r3
 8005854:	d106      	bne.n	8005864 <I2C_Slave_ISR_IT+0x88>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005856:	693a      	ldr	r2, [r7, #16]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	0011      	movs	r1, r2
 800585c:	0018      	movs	r0, r3
 800585e:	f000 ff6d 	bl	800673c <I2C_ITListenCplt>
 8005862:	e036      	b.n	80058d2 <I2C_Slave_ISR_IT+0xf6>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2241      	movs	r2, #65	@ 0x41
 8005868:	5c9b      	ldrb	r3, [r3, r2]
 800586a:	b2db      	uxtb	r3, r3
 800586c:	2b29      	cmp	r3, #41	@ 0x29
 800586e:	d110      	bne.n	8005892 <I2C_Slave_ISR_IT+0xb6>
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	4a59      	ldr	r2, [pc, #356]	@ (80059d8 <I2C_Slave_ISR_IT+0x1fc>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d00c      	beq.n	8005892 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2210      	movs	r2, #16
 800587e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	0018      	movs	r0, r3
 8005884:	f001 f8dd 	bl	8006a42 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	0018      	movs	r0, r3
 800588c:	f000 fc9c 	bl	80061c8 <I2C_ITSlaveSeqCplt>
 8005890:	e01f      	b.n	80058d2 <I2C_Slave_ISR_IT+0xf6>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	2210      	movs	r2, #16
 8005898:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800589a:	e091      	b.n	80059c0 <I2C_Slave_ISR_IT+0x1e4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2210      	movs	r2, #16
 80058a2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058a8:	2204      	movs	r2, #4
 80058aa:	431a      	orrs	r2, r3
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d005      	beq.n	80058c2 <I2C_Slave_ISR_IT+0xe6>
 80058b6:	697a      	ldr	r2, [r7, #20]
 80058b8:	2380      	movs	r3, #128	@ 0x80
 80058ba:	045b      	lsls	r3, r3, #17
 80058bc:	429a      	cmp	r2, r3
 80058be:	d000      	beq.n	80058c2 <I2C_Slave_ISR_IT+0xe6>
 80058c0:	e07e      	b.n	80059c0 <I2C_Slave_ISR_IT+0x1e4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	0011      	movs	r1, r2
 80058ca:	0018      	movs	r0, r3
 80058cc:	f000 ff8e 	bl	80067ec <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80058d0:	e076      	b.n	80059c0 <I2C_Slave_ISR_IT+0x1e4>
 80058d2:	e075      	b.n	80059c0 <I2C_Slave_ISR_IT+0x1e4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	2204      	movs	r2, #4
 80058d8:	4013      	ands	r3, r2
 80058da:	d02f      	beq.n	800593c <I2C_Slave_ISR_IT+0x160>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2204      	movs	r2, #4
 80058e0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80058e2:	d02b      	beq.n	800593c <I2C_Slave_ISR_IT+0x160>
  {
    if (hi2c->XferCount > 0U)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d018      	beq.n	8005920 <I2C_Slave_ISR_IT+0x144>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058f8:	b2d2      	uxtb	r2, r2
 80058fa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005900:	1c5a      	adds	r2, r3, #1
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800590a:	3b01      	subs	r3, #1
 800590c:	b29a      	uxth	r2, r3
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005916:	b29b      	uxth	r3, r3
 8005918:	3b01      	subs	r3, #1
 800591a:	b29a      	uxth	r2, r3
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005924:	b29b      	uxth	r3, r3
 8005926:	2b00      	cmp	r3, #0
 8005928:	d14c      	bne.n	80059c4 <I2C_Slave_ISR_IT+0x1e8>
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	4a2a      	ldr	r2, [pc, #168]	@ (80059d8 <I2C_Slave_ISR_IT+0x1fc>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d048      	beq.n	80059c4 <I2C_Slave_ISR_IT+0x1e8>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	0018      	movs	r0, r3
 8005936:	f000 fc47 	bl	80061c8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800593a:	e043      	b.n	80059c4 <I2C_Slave_ISR_IT+0x1e8>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	2208      	movs	r2, #8
 8005940:	4013      	ands	r3, r2
 8005942:	d00a      	beq.n	800595a <I2C_Slave_ISR_IT+0x17e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2208      	movs	r2, #8
 8005948:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800594a:	d006      	beq.n	800595a <I2C_Slave_ISR_IT+0x17e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800594c:	693a      	ldr	r2, [r7, #16]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	0011      	movs	r1, r2
 8005952:	0018      	movs	r0, r3
 8005954:	f000 fb52 	bl	8005ffc <I2C_ITAddrCplt>
 8005958:	e035      	b.n	80059c6 <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	2202      	movs	r2, #2
 800595e:	4013      	ands	r3, r2
 8005960:	d031      	beq.n	80059c6 <I2C_Slave_ISR_IT+0x1ea>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2202      	movs	r2, #2
 8005966:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005968:	d02d      	beq.n	80059c6 <I2C_Slave_ISR_IT+0x1ea>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800596e:	b29b      	uxth	r3, r3
 8005970:	2b00      	cmp	r3, #0
 8005972:	d018      	beq.n	80059a6 <I2C_Slave_ISR_IT+0x1ca>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005978:	781a      	ldrb	r2, [r3, #0]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005984:	1c5a      	adds	r2, r3, #1
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800598e:	b29b      	uxth	r3, r3
 8005990:	3b01      	subs	r3, #1
 8005992:	b29a      	uxth	r2, r3
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800599c:	3b01      	subs	r3, #1
 800599e:	b29a      	uxth	r2, r3
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	851a      	strh	r2, [r3, #40]	@ 0x28
 80059a4:	e00f      	b.n	80059c6 <I2C_Slave_ISR_IT+0x1ea>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80059a6:	697a      	ldr	r2, [r7, #20]
 80059a8:	2380      	movs	r3, #128	@ 0x80
 80059aa:	045b      	lsls	r3, r3, #17
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d002      	beq.n	80059b6 <I2C_Slave_ISR_IT+0x1da>
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d107      	bne.n	80059c6 <I2C_Slave_ISR_IT+0x1ea>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	0018      	movs	r0, r3
 80059ba:	f000 fc05 	bl	80061c8 <I2C_ITSlaveSeqCplt>
 80059be:	e002      	b.n	80059c6 <I2C_Slave_ISR_IT+0x1ea>
    if (hi2c->XferCount == 0U)
 80059c0:	46c0      	nop			@ (mov r8, r8)
 80059c2:	e000      	b.n	80059c6 <I2C_Slave_ISR_IT+0x1ea>
    if ((hi2c->XferCount == 0U) && \
 80059c4:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2240      	movs	r2, #64	@ 0x40
 80059ca:	2100      	movs	r1, #0
 80059cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80059ce:	2300      	movs	r3, #0
}
 80059d0:	0018      	movs	r0, r3
 80059d2:	46bd      	mov	sp, r7
 80059d4:	b006      	add	sp, #24
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	ffff0000 	.word	0xffff0000

080059dc <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80059dc:	b590      	push	{r4, r7, lr}
 80059de:	b089      	sub	sp, #36	@ 0x24
 80059e0:	af02      	add	r7, sp, #8
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2240      	movs	r2, #64	@ 0x40
 80059ec:	5c9b      	ldrb	r3, [r3, r2]
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d101      	bne.n	80059f6 <I2C_Master_ISR_DMA+0x1a>
 80059f2:	2302      	movs	r3, #2
 80059f4:	e0e7      	b.n	8005bc6 <I2C_Master_ISR_DMA+0x1ea>
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2240      	movs	r2, #64	@ 0x40
 80059fa:	2101      	movs	r1, #1
 80059fc:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	2210      	movs	r2, #16
 8005a02:	4013      	ands	r3, r2
 8005a04:	d017      	beq.n	8005a36 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2210      	movs	r2, #16
 8005a0a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005a0c:	d013      	beq.n	8005a36 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2210      	movs	r2, #16
 8005a14:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a1a:	2204      	movs	r2, #4
 8005a1c:	431a      	orrs	r2, r3
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2120      	movs	r1, #32
 8005a26:	0018      	movs	r0, r3
 8005a28:	f001 f940 	bl	8006cac <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	0018      	movs	r0, r3
 8005a30:	f001 f807 	bl	8006a42 <I2C_Flush_TXDR>
 8005a34:	e0c2      	b.n	8005bbc <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	2280      	movs	r2, #128	@ 0x80
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	d100      	bne.n	8005a40 <I2C_Master_ISR_DMA+0x64>
 8005a3e:	e07c      	b.n	8005b3a <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2240      	movs	r2, #64	@ 0x40
 8005a44:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005a46:	d100      	bne.n	8005a4a <I2C_Master_ISR_DMA+0x6e>
 8005a48:	e077      	b.n	8005b3a <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2140      	movs	r1, #64	@ 0x40
 8005a56:	438a      	bics	r2, r1
 8005a58:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d055      	beq.n	8005b10 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	b29a      	uxth	r2, r3
 8005a6c:	2312      	movs	r3, #18
 8005a6e:	18fb      	adds	r3, r7, r3
 8005a70:	0592      	lsls	r2, r2, #22
 8005a72:	0d92      	lsrs	r2, r2, #22
 8005a74:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	2bff      	cmp	r3, #255	@ 0xff
 8005a7e:	d906      	bls.n	8005a8e <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	22ff      	movs	r2, #255	@ 0xff
 8005a84:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8005a86:	2380      	movs	r3, #128	@ 0x80
 8005a88:	045b      	lsls	r3, r3, #17
 8005a8a:	617b      	str	r3, [r7, #20]
 8005a8c:	e010      	b.n	8005ab0 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a92:	b29a      	uxth	r2, r3
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a9c:	4a4c      	ldr	r2, [pc, #304]	@ (8005bd0 <I2C_Master_ISR_DMA+0x1f4>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d003      	beq.n	8005aaa <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aa6:	617b      	str	r3, [r7, #20]
 8005aa8:	e002      	b.n	8005ab0 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8005aaa:	2380      	movs	r3, #128	@ 0x80
 8005aac:	049b      	lsls	r3, r3, #18
 8005aae:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ab4:	b2da      	uxtb	r2, r3
 8005ab6:	697c      	ldr	r4, [r7, #20]
 8005ab8:	2312      	movs	r3, #18
 8005aba:	18fb      	adds	r3, r7, r3
 8005abc:	8819      	ldrh	r1, [r3, #0]
 8005abe:	68f8      	ldr	r0, [r7, #12]
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	9300      	str	r3, [sp, #0]
 8005ac4:	0023      	movs	r3, r4
 8005ac6:	f001 f8b7 	bl	8006c38 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ace:	b29a      	uxth	r2, r3
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ad4:	1ad3      	subs	r3, r2, r3
 8005ad6:	b29a      	uxth	r2, r3
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2241      	movs	r2, #65	@ 0x41
 8005ae0:	5c9b      	ldrb	r3, [r3, r2]
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	2b22      	cmp	r3, #34	@ 0x22
 8005ae6:	d109      	bne.n	8005afc <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	2180      	movs	r1, #128	@ 0x80
 8005af4:	0209      	lsls	r1, r1, #8
 8005af6:	430a      	orrs	r2, r1
 8005af8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005afa:	e05f      	b.n	8005bbc <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2180      	movs	r1, #128	@ 0x80
 8005b08:	01c9      	lsls	r1, r1, #7
 8005b0a:	430a      	orrs	r2, r1
 8005b0c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005b0e:	e055      	b.n	8005bbc <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	685a      	ldr	r2, [r3, #4]
 8005b16:	2380      	movs	r3, #128	@ 0x80
 8005b18:	049b      	lsls	r3, r3, #18
 8005b1a:	401a      	ands	r2, r3
 8005b1c:	2380      	movs	r3, #128	@ 0x80
 8005b1e:	049b      	lsls	r3, r3, #18
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d004      	beq.n	8005b2e <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	0018      	movs	r0, r3
 8005b28:	f000 fb0c 	bl	8006144 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8005b2c:	e046      	b.n	8005bbc <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2140      	movs	r1, #64	@ 0x40
 8005b32:	0018      	movs	r0, r3
 8005b34:	f000 fe5a 	bl	80067ec <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8005b38:	e040      	b.n	8005bbc <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	2240      	movs	r2, #64	@ 0x40
 8005b3e:	4013      	ands	r3, r2
 8005b40:	d02c      	beq.n	8005b9c <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2240      	movs	r2, #64	@ 0x40
 8005b46:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005b48:	d028      	beq.n	8005b9c <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d11d      	bne.n	8005b90 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	685a      	ldr	r2, [r3, #4]
 8005b5a:	2380      	movs	r3, #128	@ 0x80
 8005b5c:	049b      	lsls	r3, r3, #18
 8005b5e:	401a      	ands	r2, r3
 8005b60:	2380      	movs	r3, #128	@ 0x80
 8005b62:	049b      	lsls	r3, r3, #18
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d028      	beq.n	8005bba <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b6c:	4a18      	ldr	r2, [pc, #96]	@ (8005bd0 <I2C_Master_ISR_DMA+0x1f4>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d109      	bne.n	8005b86 <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	685a      	ldr	r2, [r3, #4]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	2180      	movs	r1, #128	@ 0x80
 8005b7e:	01c9      	lsls	r1, r1, #7
 8005b80:	430a      	orrs	r2, r1
 8005b82:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8005b84:	e019      	b.n	8005bba <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	0018      	movs	r0, r3
 8005b8a:	f000 fadb 	bl	8006144 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8005b8e:	e014      	b.n	8005bba <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2140      	movs	r1, #64	@ 0x40
 8005b94:	0018      	movs	r0, r3
 8005b96:	f000 fe29 	bl	80067ec <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005b9a:	e00e      	b.n	8005bba <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	2220      	movs	r2, #32
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	d00b      	beq.n	8005bbc <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2220      	movs	r2, #32
 8005ba8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005baa:	d007      	beq.n	8005bbc <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8005bac:	68ba      	ldr	r2, [r7, #8]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	0011      	movs	r1, r2
 8005bb2:	0018      	movs	r0, r3
 8005bb4:	f000 fb6c 	bl	8006290 <I2C_ITMasterCplt>
 8005bb8:	e000      	b.n	8005bbc <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 8005bba:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2240      	movs	r2, #64	@ 0x40
 8005bc0:	2100      	movs	r1, #0
 8005bc2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005bc4:	2300      	movs	r3, #0
}
 8005bc6:	0018      	movs	r0, r3
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	b007      	add	sp, #28
 8005bcc:	bd90      	pop	{r4, r7, pc}
 8005bce:	46c0      	nop			@ (mov r8, r8)
 8005bd0:	ffff0000 	.word	0xffff0000

08005bd4 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8005bd4:	b590      	push	{r4, r7, lr}
 8005bd6:	b089      	sub	sp, #36	@ 0x24
 8005bd8:	af02      	add	r7, sp, #8
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8005be0:	4b90      	ldr	r3, [pc, #576]	@ (8005e24 <I2C_Mem_ISR_DMA+0x250>)
 8005be2:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2240      	movs	r2, #64	@ 0x40
 8005be8:	5c9b      	ldrb	r3, [r3, r2]
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d101      	bne.n	8005bf2 <I2C_Mem_ISR_DMA+0x1e>
 8005bee:	2302      	movs	r3, #2
 8005bf0:	e113      	b.n	8005e1a <I2C_Mem_ISR_DMA+0x246>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2240      	movs	r2, #64	@ 0x40
 8005bf6:	2101      	movs	r1, #1
 8005bf8:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	2210      	movs	r2, #16
 8005bfe:	4013      	ands	r3, r2
 8005c00:	d017      	beq.n	8005c32 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2210      	movs	r2, #16
 8005c06:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005c08:	d013      	beq.n	8005c32 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2210      	movs	r2, #16
 8005c10:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c16:	2204      	movs	r2, #4
 8005c18:	431a      	orrs	r2, r3
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2120      	movs	r1, #32
 8005c22:	0018      	movs	r0, r3
 8005c24:	f001 f842 	bl	8006cac <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	0018      	movs	r0, r3
 8005c2c:	f000 ff09 	bl	8006a42 <I2C_Flush_TXDR>
 8005c30:	e0ee      	b.n	8005e10 <I2C_Mem_ISR_DMA+0x23c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	2202      	movs	r2, #2
 8005c36:	4013      	ands	r3, r2
 8005c38:	d00d      	beq.n	8005c56 <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2202      	movs	r2, #2
 8005c3e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005c40:	d009      	beq.n	8005c56 <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005c4a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	4252      	negs	r2, r2
 8005c52:	651a      	str	r2, [r3, #80]	@ 0x50
 8005c54:	e0dc      	b.n	8005e10 <I2C_Mem_ISR_DMA+0x23c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	2280      	movs	r2, #128	@ 0x80
 8005c5a:	4013      	ands	r3, r2
 8005c5c:	d063      	beq.n	8005d26 <I2C_Mem_ISR_DMA+0x152>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2240      	movs	r2, #64	@ 0x40
 8005c62:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005c64:	d05f      	beq.n	8005d26 <I2C_Mem_ISR_DMA+0x152>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2101      	movs	r1, #1
 8005c6a:	0018      	movs	r0, r3
 8005c6c:	f001 f8a8 	bl	8006dc0 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2110      	movs	r1, #16
 8005c74:	0018      	movs	r0, r3
 8005c76:	f001 f819 	bl	8006cac <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d04a      	beq.n	8005d1a <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	2bff      	cmp	r3, #255	@ 0xff
 8005c8c:	d910      	bls.n	8005cb0 <I2C_Mem_ISR_DMA+0xdc>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	22ff      	movs	r2, #255	@ 0xff
 8005c92:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c98:	b299      	uxth	r1, r3
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c9e:	b2da      	uxtb	r2, r3
 8005ca0:	2380      	movs	r3, #128	@ 0x80
 8005ca2:	045b      	lsls	r3, r3, #17
 8005ca4:	68f8      	ldr	r0, [r7, #12]
 8005ca6:	2400      	movs	r4, #0
 8005ca8:	9400      	str	r4, [sp, #0]
 8005caa:	f000 ffc5 	bl	8006c38 <I2C_TransferConfig>
 8005cae:	e011      	b.n	8005cd4 <I2C_Mem_ISR_DMA+0x100>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cb4:	b29a      	uxth	r2, r3
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cbe:	b299      	uxth	r1, r3
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cc4:	b2da      	uxtb	r2, r3
 8005cc6:	2380      	movs	r3, #128	@ 0x80
 8005cc8:	049b      	lsls	r3, r3, #18
 8005cca:	68f8      	ldr	r0, [r7, #12]
 8005ccc:	2400      	movs	r4, #0
 8005cce:	9400      	str	r4, [sp, #0]
 8005cd0:	f000 ffb2 	bl	8006c38 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cd8:	b29a      	uxth	r2, r3
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	b29a      	uxth	r2, r3
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2241      	movs	r2, #65	@ 0x41
 8005cea:	5c9b      	ldrb	r3, [r3, r2]
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	2b22      	cmp	r3, #34	@ 0x22
 8005cf0:	d109      	bne.n	8005d06 <I2C_Mem_ISR_DMA+0x132>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2180      	movs	r1, #128	@ 0x80
 8005cfe:	0209      	lsls	r1, r1, #8
 8005d00:	430a      	orrs	r2, r1
 8005d02:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005d04:	e084      	b.n	8005e10 <I2C_Mem_ISR_DMA+0x23c>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2180      	movs	r1, #128	@ 0x80
 8005d12:	01c9      	lsls	r1, r1, #7
 8005d14:	430a      	orrs	r2, r1
 8005d16:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005d18:	e07a      	b.n	8005e10 <I2C_Mem_ISR_DMA+0x23c>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2140      	movs	r1, #64	@ 0x40
 8005d1e:	0018      	movs	r0, r3
 8005d20:	f000 fd64 	bl	80067ec <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8005d24:	e074      	b.n	8005e10 <I2C_Mem_ISR_DMA+0x23c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	2240      	movs	r2, #64	@ 0x40
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	d062      	beq.n	8005df4 <I2C_Mem_ISR_DMA+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2240      	movs	r2, #64	@ 0x40
 8005d32:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005d34:	d05e      	beq.n	8005df4 <I2C_Mem_ISR_DMA+0x220>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2101      	movs	r1, #1
 8005d3a:	0018      	movs	r0, r3
 8005d3c:	f001 f840 	bl	8006dc0 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2110      	movs	r1, #16
 8005d44:	0018      	movs	r0, r3
 8005d46:	f000 ffb1 	bl	8006cac <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2241      	movs	r2, #65	@ 0x41
 8005d4e:	5c9b      	ldrb	r3, [r3, r2]
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	2b22      	cmp	r3, #34	@ 0x22
 8005d54:	d101      	bne.n	8005d5a <I2C_Mem_ISR_DMA+0x186>
    {
      direction = I2C_GENERATE_START_READ;
 8005d56:	4b34      	ldr	r3, [pc, #208]	@ (8005e28 <I2C_Mem_ISR_DMA+0x254>)
 8005d58:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	2bff      	cmp	r3, #255	@ 0xff
 8005d62:	d911      	bls.n	8005d88 <I2C_Mem_ISR_DMA+0x1b4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	22ff      	movs	r2, #255	@ 0xff
 8005d68:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d6e:	b299      	uxth	r1, r3
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d74:	b2da      	uxtb	r2, r3
 8005d76:	2380      	movs	r3, #128	@ 0x80
 8005d78:	045c      	lsls	r4, r3, #17
 8005d7a:	68f8      	ldr	r0, [r7, #12]
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	9300      	str	r3, [sp, #0]
 8005d80:	0023      	movs	r3, r4
 8005d82:	f000 ff59 	bl	8006c38 <I2C_TransferConfig>
 8005d86:	e012      	b.n	8005dae <I2C_Mem_ISR_DMA+0x1da>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d8c:	b29a      	uxth	r2, r3
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d96:	b299      	uxth	r1, r3
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d9c:	b2da      	uxtb	r2, r3
 8005d9e:	2380      	movs	r3, #128	@ 0x80
 8005da0:	049c      	lsls	r4, r3, #18
 8005da2:	68f8      	ldr	r0, [r7, #12]
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	9300      	str	r3, [sp, #0]
 8005da8:	0023      	movs	r3, r4
 8005daa:	f000 ff45 	bl	8006c38 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005db2:	b29a      	uxth	r2, r3
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005db8:	1ad3      	subs	r3, r2, r3
 8005dba:	b29a      	uxth	r2, r3
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2241      	movs	r2, #65	@ 0x41
 8005dc4:	5c9b      	ldrb	r3, [r3, r2]
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	2b22      	cmp	r3, #34	@ 0x22
 8005dca:	d109      	bne.n	8005de0 <I2C_Mem_ISR_DMA+0x20c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	2180      	movs	r1, #128	@ 0x80
 8005dd8:	0209      	lsls	r1, r1, #8
 8005dda:	430a      	orrs	r2, r1
 8005ddc:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005dde:	e017      	b.n	8005e10 <I2C_Mem_ISR_DMA+0x23c>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	2180      	movs	r1, #128	@ 0x80
 8005dec:	01c9      	lsls	r1, r1, #7
 8005dee:	430a      	orrs	r2, r1
 8005df0:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005df2:	e00d      	b.n	8005e10 <I2C_Mem_ISR_DMA+0x23c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	2220      	movs	r2, #32
 8005df8:	4013      	ands	r3, r2
 8005dfa:	d009      	beq.n	8005e10 <I2C_Mem_ISR_DMA+0x23c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2220      	movs	r2, #32
 8005e00:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005e02:	d005      	beq.n	8005e10 <I2C_Mem_ISR_DMA+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8005e04:	68ba      	ldr	r2, [r7, #8]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	0011      	movs	r1, r2
 8005e0a:	0018      	movs	r0, r3
 8005e0c:	f000 fa40 	bl	8006290 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2240      	movs	r2, #64	@ 0x40
 8005e14:	2100      	movs	r1, #0
 8005e16:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	0018      	movs	r0, r3
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	b007      	add	sp, #28
 8005e20:	bd90      	pop	{r4, r7, pc}
 8005e22:	46c0      	nop			@ (mov r8, r8)
 8005e24:	80002000 	.word	0x80002000
 8005e28:	80002400 	.word	0x80002400

08005e2c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b088      	sub	sp, #32
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	60f8      	str	r0, [r7, #12]
 8005e34:	60b9      	str	r1, [r7, #8]
 8005e36:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e3c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2240      	movs	r2, #64	@ 0x40
 8005e46:	5c9b      	ldrb	r3, [r3, r2]
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d101      	bne.n	8005e50 <I2C_Slave_ISR_DMA+0x24>
 8005e4c:	2302      	movs	r3, #2
 8005e4e:	e0ce      	b.n	8005fee <I2C_Slave_ISR_DMA+0x1c2>
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2240      	movs	r2, #64	@ 0x40
 8005e54:	2101      	movs	r1, #1
 8005e56:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	2220      	movs	r2, #32
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	d00a      	beq.n	8005e76 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2220      	movs	r2, #32
 8005e64:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005e66:	d006      	beq.n	8005e76 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8005e68:	68ba      	ldr	r2, [r7, #8]
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	0011      	movs	r1, r2
 8005e6e:	0018      	movs	r0, r3
 8005e70:	f000 fadc 	bl	800642c <I2C_ITSlaveCplt>
 8005e74:	e0b6      	b.n	8005fe4 <I2C_Slave_ISR_DMA+0x1b8>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	2210      	movs	r2, #16
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	d100      	bne.n	8005e80 <I2C_Slave_ISR_DMA+0x54>
 8005e7e:	e0a3      	b.n	8005fc8 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2210      	movs	r2, #16
 8005e84:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005e86:	d100      	bne.n	8005e8a <I2C_Slave_ISR_DMA+0x5e>
 8005e88:	e09e      	b.n	8005fc8 <I2C_Slave_ISR_DMA+0x19c>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	2380      	movs	r3, #128	@ 0x80
 8005e8e:	01db      	lsls	r3, r3, #7
 8005e90:	4013      	ands	r3, r2
 8005e92:	d105      	bne.n	8005ea0 <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	2380      	movs	r3, #128	@ 0x80
 8005e98:	021b      	lsls	r3, r3, #8
 8005e9a:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005e9c:	d100      	bne.n	8005ea0 <I2C_Slave_ISR_DMA+0x74>
 8005e9e:	e08c      	b.n	8005fba <I2C_Slave_ISR_DMA+0x18e>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d00c      	beq.n	8005ec2 <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	2380      	movs	r3, #128	@ 0x80
 8005eac:	021b      	lsls	r3, r3, #8
 8005eae:	4013      	ands	r3, r2
 8005eb0:	d007      	beq.n	8005ec2 <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d101      	bne.n	8005ec2 <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d00c      	beq.n	8005ee4 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	2380      	movs	r3, #128	@ 0x80
 8005ece:	01db      	lsls	r3, r3, #7
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	d007      	beq.n	8005ee4 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d101      	bne.n	8005ee4 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d12d      	bne.n	8005f46 <I2C_Slave_ISR_DMA+0x11a>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2241      	movs	r2, #65	@ 0x41
 8005eee:	5c9b      	ldrb	r3, [r3, r2]
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	2b28      	cmp	r3, #40	@ 0x28
 8005ef4:	d10b      	bne.n	8005f0e <I2C_Slave_ISR_DMA+0xe2>
 8005ef6:	69ba      	ldr	r2, [r7, #24]
 8005ef8:	2380      	movs	r3, #128	@ 0x80
 8005efa:	049b      	lsls	r3, r3, #18
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d106      	bne.n	8005f0e <I2C_Slave_ISR_DMA+0xe2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8005f00:	68ba      	ldr	r2, [r7, #8]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	0011      	movs	r1, r2
 8005f06:	0018      	movs	r0, r3
 8005f08:	f000 fc18 	bl	800673c <I2C_ITListenCplt>
 8005f0c:	e054      	b.n	8005fb8 <I2C_Slave_ISR_DMA+0x18c>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2241      	movs	r2, #65	@ 0x41
 8005f12:	5c9b      	ldrb	r3, [r3, r2]
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	2b29      	cmp	r3, #41	@ 0x29
 8005f18:	d110      	bne.n	8005f3c <I2C_Slave_ISR_DMA+0x110>
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	4a36      	ldr	r2, [pc, #216]	@ (8005ff8 <I2C_Slave_ISR_DMA+0x1cc>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d00c      	beq.n	8005f3c <I2C_Slave_ISR_DMA+0x110>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	2210      	movs	r2, #16
 8005f28:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	0018      	movs	r0, r3
 8005f2e:	f000 fd88 	bl	8006a42 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	0018      	movs	r0, r3
 8005f36:	f000 f947 	bl	80061c8 <I2C_ITSlaveSeqCplt>
 8005f3a:	e03d      	b.n	8005fb8 <I2C_Slave_ISR_DMA+0x18c>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2210      	movs	r2, #16
 8005f42:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8005f44:	e03e      	b.n	8005fc4 <I2C_Slave_ISR_DMA+0x198>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	2210      	movs	r2, #16
 8005f4c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f52:	2204      	movs	r2, #4
 8005f54:	431a      	orrs	r2, r3
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8005f5a:	2317      	movs	r3, #23
 8005f5c:	18fb      	adds	r3, r7, r3
 8005f5e:	68fa      	ldr	r2, [r7, #12]
 8005f60:	2141      	movs	r1, #65	@ 0x41
 8005f62:	5c52      	ldrb	r2, [r2, r1]
 8005f64:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005f66:	69bb      	ldr	r3, [r7, #24]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d004      	beq.n	8005f76 <I2C_Slave_ISR_DMA+0x14a>
 8005f6c:	69ba      	ldr	r2, [r7, #24]
 8005f6e:	2380      	movs	r3, #128	@ 0x80
 8005f70:	045b      	lsls	r3, r3, #17
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d126      	bne.n	8005fc4 <I2C_Slave_ISR_DMA+0x198>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005f76:	2217      	movs	r2, #23
 8005f78:	18bb      	adds	r3, r7, r2
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	2b21      	cmp	r3, #33	@ 0x21
 8005f7e:	d003      	beq.n	8005f88 <I2C_Slave_ISR_DMA+0x15c>
 8005f80:	18bb      	adds	r3, r7, r2
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	2b29      	cmp	r3, #41	@ 0x29
 8005f86:	d103      	bne.n	8005f90 <I2C_Slave_ISR_DMA+0x164>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2221      	movs	r2, #33	@ 0x21
 8005f8c:	631a      	str	r2, [r3, #48]	@ 0x30
 8005f8e:	e00b      	b.n	8005fa8 <I2C_Slave_ISR_DMA+0x17c>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005f90:	2217      	movs	r2, #23
 8005f92:	18bb      	adds	r3, r7, r2
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	2b22      	cmp	r3, #34	@ 0x22
 8005f98:	d003      	beq.n	8005fa2 <I2C_Slave_ISR_DMA+0x176>
 8005f9a:	18bb      	adds	r3, r7, r2
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005fa0:	d102      	bne.n	8005fa8 <I2C_Slave_ISR_DMA+0x17c>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2222      	movs	r2, #34	@ 0x22
 8005fa6:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	0011      	movs	r1, r2
 8005fb0:	0018      	movs	r0, r3
 8005fb2:	f000 fc1b 	bl	80067ec <I2C_ITError>
      if (treatdmanack == 1U)
 8005fb6:	e005      	b.n	8005fc4 <I2C_Slave_ISR_DMA+0x198>
 8005fb8:	e004      	b.n	8005fc4 <I2C_Slave_ISR_DMA+0x198>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	2210      	movs	r2, #16
 8005fc0:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005fc2:	e00f      	b.n	8005fe4 <I2C_Slave_ISR_DMA+0x1b8>
      if (treatdmanack == 1U)
 8005fc4:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005fc6:	e00d      	b.n	8005fe4 <I2C_Slave_ISR_DMA+0x1b8>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	2208      	movs	r2, #8
 8005fcc:	4013      	ands	r3, r2
 8005fce:	d009      	beq.n	8005fe4 <I2C_Slave_ISR_DMA+0x1b8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2208      	movs	r2, #8
 8005fd4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005fd6:	d005      	beq.n	8005fe4 <I2C_Slave_ISR_DMA+0x1b8>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8005fd8:	68ba      	ldr	r2, [r7, #8]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	0011      	movs	r1, r2
 8005fde:	0018      	movs	r0, r3
 8005fe0:	f000 f80c 	bl	8005ffc <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2240      	movs	r2, #64	@ 0x40
 8005fe8:	2100      	movs	r1, #0
 8005fea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005fec:	2300      	movs	r3, #0
}
 8005fee:	0018      	movs	r0, r3
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	b008      	add	sp, #32
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	46c0      	nop			@ (mov r8, r8)
 8005ff8:	ffff0000 	.word	0xffff0000

08005ffc <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005ffc:	b5b0      	push	{r4, r5, r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2241      	movs	r2, #65	@ 0x41
 800600a:	5c9b      	ldrb	r3, [r3, r2]
 800600c:	b2db      	uxtb	r3, r3
 800600e:	001a      	movs	r2, r3
 8006010:	2328      	movs	r3, #40	@ 0x28
 8006012:	4013      	ands	r3, r2
 8006014:	2b28      	cmp	r3, #40	@ 0x28
 8006016:	d000      	beq.n	800601a <I2C_ITAddrCplt+0x1e>
 8006018:	e088      	b.n	800612c <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	699b      	ldr	r3, [r3, #24]
 8006020:	0c1b      	lsrs	r3, r3, #16
 8006022:	b2da      	uxtb	r2, r3
 8006024:	250f      	movs	r5, #15
 8006026:	197b      	adds	r3, r7, r5
 8006028:	2101      	movs	r1, #1
 800602a:	400a      	ands	r2, r1
 800602c:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	699b      	ldr	r3, [r3, #24]
 8006034:	0c1b      	lsrs	r3, r3, #16
 8006036:	b29a      	uxth	r2, r3
 8006038:	200c      	movs	r0, #12
 800603a:	183b      	adds	r3, r7, r0
 800603c:	21fe      	movs	r1, #254	@ 0xfe
 800603e:	400a      	ands	r2, r1
 8006040:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	b29a      	uxth	r2, r3
 800604a:	240a      	movs	r4, #10
 800604c:	193b      	adds	r3, r7, r4
 800604e:	0592      	lsls	r2, r2, #22
 8006050:	0d92      	lsrs	r2, r2, #22
 8006052:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	68db      	ldr	r3, [r3, #12]
 800605a:	b29a      	uxth	r2, r3
 800605c:	2308      	movs	r3, #8
 800605e:	18fb      	adds	r3, r7, r3
 8006060:	21fe      	movs	r1, #254	@ 0xfe
 8006062:	400a      	ands	r2, r1
 8006064:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	2b02      	cmp	r3, #2
 800606c:	d148      	bne.n	8006100 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800606e:	0021      	movs	r1, r4
 8006070:	187b      	adds	r3, r7, r1
 8006072:	881b      	ldrh	r3, [r3, #0]
 8006074:	09db      	lsrs	r3, r3, #7
 8006076:	b29a      	uxth	r2, r3
 8006078:	183b      	adds	r3, r7, r0
 800607a:	881b      	ldrh	r3, [r3, #0]
 800607c:	4053      	eors	r3, r2
 800607e:	b29b      	uxth	r3, r3
 8006080:	001a      	movs	r2, r3
 8006082:	2306      	movs	r3, #6
 8006084:	4013      	ands	r3, r2
 8006086:	d120      	bne.n	80060ca <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8006088:	183b      	adds	r3, r7, r0
 800608a:	187a      	adds	r2, r7, r1
 800608c:	8812      	ldrh	r2, [r2, #0]
 800608e:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006094:	1c5a      	adds	r2, r3, #1
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800609e:	2b02      	cmp	r3, #2
 80060a0:	d14c      	bne.n	800613c <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2208      	movs	r2, #8
 80060ae:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2240      	movs	r2, #64	@ 0x40
 80060b4:	2100      	movs	r1, #0
 80060b6:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80060b8:	183b      	adds	r3, r7, r0
 80060ba:	881a      	ldrh	r2, [r3, #0]
 80060bc:	197b      	adds	r3, r7, r5
 80060be:	7819      	ldrb	r1, [r3, #0]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	0018      	movs	r0, r3
 80060c4:	f7ff fa35 	bl	8005532 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80060c8:	e038      	b.n	800613c <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 80060ca:	240c      	movs	r4, #12
 80060cc:	193b      	adds	r3, r7, r4
 80060ce:	2208      	movs	r2, #8
 80060d0:	18ba      	adds	r2, r7, r2
 80060d2:	8812      	ldrh	r2, [r2, #0]
 80060d4:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80060d6:	2380      	movs	r3, #128	@ 0x80
 80060d8:	021a      	lsls	r2, r3, #8
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	0011      	movs	r1, r2
 80060de:	0018      	movs	r0, r3
 80060e0:	f000 fe6e 	bl	8006dc0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2240      	movs	r2, #64	@ 0x40
 80060e8:	2100      	movs	r1, #0
 80060ea:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80060ec:	193b      	adds	r3, r7, r4
 80060ee:	881a      	ldrh	r2, [r3, #0]
 80060f0:	230f      	movs	r3, #15
 80060f2:	18fb      	adds	r3, r7, r3
 80060f4:	7819      	ldrb	r1, [r3, #0]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	0018      	movs	r0, r3
 80060fa:	f7ff fa1a 	bl	8005532 <HAL_I2C_AddrCallback>
}
 80060fe:	e01d      	b.n	800613c <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006100:	2380      	movs	r3, #128	@ 0x80
 8006102:	021a      	lsls	r2, r3, #8
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	0011      	movs	r1, r2
 8006108:	0018      	movs	r0, r3
 800610a:	f000 fe59 	bl	8006dc0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2240      	movs	r2, #64	@ 0x40
 8006112:	2100      	movs	r1, #0
 8006114:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006116:	230c      	movs	r3, #12
 8006118:	18fb      	adds	r3, r7, r3
 800611a:	881a      	ldrh	r2, [r3, #0]
 800611c:	230f      	movs	r3, #15
 800611e:	18fb      	adds	r3, r7, r3
 8006120:	7819      	ldrb	r1, [r3, #0]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	0018      	movs	r0, r3
 8006126:	f7ff fa04 	bl	8005532 <HAL_I2C_AddrCallback>
}
 800612a:	e007      	b.n	800613c <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	2208      	movs	r2, #8
 8006132:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2240      	movs	r2, #64	@ 0x40
 8006138:	2100      	movs	r1, #0
 800613a:	5499      	strb	r1, [r3, r2]
}
 800613c:	46c0      	nop			@ (mov r8, r8)
 800613e:	46bd      	mov	sp, r7
 8006140:	b004      	add	sp, #16
 8006142:	bdb0      	pop	{r4, r5, r7, pc}

08006144 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b082      	sub	sp, #8
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2242      	movs	r2, #66	@ 0x42
 8006150:	2100      	movs	r1, #0
 8006152:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2241      	movs	r2, #65	@ 0x41
 8006158:	5c9b      	ldrb	r3, [r3, r2]
 800615a:	b2db      	uxtb	r3, r3
 800615c:	2b21      	cmp	r3, #33	@ 0x21
 800615e:	d117      	bne.n	8006190 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2241      	movs	r2, #65	@ 0x41
 8006164:	2120      	movs	r1, #32
 8006166:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2211      	movs	r2, #17
 800616c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2101      	movs	r1, #1
 8006178:	0018      	movs	r0, r3
 800617a:	f000 fe21 	bl	8006dc0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2240      	movs	r2, #64	@ 0x40
 8006182:	2100      	movs	r1, #0
 8006184:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	0018      	movs	r0, r3
 800618a:	f7fa f94f 	bl	800042c <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800618e:	e016      	b.n	80061be <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2241      	movs	r2, #65	@ 0x41
 8006194:	2120      	movs	r1, #32
 8006196:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2212      	movs	r2, #18
 800619c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2102      	movs	r1, #2
 80061a8:	0018      	movs	r0, r3
 80061aa:	f000 fe09 	bl	8006dc0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2240      	movs	r2, #64	@ 0x40
 80061b2:	2100      	movs	r1, #0
 80061b4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	0018      	movs	r0, r3
 80061ba:	f7fa f945 	bl	8000448 <HAL_I2C_MasterRxCpltCallback>
}
 80061be:	46c0      	nop			@ (mov r8, r8)
 80061c0:	46bd      	mov	sp, r7
 80061c2:	b002      	add	sp, #8
 80061c4:	bd80      	pop	{r7, pc}
	...

080061c8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b084      	sub	sp, #16
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2242      	movs	r2, #66	@ 0x42
 80061dc:	2100      	movs	r1, #0
 80061de:	5499      	strb	r1, [r3, r2]

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80061e0:	68fa      	ldr	r2, [r7, #12]
 80061e2:	2380      	movs	r3, #128	@ 0x80
 80061e4:	01db      	lsls	r3, r3, #7
 80061e6:	4013      	ands	r3, r2
 80061e8:	d008      	beq.n	80061fc <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	681a      	ldr	r2, [r3, #0]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4924      	ldr	r1, [pc, #144]	@ (8006288 <I2C_ITSlaveSeqCplt+0xc0>)
 80061f6:	400a      	ands	r2, r1
 80061f8:	601a      	str	r2, [r3, #0]
 80061fa:	e00c      	b.n	8006216 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	2380      	movs	r3, #128	@ 0x80
 8006200:	021b      	lsls	r3, r3, #8
 8006202:	4013      	ands	r3, r2
 8006204:	d007      	beq.n	8006216 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	491e      	ldr	r1, [pc, #120]	@ (800628c <I2C_ITSlaveSeqCplt+0xc4>)
 8006212:	400a      	ands	r2, r1
 8006214:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2241      	movs	r2, #65	@ 0x41
 800621a:	5c9b      	ldrb	r3, [r3, r2]
 800621c:	b2db      	uxtb	r3, r3
 800621e:	2b29      	cmp	r3, #41	@ 0x29
 8006220:	d114      	bne.n	800624c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2241      	movs	r2, #65	@ 0x41
 8006226:	2128      	movs	r1, #40	@ 0x28
 8006228:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2221      	movs	r2, #33	@ 0x21
 800622e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2101      	movs	r1, #1
 8006234:	0018      	movs	r0, r3
 8006236:	f000 fdc3 	bl	8006dc0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2240      	movs	r2, #64	@ 0x40
 800623e:	2100      	movs	r1, #0
 8006240:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	0018      	movs	r0, r3
 8006246:	f7ff f964 	bl	8005512 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800624a:	e019      	b.n	8006280 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2241      	movs	r2, #65	@ 0x41
 8006250:	5c9b      	ldrb	r3, [r3, r2]
 8006252:	b2db      	uxtb	r3, r3
 8006254:	2b2a      	cmp	r3, #42	@ 0x2a
 8006256:	d113      	bne.n	8006280 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2241      	movs	r2, #65	@ 0x41
 800625c:	2128      	movs	r1, #40	@ 0x28
 800625e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2222      	movs	r2, #34	@ 0x22
 8006264:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2102      	movs	r1, #2
 800626a:	0018      	movs	r0, r3
 800626c:	f000 fda8 	bl	8006dc0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2240      	movs	r2, #64	@ 0x40
 8006274:	2100      	movs	r1, #0
 8006276:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	0018      	movs	r0, r3
 800627c:	f7ff f951 	bl	8005522 <HAL_I2C_SlaveRxCpltCallback>
}
 8006280:	46c0      	nop			@ (mov r8, r8)
 8006282:	46bd      	mov	sp, r7
 8006284:	b004      	add	sp, #16
 8006286:	bd80      	pop	{r7, pc}
 8006288:	ffffbfff 	.word	0xffffbfff
 800628c:	ffff7fff 	.word	0xffff7fff

08006290 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b086      	sub	sp, #24
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	2220      	movs	r2, #32
 80062a4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2241      	movs	r2, #65	@ 0x41
 80062aa:	5c9b      	ldrb	r3, [r3, r2]
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	2b21      	cmp	r3, #33	@ 0x21
 80062b0:	d108      	bne.n	80062c4 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2101      	movs	r1, #1
 80062b6:	0018      	movs	r0, r3
 80062b8:	f000 fd82 	bl	8006dc0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2211      	movs	r2, #17
 80062c0:	631a      	str	r2, [r3, #48]	@ 0x30
 80062c2:	e00d      	b.n	80062e0 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2241      	movs	r2, #65	@ 0x41
 80062c8:	5c9b      	ldrb	r3, [r3, r2]
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	2b22      	cmp	r3, #34	@ 0x22
 80062ce:	d107      	bne.n	80062e0 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2102      	movs	r1, #2
 80062d4:	0018      	movs	r0, r3
 80062d6:	f000 fd73 	bl	8006dc0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2212      	movs	r2, #18
 80062de:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	685a      	ldr	r2, [r3, #4]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	494e      	ldr	r1, [pc, #312]	@ (8006424 <I2C_ITMasterCplt+0x194>)
 80062ec:	400a      	ands	r2, r1
 80062ee:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a4b      	ldr	r2, [pc, #300]	@ (8006428 <I2C_ITMasterCplt+0x198>)
 80062fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	2210      	movs	r2, #16
 8006300:	4013      	ands	r3, r2
 8006302:	d009      	beq.n	8006318 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	2210      	movs	r2, #16
 800630a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006310:	2204      	movs	r2, #4
 8006312:	431a      	orrs	r2, r3
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2241      	movs	r2, #65	@ 0x41
 800631c:	5c9b      	ldrb	r3, [r3, r2]
 800631e:	b2db      	uxtb	r3, r3
 8006320:	2b60      	cmp	r3, #96	@ 0x60
 8006322:	d109      	bne.n	8006338 <I2C_ITMasterCplt+0xa8>
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	2204      	movs	r2, #4
 8006328:	4013      	ands	r3, r2
 800632a:	d005      	beq.n	8006338 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006332:	b2db      	uxtb	r3, r3
 8006334:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8006336:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	0018      	movs	r0, r3
 800633c:	f000 fb81 	bl	8006a42 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006344:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2241      	movs	r2, #65	@ 0x41
 800634a:	5c9b      	ldrb	r3, [r3, r2]
 800634c:	b2db      	uxtb	r3, r3
 800634e:	2b60      	cmp	r3, #96	@ 0x60
 8006350:	d002      	beq.n	8006358 <I2C_ITMasterCplt+0xc8>
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d007      	beq.n	8006368 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	0011      	movs	r1, r2
 8006360:	0018      	movs	r0, r3
 8006362:	f000 fa43 	bl	80067ec <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006366:	e058      	b.n	800641a <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2241      	movs	r2, #65	@ 0x41
 800636c:	5c9b      	ldrb	r3, [r3, r2]
 800636e:	b2db      	uxtb	r3, r3
 8006370:	2b21      	cmp	r3, #33	@ 0x21
 8006372:	d126      	bne.n	80063c2 <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2241      	movs	r2, #65	@ 0x41
 8006378:	2120      	movs	r1, #32
 800637a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2242      	movs	r2, #66	@ 0x42
 8006386:	5c9b      	ldrb	r3, [r3, r2]
 8006388:	b2db      	uxtb	r3, r3
 800638a:	2b40      	cmp	r3, #64	@ 0x40
 800638c:	d10c      	bne.n	80063a8 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2242      	movs	r2, #66	@ 0x42
 8006392:	2100      	movs	r1, #0
 8006394:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2240      	movs	r2, #64	@ 0x40
 800639a:	2100      	movs	r1, #0
 800639c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	0018      	movs	r0, r3
 80063a2:	f7fa f827 	bl	80003f4 <HAL_I2C_MemTxCpltCallback>
}
 80063a6:	e038      	b.n	800641a <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2242      	movs	r2, #66	@ 0x42
 80063ac:	2100      	movs	r1, #0
 80063ae:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2240      	movs	r2, #64	@ 0x40
 80063b4:	2100      	movs	r1, #0
 80063b6:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	0018      	movs	r0, r3
 80063bc:	f7fa f836 	bl	800042c <HAL_I2C_MasterTxCpltCallback>
}
 80063c0:	e02b      	b.n	800641a <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2241      	movs	r2, #65	@ 0x41
 80063c6:	5c9b      	ldrb	r3, [r3, r2]
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	2b22      	cmp	r3, #34	@ 0x22
 80063cc:	d125      	bne.n	800641a <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2241      	movs	r2, #65	@ 0x41
 80063d2:	2120      	movs	r1, #32
 80063d4:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2242      	movs	r2, #66	@ 0x42
 80063e0:	5c9b      	ldrb	r3, [r3, r2]
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	2b40      	cmp	r3, #64	@ 0x40
 80063e6:	d10c      	bne.n	8006402 <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2242      	movs	r2, #66	@ 0x42
 80063ec:	2100      	movs	r1, #0
 80063ee:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2240      	movs	r2, #64	@ 0x40
 80063f4:	2100      	movs	r1, #0
 80063f6:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	0018      	movs	r0, r3
 80063fc:	f7fa f808 	bl	8000410 <HAL_I2C_MemRxCpltCallback>
}
 8006400:	e00b      	b.n	800641a <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2242      	movs	r2, #66	@ 0x42
 8006406:	2100      	movs	r1, #0
 8006408:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2240      	movs	r2, #64	@ 0x40
 800640e:	2100      	movs	r1, #0
 8006410:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	0018      	movs	r0, r3
 8006416:	f7fa f817 	bl	8000448 <HAL_I2C_MasterRxCpltCallback>
}
 800641a:	46c0      	nop			@ (mov r8, r8)
 800641c:	46bd      	mov	sp, r7
 800641e:	b006      	add	sp, #24
 8006420:	bd80      	pop	{r7, pc}
 8006422:	46c0      	nop			@ (mov r8, r8)
 8006424:	fe00e800 	.word	0xfe00e800
 8006428:	ffff0000 	.word	0xffff0000

0800642c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b086      	sub	sp, #24
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006446:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006448:	200b      	movs	r0, #11
 800644a:	183b      	adds	r3, r7, r0
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	2141      	movs	r1, #65	@ 0x41
 8006450:	5c52      	ldrb	r2, [r2, r1]
 8006452:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	2220      	movs	r2, #32
 800645a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800645c:	183b      	adds	r3, r7, r0
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	2b21      	cmp	r3, #33	@ 0x21
 8006462:	d003      	beq.n	800646c <I2C_ITSlaveCplt+0x40>
 8006464:	183b      	adds	r3, r7, r0
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	2b29      	cmp	r3, #41	@ 0x29
 800646a:	d109      	bne.n	8006480 <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800646c:	4aac      	ldr	r2, [pc, #688]	@ (8006720 <I2C_ITSlaveCplt+0x2f4>)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	0011      	movs	r1, r2
 8006472:	0018      	movs	r0, r3
 8006474:	f000 fca4 	bl	8006dc0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2221      	movs	r2, #33	@ 0x21
 800647c:	631a      	str	r2, [r3, #48]	@ 0x30
 800647e:	e020      	b.n	80064c2 <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006480:	220b      	movs	r2, #11
 8006482:	18bb      	adds	r3, r7, r2
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	2b22      	cmp	r3, #34	@ 0x22
 8006488:	d003      	beq.n	8006492 <I2C_ITSlaveCplt+0x66>
 800648a:	18bb      	adds	r3, r7, r2
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006490:	d109      	bne.n	80064a6 <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006492:	4aa4      	ldr	r2, [pc, #656]	@ (8006724 <I2C_ITSlaveCplt+0x2f8>)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	0011      	movs	r1, r2
 8006498:	0018      	movs	r0, r3
 800649a:	f000 fc91 	bl	8006dc0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2222      	movs	r2, #34	@ 0x22
 80064a2:	631a      	str	r2, [r3, #48]	@ 0x30
 80064a4:	e00d      	b.n	80064c2 <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80064a6:	230b      	movs	r3, #11
 80064a8:	18fb      	adds	r3, r7, r3
 80064aa:	781b      	ldrb	r3, [r3, #0]
 80064ac:	2b28      	cmp	r3, #40	@ 0x28
 80064ae:	d108      	bne.n	80064c2 <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80064b0:	4a9d      	ldr	r2, [pc, #628]	@ (8006728 <I2C_ITSlaveCplt+0x2fc>)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	0011      	movs	r1, r2
 80064b6:	0018      	movs	r0, r3
 80064b8:	f000 fc82 	bl	8006dc0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	685a      	ldr	r2, [r3, #4]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	2180      	movs	r1, #128	@ 0x80
 80064ce:	0209      	lsls	r1, r1, #8
 80064d0:	430a      	orrs	r2, r1
 80064d2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	685a      	ldr	r2, [r3, #4]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4993      	ldr	r1, [pc, #588]	@ (800672c <I2C_ITSlaveCplt+0x300>)
 80064e0:	400a      	ands	r2, r1
 80064e2:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	0018      	movs	r0, r3
 80064e8:	f000 faab 	bl	8006a42 <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80064ec:	693a      	ldr	r2, [r7, #16]
 80064ee:	2380      	movs	r3, #128	@ 0x80
 80064f0:	01db      	lsls	r3, r3, #7
 80064f2:	4013      	ands	r3, r2
 80064f4:	d013      	beq.n	800651e <I2C_ITSlaveCplt+0xf2>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	498b      	ldr	r1, [pc, #556]	@ (8006730 <I2C_ITSlaveCplt+0x304>)
 8006502:	400a      	ands	r2, r1
 8006504:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800650a:	2b00      	cmp	r3, #0
 800650c:	d01f      	beq.n	800654e <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	b29a      	uxth	r2, r3
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800651c:	e017      	b.n	800654e <I2C_ITSlaveCplt+0x122>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800651e:	693a      	ldr	r2, [r7, #16]
 8006520:	2380      	movs	r3, #128	@ 0x80
 8006522:	021b      	lsls	r3, r3, #8
 8006524:	4013      	ands	r3, r2
 8006526:	d012      	beq.n	800654e <I2C_ITSlaveCplt+0x122>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4980      	ldr	r1, [pc, #512]	@ (8006734 <I2C_ITSlaveCplt+0x308>)
 8006534:	400a      	ands	r2, r1
 8006536:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800653c:	2b00      	cmp	r3, #0
 800653e:	d006      	beq.n	800654e <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	b29a      	uxth	r2, r3
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	2204      	movs	r2, #4
 8006552:	4013      	ands	r3, r2
 8006554:	d020      	beq.n	8006598 <I2C_ITSlaveCplt+0x16c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	2204      	movs	r2, #4
 800655a:	4393      	bics	r3, r2
 800655c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006568:	b2d2      	uxtb	r2, r2
 800656a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006570:	1c5a      	adds	r2, r3, #1
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800657a:	2b00      	cmp	r3, #0
 800657c:	d00c      	beq.n	8006598 <I2C_ITSlaveCplt+0x16c>
    {
      hi2c->XferSize--;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006582:	3b01      	subs	r3, #1
 8006584:	b29a      	uxth	r2, r3
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800658e:	b29b      	uxth	r3, r3
 8006590:	3b01      	subs	r3, #1
 8006592:	b29a      	uxth	r2, r3
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800659c:	b29b      	uxth	r3, r3
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d005      	beq.n	80065ae <I2C_ITSlaveCplt+0x182>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065a6:	2204      	movs	r2, #4
 80065a8:	431a      	orrs	r2, r3
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	2210      	movs	r2, #16
 80065b2:	4013      	ands	r3, r2
 80065b4:	d04f      	beq.n	8006656 <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	2210      	movs	r2, #16
 80065ba:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80065bc:	d04b      	beq.n	8006656 <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d12d      	bne.n	8006624 <I2C_ITSlaveCplt+0x1f8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2241      	movs	r2, #65	@ 0x41
 80065cc:	5c9b      	ldrb	r3, [r3, r2]
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	2b28      	cmp	r3, #40	@ 0x28
 80065d2:	d10b      	bne.n	80065ec <I2C_ITSlaveCplt+0x1c0>
 80065d4:	68fa      	ldr	r2, [r7, #12]
 80065d6:	2380      	movs	r3, #128	@ 0x80
 80065d8:	049b      	lsls	r3, r3, #18
 80065da:	429a      	cmp	r2, r3
 80065dc:	d106      	bne.n	80065ec <I2C_ITSlaveCplt+0x1c0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80065de:	697a      	ldr	r2, [r7, #20]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	0011      	movs	r1, r2
 80065e4:	0018      	movs	r0, r3
 80065e6:	f000 f8a9 	bl	800673c <I2C_ITListenCplt>
 80065ea:	e034      	b.n	8006656 <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2241      	movs	r2, #65	@ 0x41
 80065f0:	5c9b      	ldrb	r3, [r3, r2]
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	2b29      	cmp	r3, #41	@ 0x29
 80065f6:	d110      	bne.n	800661a <I2C_ITSlaveCplt+0x1ee>
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	4a4f      	ldr	r2, [pc, #316]	@ (8006738 <I2C_ITSlaveCplt+0x30c>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d00c      	beq.n	800661a <I2C_ITSlaveCplt+0x1ee>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	2210      	movs	r2, #16
 8006606:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	0018      	movs	r0, r3
 800660c:	f000 fa19 	bl	8006a42 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	0018      	movs	r0, r3
 8006614:	f7ff fdd8 	bl	80061c8 <I2C_ITSlaveSeqCplt>
 8006618:	e01d      	b.n	8006656 <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	2210      	movs	r2, #16
 8006620:	61da      	str	r2, [r3, #28]
 8006622:	e018      	b.n	8006656 <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	2210      	movs	r2, #16
 800662a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006630:	2204      	movs	r2, #4
 8006632:	431a      	orrs	r2, r3
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d004      	beq.n	8006648 <I2C_ITSlaveCplt+0x21c>
 800663e:	68fa      	ldr	r2, [r7, #12]
 8006640:	2380      	movs	r3, #128	@ 0x80
 8006642:	045b      	lsls	r3, r3, #17
 8006644:	429a      	cmp	r2, r3
 8006646:	d106      	bne.n	8006656 <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	0011      	movs	r1, r2
 8006650:	0018      	movs	r0, r3
 8006652:	f000 f8cb 	bl	80067ec <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2242      	movs	r2, #66	@ 0x42
 800665a:	2100      	movs	r1, #0
 800665c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006668:	2b00      	cmp	r3, #0
 800666a:	d013      	beq.n	8006694 <I2C_ITSlaveCplt+0x268>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	0011      	movs	r1, r2
 8006674:	0018      	movs	r0, r3
 8006676:	f000 f8b9 	bl	80067ec <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2241      	movs	r2, #65	@ 0x41
 800667e:	5c9b      	ldrb	r3, [r3, r2]
 8006680:	b2db      	uxtb	r3, r3
 8006682:	2b28      	cmp	r3, #40	@ 0x28
 8006684:	d147      	bne.n	8006716 <I2C_ITSlaveCplt+0x2ea>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006686:	697a      	ldr	r2, [r7, #20]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	0011      	movs	r1, r2
 800668c:	0018      	movs	r0, r3
 800668e:	f000 f855 	bl	800673c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006692:	e040      	b.n	8006716 <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006698:	4a27      	ldr	r2, [pc, #156]	@ (8006738 <I2C_ITSlaveCplt+0x30c>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d016      	beq.n	80066cc <I2C_ITSlaveCplt+0x2a0>
    I2C_ITSlaveSeqCplt(hi2c);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	0018      	movs	r0, r3
 80066a2:	f7ff fd91 	bl	80061c8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	4a23      	ldr	r2, [pc, #140]	@ (8006738 <I2C_ITSlaveCplt+0x30c>)
 80066aa:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2241      	movs	r2, #65	@ 0x41
 80066b0:	2120      	movs	r1, #32
 80066b2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2240      	movs	r2, #64	@ 0x40
 80066be:	2100      	movs	r1, #0
 80066c0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	0018      	movs	r0, r3
 80066c6:	f7fe ff44 	bl	8005552 <HAL_I2C_ListenCpltCallback>
}
 80066ca:	e024      	b.n	8006716 <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2241      	movs	r2, #65	@ 0x41
 80066d0:	5c9b      	ldrb	r3, [r3, r2]
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	2b22      	cmp	r3, #34	@ 0x22
 80066d6:	d10f      	bne.n	80066f8 <I2C_ITSlaveCplt+0x2cc>
    hi2c->State = HAL_I2C_STATE_READY;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2241      	movs	r2, #65	@ 0x41
 80066dc:	2120      	movs	r1, #32
 80066de:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2240      	movs	r2, #64	@ 0x40
 80066ea:	2100      	movs	r1, #0
 80066ec:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	0018      	movs	r0, r3
 80066f2:	f7fe ff16 	bl	8005522 <HAL_I2C_SlaveRxCpltCallback>
}
 80066f6:	e00e      	b.n	8006716 <I2C_ITSlaveCplt+0x2ea>
    hi2c->State = HAL_I2C_STATE_READY;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2241      	movs	r2, #65	@ 0x41
 80066fc:	2120      	movs	r1, #32
 80066fe:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2240      	movs	r2, #64	@ 0x40
 800670a:	2100      	movs	r1, #0
 800670c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	0018      	movs	r0, r3
 8006712:	f7fe fefe 	bl	8005512 <HAL_I2C_SlaveTxCpltCallback>
}
 8006716:	46c0      	nop			@ (mov r8, r8)
 8006718:	46bd      	mov	sp, r7
 800671a:	b006      	add	sp, #24
 800671c:	bd80      	pop	{r7, pc}
 800671e:	46c0      	nop			@ (mov r8, r8)
 8006720:	00008001 	.word	0x00008001
 8006724:	00008002 	.word	0x00008002
 8006728:	00008003 	.word	0x00008003
 800672c:	fe00e800 	.word	0xfe00e800
 8006730:	ffffbfff 	.word	0xffffbfff
 8006734:	ffff7fff 	.word	0xffff7fff
 8006738:	ffff0000 	.word	0xffff0000

0800673c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	4a26      	ldr	r2, [pc, #152]	@ (80067e4 <I2C_ITListenCplt+0xa8>)
 800674a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2241      	movs	r2, #65	@ 0x41
 8006756:	2120      	movs	r1, #32
 8006758:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2242      	movs	r2, #66	@ 0x42
 800675e:	2100      	movs	r1, #0
 8006760:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2200      	movs	r2, #0
 8006766:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	2204      	movs	r2, #4
 800676c:	4013      	ands	r3, r2
 800676e:	d022      	beq.n	80067b6 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800677a:	b2d2      	uxtb	r2, r2
 800677c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006782:	1c5a      	adds	r2, r3, #1
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800678c:	2b00      	cmp	r3, #0
 800678e:	d012      	beq.n	80067b6 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006794:	3b01      	subs	r3, #1
 8006796:	b29a      	uxth	r2, r3
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	3b01      	subs	r3, #1
 80067a4:	b29a      	uxth	r2, r3
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067ae:	2204      	movs	r2, #4
 80067b0:	431a      	orrs	r2, r3
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80067b6:	4a0c      	ldr	r2, [pc, #48]	@ (80067e8 <I2C_ITListenCplt+0xac>)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	0011      	movs	r1, r2
 80067bc:	0018      	movs	r0, r3
 80067be:	f000 faff 	bl	8006dc0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2210      	movs	r2, #16
 80067c8:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2240      	movs	r2, #64	@ 0x40
 80067ce:	2100      	movs	r1, #0
 80067d0:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	0018      	movs	r0, r3
 80067d6:	f7fe febc 	bl	8005552 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80067da:	46c0      	nop			@ (mov r8, r8)
 80067dc:	46bd      	mov	sp, r7
 80067de:	b002      	add	sp, #8
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	46c0      	nop			@ (mov r8, r8)
 80067e4:	ffff0000 	.word	0xffff0000
 80067e8:	00008003 	.word	0x00008003

080067ec <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b084      	sub	sp, #16
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80067f6:	200f      	movs	r0, #15
 80067f8:	183b      	adds	r3, r7, r0
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	2141      	movs	r1, #65	@ 0x41
 80067fe:	5c52      	ldrb	r2, [r2, r1]
 8006800:	701a      	strb	r2, [r3, #0]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2242      	movs	r2, #66	@ 0x42
 8006806:	2100      	movs	r1, #0
 8006808:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4a72      	ldr	r2, [pc, #456]	@ (80069d8 <I2C_ITError+0x1ec>)
 800680e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	431a      	orrs	r2, r3
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006822:	183b      	adds	r3, r7, r0
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	2b28      	cmp	r3, #40	@ 0x28
 8006828:	d007      	beq.n	800683a <I2C_ITError+0x4e>
 800682a:	183b      	adds	r3, r7, r0
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	2b29      	cmp	r3, #41	@ 0x29
 8006830:	d003      	beq.n	800683a <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8006832:	183b      	adds	r3, r7, r0
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	2b2a      	cmp	r3, #42	@ 0x2a
 8006838:	d10c      	bne.n	8006854 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2103      	movs	r1, #3
 800683e:	0018      	movs	r0, r3
 8006840:	f000 fabe 	bl	8006dc0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2241      	movs	r2, #65	@ 0x41
 8006848:	2128      	movs	r1, #40	@ 0x28
 800684a:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	4a63      	ldr	r2, [pc, #396]	@ (80069dc <I2C_ITError+0x1f0>)
 8006850:	635a      	str	r2, [r3, #52]	@ 0x34
 8006852:	e032      	b.n	80068ba <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006854:	4a62      	ldr	r2, [pc, #392]	@ (80069e0 <I2C_ITError+0x1f4>)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	0011      	movs	r1, r2
 800685a:	0018      	movs	r0, r3
 800685c:	f000 fab0 	bl	8006dc0 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	0018      	movs	r0, r3
 8006864:	f000 f8ed 	bl	8006a42 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2241      	movs	r2, #65	@ 0x41
 800686c:	5c9b      	ldrb	r3, [r3, r2]
 800686e:	b2db      	uxtb	r3, r3
 8006870:	2b60      	cmp	r3, #96	@ 0x60
 8006872:	d01f      	beq.n	80068b4 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2241      	movs	r2, #65	@ 0x41
 8006878:	2120      	movs	r1, #32
 800687a:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	699b      	ldr	r3, [r3, #24]
 8006882:	2220      	movs	r2, #32
 8006884:	4013      	ands	r3, r2
 8006886:	2b20      	cmp	r3, #32
 8006888:	d114      	bne.n	80068b4 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	699b      	ldr	r3, [r3, #24]
 8006890:	2210      	movs	r2, #16
 8006892:	4013      	ands	r3, r2
 8006894:	2b10      	cmp	r3, #16
 8006896:	d109      	bne.n	80068ac <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	2210      	movs	r2, #16
 800689e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068a4:	2204      	movs	r2, #4
 80068a6:	431a      	orrs	r2, r3
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2220      	movs	r2, #32
 80068b2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068be:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d03b      	beq.n	8006940 <I2C_ITError+0x154>
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	2b11      	cmp	r3, #17
 80068cc:	d002      	beq.n	80068d4 <I2C_ITError+0xe8>
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	2b21      	cmp	r3, #33	@ 0x21
 80068d2:	d135      	bne.n	8006940 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	2380      	movs	r3, #128	@ 0x80
 80068dc:	01db      	lsls	r3, r3, #7
 80068de:	401a      	ands	r2, r3
 80068e0:	2380      	movs	r3, #128	@ 0x80
 80068e2:	01db      	lsls	r3, r3, #7
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d107      	bne.n	80068f8 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	493c      	ldr	r1, [pc, #240]	@ (80069e4 <I2C_ITError+0x1f8>)
 80068f4:	400a      	ands	r2, r1
 80068f6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068fc:	0018      	movs	r0, r3
 80068fe:	f7fd fe31 	bl	8004564 <HAL_DMA_GetState>
 8006902:	0003      	movs	r3, r0
 8006904:	2b01      	cmp	r3, #1
 8006906:	d016      	beq.n	8006936 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800690c:	4a36      	ldr	r2, [pc, #216]	@ (80069e8 <I2C_ITError+0x1fc>)
 800690e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2240      	movs	r2, #64	@ 0x40
 8006914:	2100      	movs	r1, #0
 8006916:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800691c:	0018      	movs	r0, r3
 800691e:	f7fd fcf5 	bl	800430c <HAL_DMA_Abort_IT>
 8006922:	1e03      	subs	r3, r0, #0
 8006924:	d051      	beq.n	80069ca <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800692a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006930:	0018      	movs	r0, r3
 8006932:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006934:	e049      	b.n	80069ca <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	0018      	movs	r0, r3
 800693a:	f000 f859 	bl	80069f0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800693e:	e044      	b.n	80069ca <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006944:	2b00      	cmp	r3, #0
 8006946:	d03b      	beq.n	80069c0 <I2C_ITError+0x1d4>
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	2b12      	cmp	r3, #18
 800694c:	d002      	beq.n	8006954 <I2C_ITError+0x168>
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	2b22      	cmp	r3, #34	@ 0x22
 8006952:	d135      	bne.n	80069c0 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	2380      	movs	r3, #128	@ 0x80
 800695c:	021b      	lsls	r3, r3, #8
 800695e:	401a      	ands	r2, r3
 8006960:	2380      	movs	r3, #128	@ 0x80
 8006962:	021b      	lsls	r3, r3, #8
 8006964:	429a      	cmp	r2, r3
 8006966:	d107      	bne.n	8006978 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	491e      	ldr	r1, [pc, #120]	@ (80069ec <I2C_ITError+0x200>)
 8006974:	400a      	ands	r2, r1
 8006976:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800697c:	0018      	movs	r0, r3
 800697e:	f7fd fdf1 	bl	8004564 <HAL_DMA_GetState>
 8006982:	0003      	movs	r3, r0
 8006984:	2b01      	cmp	r3, #1
 8006986:	d016      	beq.n	80069b6 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800698c:	4a16      	ldr	r2, [pc, #88]	@ (80069e8 <I2C_ITError+0x1fc>)
 800698e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2240      	movs	r2, #64	@ 0x40
 8006994:	2100      	movs	r1, #0
 8006996:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800699c:	0018      	movs	r0, r3
 800699e:	f7fd fcb5 	bl	800430c <HAL_DMA_Abort_IT>
 80069a2:	1e03      	subs	r3, r0, #0
 80069a4:	d013      	beq.n	80069ce <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069b0:	0018      	movs	r0, r3
 80069b2:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80069b4:	e00b      	b.n	80069ce <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	0018      	movs	r0, r3
 80069ba:	f000 f819 	bl	80069f0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80069be:	e006      	b.n	80069ce <I2C_ITError+0x1e2>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	0018      	movs	r0, r3
 80069c4:	f000 f814 	bl	80069f0 <I2C_TreatErrorCallback>
  }
}
 80069c8:	e002      	b.n	80069d0 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80069ca:	46c0      	nop			@ (mov r8, r8)
 80069cc:	e000      	b.n	80069d0 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80069ce:	46c0      	nop			@ (mov r8, r8)
}
 80069d0:	46c0      	nop			@ (mov r8, r8)
 80069d2:	46bd      	mov	sp, r7
 80069d4:	b004      	add	sp, #16
 80069d6:	bd80      	pop	{r7, pc}
 80069d8:	ffff0000 	.word	0xffff0000
 80069dc:	080057dd 	.word	0x080057dd
 80069e0:	00008003 	.word	0x00008003
 80069e4:	ffffbfff 	.word	0xffffbfff
 80069e8:	08006bfb 	.word	0x08006bfb
 80069ec:	ffff7fff 	.word	0xffff7fff

080069f0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b082      	sub	sp, #8
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2241      	movs	r2, #65	@ 0x41
 80069fc:	5c9b      	ldrb	r3, [r3, r2]
 80069fe:	b2db      	uxtb	r3, r3
 8006a00:	2b60      	cmp	r3, #96	@ 0x60
 8006a02:	d10f      	bne.n	8006a24 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2241      	movs	r2, #65	@ 0x41
 8006a08:	2120      	movs	r1, #32
 8006a0a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2240      	movs	r2, #64	@ 0x40
 8006a16:	2100      	movs	r1, #0
 8006a18:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	0018      	movs	r0, r3
 8006a1e:	f7fe fda0 	bl	8005562 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006a22:	e00a      	b.n	8006a3a <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2240      	movs	r2, #64	@ 0x40
 8006a2e:	2100      	movs	r1, #0
 8006a30:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	0018      	movs	r0, r3
 8006a36:	f7f9 fd15 	bl	8000464 <HAL_I2C_ErrorCallback>
}
 8006a3a:	46c0      	nop			@ (mov r8, r8)
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	b002      	add	sp, #8
 8006a40:	bd80      	pop	{r7, pc}

08006a42 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006a42:	b580      	push	{r7, lr}
 8006a44:	b082      	sub	sp, #8
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	699b      	ldr	r3, [r3, #24]
 8006a50:	2202      	movs	r2, #2
 8006a52:	4013      	ands	r3, r2
 8006a54:	2b02      	cmp	r3, #2
 8006a56:	d103      	bne.n	8006a60 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	699b      	ldr	r3, [r3, #24]
 8006a66:	2201      	movs	r2, #1
 8006a68:	4013      	ands	r3, r2
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d007      	beq.n	8006a7e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	699a      	ldr	r2, [r3, #24]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	2101      	movs	r1, #1
 8006a7a:	430a      	orrs	r2, r1
 8006a7c:	619a      	str	r2, [r3, #24]
  }
}
 8006a7e:	46c0      	nop			@ (mov r8, r8)
 8006a80:	46bd      	mov	sp, r7
 8006a82:	b002      	add	sp, #8
 8006a84:	bd80      	pop	{r7, pc}
	...

08006a88 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a94:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4920      	ldr	r1, [pc, #128]	@ (8006b24 <I2C_DMAMasterTransmitCplt+0x9c>)
 8006aa2:	400a      	ands	r2, r1
 8006aa4:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d105      	bne.n	8006abc <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2120      	movs	r1, #32
 8006ab4:	0018      	movs	r0, r3
 8006ab6:	f000 f8f9 	bl	8006cac <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8006aba:	e02e      	b.n	8006b1a <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ac0:	68fa      	ldr	r2, [r7, #12]
 8006ac2:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8006ac4:	189a      	adds	r2, r3, r2
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	2bff      	cmp	r3, #255	@ 0xff
 8006ad2:	d903      	bls.n	8006adc <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	22ff      	movs	r2, #255	@ 0xff
 8006ad8:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006ada:	e004      	b.n	8006ae6 <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ae0:	b29a      	uxth	r2, r3
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aee:	0019      	movs	r1, r3
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	3328      	adds	r3, #40	@ 0x28
 8006af6:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8006afc:	f7fd fb1c 	bl	8004138 <HAL_DMA_Start_IT>
 8006b00:	1e03      	subs	r3, r0, #0
 8006b02:	d005      	beq.n	8006b10 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2110      	movs	r1, #16
 8006b08:	0018      	movs	r0, r3
 8006b0a:	f7ff fe6f 	bl	80067ec <I2C_ITError>
}
 8006b0e:	e004      	b.n	8006b1a <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2140      	movs	r1, #64	@ 0x40
 8006b14:	0018      	movs	r0, r3
 8006b16:	f000 f8c9 	bl	8006cac <I2C_Enable_IRQ>
}
 8006b1a:	46c0      	nop			@ (mov r8, r8)
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	b004      	add	sp, #16
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	46c0      	nop			@ (mov r8, r8)
 8006b24:	ffffbfff 	.word	0xffffbfff

08006b28 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b34:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4920      	ldr	r1, [pc, #128]	@ (8006bc4 <I2C_DMAMasterReceiveCplt+0x9c>)
 8006b42:	400a      	ands	r2, r1
 8006b44:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d105      	bne.n	8006b5c <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2120      	movs	r1, #32
 8006b54:	0018      	movs	r0, r3
 8006b56:	f000 f8a9 	bl	8006cac <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8006b5a:	e02e      	b.n	8006bba <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8006b64:	189a      	adds	r2, r3, r2
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	2bff      	cmp	r3, #255	@ 0xff
 8006b72:	d903      	bls.n	8006b7c <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	22ff      	movs	r2, #255	@ 0xff
 8006b78:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006b7a:	e004      	b.n	8006b86 <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b80:	b29a      	uxth	r2, r3
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	3324      	adds	r3, #36	@ 0x24
 8006b90:	0019      	movs	r1, r3
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b96:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8006b9c:	f7fd facc 	bl	8004138 <HAL_DMA_Start_IT>
 8006ba0:	1e03      	subs	r3, r0, #0
 8006ba2:	d005      	beq.n	8006bb0 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2110      	movs	r1, #16
 8006ba8:	0018      	movs	r0, r3
 8006baa:	f7ff fe1f 	bl	80067ec <I2C_ITError>
}
 8006bae:	e004      	b.n	8006bba <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2140      	movs	r1, #64	@ 0x40
 8006bb4:	0018      	movs	r0, r3
 8006bb6:	f000 f879 	bl	8006cac <I2C_Enable_IRQ>
}
 8006bba:	46c0      	nop			@ (mov r8, r8)
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	b004      	add	sp, #16
 8006bc0:	bd80      	pop	{r7, pc}
 8006bc2:	46c0      	nop			@ (mov r8, r8)
 8006bc4:	ffff7fff 	.word	0xffff7fff

08006bc8 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bd4:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	685a      	ldr	r2, [r3, #4]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2180      	movs	r1, #128	@ 0x80
 8006be2:	0209      	lsls	r1, r1, #8
 8006be4:	430a      	orrs	r2, r1
 8006be6:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2110      	movs	r1, #16
 8006bec:	0018      	movs	r0, r3
 8006bee:	f7ff fdfd 	bl	80067ec <I2C_ITError>
}
 8006bf2:	46c0      	nop			@ (mov r8, r8)
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	b004      	add	sp, #16
 8006bf8:	bd80      	pop	{r7, pc}

08006bfa <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006bfa:	b580      	push	{r7, lr}
 8006bfc:	b084      	sub	sp, #16
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c06:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d003      	beq.n	8006c18 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c14:	2200      	movs	r2, #0
 8006c16:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d003      	beq.n	8006c28 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c24:	2200      	movs	r2, #0
 8006c26:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	0018      	movs	r0, r3
 8006c2c:	f7ff fee0 	bl	80069f0 <I2C_TreatErrorCallback>
}
 8006c30:	46c0      	nop			@ (mov r8, r8)
 8006c32:	46bd      	mov	sp, r7
 8006c34:	b004      	add	sp, #16
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006c38:	b590      	push	{r4, r7, lr}
 8006c3a:	b087      	sub	sp, #28
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	0008      	movs	r0, r1
 8006c42:	0011      	movs	r1, r2
 8006c44:	607b      	str	r3, [r7, #4]
 8006c46:	240a      	movs	r4, #10
 8006c48:	193b      	adds	r3, r7, r4
 8006c4a:	1c02      	adds	r2, r0, #0
 8006c4c:	801a      	strh	r2, [r3, #0]
 8006c4e:	2009      	movs	r0, #9
 8006c50:	183b      	adds	r3, r7, r0
 8006c52:	1c0a      	adds	r2, r1, #0
 8006c54:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006c56:	193b      	adds	r3, r7, r4
 8006c58:	881b      	ldrh	r3, [r3, #0]
 8006c5a:	059b      	lsls	r3, r3, #22
 8006c5c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006c5e:	183b      	adds	r3, r7, r0
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	0419      	lsls	r1, r3, #16
 8006c64:	23ff      	movs	r3, #255	@ 0xff
 8006c66:	041b      	lsls	r3, r3, #16
 8006c68:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006c6a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c72:	4313      	orrs	r3, r2
 8006c74:	005b      	lsls	r3, r3, #1
 8006c76:	085b      	lsrs	r3, r3, #1
 8006c78:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006c82:	0d51      	lsrs	r1, r2, #21
 8006c84:	2280      	movs	r2, #128	@ 0x80
 8006c86:	00d2      	lsls	r2, r2, #3
 8006c88:	400a      	ands	r2, r1
 8006c8a:	4907      	ldr	r1, [pc, #28]	@ (8006ca8 <I2C_TransferConfig+0x70>)
 8006c8c:	430a      	orrs	r2, r1
 8006c8e:	43d2      	mvns	r2, r2
 8006c90:	401a      	ands	r2, r3
 8006c92:	0011      	movs	r1, r2
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	697a      	ldr	r2, [r7, #20]
 8006c9a:	430a      	orrs	r2, r1
 8006c9c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006c9e:	46c0      	nop			@ (mov r8, r8)
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	b007      	add	sp, #28
 8006ca4:	bd90      	pop	{r4, r7, pc}
 8006ca6:	46c0      	nop			@ (mov r8, r8)
 8006ca8:	03ff63ff 	.word	0x03ff63ff

08006cac <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	000a      	movs	r2, r1
 8006cb6:	1cbb      	adds	r3, r7, #2
 8006cb8:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	60fb      	str	r3, [r7, #12]

#if defined(HAL_DMA_MODULE_ENABLED)
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006cc2:	4b3c      	ldr	r3, [pc, #240]	@ (8006db4 <I2C_Enable_IRQ+0x108>)
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d035      	beq.n	8006d34 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8006ccc:	4b3a      	ldr	r3, [pc, #232]	@ (8006db8 <I2C_Enable_IRQ+0x10c>)
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d030      	beq.n	8006d34 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8006cd6:	4b39      	ldr	r3, [pc, #228]	@ (8006dbc <I2C_Enable_IRQ+0x110>)
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d02b      	beq.n	8006d34 <I2C_Enable_IRQ+0x88>
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006cdc:	1cbb      	adds	r3, r7, #2
 8006cde:	2200      	movs	r2, #0
 8006ce0:	5e9b      	ldrsh	r3, [r3, r2]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	da03      	bge.n	8006cee <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	22b8      	movs	r2, #184	@ 0xb8
 8006cea:	4313      	orrs	r3, r2
 8006cec:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006cee:	1cbb      	adds	r3, r7, #2
 8006cf0:	881b      	ldrh	r3, [r3, #0]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	4013      	ands	r3, r2
 8006cf6:	d003      	beq.n	8006d00 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	22f2      	movs	r2, #242	@ 0xf2
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006d00:	1cbb      	adds	r3, r7, #2
 8006d02:	881b      	ldrh	r3, [r3, #0]
 8006d04:	2202      	movs	r2, #2
 8006d06:	4013      	ands	r3, r2
 8006d08:	d003      	beq.n	8006d12 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	22f4      	movs	r2, #244	@ 0xf4
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006d12:	1cbb      	adds	r3, r7, #2
 8006d14:	881b      	ldrh	r3, [r3, #0]
 8006d16:	2b10      	cmp	r3, #16
 8006d18:	d103      	bne.n	8006d22 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2290      	movs	r2, #144	@ 0x90
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006d22:	1cbb      	adds	r3, r7, #2
 8006d24:	881b      	ldrh	r3, [r3, #0]
 8006d26:	2b20      	cmp	r3, #32
 8006d28:	d137      	bne.n	8006d9a <I2C_Enable_IRQ+0xee>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2220      	movs	r2, #32
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006d32:	e032      	b.n	8006d9a <I2C_Enable_IRQ+0xee>
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006d34:	1cbb      	adds	r3, r7, #2
 8006d36:	2200      	movs	r2, #0
 8006d38:	5e9b      	ldrsh	r3, [r3, r2]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	da03      	bge.n	8006d46 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	22b8      	movs	r2, #184	@ 0xb8
 8006d42:	4313      	orrs	r3, r2
 8006d44:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006d46:	1cbb      	adds	r3, r7, #2
 8006d48:	881b      	ldrh	r3, [r3, #0]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	4013      	ands	r3, r2
 8006d4e:	d003      	beq.n	8006d58 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	22f2      	movs	r2, #242	@ 0xf2
 8006d54:	4313      	orrs	r3, r2
 8006d56:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006d58:	1cbb      	adds	r3, r7, #2
 8006d5a:	881b      	ldrh	r3, [r3, #0]
 8006d5c:	2202      	movs	r2, #2
 8006d5e:	4013      	ands	r3, r2
 8006d60:	d003      	beq.n	8006d6a <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	22f4      	movs	r2, #244	@ 0xf4
 8006d66:	4313      	orrs	r3, r2
 8006d68:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006d6a:	1cbb      	adds	r3, r7, #2
 8006d6c:	881b      	ldrh	r3, [r3, #0]
 8006d6e:	2b10      	cmp	r3, #16
 8006d70:	d103      	bne.n	8006d7a <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2290      	movs	r2, #144	@ 0x90
 8006d76:	4313      	orrs	r3, r2
 8006d78:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006d7a:	1cbb      	adds	r3, r7, #2
 8006d7c:	881b      	ldrh	r3, [r3, #0]
 8006d7e:	2b20      	cmp	r3, #32
 8006d80:	d103      	bne.n	8006d8a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2260      	movs	r2, #96	@ 0x60
 8006d86:	4313      	orrs	r3, r2
 8006d88:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006d8a:	1cbb      	adds	r3, r7, #2
 8006d8c:	881b      	ldrh	r3, [r3, #0]
 8006d8e:	2b40      	cmp	r3, #64	@ 0x40
 8006d90:	d103      	bne.n	8006d9a <I2C_Enable_IRQ+0xee>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2240      	movs	r2, #64	@ 0x40
 8006d96:	4313      	orrs	r3, r2
 8006d98:	60fb      	str	r3, [r7, #12]
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	6819      	ldr	r1, [r3, #0]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	68fa      	ldr	r2, [r7, #12]
 8006da6:	430a      	orrs	r2, r1
 8006da8:	601a      	str	r2, [r3, #0]
}
 8006daa:	46c0      	nop			@ (mov r8, r8)
 8006dac:	46bd      	mov	sp, r7
 8006dae:	b004      	add	sp, #16
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	46c0      	nop			@ (mov r8, r8)
 8006db4:	080059dd 	.word	0x080059dd
 8006db8:	08005e2d 	.word	0x08005e2d
 8006dbc:	08005bd5 	.word	0x08005bd5

08006dc0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b084      	sub	sp, #16
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	000a      	movs	r2, r1
 8006dca:	1cbb      	adds	r3, r7, #2
 8006dcc:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006dd2:	1cbb      	adds	r3, r7, #2
 8006dd4:	881b      	ldrh	r3, [r3, #0]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	4013      	ands	r3, r2
 8006dda:	d010      	beq.n	8006dfe <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2242      	movs	r2, #66	@ 0x42
 8006de0:	4313      	orrs	r3, r2
 8006de2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2241      	movs	r2, #65	@ 0x41
 8006de8:	5c9b      	ldrb	r3, [r3, r2]
 8006dea:	b2db      	uxtb	r3, r3
 8006dec:	001a      	movs	r2, r3
 8006dee:	2328      	movs	r3, #40	@ 0x28
 8006df0:	4013      	ands	r3, r2
 8006df2:	2b28      	cmp	r3, #40	@ 0x28
 8006df4:	d003      	beq.n	8006dfe <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	22b0      	movs	r2, #176	@ 0xb0
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006dfe:	1cbb      	adds	r3, r7, #2
 8006e00:	881b      	ldrh	r3, [r3, #0]
 8006e02:	2202      	movs	r2, #2
 8006e04:	4013      	ands	r3, r2
 8006e06:	d010      	beq.n	8006e2a <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2244      	movs	r2, #68	@ 0x44
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2241      	movs	r2, #65	@ 0x41
 8006e14:	5c9b      	ldrb	r3, [r3, r2]
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	001a      	movs	r2, r3
 8006e1a:	2328      	movs	r3, #40	@ 0x28
 8006e1c:	4013      	ands	r3, r2
 8006e1e:	2b28      	cmp	r3, #40	@ 0x28
 8006e20:	d003      	beq.n	8006e2a <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	22b0      	movs	r2, #176	@ 0xb0
 8006e26:	4313      	orrs	r3, r2
 8006e28:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006e2a:	1cbb      	adds	r3, r7, #2
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	5e9b      	ldrsh	r3, [r3, r2]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	da03      	bge.n	8006e3c <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	22b8      	movs	r2, #184	@ 0xb8
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006e3c:	1cbb      	adds	r3, r7, #2
 8006e3e:	881b      	ldrh	r3, [r3, #0]
 8006e40:	2b10      	cmp	r3, #16
 8006e42:	d103      	bne.n	8006e4c <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2290      	movs	r2, #144	@ 0x90
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006e4c:	1cbb      	adds	r3, r7, #2
 8006e4e:	881b      	ldrh	r3, [r3, #0]
 8006e50:	2b20      	cmp	r3, #32
 8006e52:	d103      	bne.n	8006e5c <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2220      	movs	r2, #32
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006e5c:	1cbb      	adds	r3, r7, #2
 8006e5e:	881b      	ldrh	r3, [r3, #0]
 8006e60:	2b40      	cmp	r3, #64	@ 0x40
 8006e62:	d103      	bne.n	8006e6c <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2240      	movs	r2, #64	@ 0x40
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	43d9      	mvns	r1, r3
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	400a      	ands	r2, r1
 8006e7c:	601a      	str	r2, [r3, #0]
}
 8006e7e:	46c0      	nop			@ (mov r8, r8)
 8006e80:	46bd      	mov	sp, r7
 8006e82:	b004      	add	sp, #16
 8006e84:	bd80      	pop	{r7, pc}
	...

08006e88 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b082      	sub	sp, #8
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2241      	movs	r2, #65	@ 0x41
 8006e96:	5c9b      	ldrb	r3, [r3, r2]
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	2b20      	cmp	r3, #32
 8006e9c:	d138      	bne.n	8006f10 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2240      	movs	r2, #64	@ 0x40
 8006ea2:	5c9b      	ldrb	r3, [r3, r2]
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d101      	bne.n	8006eac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006ea8:	2302      	movs	r3, #2
 8006eaa:	e032      	b.n	8006f12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2240      	movs	r2, #64	@ 0x40
 8006eb0:	2101      	movs	r1, #1
 8006eb2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2241      	movs	r2, #65	@ 0x41
 8006eb8:	2124      	movs	r1, #36	@ 0x24
 8006eba:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	2101      	movs	r1, #1
 8006ec8:	438a      	bics	r2, r1
 8006eca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	681a      	ldr	r2, [r3, #0]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4911      	ldr	r1, [pc, #68]	@ (8006f1c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8006ed8:	400a      	ands	r2, r1
 8006eda:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	6819      	ldr	r1, [r3, #0]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	683a      	ldr	r2, [r7, #0]
 8006ee8:	430a      	orrs	r2, r1
 8006eea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	2101      	movs	r1, #1
 8006ef8:	430a      	orrs	r2, r1
 8006efa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2241      	movs	r2, #65	@ 0x41
 8006f00:	2120      	movs	r1, #32
 8006f02:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2240      	movs	r2, #64	@ 0x40
 8006f08:	2100      	movs	r1, #0
 8006f0a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	e000      	b.n	8006f12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006f10:	2302      	movs	r3, #2
  }
}
 8006f12:	0018      	movs	r0, r3
 8006f14:	46bd      	mov	sp, r7
 8006f16:	b002      	add	sp, #8
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	46c0      	nop			@ (mov r8, r8)
 8006f1c:	ffffefff 	.word	0xffffefff

08006f20 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b084      	sub	sp, #16
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2241      	movs	r2, #65	@ 0x41
 8006f2e:	5c9b      	ldrb	r3, [r3, r2]
 8006f30:	b2db      	uxtb	r3, r3
 8006f32:	2b20      	cmp	r3, #32
 8006f34:	d139      	bne.n	8006faa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2240      	movs	r2, #64	@ 0x40
 8006f3a:	5c9b      	ldrb	r3, [r3, r2]
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d101      	bne.n	8006f44 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006f40:	2302      	movs	r3, #2
 8006f42:	e033      	b.n	8006fac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2240      	movs	r2, #64	@ 0x40
 8006f48:	2101      	movs	r1, #1
 8006f4a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2241      	movs	r2, #65	@ 0x41
 8006f50:	2124      	movs	r1, #36	@ 0x24
 8006f52:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	2101      	movs	r1, #1
 8006f60:	438a      	bics	r2, r1
 8006f62:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	4a11      	ldr	r2, [pc, #68]	@ (8006fb4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8006f70:	4013      	ands	r3, r2
 8006f72:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	021b      	lsls	r3, r3, #8
 8006f78:	68fa      	ldr	r2, [r7, #12]
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	68fa      	ldr	r2, [r7, #12]
 8006f84:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	2101      	movs	r1, #1
 8006f92:	430a      	orrs	r2, r1
 8006f94:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2241      	movs	r2, #65	@ 0x41
 8006f9a:	2120      	movs	r1, #32
 8006f9c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2240      	movs	r2, #64	@ 0x40
 8006fa2:	2100      	movs	r1, #0
 8006fa4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	e000      	b.n	8006fac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006faa:	2302      	movs	r3, #2
  }
}
 8006fac:	0018      	movs	r0, r3
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	b004      	add	sp, #16
 8006fb2:	bd80      	pop	{r7, pc}
 8006fb4:	fffff0ff 	.word	0xfffff0ff

08006fb8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b086      	sub	sp, #24
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d101      	bne.n	8006fca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	e20f      	b.n	80073ea <HAL_RCC_OscConfig+0x432>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	4013      	ands	r3, r2
 8006fd2:	d100      	bne.n	8006fd6 <HAL_RCC_OscConfig+0x1e>
 8006fd4:	e069      	b.n	80070aa <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006fd6:	4bc8      	ldr	r3, [pc, #800]	@ (80072f8 <HAL_RCC_OscConfig+0x340>)
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	2238      	movs	r2, #56	@ 0x38
 8006fdc:	4013      	ands	r3, r2
 8006fde:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	2b08      	cmp	r3, #8
 8006fe4:	d105      	bne.n	8006ff2 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d15d      	bne.n	80070aa <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e1fb      	b.n	80073ea <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	685a      	ldr	r2, [r3, #4]
 8006ff6:	2380      	movs	r3, #128	@ 0x80
 8006ff8:	025b      	lsls	r3, r3, #9
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d107      	bne.n	800700e <HAL_RCC_OscConfig+0x56>
 8006ffe:	4bbe      	ldr	r3, [pc, #760]	@ (80072f8 <HAL_RCC_OscConfig+0x340>)
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	4bbd      	ldr	r3, [pc, #756]	@ (80072f8 <HAL_RCC_OscConfig+0x340>)
 8007004:	2180      	movs	r1, #128	@ 0x80
 8007006:	0249      	lsls	r1, r1, #9
 8007008:	430a      	orrs	r2, r1
 800700a:	601a      	str	r2, [r3, #0]
 800700c:	e020      	b.n	8007050 <HAL_RCC_OscConfig+0x98>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	685a      	ldr	r2, [r3, #4]
 8007012:	23a0      	movs	r3, #160	@ 0xa0
 8007014:	02db      	lsls	r3, r3, #11
 8007016:	429a      	cmp	r2, r3
 8007018:	d10e      	bne.n	8007038 <HAL_RCC_OscConfig+0x80>
 800701a:	4bb7      	ldr	r3, [pc, #732]	@ (80072f8 <HAL_RCC_OscConfig+0x340>)
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	4bb6      	ldr	r3, [pc, #728]	@ (80072f8 <HAL_RCC_OscConfig+0x340>)
 8007020:	2180      	movs	r1, #128	@ 0x80
 8007022:	02c9      	lsls	r1, r1, #11
 8007024:	430a      	orrs	r2, r1
 8007026:	601a      	str	r2, [r3, #0]
 8007028:	4bb3      	ldr	r3, [pc, #716]	@ (80072f8 <HAL_RCC_OscConfig+0x340>)
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	4bb2      	ldr	r3, [pc, #712]	@ (80072f8 <HAL_RCC_OscConfig+0x340>)
 800702e:	2180      	movs	r1, #128	@ 0x80
 8007030:	0249      	lsls	r1, r1, #9
 8007032:	430a      	orrs	r2, r1
 8007034:	601a      	str	r2, [r3, #0]
 8007036:	e00b      	b.n	8007050 <HAL_RCC_OscConfig+0x98>
 8007038:	4baf      	ldr	r3, [pc, #700]	@ (80072f8 <HAL_RCC_OscConfig+0x340>)
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	4bae      	ldr	r3, [pc, #696]	@ (80072f8 <HAL_RCC_OscConfig+0x340>)
 800703e:	49af      	ldr	r1, [pc, #700]	@ (80072fc <HAL_RCC_OscConfig+0x344>)
 8007040:	400a      	ands	r2, r1
 8007042:	601a      	str	r2, [r3, #0]
 8007044:	4bac      	ldr	r3, [pc, #688]	@ (80072f8 <HAL_RCC_OscConfig+0x340>)
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	4bab      	ldr	r3, [pc, #684]	@ (80072f8 <HAL_RCC_OscConfig+0x340>)
 800704a:	49ad      	ldr	r1, [pc, #692]	@ (8007300 <HAL_RCC_OscConfig+0x348>)
 800704c:	400a      	ands	r2, r1
 800704e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d014      	beq.n	8007082 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007058:	f7fc fe2e 	bl	8003cb8 <HAL_GetTick>
 800705c:	0003      	movs	r3, r0
 800705e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007060:	e008      	b.n	8007074 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8007062:	f7fc fe29 	bl	8003cb8 <HAL_GetTick>
 8007066:	0002      	movs	r2, r0
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	1ad3      	subs	r3, r2, r3
 800706c:	2b64      	cmp	r3, #100	@ 0x64
 800706e:	d901      	bls.n	8007074 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8007070:	2303      	movs	r3, #3
 8007072:	e1ba      	b.n	80073ea <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007074:	4ba0      	ldr	r3, [pc, #640]	@ (80072f8 <HAL_RCC_OscConfig+0x340>)
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	2380      	movs	r3, #128	@ 0x80
 800707a:	029b      	lsls	r3, r3, #10
 800707c:	4013      	ands	r3, r2
 800707e:	d0f0      	beq.n	8007062 <HAL_RCC_OscConfig+0xaa>
 8007080:	e013      	b.n	80070aa <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007082:	f7fc fe19 	bl	8003cb8 <HAL_GetTick>
 8007086:	0003      	movs	r3, r0
 8007088:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800708a:	e008      	b.n	800709e <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800708c:	f7fc fe14 	bl	8003cb8 <HAL_GetTick>
 8007090:	0002      	movs	r2, r0
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	1ad3      	subs	r3, r2, r3
 8007096:	2b64      	cmp	r3, #100	@ 0x64
 8007098:	d901      	bls.n	800709e <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 800709a:	2303      	movs	r3, #3
 800709c:	e1a5      	b.n	80073ea <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800709e:	4b96      	ldr	r3, [pc, #600]	@ (80072f8 <HAL_RCC_OscConfig+0x340>)
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	2380      	movs	r3, #128	@ 0x80
 80070a4:	029b      	lsls	r3, r3, #10
 80070a6:	4013      	ands	r3, r2
 80070a8:	d1f0      	bne.n	800708c <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	2202      	movs	r2, #2
 80070b0:	4013      	ands	r3, r2
 80070b2:	d100      	bne.n	80070b6 <HAL_RCC_OscConfig+0xfe>
 80070b4:	e086      	b.n	80071c4 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80070b6:	4b90      	ldr	r3, [pc, #576]	@ (80072f8 <HAL_RCC_OscConfig+0x340>)
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	2238      	movs	r2, #56	@ 0x38
 80070bc:	4013      	ands	r3, r2
 80070be:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d12f      	bne.n	8007126 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	68db      	ldr	r3, [r3, #12]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d101      	bne.n	80070d2 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	e18b      	b.n	80073ea <HAL_RCC_OscConfig+0x432>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070d2:	4b89      	ldr	r3, [pc, #548]	@ (80072f8 <HAL_RCC_OscConfig+0x340>)
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	4a8b      	ldr	r2, [pc, #556]	@ (8007304 <HAL_RCC_OscConfig+0x34c>)
 80070d8:	4013      	ands	r3, r2
 80070da:	0019      	movs	r1, r3
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	695b      	ldr	r3, [r3, #20]
 80070e0:	021a      	lsls	r2, r3, #8
 80070e2:	4b85      	ldr	r3, [pc, #532]	@ (80072f8 <HAL_RCC_OscConfig+0x340>)
 80070e4:	430a      	orrs	r2, r1
 80070e6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d112      	bne.n	8007114 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80070ee:	4b82      	ldr	r3, [pc, #520]	@ (80072f8 <HAL_RCC_OscConfig+0x340>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a85      	ldr	r2, [pc, #532]	@ (8007308 <HAL_RCC_OscConfig+0x350>)
 80070f4:	4013      	ands	r3, r2
 80070f6:	0019      	movs	r1, r3
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	691a      	ldr	r2, [r3, #16]
 80070fc:	4b7e      	ldr	r3, [pc, #504]	@ (80072f8 <HAL_RCC_OscConfig+0x340>)
 80070fe:	430a      	orrs	r2, r1
 8007100:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8007102:	4b7d      	ldr	r3, [pc, #500]	@ (80072f8 <HAL_RCC_OscConfig+0x340>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	0adb      	lsrs	r3, r3, #11
 8007108:	2207      	movs	r2, #7
 800710a:	4013      	ands	r3, r2
 800710c:	4a7f      	ldr	r2, [pc, #508]	@ (800730c <HAL_RCC_OscConfig+0x354>)
 800710e:	40da      	lsrs	r2, r3
 8007110:	4b7f      	ldr	r3, [pc, #508]	@ (8007310 <HAL_RCC_OscConfig+0x358>)
 8007112:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007114:	4b7f      	ldr	r3, [pc, #508]	@ (8007314 <HAL_RCC_OscConfig+0x35c>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	0018      	movs	r0, r3
 800711a:	f7fc fd71 	bl	8003c00 <HAL_InitTick>
 800711e:	1e03      	subs	r3, r0, #0
 8007120:	d050      	beq.n	80071c4 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	e161      	b.n	80073ea <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	68db      	ldr	r3, [r3, #12]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d030      	beq.n	8007190 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800712e:	4b72      	ldr	r3, [pc, #456]	@ (80072f8 <HAL_RCC_OscConfig+0x340>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a75      	ldr	r2, [pc, #468]	@ (8007308 <HAL_RCC_OscConfig+0x350>)
 8007134:	4013      	ands	r3, r2
 8007136:	0019      	movs	r1, r3
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	691a      	ldr	r2, [r3, #16]
 800713c:	4b6e      	ldr	r3, [pc, #440]	@ (80072f8 <HAL_RCC_OscConfig+0x340>)
 800713e:	430a      	orrs	r2, r1
 8007140:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8007142:	4b6d      	ldr	r3, [pc, #436]	@ (80072f8 <HAL_RCC_OscConfig+0x340>)
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	4b6c      	ldr	r3, [pc, #432]	@ (80072f8 <HAL_RCC_OscConfig+0x340>)
 8007148:	2180      	movs	r1, #128	@ 0x80
 800714a:	0049      	lsls	r1, r1, #1
 800714c:	430a      	orrs	r2, r1
 800714e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007150:	f7fc fdb2 	bl	8003cb8 <HAL_GetTick>
 8007154:	0003      	movs	r3, r0
 8007156:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007158:	e008      	b.n	800716c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800715a:	f7fc fdad 	bl	8003cb8 <HAL_GetTick>
 800715e:	0002      	movs	r2, r0
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	1ad3      	subs	r3, r2, r3
 8007164:	2b02      	cmp	r3, #2
 8007166:	d901      	bls.n	800716c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007168:	2303      	movs	r3, #3
 800716a:	e13e      	b.n	80073ea <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800716c:	4b62      	ldr	r3, [pc, #392]	@ (80072f8 <HAL_RCC_OscConfig+0x340>)
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	2380      	movs	r3, #128	@ 0x80
 8007172:	00db      	lsls	r3, r3, #3
 8007174:	4013      	ands	r3, r2
 8007176:	d0f0      	beq.n	800715a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007178:	4b5f      	ldr	r3, [pc, #380]	@ (80072f8 <HAL_RCC_OscConfig+0x340>)
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	4a61      	ldr	r2, [pc, #388]	@ (8007304 <HAL_RCC_OscConfig+0x34c>)
 800717e:	4013      	ands	r3, r2
 8007180:	0019      	movs	r1, r3
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	695b      	ldr	r3, [r3, #20]
 8007186:	021a      	lsls	r2, r3, #8
 8007188:	4b5b      	ldr	r3, [pc, #364]	@ (80072f8 <HAL_RCC_OscConfig+0x340>)
 800718a:	430a      	orrs	r2, r1
 800718c:	605a      	str	r2, [r3, #4]
 800718e:	e019      	b.n	80071c4 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8007190:	4b59      	ldr	r3, [pc, #356]	@ (80072f8 <HAL_RCC_OscConfig+0x340>)
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	4b58      	ldr	r3, [pc, #352]	@ (80072f8 <HAL_RCC_OscConfig+0x340>)
 8007196:	4960      	ldr	r1, [pc, #384]	@ (8007318 <HAL_RCC_OscConfig+0x360>)
 8007198:	400a      	ands	r2, r1
 800719a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800719c:	f7fc fd8c 	bl	8003cb8 <HAL_GetTick>
 80071a0:	0003      	movs	r3, r0
 80071a2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80071a4:	e008      	b.n	80071b8 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80071a6:	f7fc fd87 	bl	8003cb8 <HAL_GetTick>
 80071aa:	0002      	movs	r2, r0
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	1ad3      	subs	r3, r2, r3
 80071b0:	2b02      	cmp	r3, #2
 80071b2:	d901      	bls.n	80071b8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80071b4:	2303      	movs	r3, #3
 80071b6:	e118      	b.n	80073ea <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80071b8:	4b4f      	ldr	r3, [pc, #316]	@ (80072f8 <HAL_RCC_OscConfig+0x340>)
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	2380      	movs	r3, #128	@ 0x80
 80071be:	00db      	lsls	r3, r3, #3
 80071c0:	4013      	ands	r3, r2
 80071c2:	d1f0      	bne.n	80071a6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	2208      	movs	r2, #8
 80071ca:	4013      	ands	r3, r2
 80071cc:	d042      	beq.n	8007254 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80071ce:	4b4a      	ldr	r3, [pc, #296]	@ (80072f8 <HAL_RCC_OscConfig+0x340>)
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	2238      	movs	r2, #56	@ 0x38
 80071d4:	4013      	ands	r3, r2
 80071d6:	2b18      	cmp	r3, #24
 80071d8:	d105      	bne.n	80071e6 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	699b      	ldr	r3, [r3, #24]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d138      	bne.n	8007254 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80071e2:	2301      	movs	r3, #1
 80071e4:	e101      	b.n	80073ea <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	699b      	ldr	r3, [r3, #24]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d019      	beq.n	8007222 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80071ee:	4b42      	ldr	r3, [pc, #264]	@ (80072f8 <HAL_RCC_OscConfig+0x340>)
 80071f0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80071f2:	4b41      	ldr	r3, [pc, #260]	@ (80072f8 <HAL_RCC_OscConfig+0x340>)
 80071f4:	2101      	movs	r1, #1
 80071f6:	430a      	orrs	r2, r1
 80071f8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071fa:	f7fc fd5d 	bl	8003cb8 <HAL_GetTick>
 80071fe:	0003      	movs	r3, r0
 8007200:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8007202:	e008      	b.n	8007216 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8007204:	f7fc fd58 	bl	8003cb8 <HAL_GetTick>
 8007208:	0002      	movs	r2, r0
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	1ad3      	subs	r3, r2, r3
 800720e:	2b02      	cmp	r3, #2
 8007210:	d901      	bls.n	8007216 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8007212:	2303      	movs	r3, #3
 8007214:	e0e9      	b.n	80073ea <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8007216:	4b38      	ldr	r3, [pc, #224]	@ (80072f8 <HAL_RCC_OscConfig+0x340>)
 8007218:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800721a:	2202      	movs	r2, #2
 800721c:	4013      	ands	r3, r2
 800721e:	d0f1      	beq.n	8007204 <HAL_RCC_OscConfig+0x24c>
 8007220:	e018      	b.n	8007254 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8007222:	4b35      	ldr	r3, [pc, #212]	@ (80072f8 <HAL_RCC_OscConfig+0x340>)
 8007224:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007226:	4b34      	ldr	r3, [pc, #208]	@ (80072f8 <HAL_RCC_OscConfig+0x340>)
 8007228:	2101      	movs	r1, #1
 800722a:	438a      	bics	r2, r1
 800722c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800722e:	f7fc fd43 	bl	8003cb8 <HAL_GetTick>
 8007232:	0003      	movs	r3, r0
 8007234:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8007236:	e008      	b.n	800724a <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8007238:	f7fc fd3e 	bl	8003cb8 <HAL_GetTick>
 800723c:	0002      	movs	r2, r0
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	1ad3      	subs	r3, r2, r3
 8007242:	2b02      	cmp	r3, #2
 8007244:	d901      	bls.n	800724a <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8007246:	2303      	movs	r3, #3
 8007248:	e0cf      	b.n	80073ea <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800724a:	4b2b      	ldr	r3, [pc, #172]	@ (80072f8 <HAL_RCC_OscConfig+0x340>)
 800724c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800724e:	2202      	movs	r2, #2
 8007250:	4013      	ands	r3, r2
 8007252:	d1f1      	bne.n	8007238 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	2204      	movs	r2, #4
 800725a:	4013      	ands	r3, r2
 800725c:	d100      	bne.n	8007260 <HAL_RCC_OscConfig+0x2a8>
 800725e:	e084      	b.n	800736a <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007260:	230f      	movs	r3, #15
 8007262:	18fb      	adds	r3, r7, r3
 8007264:	2200      	movs	r2, #0
 8007266:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8007268:	4b23      	ldr	r3, [pc, #140]	@ (80072f8 <HAL_RCC_OscConfig+0x340>)
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	2238      	movs	r2, #56	@ 0x38
 800726e:	4013      	ands	r3, r2
 8007270:	2b20      	cmp	r3, #32
 8007272:	d106      	bne.n	8007282 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d000      	beq.n	800727e <HAL_RCC_OscConfig+0x2c6>
 800727c:	e075      	b.n	800736a <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 800727e:	2301      	movs	r3, #1
 8007280:	e0b3      	b.n	80073ea <HAL_RCC_OscConfig+0x432>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	689b      	ldr	r3, [r3, #8]
 8007286:	2b01      	cmp	r3, #1
 8007288:	d106      	bne.n	8007298 <HAL_RCC_OscConfig+0x2e0>
 800728a:	4b1b      	ldr	r3, [pc, #108]	@ (80072f8 <HAL_RCC_OscConfig+0x340>)
 800728c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800728e:	4b1a      	ldr	r3, [pc, #104]	@ (80072f8 <HAL_RCC_OscConfig+0x340>)
 8007290:	2101      	movs	r1, #1
 8007292:	430a      	orrs	r2, r1
 8007294:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007296:	e01c      	b.n	80072d2 <HAL_RCC_OscConfig+0x31a>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	2b05      	cmp	r3, #5
 800729e:	d10c      	bne.n	80072ba <HAL_RCC_OscConfig+0x302>
 80072a0:	4b15      	ldr	r3, [pc, #84]	@ (80072f8 <HAL_RCC_OscConfig+0x340>)
 80072a2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80072a4:	4b14      	ldr	r3, [pc, #80]	@ (80072f8 <HAL_RCC_OscConfig+0x340>)
 80072a6:	2104      	movs	r1, #4
 80072a8:	430a      	orrs	r2, r1
 80072aa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80072ac:	4b12      	ldr	r3, [pc, #72]	@ (80072f8 <HAL_RCC_OscConfig+0x340>)
 80072ae:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80072b0:	4b11      	ldr	r3, [pc, #68]	@ (80072f8 <HAL_RCC_OscConfig+0x340>)
 80072b2:	2101      	movs	r1, #1
 80072b4:	430a      	orrs	r2, r1
 80072b6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80072b8:	e00b      	b.n	80072d2 <HAL_RCC_OscConfig+0x31a>
 80072ba:	4b0f      	ldr	r3, [pc, #60]	@ (80072f8 <HAL_RCC_OscConfig+0x340>)
 80072bc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80072be:	4b0e      	ldr	r3, [pc, #56]	@ (80072f8 <HAL_RCC_OscConfig+0x340>)
 80072c0:	2101      	movs	r1, #1
 80072c2:	438a      	bics	r2, r1
 80072c4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80072c6:	4b0c      	ldr	r3, [pc, #48]	@ (80072f8 <HAL_RCC_OscConfig+0x340>)
 80072c8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80072ca:	4b0b      	ldr	r3, [pc, #44]	@ (80072f8 <HAL_RCC_OscConfig+0x340>)
 80072cc:	2104      	movs	r1, #4
 80072ce:	438a      	bics	r2, r1
 80072d0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d028      	beq.n	800732c <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072da:	f7fc fced 	bl	8003cb8 <HAL_GetTick>
 80072de:	0003      	movs	r3, r0
 80072e0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80072e2:	e01d      	b.n	8007320 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072e4:	f7fc fce8 	bl	8003cb8 <HAL_GetTick>
 80072e8:	0002      	movs	r2, r0
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	1ad3      	subs	r3, r2, r3
 80072ee:	4a0b      	ldr	r2, [pc, #44]	@ (800731c <HAL_RCC_OscConfig+0x364>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d915      	bls.n	8007320 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 80072f4:	2303      	movs	r3, #3
 80072f6:	e078      	b.n	80073ea <HAL_RCC_OscConfig+0x432>
 80072f8:	40021000 	.word	0x40021000
 80072fc:	fffeffff 	.word	0xfffeffff
 8007300:	fffbffff 	.word	0xfffbffff
 8007304:	ffff80ff 	.word	0xffff80ff
 8007308:	ffffc7ff 	.word	0xffffc7ff
 800730c:	02dc6c00 	.word	0x02dc6c00
 8007310:	200000b4 	.word	0x200000b4
 8007314:	200000b8 	.word	0x200000b8
 8007318:	fffffeff 	.word	0xfffffeff
 800731c:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8007320:	4b34      	ldr	r3, [pc, #208]	@ (80073f4 <HAL_RCC_OscConfig+0x43c>)
 8007322:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007324:	2202      	movs	r2, #2
 8007326:	4013      	ands	r3, r2
 8007328:	d0dc      	beq.n	80072e4 <HAL_RCC_OscConfig+0x32c>
 800732a:	e013      	b.n	8007354 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800732c:	f7fc fcc4 	bl	8003cb8 <HAL_GetTick>
 8007330:	0003      	movs	r3, r0
 8007332:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8007334:	e009      	b.n	800734a <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007336:	f7fc fcbf 	bl	8003cb8 <HAL_GetTick>
 800733a:	0002      	movs	r2, r0
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	1ad3      	subs	r3, r2, r3
 8007340:	4a2d      	ldr	r2, [pc, #180]	@ (80073f8 <HAL_RCC_OscConfig+0x440>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d901      	bls.n	800734a <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8007346:	2303      	movs	r3, #3
 8007348:	e04f      	b.n	80073ea <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800734a:	4b2a      	ldr	r3, [pc, #168]	@ (80073f4 <HAL_RCC_OscConfig+0x43c>)
 800734c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800734e:	2202      	movs	r2, #2
 8007350:	4013      	ands	r3, r2
 8007352:	d1f0      	bne.n	8007336 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8007354:	230f      	movs	r3, #15
 8007356:	18fb      	adds	r3, r7, r3
 8007358:	781b      	ldrb	r3, [r3, #0]
 800735a:	2b01      	cmp	r3, #1
 800735c:	d105      	bne.n	800736a <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800735e:	4b25      	ldr	r3, [pc, #148]	@ (80073f4 <HAL_RCC_OscConfig+0x43c>)
 8007360:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007362:	4b24      	ldr	r3, [pc, #144]	@ (80073f4 <HAL_RCC_OscConfig+0x43c>)
 8007364:	4925      	ldr	r1, [pc, #148]	@ (80073fc <HAL_RCC_OscConfig+0x444>)
 8007366:	400a      	ands	r2, r1
 8007368:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_CR_HSIUSB48ON)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	2210      	movs	r2, #16
 8007370:	4013      	ands	r3, r2
 8007372:	d039      	beq.n	80073e8 <HAL_RCC_OscConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	69db      	ldr	r3, [r3, #28]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d01b      	beq.n	80073b4 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800737c:	4b1d      	ldr	r3, [pc, #116]	@ (80073f4 <HAL_RCC_OscConfig+0x43c>)
 800737e:	681a      	ldr	r2, [r3, #0]
 8007380:	4b1c      	ldr	r3, [pc, #112]	@ (80073f4 <HAL_RCC_OscConfig+0x43c>)
 8007382:	2180      	movs	r1, #128	@ 0x80
 8007384:	03c9      	lsls	r1, r1, #15
 8007386:	430a      	orrs	r2, r1
 8007388:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800738a:	f7fc fc95 	bl	8003cb8 <HAL_GetTick>
 800738e:	0003      	movs	r3, r0
 8007390:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 8007392:	e008      	b.n	80073a6 <HAL_RCC_OscConfig+0x3ee>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007394:	f7fc fc90 	bl	8003cb8 <HAL_GetTick>
 8007398:	0002      	movs	r2, r0
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	1ad3      	subs	r3, r2, r3
 800739e:	2b02      	cmp	r3, #2
 80073a0:	d901      	bls.n	80073a6 <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 80073a2:	2303      	movs	r3, #3
 80073a4:	e021      	b.n	80073ea <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 80073a6:	4b13      	ldr	r3, [pc, #76]	@ (80073f4 <HAL_RCC_OscConfig+0x43c>)
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	2380      	movs	r3, #128	@ 0x80
 80073ac:	041b      	lsls	r3, r3, #16
 80073ae:	4013      	ands	r3, r2
 80073b0:	d0f0      	beq.n	8007394 <HAL_RCC_OscConfig+0x3dc>
 80073b2:	e019      	b.n	80073e8 <HAL_RCC_OscConfig+0x430>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80073b4:	4b0f      	ldr	r3, [pc, #60]	@ (80073f4 <HAL_RCC_OscConfig+0x43c>)
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	4b0e      	ldr	r3, [pc, #56]	@ (80073f4 <HAL_RCC_OscConfig+0x43c>)
 80073ba:	4911      	ldr	r1, [pc, #68]	@ (8007400 <HAL_RCC_OscConfig+0x448>)
 80073bc:	400a      	ands	r2, r1
 80073be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073c0:	f7fc fc7a 	bl	8003cb8 <HAL_GetTick>
 80073c4:	0003      	movs	r3, r0
 80073c6:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 80073c8:	e008      	b.n	80073dc <HAL_RCC_OscConfig+0x424>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80073ca:	f7fc fc75 	bl	8003cb8 <HAL_GetTick>
 80073ce:	0002      	movs	r2, r0
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	1ad3      	subs	r3, r2, r3
 80073d4:	2b02      	cmp	r3, #2
 80073d6:	d901      	bls.n	80073dc <HAL_RCC_OscConfig+0x424>
        {
          return HAL_TIMEOUT;
 80073d8:	2303      	movs	r3, #3
 80073da:	e006      	b.n	80073ea <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 80073dc:	4b05      	ldr	r3, [pc, #20]	@ (80073f4 <HAL_RCC_OscConfig+0x43c>)
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	2380      	movs	r3, #128	@ 0x80
 80073e2:	041b      	lsls	r3, r3, #16
 80073e4:	4013      	ands	r3, r2
 80073e6:	d1f0      	bne.n	80073ca <HAL_RCC_OscConfig+0x412>
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 80073e8:	2300      	movs	r3, #0
}
 80073ea:	0018      	movs	r0, r3
 80073ec:	46bd      	mov	sp, r7
 80073ee:	b006      	add	sp, #24
 80073f0:	bd80      	pop	{r7, pc}
 80073f2:	46c0      	nop			@ (mov r8, r8)
 80073f4:	40021000 	.word	0x40021000
 80073f8:	00001388 	.word	0x00001388
 80073fc:	efffffff 	.word	0xefffffff
 8007400:	ffbfffff 	.word	0xffbfffff

08007404 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b084      	sub	sp, #16
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d101      	bne.n	8007418 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007414:	2301      	movs	r3, #1
 8007416:	e0f6      	b.n	8007606 <HAL_RCC_ClockConfig+0x202>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007418:	4b7d      	ldr	r3, [pc, #500]	@ (8007610 <HAL_RCC_ClockConfig+0x20c>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	2207      	movs	r2, #7
 800741e:	4013      	ands	r3, r2
 8007420:	683a      	ldr	r2, [r7, #0]
 8007422:	429a      	cmp	r2, r3
 8007424:	d91e      	bls.n	8007464 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007426:	4b7a      	ldr	r3, [pc, #488]	@ (8007610 <HAL_RCC_ClockConfig+0x20c>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	2207      	movs	r2, #7
 800742c:	4393      	bics	r3, r2
 800742e:	0019      	movs	r1, r3
 8007430:	4b77      	ldr	r3, [pc, #476]	@ (8007610 <HAL_RCC_ClockConfig+0x20c>)
 8007432:	683a      	ldr	r2, [r7, #0]
 8007434:	430a      	orrs	r2, r1
 8007436:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007438:	f7fc fc3e 	bl	8003cb8 <HAL_GetTick>
 800743c:	0003      	movs	r3, r0
 800743e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007440:	e009      	b.n	8007456 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8007442:	f7fc fc39 	bl	8003cb8 <HAL_GetTick>
 8007446:	0002      	movs	r2, r0
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	1ad3      	subs	r3, r2, r3
 800744c:	4a71      	ldr	r2, [pc, #452]	@ (8007614 <HAL_RCC_ClockConfig+0x210>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d901      	bls.n	8007456 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8007452:	2303      	movs	r3, #3
 8007454:	e0d7      	b.n	8007606 <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007456:	4b6e      	ldr	r3, [pc, #440]	@ (8007610 <HAL_RCC_ClockConfig+0x20c>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	2207      	movs	r2, #7
 800745c:	4013      	ands	r3, r2
 800745e:	683a      	ldr	r2, [r7, #0]
 8007460:	429a      	cmp	r2, r3
 8007462:	d1ee      	bne.n	8007442 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	2202      	movs	r2, #2
 800746a:	4013      	ands	r3, r2
 800746c:	d017      	beq.n	800749e <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	2204      	movs	r2, #4
 8007474:	4013      	ands	r3, r2
 8007476:	d008      	beq.n	800748a <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8007478:	4b67      	ldr	r3, [pc, #412]	@ (8007618 <HAL_RCC_ClockConfig+0x214>)
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	4a67      	ldr	r2, [pc, #412]	@ (800761c <HAL_RCC_ClockConfig+0x218>)
 800747e:	401a      	ands	r2, r3
 8007480:	4b65      	ldr	r3, [pc, #404]	@ (8007618 <HAL_RCC_ClockConfig+0x214>)
 8007482:	21b0      	movs	r1, #176	@ 0xb0
 8007484:	0109      	lsls	r1, r1, #4
 8007486:	430a      	orrs	r2, r1
 8007488:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800748a:	4b63      	ldr	r3, [pc, #396]	@ (8007618 <HAL_RCC_ClockConfig+0x214>)
 800748c:	689b      	ldr	r3, [r3, #8]
 800748e:	4a64      	ldr	r2, [pc, #400]	@ (8007620 <HAL_RCC_ClockConfig+0x21c>)
 8007490:	4013      	ands	r3, r2
 8007492:	0019      	movs	r1, r3
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	68da      	ldr	r2, [r3, #12]
 8007498:	4b5f      	ldr	r3, [pc, #380]	@ (8007618 <HAL_RCC_ClockConfig+0x214>)
 800749a:	430a      	orrs	r2, r1
 800749c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	2201      	movs	r2, #1
 80074a4:	4013      	ands	r3, r2
 80074a6:	d100      	bne.n	80074aa <HAL_RCC_ClockConfig+0xa6>
 80074a8:	e061      	b.n	800756e <HAL_RCC_ClockConfig+0x16a>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 80074aa:	4b5b      	ldr	r3, [pc, #364]	@ (8007618 <HAL_RCC_ClockConfig+0x214>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	221c      	movs	r2, #28
 80074b0:	4393      	bics	r3, r2
 80074b2:	0019      	movs	r1, r3
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	689a      	ldr	r2, [r3, #8]
 80074b8:	4b57      	ldr	r3, [pc, #348]	@ (8007618 <HAL_RCC_ClockConfig+0x214>)
 80074ba:	430a      	orrs	r2, r1
 80074bc:	601a      	str	r2, [r3, #0]
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	2b01      	cmp	r3, #1
 80074c4:	d107      	bne.n	80074d6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80074c6:	4b54      	ldr	r3, [pc, #336]	@ (8007618 <HAL_RCC_ClockConfig+0x214>)
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	2380      	movs	r3, #128	@ 0x80
 80074cc:	029b      	lsls	r3, r3, #10
 80074ce:	4013      	ands	r3, r2
 80074d0:	d12b      	bne.n	800752a <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	e097      	b.n	8007606 <HAL_RCC_ClockConfig+0x202>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d107      	bne.n	80074ee <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80074de:	4b4e      	ldr	r3, [pc, #312]	@ (8007618 <HAL_RCC_ClockConfig+0x214>)
 80074e0:	681a      	ldr	r2, [r3, #0]
 80074e2:	2380      	movs	r3, #128	@ 0x80
 80074e4:	00db      	lsls	r3, r3, #3
 80074e6:	4013      	ands	r3, r2
 80074e8:	d11f      	bne.n	800752a <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 80074ea:	2301      	movs	r3, #1
 80074ec:	e08b      	b.n	8007606 <HAL_RCC_ClockConfig+0x202>
      }
    }
#if defined(RCC_HSI48_SUPPORT)
    /* HSIUSB48 is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSIUSB48)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	2b02      	cmp	r3, #2
 80074f4:	d107      	bne.n	8007506 <HAL_RCC_ClockConfig+0x102>
    {
      /* Check the HSIUSB48 ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 80074f6:	4b48      	ldr	r3, [pc, #288]	@ (8007618 <HAL_RCC_ClockConfig+0x214>)
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	2380      	movs	r3, #128	@ 0x80
 80074fc:	041b      	lsls	r3, r3, #16
 80074fe:	4013      	ands	r3, r2
 8007500:	d113      	bne.n	800752a <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8007502:	2301      	movs	r3, #1
 8007504:	e07f      	b.n	8007606 <HAL_RCC_ClockConfig+0x202>
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	2b03      	cmp	r3, #3
 800750c:	d106      	bne.n	800751c <HAL_RCC_ClockConfig+0x118>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800750e:	4b42      	ldr	r3, [pc, #264]	@ (8007618 <HAL_RCC_ClockConfig+0x214>)
 8007510:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007512:	2202      	movs	r2, #2
 8007514:	4013      	ands	r3, r2
 8007516:	d108      	bne.n	800752a <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8007518:	2301      	movs	r3, #1
 800751a:	e074      	b.n	8007606 <HAL_RCC_ClockConfig+0x202>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800751c:	4b3e      	ldr	r3, [pc, #248]	@ (8007618 <HAL_RCC_ClockConfig+0x214>)
 800751e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007520:	2202      	movs	r2, #2
 8007522:	4013      	ands	r3, r2
 8007524:	d101      	bne.n	800752a <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	e06d      	b.n	8007606 <HAL_RCC_ClockConfig+0x202>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800752a:	4b3b      	ldr	r3, [pc, #236]	@ (8007618 <HAL_RCC_ClockConfig+0x214>)
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	2207      	movs	r2, #7
 8007530:	4393      	bics	r3, r2
 8007532:	0019      	movs	r1, r3
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	685a      	ldr	r2, [r3, #4]
 8007538:	4b37      	ldr	r3, [pc, #220]	@ (8007618 <HAL_RCC_ClockConfig+0x214>)
 800753a:	430a      	orrs	r2, r1
 800753c:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800753e:	f7fc fbbb 	bl	8003cb8 <HAL_GetTick>
 8007542:	0003      	movs	r3, r0
 8007544:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007546:	e009      	b.n	800755c <HAL_RCC_ClockConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8007548:	f7fc fbb6 	bl	8003cb8 <HAL_GetTick>
 800754c:	0002      	movs	r2, r0
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	1ad3      	subs	r3, r2, r3
 8007552:	4a30      	ldr	r2, [pc, #192]	@ (8007614 <HAL_RCC_ClockConfig+0x210>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d901      	bls.n	800755c <HAL_RCC_ClockConfig+0x158>
      {
        return HAL_TIMEOUT;
 8007558:	2303      	movs	r3, #3
 800755a:	e054      	b.n	8007606 <HAL_RCC_ClockConfig+0x202>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800755c:	4b2e      	ldr	r3, [pc, #184]	@ (8007618 <HAL_RCC_ClockConfig+0x214>)
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	2238      	movs	r2, #56	@ 0x38
 8007562:	401a      	ands	r2, r3
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	00db      	lsls	r3, r3, #3
 800756a:	429a      	cmp	r2, r3
 800756c:	d1ec      	bne.n	8007548 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800756e:	4b28      	ldr	r3, [pc, #160]	@ (8007610 <HAL_RCC_ClockConfig+0x20c>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	2207      	movs	r2, #7
 8007574:	4013      	ands	r3, r2
 8007576:	683a      	ldr	r2, [r7, #0]
 8007578:	429a      	cmp	r2, r3
 800757a:	d21e      	bcs.n	80075ba <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800757c:	4b24      	ldr	r3, [pc, #144]	@ (8007610 <HAL_RCC_ClockConfig+0x20c>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	2207      	movs	r2, #7
 8007582:	4393      	bics	r3, r2
 8007584:	0019      	movs	r1, r3
 8007586:	4b22      	ldr	r3, [pc, #136]	@ (8007610 <HAL_RCC_ClockConfig+0x20c>)
 8007588:	683a      	ldr	r2, [r7, #0]
 800758a:	430a      	orrs	r2, r1
 800758c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800758e:	f7fc fb93 	bl	8003cb8 <HAL_GetTick>
 8007592:	0003      	movs	r3, r0
 8007594:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007596:	e009      	b.n	80075ac <HAL_RCC_ClockConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8007598:	f7fc fb8e 	bl	8003cb8 <HAL_GetTick>
 800759c:	0002      	movs	r2, r0
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	1ad3      	subs	r3, r2, r3
 80075a2:	4a1c      	ldr	r2, [pc, #112]	@ (8007614 <HAL_RCC_ClockConfig+0x210>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d901      	bls.n	80075ac <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_TIMEOUT;
 80075a8:	2303      	movs	r3, #3
 80075aa:	e02c      	b.n	8007606 <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80075ac:	4b18      	ldr	r3, [pc, #96]	@ (8007610 <HAL_RCC_ClockConfig+0x20c>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	2207      	movs	r2, #7
 80075b2:	4013      	ands	r3, r2
 80075b4:	683a      	ldr	r2, [r7, #0]
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d1ee      	bne.n	8007598 <HAL_RCC_ClockConfig+0x194>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	2204      	movs	r2, #4
 80075c0:	4013      	ands	r3, r2
 80075c2:	d009      	beq.n	80075d8 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80075c4:	4b14      	ldr	r3, [pc, #80]	@ (8007618 <HAL_RCC_ClockConfig+0x214>)
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	4a16      	ldr	r2, [pc, #88]	@ (8007624 <HAL_RCC_ClockConfig+0x220>)
 80075ca:	4013      	ands	r3, r2
 80075cc:	0019      	movs	r1, r3
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	691a      	ldr	r2, [r3, #16]
 80075d2:	4b11      	ldr	r3, [pc, #68]	@ (8007618 <HAL_RCC_ClockConfig+0x214>)
 80075d4:	430a      	orrs	r2, r1
 80075d6:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80075d8:	f000 f82c 	bl	8007634 <HAL_RCC_GetSysClockFreq>
 80075dc:	0001      	movs	r1, r0
 80075de:	4b0e      	ldr	r3, [pc, #56]	@ (8007618 <HAL_RCC_ClockConfig+0x214>)
 80075e0:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80075e2:	0a1b      	lsrs	r3, r3, #8
 80075e4:	220f      	movs	r2, #15
 80075e6:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80075e8:	4b0f      	ldr	r3, [pc, #60]	@ (8007628 <HAL_RCC_ClockConfig+0x224>)
 80075ea:	0092      	lsls	r2, r2, #2
 80075ec:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80075ee:	221f      	movs	r2, #31
 80075f0:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80075f2:	000a      	movs	r2, r1
 80075f4:	40da      	lsrs	r2, r3
 80075f6:	4b0d      	ldr	r3, [pc, #52]	@ (800762c <HAL_RCC_ClockConfig+0x228>)
 80075f8:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80075fa:	4b0d      	ldr	r3, [pc, #52]	@ (8007630 <HAL_RCC_ClockConfig+0x22c>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	0018      	movs	r0, r3
 8007600:	f7fc fafe 	bl	8003c00 <HAL_InitTick>
 8007604:	0003      	movs	r3, r0
}
 8007606:	0018      	movs	r0, r3
 8007608:	46bd      	mov	sp, r7
 800760a:	b004      	add	sp, #16
 800760c:	bd80      	pop	{r7, pc}
 800760e:	46c0      	nop			@ (mov r8, r8)
 8007610:	40022000 	.word	0x40022000
 8007614:	00001388 	.word	0x00001388
 8007618:	40021000 	.word	0x40021000
 800761c:	ffff84ff 	.word	0xffff84ff
 8007620:	fffff0ff 	.word	0xfffff0ff
 8007624:	ffff8fff 	.word	0xffff8fff
 8007628:	0800acfc 	.word	0x0800acfc
 800762c:	200000b4 	.word	0x200000b4
 8007630:	200000b8 	.word	0x200000b8

08007634 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b084      	sub	sp, #16
 8007638:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 800763a:	4b27      	ldr	r3, [pc, #156]	@ (80076d8 <HAL_RCC_GetSysClockFreq+0xa4>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	089b      	lsrs	r3, r3, #2
 8007640:	2207      	movs	r2, #7
 8007642:	4013      	ands	r3, r2
 8007644:	3301      	adds	r3, #1
 8007646:	60bb      	str	r3, [r7, #8]
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007648:	4b23      	ldr	r3, [pc, #140]	@ (80076d8 <HAL_RCC_GetSysClockFreq+0xa4>)
 800764a:	689b      	ldr	r3, [r3, #8]
 800764c:	2238      	movs	r2, #56	@ 0x38
 800764e:	4013      	ands	r3, r2
 8007650:	d10f      	bne.n	8007672 <HAL_RCC_GetSysClockFreq+0x3e>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8007652:	4b21      	ldr	r3, [pc, #132]	@ (80076d8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	0adb      	lsrs	r3, r3, #11
 8007658:	2207      	movs	r2, #7
 800765a:	4013      	ands	r3, r2
 800765c:	2201      	movs	r2, #1
 800765e:	409a      	lsls	r2, r3
 8007660:	0013      	movs	r3, r2
 8007662:	607b      	str	r3, [r7, #4]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8007664:	6879      	ldr	r1, [r7, #4]
 8007666:	481d      	ldr	r0, [pc, #116]	@ (80076dc <HAL_RCC_GetSysClockFreq+0xa8>)
 8007668:	f7f8 fd4e 	bl	8000108 <__udivsi3>
 800766c:	0003      	movs	r3, r0
 800766e:	60fb      	str	r3, [r7, #12]
 8007670:	e027      	b.n	80076c2 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007672:	4b19      	ldr	r3, [pc, #100]	@ (80076d8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007674:	689b      	ldr	r3, [r3, #8]
 8007676:	2238      	movs	r2, #56	@ 0x38
 8007678:	4013      	ands	r3, r2
 800767a:	2b08      	cmp	r3, #8
 800767c:	d102      	bne.n	8007684 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800767e:	4b18      	ldr	r3, [pc, #96]	@ (80076e0 <HAL_RCC_GetSysClockFreq+0xac>)
 8007680:	60fb      	str	r3, [r7, #12]
 8007682:	e01e      	b.n	80076c2 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8007684:	4b14      	ldr	r3, [pc, #80]	@ (80076d8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	2238      	movs	r2, #56	@ 0x38
 800768a:	4013      	ands	r3, r2
 800768c:	2b20      	cmp	r3, #32
 800768e:	d103      	bne.n	8007698 <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8007690:	2380      	movs	r3, #128	@ 0x80
 8007692:	021b      	lsls	r3, r3, #8
 8007694:	60fb      	str	r3, [r7, #12]
 8007696:	e014      	b.n	80076c2 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8007698:	4b0f      	ldr	r3, [pc, #60]	@ (80076d8 <HAL_RCC_GetSysClockFreq+0xa4>)
 800769a:	689b      	ldr	r3, [r3, #8]
 800769c:	2238      	movs	r2, #56	@ 0x38
 800769e:	4013      	ands	r3, r2
 80076a0:	2b18      	cmp	r3, #24
 80076a2:	d103      	bne.n	80076ac <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80076a4:	23fa      	movs	r3, #250	@ 0xfa
 80076a6:	01db      	lsls	r3, r3, #7
 80076a8:	60fb      	str	r3, [r7, #12]
 80076aa:	e00a      	b.n	80076c2 <HAL_RCC_GetSysClockFreq+0x8e>
  }
#if defined(RCC_HSI48_SUPPORT)
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI48)
 80076ac:	4b0a      	ldr	r3, [pc, #40]	@ (80076d8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	2238      	movs	r2, #56	@ 0x38
 80076b2:	4013      	ands	r3, r2
 80076b4:	2b10      	cmp	r3, #16
 80076b6:	d102      	bne.n	80076be <HAL_RCC_GetSysClockFreq+0x8a>
  {
    /* HSI48 used as system clock source */
    sysclockfreq = HSI48_VALUE;
 80076b8:	4b08      	ldr	r3, [pc, #32]	@ (80076dc <HAL_RCC_GetSysClockFreq+0xa8>)
 80076ba:	60fb      	str	r3, [r7, #12]
 80076bc:	e001      	b.n	80076c2 <HAL_RCC_GetSysClockFreq+0x8e>
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 80076be:	2300      	movs	r3, #0
 80076c0:	60fb      	str	r3, [r7, #12]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 80076c2:	68b9      	ldr	r1, [r7, #8]
 80076c4:	68f8      	ldr	r0, [r7, #12]
 80076c6:	f7f8 fd1f 	bl	8000108 <__udivsi3>
 80076ca:	0003      	movs	r3, r0
 80076cc:	60fb      	str	r3, [r7, #12]
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 80076ce:	68fb      	ldr	r3, [r7, #12]
}
 80076d0:	0018      	movs	r0, r3
 80076d2:	46bd      	mov	sp, r7
 80076d4:	b004      	add	sp, #16
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	40021000 	.word	0x40021000
 80076dc:	02dc6c00 	.word	0x02dc6c00
 80076e0:	007a1200 	.word	0x007a1200

080076e4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80076e8:	f7ff ffa4 	bl	8007634 <HAL_RCC_GetSysClockFreq>
 80076ec:	0001      	movs	r1, r0
 80076ee:	4b09      	ldr	r3, [pc, #36]	@ (8007714 <HAL_RCC_GetHCLKFreq+0x30>)
 80076f0:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80076f2:	0a1b      	lsrs	r3, r3, #8
 80076f4:	220f      	movs	r2, #15
 80076f6:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80076f8:	4b07      	ldr	r3, [pc, #28]	@ (8007718 <HAL_RCC_GetHCLKFreq+0x34>)
 80076fa:	0092      	lsls	r2, r2, #2
 80076fc:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80076fe:	221f      	movs	r2, #31
 8007700:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8007702:	000a      	movs	r2, r1
 8007704:	40da      	lsrs	r2, r3
 8007706:	4b05      	ldr	r3, [pc, #20]	@ (800771c <HAL_RCC_GetHCLKFreq+0x38>)
 8007708:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 800770a:	4b04      	ldr	r3, [pc, #16]	@ (800771c <HAL_RCC_GetHCLKFreq+0x38>)
 800770c:	681b      	ldr	r3, [r3, #0]
}
 800770e:	0018      	movs	r0, r3
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}
 8007714:	40021000 	.word	0x40021000
 8007718:	0800acfc 	.word	0x0800acfc
 800771c:	200000b4 	.word	0x200000b4

08007720 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8007724:	f7ff ffde 	bl	80076e4 <HAL_RCC_GetHCLKFreq>
 8007728:	0001      	movs	r1, r0
 800772a:	4b07      	ldr	r3, [pc, #28]	@ (8007748 <HAL_RCC_GetPCLK1Freq+0x28>)
 800772c:	689b      	ldr	r3, [r3, #8]
 800772e:	0b1b      	lsrs	r3, r3, #12
 8007730:	2207      	movs	r2, #7
 8007732:	401a      	ands	r2, r3
 8007734:	4b05      	ldr	r3, [pc, #20]	@ (800774c <HAL_RCC_GetPCLK1Freq+0x2c>)
 8007736:	0092      	lsls	r2, r2, #2
 8007738:	58d3      	ldr	r3, [r2, r3]
 800773a:	221f      	movs	r2, #31
 800773c:	4013      	ands	r3, r2
 800773e:	40d9      	lsrs	r1, r3
 8007740:	000b      	movs	r3, r1
}
 8007742:	0018      	movs	r0, r3
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}
 8007748:	40021000 	.word	0x40021000
 800774c:	0800ad3c 	.word	0x0800ad3c

08007750 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b086      	sub	sp, #24
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8007758:	2313      	movs	r3, #19
 800775a:	18fb      	adds	r3, r7, r3
 800775c:	2200      	movs	r2, #0
 800775e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007760:	2312      	movs	r3, #18
 8007762:	18fb      	adds	r3, r7, r3
 8007764:	2200      	movs	r2, #0
 8007766:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	2240      	movs	r2, #64	@ 0x40
 800776e:	4013      	ands	r3, r2
 8007770:	d100      	bne.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x24>
 8007772:	e079      	b.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007774:	2011      	movs	r0, #17
 8007776:	183b      	adds	r3, r7, r0
 8007778:	2200      	movs	r2, #0
 800777a:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800777c:	4b6a      	ldr	r3, [pc, #424]	@ (8007928 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800777e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007780:	2380      	movs	r3, #128	@ 0x80
 8007782:	055b      	lsls	r3, r3, #21
 8007784:	4013      	ands	r3, r2
 8007786:	d110      	bne.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007788:	4b67      	ldr	r3, [pc, #412]	@ (8007928 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800778a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800778c:	4b66      	ldr	r3, [pc, #408]	@ (8007928 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800778e:	2180      	movs	r1, #128	@ 0x80
 8007790:	0549      	lsls	r1, r1, #21
 8007792:	430a      	orrs	r2, r1
 8007794:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007796:	4b64      	ldr	r3, [pc, #400]	@ (8007928 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007798:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800779a:	2380      	movs	r3, #128	@ 0x80
 800779c:	055b      	lsls	r3, r3, #21
 800779e:	4013      	ands	r3, r2
 80077a0:	60bb      	str	r3, [r7, #8]
 80077a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80077a4:	183b      	adds	r3, r7, r0
 80077a6:	2201      	movs	r2, #1
 80077a8:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 80077aa:	4b5f      	ldr	r3, [pc, #380]	@ (8007928 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80077ac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80077ae:	23c0      	movs	r3, #192	@ 0xc0
 80077b0:	009b      	lsls	r3, r3, #2
 80077b2:	4013      	ands	r3, r2
 80077b4:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d019      	beq.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	69db      	ldr	r3, [r3, #28]
 80077c0:	697a      	ldr	r2, [r7, #20]
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d014      	beq.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 80077c6:	4b58      	ldr	r3, [pc, #352]	@ (8007928 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80077c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077ca:	4a58      	ldr	r2, [pc, #352]	@ (800792c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80077cc:	4013      	ands	r3, r2
 80077ce:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80077d0:	4b55      	ldr	r3, [pc, #340]	@ (8007928 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80077d2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80077d4:	4b54      	ldr	r3, [pc, #336]	@ (8007928 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80077d6:	2180      	movs	r1, #128	@ 0x80
 80077d8:	0249      	lsls	r1, r1, #9
 80077da:	430a      	orrs	r2, r1
 80077dc:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 80077de:	4b52      	ldr	r3, [pc, #328]	@ (8007928 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80077e0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80077e2:	4b51      	ldr	r3, [pc, #324]	@ (8007928 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80077e4:	4952      	ldr	r1, [pc, #328]	@ (8007930 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80077e6:	400a      	ands	r2, r1
 80077e8:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 80077ea:	4b4f      	ldr	r3, [pc, #316]	@ (8007928 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80077ec:	697a      	ldr	r2, [r7, #20]
 80077ee:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	2201      	movs	r2, #1
 80077f4:	4013      	ands	r3, r2
 80077f6:	d016      	beq.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077f8:	f7fc fa5e 	bl	8003cb8 <HAL_GetTick>
 80077fc:	0003      	movs	r3, r0
 80077fe:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8007800:	e00c      	b.n	800781c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007802:	f7fc fa59 	bl	8003cb8 <HAL_GetTick>
 8007806:	0002      	movs	r2, r0
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	1ad3      	subs	r3, r2, r3
 800780c:	4a49      	ldr	r2, [pc, #292]	@ (8007934 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d904      	bls.n	800781c <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 8007812:	2313      	movs	r3, #19
 8007814:	18fb      	adds	r3, r7, r3
 8007816:	2203      	movs	r2, #3
 8007818:	701a      	strb	r2, [r3, #0]
          break;
 800781a:	e004      	b.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800781c:	4b42      	ldr	r3, [pc, #264]	@ (8007928 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800781e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007820:	2202      	movs	r2, #2
 8007822:	4013      	ands	r3, r2
 8007824:	d0ed      	beq.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 8007826:	2313      	movs	r3, #19
 8007828:	18fb      	adds	r3, r7, r3
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d10a      	bne.n	8007846 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007830:	4b3d      	ldr	r3, [pc, #244]	@ (8007928 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007832:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007834:	4a3d      	ldr	r2, [pc, #244]	@ (800792c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8007836:	4013      	ands	r3, r2
 8007838:	0019      	movs	r1, r3
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	69da      	ldr	r2, [r3, #28]
 800783e:	4b3a      	ldr	r3, [pc, #232]	@ (8007928 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007840:	430a      	orrs	r2, r1
 8007842:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007844:	e005      	b.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007846:	2312      	movs	r3, #18
 8007848:	18fb      	adds	r3, r7, r3
 800784a:	2213      	movs	r2, #19
 800784c:	18ba      	adds	r2, r7, r2
 800784e:	7812      	ldrb	r2, [r2, #0]
 8007850:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007852:	2311      	movs	r3, #17
 8007854:	18fb      	adds	r3, r7, r3
 8007856:	781b      	ldrb	r3, [r3, #0]
 8007858:	2b01      	cmp	r3, #1
 800785a:	d105      	bne.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800785c:	4b32      	ldr	r3, [pc, #200]	@ (8007928 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800785e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007860:	4b31      	ldr	r3, [pc, #196]	@ (8007928 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007862:	4935      	ldr	r1, [pc, #212]	@ (8007938 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8007864:	400a      	ands	r2, r1
 8007866:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	2201      	movs	r2, #1
 800786e:	4013      	ands	r3, r2
 8007870:	d009      	beq.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007872:	4b2d      	ldr	r3, [pc, #180]	@ (8007928 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007874:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007876:	2203      	movs	r2, #3
 8007878:	4393      	bics	r3, r2
 800787a:	0019      	movs	r1, r3
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	689a      	ldr	r2, [r3, #8]
 8007880:	4b29      	ldr	r3, [pc, #164]	@ (8007928 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007882:	430a      	orrs	r2, r1
 8007884:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	2202      	movs	r2, #2
 800788c:	4013      	ands	r3, r2
 800788e:	d009      	beq.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007890:	4b25      	ldr	r3, [pc, #148]	@ (8007928 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007892:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007894:	4a29      	ldr	r2, [pc, #164]	@ (800793c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8007896:	4013      	ands	r3, r2
 8007898:	0019      	movs	r1, r3
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	68da      	ldr	r2, [r3, #12]
 800789e:	4b22      	ldr	r3, [pc, #136]	@ (8007928 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80078a0:	430a      	orrs	r2, r1
 80078a2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	2220      	movs	r2, #32
 80078aa:	4013      	ands	r3, r2
 80078ac:	d008      	beq.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80078ae:	4b1e      	ldr	r3, [pc, #120]	@ (8007928 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80078b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078b2:	009b      	lsls	r3, r3, #2
 80078b4:	0899      	lsrs	r1, r3, #2
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	699a      	ldr	r2, [r3, #24]
 80078ba:	4b1b      	ldr	r3, [pc, #108]	@ (8007928 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80078bc:	430a      	orrs	r2, r1
 80078be:	655a      	str	r2, [r3, #84]	@ 0x54

  }
#if defined (USB_DRD_FS)
  /*-------------------------- USB clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	2208      	movs	r2, #8
 80078c6:	4013      	ands	r3, r2
 80078c8:	d009      	beq.n	80078de <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80078ca:	4b17      	ldr	r3, [pc, #92]	@ (8007928 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80078cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078ce:	4a1c      	ldr	r2, [pc, #112]	@ (8007940 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80078d0:	4013      	ands	r3, r2
 80078d2:	0019      	movs	r1, r3
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	695a      	ldr	r2, [r3, #20]
 80078d8:	4b13      	ldr	r3, [pc, #76]	@ (8007928 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80078da:	430a      	orrs	r2, r1
 80078dc:	659a      	str	r2, [r3, #88]	@ 0x58

  }
#endif /* USB_DRD_FS */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	2204      	movs	r2, #4
 80078e4:	4013      	ands	r3, r2
 80078e6:	d009      	beq.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80078e8:	4b0f      	ldr	r3, [pc, #60]	@ (8007928 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80078ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078ec:	4a15      	ldr	r2, [pc, #84]	@ (8007944 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80078ee:	4013      	ands	r3, r2
 80078f0:	0019      	movs	r1, r3
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	691a      	ldr	r2, [r3, #16]
 80078f6:	4b0c      	ldr	r3, [pc, #48]	@ (8007928 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80078f8:	430a      	orrs	r2, r1
 80078fa:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	2280      	movs	r2, #128	@ 0x80
 8007902:	4013      	ands	r3, r2
 8007904:	d009      	beq.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8007906:	4b08      	ldr	r3, [pc, #32]	@ (8007928 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	22e0      	movs	r2, #224	@ 0xe0
 800790c:	4393      	bics	r3, r2
 800790e:	0019      	movs	r1, r3
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	685a      	ldr	r2, [r3, #4]
 8007914:	4b04      	ldr	r3, [pc, #16]	@ (8007928 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007916:	430a      	orrs	r2, r1
 8007918:	601a      	str	r2, [r3, #0]
  }
  return status;
 800791a:	2312      	movs	r3, #18
 800791c:	18fb      	adds	r3, r7, r3
 800791e:	781b      	ldrb	r3, [r3, #0]
}
 8007920:	0018      	movs	r0, r3
 8007922:	46bd      	mov	sp, r7
 8007924:	b006      	add	sp, #24
 8007926:	bd80      	pop	{r7, pc}
 8007928:	40021000 	.word	0x40021000
 800792c:	fffffcff 	.word	0xfffffcff
 8007930:	fffeffff 	.word	0xfffeffff
 8007934:	00001388 	.word	0x00001388
 8007938:	efffffff 	.word	0xefffffff
 800793c:	ffffcfff 	.word	0xffffcfff
 8007940:	ffffefff 	.word	0xffffefff
 8007944:	ffff3fff 	.word	0xffff3fff

08007948 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b084      	sub	sp, #16
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d101      	bne.n	800795a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007956:	2301      	movs	r3, #1
 8007958:	e0a8      	b.n	8007aac <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800795e:	2b00      	cmp	r3, #0
 8007960:	d109      	bne.n	8007976 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	685a      	ldr	r2, [r3, #4]
 8007966:	2382      	movs	r3, #130	@ 0x82
 8007968:	005b      	lsls	r3, r3, #1
 800796a:	429a      	cmp	r2, r3
 800796c:	d009      	beq.n	8007982 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	61da      	str	r2, [r3, #28]
 8007974:	e005      	b.n	8007982 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2200      	movs	r2, #0
 800797a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2200      	movs	r2, #0
 8007980:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2200      	movs	r2, #0
 8007986:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	225d      	movs	r2, #93	@ 0x5d
 800798c:	5c9b      	ldrb	r3, [r3, r2]
 800798e:	b2db      	uxtb	r3, r3
 8007990:	2b00      	cmp	r3, #0
 8007992:	d107      	bne.n	80079a4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	225c      	movs	r2, #92	@ 0x5c
 8007998:	2100      	movs	r1, #0
 800799a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	0018      	movs	r0, r3
 80079a0:	f7fb fd3e 	bl	8003420 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	225d      	movs	r2, #93	@ 0x5d
 80079a8:	2102      	movs	r1, #2
 80079aa:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	681a      	ldr	r2, [r3, #0]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	2140      	movs	r1, #64	@ 0x40
 80079b8:	438a      	bics	r2, r1
 80079ba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	68da      	ldr	r2, [r3, #12]
 80079c0:	23e0      	movs	r3, #224	@ 0xe0
 80079c2:	00db      	lsls	r3, r3, #3
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d902      	bls.n	80079ce <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80079c8:	2300      	movs	r3, #0
 80079ca:	60fb      	str	r3, [r7, #12]
 80079cc:	e002      	b.n	80079d4 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80079ce:	2380      	movs	r3, #128	@ 0x80
 80079d0:	015b      	lsls	r3, r3, #5
 80079d2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	68da      	ldr	r2, [r3, #12]
 80079d8:	23f0      	movs	r3, #240	@ 0xf0
 80079da:	011b      	lsls	r3, r3, #4
 80079dc:	429a      	cmp	r2, r3
 80079de:	d008      	beq.n	80079f2 <HAL_SPI_Init+0xaa>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	68da      	ldr	r2, [r3, #12]
 80079e4:	23e0      	movs	r3, #224	@ 0xe0
 80079e6:	00db      	lsls	r3, r3, #3
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d002      	beq.n	80079f2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2200      	movs	r2, #0
 80079f0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	685a      	ldr	r2, [r3, #4]
 80079f6:	2382      	movs	r3, #130	@ 0x82
 80079f8:	005b      	lsls	r3, r3, #1
 80079fa:	401a      	ands	r2, r3
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6899      	ldr	r1, [r3, #8]
 8007a00:	2384      	movs	r3, #132	@ 0x84
 8007a02:	021b      	lsls	r3, r3, #8
 8007a04:	400b      	ands	r3, r1
 8007a06:	431a      	orrs	r2, r3
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	691b      	ldr	r3, [r3, #16]
 8007a0c:	2102      	movs	r1, #2
 8007a0e:	400b      	ands	r3, r1
 8007a10:	431a      	orrs	r2, r3
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	695b      	ldr	r3, [r3, #20]
 8007a16:	2101      	movs	r1, #1
 8007a18:	400b      	ands	r3, r1
 8007a1a:	431a      	orrs	r2, r3
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6999      	ldr	r1, [r3, #24]
 8007a20:	2380      	movs	r3, #128	@ 0x80
 8007a22:	009b      	lsls	r3, r3, #2
 8007a24:	400b      	ands	r3, r1
 8007a26:	431a      	orrs	r2, r3
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	69db      	ldr	r3, [r3, #28]
 8007a2c:	2138      	movs	r1, #56	@ 0x38
 8007a2e:	400b      	ands	r3, r1
 8007a30:	431a      	orrs	r2, r3
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6a1b      	ldr	r3, [r3, #32]
 8007a36:	2180      	movs	r1, #128	@ 0x80
 8007a38:	400b      	ands	r3, r1
 8007a3a:	431a      	orrs	r2, r3
 8007a3c:	0011      	movs	r1, r2
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007a42:	2380      	movs	r3, #128	@ 0x80
 8007a44:	019b      	lsls	r3, r3, #6
 8007a46:	401a      	ands	r2, r3
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	430a      	orrs	r2, r1
 8007a4e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	699b      	ldr	r3, [r3, #24]
 8007a54:	0c1b      	lsrs	r3, r3, #16
 8007a56:	2204      	movs	r2, #4
 8007a58:	401a      	ands	r2, r3
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a5e:	2110      	movs	r1, #16
 8007a60:	400b      	ands	r3, r1
 8007a62:	431a      	orrs	r2, r3
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a68:	2108      	movs	r1, #8
 8007a6a:	400b      	ands	r3, r1
 8007a6c:	431a      	orrs	r2, r3
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	68d9      	ldr	r1, [r3, #12]
 8007a72:	23f0      	movs	r3, #240	@ 0xf0
 8007a74:	011b      	lsls	r3, r3, #4
 8007a76:	400b      	ands	r3, r1
 8007a78:	431a      	orrs	r2, r3
 8007a7a:	0011      	movs	r1, r2
 8007a7c:	68fa      	ldr	r2, [r7, #12]
 8007a7e:	2380      	movs	r3, #128	@ 0x80
 8007a80:	015b      	lsls	r3, r3, #5
 8007a82:	401a      	ands	r2, r3
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	430a      	orrs	r2, r1
 8007a8a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	69da      	ldr	r2, [r3, #28]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4907      	ldr	r1, [pc, #28]	@ (8007ab4 <HAL_SPI_Init+0x16c>)
 8007a98:	400a      	ands	r2, r1
 8007a9a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	225d      	movs	r2, #93	@ 0x5d
 8007aa6:	2101      	movs	r1, #1
 8007aa8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007aaa:	2300      	movs	r3, #0
}
 8007aac:	0018      	movs	r0, r3
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	b004      	add	sp, #16
 8007ab2:	bd80      	pop	{r7, pc}
 8007ab4:	fffff7ff 	.word	0xfffff7ff

08007ab8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b082      	sub	sp, #8
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d101      	bne.n	8007aca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	e04a      	b.n	8007b60 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	223d      	movs	r2, #61	@ 0x3d
 8007ace:	5c9b      	ldrb	r3, [r3, r2]
 8007ad0:	b2db      	uxtb	r3, r3
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d107      	bne.n	8007ae6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	223c      	movs	r2, #60	@ 0x3c
 8007ada:	2100      	movs	r1, #0
 8007adc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	0018      	movs	r0, r3
 8007ae2:	f7fb fd43 	bl	800356c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	223d      	movs	r2, #61	@ 0x3d
 8007aea:	2102      	movs	r1, #2
 8007aec:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	3304      	adds	r3, #4
 8007af6:	0019      	movs	r1, r3
 8007af8:	0010      	movs	r0, r2
 8007afa:	f000 fb95 	bl	8008228 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2248      	movs	r2, #72	@ 0x48
 8007b02:	2101      	movs	r1, #1
 8007b04:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	223e      	movs	r2, #62	@ 0x3e
 8007b0a:	2101      	movs	r1, #1
 8007b0c:	5499      	strb	r1, [r3, r2]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	223f      	movs	r2, #63	@ 0x3f
 8007b12:	2101      	movs	r1, #1
 8007b14:	5499      	strb	r1, [r3, r2]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2240      	movs	r2, #64	@ 0x40
 8007b1a:	2101      	movs	r1, #1
 8007b1c:	5499      	strb	r1, [r3, r2]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2241      	movs	r2, #65	@ 0x41
 8007b22:	2101      	movs	r1, #1
 8007b24:	5499      	strb	r1, [r3, r2]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2242      	movs	r2, #66	@ 0x42
 8007b2a:	2101      	movs	r1, #1
 8007b2c:	5499      	strb	r1, [r3, r2]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2243      	movs	r2, #67	@ 0x43
 8007b32:	2101      	movs	r1, #1
 8007b34:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2244      	movs	r2, #68	@ 0x44
 8007b3a:	2101      	movs	r1, #1
 8007b3c:	5499      	strb	r1, [r3, r2]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2245      	movs	r2, #69	@ 0x45
 8007b42:	2101      	movs	r1, #1
 8007b44:	5499      	strb	r1, [r3, r2]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2246      	movs	r2, #70	@ 0x46
 8007b4a:	2101      	movs	r1, #1
 8007b4c:	5499      	strb	r1, [r3, r2]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2247      	movs	r2, #71	@ 0x47
 8007b52:	2101      	movs	r1, #1
 8007b54:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	223d      	movs	r2, #61	@ 0x3d
 8007b5a:	2101      	movs	r1, #1
 8007b5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007b5e:	2300      	movs	r3, #0
}
 8007b60:	0018      	movs	r0, r3
 8007b62:	46bd      	mov	sp, r7
 8007b64:	b002      	add	sp, #8
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b082      	sub	sp, #8
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	223d      	movs	r2, #61	@ 0x3d
 8007b74:	2102      	movs	r1, #2
 8007b76:	5499      	strb	r1, [r3, r2]

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	6a1b      	ldr	r3, [r3, #32]
 8007b7e:	4a27      	ldr	r2, [pc, #156]	@ (8007c1c <HAL_TIM_Base_DeInit+0xb4>)
 8007b80:	4013      	ands	r3, r2
 8007b82:	d10d      	bne.n	8007ba0 <HAL_TIM_Base_DeInit+0x38>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	6a1b      	ldr	r3, [r3, #32]
 8007b8a:	4a25      	ldr	r2, [pc, #148]	@ (8007c20 <HAL_TIM_Base_DeInit+0xb8>)
 8007b8c:	4013      	ands	r3, r2
 8007b8e:	d107      	bne.n	8007ba0 <HAL_TIM_Base_DeInit+0x38>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	681a      	ldr	r2, [r3, #0]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	2101      	movs	r1, #1
 8007b9c:	438a      	bics	r2, r1
 8007b9e:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	0018      	movs	r0, r3
 8007ba4:	f7fb fd48 	bl	8003638 <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2248      	movs	r2, #72	@ 0x48
 8007bac:	2100      	movs	r1, #0
 8007bae:	5499      	strb	r1, [r3, r2]

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	223e      	movs	r2, #62	@ 0x3e
 8007bb4:	2100      	movs	r1, #0
 8007bb6:	5499      	strb	r1, [r3, r2]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	223f      	movs	r2, #63	@ 0x3f
 8007bbc:	2100      	movs	r1, #0
 8007bbe:	5499      	strb	r1, [r3, r2]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2240      	movs	r2, #64	@ 0x40
 8007bc4:	2100      	movs	r1, #0
 8007bc6:	5499      	strb	r1, [r3, r2]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2241      	movs	r2, #65	@ 0x41
 8007bcc:	2100      	movs	r1, #0
 8007bce:	5499      	strb	r1, [r3, r2]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2242      	movs	r2, #66	@ 0x42
 8007bd4:	2100      	movs	r1, #0
 8007bd6:	5499      	strb	r1, [r3, r2]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2243      	movs	r2, #67	@ 0x43
 8007bdc:	2100      	movs	r1, #0
 8007bde:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2244      	movs	r2, #68	@ 0x44
 8007be4:	2100      	movs	r1, #0
 8007be6:	5499      	strb	r1, [r3, r2]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2245      	movs	r2, #69	@ 0x45
 8007bec:	2100      	movs	r1, #0
 8007bee:	5499      	strb	r1, [r3, r2]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2246      	movs	r2, #70	@ 0x46
 8007bf4:	2100      	movs	r1, #0
 8007bf6:	5499      	strb	r1, [r3, r2]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2247      	movs	r2, #71	@ 0x47
 8007bfc:	2100      	movs	r1, #0
 8007bfe:	5499      	strb	r1, [r3, r2]

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	223d      	movs	r2, #61	@ 0x3d
 8007c04:	2100      	movs	r1, #0
 8007c06:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	223c      	movs	r2, #60	@ 0x3c
 8007c0c:	2100      	movs	r1, #0
 8007c0e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007c10:	2300      	movs	r3, #0
}
 8007c12:	0018      	movs	r0, r3
 8007c14:	46bd      	mov	sp, r7
 8007c16:	b002      	add	sp, #8
 8007c18:	bd80      	pop	{r7, pc}
 8007c1a:	46c0      	nop			@ (mov r8, r8)
 8007c1c:	00001111 	.word	0x00001111
 8007c20:	00000444 	.word	0x00000444

08007c24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b084      	sub	sp, #16
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	223d      	movs	r2, #61	@ 0x3d
 8007c30:	5c9b      	ldrb	r3, [r3, r2]
 8007c32:	b2db      	uxtb	r3, r3
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d001      	beq.n	8007c3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007c38:	2301      	movs	r3, #1
 8007c3a:	e03d      	b.n	8007cb8 <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	223d      	movs	r2, #61	@ 0x3d
 8007c40:	2102      	movs	r1, #2
 8007c42:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	68da      	ldr	r2, [r3, #12]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	2101      	movs	r1, #1
 8007c50:	430a      	orrs	r2, r1
 8007c52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a19      	ldr	r2, [pc, #100]	@ (8007cc0 <HAL_TIM_Base_Start_IT+0x9c>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d00a      	beq.n	8007c74 <HAL_TIM_Base_Start_IT+0x50>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681a      	ldr	r2, [r3, #0]
 8007c62:	2380      	movs	r3, #128	@ 0x80
 8007c64:	05db      	lsls	r3, r3, #23
 8007c66:	429a      	cmp	r2, r3
 8007c68:	d004      	beq.n	8007c74 <HAL_TIM_Base_Start_IT+0x50>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4a15      	ldr	r2, [pc, #84]	@ (8007cc4 <HAL_TIM_Base_Start_IT+0xa0>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d116      	bne.n	8007ca2 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	689b      	ldr	r3, [r3, #8]
 8007c7a:	4a13      	ldr	r2, [pc, #76]	@ (8007cc8 <HAL_TIM_Base_Start_IT+0xa4>)
 8007c7c:	4013      	ands	r3, r2
 8007c7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2b06      	cmp	r3, #6
 8007c84:	d016      	beq.n	8007cb4 <HAL_TIM_Base_Start_IT+0x90>
 8007c86:	68fa      	ldr	r2, [r7, #12]
 8007c88:	2380      	movs	r3, #128	@ 0x80
 8007c8a:	025b      	lsls	r3, r3, #9
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	d011      	beq.n	8007cb4 <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	681a      	ldr	r2, [r3, #0]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	2101      	movs	r1, #1
 8007c9c:	430a      	orrs	r2, r1
 8007c9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ca0:	e008      	b.n	8007cb4 <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	681a      	ldr	r2, [r3, #0]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	2101      	movs	r1, #1
 8007cae:	430a      	orrs	r2, r1
 8007cb0:	601a      	str	r2, [r3, #0]
 8007cb2:	e000      	b.n	8007cb6 <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cb4:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8007cb6:	2300      	movs	r3, #0
}
 8007cb8:	0018      	movs	r0, r3
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	b004      	add	sp, #16
 8007cbe:	bd80      	pop	{r7, pc}
 8007cc0:	40012c00 	.word	0x40012c00
 8007cc4:	40000400 	.word	0x40000400
 8007cc8:	00010007 	.word	0x00010007

08007ccc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b082      	sub	sp, #8
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	68da      	ldr	r2, [r3, #12]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	2101      	movs	r1, #1
 8007ce0:	438a      	bics	r2, r1
 8007ce2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	6a1b      	ldr	r3, [r3, #32]
 8007cea:	4a0d      	ldr	r2, [pc, #52]	@ (8007d20 <HAL_TIM_Base_Stop_IT+0x54>)
 8007cec:	4013      	ands	r3, r2
 8007cee:	d10d      	bne.n	8007d0c <HAL_TIM_Base_Stop_IT+0x40>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	6a1b      	ldr	r3, [r3, #32]
 8007cf6:	4a0b      	ldr	r2, [pc, #44]	@ (8007d24 <HAL_TIM_Base_Stop_IT+0x58>)
 8007cf8:	4013      	ands	r3, r2
 8007cfa:	d107      	bne.n	8007d0c <HAL_TIM_Base_Stop_IT+0x40>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	681a      	ldr	r2, [r3, #0]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	2101      	movs	r1, #1
 8007d08:	438a      	bics	r2, r1
 8007d0a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	223d      	movs	r2, #61	@ 0x3d
 8007d10:	2101      	movs	r1, #1
 8007d12:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8007d14:	2300      	movs	r3, #0
}
 8007d16:	0018      	movs	r0, r3
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	b002      	add	sp, #8
 8007d1c:	bd80      	pop	{r7, pc}
 8007d1e:	46c0      	nop			@ (mov r8, r8)
 8007d20:	00001111 	.word	0x00001111
 8007d24:	00000444 	.word	0x00000444

08007d28 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b082      	sub	sp, #8
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d101      	bne.n	8007d3a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007d36:	2301      	movs	r3, #1
 8007d38:	e04a      	b.n	8007dd0 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	223d      	movs	r2, #61	@ 0x3d
 8007d3e:	5c9b      	ldrb	r3, [r3, r2]
 8007d40:	b2db      	uxtb	r3, r3
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d107      	bne.n	8007d56 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	223c      	movs	r2, #60	@ 0x3c
 8007d4a:	2100      	movs	r1, #0
 8007d4c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	0018      	movs	r0, r3
 8007d52:	f7fb fbeb 	bl	800352c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	223d      	movs	r2, #61	@ 0x3d
 8007d5a:	2102      	movs	r1, #2
 8007d5c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681a      	ldr	r2, [r3, #0]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	3304      	adds	r3, #4
 8007d66:	0019      	movs	r1, r3
 8007d68:	0010      	movs	r0, r2
 8007d6a:	f000 fa5d 	bl	8008228 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2248      	movs	r2, #72	@ 0x48
 8007d72:	2101      	movs	r1, #1
 8007d74:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	223e      	movs	r2, #62	@ 0x3e
 8007d7a:	2101      	movs	r1, #1
 8007d7c:	5499      	strb	r1, [r3, r2]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	223f      	movs	r2, #63	@ 0x3f
 8007d82:	2101      	movs	r1, #1
 8007d84:	5499      	strb	r1, [r3, r2]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2240      	movs	r2, #64	@ 0x40
 8007d8a:	2101      	movs	r1, #1
 8007d8c:	5499      	strb	r1, [r3, r2]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2241      	movs	r2, #65	@ 0x41
 8007d92:	2101      	movs	r1, #1
 8007d94:	5499      	strb	r1, [r3, r2]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2242      	movs	r2, #66	@ 0x42
 8007d9a:	2101      	movs	r1, #1
 8007d9c:	5499      	strb	r1, [r3, r2]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2243      	movs	r2, #67	@ 0x43
 8007da2:	2101      	movs	r1, #1
 8007da4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2244      	movs	r2, #68	@ 0x44
 8007daa:	2101      	movs	r1, #1
 8007dac:	5499      	strb	r1, [r3, r2]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2245      	movs	r2, #69	@ 0x45
 8007db2:	2101      	movs	r1, #1
 8007db4:	5499      	strb	r1, [r3, r2]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2246      	movs	r2, #70	@ 0x46
 8007dba:	2101      	movs	r1, #1
 8007dbc:	5499      	strb	r1, [r3, r2]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2247      	movs	r2, #71	@ 0x47
 8007dc2:	2101      	movs	r1, #1
 8007dc4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	223d      	movs	r2, #61	@ 0x3d
 8007dca:	2101      	movs	r1, #1
 8007dcc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007dce:	2300      	movs	r3, #0
}
 8007dd0:	0018      	movs	r0, r3
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	b002      	add	sp, #8
 8007dd6:	bd80      	pop	{r7, pc}

08007dd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b084      	sub	sp, #16
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	68db      	ldr	r3, [r3, #12]
 8007de6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	691b      	ldr	r3, [r3, #16]
 8007dee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	2202      	movs	r2, #2
 8007df4:	4013      	ands	r3, r2
 8007df6:	d021      	beq.n	8007e3c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2202      	movs	r2, #2
 8007dfc:	4013      	ands	r3, r2
 8007dfe:	d01d      	beq.n	8007e3c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	2203      	movs	r2, #3
 8007e06:	4252      	negs	r2, r2
 8007e08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2201      	movs	r2, #1
 8007e0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	699b      	ldr	r3, [r3, #24]
 8007e16:	2203      	movs	r2, #3
 8007e18:	4013      	ands	r3, r2
 8007e1a:	d004      	beq.n	8007e26 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	0018      	movs	r0, r3
 8007e20:	f000 f9ea 	bl	80081f8 <HAL_TIM_IC_CaptureCallback>
 8007e24:	e007      	b.n	8007e36 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	0018      	movs	r0, r3
 8007e2a:	f000 f9dd 	bl	80081e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	0018      	movs	r0, r3
 8007e32:	f000 f9e9 	bl	8008208 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	2204      	movs	r2, #4
 8007e40:	4013      	ands	r3, r2
 8007e42:	d022      	beq.n	8007e8a <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2204      	movs	r2, #4
 8007e48:	4013      	ands	r3, r2
 8007e4a:	d01e      	beq.n	8007e8a <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	2205      	movs	r2, #5
 8007e52:	4252      	negs	r2, r2
 8007e54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2202      	movs	r2, #2
 8007e5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	699a      	ldr	r2, [r3, #24]
 8007e62:	23c0      	movs	r3, #192	@ 0xc0
 8007e64:	009b      	lsls	r3, r3, #2
 8007e66:	4013      	ands	r3, r2
 8007e68:	d004      	beq.n	8007e74 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	0018      	movs	r0, r3
 8007e6e:	f000 f9c3 	bl	80081f8 <HAL_TIM_IC_CaptureCallback>
 8007e72:	e007      	b.n	8007e84 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	0018      	movs	r0, r3
 8007e78:	f000 f9b6 	bl	80081e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	0018      	movs	r0, r3
 8007e80:	f000 f9c2 	bl	8008208 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2200      	movs	r2, #0
 8007e88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	2208      	movs	r2, #8
 8007e8e:	4013      	ands	r3, r2
 8007e90:	d021      	beq.n	8007ed6 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2208      	movs	r2, #8
 8007e96:	4013      	ands	r3, r2
 8007e98:	d01d      	beq.n	8007ed6 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	2209      	movs	r2, #9
 8007ea0:	4252      	negs	r2, r2
 8007ea2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2204      	movs	r2, #4
 8007ea8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	69db      	ldr	r3, [r3, #28]
 8007eb0:	2203      	movs	r2, #3
 8007eb2:	4013      	ands	r3, r2
 8007eb4:	d004      	beq.n	8007ec0 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	0018      	movs	r0, r3
 8007eba:	f000 f99d 	bl	80081f8 <HAL_TIM_IC_CaptureCallback>
 8007ebe:	e007      	b.n	8007ed0 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	0018      	movs	r0, r3
 8007ec4:	f000 f990 	bl	80081e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	0018      	movs	r0, r3
 8007ecc:	f000 f99c 	bl	8008208 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	2210      	movs	r2, #16
 8007eda:	4013      	ands	r3, r2
 8007edc:	d022      	beq.n	8007f24 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2210      	movs	r2, #16
 8007ee2:	4013      	ands	r3, r2
 8007ee4:	d01e      	beq.n	8007f24 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	2211      	movs	r2, #17
 8007eec:	4252      	negs	r2, r2
 8007eee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2208      	movs	r2, #8
 8007ef4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	69da      	ldr	r2, [r3, #28]
 8007efc:	23c0      	movs	r3, #192	@ 0xc0
 8007efe:	009b      	lsls	r3, r3, #2
 8007f00:	4013      	ands	r3, r2
 8007f02:	d004      	beq.n	8007f0e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	0018      	movs	r0, r3
 8007f08:	f000 f976 	bl	80081f8 <HAL_TIM_IC_CaptureCallback>
 8007f0c:	e007      	b.n	8007f1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	0018      	movs	r0, r3
 8007f12:	f000 f969 	bl	80081e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	0018      	movs	r0, r3
 8007f1a:	f000 f975 	bl	8008208 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2200      	movs	r2, #0
 8007f22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	2201      	movs	r2, #1
 8007f28:	4013      	ands	r3, r2
 8007f2a:	d00c      	beq.n	8007f46 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2201      	movs	r2, #1
 8007f30:	4013      	ands	r3, r2
 8007f32:	d008      	beq.n	8007f46 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	2202      	movs	r2, #2
 8007f3a:	4252      	negs	r2, r2
 8007f3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	0018      	movs	r0, r3
 8007f42:	f7f9 fadb 	bl	80014fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	2280      	movs	r2, #128	@ 0x80
 8007f4a:	4013      	ands	r3, r2
 8007f4c:	d104      	bne.n	8007f58 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007f4e:	68ba      	ldr	r2, [r7, #8]
 8007f50:	2380      	movs	r3, #128	@ 0x80
 8007f52:	019b      	lsls	r3, r3, #6
 8007f54:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007f56:	d00b      	beq.n	8007f70 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2280      	movs	r2, #128	@ 0x80
 8007f5c:	4013      	ands	r3, r2
 8007f5e:	d007      	beq.n	8007f70 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a1e      	ldr	r2, [pc, #120]	@ (8007fe0 <HAL_TIM_IRQHandler+0x208>)
 8007f66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	0018      	movs	r0, r3
 8007f6c:	f000 fd88 	bl	8008a80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007f70:	68ba      	ldr	r2, [r7, #8]
 8007f72:	2380      	movs	r3, #128	@ 0x80
 8007f74:	005b      	lsls	r3, r3, #1
 8007f76:	4013      	ands	r3, r2
 8007f78:	d00b      	beq.n	8007f92 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2280      	movs	r2, #128	@ 0x80
 8007f7e:	4013      	ands	r3, r2
 8007f80:	d007      	beq.n	8007f92 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a17      	ldr	r2, [pc, #92]	@ (8007fe4 <HAL_TIM_IRQHandler+0x20c>)
 8007f88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	0018      	movs	r0, r3
 8007f8e:	f000 fd7f 	bl	8008a90 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	2240      	movs	r2, #64	@ 0x40
 8007f96:	4013      	ands	r3, r2
 8007f98:	d00c      	beq.n	8007fb4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2240      	movs	r2, #64	@ 0x40
 8007f9e:	4013      	ands	r3, r2
 8007fa0:	d008      	beq.n	8007fb4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	2241      	movs	r2, #65	@ 0x41
 8007fa8:	4252      	negs	r2, r2
 8007faa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	0018      	movs	r0, r3
 8007fb0:	f000 f932 	bl	8008218 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	2220      	movs	r2, #32
 8007fb8:	4013      	ands	r3, r2
 8007fba:	d00c      	beq.n	8007fd6 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2220      	movs	r2, #32
 8007fc0:	4013      	ands	r3, r2
 8007fc2:	d008      	beq.n	8007fd6 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	2221      	movs	r2, #33	@ 0x21
 8007fca:	4252      	negs	r2, r2
 8007fcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	0018      	movs	r0, r3
 8007fd2:	f000 fd4d 	bl	8008a70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007fd6:	46c0      	nop			@ (mov r8, r8)
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	b004      	add	sp, #16
 8007fdc:	bd80      	pop	{r7, pc}
 8007fde:	46c0      	nop			@ (mov r8, r8)
 8007fe0:	ffffdf7f 	.word	0xffffdf7f
 8007fe4:	fffffeff 	.word	0xfffffeff

08007fe8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b086      	sub	sp, #24
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	60f8      	str	r0, [r7, #12]
 8007ff0:	60b9      	str	r1, [r7, #8]
 8007ff2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ff4:	2317      	movs	r3, #23
 8007ff6:	18fb      	adds	r3, r7, r3
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	223c      	movs	r2, #60	@ 0x3c
 8008000:	5c9b      	ldrb	r3, [r3, r2]
 8008002:	2b01      	cmp	r3, #1
 8008004:	d101      	bne.n	800800a <HAL_TIM_PWM_ConfigChannel+0x22>
 8008006:	2302      	movs	r3, #2
 8008008:	e0e5      	b.n	80081d6 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	223c      	movs	r2, #60	@ 0x3c
 800800e:	2101      	movs	r1, #1
 8008010:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2b14      	cmp	r3, #20
 8008016:	d900      	bls.n	800801a <HAL_TIM_PWM_ConfigChannel+0x32>
 8008018:	e0d1      	b.n	80081be <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	009a      	lsls	r2, r3, #2
 800801e:	4b70      	ldr	r3, [pc, #448]	@ (80081e0 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8008020:	18d3      	adds	r3, r2, r3
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	68ba      	ldr	r2, [r7, #8]
 800802c:	0011      	movs	r1, r2
 800802e:	0018      	movs	r0, r3
 8008030:	f000 f97e 	bl	8008330 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	699a      	ldr	r2, [r3, #24]
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	2108      	movs	r1, #8
 8008040:	430a      	orrs	r2, r1
 8008042:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	699a      	ldr	r2, [r3, #24]
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	2104      	movs	r1, #4
 8008050:	438a      	bics	r2, r1
 8008052:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	6999      	ldr	r1, [r3, #24]
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	691a      	ldr	r2, [r3, #16]
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	430a      	orrs	r2, r1
 8008064:	619a      	str	r2, [r3, #24]
      break;
 8008066:	e0af      	b.n	80081c8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	68ba      	ldr	r2, [r7, #8]
 800806e:	0011      	movs	r1, r2
 8008070:	0018      	movs	r0, r3
 8008072:	f000 f9dd 	bl	8008430 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	699a      	ldr	r2, [r3, #24]
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	2180      	movs	r1, #128	@ 0x80
 8008082:	0109      	lsls	r1, r1, #4
 8008084:	430a      	orrs	r2, r1
 8008086:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	699a      	ldr	r2, [r3, #24]
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4954      	ldr	r1, [pc, #336]	@ (80081e4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8008094:	400a      	ands	r2, r1
 8008096:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	6999      	ldr	r1, [r3, #24]
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	691b      	ldr	r3, [r3, #16]
 80080a2:	021a      	lsls	r2, r3, #8
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	430a      	orrs	r2, r1
 80080aa:	619a      	str	r2, [r3, #24]
      break;
 80080ac:	e08c      	b.n	80081c8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	68ba      	ldr	r2, [r7, #8]
 80080b4:	0011      	movs	r1, r2
 80080b6:	0018      	movs	r0, r3
 80080b8:	f000 fa38 	bl	800852c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	69da      	ldr	r2, [r3, #28]
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	2108      	movs	r1, #8
 80080c8:	430a      	orrs	r2, r1
 80080ca:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	69da      	ldr	r2, [r3, #28]
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	2104      	movs	r1, #4
 80080d8:	438a      	bics	r2, r1
 80080da:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	69d9      	ldr	r1, [r3, #28]
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	691a      	ldr	r2, [r3, #16]
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	430a      	orrs	r2, r1
 80080ec:	61da      	str	r2, [r3, #28]
      break;
 80080ee:	e06b      	b.n	80081c8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	68ba      	ldr	r2, [r7, #8]
 80080f6:	0011      	movs	r1, r2
 80080f8:	0018      	movs	r0, r3
 80080fa:	f000 fa99 	bl	8008630 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	69da      	ldr	r2, [r3, #28]
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	2180      	movs	r1, #128	@ 0x80
 800810a:	0109      	lsls	r1, r1, #4
 800810c:	430a      	orrs	r2, r1
 800810e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	69da      	ldr	r2, [r3, #28]
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4932      	ldr	r1, [pc, #200]	@ (80081e4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800811c:	400a      	ands	r2, r1
 800811e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	69d9      	ldr	r1, [r3, #28]
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	691b      	ldr	r3, [r3, #16]
 800812a:	021a      	lsls	r2, r3, #8
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	430a      	orrs	r2, r1
 8008132:	61da      	str	r2, [r3, #28]
      break;
 8008134:	e048      	b.n	80081c8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	68ba      	ldr	r2, [r7, #8]
 800813c:	0011      	movs	r1, r2
 800813e:	0018      	movs	r0, r3
 8008140:	f000 fada 	bl	80086f8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	2108      	movs	r1, #8
 8008150:	430a      	orrs	r2, r1
 8008152:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	2104      	movs	r1, #4
 8008160:	438a      	bics	r2, r1
 8008162:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	691a      	ldr	r2, [r3, #16]
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	430a      	orrs	r2, r1
 8008174:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008176:	e027      	b.n	80081c8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	68ba      	ldr	r2, [r7, #8]
 800817e:	0011      	movs	r1, r2
 8008180:	0018      	movs	r0, r3
 8008182:	f000 fb13 	bl	80087ac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	2180      	movs	r1, #128	@ 0x80
 8008192:	0109      	lsls	r1, r1, #4
 8008194:	430a      	orrs	r2, r1
 8008196:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4910      	ldr	r1, [pc, #64]	@ (80081e4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80081a4:	400a      	ands	r2, r1
 80081a6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	691b      	ldr	r3, [r3, #16]
 80081b2:	021a      	lsls	r2, r3, #8
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	430a      	orrs	r2, r1
 80081ba:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80081bc:	e004      	b.n	80081c8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80081be:	2317      	movs	r3, #23
 80081c0:	18fb      	adds	r3, r7, r3
 80081c2:	2201      	movs	r2, #1
 80081c4:	701a      	strb	r2, [r3, #0]
      break;
 80081c6:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	223c      	movs	r2, #60	@ 0x3c
 80081cc:	2100      	movs	r1, #0
 80081ce:	5499      	strb	r1, [r3, r2]

  return status;
 80081d0:	2317      	movs	r3, #23
 80081d2:	18fb      	adds	r3, r7, r3
 80081d4:	781b      	ldrb	r3, [r3, #0]
}
 80081d6:	0018      	movs	r0, r3
 80081d8:	46bd      	mov	sp, r7
 80081da:	b006      	add	sp, #24
 80081dc:	bd80      	pop	{r7, pc}
 80081de:	46c0      	nop			@ (mov r8, r8)
 80081e0:	0800ad5c 	.word	0x0800ad5c
 80081e4:	fffffbff 	.word	0xfffffbff

080081e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b082      	sub	sp, #8
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80081f0:	46c0      	nop			@ (mov r8, r8)
 80081f2:	46bd      	mov	sp, r7
 80081f4:	b002      	add	sp, #8
 80081f6:	bd80      	pop	{r7, pc}

080081f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b082      	sub	sp, #8
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008200:	46c0      	nop			@ (mov r8, r8)
 8008202:	46bd      	mov	sp, r7
 8008204:	b002      	add	sp, #8
 8008206:	bd80      	pop	{r7, pc}

08008208 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b082      	sub	sp, #8
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008210:	46c0      	nop			@ (mov r8, r8)
 8008212:	46bd      	mov	sp, r7
 8008214:	b002      	add	sp, #8
 8008216:	bd80      	pop	{r7, pc}

08008218 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b082      	sub	sp, #8
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008220:	46c0      	nop			@ (mov r8, r8)
 8008222:	46bd      	mov	sp, r7
 8008224:	b002      	add	sp, #8
 8008226:	bd80      	pop	{r7, pc}

08008228 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b084      	sub	sp, #16
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	4a37      	ldr	r2, [pc, #220]	@ (8008318 <TIM_Base_SetConfig+0xf0>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d008      	beq.n	8008252 <TIM_Base_SetConfig+0x2a>
 8008240:	687a      	ldr	r2, [r7, #4]
 8008242:	2380      	movs	r3, #128	@ 0x80
 8008244:	05db      	lsls	r3, r3, #23
 8008246:	429a      	cmp	r2, r3
 8008248:	d003      	beq.n	8008252 <TIM_Base_SetConfig+0x2a>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	4a33      	ldr	r2, [pc, #204]	@ (800831c <TIM_Base_SetConfig+0xf4>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d108      	bne.n	8008264 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	2270      	movs	r2, #112	@ 0x70
 8008256:	4393      	bics	r3, r2
 8008258:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	68fa      	ldr	r2, [r7, #12]
 8008260:	4313      	orrs	r3, r2
 8008262:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	4a2c      	ldr	r2, [pc, #176]	@ (8008318 <TIM_Base_SetConfig+0xf0>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d014      	beq.n	8008296 <TIM_Base_SetConfig+0x6e>
 800826c:	687a      	ldr	r2, [r7, #4]
 800826e:	2380      	movs	r3, #128	@ 0x80
 8008270:	05db      	lsls	r3, r3, #23
 8008272:	429a      	cmp	r2, r3
 8008274:	d00f      	beq.n	8008296 <TIM_Base_SetConfig+0x6e>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	4a28      	ldr	r2, [pc, #160]	@ (800831c <TIM_Base_SetConfig+0xf4>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d00b      	beq.n	8008296 <TIM_Base_SetConfig+0x6e>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	4a27      	ldr	r2, [pc, #156]	@ (8008320 <TIM_Base_SetConfig+0xf8>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d007      	beq.n	8008296 <TIM_Base_SetConfig+0x6e>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	4a26      	ldr	r2, [pc, #152]	@ (8008324 <TIM_Base_SetConfig+0xfc>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d003      	beq.n	8008296 <TIM_Base_SetConfig+0x6e>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	4a25      	ldr	r2, [pc, #148]	@ (8008328 <TIM_Base_SetConfig+0x100>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d108      	bne.n	80082a8 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	4a24      	ldr	r2, [pc, #144]	@ (800832c <TIM_Base_SetConfig+0x104>)
 800829a:	4013      	ands	r3, r2
 800829c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	68db      	ldr	r3, [r3, #12]
 80082a2:	68fa      	ldr	r2, [r7, #12]
 80082a4:	4313      	orrs	r3, r2
 80082a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	2280      	movs	r2, #128	@ 0x80
 80082ac:	4393      	bics	r3, r2
 80082ae:	001a      	movs	r2, r3
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	695b      	ldr	r3, [r3, #20]
 80082b4:	4313      	orrs	r3, r2
 80082b6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	68fa      	ldr	r2, [r7, #12]
 80082bc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	689a      	ldr	r2, [r3, #8]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	4a11      	ldr	r2, [pc, #68]	@ (8008318 <TIM_Base_SetConfig+0xf0>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d007      	beq.n	80082e6 <TIM_Base_SetConfig+0xbe>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	4a12      	ldr	r2, [pc, #72]	@ (8008324 <TIM_Base_SetConfig+0xfc>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d003      	beq.n	80082e6 <TIM_Base_SetConfig+0xbe>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	4a11      	ldr	r2, [pc, #68]	@ (8008328 <TIM_Base_SetConfig+0x100>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d103      	bne.n	80082ee <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	691a      	ldr	r2, [r3, #16]
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2201      	movs	r2, #1
 80082f2:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	691b      	ldr	r3, [r3, #16]
 80082f8:	2201      	movs	r2, #1
 80082fa:	4013      	ands	r3, r2
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d106      	bne.n	800830e <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	691b      	ldr	r3, [r3, #16]
 8008304:	2201      	movs	r2, #1
 8008306:	4393      	bics	r3, r2
 8008308:	001a      	movs	r2, r3
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	611a      	str	r2, [r3, #16]
  }
}
 800830e:	46c0      	nop			@ (mov r8, r8)
 8008310:	46bd      	mov	sp, r7
 8008312:	b004      	add	sp, #16
 8008314:	bd80      	pop	{r7, pc}
 8008316:	46c0      	nop			@ (mov r8, r8)
 8008318:	40012c00 	.word	0x40012c00
 800831c:	40000400 	.word	0x40000400
 8008320:	40002000 	.word	0x40002000
 8008324:	40014400 	.word	0x40014400
 8008328:	40014800 	.word	0x40014800
 800832c:	fffffcff 	.word	0xfffffcff

08008330 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b086      	sub	sp, #24
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6a1b      	ldr	r3, [r3, #32]
 800833e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6a1b      	ldr	r3, [r3, #32]
 8008344:	2201      	movs	r2, #1
 8008346:	4393      	bics	r3, r2
 8008348:	001a      	movs	r2, r3
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	685b      	ldr	r3, [r3, #4]
 8008352:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	699b      	ldr	r3, [r3, #24]
 8008358:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	4a2e      	ldr	r2, [pc, #184]	@ (8008418 <TIM_OC1_SetConfig+0xe8>)
 800835e:	4013      	ands	r3, r2
 8008360:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2203      	movs	r2, #3
 8008366:	4393      	bics	r3, r2
 8008368:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	68fa      	ldr	r2, [r7, #12]
 8008370:	4313      	orrs	r3, r2
 8008372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	2202      	movs	r2, #2
 8008378:	4393      	bics	r3, r2
 800837a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	689b      	ldr	r3, [r3, #8]
 8008380:	697a      	ldr	r2, [r7, #20]
 8008382:	4313      	orrs	r3, r2
 8008384:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	4a24      	ldr	r2, [pc, #144]	@ (800841c <TIM_OC1_SetConfig+0xec>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d007      	beq.n	800839e <TIM_OC1_SetConfig+0x6e>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	4a23      	ldr	r2, [pc, #140]	@ (8008420 <TIM_OC1_SetConfig+0xf0>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d003      	beq.n	800839e <TIM_OC1_SetConfig+0x6e>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	4a22      	ldr	r2, [pc, #136]	@ (8008424 <TIM_OC1_SetConfig+0xf4>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d10c      	bne.n	80083b8 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	2208      	movs	r2, #8
 80083a2:	4393      	bics	r3, r2
 80083a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	68db      	ldr	r3, [r3, #12]
 80083aa:	697a      	ldr	r2, [r7, #20]
 80083ac:	4313      	orrs	r3, r2
 80083ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	2204      	movs	r2, #4
 80083b4:	4393      	bics	r3, r2
 80083b6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	4a18      	ldr	r2, [pc, #96]	@ (800841c <TIM_OC1_SetConfig+0xec>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d007      	beq.n	80083d0 <TIM_OC1_SetConfig+0xa0>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	4a17      	ldr	r2, [pc, #92]	@ (8008420 <TIM_OC1_SetConfig+0xf0>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d003      	beq.n	80083d0 <TIM_OC1_SetConfig+0xa0>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	4a16      	ldr	r2, [pc, #88]	@ (8008424 <TIM_OC1_SetConfig+0xf4>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d111      	bne.n	80083f4 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	4a15      	ldr	r2, [pc, #84]	@ (8008428 <TIM_OC1_SetConfig+0xf8>)
 80083d4:	4013      	ands	r3, r2
 80083d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	4a14      	ldr	r2, [pc, #80]	@ (800842c <TIM_OC1_SetConfig+0xfc>)
 80083dc:	4013      	ands	r3, r2
 80083de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	695b      	ldr	r3, [r3, #20]
 80083e4:	693a      	ldr	r2, [r7, #16]
 80083e6:	4313      	orrs	r3, r2
 80083e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	699b      	ldr	r3, [r3, #24]
 80083ee:	693a      	ldr	r2, [r7, #16]
 80083f0:	4313      	orrs	r3, r2
 80083f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	693a      	ldr	r2, [r7, #16]
 80083f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	68fa      	ldr	r2, [r7, #12]
 80083fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	685a      	ldr	r2, [r3, #4]
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	697a      	ldr	r2, [r7, #20]
 800840c:	621a      	str	r2, [r3, #32]
}
 800840e:	46c0      	nop			@ (mov r8, r8)
 8008410:	46bd      	mov	sp, r7
 8008412:	b006      	add	sp, #24
 8008414:	bd80      	pop	{r7, pc}
 8008416:	46c0      	nop			@ (mov r8, r8)
 8008418:	fffeff8f 	.word	0xfffeff8f
 800841c:	40012c00 	.word	0x40012c00
 8008420:	40014400 	.word	0x40014400
 8008424:	40014800 	.word	0x40014800
 8008428:	fffffeff 	.word	0xfffffeff
 800842c:	fffffdff 	.word	0xfffffdff

08008430 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b086      	sub	sp, #24
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6a1b      	ldr	r3, [r3, #32]
 800843e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6a1b      	ldr	r3, [r3, #32]
 8008444:	2210      	movs	r2, #16
 8008446:	4393      	bics	r3, r2
 8008448:	001a      	movs	r2, r3
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	699b      	ldr	r3, [r3, #24]
 8008458:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	4a2c      	ldr	r2, [pc, #176]	@ (8008510 <TIM_OC2_SetConfig+0xe0>)
 800845e:	4013      	ands	r3, r2
 8008460:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	4a2b      	ldr	r2, [pc, #172]	@ (8008514 <TIM_OC2_SetConfig+0xe4>)
 8008466:	4013      	ands	r3, r2
 8008468:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	021b      	lsls	r3, r3, #8
 8008470:	68fa      	ldr	r2, [r7, #12]
 8008472:	4313      	orrs	r3, r2
 8008474:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	2220      	movs	r2, #32
 800847a:	4393      	bics	r3, r2
 800847c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	689b      	ldr	r3, [r3, #8]
 8008482:	011b      	lsls	r3, r3, #4
 8008484:	697a      	ldr	r2, [r7, #20]
 8008486:	4313      	orrs	r3, r2
 8008488:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	4a22      	ldr	r2, [pc, #136]	@ (8008518 <TIM_OC2_SetConfig+0xe8>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d10d      	bne.n	80084ae <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	2280      	movs	r2, #128	@ 0x80
 8008496:	4393      	bics	r3, r2
 8008498:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	68db      	ldr	r3, [r3, #12]
 800849e:	011b      	lsls	r3, r3, #4
 80084a0:	697a      	ldr	r2, [r7, #20]
 80084a2:	4313      	orrs	r3, r2
 80084a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	2240      	movs	r2, #64	@ 0x40
 80084aa:	4393      	bics	r3, r2
 80084ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	4a19      	ldr	r2, [pc, #100]	@ (8008518 <TIM_OC2_SetConfig+0xe8>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d007      	beq.n	80084c6 <TIM_OC2_SetConfig+0x96>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	4a18      	ldr	r2, [pc, #96]	@ (800851c <TIM_OC2_SetConfig+0xec>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d003      	beq.n	80084c6 <TIM_OC2_SetConfig+0x96>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	4a17      	ldr	r2, [pc, #92]	@ (8008520 <TIM_OC2_SetConfig+0xf0>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d113      	bne.n	80084ee <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	4a16      	ldr	r2, [pc, #88]	@ (8008524 <TIM_OC2_SetConfig+0xf4>)
 80084ca:	4013      	ands	r3, r2
 80084cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	4a15      	ldr	r2, [pc, #84]	@ (8008528 <TIM_OC2_SetConfig+0xf8>)
 80084d2:	4013      	ands	r3, r2
 80084d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	695b      	ldr	r3, [r3, #20]
 80084da:	009b      	lsls	r3, r3, #2
 80084dc:	693a      	ldr	r2, [r7, #16]
 80084de:	4313      	orrs	r3, r2
 80084e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	699b      	ldr	r3, [r3, #24]
 80084e6:	009b      	lsls	r3, r3, #2
 80084e8:	693a      	ldr	r2, [r7, #16]
 80084ea:	4313      	orrs	r3, r2
 80084ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	693a      	ldr	r2, [r7, #16]
 80084f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	68fa      	ldr	r2, [r7, #12]
 80084f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	685a      	ldr	r2, [r3, #4]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	697a      	ldr	r2, [r7, #20]
 8008506:	621a      	str	r2, [r3, #32]
}
 8008508:	46c0      	nop			@ (mov r8, r8)
 800850a:	46bd      	mov	sp, r7
 800850c:	b006      	add	sp, #24
 800850e:	bd80      	pop	{r7, pc}
 8008510:	feff8fff 	.word	0xfeff8fff
 8008514:	fffffcff 	.word	0xfffffcff
 8008518:	40012c00 	.word	0x40012c00
 800851c:	40014400 	.word	0x40014400
 8008520:	40014800 	.word	0x40014800
 8008524:	fffffbff 	.word	0xfffffbff
 8008528:	fffff7ff 	.word	0xfffff7ff

0800852c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b086      	sub	sp, #24
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6a1b      	ldr	r3, [r3, #32]
 800853a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6a1b      	ldr	r3, [r3, #32]
 8008540:	4a31      	ldr	r2, [pc, #196]	@ (8008608 <TIM_OC3_SetConfig+0xdc>)
 8008542:	401a      	ands	r2, r3
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	69db      	ldr	r3, [r3, #28]
 8008552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	4a2d      	ldr	r2, [pc, #180]	@ (800860c <TIM_OC3_SetConfig+0xe0>)
 8008558:	4013      	ands	r3, r2
 800855a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	2203      	movs	r2, #3
 8008560:	4393      	bics	r3, r2
 8008562:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	68fa      	ldr	r2, [r7, #12]
 800856a:	4313      	orrs	r3, r2
 800856c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	4a27      	ldr	r2, [pc, #156]	@ (8008610 <TIM_OC3_SetConfig+0xe4>)
 8008572:	4013      	ands	r3, r2
 8008574:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	689b      	ldr	r3, [r3, #8]
 800857a:	021b      	lsls	r3, r3, #8
 800857c:	697a      	ldr	r2, [r7, #20]
 800857e:	4313      	orrs	r3, r2
 8008580:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	4a23      	ldr	r2, [pc, #140]	@ (8008614 <TIM_OC3_SetConfig+0xe8>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d10d      	bne.n	80085a6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	4a22      	ldr	r2, [pc, #136]	@ (8008618 <TIM_OC3_SetConfig+0xec>)
 800858e:	4013      	ands	r3, r2
 8008590:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	68db      	ldr	r3, [r3, #12]
 8008596:	021b      	lsls	r3, r3, #8
 8008598:	697a      	ldr	r2, [r7, #20]
 800859a:	4313      	orrs	r3, r2
 800859c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	4a1e      	ldr	r2, [pc, #120]	@ (800861c <TIM_OC3_SetConfig+0xf0>)
 80085a2:	4013      	ands	r3, r2
 80085a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	4a1a      	ldr	r2, [pc, #104]	@ (8008614 <TIM_OC3_SetConfig+0xe8>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d007      	beq.n	80085be <TIM_OC3_SetConfig+0x92>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	4a1b      	ldr	r2, [pc, #108]	@ (8008620 <TIM_OC3_SetConfig+0xf4>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d003      	beq.n	80085be <TIM_OC3_SetConfig+0x92>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	4a1a      	ldr	r2, [pc, #104]	@ (8008624 <TIM_OC3_SetConfig+0xf8>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d113      	bne.n	80085e6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	4a19      	ldr	r2, [pc, #100]	@ (8008628 <TIM_OC3_SetConfig+0xfc>)
 80085c2:	4013      	ands	r3, r2
 80085c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	4a18      	ldr	r2, [pc, #96]	@ (800862c <TIM_OC3_SetConfig+0x100>)
 80085ca:	4013      	ands	r3, r2
 80085cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	695b      	ldr	r3, [r3, #20]
 80085d2:	011b      	lsls	r3, r3, #4
 80085d4:	693a      	ldr	r2, [r7, #16]
 80085d6:	4313      	orrs	r3, r2
 80085d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	699b      	ldr	r3, [r3, #24]
 80085de:	011b      	lsls	r3, r3, #4
 80085e0:	693a      	ldr	r2, [r7, #16]
 80085e2:	4313      	orrs	r3, r2
 80085e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	693a      	ldr	r2, [r7, #16]
 80085ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	68fa      	ldr	r2, [r7, #12]
 80085f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	685a      	ldr	r2, [r3, #4]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	697a      	ldr	r2, [r7, #20]
 80085fe:	621a      	str	r2, [r3, #32]
}
 8008600:	46c0      	nop			@ (mov r8, r8)
 8008602:	46bd      	mov	sp, r7
 8008604:	b006      	add	sp, #24
 8008606:	bd80      	pop	{r7, pc}
 8008608:	fffffeff 	.word	0xfffffeff
 800860c:	fffeff8f 	.word	0xfffeff8f
 8008610:	fffffdff 	.word	0xfffffdff
 8008614:	40012c00 	.word	0x40012c00
 8008618:	fffff7ff 	.word	0xfffff7ff
 800861c:	fffffbff 	.word	0xfffffbff
 8008620:	40014400 	.word	0x40014400
 8008624:	40014800 	.word	0x40014800
 8008628:	ffffefff 	.word	0xffffefff
 800862c:	ffffdfff 	.word	0xffffdfff

08008630 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b086      	sub	sp, #24
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6a1b      	ldr	r3, [r3, #32]
 800863e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6a1b      	ldr	r3, [r3, #32]
 8008644:	4a24      	ldr	r2, [pc, #144]	@ (80086d8 <TIM_OC4_SetConfig+0xa8>)
 8008646:	401a      	ands	r2, r3
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	685b      	ldr	r3, [r3, #4]
 8008650:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	69db      	ldr	r3, [r3, #28]
 8008656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	4a20      	ldr	r2, [pc, #128]	@ (80086dc <TIM_OC4_SetConfig+0xac>)
 800865c:	4013      	ands	r3, r2
 800865e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	4a1f      	ldr	r2, [pc, #124]	@ (80086e0 <TIM_OC4_SetConfig+0xb0>)
 8008664:	4013      	ands	r3, r2
 8008666:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	021b      	lsls	r3, r3, #8
 800866e:	68fa      	ldr	r2, [r7, #12]
 8008670:	4313      	orrs	r3, r2
 8008672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	4a1b      	ldr	r2, [pc, #108]	@ (80086e4 <TIM_OC4_SetConfig+0xb4>)
 8008678:	4013      	ands	r3, r2
 800867a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	689b      	ldr	r3, [r3, #8]
 8008680:	031b      	lsls	r3, r3, #12
 8008682:	693a      	ldr	r2, [r7, #16]
 8008684:	4313      	orrs	r3, r2
 8008686:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	4a17      	ldr	r2, [pc, #92]	@ (80086e8 <TIM_OC4_SetConfig+0xb8>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d007      	beq.n	80086a0 <TIM_OC4_SetConfig+0x70>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	4a16      	ldr	r2, [pc, #88]	@ (80086ec <TIM_OC4_SetConfig+0xbc>)
 8008694:	4293      	cmp	r3, r2
 8008696:	d003      	beq.n	80086a0 <TIM_OC4_SetConfig+0x70>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	4a15      	ldr	r2, [pc, #84]	@ (80086f0 <TIM_OC4_SetConfig+0xc0>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d109      	bne.n	80086b4 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	4a14      	ldr	r2, [pc, #80]	@ (80086f4 <TIM_OC4_SetConfig+0xc4>)
 80086a4:	4013      	ands	r3, r2
 80086a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	695b      	ldr	r3, [r3, #20]
 80086ac:	019b      	lsls	r3, r3, #6
 80086ae:	697a      	ldr	r2, [r7, #20]
 80086b0:	4313      	orrs	r3, r2
 80086b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	697a      	ldr	r2, [r7, #20]
 80086b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	68fa      	ldr	r2, [r7, #12]
 80086be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	685a      	ldr	r2, [r3, #4]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	693a      	ldr	r2, [r7, #16]
 80086cc:	621a      	str	r2, [r3, #32]
}
 80086ce:	46c0      	nop			@ (mov r8, r8)
 80086d0:	46bd      	mov	sp, r7
 80086d2:	b006      	add	sp, #24
 80086d4:	bd80      	pop	{r7, pc}
 80086d6:	46c0      	nop			@ (mov r8, r8)
 80086d8:	ffffefff 	.word	0xffffefff
 80086dc:	feff8fff 	.word	0xfeff8fff
 80086e0:	fffffcff 	.word	0xfffffcff
 80086e4:	ffffdfff 	.word	0xffffdfff
 80086e8:	40012c00 	.word	0x40012c00
 80086ec:	40014400 	.word	0x40014400
 80086f0:	40014800 	.word	0x40014800
 80086f4:	ffffbfff 	.word	0xffffbfff

080086f8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b086      	sub	sp, #24
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6a1b      	ldr	r3, [r3, #32]
 8008706:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6a1b      	ldr	r3, [r3, #32]
 800870c:	4a21      	ldr	r2, [pc, #132]	@ (8008794 <TIM_OC5_SetConfig+0x9c>)
 800870e:	401a      	ands	r2, r3
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	685b      	ldr	r3, [r3, #4]
 8008718:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800871e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	4a1d      	ldr	r2, [pc, #116]	@ (8008798 <TIM_OC5_SetConfig+0xa0>)
 8008724:	4013      	ands	r3, r2
 8008726:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	68fa      	ldr	r2, [r7, #12]
 800872e:	4313      	orrs	r3, r2
 8008730:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	4a19      	ldr	r2, [pc, #100]	@ (800879c <TIM_OC5_SetConfig+0xa4>)
 8008736:	4013      	ands	r3, r2
 8008738:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	689b      	ldr	r3, [r3, #8]
 800873e:	041b      	lsls	r3, r3, #16
 8008740:	693a      	ldr	r2, [r7, #16]
 8008742:	4313      	orrs	r3, r2
 8008744:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	4a15      	ldr	r2, [pc, #84]	@ (80087a0 <TIM_OC5_SetConfig+0xa8>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d007      	beq.n	800875e <TIM_OC5_SetConfig+0x66>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	4a14      	ldr	r2, [pc, #80]	@ (80087a4 <TIM_OC5_SetConfig+0xac>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d003      	beq.n	800875e <TIM_OC5_SetConfig+0x66>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	4a13      	ldr	r2, [pc, #76]	@ (80087a8 <TIM_OC5_SetConfig+0xb0>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d109      	bne.n	8008772 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	4a0c      	ldr	r2, [pc, #48]	@ (8008794 <TIM_OC5_SetConfig+0x9c>)
 8008762:	4013      	ands	r3, r2
 8008764:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	695b      	ldr	r3, [r3, #20]
 800876a:	021b      	lsls	r3, r3, #8
 800876c:	697a      	ldr	r2, [r7, #20]
 800876e:	4313      	orrs	r3, r2
 8008770:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	697a      	ldr	r2, [r7, #20]
 8008776:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	68fa      	ldr	r2, [r7, #12]
 800877c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	685a      	ldr	r2, [r3, #4]
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	693a      	ldr	r2, [r7, #16]
 800878a:	621a      	str	r2, [r3, #32]
}
 800878c:	46c0      	nop			@ (mov r8, r8)
 800878e:	46bd      	mov	sp, r7
 8008790:	b006      	add	sp, #24
 8008792:	bd80      	pop	{r7, pc}
 8008794:	fffeffff 	.word	0xfffeffff
 8008798:	fffeff8f 	.word	0xfffeff8f
 800879c:	fffdffff 	.word	0xfffdffff
 80087a0:	40012c00 	.word	0x40012c00
 80087a4:	40014400 	.word	0x40014400
 80087a8:	40014800 	.word	0x40014800

080087ac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b086      	sub	sp, #24
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6a1b      	ldr	r3, [r3, #32]
 80087ba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6a1b      	ldr	r3, [r3, #32]
 80087c0:	4a22      	ldr	r2, [pc, #136]	@ (800884c <TIM_OC6_SetConfig+0xa0>)
 80087c2:	401a      	ands	r2, r3
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	685b      	ldr	r3, [r3, #4]
 80087cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	4a1e      	ldr	r2, [pc, #120]	@ (8008850 <TIM_OC6_SetConfig+0xa4>)
 80087d8:	4013      	ands	r3, r2
 80087da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	021b      	lsls	r3, r3, #8
 80087e2:	68fa      	ldr	r2, [r7, #12]
 80087e4:	4313      	orrs	r3, r2
 80087e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	4a1a      	ldr	r2, [pc, #104]	@ (8008854 <TIM_OC6_SetConfig+0xa8>)
 80087ec:	4013      	ands	r3, r2
 80087ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	689b      	ldr	r3, [r3, #8]
 80087f4:	051b      	lsls	r3, r3, #20
 80087f6:	693a      	ldr	r2, [r7, #16]
 80087f8:	4313      	orrs	r3, r2
 80087fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	4a16      	ldr	r2, [pc, #88]	@ (8008858 <TIM_OC6_SetConfig+0xac>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d007      	beq.n	8008814 <TIM_OC6_SetConfig+0x68>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	4a15      	ldr	r2, [pc, #84]	@ (800885c <TIM_OC6_SetConfig+0xb0>)
 8008808:	4293      	cmp	r3, r2
 800880a:	d003      	beq.n	8008814 <TIM_OC6_SetConfig+0x68>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	4a14      	ldr	r2, [pc, #80]	@ (8008860 <TIM_OC6_SetConfig+0xb4>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d109      	bne.n	8008828 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	4a13      	ldr	r2, [pc, #76]	@ (8008864 <TIM_OC6_SetConfig+0xb8>)
 8008818:	4013      	ands	r3, r2
 800881a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	695b      	ldr	r3, [r3, #20]
 8008820:	029b      	lsls	r3, r3, #10
 8008822:	697a      	ldr	r2, [r7, #20]
 8008824:	4313      	orrs	r3, r2
 8008826:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	697a      	ldr	r2, [r7, #20]
 800882c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	68fa      	ldr	r2, [r7, #12]
 8008832:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	685a      	ldr	r2, [r3, #4]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	693a      	ldr	r2, [r7, #16]
 8008840:	621a      	str	r2, [r3, #32]
}
 8008842:	46c0      	nop			@ (mov r8, r8)
 8008844:	46bd      	mov	sp, r7
 8008846:	b006      	add	sp, #24
 8008848:	bd80      	pop	{r7, pc}
 800884a:	46c0      	nop			@ (mov r8, r8)
 800884c:	ffefffff 	.word	0xffefffff
 8008850:	feff8fff 	.word	0xfeff8fff
 8008854:	ffdfffff 	.word	0xffdfffff
 8008858:	40012c00 	.word	0x40012c00
 800885c:	40014400 	.word	0x40014400
 8008860:	40014800 	.word	0x40014800
 8008864:	fffbffff 	.word	0xfffbffff

08008868 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b084      	sub	sp, #16
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	223c      	movs	r2, #60	@ 0x3c
 8008876:	5c9b      	ldrb	r3, [r3, r2]
 8008878:	2b01      	cmp	r3, #1
 800887a:	d101      	bne.n	8008880 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800887c:	2302      	movs	r3, #2
 800887e:	e050      	b.n	8008922 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	223c      	movs	r2, #60	@ 0x3c
 8008884:	2101      	movs	r1, #1
 8008886:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	223d      	movs	r2, #61	@ 0x3d
 800888c:	2102      	movs	r1, #2
 800888e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	685b      	ldr	r3, [r3, #4]
 8008896:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	689b      	ldr	r3, [r3, #8]
 800889e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4a21      	ldr	r2, [pc, #132]	@ (800892c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d108      	bne.n	80088bc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	4a20      	ldr	r2, [pc, #128]	@ (8008930 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80088ae:	4013      	ands	r3, r2
 80088b0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	68fa      	ldr	r2, [r7, #12]
 80088b8:	4313      	orrs	r3, r2
 80088ba:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	2270      	movs	r2, #112	@ 0x70
 80088c0:	4393      	bics	r3, r2
 80088c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	68fa      	ldr	r2, [r7, #12]
 80088ca:	4313      	orrs	r3, r2
 80088cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	68fa      	ldr	r2, [r7, #12]
 80088d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4a14      	ldr	r2, [pc, #80]	@ (800892c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d00a      	beq.n	80088f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681a      	ldr	r2, [r3, #0]
 80088e4:	2380      	movs	r3, #128	@ 0x80
 80088e6:	05db      	lsls	r3, r3, #23
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d004      	beq.n	80088f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4a10      	ldr	r2, [pc, #64]	@ (8008934 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d10c      	bne.n	8008910 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	2280      	movs	r2, #128	@ 0x80
 80088fa:	4393      	bics	r3, r2
 80088fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	689b      	ldr	r3, [r3, #8]
 8008902:	68ba      	ldr	r2, [r7, #8]
 8008904:	4313      	orrs	r3, r2
 8008906:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	68ba      	ldr	r2, [r7, #8]
 800890e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	223d      	movs	r2, #61	@ 0x3d
 8008914:	2101      	movs	r1, #1
 8008916:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	223c      	movs	r2, #60	@ 0x3c
 800891c:	2100      	movs	r1, #0
 800891e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008920:	2300      	movs	r3, #0
}
 8008922:	0018      	movs	r0, r3
 8008924:	46bd      	mov	sp, r7
 8008926:	b004      	add	sp, #16
 8008928:	bd80      	pop	{r7, pc}
 800892a:	46c0      	nop			@ (mov r8, r8)
 800892c:	40012c00 	.word	0x40012c00
 8008930:	ff0fffff 	.word	0xff0fffff
 8008934:	40000400 	.word	0x40000400

08008938 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b084      	sub	sp, #16
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008942:	2300      	movs	r3, #0
 8008944:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	223c      	movs	r2, #60	@ 0x3c
 800894a:	5c9b      	ldrb	r3, [r3, r2]
 800894c:	2b01      	cmp	r3, #1
 800894e:	d101      	bne.n	8008954 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008950:	2302      	movs	r3, #2
 8008952:	e06f      	b.n	8008a34 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	223c      	movs	r2, #60	@ 0x3c
 8008958:	2101      	movs	r1, #1
 800895a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	22ff      	movs	r2, #255	@ 0xff
 8008960:	4393      	bics	r3, r2
 8008962:	001a      	movs	r2, r3
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	68db      	ldr	r3, [r3, #12]
 8008968:	4313      	orrs	r3, r2
 800896a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	4a33      	ldr	r2, [pc, #204]	@ (8008a3c <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8008970:	401a      	ands	r2, r3
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	689b      	ldr	r3, [r3, #8]
 8008976:	4313      	orrs	r3, r2
 8008978:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	4a30      	ldr	r2, [pc, #192]	@ (8008a40 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800897e:	401a      	ands	r2, r3
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	685b      	ldr	r3, [r3, #4]
 8008984:	4313      	orrs	r3, r2
 8008986:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	4a2e      	ldr	r2, [pc, #184]	@ (8008a44 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 800898c:	401a      	ands	r2, r3
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4313      	orrs	r3, r2
 8008994:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	4a2b      	ldr	r2, [pc, #172]	@ (8008a48 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800899a:	401a      	ands	r2, r3
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	691b      	ldr	r3, [r3, #16]
 80089a0:	4313      	orrs	r3, r2
 80089a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	4a29      	ldr	r2, [pc, #164]	@ (8008a4c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80089a8:	401a      	ands	r2, r3
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	695b      	ldr	r3, [r3, #20]
 80089ae:	4313      	orrs	r3, r2
 80089b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	4a26      	ldr	r2, [pc, #152]	@ (8008a50 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80089b6:	401a      	ands	r2, r3
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089bc:	4313      	orrs	r3, r2
 80089be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	4a24      	ldr	r2, [pc, #144]	@ (8008a54 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80089c4:	401a      	ands	r2, r3
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	699b      	ldr	r3, [r3, #24]
 80089ca:	041b      	lsls	r3, r3, #16
 80089cc:	4313      	orrs	r3, r2
 80089ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	4a21      	ldr	r2, [pc, #132]	@ (8008a58 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80089d4:	401a      	ands	r2, r3
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	69db      	ldr	r3, [r3, #28]
 80089da:	4313      	orrs	r3, r2
 80089dc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	4a1e      	ldr	r2, [pc, #120]	@ (8008a5c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d11c      	bne.n	8008a22 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	4a1d      	ldr	r2, [pc, #116]	@ (8008a60 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80089ec:	401a      	ands	r2, r3
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089f2:	051b      	lsls	r3, r3, #20
 80089f4:	4313      	orrs	r3, r2
 80089f6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	4a1a      	ldr	r2, [pc, #104]	@ (8008a64 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80089fc:	401a      	ands	r2, r3
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	6a1b      	ldr	r3, [r3, #32]
 8008a02:	4313      	orrs	r3, r2
 8008a04:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	4a17      	ldr	r2, [pc, #92]	@ (8008a68 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8008a0a:	401a      	ands	r2, r3
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a10:	4313      	orrs	r3, r2
 8008a12:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	4a15      	ldr	r2, [pc, #84]	@ (8008a6c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8008a18:	401a      	ands	r2, r3
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a1e:	4313      	orrs	r3, r2
 8008a20:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	68fa      	ldr	r2, [r7, #12]
 8008a28:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	223c      	movs	r2, #60	@ 0x3c
 8008a2e:	2100      	movs	r1, #0
 8008a30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008a32:	2300      	movs	r3, #0
}
 8008a34:	0018      	movs	r0, r3
 8008a36:	46bd      	mov	sp, r7
 8008a38:	b004      	add	sp, #16
 8008a3a:	bd80      	pop	{r7, pc}
 8008a3c:	fffffcff 	.word	0xfffffcff
 8008a40:	fffffbff 	.word	0xfffffbff
 8008a44:	fffff7ff 	.word	0xfffff7ff
 8008a48:	ffffefff 	.word	0xffffefff
 8008a4c:	ffffdfff 	.word	0xffffdfff
 8008a50:	ffffbfff 	.word	0xffffbfff
 8008a54:	fff0ffff 	.word	0xfff0ffff
 8008a58:	efffffff 	.word	0xefffffff
 8008a5c:	40012c00 	.word	0x40012c00
 8008a60:	ff0fffff 	.word	0xff0fffff
 8008a64:	feffffff 	.word	0xfeffffff
 8008a68:	fdffffff 	.word	0xfdffffff
 8008a6c:	dfffffff 	.word	0xdfffffff

08008a70 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b082      	sub	sp, #8
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008a78:	46c0      	nop			@ (mov r8, r8)
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	b002      	add	sp, #8
 8008a7e:	bd80      	pop	{r7, pc}

08008a80 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b082      	sub	sp, #8
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008a88:	46c0      	nop			@ (mov r8, r8)
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	b002      	add	sp, #8
 8008a8e:	bd80      	pop	{r7, pc}

08008a90 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b082      	sub	sp, #8
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008a98:	46c0      	nop			@ (mov r8, r8)
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	b002      	add	sp, #8
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b082      	sub	sp, #8
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d101      	bne.n	8008ab2 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8008aae:	2301      	movs	r3, #1
 8008ab0:	e032      	b.n	8008b18 <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2288      	movs	r2, #136	@ 0x88
 8008ab6:	2124      	movs	r1, #36	@ 0x24
 8008ab8:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	681a      	ldr	r2, [r3, #0]
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	2101      	movs	r1, #1
 8008ac6:	438a      	bics	r2, r1
 8008ac8:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	0018      	movs	r0, r3
 8008ae6:	f7fa fed3 	bl	8003890 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2290      	movs	r2, #144	@ 0x90
 8008aee:	2100      	movs	r1, #0
 8008af0:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2288      	movs	r2, #136	@ 0x88
 8008af6:	2100      	movs	r1, #0
 8008af8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	228c      	movs	r2, #140	@ 0x8c
 8008afe:	2100      	movs	r1, #0
 8008b00:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2200      	movs	r2, #0
 8008b06:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2284      	movs	r2, #132	@ 0x84
 8008b12:	2100      	movs	r1, #0
 8008b14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008b16:	2300      	movs	r3, #0
}
 8008b18:	0018      	movs	r0, r3
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	b002      	add	sp, #8
 8008b1e:	bd80      	pop	{r7, pc}

08008b20 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b088      	sub	sp, #32
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	60f8      	str	r0, [r7, #12]
 8008b28:	60b9      	str	r1, [r7, #8]
 8008b2a:	1dbb      	adds	r3, r7, #6
 8008b2c:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2288      	movs	r2, #136	@ 0x88
 8008b32:	589b      	ldr	r3, [r3, r2]
 8008b34:	2b20      	cmp	r3, #32
 8008b36:	d000      	beq.n	8008b3a <HAL_UART_Transmit_DMA+0x1a>
 8008b38:	e079      	b.n	8008c2e <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d003      	beq.n	8008b48 <HAL_UART_Transmit_DMA+0x28>
 8008b40:	1dbb      	adds	r3, r7, #6
 8008b42:	881b      	ldrh	r3, [r3, #0]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d101      	bne.n	8008b4c <HAL_UART_Transmit_DMA+0x2c>
    {
      return HAL_ERROR;
 8008b48:	2301      	movs	r3, #1
 8008b4a:	e071      	b.n	8008c30 <HAL_UART_Transmit_DMA+0x110>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	689a      	ldr	r2, [r3, #8]
 8008b50:	2380      	movs	r3, #128	@ 0x80
 8008b52:	015b      	lsls	r3, r3, #5
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d109      	bne.n	8008b6c <HAL_UART_Transmit_DMA+0x4c>
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	691b      	ldr	r3, [r3, #16]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d105      	bne.n	8008b6c <HAL_UART_Transmit_DMA+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	2201      	movs	r2, #1
 8008b64:	4013      	ands	r3, r2
 8008b66:	d001      	beq.n	8008b6c <HAL_UART_Transmit_DMA+0x4c>
      {
        return  HAL_ERROR;
 8008b68:	2301      	movs	r3, #1
 8008b6a:	e061      	b.n	8008c30 <HAL_UART_Transmit_DMA+0x110>
      }
    }

    huart->pTxBuffPtr  = pData;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	68ba      	ldr	r2, [r7, #8]
 8008b70:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	1dba      	adds	r2, r7, #6
 8008b76:	2154      	movs	r1, #84	@ 0x54
 8008b78:	8812      	ldrh	r2, [r2, #0]
 8008b7a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	1dba      	adds	r2, r7, #6
 8008b80:	2156      	movs	r1, #86	@ 0x56
 8008b82:	8812      	ldrh	r2, [r2, #0]
 8008b84:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	2290      	movs	r2, #144	@ 0x90
 8008b8a:	2100      	movs	r1, #0
 8008b8c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2288      	movs	r2, #136	@ 0x88
 8008b92:	2121      	movs	r1, #33	@ 0x21
 8008b94:	5099      	str	r1, [r3, r2]

    if (huart->hdmatx != NULL)
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d028      	beq.n	8008bf0 <HAL_UART_Transmit_DMA+0xd0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008ba2:	4a25      	ldr	r2, [pc, #148]	@ (8008c38 <HAL_UART_Transmit_DMA+0x118>)
 8008ba4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008baa:	4a24      	ldr	r2, [pc, #144]	@ (8008c3c <HAL_UART_Transmit_DMA+0x11c>)
 8008bac:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008bb2:	4a23      	ldr	r2, [pc, #140]	@ (8008c40 <HAL_UART_Transmit_DMA+0x120>)
 8008bb4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008bba:	2200      	movs	r2, #0
 8008bbc:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008bc6:	0019      	movs	r1, r3
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	3328      	adds	r3, #40	@ 0x28
 8008bce:	001a      	movs	r2, r3
 8008bd0:	1dbb      	adds	r3, r7, #6
 8008bd2:	881b      	ldrh	r3, [r3, #0]
 8008bd4:	f7fb fab0 	bl	8004138 <HAL_DMA_Start_IT>
 8008bd8:	1e03      	subs	r3, r0, #0
 8008bda:	d009      	beq.n	8008bf0 <HAL_UART_Transmit_DMA+0xd0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2290      	movs	r2, #144	@ 0x90
 8008be0:	2110      	movs	r1, #16
 8008be2:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	2288      	movs	r2, #136	@ 0x88
 8008be8:	2120      	movs	r1, #32
 8008bea:	5099      	str	r1, [r3, r2]

        return HAL_ERROR;
 8008bec:	2301      	movs	r3, #1
 8008bee:	e01f      	b.n	8008c30 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	2240      	movs	r2, #64	@ 0x40
 8008bf6:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008bf8:	f3ef 8310 	mrs	r3, PRIMASK
 8008bfc:	613b      	str	r3, [r7, #16]
  return(result);
 8008bfe:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008c00:	61fb      	str	r3, [r7, #28]
 8008c02:	2301      	movs	r3, #1
 8008c04:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	f383 8810 	msr	PRIMASK, r3
}
 8008c0c:	46c0      	nop			@ (mov r8, r8)
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	689a      	ldr	r2, [r3, #8]
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	2180      	movs	r1, #128	@ 0x80
 8008c1a:	430a      	orrs	r2, r1
 8008c1c:	609a      	str	r2, [r3, #8]
 8008c1e:	69fb      	ldr	r3, [r7, #28]
 8008c20:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c22:	69bb      	ldr	r3, [r7, #24]
 8008c24:	f383 8810 	msr	PRIMASK, r3
}
 8008c28:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	e000      	b.n	8008c30 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8008c2e:	2302      	movs	r3, #2
  }
}
 8008c30:	0018      	movs	r0, r3
 8008c32:	46bd      	mov	sp, r7
 8008c34:	b008      	add	sp, #32
 8008c36:	bd80      	pop	{r7, pc}
 8008c38:	08009e49 	.word	0x08009e49
 8008c3c:	08009ee1 	.word	0x08009ee1
 8008c40:	0800a073 	.word	0x0800a073

08008c44 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b096      	sub	sp, #88	@ 0x58
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008c4c:	f3ef 8310 	mrs	r3, PRIMASK
 8008c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8008c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008c54:	657b      	str	r3, [r7, #84]	@ 0x54
 8008c56:	2301      	movs	r3, #1
 8008c58:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c5c:	f383 8810 	msr	PRIMASK, r3
}
 8008c60:	46c0      	nop			@ (mov r8, r8)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	681a      	ldr	r2, [r3, #0]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	4979      	ldr	r1, [pc, #484]	@ (8008e54 <HAL_UART_Abort+0x210>)
 8008c6e:	400a      	ands	r2, r1
 8008c70:	601a      	str	r2, [r3, #0]
 8008c72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008c74:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c78:	f383 8810 	msr	PRIMASK, r3
}
 8008c7c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008c7e:	f3ef 8310 	mrs	r3, PRIMASK
 8008c82:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 8008c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 8008c86:	653b      	str	r3, [r7, #80]	@ 0x50
 8008c88:	2301      	movs	r3, #1
 8008c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c8e:	f383 8810 	msr	PRIMASK, r3
}
 8008c92:	46c0      	nop			@ (mov r8, r8)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	689a      	ldr	r2, [r3, #8]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	496e      	ldr	r1, [pc, #440]	@ (8008e58 <HAL_UART_Abort+0x214>)
 8008ca0:	400a      	ands	r2, r1
 8008ca2:	609a      	str	r2, [r3, #8]
 8008ca4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008ca6:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ca8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008caa:	f383 8810 	msr	PRIMASK, r3
}
 8008cae:	46c0      	nop			@ (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008cb4:	2b01      	cmp	r3, #1
 8008cb6:	d118      	bne.n	8008cea <HAL_UART_Abort+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008cb8:	f3ef 8310 	mrs	r3, PRIMASK
 8008cbc:	623b      	str	r3, [r7, #32]
  return(result);
 8008cbe:	6a3b      	ldr	r3, [r7, #32]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8008cc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cc8:	f383 8810 	msr	PRIMASK, r3
}
 8008ccc:	46c0      	nop			@ (mov r8, r8)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	681a      	ldr	r2, [r3, #0]
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	2110      	movs	r1, #16
 8008cda:	438a      	bics	r2, r1
 8008cdc:	601a      	str	r2, [r3, #0]
 8008cde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ce0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ce4:	f383 8810 	msr	PRIMASK, r3
}
 8008ce8:	46c0      	nop			@ (mov r8, r8)
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	689b      	ldr	r3, [r3, #8]
 8008cf0:	2280      	movs	r2, #128	@ 0x80
 8008cf2:	4013      	ands	r3, r2
 8008cf4:	2b80      	cmp	r3, #128	@ 0x80
 8008cf6:	d135      	bne.n	8008d64 <HAL_UART_Abort+0x120>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008cf8:	f3ef 8310 	mrs	r3, PRIMASK
 8008cfc:	617b      	str	r3, [r7, #20]
  return(result);
 8008cfe:	697b      	ldr	r3, [r7, #20]
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008d00:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d02:	2301      	movs	r3, #1
 8008d04:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d06:	69bb      	ldr	r3, [r7, #24]
 8008d08:	f383 8810 	msr	PRIMASK, r3
}
 8008d0c:	46c0      	nop			@ (mov r8, r8)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	689a      	ldr	r2, [r3, #8]
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	2180      	movs	r1, #128	@ 0x80
 8008d1a:	438a      	bics	r2, r1
 8008d1c:	609a      	str	r2, [r3, #8]
 8008d1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008d20:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d22:	69fb      	ldr	r3, [r7, #28]
 8008d24:	f383 8810 	msr	PRIMASK, r3
}
 8008d28:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d018      	beq.n	8008d64 <HAL_UART_Abort+0x120>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008d36:	2200      	movs	r2, #0
 8008d38:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008d3e:	0018      	movs	r0, r3
 8008d40:	f7fb fa82 	bl	8004248 <HAL_DMA_Abort>
 8008d44:	1e03      	subs	r3, r0, #0
 8008d46:	d00d      	beq.n	8008d64 <HAL_UART_Abort+0x120>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008d4c:	0018      	movs	r0, r3
 8008d4e:	f7fb fc15 	bl	800457c <HAL_DMA_GetError>
 8008d52:	0003      	movs	r3, r0
 8008d54:	2b20      	cmp	r3, #32
 8008d56:	d105      	bne.n	8008d64 <HAL_UART_Abort+0x120>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2290      	movs	r2, #144	@ 0x90
 8008d5c:	2110      	movs	r1, #16
 8008d5e:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008d60:	2303      	movs	r3, #3
 8008d62:	e072      	b.n	8008e4a <HAL_UART_Abort+0x206>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	689b      	ldr	r3, [r3, #8]
 8008d6a:	2240      	movs	r2, #64	@ 0x40
 8008d6c:	4013      	ands	r3, r2
 8008d6e:	2b40      	cmp	r3, #64	@ 0x40
 8008d70:	d139      	bne.n	8008de6 <HAL_UART_Abort+0x1a2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008d72:	f3ef 8310 	mrs	r3, PRIMASK
 8008d76:	60bb      	str	r3, [r7, #8]
  return(result);
 8008d78:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d7a:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	f383 8810 	msr	PRIMASK, r3
}
 8008d86:	46c0      	nop			@ (mov r8, r8)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	689a      	ldr	r2, [r3, #8]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	2140      	movs	r1, #64	@ 0x40
 8008d94:	438a      	bics	r2, r1
 8008d96:	609a      	str	r2, [r3, #8]
 8008d98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	f383 8810 	msr	PRIMASK, r3
}
 8008da2:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2280      	movs	r2, #128	@ 0x80
 8008da8:	589b      	ldr	r3, [r3, r2]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d01b      	beq.n	8008de6 <HAL_UART_Abort+0x1a2>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2280      	movs	r2, #128	@ 0x80
 8008db2:	589b      	ldr	r3, [r3, r2]
 8008db4:	2200      	movs	r2, #0
 8008db6:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2280      	movs	r2, #128	@ 0x80
 8008dbc:	589b      	ldr	r3, [r3, r2]
 8008dbe:	0018      	movs	r0, r3
 8008dc0:	f7fb fa42 	bl	8004248 <HAL_DMA_Abort>
 8008dc4:	1e03      	subs	r3, r0, #0
 8008dc6:	d00e      	beq.n	8008de6 <HAL_UART_Abort+0x1a2>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2280      	movs	r2, #128	@ 0x80
 8008dcc:	589b      	ldr	r3, [r3, r2]
 8008dce:	0018      	movs	r0, r3
 8008dd0:	f7fb fbd4 	bl	800457c <HAL_DMA_GetError>
 8008dd4:	0003      	movs	r3, r0
 8008dd6:	2b20      	cmp	r3, #32
 8008dd8:	d105      	bne.n	8008de6 <HAL_UART_Abort+0x1a2>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2290      	movs	r2, #144	@ 0x90
 8008dde:	2110      	movs	r1, #16
 8008de0:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008de2:	2303      	movs	r3, #3
 8008de4:	e031      	b.n	8008e4a <HAL_UART_Abort+0x206>
    }
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2256      	movs	r2, #86	@ 0x56
 8008dea:	2100      	movs	r1, #0
 8008dec:	5299      	strh	r1, [r3, r2]
  huart->RxXferCount = 0U;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	225e      	movs	r2, #94	@ 0x5e
 8008df2:	2100      	movs	r1, #0
 8008df4:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	220f      	movs	r2, #15
 8008dfc:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008e02:	2380      	movs	r3, #128	@ 0x80
 8008e04:	059b      	lsls	r3, r3, #22
 8008e06:	429a      	cmp	r2, r3
 8008e08:	d107      	bne.n	8008e1a <HAL_UART_Abort+0x1d6>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	699a      	ldr	r2, [r3, #24]
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	2110      	movs	r1, #16
 8008e16:	430a      	orrs	r2, r1
 8008e18:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	699a      	ldr	r2, [r3, #24]
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	2108      	movs	r1, #8
 8008e26:	430a      	orrs	r2, r1
 8008e28:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2288      	movs	r2, #136	@ 0x88
 8008e2e:	2120      	movs	r1, #32
 8008e30:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	228c      	movs	r2, #140	@ 0x8c
 8008e36:	2120      	movs	r1, #32
 8008e38:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	66da      	str	r2, [r3, #108]	@ 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2290      	movs	r2, #144	@ 0x90
 8008e44:	2100      	movs	r1, #0
 8008e46:	5099      	str	r1, [r3, r2]

  return HAL_OK;
 8008e48:	2300      	movs	r3, #0
}
 8008e4a:	0018      	movs	r0, r3
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	b016      	add	sp, #88	@ 0x58
 8008e50:	bd80      	pop	{r7, pc}
 8008e52:	46c0      	nop			@ (mov r8, r8)
 8008e54:	fffffe1f 	.word	0xfffffe1f
 8008e58:	ef7ffffe 	.word	0xef7ffffe

08008e5c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008e5c:	b5b0      	push	{r4, r5, r7, lr}
 8008e5e:	b0aa      	sub	sp, #168	@ 0xa8
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	69db      	ldr	r3, [r3, #28]
 8008e6a:	22a4      	movs	r2, #164	@ 0xa4
 8008e6c:	18b9      	adds	r1, r7, r2
 8008e6e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	20a0      	movs	r0, #160	@ 0xa0
 8008e78:	1839      	adds	r1, r7, r0
 8008e7a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	689b      	ldr	r3, [r3, #8]
 8008e82:	249c      	movs	r4, #156	@ 0x9c
 8008e84:	1939      	adds	r1, r7, r4
 8008e86:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008e88:	0011      	movs	r1, r2
 8008e8a:	18bb      	adds	r3, r7, r2
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4aa2      	ldr	r2, [pc, #648]	@ (8009118 <HAL_UART_IRQHandler+0x2bc>)
 8008e90:	4013      	ands	r3, r2
 8008e92:	2298      	movs	r2, #152	@ 0x98
 8008e94:	18bd      	adds	r5, r7, r2
 8008e96:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8008e98:	18bb      	adds	r3, r7, r2
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d11a      	bne.n	8008ed6 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008ea0:	187b      	adds	r3, r7, r1
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	2220      	movs	r2, #32
 8008ea6:	4013      	ands	r3, r2
 8008ea8:	d015      	beq.n	8008ed6 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008eaa:	183b      	adds	r3, r7, r0
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	2220      	movs	r2, #32
 8008eb0:	4013      	ands	r3, r2
 8008eb2:	d105      	bne.n	8008ec0 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008eb4:	193b      	adds	r3, r7, r4
 8008eb6:	681a      	ldr	r2, [r3, #0]
 8008eb8:	2380      	movs	r3, #128	@ 0x80
 8008eba:	055b      	lsls	r3, r3, #21
 8008ebc:	4013      	ands	r3, r2
 8008ebe:	d00a      	beq.n	8008ed6 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d100      	bne.n	8008eca <HAL_UART_IRQHandler+0x6e>
 8008ec8:	e2fb      	b.n	80094c2 <HAL_UART_IRQHandler+0x666>
      {
        huart->RxISR(huart);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ece:	687a      	ldr	r2, [r7, #4]
 8008ed0:	0010      	movs	r0, r2
 8008ed2:	4798      	blx	r3
      }
      return;
 8008ed4:	e2f5      	b.n	80094c2 <HAL_UART_IRQHandler+0x666>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008ed6:	2398      	movs	r3, #152	@ 0x98
 8008ed8:	18fb      	adds	r3, r7, r3
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d100      	bne.n	8008ee2 <HAL_UART_IRQHandler+0x86>
 8008ee0:	e122      	b.n	8009128 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008ee2:	239c      	movs	r3, #156	@ 0x9c
 8008ee4:	18fb      	adds	r3, r7, r3
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	4a8c      	ldr	r2, [pc, #560]	@ (800911c <HAL_UART_IRQHandler+0x2c0>)
 8008eea:	4013      	ands	r3, r2
 8008eec:	d106      	bne.n	8008efc <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008eee:	23a0      	movs	r3, #160	@ 0xa0
 8008ef0:	18fb      	adds	r3, r7, r3
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	4a8a      	ldr	r2, [pc, #552]	@ (8009120 <HAL_UART_IRQHandler+0x2c4>)
 8008ef6:	4013      	ands	r3, r2
 8008ef8:	d100      	bne.n	8008efc <HAL_UART_IRQHandler+0xa0>
 8008efa:	e115      	b.n	8009128 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008efc:	23a4      	movs	r3, #164	@ 0xa4
 8008efe:	18fb      	adds	r3, r7, r3
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	2201      	movs	r2, #1
 8008f04:	4013      	ands	r3, r2
 8008f06:	d012      	beq.n	8008f2e <HAL_UART_IRQHandler+0xd2>
 8008f08:	23a0      	movs	r3, #160	@ 0xa0
 8008f0a:	18fb      	adds	r3, r7, r3
 8008f0c:	681a      	ldr	r2, [r3, #0]
 8008f0e:	2380      	movs	r3, #128	@ 0x80
 8008f10:	005b      	lsls	r3, r3, #1
 8008f12:	4013      	ands	r3, r2
 8008f14:	d00b      	beq.n	8008f2e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2290      	movs	r2, #144	@ 0x90
 8008f22:	589b      	ldr	r3, [r3, r2]
 8008f24:	2201      	movs	r2, #1
 8008f26:	431a      	orrs	r2, r3
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2190      	movs	r1, #144	@ 0x90
 8008f2c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f2e:	23a4      	movs	r3, #164	@ 0xa4
 8008f30:	18fb      	adds	r3, r7, r3
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	2202      	movs	r2, #2
 8008f36:	4013      	ands	r3, r2
 8008f38:	d011      	beq.n	8008f5e <HAL_UART_IRQHandler+0x102>
 8008f3a:	239c      	movs	r3, #156	@ 0x9c
 8008f3c:	18fb      	adds	r3, r7, r3
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	2201      	movs	r2, #1
 8008f42:	4013      	ands	r3, r2
 8008f44:	d00b      	beq.n	8008f5e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	2202      	movs	r2, #2
 8008f4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2290      	movs	r2, #144	@ 0x90
 8008f52:	589b      	ldr	r3, [r3, r2]
 8008f54:	2204      	movs	r2, #4
 8008f56:	431a      	orrs	r2, r3
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2190      	movs	r1, #144	@ 0x90
 8008f5c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f5e:	23a4      	movs	r3, #164	@ 0xa4
 8008f60:	18fb      	adds	r3, r7, r3
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	2204      	movs	r2, #4
 8008f66:	4013      	ands	r3, r2
 8008f68:	d011      	beq.n	8008f8e <HAL_UART_IRQHandler+0x132>
 8008f6a:	239c      	movs	r3, #156	@ 0x9c
 8008f6c:	18fb      	adds	r3, r7, r3
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	2201      	movs	r2, #1
 8008f72:	4013      	ands	r3, r2
 8008f74:	d00b      	beq.n	8008f8e <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	2204      	movs	r2, #4
 8008f7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2290      	movs	r2, #144	@ 0x90
 8008f82:	589b      	ldr	r3, [r3, r2]
 8008f84:	2202      	movs	r2, #2
 8008f86:	431a      	orrs	r2, r3
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2190      	movs	r1, #144	@ 0x90
 8008f8c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008f8e:	23a4      	movs	r3, #164	@ 0xa4
 8008f90:	18fb      	adds	r3, r7, r3
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	2208      	movs	r2, #8
 8008f96:	4013      	ands	r3, r2
 8008f98:	d017      	beq.n	8008fca <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008f9a:	23a0      	movs	r3, #160	@ 0xa0
 8008f9c:	18fb      	adds	r3, r7, r3
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	2220      	movs	r2, #32
 8008fa2:	4013      	ands	r3, r2
 8008fa4:	d105      	bne.n	8008fb2 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008fa6:	239c      	movs	r3, #156	@ 0x9c
 8008fa8:	18fb      	adds	r3, r7, r3
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	4a5b      	ldr	r2, [pc, #364]	@ (800911c <HAL_UART_IRQHandler+0x2c0>)
 8008fae:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008fb0:	d00b      	beq.n	8008fca <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	2208      	movs	r2, #8
 8008fb8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2290      	movs	r2, #144	@ 0x90
 8008fbe:	589b      	ldr	r3, [r3, r2]
 8008fc0:	2208      	movs	r2, #8
 8008fc2:	431a      	orrs	r2, r3
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2190      	movs	r1, #144	@ 0x90
 8008fc8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008fca:	23a4      	movs	r3, #164	@ 0xa4
 8008fcc:	18fb      	adds	r3, r7, r3
 8008fce:	681a      	ldr	r2, [r3, #0]
 8008fd0:	2380      	movs	r3, #128	@ 0x80
 8008fd2:	011b      	lsls	r3, r3, #4
 8008fd4:	4013      	ands	r3, r2
 8008fd6:	d013      	beq.n	8009000 <HAL_UART_IRQHandler+0x1a4>
 8008fd8:	23a0      	movs	r3, #160	@ 0xa0
 8008fda:	18fb      	adds	r3, r7, r3
 8008fdc:	681a      	ldr	r2, [r3, #0]
 8008fde:	2380      	movs	r3, #128	@ 0x80
 8008fe0:	04db      	lsls	r3, r3, #19
 8008fe2:	4013      	ands	r3, r2
 8008fe4:	d00c      	beq.n	8009000 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	2280      	movs	r2, #128	@ 0x80
 8008fec:	0112      	lsls	r2, r2, #4
 8008fee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2290      	movs	r2, #144	@ 0x90
 8008ff4:	589b      	ldr	r3, [r3, r2]
 8008ff6:	2220      	movs	r2, #32
 8008ff8:	431a      	orrs	r2, r3
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2190      	movs	r1, #144	@ 0x90
 8008ffe:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2290      	movs	r2, #144	@ 0x90
 8009004:	589b      	ldr	r3, [r3, r2]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d100      	bne.n	800900c <HAL_UART_IRQHandler+0x1b0>
 800900a:	e25c      	b.n	80094c6 <HAL_UART_IRQHandler+0x66a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800900c:	23a4      	movs	r3, #164	@ 0xa4
 800900e:	18fb      	adds	r3, r7, r3
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	2220      	movs	r2, #32
 8009014:	4013      	ands	r3, r2
 8009016:	d015      	beq.n	8009044 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009018:	23a0      	movs	r3, #160	@ 0xa0
 800901a:	18fb      	adds	r3, r7, r3
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	2220      	movs	r2, #32
 8009020:	4013      	ands	r3, r2
 8009022:	d106      	bne.n	8009032 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009024:	239c      	movs	r3, #156	@ 0x9c
 8009026:	18fb      	adds	r3, r7, r3
 8009028:	681a      	ldr	r2, [r3, #0]
 800902a:	2380      	movs	r3, #128	@ 0x80
 800902c:	055b      	lsls	r3, r3, #21
 800902e:	4013      	ands	r3, r2
 8009030:	d008      	beq.n	8009044 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009036:	2b00      	cmp	r3, #0
 8009038:	d004      	beq.n	8009044 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800903e:	687a      	ldr	r2, [r7, #4]
 8009040:	0010      	movs	r0, r2
 8009042:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2290      	movs	r2, #144	@ 0x90
 8009048:	589b      	ldr	r3, [r3, r2]
 800904a:	2194      	movs	r1, #148	@ 0x94
 800904c:	187a      	adds	r2, r7, r1
 800904e:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	689b      	ldr	r3, [r3, #8]
 8009056:	2240      	movs	r2, #64	@ 0x40
 8009058:	4013      	ands	r3, r2
 800905a:	2b40      	cmp	r3, #64	@ 0x40
 800905c:	d004      	beq.n	8009068 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800905e:	187b      	adds	r3, r7, r1
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	2228      	movs	r2, #40	@ 0x28
 8009064:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009066:	d04c      	beq.n	8009102 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	0018      	movs	r0, r3
 800906c:	f000 fe86 	bl	8009d7c <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	689b      	ldr	r3, [r3, #8]
 8009076:	2240      	movs	r2, #64	@ 0x40
 8009078:	4013      	ands	r3, r2
 800907a:	2b40      	cmp	r3, #64	@ 0x40
 800907c:	d13c      	bne.n	80090f8 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800907e:	f3ef 8310 	mrs	r3, PRIMASK
 8009082:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8009084:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009086:	2090      	movs	r0, #144	@ 0x90
 8009088:	183a      	adds	r2, r7, r0
 800908a:	6013      	str	r3, [r2, #0]
 800908c:	2301      	movs	r3, #1
 800908e:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009090:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009092:	f383 8810 	msr	PRIMASK, r3
}
 8009096:	46c0      	nop			@ (mov r8, r8)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	689a      	ldr	r2, [r3, #8]
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	2140      	movs	r1, #64	@ 0x40
 80090a4:	438a      	bics	r2, r1
 80090a6:	609a      	str	r2, [r3, #8]
 80090a8:	183b      	adds	r3, r7, r0
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80090b0:	f383 8810 	msr	PRIMASK, r3
}
 80090b4:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2280      	movs	r2, #128	@ 0x80
 80090ba:	589b      	ldr	r3, [r3, r2]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d016      	beq.n	80090ee <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2280      	movs	r2, #128	@ 0x80
 80090c4:	589b      	ldr	r3, [r3, r2]
 80090c6:	4a17      	ldr	r2, [pc, #92]	@ (8009124 <HAL_UART_IRQHandler+0x2c8>)
 80090c8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2280      	movs	r2, #128	@ 0x80
 80090ce:	589b      	ldr	r3, [r3, r2]
 80090d0:	0018      	movs	r0, r3
 80090d2:	f7fb f91b 	bl	800430c <HAL_DMA_Abort_IT>
 80090d6:	1e03      	subs	r3, r0, #0
 80090d8:	d01c      	beq.n	8009114 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2280      	movs	r2, #128	@ 0x80
 80090de:	589b      	ldr	r3, [r3, r2]
 80090e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090e2:	687a      	ldr	r2, [r7, #4]
 80090e4:	2180      	movs	r1, #128	@ 0x80
 80090e6:	5852      	ldr	r2, [r2, r1]
 80090e8:	0010      	movs	r0, r2
 80090ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090ec:	e012      	b.n	8009114 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	0018      	movs	r0, r3
 80090f2:	f7f9 f9af 	bl	8002454 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090f6:	e00d      	b.n	8009114 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	0018      	movs	r0, r3
 80090fc:	f7f9 f9aa 	bl	8002454 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009100:	e008      	b.n	8009114 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	0018      	movs	r0, r3
 8009106:	f7f9 f9a5 	bl	8002454 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2290      	movs	r2, #144	@ 0x90
 800910e:	2100      	movs	r1, #0
 8009110:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8009112:	e1d8      	b.n	80094c6 <HAL_UART_IRQHandler+0x66a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009114:	46c0      	nop			@ (mov r8, r8)
    return;
 8009116:	e1d6      	b.n	80094c6 <HAL_UART_IRQHandler+0x66a>
 8009118:	0000080f 	.word	0x0000080f
 800911c:	10000001 	.word	0x10000001
 8009120:	04000120 	.word	0x04000120
 8009124:	0800a0f9 	.word	0x0800a0f9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800912c:	2b01      	cmp	r3, #1
 800912e:	d000      	beq.n	8009132 <HAL_UART_IRQHandler+0x2d6>
 8009130:	e15d      	b.n	80093ee <HAL_UART_IRQHandler+0x592>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009132:	23a4      	movs	r3, #164	@ 0xa4
 8009134:	18fb      	adds	r3, r7, r3
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	2210      	movs	r2, #16
 800913a:	4013      	ands	r3, r2
 800913c:	d100      	bne.n	8009140 <HAL_UART_IRQHandler+0x2e4>
 800913e:	e156      	b.n	80093ee <HAL_UART_IRQHandler+0x592>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009140:	23a0      	movs	r3, #160	@ 0xa0
 8009142:	18fb      	adds	r3, r7, r3
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	2210      	movs	r2, #16
 8009148:	4013      	ands	r3, r2
 800914a:	d100      	bne.n	800914e <HAL_UART_IRQHandler+0x2f2>
 800914c:	e14f      	b.n	80093ee <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	2210      	movs	r2, #16
 8009154:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	689b      	ldr	r3, [r3, #8]
 800915c:	2240      	movs	r2, #64	@ 0x40
 800915e:	4013      	ands	r3, r2
 8009160:	2b40      	cmp	r3, #64	@ 0x40
 8009162:	d000      	beq.n	8009166 <HAL_UART_IRQHandler+0x30a>
 8009164:	e0c3      	b.n	80092ee <HAL_UART_IRQHandler+0x492>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2280      	movs	r2, #128	@ 0x80
 800916a:	589b      	ldr	r3, [r3, r2]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	685a      	ldr	r2, [r3, #4]
 8009170:	217e      	movs	r1, #126	@ 0x7e
 8009172:	187b      	adds	r3, r7, r1
 8009174:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8009176:	187b      	adds	r3, r7, r1
 8009178:	881b      	ldrh	r3, [r3, #0]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d100      	bne.n	8009180 <HAL_UART_IRQHandler+0x324>
 800917e:	e097      	b.n	80092b0 <HAL_UART_IRQHandler+0x454>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	225c      	movs	r2, #92	@ 0x5c
 8009184:	5a9b      	ldrh	r3, [r3, r2]
 8009186:	187a      	adds	r2, r7, r1
 8009188:	8812      	ldrh	r2, [r2, #0]
 800918a:	429a      	cmp	r2, r3
 800918c:	d300      	bcc.n	8009190 <HAL_UART_IRQHandler+0x334>
 800918e:	e08f      	b.n	80092b0 <HAL_UART_IRQHandler+0x454>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	187a      	adds	r2, r7, r1
 8009194:	215e      	movs	r1, #94	@ 0x5e
 8009196:	8812      	ldrh	r2, [r2, #0]
 8009198:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2280      	movs	r2, #128	@ 0x80
 800919e:	589b      	ldr	r3, [r3, r2]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	2220      	movs	r2, #32
 80091a6:	4013      	ands	r3, r2
 80091a8:	d170      	bne.n	800928c <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80091aa:	f3ef 8310 	mrs	r3, PRIMASK
 80091ae:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80091b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80091b2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80091b4:	2301      	movs	r3, #1
 80091b6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091ba:	f383 8810 	msr	PRIMASK, r3
}
 80091be:	46c0      	nop			@ (mov r8, r8)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	681a      	ldr	r2, [r3, #0]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	49c4      	ldr	r1, [pc, #784]	@ (80094dc <HAL_UART_IRQHandler+0x680>)
 80091cc:	400a      	ands	r2, r1
 80091ce:	601a      	str	r2, [r3, #0]
 80091d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80091d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091d6:	f383 8810 	msr	PRIMASK, r3
}
 80091da:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80091dc:	f3ef 8310 	mrs	r3, PRIMASK
 80091e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80091e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091e4:	677b      	str	r3, [r7, #116]	@ 0x74
 80091e6:	2301      	movs	r3, #1
 80091e8:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80091ec:	f383 8810 	msr	PRIMASK, r3
}
 80091f0:	46c0      	nop			@ (mov r8, r8)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	689a      	ldr	r2, [r3, #8]
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	2101      	movs	r1, #1
 80091fe:	438a      	bics	r2, r1
 8009200:	609a      	str	r2, [r3, #8]
 8009202:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009204:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009206:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009208:	f383 8810 	msr	PRIMASK, r3
}
 800920c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800920e:	f3ef 8310 	mrs	r3, PRIMASK
 8009212:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8009214:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009216:	673b      	str	r3, [r7, #112]	@ 0x70
 8009218:	2301      	movs	r3, #1
 800921a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800921c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800921e:	f383 8810 	msr	PRIMASK, r3
}
 8009222:	46c0      	nop			@ (mov r8, r8)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	689a      	ldr	r2, [r3, #8]
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	2140      	movs	r1, #64	@ 0x40
 8009230:	438a      	bics	r2, r1
 8009232:	609a      	str	r2, [r3, #8]
 8009234:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009236:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009238:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800923a:	f383 8810 	msr	PRIMASK, r3
}
 800923e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	228c      	movs	r2, #140	@ 0x8c
 8009244:	2120      	movs	r1, #32
 8009246:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2200      	movs	r2, #0
 800924c:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800924e:	f3ef 8310 	mrs	r3, PRIMASK
 8009252:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8009254:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009256:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009258:	2301      	movs	r3, #1
 800925a:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800925c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800925e:	f383 8810 	msr	PRIMASK, r3
}
 8009262:	46c0      	nop			@ (mov r8, r8)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	681a      	ldr	r2, [r3, #0]
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	2110      	movs	r1, #16
 8009270:	438a      	bics	r2, r1
 8009272:	601a      	str	r2, [r3, #0]
 8009274:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009276:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009278:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800927a:	f383 8810 	msr	PRIMASK, r3
}
 800927e:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2280      	movs	r2, #128	@ 0x80
 8009284:	589b      	ldr	r3, [r3, r2]
 8009286:	0018      	movs	r0, r3
 8009288:	f7fa ffde 	bl	8004248 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2202      	movs	r2, #2
 8009290:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	225c      	movs	r2, #92	@ 0x5c
 8009296:	5a9a      	ldrh	r2, [r3, r2]
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	215e      	movs	r1, #94	@ 0x5e
 800929c:	5a5b      	ldrh	r3, [r3, r1]
 800929e:	b29b      	uxth	r3, r3
 80092a0:	1ad3      	subs	r3, r2, r3
 80092a2:	b29a      	uxth	r2, r3
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	0011      	movs	r1, r2
 80092a8:	0018      	movs	r0, r3
 80092aa:	f7f9 f869 	bl	8002380 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80092ae:	e10c      	b.n	80094ca <HAL_UART_IRQHandler+0x66e>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	225c      	movs	r2, #92	@ 0x5c
 80092b4:	5a9b      	ldrh	r3, [r3, r2]
 80092b6:	227e      	movs	r2, #126	@ 0x7e
 80092b8:	18ba      	adds	r2, r7, r2
 80092ba:	8812      	ldrh	r2, [r2, #0]
 80092bc:	429a      	cmp	r2, r3
 80092be:	d000      	beq.n	80092c2 <HAL_UART_IRQHandler+0x466>
 80092c0:	e103      	b.n	80094ca <HAL_UART_IRQHandler+0x66e>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2280      	movs	r2, #128	@ 0x80
 80092c6:	589b      	ldr	r3, [r3, r2]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	2220      	movs	r2, #32
 80092ce:	4013      	ands	r3, r2
 80092d0:	2b20      	cmp	r3, #32
 80092d2:	d000      	beq.n	80092d6 <HAL_UART_IRQHandler+0x47a>
 80092d4:	e0f9      	b.n	80094ca <HAL_UART_IRQHandler+0x66e>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2202      	movs	r2, #2
 80092da:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	225c      	movs	r2, #92	@ 0x5c
 80092e0:	5a9a      	ldrh	r2, [r3, r2]
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	0011      	movs	r1, r2
 80092e6:	0018      	movs	r0, r3
 80092e8:	f7f9 f84a 	bl	8002380 <HAL_UARTEx_RxEventCallback>
      return;
 80092ec:	e0ed      	b.n	80094ca <HAL_UART_IRQHandler+0x66e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	225c      	movs	r2, #92	@ 0x5c
 80092f2:	5a99      	ldrh	r1, [r3, r2]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	225e      	movs	r2, #94	@ 0x5e
 80092f8:	5a9b      	ldrh	r3, [r3, r2]
 80092fa:	b29a      	uxth	r2, r3
 80092fc:	208e      	movs	r0, #142	@ 0x8e
 80092fe:	183b      	adds	r3, r7, r0
 8009300:	1a8a      	subs	r2, r1, r2
 8009302:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	225e      	movs	r2, #94	@ 0x5e
 8009308:	5a9b      	ldrh	r3, [r3, r2]
 800930a:	b29b      	uxth	r3, r3
 800930c:	2b00      	cmp	r3, #0
 800930e:	d100      	bne.n	8009312 <HAL_UART_IRQHandler+0x4b6>
 8009310:	e0dd      	b.n	80094ce <HAL_UART_IRQHandler+0x672>
          && (nb_rx_data > 0U))
 8009312:	183b      	adds	r3, r7, r0
 8009314:	881b      	ldrh	r3, [r3, #0]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d100      	bne.n	800931c <HAL_UART_IRQHandler+0x4c0>
 800931a:	e0d8      	b.n	80094ce <HAL_UART_IRQHandler+0x672>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800931c:	f3ef 8310 	mrs	r3, PRIMASK
 8009320:	60fb      	str	r3, [r7, #12]
  return(result);
 8009322:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009324:	2488      	movs	r4, #136	@ 0x88
 8009326:	193a      	adds	r2, r7, r4
 8009328:	6013      	str	r3, [r2, #0]
 800932a:	2301      	movs	r3, #1
 800932c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	f383 8810 	msr	PRIMASK, r3
}
 8009334:	46c0      	nop			@ (mov r8, r8)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	681a      	ldr	r2, [r3, #0]
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	4967      	ldr	r1, [pc, #412]	@ (80094e0 <HAL_UART_IRQHandler+0x684>)
 8009342:	400a      	ands	r2, r1
 8009344:	601a      	str	r2, [r3, #0]
 8009346:	193b      	adds	r3, r7, r4
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	f383 8810 	msr	PRIMASK, r3
}
 8009352:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009354:	f3ef 8310 	mrs	r3, PRIMASK
 8009358:	61bb      	str	r3, [r7, #24]
  return(result);
 800935a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800935c:	2484      	movs	r4, #132	@ 0x84
 800935e:	193a      	adds	r2, r7, r4
 8009360:	6013      	str	r3, [r2, #0]
 8009362:	2301      	movs	r3, #1
 8009364:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009366:	69fb      	ldr	r3, [r7, #28]
 8009368:	f383 8810 	msr	PRIMASK, r3
}
 800936c:	46c0      	nop			@ (mov r8, r8)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	689a      	ldr	r2, [r3, #8]
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	495a      	ldr	r1, [pc, #360]	@ (80094e4 <HAL_UART_IRQHandler+0x688>)
 800937a:	400a      	ands	r2, r1
 800937c:	609a      	str	r2, [r3, #8]
 800937e:	193b      	adds	r3, r7, r4
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009384:	6a3b      	ldr	r3, [r7, #32]
 8009386:	f383 8810 	msr	PRIMASK, r3
}
 800938a:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	228c      	movs	r2, #140	@ 0x8c
 8009390:	2120      	movs	r1, #32
 8009392:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2200      	movs	r2, #0
 8009398:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2200      	movs	r2, #0
 800939e:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80093a0:	f3ef 8310 	mrs	r3, PRIMASK
 80093a4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80093a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093a8:	2480      	movs	r4, #128	@ 0x80
 80093aa:	193a      	adds	r2, r7, r4
 80093ac:	6013      	str	r3, [r2, #0]
 80093ae:	2301      	movs	r3, #1
 80093b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093b4:	f383 8810 	msr	PRIMASK, r3
}
 80093b8:	46c0      	nop			@ (mov r8, r8)
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	681a      	ldr	r2, [r3, #0]
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	2110      	movs	r1, #16
 80093c6:	438a      	bics	r2, r1
 80093c8:	601a      	str	r2, [r3, #0]
 80093ca:	193b      	adds	r3, r7, r4
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093d2:	f383 8810 	msr	PRIMASK, r3
}
 80093d6:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2202      	movs	r2, #2
 80093dc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80093de:	183b      	adds	r3, r7, r0
 80093e0:	881a      	ldrh	r2, [r3, #0]
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	0011      	movs	r1, r2
 80093e6:	0018      	movs	r0, r3
 80093e8:	f7f8 ffca 	bl	8002380 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80093ec:	e06f      	b.n	80094ce <HAL_UART_IRQHandler+0x672>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80093ee:	23a4      	movs	r3, #164	@ 0xa4
 80093f0:	18fb      	adds	r3, r7, r3
 80093f2:	681a      	ldr	r2, [r3, #0]
 80093f4:	2380      	movs	r3, #128	@ 0x80
 80093f6:	035b      	lsls	r3, r3, #13
 80093f8:	4013      	ands	r3, r2
 80093fa:	d010      	beq.n	800941e <HAL_UART_IRQHandler+0x5c2>
 80093fc:	239c      	movs	r3, #156	@ 0x9c
 80093fe:	18fb      	adds	r3, r7, r3
 8009400:	681a      	ldr	r2, [r3, #0]
 8009402:	2380      	movs	r3, #128	@ 0x80
 8009404:	03db      	lsls	r3, r3, #15
 8009406:	4013      	ands	r3, r2
 8009408:	d009      	beq.n	800941e <HAL_UART_IRQHandler+0x5c2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	2280      	movs	r2, #128	@ 0x80
 8009410:	0352      	lsls	r2, r2, #13
 8009412:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	0018      	movs	r0, r3
 8009418:	f000 ff24 	bl	800a264 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800941c:	e05a      	b.n	80094d4 <HAL_UART_IRQHandler+0x678>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800941e:	23a4      	movs	r3, #164	@ 0xa4
 8009420:	18fb      	adds	r3, r7, r3
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	2280      	movs	r2, #128	@ 0x80
 8009426:	4013      	ands	r3, r2
 8009428:	d016      	beq.n	8009458 <HAL_UART_IRQHandler+0x5fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800942a:	23a0      	movs	r3, #160	@ 0xa0
 800942c:	18fb      	adds	r3, r7, r3
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	2280      	movs	r2, #128	@ 0x80
 8009432:	4013      	ands	r3, r2
 8009434:	d106      	bne.n	8009444 <HAL_UART_IRQHandler+0x5e8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009436:	239c      	movs	r3, #156	@ 0x9c
 8009438:	18fb      	adds	r3, r7, r3
 800943a:	681a      	ldr	r2, [r3, #0]
 800943c:	2380      	movs	r3, #128	@ 0x80
 800943e:	041b      	lsls	r3, r3, #16
 8009440:	4013      	ands	r3, r2
 8009442:	d009      	beq.n	8009458 <HAL_UART_IRQHandler+0x5fc>
  {
    if (huart->TxISR != NULL)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009448:	2b00      	cmp	r3, #0
 800944a:	d042      	beq.n	80094d2 <HAL_UART_IRQHandler+0x676>
    {
      huart->TxISR(huart);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009450:	687a      	ldr	r2, [r7, #4]
 8009452:	0010      	movs	r0, r2
 8009454:	4798      	blx	r3
    }
    return;
 8009456:	e03c      	b.n	80094d2 <HAL_UART_IRQHandler+0x676>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009458:	23a4      	movs	r3, #164	@ 0xa4
 800945a:	18fb      	adds	r3, r7, r3
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	2240      	movs	r2, #64	@ 0x40
 8009460:	4013      	ands	r3, r2
 8009462:	d00a      	beq.n	800947a <HAL_UART_IRQHandler+0x61e>
 8009464:	23a0      	movs	r3, #160	@ 0xa0
 8009466:	18fb      	adds	r3, r7, r3
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	2240      	movs	r2, #64	@ 0x40
 800946c:	4013      	ands	r3, r2
 800946e:	d004      	beq.n	800947a <HAL_UART_IRQHandler+0x61e>
  {
    UART_EndTransmit_IT(huart);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	0018      	movs	r0, r3
 8009474:	f000 fe57 	bl	800a126 <UART_EndTransmit_IT>
    return;
 8009478:	e02c      	b.n	80094d4 <HAL_UART_IRQHandler+0x678>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800947a:	23a4      	movs	r3, #164	@ 0xa4
 800947c:	18fb      	adds	r3, r7, r3
 800947e:	681a      	ldr	r2, [r3, #0]
 8009480:	2380      	movs	r3, #128	@ 0x80
 8009482:	041b      	lsls	r3, r3, #16
 8009484:	4013      	ands	r3, r2
 8009486:	d00b      	beq.n	80094a0 <HAL_UART_IRQHandler+0x644>
 8009488:	23a0      	movs	r3, #160	@ 0xa0
 800948a:	18fb      	adds	r3, r7, r3
 800948c:	681a      	ldr	r2, [r3, #0]
 800948e:	2380      	movs	r3, #128	@ 0x80
 8009490:	05db      	lsls	r3, r3, #23
 8009492:	4013      	ands	r3, r2
 8009494:	d004      	beq.n	80094a0 <HAL_UART_IRQHandler+0x644>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	0018      	movs	r0, r3
 800949a:	f000 fef3 	bl	800a284 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800949e:	e019      	b.n	80094d4 <HAL_UART_IRQHandler+0x678>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80094a0:	23a4      	movs	r3, #164	@ 0xa4
 80094a2:	18fb      	adds	r3, r7, r3
 80094a4:	681a      	ldr	r2, [r3, #0]
 80094a6:	2380      	movs	r3, #128	@ 0x80
 80094a8:	045b      	lsls	r3, r3, #17
 80094aa:	4013      	ands	r3, r2
 80094ac:	d012      	beq.n	80094d4 <HAL_UART_IRQHandler+0x678>
 80094ae:	23a0      	movs	r3, #160	@ 0xa0
 80094b0:	18fb      	adds	r3, r7, r3
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	da0d      	bge.n	80094d4 <HAL_UART_IRQHandler+0x678>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	0018      	movs	r0, r3
 80094bc:	f000 feda 	bl	800a274 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80094c0:	e008      	b.n	80094d4 <HAL_UART_IRQHandler+0x678>
      return;
 80094c2:	46c0      	nop			@ (mov r8, r8)
 80094c4:	e006      	b.n	80094d4 <HAL_UART_IRQHandler+0x678>
    return;
 80094c6:	46c0      	nop			@ (mov r8, r8)
 80094c8:	e004      	b.n	80094d4 <HAL_UART_IRQHandler+0x678>
      return;
 80094ca:	46c0      	nop			@ (mov r8, r8)
 80094cc:	e002      	b.n	80094d4 <HAL_UART_IRQHandler+0x678>
      return;
 80094ce:	46c0      	nop			@ (mov r8, r8)
 80094d0:	e000      	b.n	80094d4 <HAL_UART_IRQHandler+0x678>
    return;
 80094d2:	46c0      	nop			@ (mov r8, r8)
  }
}
 80094d4:	46bd      	mov	sp, r7
 80094d6:	b02a      	add	sp, #168	@ 0xa8
 80094d8:	bdb0      	pop	{r4, r5, r7, pc}
 80094da:	46c0      	nop			@ (mov r8, r8)
 80094dc:	fffffeff 	.word	0xfffffeff
 80094e0:	fffffedf 	.word	0xfffffedf
 80094e4:	effffffe 	.word	0xeffffffe

080094e8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b082      	sub	sp, #8
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80094f0:	46c0      	nop			@ (mov r8, r8)
 80094f2:	46bd      	mov	sp, r7
 80094f4:	b002      	add	sp, #8
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b082      	sub	sp, #8
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009500:	46c0      	nop			@ (mov r8, r8)
 8009502:	46bd      	mov	sp, r7
 8009504:	b002      	add	sp, #8
 8009506:	bd80      	pop	{r7, pc}

08009508 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b082      	sub	sp, #8
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009510:	46c0      	nop			@ (mov r8, r8)
 8009512:	46bd      	mov	sp, r7
 8009514:	b002      	add	sp, #8
 8009516:	bd80      	pop	{r7, pc}

08009518 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b088      	sub	sp, #32
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009520:	231e      	movs	r3, #30
 8009522:	18fb      	adds	r3, r7, r3
 8009524:	2200      	movs	r2, #0
 8009526:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	689a      	ldr	r2, [r3, #8]
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	691b      	ldr	r3, [r3, #16]
 8009530:	431a      	orrs	r2, r3
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	695b      	ldr	r3, [r3, #20]
 8009536:	431a      	orrs	r2, r3
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	69db      	ldr	r3, [r3, #28]
 800953c:	4313      	orrs	r3, r2
 800953e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	4aab      	ldr	r2, [pc, #684]	@ (80097f4 <UART_SetConfig+0x2dc>)
 8009548:	4013      	ands	r3, r2
 800954a:	0019      	movs	r1, r3
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	697a      	ldr	r2, [r7, #20]
 8009552:	430a      	orrs	r2, r1
 8009554:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	685b      	ldr	r3, [r3, #4]
 800955c:	4aa6      	ldr	r2, [pc, #664]	@ (80097f8 <UART_SetConfig+0x2e0>)
 800955e:	4013      	ands	r3, r2
 8009560:	0019      	movs	r1, r3
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	68da      	ldr	r2, [r3, #12]
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	430a      	orrs	r2, r1
 800956c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	699b      	ldr	r3, [r3, #24]
 8009572:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6a1b      	ldr	r3, [r3, #32]
 8009578:	697a      	ldr	r2, [r7, #20]
 800957a:	4313      	orrs	r3, r2
 800957c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	689b      	ldr	r3, [r3, #8]
 8009584:	4a9d      	ldr	r2, [pc, #628]	@ (80097fc <UART_SetConfig+0x2e4>)
 8009586:	4013      	ands	r3, r2
 8009588:	0019      	movs	r1, r3
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	697a      	ldr	r2, [r7, #20]
 8009590:	430a      	orrs	r2, r1
 8009592:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800959a:	220f      	movs	r2, #15
 800959c:	4393      	bics	r3, r2
 800959e:	0019      	movs	r1, r3
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	430a      	orrs	r2, r1
 80095aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4a93      	ldr	r2, [pc, #588]	@ (8009800 <UART_SetConfig+0x2e8>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d127      	bne.n	8009606 <UART_SetConfig+0xee>
 80095b6:	4b93      	ldr	r3, [pc, #588]	@ (8009804 <UART_SetConfig+0x2ec>)
 80095b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095ba:	2203      	movs	r2, #3
 80095bc:	4013      	ands	r3, r2
 80095be:	2b03      	cmp	r3, #3
 80095c0:	d017      	beq.n	80095f2 <UART_SetConfig+0xda>
 80095c2:	d81b      	bhi.n	80095fc <UART_SetConfig+0xe4>
 80095c4:	2b02      	cmp	r3, #2
 80095c6:	d00a      	beq.n	80095de <UART_SetConfig+0xc6>
 80095c8:	d818      	bhi.n	80095fc <UART_SetConfig+0xe4>
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d002      	beq.n	80095d4 <UART_SetConfig+0xbc>
 80095ce:	2b01      	cmp	r3, #1
 80095d0:	d00a      	beq.n	80095e8 <UART_SetConfig+0xd0>
 80095d2:	e013      	b.n	80095fc <UART_SetConfig+0xe4>
 80095d4:	231f      	movs	r3, #31
 80095d6:	18fb      	adds	r3, r7, r3
 80095d8:	2200      	movs	r2, #0
 80095da:	701a      	strb	r2, [r3, #0]
 80095dc:	e021      	b.n	8009622 <UART_SetConfig+0x10a>
 80095de:	231f      	movs	r3, #31
 80095e0:	18fb      	adds	r3, r7, r3
 80095e2:	2202      	movs	r2, #2
 80095e4:	701a      	strb	r2, [r3, #0]
 80095e6:	e01c      	b.n	8009622 <UART_SetConfig+0x10a>
 80095e8:	231f      	movs	r3, #31
 80095ea:	18fb      	adds	r3, r7, r3
 80095ec:	2204      	movs	r2, #4
 80095ee:	701a      	strb	r2, [r3, #0]
 80095f0:	e017      	b.n	8009622 <UART_SetConfig+0x10a>
 80095f2:	231f      	movs	r3, #31
 80095f4:	18fb      	adds	r3, r7, r3
 80095f6:	2208      	movs	r2, #8
 80095f8:	701a      	strb	r2, [r3, #0]
 80095fa:	e012      	b.n	8009622 <UART_SetConfig+0x10a>
 80095fc:	231f      	movs	r3, #31
 80095fe:	18fb      	adds	r3, r7, r3
 8009600:	2210      	movs	r2, #16
 8009602:	701a      	strb	r2, [r3, #0]
 8009604:	e00d      	b.n	8009622 <UART_SetConfig+0x10a>
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	4a7f      	ldr	r2, [pc, #508]	@ (8009808 <UART_SetConfig+0x2f0>)
 800960c:	4293      	cmp	r3, r2
 800960e:	d104      	bne.n	800961a <UART_SetConfig+0x102>
 8009610:	231f      	movs	r3, #31
 8009612:	18fb      	adds	r3, r7, r3
 8009614:	2200      	movs	r2, #0
 8009616:	701a      	strb	r2, [r3, #0]
 8009618:	e003      	b.n	8009622 <UART_SetConfig+0x10a>
 800961a:	231f      	movs	r3, #31
 800961c:	18fb      	adds	r3, r7, r3
 800961e:	2210      	movs	r2, #16
 8009620:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	69da      	ldr	r2, [r3, #28]
 8009626:	2380      	movs	r3, #128	@ 0x80
 8009628:	021b      	lsls	r3, r3, #8
 800962a:	429a      	cmp	r2, r3
 800962c:	d000      	beq.n	8009630 <UART_SetConfig+0x118>
 800962e:	e06f      	b.n	8009710 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8009630:	231f      	movs	r3, #31
 8009632:	18fb      	adds	r3, r7, r3
 8009634:	781b      	ldrb	r3, [r3, #0]
 8009636:	2b08      	cmp	r3, #8
 8009638:	d01f      	beq.n	800967a <UART_SetConfig+0x162>
 800963a:	dc22      	bgt.n	8009682 <UART_SetConfig+0x16a>
 800963c:	2b04      	cmp	r3, #4
 800963e:	d017      	beq.n	8009670 <UART_SetConfig+0x158>
 8009640:	dc1f      	bgt.n	8009682 <UART_SetConfig+0x16a>
 8009642:	2b00      	cmp	r3, #0
 8009644:	d002      	beq.n	800964c <UART_SetConfig+0x134>
 8009646:	2b02      	cmp	r3, #2
 8009648:	d005      	beq.n	8009656 <UART_SetConfig+0x13e>
 800964a:	e01a      	b.n	8009682 <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800964c:	f7fe f868 	bl	8007720 <HAL_RCC_GetPCLK1Freq>
 8009650:	0003      	movs	r3, r0
 8009652:	61bb      	str	r3, [r7, #24]
        break;
 8009654:	e01c      	b.n	8009690 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8009656:	4b6b      	ldr	r3, [pc, #428]	@ (8009804 <UART_SetConfig+0x2ec>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	095b      	lsrs	r3, r3, #5
 800965c:	2207      	movs	r2, #7
 800965e:	4013      	ands	r3, r2
 8009660:	3301      	adds	r3, #1
 8009662:	0019      	movs	r1, r3
 8009664:	4869      	ldr	r0, [pc, #420]	@ (800980c <UART_SetConfig+0x2f4>)
 8009666:	f7f6 fd4f 	bl	8000108 <__udivsi3>
 800966a:	0003      	movs	r3, r0
 800966c:	61bb      	str	r3, [r7, #24]
        break;
 800966e:	e00f      	b.n	8009690 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009670:	f7fd ffe0 	bl	8007634 <HAL_RCC_GetSysClockFreq>
 8009674:	0003      	movs	r3, r0
 8009676:	61bb      	str	r3, [r7, #24]
        break;
 8009678:	e00a      	b.n	8009690 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800967a:	2380      	movs	r3, #128	@ 0x80
 800967c:	021b      	lsls	r3, r3, #8
 800967e:	61bb      	str	r3, [r7, #24]
        break;
 8009680:	e006      	b.n	8009690 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8009682:	2300      	movs	r3, #0
 8009684:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009686:	231e      	movs	r3, #30
 8009688:	18fb      	adds	r3, r7, r3
 800968a:	2201      	movs	r2, #1
 800968c:	701a      	strb	r2, [r3, #0]
        break;
 800968e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009690:	69bb      	ldr	r3, [r7, #24]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d100      	bne.n	8009698 <UART_SetConfig+0x180>
 8009696:	e097      	b.n	80097c8 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800969c:	4b5c      	ldr	r3, [pc, #368]	@ (8009810 <UART_SetConfig+0x2f8>)
 800969e:	0052      	lsls	r2, r2, #1
 80096a0:	5ad3      	ldrh	r3, [r2, r3]
 80096a2:	0019      	movs	r1, r3
 80096a4:	69b8      	ldr	r0, [r7, #24]
 80096a6:	f7f6 fd2f 	bl	8000108 <__udivsi3>
 80096aa:	0003      	movs	r3, r0
 80096ac:	005a      	lsls	r2, r3, #1
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	685b      	ldr	r3, [r3, #4]
 80096b2:	085b      	lsrs	r3, r3, #1
 80096b4:	18d2      	adds	r2, r2, r3
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	685b      	ldr	r3, [r3, #4]
 80096ba:	0019      	movs	r1, r3
 80096bc:	0010      	movs	r0, r2
 80096be:	f7f6 fd23 	bl	8000108 <__udivsi3>
 80096c2:	0003      	movs	r3, r0
 80096c4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80096c6:	693b      	ldr	r3, [r7, #16]
 80096c8:	2b0f      	cmp	r3, #15
 80096ca:	d91c      	bls.n	8009706 <UART_SetConfig+0x1ee>
 80096cc:	693a      	ldr	r2, [r7, #16]
 80096ce:	2380      	movs	r3, #128	@ 0x80
 80096d0:	025b      	lsls	r3, r3, #9
 80096d2:	429a      	cmp	r2, r3
 80096d4:	d217      	bcs.n	8009706 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80096d6:	693b      	ldr	r3, [r7, #16]
 80096d8:	b29a      	uxth	r2, r3
 80096da:	200e      	movs	r0, #14
 80096dc:	183b      	adds	r3, r7, r0
 80096de:	210f      	movs	r1, #15
 80096e0:	438a      	bics	r2, r1
 80096e2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	085b      	lsrs	r3, r3, #1
 80096e8:	b29b      	uxth	r3, r3
 80096ea:	2207      	movs	r2, #7
 80096ec:	4013      	ands	r3, r2
 80096ee:	b299      	uxth	r1, r3
 80096f0:	183b      	adds	r3, r7, r0
 80096f2:	183a      	adds	r2, r7, r0
 80096f4:	8812      	ldrh	r2, [r2, #0]
 80096f6:	430a      	orrs	r2, r1
 80096f8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	183a      	adds	r2, r7, r0
 8009700:	8812      	ldrh	r2, [r2, #0]
 8009702:	60da      	str	r2, [r3, #12]
 8009704:	e060      	b.n	80097c8 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8009706:	231e      	movs	r3, #30
 8009708:	18fb      	adds	r3, r7, r3
 800970a:	2201      	movs	r2, #1
 800970c:	701a      	strb	r2, [r3, #0]
 800970e:	e05b      	b.n	80097c8 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009710:	231f      	movs	r3, #31
 8009712:	18fb      	adds	r3, r7, r3
 8009714:	781b      	ldrb	r3, [r3, #0]
 8009716:	2b08      	cmp	r3, #8
 8009718:	d01f      	beq.n	800975a <UART_SetConfig+0x242>
 800971a:	dc22      	bgt.n	8009762 <UART_SetConfig+0x24a>
 800971c:	2b04      	cmp	r3, #4
 800971e:	d017      	beq.n	8009750 <UART_SetConfig+0x238>
 8009720:	dc1f      	bgt.n	8009762 <UART_SetConfig+0x24a>
 8009722:	2b00      	cmp	r3, #0
 8009724:	d002      	beq.n	800972c <UART_SetConfig+0x214>
 8009726:	2b02      	cmp	r3, #2
 8009728:	d005      	beq.n	8009736 <UART_SetConfig+0x21e>
 800972a:	e01a      	b.n	8009762 <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800972c:	f7fd fff8 	bl	8007720 <HAL_RCC_GetPCLK1Freq>
 8009730:	0003      	movs	r3, r0
 8009732:	61bb      	str	r3, [r7, #24]
        break;
 8009734:	e01c      	b.n	8009770 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8009736:	4b33      	ldr	r3, [pc, #204]	@ (8009804 <UART_SetConfig+0x2ec>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	095b      	lsrs	r3, r3, #5
 800973c:	2207      	movs	r2, #7
 800973e:	4013      	ands	r3, r2
 8009740:	3301      	adds	r3, #1
 8009742:	0019      	movs	r1, r3
 8009744:	4831      	ldr	r0, [pc, #196]	@ (800980c <UART_SetConfig+0x2f4>)
 8009746:	f7f6 fcdf 	bl	8000108 <__udivsi3>
 800974a:	0003      	movs	r3, r0
 800974c:	61bb      	str	r3, [r7, #24]
        break;
 800974e:	e00f      	b.n	8009770 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009750:	f7fd ff70 	bl	8007634 <HAL_RCC_GetSysClockFreq>
 8009754:	0003      	movs	r3, r0
 8009756:	61bb      	str	r3, [r7, #24]
        break;
 8009758:	e00a      	b.n	8009770 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800975a:	2380      	movs	r3, #128	@ 0x80
 800975c:	021b      	lsls	r3, r3, #8
 800975e:	61bb      	str	r3, [r7, #24]
        break;
 8009760:	e006      	b.n	8009770 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8009762:	2300      	movs	r3, #0
 8009764:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009766:	231e      	movs	r3, #30
 8009768:	18fb      	adds	r3, r7, r3
 800976a:	2201      	movs	r2, #1
 800976c:	701a      	strb	r2, [r3, #0]
        break;
 800976e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8009770:	69bb      	ldr	r3, [r7, #24]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d028      	beq.n	80097c8 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800977a:	4b25      	ldr	r3, [pc, #148]	@ (8009810 <UART_SetConfig+0x2f8>)
 800977c:	0052      	lsls	r2, r2, #1
 800977e:	5ad3      	ldrh	r3, [r2, r3]
 8009780:	0019      	movs	r1, r3
 8009782:	69b8      	ldr	r0, [r7, #24]
 8009784:	f7f6 fcc0 	bl	8000108 <__udivsi3>
 8009788:	0003      	movs	r3, r0
 800978a:	001a      	movs	r2, r3
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	685b      	ldr	r3, [r3, #4]
 8009790:	085b      	lsrs	r3, r3, #1
 8009792:	18d2      	adds	r2, r2, r3
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	685b      	ldr	r3, [r3, #4]
 8009798:	0019      	movs	r1, r3
 800979a:	0010      	movs	r0, r2
 800979c:	f7f6 fcb4 	bl	8000108 <__udivsi3>
 80097a0:	0003      	movs	r3, r0
 80097a2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	2b0f      	cmp	r3, #15
 80097a8:	d90a      	bls.n	80097c0 <UART_SetConfig+0x2a8>
 80097aa:	693a      	ldr	r2, [r7, #16]
 80097ac:	2380      	movs	r3, #128	@ 0x80
 80097ae:	025b      	lsls	r3, r3, #9
 80097b0:	429a      	cmp	r2, r3
 80097b2:	d205      	bcs.n	80097c0 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80097b4:	693b      	ldr	r3, [r7, #16]
 80097b6:	b29a      	uxth	r2, r3
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	60da      	str	r2, [r3, #12]
 80097be:	e003      	b.n	80097c8 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 80097c0:	231e      	movs	r3, #30
 80097c2:	18fb      	adds	r3, r7, r3
 80097c4:	2201      	movs	r2, #1
 80097c6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	226a      	movs	r2, #106	@ 0x6a
 80097cc:	2101      	movs	r1, #1
 80097ce:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2268      	movs	r2, #104	@ 0x68
 80097d4:	2101      	movs	r1, #1
 80097d6:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2200      	movs	r2, #0
 80097dc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2200      	movs	r2, #0
 80097e2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80097e4:	231e      	movs	r3, #30
 80097e6:	18fb      	adds	r3, r7, r3
 80097e8:	781b      	ldrb	r3, [r3, #0]
}
 80097ea:	0018      	movs	r0, r3
 80097ec:	46bd      	mov	sp, r7
 80097ee:	b008      	add	sp, #32
 80097f0:	bd80      	pop	{r7, pc}
 80097f2:	46c0      	nop			@ (mov r8, r8)
 80097f4:	cfff69f3 	.word	0xcfff69f3
 80097f8:	ffffcfff 	.word	0xffffcfff
 80097fc:	11fff4ff 	.word	0x11fff4ff
 8009800:	40013800 	.word	0x40013800
 8009804:	40021000 	.word	0x40021000
 8009808:	40004400 	.word	0x40004400
 800980c:	02dc6c00 	.word	0x02dc6c00
 8009810:	0800adb0 	.word	0x0800adb0

08009814 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b082      	sub	sp, #8
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009820:	2208      	movs	r2, #8
 8009822:	4013      	ands	r3, r2
 8009824:	d00b      	beq.n	800983e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	685b      	ldr	r3, [r3, #4]
 800982c:	4a4a      	ldr	r2, [pc, #296]	@ (8009958 <UART_AdvFeatureConfig+0x144>)
 800982e:	4013      	ands	r3, r2
 8009830:	0019      	movs	r1, r3
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	430a      	orrs	r2, r1
 800983c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009842:	2201      	movs	r2, #1
 8009844:	4013      	ands	r3, r2
 8009846:	d00b      	beq.n	8009860 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	685b      	ldr	r3, [r3, #4]
 800984e:	4a43      	ldr	r2, [pc, #268]	@ (800995c <UART_AdvFeatureConfig+0x148>)
 8009850:	4013      	ands	r3, r2
 8009852:	0019      	movs	r1, r3
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	430a      	orrs	r2, r1
 800985e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009864:	2202      	movs	r2, #2
 8009866:	4013      	ands	r3, r2
 8009868:	d00b      	beq.n	8009882 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	685b      	ldr	r3, [r3, #4]
 8009870:	4a3b      	ldr	r2, [pc, #236]	@ (8009960 <UART_AdvFeatureConfig+0x14c>)
 8009872:	4013      	ands	r3, r2
 8009874:	0019      	movs	r1, r3
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	430a      	orrs	r2, r1
 8009880:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009886:	2204      	movs	r2, #4
 8009888:	4013      	ands	r3, r2
 800988a:	d00b      	beq.n	80098a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	685b      	ldr	r3, [r3, #4]
 8009892:	4a34      	ldr	r2, [pc, #208]	@ (8009964 <UART_AdvFeatureConfig+0x150>)
 8009894:	4013      	ands	r3, r2
 8009896:	0019      	movs	r1, r3
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	430a      	orrs	r2, r1
 80098a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098a8:	2210      	movs	r2, #16
 80098aa:	4013      	ands	r3, r2
 80098ac:	d00b      	beq.n	80098c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	689b      	ldr	r3, [r3, #8]
 80098b4:	4a2c      	ldr	r2, [pc, #176]	@ (8009968 <UART_AdvFeatureConfig+0x154>)
 80098b6:	4013      	ands	r3, r2
 80098b8:	0019      	movs	r1, r3
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	430a      	orrs	r2, r1
 80098c4:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098ca:	2220      	movs	r2, #32
 80098cc:	4013      	ands	r3, r2
 80098ce:	d00b      	beq.n	80098e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	689b      	ldr	r3, [r3, #8]
 80098d6:	4a25      	ldr	r2, [pc, #148]	@ (800996c <UART_AdvFeatureConfig+0x158>)
 80098d8:	4013      	ands	r3, r2
 80098da:	0019      	movs	r1, r3
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	430a      	orrs	r2, r1
 80098e6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098ec:	2240      	movs	r2, #64	@ 0x40
 80098ee:	4013      	ands	r3, r2
 80098f0:	d01d      	beq.n	800992e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	685b      	ldr	r3, [r3, #4]
 80098f8:	4a1d      	ldr	r2, [pc, #116]	@ (8009970 <UART_AdvFeatureConfig+0x15c>)
 80098fa:	4013      	ands	r3, r2
 80098fc:	0019      	movs	r1, r3
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	430a      	orrs	r2, r1
 8009908:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800990e:	2380      	movs	r3, #128	@ 0x80
 8009910:	035b      	lsls	r3, r3, #13
 8009912:	429a      	cmp	r2, r3
 8009914:	d10b      	bne.n	800992e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	685b      	ldr	r3, [r3, #4]
 800991c:	4a15      	ldr	r2, [pc, #84]	@ (8009974 <UART_AdvFeatureConfig+0x160>)
 800991e:	4013      	ands	r3, r2
 8009920:	0019      	movs	r1, r3
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	430a      	orrs	r2, r1
 800992c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009932:	2280      	movs	r2, #128	@ 0x80
 8009934:	4013      	ands	r3, r2
 8009936:	d00b      	beq.n	8009950 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	685b      	ldr	r3, [r3, #4]
 800993e:	4a0e      	ldr	r2, [pc, #56]	@ (8009978 <UART_AdvFeatureConfig+0x164>)
 8009940:	4013      	ands	r3, r2
 8009942:	0019      	movs	r1, r3
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	430a      	orrs	r2, r1
 800994e:	605a      	str	r2, [r3, #4]
  }
}
 8009950:	46c0      	nop			@ (mov r8, r8)
 8009952:	46bd      	mov	sp, r7
 8009954:	b002      	add	sp, #8
 8009956:	bd80      	pop	{r7, pc}
 8009958:	ffff7fff 	.word	0xffff7fff
 800995c:	fffdffff 	.word	0xfffdffff
 8009960:	fffeffff 	.word	0xfffeffff
 8009964:	fffbffff 	.word	0xfffbffff
 8009968:	ffffefff 	.word	0xffffefff
 800996c:	ffffdfff 	.word	0xffffdfff
 8009970:	ffefffff 	.word	0xffefffff
 8009974:	ff9fffff 	.word	0xff9fffff
 8009978:	fff7ffff 	.word	0xfff7ffff

0800997c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b092      	sub	sp, #72	@ 0x48
 8009980:	af02      	add	r7, sp, #8
 8009982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2290      	movs	r2, #144	@ 0x90
 8009988:	2100      	movs	r1, #0
 800998a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800998c:	f7fa f994 	bl	8003cb8 <HAL_GetTick>
 8009990:	0003      	movs	r3, r0
 8009992:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	2208      	movs	r2, #8
 800999c:	4013      	ands	r3, r2
 800999e:	2b08      	cmp	r3, #8
 80099a0:	d12d      	bne.n	80099fe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80099a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099a4:	2280      	movs	r2, #128	@ 0x80
 80099a6:	0391      	lsls	r1, r2, #14
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	4a47      	ldr	r2, [pc, #284]	@ (8009ac8 <UART_CheckIdleState+0x14c>)
 80099ac:	9200      	str	r2, [sp, #0]
 80099ae:	2200      	movs	r2, #0
 80099b0:	f000 f88e 	bl	8009ad0 <UART_WaitOnFlagUntilTimeout>
 80099b4:	1e03      	subs	r3, r0, #0
 80099b6:	d022      	beq.n	80099fe <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80099b8:	f3ef 8310 	mrs	r3, PRIMASK
 80099bc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80099be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80099c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80099c2:	2301      	movs	r3, #1
 80099c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80099c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099c8:	f383 8810 	msr	PRIMASK, r3
}
 80099cc:	46c0      	nop			@ (mov r8, r8)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	681a      	ldr	r2, [r3, #0]
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	2180      	movs	r1, #128	@ 0x80
 80099da:	438a      	bics	r2, r1
 80099dc:	601a      	str	r2, [r3, #0]
 80099de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80099e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099e4:	f383 8810 	msr	PRIMASK, r3
}
 80099e8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2288      	movs	r2, #136	@ 0x88
 80099ee:	2120      	movs	r1, #32
 80099f0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2284      	movs	r2, #132	@ 0x84
 80099f6:	2100      	movs	r1, #0
 80099f8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80099fa:	2303      	movs	r3, #3
 80099fc:	e060      	b.n	8009ac0 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	2204      	movs	r2, #4
 8009a06:	4013      	ands	r3, r2
 8009a08:	2b04      	cmp	r3, #4
 8009a0a:	d146      	bne.n	8009a9a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009a0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a0e:	2280      	movs	r2, #128	@ 0x80
 8009a10:	03d1      	lsls	r1, r2, #15
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	4a2c      	ldr	r2, [pc, #176]	@ (8009ac8 <UART_CheckIdleState+0x14c>)
 8009a16:	9200      	str	r2, [sp, #0]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	f000 f859 	bl	8009ad0 <UART_WaitOnFlagUntilTimeout>
 8009a1e:	1e03      	subs	r3, r0, #0
 8009a20:	d03b      	beq.n	8009a9a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009a22:	f3ef 8310 	mrs	r3, PRIMASK
 8009a26:	60fb      	str	r3, [r7, #12]
  return(result);
 8009a28:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009a2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a30:	693b      	ldr	r3, [r7, #16]
 8009a32:	f383 8810 	msr	PRIMASK, r3
}
 8009a36:	46c0      	nop			@ (mov r8, r8)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	681a      	ldr	r2, [r3, #0]
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	4922      	ldr	r1, [pc, #136]	@ (8009acc <UART_CheckIdleState+0x150>)
 8009a44:	400a      	ands	r2, r1
 8009a46:	601a      	str	r2, [r3, #0]
 8009a48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a4a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	f383 8810 	msr	PRIMASK, r3
}
 8009a52:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009a54:	f3ef 8310 	mrs	r3, PRIMASK
 8009a58:	61bb      	str	r3, [r7, #24]
  return(result);
 8009a5a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8009a5e:	2301      	movs	r3, #1
 8009a60:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a62:	69fb      	ldr	r3, [r7, #28]
 8009a64:	f383 8810 	msr	PRIMASK, r3
}
 8009a68:	46c0      	nop			@ (mov r8, r8)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	689a      	ldr	r2, [r3, #8]
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	2101      	movs	r1, #1
 8009a76:	438a      	bics	r2, r1
 8009a78:	609a      	str	r2, [r3, #8]
 8009a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a7c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a7e:	6a3b      	ldr	r3, [r7, #32]
 8009a80:	f383 8810 	msr	PRIMASK, r3
}
 8009a84:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	228c      	movs	r2, #140	@ 0x8c
 8009a8a:	2120      	movs	r1, #32
 8009a8c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2284      	movs	r2, #132	@ 0x84
 8009a92:	2100      	movs	r1, #0
 8009a94:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009a96:	2303      	movs	r3, #3
 8009a98:	e012      	b.n	8009ac0 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2288      	movs	r2, #136	@ 0x88
 8009a9e:	2120      	movs	r1, #32
 8009aa0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	228c      	movs	r2, #140	@ 0x8c
 8009aa6:	2120      	movs	r1, #32
 8009aa8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2200      	movs	r2, #0
 8009aae:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2284      	movs	r2, #132	@ 0x84
 8009aba:	2100      	movs	r1, #0
 8009abc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009abe:	2300      	movs	r3, #0
}
 8009ac0:	0018      	movs	r0, r3
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	b010      	add	sp, #64	@ 0x40
 8009ac6:	bd80      	pop	{r7, pc}
 8009ac8:	01ffffff 	.word	0x01ffffff
 8009acc:	fffffedf 	.word	0xfffffedf

08009ad0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b084      	sub	sp, #16
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	60f8      	str	r0, [r7, #12]
 8009ad8:	60b9      	str	r1, [r7, #8]
 8009ada:	603b      	str	r3, [r7, #0]
 8009adc:	1dfb      	adds	r3, r7, #7
 8009ade:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ae0:	e051      	b.n	8009b86 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ae2:	69bb      	ldr	r3, [r7, #24]
 8009ae4:	3301      	adds	r3, #1
 8009ae6:	d04e      	beq.n	8009b86 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ae8:	f7fa f8e6 	bl	8003cb8 <HAL_GetTick>
 8009aec:	0002      	movs	r2, r0
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	1ad3      	subs	r3, r2, r3
 8009af2:	69ba      	ldr	r2, [r7, #24]
 8009af4:	429a      	cmp	r2, r3
 8009af6:	d302      	bcc.n	8009afe <UART_WaitOnFlagUntilTimeout+0x2e>
 8009af8:	69bb      	ldr	r3, [r7, #24]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d101      	bne.n	8009b02 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8009afe:	2303      	movs	r3, #3
 8009b00:	e051      	b.n	8009ba6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	2204      	movs	r2, #4
 8009b0a:	4013      	ands	r3, r2
 8009b0c:	d03b      	beq.n	8009b86 <UART_WaitOnFlagUntilTimeout+0xb6>
 8009b0e:	68bb      	ldr	r3, [r7, #8]
 8009b10:	2b80      	cmp	r3, #128	@ 0x80
 8009b12:	d038      	beq.n	8009b86 <UART_WaitOnFlagUntilTimeout+0xb6>
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	2b40      	cmp	r3, #64	@ 0x40
 8009b18:	d035      	beq.n	8009b86 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	69db      	ldr	r3, [r3, #28]
 8009b20:	2208      	movs	r2, #8
 8009b22:	4013      	ands	r3, r2
 8009b24:	2b08      	cmp	r3, #8
 8009b26:	d111      	bne.n	8009b4c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	2208      	movs	r2, #8
 8009b2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	0018      	movs	r0, r3
 8009b34:	f000 f922 	bl	8009d7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	2290      	movs	r2, #144	@ 0x90
 8009b3c:	2108      	movs	r1, #8
 8009b3e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	2284      	movs	r2, #132	@ 0x84
 8009b44:	2100      	movs	r1, #0
 8009b46:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8009b48:	2301      	movs	r3, #1
 8009b4a:	e02c      	b.n	8009ba6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	69da      	ldr	r2, [r3, #28]
 8009b52:	2380      	movs	r3, #128	@ 0x80
 8009b54:	011b      	lsls	r3, r3, #4
 8009b56:	401a      	ands	r2, r3
 8009b58:	2380      	movs	r3, #128	@ 0x80
 8009b5a:	011b      	lsls	r3, r3, #4
 8009b5c:	429a      	cmp	r2, r3
 8009b5e:	d112      	bne.n	8009b86 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	2280      	movs	r2, #128	@ 0x80
 8009b66:	0112      	lsls	r2, r2, #4
 8009b68:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	0018      	movs	r0, r3
 8009b6e:	f000 f905 	bl	8009d7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	2290      	movs	r2, #144	@ 0x90
 8009b76:	2120      	movs	r1, #32
 8009b78:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	2284      	movs	r2, #132	@ 0x84
 8009b7e:	2100      	movs	r1, #0
 8009b80:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8009b82:	2303      	movs	r3, #3
 8009b84:	e00f      	b.n	8009ba6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	69db      	ldr	r3, [r3, #28]
 8009b8c:	68ba      	ldr	r2, [r7, #8]
 8009b8e:	4013      	ands	r3, r2
 8009b90:	68ba      	ldr	r2, [r7, #8]
 8009b92:	1ad3      	subs	r3, r2, r3
 8009b94:	425a      	negs	r2, r3
 8009b96:	4153      	adcs	r3, r2
 8009b98:	b2db      	uxtb	r3, r3
 8009b9a:	001a      	movs	r2, r3
 8009b9c:	1dfb      	adds	r3, r7, #7
 8009b9e:	781b      	ldrb	r3, [r3, #0]
 8009ba0:	429a      	cmp	r2, r3
 8009ba2:	d09e      	beq.n	8009ae2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009ba4:	2300      	movs	r3, #0
}
 8009ba6:	0018      	movs	r0, r3
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	b004      	add	sp, #16
 8009bac:	bd80      	pop	{r7, pc}
	...

08009bb0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b090      	sub	sp, #64	@ 0x40
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	60f8      	str	r0, [r7, #12]
 8009bb8:	60b9      	str	r1, [r7, #8]
 8009bba:	1dbb      	adds	r3, r7, #6
 8009bbc:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	68ba      	ldr	r2, [r7, #8]
 8009bc2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	1dba      	adds	r2, r7, #6
 8009bc8:	215c      	movs	r1, #92	@ 0x5c
 8009bca:	8812      	ldrh	r2, [r2, #0]
 8009bcc:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	2290      	movs	r2, #144	@ 0x90
 8009bd2:	2100      	movs	r1, #0
 8009bd4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	228c      	movs	r2, #140	@ 0x8c
 8009bda:	2122      	movs	r1, #34	@ 0x22
 8009bdc:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	2280      	movs	r2, #128	@ 0x80
 8009be2:	589b      	ldr	r3, [r3, r2]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d02d      	beq.n	8009c44 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	2280      	movs	r2, #128	@ 0x80
 8009bec:	589b      	ldr	r3, [r3, r2]
 8009bee:	4a40      	ldr	r2, [pc, #256]	@ (8009cf0 <UART_Start_Receive_DMA+0x140>)
 8009bf0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	2280      	movs	r2, #128	@ 0x80
 8009bf6:	589b      	ldr	r3, [r3, r2]
 8009bf8:	4a3e      	ldr	r2, [pc, #248]	@ (8009cf4 <UART_Start_Receive_DMA+0x144>)
 8009bfa:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	2280      	movs	r2, #128	@ 0x80
 8009c00:	589b      	ldr	r3, [r3, r2]
 8009c02:	4a3d      	ldr	r2, [pc, #244]	@ (8009cf8 <UART_Start_Receive_DMA+0x148>)
 8009c04:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	2280      	movs	r2, #128	@ 0x80
 8009c0a:	589b      	ldr	r3, [r3, r2]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	2280      	movs	r2, #128	@ 0x80
 8009c14:	5898      	ldr	r0, [r3, r2]
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	3324      	adds	r3, #36	@ 0x24
 8009c1c:	0019      	movs	r1, r3
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c22:	001a      	movs	r2, r3
 8009c24:	1dbb      	adds	r3, r7, #6
 8009c26:	881b      	ldrh	r3, [r3, #0]
 8009c28:	f7fa fa86 	bl	8004138 <HAL_DMA_Start_IT>
 8009c2c:	1e03      	subs	r3, r0, #0
 8009c2e:	d009      	beq.n	8009c44 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	2290      	movs	r2, #144	@ 0x90
 8009c34:	2110      	movs	r1, #16
 8009c36:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	228c      	movs	r2, #140	@ 0x8c
 8009c3c:	2120      	movs	r1, #32
 8009c3e:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8009c40:	2301      	movs	r3, #1
 8009c42:	e050      	b.n	8009ce6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	691b      	ldr	r3, [r3, #16]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d019      	beq.n	8009c80 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009c4c:	f3ef 8310 	mrs	r3, PRIMASK
 8009c50:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8009c52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009c54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009c56:	2301      	movs	r3, #1
 8009c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c5c:	f383 8810 	msr	PRIMASK, r3
}
 8009c60:	46c0      	nop			@ (mov r8, r8)
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	681a      	ldr	r2, [r3, #0]
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	2180      	movs	r1, #128	@ 0x80
 8009c6e:	0049      	lsls	r1, r1, #1
 8009c70:	430a      	orrs	r2, r1
 8009c72:	601a      	str	r2, [r3, #0]
 8009c74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c76:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c7a:	f383 8810 	msr	PRIMASK, r3
}
 8009c7e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009c80:	f3ef 8310 	mrs	r3, PRIMASK
 8009c84:	613b      	str	r3, [r7, #16]
  return(result);
 8009c86:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c88:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c8e:	697b      	ldr	r3, [r7, #20]
 8009c90:	f383 8810 	msr	PRIMASK, r3
}
 8009c94:	46c0      	nop			@ (mov r8, r8)
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	689a      	ldr	r2, [r3, #8]
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	2101      	movs	r1, #1
 8009ca2:	430a      	orrs	r2, r1
 8009ca4:	609a      	str	r2, [r3, #8]
 8009ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ca8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009caa:	69bb      	ldr	r3, [r7, #24]
 8009cac:	f383 8810 	msr	PRIMASK, r3
}
 8009cb0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009cb2:	f3ef 8310 	mrs	r3, PRIMASK
 8009cb6:	61fb      	str	r3, [r7, #28]
  return(result);
 8009cb8:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009cba:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009cc0:	6a3b      	ldr	r3, [r7, #32]
 8009cc2:	f383 8810 	msr	PRIMASK, r3
}
 8009cc6:	46c0      	nop			@ (mov r8, r8)
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	689a      	ldr	r2, [r3, #8]
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	2140      	movs	r1, #64	@ 0x40
 8009cd4:	430a      	orrs	r2, r1
 8009cd6:	609a      	str	r2, [r3, #8]
 8009cd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cda:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cde:	f383 8810 	msr	PRIMASK, r3
}
 8009ce2:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8009ce4:	2300      	movs	r3, #0
}
 8009ce6:	0018      	movs	r0, r3
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	b010      	add	sp, #64	@ 0x40
 8009cec:	bd80      	pop	{r7, pc}
 8009cee:	46c0      	nop			@ (mov r8, r8)
 8009cf0:	08009f01 	.word	0x08009f01
 8009cf4:	0800a031 	.word	0x0800a031
 8009cf8:	0800a073 	.word	0x0800a073

08009cfc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b08a      	sub	sp, #40	@ 0x28
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009d04:	f3ef 8310 	mrs	r3, PRIMASK
 8009d08:	60bb      	str	r3, [r7, #8]
  return(result);
 8009d0a:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009d0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d0e:	2301      	movs	r3, #1
 8009d10:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	f383 8810 	msr	PRIMASK, r3
}
 8009d18:	46c0      	nop			@ (mov r8, r8)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	681a      	ldr	r2, [r3, #0]
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	21c0      	movs	r1, #192	@ 0xc0
 8009d26:	438a      	bics	r2, r1
 8009d28:	601a      	str	r2, [r3, #0]
 8009d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d2c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d2e:	693b      	ldr	r3, [r7, #16]
 8009d30:	f383 8810 	msr	PRIMASK, r3
}
 8009d34:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009d36:	f3ef 8310 	mrs	r3, PRIMASK
 8009d3a:	617b      	str	r3, [r7, #20]
  return(result);
 8009d3c:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009d3e:	623b      	str	r3, [r7, #32]
 8009d40:	2301      	movs	r3, #1
 8009d42:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d44:	69bb      	ldr	r3, [r7, #24]
 8009d46:	f383 8810 	msr	PRIMASK, r3
}
 8009d4a:	46c0      	nop			@ (mov r8, r8)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	689a      	ldr	r2, [r3, #8]
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	4908      	ldr	r1, [pc, #32]	@ (8009d78 <UART_EndTxTransfer+0x7c>)
 8009d58:	400a      	ands	r2, r1
 8009d5a:	609a      	str	r2, [r3, #8]
 8009d5c:	6a3b      	ldr	r3, [r7, #32]
 8009d5e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d60:	69fb      	ldr	r3, [r7, #28]
 8009d62:	f383 8810 	msr	PRIMASK, r3
}
 8009d66:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2288      	movs	r2, #136	@ 0x88
 8009d6c:	2120      	movs	r1, #32
 8009d6e:	5099      	str	r1, [r3, r2]
}
 8009d70:	46c0      	nop			@ (mov r8, r8)
 8009d72:	46bd      	mov	sp, r7
 8009d74:	b00a      	add	sp, #40	@ 0x28
 8009d76:	bd80      	pop	{r7, pc}
 8009d78:	ff7fffff 	.word	0xff7fffff

08009d7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b08e      	sub	sp, #56	@ 0x38
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009d84:	f3ef 8310 	mrs	r3, PRIMASK
 8009d88:	617b      	str	r3, [r7, #20]
  return(result);
 8009d8a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009d8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d8e:	2301      	movs	r3, #1
 8009d90:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d92:	69bb      	ldr	r3, [r7, #24]
 8009d94:	f383 8810 	msr	PRIMASK, r3
}
 8009d98:	46c0      	nop			@ (mov r8, r8)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	681a      	ldr	r2, [r3, #0]
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	4926      	ldr	r1, [pc, #152]	@ (8009e40 <UART_EndRxTransfer+0xc4>)
 8009da6:	400a      	ands	r2, r1
 8009da8:	601a      	str	r2, [r3, #0]
 8009daa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009dac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009dae:	69fb      	ldr	r3, [r7, #28]
 8009db0:	f383 8810 	msr	PRIMASK, r3
}
 8009db4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009db6:	f3ef 8310 	mrs	r3, PRIMASK
 8009dba:	623b      	str	r3, [r7, #32]
  return(result);
 8009dbc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009dbe:	633b      	str	r3, [r7, #48]	@ 0x30
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dc6:	f383 8810 	msr	PRIMASK, r3
}
 8009dca:	46c0      	nop			@ (mov r8, r8)
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	689a      	ldr	r2, [r3, #8]
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	491b      	ldr	r1, [pc, #108]	@ (8009e44 <UART_EndRxTransfer+0xc8>)
 8009dd8:	400a      	ands	r2, r1
 8009dda:	609a      	str	r2, [r3, #8]
 8009ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dde:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009de2:	f383 8810 	msr	PRIMASK, r3
}
 8009de6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009dec:	2b01      	cmp	r3, #1
 8009dee:	d118      	bne.n	8009e22 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009df0:	f3ef 8310 	mrs	r3, PRIMASK
 8009df4:	60bb      	str	r3, [r7, #8]
  return(result);
 8009df6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009df8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	f383 8810 	msr	PRIMASK, r3
}
 8009e04:	46c0      	nop			@ (mov r8, r8)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	681a      	ldr	r2, [r3, #0]
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	2110      	movs	r1, #16
 8009e12:	438a      	bics	r2, r1
 8009e14:	601a      	str	r2, [r3, #0]
 8009e16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e18:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	f383 8810 	msr	PRIMASK, r3
}
 8009e20:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	228c      	movs	r2, #140	@ 0x8c
 8009e26:	2120      	movs	r1, #32
 8009e28:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2200      	movs	r2, #0
 8009e34:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009e36:	46c0      	nop			@ (mov r8, r8)
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	b00e      	add	sp, #56	@ 0x38
 8009e3c:	bd80      	pop	{r7, pc}
 8009e3e:	46c0      	nop			@ (mov r8, r8)
 8009e40:	fffffedf 	.word	0xfffffedf
 8009e44:	effffffe 	.word	0xeffffffe

08009e48 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b08c      	sub	sp, #48	@ 0x30
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e54:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	2220      	movs	r2, #32
 8009e5e:	4013      	ands	r3, r2
 8009e60:	d135      	bne.n	8009ece <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8009e62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e64:	2256      	movs	r2, #86	@ 0x56
 8009e66:	2100      	movs	r1, #0
 8009e68:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009e6a:	f3ef 8310 	mrs	r3, PRIMASK
 8009e6e:	60fb      	str	r3, [r7, #12]
  return(result);
 8009e70:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009e72:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009e74:	2301      	movs	r3, #1
 8009e76:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e78:	693b      	ldr	r3, [r7, #16]
 8009e7a:	f383 8810 	msr	PRIMASK, r3
}
 8009e7e:	46c0      	nop			@ (mov r8, r8)
 8009e80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	689a      	ldr	r2, [r3, #8]
 8009e86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	2180      	movs	r1, #128	@ 0x80
 8009e8c:	438a      	bics	r2, r1
 8009e8e:	609a      	str	r2, [r3, #8]
 8009e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e92:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e94:	697b      	ldr	r3, [r7, #20]
 8009e96:	f383 8810 	msr	PRIMASK, r3
}
 8009e9a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009e9c:	f3ef 8310 	mrs	r3, PRIMASK
 8009ea0:	61bb      	str	r3, [r7, #24]
  return(result);
 8009ea2:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009ea4:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ea6:	2301      	movs	r3, #1
 8009ea8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009eaa:	69fb      	ldr	r3, [r7, #28]
 8009eac:	f383 8810 	msr	PRIMASK, r3
}
 8009eb0:	46c0      	nop			@ (mov r8, r8)
 8009eb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	681a      	ldr	r2, [r3, #0]
 8009eb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	2140      	movs	r1, #64	@ 0x40
 8009ebe:	430a      	orrs	r2, r1
 8009ec0:	601a      	str	r2, [r3, #0]
 8009ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ec4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ec6:	6a3b      	ldr	r3, [r7, #32]
 8009ec8:	f383 8810 	msr	PRIMASK, r3
}
 8009ecc:	e004      	b.n	8009ed8 <UART_DMATransmitCplt+0x90>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 8009ece:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ed0:	0018      	movs	r0, r3
 8009ed2:	f7f8 fab1 	bl	8002438 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009ed6:	46c0      	nop			@ (mov r8, r8)
 8009ed8:	46c0      	nop			@ (mov r8, r8)
 8009eda:	46bd      	mov	sp, r7
 8009edc:	b00c      	add	sp, #48	@ 0x30
 8009ede:	bd80      	pop	{r7, pc}

08009ee0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b084      	sub	sp, #16
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009eec:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	0018      	movs	r0, r3
 8009ef2:	f7ff faf9 	bl	80094e8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ef6:	46c0      	nop			@ (mov r8, r8)
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	b004      	add	sp, #16
 8009efc:	bd80      	pop	{r7, pc}
	...

08009f00 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b094      	sub	sp, #80	@ 0x50
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f0c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	2220      	movs	r2, #32
 8009f16:	4013      	ands	r3, r2
 8009f18:	d16f      	bne.n	8009ffa <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8009f1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f1c:	225e      	movs	r2, #94	@ 0x5e
 8009f1e:	2100      	movs	r1, #0
 8009f20:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009f22:	f3ef 8310 	mrs	r3, PRIMASK
 8009f26:	61bb      	str	r3, [r7, #24]
  return(result);
 8009f28:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f30:	69fb      	ldr	r3, [r7, #28]
 8009f32:	f383 8810 	msr	PRIMASK, r3
}
 8009f36:	46c0      	nop			@ (mov r8, r8)
 8009f38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	681a      	ldr	r2, [r3, #0]
 8009f3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	493a      	ldr	r1, [pc, #232]	@ (800a02c <UART_DMAReceiveCplt+0x12c>)
 8009f44:	400a      	ands	r2, r1
 8009f46:	601a      	str	r2, [r3, #0]
 8009f48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009f4a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f4c:	6a3b      	ldr	r3, [r7, #32]
 8009f4e:	f383 8810 	msr	PRIMASK, r3
}
 8009f52:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009f54:	f3ef 8310 	mrs	r3, PRIMASK
 8009f58:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8009f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f5e:	2301      	movs	r3, #1
 8009f60:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f64:	f383 8810 	msr	PRIMASK, r3
}
 8009f68:	46c0      	nop			@ (mov r8, r8)
 8009f6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	689a      	ldr	r2, [r3, #8]
 8009f70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	2101      	movs	r1, #1
 8009f76:	438a      	bics	r2, r1
 8009f78:	609a      	str	r2, [r3, #8]
 8009f7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f80:	f383 8810 	msr	PRIMASK, r3
}
 8009f84:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009f86:	f3ef 8310 	mrs	r3, PRIMASK
 8009f8a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8009f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f8e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009f90:	2301      	movs	r3, #1
 8009f92:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f96:	f383 8810 	msr	PRIMASK, r3
}
 8009f9a:	46c0      	nop			@ (mov r8, r8)
 8009f9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	689a      	ldr	r2, [r3, #8]
 8009fa2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	2140      	movs	r1, #64	@ 0x40
 8009fa8:	438a      	bics	r2, r1
 8009faa:	609a      	str	r2, [r3, #8]
 8009fac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009fae:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009fb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fb2:	f383 8810 	msr	PRIMASK, r3
}
 8009fb6:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009fb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009fba:	228c      	movs	r2, #140	@ 0x8c
 8009fbc:	2120      	movs	r1, #32
 8009fbe:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009fc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009fc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009fc4:	2b01      	cmp	r3, #1
 8009fc6:	d118      	bne.n	8009ffa <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009fc8:	f3ef 8310 	mrs	r3, PRIMASK
 8009fcc:	60fb      	str	r3, [r7, #12]
  return(result);
 8009fce:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009fd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009fd2:	2301      	movs	r3, #1
 8009fd4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009fd6:	693b      	ldr	r3, [r7, #16]
 8009fd8:	f383 8810 	msr	PRIMASK, r3
}
 8009fdc:	46c0      	nop			@ (mov r8, r8)
 8009fde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	681a      	ldr	r2, [r3, #0]
 8009fe4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	2110      	movs	r1, #16
 8009fea:	438a      	bics	r2, r1
 8009fec:	601a      	str	r2, [r3, #0]
 8009fee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ff0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ff2:	697b      	ldr	r3, [r7, #20]
 8009ff4:	f383 8810 	msr	PRIMASK, r3
}
 8009ff8:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009ffa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a000:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a002:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a004:	2b01      	cmp	r3, #1
 800a006:	d108      	bne.n	800a01a <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a008:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a00a:	225c      	movs	r2, #92	@ 0x5c
 800a00c:	5a9a      	ldrh	r2, [r3, r2]
 800a00e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a010:	0011      	movs	r1, r2
 800a012:	0018      	movs	r0, r3
 800a014:	f7f8 f9b4 	bl	8002380 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a018:	e003      	b.n	800a022 <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 800a01a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a01c:	0018      	movs	r0, r3
 800a01e:	f7ff fa6b 	bl	80094f8 <HAL_UART_RxCpltCallback>
}
 800a022:	46c0      	nop			@ (mov r8, r8)
 800a024:	46bd      	mov	sp, r7
 800a026:	b014      	add	sp, #80	@ 0x50
 800a028:	bd80      	pop	{r7, pc}
 800a02a:	46c0      	nop			@ (mov r8, r8)
 800a02c:	fffffeff 	.word	0xfffffeff

0800a030 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b084      	sub	sp, #16
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a03c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	2201      	movs	r2, #1
 800a042:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a048:	2b01      	cmp	r3, #1
 800a04a:	d10a      	bne.n	800a062 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	225c      	movs	r2, #92	@ 0x5c
 800a050:	5a9b      	ldrh	r3, [r3, r2]
 800a052:	085b      	lsrs	r3, r3, #1
 800a054:	b29a      	uxth	r2, r3
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	0011      	movs	r1, r2
 800a05a:	0018      	movs	r0, r3
 800a05c:	f7f8 f990 	bl	8002380 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a060:	e003      	b.n	800a06a <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	0018      	movs	r0, r3
 800a066:	f7ff fa4f 	bl	8009508 <HAL_UART_RxHalfCpltCallback>
}
 800a06a:	46c0      	nop			@ (mov r8, r8)
 800a06c:	46bd      	mov	sp, r7
 800a06e:	b004      	add	sp, #16
 800a070:	bd80      	pop	{r7, pc}

0800a072 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a072:	b580      	push	{r7, lr}
 800a074:	b086      	sub	sp, #24
 800a076:	af00      	add	r7, sp, #0
 800a078:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a07e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	2288      	movs	r2, #136	@ 0x88
 800a084:	589b      	ldr	r3, [r3, r2]
 800a086:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	228c      	movs	r2, #140	@ 0x8c
 800a08c:	589b      	ldr	r3, [r3, r2]
 800a08e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a090:	697b      	ldr	r3, [r7, #20]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	689b      	ldr	r3, [r3, #8]
 800a096:	2280      	movs	r2, #128	@ 0x80
 800a098:	4013      	ands	r3, r2
 800a09a:	2b80      	cmp	r3, #128	@ 0x80
 800a09c:	d10a      	bne.n	800a0b4 <UART_DMAError+0x42>
 800a09e:	693b      	ldr	r3, [r7, #16]
 800a0a0:	2b21      	cmp	r3, #33	@ 0x21
 800a0a2:	d107      	bne.n	800a0b4 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a0a4:	697b      	ldr	r3, [r7, #20]
 800a0a6:	2256      	movs	r2, #86	@ 0x56
 800a0a8:	2100      	movs	r1, #0
 800a0aa:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	0018      	movs	r0, r3
 800a0b0:	f7ff fe24 	bl	8009cfc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a0b4:	697b      	ldr	r3, [r7, #20]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	689b      	ldr	r3, [r3, #8]
 800a0ba:	2240      	movs	r2, #64	@ 0x40
 800a0bc:	4013      	ands	r3, r2
 800a0be:	2b40      	cmp	r3, #64	@ 0x40
 800a0c0:	d10a      	bne.n	800a0d8 <UART_DMAError+0x66>
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	2b22      	cmp	r3, #34	@ 0x22
 800a0c6:	d107      	bne.n	800a0d8 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a0c8:	697b      	ldr	r3, [r7, #20]
 800a0ca:	225e      	movs	r2, #94	@ 0x5e
 800a0cc:	2100      	movs	r1, #0
 800a0ce:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800a0d0:	697b      	ldr	r3, [r7, #20]
 800a0d2:	0018      	movs	r0, r3
 800a0d4:	f7ff fe52 	bl	8009d7c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a0d8:	697b      	ldr	r3, [r7, #20]
 800a0da:	2290      	movs	r2, #144	@ 0x90
 800a0dc:	589b      	ldr	r3, [r3, r2]
 800a0de:	2210      	movs	r2, #16
 800a0e0:	431a      	orrs	r2, r3
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	2190      	movs	r1, #144	@ 0x90
 800a0e6:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a0e8:	697b      	ldr	r3, [r7, #20]
 800a0ea:	0018      	movs	r0, r3
 800a0ec:	f7f8 f9b2 	bl	8002454 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a0f0:	46c0      	nop			@ (mov r8, r8)
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	b006      	add	sp, #24
 800a0f6:	bd80      	pop	{r7, pc}

0800a0f8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b084      	sub	sp, #16
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a104:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	225e      	movs	r2, #94	@ 0x5e
 800a10a:	2100      	movs	r1, #0
 800a10c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	2256      	movs	r2, #86	@ 0x56
 800a112:	2100      	movs	r1, #0
 800a114:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	0018      	movs	r0, r3
 800a11a:	f7f8 f99b 	bl	8002454 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a11e:	46c0      	nop			@ (mov r8, r8)
 800a120:	46bd      	mov	sp, r7
 800a122:	b004      	add	sp, #16
 800a124:	bd80      	pop	{r7, pc}

0800a126 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a126:	b580      	push	{r7, lr}
 800a128:	b086      	sub	sp, #24
 800a12a:	af00      	add	r7, sp, #0
 800a12c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a12e:	f3ef 8310 	mrs	r3, PRIMASK
 800a132:	60bb      	str	r3, [r7, #8]
  return(result);
 800a134:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a136:	617b      	str	r3, [r7, #20]
 800a138:	2301      	movs	r3, #1
 800a13a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	f383 8810 	msr	PRIMASK, r3
}
 800a142:	46c0      	nop			@ (mov r8, r8)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	681a      	ldr	r2, [r3, #0]
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	2140      	movs	r1, #64	@ 0x40
 800a150:	438a      	bics	r2, r1
 800a152:	601a      	str	r2, [r3, #0]
 800a154:	697b      	ldr	r3, [r7, #20]
 800a156:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a158:	693b      	ldr	r3, [r7, #16]
 800a15a:	f383 8810 	msr	PRIMASK, r3
}
 800a15e:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2288      	movs	r2, #136	@ 0x88
 800a164:	2120      	movs	r1, #32
 800a166:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2200      	movs	r2, #0
 800a16c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	0018      	movs	r0, r3
 800a172:	f7f8 f961 	bl	8002438 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a176:	46c0      	nop			@ (mov r8, r8)
 800a178:	46bd      	mov	sp, r7
 800a17a:	b006      	add	sp, #24
 800a17c:	bd80      	pop	{r7, pc}
	...

0800a180 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b086      	sub	sp, #24
 800a184:	af00      	add	r7, sp, #0
 800a186:	60f8      	str	r0, [r7, #12]
 800a188:	60b9      	str	r1, [r7, #8]
 800a18a:	607a      	str	r2, [r7, #4]
 800a18c:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d101      	bne.n	800a198 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 800a194:	2301      	movs	r3, #1
 800a196:	e05d      	b.n	800a254 <HAL_RS485Ex_Init+0xd4>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	2288      	movs	r2, #136	@ 0x88
 800a19c:	589b      	ldr	r3, [r3, r2]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d107      	bne.n	800a1b2 <HAL_RS485Ex_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	2284      	movs	r2, #132	@ 0x84
 800a1a6:	2100      	movs	r1, #0
 800a1a8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	0018      	movs	r0, r3
 800a1ae:	f7f9 fa5f 	bl	8003670 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	2288      	movs	r2, #136	@ 0x88
 800a1b6:	2124      	movs	r1, #36	@ 0x24
 800a1b8:	5099      	str	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	681a      	ldr	r2, [r3, #0]
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	2101      	movs	r1, #1
 800a1c6:	438a      	bics	r2, r1
 800a1c8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d003      	beq.n	800a1da <HAL_RS485Ex_Init+0x5a>
  {
    UART_AdvFeatureConfig(huart);
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	0018      	movs	r0, r3
 800a1d6:	f7ff fb1d 	bl	8009814 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	0018      	movs	r0, r3
 800a1de:	f7ff f99b 	bl	8009518 <UART_SetConfig>
 800a1e2:	0003      	movs	r3, r0
 800a1e4:	2b01      	cmp	r3, #1
 800a1e6:	d101      	bne.n	800a1ec <HAL_RS485Ex_Init+0x6c>
  {
    return HAL_ERROR;
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	e033      	b.n	800a254 <HAL_RS485Ex_Init+0xd4>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	689a      	ldr	r2, [r3, #8]
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	2180      	movs	r1, #128	@ 0x80
 800a1f8:	01c9      	lsls	r1, r1, #7
 800a1fa:	430a      	orrs	r2, r1
 800a1fc:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	689b      	ldr	r3, [r3, #8]
 800a204:	4a15      	ldr	r2, [pc, #84]	@ (800a25c <HAL_RS485Ex_Init+0xdc>)
 800a206:	4013      	ands	r3, r2
 800a208:	0019      	movs	r1, r3
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	68ba      	ldr	r2, [r7, #8]
 800a210:	430a      	orrs	r2, r1
 800a212:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	055b      	lsls	r3, r3, #21
 800a218:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	041b      	lsls	r3, r3, #16
 800a21e:	697a      	ldr	r2, [r7, #20]
 800a220:	4313      	orrs	r3, r2
 800a222:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	4a0d      	ldr	r2, [pc, #52]	@ (800a260 <HAL_RS485Ex_Init+0xe0>)
 800a22c:	4013      	ands	r3, r2
 800a22e:	0019      	movs	r1, r3
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	697a      	ldr	r2, [r7, #20]
 800a236:	430a      	orrs	r2, r1
 800a238:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	681a      	ldr	r2, [r3, #0]
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	2101      	movs	r1, #1
 800a246:	430a      	orrs	r2, r1
 800a248:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	0018      	movs	r0, r3
 800a24e:	f7ff fb95 	bl	800997c <UART_CheckIdleState>
 800a252:	0003      	movs	r3, r0
}
 800a254:	0018      	movs	r0, r3
 800a256:	46bd      	mov	sp, r7
 800a258:	b006      	add	sp, #24
 800a25a:	bd80      	pop	{r7, pc}
 800a25c:	ffff7fff 	.word	0xffff7fff
 800a260:	fc00ffff 	.word	0xfc00ffff

0800a264 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b082      	sub	sp, #8
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a26c:	46c0      	nop			@ (mov r8, r8)
 800a26e:	46bd      	mov	sp, r7
 800a270:	b002      	add	sp, #8
 800a272:	bd80      	pop	{r7, pc}

0800a274 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b082      	sub	sp, #8
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a27c:	46c0      	nop			@ (mov r8, r8)
 800a27e:	46bd      	mov	sp, r7
 800a280:	b002      	add	sp, #8
 800a282:	bd80      	pop	{r7, pc}

0800a284 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b082      	sub	sp, #8
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a28c:	46c0      	nop			@ (mov r8, r8)
 800a28e:	46bd      	mov	sp, r7
 800a290:	b002      	add	sp, #8
 800a292:	bd80      	pop	{r7, pc}

0800a294 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b084      	sub	sp, #16
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2284      	movs	r2, #132	@ 0x84
 800a2a0:	5c9b      	ldrb	r3, [r3, r2]
 800a2a2:	2b01      	cmp	r3, #1
 800a2a4:	d101      	bne.n	800a2aa <HAL_UARTEx_DisableFifoMode+0x16>
 800a2a6:	2302      	movs	r3, #2
 800a2a8:	e027      	b.n	800a2fa <HAL_UARTEx_DisableFifoMode+0x66>
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2284      	movs	r2, #132	@ 0x84
 800a2ae:	2101      	movs	r1, #1
 800a2b0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2288      	movs	r2, #136	@ 0x88
 800a2b6:	2124      	movs	r1, #36	@ 0x24
 800a2b8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	681a      	ldr	r2, [r3, #0]
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	2101      	movs	r1, #1
 800a2ce:	438a      	bics	r2, r1
 800a2d0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	4a0b      	ldr	r2, [pc, #44]	@ (800a304 <HAL_UARTEx_DisableFifoMode+0x70>)
 800a2d6:	4013      	ands	r3, r2
 800a2d8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2200      	movs	r2, #0
 800a2de:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	68fa      	ldr	r2, [r7, #12]
 800a2e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2288      	movs	r2, #136	@ 0x88
 800a2ec:	2120      	movs	r1, #32
 800a2ee:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2284      	movs	r2, #132	@ 0x84
 800a2f4:	2100      	movs	r1, #0
 800a2f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a2f8:	2300      	movs	r3, #0
}
 800a2fa:	0018      	movs	r0, r3
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	b004      	add	sp, #16
 800a300:	bd80      	pop	{r7, pc}
 800a302:	46c0      	nop			@ (mov r8, r8)
 800a304:	dfffffff 	.word	0xdfffffff

0800a308 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b084      	sub	sp, #16
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
 800a310:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2284      	movs	r2, #132	@ 0x84
 800a316:	5c9b      	ldrb	r3, [r3, r2]
 800a318:	2b01      	cmp	r3, #1
 800a31a:	d101      	bne.n	800a320 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a31c:	2302      	movs	r3, #2
 800a31e:	e02e      	b.n	800a37e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2284      	movs	r2, #132	@ 0x84
 800a324:	2101      	movs	r1, #1
 800a326:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2288      	movs	r2, #136	@ 0x88
 800a32c:	2124      	movs	r1, #36	@ 0x24
 800a32e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	681a      	ldr	r2, [r3, #0]
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	2101      	movs	r1, #1
 800a344:	438a      	bics	r2, r1
 800a346:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	689b      	ldr	r3, [r3, #8]
 800a34e:	00db      	lsls	r3, r3, #3
 800a350:	08d9      	lsrs	r1, r3, #3
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	683a      	ldr	r2, [r7, #0]
 800a358:	430a      	orrs	r2, r1
 800a35a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	0018      	movs	r0, r3
 800a360:	f000 f8bc 	bl	800a4dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	68fa      	ldr	r2, [r7, #12]
 800a36a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2288      	movs	r2, #136	@ 0x88
 800a370:	2120      	movs	r1, #32
 800a372:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2284      	movs	r2, #132	@ 0x84
 800a378:	2100      	movs	r1, #0
 800a37a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a37c:	2300      	movs	r3, #0
}
 800a37e:	0018      	movs	r0, r3
 800a380:	46bd      	mov	sp, r7
 800a382:	b004      	add	sp, #16
 800a384:	bd80      	pop	{r7, pc}
	...

0800a388 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b084      	sub	sp, #16
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
 800a390:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2284      	movs	r2, #132	@ 0x84
 800a396:	5c9b      	ldrb	r3, [r3, r2]
 800a398:	2b01      	cmp	r3, #1
 800a39a:	d101      	bne.n	800a3a0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a39c:	2302      	movs	r3, #2
 800a39e:	e02f      	b.n	800a400 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2284      	movs	r2, #132	@ 0x84
 800a3a4:	2101      	movs	r1, #1
 800a3a6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2288      	movs	r2, #136	@ 0x88
 800a3ac:	2124      	movs	r1, #36	@ 0x24
 800a3ae:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	681a      	ldr	r2, [r3, #0]
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	2101      	movs	r1, #1
 800a3c4:	438a      	bics	r2, r1
 800a3c6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	689b      	ldr	r3, [r3, #8]
 800a3ce:	4a0e      	ldr	r2, [pc, #56]	@ (800a408 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800a3d0:	4013      	ands	r3, r2
 800a3d2:	0019      	movs	r1, r3
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	683a      	ldr	r2, [r7, #0]
 800a3da:	430a      	orrs	r2, r1
 800a3dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	0018      	movs	r0, r3
 800a3e2:	f000 f87b 	bl	800a4dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	68fa      	ldr	r2, [r7, #12]
 800a3ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2288      	movs	r2, #136	@ 0x88
 800a3f2:	2120      	movs	r1, #32
 800a3f4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2284      	movs	r2, #132	@ 0x84
 800a3fa:	2100      	movs	r1, #0
 800a3fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a3fe:	2300      	movs	r3, #0
}
 800a400:	0018      	movs	r0, r3
 800a402:	46bd      	mov	sp, r7
 800a404:	b004      	add	sp, #16
 800a406:	bd80      	pop	{r7, pc}
 800a408:	f1ffffff 	.word	0xf1ffffff

0800a40c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a40c:	b5b0      	push	{r4, r5, r7, lr}
 800a40e:	b08a      	sub	sp, #40	@ 0x28
 800a410:	af00      	add	r7, sp, #0
 800a412:	60f8      	str	r0, [r7, #12]
 800a414:	60b9      	str	r1, [r7, #8]
 800a416:	1dbb      	adds	r3, r7, #6
 800a418:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	228c      	movs	r2, #140	@ 0x8c
 800a41e:	589b      	ldr	r3, [r3, r2]
 800a420:	2b20      	cmp	r3, #32
 800a422:	d156      	bne.n	800a4d2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d003      	beq.n	800a432 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800a42a:	1dbb      	adds	r3, r7, #6
 800a42c:	881b      	ldrh	r3, [r3, #0]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d101      	bne.n	800a436 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800a432:	2301      	movs	r3, #1
 800a434:	e04e      	b.n	800a4d4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	689a      	ldr	r2, [r3, #8]
 800a43a:	2380      	movs	r3, #128	@ 0x80
 800a43c:	015b      	lsls	r3, r3, #5
 800a43e:	429a      	cmp	r2, r3
 800a440:	d109      	bne.n	800a456 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	691b      	ldr	r3, [r3, #16]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d105      	bne.n	800a456 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	2201      	movs	r2, #1
 800a44e:	4013      	ands	r3, r2
 800a450:	d001      	beq.n	800a456 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 800a452:	2301      	movs	r3, #1
 800a454:	e03e      	b.n	800a4d4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	2201      	movs	r2, #1
 800a45a:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	2200      	movs	r2, #0
 800a460:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800a462:	2527      	movs	r5, #39	@ 0x27
 800a464:	197c      	adds	r4, r7, r5
 800a466:	1dbb      	adds	r3, r7, #6
 800a468:	881a      	ldrh	r2, [r3, #0]
 800a46a:	68b9      	ldr	r1, [r7, #8]
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	0018      	movs	r0, r3
 800a470:	f7ff fb9e 	bl	8009bb0 <UART_Start_Receive_DMA>
 800a474:	0003      	movs	r3, r0
 800a476:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800a478:	197b      	adds	r3, r7, r5
 800a47a:	781b      	ldrb	r3, [r3, #0]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d124      	bne.n	800a4ca <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a484:	2b01      	cmp	r3, #1
 800a486:	d11c      	bne.n	800a4c2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	2210      	movs	r2, #16
 800a48e:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a490:	f3ef 8310 	mrs	r3, PRIMASK
 800a494:	617b      	str	r3, [r7, #20]
  return(result);
 800a496:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a498:	623b      	str	r3, [r7, #32]
 800a49a:	2301      	movs	r3, #1
 800a49c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a49e:	69bb      	ldr	r3, [r7, #24]
 800a4a0:	f383 8810 	msr	PRIMASK, r3
}
 800a4a4:	46c0      	nop			@ (mov r8, r8)
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	681a      	ldr	r2, [r3, #0]
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	2110      	movs	r1, #16
 800a4b2:	430a      	orrs	r2, r1
 800a4b4:	601a      	str	r2, [r3, #0]
 800a4b6:	6a3b      	ldr	r3, [r7, #32]
 800a4b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4ba:	69fb      	ldr	r3, [r7, #28]
 800a4bc:	f383 8810 	msr	PRIMASK, r3
}
 800a4c0:	e003      	b.n	800a4ca <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800a4c2:	2327      	movs	r3, #39	@ 0x27
 800a4c4:	18fb      	adds	r3, r7, r3
 800a4c6:	2201      	movs	r2, #1
 800a4c8:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 800a4ca:	2327      	movs	r3, #39	@ 0x27
 800a4cc:	18fb      	adds	r3, r7, r3
 800a4ce:	781b      	ldrb	r3, [r3, #0]
 800a4d0:	e000      	b.n	800a4d4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 800a4d2:	2302      	movs	r3, #2
  }
}
 800a4d4:	0018      	movs	r0, r3
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	b00a      	add	sp, #40	@ 0x28
 800a4da:	bdb0      	pop	{r4, r5, r7, pc}

0800a4dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a4dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4de:	b085      	sub	sp, #20
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d108      	bne.n	800a4fe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	226a      	movs	r2, #106	@ 0x6a
 800a4f0:	2101      	movs	r1, #1
 800a4f2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2268      	movs	r2, #104	@ 0x68
 800a4f8:	2101      	movs	r1, #1
 800a4fa:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a4fc:	e043      	b.n	800a586 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a4fe:	260f      	movs	r6, #15
 800a500:	19bb      	adds	r3, r7, r6
 800a502:	2208      	movs	r2, #8
 800a504:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a506:	200e      	movs	r0, #14
 800a508:	183b      	adds	r3, r7, r0
 800a50a:	2208      	movs	r2, #8
 800a50c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	689b      	ldr	r3, [r3, #8]
 800a514:	0e5b      	lsrs	r3, r3, #25
 800a516:	b2da      	uxtb	r2, r3
 800a518:	240d      	movs	r4, #13
 800a51a:	193b      	adds	r3, r7, r4
 800a51c:	2107      	movs	r1, #7
 800a51e:	400a      	ands	r2, r1
 800a520:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	689b      	ldr	r3, [r3, #8]
 800a528:	0f5b      	lsrs	r3, r3, #29
 800a52a:	b2da      	uxtb	r2, r3
 800a52c:	250c      	movs	r5, #12
 800a52e:	197b      	adds	r3, r7, r5
 800a530:	2107      	movs	r1, #7
 800a532:	400a      	ands	r2, r1
 800a534:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a536:	183b      	adds	r3, r7, r0
 800a538:	781b      	ldrb	r3, [r3, #0]
 800a53a:	197a      	adds	r2, r7, r5
 800a53c:	7812      	ldrb	r2, [r2, #0]
 800a53e:	4914      	ldr	r1, [pc, #80]	@ (800a590 <UARTEx_SetNbDataToProcess+0xb4>)
 800a540:	5c8a      	ldrb	r2, [r1, r2]
 800a542:	435a      	muls	r2, r3
 800a544:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800a546:	197b      	adds	r3, r7, r5
 800a548:	781b      	ldrb	r3, [r3, #0]
 800a54a:	4a12      	ldr	r2, [pc, #72]	@ (800a594 <UARTEx_SetNbDataToProcess+0xb8>)
 800a54c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a54e:	0019      	movs	r1, r3
 800a550:	f7f5 fe64 	bl	800021c <__divsi3>
 800a554:	0003      	movs	r3, r0
 800a556:	b299      	uxth	r1, r3
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	226a      	movs	r2, #106	@ 0x6a
 800a55c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a55e:	19bb      	adds	r3, r7, r6
 800a560:	781b      	ldrb	r3, [r3, #0]
 800a562:	193a      	adds	r2, r7, r4
 800a564:	7812      	ldrb	r2, [r2, #0]
 800a566:	490a      	ldr	r1, [pc, #40]	@ (800a590 <UARTEx_SetNbDataToProcess+0xb4>)
 800a568:	5c8a      	ldrb	r2, [r1, r2]
 800a56a:	435a      	muls	r2, r3
 800a56c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800a56e:	193b      	adds	r3, r7, r4
 800a570:	781b      	ldrb	r3, [r3, #0]
 800a572:	4a08      	ldr	r2, [pc, #32]	@ (800a594 <UARTEx_SetNbDataToProcess+0xb8>)
 800a574:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a576:	0019      	movs	r1, r3
 800a578:	f7f5 fe50 	bl	800021c <__divsi3>
 800a57c:	0003      	movs	r3, r0
 800a57e:	b299      	uxth	r1, r3
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2268      	movs	r2, #104	@ 0x68
 800a584:	5299      	strh	r1, [r3, r2]
}
 800a586:	46c0      	nop			@ (mov r8, r8)
 800a588:	46bd      	mov	sp, r7
 800a58a:	b005      	add	sp, #20
 800a58c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a58e:	46c0      	nop			@ (mov r8, r8)
 800a590:	0800adc8 	.word	0x0800adc8
 800a594:	0800add0 	.word	0x0800add0

0800a598 <LL_ADC_REG_GetSequencerConfigurable>:
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b082      	sub	sp, #8
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_CHSELRMOD));
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	68da      	ldr	r2, [r3, #12]
 800a5a4:	2380      	movs	r3, #128	@ 0x80
 800a5a6:	039b      	lsls	r3, r3, #14
 800a5a8:	4013      	ands	r3, r2
}
 800a5aa:	0018      	movs	r0, r3
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	b002      	add	sp, #8
 800a5b0:	bd80      	pop	{r7, pc}

0800a5b2 <LL_ADC_REG_SetSequencerLength>:
{
 800a5b2:	b580      	push	{r7, lr}
 800a5b4:	b082      	sub	sp, #8
 800a5b6:	af00      	add	r7, sp, #0
 800a5b8:	6078      	str	r0, [r7, #4]
 800a5ba:	6039      	str	r1, [r7, #0]
  SET_BIT(ADCx->CHSELR, SequencerNbRanks);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	431a      	orrs	r2, r3
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800a5c8:	46c0      	nop			@ (mov r8, r8)
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	b002      	add	sp, #8
 800a5ce:	bd80      	pop	{r7, pc}

0800a5d0 <LL_ADC_IsEnabled>:
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b082      	sub	sp, #8
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	689b      	ldr	r3, [r3, #8]
 800a5dc:	2201      	movs	r2, #1
 800a5de:	4013      	ands	r3, r2
 800a5e0:	2b01      	cmp	r3, #1
 800a5e2:	d101      	bne.n	800a5e8 <LL_ADC_IsEnabled+0x18>
 800a5e4:	2301      	movs	r3, #1
 800a5e6:	e000      	b.n	800a5ea <LL_ADC_IsEnabled+0x1a>
 800a5e8:	2300      	movs	r3, #0
}
 800a5ea:	0018      	movs	r0, r3
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	b002      	add	sp, #8
 800a5f0:	bd80      	pop	{r7, pc}
	...

0800a5f4 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b084      	sub	sp, #16
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
 800a5fc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800a5fe:	230f      	movs	r3, #15
 800a600:	18fb      	adds	r3, r7, r3
 800a602:	2200      	movs	r2, #0
 800a604:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	0018      	movs	r0, r3
 800a60a:	f7ff ffe1 	bl	800a5d0 <LL_ADC_IsEnabled>
 800a60e:	1e03      	subs	r3, r0, #0
 800a610:	d118      	bne.n	800a644 <LL_ADC_Init+0x50>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR1,
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	68db      	ldr	r3, [r3, #12]
 800a616:	4a11      	ldr	r2, [pc, #68]	@ (800a65c <LL_ADC_Init+0x68>)
 800a618:	401a      	ands	r2, r3
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	6859      	ldr	r1, [r3, #4]
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	689b      	ldr	r3, [r3, #8]
 800a622:	4319      	orrs	r1, r3
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	68db      	ldr	r3, [r3, #12]
 800a628:	430b      	orrs	r3, r1
 800a62a:	431a      	orrs	r2, r3
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	60da      	str	r2, [r3, #12]
               ADC_InitStruct->Resolution
               | ADC_InitStruct->DataAlignment
               | ADC_InitStruct->LowPowerMode
              );

    MODIFY_REG(ADCx->CFGR2,
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	691b      	ldr	r3, [r3, #16]
 800a634:	009b      	lsls	r3, r3, #2
 800a636:	089a      	lsrs	r2, r3, #2
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	431a      	orrs	r2, r3
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	611a      	str	r2, [r3, #16]
 800a642:	e003      	b.n	800a64c <LL_ADC_Init+0x58>
              );
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800a644:	230f      	movs	r3, #15
 800a646:	18fb      	adds	r3, r7, r3
 800a648:	2201      	movs	r2, #1
 800a64a:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800a64c:	230f      	movs	r3, #15
 800a64e:	18fb      	adds	r3, r7, r3
 800a650:	781b      	ldrb	r3, [r3, #0]
}
 800a652:	0018      	movs	r0, r3
 800a654:	46bd      	mov	sp, r7
 800a656:	b004      	add	sp, #16
 800a658:	bd80      	pop	{r7, pc}
 800a65a:	46c0      	nop			@ (mov r8, r8)
 800a65c:	ffff3fc7 	.word	0xffff3fc7

0800a660 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b084      	sub	sp, #16
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
 800a668:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800a66a:	230f      	movs	r3, #15
 800a66c:	18fb      	adds	r3, r7, r3
 800a66e:	2200      	movs	r2, #0
 800a670:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_ADC_REG_TRIG_SOURCE(ADC_REG_InitStruct->TriggerSource));
  assert_param(IS_LL_ADC_REG_CONTINUOUS_MODE(ADC_REG_InitStruct->ContinuousMode));
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));

  if (LL_ADC_REG_GetSequencerConfigurable(ADCx) != LL_ADC_REG_SEQ_FIXED)
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	0018      	movs	r0, r3
 800a676:	f7ff ff8f 	bl	800a598 <LL_ADC_REG_GetSequencerConfigurable>
  {
    assert_param(IS_LL_ADC_REG_SEQ_SCAN_LENGTH(ADC_REG_InitStruct->SequencerLength));
  }

  if ((LL_ADC_REG_GetSequencerConfigurable(ADCx) == LL_ADC_REG_SEQ_FIXED)
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	0018      	movs	r0, r3
 800a67e:	f7ff ff8b 	bl	800a598 <LL_ADC_REG_GetSequencerConfigurable>
                 || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  }

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	0018      	movs	r0, r3
 800a686:	f7ff ffa3 	bl	800a5d0 <LL_ADC_IsEnabled>
 800a68a:	1e03      	subs	r3, r0, #0
 800a68c:	d13f      	bne.n	800a70e <LL_ADC_REG_Init+0xae>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by    */
    /*       setting of trigger source to SW start.                           */
    if ((LL_ADC_REG_GetSequencerConfigurable(ADCx) == LL_ADC_REG_SEQ_FIXED)
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	0018      	movs	r0, r3
 800a692:	f7ff ff81 	bl	800a598 <LL_ADC_REG_GetSequencerConfigurable>
 800a696:	1e03      	subs	r3, r0, #0
 800a698:	d003      	beq.n	800a6a2 <LL_ADC_REG_Init+0x42>
        || (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	685b      	ldr	r3, [r3, #4]
 800a69e:	2bf0      	cmp	r3, #240	@ 0xf0
 800a6a0:	d015      	beq.n	800a6ce <LL_ADC_REG_Init+0x6e>
       )
    {
      /* Case of sequencer mode fixed
         or sequencer length >= 2 ranks with sequencer mode fully configurable:
         discontinuous mode configured */
      MODIFY_REG(ADCx->CFGR1,
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	68db      	ldr	r3, [r3, #12]
 800a6a6:	4a1f      	ldr	r2, [pc, #124]	@ (800a724 <LL_ADC_REG_Init+0xc4>)
 800a6a8:	401a      	ands	r2, r3
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	6819      	ldr	r1, [r3, #0]
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	689b      	ldr	r3, [r3, #8]
 800a6b2:	4319      	orrs	r1, r3
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	68db      	ldr	r3, [r3, #12]
 800a6b8:	4319      	orrs	r1, r3
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	691b      	ldr	r3, [r3, #16]
 800a6be:	4319      	orrs	r1, r3
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	695b      	ldr	r3, [r3, #20]
 800a6c4:	430b      	orrs	r3, r1
 800a6c6:	431a      	orrs	r2, r3
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	60da      	str	r2, [r3, #12]
 800a6cc:	e011      	b.n	800a6f2 <LL_ADC_REG_Init+0x92>
    else
    {
      /* Case of sequencer mode fully configurable
         and sequencer length 1 rank (sequencer disabled):
         discontinuous mode discarded (fixed to disable) */
      MODIFY_REG(ADCx->CFGR1,
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	68db      	ldr	r3, [r3, #12]
 800a6d2:	4a14      	ldr	r2, [pc, #80]	@ (800a724 <LL_ADC_REG_Init+0xc4>)
 800a6d4:	401a      	ands	r2, r3
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	6819      	ldr	r1, [r3, #0]
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	68db      	ldr	r3, [r3, #12]
 800a6de:	4319      	orrs	r1, r3
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	691b      	ldr	r3, [r3, #16]
 800a6e4:	4319      	orrs	r1, r3
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	695b      	ldr	r3, [r3, #20]
 800a6ea:	430b      	orrs	r3, r1
 800a6ec:	431a      	orrs	r2, r3
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	60da      	str	r2, [r3, #12]
                 | ADC_REG_InitStruct->Overrun
                );
    }

    /* Set ADC group regular sequencer length */
    if (LL_ADC_REG_GetSequencerConfigurable(ADCx) != LL_ADC_REG_SEQ_FIXED)
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	0018      	movs	r0, r3
 800a6f6:	f7ff ff4f 	bl	800a598 <LL_ADC_REG_GetSequencerConfigurable>
 800a6fa:	1e03      	subs	r3, r0, #0
 800a6fc:	d00b      	beq.n	800a716 <LL_ADC_REG_Init+0xb6>
    {
      LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	685a      	ldr	r2, [r3, #4]
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	0011      	movs	r1, r2
 800a706:	0018      	movs	r0, r3
 800a708:	f7ff ff53 	bl	800a5b2 <LL_ADC_REG_SetSequencerLength>
 800a70c:	e003      	b.n	800a716 <LL_ADC_REG_Init+0xb6>
    }
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800a70e:	230f      	movs	r3, #15
 800a710:	18fb      	adds	r3, r7, r3
 800a712:	2201      	movs	r2, #1
 800a714:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800a716:	230f      	movs	r3, #15
 800a718:	18fb      	adds	r3, r7, r3
 800a71a:	781b      	ldrb	r3, [r3, #0]
}
 800a71c:	0018      	movs	r0, r3
 800a71e:	46bd      	mov	sp, r7
 800a720:	b004      	add	sp, #16
 800a722:	bd80      	pop	{r7, pc}
 800a724:	fffec23c 	.word	0xfffec23c

0800a728 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b084      	sub	sp, #16
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	60f8      	str	r0, [r7, #12]
 800a730:	60b9      	str	r1, [r7, #8]
 800a732:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	6819      	ldr	r1, [r3, #0]
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	435b      	muls	r3, r3
 800a73c:	001a      	movs	r2, r3
 800a73e:	0013      	movs	r3, r2
 800a740:	005b      	lsls	r3, r3, #1
 800a742:	189b      	adds	r3, r3, r2
 800a744:	43db      	mvns	r3, r3
 800a746:	400b      	ands	r3, r1
 800a748:	001a      	movs	r2, r3
 800a74a:	68bb      	ldr	r3, [r7, #8]
 800a74c:	435b      	muls	r3, r3
 800a74e:	6879      	ldr	r1, [r7, #4]
 800a750:	434b      	muls	r3, r1
 800a752:	431a      	orrs	r2, r3
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	601a      	str	r2, [r3, #0]
}
 800a758:	46c0      	nop			@ (mov r8, r8)
 800a75a:	46bd      	mov	sp, r7
 800a75c:	b004      	add	sp, #16
 800a75e:	bd80      	pop	{r7, pc}

0800a760 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b084      	sub	sp, #16
 800a764:	af00      	add	r7, sp, #0
 800a766:	60f8      	str	r0, [r7, #12]
 800a768:	60b9      	str	r1, [r7, #8]
 800a76a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	685b      	ldr	r3, [r3, #4]
 800a770:	68ba      	ldr	r2, [r7, #8]
 800a772:	43d2      	mvns	r2, r2
 800a774:	401a      	ands	r2, r3
 800a776:	68bb      	ldr	r3, [r7, #8]
 800a778:	6879      	ldr	r1, [r7, #4]
 800a77a:	434b      	muls	r3, r1
 800a77c:	431a      	orrs	r2, r3
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	605a      	str	r2, [r3, #4]
}
 800a782:	46c0      	nop			@ (mov r8, r8)
 800a784:	46bd      	mov	sp, r7
 800a786:	b004      	add	sp, #16
 800a788:	bd80      	pop	{r7, pc}

0800a78a <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800a78a:	b580      	push	{r7, lr}
 800a78c:	b084      	sub	sp, #16
 800a78e:	af00      	add	r7, sp, #0
 800a790:	60f8      	str	r0, [r7, #12]
 800a792:	60b9      	str	r1, [r7, #8]
 800a794:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	6899      	ldr	r1, [r3, #8]
 800a79a:	68bb      	ldr	r3, [r7, #8]
 800a79c:	435b      	muls	r3, r3
 800a79e:	001a      	movs	r2, r3
 800a7a0:	0013      	movs	r3, r2
 800a7a2:	005b      	lsls	r3, r3, #1
 800a7a4:	189b      	adds	r3, r3, r2
 800a7a6:	43db      	mvns	r3, r3
 800a7a8:	400b      	ands	r3, r1
 800a7aa:	001a      	movs	r2, r3
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	435b      	muls	r3, r3
 800a7b0:	6879      	ldr	r1, [r7, #4]
 800a7b2:	434b      	muls	r3, r1
 800a7b4:	431a      	orrs	r2, r3
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	609a      	str	r2, [r3, #8]
}
 800a7ba:	46c0      	nop			@ (mov r8, r8)
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	b004      	add	sp, #16
 800a7c0:	bd80      	pop	{r7, pc}

0800a7c2 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800a7c2:	b580      	push	{r7, lr}
 800a7c4:	b084      	sub	sp, #16
 800a7c6:	af00      	add	r7, sp, #0
 800a7c8:	60f8      	str	r0, [r7, #12]
 800a7ca:	60b9      	str	r1, [r7, #8]
 800a7cc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	68d9      	ldr	r1, [r3, #12]
 800a7d2:	68bb      	ldr	r3, [r7, #8]
 800a7d4:	435b      	muls	r3, r3
 800a7d6:	001a      	movs	r2, r3
 800a7d8:	0013      	movs	r3, r2
 800a7da:	005b      	lsls	r3, r3, #1
 800a7dc:	189b      	adds	r3, r3, r2
 800a7de:	43db      	mvns	r3, r3
 800a7e0:	400b      	ands	r3, r1
 800a7e2:	001a      	movs	r2, r3
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	435b      	muls	r3, r3
 800a7e8:	6879      	ldr	r1, [r7, #4]
 800a7ea:	434b      	muls	r3, r1
 800a7ec:	431a      	orrs	r2, r3
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	60da      	str	r2, [r3, #12]
}
 800a7f2:	46c0      	nop			@ (mov r8, r8)
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	b004      	add	sp, #16
 800a7f8:	bd80      	pop	{r7, pc}

0800a7fa <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800a7fa:	b580      	push	{r7, lr}
 800a7fc:	b084      	sub	sp, #16
 800a7fe:	af00      	add	r7, sp, #0
 800a800:	60f8      	str	r0, [r7, #12]
 800a802:	60b9      	str	r1, [r7, #8]
 800a804:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	6a19      	ldr	r1, [r3, #32]
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	435b      	muls	r3, r3
 800a80e:	68ba      	ldr	r2, [r7, #8]
 800a810:	4353      	muls	r3, r2
 800a812:	68ba      	ldr	r2, [r7, #8]
 800a814:	435a      	muls	r2, r3
 800a816:	0013      	movs	r3, r2
 800a818:	011b      	lsls	r3, r3, #4
 800a81a:	1a9b      	subs	r3, r3, r2
 800a81c:	43db      	mvns	r3, r3
 800a81e:	400b      	ands	r3, r1
 800a820:	001a      	movs	r2, r3
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	435b      	muls	r3, r3
 800a826:	68b9      	ldr	r1, [r7, #8]
 800a828:	434b      	muls	r3, r1
 800a82a:	68b9      	ldr	r1, [r7, #8]
 800a82c:	434b      	muls	r3, r1
 800a82e:	6879      	ldr	r1, [r7, #4]
 800a830:	434b      	muls	r3, r1
 800a832:	431a      	orrs	r2, r3
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	621a      	str	r2, [r3, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 800a838:	46c0      	nop			@ (mov r8, r8)
 800a83a:	46bd      	mov	sp, r7
 800a83c:	b004      	add	sp, #16
 800a83e:	bd80      	pop	{r7, pc}

0800a840 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b084      	sub	sp, #16
 800a844:	af00      	add	r7, sp, #0
 800a846:	60f8      	str	r0, [r7, #12]
 800a848:	60b9      	str	r1, [r7, #8]
 800a84a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	0a1b      	lsrs	r3, r3, #8
 800a854:	68ba      	ldr	r2, [r7, #8]
 800a856:	0a12      	lsrs	r2, r2, #8
 800a858:	4353      	muls	r3, r2
 800a85a:	68ba      	ldr	r2, [r7, #8]
 800a85c:	0a12      	lsrs	r2, r2, #8
 800a85e:	4353      	muls	r3, r2
 800a860:	68ba      	ldr	r2, [r7, #8]
 800a862:	0a12      	lsrs	r2, r2, #8
 800a864:	435a      	muls	r2, r3
 800a866:	0013      	movs	r3, r2
 800a868:	011b      	lsls	r3, r3, #4
 800a86a:	1a9b      	subs	r3, r3, r2
 800a86c:	43db      	mvns	r3, r3
 800a86e:	400b      	ands	r3, r1
 800a870:	001a      	movs	r2, r3
 800a872:	68bb      	ldr	r3, [r7, #8]
 800a874:	0a1b      	lsrs	r3, r3, #8
 800a876:	68b9      	ldr	r1, [r7, #8]
 800a878:	0a09      	lsrs	r1, r1, #8
 800a87a:	434b      	muls	r3, r1
 800a87c:	68b9      	ldr	r1, [r7, #8]
 800a87e:	0a09      	lsrs	r1, r1, #8
 800a880:	434b      	muls	r3, r1
 800a882:	68b9      	ldr	r1, [r7, #8]
 800a884:	0a09      	lsrs	r1, r1, #8
 800a886:	434b      	muls	r3, r1
 800a888:	6879      	ldr	r1, [r7, #4]
 800a88a:	434b      	muls	r3, r1
 800a88c:	431a      	orrs	r2, r3
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	625a      	str	r2, [r3, #36]	@ 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 800a892:	46c0      	nop			@ (mov r8, r8)
 800a894:	46bd      	mov	sp, r7
 800a896:	b004      	add	sp, #16
 800a898:	bd80      	pop	{r7, pc}

0800a89a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800a89a:	b580      	push	{r7, lr}
 800a89c:	b084      	sub	sp, #16
 800a89e:	af00      	add	r7, sp, #0
 800a8a0:	6078      	str	r0, [r7, #4]
 800a8a2:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800a8a8:	e047      	b.n	800a93a <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	2101      	movs	r1, #1
 800a8b0:	68fa      	ldr	r2, [r7, #12]
 800a8b2:	4091      	lsls	r1, r2
 800a8b4:	000a      	movs	r2, r1
 800a8b6:	4013      	ands	r3, r2
 800a8b8:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d039      	beq.n	800a934 <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	685b      	ldr	r3, [r3, #4]
 800a8c4:	2b01      	cmp	r3, #1
 800a8c6:	d003      	beq.n	800a8d0 <LL_GPIO_Init+0x36>
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	685b      	ldr	r3, [r3, #4]
 800a8cc:	2b02      	cmp	r3, #2
 800a8ce:	d10d      	bne.n	800a8ec <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	689a      	ldr	r2, [r3, #8]
 800a8d4:	68b9      	ldr	r1, [r7, #8]
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	0018      	movs	r0, r3
 800a8da:	f7ff ff56 	bl	800a78a <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	68da      	ldr	r2, [r3, #12]
 800a8e2:	68b9      	ldr	r1, [r7, #8]
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	0018      	movs	r0, r3
 800a8e8:	f7ff ff3a 	bl	800a760 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	691a      	ldr	r2, [r3, #16]
 800a8f0:	68b9      	ldr	r1, [r7, #8]
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	0018      	movs	r0, r3
 800a8f6:	f7ff ff64 	bl	800a7c2 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	685b      	ldr	r3, [r3, #4]
 800a8fe:	2b02      	cmp	r3, #2
 800a900:	d111      	bne.n	800a926 <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	2bff      	cmp	r3, #255	@ 0xff
 800a906:	d807      	bhi.n	800a918 <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	695a      	ldr	r2, [r3, #20]
 800a90c:	68b9      	ldr	r1, [r7, #8]
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	0018      	movs	r0, r3
 800a912:	f7ff ff72 	bl	800a7fa <LL_GPIO_SetAFPin_0_7>
 800a916:	e006      	b.n	800a926 <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	695a      	ldr	r2, [r3, #20]
 800a91c:	68b9      	ldr	r1, [r7, #8]
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	0018      	movs	r0, r3
 800a922:	f7ff ff8d 	bl	800a840 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	685a      	ldr	r2, [r3, #4]
 800a92a:	68b9      	ldr	r1, [r7, #8]
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	0018      	movs	r0, r3
 800a930:	f7ff fefa 	bl	800a728 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	3301      	adds	r3, #1
 800a938:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	681a      	ldr	r2, [r3, #0]
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	40da      	lsrs	r2, r3
 800a942:	1e13      	subs	r3, r2, #0
 800a944:	d1b1      	bne.n	800a8aa <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 800a946:	2300      	movs	r3, #0
}
 800a948:	0018      	movs	r0, r3
 800a94a:	46bd      	mov	sp, r7
 800a94c:	b004      	add	sp, #16
 800a94e:	bd80      	pop	{r7, pc}

0800a950 <memset>:
 800a950:	0003      	movs	r3, r0
 800a952:	1882      	adds	r2, r0, r2
 800a954:	4293      	cmp	r3, r2
 800a956:	d100      	bne.n	800a95a <memset+0xa>
 800a958:	4770      	bx	lr
 800a95a:	7019      	strb	r1, [r3, #0]
 800a95c:	3301      	adds	r3, #1
 800a95e:	e7f9      	b.n	800a954 <memset+0x4>

0800a960 <__libc_init_array>:
 800a960:	b570      	push	{r4, r5, r6, lr}
 800a962:	2600      	movs	r6, #0
 800a964:	4c0c      	ldr	r4, [pc, #48]	@ (800a998 <__libc_init_array+0x38>)
 800a966:	4d0d      	ldr	r5, [pc, #52]	@ (800a99c <__libc_init_array+0x3c>)
 800a968:	1b64      	subs	r4, r4, r5
 800a96a:	10a4      	asrs	r4, r4, #2
 800a96c:	42a6      	cmp	r6, r4
 800a96e:	d109      	bne.n	800a984 <__libc_init_array+0x24>
 800a970:	2600      	movs	r6, #0
 800a972:	f000 f819 	bl	800a9a8 <_init>
 800a976:	4c0a      	ldr	r4, [pc, #40]	@ (800a9a0 <__libc_init_array+0x40>)
 800a978:	4d0a      	ldr	r5, [pc, #40]	@ (800a9a4 <__libc_init_array+0x44>)
 800a97a:	1b64      	subs	r4, r4, r5
 800a97c:	10a4      	asrs	r4, r4, #2
 800a97e:	42a6      	cmp	r6, r4
 800a980:	d105      	bne.n	800a98e <__libc_init_array+0x2e>
 800a982:	bd70      	pop	{r4, r5, r6, pc}
 800a984:	00b3      	lsls	r3, r6, #2
 800a986:	58eb      	ldr	r3, [r5, r3]
 800a988:	4798      	blx	r3
 800a98a:	3601      	adds	r6, #1
 800a98c:	e7ee      	b.n	800a96c <__libc_init_array+0xc>
 800a98e:	00b3      	lsls	r3, r6, #2
 800a990:	58eb      	ldr	r3, [r5, r3]
 800a992:	4798      	blx	r3
 800a994:	3601      	adds	r6, #1
 800a996:	e7f2      	b.n	800a97e <__libc_init_array+0x1e>
 800a998:	0800add8 	.word	0x0800add8
 800a99c:	0800add8 	.word	0x0800add8
 800a9a0:	0800addc 	.word	0x0800addc
 800a9a4:	0800add8 	.word	0x0800add8

0800a9a8 <_init>:
 800a9a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9aa:	46c0      	nop			@ (mov r8, r8)
 800a9ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9ae:	bc08      	pop	{r3}
 800a9b0:	469e      	mov	lr, r3
 800a9b2:	4770      	bx	lr

0800a9b4 <_fini>:
 800a9b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9b6:	46c0      	nop			@ (mov r8, r8)
 800a9b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9ba:	bc08      	pop	{r3}
 800a9bc:	469e      	mov	lr, r3
 800a9be:	4770      	bx	lr
