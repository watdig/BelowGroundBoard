
BelowGroundBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008420  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  080084e0  080084e0  000094e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088ec  080088ec  0000a0a8  2**0
                  CONTENTS
  4 .ARM          00000000  080088ec  080088ec  0000a0a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080088ec  080088ec  0000a0a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088ec  080088ec  000098ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080088f0  080088f0  000098f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a8  20000000  080088f4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d4  200000a8  0800899c  0000a0a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000077c  0800899c  0000a77c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000a0a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a088  00000000  00000000  0000a0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003554  00000000  00000000  00024158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017e8  00000000  00000000  000276b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012d2  00000000  00000000  00028e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019c09  00000000  00000000  0002a16a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c547  00000000  00000000  00043d73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009efc4  00000000  00000000  000602ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ff27e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005884  00000000  00000000  000ff2c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  00104b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000a8 	.word	0x200000a8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080084c8 	.word	0x080084c8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000ac 	.word	0x200000ac
 8000104:	080084c8 	.word	0x080084c8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <HAL_I2C_ErrorCallback>:
{
	i2c_rx_int = 1;
}

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
	// Do something
	i2c_err_int = 1;
 80003fc:	4b07      	ldr	r3, [pc, #28]	@ (800041c <HAL_I2C_ErrorCallback+0x28>)
 80003fe:	2201      	movs	r2, #1
 8000400:	701a      	strb	r2, [r3, #0]
	__HAL_I2C_DISABLE_IT(&hi2c1, I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI |
 8000402:	4b07      	ldr	r3, [pc, #28]	@ (8000420 <HAL_I2C_ErrorCallback+0x2c>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	681a      	ldr	r2, [r3, #0]
 8000408:	4b05      	ldr	r3, [pc, #20]	@ (8000420 <HAL_I2C_ErrorCallback+0x2c>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	21fe      	movs	r1, #254	@ 0xfe
 800040e:	438a      	bics	r2, r1
 8000410:	601a      	str	r2, [r3, #0]
										 I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI);
}
 8000412:	46c0      	nop			@ (mov r8, r8)
 8000414:	46bd      	mov	sp, r7
 8000416:	b002      	add	sp, #8
 8000418:	bd80      	pop	{r7, pc}
 800041a:	46c0      	nop			@ (mov r8, r8)
 800041c:	200000c4 	.word	0x200000c4
 8000420:	200000c8 	.word	0x200000c8

08000424 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0
 800042a:	0002      	movs	r2, r0
 800042c:	1dfb      	adds	r3, r7, #7
 800042e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000430:	1dfb      	adds	r3, r7, #7
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	2b7f      	cmp	r3, #127	@ 0x7f
 8000436:	d809      	bhi.n	800044c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000438:	1dfb      	adds	r3, r7, #7
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	001a      	movs	r2, r3
 800043e:	231f      	movs	r3, #31
 8000440:	401a      	ands	r2, r3
 8000442:	4b04      	ldr	r3, [pc, #16]	@ (8000454 <__NVIC_EnableIRQ+0x30>)
 8000444:	2101      	movs	r1, #1
 8000446:	4091      	lsls	r1, r2
 8000448:	000a      	movs	r2, r1
 800044a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800044c:	46c0      	nop			@ (mov r8, r8)
 800044e:	46bd      	mov	sp, r7
 8000450:	b002      	add	sp, #8
 8000452:	bd80      	pop	{r7, pc}
 8000454:	e000e100 	.word	0xe000e100

08000458 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000458:	b590      	push	{r4, r7, lr}
 800045a:	b083      	sub	sp, #12
 800045c:	af00      	add	r7, sp, #0
 800045e:	0002      	movs	r2, r0
 8000460:	6039      	str	r1, [r7, #0]
 8000462:	1dfb      	adds	r3, r7, #7
 8000464:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000466:	1dfb      	adds	r3, r7, #7
 8000468:	781b      	ldrb	r3, [r3, #0]
 800046a:	2b7f      	cmp	r3, #127	@ 0x7f
 800046c:	d828      	bhi.n	80004c0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800046e:	4a2f      	ldr	r2, [pc, #188]	@ (800052c <__NVIC_SetPriority+0xd4>)
 8000470:	1dfb      	adds	r3, r7, #7
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	b25b      	sxtb	r3, r3
 8000476:	089b      	lsrs	r3, r3, #2
 8000478:	33c0      	adds	r3, #192	@ 0xc0
 800047a:	009b      	lsls	r3, r3, #2
 800047c:	589b      	ldr	r3, [r3, r2]
 800047e:	1dfa      	adds	r2, r7, #7
 8000480:	7812      	ldrb	r2, [r2, #0]
 8000482:	0011      	movs	r1, r2
 8000484:	2203      	movs	r2, #3
 8000486:	400a      	ands	r2, r1
 8000488:	00d2      	lsls	r2, r2, #3
 800048a:	21ff      	movs	r1, #255	@ 0xff
 800048c:	4091      	lsls	r1, r2
 800048e:	000a      	movs	r2, r1
 8000490:	43d2      	mvns	r2, r2
 8000492:	401a      	ands	r2, r3
 8000494:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000496:	683b      	ldr	r3, [r7, #0]
 8000498:	019b      	lsls	r3, r3, #6
 800049a:	22ff      	movs	r2, #255	@ 0xff
 800049c:	401a      	ands	r2, r3
 800049e:	1dfb      	adds	r3, r7, #7
 80004a0:	781b      	ldrb	r3, [r3, #0]
 80004a2:	0018      	movs	r0, r3
 80004a4:	2303      	movs	r3, #3
 80004a6:	4003      	ands	r3, r0
 80004a8:	00db      	lsls	r3, r3, #3
 80004aa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004ac:	481f      	ldr	r0, [pc, #124]	@ (800052c <__NVIC_SetPriority+0xd4>)
 80004ae:	1dfb      	adds	r3, r7, #7
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	b25b      	sxtb	r3, r3
 80004b4:	089b      	lsrs	r3, r3, #2
 80004b6:	430a      	orrs	r2, r1
 80004b8:	33c0      	adds	r3, #192	@ 0xc0
 80004ba:	009b      	lsls	r3, r3, #2
 80004bc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80004be:	e031      	b.n	8000524 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004c0:	4a1b      	ldr	r2, [pc, #108]	@ (8000530 <__NVIC_SetPriority+0xd8>)
 80004c2:	1dfb      	adds	r3, r7, #7
 80004c4:	781b      	ldrb	r3, [r3, #0]
 80004c6:	0019      	movs	r1, r3
 80004c8:	230f      	movs	r3, #15
 80004ca:	400b      	ands	r3, r1
 80004cc:	3b08      	subs	r3, #8
 80004ce:	089b      	lsrs	r3, r3, #2
 80004d0:	3306      	adds	r3, #6
 80004d2:	009b      	lsls	r3, r3, #2
 80004d4:	18d3      	adds	r3, r2, r3
 80004d6:	3304      	adds	r3, #4
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	1dfa      	adds	r2, r7, #7
 80004dc:	7812      	ldrb	r2, [r2, #0]
 80004de:	0011      	movs	r1, r2
 80004e0:	2203      	movs	r2, #3
 80004e2:	400a      	ands	r2, r1
 80004e4:	00d2      	lsls	r2, r2, #3
 80004e6:	21ff      	movs	r1, #255	@ 0xff
 80004e8:	4091      	lsls	r1, r2
 80004ea:	000a      	movs	r2, r1
 80004ec:	43d2      	mvns	r2, r2
 80004ee:	401a      	ands	r2, r3
 80004f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	019b      	lsls	r3, r3, #6
 80004f6:	22ff      	movs	r2, #255	@ 0xff
 80004f8:	401a      	ands	r2, r3
 80004fa:	1dfb      	adds	r3, r7, #7
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	0018      	movs	r0, r3
 8000500:	2303      	movs	r3, #3
 8000502:	4003      	ands	r3, r0
 8000504:	00db      	lsls	r3, r3, #3
 8000506:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000508:	4809      	ldr	r0, [pc, #36]	@ (8000530 <__NVIC_SetPriority+0xd8>)
 800050a:	1dfb      	adds	r3, r7, #7
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	001c      	movs	r4, r3
 8000510:	230f      	movs	r3, #15
 8000512:	4023      	ands	r3, r4
 8000514:	3b08      	subs	r3, #8
 8000516:	089b      	lsrs	r3, r3, #2
 8000518:	430a      	orrs	r2, r1
 800051a:	3306      	adds	r3, #6
 800051c:	009b      	lsls	r3, r3, #2
 800051e:	18c3      	adds	r3, r0, r3
 8000520:	3304      	adds	r3, #4
 8000522:	601a      	str	r2, [r3, #0]
}
 8000524:	46c0      	nop			@ (mov r8, r8)
 8000526:	46bd      	mov	sp, r7
 8000528:	b003      	add	sp, #12
 800052a:	bd90      	pop	{r4, r7, pc}
 800052c:	e000e100 	.word	0xe000e100
 8000530:	e000ed00 	.word	0xe000ed00

08000534 <LL_ADC_DMA_GetRegAddr>:
  * @param  Register This parameter can be one of the following values:
  *         @arg @ref LL_ADC_DMA_REG_REGULAR_DATA
  * @retval ADC register address
  */
__STATIC_INLINE uint32_t LL_ADC_DMA_GetRegAddr(ADC_TypeDef *ADCx, uint32_t Register)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(Register);

  /* Retrieve address of register DR */
  return (uint32_t) &(ADCx->DR);
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	3340      	adds	r3, #64	@ 0x40
}
 8000542:	0018      	movs	r0, r3
 8000544:	46bd      	mov	sp, r7
 8000546:	b002      	add	sp, #8
 8000548:	bd80      	pop	{r7, pc}
	...

0800054c <LL_ADC_SetTriggerFrequencyMode>:
  *         @arg @ref LL_ADC_TRIGGER_FREQ_HIGH
  *         @arg @ref LL_ADC_TRIGGER_FREQ_LOW
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetTriggerFrequencyMode(ADC_TypeDef *ADCx, uint32_t TriggerFrequencyMode)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_LFTRIG, TriggerFrequencyMode);
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	691b      	ldr	r3, [r3, #16]
 800055a:	4a05      	ldr	r2, [pc, #20]	@ (8000570 <LL_ADC_SetTriggerFrequencyMode+0x24>)
 800055c:	401a      	ands	r2, r3
 800055e:	683b      	ldr	r3, [r7, #0]
 8000560:	431a      	orrs	r2, r3
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	611a      	str	r2, [r3, #16]
}
 8000566:	46c0      	nop			@ (mov r8, r8)
 8000568:	46bd      	mov	sp, r7
 800056a:	b002      	add	sp, #8
 800056c:	bd80      	pop	{r7, pc}
 800056e:	46c0      	nop			@ (mov r8, r8)
 8000570:	dfffffff 	.word	0xdfffffff

08000574 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
 800057a:	60f8      	str	r0, [r7, #12]
 800057c:	60b9      	str	r1, [r7, #8]
 800057e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	695b      	ldr	r3, [r3, #20]
 8000584:	68ba      	ldr	r2, [r7, #8]
 8000586:	2104      	movs	r1, #4
 8000588:	400a      	ands	r2, r1
 800058a:	2107      	movs	r1, #7
 800058c:	4091      	lsls	r1, r2
 800058e:	000a      	movs	r2, r1
 8000590:	43d2      	mvns	r2, r2
 8000592:	401a      	ands	r2, r3
 8000594:	68bb      	ldr	r3, [r7, #8]
 8000596:	2104      	movs	r1, #4
 8000598:	400b      	ands	r3, r1
 800059a:	6879      	ldr	r1, [r7, #4]
 800059c:	4099      	lsls	r1, r3
 800059e:	000b      	movs	r3, r1
 80005a0:	431a      	orrs	r2, r3
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80005a6:	46c0      	nop			@ (mov r8, r8)
 80005a8:	46bd      	mov	sp, r7
 80005aa:	b004      	add	sp, #16
 80005ac:	bd80      	pop	{r7, pc}
	...

080005b0 <LL_ADC_REG_SetSequencerConfigurable>:
  *         @arg @ref LL_ADC_REG_SEQ_FIXED
  *         @arg @ref LL_ADC_REG_SEQ_CONFIGURABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerConfigurable(ADC_TypeDef *ADCx, uint32_t Configurability)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_CHSELRMOD, Configurability);
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	68db      	ldr	r3, [r3, #12]
 80005be:	4a05      	ldr	r2, [pc, #20]	@ (80005d4 <LL_ADC_REG_SetSequencerConfigurable+0x24>)
 80005c0:	401a      	ands	r2, r3
 80005c2:	683b      	ldr	r3, [r7, #0]
 80005c4:	431a      	orrs	r2, r3
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	60da      	str	r2, [r3, #12]
}
 80005ca:	46c0      	nop			@ (mov r8, r8)
 80005cc:	46bd      	mov	sp, r7
 80005ce:	b002      	add	sp, #8
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	46c0      	nop			@ (mov r8, r8)
 80005d4:	ffdfffff 	.word	0xffdfffff

080005d8 <LL_ADC_REG_SetSequencerScanDirection>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_FORWARD
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_BACKWARD
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerScanDirection(ADC_TypeDef *ADCx, uint32_t ScanDirection)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
 80005e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	68db      	ldr	r3, [r3, #12]
 80005e6:	2204      	movs	r2, #4
 80005e8:	4393      	bics	r3, r2
 80005ea:	001a      	movs	r2, r3
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	431a      	orrs	r2, r3
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	60da      	str	r2, [r3, #12]
}
 80005f4:	46c0      	nop			@ (mov r8, r8)
 80005f6:	46bd      	mov	sp, r7
 80005f8:	b002      	add	sp, #8
 80005fa:	bd80      	pop	{r7, pc}

080005fc <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	025b      	lsls	r3, r3, #9
 800060e:	0a5b      	lsrs	r3, r3, #9
 8000610:	431a      	orrs	r2, r3
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000616:	46c0      	nop			@ (mov r8, r8)
 8000618:	46bd      	mov	sp, r7
 800061a:	b002      	add	sp, #8
 800061c:	bd80      	pop	{r7, pc}

0800061e <LL_ADC_SetOverSamplingScope>:
  *         @arg @ref LL_ADC_OVS_DISABLE
  *         @arg @ref LL_ADC_OVS_GRP_REGULAR_CONTINUED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
{
 800061e:	b580      	push	{r7, lr}
 8000620:	b082      	sub	sp, #8
 8000622:	af00      	add	r7, sp, #0
 8000624:	6078      	str	r0, [r7, #4]
 8000626:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_OVSE, OvsScope);
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	691b      	ldr	r3, [r3, #16]
 800062c:	2201      	movs	r2, #1
 800062e:	4393      	bics	r3, r2
 8000630:	001a      	movs	r2, r3
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	431a      	orrs	r2, r3
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	611a      	str	r2, [r3, #16]
}
 800063a:	46c0      	nop			@ (mov r8, r8)
 800063c:	46bd      	mov	sp, r7
 800063e:	b002      	add	sp, #8
 8000640:	bd80      	pop	{r7, pc}
	...

08000644 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	689b      	ldr	r3, [r3, #8]
 8000650:	4a05      	ldr	r2, [pc, #20]	@ (8000668 <LL_ADC_EnableInternalRegulator+0x24>)
 8000652:	4013      	ands	r3, r2
 8000654:	2280      	movs	r2, #128	@ 0x80
 8000656:	0552      	lsls	r2, r2, #21
 8000658:	431a      	orrs	r2, r3
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800065e:	46c0      	nop			@ (mov r8, r8)
 8000660:	46bd      	mov	sp, r7
 8000662:	b002      	add	sp, #8
 8000664:	bd80      	pop	{r7, pc}
 8000666:	46c0      	nop			@ (mov r8, r8)
 8000668:	6fffffe8 	.word	0x6fffffe8

0800066c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	689b      	ldr	r3, [r3, #8]
 8000678:	2201      	movs	r2, #1
 800067a:	4013      	ands	r3, r2
 800067c:	2b01      	cmp	r3, #1
 800067e:	d101      	bne.n	8000684 <LL_ADC_IsEnabled+0x18>
 8000680:	2301      	movs	r3, #1
 8000682:	e000      	b.n	8000686 <LL_ADC_IsEnabled+0x1a>
 8000684:	2300      	movs	r3, #0
}
 8000686:	0018      	movs	r0, r3
 8000688:	46bd      	mov	sp, r7
 800068a:	b002      	add	sp, #8
 800068c:	bd80      	pop	{r7, pc}

0800068e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800068e:	b580      	push	{r7, lr}
 8000690:	b082      	sub	sp, #8
 8000692:	af00      	add	r7, sp, #0
 8000694:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	689b      	ldr	r3, [r3, #8]
 800069a:	2202      	movs	r2, #2
 800069c:	4013      	ands	r3, r2
 800069e:	2b02      	cmp	r3, #2
 80006a0:	d101      	bne.n	80006a6 <LL_ADC_IsDisableOngoing+0x18>
 80006a2:	2301      	movs	r3, #1
 80006a4:	e000      	b.n	80006a8 <LL_ADC_IsDisableOngoing+0x1a>
 80006a6:	2300      	movs	r3, #0
}
 80006a8:	0018      	movs	r0, r3
 80006aa:	46bd      	mov	sp, r7
 80006ac:	b002      	add	sp, #8
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	689b      	ldr	r3, [r3, #8]
 80006bc:	4a04      	ldr	r2, [pc, #16]	@ (80006d0 <LL_ADC_REG_StartConversion+0x20>)
 80006be:	4013      	ands	r3, r2
 80006c0:	2204      	movs	r2, #4
 80006c2:	431a      	orrs	r2, r3
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80006c8:	46c0      	nop			@ (mov r8, r8)
 80006ca:	46bd      	mov	sp, r7
 80006cc:	b002      	add	sp, #8
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	7fffffe8 	.word	0x7fffffe8

080006d4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	689b      	ldr	r3, [r3, #8]
 80006e0:	2204      	movs	r2, #4
 80006e2:	4013      	ands	r3, r2
 80006e4:	2b04      	cmp	r3, #4
 80006e6:	d101      	bne.n	80006ec <LL_ADC_REG_IsConversionOngoing+0x18>
 80006e8:	2301      	movs	r3, #1
 80006ea:	e000      	b.n	80006ee <LL_ADC_REG_IsConversionOngoing+0x1a>
 80006ec:	2300      	movs	r3, #0
}
 80006ee:	0018      	movs	r0, r3
 80006f0:	46bd      	mov	sp, r7
 80006f2:	b002      	add	sp, #8
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <LL_ADC_IsActiveFlag_CCRDY>:
  * @rmtoll ISR      CCRDY          LL_ADC_IsActiveFlag_CCRDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_CCRDY(ADC_TypeDef *ADCx)
{
 80006f6:	b580      	push	{r7, lr}
 80006f8:	b082      	sub	sp, #8
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_CCRDY) == (LL_ADC_FLAG_CCRDY)) ? 1UL : 0UL);
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681a      	ldr	r2, [r3, #0]
 8000702:	2380      	movs	r3, #128	@ 0x80
 8000704:	019b      	lsls	r3, r3, #6
 8000706:	401a      	ands	r2, r3
 8000708:	2380      	movs	r3, #128	@ 0x80
 800070a:	019b      	lsls	r3, r3, #6
 800070c:	429a      	cmp	r2, r3
 800070e:	d101      	bne.n	8000714 <LL_ADC_IsActiveFlag_CCRDY+0x1e>
 8000710:	2301      	movs	r3, #1
 8000712:	e000      	b.n	8000716 <LL_ADC_IsActiveFlag_CCRDY+0x20>
 8000714:	2300      	movs	r3, #0
}
 8000716:	0018      	movs	r0, r3
 8000718:	46bd      	mov	sp, r7
 800071a:	b002      	add	sp, #8
 800071c:	bd80      	pop	{r7, pc}

0800071e <LL_ADC_ClearFlag_CCRDY>:
  * @rmtoll ISR      CCRDY          LL_ADC_ClearFlag_CCRDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE void LL_ADC_ClearFlag_CCRDY(ADC_TypeDef *ADCx)
{
 800071e:	b580      	push	{r7, lr}
 8000720:	b082      	sub	sp, #8
 8000722:	af00      	add	r7, sp, #0
 8000724:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_CCRDY);
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	2280      	movs	r2, #128	@ 0x80
 800072a:	0192      	lsls	r2, r2, #6
 800072c:	601a      	str	r2, [r3, #0]
}
 800072e:	46c0      	nop			@ (mov r8, r8)
 8000730:	46bd      	mov	sp, r7
 8000732:	b002      	add	sp, #8
 8000734:	bd80      	pop	{r7, pc}

08000736 <LL_ADC_EnableIT_OVR>:
  * @rmtoll IER      OVRIE          LL_ADC_EnableIT_OVR
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_OVR(ADC_TypeDef *ADCx)
{
 8000736:	b580      	push	{r7, lr}
 8000738:	b082      	sub	sp, #8
 800073a:	af00      	add	r7, sp, #0
 800073c:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_OVR);
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	685b      	ldr	r3, [r3, #4]
 8000742:	2210      	movs	r2, #16
 8000744:	431a      	orrs	r2, r3
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	605a      	str	r2, [r3, #4]
}
 800074a:	46c0      	nop			@ (mov r8, r8)
 800074c:	46bd      	mov	sp, r7
 800074e:	b002      	add	sp, #8
 8000750:	bd80      	pop	{r7, pc}

08000752 <LL_ADC_DisableIT_EOC>:
  * @rmtoll IER      EOCIE          LL_ADC_DisableIT_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
 8000752:	b580      	push	{r7, lr}
 8000754:	b082      	sub	sp, #8
 8000756:	af00      	add	r7, sp, #0
 8000758:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	685b      	ldr	r3, [r3, #4]
 800075e:	2204      	movs	r2, #4
 8000760:	4393      	bics	r3, r2
 8000762:	001a      	movs	r2, r3
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	605a      	str	r2, [r3, #4]
}
 8000768:	46c0      	nop			@ (mov r8, r8)
 800076a:	46bd      	mov	sp, r7
 800076c:	b002      	add	sp, #8
 800076e:	bd80      	pop	{r7, pc}

08000770 <LL_ADC_DisableIT_EOS>:
  * @rmtoll IER      EOSIE          LL_ADC_DisableIT_EOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	685b      	ldr	r3, [r3, #4]
 800077c:	2208      	movs	r2, #8
 800077e:	4393      	bics	r3, r2
 8000780:	001a      	movs	r2, r3
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	605a      	str	r2, [r3, #4]
}
 8000786:	46c0      	nop			@ (mov r8, r8)
 8000788:	46bd      	mov	sp, r7
 800078a:	b002      	add	sp, #8
 800078c:	bd80      	pop	{r7, pc}
	...

08000790 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_TIM17
  *         @arg @ref LL_APB1_GRP2_PERIPH_ADC
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR2, Periphs);
 8000798:	4b07      	ldr	r3, [pc, #28]	@ (80007b8 <LL_APB1_GRP2_EnableClock+0x28>)
 800079a:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800079c:	4b06      	ldr	r3, [pc, #24]	@ (80007b8 <LL_APB1_GRP2_EnableClock+0x28>)
 800079e:	687a      	ldr	r2, [r7, #4]
 80007a0:	430a      	orrs	r2, r1
 80007a2:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 80007a4:	4b04      	ldr	r3, [pc, #16]	@ (80007b8 <LL_APB1_GRP2_EnableClock+0x28>)
 80007a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a8:	687a      	ldr	r2, [r7, #4]
 80007aa:	4013      	ands	r3, r2
 80007ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007ae:	68fb      	ldr	r3, [r7, #12]
}
 80007b0:	46c0      	nop			@ (mov r8, r8)
 80007b2:	46bd      	mov	sp, r7
 80007b4:	b004      	add	sp, #16
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40021000 	.word	0x40021000

080007bc <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOD
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 80007c4:	4b07      	ldr	r3, [pc, #28]	@ (80007e4 <LL_IOP_GRP1_EnableClock+0x28>)
 80007c6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80007c8:	4b06      	ldr	r3, [pc, #24]	@ (80007e4 <LL_IOP_GRP1_EnableClock+0x28>)
 80007ca:	687a      	ldr	r2, [r7, #4]
 80007cc:	430a      	orrs	r2, r1
 80007ce:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80007d0:	4b04      	ldr	r3, [pc, #16]	@ (80007e4 <LL_IOP_GRP1_EnableClock+0x28>)
 80007d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007d4:	687a      	ldr	r2, [r7, #4]
 80007d6:	4013      	ands	r3, r2
 80007d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007da:	68fb      	ldr	r3, [r7, #12]
}
 80007dc:	46c0      	nop			@ (mov r8, r8)
 80007de:	46bd      	mov	sp, r7
 80007e0:	b004      	add	sp, #16
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	40021000 	.word	0x40021000

080007e8 <LL_SYSTICK_IsActiveCounterFlag>:
  * @note   It can be used in timeout function on application side.
  * @rmtoll STK_CTRL     COUNTFLAG     LL_SYSTICK_IsActiveCounterFlag
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  return (((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk)) ? 1UL : 0UL);
 80007ec:	4b07      	ldr	r3, [pc, #28]	@ (800080c <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 80007ee:	681a      	ldr	r2, [r3, #0]
 80007f0:	2380      	movs	r3, #128	@ 0x80
 80007f2:	025b      	lsls	r3, r3, #9
 80007f4:	401a      	ands	r2, r3
 80007f6:	2380      	movs	r3, #128	@ 0x80
 80007f8:	025b      	lsls	r3, r3, #9
 80007fa:	429a      	cmp	r2, r3
 80007fc:	d101      	bne.n	8000802 <LL_SYSTICK_IsActiveCounterFlag+0x1a>
 80007fe:	2301      	movs	r3, #1
 8000800:	e000      	b.n	8000804 <LL_SYSTICK_IsActiveCounterFlag+0x1c>
 8000802:	2300      	movs	r3, #0
}
 8000804:	0018      	movs	r0, r3
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	46c0      	nop			@ (mov r8, r8)
 800080c:	e000e010 	.word	0xe000e010

08000810 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_5 (*)
  * @note (*) Availability depends on devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_EN);
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	3b01      	subs	r3, #1
 8000822:	4a0a      	ldr	r2, [pc, #40]	@ (800084c <LL_DMA_EnableChannel+0x3c>)
 8000824:	5cd3      	ldrb	r3, [r2, r3]
 8000826:	001a      	movs	r2, r3
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	18d3      	adds	r3, r2, r3
 800082c:	681a      	ldr	r2, [r3, #0]
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	3b01      	subs	r3, #1
 8000832:	4906      	ldr	r1, [pc, #24]	@ (800084c <LL_DMA_EnableChannel+0x3c>)
 8000834:	5ccb      	ldrb	r3, [r1, r3]
 8000836:	0019      	movs	r1, r3
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	18cb      	adds	r3, r1, r3
 800083c:	2101      	movs	r1, #1
 800083e:	430a      	orrs	r2, r1
 8000840:	601a      	str	r2, [r3, #0]
}
 8000842:	46c0      	nop			@ (mov r8, r8)
 8000844:	46bd      	mov	sp, r7
 8000846:	b004      	add	sp, #16
 8000848:	bd80      	pop	{r7, pc}
 800084a:	46c0      	nop			@ (mov r8, r8)
 800084c:	080084e0 	.word	0x080084e0

08000850 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b086      	sub	sp, #24
 8000854:	af00      	add	r7, sp, #0
 8000856:	60f8      	str	r0, [r7, #12]
 8000858:	60b9      	str	r1, [r7, #8]
 800085a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR,
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	3b01      	subs	r3, #1
 8000864:	4a0b      	ldr	r2, [pc, #44]	@ (8000894 <LL_DMA_SetDataTransferDirection+0x44>)
 8000866:	5cd3      	ldrb	r3, [r2, r3]
 8000868:	001a      	movs	r2, r3
 800086a:	697b      	ldr	r3, [r7, #20]
 800086c:	18d3      	adds	r3, r2, r3
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a09      	ldr	r2, [pc, #36]	@ (8000898 <LL_DMA_SetDataTransferDirection+0x48>)
 8000872:	4013      	ands	r3, r2
 8000874:	0019      	movs	r1, r3
 8000876:	68bb      	ldr	r3, [r7, #8]
 8000878:	3b01      	subs	r3, #1
 800087a:	4a06      	ldr	r2, [pc, #24]	@ (8000894 <LL_DMA_SetDataTransferDirection+0x44>)
 800087c:	5cd3      	ldrb	r3, [r2, r3]
 800087e:	001a      	movs	r2, r3
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	18d3      	adds	r3, r2, r3
 8000884:	687a      	ldr	r2, [r7, #4]
 8000886:	430a      	orrs	r2, r1
 8000888:	601a      	str	r2, [r3, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 800088a:	46c0      	nop			@ (mov r8, r8)
 800088c:	46bd      	mov	sp, r7
 800088e:	b006      	add	sp, #24
 8000890:	bd80      	pop	{r7, pc}
 8000892:	46c0      	nop			@ (mov r8, r8)
 8000894:	080084e0 	.word	0x080084e0
 8000898:	ffffbfef 	.word	0xffffbfef

0800089c <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b086      	sub	sp, #24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	60f8      	str	r0, [r7, #12]
 80008a4:	60b9      	str	r1, [r7, #8]
 80008a6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_CIRC,
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	3b01      	subs	r3, #1
 80008b0:	4a0b      	ldr	r2, [pc, #44]	@ (80008e0 <LL_DMA_SetMode+0x44>)
 80008b2:	5cd3      	ldrb	r3, [r2, r3]
 80008b4:	001a      	movs	r2, r3
 80008b6:	697b      	ldr	r3, [r7, #20]
 80008b8:	18d3      	adds	r3, r2, r3
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2220      	movs	r2, #32
 80008be:	4393      	bics	r3, r2
 80008c0:	0019      	movs	r1, r3
 80008c2:	68bb      	ldr	r3, [r7, #8]
 80008c4:	3b01      	subs	r3, #1
 80008c6:	4a06      	ldr	r2, [pc, #24]	@ (80008e0 <LL_DMA_SetMode+0x44>)
 80008c8:	5cd3      	ldrb	r3, [r2, r3]
 80008ca:	001a      	movs	r2, r3
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	18d3      	adds	r3, r2, r3
 80008d0:	687a      	ldr	r2, [r7, #4]
 80008d2:	430a      	orrs	r2, r1
 80008d4:	601a      	str	r2, [r3, #0]
             Mode);
}
 80008d6:	46c0      	nop			@ (mov r8, r8)
 80008d8:	46bd      	mov	sp, r7
 80008da:	b006      	add	sp, #24
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	46c0      	nop			@ (mov r8, r8)
 80008e0:	080084e0 	.word	0x080084e0

080008e4 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b086      	sub	sp, #24
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	60f8      	str	r0, [r7, #12]
 80008ec:	60b9      	str	r1, [r7, #8]
 80008ee:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_PINC,
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	3b01      	subs	r3, #1
 80008f8:	4a0b      	ldr	r2, [pc, #44]	@ (8000928 <LL_DMA_SetPeriphIncMode+0x44>)
 80008fa:	5cd3      	ldrb	r3, [r2, r3]
 80008fc:	001a      	movs	r2, r3
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	18d3      	adds	r3, r2, r3
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	2240      	movs	r2, #64	@ 0x40
 8000906:	4393      	bics	r3, r2
 8000908:	0019      	movs	r1, r3
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	3b01      	subs	r3, #1
 800090e:	4a06      	ldr	r2, [pc, #24]	@ (8000928 <LL_DMA_SetPeriphIncMode+0x44>)
 8000910:	5cd3      	ldrb	r3, [r2, r3]
 8000912:	001a      	movs	r2, r3
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	18d3      	adds	r3, r2, r3
 8000918:	687a      	ldr	r2, [r7, #4]
 800091a:	430a      	orrs	r2, r1
 800091c:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcIncMode);
}
 800091e:	46c0      	nop			@ (mov r8, r8)
 8000920:	46bd      	mov	sp, r7
 8000922:	b006      	add	sp, #24
 8000924:	bd80      	pop	{r7, pc}
 8000926:	46c0      	nop			@ (mov r8, r8)
 8000928:	080084e0 	.word	0x080084e0

0800092c <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b086      	sub	sp, #24
 8000930:	af00      	add	r7, sp, #0
 8000932:	60f8      	str	r0, [r7, #12]
 8000934:	60b9      	str	r1, [r7, #8]
 8000936:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_MINC,
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	3b01      	subs	r3, #1
 8000940:	4a0b      	ldr	r2, [pc, #44]	@ (8000970 <LL_DMA_SetMemoryIncMode+0x44>)
 8000942:	5cd3      	ldrb	r3, [r2, r3]
 8000944:	001a      	movs	r2, r3
 8000946:	697b      	ldr	r3, [r7, #20]
 8000948:	18d3      	adds	r3, r2, r3
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2280      	movs	r2, #128	@ 0x80
 800094e:	4393      	bics	r3, r2
 8000950:	0019      	movs	r1, r3
 8000952:	68bb      	ldr	r3, [r7, #8]
 8000954:	3b01      	subs	r3, #1
 8000956:	4a06      	ldr	r2, [pc, #24]	@ (8000970 <LL_DMA_SetMemoryIncMode+0x44>)
 8000958:	5cd3      	ldrb	r3, [r2, r3]
 800095a:	001a      	movs	r2, r3
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	18d3      	adds	r3, r2, r3
 8000960:	687a      	ldr	r2, [r7, #4]
 8000962:	430a      	orrs	r2, r1
 8000964:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstIncMode);
}
 8000966:	46c0      	nop			@ (mov r8, r8)
 8000968:	46bd      	mov	sp, r7
 800096a:	b006      	add	sp, #24
 800096c:	bd80      	pop	{r7, pc}
 800096e:	46c0      	nop			@ (mov r8, r8)
 8000970:	080084e0 	.word	0x080084e0

08000974 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b086      	sub	sp, #24
 8000978:	af00      	add	r7, sp, #0
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	60b9      	str	r1, [r7, #8]
 800097e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_PSIZE,
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	3b01      	subs	r3, #1
 8000988:	4a0b      	ldr	r2, [pc, #44]	@ (80009b8 <LL_DMA_SetPeriphSize+0x44>)
 800098a:	5cd3      	ldrb	r3, [r2, r3]
 800098c:	001a      	movs	r2, r3
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	18d3      	adds	r3, r2, r3
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a09      	ldr	r2, [pc, #36]	@ (80009bc <LL_DMA_SetPeriphSize+0x48>)
 8000996:	4013      	ands	r3, r2
 8000998:	0019      	movs	r1, r3
 800099a:	68bb      	ldr	r3, [r7, #8]
 800099c:	3b01      	subs	r3, #1
 800099e:	4a06      	ldr	r2, [pc, #24]	@ (80009b8 <LL_DMA_SetPeriphSize+0x44>)
 80009a0:	5cd3      	ldrb	r3, [r2, r3]
 80009a2:	001a      	movs	r2, r3
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	18d3      	adds	r3, r2, r3
 80009a8:	687a      	ldr	r2, [r7, #4]
 80009aa:	430a      	orrs	r2, r1
 80009ac:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcDataSize);
}
 80009ae:	46c0      	nop			@ (mov r8, r8)
 80009b0:	46bd      	mov	sp, r7
 80009b2:	b006      	add	sp, #24
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	46c0      	nop			@ (mov r8, r8)
 80009b8:	080084e0 	.word	0x080084e0
 80009bc:	fffffcff 	.word	0xfffffcff

080009c0 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b086      	sub	sp, #24
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_MSIZE,
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	3b01      	subs	r3, #1
 80009d4:	4a0b      	ldr	r2, [pc, #44]	@ (8000a04 <LL_DMA_SetMemorySize+0x44>)
 80009d6:	5cd3      	ldrb	r3, [r2, r3]
 80009d8:	001a      	movs	r2, r3
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	18d3      	adds	r3, r2, r3
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a09      	ldr	r2, [pc, #36]	@ (8000a08 <LL_DMA_SetMemorySize+0x48>)
 80009e2:	4013      	ands	r3, r2
 80009e4:	0019      	movs	r1, r3
 80009e6:	68bb      	ldr	r3, [r7, #8]
 80009e8:	3b01      	subs	r3, #1
 80009ea:	4a06      	ldr	r2, [pc, #24]	@ (8000a04 <LL_DMA_SetMemorySize+0x44>)
 80009ec:	5cd3      	ldrb	r3, [r2, r3]
 80009ee:	001a      	movs	r2, r3
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	18d3      	adds	r3, r2, r3
 80009f4:	687a      	ldr	r2, [r7, #4]
 80009f6:	430a      	orrs	r2, r1
 80009f8:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstDataSize);
}
 80009fa:	46c0      	nop			@ (mov r8, r8)
 80009fc:	46bd      	mov	sp, r7
 80009fe:	b006      	add	sp, #24
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	46c0      	nop			@ (mov r8, r8)
 8000a04:	080084e0 	.word	0x080084e0
 8000a08:	fffff3ff 	.word	0xfffff3ff

08000a0c <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b086      	sub	sp, #24
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_PL,
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	3b01      	subs	r3, #1
 8000a20:	4a0b      	ldr	r2, [pc, #44]	@ (8000a50 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8000a22:	5cd3      	ldrb	r3, [r2, r3]
 8000a24:	001a      	movs	r2, r3
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	18d3      	adds	r3, r2, r3
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a09      	ldr	r2, [pc, #36]	@ (8000a54 <LL_DMA_SetChannelPriorityLevel+0x48>)
 8000a2e:	4013      	ands	r3, r2
 8000a30:	0019      	movs	r1, r3
 8000a32:	68bb      	ldr	r3, [r7, #8]
 8000a34:	3b01      	subs	r3, #1
 8000a36:	4a06      	ldr	r2, [pc, #24]	@ (8000a50 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8000a38:	5cd3      	ldrb	r3, [r2, r3]
 8000a3a:	001a      	movs	r2, r3
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	18d3      	adds	r3, r2, r3
 8000a40:	687a      	ldr	r2, [r7, #4]
 8000a42:	430a      	orrs	r2, r1
 8000a44:	601a      	str	r2, [r3, #0]
             Priority);
}
 8000a46:	46c0      	nop			@ (mov r8, r8)
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	b006      	add	sp, #24
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	46c0      	nop			@ (mov r8, r8)
 8000a50:	080084e0 	.word	0x080084e0
 8000a54:	ffffcfff 	.word	0xffffcfff

08000a58 <LL_DMA_SetDataLength>:
  * @note (*) Availability depends on devices
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b086      	sub	sp, #24
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	60f8      	str	r0, [r7, #12]
 8000a60:	60b9      	str	r1, [r7, #8]
 8000a62:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CNDTR,
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	3b01      	subs	r3, #1
 8000a6c:	4a0a      	ldr	r2, [pc, #40]	@ (8000a98 <LL_DMA_SetDataLength+0x40>)
 8000a6e:	5cd3      	ldrb	r3, [r2, r3]
 8000a70:	001a      	movs	r2, r3
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	18d3      	adds	r3, r2, r3
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	0c1b      	lsrs	r3, r3, #16
 8000a7a:	0419      	lsls	r1, r3, #16
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	3b01      	subs	r3, #1
 8000a80:	4a05      	ldr	r2, [pc, #20]	@ (8000a98 <LL_DMA_SetDataLength+0x40>)
 8000a82:	5cd3      	ldrb	r3, [r2, r3]
 8000a84:	001a      	movs	r2, r3
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	18d3      	adds	r3, r2, r3
 8000a8a:	687a      	ldr	r2, [r7, #4]
 8000a8c:	430a      	orrs	r2, r1
 8000a8e:	605a      	str	r2, [r3, #4]
             DMA_CNDTR_NDT, NbData);
}
 8000a90:	46c0      	nop			@ (mov r8, r8)
 8000a92:	46bd      	mov	sp, r7
 8000a94:	b006      	add	sp, #24
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	080084e0 	.word	0x080084e0

08000a9c <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddress,
                                            uint32_t DstAddress, uint32_t Direction)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	60f8      	str	r0, [r7, #12]
 8000aa4:	60b9      	str	r1, [r7, #8]
 8000aa6:	607a      	str	r2, [r7, #4]
 8000aa8:	603b      	str	r3, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	617b      	str	r3, [r7, #20]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 8000aae:	6a3b      	ldr	r3, [r7, #32]
 8000ab0:	2b10      	cmp	r3, #16
 8000ab2:	d112      	bne.n	8000ada <LL_DMA_ConfigAddresses+0x3e>
  {
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CMAR, SrcAddress);
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	3b01      	subs	r3, #1
 8000ab8:	4a13      	ldr	r2, [pc, #76]	@ (8000b08 <LL_DMA_ConfigAddresses+0x6c>)
 8000aba:	5cd3      	ldrb	r3, [r2, r3]
 8000abc:	001a      	movs	r2, r3
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	18d3      	adds	r3, r2, r3
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	60da      	str	r2, [r3, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CPAR, DstAddress);
 8000ac6:	68bb      	ldr	r3, [r7, #8]
 8000ac8:	3b01      	subs	r3, #1
 8000aca:	4a0f      	ldr	r2, [pc, #60]	@ (8000b08 <LL_DMA_ConfigAddresses+0x6c>)
 8000acc:	5cd3      	ldrb	r3, [r2, r3]
 8000ace:	001a      	movs	r2, r3
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	18d3      	adds	r3, r2, r3
 8000ad4:	683a      	ldr	r2, [r7, #0]
 8000ad6:	609a      	str	r2, [r3, #8]
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CPAR, SrcAddress);
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CMAR, DstAddress);
  }
}
 8000ad8:	e011      	b.n	8000afe <LL_DMA_ConfigAddresses+0x62>
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CPAR, SrcAddress);
 8000ada:	68bb      	ldr	r3, [r7, #8]
 8000adc:	3b01      	subs	r3, #1
 8000ade:	4a0a      	ldr	r2, [pc, #40]	@ (8000b08 <LL_DMA_ConfigAddresses+0x6c>)
 8000ae0:	5cd3      	ldrb	r3, [r2, r3]
 8000ae2:	001a      	movs	r2, r3
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	18d3      	adds	r3, r2, r3
 8000ae8:	687a      	ldr	r2, [r7, #4]
 8000aea:	609a      	str	r2, [r3, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CMAR, DstAddress);
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	3b01      	subs	r3, #1
 8000af0:	4a05      	ldr	r2, [pc, #20]	@ (8000b08 <LL_DMA_ConfigAddresses+0x6c>)
 8000af2:	5cd3      	ldrb	r3, [r2, r3]
 8000af4:	001a      	movs	r2, r3
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	18d3      	adds	r3, r2, r3
 8000afa:	683a      	ldr	r2, [r7, #0]
 8000afc:	60da      	str	r2, [r3, #12]
}
 8000afe:	46c0      	nop			@ (mov r8, r8)
 8000b00:	46bd      	mov	sp, r7
 8000b02:	b006      	add	sp, #24
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	46c0      	nop			@ (mov r8, r8)
 8000b08:	080084e0 	.word	0x080084e0

08000b0c <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMAMUX_REQ_USART2_TX
  * @note (*) Availability depends on devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Request)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	607a      	str	r2, [r7, #4]
  (void)(DMAx);
  MODIFY_REG(((DMAMUX_Channel_TypeDef *)((uint32_t)DMAMUX1_Channel0 + (DMAMUX_CCR_SIZE * (Channel - 1UL))))->CCR,
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b44 <LL_DMA_SetPeriphRequest+0x38>)
 8000b1c:	4694      	mov	ip, r2
 8000b1e:	4463      	add	r3, ip
 8000b20:	009b      	lsls	r3, r3, #2
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	22ff      	movs	r2, #255	@ 0xff
 8000b26:	4393      	bics	r3, r2
 8000b28:	0019      	movs	r1, r3
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	4a05      	ldr	r2, [pc, #20]	@ (8000b44 <LL_DMA_SetPeriphRequest+0x38>)
 8000b2e:	4694      	mov	ip, r2
 8000b30:	4463      	add	r3, ip
 8000b32:	009b      	lsls	r3, r3, #2
 8000b34:	687a      	ldr	r2, [r7, #4]
 8000b36:	430a      	orrs	r2, r1
 8000b38:	601a      	str	r2, [r3, #0]
             DMAMUX_CxCR_DMAREQ_ID, Request);
}
 8000b3a:	46c0      	nop			@ (mov r8, r8)
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	b004      	add	sp, #16
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	46c0      	nop			@ (mov r8, r8)
 8000b44:	100081ff 	.word	0x100081ff

08000b48 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_5 (*)
  * @note (*) Availability depends on devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_TCIE);
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	3b01      	subs	r3, #1
 8000b5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b84 <LL_DMA_EnableIT_TC+0x3c>)
 8000b5c:	5cd3      	ldrb	r3, [r2, r3]
 8000b5e:	001a      	movs	r2, r3
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	18d3      	adds	r3, r2, r3
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	3b01      	subs	r3, #1
 8000b6a:	4906      	ldr	r1, [pc, #24]	@ (8000b84 <LL_DMA_EnableIT_TC+0x3c>)
 8000b6c:	5ccb      	ldrb	r3, [r1, r3]
 8000b6e:	0019      	movs	r1, r3
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	18cb      	adds	r3, r1, r3
 8000b74:	2102      	movs	r1, #2
 8000b76:	430a      	orrs	r2, r1
 8000b78:	601a      	str	r2, [r3, #0]
}
 8000b7a:	46c0      	nop			@ (mov r8, r8)
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	b004      	add	sp, #16
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	46c0      	nop			@ (mov r8, r8)
 8000b84:	080084e0 	.word	0x080084e0

08000b88 <LL_DMA_EnableIT_HT>:
  *         @arg @ref LL_DMA_CHANNEL_5 (*)
  * @note (*) Availability depends on devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_HTIE);
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	3b01      	subs	r3, #1
 8000b9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc4 <LL_DMA_EnableIT_HT+0x3c>)
 8000b9c:	5cd3      	ldrb	r3, [r2, r3]
 8000b9e:	001a      	movs	r2, r3
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	18d3      	adds	r3, r2, r3
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	3b01      	subs	r3, #1
 8000baa:	4906      	ldr	r1, [pc, #24]	@ (8000bc4 <LL_DMA_EnableIT_HT+0x3c>)
 8000bac:	5ccb      	ldrb	r3, [r1, r3]
 8000bae:	0019      	movs	r1, r3
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	18cb      	adds	r3, r1, r3
 8000bb4:	2104      	movs	r1, #4
 8000bb6:	430a      	orrs	r2, r1
 8000bb8:	601a      	str	r2, [r3, #0]
}
 8000bba:	46c0      	nop			@ (mov r8, r8)
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	b004      	add	sp, #16
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	46c0      	nop			@ (mov r8, r8)
 8000bc4:	080084e0 	.word	0x080084e0

08000bc8 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_5 (*)
  * @note (*) Availability depends on devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_TEIE);
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	3b01      	subs	r3, #1
 8000bda:	4a0a      	ldr	r2, [pc, #40]	@ (8000c04 <LL_DMA_EnableIT_TE+0x3c>)
 8000bdc:	5cd3      	ldrb	r3, [r2, r3]
 8000bde:	001a      	movs	r2, r3
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	18d3      	adds	r3, r2, r3
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	3b01      	subs	r3, #1
 8000bea:	4906      	ldr	r1, [pc, #24]	@ (8000c04 <LL_DMA_EnableIT_TE+0x3c>)
 8000bec:	5ccb      	ldrb	r3, [r1, r3]
 8000bee:	0019      	movs	r1, r3
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	18cb      	adds	r3, r1, r3
 8000bf4:	2108      	movs	r1, #8
 8000bf6:	430a      	orrs	r2, r1
 8000bf8:	601a      	str	r2, [r3, #0]
}
 8000bfa:	46c0      	nop			@ (mov r8, r8)
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	b004      	add	sp, #16
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	46c0      	nop			@ (mov r8, r8)
 8000c04:	080084e0 	.word	0x080084e0

08000c08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c08:	b590      	push	{r4, r7, lr}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	int8_t modbus_status = HAL_OK;
 8000c0e:	1dfb      	adds	r3, r7, #7
 8000c10:	2200      	movs	r2, #0
 8000c12:	701a      	strb	r2, [r3, #0]
	int8_t i2c_status = HAL_OK;
 8000c14:	1d7b      	adds	r3, r7, #5
 8000c16:	2200      	movs	r2, #0
 8000c18:	701a      	strb	r2, [r3, #0]
	uint8_t modbus_tx_len = 0;
 8000c1a:	1d3b      	adds	r3, r7, #4
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c20:	f002 f9ff 	bl	8003022 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c24:	f000 f98c 	bl	8000f40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c28:	f000 fd60 	bl	80016ec <MX_GPIO_Init>
  MX_DMA_Init();
 8000c2c:	f000 fd32 	bl	8001694 <MX_DMA_Init>
  MX_ADC1_Init();
 8000c30:	f000 f9c4 	bl	8000fbc <MX_ADC1_Init>
  MX_I2C1_Init();
 8000c34:	f000 fb90 	bl	8001358 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000c38:	f000 fbce 	bl	80013d8 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000c3c:	f000 fc0a 	bl	8001454 <MX_TIM1_Init>
  MX_TIM14_Init();
 8000c40:	f000 fcb2 	bl	80015a8 <MX_TIM14_Init>
  MX_USART1_UART_Init();
 8000c44:	f000 fcd6 	bl	80015f4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // Initialize the pin mapping table
  pin_map[0] = Actuator_A_EN_Pin;
 8000c48:	4bb2      	ldr	r3, [pc, #712]	@ (8000f14 <main+0x30c>)
 8000c4a:	2240      	movs	r2, #64	@ 0x40
 8000c4c:	801a      	strh	r2, [r3, #0]
  pin_map[1] = Actuator_B_EN_Pin;
 8000c4e:	4bb1      	ldr	r3, [pc, #708]	@ (8000f14 <main+0x30c>)
 8000c50:	2280      	movs	r2, #128	@ 0x80
 8000c52:	805a      	strh	r2, [r3, #2]
  pin_map[2] = Actuator_C_EN_Pin;
 8000c54:	4baf      	ldr	r3, [pc, #700]	@ (8000f14 <main+0x30c>)
 8000c56:	2201      	movs	r2, #1
 8000c58:	809a      	strh	r2, [r3, #4]

  port_map[0] = Actuator_A_EN_GPIO_Port;
 8000c5a:	4baf      	ldr	r3, [pc, #700]	@ (8000f18 <main+0x310>)
 8000c5c:	4aaf      	ldr	r2, [pc, #700]	@ (8000f1c <main+0x314>)
 8000c5e:	601a      	str	r2, [r3, #0]
  port_map[1] = Actuator_B_EN_GPIO_Port;
 8000c60:	4bad      	ldr	r3, [pc, #692]	@ (8000f18 <main+0x310>)
 8000c62:	4aae      	ldr	r2, [pc, #696]	@ (8000f1c <main+0x314>)
 8000c64:	605a      	str	r2, [r3, #4]
  port_map[2] = Actuator_C_EN_GPIO_Port;
 8000c66:	4bac      	ldr	r3, [pc, #688]	@ (8000f18 <main+0x310>)
 8000c68:	4aad      	ldr	r2, [pc, #692]	@ (8000f20 <main+0x318>)
 8000c6a:	609a      	str	r2, [r3, #8]

  // Initialize the PID constraints to defaults
  pid_constraints.Kp = 1;              // Proportional gain constant
 8000c6c:	4bad      	ldr	r3, [pc, #692]	@ (8000f24 <main+0x31c>)
 8000c6e:	22fe      	movs	r2, #254	@ 0xfe
 8000c70:	0592      	lsls	r2, r2, #22
 8000c72:	601a      	str	r2, [r3, #0]
  pid_constraints.Ki = 0.1;            // Integral gain constant
 8000c74:	4bab      	ldr	r3, [pc, #684]	@ (8000f24 <main+0x31c>)
 8000c76:	4aac      	ldr	r2, [pc, #688]	@ (8000f28 <main+0x320>)
 8000c78:	605a      	str	r2, [r3, #4]
  pid_constraints.Kd = 5;              // Derivative gain constant
 8000c7a:	4baa      	ldr	r3, [pc, #680]	@ (8000f24 <main+0x31c>)
 8000c7c:	4aab      	ldr	r2, [pc, #684]	@ (8000f2c <main+0x324>)
 8000c7e:	609a      	str	r2, [r3, #8]
  pid_constraints.Kaw = 0.1;           // Anti-windup gain constant
 8000c80:	4ba8      	ldr	r3, [pc, #672]	@ (8000f24 <main+0x31c>)
 8000c82:	4aa9      	ldr	r2, [pc, #676]	@ (8000f28 <main+0x320>)
 8000c84:	60da      	str	r2, [r3, #12]
  pid_constraints.T_C = 1;             // Time constant for derivative filtering
 8000c86:	4ba7      	ldr	r3, [pc, #668]	@ (8000f24 <main+0x31c>)
 8000c88:	22fe      	movs	r2, #254	@ 0xfe
 8000c8a:	0592      	lsls	r2, r2, #22
 8000c8c:	611a      	str	r2, [r3, #16]
  pid_constraints.T = 100;             // Time step
 8000c8e:	4ba5      	ldr	r3, [pc, #660]	@ (8000f24 <main+0x31c>)
 8000c90:	4aa7      	ldr	r2, [pc, #668]	@ (8000f30 <main+0x328>)
 8000c92:	615a      	str	r2, [r3, #20]
  pid_constraints.max = 100;           // Max command
 8000c94:	4ba3      	ldr	r3, [pc, #652]	@ (8000f24 <main+0x31c>)
 8000c96:	4aa6      	ldr	r2, [pc, #664]	@ (8000f30 <main+0x328>)
 8000c98:	619a      	str	r2, [r3, #24]
  pid_constraints.min = 0;             // Min command
 8000c9a:	4ba2      	ldr	r3, [pc, #648]	@ (8000f24 <main+0x31c>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	61da      	str	r2, [r3, #28]
  pid_constraints.max_rate = 40;       // Max rate of change of the command
 8000ca0:	4ba0      	ldr	r3, [pc, #640]	@ (8000f24 <main+0x31c>)
 8000ca2:	4aa4      	ldr	r2, [pc, #656]	@ (8000f34 <main+0x32c>)
 8000ca4:	621a      	str	r2, [r3, #32]
  pid_constraints.integral = 0;        // Integral term
 8000ca6:	4b9f      	ldr	r3, [pc, #636]	@ (8000f24 <main+0x31c>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	625a      	str	r2, [r3, #36]	@ 0x24
  pid_constraints.err_prev = 0;        // Previous error
 8000cac:	4b9d      	ldr	r3, [pc, #628]	@ (8000f24 <main+0x31c>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	629a      	str	r2, [r3, #40]	@ 0x28
  pid_constraints.deriv_prev = 0;      // Previous derivative
 8000cb2:	4b9c      	ldr	r3, [pc, #624]	@ (8000f24 <main+0x31c>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	62da      	str	r2, [r3, #44]	@ 0x2c
  pid_constraints.command_sat_prev = 0;// Previous saturated command
 8000cb8:	4b9a      	ldr	r3, [pc, #616]	@ (8000f24 <main+0x31c>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	631a      	str	r2, [r3, #48]	@ 0x30
  pid_constraints.command_prev = 0;    // Previous command
 8000cbe:	4b99      	ldr	r3, [pc, #612]	@ (8000f24 <main+0x31c>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	635a      	str	r2, [r3, #52]	@ 0x34

  if(modbus_set_rx() != HAL_OK)
 8000cc4:	f001 fa0c 	bl	80020e0 <modbus_set_rx>
 8000cc8:	1e03      	subs	r3, r0, #0
 8000cca:	d001      	beq.n	8000cd0 <main+0xc8>
  {
	  Error_Handler();
 8000ccc:	f000 fdc6 	bl	800185c <Error_Handler>
  }

  /* Perform ADC activation procedure to make it ready to convert. */
  ADC_Activate();
 8000cd0:	f001 fc98 	bl	8002604 <ADC_Activate>
  if ((LL_ADC_IsEnabled(ADC1) == 1)               &&
 8000cd4:	4b98      	ldr	r3, [pc, #608]	@ (8000f38 <main+0x330>)
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	f7ff fcc8 	bl	800066c <LL_ADC_IsEnabled>
 8000cdc:	0003      	movs	r3, r0
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d10f      	bne.n	8000d02 <main+0xfa>
	  (LL_ADC_IsDisableOngoing(ADC1) == 0)        &&
 8000ce2:	4b95      	ldr	r3, [pc, #596]	@ (8000f38 <main+0x330>)
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f7ff fcd2 	bl	800068e <LL_ADC_IsDisableOngoing>
 8000cea:	1e03      	subs	r3, r0, #0
  if ((LL_ADC_IsEnabled(ADC1) == 1)               &&
 8000cec:	d109      	bne.n	8000d02 <main+0xfa>
	  (LL_ADC_REG_IsConversionOngoing(ADC1) == 0))
 8000cee:	4b92      	ldr	r3, [pc, #584]	@ (8000f38 <main+0x330>)
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	f7ff fcef 	bl	80006d4 <LL_ADC_REG_IsConversionOngoing>
 8000cf6:	1e03      	subs	r3, r0, #0
	  (LL_ADC_IsDisableOngoing(ADC1) == 0)        &&
 8000cf8:	d103      	bne.n	8000d02 <main+0xfa>
  {
	  LL_ADC_REG_StartConversion(ADC1);
 8000cfa:	4b8f      	ldr	r3, [pc, #572]	@ (8000f38 <main+0x330>)
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	f7ff fcd7 	bl	80006b0 <LL_ADC_REG_StartConversion>
   */
//  uint8_t target_actuator = 0;

  while (1)
  {
	  if(modbus_rx())
 8000d02:	f000 fe81 	bl	8001a08 <modbus_rx>
 8000d06:	1e03      	subs	r3, r0, #0
 8000d08:	d100      	bne.n	8000d0c <main+0x104>
 8000d0a:	e091      	b.n	8000e30 <main+0x228>
	  {
		  if(get_rx_buffer(0) == holding_register_database[0]) // Check Slave ID
 8000d0c:	2000      	movs	r0, #0
 8000d0e:	f001 faf3 	bl	80022f8 <get_rx_buffer>
 8000d12:	0003      	movs	r3, r0
 8000d14:	001a      	movs	r2, r3
 8000d16:	4b89      	ldr	r3, [pc, #548]	@ (8000f3c <main+0x334>)
 8000d18:	881b      	ldrh	r3, [r3, #0]
 8000d1a:	429a      	cmp	r2, r3
 8000d1c:	d133      	bne.n	8000d86 <main+0x17e>
		  {
			  switch(get_rx_buffer(1))
 8000d1e:	2001      	movs	r0, #1
 8000d20:	f001 faea 	bl	80022f8 <get_rx_buffer>
 8000d24:	0003      	movs	r3, r0
 8000d26:	2b03      	cmp	r3, #3
 8000d28:	d002      	beq.n	8000d30 <main+0x128>
 8000d2a:	2b10      	cmp	r3, #16
 8000d2c:	d008      	beq.n	8000d40 <main+0x138>
 8000d2e:	e00f      	b.n	8000d50 <main+0x148>
			  {
				  case 0x03:
				  {
					  // Return holding registers
					  modbus_status = return_holding_registers(&modbus_tx_len);
 8000d30:	1dfc      	adds	r4, r7, #7
 8000d32:	1d3b      	adds	r3, r7, #4
 8000d34:	0018      	movs	r0, r3
 8000d36:	f000 fe79 	bl	8001a2c <return_holding_registers>
 8000d3a:	0003      	movs	r3, r0
 8000d3c:	7023      	strb	r3, [r4, #0]
					  break;
 8000d3e:	e00e      	b.n	8000d5e <main+0x156>
				  }
				  case 0x10:
				  {
					  // Write holding registers
					  modbus_status = edit_multiple_registers(&modbus_tx_len);
 8000d40:	1dfc      	adds	r4, r7, #7
 8000d42:	1d3b      	adds	r3, r7, #4
 8000d44:	0018      	movs	r0, r3
 8000d46:	f000 ff1d 	bl	8001b84 <edit_multiple_registers>
 8000d4a:	0003      	movs	r3, r0
 8000d4c:	7023      	strb	r3, [r4, #0]
					  break;
 8000d4e:	e006      	b.n	8000d5e <main+0x156>
				  }
				  default:
				  {
					  modbus_status = modbus_exception(MB_ILLEGAL_FUNCTION);
 8000d50:	1dfc      	adds	r4, r7, #7
 8000d52:	2004      	movs	r0, #4
 8000d54:	f001 f818 	bl	8001d88 <modbus_exception>
 8000d58:	0003      	movs	r3, r0
 8000d5a:	7023      	strb	r3, [r4, #0]
					  break;
 8000d5c:	46c0      	nop			@ (mov r8, r8)
				  }
			  }
			  if(modbus_status != 0)
 8000d5e:	1dfb      	adds	r3, r7, #7
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	b25b      	sxtb	r3, r3
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d04b      	beq.n	8000e00 <main+0x1f8>
			  {
				  holding_register_database[MB_ERRORS] |= 1U << (modbus_status + (MB_FATAL_ERROR - 1));
 8000d68:	4b74      	ldr	r3, [pc, #464]	@ (8000f3c <main+0x334>)
 8000d6a:	891a      	ldrh	r2, [r3, #8]
 8000d6c:	1dfb      	adds	r3, r7, #7
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	b25b      	sxtb	r3, r3
 8000d72:	3314      	adds	r3, #20
 8000d74:	2101      	movs	r1, #1
 8000d76:	4099      	lsls	r1, r3
 8000d78:	000b      	movs	r3, r1
 8000d7a:	b29b      	uxth	r3, r3
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	b29a      	uxth	r2, r3
 8000d80:	4b6e      	ldr	r3, [pc, #440]	@ (8000f3c <main+0x334>)
 8000d82:	811a      	strh	r2, [r3, #8]
 8000d84:	e03c      	b.n	8000e00 <main+0x1f8>
			  }
		  }
		  // Special case where you retrieve the modbus ID
		  else if((get_rx_buffer(0) == 0xFF) && // modbus_id = 0xFF = 255
 8000d86:	2000      	movs	r0, #0
 8000d88:	f001 fab6 	bl	80022f8 <get_rx_buffer>
 8000d8c:	0003      	movs	r3, r0
 8000d8e:	2bff      	cmp	r3, #255	@ 0xff
 8000d90:	d136      	bne.n	8000e00 <main+0x1f8>
			(get_rx_buffer(1) == 0x03) && // Function code = read_holding_registers
 8000d92:	2001      	movs	r0, #1
 8000d94:	f001 fab0 	bl	80022f8 <get_rx_buffer>
 8000d98:	0003      	movs	r3, r0
		  else if((get_rx_buffer(0) == 0xFF) && // modbus_id = 0xFF = 255
 8000d9a:	2b03      	cmp	r3, #3
 8000d9c:	d130      	bne.n	8000e00 <main+0x1f8>
			(((get_rx_buffer(2) << 8) | get_rx_buffer(3)) == 0x00) && // Address to read = 0
 8000d9e:	2002      	movs	r0, #2
 8000da0:	f001 faaa 	bl	80022f8 <get_rx_buffer>
 8000da4:	0003      	movs	r3, r0
 8000da6:	021c      	lsls	r4, r3, #8
 8000da8:	2003      	movs	r0, #3
 8000daa:	f001 faa5 	bl	80022f8 <get_rx_buffer>
 8000dae:	0003      	movs	r3, r0
 8000db0:	4323      	orrs	r3, r4
			(get_rx_buffer(1) == 0x03) && // Function code = read_holding_registers
 8000db2:	d125      	bne.n	8000e00 <main+0x1f8>
			(((get_rx_buffer(4) << 8) | get_rx_buffer(5)) == 1)) // # of registers to read = 1
 8000db4:	2004      	movs	r0, #4
 8000db6:	f001 fa9f 	bl	80022f8 <get_rx_buffer>
 8000dba:	0003      	movs	r3, r0
 8000dbc:	021c      	lsls	r4, r3, #8
 8000dbe:	2005      	movs	r0, #5
 8000dc0:	f001 fa9a 	bl	80022f8 <get_rx_buffer>
 8000dc4:	0003      	movs	r3, r0
 8000dc6:	4323      	orrs	r3, r4
			(((get_rx_buffer(2) << 8) | get_rx_buffer(3)) == 0x00) && // Address to read = 0
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d119      	bne.n	8000e00 <main+0x1f8>
		  {

			  modbus_status = return_holding_registers(&modbus_tx_len);
 8000dcc:	1dfc      	adds	r4, r7, #7
 8000dce:	1d3b      	adds	r3, r7, #4
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	f000 fe2b 	bl	8001a2c <return_holding_registers>
 8000dd6:	0003      	movs	r3, r0
 8000dd8:	7023      	strb	r3, [r4, #0]
			  if(modbus_status != 0)
 8000dda:	1dfb      	adds	r3, r7, #7
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	b25b      	sxtb	r3, r3
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d00d      	beq.n	8000e00 <main+0x1f8>
			  {
				  holding_register_database[MB_ERRORS] |= 1U << ((modbus_status - 1) + MB_FATAL_ERROR);
 8000de4:	4b55      	ldr	r3, [pc, #340]	@ (8000f3c <main+0x334>)
 8000de6:	891a      	ldrh	r2, [r3, #8]
 8000de8:	1dfb      	adds	r3, r7, #7
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	b25b      	sxtb	r3, r3
 8000dee:	3314      	adds	r3, #20
 8000df0:	2101      	movs	r1, #1
 8000df2:	4099      	lsls	r1, r3
 8000df4:	000b      	movs	r3, r1
 8000df6:	b29b      	uxth	r3, r3
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	b29a      	uxth	r2, r3
 8000dfc:	4b4f      	ldr	r3, [pc, #316]	@ (8000f3c <main+0x334>)
 8000dfe:	811a      	strh	r2, [r3, #8]
			  }
		  }
		  modbus_status = modbus_set_rx();
 8000e00:	1dfc      	adds	r4, r7, #7
 8000e02:	f001 f96d 	bl	80020e0 <modbus_set_rx>
 8000e06:	0003      	movs	r3, r0
 8000e08:	7023      	strb	r3, [r4, #0]
		  if(modbus_status != 0)
 8000e0a:	1dfb      	adds	r3, r7, #7
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	b25b      	sxtb	r3, r3
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d00d      	beq.n	8000e30 <main+0x228>
		  {
			  holding_register_database[MB_ERRORS] |= 1U << ((modbus_status - 1) + MB_FATAL_ERROR);
 8000e14:	4b49      	ldr	r3, [pc, #292]	@ (8000f3c <main+0x334>)
 8000e16:	891a      	ldrh	r2, [r3, #8]
 8000e18:	1dfb      	adds	r3, r7, #7
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	b25b      	sxtb	r3, r3
 8000e1e:	3314      	adds	r3, #20
 8000e20:	2101      	movs	r1, #1
 8000e22:	4099      	lsls	r1, r3
 8000e24:	000b      	movs	r3, r1
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	b29a      	uxth	r2, r3
 8000e2c:	4b43      	ldr	r3, [pc, #268]	@ (8000f3c <main+0x334>)
 8000e2e:	811a      	strh	r2, [r3, #8]
		  }
	  }
	  modbus_status = monitor_modbus();
 8000e30:	1dfc      	adds	r4, r7, #7
 8000e32:	f001 f977 	bl	8002124 <monitor_modbus>
 8000e36:	0003      	movs	r3, r0
 8000e38:	7023      	strb	r3, [r4, #0]
	  if(modbus_status != HAL_OK && modbus_status != HAL_BUSY)
 8000e3a:	1dfb      	adds	r3, r7, #7
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	b25b      	sxtb	r3, r3
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d061      	beq.n	8000f08 <main+0x300>
 8000e44:	1dfb      	adds	r3, r7, #7
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	b25b      	sxtb	r3, r3
 8000e4a:	2b02      	cmp	r3, #2
 8000e4c:	d05c      	beq.n	8000f08 <main+0x300>
	  {
		  switch(modbus_status)
 8000e4e:	1dfb      	adds	r3, r7, #7
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	b25b      	sxtb	r3, r3
 8000e54:	2b15      	cmp	r3, #21
 8000e56:	d051      	beq.n	8000efc <main+0x2f4>
 8000e58:	dd00      	ble.n	8000e5c <main+0x254>
 8000e5a:	e752      	b.n	8000d02 <main+0xfa>
 8000e5c:	2b14      	cmp	r3, #20
 8000e5e:	d02f      	beq.n	8000ec0 <main+0x2b8>
 8000e60:	dd00      	ble.n	8000e64 <main+0x25c>
 8000e62:	e74e      	b.n	8000d02 <main+0xfa>
 8000e64:	2b12      	cmp	r3, #18
 8000e66:	d151      	bne.n	8000f0c <main+0x304>
		  {
			  case MB_TX_TIMEOUT:
			  {
				  for(uint8_t i = 0; i < holding_register_database[MB_TRANSMIT_RETRIES]; i++)
 8000e68:	1dbb      	adds	r3, r7, #6
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	701a      	strb	r2, [r3, #0]
 8000e6e:	e01f      	b.n	8000eb0 <main+0x2a8>
				  {
					  modbus_status = modbus_send(modbus_tx_len);
 8000e70:	1d3b      	adds	r3, r7, #4
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	1dfc      	adds	r4, r7, #7
 8000e76:	0018      	movs	r0, r3
 8000e78:	f001 f86e 	bl	8001f58 <modbus_send>
 8000e7c:	0003      	movs	r3, r0
 8000e7e:	7023      	strb	r3, [r4, #0]
					  if(modbus_status != HAL_OK)
 8000e80:	1dfb      	adds	r3, r7, #7
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	b25b      	sxtb	r3, r3
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d00d      	beq.n	8000ea6 <main+0x29e>
					  {
						  holding_register_database[MB_ERRORS] |= 1U << ((modbus_status - 1) + MB_FATAL_ERROR);
 8000e8a:	4b2c      	ldr	r3, [pc, #176]	@ (8000f3c <main+0x334>)
 8000e8c:	891a      	ldrh	r2, [r3, #8]
 8000e8e:	1dfb      	adds	r3, r7, #7
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	b25b      	sxtb	r3, r3
 8000e94:	3314      	adds	r3, #20
 8000e96:	2101      	movs	r1, #1
 8000e98:	4099      	lsls	r1, r3
 8000e9a:	000b      	movs	r3, r1
 8000e9c:	b29b      	uxth	r3, r3
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	b29a      	uxth	r2, r3
 8000ea2:	4b26      	ldr	r3, [pc, #152]	@ (8000f3c <main+0x334>)
 8000ea4:	811a      	strh	r2, [r3, #8]
				  for(uint8_t i = 0; i < holding_register_database[MB_TRANSMIT_RETRIES]; i++)
 8000ea6:	1dbb      	adds	r3, r7, #6
 8000ea8:	781a      	ldrb	r2, [r3, #0]
 8000eaa:	1dbb      	adds	r3, r7, #6
 8000eac:	3201      	adds	r2, #1
 8000eae:	701a      	strb	r2, [r3, #0]
 8000eb0:	1dbb      	adds	r3, r7, #6
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	b29a      	uxth	r2, r3
 8000eb6:	4b21      	ldr	r3, [pc, #132]	@ (8000f3c <main+0x334>)
 8000eb8:	88db      	ldrh	r3, [r3, #6]
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	d3d8      	bcc.n	8000e70 <main+0x268>
					  }
				  }
				  break;
 8000ebe:	e028      	b.n	8000f12 <main+0x30a>
				  // Error only relates to Modbus Master Nodes
				  break;
			  }
			  case MB_UART_ERROR:
			  {
				  modbus_status = modbus_set_rx();
 8000ec0:	1dfc      	adds	r4, r7, #7
 8000ec2:	f001 f90d 	bl	80020e0 <modbus_set_rx>
 8000ec6:	0003      	movs	r3, r0
 8000ec8:	7023      	strb	r3, [r4, #0]
				  if(modbus_status != 0)
 8000eca:	1dfb      	adds	r3, r7, #7
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	b25b      	sxtb	r3, r3
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d01d      	beq.n	8000f10 <main+0x308>
				  {
					  holding_register_database[MB_ERRORS] |= 1U << ((modbus_status - 1) + MB_FATAL_ERROR);
 8000ed4:	4b19      	ldr	r3, [pc, #100]	@ (8000f3c <main+0x334>)
 8000ed6:	891a      	ldrh	r2, [r3, #8]
 8000ed8:	1dfb      	adds	r3, r7, #7
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	b25b      	sxtb	r3, r3
 8000ede:	3314      	adds	r3, #20
 8000ee0:	2101      	movs	r1, #1
 8000ee2:	4099      	lsls	r1, r3
 8000ee4:	000b      	movs	r3, r1
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	b29a      	uxth	r2, r3
 8000eec:	4b13      	ldr	r3, [pc, #76]	@ (8000f3c <main+0x334>)
 8000eee:	811a      	strh	r2, [r3, #8]
				  }
				  break;
 8000ef0:	e00e      	b.n	8000f10 <main+0x308>
			  }
			  case MB_FATAL_ERROR:
			  {
				  while(modbus_status != HAL_OK)
				  {
					  modbus_status = modbus_reset();
 8000ef2:	1dfc      	adds	r4, r7, #7
 8000ef4:	f001 f886 	bl	8002004 <modbus_reset>
 8000ef8:	0003      	movs	r3, r0
 8000efa:	7023      	strb	r3, [r4, #0]
				  while(modbus_status != HAL_OK)
 8000efc:	1dfb      	adds	r3, r7, #7
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	b25b      	sxtb	r3, r3
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d1f5      	bne.n	8000ef2 <main+0x2ea>
				  }
				  break;
 8000f06:	e004      	b.n	8000f12 <main+0x30a>
			  }
			  default:
 8000f08:	46c0      	nop			@ (mov r8, r8)
 8000f0a:	e6fa      	b.n	8000d02 <main+0xfa>
				  break;
 8000f0c:	46c0      	nop			@ (mov r8, r8)
 8000f0e:	e6f8      	b.n	8000d02 <main+0xfa>
				  break;
 8000f10:	46c0      	nop			@ (mov r8, r8)
	  if(modbus_rx())
 8000f12:	e6f6      	b.n	8000d02 <main+0xfa>
 8000f14:	20000454 	.word	0x20000454
 8000f18:	2000045c 	.word	0x2000045c
 8000f1c:	50000800 	.word	0x50000800
 8000f20:	50000400 	.word	0x50000400
 8000f24:	2000041c 	.word	0x2000041c
 8000f28:	3dcccccd 	.word	0x3dcccccd
 8000f2c:	40a00000 	.word	0x40a00000
 8000f30:	42c80000 	.word	0x42c80000
 8000f34:	42200000 	.word	0x42200000
 8000f38:	40012400 	.word	0x40012400
 8000f3c:	20000000 	.word	0x20000000

08000f40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f40:	b590      	push	{r4, r7, lr}
 8000f42:	b08f      	sub	sp, #60	@ 0x3c
 8000f44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f46:	2418      	movs	r4, #24
 8000f48:	193b      	adds	r3, r7, r4
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	2320      	movs	r3, #32
 8000f4e:	001a      	movs	r2, r3
 8000f50:	2100      	movs	r1, #0
 8000f52:	f007 fa83 	bl	800845c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f56:	1d3b      	adds	r3, r7, #4
 8000f58:	0018      	movs	r0, r3
 8000f5a:	2314      	movs	r3, #20
 8000f5c:	001a      	movs	r2, r3
 8000f5e:	2100      	movs	r1, #0
 8000f60:	f007 fa7c 	bl	800845c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f64:	193b      	adds	r3, r7, r4
 8000f66:	2201      	movs	r2, #1
 8000f68:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f6a:	193b      	adds	r3, r7, r4
 8000f6c:	2280      	movs	r2, #128	@ 0x80
 8000f6e:	0252      	lsls	r2, r2, #9
 8000f70:	605a      	str	r2, [r3, #4]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f72:	193b      	adds	r3, r7, r4
 8000f74:	0018      	movs	r0, r3
 8000f76:	f003 ffc5 	bl	8004f04 <HAL_RCC_OscConfig>
 8000f7a:	1e03      	subs	r3, r0, #0
 8000f7c:	d001      	beq.n	8000f82 <SystemClock_Config+0x42>
  {
    Error_Handler();
 8000f7e:	f000 fc6d 	bl	800185c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f82:	1d3b      	adds	r3, r7, #4
 8000f84:	2207      	movs	r2, #7
 8000f86:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000f88:	1d3b      	adds	r3, r7, #4
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f8e:	1d3b      	adds	r3, r7, #4
 8000f90:	2200      	movs	r2, #0
 8000f92:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000f94:	1d3b      	adds	r3, r7, #4
 8000f96:	2200      	movs	r2, #0
 8000f98:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000f9a:	1d3b      	adds	r3, r7, #4
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fa0:	1d3b      	adds	r3, r7, #4
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	0018      	movs	r0, r3
 8000fa6:	f004 f9d3 	bl	8005350 <HAL_RCC_ClockConfig>
 8000faa:	1e03      	subs	r3, r0, #0
 8000fac:	d001      	beq.n	8000fb2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000fae:	f000 fc55 	bl	800185c <Error_Handler>
  }
}
 8000fb2:	46c0      	nop			@ (mov r8, r8)
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	b00f      	add	sp, #60	@ 0x3c
 8000fb8:	bd90      	pop	{r4, r7, pc}
	...

08000fbc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fbc:	b590      	push	{r4, r7, lr}
 8000fbe:	b09d      	sub	sp, #116	@ 0x74
 8000fc0:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000fc2:	2350      	movs	r3, #80	@ 0x50
 8000fc4:	18fb      	adds	r3, r7, r3
 8000fc6:	0018      	movs	r0, r3
 8000fc8:	2310      	movs	r3, #16
 8000fca:	001a      	movs	r2, r3
 8000fcc:	2100      	movs	r1, #0
 8000fce:	f007 fa45 	bl	800845c <memset>
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000fd2:	2338      	movs	r3, #56	@ 0x38
 8000fd4:	18fb      	adds	r3, r7, r3
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	2318      	movs	r3, #24
 8000fda:	001a      	movs	r2, r3
 8000fdc:	2100      	movs	r1, #0
 8000fde:	f007 fa3d 	bl	800845c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe2:	2320      	movs	r3, #32
 8000fe4:	18fb      	adds	r3, r7, r3
 8000fe6:	0018      	movs	r0, r3
 8000fe8:	2318      	movs	r3, #24
 8000fea:	001a      	movs	r2, r3
 8000fec:	2100      	movs	r1, #0
 8000fee:	f007 fa35 	bl	800845c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ff2:	003b      	movs	r3, r7
 8000ff4:	0018      	movs	r0, r3
 8000ff6:	2320      	movs	r3, #32
 8000ff8:	001a      	movs	r2, r3
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	f007 fa2e 	bl	800845c <memset>

  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001000:	003b      	movs	r3, r7
 8001002:	2220      	movs	r2, #32
 8001004:	601a      	str	r2, [r3, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8001006:	003b      	movs	r3, r7
 8001008:	2200      	movs	r2, #0
 800100a:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800100c:	003b      	movs	r3, r7
 800100e:	0018      	movs	r0, r3
 8001010:	f004 fb44 	bl	800569c <HAL_RCCEx_PeriphCLKConfig>
 8001014:	1e03      	subs	r3, r0, #0
 8001016:	d001      	beq.n	800101c <MX_ADC1_Init+0x60>
  {
    Error_Handler();
 8001018:	f000 fc20 	bl	800185c <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC);
 800101c:	2380      	movs	r3, #128	@ 0x80
 800101e:	035b      	lsls	r3, r3, #13
 8001020:	0018      	movs	r0, r3
 8001022:	f7ff fbb5 	bl	8000790 <LL_APB1_GRP2_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8001026:	2001      	movs	r0, #1
 8001028:	f7ff fbc8 	bl	80007bc <LL_IOP_GRP1_EnableClock>
  PA5   ------> ADC1_IN5
  PA6   ------> ADC1_IN6
  PA7   ------> ADC1_IN7
  PA8   ------> ADC1_IN8
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 800102c:	2420      	movs	r4, #32
 800102e:	193b      	adds	r3, r7, r4
 8001030:	2201      	movs	r2, #1
 8001032:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001034:	193b      	adds	r3, r7, r4
 8001036:	2203      	movs	r2, #3
 8001038:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800103a:	193b      	adds	r3, r7, r4
 800103c:	2200      	movs	r2, #0
 800103e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001040:	193a      	adds	r2, r7, r4
 8001042:	23a0      	movs	r3, #160	@ 0xa0
 8001044:	05db      	lsls	r3, r3, #23
 8001046:	0011      	movs	r1, r2
 8001048:	0018      	movs	r0, r3
 800104a:	f007 f9ac 	bl	80083a6 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 800104e:	193b      	adds	r3, r7, r4
 8001050:	2202      	movs	r2, #2
 8001052:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001054:	193b      	adds	r3, r7, r4
 8001056:	2203      	movs	r2, #3
 8001058:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800105a:	193b      	adds	r3, r7, r4
 800105c:	2200      	movs	r2, #0
 800105e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001060:	193a      	adds	r2, r7, r4
 8001062:	23a0      	movs	r3, #160	@ 0xa0
 8001064:	05db      	lsls	r3, r3, #23
 8001066:	0011      	movs	r1, r2
 8001068:	0018      	movs	r0, r3
 800106a:	f007 f99c 	bl	80083a6 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 800106e:	193b      	adds	r3, r7, r4
 8001070:	2204      	movs	r2, #4
 8001072:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001074:	193b      	adds	r3, r7, r4
 8001076:	2203      	movs	r2, #3
 8001078:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800107a:	193b      	adds	r3, r7, r4
 800107c:	2200      	movs	r2, #0
 800107e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001080:	193a      	adds	r2, r7, r4
 8001082:	23a0      	movs	r3, #160	@ 0xa0
 8001084:	05db      	lsls	r3, r3, #23
 8001086:	0011      	movs	r1, r2
 8001088:	0018      	movs	r0, r3
 800108a:	f007 f98c 	bl	80083a6 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 800108e:	193b      	adds	r3, r7, r4
 8001090:	2208      	movs	r2, #8
 8001092:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001094:	193b      	adds	r3, r7, r4
 8001096:	2203      	movs	r2, #3
 8001098:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800109a:	193b      	adds	r3, r7, r4
 800109c:	2200      	movs	r2, #0
 800109e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a0:	193a      	adds	r2, r7, r4
 80010a2:	23a0      	movs	r3, #160	@ 0xa0
 80010a4:	05db      	lsls	r3, r3, #23
 80010a6:	0011      	movs	r1, r2
 80010a8:	0018      	movs	r0, r3
 80010aa:	f007 f97c 	bl	80083a6 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 80010ae:	193b      	adds	r3, r7, r4
 80010b0:	2210      	movs	r2, #16
 80010b2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80010b4:	193b      	adds	r3, r7, r4
 80010b6:	2203      	movs	r2, #3
 80010b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80010ba:	193b      	adds	r3, r7, r4
 80010bc:	2200      	movs	r2, #0
 80010be:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c0:	193a      	adds	r2, r7, r4
 80010c2:	23a0      	movs	r3, #160	@ 0xa0
 80010c4:	05db      	lsls	r3, r3, #23
 80010c6:	0011      	movs	r1, r2
 80010c8:	0018      	movs	r0, r3
 80010ca:	f007 f96c 	bl	80083a6 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 80010ce:	193b      	adds	r3, r7, r4
 80010d0:	2220      	movs	r2, #32
 80010d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80010d4:	193b      	adds	r3, r7, r4
 80010d6:	2203      	movs	r2, #3
 80010d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80010da:	193b      	adds	r3, r7, r4
 80010dc:	2200      	movs	r2, #0
 80010de:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e0:	193a      	adds	r2, r7, r4
 80010e2:	23a0      	movs	r3, #160	@ 0xa0
 80010e4:	05db      	lsls	r3, r3, #23
 80010e6:	0011      	movs	r1, r2
 80010e8:	0018      	movs	r0, r3
 80010ea:	f007 f95c 	bl	80083a6 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 80010ee:	193b      	adds	r3, r7, r4
 80010f0:	2240      	movs	r2, #64	@ 0x40
 80010f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80010f4:	193b      	adds	r3, r7, r4
 80010f6:	2203      	movs	r2, #3
 80010f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80010fa:	193b      	adds	r3, r7, r4
 80010fc:	2200      	movs	r2, #0
 80010fe:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001100:	193a      	adds	r2, r7, r4
 8001102:	23a0      	movs	r3, #160	@ 0xa0
 8001104:	05db      	lsls	r3, r3, #23
 8001106:	0011      	movs	r1, r2
 8001108:	0018      	movs	r0, r3
 800110a:	f007 f94c 	bl	80083a6 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 800110e:	193b      	adds	r3, r7, r4
 8001110:	2280      	movs	r2, #128	@ 0x80
 8001112:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001114:	193b      	adds	r3, r7, r4
 8001116:	2203      	movs	r2, #3
 8001118:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800111a:	193b      	adds	r3, r7, r4
 800111c:	2200      	movs	r2, #0
 800111e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001120:	193a      	adds	r2, r7, r4
 8001122:	23a0      	movs	r3, #160	@ 0xa0
 8001124:	05db      	lsls	r3, r3, #23
 8001126:	0011      	movs	r1, r2
 8001128:	0018      	movs	r0, r3
 800112a:	f007 f93c 	bl	80083a6 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 800112e:	0021      	movs	r1, r4
 8001130:	187b      	adds	r3, r7, r1
 8001132:	2280      	movs	r2, #128	@ 0x80
 8001134:	0052      	lsls	r2, r2, #1
 8001136:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001138:	187b      	adds	r3, r7, r1
 800113a:	2203      	movs	r2, #3
 800113c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800113e:	187b      	adds	r3, r7, r1
 8001140:	2200      	movs	r2, #0
 8001142:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001144:	187a      	adds	r2, r7, r1
 8001146:	23a0      	movs	r3, #160	@ 0xa0
 8001148:	05db      	lsls	r3, r3, #23
 800114a:	0011      	movs	r1, r2
 800114c:	0018      	movs	r0, r3
 800114e:	f007 f92a 	bl	80083a6 <LL_GPIO_Init>

  /* ADC1 DMA Init */

  /* ADC1 Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_1, LL_DMAMUX_REQ_ADC1);
 8001152:	4b7b      	ldr	r3, [pc, #492]	@ (8001340 <MX_ADC1_Init+0x384>)
 8001154:	2205      	movs	r2, #5
 8001156:	2101      	movs	r1, #1
 8001158:	0018      	movs	r0, r3
 800115a:	f7ff fcd7 	bl	8000b0c <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 800115e:	4b78      	ldr	r3, [pc, #480]	@ (8001340 <MX_ADC1_Init+0x384>)
 8001160:	2200      	movs	r2, #0
 8001162:	2101      	movs	r1, #1
 8001164:	0018      	movs	r0, r3
 8001166:	f7ff fb73 	bl	8000850 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_LOW);
 800116a:	4b75      	ldr	r3, [pc, #468]	@ (8001340 <MX_ADC1_Init+0x384>)
 800116c:	2200      	movs	r2, #0
 800116e:	2101      	movs	r1, #1
 8001170:	0018      	movs	r0, r3
 8001172:	f7ff fc4b 	bl	8000a0c <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_CIRCULAR);
 8001176:	4b72      	ldr	r3, [pc, #456]	@ (8001340 <MX_ADC1_Init+0x384>)
 8001178:	2220      	movs	r2, #32
 800117a:	2101      	movs	r1, #1
 800117c:	0018      	movs	r0, r3
 800117e:	f7ff fb8d 	bl	800089c <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 8001182:	4b6f      	ldr	r3, [pc, #444]	@ (8001340 <MX_ADC1_Init+0x384>)
 8001184:	2200      	movs	r2, #0
 8001186:	2101      	movs	r1, #1
 8001188:	0018      	movs	r0, r3
 800118a:	f7ff fbab 	bl	80008e4 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 800118e:	4b6c      	ldr	r3, [pc, #432]	@ (8001340 <MX_ADC1_Init+0x384>)
 8001190:	2280      	movs	r2, #128	@ 0x80
 8001192:	2101      	movs	r1, #1
 8001194:	0018      	movs	r0, r3
 8001196:	f7ff fbc9 	bl	800092c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_HALFWORD);
 800119a:	2380      	movs	r3, #128	@ 0x80
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	4868      	ldr	r0, [pc, #416]	@ (8001340 <MX_ADC1_Init+0x384>)
 80011a0:	001a      	movs	r2, r3
 80011a2:	2101      	movs	r1, #1
 80011a4:	f7ff fbe6 	bl	8000974 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_HALFWORD);
 80011a8:	2380      	movs	r3, #128	@ 0x80
 80011aa:	00db      	lsls	r3, r3, #3
 80011ac:	4864      	ldr	r0, [pc, #400]	@ (8001340 <MX_ADC1_Init+0x384>)
 80011ae:	001a      	movs	r2, r3
 80011b0:	2101      	movs	r1, #1
 80011b2:	f7ff fc05 	bl	80009c0 <LL_DMA_SetMemorySize>

  /* ADC1 interrupt Init */
  NVIC_SetPriority(ADC1_IRQn, 0);
 80011b6:	2100      	movs	r1, #0
 80011b8:	200c      	movs	r0, #12
 80011ba:	f7ff f94d 	bl	8000458 <__NVIC_SetPriority>
  NVIC_EnableIRQ(ADC1_IRQn);
 80011be:	200c      	movs	r0, #12
 80011c0:	f7ff f930 	bl	8000424 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN ADC1_Init 1 */

  /* Set DMA transfer addresses of source and destination */
  LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_1, LL_ADC_DMA_GetRegAddr(ADC1, LL_ADC_DMA_REG_REGULAR_DATA),
 80011c4:	4b5f      	ldr	r3, [pc, #380]	@ (8001344 <MX_ADC1_Init+0x388>)
 80011c6:	2100      	movs	r1, #0
 80011c8:	0018      	movs	r0, r3
 80011ca:	f7ff f9b3 	bl	8000534 <LL_ADC_DMA_GetRegAddr>
 80011ce:	0001      	movs	r1, r0
 80011d0:	4b5d      	ldr	r3, [pc, #372]	@ (8001348 <MX_ADC1_Init+0x38c>)
 80011d2:	485b      	ldr	r0, [pc, #364]	@ (8001340 <MX_ADC1_Init+0x384>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	9200      	str	r2, [sp, #0]
 80011d8:	000a      	movs	r2, r1
 80011da:	2101      	movs	r1, #1
 80011dc:	f7ff fc5e 	bl	8000a9c <LL_DMA_ConfigAddresses>
		  (uint32_t)&holding_register_database[ADC_0],
		  LL_DMA_DIRECTION_PERIPH_TO_MEMORY);

  /* Set DMA transfer size */
  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_1, 9);
 80011e0:	4b57      	ldr	r3, [pc, #348]	@ (8001340 <MX_ADC1_Init+0x384>)
 80011e2:	2209      	movs	r2, #9
 80011e4:	2101      	movs	r1, #1
 80011e6:	0018      	movs	r0, r3
 80011e8:	f7ff fc36 	bl	8000a58 <LL_DMA_SetDataLength>

  /* Enable DMA transfer interruption: transfer complete */
  LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_1);
 80011ec:	4b54      	ldr	r3, [pc, #336]	@ (8001340 <MX_ADC1_Init+0x384>)
 80011ee:	2101      	movs	r1, #1
 80011f0:	0018      	movs	r0, r3
 80011f2:	f7ff fca9 	bl	8000b48 <LL_DMA_EnableIT_TC>

  /* Enable DMA transfer interruption: transfer half complete */
  LL_DMA_EnableIT_HT(DMA1, LL_DMA_CHANNEL_1);
 80011f6:	4b52      	ldr	r3, [pc, #328]	@ (8001340 <MX_ADC1_Init+0x384>)
 80011f8:	2101      	movs	r1, #1
 80011fa:	0018      	movs	r0, r3
 80011fc:	f7ff fcc4 	bl	8000b88 <LL_DMA_EnableIT_HT>

  /* Enable DMA transfer interruption: transfer error */
  LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_1);
 8001200:	4b4f      	ldr	r3, [pc, #316]	@ (8001340 <MX_ADC1_Init+0x384>)
 8001202:	2101      	movs	r1, #1
 8001204:	0018      	movs	r0, r3
 8001206:	f7ff fcdf 	bl	8000bc8 <LL_DMA_EnableIT_TE>

  /* Enable the DMA transfer */
  LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_1);
 800120a:	4b4d      	ldr	r3, [pc, #308]	@ (8001340 <MX_ADC1_Init+0x384>)
 800120c:	2101      	movs	r1, #1
 800120e:	0018      	movs	r0, r3
 8001210:	f7ff fafe 	bl	8000810 <LL_DMA_EnableChannel>
   #define ADC_CHANNEL_CONF_RDY_TIMEOUT_MS ( 1U)
   #if (USE_TIMEOUT == 1)
   uint32_t Timeout ; /* Variable used for Timeout management */
   #endif /* USE_TIMEOUT */

  ADC_InitStruct.Clock = LL_ADC_CLOCK_SYNC_PCLK_DIV2;
 8001214:	2150      	movs	r1, #80	@ 0x50
 8001216:	187b      	adds	r3, r7, r1
 8001218:	2280      	movs	r2, #128	@ 0x80
 800121a:	05d2      	lsls	r2, r2, #23
 800121c:	601a      	str	r2, [r3, #0]
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_6B;
 800121e:	187b      	adds	r3, r7, r1
 8001220:	2218      	movs	r2, #24
 8001222:	605a      	str	r2, [r3, #4]
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8001224:	187b      	adds	r3, r7, r1
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 800122a:	187b      	adds	r3, r7, r1
 800122c:	2200      	movs	r2, #0
 800122e:	60da      	str	r2, [r3, #12]
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8001230:	187b      	adds	r3, r7, r1
 8001232:	4a44      	ldr	r2, [pc, #272]	@ (8001344 <MX_ADC1_Init+0x388>)
 8001234:	0019      	movs	r1, r3
 8001236:	0010      	movs	r0, r2
 8001238:	f006 ff62 	bl	8008100 <LL_ADC_Init>
  LL_ADC_REG_SetSequencerConfigurable(ADC1, LL_ADC_REG_SEQ_FIXED);
 800123c:	4b41      	ldr	r3, [pc, #260]	@ (8001344 <MX_ADC1_Init+0x388>)
 800123e:	2100      	movs	r1, #0
 8001240:	0018      	movs	r0, r3
 8001242:	f7ff f9b5 	bl	80005b0 <LL_ADC_REG_SetSequencerConfigurable>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8001246:	2138      	movs	r1, #56	@ 0x38
 8001248:	187b      	adds	r3, r7, r1
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
  ADC_REG_InitStruct.SequencerLength = 0;
 800124e:	187b      	adds	r3, r7, r1
 8001250:	2200      	movs	r2, #0
 8001252:	605a      	str	r2, [r3, #4]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8001254:	187b      	adds	r3, r7, r1
 8001256:	2200      	movs	r2, #0
 8001258:	609a      	str	r2, [r3, #8]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 800125a:	187b      	adds	r3, r7, r1
 800125c:	2280      	movs	r2, #128	@ 0x80
 800125e:	0192      	lsls	r2, r2, #6
 8001260:	60da      	str	r2, [r3, #12]
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 8001262:	187b      	adds	r3, r7, r1
 8001264:	2203      	movs	r2, #3
 8001266:	611a      	str	r2, [r3, #16]
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_OVERWRITTEN;
 8001268:	187b      	adds	r3, r7, r1
 800126a:	2280      	movs	r2, #128	@ 0x80
 800126c:	0152      	lsls	r2, r2, #5
 800126e:	615a      	str	r2, [r3, #20]
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8001270:	187b      	adds	r3, r7, r1
 8001272:	4a34      	ldr	r2, [pc, #208]	@ (8001344 <MX_ADC1_Init+0x388>)
 8001274:	0019      	movs	r1, r3
 8001276:	0010      	movs	r0, r2
 8001278:	f006 ff78 	bl	800816c <LL_ADC_REG_Init>
  LL_ADC_REG_SetSequencerScanDirection(ADC1, LL_ADC_REG_SEQ_SCAN_DIR_FORWARD);
 800127c:	4b31      	ldr	r3, [pc, #196]	@ (8001344 <MX_ADC1_Init+0x388>)
 800127e:	2100      	movs	r1, #0
 8001280:	0018      	movs	r0, r3
 8001282:	f7ff f9a9 	bl	80005d8 <LL_ADC_REG_SetSequencerScanDirection>
  LL_ADC_SetOverSamplingScope(ADC1, LL_ADC_OVS_DISABLE);
 8001286:	4b2f      	ldr	r3, [pc, #188]	@ (8001344 <MX_ADC1_Init+0x388>)
 8001288:	2100      	movs	r1, #0
 800128a:	0018      	movs	r0, r3
 800128c:	f7ff f9c7 	bl	800061e <LL_ADC_SetOverSamplingScope>
  LL_ADC_SetTriggerFrequencyMode(ADC1, LL_ADC_CLOCK_FREQ_MODE_LOW);
 8001290:	2380      	movs	r3, #128	@ 0x80
 8001292:	059b      	lsls	r3, r3, #22
 8001294:	4a2b      	ldr	r2, [pc, #172]	@ (8001344 <MX_ADC1_Init+0x388>)
 8001296:	0019      	movs	r1, r3
 8001298:	0010      	movs	r0, r2
 800129a:	f7ff f957 	bl	800054c <LL_ADC_SetTriggerFrequencyMode>
  LL_ADC_REG_SetSequencerChAdd(ADC1, LL_ADC_CHANNEL_0|LL_ADC_CHANNEL_1
 800129e:	4a2b      	ldr	r2, [pc, #172]	@ (800134c <MX_ADC1_Init+0x390>)
 80012a0:	4b28      	ldr	r3, [pc, #160]	@ (8001344 <MX_ADC1_Init+0x388>)
 80012a2:	0011      	movs	r1, r2
 80012a4:	0018      	movs	r0, r3
 80012a6:	f7ff f9a9 	bl	80005fc <LL_ADC_REG_SetSequencerChAdd>
                              |LL_ADC_CHANNEL_6|LL_ADC_CHANNEL_7
                              |LL_ADC_CHANNEL_8);

   /* Poll for ADC channel configuration ready */
   #if (USE_TIMEOUT == 1)
   Timeout = ADC_CHANNEL_CONF_RDY_TIMEOUT_MS;
 80012aa:	2301      	movs	r3, #1
 80012ac:	667b      	str	r3, [r7, #100]	@ 0x64
   #endif /* USE_TIMEOUT */
   while (LL_ADC_IsActiveFlag_CCRDY(ADC1) == 0)
 80012ae:	e00a      	b.n	80012c6 <MX_ADC1_Init+0x30a>
     {
   #if (USE_TIMEOUT == 1)
   /* Check Systick counter flag to decrement the time-out value */
   if (LL_SYSTICK_IsActiveCounterFlag())
 80012b0:	f7ff fa9a 	bl	80007e8 <LL_SYSTICK_IsActiveCounterFlag>
 80012b4:	1e03      	subs	r3, r0, #0
 80012b6:	d006      	beq.n	80012c6 <MX_ADC1_Init+0x30a>
     {
   if(Timeout-- == 0)
 80012b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80012ba:	1e5a      	subs	r2, r3, #1
 80012bc:	667a      	str	r2, [r7, #100]	@ 0x64
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d101      	bne.n	80012c6 <MX_ADC1_Init+0x30a>
         {
   Error_Handler();
 80012c2:	f000 facb 	bl	800185c <Error_Handler>
   while (LL_ADC_IsActiveFlag_CCRDY(ADC1) == 0)
 80012c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001344 <MX_ADC1_Init+0x388>)
 80012c8:	0018      	movs	r0, r3
 80012ca:	f7ff fa14 	bl	80006f6 <LL_ADC_IsActiveFlag_CCRDY>
 80012ce:	1e03      	subs	r3, r0, #0
 80012d0:	d0ee      	beq.n	80012b0 <MX_ADC1_Init+0x2f4>
         }
     }
   #endif /* USE_TIMEOUT */
     }
   /* Clear flag ADC channel configuration ready */
   LL_ADC_ClearFlag_CCRDY(ADC1);
 80012d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001344 <MX_ADC1_Init+0x388>)
 80012d4:	0018      	movs	r0, r3
 80012d6:	f7ff fa22 	bl	800071e <LL_ADC_ClearFlag_CCRDY>
  LL_ADC_SetSamplingTimeCommonChannels(ADC1, LL_ADC_SAMPLINGTIME_COMMON_1, LL_ADC_SAMPLINGTIME_160CYCLES_5);
 80012da:	4b1a      	ldr	r3, [pc, #104]	@ (8001344 <MX_ADC1_Init+0x388>)
 80012dc:	2207      	movs	r2, #7
 80012de:	2100      	movs	r1, #0
 80012e0:	0018      	movs	r0, r3
 80012e2:	f7ff f947 	bl	8000574 <LL_ADC_SetSamplingTimeCommonChannels>
  LL_ADC_DisableIT_EOC(ADC1);
 80012e6:	4b17      	ldr	r3, [pc, #92]	@ (8001344 <MX_ADC1_Init+0x388>)
 80012e8:	0018      	movs	r0, r3
 80012ea:	f7ff fa32 	bl	8000752 <LL_ADC_DisableIT_EOC>
  LL_ADC_DisableIT_EOS(ADC1);
 80012ee:	4b15      	ldr	r3, [pc, #84]	@ (8001344 <MX_ADC1_Init+0x388>)
 80012f0:	0018      	movs	r0, r3
 80012f2:	f7ff fa3d 	bl	8000770 <LL_ADC_DisableIT_EOS>

   /* Enable ADC internal voltage regulator */
   LL_ADC_EnableInternalRegulator(ADC1);
 80012f6:	4b13      	ldr	r3, [pc, #76]	@ (8001344 <MX_ADC1_Init+0x388>)
 80012f8:	0018      	movs	r0, r3
 80012fa:	f7ff f9a3 	bl	8000644 <LL_ADC_EnableInternalRegulator>
   /* Note: Variable divided by 2 to compensate partially */
   /* CPU processing cycles (depends on compilation optimization). */
   /* Note: If system core clock frequency is below 200kHz, wait time */
   /* is only a few CPU processing cycles. */
   uint32_t wait_loop_index;
   wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 80012fe:	4b14      	ldr	r3, [pc, #80]	@ (8001350 <MX_ADC1_Init+0x394>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4914      	ldr	r1, [pc, #80]	@ (8001354 <MX_ADC1_Init+0x398>)
 8001304:	0018      	movs	r0, r3
 8001306:	f7fe feff 	bl	8000108 <__udivsi3>
 800130a:	0003      	movs	r3, r0
 800130c:	001a      	movs	r2, r3
 800130e:	0013      	movs	r3, r2
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	189b      	adds	r3, r3, r2
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	210a      	movs	r1, #10
 8001318:	0018      	movs	r0, r3
 800131a:	f7fe fef5 	bl	8000108 <__udivsi3>
 800131e:	0003      	movs	r3, r0
 8001320:	663b      	str	r3, [r7, #96]	@ 0x60
   while(wait_loop_index != 0)
 8001322:	e002      	b.n	800132a <MX_ADC1_Init+0x36e>
     {
   wait_loop_index--;
 8001324:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001326:	3b01      	subs	r3, #1
 8001328:	663b      	str	r3, [r7, #96]	@ 0x60
   while(wait_loop_index != 0)
 800132a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800132c:	2b00      	cmp	r3, #0
 800132e:	d1f9      	bne.n	8001324 <MX_ADC1_Init+0x368>
     }
  /* USER CODE BEGIN ADC1_Init 2 */

   LL_ADC_EnableIT_OVR(ADC1);
 8001330:	4b04      	ldr	r3, [pc, #16]	@ (8001344 <MX_ADC1_Init+0x388>)
 8001332:	0018      	movs	r0, r3
 8001334:	f7ff f9ff 	bl	8000736 <LL_ADC_EnableIT_OVR>

  /* USER CODE END ADC1_Init 2 */

}
 8001338:	46c0      	nop			@ (mov r8, r8)
 800133a:	46bd      	mov	sp, r7
 800133c:	b01b      	add	sp, #108	@ 0x6c
 800133e:	bd90      	pop	{r4, r7, pc}
 8001340:	40020000 	.word	0x40020000
 8001344:	40012400 	.word	0x40012400
 8001348:	20000010 	.word	0x20000010
 800134c:	3c0001ff 	.word	0x3c0001ff
 8001350:	2000009c 	.word	0x2000009c
 8001354:	00030d40 	.word	0x00030d40

08001358 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800135c:	4b1b      	ldr	r3, [pc, #108]	@ (80013cc <MX_I2C1_Init+0x74>)
 800135e:	4a1c      	ldr	r2, [pc, #112]	@ (80013d0 <MX_I2C1_Init+0x78>)
 8001360:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2C;
 8001362:	4b1a      	ldr	r3, [pc, #104]	@ (80013cc <MX_I2C1_Init+0x74>)
 8001364:	4a1b      	ldr	r2, [pc, #108]	@ (80013d4 <MX_I2C1_Init+0x7c>)
 8001366:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001368:	4b18      	ldr	r3, [pc, #96]	@ (80013cc <MX_I2C1_Init+0x74>)
 800136a:	2200      	movs	r2, #0
 800136c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800136e:	4b17      	ldr	r3, [pc, #92]	@ (80013cc <MX_I2C1_Init+0x74>)
 8001370:	2201      	movs	r2, #1
 8001372:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001374:	4b15      	ldr	r3, [pc, #84]	@ (80013cc <MX_I2C1_Init+0x74>)
 8001376:	2200      	movs	r2, #0
 8001378:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800137a:	4b14      	ldr	r3, [pc, #80]	@ (80013cc <MX_I2C1_Init+0x74>)
 800137c:	2200      	movs	r2, #0
 800137e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001380:	4b12      	ldr	r3, [pc, #72]	@ (80013cc <MX_I2C1_Init+0x74>)
 8001382:	2200      	movs	r2, #0
 8001384:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001386:	4b11      	ldr	r3, [pc, #68]	@ (80013cc <MX_I2C1_Init+0x74>)
 8001388:	2200      	movs	r2, #0
 800138a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800138c:	4b0f      	ldr	r3, [pc, #60]	@ (80013cc <MX_I2C1_Init+0x74>)
 800138e:	2200      	movs	r2, #0
 8001390:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001392:	4b0e      	ldr	r3, [pc, #56]	@ (80013cc <MX_I2C1_Init+0x74>)
 8001394:	0018      	movs	r0, r3
 8001396:	f002 fe1b 	bl	8003fd0 <HAL_I2C_Init>
 800139a:	1e03      	subs	r3, r0, #0
 800139c:	d001      	beq.n	80013a2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800139e:	f000 fa5d 	bl	800185c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013a2:	4b0a      	ldr	r3, [pc, #40]	@ (80013cc <MX_I2C1_Init+0x74>)
 80013a4:	2100      	movs	r1, #0
 80013a6:	0018      	movs	r0, r3
 80013a8:	f003 fd14 	bl	8004dd4 <HAL_I2CEx_ConfigAnalogFilter>
 80013ac:	1e03      	subs	r3, r0, #0
 80013ae:	d001      	beq.n	80013b4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80013b0:	f000 fa54 	bl	800185c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80013b4:	4b05      	ldr	r3, [pc, #20]	@ (80013cc <MX_I2C1_Init+0x74>)
 80013b6:	2100      	movs	r1, #0
 80013b8:	0018      	movs	r0, r3
 80013ba:	f003 fd57 	bl	8004e6c <HAL_I2CEx_ConfigDigitalFilter>
 80013be:	1e03      	subs	r3, r0, #0
 80013c0:	d001      	beq.n	80013c6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80013c2:	f000 fa4b 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013c6:	46c0      	nop			@ (mov r8, r8)
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	200000c8 	.word	0x200000c8
 80013d0:	40005400 	.word	0x40005400
 80013d4:	00201d2c 	.word	0x00201d2c

080013d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80013dc:	4b1b      	ldr	r3, [pc, #108]	@ (800144c <MX_SPI1_Init+0x74>)
 80013de:	4a1c      	ldr	r2, [pc, #112]	@ (8001450 <MX_SPI1_Init+0x78>)
 80013e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013e2:	4b1a      	ldr	r3, [pc, #104]	@ (800144c <MX_SPI1_Init+0x74>)
 80013e4:	2282      	movs	r2, #130	@ 0x82
 80013e6:	0052      	lsls	r2, r2, #1
 80013e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013ea:	4b18      	ldr	r3, [pc, #96]	@ (800144c <MX_SPI1_Init+0x74>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013f0:	4b16      	ldr	r3, [pc, #88]	@ (800144c <MX_SPI1_Init+0x74>)
 80013f2:	22e0      	movs	r2, #224	@ 0xe0
 80013f4:	00d2      	lsls	r2, r2, #3
 80013f6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013f8:	4b14      	ldr	r3, [pc, #80]	@ (800144c <MX_SPI1_Init+0x74>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80013fe:	4b13      	ldr	r3, [pc, #76]	@ (800144c <MX_SPI1_Init+0x74>)
 8001400:	2201      	movs	r2, #1
 8001402:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001404:	4b11      	ldr	r3, [pc, #68]	@ (800144c <MX_SPI1_Init+0x74>)
 8001406:	2280      	movs	r2, #128	@ 0x80
 8001408:	0092      	lsls	r2, r2, #2
 800140a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800140c:	4b0f      	ldr	r3, [pc, #60]	@ (800144c <MX_SPI1_Init+0x74>)
 800140e:	2210      	movs	r2, #16
 8001410:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001412:	4b0e      	ldr	r3, [pc, #56]	@ (800144c <MX_SPI1_Init+0x74>)
 8001414:	2200      	movs	r2, #0
 8001416:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001418:	4b0c      	ldr	r3, [pc, #48]	@ (800144c <MX_SPI1_Init+0x74>)
 800141a:	2200      	movs	r2, #0
 800141c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800141e:	4b0b      	ldr	r3, [pc, #44]	@ (800144c <MX_SPI1_Init+0x74>)
 8001420:	2200      	movs	r2, #0
 8001422:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001424:	4b09      	ldr	r3, [pc, #36]	@ (800144c <MX_SPI1_Init+0x74>)
 8001426:	2207      	movs	r2, #7
 8001428:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800142a:	4b08      	ldr	r3, [pc, #32]	@ (800144c <MX_SPI1_Init+0x74>)
 800142c:	2200      	movs	r2, #0
 800142e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001430:	4b06      	ldr	r3, [pc, #24]	@ (800144c <MX_SPI1_Init+0x74>)
 8001432:	2200      	movs	r2, #0
 8001434:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001436:	4b05      	ldr	r3, [pc, #20]	@ (800144c <MX_SPI1_Init+0x74>)
 8001438:	0018      	movs	r0, r3
 800143a:	f004 fa2b 	bl	8005894 <HAL_SPI_Init>
 800143e:	1e03      	subs	r3, r0, #0
 8001440:	d001      	beq.n	8001446 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001442:	f000 fa0b 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001446:	46c0      	nop			@ (mov r8, r8)
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	200001d4 	.word	0x200001d4
 8001450:	40013000 	.word	0x40013000

08001454 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b098      	sub	sp, #96	@ 0x60
 8001458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800145a:	2354      	movs	r3, #84	@ 0x54
 800145c:	18fb      	adds	r3, r7, r3
 800145e:	0018      	movs	r0, r3
 8001460:	230c      	movs	r3, #12
 8001462:	001a      	movs	r2, r3
 8001464:	2100      	movs	r1, #0
 8001466:	f006 fff9 	bl	800845c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800146a:	2338      	movs	r3, #56	@ 0x38
 800146c:	18fb      	adds	r3, r7, r3
 800146e:	0018      	movs	r0, r3
 8001470:	231c      	movs	r3, #28
 8001472:	001a      	movs	r2, r3
 8001474:	2100      	movs	r1, #0
 8001476:	f006 fff1 	bl	800845c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800147a:	1d3b      	adds	r3, r7, #4
 800147c:	0018      	movs	r0, r3
 800147e:	2334      	movs	r3, #52	@ 0x34
 8001480:	001a      	movs	r2, r3
 8001482:	2100      	movs	r1, #0
 8001484:	f006 ffea 	bl	800845c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001488:	4b45      	ldr	r3, [pc, #276]	@ (80015a0 <MX_TIM1_Init+0x14c>)
 800148a:	4a46      	ldr	r2, [pc, #280]	@ (80015a4 <MX_TIM1_Init+0x150>)
 800148c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10-1;
 800148e:	4b44      	ldr	r3, [pc, #272]	@ (80015a0 <MX_TIM1_Init+0x14c>)
 8001490:	2209      	movs	r2, #9
 8001492:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001494:	4b42      	ldr	r3, [pc, #264]	@ (80015a0 <MX_TIM1_Init+0x14c>)
 8001496:	2200      	movs	r2, #0
 8001498:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 800149a:	4b41      	ldr	r3, [pc, #260]	@ (80015a0 <MX_TIM1_Init+0x14c>)
 800149c:	2263      	movs	r2, #99	@ 0x63
 800149e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014a0:	4b3f      	ldr	r3, [pc, #252]	@ (80015a0 <MX_TIM1_Init+0x14c>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014a6:	4b3e      	ldr	r3, [pc, #248]	@ (80015a0 <MX_TIM1_Init+0x14c>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014ac:	4b3c      	ldr	r3, [pc, #240]	@ (80015a0 <MX_TIM1_Init+0x14c>)
 80014ae:	2280      	movs	r2, #128	@ 0x80
 80014b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80014b2:	4b3b      	ldr	r3, [pc, #236]	@ (80015a0 <MX_TIM1_Init+0x14c>)
 80014b4:	0018      	movs	r0, r3
 80014b6:	f004 fafd 	bl	8005ab4 <HAL_TIM_PWM_Init>
 80014ba:	1e03      	subs	r3, r0, #0
 80014bc:	d001      	beq.n	80014c2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80014be:	f000 f9cd 	bl	800185c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014c2:	2154      	movs	r1, #84	@ 0x54
 80014c4:	187b      	adds	r3, r7, r1
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80014ca:	187b      	adds	r3, r7, r1
 80014cc:	2200      	movs	r2, #0
 80014ce:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d0:	187b      	adds	r3, r7, r1
 80014d2:	2200      	movs	r2, #0
 80014d4:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014d6:	187a      	adds	r2, r7, r1
 80014d8:	4b31      	ldr	r3, [pc, #196]	@ (80015a0 <MX_TIM1_Init+0x14c>)
 80014da:	0011      	movs	r1, r2
 80014dc:	0018      	movs	r0, r3
 80014de:	f004 ff61 	bl	80063a4 <HAL_TIMEx_MasterConfigSynchronization>
 80014e2:	1e03      	subs	r3, r0, #0
 80014e4:	d001      	beq.n	80014ea <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80014e6:	f000 f9b9 	bl	800185c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014ea:	2138      	movs	r1, #56	@ 0x38
 80014ec:	187b      	adds	r3, r7, r1
 80014ee:	2260      	movs	r2, #96	@ 0x60
 80014f0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80014f2:	187b      	adds	r3, r7, r1
 80014f4:	2200      	movs	r2, #0
 80014f6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014f8:	187b      	adds	r3, r7, r1
 80014fa:	2200      	movs	r2, #0
 80014fc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014fe:	187b      	adds	r3, r7, r1
 8001500:	2200      	movs	r2, #0
 8001502:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001504:	187b      	adds	r3, r7, r1
 8001506:	2200      	movs	r2, #0
 8001508:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800150a:	187b      	adds	r3, r7, r1
 800150c:	2200      	movs	r2, #0
 800150e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001510:	187b      	adds	r3, r7, r1
 8001512:	2200      	movs	r2, #0
 8001514:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001516:	1879      	adds	r1, r7, r1
 8001518:	4b21      	ldr	r3, [pc, #132]	@ (80015a0 <MX_TIM1_Init+0x14c>)
 800151a:	2200      	movs	r2, #0
 800151c:	0018      	movs	r0, r3
 800151e:	f004 fb21 	bl	8005b64 <HAL_TIM_PWM_ConfigChannel>
 8001522:	1e03      	subs	r3, r0, #0
 8001524:	d001      	beq.n	800152a <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001526:	f000 f999 	bl	800185c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800152a:	1d3b      	adds	r3, r7, #4
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001530:	1d3b      	adds	r3, r7, #4
 8001532:	2200      	movs	r2, #0
 8001534:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001536:	1d3b      	adds	r3, r7, #4
 8001538:	2200      	movs	r2, #0
 800153a:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800153c:	1d3b      	adds	r3, r7, #4
 800153e:	2200      	movs	r2, #0
 8001540:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001542:	1d3b      	adds	r3, r7, #4
 8001544:	2200      	movs	r2, #0
 8001546:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001548:	1d3b      	adds	r3, r7, #4
 800154a:	2280      	movs	r2, #128	@ 0x80
 800154c:	0192      	lsls	r2, r2, #6
 800154e:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001550:	1d3b      	adds	r3, r7, #4
 8001552:	2200      	movs	r2, #0
 8001554:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001556:	1d3b      	adds	r3, r7, #4
 8001558:	2200      	movs	r2, #0
 800155a:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800155c:	1d3b      	adds	r3, r7, #4
 800155e:	2200      	movs	r2, #0
 8001560:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001562:	1d3b      	adds	r3, r7, #4
 8001564:	2280      	movs	r2, #128	@ 0x80
 8001566:	0492      	lsls	r2, r2, #18
 8001568:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800156a:	1d3b      	adds	r3, r7, #4
 800156c:	2200      	movs	r2, #0
 800156e:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001570:	1d3b      	adds	r3, r7, #4
 8001572:	2200      	movs	r2, #0
 8001574:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001576:	1d3b      	adds	r3, r7, #4
 8001578:	2200      	movs	r2, #0
 800157a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800157c:	1d3a      	adds	r2, r7, #4
 800157e:	4b08      	ldr	r3, [pc, #32]	@ (80015a0 <MX_TIM1_Init+0x14c>)
 8001580:	0011      	movs	r1, r2
 8001582:	0018      	movs	r0, r3
 8001584:	f004 ff76 	bl	8006474 <HAL_TIMEx_ConfigBreakDeadTime>
 8001588:	1e03      	subs	r3, r0, #0
 800158a:	d001      	beq.n	8001590 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 800158c:	f000 f966 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001590:	4b03      	ldr	r3, [pc, #12]	@ (80015a0 <MX_TIM1_Init+0x14c>)
 8001592:	0018      	movs	r0, r3
 8001594:	f001 fa6c 	bl	8002a70 <HAL_TIM_MspPostInit>

}
 8001598:	46c0      	nop			@ (mov r8, r8)
 800159a:	46bd      	mov	sp, r7
 800159c:	b018      	add	sp, #96	@ 0x60
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	20000238 	.word	0x20000238
 80015a4:	40012c00 	.word	0x40012c00

080015a8 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80015ac:	4b0e      	ldr	r3, [pc, #56]	@ (80015e8 <MX_TIM14_Init+0x40>)
 80015ae:	4a0f      	ldr	r2, [pc, #60]	@ (80015ec <MX_TIM14_Init+0x44>)
 80015b0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 12 - 1 ;
 80015b2:	4b0d      	ldr	r3, [pc, #52]	@ (80015e8 <MX_TIM14_Init+0x40>)
 80015b4:	220b      	movs	r2, #11
 80015b6:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b8:	4b0b      	ldr	r3, [pc, #44]	@ (80015e8 <MX_TIM14_Init+0x40>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 80015be:	4b0a      	ldr	r3, [pc, #40]	@ (80015e8 <MX_TIM14_Init+0x40>)
 80015c0:	4a0b      	ldr	r2, [pc, #44]	@ (80015f0 <MX_TIM14_Init+0x48>)
 80015c2:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015c4:	4b08      	ldr	r3, [pc, #32]	@ (80015e8 <MX_TIM14_Init+0x40>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ca:	4b07      	ldr	r3, [pc, #28]	@ (80015e8 <MX_TIM14_Init+0x40>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80015d0:	4b05      	ldr	r3, [pc, #20]	@ (80015e8 <MX_TIM14_Init+0x40>)
 80015d2:	0018      	movs	r0, r3
 80015d4:	f004 fa16 	bl	8005a04 <HAL_TIM_Base_Init>
 80015d8:	1e03      	subs	r3, r0, #0
 80015da:	d001      	beq.n	80015e0 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 80015dc:	f000 f93e 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80015e0:	46c0      	nop			@ (mov r8, r8)
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	46c0      	nop			@ (mov r8, r8)
 80015e8:	20000284 	.word	0x20000284
 80015ec:	40002000 	.word	0x40002000
 80015f0:	0000ffff 	.word	0x0000ffff

080015f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015f8:	4b24      	ldr	r3, [pc, #144]	@ (800168c <MX_USART1_UART_Init+0x98>)
 80015fa:	4a25      	ldr	r2, [pc, #148]	@ (8001690 <MX_USART1_UART_Init+0x9c>)
 80015fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80015fe:	4b23      	ldr	r3, [pc, #140]	@ (800168c <MX_USART1_UART_Init+0x98>)
 8001600:	2296      	movs	r2, #150	@ 0x96
 8001602:	0192      	lsls	r2, r2, #6
 8001604:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001606:	4b21      	ldr	r3, [pc, #132]	@ (800168c <MX_USART1_UART_Init+0x98>)
 8001608:	2200      	movs	r2, #0
 800160a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800160c:	4b1f      	ldr	r3, [pc, #124]	@ (800168c <MX_USART1_UART_Init+0x98>)
 800160e:	2200      	movs	r2, #0
 8001610:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001612:	4b1e      	ldr	r3, [pc, #120]	@ (800168c <MX_USART1_UART_Init+0x98>)
 8001614:	2200      	movs	r2, #0
 8001616:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001618:	4b1c      	ldr	r3, [pc, #112]	@ (800168c <MX_USART1_UART_Init+0x98>)
 800161a:	220c      	movs	r2, #12
 800161c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800161e:	4b1b      	ldr	r3, [pc, #108]	@ (800168c <MX_USART1_UART_Init+0x98>)
 8001620:	2200      	movs	r2, #0
 8001622:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001624:	4b19      	ldr	r3, [pc, #100]	@ (800168c <MX_USART1_UART_Init+0x98>)
 8001626:	2200      	movs	r2, #0
 8001628:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800162a:	4b18      	ldr	r3, [pc, #96]	@ (800168c <MX_USART1_UART_Init+0x98>)
 800162c:	2200      	movs	r2, #0
 800162e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001630:	4b16      	ldr	r3, [pc, #88]	@ (800168c <MX_USART1_UART_Init+0x98>)
 8001632:	2200      	movs	r2, #0
 8001634:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001636:	4b15      	ldr	r3, [pc, #84]	@ (800168c <MX_USART1_UART_Init+0x98>)
 8001638:	2200      	movs	r2, #0
 800163a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 800163c:	4813      	ldr	r0, [pc, #76]	@ (800168c <MX_USART1_UART_Init+0x98>)
 800163e:	2300      	movs	r3, #0
 8001640:	2200      	movs	r2, #0
 8001642:	2100      	movs	r1, #0
 8001644:	f006 fb22 	bl	8007c8c <HAL_RS485Ex_Init>
 8001648:	1e03      	subs	r3, r0, #0
 800164a:	d001      	beq.n	8001650 <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 800164c:	f000 f906 	bl	800185c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001650:	4b0e      	ldr	r3, [pc, #56]	@ (800168c <MX_USART1_UART_Init+0x98>)
 8001652:	2100      	movs	r1, #0
 8001654:	0018      	movs	r0, r3
 8001656:	f006 fbdd 	bl	8007e14 <HAL_UARTEx_SetTxFifoThreshold>
 800165a:	1e03      	subs	r3, r0, #0
 800165c:	d001      	beq.n	8001662 <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 800165e:	f000 f8fd 	bl	800185c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001662:	4b0a      	ldr	r3, [pc, #40]	@ (800168c <MX_USART1_UART_Init+0x98>)
 8001664:	2100      	movs	r1, #0
 8001666:	0018      	movs	r0, r3
 8001668:	f006 fc14 	bl	8007e94 <HAL_UARTEx_SetRxFifoThreshold>
 800166c:	1e03      	subs	r3, r0, #0
 800166e:	d001      	beq.n	8001674 <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 8001670:	f000 f8f4 	bl	800185c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001674:	4b05      	ldr	r3, [pc, #20]	@ (800168c <MX_USART1_UART_Init+0x98>)
 8001676:	0018      	movs	r0, r3
 8001678:	f006 fb92 	bl	8007da0 <HAL_UARTEx_DisableFifoMode>
 800167c:	1e03      	subs	r3, r0, #0
 800167e:	d001      	beq.n	8001684 <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 8001680:	f000 f8ec 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001684:	46c0      	nop			@ (mov r8, r8)
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	46c0      	nop			@ (mov r8, r8)
 800168c:	200002d0 	.word	0x200002d0
 8001690:	40013800 	.word	0x40013800

08001694 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800169a:	4b13      	ldr	r3, [pc, #76]	@ (80016e8 <MX_DMA_Init+0x54>)
 800169c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800169e:	4b12      	ldr	r3, [pc, #72]	@ (80016e8 <MX_DMA_Init+0x54>)
 80016a0:	2101      	movs	r1, #1
 80016a2:	430a      	orrs	r2, r1
 80016a4:	639a      	str	r2, [r3, #56]	@ 0x38
 80016a6:	4b10      	ldr	r3, [pc, #64]	@ (80016e8 <MX_DMA_Init+0x54>)
 80016a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016aa:	2201      	movs	r2, #1
 80016ac:	4013      	ands	r3, r2
 80016ae:	607b      	str	r3, [r7, #4]
 80016b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, 0);
 80016b2:	2100      	movs	r1, #0
 80016b4:	2009      	movs	r0, #9
 80016b6:	f7fe fecf 	bl	8000458 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80016ba:	2009      	movs	r0, #9
 80016bc:	f7fe feb2 	bl	8000424 <__NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80016c0:	2200      	movs	r2, #0
 80016c2:	2100      	movs	r1, #0
 80016c4:	200a      	movs	r0, #10
 80016c6:	f001 fe1b 	bl	8003300 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80016ca:	200a      	movs	r0, #10
 80016cc:	f001 fe2d 	bl	800332a <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_DMA1_CH4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_DMA1_CH4_5_IRQn, 0, 0);
 80016d0:	2200      	movs	r2, #0
 80016d2:	2100      	movs	r1, #0
 80016d4:	200b      	movs	r0, #11
 80016d6:	f001 fe13 	bl	8003300 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_DMA1_CH4_5_IRQn);
 80016da:	200b      	movs	r0, #11
 80016dc:	f001 fe25 	bl	800332a <HAL_NVIC_EnableIRQ>

}
 80016e0:	46c0      	nop			@ (mov r8, r8)
 80016e2:	46bd      	mov	sp, r7
 80016e4:	b002      	add	sp, #8
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40021000 	.word	0x40021000

080016ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016ec:	b590      	push	{r4, r7, lr}
 80016ee:	b08b      	sub	sp, #44	@ 0x2c
 80016f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f2:	2414      	movs	r4, #20
 80016f4:	193b      	adds	r3, r7, r4
 80016f6:	0018      	movs	r0, r3
 80016f8:	2314      	movs	r3, #20
 80016fa:	001a      	movs	r2, r3
 80016fc:	2100      	movs	r1, #0
 80016fe:	f006 fead 	bl	800845c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001702:	4b50      	ldr	r3, [pc, #320]	@ (8001844 <MX_GPIO_Init+0x158>)
 8001704:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001706:	4b4f      	ldr	r3, [pc, #316]	@ (8001844 <MX_GPIO_Init+0x158>)
 8001708:	2104      	movs	r1, #4
 800170a:	430a      	orrs	r2, r1
 800170c:	635a      	str	r2, [r3, #52]	@ 0x34
 800170e:	4b4d      	ldr	r3, [pc, #308]	@ (8001844 <MX_GPIO_Init+0x158>)
 8001710:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001712:	2204      	movs	r2, #4
 8001714:	4013      	ands	r3, r2
 8001716:	613b      	str	r3, [r7, #16]
 8001718:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800171a:	4b4a      	ldr	r3, [pc, #296]	@ (8001844 <MX_GPIO_Init+0x158>)
 800171c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800171e:	4b49      	ldr	r3, [pc, #292]	@ (8001844 <MX_GPIO_Init+0x158>)
 8001720:	2120      	movs	r1, #32
 8001722:	430a      	orrs	r2, r1
 8001724:	635a      	str	r2, [r3, #52]	@ 0x34
 8001726:	4b47      	ldr	r3, [pc, #284]	@ (8001844 <MX_GPIO_Init+0x158>)
 8001728:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800172a:	2220      	movs	r2, #32
 800172c:	4013      	ands	r3, r2
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001732:	4b44      	ldr	r3, [pc, #272]	@ (8001844 <MX_GPIO_Init+0x158>)
 8001734:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001736:	4b43      	ldr	r3, [pc, #268]	@ (8001844 <MX_GPIO_Init+0x158>)
 8001738:	2101      	movs	r1, #1
 800173a:	430a      	orrs	r2, r1
 800173c:	635a      	str	r2, [r3, #52]	@ 0x34
 800173e:	4b41      	ldr	r3, [pc, #260]	@ (8001844 <MX_GPIO_Init+0x158>)
 8001740:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001742:	2201      	movs	r2, #1
 8001744:	4013      	ands	r3, r2
 8001746:	60bb      	str	r3, [r7, #8]
 8001748:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800174a:	4b3e      	ldr	r3, [pc, #248]	@ (8001844 <MX_GPIO_Init+0x158>)
 800174c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800174e:	4b3d      	ldr	r3, [pc, #244]	@ (8001844 <MX_GPIO_Init+0x158>)
 8001750:	2102      	movs	r1, #2
 8001752:	430a      	orrs	r2, r1
 8001754:	635a      	str	r2, [r3, #52]	@ 0x34
 8001756:	4b3b      	ldr	r3, [pc, #236]	@ (8001844 <MX_GPIO_Init+0x158>)
 8001758:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800175a:	2202      	movs	r2, #2
 800175c:	4013      	ands	r3, r2
 800175e:	607b      	str	r3, [r7, #4]
 8001760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001762:	4b38      	ldr	r3, [pc, #224]	@ (8001844 <MX_GPIO_Init+0x158>)
 8001764:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001766:	4b37      	ldr	r3, [pc, #220]	@ (8001844 <MX_GPIO_Init+0x158>)
 8001768:	2108      	movs	r1, #8
 800176a:	430a      	orrs	r2, r1
 800176c:	635a      	str	r2, [r3, #52]	@ 0x34
 800176e:	4b35      	ldr	r3, [pc, #212]	@ (8001844 <MX_GPIO_Init+0x158>)
 8001770:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001772:	2208      	movs	r2, #8
 8001774:	4013      	ands	r3, r2
 8001776:	603b      	str	r3, [r7, #0]
 8001778:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Actuator_A_EN_Pin|Actuator_B_EN_Pin, GPIO_PIN_RESET);
 800177a:	4b33      	ldr	r3, [pc, #204]	@ (8001848 <MX_GPIO_Init+0x15c>)
 800177c:	2200      	movs	r2, #0
 800177e:	21c0      	movs	r1, #192	@ 0xc0
 8001780:	0018      	movs	r0, r3
 8001782:	f002 fc07 	bl	8003f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_SET);
 8001786:	4b31      	ldr	r3, [pc, #196]	@ (800184c <MX_GPIO_Init+0x160>)
 8001788:	2201      	movs	r2, #1
 800178a:	2101      	movs	r1, #1
 800178c:	0018      	movs	r0, r3
 800178e:	f002 fc01 	bl	8003f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Actuator_C_EN_Pin Encoder_Pulse_B_Pin */
  GPIO_InitStruct.Pin = Actuator_C_EN_Pin|Encoder_Pulse_B_Pin;
 8001792:	193b      	adds	r3, r7, r4
 8001794:	4a2e      	ldr	r2, [pc, #184]	@ (8001850 <MX_GPIO_Init+0x164>)
 8001796:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001798:	193b      	adds	r3, r7, r4
 800179a:	2200      	movs	r2, #0
 800179c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	193b      	adds	r3, r7, r4
 80017a0:	2200      	movs	r2, #0
 80017a2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a4:	193b      	adds	r3, r7, r4
 80017a6:	4a2b      	ldr	r2, [pc, #172]	@ (8001854 <MX_GPIO_Init+0x168>)
 80017a8:	0019      	movs	r1, r3
 80017aa:	0010      	movs	r0, r2
 80017ac:	f002 f9a8 	bl	8003b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : Encoder_Pulse_A_Pin */
  GPIO_InitStruct.Pin = Encoder_Pulse_A_Pin;
 80017b0:	0021      	movs	r1, r4
 80017b2:	187b      	adds	r3, r7, r1
 80017b4:	2280      	movs	r2, #128	@ 0x80
 80017b6:	0192      	lsls	r2, r2, #6
 80017b8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017ba:	000c      	movs	r4, r1
 80017bc:	193b      	adds	r3, r7, r4
 80017be:	4a26      	ldr	r2, [pc, #152]	@ (8001858 <MX_GPIO_Init+0x16c>)
 80017c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	193b      	adds	r3, r7, r4
 80017c4:	2200      	movs	r2, #0
 80017c6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Encoder_Pulse_A_GPIO_Port, &GPIO_InitStruct);
 80017c8:	193b      	adds	r3, r7, r4
 80017ca:	4a22      	ldr	r2, [pc, #136]	@ (8001854 <MX_GPIO_Init+0x168>)
 80017cc:	0019      	movs	r1, r3
 80017ce:	0010      	movs	r0, r2
 80017d0:	f002 f996 	bl	8003b00 <HAL_GPIO_Init>

  /*Configure GPIO pins : Actuator_A_EN_Pin Actuator_B_EN_Pin */
  GPIO_InitStruct.Pin = Actuator_A_EN_Pin|Actuator_B_EN_Pin;
 80017d4:	193b      	adds	r3, r7, r4
 80017d6:	22c0      	movs	r2, #192	@ 0xc0
 80017d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017da:	193b      	adds	r3, r7, r4
 80017dc:	2201      	movs	r2, #1
 80017de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	193b      	adds	r3, r7, r4
 80017e2:	2200      	movs	r2, #0
 80017e4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e6:	193b      	adds	r3, r7, r4
 80017e8:	2200      	movs	r2, #0
 80017ea:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ec:	193b      	adds	r3, r7, r4
 80017ee:	4a16      	ldr	r2, [pc, #88]	@ (8001848 <MX_GPIO_Init+0x15c>)
 80017f0:	0019      	movs	r1, r3
 80017f2:	0010      	movs	r0, r2
 80017f4:	f002 f984 	bl	8003b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : Actuator_CS_Pin */
  GPIO_InitStruct.Pin = Actuator_CS_Pin;
 80017f8:	193b      	adds	r3, r7, r4
 80017fa:	2201      	movs	r2, #1
 80017fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017fe:	193b      	adds	r3, r7, r4
 8001800:	2201      	movs	r2, #1
 8001802:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	193b      	adds	r3, r7, r4
 8001806:	2200      	movs	r2, #0
 8001808:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180a:	193b      	adds	r3, r7, r4
 800180c:	2203      	movs	r2, #3
 800180e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Actuator_CS_GPIO_Port, &GPIO_InitStruct);
 8001810:	193b      	adds	r3, r7, r4
 8001812:	4a0e      	ldr	r2, [pc, #56]	@ (800184c <MX_GPIO_Init+0x160>)
 8001814:	0019      	movs	r1, r3
 8001816:	0010      	movs	r0, r2
 8001818:	f002 f972 	bl	8003b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_Reset_Pin */
  GPIO_InitStruct.Pin = IMU_Reset_Pin;
 800181c:	0021      	movs	r1, r4
 800181e:	187b      	adds	r3, r7, r1
 8001820:	2202      	movs	r2, #2
 8001822:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001824:	187b      	adds	r3, r7, r1
 8001826:	2200      	movs	r2, #0
 8001828:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182a:	187b      	adds	r3, r7, r1
 800182c:	2200      	movs	r2, #0
 800182e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(IMU_Reset_GPIO_Port, &GPIO_InitStruct);
 8001830:	187b      	adds	r3, r7, r1
 8001832:	4a06      	ldr	r2, [pc, #24]	@ (800184c <MX_GPIO_Init+0x160>)
 8001834:	0019      	movs	r1, r3
 8001836:	0010      	movs	r0, r2
 8001838:	f002 f962 	bl	8003b00 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800183c:	46c0      	nop			@ (mov r8, r8)
 800183e:	46bd      	mov	sp, r7
 8001840:	b00b      	add	sp, #44	@ 0x2c
 8001842:	bd90      	pop	{r4, r7, pc}
 8001844:	40021000 	.word	0x40021000
 8001848:	50000800 	.word	0x50000800
 800184c:	50000c00 	.word	0x50000c00
 8001850:	00004001 	.word	0x00004001
 8001854:	50000400 	.word	0x50000400
 8001858:	10110000 	.word	0x10110000

0800185c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001860:	b672      	cpsid	i
}
 8001862:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001864:	46c0      	nop			@ (mov r8, r8)
 8001866:	e7fd      	b.n	8001864 <Error_Handler+0x8>

08001868 <HAL_UARTEx_RxEventCallback>:

/*
 * Modbus reception handler function
 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001868:	b590      	push	{r4, r7, lr}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	000a      	movs	r2, r1
 8001872:	1cbb      	adds	r3, r7, #2
 8001874:	801a      	strh	r2, [r3, #0]
	if(huart->Instance == USART1)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a45      	ldr	r2, [pc, #276]	@ (8001990 <HAL_UARTEx_RxEventCallback+0x128>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d000      	beq.n	8001882 <HAL_UARTEx_RxEventCallback+0x1a>
 8001880:	e081      	b.n	8001986 <HAL_UARTEx_RxEventCallback+0x11e>
	{
		chunk_start_i = chunk_end_i;  // Update the last position before copying new data
 8001882:	4b44      	ldr	r3, [pc, #272]	@ (8001994 <HAL_UARTEx_RxEventCallback+0x12c>)
 8001884:	881b      	ldrh	r3, [r3, #0]
 8001886:	b29a      	uxth	r2, r3
 8001888:	4b43      	ldr	r3, [pc, #268]	@ (8001998 <HAL_UARTEx_RxEventCallback+0x130>)
 800188a:	801a      	strh	r2, [r3, #0]
		/*
		 * If the data is large and it is about to exceed the buffer size, we have to route it to the start of the buffer
		 * This is to maintain the circular buffer
		 * The old data in the main buffer will be overlapped
		 */
		if (chunk_start_i + Size > MODBUS_RX_BUFFER_SIZE)  // If the current position + new data size is greater than the main buffer
 800188c:	4b42      	ldr	r3, [pc, #264]	@ (8001998 <HAL_UARTEx_RxEventCallback+0x130>)
 800188e:	881b      	ldrh	r3, [r3, #0]
 8001890:	b29b      	uxth	r3, r3
 8001892:	001a      	movs	r2, r3
 8001894:	1cbb      	adds	r3, r7, #2
 8001896:	881b      	ldrh	r3, [r3, #0]
 8001898:	18d2      	adds	r2, r2, r3
 800189a:	2380      	movs	r3, #128	@ 0x80
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	429a      	cmp	r2, r3
 80018a0:	dd29      	ble.n	80018f6 <HAL_UARTEx_RxEventCallback+0x8e>
		{
			uint16_t datatocopy = MODBUS_RX_BUFFER_SIZE - chunk_start_i;  // find out how much space is left in the main buffer
 80018a2:	4b3d      	ldr	r3, [pc, #244]	@ (8001998 <HAL_UARTEx_RxEventCallback+0x130>)
 80018a4:	881b      	ldrh	r3, [r3, #0]
 80018a6:	b29a      	uxth	r2, r3
 80018a8:	240e      	movs	r4, #14
 80018aa:	193b      	adds	r3, r7, r4
 80018ac:	2180      	movs	r1, #128	@ 0x80
 80018ae:	0049      	lsls	r1, r1, #1
 80018b0:	1a8a      	subs	r2, r1, r2
 80018b2:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)(modbus_rx_buffer + chunk_start_i), rx_chunk, datatocopy);  // copy data in that remaining space
 80018b4:	4b38      	ldr	r3, [pc, #224]	@ (8001998 <HAL_UARTEx_RxEventCallback+0x130>)
 80018b6:	881b      	ldrh	r3, [r3, #0]
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	001a      	movs	r2, r3
 80018bc:	4b37      	ldr	r3, [pc, #220]	@ (800199c <HAL_UARTEx_RxEventCallback+0x134>)
 80018be:	18d0      	adds	r0, r2, r3
 80018c0:	193b      	adds	r3, r7, r4
 80018c2:	881a      	ldrh	r2, [r3, #0]
 80018c4:	4b36      	ldr	r3, [pc, #216]	@ (80019a0 <HAL_UARTEx_RxEventCallback+0x138>)
 80018c6:	0019      	movs	r1, r3
 80018c8:	f006 fdf4 	bl	80084b4 <memcpy>

			chunk_end_i = (Size - datatocopy);  // update the position
 80018cc:	1cba      	adds	r2, r7, #2
 80018ce:	193b      	adds	r3, r7, r4
 80018d0:	8812      	ldrh	r2, [r2, #0]
 80018d2:	881b      	ldrh	r3, [r3, #0]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	4b2e      	ldr	r3, [pc, #184]	@ (8001994 <HAL_UARTEx_RxEventCallback+0x12c>)
 80018da:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)modbus_rx_buffer, (uint8_t *)(rx_chunk + datatocopy), chunk_end_i);  // copy the remaining data
 80018dc:	193b      	adds	r3, r7, r4
 80018de:	881a      	ldrh	r2, [r3, #0]
 80018e0:	4b2f      	ldr	r3, [pc, #188]	@ (80019a0 <HAL_UARTEx_RxEventCallback+0x138>)
 80018e2:	18d1      	adds	r1, r2, r3
 80018e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001994 <HAL_UARTEx_RxEventCallback+0x12c>)
 80018e6:	881b      	ldrh	r3, [r3, #0]
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	001a      	movs	r2, r3
 80018ec:	4b2b      	ldr	r3, [pc, #172]	@ (800199c <HAL_UARTEx_RxEventCallback+0x134>)
 80018ee:	0018      	movs	r0, r3
 80018f0:	f006 fde0 	bl	80084b4 <memcpy>
 80018f4:	e014      	b.n	8001920 <HAL_UARTEx_RxEventCallback+0xb8>
		 * If the current position + new data size is less than the main buffer
		 * we will simply copy the data into the buffer and update the position
		 */
		else
		{
			memcpy ((uint8_t *)(modbus_rx_buffer + chunk_start_i), rx_chunk, Size);
 80018f6:	4b28      	ldr	r3, [pc, #160]	@ (8001998 <HAL_UARTEx_RxEventCallback+0x130>)
 80018f8:	881b      	ldrh	r3, [r3, #0]
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	001a      	movs	r2, r3
 80018fe:	4b27      	ldr	r3, [pc, #156]	@ (800199c <HAL_UARTEx_RxEventCallback+0x134>)
 8001900:	18d0      	adds	r0, r2, r3
 8001902:	1cbb      	adds	r3, r7, #2
 8001904:	881a      	ldrh	r2, [r3, #0]
 8001906:	4b26      	ldr	r3, [pc, #152]	@ (80019a0 <HAL_UARTEx_RxEventCallback+0x138>)
 8001908:	0019      	movs	r1, r3
 800190a:	f006 fdd3 	bl	80084b4 <memcpy>
			chunk_end_i = Size + chunk_start_i;
 800190e:	4b22      	ldr	r3, [pc, #136]	@ (8001998 <HAL_UARTEx_RxEventCallback+0x130>)
 8001910:	881b      	ldrh	r3, [r3, #0]
 8001912:	b29a      	uxth	r2, r3
 8001914:	1cbb      	adds	r3, r7, #2
 8001916:	881b      	ldrh	r3, [r3, #0]
 8001918:	18d3      	adds	r3, r2, r3
 800191a:	b29a      	uxth	r2, r3
 800191c:	4b1d      	ldr	r3, [pc, #116]	@ (8001994 <HAL_UARTEx_RxEventCallback+0x12c>)
 800191e:	801a      	strh	r2, [r3, #0]
		}

		if(modbus_header)
 8001920:	4b20      	ldr	r3, [pc, #128]	@ (80019a4 <HAL_UARTEx_RxEventCallback+0x13c>)
 8001922:	881b      	ldrh	r3, [r3, #0]
 8001924:	b29b      	uxth	r3, r3
 8001926:	2b00      	cmp	r3, #0
 8001928:	d027      	beq.n	800197a <HAL_UARTEx_RxEventCallback+0x112>
		{
			// Log the time for chunk miss error handling
			chunk_time = HAL_GetTick();
 800192a:	f001 fbed 	bl	8003108 <HAL_GetTick>
 800192e:	0002      	movs	r2, r0
 8001930:	4b1d      	ldr	r3, [pc, #116]	@ (80019a8 <HAL_UARTEx_RxEventCallback+0x140>)
 8001932:	601a      	str	r2, [r3, #0]

			start_index = chunk_start_i;
 8001934:	4b18      	ldr	r3, [pc, #96]	@ (8001998 <HAL_UARTEx_RxEventCallback+0x130>)
 8001936:	881b      	ldrh	r3, [r3, #0]
 8001938:	b29a      	uxth	r2, r3
 800193a:	4b1c      	ldr	r3, [pc, #112]	@ (80019ac <HAL_UARTEx_RxEventCallback+0x144>)
 800193c:	801a      	strh	r2, [r3, #0]
			modbus_header = 0;
 800193e:	4b19      	ldr	r3, [pc, #100]	@ (80019a4 <HAL_UARTEx_RxEventCallback+0x13c>)
 8001940:	2200      	movs	r2, #0
 8001942:	801a      	strh	r2, [r3, #0]

			// Setup the DMA to receive the # message bytes + crc + 1 in the event that the # bytes is in the message
			HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rx_chunk, (uint16_t)(((rx_chunk[4] << 8) | rx_chunk[5])*2 + 2 + 1));
 8001944:	4b16      	ldr	r3, [pc, #88]	@ (80019a0 <HAL_UARTEx_RxEventCallback+0x138>)
 8001946:	791b      	ldrb	r3, [r3, #4]
 8001948:	021b      	lsls	r3, r3, #8
 800194a:	4a15      	ldr	r2, [pc, #84]	@ (80019a0 <HAL_UARTEx_RxEventCallback+0x138>)
 800194c:	7952      	ldrb	r2, [r2, #5]
 800194e:	4313      	orrs	r3, r2
 8001950:	b29b      	uxth	r3, r3
 8001952:	3301      	adds	r3, #1
 8001954:	b29b      	uxth	r3, r3
 8001956:	18db      	adds	r3, r3, r3
 8001958:	b29b      	uxth	r3, r3
 800195a:	3301      	adds	r3, #1
 800195c:	b29a      	uxth	r2, r3
 800195e:	4910      	ldr	r1, [pc, #64]	@ (80019a0 <HAL_UARTEx_RxEventCallback+0x138>)
 8001960:	4b13      	ldr	r3, [pc, #76]	@ (80019b0 <HAL_UARTEx_RxEventCallback+0x148>)
 8001962:	0018      	movs	r0, r3
 8001964:	f006 fad8 	bl	8007f18 <HAL_UARTEx_ReceiveToIdle_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001968:	4b12      	ldr	r3, [pc, #72]	@ (80019b4 <HAL_UARTEx_RxEventCallback+0x14c>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	4b11      	ldr	r3, [pc, #68]	@ (80019b4 <HAL_UARTEx_RxEventCallback+0x14c>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2104      	movs	r1, #4
 8001974:	438a      	bics	r2, r1
 8001976:	601a      	str	r2, [r3, #0]
			 */
			modbus_header = 1;
			uart_rx_int = 1;
		}
	}
}
 8001978:	e005      	b.n	8001986 <HAL_UARTEx_RxEventCallback+0x11e>
			modbus_header = 1;
 800197a:	4b0a      	ldr	r3, [pc, #40]	@ (80019a4 <HAL_UARTEx_RxEventCallback+0x13c>)
 800197c:	2201      	movs	r2, #1
 800197e:	801a      	strh	r2, [r3, #0]
			uart_rx_int = 1;
 8001980:	4b0d      	ldr	r3, [pc, #52]	@ (80019b8 <HAL_UARTEx_RxEventCallback+0x150>)
 8001982:	2201      	movs	r2, #1
 8001984:	701a      	strb	r2, [r3, #0]
}
 8001986:	46c0      	nop			@ (mov r8, r8)
 8001988:	46bd      	mov	sp, r7
 800198a:	b005      	add	sp, #20
 800198c:	bd90      	pop	{r4, r7, pc}
 800198e:	46c0      	nop			@ (mov r8, r8)
 8001990:	40013800 	.word	0x40013800
 8001994:	20000770 	.word	0x20000770
 8001998:	2000076e 	.word	0x2000076e
 800199c:	20000468 	.word	0x20000468
 80019a0:	20000668 	.word	0x20000668
 80019a4:	20000098 	.word	0x20000098
 80019a8:	20000768 	.word	0x20000768
 80019ac:	2000076c 	.word	0x2000076c
 80019b0:	200002d0 	.word	0x200002d0
 80019b4:	20000364 	.word	0x20000364
 80019b8:	20000772 	.word	0x20000772

080019bc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
	uart_tx_int = 1;
 80019c4:	4b03      	ldr	r3, [pc, #12]	@ (80019d4 <HAL_UART_TxCpltCallback+0x18>)
 80019c6:	2201      	movs	r2, #1
 80019c8:	701a      	strb	r2, [r3, #0]
}
 80019ca:	46c0      	nop			@ (mov r8, r8)
 80019cc:	46bd      	mov	sp, r7
 80019ce:	b002      	add	sp, #8
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	46c0      	nop			@ (mov r8, r8)
 80019d4:	2000009a 	.word	0x2000009a

080019d8 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
	uart_err_int = 1;
 80019e0:	4b07      	ldr	r3, [pc, #28]	@ (8001a00 <HAL_UART_ErrorCallback+0x28>)
 80019e2:	2201      	movs	r2, #1
 80019e4:	701a      	strb	r2, [r3, #0]
	__HAL_UART_DISABLE_IT(&huart1, UART_IT_MASK);
 80019e6:	4b07      	ldr	r3, [pc, #28]	@ (8001a04 <HAL_UART_ErrorCallback+0x2c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	689a      	ldr	r2, [r3, #8]
 80019ec:	4b05      	ldr	r3, [pc, #20]	@ (8001a04 <HAL_UART_ErrorCallback+0x2c>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	0052      	lsls	r2, r2, #1
 80019f2:	0852      	lsrs	r2, r2, #1
 80019f4:	609a      	str	r2, [r3, #8]
}
 80019f6:	46c0      	nop			@ (mov r8, r8)
 80019f8:	46bd      	mov	sp, r7
 80019fa:	b002      	add	sp, #8
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	46c0      	nop			@ (mov r8, r8)
 8001a00:	20000773 	.word	0x20000773
 8001a04:	200002d0 	.word	0x200002d0

08001a08 <modbus_rx>:

// Modbus Slave Functions ---------------------------------------------------------------------

#ifdef MB_SLAVE
uint8_t modbus_rx()
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
	if(uart_rx_int)
 8001a0c:	4b06      	ldr	r3, [pc, #24]	@ (8001a28 <modbus_rx+0x20>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d004      	beq.n	8001a20 <modbus_rx+0x18>
	{
		uart_rx_int = 0;
 8001a16:	4b04      	ldr	r3, [pc, #16]	@ (8001a28 <modbus_rx+0x20>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	701a      	strb	r2, [r3, #0]
		return 1;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e000      	b.n	8001a22 <modbus_rx+0x1a>
	}
	return 0;
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	0018      	movs	r0, r3
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	20000772 	.word	0x20000772

08001a2c <return_holding_registers>:

int8_t return_holding_registers(uint8_t* tx_len)
{
 8001a2c:	b5b0      	push	{r4, r5, r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
	(*tx_len) = 0;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	701a      	strb	r2, [r3, #0]
	// Handle Error Checking
	uint16_t first_register_address = (get_rx_buffer(2) << 8) | get_rx_buffer(3);
 8001a3a:	2002      	movs	r0, #2
 8001a3c:	f000 fc5c 	bl	80022f8 <get_rx_buffer>
 8001a40:	0003      	movs	r3, r0
 8001a42:	021b      	lsls	r3, r3, #8
 8001a44:	b21c      	sxth	r4, r3
 8001a46:	2003      	movs	r0, #3
 8001a48:	f000 fc56 	bl	80022f8 <get_rx_buffer>
 8001a4c:	0003      	movs	r3, r0
 8001a4e:	b21b      	sxth	r3, r3
 8001a50:	4323      	orrs	r3, r4
 8001a52:	b21a      	sxth	r2, r3
 8001a54:	230c      	movs	r3, #12
 8001a56:	18fb      	adds	r3, r7, r3
 8001a58:	801a      	strh	r2, [r3, #0]

	// Get the number of registers requested by the master
	uint16_t num_registers = (get_rx_buffer(4) << 8) | get_rx_buffer(5);
 8001a5a:	2004      	movs	r0, #4
 8001a5c:	f000 fc4c 	bl	80022f8 <get_rx_buffer>
 8001a60:	0003      	movs	r3, r0
 8001a62:	021b      	lsls	r3, r3, #8
 8001a64:	b21c      	sxth	r4, r3
 8001a66:	2005      	movs	r0, #5
 8001a68:	f000 fc46 	bl	80022f8 <get_rx_buffer>
 8001a6c:	0003      	movs	r3, r0
 8001a6e:	b21b      	sxth	r3, r3
 8001a70:	4323      	orrs	r3, r4
 8001a72:	b21a      	sxth	r2, r3
 8001a74:	210a      	movs	r1, #10
 8001a76:	187b      	adds	r3, r7, r1
 8001a78:	801a      	strh	r2, [r3, #0]

	if(num_registers > RX_BUFFER_SIZE || num_registers < 1) // 125 is the limit according to modbus protocol
 8001a7a:	000a      	movs	r2, r1
 8001a7c:	18bb      	adds	r3, r7, r2
 8001a7e:	881b      	ldrh	r3, [r3, #0]
 8001a80:	2b7d      	cmp	r3, #125	@ 0x7d
 8001a82:	d803      	bhi.n	8001a8c <return_holding_registers+0x60>
 8001a84:	18bb      	adds	r3, r7, r2
 8001a86:	881b      	ldrh	r3, [r3, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d104      	bne.n	8001a96 <return_holding_registers+0x6a>
	{
		return modbus_exception(MB_ILLEGAL_DATA_VALUE);
 8001a8c:	2006      	movs	r0, #6
 8001a8e:	f000 f97b 	bl	8001d88 <modbus_exception>
 8001a92:	0003      	movs	r3, r0
 8001a94:	e06e      	b.n	8001b74 <return_holding_registers+0x148>
	}

	uint16_t last_register_address = first_register_address + (num_registers - 1);
 8001a96:	230a      	movs	r3, #10
 8001a98:	18fa      	adds	r2, r7, r3
 8001a9a:	230c      	movs	r3, #12
 8001a9c:	18fb      	adds	r3, r7, r3
 8001a9e:	8812      	ldrh	r2, [r2, #0]
 8001aa0:	881b      	ldrh	r3, [r3, #0]
 8001aa2:	18d3      	adds	r3, r2, r3
 8001aa4:	b29a      	uxth	r2, r3
 8001aa6:	2108      	movs	r1, #8
 8001aa8:	187b      	adds	r3, r7, r1
 8001aaa:	3a01      	subs	r2, #1
 8001aac:	801a      	strh	r2, [r3, #0]

	if(last_register_address > NUM_HOLDING_REGISTERS)
 8001aae:	187b      	adds	r3, r7, r1
 8001ab0:	881b      	ldrh	r3, [r3, #0]
 8001ab2:	2b4c      	cmp	r3, #76	@ 0x4c
 8001ab4:	d904      	bls.n	8001ac0 <return_holding_registers+0x94>
	{
		return modbus_exception(MB_ILLEGAL_DATA_ADDRESS);
 8001ab6:	2005      	movs	r0, #5
 8001ab8:	f000 f966 	bl	8001d88 <modbus_exception>
 8001abc:	0003      	movs	r3, r0
 8001abe:	e059      	b.n	8001b74 <return_holding_registers+0x148>
	}

	// Return register values

	modbus_tx_buffer[0] = get_rx_buffer(0); // Append Slave id
 8001ac0:	2000      	movs	r0, #0
 8001ac2:	f000 fc19 	bl	80022f8 <get_rx_buffer>
 8001ac6:	0003      	movs	r3, r0
 8001ac8:	001a      	movs	r2, r3
 8001aca:	4b2c      	ldr	r3, [pc, #176]	@ (8001b7c <return_holding_registers+0x150>)
 8001acc:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = get_rx_buffer(1); // Append Function Code
 8001ace:	2001      	movs	r0, #1
 8001ad0:	f000 fc12 	bl	80022f8 <get_rx_buffer>
 8001ad4:	0003      	movs	r3, r0
 8001ad6:	001a      	movs	r2, r3
 8001ad8:	4b28      	ldr	r3, [pc, #160]	@ (8001b7c <return_holding_registers+0x150>)
 8001ada:	705a      	strb	r2, [r3, #1]
	modbus_tx_buffer[2] = num_registers * 2; // Append number of bytes
 8001adc:	230a      	movs	r3, #10
 8001ade:	18fb      	adds	r3, r7, r3
 8001ae0:	881b      	ldrh	r3, [r3, #0]
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	18db      	adds	r3, r3, r3
 8001ae6:	b2da      	uxtb	r2, r3
 8001ae8:	4b24      	ldr	r3, [pc, #144]	@ (8001b7c <return_holding_registers+0x150>)
 8001aea:	709a      	strb	r2, [r3, #2]
	(*tx_len) = 3;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2203      	movs	r2, #3
 8001af0:	701a      	strb	r2, [r3, #0]
//		prim = __get_PRIMASK();
//		__disable_irq();
	}

	// Append the Register Values
	for(uint8_t i = 0; i < num_registers; i++)
 8001af2:	230f      	movs	r3, #15
 8001af4:	18fb      	adds	r3, r7, r3
 8001af6:	2200      	movs	r2, #0
 8001af8:	701a      	strb	r2, [r3, #0]
 8001afa:	e02c      	b.n	8001b56 <return_holding_registers+0x12a>
	{
		modbus_tx_buffer[(*tx_len)++] = high_byte(holding_register_database[first_register_address + i]);
 8001afc:	250c      	movs	r5, #12
 8001afe:	197b      	adds	r3, r7, r5
 8001b00:	881a      	ldrh	r2, [r3, #0]
 8001b02:	240f      	movs	r4, #15
 8001b04:	193b      	adds	r3, r7, r4
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	18d2      	adds	r2, r2, r3
 8001b0a:	4b1d      	ldr	r3, [pc, #116]	@ (8001b80 <return_holding_registers+0x154>)
 8001b0c:	0052      	lsls	r2, r2, #1
 8001b0e:	5ad3      	ldrh	r3, [r2, r3]
 8001b10:	0a1b      	lsrs	r3, r3, #8
 8001b12:	b299      	uxth	r1, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	1c5a      	adds	r2, r3, #1
 8001b1a:	b2d0      	uxtb	r0, r2
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	7010      	strb	r0, [r2, #0]
 8001b20:	001a      	movs	r2, r3
 8001b22:	b2c9      	uxtb	r1, r1
 8001b24:	4b15      	ldr	r3, [pc, #84]	@ (8001b7c <return_holding_registers+0x150>)
 8001b26:	5499      	strb	r1, [r3, r2]
		modbus_tx_buffer[(*tx_len)++] = low_byte(holding_register_database[first_register_address + i]);
 8001b28:	197b      	adds	r3, r7, r5
 8001b2a:	881a      	ldrh	r2, [r3, #0]
 8001b2c:	193b      	adds	r3, r7, r4
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	18d2      	adds	r2, r2, r3
 8001b32:	4b13      	ldr	r3, [pc, #76]	@ (8001b80 <return_holding_registers+0x154>)
 8001b34:	0052      	lsls	r2, r2, #1
 8001b36:	5ad1      	ldrh	r1, [r2, r3]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	1c5a      	adds	r2, r3, #1
 8001b3e:	b2d0      	uxtb	r0, r2
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	7010      	strb	r0, [r2, #0]
 8001b44:	001a      	movs	r2, r3
 8001b46:	b2c9      	uxtb	r1, r1
 8001b48:	4b0c      	ldr	r3, [pc, #48]	@ (8001b7c <return_holding_registers+0x150>)
 8001b4a:	5499      	strb	r1, [r3, r2]
	for(uint8_t i = 0; i < num_registers; i++)
 8001b4c:	193b      	adds	r3, r7, r4
 8001b4e:	781a      	ldrb	r2, [r3, #0]
 8001b50:	193b      	adds	r3, r7, r4
 8001b52:	3201      	adds	r2, #1
 8001b54:	701a      	strb	r2, [r3, #0]
 8001b56:	230f      	movs	r3, #15
 8001b58:	18fb      	adds	r3, r7, r3
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	220a      	movs	r2, #10
 8001b60:	18ba      	adds	r2, r7, r2
 8001b62:	8812      	ldrh	r2, [r2, #0]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d8c9      	bhi.n	8001afc <return_holding_registers+0xd0>
//		if(prim == 0)
//		{
//			__enable_irq();
//		}
	}
	return modbus_send((*tx_len));
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	0018      	movs	r0, r3
 8001b6e:	f000 f9f3 	bl	8001f58 <modbus_send>
 8001b72:	0003      	movs	r3, r0
}
 8001b74:	0018      	movs	r0, r3
 8001b76:	46bd      	mov	sp, r7
 8001b78:	b004      	add	sp, #16
 8001b7a:	bdb0      	pop	{r4, r5, r7, pc}
 8001b7c:	20000568 	.word	0x20000568
 8001b80:	20000000 	.word	0x20000000

08001b84 <edit_multiple_registers>:

int8_t edit_multiple_registers(uint8_t *tx_len)
{
 8001b84:	b5b0      	push	{r4, r5, r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
	(*tx_len) = 0;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	701a      	strb	r2, [r3, #0]
	// Handle Error Checking
	uint16_t first_register_address = (get_rx_buffer(2) << 8) | get_rx_buffer(3);
 8001b92:	2002      	movs	r0, #2
 8001b94:	f000 fbb0 	bl	80022f8 <get_rx_buffer>
 8001b98:	0003      	movs	r3, r0
 8001b9a:	021b      	lsls	r3, r3, #8
 8001b9c:	b21c      	sxth	r4, r3
 8001b9e:	2003      	movs	r0, #3
 8001ba0:	f000 fbaa 	bl	80022f8 <get_rx_buffer>
 8001ba4:	0003      	movs	r3, r0
 8001ba6:	b21b      	sxth	r3, r3
 8001ba8:	4323      	orrs	r3, r4
 8001baa:	b21a      	sxth	r2, r3
 8001bac:	2314      	movs	r3, #20
 8001bae:	18fb      	adds	r3, r7, r3
 8001bb0:	801a      	strh	r2, [r3, #0]

	uint16_t num_registers = (get_rx_buffer(4) << 8) | get_rx_buffer(5);
 8001bb2:	2004      	movs	r0, #4
 8001bb4:	f000 fba0 	bl	80022f8 <get_rx_buffer>
 8001bb8:	0003      	movs	r3, r0
 8001bba:	021b      	lsls	r3, r3, #8
 8001bbc:	b21c      	sxth	r4, r3
 8001bbe:	2005      	movs	r0, #5
 8001bc0:	f000 fb9a 	bl	80022f8 <get_rx_buffer>
 8001bc4:	0003      	movs	r3, r0
 8001bc6:	b21b      	sxth	r3, r3
 8001bc8:	4323      	orrs	r3, r4
 8001bca:	b21a      	sxth	r2, r3
 8001bcc:	2112      	movs	r1, #18
 8001bce:	187b      	adds	r3, r7, r1
 8001bd0:	801a      	strh	r2, [r3, #0]

	if(num_registers > 125 || num_registers < 1) // 125 is the limit according to modbus protocol
 8001bd2:	000a      	movs	r2, r1
 8001bd4:	18bb      	adds	r3, r7, r2
 8001bd6:	881b      	ldrh	r3, [r3, #0]
 8001bd8:	2b7d      	cmp	r3, #125	@ 0x7d
 8001bda:	d803      	bhi.n	8001be4 <edit_multiple_registers+0x60>
 8001bdc:	18bb      	adds	r3, r7, r2
 8001bde:	881b      	ldrh	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d104      	bne.n	8001bee <edit_multiple_registers+0x6a>
	{
		return modbus_exception(MB_ILLEGAL_DATA_VALUE);
 8001be4:	2006      	movs	r0, #6
 8001be6:	f000 f8cf 	bl	8001d88 <modbus_exception>
 8001bea:	0003      	movs	r3, r0
 8001bec:	e0c3      	b.n	8001d76 <edit_multiple_registers+0x1f2>
	}

	uint16_t last_register_address = first_register_address + (num_registers - 1);
 8001bee:	2312      	movs	r3, #18
 8001bf0:	18fa      	adds	r2, r7, r3
 8001bf2:	2314      	movs	r3, #20
 8001bf4:	18fb      	adds	r3, r7, r3
 8001bf6:	8812      	ldrh	r2, [r2, #0]
 8001bf8:	881b      	ldrh	r3, [r3, #0]
 8001bfa:	18d3      	adds	r3, r2, r3
 8001bfc:	b29a      	uxth	r2, r3
 8001bfe:	2110      	movs	r1, #16
 8001c00:	187b      	adds	r3, r7, r1
 8001c02:	3a01      	subs	r2, #1
 8001c04:	801a      	strh	r2, [r3, #0]

	if(last_register_address > NUM_HOLDING_REGISTERS)
 8001c06:	187b      	adds	r3, r7, r1
 8001c08:	881b      	ldrh	r3, [r3, #0]
 8001c0a:	2b4c      	cmp	r3, #76	@ 0x4c
 8001c0c:	d904      	bls.n	8001c18 <edit_multiple_registers+0x94>
	{
		return modbus_exception(MB_ILLEGAL_DATA_ADDRESS);
 8001c0e:	2005      	movs	r0, #5
 8001c10:	f000 f8ba 	bl	8001d88 <modbus_exception>
 8001c14:	0003      	movs	r3, r0
 8001c16:	e0ae      	b.n	8001d76 <edit_multiple_registers+0x1f2>
	}

	// Protect Read only values
	if(((first_register_address >= ADC_0) && (first_register_address <= REMOTE_QUARTERNION_Z)) ||
 8001c18:	2214      	movs	r2, #20
 8001c1a:	18bb      	adds	r3, r7, r2
 8001c1c:	881b      	ldrh	r3, [r3, #0]
 8001c1e:	2b07      	cmp	r3, #7
 8001c20:	d903      	bls.n	8001c2a <edit_multiple_registers+0xa6>
 8001c22:	18bb      	adds	r3, r7, r2
 8001c24:	881b      	ldrh	r3, [r3, #0]
 8001c26:	2b3c      	cmp	r3, #60	@ 0x3c
 8001c28:	d912      	bls.n	8001c50 <edit_multiple_registers+0xcc>
 8001c2a:	2210      	movs	r2, #16
 8001c2c:	18bb      	adds	r3, r7, r2
 8001c2e:	881b      	ldrh	r3, [r3, #0]
 8001c30:	2b07      	cmp	r3, #7
 8001c32:	d903      	bls.n	8001c3c <edit_multiple_registers+0xb8>
		 ((last_register_address >= ADC_0) && (last_register_address <= REMOTE_QUARTERNION_Z)) ||
 8001c34:	18bb      	adds	r3, r7, r2
 8001c36:	881b      	ldrh	r3, [r3, #0]
 8001c38:	2b3c      	cmp	r3, #60	@ 0x3c
 8001c3a:	d909      	bls.n	8001c50 <edit_multiple_registers+0xcc>
 8001c3c:	2314      	movs	r3, #20
 8001c3e:	18fb      	adds	r3, r7, r3
 8001c40:	881b      	ldrh	r3, [r3, #0]
 8001c42:	2b07      	cmp	r3, #7
 8001c44:	d809      	bhi.n	8001c5a <edit_multiple_registers+0xd6>
		 ((first_register_address < ADC_0) && (last_register_address > REMOTE_QUARTERNION_Z)))
 8001c46:	2310      	movs	r3, #16
 8001c48:	18fb      	adds	r3, r7, r3
 8001c4a:	881b      	ldrh	r3, [r3, #0]
 8001c4c:	2b3c      	cmp	r3, #60	@ 0x3c
 8001c4e:	d904      	bls.n	8001c5a <edit_multiple_registers+0xd6>
	{
		// Ensure that sensor values are restricted to read-only
		return modbus_exception(MB_ILLEGAL_FUNCTION);
 8001c50:	2004      	movs	r0, #4
 8001c52:	f000 f899 	bl	8001d88 <modbus_exception>
 8001c56:	0003      	movs	r3, r0
 8001c58:	e08d      	b.n	8001d76 <edit_multiple_registers+0x1f2>
	}

	// Edit holding registers
	modbus_tx_buffer[0] = get_rx_buffer(0); // Append Slave id
 8001c5a:	2000      	movs	r0, #0
 8001c5c:	f000 fb4c 	bl	80022f8 <get_rx_buffer>
 8001c60:	0003      	movs	r3, r0
 8001c62:	001a      	movs	r2, r3
 8001c64:	4b46      	ldr	r3, [pc, #280]	@ (8001d80 <edit_multiple_registers+0x1fc>)
 8001c66:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = get_rx_buffer(1); // Append Function Code
 8001c68:	2001      	movs	r0, #1
 8001c6a:	f000 fb45 	bl	80022f8 <get_rx_buffer>
 8001c6e:	0003      	movs	r3, r0
 8001c70:	001a      	movs	r2, r3
 8001c72:	4b43      	ldr	r3, [pc, #268]	@ (8001d80 <edit_multiple_registers+0x1fc>)
 8001c74:	705a      	strb	r2, [r3, #1]
	// Append the Write Address (high byte then low byte)
	modbus_tx_buffer[2] = get_rx_buffer(2);
 8001c76:	2002      	movs	r0, #2
 8001c78:	f000 fb3e 	bl	80022f8 <get_rx_buffer>
 8001c7c:	0003      	movs	r3, r0
 8001c7e:	001a      	movs	r2, r3
 8001c80:	4b3f      	ldr	r3, [pc, #252]	@ (8001d80 <edit_multiple_registers+0x1fc>)
 8001c82:	709a      	strb	r2, [r3, #2]
	modbus_tx_buffer[3] = get_rx_buffer(3);
 8001c84:	2003      	movs	r0, #3
 8001c86:	f000 fb37 	bl	80022f8 <get_rx_buffer>
 8001c8a:	0003      	movs	r3, r0
 8001c8c:	001a      	movs	r2, r3
 8001c8e:	4b3c      	ldr	r3, [pc, #240]	@ (8001d80 <edit_multiple_registers+0x1fc>)
 8001c90:	70da      	strb	r2, [r3, #3]
	// Append the quantity of registers to be written (high byte then low byte)
	modbus_tx_buffer[4] = get_rx_buffer(4);
 8001c92:	2004      	movs	r0, #4
 8001c94:	f000 fb30 	bl	80022f8 <get_rx_buffer>
 8001c98:	0003      	movs	r3, r0
 8001c9a:	001a      	movs	r2, r3
 8001c9c:	4b38      	ldr	r3, [pc, #224]	@ (8001d80 <edit_multiple_registers+0x1fc>)
 8001c9e:	711a      	strb	r2, [r3, #4]
	modbus_tx_buffer[5] = get_rx_buffer(5);
 8001ca0:	2005      	movs	r0, #5
 8001ca2:	f000 fb29 	bl	80022f8 <get_rx_buffer>
 8001ca6:	0003      	movs	r3, r0
 8001ca8:	001a      	movs	r2, r3
 8001caa:	4b35      	ldr	r3, [pc, #212]	@ (8001d80 <edit_multiple_registers+0x1fc>)
 8001cac:	715a      	strb	r2, [r3, #5]
	(*tx_len) = 6;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2206      	movs	r2, #6
 8001cb2:	701a      	strb	r2, [r3, #0]

	for(uint8_t i = 0; i < num_registers; i++)
 8001cb4:	2317      	movs	r3, #23
 8001cb6:	18fb      	adds	r3, r7, r3
 8001cb8:	2200      	movs	r2, #0
 8001cba:	701a      	strb	r2, [r3, #0]
 8001cbc:	e032      	b.n	8001d24 <edit_multiple_registers+0x1a0>
	{
		holding_register_database[first_register_address + i] = (get_rx_buffer(2 * i + 7) << 8) | get_rx_buffer(2 * i + 8);
 8001cbe:	2517      	movs	r5, #23
 8001cc0:	197b      	adds	r3, r7, r5
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	18db      	adds	r3, r3, r3
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	3307      	adds	r3, #7
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	0018      	movs	r0, r3
 8001cce:	f000 fb13 	bl	80022f8 <get_rx_buffer>
 8001cd2:	0003      	movs	r3, r0
 8001cd4:	021b      	lsls	r3, r3, #8
 8001cd6:	b21c      	sxth	r4, r3
 8001cd8:	197b      	adds	r3, r7, r5
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	3304      	adds	r3, #4
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	18db      	adds	r3, r3, r3
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	0018      	movs	r0, r3
 8001ce6:	f000 fb07 	bl	80022f8 <get_rx_buffer>
 8001cea:	0003      	movs	r3, r0
 8001cec:	b21b      	sxth	r3, r3
 8001cee:	4323      	orrs	r3, r4
 8001cf0:	b219      	sxth	r1, r3
 8001cf2:	2014      	movs	r0, #20
 8001cf4:	183b      	adds	r3, r7, r0
 8001cf6:	881a      	ldrh	r2, [r3, #0]
 8001cf8:	197b      	adds	r3, r7, r5
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	18d2      	adds	r2, r2, r3
 8001cfe:	b289      	uxth	r1, r1
 8001d00:	4b20      	ldr	r3, [pc, #128]	@ (8001d84 <edit_multiple_registers+0x200>)
 8001d02:	0052      	lsls	r2, r2, #1
 8001d04:	52d1      	strh	r1, [r2, r3]

		// Handle the range boundaries of each writable register
		handle_range(first_register_address + i);
 8001d06:	197b      	adds	r3, r7, r5
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	b29a      	uxth	r2, r3
 8001d0c:	183b      	adds	r3, r7, r0
 8001d0e:	881b      	ldrh	r3, [r3, #0]
 8001d10:	18d3      	adds	r3, r2, r3
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	0018      	movs	r0, r3
 8001d16:	f000 f85f 	bl	8001dd8 <handle_range>
	for(uint8_t i = 0; i < num_registers; i++)
 8001d1a:	197b      	adds	r3, r7, r5
 8001d1c:	781a      	ldrb	r2, [r3, #0]
 8001d1e:	197b      	adds	r3, r7, r5
 8001d20:	3201      	adds	r2, #1
 8001d22:	701a      	strb	r2, [r3, #0]
 8001d24:	2317      	movs	r3, #23
 8001d26:	18fb      	adds	r3, r7, r3
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	2212      	movs	r2, #18
 8001d2e:	18ba      	adds	r2, r7, r2
 8001d30:	8812      	ldrh	r2, [r2, #0]
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d8c3      	bhi.n	8001cbe <edit_multiple_registers+0x13a>

	// TIMING WORKAROUND START
//	HAL_Delay(1);
	// TIMING WORKAROUND END

	int8_t status = modbus_send((*tx_len));
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	250f      	movs	r5, #15
 8001d3c:	197c      	adds	r4, r7, r5
 8001d3e:	0018      	movs	r0, r3
 8001d40:	f000 f90a 	bl	8001f58 <modbus_send>
 8001d44:	0003      	movs	r3, r0
 8001d46:	7023      	strb	r3, [r4, #0]

	if(status == MB_SUCCESS)
 8001d48:	197b      	adds	r3, r7, r5
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	b25b      	sxtb	r3, r3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d10d      	bne.n	8001d6e <edit_multiple_registers+0x1ea>
	{
		// Special Case Modbus Baud Rate Modification
		if((first_register_address <= 1) && last_register_address >= 1)
 8001d52:	2314      	movs	r3, #20
 8001d54:	18fb      	adds	r3, r7, r3
 8001d56:	881b      	ldrh	r3, [r3, #0]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d808      	bhi.n	8001d6e <edit_multiple_registers+0x1ea>
 8001d5c:	2310      	movs	r3, #16
 8001d5e:	18fb      	adds	r3, r7, r3
 8001d60:	881b      	ldrh	r3, [r3, #0]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <edit_multiple_registers+0x1ea>
		{
			return modbus_change_baud_rate();
 8001d66:	f000 fa41 	bl	80021ec <modbus_change_baud_rate>
 8001d6a:	0003      	movs	r3, r0
 8001d6c:	e003      	b.n	8001d76 <edit_multiple_registers+0x1f2>
		}
	}
	return status;
 8001d6e:	230f      	movs	r3, #15
 8001d70:	18fb      	adds	r3, r7, r3
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	b25b      	sxtb	r3, r3
}
 8001d76:	0018      	movs	r0, r3
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	b006      	add	sp, #24
 8001d7c:	bdb0      	pop	{r4, r5, r7, pc}
 8001d7e:	46c0      	nop			@ (mov r8, r8)
 8001d80:	20000568 	.word	0x20000568
 8001d84:	20000000 	.word	0x20000000

08001d88 <modbus_exception>:

int8_t modbus_exception(int8_t exception_code)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	0002      	movs	r2, r0
 8001d90:	1dfb      	adds	r3, r7, #7
 8001d92:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[0] = get_rx_buffer(0);
 8001d94:	2000      	movs	r0, #0
 8001d96:	f000 faaf 	bl	80022f8 <get_rx_buffer>
 8001d9a:	0003      	movs	r3, r0
 8001d9c:	001a      	movs	r2, r3
 8001d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001dd4 <modbus_exception+0x4c>)
 8001da0:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = get_rx_buffer(1) | 0x80;
 8001da2:	2001      	movs	r0, #1
 8001da4:	f000 faa8 	bl	80022f8 <get_rx_buffer>
 8001da8:	0003      	movs	r3, r0
 8001daa:	001a      	movs	r2, r3
 8001dac:	2380      	movs	r3, #128	@ 0x80
 8001dae:	425b      	negs	r3, r3
 8001db0:	4313      	orrs	r3, r2
 8001db2:	b2da      	uxtb	r2, r3
 8001db4:	4b07      	ldr	r3, [pc, #28]	@ (8001dd4 <modbus_exception+0x4c>)
 8001db6:	705a      	strb	r2, [r3, #1]
	modbus_tx_buffer[2] = exception_code - 3; // Subtract 3 to match the modbus defined error code value
 8001db8:	1dfb      	adds	r3, r7, #7
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	3b03      	subs	r3, #3
 8001dbe:	b2da      	uxtb	r2, r3
 8001dc0:	4b04      	ldr	r3, [pc, #16]	@ (8001dd4 <modbus_exception+0x4c>)
 8001dc2:	709a      	strb	r2, [r3, #2]

	return modbus_send(3);
 8001dc4:	2003      	movs	r0, #3
 8001dc6:	f000 f8c7 	bl	8001f58 <modbus_send>
 8001dca:	0003      	movs	r3, r0
}
 8001dcc:	0018      	movs	r0, r3
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	b002      	add	sp, #8
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	20000568 	.word	0x20000568

08001dd8 <handle_range>:

void handle_range(uint16_t holding_register)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	0002      	movs	r2, r0
 8001de0:	1dbb      	adds	r3, r7, #6
 8001de2:	801a      	strh	r2, [r3, #0]
	switch(holding_register)
 8001de4:	1dbb      	adds	r3, r7, #6
 8001de6:	881b      	ldrh	r3, [r3, #0]
 8001de8:	2b3f      	cmp	r3, #63	@ 0x3f
 8001dea:	d900      	bls.n	8001dee <handle_range+0x16>
 8001dec:	e0a8      	b.n	8001f40 <handle_range+0x168>
 8001dee:	009a      	lsls	r2, r3, #2
 8001df0:	4b55      	ldr	r3, [pc, #340]	@ (8001f48 <handle_range+0x170>)
 8001df2:	18d3      	adds	r3, r2, r3
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	469f      	mov	pc, r3
	{
		case MODBUS_ID:
		{
			if(holding_register_database[holding_register] > 0xFF)
 8001df8:	1dbb      	adds	r3, r7, #6
 8001dfa:	881a      	ldrh	r2, [r3, #0]
 8001dfc:	4b53      	ldr	r3, [pc, #332]	@ (8001f4c <handle_range+0x174>)
 8001dfe:	0052      	lsls	r2, r2, #1
 8001e00:	5ad3      	ldrh	r3, [r2, r3]
 8001e02:	2bff      	cmp	r3, #255	@ 0xff
 8001e04:	d800      	bhi.n	8001e08 <handle_range+0x30>
 8001e06:	e08c      	b.n	8001f22 <handle_range+0x14a>
			{
				holding_register_database[holding_register] = 0xFF;
 8001e08:	1dbb      	adds	r3, r7, #6
 8001e0a:	881a      	ldrh	r2, [r3, #0]
 8001e0c:	4b4f      	ldr	r3, [pc, #316]	@ (8001f4c <handle_range+0x174>)
 8001e0e:	0052      	lsls	r2, r2, #1
 8001e10:	21ff      	movs	r1, #255	@ 0xff
 8001e12:	52d1      	strh	r1, [r2, r3]
			}
			break;
 8001e14:	e085      	b.n	8001f22 <handle_range+0x14a>
		}
		case MB_BAUD_RATE:
		{
			if(holding_register_database[holding_register] < BAUD_RATE_4800)
 8001e16:	1dbb      	adds	r3, r7, #6
 8001e18:	881a      	ldrh	r2, [r3, #0]
 8001e1a:	4b4c      	ldr	r3, [pc, #304]	@ (8001f4c <handle_range+0x174>)
 8001e1c:	0052      	lsls	r2, r2, #1
 8001e1e:	5ad3      	ldrh	r3, [r2, r3]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d806      	bhi.n	8001e32 <handle_range+0x5a>
			{
				holding_register_database[holding_register] = BAUD_RATE_4800;
 8001e24:	1dbb      	adds	r3, r7, #6
 8001e26:	881a      	ldrh	r2, [r3, #0]
 8001e28:	4b48      	ldr	r3, [pc, #288]	@ (8001f4c <handle_range+0x174>)
 8001e2a:	0052      	lsls	r2, r2, #1
 8001e2c:	2102      	movs	r1, #2
 8001e2e:	52d1      	strh	r1, [r2, r3]
			}
			else if(holding_register_database[holding_register] > BAUD_RATE_256000)
			{
				holding_register_database[holding_register] = BAUD_RATE_256000;
			}
			break;
 8001e30:	e079      	b.n	8001f26 <handle_range+0x14e>
			else if(holding_register_database[holding_register] > BAUD_RATE_256000)
 8001e32:	1dbb      	adds	r3, r7, #6
 8001e34:	881a      	ldrh	r2, [r3, #0]
 8001e36:	4b45      	ldr	r3, [pc, #276]	@ (8001f4c <handle_range+0x174>)
 8001e38:	0052      	lsls	r2, r2, #1
 8001e3a:	5ad3      	ldrh	r3, [r2, r3]
 8001e3c:	2b09      	cmp	r3, #9
 8001e3e:	d800      	bhi.n	8001e42 <handle_range+0x6a>
 8001e40:	e071      	b.n	8001f26 <handle_range+0x14e>
				holding_register_database[holding_register] = BAUD_RATE_256000;
 8001e42:	1dbb      	adds	r3, r7, #6
 8001e44:	881a      	ldrh	r2, [r3, #0]
 8001e46:	4b41      	ldr	r3, [pc, #260]	@ (8001f4c <handle_range+0x174>)
 8001e48:	0052      	lsls	r2, r2, #1
 8001e4a:	2109      	movs	r1, #9
 8001e4c:	52d1      	strh	r1, [r2, r3]
			break;
 8001e4e:	e06a      	b.n	8001f26 <handle_range+0x14e>
		}
		case MB_TRANSMIT_TIMEOUT:
		{
			if(holding_register_database[holding_register] < 5)
 8001e50:	1dbb      	adds	r3, r7, #6
 8001e52:	881a      	ldrh	r2, [r3, #0]
 8001e54:	4b3d      	ldr	r3, [pc, #244]	@ (8001f4c <handle_range+0x174>)
 8001e56:	0052      	lsls	r2, r2, #1
 8001e58:	5ad3      	ldrh	r3, [r2, r3]
 8001e5a:	2b04      	cmp	r3, #4
 8001e5c:	d806      	bhi.n	8001e6c <handle_range+0x94>
			{
				holding_register_database[holding_register] = 5;
 8001e5e:	1dbb      	adds	r3, r7, #6
 8001e60:	881a      	ldrh	r2, [r3, #0]
 8001e62:	4b3a      	ldr	r3, [pc, #232]	@ (8001f4c <handle_range+0x174>)
 8001e64:	0052      	lsls	r2, r2, #1
 8001e66:	2105      	movs	r1, #5
 8001e68:	52d1      	strh	r1, [r2, r3]
			}
			else if(holding_register_database[holding_register] > 1000)
			{
				holding_register_database[holding_register] = 1000;
			}
			break;
 8001e6a:	e05e      	b.n	8001f2a <handle_range+0x152>
			else if(holding_register_database[holding_register] > 1000)
 8001e6c:	1dbb      	adds	r3, r7, #6
 8001e6e:	881a      	ldrh	r2, [r3, #0]
 8001e70:	4b36      	ldr	r3, [pc, #216]	@ (8001f4c <handle_range+0x174>)
 8001e72:	0052      	lsls	r2, r2, #1
 8001e74:	5ad2      	ldrh	r2, [r2, r3]
 8001e76:	23fa      	movs	r3, #250	@ 0xfa
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d955      	bls.n	8001f2a <handle_range+0x152>
				holding_register_database[holding_register] = 1000;
 8001e7e:	1dbb      	adds	r3, r7, #6
 8001e80:	881a      	ldrh	r2, [r3, #0]
 8001e82:	4b32      	ldr	r3, [pc, #200]	@ (8001f4c <handle_range+0x174>)
 8001e84:	0052      	lsls	r2, r2, #1
 8001e86:	21fa      	movs	r1, #250	@ 0xfa
 8001e88:	0089      	lsls	r1, r1, #2
 8001e8a:	52d1      	strh	r1, [r2, r3]
			break;
 8001e8c:	e04d      	b.n	8001f2a <handle_range+0x152>
		}
		case MB_TRANSMIT_RETRIES:
		{
			if(holding_register_database[holding_register] > 5)
 8001e8e:	1dbb      	adds	r3, r7, #6
 8001e90:	881a      	ldrh	r2, [r3, #0]
 8001e92:	4b2e      	ldr	r3, [pc, #184]	@ (8001f4c <handle_range+0x174>)
 8001e94:	0052      	lsls	r2, r2, #1
 8001e96:	5ad3      	ldrh	r3, [r2, r3]
 8001e98:	2b05      	cmp	r3, #5
 8001e9a:	d948      	bls.n	8001f2e <handle_range+0x156>
			{
				holding_register_database[holding_register] = 5;
 8001e9c:	1dbb      	adds	r3, r7, #6
 8001e9e:	881a      	ldrh	r2, [r3, #0]
 8001ea0:	4b2a      	ldr	r3, [pc, #168]	@ (8001f4c <handle_range+0x174>)
 8001ea2:	0052      	lsls	r2, r2, #1
 8001ea4:	2105      	movs	r1, #5
 8001ea6:	52d1      	strh	r1, [r2, r3]
			}
			break;
 8001ea8:	e041      	b.n	8001f2e <handle_range+0x156>
		}
		case MB_ERRORS:
		{
			if(holding_register_database[holding_register] > 0x3FF)
 8001eaa:	1dbb      	adds	r3, r7, #6
 8001eac:	881a      	ldrh	r2, [r3, #0]
 8001eae:	4b27      	ldr	r3, [pc, #156]	@ (8001f4c <handle_range+0x174>)
 8001eb0:	0052      	lsls	r2, r2, #1
 8001eb2:	5ad2      	ldrh	r2, [r2, r3]
 8001eb4:	2380      	movs	r3, #128	@ 0x80
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d33a      	bcc.n	8001f32 <handle_range+0x15a>
			{
				holding_register_database[holding_register] = 0x3FF;
 8001ebc:	1dbb      	adds	r3, r7, #6
 8001ebe:	881a      	ldrh	r2, [r3, #0]
 8001ec0:	4b22      	ldr	r3, [pc, #136]	@ (8001f4c <handle_range+0x174>)
 8001ec2:	0052      	lsls	r2, r2, #1
 8001ec4:	4922      	ldr	r1, [pc, #136]	@ (8001f50 <handle_range+0x178>)
 8001ec6:	52d1      	strh	r1, [r2, r3]
			}
			break;
 8001ec8:	e033      	b.n	8001f32 <handle_range+0x15a>
		}
		case I2C_ERRORS:
		{
			if(holding_register_database[holding_register] > 0x7F)
 8001eca:	1dbb      	adds	r3, r7, #6
 8001ecc:	881a      	ldrh	r2, [r3, #0]
 8001ece:	4b1f      	ldr	r3, [pc, #124]	@ (8001f4c <handle_range+0x174>)
 8001ed0:	0052      	lsls	r2, r2, #1
 8001ed2:	5ad3      	ldrh	r3, [r2, r3]
 8001ed4:	2b7f      	cmp	r3, #127	@ 0x7f
 8001ed6:	d92e      	bls.n	8001f36 <handle_range+0x15e>
			{
				holding_register_database[holding_register] = 0x7F;
 8001ed8:	1dbb      	adds	r3, r7, #6
 8001eda:	881a      	ldrh	r2, [r3, #0]
 8001edc:	4b1b      	ldr	r3, [pc, #108]	@ (8001f4c <handle_range+0x174>)
 8001ede:	0052      	lsls	r2, r2, #1
 8001ee0:	217f      	movs	r1, #127	@ 0x7f
 8001ee2:	52d1      	strh	r1, [r2, r3]
			}
			break;
 8001ee4:	e027      	b.n	8001f36 <handle_range+0x15e>
		}
		case I2C_SHUTDOWN ... AUTOPILOT:
		{
			if(holding_register_database[holding_register] > 1)
 8001ee6:	1dbb      	adds	r3, r7, #6
 8001ee8:	881a      	ldrh	r2, [r3, #0]
 8001eea:	4b18      	ldr	r3, [pc, #96]	@ (8001f4c <handle_range+0x174>)
 8001eec:	0052      	lsls	r2, r2, #1
 8001eee:	5ad3      	ldrh	r3, [r2, r3]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d922      	bls.n	8001f3a <handle_range+0x162>
			{
				holding_register_database[holding_register] = 1;
 8001ef4:	1dbb      	adds	r3, r7, #6
 8001ef6:	881a      	ldrh	r2, [r3, #0]
 8001ef8:	4b14      	ldr	r3, [pc, #80]	@ (8001f4c <handle_range+0x174>)
 8001efa:	0052      	lsls	r2, r2, #1
 8001efc:	2101      	movs	r1, #1
 8001efe:	52d1      	strh	r1, [r2, r3]
			}
			break;
 8001f00:	e01b      	b.n	8001f3a <handle_range+0x162>
		}
		case ACTUATOR_A_TARGET ... ACTUATOR_C_TARGET:
		{
			if(holding_register_database[holding_register] > 0x0FFF)
 8001f02:	1dbb      	adds	r3, r7, #6
 8001f04:	881a      	ldrh	r2, [r3, #0]
 8001f06:	4b11      	ldr	r3, [pc, #68]	@ (8001f4c <handle_range+0x174>)
 8001f08:	0052      	lsls	r2, r2, #1
 8001f0a:	5ad2      	ldrh	r2, [r2, r3]
 8001f0c:	2380      	movs	r3, #128	@ 0x80
 8001f0e:	015b      	lsls	r3, r3, #5
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d314      	bcc.n	8001f3e <handle_range+0x166>
			{
				holding_register_database[holding_register] = 0x0FFF;
 8001f14:	1dbb      	adds	r3, r7, #6
 8001f16:	881a      	ldrh	r2, [r3, #0]
 8001f18:	4b0c      	ldr	r3, [pc, #48]	@ (8001f4c <handle_range+0x174>)
 8001f1a:	0052      	lsls	r2, r2, #1
 8001f1c:	490d      	ldr	r1, [pc, #52]	@ (8001f54 <handle_range+0x17c>)
 8001f1e:	52d1      	strh	r1, [r2, r3]
			}
			break;
 8001f20:	e00d      	b.n	8001f3e <handle_range+0x166>
			break;
 8001f22:	46c0      	nop			@ (mov r8, r8)
 8001f24:	e00c      	b.n	8001f40 <handle_range+0x168>
			break;
 8001f26:	46c0      	nop			@ (mov r8, r8)
 8001f28:	e00a      	b.n	8001f40 <handle_range+0x168>
			break;
 8001f2a:	46c0      	nop			@ (mov r8, r8)
 8001f2c:	e008      	b.n	8001f40 <handle_range+0x168>
			break;
 8001f2e:	46c0      	nop			@ (mov r8, r8)
 8001f30:	e006      	b.n	8001f40 <handle_range+0x168>
			break;
 8001f32:	46c0      	nop			@ (mov r8, r8)
 8001f34:	e004      	b.n	8001f40 <handle_range+0x168>
			break;
 8001f36:	46c0      	nop			@ (mov r8, r8)
 8001f38:	e002      	b.n	8001f40 <handle_range+0x168>
			break;
 8001f3a:	46c0      	nop			@ (mov r8, r8)
 8001f3c:	e000      	b.n	8001f40 <handle_range+0x168>
			break;
 8001f3e:	46c0      	nop			@ (mov r8, r8)
		}
	}
}
 8001f40:	46c0      	nop			@ (mov r8, r8)
 8001f42:	46bd      	mov	sp, r7
 8001f44:	b002      	add	sp, #8
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	080086e8 	.word	0x080086e8
 8001f4c:	20000000 	.word	0x20000000
 8001f50:	000003ff 	.word	0x000003ff
 8001f54:	00000fff 	.word	0x00000fff

08001f58 <modbus_send>:
#endif // MB_SLAVE

// General Modbus Functions -------------------------------------------------------------------

int8_t modbus_send(uint8_t size)
{
 8001f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	0002      	movs	r2, r0
 8001f60:	1dfb      	adds	r3, r7, #7
 8001f62:	701a      	strb	r2, [r3, #0]
	int8_t status = HAL_OK;
 8001f64:	250f      	movs	r5, #15
 8001f66:	197b      	adds	r3, r7, r5
 8001f68:	2200      	movs	r2, #0
 8001f6a:	701a      	strb	r2, [r3, #0]
	// Append CRC (low byte then high byte)
	uint16_t crc = crc_16(modbus_tx_buffer, size);
 8001f6c:	260c      	movs	r6, #12
 8001f6e:	19bc      	adds	r4, r7, r6
 8001f70:	1dfb      	adds	r3, r7, #7
 8001f72:	781a      	ldrb	r2, [r3, #0]
 8001f74:	4b1e      	ldr	r3, [pc, #120]	@ (8001ff0 <modbus_send+0x98>)
 8001f76:	0011      	movs	r1, r2
 8001f78:	0018      	movs	r0, r3
 8001f7a:	f000 fa0d 	bl	8002398 <crc_16>
 8001f7e:	0003      	movs	r3, r0
 8001f80:	8023      	strh	r3, [r4, #0]
	modbus_tx_buffer[size] = low_byte(crc);
 8001f82:	1dfb      	adds	r3, r7, #7
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	19ba      	adds	r2, r7, r6
 8001f88:	8812      	ldrh	r2, [r2, #0]
 8001f8a:	b2d1      	uxtb	r1, r2
 8001f8c:	4a18      	ldr	r2, [pc, #96]	@ (8001ff0 <modbus_send+0x98>)
 8001f8e:	54d1      	strb	r1, [r2, r3]
	modbus_tx_buffer[size + 1] = high_byte(crc);
 8001f90:	19bb      	adds	r3, r7, r6
 8001f92:	881b      	ldrh	r3, [r3, #0]
 8001f94:	0a1b      	lsrs	r3, r3, #8
 8001f96:	b29a      	uxth	r2, r3
 8001f98:	1dfb      	adds	r3, r7, #7
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	b2d1      	uxtb	r1, r2
 8001fa0:	4a13      	ldr	r2, [pc, #76]	@ (8001ff0 <modbus_send+0x98>)
 8001fa2:	54d1      	strb	r1, [r2, r3]

	uart_tx_int = 0; // This will enable tx timeout monitoring
 8001fa4:	4b13      	ldr	r3, [pc, #76]	@ (8001ff4 <modbus_send+0x9c>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	701a      	strb	r2, [r3, #0]
	tx_time = HAL_GetTick();
 8001faa:	f001 f8ad 	bl	8003108 <HAL_GetTick>
 8001fae:	0002      	movs	r2, r0
 8001fb0:	4b11      	ldr	r3, [pc, #68]	@ (8001ff8 <modbus_send+0xa0>)
 8001fb2:	601a      	str	r2, [r3, #0]
	status = HAL_UART_Transmit_DMA(&huart1, modbus_tx_buffer, size + 2);
 8001fb4:	1dfb      	adds	r3, r7, #7
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	3302      	adds	r3, #2
 8001fbc:	b29a      	uxth	r2, r3
 8001fbe:	490c      	ldr	r1, [pc, #48]	@ (8001ff0 <modbus_send+0x98>)
 8001fc0:	4b0e      	ldr	r3, [pc, #56]	@ (8001ffc <modbus_send+0xa4>)
 8001fc2:	0018      	movs	r0, r3
 8001fc4:	f004 fb32 	bl	800662c <HAL_UART_Transmit_DMA>
 8001fc8:	0003      	movs	r3, r0
 8001fca:	001a      	movs	r2, r3
 8001fcc:	197b      	adds	r3, r7, r5
 8001fce:	701a      	strb	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(&hdma_usart1_tx, DMA_IT_HT);
 8001fd0:	4b0b      	ldr	r3, [pc, #44]	@ (8002000 <modbus_send+0xa8>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	4b0a      	ldr	r3, [pc, #40]	@ (8002000 <modbus_send+0xa8>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2104      	movs	r1, #4
 8001fdc:	438a      	bics	r2, r1
 8001fde:	601a      	str	r2, [r3, #0]
	return status;
 8001fe0:	197b      	adds	r3, r7, r5
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	b25b      	sxtb	r3, r3
}
 8001fe6:	0018      	movs	r0, r3
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	b005      	add	sp, #20
 8001fec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fee:	46c0      	nop			@ (mov r8, r8)
 8001ff0:	20000568 	.word	0x20000568
 8001ff4:	2000009a 	.word	0x2000009a
 8001ff8:	20000764 	.word	0x20000764
 8001ffc:	200002d0 	.word	0x200002d0
 8002000:	200003c0 	.word	0x200003c0

08002004 <modbus_reset>:

int8_t modbus_reset()
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
	int8_t status = 0;
 800200a:	1dfb      	adds	r3, r7, #7
 800200c:	2200      	movs	r2, #0
 800200e:	701a      	strb	r2, [r3, #0]
	status = HAL_UART_Abort(&huart1);
 8002010:	4b30      	ldr	r3, [pc, #192]	@ (80020d4 <modbus_reset+0xd0>)
 8002012:	0018      	movs	r0, r3
 8002014:	f004 fb9c 	bl	8006750 <HAL_UART_Abort>
 8002018:	0003      	movs	r3, r0
 800201a:	001a      	movs	r2, r3
 800201c:	1dfb      	adds	r3, r7, #7
 800201e:	701a      	strb	r2, [r3, #0]
	status |= HAL_UART_DeInit(&huart1);
 8002020:	4b2c      	ldr	r3, [pc, #176]	@ (80020d4 <modbus_reset+0xd0>)
 8002022:	0018      	movs	r0, r3
 8002024:	f004 fac2 	bl	80065ac <HAL_UART_DeInit>
 8002028:	0003      	movs	r3, r0
 800202a:	b259      	sxtb	r1, r3
 800202c:	1dfb      	adds	r3, r7, #7
 800202e:	1dfa      	adds	r2, r7, #7
 8002030:	7812      	ldrb	r2, [r2, #0]
 8002032:	430a      	orrs	r2, r1
 8002034:	701a      	strb	r2, [r3, #0]
	__USART1_FORCE_RESET();
 8002036:	4b28      	ldr	r3, [pc, #160]	@ (80020d8 <modbus_reset+0xd4>)
 8002038:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800203a:	4b27      	ldr	r3, [pc, #156]	@ (80020d8 <modbus_reset+0xd4>)
 800203c:	2180      	movs	r1, #128	@ 0x80
 800203e:	01c9      	lsls	r1, r1, #7
 8002040:	430a      	orrs	r2, r1
 8002042:	631a      	str	r2, [r3, #48]	@ 0x30
	HAL_Delay(100);
 8002044:	2064      	movs	r0, #100	@ 0x64
 8002046:	f001 f869 	bl	800311c <HAL_Delay>
	__USART1_RELEASE_RESET();
 800204a:	4b23      	ldr	r3, [pc, #140]	@ (80020d8 <modbus_reset+0xd4>)
 800204c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800204e:	4b22      	ldr	r3, [pc, #136]	@ (80020d8 <modbus_reset+0xd4>)
 8002050:	4922      	ldr	r1, [pc, #136]	@ (80020dc <modbus_reset+0xd8>)
 8002052:	400a      	ands	r2, r1
 8002054:	631a      	str	r2, [r3, #48]	@ 0x30
	status = HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0);
 8002056:	481f      	ldr	r0, [pc, #124]	@ (80020d4 <modbus_reset+0xd0>)
 8002058:	2300      	movs	r3, #0
 800205a:	2200      	movs	r2, #0
 800205c:	2100      	movs	r1, #0
 800205e:	f005 fe15 	bl	8007c8c <HAL_RS485Ex_Init>
 8002062:	0003      	movs	r3, r0
 8002064:	001a      	movs	r2, r3
 8002066:	1dfb      	adds	r3, r7, #7
 8002068:	701a      	strb	r2, [r3, #0]
	status |= HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8);
 800206a:	4b1a      	ldr	r3, [pc, #104]	@ (80020d4 <modbus_reset+0xd0>)
 800206c:	2100      	movs	r1, #0
 800206e:	0018      	movs	r0, r3
 8002070:	f005 fed0 	bl	8007e14 <HAL_UARTEx_SetTxFifoThreshold>
 8002074:	0003      	movs	r3, r0
 8002076:	b259      	sxtb	r1, r3
 8002078:	1dfb      	adds	r3, r7, #7
 800207a:	1dfa      	adds	r2, r7, #7
 800207c:	7812      	ldrb	r2, [r2, #0]
 800207e:	430a      	orrs	r2, r1
 8002080:	701a      	strb	r2, [r3, #0]
	status |= HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8);
 8002082:	4b14      	ldr	r3, [pc, #80]	@ (80020d4 <modbus_reset+0xd0>)
 8002084:	2100      	movs	r1, #0
 8002086:	0018      	movs	r0, r3
 8002088:	f005 ff04 	bl	8007e94 <HAL_UARTEx_SetRxFifoThreshold>
 800208c:	0003      	movs	r3, r0
 800208e:	b259      	sxtb	r1, r3
 8002090:	1dfb      	adds	r3, r7, #7
 8002092:	1dfa      	adds	r2, r7, #7
 8002094:	7812      	ldrb	r2, [r2, #0]
 8002096:	430a      	orrs	r2, r1
 8002098:	701a      	strb	r2, [r3, #0]
	status |= HAL_UARTEx_DisableFifoMode(&huart1);
 800209a:	4b0e      	ldr	r3, [pc, #56]	@ (80020d4 <modbus_reset+0xd0>)
 800209c:	0018      	movs	r0, r3
 800209e:	f005 fe7f 	bl	8007da0 <HAL_UARTEx_DisableFifoMode>
 80020a2:	0003      	movs	r3, r0
 80020a4:	b259      	sxtb	r1, r3
 80020a6:	1dfb      	adds	r3, r7, #7
 80020a8:	1dfa      	adds	r2, r7, #7
 80020aa:	7812      	ldrb	r2, [r2, #0]
 80020ac:	430a      	orrs	r2, r1
 80020ae:	701a      	strb	r2, [r3, #0]
	if(status != HAL_OK)
 80020b0:	1dfb      	adds	r3, r7, #7
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	b25b      	sxtb	r3, r3
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d004      	beq.n	80020c4 <modbus_reset+0xc0>
	{
		return handle_modbus_error(MB_FATAL_ERROR);
 80020ba:	2015      	movs	r0, #21
 80020bc:	f000 f94e 	bl	800235c <handle_modbus_error>
 80020c0:	0003      	movs	r3, r0
 80020c2:	e002      	b.n	80020ca <modbus_reset+0xc6>
	}
	return status;
 80020c4:	1dfb      	adds	r3, r7, #7
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	b25b      	sxtb	r3, r3
}
 80020ca:	0018      	movs	r0, r3
 80020cc:	46bd      	mov	sp, r7
 80020ce:	b002      	add	sp, #8
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	46c0      	nop			@ (mov r8, r8)
 80020d4:	200002d0 	.word	0x200002d0
 80020d8:	40021000 	.word	0x40021000
 80020dc:	ffffbfff 	.word	0xffffbfff

080020e0 <modbus_set_rx>:

int8_t modbus_set_rx()
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
	int8_t status = HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rx_chunk, 6);
 80020e6:	490c      	ldr	r1, [pc, #48]	@ (8002118 <modbus_set_rx+0x38>)
 80020e8:	4b0c      	ldr	r3, [pc, #48]	@ (800211c <modbus_set_rx+0x3c>)
 80020ea:	2206      	movs	r2, #6
 80020ec:	0018      	movs	r0, r3
 80020ee:	f005 ff13 	bl	8007f18 <HAL_UARTEx_ReceiveToIdle_DMA>
 80020f2:	0003      	movs	r3, r0
 80020f4:	001a      	movs	r2, r3
 80020f6:	1dfb      	adds	r3, r7, #7
 80020f8:	701a      	strb	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80020fa:	4b09      	ldr	r3, [pc, #36]	@ (8002120 <modbus_set_rx+0x40>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	4b07      	ldr	r3, [pc, #28]	@ (8002120 <modbus_set_rx+0x40>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2104      	movs	r1, #4
 8002106:	438a      	bics	r2, r1
 8002108:	601a      	str	r2, [r3, #0]

	return status;
 800210a:	1dfb      	adds	r3, r7, #7
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	b25b      	sxtb	r3, r3
}
 8002110:	0018      	movs	r0, r3
 8002112:	46bd      	mov	sp, r7
 8002114:	b002      	add	sp, #8
 8002116:	bd80      	pop	{r7, pc}
 8002118:	20000668 	.word	0x20000668
 800211c:	200002d0 	.word	0x200002d0
 8002120:	20000364 	.word	0x20000364

08002124 <monitor_modbus>:

int8_t monitor_modbus()
{
 8002124:	b590      	push	{r4, r7, lr}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
	int8_t status = MB_SUCCESS;
 800212a:	1dfb      	adds	r3, r7, #7
 800212c:	2200      	movs	r2, #0
 800212e:	701a      	strb	r2, [r3, #0]

	// Chunk miss handling
	status = handle_chunk_miss();
 8002130:	1dfc      	adds	r4, r7, #7
 8002132:	f000 f977 	bl	8002424 <handle_chunk_miss>
 8002136:	0003      	movs	r3, r0
 8002138:	7023      	strb	r3, [r4, #0]
	if(status != MB_SUCCESS)
 800213a:	1dfb      	adds	r3, r7, #7
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	b25b      	sxtb	r3, r3
 8002140:	2b00      	cmp	r3, #0
 8002142:	d012      	beq.n	800216a <monitor_modbus+0x46>
	{
		status = modbus_reset();
 8002144:	1dfc      	adds	r4, r7, #7
 8002146:	f7ff ff5d 	bl	8002004 <modbus_reset>
 800214a:	0003      	movs	r3, r0
 800214c:	7023      	strb	r3, [r4, #0]
		if(status != MB_SUCCESS)
 800214e:	1dfb      	adds	r3, r7, #7
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	b25b      	sxtb	r3, r3
 8002154:	2b00      	cmp	r3, #0
 8002156:	d003      	beq.n	8002160 <monitor_modbus+0x3c>
		{
			return status;
 8002158:	1dfb      	adds	r3, r7, #7
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	b25b      	sxtb	r3, r3
 800215e:	e039      	b.n	80021d4 <monitor_modbus+0xb0>
		}
		return handle_modbus_error(MB_UART_ERROR);
 8002160:	2014      	movs	r0, #20
 8002162:	f000 f8fb 	bl	800235c <handle_modbus_error>
 8002166:	0003      	movs	r3, r0
 8002168:	e034      	b.n	80021d4 <monitor_modbus+0xb0>
	}

	// Uart error handling
	if(uart_err_int)
 800216a:	4b1c      	ldr	r3, [pc, #112]	@ (80021dc <monitor_modbus+0xb8>)
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	b2db      	uxtb	r3, r3
 8002170:	2b00      	cmp	r3, #0
 8002172:	d015      	beq.n	80021a0 <monitor_modbus+0x7c>
	{
		uart_err_int = 0;
 8002174:	4b19      	ldr	r3, [pc, #100]	@ (80021dc <monitor_modbus+0xb8>)
 8002176:	2200      	movs	r2, #0
 8002178:	701a      	strb	r2, [r3, #0]
		status = modbus_reset();
 800217a:	1dfc      	adds	r4, r7, #7
 800217c:	f7ff ff42 	bl	8002004 <modbus_reset>
 8002180:	0003      	movs	r3, r0
 8002182:	7023      	strb	r3, [r4, #0]
		if(status != MB_SUCCESS)
 8002184:	1dfb      	adds	r3, r7, #7
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	b25b      	sxtb	r3, r3
 800218a:	2b00      	cmp	r3, #0
 800218c:	d003      	beq.n	8002196 <monitor_modbus+0x72>
		{
			return status;
 800218e:	1dfb      	adds	r3, r7, #7
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	b25b      	sxtb	r3, r3
 8002194:	e01e      	b.n	80021d4 <monitor_modbus+0xb0>
		}
		return handle_modbus_error(MB_UART_ERROR);
 8002196:	2014      	movs	r0, #20
 8002198:	f000 f8e0 	bl	800235c <handle_modbus_error>
 800219c:	0003      	movs	r3, r0
 800219e:	e019      	b.n	80021d4 <monitor_modbus+0xb0>
	}

	// TX timeout handling
	if(!uart_tx_int)
 80021a0:	4b0f      	ldr	r3, [pc, #60]	@ (80021e0 <monitor_modbus+0xbc>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d111      	bne.n	80021ce <monitor_modbus+0xaa>
	{
		if(HAL_GetTick() - tx_time >= holding_register_database[MB_TRANSMIT_TIMEOUT])
 80021aa:	f000 ffad 	bl	8003108 <HAL_GetTick>
 80021ae:	0002      	movs	r2, r0
 80021b0:	4b0c      	ldr	r3, [pc, #48]	@ (80021e4 <monitor_modbus+0xc0>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	4a0c      	ldr	r2, [pc, #48]	@ (80021e8 <monitor_modbus+0xc4>)
 80021b8:	8892      	ldrh	r2, [r2, #4]
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d304      	bcc.n	80021c8 <monitor_modbus+0xa4>
		{
			return handle_modbus_error(MB_TX_TIMEOUT);
 80021be:	2012      	movs	r0, #18
 80021c0:	f000 f8cc 	bl	800235c <handle_modbus_error>
 80021c4:	0003      	movs	r3, r0
 80021c6:	e005      	b.n	80021d4 <monitor_modbus+0xb0>
		}
		status = HAL_BUSY;
 80021c8:	1dfb      	adds	r3, r7, #7
 80021ca:	2202      	movs	r2, #2
 80021cc:	701a      	strb	r2, [r3, #0]
			}
			status = HAL_BUSY;
		}
	}
#endif
	return status;
 80021ce:	1dfb      	adds	r3, r7, #7
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	b25b      	sxtb	r3, r3
}
 80021d4:	0018      	movs	r0, r3
 80021d6:	46bd      	mov	sp, r7
 80021d8:	b003      	add	sp, #12
 80021da:	bd90      	pop	{r4, r7, pc}
 80021dc:	20000773 	.word	0x20000773
 80021e0:	2000009a 	.word	0x2000009a
 80021e4:	20000764 	.word	0x20000764
 80021e8:	20000000 	.word	0x20000000

080021ec <modbus_change_baud_rate>:

	return status;
}

int8_t modbus_change_baud_rate()
{
 80021ec:	b590      	push	{r4, r7, lr}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
	int8_t status = 0;
 80021f2:	1dfb      	adds	r3, r7, #7
 80021f4:	2200      	movs	r2, #0
 80021f6:	701a      	strb	r2, [r3, #0]

	switch(holding_register_database[MB_BAUD_RATE])
 80021f8:	4b3c      	ldr	r3, [pc, #240]	@ (80022ec <modbus_change_baud_rate+0x100>)
 80021fa:	885b      	ldrh	r3, [r3, #2]
 80021fc:	2b09      	cmp	r3, #9
 80021fe:	d82c      	bhi.n	800225a <modbus_change_baud_rate+0x6e>
 8002200:	009a      	lsls	r2, r3, #2
 8002202:	4b3b      	ldr	r3, [pc, #236]	@ (80022f0 <modbus_change_baud_rate+0x104>)
 8002204:	18d3      	adds	r3, r2, r3
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	469f      	mov	pc, r3
	{
		case BAUD_RATE_4800:
		{
			huart1.Init.BaudRate = 4800;
 800220a:	4b3a      	ldr	r3, [pc, #232]	@ (80022f4 <modbus_change_baud_rate+0x108>)
 800220c:	2296      	movs	r2, #150	@ 0x96
 800220e:	0152      	lsls	r2, r2, #5
 8002210:	605a      	str	r2, [r3, #4]
			break;
 8002212:	e049      	b.n	80022a8 <modbus_change_baud_rate+0xbc>
		}
		case BAUD_RATE_9600:
		{
			huart1.Init.BaudRate = 9600;
 8002214:	4b37      	ldr	r3, [pc, #220]	@ (80022f4 <modbus_change_baud_rate+0x108>)
 8002216:	2296      	movs	r2, #150	@ 0x96
 8002218:	0192      	lsls	r2, r2, #6
 800221a:	605a      	str	r2, [r3, #4]
			break;
 800221c:	e044      	b.n	80022a8 <modbus_change_baud_rate+0xbc>
		}
		case BAUD_RATE_19200:
		{
			huart1.Init.BaudRate = 19200;
 800221e:	4b35      	ldr	r3, [pc, #212]	@ (80022f4 <modbus_change_baud_rate+0x108>)
 8002220:	2296      	movs	r2, #150	@ 0x96
 8002222:	01d2      	lsls	r2, r2, #7
 8002224:	605a      	str	r2, [r3, #4]
			break;
 8002226:	e03f      	b.n	80022a8 <modbus_change_baud_rate+0xbc>
		}
		case BAUD_RATE_38400:
		{
			huart1.Init.BaudRate = 38400;
 8002228:	4b32      	ldr	r3, [pc, #200]	@ (80022f4 <modbus_change_baud_rate+0x108>)
 800222a:	2296      	movs	r2, #150	@ 0x96
 800222c:	0212      	lsls	r2, r2, #8
 800222e:	605a      	str	r2, [r3, #4]
			break;
 8002230:	e03a      	b.n	80022a8 <modbus_change_baud_rate+0xbc>
		}
		case BAUD_RATE_57600:
		{
			huart1.Init.BaudRate = 57600;
 8002232:	4b30      	ldr	r3, [pc, #192]	@ (80022f4 <modbus_change_baud_rate+0x108>)
 8002234:	22e1      	movs	r2, #225	@ 0xe1
 8002236:	0212      	lsls	r2, r2, #8
 8002238:	605a      	str	r2, [r3, #4]
			break;
 800223a:	e035      	b.n	80022a8 <modbus_change_baud_rate+0xbc>
		}
		case BAUD_RATE_115200:
		{
			huart1.Init.BaudRate = 115200;
 800223c:	4b2d      	ldr	r3, [pc, #180]	@ (80022f4 <modbus_change_baud_rate+0x108>)
 800223e:	22e1      	movs	r2, #225	@ 0xe1
 8002240:	0252      	lsls	r2, r2, #9
 8002242:	605a      	str	r2, [r3, #4]
			break;
 8002244:	e030      	b.n	80022a8 <modbus_change_baud_rate+0xbc>
		}
		case BAUD_RATE_128000:
		{
			huart1.Init.BaudRate = 128000;
 8002246:	4b2b      	ldr	r3, [pc, #172]	@ (80022f4 <modbus_change_baud_rate+0x108>)
 8002248:	22fa      	movs	r2, #250	@ 0xfa
 800224a:	0252      	lsls	r2, r2, #9
 800224c:	605a      	str	r2, [r3, #4]
			break;
 800224e:	e02b      	b.n	80022a8 <modbus_change_baud_rate+0xbc>
		}
		case BAUD_RATE_256000:
		{
			huart1.Init.BaudRate = 256000;
 8002250:	4b28      	ldr	r3, [pc, #160]	@ (80022f4 <modbus_change_baud_rate+0x108>)
 8002252:	22fa      	movs	r2, #250	@ 0xfa
 8002254:	0292      	lsls	r2, r2, #10
 8002256:	605a      	str	r2, [r3, #4]
			break;
 8002258:	e026      	b.n	80022a8 <modbus_change_baud_rate+0xbc>
		}
		default:
		{
			holding_register_database[MB_BAUD_RATE] = BAUD_RATE_9600;
 800225a:	4b24      	ldr	r3, [pc, #144]	@ (80022ec <modbus_change_baud_rate+0x100>)
 800225c:	2203      	movs	r2, #3
 800225e:	805a      	strh	r2, [r3, #2]
			huart1.Init.BaudRate = 9600;
 8002260:	4b24      	ldr	r3, [pc, #144]	@ (80022f4 <modbus_change_baud_rate+0x108>)
 8002262:	2296      	movs	r2, #150	@ 0x96
 8002264:	0192      	lsls	r2, r2, #6
 8002266:	605a      	str	r2, [r3, #4]
			status = UART_SetConfig(&huart1);
 8002268:	4b22      	ldr	r3, [pc, #136]	@ (80022f4 <modbus_change_baud_rate+0x108>)
 800226a:	0018      	movs	r0, r3
 800226c:	f004 feda 	bl	8007024 <UART_SetConfig>
 8002270:	0003      	movs	r3, r0
 8002272:	001a      	movs	r2, r3
 8002274:	1dfb      	adds	r3, r7, #7
 8002276:	701a      	strb	r2, [r3, #0]
			if(status == HAL_OK)
 8002278:	1dfb      	adds	r3, r7, #7
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	b25b      	sxtb	r3, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d10d      	bne.n	800229e <modbus_change_baud_rate+0xb2>
			{
				status = modbus_reset();
 8002282:	1dfc      	adds	r4, r7, #7
 8002284:	f7ff febe 	bl	8002004 <modbus_reset>
 8002288:	0003      	movs	r3, r0
 800228a:	7023      	strb	r3, [r4, #0]
				if(status != HAL_OK)
 800228c:	1dfb      	adds	r3, r7, #7
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	b25b      	sxtb	r3, r3
 8002292:	2b00      	cmp	r3, #0
 8002294:	d003      	beq.n	800229e <modbus_change_baud_rate+0xb2>
				{
					return status;
 8002296:	1dfb      	adds	r3, r7, #7
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	b25b      	sxtb	r3, r3
 800229c:	e022      	b.n	80022e4 <modbus_change_baud_rate+0xf8>
				}
			}
			return handle_modbus_error(RANGE_ERROR);
 800229e:	200e      	movs	r0, #14
 80022a0:	f000 f85c 	bl	800235c <handle_modbus_error>
 80022a4:	0003      	movs	r3, r0
 80022a6:	e01d      	b.n	80022e4 <modbus_change_baud_rate+0xf8>
		}
	}
	status = UART_SetConfig(&huart1);
 80022a8:	4b12      	ldr	r3, [pc, #72]	@ (80022f4 <modbus_change_baud_rate+0x108>)
 80022aa:	0018      	movs	r0, r3
 80022ac:	f004 feba 	bl	8007024 <UART_SetConfig>
 80022b0:	0003      	movs	r3, r0
 80022b2:	001a      	movs	r2, r3
 80022b4:	1dfb      	adds	r3, r7, #7
 80022b6:	701a      	strb	r2, [r3, #0]
	if(status == HAL_OK)
 80022b8:	1dfb      	adds	r3, r7, #7
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	b25b      	sxtb	r3, r3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d10d      	bne.n	80022de <modbus_change_baud_rate+0xf2>
	{
		// Log error, reset UART
		status = modbus_reset();
 80022c2:	1dfc      	adds	r4, r7, #7
 80022c4:	f7ff fe9e 	bl	8002004 <modbus_reset>
 80022c8:	0003      	movs	r3, r0
 80022ca:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK)
 80022cc:	1dfb      	adds	r3, r7, #7
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	b25b      	sxtb	r3, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d003      	beq.n	80022de <modbus_change_baud_rate+0xf2>
		{
			return status;
 80022d6:	1dfb      	adds	r3, r7, #7
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	b25b      	sxtb	r3, r3
 80022dc:	e002      	b.n	80022e4 <modbus_change_baud_rate+0xf8>
		}
	}

	return modbus_set_rx();
 80022de:	f7ff feff 	bl	80020e0 <modbus_set_rx>
 80022e2:	0003      	movs	r3, r0
}
 80022e4:	0018      	movs	r0, r3
 80022e6:	46bd      	mov	sp, r7
 80022e8:	b003      	add	sp, #12
 80022ea:	bd90      	pop	{r4, r7, pc}
 80022ec:	20000000 	.word	0x20000000
 80022f0:	080087e8 	.word	0x080087e8
 80022f4:	200002d0 	.word	0x200002d0

080022f8 <get_rx_buffer>:
}


// Low Level Functions -------------------------------------------------------------------------
uint8_t get_rx_buffer(uint8_t index)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	0002      	movs	r2, r0
 8002300:	1dfb      	adds	r3, r7, #7
 8002302:	701a      	strb	r2, [r3, #0]
	if (index < MODBUS_RX_BUFFER_SIZE - 1)
 8002304:	1dfb      	adds	r3, r7, #7
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	2bff      	cmp	r3, #255	@ 0xff
 800230a:	d01e      	beq.n	800234a <get_rx_buffer+0x52>
	{
		return ((start_index + index) > (MODBUS_RX_BUFFER_SIZE - 1))?
 800230c:	4b11      	ldr	r3, [pc, #68]	@ (8002354 <get_rx_buffer+0x5c>)
 800230e:	881b      	ldrh	r3, [r3, #0]
 8002310:	b29b      	uxth	r3, r3
 8002312:	001a      	movs	r2, r3
 8002314:	1dfb      	adds	r3, r7, #7
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	18d3      	adds	r3, r2, r3
				modbus_rx_buffer[(start_index + index) - MODBUS_RX_BUFFER_SIZE] :
 800231a:	2bff      	cmp	r3, #255	@ 0xff
 800231c:	dd0b      	ble.n	8002336 <get_rx_buffer+0x3e>
 800231e:	4b0d      	ldr	r3, [pc, #52]	@ (8002354 <get_rx_buffer+0x5c>)
 8002320:	881b      	ldrh	r3, [r3, #0]
 8002322:	b29b      	uxth	r3, r3
 8002324:	001a      	movs	r2, r3
 8002326:	1dfb      	adds	r3, r7, #7
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	18d3      	adds	r3, r2, r3
 800232c:	3b01      	subs	r3, #1
 800232e:	3bff      	subs	r3, #255	@ 0xff
 8002330:	4a09      	ldr	r2, [pc, #36]	@ (8002358 <get_rx_buffer+0x60>)
 8002332:	5cd3      	ldrb	r3, [r2, r3]
 8002334:	e00a      	b.n	800234c <get_rx_buffer+0x54>
				modbus_rx_buffer[start_index + index];
 8002336:	4b07      	ldr	r3, [pc, #28]	@ (8002354 <get_rx_buffer+0x5c>)
 8002338:	881b      	ldrh	r3, [r3, #0]
 800233a:	b29b      	uxth	r3, r3
 800233c:	001a      	movs	r2, r3
 800233e:	1dfb      	adds	r3, r7, #7
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	18d3      	adds	r3, r2, r3
				modbus_rx_buffer[(start_index + index) - MODBUS_RX_BUFFER_SIZE] :
 8002344:	4a04      	ldr	r2, [pc, #16]	@ (8002358 <get_rx_buffer+0x60>)
 8002346:	5cd3      	ldrb	r3, [r2, r3]
 8002348:	e000      	b.n	800234c <get_rx_buffer+0x54>
	}
	return 0xFF;
 800234a:	23ff      	movs	r3, #255	@ 0xff
}
 800234c:	0018      	movs	r0, r3
 800234e:	46bd      	mov	sp, r7
 8002350:	b002      	add	sp, #8
 8002352:	bd80      	pop	{r7, pc}
 8002354:	2000076c 	.word	0x2000076c
 8002358:	20000468 	.word	0x20000468

0800235c <handle_modbus_error>:

int8_t handle_modbus_error(int8_t error_code)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	0002      	movs	r2, r0
 8002364:	1dfb      	adds	r3, r7, #7
 8002366:	701a      	strb	r2, [r3, #0]
	holding_register_database[MB_ERRORS] |= 1U << (error_code - RANGE_ERROR);
 8002368:	4b0a      	ldr	r3, [pc, #40]	@ (8002394 <handle_modbus_error+0x38>)
 800236a:	891a      	ldrh	r2, [r3, #8]
 800236c:	1dfb      	adds	r3, r7, #7
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	b25b      	sxtb	r3, r3
 8002372:	3b0e      	subs	r3, #14
 8002374:	2101      	movs	r1, #1
 8002376:	4099      	lsls	r1, r3
 8002378:	000b      	movs	r3, r1
 800237a:	b29b      	uxth	r3, r3
 800237c:	4313      	orrs	r3, r2
 800237e:	b29a      	uxth	r2, r3
 8002380:	4b04      	ldr	r3, [pc, #16]	@ (8002394 <handle_modbus_error+0x38>)
 8002382:	811a      	strh	r2, [r3, #8]
	return error_code;
 8002384:	1dfb      	adds	r3, r7, #7
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	b25b      	sxtb	r3, r3
}
 800238a:	0018      	movs	r0, r3
 800238c:	46bd      	mov	sp, r7
 800238e:	b002      	add	sp, #8
 8002390:	bd80      	pop	{r7, pc}
 8002392:	46c0      	nop			@ (mov r8, r8)
 8002394:	20000000 	.word	0x20000000

08002398 <crc_16>:

// Private Functions ---------------------------------------------------------------------------

uint16_t crc_16(uint8_t *data, uint8_t size)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	000a      	movs	r2, r1
 80023a2:	1cfb      	adds	r3, r7, #3
 80023a4:	701a      	strb	r2, [r3, #0]
	uint8_t crc_hi = 0xFF;
 80023a6:	230f      	movs	r3, #15
 80023a8:	18fb      	adds	r3, r7, r3
 80023aa:	22ff      	movs	r2, #255	@ 0xff
 80023ac:	701a      	strb	r2, [r3, #0]
	uint8_t crc_low = 0xFF;
 80023ae:	230e      	movs	r3, #14
 80023b0:	18fb      	adds	r3, r7, r3
 80023b2:	22ff      	movs	r2, #255	@ 0xff
 80023b4:	701a      	strb	r2, [r3, #0]
	 unsigned int i; /* will index into CRC lookup */

	/* pass through message buffer */
	while (size--)
 80023b6:	e019      	b.n	80023ec <crc_16+0x54>
	{
		i = crc_low ^ *data++; /* calculate the CRC  */
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	1c5a      	adds	r2, r3, #1
 80023bc:	607a      	str	r2, [r7, #4]
 80023be:	781a      	ldrb	r2, [r3, #0]
 80023c0:	200e      	movs	r0, #14
 80023c2:	183b      	adds	r3, r7, r0
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	4053      	eors	r3, r2
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	60bb      	str	r3, [r7, #8]
		crc_low = crc_hi ^ table_crc_hi[i];
 80023cc:	4a13      	ldr	r2, [pc, #76]	@ (800241c <crc_16+0x84>)
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	18d3      	adds	r3, r2, r3
 80023d2:	7819      	ldrb	r1, [r3, #0]
 80023d4:	183b      	adds	r3, r7, r0
 80023d6:	200f      	movs	r0, #15
 80023d8:	183a      	adds	r2, r7, r0
 80023da:	7812      	ldrb	r2, [r2, #0]
 80023dc:	404a      	eors	r2, r1
 80023de:	701a      	strb	r2, [r3, #0]
		crc_hi = table_crc_lo[i];
 80023e0:	183b      	adds	r3, r7, r0
 80023e2:	490f      	ldr	r1, [pc, #60]	@ (8002420 <crc_16+0x88>)
 80023e4:	68ba      	ldr	r2, [r7, #8]
 80023e6:	188a      	adds	r2, r1, r2
 80023e8:	7812      	ldrb	r2, [r2, #0]
 80023ea:	701a      	strb	r2, [r3, #0]
	while (size--)
 80023ec:	1cfb      	adds	r3, r7, #3
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	1cfa      	adds	r2, r7, #3
 80023f2:	1e59      	subs	r1, r3, #1
 80023f4:	7011      	strb	r1, [r2, #0]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1de      	bne.n	80023b8 <crc_16+0x20>
	}

	return (crc_hi << 8 | crc_low);
 80023fa:	230f      	movs	r3, #15
 80023fc:	18fb      	adds	r3, r7, r3
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	021b      	lsls	r3, r3, #8
 8002402:	b21a      	sxth	r2, r3
 8002404:	230e      	movs	r3, #14
 8002406:	18fb      	adds	r3, r7, r3
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	b21b      	sxth	r3, r3
 800240c:	4313      	orrs	r3, r2
 800240e:	b21b      	sxth	r3, r3
 8002410:	b29b      	uxth	r3, r3
}
 8002412:	0018      	movs	r0, r3
 8002414:	46bd      	mov	sp, r7
 8002416:	b004      	add	sp, #16
 8002418:	bd80      	pop	{r7, pc}
 800241a:	46c0      	nop			@ (mov r8, r8)
 800241c:	080084e8 	.word	0x080084e8
 8002420:	080085e8 	.word	0x080085e8

08002424 <handle_chunk_miss>:

int8_t handle_chunk_miss()
{
 8002424:	b590      	push	{r4, r7, lr}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
	if(modbus_header == 0)
 800242a:	4b15      	ldr	r3, [pc, #84]	@ (8002480 <handle_chunk_miss+0x5c>)
 800242c:	881b      	ldrh	r3, [r3, #0]
 800242e:	b29b      	uxth	r3, r3
 8002430:	2b00      	cmp	r3, #0
 8002432:	d120      	bne.n	8002476 <handle_chunk_miss+0x52>
	{
		if(HAL_GetTick() - chunk_time > 10)
 8002434:	f000 fe68 	bl	8003108 <HAL_GetTick>
 8002438:	0002      	movs	r2, r0
 800243a:	4b12      	ldr	r3, [pc, #72]	@ (8002484 <handle_chunk_miss+0x60>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b0a      	cmp	r3, #10
 8002442:	d918      	bls.n	8002476 <handle_chunk_miss+0x52>
		{
			modbus_header = 1;
 8002444:	4b0e      	ldr	r3, [pc, #56]	@ (8002480 <handle_chunk_miss+0x5c>)
 8002446:	2201      	movs	r2, #1
 8002448:	801a      	strh	r2, [r3, #0]
			int8_t status = HAL_UART_Abort(&huart1);
 800244a:	4b0f      	ldr	r3, [pc, #60]	@ (8002488 <handle_chunk_miss+0x64>)
 800244c:	0018      	movs	r0, r3
 800244e:	f004 f97f 	bl	8006750 <HAL_UART_Abort>
 8002452:	0003      	movs	r3, r0
 8002454:	001a      	movs	r2, r3
 8002456:	1dfb      	adds	r3, r7, #7
 8002458:	701a      	strb	r2, [r3, #0]
			if(status == HAL_OK)
 800245a:	1dfb      	adds	r3, r7, #7
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	b25b      	sxtb	r3, r3
 8002460:	2b00      	cmp	r3, #0
 8002462:	d104      	bne.n	800246e <handle_chunk_miss+0x4a>
			{
				status = modbus_set_rx();
 8002464:	1dfc      	adds	r4, r7, #7
 8002466:	f7ff fe3b 	bl	80020e0 <modbus_set_rx>
 800246a:	0003      	movs	r3, r0
 800246c:	7023      	strb	r3, [r4, #0]
			}
			return status;
 800246e:	1dfb      	adds	r3, r7, #7
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	b25b      	sxtb	r3, r3
 8002474:	e000      	b.n	8002478 <handle_chunk_miss+0x54>
		}
	}
	return MB_SUCCESS;
 8002476:	2300      	movs	r3, #0
}
 8002478:	0018      	movs	r0, r3
 800247a:	46bd      	mov	sp, r7
 800247c:	b003      	add	sp, #12
 800247e:	bd90      	pop	{r4, r7, pc}
 8002480:	20000098 	.word	0x20000098
 8002484:	20000768 	.word	0x20000768
 8002488:	200002d0 	.word	0x200002d0

0800248c <LL_ADC_REG_SetDMATransfer>:
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	2203      	movs	r2, #3
 800249c:	4393      	bics	r3, r2
 800249e:	001a      	movs	r2, r3
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	431a      	orrs	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	60da      	str	r2, [r3, #12]
}
 80024a8:	46c0      	nop			@ (mov r8, r8)
 80024aa:	46bd      	mov	sp, r7
 80024ac:	b002      	add	sp, #8
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <LL_ADC_REG_GetDMATransfer>:
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	2203      	movs	r2, #3
 80024be:	4013      	ands	r3, r2
}
 80024c0:	0018      	movs	r0, r3
 80024c2:	46bd      	mov	sp, r7
 80024c4:	b002      	add	sp, #8
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <LL_ADC_EnableInternalRegulator>:
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	4a05      	ldr	r2, [pc, #20]	@ (80024ec <LL_ADC_EnableInternalRegulator+0x24>)
 80024d6:	4013      	ands	r3, r2
 80024d8:	2280      	movs	r2, #128	@ 0x80
 80024da:	0552      	lsls	r2, r2, #21
 80024dc:	431a      	orrs	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	609a      	str	r2, [r3, #8]
}
 80024e2:	46c0      	nop			@ (mov r8, r8)
 80024e4:	46bd      	mov	sp, r7
 80024e6:	b002      	add	sp, #8
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	46c0      	nop			@ (mov r8, r8)
 80024ec:	6fffffe8 	.word	0x6fffffe8

080024f0 <LL_ADC_Enable>:
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	4a04      	ldr	r2, [pc, #16]	@ (8002510 <LL_ADC_Enable+0x20>)
 80024fe:	4013      	ands	r3, r2
 8002500:	2201      	movs	r2, #1
 8002502:	431a      	orrs	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	609a      	str	r2, [r3, #8]
}
 8002508:	46c0      	nop			@ (mov r8, r8)
 800250a:	46bd      	mov	sp, r7
 800250c:	b002      	add	sp, #8
 800250e:	bd80      	pop	{r7, pc}
 8002510:	7fffffe8 	.word	0x7fffffe8

08002514 <LL_ADC_IsEnabled>:
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	2201      	movs	r2, #1
 8002522:	4013      	ands	r3, r2
 8002524:	2b01      	cmp	r3, #1
 8002526:	d101      	bne.n	800252c <LL_ADC_IsEnabled+0x18>
 8002528:	2301      	movs	r3, #1
 800252a:	e000      	b.n	800252e <LL_ADC_IsEnabled+0x1a>
 800252c:	2300      	movs	r3, #0
}
 800252e:	0018      	movs	r0, r3
 8002530:	46bd      	mov	sp, r7
 8002532:	b002      	add	sp, #8
 8002534:	bd80      	pop	{r7, pc}
	...

08002538 <LL_ADC_StartCalibration>:
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	4a05      	ldr	r2, [pc, #20]	@ (800255c <LL_ADC_StartCalibration+0x24>)
 8002546:	4013      	ands	r3, r2
 8002548:	2280      	movs	r2, #128	@ 0x80
 800254a:	0612      	lsls	r2, r2, #24
 800254c:	431a      	orrs	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	609a      	str	r2, [r3, #8]
}
 8002552:	46c0      	nop			@ (mov r8, r8)
 8002554:	46bd      	mov	sp, r7
 8002556:	b002      	add	sp, #8
 8002558:	bd80      	pop	{r7, pc}
 800255a:	46c0      	nop			@ (mov r8, r8)
 800255c:	7fffffe8 	.word	0x7fffffe8

08002560 <LL_ADC_IsCalibrationOnGoing>:
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	0fdb      	lsrs	r3, r3, #31
 800256e:	07da      	lsls	r2, r3, #31
 8002570:	2380      	movs	r3, #128	@ 0x80
 8002572:	061b      	lsls	r3, r3, #24
 8002574:	429a      	cmp	r2, r3
 8002576:	d101      	bne.n	800257c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002578:	2301      	movs	r3, #1
 800257a:	e000      	b.n	800257e <LL_ADC_IsCalibrationOnGoing+0x1e>
 800257c:	2300      	movs	r3, #0
}
 800257e:	0018      	movs	r0, r3
 8002580:	46bd      	mov	sp, r7
 8002582:	b002      	add	sp, #8
 8002584:	bd80      	pop	{r7, pc}

08002586 <LL_ADC_IsActiveFlag_ADRDY>:
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b082      	sub	sp, #8
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2201      	movs	r2, #1
 8002594:	4013      	ands	r3, r2
 8002596:	2b01      	cmp	r3, #1
 8002598:	d101      	bne.n	800259e <LL_ADC_IsActiveFlag_ADRDY+0x18>
 800259a:	2301      	movs	r3, #1
 800259c:	e000      	b.n	80025a0 <LL_ADC_IsActiveFlag_ADRDY+0x1a>
 800259e:	2300      	movs	r3, #0
}
 80025a0:	0018      	movs	r0, r3
 80025a2:	46bd      	mov	sp, r7
 80025a4:	b002      	add	sp, #8
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <LL_SYSTICK_IsActiveCounterFlag>:
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  return (((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk)) ? 1UL : 0UL);
 80025ac:	4b07      	ldr	r3, [pc, #28]	@ (80025cc <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	2380      	movs	r3, #128	@ 0x80
 80025b2:	025b      	lsls	r3, r3, #9
 80025b4:	401a      	ands	r2, r3
 80025b6:	2380      	movs	r3, #128	@ 0x80
 80025b8:	025b      	lsls	r3, r3, #9
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d101      	bne.n	80025c2 <LL_SYSTICK_IsActiveCounterFlag+0x1a>
 80025be:	2301      	movs	r3, #1
 80025c0:	e000      	b.n	80025c4 <LL_SYSTICK_IsActiveCounterFlag+0x1c>
 80025c2:	2300      	movs	r3, #0
}
 80025c4:	0018      	movs	r0, r3
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	46c0      	nop			@ (mov r8, r8)
 80025cc:	e000e010 	.word	0xe000e010

080025d0 <ADC_ConvCpltCallback>:
#define VAR_CONVERTED_DATA_INIT_VALUE    (__LL_ADC_DIGITAL_SCALE(LL_ADC_RESOLUTION_12B) + 1)

volatile uint8_t low_half_safe;

void ADC_ConvCpltCallback()
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
	low_half_safe = 0;
 80025d4:	4b02      	ldr	r3, [pc, #8]	@ (80025e0 <ADC_ConvCpltCallback+0x10>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	701a      	strb	r2, [r3, #0]

//	for(uint8_t i = 0; i < 9; i++)
//	{
//		holding_register_database[i + 3] = (uint16_t)raw_data[i];
//	}
}
 80025da:	46c0      	nop			@ (mov r8, r8)
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	20000774 	.word	0x20000774

080025e4 <ADC_ConvHalfCpltCallback>:

void ADC_ConvHalfCpltCallback()
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
	low_half_safe = 1;
 80025e8:	4b02      	ldr	r3, [pc, #8]	@ (80025f4 <ADC_ConvHalfCpltCallback+0x10>)
 80025ea:	2201      	movs	r2, #1
 80025ec:	701a      	strb	r2, [r3, #0]
}
 80025ee:	46c0      	nop			@ (mov r8, r8)
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	20000774 	.word	0x20000774

080025f8 <ADC_ErrorCallback>:

void ADC_ErrorCallback()
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0

}
 80025fc:	46c0      	nop			@ (mov r8, r8)
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
	...

08002604 <ADC_Activate>:

void ADC_Activate()
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
low_half_safe = 0;
 800260a:	4b3d      	ldr	r3, [pc, #244]	@ (8002700 <ADC_Activate+0xfc>)
 800260c:	2200      	movs	r2, #0
 800260e:	701a      	strb	r2, [r3, #0]
	__IO uint32_t wait_loop_index = 0U;
 8002610:	2300      	movs	r3, #0
 8002612:	60bb      	str	r3, [r7, #8]
	__IO uint32_t backup_setting_adc_dma_transfer = 0U;
 8002614:	2300      	movs	r3, #0
 8002616:	607b      	str	r3, [r7, #4]
	#if (USE_TIMEOUT == 1)
	uint32_t Timeout = 0U; /* Variable used for timeout management */
 8002618:	2300      	movs	r3, #0
 800261a:	60fb      	str	r3, [r7, #12]
	/*       implemented anyway to show the best practice usages                */
	/*       corresponding to reference manual procedure.                       */
	/*       Software can be optimized by removing some of these checks, if     */
	/*       they are not relevant considering previous settings and actions    */
	/*       in user application.                                               */
	if (LL_ADC_IsEnabled(ADC1) == 0)
 800261c:	4b39      	ldr	r3, [pc, #228]	@ (8002704 <ADC_Activate+0x100>)
 800261e:	0018      	movs	r0, r3
 8002620:	f7ff ff78 	bl	8002514 <LL_ADC_IsEnabled>
 8002624:	1e03      	subs	r3, r0, #0
 8002626:	d166      	bne.n	80026f6 <ADC_Activate+0xf2>
	{
		/* Enable ADC internal voltage regulator */
		LL_ADC_EnableInternalRegulator(ADC1);
 8002628:	4b36      	ldr	r3, [pc, #216]	@ (8002704 <ADC_Activate+0x100>)
 800262a:	0018      	movs	r0, r3
 800262c:	f7ff ff4c 	bl	80024c8 <LL_ADC_EnableInternalRegulator>
		/* Compute number of CPU cycles to wait for, from delay in us.            */
		/* Note: Variable divided by 2 to compensate partially                    */
		/*       CPU processing cycles (depends on compilation optimization).     */
		/* Note: If system core clock frequency is below 200kHz, wait time        */
		/*       is only a few CPU processing cycles.                             */
		wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8002630:	4b35      	ldr	r3, [pc, #212]	@ (8002708 <ADC_Activate+0x104>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4935      	ldr	r1, [pc, #212]	@ (800270c <ADC_Activate+0x108>)
 8002636:	0018      	movs	r0, r3
 8002638:	f7fd fd66 	bl	8000108 <__udivsi3>
 800263c:	0003      	movs	r3, r0
 800263e:	001a      	movs	r2, r3
 8002640:	0013      	movs	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	189b      	adds	r3, r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	210a      	movs	r1, #10
 800264a:	0018      	movs	r0, r3
 800264c:	f7fd fd5c 	bl	8000108 <__udivsi3>
 8002650:	0003      	movs	r3, r0
 8002652:	60bb      	str	r3, [r7, #8]
		while(wait_loop_index != 0)
 8002654:	e002      	b.n	800265c <ADC_Activate+0x58>
		{
			wait_loop_index--;
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	3b01      	subs	r3, #1
 800265a:	60bb      	str	r3, [r7, #8]
		while(wait_loop_index != 0)
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1f9      	bne.n	8002656 <ADC_Activate+0x52>
		/* Note: Specificity of this STM32 series: Calibration factor is           */
		/*       available in data register and also transferred by DMA.           */
		/*       To not insert ADC calibration factor among ADC conversion data   */
		/*       in DMA destination address, DMA transfer must be disabled during */
		/*       calibration.                                                     */
		backup_setting_adc_dma_transfer = LL_ADC_REG_GetDMATransfer(ADC1);
 8002662:	4b28      	ldr	r3, [pc, #160]	@ (8002704 <ADC_Activate+0x100>)
 8002664:	0018      	movs	r0, r3
 8002666:	f7ff ff23 	bl	80024b0 <LL_ADC_REG_GetDMATransfer>
 800266a:	0003      	movs	r3, r0
 800266c:	607b      	str	r3, [r7, #4]
		LL_ADC_REG_SetDMATransfer(ADC1, LL_ADC_REG_DMA_TRANSFER_NONE);
 800266e:	4b25      	ldr	r3, [pc, #148]	@ (8002704 <ADC_Activate+0x100>)
 8002670:	2100      	movs	r1, #0
 8002672:	0018      	movs	r0, r3
 8002674:	f7ff ff0a 	bl	800248c <LL_ADC_REG_SetDMATransfer>

		/* Run ADC self calibration */
		LL_ADC_StartCalibration(ADC1);
 8002678:	4b22      	ldr	r3, [pc, #136]	@ (8002704 <ADC_Activate+0x100>)
 800267a:	0018      	movs	r0, r3
 800267c:	f7ff ff5c 	bl	8002538 <LL_ADC_StartCalibration>

		/* Poll for ADC effectively calibrated */
#if (USE_TIMEOUT == 1)
		Timeout = ADC_CALIBRATION_TIMEOUT_MS;
 8002680:	2301      	movs	r3, #1
 8002682:	60fb      	str	r3, [r7, #12]
#endif /* USE_TIMEOUT */

		while (LL_ADC_IsCalibrationOnGoing(ADC1) != 0)
 8002684:	e00a      	b.n	800269c <ADC_Activate+0x98>
		{
#if (USE_TIMEOUT == 1)
			/* Check Systick counter flag to decrement the time-out value */
			if (LL_SYSTICK_IsActiveCounterFlag())
 8002686:	f7ff ff8f 	bl	80025a8 <LL_SYSTICK_IsActiveCounterFlag>
 800268a:	1e03      	subs	r3, r0, #0
 800268c:	d006      	beq.n	800269c <ADC_Activate+0x98>
			{
				if(Timeout-- == 0)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	1e5a      	subs	r2, r3, #1
 8002692:	60fa      	str	r2, [r7, #12]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d101      	bne.n	800269c <ADC_Activate+0x98>
				{
					/* Error: Time-out */
					Error_Handler();
 8002698:	f7ff f8e0 	bl	800185c <Error_Handler>
		while (LL_ADC_IsCalibrationOnGoing(ADC1) != 0)
 800269c:	4b19      	ldr	r3, [pc, #100]	@ (8002704 <ADC_Activate+0x100>)
 800269e:	0018      	movs	r0, r3
 80026a0:	f7ff ff5e 	bl	8002560 <LL_ADC_IsCalibrationOnGoing>
 80026a4:	1e03      	subs	r3, r0, #0
 80026a6:	d1ee      	bne.n	8002686 <ADC_Activate+0x82>
			}
#endif /* USE_TIMEOUT */
		}

		/* Restore ADC DMA transfer request after calibration */
		LL_ADC_REG_SetDMATransfer(ADC1, backup_setting_adc_dma_transfer);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4a16      	ldr	r2, [pc, #88]	@ (8002704 <ADC_Activate+0x100>)
 80026ac:	0019      	movs	r1, r3
 80026ae:	0010      	movs	r0, r2
 80026b0:	f7ff feec 	bl	800248c <LL_ADC_REG_SetDMATransfer>

		/* Delay between ADC end of calibration and ADC enable.                   */
		/* Note: Variable divided by 2 to compensate partially                    */
		/*       CPU processing cycles (depends on compilation optimization).     */
		wait_loop_index = (ADC_DELAY_CALIB_ENABLE_CPU_CYCLES >> 1);
 80026b4:	2320      	movs	r3, #32
 80026b6:	60bb      	str	r3, [r7, #8]
		while(wait_loop_index != 0)
 80026b8:	e002      	b.n	80026c0 <ADC_Activate+0xbc>
		{
			wait_loop_index--;
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	3b01      	subs	r3, #1
 80026be:	60bb      	str	r3, [r7, #8]
		while(wait_loop_index != 0)
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d1f9      	bne.n	80026ba <ADC_Activate+0xb6>
		}

		/* Enable DMA */

		/* Enable ADC */
		LL_ADC_Enable(ADC1);
 80026c6:	4b0f      	ldr	r3, [pc, #60]	@ (8002704 <ADC_Activate+0x100>)
 80026c8:	0018      	movs	r0, r3
 80026ca:	f7ff ff11 	bl	80024f0 <LL_ADC_Enable>


		/* Poll for ADC ready to convert */
#if (USE_TIMEOUT == 1)
		Timeout = ADC_ENABLE_TIMEOUT_MS;
 80026ce:	2301      	movs	r3, #1
 80026d0:	60fb      	str	r3, [r7, #12]
#endif /* USE_TIMEOUT */

		while (LL_ADC_IsActiveFlag_ADRDY(ADC1) == 0)
 80026d2:	e00a      	b.n	80026ea <ADC_Activate+0xe6>
		{
#if (USE_TIMEOUT == 1)
			/* Check Systick counter flag to decrement the time-out value */
			if (LL_SYSTICK_IsActiveCounterFlag())
 80026d4:	f7ff ff68 	bl	80025a8 <LL_SYSTICK_IsActiveCounterFlag>
 80026d8:	1e03      	subs	r3, r0, #0
 80026da:	d006      	beq.n	80026ea <ADC_Activate+0xe6>
			{
				if(Timeout-- == 0)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	1e5a      	subs	r2, r3, #1
 80026e0:	60fa      	str	r2, [r7, #12]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <ADC_Activate+0xe6>
				{
					/* Error: Time-out */
					Error_Handler();
 80026e6:	f7ff f8b9 	bl	800185c <Error_Handler>
		while (LL_ADC_IsActiveFlag_ADRDY(ADC1) == 0)
 80026ea:	4b06      	ldr	r3, [pc, #24]	@ (8002704 <ADC_Activate+0x100>)
 80026ec:	0018      	movs	r0, r3
 80026ee:	f7ff ff4a 	bl	8002586 <LL_ADC_IsActiveFlag_ADRDY>
 80026f2:	1e03      	subs	r3, r0, #0
 80026f4:	d0ee      	beq.n	80026d4 <ADC_Activate+0xd0>
	/*       using function:                                                    */
	/*       "LL_ADC_REG_StartConversion();"                                    */

	/*## Operation on ADC hierarchical scope: ADC group injected ###############*/
	/* Note: Feature not available on this STM32 series */
}
 80026f6:	46c0      	nop			@ (mov r8, r8)
 80026f8:	46bd      	mov	sp, r7
 80026fa:	b004      	add	sp, #16
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	46c0      	nop			@ (mov r8, r8)
 8002700:	20000774 	.word	0x20000774
 8002704:	40012400 	.word	0x40012400
 8002708:	2000009c 	.word	0x2000009c
 800270c:	00030d40 	.word	0x00030d40

08002710 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002716:	4b0f      	ldr	r3, [pc, #60]	@ (8002754 <HAL_MspInit+0x44>)
 8002718:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800271a:	4b0e      	ldr	r3, [pc, #56]	@ (8002754 <HAL_MspInit+0x44>)
 800271c:	2101      	movs	r1, #1
 800271e:	430a      	orrs	r2, r1
 8002720:	641a      	str	r2, [r3, #64]	@ 0x40
 8002722:	4b0c      	ldr	r3, [pc, #48]	@ (8002754 <HAL_MspInit+0x44>)
 8002724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002726:	2201      	movs	r2, #1
 8002728:	4013      	ands	r3, r2
 800272a:	607b      	str	r3, [r7, #4]
 800272c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800272e:	4b09      	ldr	r3, [pc, #36]	@ (8002754 <HAL_MspInit+0x44>)
 8002730:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002732:	4b08      	ldr	r3, [pc, #32]	@ (8002754 <HAL_MspInit+0x44>)
 8002734:	2180      	movs	r1, #128	@ 0x80
 8002736:	0549      	lsls	r1, r1, #21
 8002738:	430a      	orrs	r2, r1
 800273a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800273c:	4b05      	ldr	r3, [pc, #20]	@ (8002754 <HAL_MspInit+0x44>)
 800273e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002740:	2380      	movs	r3, #128	@ 0x80
 8002742:	055b      	lsls	r3, r3, #21
 8002744:	4013      	ands	r3, r2
 8002746:	603b      	str	r3, [r7, #0]
 8002748:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800274a:	46c0      	nop			@ (mov r8, r8)
 800274c:	46bd      	mov	sp, r7
 800274e:	b002      	add	sp, #8
 8002750:	bd80      	pop	{r7, pc}
 8002752:	46c0      	nop			@ (mov r8, r8)
 8002754:	40021000 	.word	0x40021000

08002758 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002758:	b590      	push	{r4, r7, lr}
 800275a:	b093      	sub	sp, #76	@ 0x4c
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002760:	2334      	movs	r3, #52	@ 0x34
 8002762:	18fb      	adds	r3, r7, r3
 8002764:	0018      	movs	r0, r3
 8002766:	2314      	movs	r3, #20
 8002768:	001a      	movs	r2, r3
 800276a:	2100      	movs	r1, #0
 800276c:	f005 fe76 	bl	800845c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002770:	2414      	movs	r4, #20
 8002772:	193b      	adds	r3, r7, r4
 8002774:	0018      	movs	r0, r3
 8002776:	2320      	movs	r3, #32
 8002778:	001a      	movs	r2, r3
 800277a:	2100      	movs	r1, #0
 800277c:	f005 fe6e 	bl	800845c <memset>
  if(hi2c->Instance==I2C1)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a51      	ldr	r2, [pc, #324]	@ (80028cc <HAL_I2C_MspInit+0x174>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d000      	beq.n	800278c <HAL_I2C_MspInit+0x34>
 800278a:	e09a      	b.n	80028c2 <HAL_I2C_MspInit+0x16a>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800278c:	193b      	adds	r3, r7, r4
 800278e:	2202      	movs	r2, #2
 8002790:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002792:	193b      	adds	r3, r7, r4
 8002794:	2200      	movs	r2, #0
 8002796:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002798:	193b      	adds	r3, r7, r4
 800279a:	0018      	movs	r0, r3
 800279c:	f002 ff7e 	bl	800569c <HAL_RCCEx_PeriphCLKConfig>
 80027a0:	1e03      	subs	r3, r0, #0
 80027a2:	d001      	beq.n	80027a8 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 80027a4:	f7ff f85a 	bl	800185c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027a8:	4b49      	ldr	r3, [pc, #292]	@ (80028d0 <HAL_I2C_MspInit+0x178>)
 80027aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027ac:	4b48      	ldr	r3, [pc, #288]	@ (80028d0 <HAL_I2C_MspInit+0x178>)
 80027ae:	2101      	movs	r1, #1
 80027b0:	430a      	orrs	r2, r1
 80027b2:	635a      	str	r2, [r3, #52]	@ 0x34
 80027b4:	4b46      	ldr	r3, [pc, #280]	@ (80028d0 <HAL_I2C_MspInit+0x178>)
 80027b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027b8:	2201      	movs	r2, #1
 80027ba:	4013      	ands	r3, r2
 80027bc:	613b      	str	r3, [r7, #16]
 80027be:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9 [PA11]     ------> I2C1_SCL
    PA10 [PA12]     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80027c0:	2134      	movs	r1, #52	@ 0x34
 80027c2:	187b      	adds	r3, r7, r1
 80027c4:	22c0      	movs	r2, #192	@ 0xc0
 80027c6:	00d2      	lsls	r2, r2, #3
 80027c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027ca:	187b      	adds	r3, r7, r1
 80027cc:	2212      	movs	r2, #18
 80027ce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d0:	187b      	adds	r3, r7, r1
 80027d2:	2200      	movs	r2, #0
 80027d4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d6:	187b      	adds	r3, r7, r1
 80027d8:	2200      	movs	r2, #0
 80027da:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80027dc:	187b      	adds	r3, r7, r1
 80027de:	2206      	movs	r2, #6
 80027e0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027e2:	187a      	adds	r2, r7, r1
 80027e4:	23a0      	movs	r3, #160	@ 0xa0
 80027e6:	05db      	lsls	r3, r3, #23
 80027e8:	0011      	movs	r1, r2
 80027ea:	0018      	movs	r0, r3
 80027ec:	f001 f988 	bl	8003b00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027f0:	4b37      	ldr	r3, [pc, #220]	@ (80028d0 <HAL_I2C_MspInit+0x178>)
 80027f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80027f4:	4b36      	ldr	r3, [pc, #216]	@ (80028d0 <HAL_I2C_MspInit+0x178>)
 80027f6:	2180      	movs	r1, #128	@ 0x80
 80027f8:	0389      	lsls	r1, r1, #14
 80027fa:	430a      	orrs	r2, r1
 80027fc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80027fe:	4b34      	ldr	r3, [pc, #208]	@ (80028d0 <HAL_I2C_MspInit+0x178>)
 8002800:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002802:	2380      	movs	r3, #128	@ 0x80
 8002804:	039b      	lsls	r3, r3, #14
 8002806:	4013      	ands	r3, r2
 8002808:	60fb      	str	r3, [r7, #12]
 800280a:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel4;
 800280c:	4b31      	ldr	r3, [pc, #196]	@ (80028d4 <HAL_I2C_MspInit+0x17c>)
 800280e:	4a32      	ldr	r2, [pc, #200]	@ (80028d8 <HAL_I2C_MspInit+0x180>)
 8002810:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8002812:	4b30      	ldr	r3, [pc, #192]	@ (80028d4 <HAL_I2C_MspInit+0x17c>)
 8002814:	220a      	movs	r2, #10
 8002816:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002818:	4b2e      	ldr	r3, [pc, #184]	@ (80028d4 <HAL_I2C_MspInit+0x17c>)
 800281a:	2200      	movs	r2, #0
 800281c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800281e:	4b2d      	ldr	r3, [pc, #180]	@ (80028d4 <HAL_I2C_MspInit+0x17c>)
 8002820:	2200      	movs	r2, #0
 8002822:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002824:	4b2b      	ldr	r3, [pc, #172]	@ (80028d4 <HAL_I2C_MspInit+0x17c>)
 8002826:	2280      	movs	r2, #128	@ 0x80
 8002828:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800282a:	4b2a      	ldr	r3, [pc, #168]	@ (80028d4 <HAL_I2C_MspInit+0x17c>)
 800282c:	2200      	movs	r2, #0
 800282e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002830:	4b28      	ldr	r3, [pc, #160]	@ (80028d4 <HAL_I2C_MspInit+0x17c>)
 8002832:	2200      	movs	r2, #0
 8002834:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002836:	4b27      	ldr	r3, [pc, #156]	@ (80028d4 <HAL_I2C_MspInit+0x17c>)
 8002838:	2200      	movs	r2, #0
 800283a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800283c:	4b25      	ldr	r3, [pc, #148]	@ (80028d4 <HAL_I2C_MspInit+0x17c>)
 800283e:	2280      	movs	r2, #128	@ 0x80
 8002840:	0152      	lsls	r2, r2, #5
 8002842:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002844:	4b23      	ldr	r3, [pc, #140]	@ (80028d4 <HAL_I2C_MspInit+0x17c>)
 8002846:	0018      	movs	r0, r3
 8002848:	f000 fd9c 	bl	8003384 <HAL_DMA_Init>
 800284c:	1e03      	subs	r3, r0, #0
 800284e:	d001      	beq.n	8002854 <HAL_I2C_MspInit+0xfc>
    {
      Error_Handler();
 8002850:	f7ff f804 	bl	800185c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a1f      	ldr	r2, [pc, #124]	@ (80028d4 <HAL_I2C_MspInit+0x17c>)
 8002858:	63da      	str	r2, [r3, #60]	@ 0x3c
 800285a:	4b1e      	ldr	r3, [pc, #120]	@ (80028d4 <HAL_I2C_MspInit+0x17c>)
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel5;
 8002860:	4b1e      	ldr	r3, [pc, #120]	@ (80028dc <HAL_I2C_MspInit+0x184>)
 8002862:	4a1f      	ldr	r2, [pc, #124]	@ (80028e0 <HAL_I2C_MspInit+0x188>)
 8002864:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8002866:	4b1d      	ldr	r3, [pc, #116]	@ (80028dc <HAL_I2C_MspInit+0x184>)
 8002868:	220b      	movs	r2, #11
 800286a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800286c:	4b1b      	ldr	r3, [pc, #108]	@ (80028dc <HAL_I2C_MspInit+0x184>)
 800286e:	2210      	movs	r2, #16
 8002870:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002872:	4b1a      	ldr	r3, [pc, #104]	@ (80028dc <HAL_I2C_MspInit+0x184>)
 8002874:	2200      	movs	r2, #0
 8002876:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002878:	4b18      	ldr	r3, [pc, #96]	@ (80028dc <HAL_I2C_MspInit+0x184>)
 800287a:	2280      	movs	r2, #128	@ 0x80
 800287c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800287e:	4b17      	ldr	r3, [pc, #92]	@ (80028dc <HAL_I2C_MspInit+0x184>)
 8002880:	2200      	movs	r2, #0
 8002882:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002884:	4b15      	ldr	r3, [pc, #84]	@ (80028dc <HAL_I2C_MspInit+0x184>)
 8002886:	2200      	movs	r2, #0
 8002888:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800288a:	4b14      	ldr	r3, [pc, #80]	@ (80028dc <HAL_I2C_MspInit+0x184>)
 800288c:	2200      	movs	r2, #0
 800288e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002890:	4b12      	ldr	r3, [pc, #72]	@ (80028dc <HAL_I2C_MspInit+0x184>)
 8002892:	2200      	movs	r2, #0
 8002894:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002896:	4b11      	ldr	r3, [pc, #68]	@ (80028dc <HAL_I2C_MspInit+0x184>)
 8002898:	0018      	movs	r0, r3
 800289a:	f000 fd73 	bl	8003384 <HAL_DMA_Init>
 800289e:	1e03      	subs	r3, r0, #0
 80028a0:	d001      	beq.n	80028a6 <HAL_I2C_MspInit+0x14e>
    {
      Error_Handler();
 80028a2:	f7fe ffdb 	bl	800185c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a0c      	ldr	r2, [pc, #48]	@ (80028dc <HAL_I2C_MspInit+0x184>)
 80028aa:	639a      	str	r2, [r3, #56]	@ 0x38
 80028ac:	4b0b      	ldr	r3, [pc, #44]	@ (80028dc <HAL_I2C_MspInit+0x184>)
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 3, 0);
 80028b2:	2200      	movs	r2, #0
 80028b4:	2103      	movs	r1, #3
 80028b6:	2017      	movs	r0, #23
 80028b8:	f000 fd22 	bl	8003300 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 80028bc:	2017      	movs	r0, #23
 80028be:	f000 fd34 	bl	800332a <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80028c2:	46c0      	nop			@ (mov r8, r8)
 80028c4:	46bd      	mov	sp, r7
 80028c6:	b013      	add	sp, #76	@ 0x4c
 80028c8:	bd90      	pop	{r4, r7, pc}
 80028ca:	46c0      	nop			@ (mov r8, r8)
 80028cc:	40005400 	.word	0x40005400
 80028d0:	40021000 	.word	0x40021000
 80028d4:	2000011c 	.word	0x2000011c
 80028d8:	40020044 	.word	0x40020044
 80028dc:	20000178 	.word	0x20000178
 80028e0:	40020058 	.word	0x40020058

080028e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80028e4:	b590      	push	{r4, r7, lr}
 80028e6:	b093      	sub	sp, #76	@ 0x4c
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ec:	2334      	movs	r3, #52	@ 0x34
 80028ee:	18fb      	adds	r3, r7, r3
 80028f0:	0018      	movs	r0, r3
 80028f2:	2314      	movs	r3, #20
 80028f4:	001a      	movs	r2, r3
 80028f6:	2100      	movs	r1, #0
 80028f8:	f005 fdb0 	bl	800845c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80028fc:	2414      	movs	r4, #20
 80028fe:	193b      	adds	r3, r7, r4
 8002900:	0018      	movs	r0, r3
 8002902:	2320      	movs	r3, #32
 8002904:	001a      	movs	r2, r3
 8002906:	2100      	movs	r1, #0
 8002908:	f005 fda8 	bl	800845c <memset>
  if(hspi->Instance==SPI1)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a34      	ldr	r2, [pc, #208]	@ (80029e4 <HAL_SPI_MspInit+0x100>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d162      	bne.n	80029dc <HAL_SPI_MspInit+0xf8>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 8002916:	193b      	adds	r3, r7, r4
 8002918:	2204      	movs	r2, #4
 800291a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 800291c:	193b      	adds	r3, r7, r4
 800291e:	2200      	movs	r2, #0
 8002920:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002922:	193b      	adds	r3, r7, r4
 8002924:	0018      	movs	r0, r3
 8002926:	f002 feb9 	bl	800569c <HAL_RCCEx_PeriphCLKConfig>
 800292a:	1e03      	subs	r3, r0, #0
 800292c:	d001      	beq.n	8002932 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 800292e:	f7fe ff95 	bl	800185c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002932:	4b2d      	ldr	r3, [pc, #180]	@ (80029e8 <HAL_SPI_MspInit+0x104>)
 8002934:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002936:	4b2c      	ldr	r3, [pc, #176]	@ (80029e8 <HAL_SPI_MspInit+0x104>)
 8002938:	2180      	movs	r1, #128	@ 0x80
 800293a:	0149      	lsls	r1, r1, #5
 800293c:	430a      	orrs	r2, r1
 800293e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002940:	4b29      	ldr	r3, [pc, #164]	@ (80029e8 <HAL_SPI_MspInit+0x104>)
 8002942:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002944:	2380      	movs	r3, #128	@ 0x80
 8002946:	015b      	lsls	r3, r3, #5
 8002948:	4013      	ands	r3, r2
 800294a:	613b      	str	r3, [r7, #16]
 800294c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800294e:	4b26      	ldr	r3, [pc, #152]	@ (80029e8 <HAL_SPI_MspInit+0x104>)
 8002950:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002952:	4b25      	ldr	r3, [pc, #148]	@ (80029e8 <HAL_SPI_MspInit+0x104>)
 8002954:	2101      	movs	r1, #1
 8002956:	430a      	orrs	r2, r1
 8002958:	635a      	str	r2, [r3, #52]	@ 0x34
 800295a:	4b23      	ldr	r3, [pc, #140]	@ (80029e8 <HAL_SPI_MspInit+0x104>)
 800295c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800295e:	2201      	movs	r2, #1
 8002960:	4013      	ands	r3, r2
 8002962:	60fb      	str	r3, [r7, #12]
 8002964:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002966:	4b20      	ldr	r3, [pc, #128]	@ (80029e8 <HAL_SPI_MspInit+0x104>)
 8002968:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800296a:	4b1f      	ldr	r3, [pc, #124]	@ (80029e8 <HAL_SPI_MspInit+0x104>)
 800296c:	2102      	movs	r1, #2
 800296e:	430a      	orrs	r2, r1
 8002970:	635a      	str	r2, [r3, #52]	@ 0x34
 8002972:	4b1d      	ldr	r3, [pc, #116]	@ (80029e8 <HAL_SPI_MspInit+0x104>)
 8002974:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002976:	2202      	movs	r2, #2
 8002978:	4013      	ands	r3, r2
 800297a:	60bb      	str	r3, [r7, #8]
 800297c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA11 [PA9]     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800297e:	2134      	movs	r1, #52	@ 0x34
 8002980:	187b      	adds	r3, r7, r1
 8002982:	2280      	movs	r2, #128	@ 0x80
 8002984:	0112      	lsls	r2, r2, #4
 8002986:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002988:	000c      	movs	r4, r1
 800298a:	193b      	adds	r3, r7, r4
 800298c:	2202      	movs	r2, #2
 800298e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002990:	193b      	adds	r3, r7, r4
 8002992:	2200      	movs	r2, #0
 8002994:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002996:	193b      	adds	r3, r7, r4
 8002998:	2200      	movs	r2, #0
 800299a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800299c:	193b      	adds	r3, r7, r4
 800299e:	2200      	movs	r2, #0
 80029a0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029a2:	193a      	adds	r2, r7, r4
 80029a4:	23a0      	movs	r3, #160	@ 0xa0
 80029a6:	05db      	lsls	r3, r3, #23
 80029a8:	0011      	movs	r1, r2
 80029aa:	0018      	movs	r0, r3
 80029ac:	f001 f8a8 	bl	8003b00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80029b0:	0021      	movs	r1, r4
 80029b2:	187b      	adds	r3, r7, r1
 80029b4:	2228      	movs	r2, #40	@ 0x28
 80029b6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b8:	187b      	adds	r3, r7, r1
 80029ba:	2202      	movs	r2, #2
 80029bc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029be:	187b      	adds	r3, r7, r1
 80029c0:	2200      	movs	r2, #0
 80029c2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029c4:	187b      	adds	r3, r7, r1
 80029c6:	2200      	movs	r2, #0
 80029c8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80029ca:	187b      	adds	r3, r7, r1
 80029cc:	2200      	movs	r2, #0
 80029ce:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029d0:	187b      	adds	r3, r7, r1
 80029d2:	4a06      	ldr	r2, [pc, #24]	@ (80029ec <HAL_SPI_MspInit+0x108>)
 80029d4:	0019      	movs	r1, r3
 80029d6:	0010      	movs	r0, r2
 80029d8:	f001 f892 	bl	8003b00 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80029dc:	46c0      	nop			@ (mov r8, r8)
 80029de:	46bd      	mov	sp, r7
 80029e0:	b013      	add	sp, #76	@ 0x4c
 80029e2:	bd90      	pop	{r4, r7, pc}
 80029e4:	40013000 	.word	0x40013000
 80029e8:	40021000 	.word	0x40021000
 80029ec:	50000400 	.word	0x50000400

080029f0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a0a      	ldr	r2, [pc, #40]	@ (8002a28 <HAL_TIM_PWM_MspInit+0x38>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d10d      	bne.n	8002a1e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a02:	4b0a      	ldr	r3, [pc, #40]	@ (8002a2c <HAL_TIM_PWM_MspInit+0x3c>)
 8002a04:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a06:	4b09      	ldr	r3, [pc, #36]	@ (8002a2c <HAL_TIM_PWM_MspInit+0x3c>)
 8002a08:	2180      	movs	r1, #128	@ 0x80
 8002a0a:	0109      	lsls	r1, r1, #4
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002a10:	4b06      	ldr	r3, [pc, #24]	@ (8002a2c <HAL_TIM_PWM_MspInit+0x3c>)
 8002a12:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a14:	2380      	movs	r3, #128	@ 0x80
 8002a16:	011b      	lsls	r3, r3, #4
 8002a18:	4013      	ands	r3, r2
 8002a1a:	60fb      	str	r3, [r7, #12]
 8002a1c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8002a1e:	46c0      	nop			@ (mov r8, r8)
 8002a20:	46bd      	mov	sp, r7
 8002a22:	b004      	add	sp, #16
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	46c0      	nop			@ (mov r8, r8)
 8002a28:	40012c00 	.word	0x40012c00
 8002a2c:	40021000 	.word	0x40021000

08002a30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a0a      	ldr	r2, [pc, #40]	@ (8002a68 <HAL_TIM_Base_MspInit+0x38>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d10d      	bne.n	8002a5e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002a42:	4b0a      	ldr	r3, [pc, #40]	@ (8002a6c <HAL_TIM_Base_MspInit+0x3c>)
 8002a44:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a46:	4b09      	ldr	r3, [pc, #36]	@ (8002a6c <HAL_TIM_Base_MspInit+0x3c>)
 8002a48:	2180      	movs	r1, #128	@ 0x80
 8002a4a:	0209      	lsls	r1, r1, #8
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002a50:	4b06      	ldr	r3, [pc, #24]	@ (8002a6c <HAL_TIM_Base_MspInit+0x3c>)
 8002a52:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a54:	2380      	movs	r3, #128	@ 0x80
 8002a56:	021b      	lsls	r3, r3, #8
 8002a58:	4013      	ands	r3, r2
 8002a5a:	60fb      	str	r3, [r7, #12]
 8002a5c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM14_MspInit 1 */

  }

}
 8002a5e:	46c0      	nop			@ (mov r8, r8)
 8002a60:	46bd      	mov	sp, r7
 8002a62:	b004      	add	sp, #16
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	46c0      	nop			@ (mov r8, r8)
 8002a68:	40002000 	.word	0x40002000
 8002a6c:	40021000 	.word	0x40021000

08002a70 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a70:	b590      	push	{r4, r7, lr}
 8002a72:	b089      	sub	sp, #36	@ 0x24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a78:	240c      	movs	r4, #12
 8002a7a:	193b      	adds	r3, r7, r4
 8002a7c:	0018      	movs	r0, r3
 8002a7e:	2314      	movs	r3, #20
 8002a80:	001a      	movs	r2, r3
 8002a82:	2100      	movs	r1, #0
 8002a84:	f005 fcea 	bl	800845c <memset>
  if(htim->Instance==TIM1)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a15      	ldr	r2, [pc, #84]	@ (8002ae4 <HAL_TIM_MspPostInit+0x74>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d123      	bne.n	8002ada <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a92:	4b15      	ldr	r3, [pc, #84]	@ (8002ae8 <HAL_TIM_MspPostInit+0x78>)
 8002a94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a96:	4b14      	ldr	r3, [pc, #80]	@ (8002ae8 <HAL_TIM_MspPostInit+0x78>)
 8002a98:	2101      	movs	r1, #1
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	635a      	str	r2, [r3, #52]	@ 0x34
 8002a9e:	4b12      	ldr	r3, [pc, #72]	@ (8002ae8 <HAL_TIM_MspPostInit+0x78>)
 8002aa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	60bb      	str	r3, [r7, #8]
 8002aa8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA15     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = Actuator_PWM_Pin;
 8002aaa:	193b      	adds	r3, r7, r4
 8002aac:	2280      	movs	r2, #128	@ 0x80
 8002aae:	0212      	lsls	r2, r2, #8
 8002ab0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab2:	0021      	movs	r1, r4
 8002ab4:	187b      	adds	r3, r7, r1
 8002ab6:	2202      	movs	r2, #2
 8002ab8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aba:	187b      	adds	r3, r7, r1
 8002abc:	2200      	movs	r2, #0
 8002abe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac0:	187b      	adds	r3, r7, r1
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002ac6:	187b      	adds	r3, r7, r1
 8002ac8:	2202      	movs	r2, #2
 8002aca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(Actuator_PWM_GPIO_Port, &GPIO_InitStruct);
 8002acc:	187a      	adds	r2, r7, r1
 8002ace:	23a0      	movs	r3, #160	@ 0xa0
 8002ad0:	05db      	lsls	r3, r3, #23
 8002ad2:	0011      	movs	r1, r2
 8002ad4:	0018      	movs	r0, r3
 8002ad6:	f001 f813 	bl	8003b00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002ada:	46c0      	nop			@ (mov r8, r8)
 8002adc:	46bd      	mov	sp, r7
 8002ade:	b009      	add	sp, #36	@ 0x24
 8002ae0:	bd90      	pop	{r4, r7, pc}
 8002ae2:	46c0      	nop			@ (mov r8, r8)
 8002ae4:	40012c00 	.word	0x40012c00
 8002ae8:	40021000 	.word	0x40021000

08002aec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002aec:	b590      	push	{r4, r7, lr}
 8002aee:	b095      	sub	sp, #84	@ 0x54
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002af4:	233c      	movs	r3, #60	@ 0x3c
 8002af6:	18fb      	adds	r3, r7, r3
 8002af8:	0018      	movs	r0, r3
 8002afa:	2314      	movs	r3, #20
 8002afc:	001a      	movs	r2, r3
 8002afe:	2100      	movs	r1, #0
 8002b00:	f005 fcac 	bl	800845c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b04:	241c      	movs	r4, #28
 8002b06:	193b      	adds	r3, r7, r4
 8002b08:	0018      	movs	r0, r3
 8002b0a:	2320      	movs	r3, #32
 8002b0c:	001a      	movs	r2, r3
 8002b0e:	2100      	movs	r1, #0
 8002b10:	f005 fca4 	bl	800845c <memset>
  if(huart->Instance==USART1)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a74      	ldr	r2, [pc, #464]	@ (8002cec <HAL_UART_MspInit+0x200>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d000      	beq.n	8002b20 <HAL_UART_MspInit+0x34>
 8002b1e:	e0e1      	b.n	8002ce4 <HAL_UART_MspInit+0x1f8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002b20:	193b      	adds	r3, r7, r4
 8002b22:	2201      	movs	r2, #1
 8002b24:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002b26:	193b      	adds	r3, r7, r4
 8002b28:	2200      	movs	r2, #0
 8002b2a:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b2c:	193b      	adds	r3, r7, r4
 8002b2e:	0018      	movs	r0, r3
 8002b30:	f002 fdb4 	bl	800569c <HAL_RCCEx_PeriphCLKConfig>
 8002b34:	1e03      	subs	r3, r0, #0
 8002b36:	d001      	beq.n	8002b3c <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8002b38:	f7fe fe90 	bl	800185c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b3c:	4b6c      	ldr	r3, [pc, #432]	@ (8002cf0 <HAL_UART_MspInit+0x204>)
 8002b3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b40:	4b6b      	ldr	r3, [pc, #428]	@ (8002cf0 <HAL_UART_MspInit+0x204>)
 8002b42:	2180      	movs	r1, #128	@ 0x80
 8002b44:	01c9      	lsls	r1, r1, #7
 8002b46:	430a      	orrs	r2, r1
 8002b48:	641a      	str	r2, [r3, #64]	@ 0x40
 8002b4a:	4b69      	ldr	r3, [pc, #420]	@ (8002cf0 <HAL_UART_MspInit+0x204>)
 8002b4c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b4e:	2380      	movs	r3, #128	@ 0x80
 8002b50:	01db      	lsls	r3, r3, #7
 8002b52:	4013      	ands	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]
 8002b56:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b58:	4b65      	ldr	r3, [pc, #404]	@ (8002cf0 <HAL_UART_MspInit+0x204>)
 8002b5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b5c:	4b64      	ldr	r3, [pc, #400]	@ (8002cf0 <HAL_UART_MspInit+0x204>)
 8002b5e:	2104      	movs	r1, #4
 8002b60:	430a      	orrs	r2, r1
 8002b62:	635a      	str	r2, [r3, #52]	@ 0x34
 8002b64:	4b62      	ldr	r3, [pc, #392]	@ (8002cf0 <HAL_UART_MspInit+0x204>)
 8002b66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b68:	2204      	movs	r2, #4
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	617b      	str	r3, [r7, #20]
 8002b6e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b70:	4b5f      	ldr	r3, [pc, #380]	@ (8002cf0 <HAL_UART_MspInit+0x204>)
 8002b72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b74:	4b5e      	ldr	r3, [pc, #376]	@ (8002cf0 <HAL_UART_MspInit+0x204>)
 8002b76:	2102      	movs	r1, #2
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	635a      	str	r2, [r3, #52]	@ 0x34
 8002b7c:	4b5c      	ldr	r3, [pc, #368]	@ (8002cf0 <HAL_UART_MspInit+0x204>)
 8002b7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b80:	2202      	movs	r2, #2
 8002b82:	4013      	ands	r3, r2
 8002b84:	613b      	str	r3, [r7, #16]
 8002b86:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b88:	4b59      	ldr	r3, [pc, #356]	@ (8002cf0 <HAL_UART_MspInit+0x204>)
 8002b8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b8c:	4b58      	ldr	r3, [pc, #352]	@ (8002cf0 <HAL_UART_MspInit+0x204>)
 8002b8e:	2101      	movs	r1, #1
 8002b90:	430a      	orrs	r2, r1
 8002b92:	635a      	str	r2, [r3, #52]	@ 0x34
 8002b94:	4b56      	ldr	r3, [pc, #344]	@ (8002cf0 <HAL_UART_MspInit+0x204>)
 8002b96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b98:	2201      	movs	r2, #1
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	60fb      	str	r3, [r7, #12]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC14-OSCX_IN(PC14)     ------> USART1_TX
    PB2     ------> USART1_RX
    PA12 [PA10]     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002ba0:	213c      	movs	r1, #60	@ 0x3c
 8002ba2:	187b      	adds	r3, r7, r1
 8002ba4:	2280      	movs	r2, #128	@ 0x80
 8002ba6:	01d2      	lsls	r2, r2, #7
 8002ba8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002baa:	000c      	movs	r4, r1
 8002bac:	193b      	adds	r3, r7, r4
 8002bae:	2202      	movs	r2, #2
 8002bb0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb2:	193b      	adds	r3, r7, r4
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb8:	193b      	adds	r3, r7, r4
 8002bba:	2200      	movs	r2, #0
 8002bbc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8002bbe:	193b      	adds	r3, r7, r4
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bc4:	193b      	adds	r3, r7, r4
 8002bc6:	4a4b      	ldr	r2, [pc, #300]	@ (8002cf4 <HAL_UART_MspInit+0x208>)
 8002bc8:	0019      	movs	r1, r3
 8002bca:	0010      	movs	r0, r2
 8002bcc:	f000 ff98 	bl	8003b00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002bd0:	193b      	adds	r3, r7, r4
 8002bd2:	2204      	movs	r2, #4
 8002bd4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd6:	193b      	adds	r3, r7, r4
 8002bd8:	2202      	movs	r2, #2
 8002bda:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bdc:	193b      	adds	r3, r7, r4
 8002bde:	2200      	movs	r2, #0
 8002be0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be2:	193b      	adds	r3, r7, r4
 8002be4:	2200      	movs	r2, #0
 8002be6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8002be8:	193b      	adds	r3, r7, r4
 8002bea:	2200      	movs	r2, #0
 8002bec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bee:	193b      	adds	r3, r7, r4
 8002bf0:	4a41      	ldr	r2, [pc, #260]	@ (8002cf8 <HAL_UART_MspInit+0x20c>)
 8002bf2:	0019      	movs	r1, r3
 8002bf4:	0010      	movs	r0, r2
 8002bf6:	f000 ff83 	bl	8003b00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002bfa:	0021      	movs	r1, r4
 8002bfc:	187b      	adds	r3, r7, r1
 8002bfe:	2280      	movs	r2, #128	@ 0x80
 8002c00:	0152      	lsls	r2, r2, #5
 8002c02:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c04:	187b      	adds	r3, r7, r1
 8002c06:	2202      	movs	r2, #2
 8002c08:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0a:	187b      	adds	r3, r7, r1
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c10:	187b      	adds	r3, r7, r1
 8002c12:	2200      	movs	r2, #0
 8002c14:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002c16:	187b      	adds	r3, r7, r1
 8002c18:	2201      	movs	r2, #1
 8002c1a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c1c:	187a      	adds	r2, r7, r1
 8002c1e:	23a0      	movs	r3, #160	@ 0xa0
 8002c20:	05db      	lsls	r3, r3, #23
 8002c22:	0011      	movs	r1, r2
 8002c24:	0018      	movs	r0, r3
 8002c26:	f000 ff6b 	bl	8003b00 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8002c2a:	4b34      	ldr	r3, [pc, #208]	@ (8002cfc <HAL_UART_MspInit+0x210>)
 8002c2c:	4a34      	ldr	r2, [pc, #208]	@ (8002d00 <HAL_UART_MspInit+0x214>)
 8002c2e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002c30:	4b32      	ldr	r3, [pc, #200]	@ (8002cfc <HAL_UART_MspInit+0x210>)
 8002c32:	2232      	movs	r2, #50	@ 0x32
 8002c34:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c36:	4b31      	ldr	r3, [pc, #196]	@ (8002cfc <HAL_UART_MspInit+0x210>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c3c:	4b2f      	ldr	r3, [pc, #188]	@ (8002cfc <HAL_UART_MspInit+0x210>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c42:	4b2e      	ldr	r3, [pc, #184]	@ (8002cfc <HAL_UART_MspInit+0x210>)
 8002c44:	2280      	movs	r2, #128	@ 0x80
 8002c46:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c48:	4b2c      	ldr	r3, [pc, #176]	@ (8002cfc <HAL_UART_MspInit+0x210>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c4e:	4b2b      	ldr	r3, [pc, #172]	@ (8002cfc <HAL_UART_MspInit+0x210>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002c54:	4b29      	ldr	r3, [pc, #164]	@ (8002cfc <HAL_UART_MspInit+0x210>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002c5a:	4b28      	ldr	r3, [pc, #160]	@ (8002cfc <HAL_UART_MspInit+0x210>)
 8002c5c:	22c0      	movs	r2, #192	@ 0xc0
 8002c5e:	0192      	lsls	r2, r2, #6
 8002c60:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002c62:	4b26      	ldr	r3, [pc, #152]	@ (8002cfc <HAL_UART_MspInit+0x210>)
 8002c64:	0018      	movs	r0, r3
 8002c66:	f000 fb8d 	bl	8003384 <HAL_DMA_Init>
 8002c6a:	1e03      	subs	r3, r0, #0
 8002c6c:	d001      	beq.n	8002c72 <HAL_UART_MspInit+0x186>
    {
      Error_Handler();
 8002c6e:	f7fe fdf5 	bl	800185c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2180      	movs	r1, #128	@ 0x80
 8002c76:	4a21      	ldr	r2, [pc, #132]	@ (8002cfc <HAL_UART_MspInit+0x210>)
 8002c78:	505a      	str	r2, [r3, r1]
 8002c7a:	4b20      	ldr	r3, [pc, #128]	@ (8002cfc <HAL_UART_MspInit+0x210>)
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel3;
 8002c80:	4b20      	ldr	r3, [pc, #128]	@ (8002d04 <HAL_UART_MspInit+0x218>)
 8002c82:	4a21      	ldr	r2, [pc, #132]	@ (8002d08 <HAL_UART_MspInit+0x21c>)
 8002c84:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002c86:	4b1f      	ldr	r3, [pc, #124]	@ (8002d04 <HAL_UART_MspInit+0x218>)
 8002c88:	2233      	movs	r2, #51	@ 0x33
 8002c8a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c8c:	4b1d      	ldr	r3, [pc, #116]	@ (8002d04 <HAL_UART_MspInit+0x218>)
 8002c8e:	2210      	movs	r2, #16
 8002c90:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c92:	4b1c      	ldr	r3, [pc, #112]	@ (8002d04 <HAL_UART_MspInit+0x218>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c98:	4b1a      	ldr	r3, [pc, #104]	@ (8002d04 <HAL_UART_MspInit+0x218>)
 8002c9a:	2280      	movs	r2, #128	@ 0x80
 8002c9c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c9e:	4b19      	ldr	r3, [pc, #100]	@ (8002d04 <HAL_UART_MspInit+0x218>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ca4:	4b17      	ldr	r3, [pc, #92]	@ (8002d04 <HAL_UART_MspInit+0x218>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002caa:	4b16      	ldr	r3, [pc, #88]	@ (8002d04 <HAL_UART_MspInit+0x218>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002cb0:	4b14      	ldr	r3, [pc, #80]	@ (8002d04 <HAL_UART_MspInit+0x218>)
 8002cb2:	2280      	movs	r2, #128	@ 0x80
 8002cb4:	0192      	lsls	r2, r2, #6
 8002cb6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002cb8:	4b12      	ldr	r3, [pc, #72]	@ (8002d04 <HAL_UART_MspInit+0x218>)
 8002cba:	0018      	movs	r0, r3
 8002cbc:	f000 fb62 	bl	8003384 <HAL_DMA_Init>
 8002cc0:	1e03      	subs	r3, r0, #0
 8002cc2:	d001      	beq.n	8002cc8 <HAL_UART_MspInit+0x1dc>
    {
      Error_Handler();
 8002cc4:	f7fe fdca 	bl	800185c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a0e      	ldr	r2, [pc, #56]	@ (8002d04 <HAL_UART_MspInit+0x218>)
 8002ccc:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002cce:	4b0d      	ldr	r3, [pc, #52]	@ (8002d04 <HAL_UART_MspInit+0x218>)
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	201b      	movs	r0, #27
 8002cda:	f000 fb11 	bl	8003300 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002cde:	201b      	movs	r0, #27
 8002ce0:	f000 fb23 	bl	800332a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002ce4:	46c0      	nop			@ (mov r8, r8)
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	b015      	add	sp, #84	@ 0x54
 8002cea:	bd90      	pop	{r4, r7, pc}
 8002cec:	40013800 	.word	0x40013800
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	50000800 	.word	0x50000800
 8002cf8:	50000400 	.word	0x50000400
 8002cfc:	20000364 	.word	0x20000364
 8002d00:	4002001c 	.word	0x4002001c
 8002d04:	200003c0 	.word	0x200003c0
 8002d08:	40020030 	.word	0x40020030

08002d0c <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a17      	ldr	r2, [pc, #92]	@ (8002d78 <HAL_UART_MspDeInit+0x6c>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d127      	bne.n	8002d6e <HAL_UART_MspDeInit+0x62>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002d1e:	4b17      	ldr	r3, [pc, #92]	@ (8002d7c <HAL_UART_MspDeInit+0x70>)
 8002d20:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d22:	4b16      	ldr	r3, [pc, #88]	@ (8002d7c <HAL_UART_MspDeInit+0x70>)
 8002d24:	4916      	ldr	r1, [pc, #88]	@ (8002d80 <HAL_UART_MspDeInit+0x74>)
 8002d26:	400a      	ands	r2, r1
 8002d28:	641a      	str	r2, [r3, #64]	@ 0x40
    /**USART1 GPIO Configuration
    PC14-OSCX_IN(PC14)     ------> USART1_TX
    PB2     ------> USART1_RX
    PA12 [PA10]     ------> USART1_DE
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_14);
 8002d2a:	2380      	movs	r3, #128	@ 0x80
 8002d2c:	01db      	lsls	r3, r3, #7
 8002d2e:	4a15      	ldr	r2, [pc, #84]	@ (8002d84 <HAL_UART_MspDeInit+0x78>)
 8002d30:	0019      	movs	r1, r3
 8002d32:	0010      	movs	r0, r2
 8002d34:	f001 f856 	bl	8003de4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2);
 8002d38:	4b13      	ldr	r3, [pc, #76]	@ (8002d88 <HAL_UART_MspDeInit+0x7c>)
 8002d3a:	2104      	movs	r1, #4
 8002d3c:	0018      	movs	r0, r3
 8002d3e:	f001 f851 	bl	8003de4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_12);
 8002d42:	2380      	movs	r3, #128	@ 0x80
 8002d44:	015a      	lsls	r2, r3, #5
 8002d46:	23a0      	movs	r3, #160	@ 0xa0
 8002d48:	05db      	lsls	r3, r3, #23
 8002d4a:	0011      	movs	r1, r2
 8002d4c:	0018      	movs	r0, r3
 8002d4e:	f001 f849 	bl	8003de4 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2280      	movs	r2, #128	@ 0x80
 8002d56:	589b      	ldr	r3, [r3, r2]
 8002d58:	0018      	movs	r0, r3
 8002d5a:	f000 fb9d 	bl	8003498 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d62:	0018      	movs	r0, r3
 8002d64:	f000 fb98 	bl	8003498 <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002d68:	201b      	movs	r0, #27
 8002d6a:	f000 faee 	bl	800334a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8002d6e:	46c0      	nop			@ (mov r8, r8)
 8002d70:	46bd      	mov	sp, r7
 8002d72:	b002      	add	sp, #8
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	46c0      	nop			@ (mov r8, r8)
 8002d78:	40013800 	.word	0x40013800
 8002d7c:	40021000 	.word	0x40021000
 8002d80:	ffffbfff 	.word	0xffffbfff
 8002d84:	50000800 	.word	0x50000800
 8002d88:	50000400 	.word	0x50000400

08002d8c <LL_ADC_IsActiveFlag_OVR>:
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_OVR) == (LL_ADC_FLAG_OVR)) ? 1UL : 0UL);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2210      	movs	r2, #16
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	2b10      	cmp	r3, #16
 8002d9e:	d101      	bne.n	8002da4 <LL_ADC_IsActiveFlag_OVR+0x18>
 8002da0:	2301      	movs	r3, #1
 8002da2:	e000      	b.n	8002da6 <LL_ADC_IsActiveFlag_OVR+0x1a>
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	0018      	movs	r0, r3
 8002da8:	46bd      	mov	sp, r7
 8002daa:	b002      	add	sp, #8
 8002dac:	bd80      	pop	{r7, pc}

08002dae <LL_ADC_ClearFlag_OVR>:
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b082      	sub	sp, #8
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_OVR);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2210      	movs	r2, #16
 8002dba:	601a      	str	r2, [r3, #0]
}
 8002dbc:	46c0      	nop			@ (mov r8, r8)
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	b002      	add	sp, #8
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <LL_DMA_IsActiveFlag_TC1>:
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF1) == (DMA_ISR_TCIF1)) ? 1UL : 0UL);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2202      	movs	r2, #2
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d101      	bne.n	8002ddc <LL_DMA_IsActiveFlag_TC1+0x18>
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e000      	b.n	8002dde <LL_DMA_IsActiveFlag_TC1+0x1a>
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	0018      	movs	r0, r3
 8002de0:	46bd      	mov	sp, r7
 8002de2:	b002      	add	sp, #8
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <LL_DMA_IsActiveFlag_HT1>:
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b082      	sub	sp, #8
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF1) == (DMA_ISR_HTIF1)) ? 1UL : 0UL);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2204      	movs	r2, #4
 8002df4:	4013      	ands	r3, r2
 8002df6:	2b04      	cmp	r3, #4
 8002df8:	d101      	bne.n	8002dfe <LL_DMA_IsActiveFlag_HT1+0x18>
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e000      	b.n	8002e00 <LL_DMA_IsActiveFlag_HT1+0x1a>
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	0018      	movs	r0, r3
 8002e02:	46bd      	mov	sp, r7
 8002e04:	b002      	add	sp, #8
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <LL_DMA_IsActiveFlag_TE1>:
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF1) == (DMA_ISR_TEIF1)) ? 1UL : 0UL);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2208      	movs	r2, #8
 8002e16:	4013      	ands	r3, r2
 8002e18:	2b08      	cmp	r3, #8
 8002e1a:	d101      	bne.n	8002e20 <LL_DMA_IsActiveFlag_TE1+0x18>
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e000      	b.n	8002e22 <LL_DMA_IsActiveFlag_TE1+0x1a>
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	0018      	movs	r0, r3
 8002e24:	46bd      	mov	sp, r7
 8002e26:	b002      	add	sp, #8
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <LL_DMA_ClearFlag_TC1>:
{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b082      	sub	sp, #8
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2202      	movs	r2, #2
 8002e36:	605a      	str	r2, [r3, #4]
}
 8002e38:	46c0      	nop			@ (mov r8, r8)
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	b002      	add	sp, #8
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <LL_DMA_ClearFlag_HT1>:
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF1);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2204      	movs	r2, #4
 8002e4c:	605a      	str	r2, [r3, #4]
}
 8002e4e:	46c0      	nop			@ (mov r8, r8)
 8002e50:	46bd      	mov	sp, r7
 8002e52:	b002      	add	sp, #8
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <LL_DMA_ClearFlag_TE1>:
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b082      	sub	sp, #8
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF1);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2208      	movs	r2, #8
 8002e62:	605a      	str	r2, [r3, #4]
}
 8002e64:	46c0      	nop			@ (mov r8, r8)
 8002e66:	46bd      	mov	sp, r7
 8002e68:	b002      	add	sp, #8
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002e70:	46c0      	nop			@ (mov r8, r8)
 8002e72:	e7fd      	b.n	8002e70 <NMI_Handler+0x4>

08002e74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e78:	46c0      	nop			@ (mov r8, r8)
 8002e7a:	e7fd      	b.n	8002e78 <HardFault_Handler+0x4>

08002e7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e80:	46c0      	nop			@ (mov r8, r8)
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e86:	b580      	push	{r7, lr}
 8002e88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e8a:	46c0      	nop			@ (mov r8, r8)
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e94:	f000 f926 	bl	80030e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e98:	46c0      	nop			@ (mov r8, r8)
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
	...

08002ea0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
  /* Check whether DMA transfer complete caused the DMA interruption */
  if(LL_DMA_IsActiveFlag_TC1(DMA1) == 1)
 8002ea4:	4b15      	ldr	r3, [pc, #84]	@ (8002efc <DMA1_Channel1_IRQHandler+0x5c>)
 8002ea6:	0018      	movs	r0, r3
 8002ea8:	f7ff ff8c 	bl	8002dc4 <LL_DMA_IsActiveFlag_TC1>
 8002eac:	0003      	movs	r3, r0
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d106      	bne.n	8002ec0 <DMA1_Channel1_IRQHandler+0x20>
  {
	/* Clear flag DMA transfer complete */
	LL_DMA_ClearFlag_TC1(DMA1);
 8002eb2:	4b12      	ldr	r3, [pc, #72]	@ (8002efc <DMA1_Channel1_IRQHandler+0x5c>)
 8002eb4:	0018      	movs	r0, r3
 8002eb6:	f7ff ffb8 	bl	8002e2a <LL_DMA_ClearFlag_TC1>

	/* Call interruption treatment function */
	ADC_ConvCpltCallback();
 8002eba:	f7ff fb89 	bl	80025d0 <ADC_ConvCpltCallback>
 8002ebe:	e00c      	b.n	8002eda <DMA1_Channel1_IRQHandler+0x3a>
  }
  else if(LL_DMA_IsActiveFlag_HT1(DMA1) == 1)
 8002ec0:	4b0e      	ldr	r3, [pc, #56]	@ (8002efc <DMA1_Channel1_IRQHandler+0x5c>)
 8002ec2:	0018      	movs	r0, r3
 8002ec4:	f7ff ff8f 	bl	8002de6 <LL_DMA_IsActiveFlag_HT1>
 8002ec8:	0003      	movs	r3, r0
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d105      	bne.n	8002eda <DMA1_Channel1_IRQHandler+0x3a>
  {
	  /* Clear flag DMA half transfer complete */
	  LL_DMA_ClearFlag_HT1(DMA1);
 8002ece:	4b0b      	ldr	r3, [pc, #44]	@ (8002efc <DMA1_Channel1_IRQHandler+0x5c>)
 8002ed0:	0018      	movs	r0, r3
 8002ed2:	f7ff ffb5 	bl	8002e40 <LL_DMA_ClearFlag_HT1>

	  /* Call interruption treatment function */
	  ADC_ConvHalfCpltCallback();
 8002ed6:	f7ff fb85 	bl	80025e4 <ADC_ConvHalfCpltCallback>
  }
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
  /* Check whether DMA transfer error caused the DMA interruption */
  if(LL_DMA_IsActiveFlag_TE1(DMA1) == 1)
 8002eda:	4b08      	ldr	r3, [pc, #32]	@ (8002efc <DMA1_Channel1_IRQHandler+0x5c>)
 8002edc:	0018      	movs	r0, r3
 8002ede:	f7ff ff93 	bl	8002e08 <LL_DMA_IsActiveFlag_TE1>
 8002ee2:	0003      	movs	r3, r0
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d105      	bne.n	8002ef4 <DMA1_Channel1_IRQHandler+0x54>
  {
	  /* Clear flag DMA transfer error */
	  LL_DMA_ClearFlag_TE1(DMA1);
 8002ee8:	4b04      	ldr	r3, [pc, #16]	@ (8002efc <DMA1_Channel1_IRQHandler+0x5c>)
 8002eea:	0018      	movs	r0, r3
 8002eec:	f7ff ffb3 	bl	8002e56 <LL_DMA_ClearFlag_TE1>

	  /* Call interruption treatment function */
	  ADC_ErrorCallback();
 8002ef0:	f7ff fb82 	bl	80025f8 <ADC_ErrorCallback>
  }
  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002ef4:	46c0      	nop			@ (mov r8, r8)
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	46c0      	nop			@ (mov r8, r8)
 8002efc:	40020000 	.word	0x40020000

08002f00 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002f04:	4b05      	ldr	r3, [pc, #20]	@ (8002f1c <DMA1_Channel2_3_IRQHandler+0x1c>)
 8002f06:	0018      	movs	r0, r3
 8002f08:	f000 fca2 	bl	8003850 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002f0c:	4b04      	ldr	r3, [pc, #16]	@ (8002f20 <DMA1_Channel2_3_IRQHandler+0x20>)
 8002f0e:	0018      	movs	r0, r3
 8002f10:	f000 fc9e 	bl	8003850 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8002f14:	46c0      	nop			@ (mov r8, r8)
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	46c0      	nop			@ (mov r8, r8)
 8002f1c:	20000364 	.word	0x20000364
 8002f20:	200003c0 	.word	0x200003c0

08002f24 <DMAMUX1_DMA1_CH4_5_IRQHandler>:

/**
  * @brief This function handles DMAMUX1, DMA1 Channel 4 and 5.
  */
void DMAMUX1_DMA1_CH4_5_IRQHandler(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_DMA1_CH4_5_IRQn 0 */

  /* USER CODE END DMAMUX1_DMA1_CH4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002f28:	4b05      	ldr	r3, [pc, #20]	@ (8002f40 <DMAMUX1_DMA1_CH4_5_IRQHandler+0x1c>)
 8002f2a:	0018      	movs	r0, r3
 8002f2c:	f000 fc90 	bl	8003850 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002f30:	4b04      	ldr	r3, [pc, #16]	@ (8002f44 <DMAMUX1_DMA1_CH4_5_IRQHandler+0x20>)
 8002f32:	0018      	movs	r0, r3
 8002f34:	f000 fc8c 	bl	8003850 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_DMA1_CH4_5_IRQn 1 */

  /* USER CODE END DMAMUX1_DMA1_CH4_5_IRQn 1 */
}
 8002f38:	46c0      	nop			@ (mov r8, r8)
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	46c0      	nop			@ (mov r8, r8)
 8002f40:	2000011c 	.word	0x2000011c
 8002f44:	20000178 	.word	0x20000178

08002f48 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */
  /* Check whether ADC group regular overrun caused the ADC interruption */
  if(LL_ADC_IsActiveFlag_OVR(ADC1) != 0)
 8002f4c:	4b07      	ldr	r3, [pc, #28]	@ (8002f6c <ADC1_IRQHandler+0x24>)
 8002f4e:	0018      	movs	r0, r3
 8002f50:	f7ff ff1c 	bl	8002d8c <LL_ADC_IsActiveFlag_OVR>
 8002f54:	1e03      	subs	r3, r0, #0
 8002f56:	d005      	beq.n	8002f64 <ADC1_IRQHandler+0x1c>
  {
	/* Clear flag ADC group regular overrun */
	LL_ADC_ClearFlag_OVR(ADC1);
 8002f58:	4b04      	ldr	r3, [pc, #16]	@ (8002f6c <ADC1_IRQHandler+0x24>)
 8002f5a:	0018      	movs	r0, r3
 8002f5c:	f7ff ff27 	bl	8002dae <LL_ADC_ClearFlag_OVR>

	/* Call interruption treatment function */
	ADC_ErrorCallback();
 8002f60:	f7ff fb4a 	bl	80025f8 <ADC_ErrorCallback>
  }
  /* USER CODE END ADC1_IRQn 0 */
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8002f64:	46c0      	nop			@ (mov r8, r8)
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	46c0      	nop			@ (mov r8, r8)
 8002f6c:	40012400 	.word	0x40012400

08002f70 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 interrupt (combined with EXTI 23).
  */
void I2C1_IRQHandler(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8002f74:	4b09      	ldr	r3, [pc, #36]	@ (8002f9c <I2C1_IRQHandler+0x2c>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	699a      	ldr	r2, [r3, #24]
 8002f7a:	23e0      	movs	r3, #224	@ 0xe0
 8002f7c:	00db      	lsls	r3, r3, #3
 8002f7e:	4013      	ands	r3, r2
 8002f80:	d004      	beq.n	8002f8c <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8002f82:	4b06      	ldr	r3, [pc, #24]	@ (8002f9c <I2C1_IRQHandler+0x2c>)
 8002f84:	0018      	movs	r0, r3
 8002f86:	f001 f8e3 	bl	8004150 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8002f8a:	e003      	b.n	8002f94 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8002f8c:	4b03      	ldr	r3, [pc, #12]	@ (8002f9c <I2C1_IRQHandler+0x2c>)
 8002f8e:	0018      	movs	r0, r3
 8002f90:	f001 f8c4 	bl	800411c <HAL_I2C_EV_IRQHandler>
}
 8002f94:	46c0      	nop			@ (mov r8, r8)
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	46c0      	nop			@ (mov r8, r8)
 8002f9c:	200000c8 	.word	0x200000c8

08002fa0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 interrupt.
  */
void USART1_IRQHandler(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002fa4:	4b03      	ldr	r3, [pc, #12]	@ (8002fb4 <USART1_IRQHandler+0x14>)
 8002fa6:	0018      	movs	r0, r3
 8002fa8:	f003 fcde 	bl	8006968 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002fac:	46c0      	nop			@ (mov r8, r8)
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	46c0      	nop			@ (mov r8, r8)
 8002fb4:	200002d0 	.word	0x200002d0

08002fb8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002fbc:	4b03      	ldr	r3, [pc, #12]	@ (8002fcc <SystemInit+0x14>)
 8002fbe:	2280      	movs	r2, #128	@ 0x80
 8002fc0:	0512      	lsls	r2, r2, #20
 8002fc2:	609a      	str	r2, [r3, #8]
#endif
}
 8002fc4:	46c0      	nop			@ (mov r8, r8)
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	46c0      	nop			@ (mov r8, r8)
 8002fcc:	e000ed00 	.word	0xe000ed00

08002fd0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002fd0:	480d      	ldr	r0, [pc, #52]	@ (8003008 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002fd2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002fd4:	f7ff fff0 	bl	8002fb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002fd8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002fda:	e003      	b.n	8002fe4 <LoopCopyDataInit>

08002fdc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002fdc:	4b0b      	ldr	r3, [pc, #44]	@ (800300c <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8002fde:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002fe0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002fe2:	3104      	adds	r1, #4

08002fe4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002fe4:	480a      	ldr	r0, [pc, #40]	@ (8003010 <LoopForever+0xa>)
  ldr r3, =_edata
 8002fe6:	4b0b      	ldr	r3, [pc, #44]	@ (8003014 <LoopForever+0xe>)
  adds r2, r0, r1
 8002fe8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002fea:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002fec:	d3f6      	bcc.n	8002fdc <CopyDataInit>
  ldr r2, =_sbss
 8002fee:	4a0a      	ldr	r2, [pc, #40]	@ (8003018 <LoopForever+0x12>)
  b LoopFillZerobss
 8002ff0:	e002      	b.n	8002ff8 <LoopFillZerobss>

08002ff2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002ff2:	2300      	movs	r3, #0
  str  r3, [r2]
 8002ff4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ff6:	3204      	adds	r2, #4

08002ff8 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8002ff8:	4b08      	ldr	r3, [pc, #32]	@ (800301c <LoopForever+0x16>)
  cmp r2, r3
 8002ffa:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002ffc:	d3f9      	bcc.n	8002ff2 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8002ffe:	f005 fa35 	bl	800846c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003002:	f7fd fe01 	bl	8000c08 <main>

08003006 <LoopForever>:

LoopForever:
    b LoopForever
 8003006:	e7fe      	b.n	8003006 <LoopForever>
  ldr   r0, =_estack
 8003008:	20006000 	.word	0x20006000
  ldr r3, =_sidata
 800300c:	080088f4 	.word	0x080088f4
  ldr r0, =_sdata
 8003010:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003014:	200000a8 	.word	0x200000a8
  ldr r2, =_sbss
 8003018:	200000a8 	.word	0x200000a8
  ldr r3, = _ebss
 800301c:	2000077c 	.word	0x2000077c

08003020 <EXTI0_1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003020:	e7fe      	b.n	8003020 <EXTI0_1_IRQHandler>

08003022 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	b082      	sub	sp, #8
 8003026:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003028:	1dfb      	adds	r3, r7, #7
 800302a:	2200      	movs	r2, #0
 800302c:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800302e:	2003      	movs	r0, #3
 8003030:	f000 f80e 	bl	8003050 <HAL_InitTick>
 8003034:	1e03      	subs	r3, r0, #0
 8003036:	d003      	beq.n	8003040 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8003038:	1dfb      	adds	r3, r7, #7
 800303a:	2201      	movs	r2, #1
 800303c:	701a      	strb	r2, [r3, #0]
 800303e:	e001      	b.n	8003044 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003040:	f7ff fb66 	bl	8002710 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003044:	1dfb      	adds	r3, r7, #7
 8003046:	781b      	ldrb	r3, [r3, #0]
}
 8003048:	0018      	movs	r0, r3
 800304a:	46bd      	mov	sp, r7
 800304c:	b002      	add	sp, #8
 800304e:	bd80      	pop	{r7, pc}

08003050 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003050:	b590      	push	{r4, r7, lr}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003058:	230f      	movs	r3, #15
 800305a:	18fb      	adds	r3, r7, r3
 800305c:	2200      	movs	r2, #0
 800305e:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8003060:	4b1d      	ldr	r3, [pc, #116]	@ (80030d8 <HAL_InitTick+0x88>)
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d02b      	beq.n	80030c0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8003068:	4b1c      	ldr	r3, [pc, #112]	@ (80030dc <HAL_InitTick+0x8c>)
 800306a:	681c      	ldr	r4, [r3, #0]
 800306c:	4b1a      	ldr	r3, [pc, #104]	@ (80030d8 <HAL_InitTick+0x88>)
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	0019      	movs	r1, r3
 8003072:	23fa      	movs	r3, #250	@ 0xfa
 8003074:	0098      	lsls	r0, r3, #2
 8003076:	f7fd f847 	bl	8000108 <__udivsi3>
 800307a:	0003      	movs	r3, r0
 800307c:	0019      	movs	r1, r3
 800307e:	0020      	movs	r0, r4
 8003080:	f7fd f842 	bl	8000108 <__udivsi3>
 8003084:	0003      	movs	r3, r0
 8003086:	0018      	movs	r0, r3
 8003088:	f000 f96f 	bl	800336a <HAL_SYSTICK_Config>
 800308c:	1e03      	subs	r3, r0, #0
 800308e:	d112      	bne.n	80030b6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2b03      	cmp	r3, #3
 8003094:	d80a      	bhi.n	80030ac <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003096:	6879      	ldr	r1, [r7, #4]
 8003098:	2301      	movs	r3, #1
 800309a:	425b      	negs	r3, r3
 800309c:	2200      	movs	r2, #0
 800309e:	0018      	movs	r0, r3
 80030a0:	f000 f92e 	bl	8003300 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80030a4:	4b0e      	ldr	r3, [pc, #56]	@ (80030e0 <HAL_InitTick+0x90>)
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	601a      	str	r2, [r3, #0]
 80030aa:	e00d      	b.n	80030c8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80030ac:	230f      	movs	r3, #15
 80030ae:	18fb      	adds	r3, r7, r3
 80030b0:	2201      	movs	r2, #1
 80030b2:	701a      	strb	r2, [r3, #0]
 80030b4:	e008      	b.n	80030c8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80030b6:	230f      	movs	r3, #15
 80030b8:	18fb      	adds	r3, r7, r3
 80030ba:	2201      	movs	r2, #1
 80030bc:	701a      	strb	r2, [r3, #0]
 80030be:	e003      	b.n	80030c8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80030c0:	230f      	movs	r3, #15
 80030c2:	18fb      	adds	r3, r7, r3
 80030c4:	2201      	movs	r2, #1
 80030c6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80030c8:	230f      	movs	r3, #15
 80030ca:	18fb      	adds	r3, r7, r3
 80030cc:	781b      	ldrb	r3, [r3, #0]
}
 80030ce:	0018      	movs	r0, r3
 80030d0:	46bd      	mov	sp, r7
 80030d2:	b005      	add	sp, #20
 80030d4:	bd90      	pop	{r4, r7, pc}
 80030d6:	46c0      	nop			@ (mov r8, r8)
 80030d8:	200000a4 	.word	0x200000a4
 80030dc:	2000009c 	.word	0x2000009c
 80030e0:	200000a0 	.word	0x200000a0

080030e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80030e8:	4b05      	ldr	r3, [pc, #20]	@ (8003100 <HAL_IncTick+0x1c>)
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	001a      	movs	r2, r3
 80030ee:	4b05      	ldr	r3, [pc, #20]	@ (8003104 <HAL_IncTick+0x20>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	18d2      	adds	r2, r2, r3
 80030f4:	4b03      	ldr	r3, [pc, #12]	@ (8003104 <HAL_IncTick+0x20>)
 80030f6:	601a      	str	r2, [r3, #0]
}
 80030f8:	46c0      	nop			@ (mov r8, r8)
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	46c0      	nop			@ (mov r8, r8)
 8003100:	200000a4 	.word	0x200000a4
 8003104:	20000778 	.word	0x20000778

08003108 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
  return uwTick;
 800310c:	4b02      	ldr	r3, [pc, #8]	@ (8003118 <HAL_GetTick+0x10>)
 800310e:	681b      	ldr	r3, [r3, #0]
}
 8003110:	0018      	movs	r0, r3
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	46c0      	nop			@ (mov r8, r8)
 8003118:	20000778 	.word	0x20000778

0800311c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003124:	f7ff fff0 	bl	8003108 <HAL_GetTick>
 8003128:	0003      	movs	r3, r0
 800312a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	3301      	adds	r3, #1
 8003134:	d005      	beq.n	8003142 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003136:	4b0a      	ldr	r3, [pc, #40]	@ (8003160 <HAL_Delay+0x44>)
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	001a      	movs	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	189b      	adds	r3, r3, r2
 8003140:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003142:	46c0      	nop			@ (mov r8, r8)
 8003144:	f7ff ffe0 	bl	8003108 <HAL_GetTick>
 8003148:	0002      	movs	r2, r0
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	68fa      	ldr	r2, [r7, #12]
 8003150:	429a      	cmp	r2, r3
 8003152:	d8f7      	bhi.n	8003144 <HAL_Delay+0x28>
  {
  }
}
 8003154:	46c0      	nop			@ (mov r8, r8)
 8003156:	46c0      	nop			@ (mov r8, r8)
 8003158:	46bd      	mov	sp, r7
 800315a:	b004      	add	sp, #16
 800315c:	bd80      	pop	{r7, pc}
 800315e:	46c0      	nop			@ (mov r8, r8)
 8003160:	200000a4 	.word	0x200000a4

08003164 <__NVIC_EnableIRQ>:
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	0002      	movs	r2, r0
 800316c:	1dfb      	adds	r3, r7, #7
 800316e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003170:	1dfb      	adds	r3, r7, #7
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	2b7f      	cmp	r3, #127	@ 0x7f
 8003176:	d809      	bhi.n	800318c <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003178:	1dfb      	adds	r3, r7, #7
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	001a      	movs	r2, r3
 800317e:	231f      	movs	r3, #31
 8003180:	401a      	ands	r2, r3
 8003182:	4b04      	ldr	r3, [pc, #16]	@ (8003194 <__NVIC_EnableIRQ+0x30>)
 8003184:	2101      	movs	r1, #1
 8003186:	4091      	lsls	r1, r2
 8003188:	000a      	movs	r2, r1
 800318a:	601a      	str	r2, [r3, #0]
}
 800318c:	46c0      	nop			@ (mov r8, r8)
 800318e:	46bd      	mov	sp, r7
 8003190:	b002      	add	sp, #8
 8003192:	bd80      	pop	{r7, pc}
 8003194:	e000e100 	.word	0xe000e100

08003198 <__NVIC_DisableIRQ>:
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	0002      	movs	r2, r0
 80031a0:	1dfb      	adds	r3, r7, #7
 80031a2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80031a4:	1dfb      	adds	r3, r7, #7
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80031aa:	d810      	bhi.n	80031ce <__NVIC_DisableIRQ+0x36>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031ac:	1dfb      	adds	r3, r7, #7
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	001a      	movs	r2, r3
 80031b2:	231f      	movs	r3, #31
 80031b4:	4013      	ands	r3, r2
 80031b6:	4908      	ldr	r1, [pc, #32]	@ (80031d8 <__NVIC_DisableIRQ+0x40>)
 80031b8:	2201      	movs	r2, #1
 80031ba:	409a      	lsls	r2, r3
 80031bc:	0013      	movs	r3, r2
 80031be:	2280      	movs	r2, #128	@ 0x80
 80031c0:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
 80031c2:	f3bf 8f4f 	dsb	sy
}
 80031c6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 80031c8:	f3bf 8f6f 	isb	sy
}
 80031cc:	46c0      	nop			@ (mov r8, r8)
}
 80031ce:	46c0      	nop			@ (mov r8, r8)
 80031d0:	46bd      	mov	sp, r7
 80031d2:	b002      	add	sp, #8
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	46c0      	nop			@ (mov r8, r8)
 80031d8:	e000e100 	.word	0xe000e100

080031dc <__NVIC_SetPriority>:
{
 80031dc:	b590      	push	{r4, r7, lr}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	0002      	movs	r2, r0
 80031e4:	6039      	str	r1, [r7, #0]
 80031e6:	1dfb      	adds	r3, r7, #7
 80031e8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80031ea:	1dfb      	adds	r3, r7, #7
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	2b7f      	cmp	r3, #127	@ 0x7f
 80031f0:	d828      	bhi.n	8003244 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80031f2:	4a2f      	ldr	r2, [pc, #188]	@ (80032b0 <__NVIC_SetPriority+0xd4>)
 80031f4:	1dfb      	adds	r3, r7, #7
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	b25b      	sxtb	r3, r3
 80031fa:	089b      	lsrs	r3, r3, #2
 80031fc:	33c0      	adds	r3, #192	@ 0xc0
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	589b      	ldr	r3, [r3, r2]
 8003202:	1dfa      	adds	r2, r7, #7
 8003204:	7812      	ldrb	r2, [r2, #0]
 8003206:	0011      	movs	r1, r2
 8003208:	2203      	movs	r2, #3
 800320a:	400a      	ands	r2, r1
 800320c:	00d2      	lsls	r2, r2, #3
 800320e:	21ff      	movs	r1, #255	@ 0xff
 8003210:	4091      	lsls	r1, r2
 8003212:	000a      	movs	r2, r1
 8003214:	43d2      	mvns	r2, r2
 8003216:	401a      	ands	r2, r3
 8003218:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	019b      	lsls	r3, r3, #6
 800321e:	22ff      	movs	r2, #255	@ 0xff
 8003220:	401a      	ands	r2, r3
 8003222:	1dfb      	adds	r3, r7, #7
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	0018      	movs	r0, r3
 8003228:	2303      	movs	r3, #3
 800322a:	4003      	ands	r3, r0
 800322c:	00db      	lsls	r3, r3, #3
 800322e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003230:	481f      	ldr	r0, [pc, #124]	@ (80032b0 <__NVIC_SetPriority+0xd4>)
 8003232:	1dfb      	adds	r3, r7, #7
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	b25b      	sxtb	r3, r3
 8003238:	089b      	lsrs	r3, r3, #2
 800323a:	430a      	orrs	r2, r1
 800323c:	33c0      	adds	r3, #192	@ 0xc0
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	501a      	str	r2, [r3, r0]
}
 8003242:	e031      	b.n	80032a8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003244:	4a1b      	ldr	r2, [pc, #108]	@ (80032b4 <__NVIC_SetPriority+0xd8>)
 8003246:	1dfb      	adds	r3, r7, #7
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	0019      	movs	r1, r3
 800324c:	230f      	movs	r3, #15
 800324e:	400b      	ands	r3, r1
 8003250:	3b08      	subs	r3, #8
 8003252:	089b      	lsrs	r3, r3, #2
 8003254:	3306      	adds	r3, #6
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	18d3      	adds	r3, r2, r3
 800325a:	3304      	adds	r3, #4
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	1dfa      	adds	r2, r7, #7
 8003260:	7812      	ldrb	r2, [r2, #0]
 8003262:	0011      	movs	r1, r2
 8003264:	2203      	movs	r2, #3
 8003266:	400a      	ands	r2, r1
 8003268:	00d2      	lsls	r2, r2, #3
 800326a:	21ff      	movs	r1, #255	@ 0xff
 800326c:	4091      	lsls	r1, r2
 800326e:	000a      	movs	r2, r1
 8003270:	43d2      	mvns	r2, r2
 8003272:	401a      	ands	r2, r3
 8003274:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	019b      	lsls	r3, r3, #6
 800327a:	22ff      	movs	r2, #255	@ 0xff
 800327c:	401a      	ands	r2, r3
 800327e:	1dfb      	adds	r3, r7, #7
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	0018      	movs	r0, r3
 8003284:	2303      	movs	r3, #3
 8003286:	4003      	ands	r3, r0
 8003288:	00db      	lsls	r3, r3, #3
 800328a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800328c:	4809      	ldr	r0, [pc, #36]	@ (80032b4 <__NVIC_SetPriority+0xd8>)
 800328e:	1dfb      	adds	r3, r7, #7
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	001c      	movs	r4, r3
 8003294:	230f      	movs	r3, #15
 8003296:	4023      	ands	r3, r4
 8003298:	3b08      	subs	r3, #8
 800329a:	089b      	lsrs	r3, r3, #2
 800329c:	430a      	orrs	r2, r1
 800329e:	3306      	adds	r3, #6
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	18c3      	adds	r3, r0, r3
 80032a4:	3304      	adds	r3, #4
 80032a6:	601a      	str	r2, [r3, #0]
}
 80032a8:	46c0      	nop			@ (mov r8, r8)
 80032aa:	46bd      	mov	sp, r7
 80032ac:	b003      	add	sp, #12
 80032ae:	bd90      	pop	{r4, r7, pc}
 80032b0:	e000e100 	.word	0xe000e100
 80032b4:	e000ed00 	.word	0xe000ed00

080032b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	1e5a      	subs	r2, r3, #1
 80032c4:	2380      	movs	r3, #128	@ 0x80
 80032c6:	045b      	lsls	r3, r3, #17
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d301      	bcc.n	80032d0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032cc:	2301      	movs	r3, #1
 80032ce:	e010      	b.n	80032f2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032d0:	4b0a      	ldr	r3, [pc, #40]	@ (80032fc <SysTick_Config+0x44>)
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	3a01      	subs	r2, #1
 80032d6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032d8:	2301      	movs	r3, #1
 80032da:	425b      	negs	r3, r3
 80032dc:	2103      	movs	r1, #3
 80032de:	0018      	movs	r0, r3
 80032e0:	f7ff ff7c 	bl	80031dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032e4:	4b05      	ldr	r3, [pc, #20]	@ (80032fc <SysTick_Config+0x44>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032ea:	4b04      	ldr	r3, [pc, #16]	@ (80032fc <SysTick_Config+0x44>)
 80032ec:	2207      	movs	r2, #7
 80032ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	0018      	movs	r0, r3
 80032f4:	46bd      	mov	sp, r7
 80032f6:	b002      	add	sp, #8
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	46c0      	nop			@ (mov r8, r8)
 80032fc:	e000e010 	.word	0xe000e010

08003300 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	60b9      	str	r1, [r7, #8]
 8003308:	607a      	str	r2, [r7, #4]
 800330a:	210f      	movs	r1, #15
 800330c:	187b      	adds	r3, r7, r1
 800330e:	1c02      	adds	r2, r0, #0
 8003310:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003312:	68ba      	ldr	r2, [r7, #8]
 8003314:	187b      	adds	r3, r7, r1
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	b25b      	sxtb	r3, r3
 800331a:	0011      	movs	r1, r2
 800331c:	0018      	movs	r0, r3
 800331e:	f7ff ff5d 	bl	80031dc <__NVIC_SetPriority>
}
 8003322:	46c0      	nop			@ (mov r8, r8)
 8003324:	46bd      	mov	sp, r7
 8003326:	b004      	add	sp, #16
 8003328:	bd80      	pop	{r7, pc}

0800332a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b082      	sub	sp, #8
 800332e:	af00      	add	r7, sp, #0
 8003330:	0002      	movs	r2, r0
 8003332:	1dfb      	adds	r3, r7, #7
 8003334:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003336:	1dfb      	adds	r3, r7, #7
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	b25b      	sxtb	r3, r3
 800333c:	0018      	movs	r0, r3
 800333e:	f7ff ff11 	bl	8003164 <__NVIC_EnableIRQ>
}
 8003342:	46c0      	nop			@ (mov r8, r8)
 8003344:	46bd      	mov	sp, r7
 8003346:	b002      	add	sp, #8
 8003348:	bd80      	pop	{r7, pc}

0800334a <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800334a:	b580      	push	{r7, lr}
 800334c:	b082      	sub	sp, #8
 800334e:	af00      	add	r7, sp, #0
 8003350:	0002      	movs	r2, r0
 8003352:	1dfb      	adds	r3, r7, #7
 8003354:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003356:	1dfb      	adds	r3, r7, #7
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	b25b      	sxtb	r3, r3
 800335c:	0018      	movs	r0, r3
 800335e:	f7ff ff1b 	bl	8003198 <__NVIC_DisableIRQ>
}
 8003362:	46c0      	nop			@ (mov r8, r8)
 8003364:	46bd      	mov	sp, r7
 8003366:	b002      	add	sp, #8
 8003368:	bd80      	pop	{r7, pc}

0800336a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800336a:	b580      	push	{r7, lr}
 800336c:	b082      	sub	sp, #8
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	0018      	movs	r0, r3
 8003376:	f7ff ff9f 	bl	80032b8 <SysTick_Config>
 800337a:	0003      	movs	r3, r0
}
 800337c:	0018      	movs	r0, r3
 800337e:	46bd      	mov	sp, r7
 8003380:	b002      	add	sp, #8
 8003382:	bd80      	pop	{r7, pc}

08003384 <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d101      	bne.n	8003396 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e077      	b.n	8003486 <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a3d      	ldr	r2, [pc, #244]	@ (8003490 <HAL_DMA_Init+0x10c>)
 800339c:	4694      	mov	ip, r2
 800339e:	4463      	add	r3, ip
 80033a0:	2114      	movs	r1, #20
 80033a2:	0018      	movs	r0, r3
 80033a4:	f7fc feb0 	bl	8000108 <__udivsi3>
 80033a8:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 80033aa:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2225      	movs	r2, #37	@ 0x25
 80033b4:	2102      	movs	r1, #2
 80033b6:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4934      	ldr	r1, [pc, #208]	@ (8003494 <HAL_DMA_Init+0x110>)
 80033c4:	400a      	ands	r2, r1
 80033c6:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	6819      	ldr	r1, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	689a      	ldr	r2, [r3, #8]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	431a      	orrs	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	431a      	orrs	r2, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	431a      	orrs	r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	431a      	orrs	r2, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	69db      	ldr	r3, [r3, #28]
 80033ee:	431a      	orrs	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a1b      	ldr	r3, [r3, #32]
 80033f4:	431a      	orrs	r2, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	430a      	orrs	r2, r1
 80033fc:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	0018      	movs	r0, r3
 8003402:	f000 fb2d 	bl	8003a60 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	689a      	ldr	r2, [r3, #8]
 800340a:	2380      	movs	r3, #128	@ 0x80
 800340c:	01db      	lsls	r3, r3, #7
 800340e:	429a      	cmp	r2, r3
 8003410:	d102      	bne.n	8003418 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685a      	ldr	r2, [r3, #4]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003420:	21ff      	movs	r1, #255	@ 0xff
 8003422:	400a      	ands	r2, r1
 8003424:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800342e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d011      	beq.n	800345c <HAL_DMA_Init+0xd8>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	2b04      	cmp	r3, #4
 800343e:	d80d      	bhi.n	800345c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	0018      	movs	r0, r3
 8003444:	f000 fb38 	bl	8003ab8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800344c:	2200      	movs	r2, #0
 800344e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003458:	605a      	str	r2, [r3, #4]
 800345a:	e008      	b.n	800346e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2225      	movs	r2, #37	@ 0x25
 8003478:	2101      	movs	r1, #1
 800347a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2224      	movs	r2, #36	@ 0x24
 8003480:	2100      	movs	r1, #0
 8003482:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	0018      	movs	r0, r3
 8003488:	46bd      	mov	sp, r7
 800348a:	b002      	add	sp, #8
 800348c:	bd80      	pop	{r7, pc}
 800348e:	46c0      	nop			@ (mov r8, r8)
 8003490:	bffdfff8 	.word	0xbffdfff8
 8003494:	ffff800f 	.word	0xffff800f

08003498 <HAL_DMA_DeInit>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d101      	bne.n	80034aa <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e066      	b.n	8003578 <HAL_DMA_DeInit+0xe0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2101      	movs	r1, #1
 80034b6:	438a      	bics	r2, r1
 80034b8:	601a      	str	r2, [r3, #0]

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a30      	ldr	r2, [pc, #192]	@ (8003580 <HAL_DMA_DeInit+0xe8>)
 80034c0:	4694      	mov	ip, r2
 80034c2:	4463      	add	r3, ip
 80034c4:	2114      	movs	r1, #20
 80034c6:	0018      	movs	r0, r3
 80034c8:	f7fc fe1e 	bl	8000108 <__udivsi3>
 80034cc:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 80034ce:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2200      	movs	r2, #0
 80034da:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 80034dc:	4b29      	ldr	r3, [pc, #164]	@ (8003584 <HAL_DMA_DeInit+0xec>)
 80034de:	6859      	ldr	r1, [r3, #4]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e4:	221c      	movs	r2, #28
 80034e6:	4013      	ands	r3, r2
 80034e8:	2201      	movs	r2, #1
 80034ea:	409a      	lsls	r2, r3
 80034ec:	4b25      	ldr	r3, [pc, #148]	@ (8003584 <HAL_DMA_DeInit+0xec>)
 80034ee:	430a      	orrs	r2, r1
 80034f0:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	0018      	movs	r0, r3
 80034f6:	f000 fab3 	bl	8003a60 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034fe:	2200      	movs	r2, #0
 8003500:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800350a:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d010      	beq.n	8003536 <HAL_DMA_DeInit+0x9e>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	2b04      	cmp	r3, #4
 800351a:	d80c      	bhi.n	8003536 <HAL_DMA_DeInit+0x9e>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	0018      	movs	r0, r3
 8003520:	f000 faca 	bl	8003ab8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003528:	2200      	movs	r2, #0
 800352a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003534:	605a      	str	r2, [r3, #4]
  }

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	639a      	str	r2, [r3, #56]	@ 0x38

  hdma->DMAmuxRequestGen = 0U;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma->DMAmuxRequestGenStatus = 0U;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 0U;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2225      	movs	r2, #37	@ 0x25
 800356a:	2100      	movs	r1, #0
 800356c:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2224      	movs	r2, #36	@ 0x24
 8003572:	2100      	movs	r1, #0
 8003574:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	0018      	movs	r0, r3
 800357a:	46bd      	mov	sp, r7
 800357c:	b002      	add	sp, #8
 800357e:	bd80      	pop	{r7, pc}
 8003580:	bffdfff8 	.word	0xbffdfff8
 8003584:	40020000 	.word	0x40020000

08003588 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b086      	sub	sp, #24
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	607a      	str	r2, [r7, #4]
 8003594:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003596:	2317      	movs	r3, #23
 8003598:	18fb      	adds	r3, r7, r3
 800359a:	2200      	movs	r2, #0
 800359c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2224      	movs	r2, #36	@ 0x24
 80035a2:	5c9b      	ldrb	r3, [r3, r2]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d101      	bne.n	80035ac <HAL_DMA_Start_IT+0x24>
 80035a8:	2302      	movs	r3, #2
 80035aa:	e070      	b.n	800368e <HAL_DMA_Start_IT+0x106>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2224      	movs	r2, #36	@ 0x24
 80035b0:	2101      	movs	r1, #1
 80035b2:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2225      	movs	r2, #37	@ 0x25
 80035b8:	5c9b      	ldrb	r3, [r3, r2]
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d157      	bne.n	8003670 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2225      	movs	r2, #37	@ 0x25
 80035c4:	2102      	movs	r1, #2
 80035c6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2200      	movs	r2, #0
 80035cc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2101      	movs	r1, #1
 80035da:	438a      	bics	r2, r1
 80035dc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	68b9      	ldr	r1, [r7, #8]
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f000 f9fb 	bl	80039e0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d008      	beq.n	8003604 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	210e      	movs	r1, #14
 80035fe:	430a      	orrs	r2, r1
 8003600:	601a      	str	r2, [r3, #0]
 8003602:	e00f      	b.n	8003624 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2104      	movs	r1, #4
 8003610:	438a      	bics	r2, r1
 8003612:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	210a      	movs	r1, #10
 8003620:	430a      	orrs	r2, r1
 8003622:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	2380      	movs	r3, #128	@ 0x80
 800362c:	025b      	lsls	r3, r3, #9
 800362e:	4013      	ands	r3, r2
 8003630:	d008      	beq.n	8003644 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800363c:	2180      	movs	r1, #128	@ 0x80
 800363e:	0049      	lsls	r1, r1, #1
 8003640:	430a      	orrs	r2, r1
 8003642:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003648:	2b00      	cmp	r3, #0
 800364a:	d008      	beq.n	800365e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003656:	2180      	movs	r1, #128	@ 0x80
 8003658:	0049      	lsls	r1, r1, #1
 800365a:	430a      	orrs	r2, r1
 800365c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2101      	movs	r1, #1
 800366a:	430a      	orrs	r2, r1
 800366c:	601a      	str	r2, [r3, #0]
 800366e:	e007      	b.n	8003680 <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2224      	movs	r2, #36	@ 0x24
 8003674:	2100      	movs	r1, #0
 8003676:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003678:	2317      	movs	r3, #23
 800367a:	18fb      	adds	r3, r7, r3
 800367c:	2202      	movs	r2, #2
 800367e:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2224      	movs	r2, #36	@ 0x24
 8003684:	2100      	movs	r1, #0
 8003686:	5499      	strb	r1, [r3, r2]

  return status;
 8003688:	2317      	movs	r3, #23
 800368a:	18fb      	adds	r3, r7, r3
 800368c:	781b      	ldrb	r3, [r3, #0]
}
 800368e:	0018      	movs	r0, r3
 8003690:	46bd      	mov	sp, r7
 8003692:	b006      	add	sp, #24
 8003694:	bd80      	pop	{r7, pc}
	...

08003698 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e050      	b.n	800374c <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2225      	movs	r2, #37	@ 0x25
 80036ae:	5c9b      	ldrb	r3, [r3, r2]
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d008      	beq.n	80036c8 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2204      	movs	r2, #4
 80036ba:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2224      	movs	r2, #36	@ 0x24
 80036c0:	2100      	movs	r1, #0
 80036c2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e041      	b.n	800374c <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	210e      	movs	r1, #14
 80036d4:	438a      	bics	r2, r1
 80036d6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036e2:	491c      	ldr	r1, [pc, #112]	@ (8003754 <HAL_DMA_Abort+0xbc>)
 80036e4:	400a      	ands	r2, r1
 80036e6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2101      	movs	r1, #1
 80036f4:	438a      	bics	r2, r1
 80036f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 80036f8:	4b17      	ldr	r3, [pc, #92]	@ (8003758 <HAL_DMA_Abort+0xc0>)
 80036fa:	6859      	ldr	r1, [r3, #4]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003700:	221c      	movs	r2, #28
 8003702:	4013      	ands	r3, r2
 8003704:	2201      	movs	r2, #1
 8003706:	409a      	lsls	r2, r3
 8003708:	4b13      	ldr	r3, [pc, #76]	@ (8003758 <HAL_DMA_Abort+0xc0>)
 800370a:	430a      	orrs	r2, r1
 800370c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003716:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00c      	beq.n	800373a <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800372a:	490a      	ldr	r1, [pc, #40]	@ (8003754 <HAL_DMA_Abort+0xbc>)
 800372c:	400a      	ands	r2, r1
 800372e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003738:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2225      	movs	r2, #37	@ 0x25
 800373e:	2101      	movs	r1, #1
 8003740:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2224      	movs	r2, #36	@ 0x24
 8003746:	2100      	movs	r1, #0
 8003748:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	0018      	movs	r0, r3
 800374e:	46bd      	mov	sp, r7
 8003750:	b002      	add	sp, #8
 8003752:	bd80      	pop	{r7, pc}
 8003754:	fffffeff 	.word	0xfffffeff
 8003758:	40020000 	.word	0x40020000

0800375c <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003764:	230f      	movs	r3, #15
 8003766:	18fb      	adds	r3, r7, r3
 8003768:	2200      	movs	r2, #0
 800376a:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2224      	movs	r2, #36	@ 0x24
 8003770:	2100      	movs	r1, #0
 8003772:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2224      	movs	r2, #36	@ 0x24
 8003778:	5c9b      	ldrb	r3, [r3, r2]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d101      	bne.n	8003782 <HAL_DMA_Abort_IT+0x26>
 800377e:	2302      	movs	r3, #2
 8003780:	e05e      	b.n	8003840 <HAL_DMA_Abort_IT+0xe4>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2224      	movs	r2, #36	@ 0x24
 8003786:	2101      	movs	r1, #1
 8003788:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2225      	movs	r2, #37	@ 0x25
 800378e:	5c9b      	ldrb	r3, [r3, r2]
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2b02      	cmp	r3, #2
 8003794:	d007      	beq.n	80037a6 <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2204      	movs	r2, #4
 800379a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800379c:	230f      	movs	r3, #15
 800379e:	18fb      	adds	r3, r7, r3
 80037a0:	2201      	movs	r2, #1
 80037a2:	701a      	strb	r2, [r3, #0]
 80037a4:	e049      	b.n	800383a <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	210e      	movs	r1, #14
 80037b2:	438a      	bics	r2, r1
 80037b4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2101      	movs	r1, #1
 80037c2:	438a      	bics	r2, r1
 80037c4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037d0:	491d      	ldr	r1, [pc, #116]	@ (8003848 <HAL_DMA_Abort_IT+0xec>)
 80037d2:	400a      	ands	r2, r1
 80037d4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 80037d6:	4b1d      	ldr	r3, [pc, #116]	@ (800384c <HAL_DMA_Abort_IT+0xf0>)
 80037d8:	6859      	ldr	r1, [r3, #4]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037de:	221c      	movs	r2, #28
 80037e0:	4013      	ands	r3, r2
 80037e2:	2201      	movs	r2, #1
 80037e4:	409a      	lsls	r2, r3
 80037e6:	4b19      	ldr	r3, [pc, #100]	@ (800384c <HAL_DMA_Abort_IT+0xf0>)
 80037e8:	430a      	orrs	r2, r1
 80037ea:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80037f4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00c      	beq.n	8003818 <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003808:	490f      	ldr	r1, [pc, #60]	@ (8003848 <HAL_DMA_Abort_IT+0xec>)
 800380a:	400a      	ands	r2, r1
 800380c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003816:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2225      	movs	r2, #37	@ 0x25
 800381c:	2101      	movs	r1, #1
 800381e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2224      	movs	r2, #36	@ 0x24
 8003824:	2100      	movs	r1, #0
 8003826:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800382c:	2b00      	cmp	r3, #0
 800382e:	d004      	beq.n	800383a <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	0010      	movs	r0, r2
 8003838:	4798      	blx	r3
    }
  }
  return status;
 800383a:	230f      	movs	r3, #15
 800383c:	18fb      	adds	r3, r7, r3
 800383e:	781b      	ldrb	r3, [r3, #0]
}
 8003840:	0018      	movs	r0, r3
 8003842:	46bd      	mov	sp, r7
 8003844:	b004      	add	sp, #16
 8003846:	bd80      	pop	{r7, pc}
 8003848:	fffffeff 	.word	0xfffffeff
 800384c:	40020000 	.word	0x40020000

08003850 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 8003858:	4b55      	ldr	r3, [pc, #340]	@ (80039b0 <HAL_DMA_IRQHandler+0x160>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800386a:	221c      	movs	r2, #28
 800386c:	4013      	ands	r3, r2
 800386e:	2204      	movs	r2, #4
 8003870:	409a      	lsls	r2, r3
 8003872:	0013      	movs	r3, r2
 8003874:	68fa      	ldr	r2, [r7, #12]
 8003876:	4013      	ands	r3, r2
 8003878:	d027      	beq.n	80038ca <HAL_DMA_IRQHandler+0x7a>
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	2204      	movs	r2, #4
 800387e:	4013      	ands	r3, r2
 8003880:	d023      	beq.n	80038ca <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2220      	movs	r2, #32
 800388a:	4013      	ands	r3, r2
 800388c:	d107      	bne.n	800389e <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2104      	movs	r1, #4
 800389a:	438a      	bics	r2, r1
 800389c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 800389e:	4b44      	ldr	r3, [pc, #272]	@ (80039b0 <HAL_DMA_IRQHandler+0x160>)
 80038a0:	6859      	ldr	r1, [r3, #4]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a6:	221c      	movs	r2, #28
 80038a8:	4013      	ands	r3, r2
 80038aa:	2204      	movs	r2, #4
 80038ac:	409a      	lsls	r2, r3
 80038ae:	4b40      	ldr	r3, [pc, #256]	@ (80039b0 <HAL_DMA_IRQHandler+0x160>)
 80038b0:	430a      	orrs	r2, r1
 80038b2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d100      	bne.n	80038be <HAL_DMA_IRQHandler+0x6e>
 80038bc:	e073      	b.n	80039a6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	0010      	movs	r0, r2
 80038c6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80038c8:	e06d      	b.n	80039a6 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ce:	221c      	movs	r2, #28
 80038d0:	4013      	ands	r3, r2
 80038d2:	2202      	movs	r2, #2
 80038d4:	409a      	lsls	r2, r3
 80038d6:	0013      	movs	r3, r2
 80038d8:	68fa      	ldr	r2, [r7, #12]
 80038da:	4013      	ands	r3, r2
 80038dc:	d02e      	beq.n	800393c <HAL_DMA_IRQHandler+0xec>
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	2202      	movs	r2, #2
 80038e2:	4013      	ands	r3, r2
 80038e4:	d02a      	beq.n	800393c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2220      	movs	r2, #32
 80038ee:	4013      	ands	r3, r2
 80038f0:	d10b      	bne.n	800390a <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	210a      	movs	r1, #10
 80038fe:	438a      	bics	r2, r1
 8003900:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2225      	movs	r2, #37	@ 0x25
 8003906:	2101      	movs	r1, #1
 8003908:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 800390a:	4b29      	ldr	r3, [pc, #164]	@ (80039b0 <HAL_DMA_IRQHandler+0x160>)
 800390c:	6859      	ldr	r1, [r3, #4]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003912:	221c      	movs	r2, #28
 8003914:	4013      	ands	r3, r2
 8003916:	2202      	movs	r2, #2
 8003918:	409a      	lsls	r2, r3
 800391a:	4b25      	ldr	r3, [pc, #148]	@ (80039b0 <HAL_DMA_IRQHandler+0x160>)
 800391c:	430a      	orrs	r2, r1
 800391e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2224      	movs	r2, #36	@ 0x24
 8003924:	2100      	movs	r1, #0
 8003926:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800392c:	2b00      	cmp	r3, #0
 800392e:	d03a      	beq.n	80039a6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	0010      	movs	r0, r2
 8003938:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800393a:	e034      	b.n	80039a6 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003940:	221c      	movs	r2, #28
 8003942:	4013      	ands	r3, r2
 8003944:	2208      	movs	r2, #8
 8003946:	409a      	lsls	r2, r3
 8003948:	0013      	movs	r3, r2
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	4013      	ands	r3, r2
 800394e:	d02b      	beq.n	80039a8 <HAL_DMA_IRQHandler+0x158>
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	2208      	movs	r2, #8
 8003954:	4013      	ands	r3, r2
 8003956:	d027      	beq.n	80039a8 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	210e      	movs	r1, #14
 8003964:	438a      	bics	r2, r1
 8003966:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8003968:	4b11      	ldr	r3, [pc, #68]	@ (80039b0 <HAL_DMA_IRQHandler+0x160>)
 800396a:	6859      	ldr	r1, [r3, #4]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003970:	221c      	movs	r2, #28
 8003972:	4013      	ands	r3, r2
 8003974:	2201      	movs	r2, #1
 8003976:	409a      	lsls	r2, r3
 8003978:	4b0d      	ldr	r3, [pc, #52]	@ (80039b0 <HAL_DMA_IRQHandler+0x160>)
 800397a:	430a      	orrs	r2, r1
 800397c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2201      	movs	r2, #1
 8003982:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2225      	movs	r2, #37	@ 0x25
 8003988:	2101      	movs	r1, #1
 800398a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2224      	movs	r2, #36	@ 0x24
 8003990:	2100      	movs	r1, #0
 8003992:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003998:	2b00      	cmp	r3, #0
 800399a:	d005      	beq.n	80039a8 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	0010      	movs	r0, r2
 80039a4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80039a6:	46c0      	nop			@ (mov r8, r8)
 80039a8:	46c0      	nop			@ (mov r8, r8)
}
 80039aa:	46bd      	mov	sp, r7
 80039ac:	b004      	add	sp, #16
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	40020000 	.word	0x40020000

080039b4 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2225      	movs	r2, #37	@ 0x25
 80039c0:	5c9b      	ldrb	r3, [r3, r2]
 80039c2:	b2db      	uxtb	r3, r3
}
 80039c4:	0018      	movs	r0, r3
 80039c6:	46bd      	mov	sp, r7
 80039c8:	b002      	add	sp, #8
 80039ca:	bd80      	pop	{r7, pc}

080039cc <HAL_DMA_GetError>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 80039d8:	0018      	movs	r0, r3
 80039da:	46bd      	mov	sp, r7
 80039dc:	b002      	add	sp, #8
 80039de:	bd80      	pop	{r7, pc}

080039e0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	607a      	str	r2, [r7, #4]
 80039ec:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80039f6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d004      	beq.n	8003a0a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003a08:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8003a0a:	4b14      	ldr	r3, [pc, #80]	@ (8003a5c <DMA_SetConfig+0x7c>)
 8003a0c:	6859      	ldr	r1, [r3, #4]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a12:	221c      	movs	r2, #28
 8003a14:	4013      	ands	r3, r2
 8003a16:	2201      	movs	r2, #1
 8003a18:	409a      	lsls	r2, r3
 8003a1a:	4b10      	ldr	r3, [pc, #64]	@ (8003a5c <DMA_SetConfig+0x7c>)
 8003a1c:	430a      	orrs	r2, r1
 8003a1e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	683a      	ldr	r2, [r7, #0]
 8003a26:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	2b10      	cmp	r3, #16
 8003a2e:	d108      	bne.n	8003a42 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68ba      	ldr	r2, [r7, #8]
 8003a3e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003a40:	e007      	b.n	8003a52 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68ba      	ldr	r2, [r7, #8]
 8003a48:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	60da      	str	r2, [r3, #12]
}
 8003a52:	46c0      	nop			@ (mov r8, r8)
 8003a54:	46bd      	mov	sp, r7
 8003a56:	b004      	add	sp, #16
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	46c0      	nop			@ (mov r8, r8)
 8003a5c:	40020000 	.word	0x40020000

08003a60 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	001a      	movs	r2, r3
 8003a6e:	23ff      	movs	r3, #255	@ 0xff
 8003a70:	4013      	ands	r3, r2
 8003a72:	3b08      	subs	r3, #8
 8003a74:	2114      	movs	r1, #20
 8003a76:	0018      	movs	r0, r3
 8003a78:	f7fc fb46 	bl	8000108 <__udivsi3>
 8003a7c:	0003      	movs	r3, r0
 8003a7e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a84:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8003a86:	4a0a      	ldr	r2, [pc, #40]	@ (8003ab0 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8003a88:	4694      	mov	ip, r2
 8003a8a:	4463      	add	r3, ip
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	001a      	movs	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	645a      	str	r2, [r3, #68]	@ 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a07      	ldr	r2, [pc, #28]	@ (8003ab4 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003a98:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	221c      	movs	r2, #28
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	409a      	lsls	r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8003aa8:	46c0      	nop			@ (mov r8, r8)
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	b004      	add	sp, #16
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	10008200 	.word	0x10008200
 8003ab4:	40020880 	.word	0x40020880

08003ab8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	22ff      	movs	r2, #255	@ 0xff
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	4a0a      	ldr	r2, [pc, #40]	@ (8003af8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003ace:	4694      	mov	ip, r2
 8003ad0:	4463      	add	r3, ip
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	001a      	movs	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	651a      	str	r2, [r3, #80]	@ 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a07      	ldr	r2, [pc, #28]	@ (8003afc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003ade:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	2203      	movs	r2, #3
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	2201      	movs	r2, #1
 8003aea:	409a      	lsls	r2, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8003af0:	46c0      	nop			@ (mov r8, r8)
 8003af2:	46bd      	mov	sp, r7
 8003af4:	b004      	add	sp, #16
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	1000823f 	.word	0x1000823f
 8003afc:	40020940 	.word	0x40020940

08003b00 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003b0e:	e153      	b.n	8003db8 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2101      	movs	r1, #1
 8003b16:	693a      	ldr	r2, [r7, #16]
 8003b18:	4091      	lsls	r1, r2
 8003b1a:	000a      	movs	r2, r1
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d100      	bne.n	8003b28 <HAL_GPIO_Init+0x28>
 8003b26:	e144      	b.n	8003db2 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d003      	beq.n	8003b38 <HAL_GPIO_Init+0x38>
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	2b12      	cmp	r3, #18
 8003b36:	d125      	bne.n	8003b84 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	08da      	lsrs	r2, r3, #3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	3208      	adds	r2, #8
 8003b40:	0092      	lsls	r2, r2, #2
 8003b42:	58d3      	ldr	r3, [r2, r3]
 8003b44:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	2207      	movs	r2, #7
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	220f      	movs	r2, #15
 8003b50:	409a      	lsls	r2, r3
 8003b52:	0013      	movs	r3, r2
 8003b54:	43da      	mvns	r2, r3
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	4013      	ands	r3, r2
 8003b5a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	691b      	ldr	r3, [r3, #16]
 8003b60:	220f      	movs	r2, #15
 8003b62:	401a      	ands	r2, r3
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	2107      	movs	r1, #7
 8003b68:	400b      	ands	r3, r1
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	409a      	lsls	r2, r3
 8003b6e:	0013      	movs	r3, r2
 8003b70:	697a      	ldr	r2, [r7, #20]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	08da      	lsrs	r2, r3, #3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	3208      	adds	r2, #8
 8003b7e:	0092      	lsls	r2, r2, #2
 8003b80:	6979      	ldr	r1, [r7, #20]
 8003b82:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	2203      	movs	r2, #3
 8003b90:	409a      	lsls	r2, r3
 8003b92:	0013      	movs	r3, r2
 8003b94:	43da      	mvns	r2, r3
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	4013      	ands	r3, r2
 8003b9a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	2203      	movs	r2, #3
 8003ba2:	401a      	ands	r2, r3
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	005b      	lsls	r3, r3, #1
 8003ba8:	409a      	lsls	r2, r3
 8003baa:	0013      	movs	r3, r2
 8003bac:	697a      	ldr	r2, [r7, #20]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	697a      	ldr	r2, [r7, #20]
 8003bb6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d00b      	beq.n	8003bd8 <HAL_GPIO_Init+0xd8>
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d007      	beq.n	8003bd8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003bcc:	2b11      	cmp	r3, #17
 8003bce:	d003      	beq.n	8003bd8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	2b12      	cmp	r3, #18
 8003bd6:	d130      	bne.n	8003c3a <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	005b      	lsls	r3, r3, #1
 8003be2:	2203      	movs	r2, #3
 8003be4:	409a      	lsls	r2, r3
 8003be6:	0013      	movs	r3, r2
 8003be8:	43da      	mvns	r2, r3
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	4013      	ands	r3, r2
 8003bee:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	68da      	ldr	r2, [r3, #12]
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	005b      	lsls	r3, r3, #1
 8003bf8:	409a      	lsls	r2, r3
 8003bfa:	0013      	movs	r3, r2
 8003bfc:	697a      	ldr	r2, [r7, #20]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	697a      	ldr	r2, [r7, #20]
 8003c06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c0e:	2201      	movs	r2, #1
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	409a      	lsls	r2, r3
 8003c14:	0013      	movs	r3, r2
 8003c16:	43da      	mvns	r2, r3
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	091b      	lsrs	r3, r3, #4
 8003c24:	2201      	movs	r2, #1
 8003c26:	401a      	ands	r2, r3
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	409a      	lsls	r2, r3
 8003c2c:	0013      	movs	r3, r2
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	697a      	ldr	r2, [r7, #20]
 8003c38:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	2b03      	cmp	r3, #3
 8003c40:	d017      	beq.n	8003c72 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	005b      	lsls	r3, r3, #1
 8003c4c:	2203      	movs	r2, #3
 8003c4e:	409a      	lsls	r2, r3
 8003c50:	0013      	movs	r3, r2
 8003c52:	43da      	mvns	r2, r3
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	4013      	ands	r3, r2
 8003c58:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	689a      	ldr	r2, [r3, #8]
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	005b      	lsls	r3, r3, #1
 8003c62:	409a      	lsls	r2, r3
 8003c64:	0013      	movs	r3, r2
 8003c66:	697a      	ldr	r2, [r7, #20]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	697a      	ldr	r2, [r7, #20]
 8003c70:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	685a      	ldr	r2, [r3, #4]
 8003c76:	2380      	movs	r3, #128	@ 0x80
 8003c78:	055b      	lsls	r3, r3, #21
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	d100      	bne.n	8003c80 <HAL_GPIO_Init+0x180>
 8003c7e:	e098      	b.n	8003db2 <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003c80:	4a53      	ldr	r2, [pc, #332]	@ (8003dd0 <HAL_GPIO_Init+0x2d0>)
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	089b      	lsrs	r3, r3, #2
 8003c86:	3318      	adds	r3, #24
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	589b      	ldr	r3, [r3, r2]
 8003c8c:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	2203      	movs	r2, #3
 8003c92:	4013      	ands	r3, r2
 8003c94:	00db      	lsls	r3, r3, #3
 8003c96:	220f      	movs	r2, #15
 8003c98:	409a      	lsls	r2, r3
 8003c9a:	0013      	movs	r3, r2
 8003c9c:	43da      	mvns	r2, r3
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	23a0      	movs	r3, #160	@ 0xa0
 8003ca8:	05db      	lsls	r3, r3, #23
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d019      	beq.n	8003ce2 <HAL_GPIO_Init+0x1e2>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a48      	ldr	r2, [pc, #288]	@ (8003dd4 <HAL_GPIO_Init+0x2d4>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d013      	beq.n	8003cde <HAL_GPIO_Init+0x1de>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a47      	ldr	r2, [pc, #284]	@ (8003dd8 <HAL_GPIO_Init+0x2d8>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d00d      	beq.n	8003cda <HAL_GPIO_Init+0x1da>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a46      	ldr	r2, [pc, #280]	@ (8003ddc <HAL_GPIO_Init+0x2dc>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d007      	beq.n	8003cd6 <HAL_GPIO_Init+0x1d6>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a45      	ldr	r2, [pc, #276]	@ (8003de0 <HAL_GPIO_Init+0x2e0>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d101      	bne.n	8003cd2 <HAL_GPIO_Init+0x1d2>
 8003cce:	2305      	movs	r3, #5
 8003cd0:	e008      	b.n	8003ce4 <HAL_GPIO_Init+0x1e4>
 8003cd2:	2306      	movs	r3, #6
 8003cd4:	e006      	b.n	8003ce4 <HAL_GPIO_Init+0x1e4>
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e004      	b.n	8003ce4 <HAL_GPIO_Init+0x1e4>
 8003cda:	2302      	movs	r3, #2
 8003cdc:	e002      	b.n	8003ce4 <HAL_GPIO_Init+0x1e4>
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e000      	b.n	8003ce4 <HAL_GPIO_Init+0x1e4>
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	693a      	ldr	r2, [r7, #16]
 8003ce6:	2103      	movs	r1, #3
 8003ce8:	400a      	ands	r2, r1
 8003cea:	00d2      	lsls	r2, r2, #3
 8003cec:	4093      	lsls	r3, r2
 8003cee:	697a      	ldr	r2, [r7, #20]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8003cf4:	4936      	ldr	r1, [pc, #216]	@ (8003dd0 <HAL_GPIO_Init+0x2d0>)
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	089b      	lsrs	r3, r3, #2
 8003cfa:	3318      	adds	r3, #24
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	697a      	ldr	r2, [r7, #20]
 8003d00:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8003d02:	4a33      	ldr	r2, [pc, #204]	@ (8003dd0 <HAL_GPIO_Init+0x2d0>)
 8003d04:	2380      	movs	r3, #128	@ 0x80
 8003d06:	58d3      	ldr	r3, [r2, r3]
 8003d08:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	43da      	mvns	r2, r3
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	4013      	ands	r3, r2
 8003d12:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	685a      	ldr	r2, [r3, #4]
 8003d18:	2380      	movs	r3, #128	@ 0x80
 8003d1a:	025b      	lsls	r3, r3, #9
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	d003      	beq.n	8003d28 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8003d20:	697a      	ldr	r2, [r7, #20]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8003d28:	4929      	ldr	r1, [pc, #164]	@ (8003dd0 <HAL_GPIO_Init+0x2d0>)
 8003d2a:	2280      	movs	r2, #128	@ 0x80
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8003d30:	4a27      	ldr	r2, [pc, #156]	@ (8003dd0 <HAL_GPIO_Init+0x2d0>)
 8003d32:	2384      	movs	r3, #132	@ 0x84
 8003d34:	58d3      	ldr	r3, [r2, r3]
 8003d36:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	43da      	mvns	r2, r3
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	4013      	ands	r3, r2
 8003d40:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	685a      	ldr	r2, [r3, #4]
 8003d46:	2380      	movs	r3, #128	@ 0x80
 8003d48:	029b      	lsls	r3, r3, #10
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	d003      	beq.n	8003d56 <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 8003d4e:	697a      	ldr	r2, [r7, #20]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8003d56:	491e      	ldr	r1, [pc, #120]	@ (8003dd0 <HAL_GPIO_Init+0x2d0>)
 8003d58:	2284      	movs	r2, #132	@ 0x84
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003d5e:	4b1c      	ldr	r3, [pc, #112]	@ (8003dd0 <HAL_GPIO_Init+0x2d0>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	43da      	mvns	r2, r3
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	685a      	ldr	r2, [r3, #4]
 8003d72:	2380      	movs	r3, #128	@ 0x80
 8003d74:	035b      	lsls	r3, r3, #13
 8003d76:	4013      	ands	r3, r2
 8003d78:	d003      	beq.n	8003d82 <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 8003d7a:	697a      	ldr	r2, [r7, #20]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8003d82:	4b13      	ldr	r3, [pc, #76]	@ (8003dd0 <HAL_GPIO_Init+0x2d0>)
 8003d84:	697a      	ldr	r2, [r7, #20]
 8003d86:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8003d88:	4b11      	ldr	r3, [pc, #68]	@ (8003dd0 <HAL_GPIO_Init+0x2d0>)
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	43da      	mvns	r2, r3
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	4013      	ands	r3, r2
 8003d96:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	685a      	ldr	r2, [r3, #4]
 8003d9c:	2380      	movs	r3, #128	@ 0x80
 8003d9e:	039b      	lsls	r3, r3, #14
 8003da0:	4013      	ands	r3, r2
 8003da2:	d003      	beq.n	8003dac <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8003dac:	4b08      	ldr	r3, [pc, #32]	@ (8003dd0 <HAL_GPIO_Init+0x2d0>)
 8003dae:	697a      	ldr	r2, [r7, #20]
 8003db0:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	3301      	adds	r3, #1
 8003db6:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	40da      	lsrs	r2, r3
 8003dc0:	1e13      	subs	r3, r2, #0
 8003dc2:	d000      	beq.n	8003dc6 <HAL_GPIO_Init+0x2c6>
 8003dc4:	e6a4      	b.n	8003b10 <HAL_GPIO_Init+0x10>
  }
}
 8003dc6:	46c0      	nop			@ (mov r8, r8)
 8003dc8:	46c0      	nop			@ (mov r8, r8)
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	b006      	add	sp, #24
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	40021800 	.word	0x40021800
 8003dd4:	50000400 	.word	0x50000400
 8003dd8:	50000800 	.word	0x50000800
 8003ddc:	50000c00 	.word	0x50000c00
 8003de0:	50001400 	.word	0x50001400

08003de4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b086      	sub	sp, #24
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8003dee:	2300      	movs	r3, #0
 8003df0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8003df2:	e0ba      	b.n	8003f6a <HAL_GPIO_DeInit+0x186>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8003df4:	2201      	movs	r2, #1
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	409a      	lsls	r2, r3
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0U)
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d100      	bne.n	8003e08 <HAL_GPIO_DeInit+0x24>
 8003e06:	e0ad      	b.n	8003f64 <HAL_GPIO_DeInit+0x180>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = EXTI->EXTICR[position >> 2U];
 8003e08:	4a5d      	ldr	r2, [pc, #372]	@ (8003f80 <HAL_GPIO_DeInit+0x19c>)
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	089b      	lsrs	r3, r3, #2
 8003e0e:	3318      	adds	r3, #24
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	589b      	ldr	r3, [r3, r2]
 8003e14:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	2203      	movs	r2, #3
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	00db      	lsls	r3, r3, #3
 8003e1e:	220f      	movs	r2, #15
 8003e20:	409a      	lsls	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	4013      	ands	r3, r2
 8003e26:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos)))
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	23a0      	movs	r3, #160	@ 0xa0
 8003e2c:	05db      	lsls	r3, r3, #23
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d019      	beq.n	8003e66 <HAL_GPIO_DeInit+0x82>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a53      	ldr	r2, [pc, #332]	@ (8003f84 <HAL_GPIO_DeInit+0x1a0>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d013      	beq.n	8003e62 <HAL_GPIO_DeInit+0x7e>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a52      	ldr	r2, [pc, #328]	@ (8003f88 <HAL_GPIO_DeInit+0x1a4>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d00d      	beq.n	8003e5e <HAL_GPIO_DeInit+0x7a>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a51      	ldr	r2, [pc, #324]	@ (8003f8c <HAL_GPIO_DeInit+0x1a8>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d007      	beq.n	8003e5a <HAL_GPIO_DeInit+0x76>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a50      	ldr	r2, [pc, #320]	@ (8003f90 <HAL_GPIO_DeInit+0x1ac>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d101      	bne.n	8003e56 <HAL_GPIO_DeInit+0x72>
 8003e52:	2305      	movs	r3, #5
 8003e54:	e008      	b.n	8003e68 <HAL_GPIO_DeInit+0x84>
 8003e56:	2306      	movs	r3, #6
 8003e58:	e006      	b.n	8003e68 <HAL_GPIO_DeInit+0x84>
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e004      	b.n	8003e68 <HAL_GPIO_DeInit+0x84>
 8003e5e:	2302      	movs	r3, #2
 8003e60:	e002      	b.n	8003e68 <HAL_GPIO_DeInit+0x84>
 8003e62:	2301      	movs	r3, #1
 8003e64:	e000      	b.n	8003e68 <HAL_GPIO_DeInit+0x84>
 8003e66:	2300      	movs	r3, #0
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	2103      	movs	r1, #3
 8003e6c:	400a      	ands	r2, r1
 8003e6e:	00d2      	lsls	r2, r2, #3
 8003e70:	4093      	lsls	r3, r2
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d136      	bne.n	8003ee6 <HAL_GPIO_DeInit+0x102>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003e78:	4a41      	ldr	r2, [pc, #260]	@ (8003f80 <HAL_GPIO_DeInit+0x19c>)
 8003e7a:	2380      	movs	r3, #128	@ 0x80
 8003e7c:	58d3      	ldr	r3, [r2, r3]
 8003e7e:	693a      	ldr	r2, [r7, #16]
 8003e80:	43d2      	mvns	r2, r2
 8003e82:	493f      	ldr	r1, [pc, #252]	@ (8003f80 <HAL_GPIO_DeInit+0x19c>)
 8003e84:	4013      	ands	r3, r2
 8003e86:	2280      	movs	r2, #128	@ 0x80
 8003e88:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 8003e8a:	4a3d      	ldr	r2, [pc, #244]	@ (8003f80 <HAL_GPIO_DeInit+0x19c>)
 8003e8c:	2384      	movs	r3, #132	@ 0x84
 8003e8e:	58d3      	ldr	r3, [r2, r3]
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	43d2      	mvns	r2, r2
 8003e94:	493a      	ldr	r1, [pc, #232]	@ (8003f80 <HAL_GPIO_DeInit+0x19c>)
 8003e96:	4013      	ands	r3, r2
 8003e98:	2284      	movs	r2, #132	@ 0x84
 8003e9a:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8003e9c:	4b38      	ldr	r3, [pc, #224]	@ (8003f80 <HAL_GPIO_DeInit+0x19c>)
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	43d9      	mvns	r1, r3
 8003ea4:	4b36      	ldr	r3, [pc, #216]	@ (8003f80 <HAL_GPIO_DeInit+0x19c>)
 8003ea6:	400a      	ands	r2, r1
 8003ea8:	601a      	str	r2, [r3, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8003eaa:	4b35      	ldr	r3, [pc, #212]	@ (8003f80 <HAL_GPIO_DeInit+0x19c>)
 8003eac:	685a      	ldr	r2, [r3, #4]
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	43d9      	mvns	r1, r3
 8003eb2:	4b33      	ldr	r3, [pc, #204]	@ (8003f80 <HAL_GPIO_DeInit+0x19c>)
 8003eb4:	400a      	ands	r2, r1
 8003eb6:	605a      	str	r2, [r3, #4]

        tmp = (0x0FUL) << (8U * (position & 0x03U));
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	2203      	movs	r2, #3
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	00db      	lsls	r3, r3, #3
 8003ec0:	220f      	movs	r2, #15
 8003ec2:	409a      	lsls	r2, r3
 8003ec4:	0013      	movs	r3, r2
 8003ec6:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2U] &= ~tmp;
 8003ec8:	4a2d      	ldr	r2, [pc, #180]	@ (8003f80 <HAL_GPIO_DeInit+0x19c>)
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	089b      	lsrs	r3, r3, #2
 8003ece:	3318      	adds	r3, #24
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	589a      	ldr	r2, [r3, r2]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	43d9      	mvns	r1, r3
 8003ed8:	4829      	ldr	r0, [pc, #164]	@ (8003f80 <HAL_GPIO_DeInit+0x19c>)
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	089b      	lsrs	r3, r3, #2
 8003ede:	400a      	ands	r2, r1
 8003ee0:	3318      	adds	r3, #24
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	2103      	movs	r1, #3
 8003ef0:	4099      	lsls	r1, r3
 8003ef2:	000b      	movs	r3, r1
 8003ef4:	431a      	orrs	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	08da      	lsrs	r2, r3, #3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	3208      	adds	r2, #8
 8003f02:	0092      	lsls	r2, r2, #2
 8003f04:	58d3      	ldr	r3, [r2, r3]
 8003f06:	697a      	ldr	r2, [r7, #20]
 8003f08:	2107      	movs	r1, #7
 8003f0a:	400a      	ands	r2, r1
 8003f0c:	0092      	lsls	r2, r2, #2
 8003f0e:	210f      	movs	r1, #15
 8003f10:	4091      	lsls	r1, r2
 8003f12:	000a      	movs	r2, r1
 8003f14:	43d1      	mvns	r1, r2
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	08d2      	lsrs	r2, r2, #3
 8003f1a:	4019      	ands	r1, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	3208      	adds	r2, #8
 8003f20:	0092      	lsls	r2, r2, #2
 8003f22:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	697a      	ldr	r2, [r7, #20]
 8003f2a:	0052      	lsls	r2, r2, #1
 8003f2c:	2103      	movs	r1, #3
 8003f2e:	4091      	lsls	r1, r2
 8003f30:	000a      	movs	r2, r1
 8003f32:	43d2      	mvns	r2, r2
 8003f34:	401a      	ands	r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	2101      	movs	r1, #1
 8003f40:	697a      	ldr	r2, [r7, #20]
 8003f42:	4091      	lsls	r1, r2
 8003f44:	000a      	movs	r2, r1
 8003f46:	43d2      	mvns	r2, r2
 8003f48:	401a      	ands	r2, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	697a      	ldr	r2, [r7, #20]
 8003f54:	0052      	lsls	r2, r2, #1
 8003f56:	2103      	movs	r1, #3
 8003f58:	4091      	lsls	r1, r2
 8003f5a:	000a      	movs	r2, r1
 8003f5c:	43d2      	mvns	r2, r2
 8003f5e:	401a      	ands	r2, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	60da      	str	r2, [r3, #12]
    }

    position++;
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	3301      	adds	r3, #1
 8003f68:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 8003f6a:	683a      	ldr	r2, [r7, #0]
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	40da      	lsrs	r2, r3
 8003f70:	1e13      	subs	r3, r2, #0
 8003f72:	d000      	beq.n	8003f76 <HAL_GPIO_DeInit+0x192>
 8003f74:	e73e      	b.n	8003df4 <HAL_GPIO_DeInit+0x10>
  }
}
 8003f76:	46c0      	nop			@ (mov r8, r8)
 8003f78:	46c0      	nop			@ (mov r8, r8)
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	b006      	add	sp, #24
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	40021800 	.word	0x40021800
 8003f84:	50000400 	.word	0x50000400
 8003f88:	50000800 	.word	0x50000800
 8003f8c:	50000c00 	.word	0x50000c00
 8003f90:	50001400 	.word	0x50001400

08003f94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	0008      	movs	r0, r1
 8003f9e:	0011      	movs	r1, r2
 8003fa0:	1cbb      	adds	r3, r7, #2
 8003fa2:	1c02      	adds	r2, r0, #0
 8003fa4:	801a      	strh	r2, [r3, #0]
 8003fa6:	1c7b      	adds	r3, r7, #1
 8003fa8:	1c0a      	adds	r2, r1, #0
 8003faa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003fac:	1c7b      	adds	r3, r7, #1
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d004      	beq.n	8003fbe <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003fb4:	1cbb      	adds	r3, r7, #2
 8003fb6:	881a      	ldrh	r2, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003fbc:	e003      	b.n	8003fc6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003fbe:	1cbb      	adds	r3, r7, #2
 8003fc0:	881a      	ldrh	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003fc6:	46c0      	nop			@ (mov r8, r8)
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	b002      	add	sp, #8
 8003fcc:	bd80      	pop	{r7, pc}
	...

08003fd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d101      	bne.n	8003fe2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e08f      	b.n	8004102 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2241      	movs	r2, #65	@ 0x41
 8003fe6:	5c9b      	ldrb	r3, [r3, r2]
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d107      	bne.n	8003ffe <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2240      	movs	r2, #64	@ 0x40
 8003ff2:	2100      	movs	r1, #0
 8003ff4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	0018      	movs	r0, r3
 8003ffa:	f7fe fbad 	bl	8002758 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2241      	movs	r2, #65	@ 0x41
 8004002:	2124      	movs	r1, #36	@ 0x24
 8004004:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2101      	movs	r1, #1
 8004012:	438a      	bics	r2, r1
 8004014:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685a      	ldr	r2, [r3, #4]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	493b      	ldr	r1, [pc, #236]	@ (800410c <HAL_I2C_Init+0x13c>)
 8004020:	400a      	ands	r2, r1
 8004022:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	689a      	ldr	r2, [r3, #8]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4938      	ldr	r1, [pc, #224]	@ (8004110 <HAL_I2C_Init+0x140>)
 8004030:	400a      	ands	r2, r1
 8004032:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	2b01      	cmp	r3, #1
 800403a:	d108      	bne.n	800404e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	689a      	ldr	r2, [r3, #8]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2180      	movs	r1, #128	@ 0x80
 8004046:	0209      	lsls	r1, r1, #8
 8004048:	430a      	orrs	r2, r1
 800404a:	609a      	str	r2, [r3, #8]
 800404c:	e007      	b.n	800405e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	689a      	ldr	r2, [r3, #8]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2184      	movs	r1, #132	@ 0x84
 8004058:	0209      	lsls	r1, r1, #8
 800405a:	430a      	orrs	r2, r1
 800405c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	2b02      	cmp	r3, #2
 8004064:	d109      	bne.n	800407a <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	685a      	ldr	r2, [r3, #4]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2180      	movs	r1, #128	@ 0x80
 8004072:	0109      	lsls	r1, r1, #4
 8004074:	430a      	orrs	r2, r1
 8004076:	605a      	str	r2, [r3, #4]
 8004078:	e007      	b.n	800408a <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	685a      	ldr	r2, [r3, #4]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4923      	ldr	r1, [pc, #140]	@ (8004114 <HAL_I2C_Init+0x144>)
 8004086:	400a      	ands	r2, r1
 8004088:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	685a      	ldr	r2, [r3, #4]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4920      	ldr	r1, [pc, #128]	@ (8004118 <HAL_I2C_Init+0x148>)
 8004096:	430a      	orrs	r2, r1
 8004098:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68da      	ldr	r2, [r3, #12]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	491a      	ldr	r1, [pc, #104]	@ (8004110 <HAL_I2C_Init+0x140>)
 80040a6:	400a      	ands	r2, r1
 80040a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	691a      	ldr	r2, [r3, #16]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	431a      	orrs	r2, r3
 80040b4:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	430a      	orrs	r2, r1
 80040c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	69d9      	ldr	r1, [r3, #28]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a1a      	ldr	r2, [r3, #32]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	430a      	orrs	r2, r1
 80040d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2101      	movs	r1, #1
 80040e0:	430a      	orrs	r2, r1
 80040e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2241      	movs	r2, #65	@ 0x41
 80040ee:	2120      	movs	r1, #32
 80040f0:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2242      	movs	r2, #66	@ 0x42
 80040fc:	2100      	movs	r1, #0
 80040fe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	0018      	movs	r0, r3
 8004104:	46bd      	mov	sp, r7
 8004106:	b002      	add	sp, #8
 8004108:	bd80      	pop	{r7, pc}
 800410a:	46c0      	nop			@ (mov r8, r8)
 800410c:	f0ffffff 	.word	0xf0ffffff
 8004110:	ffff7fff 	.word	0xffff7fff
 8004114:	fffff7ff 	.word	0xfffff7ff
 8004118:	02008000 	.word	0x02008000

0800411c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004138:	2b00      	cmp	r3, #0
 800413a:	d005      	beq.n	8004148 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004140:	68ba      	ldr	r2, [r7, #8]
 8004142:	68f9      	ldr	r1, [r7, #12]
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	4798      	blx	r3
  }
}
 8004148:	46c0      	nop			@ (mov r8, r8)
 800414a:	46bd      	mov	sp, r7
 800414c:	b004      	add	sp, #16
 800414e:	bd80      	pop	{r7, pc}

08004150 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b086      	sub	sp, #24
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004168:	697a      	ldr	r2, [r7, #20]
 800416a:	2380      	movs	r3, #128	@ 0x80
 800416c:	005b      	lsls	r3, r3, #1
 800416e:	4013      	ands	r3, r2
 8004170:	d00e      	beq.n	8004190 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	2280      	movs	r2, #128	@ 0x80
 8004176:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004178:	d00a      	beq.n	8004190 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800417e:	2201      	movs	r2, #1
 8004180:	431a      	orrs	r2, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2280      	movs	r2, #128	@ 0x80
 800418c:	0052      	lsls	r2, r2, #1
 800418e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004190:	697a      	ldr	r2, [r7, #20]
 8004192:	2380      	movs	r3, #128	@ 0x80
 8004194:	00db      	lsls	r3, r3, #3
 8004196:	4013      	ands	r3, r2
 8004198:	d00e      	beq.n	80041b8 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	2280      	movs	r2, #128	@ 0x80
 800419e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80041a0:	d00a      	beq.n	80041b8 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041a6:	2208      	movs	r2, #8
 80041a8:	431a      	orrs	r2, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2280      	movs	r2, #128	@ 0x80
 80041b4:	00d2      	lsls	r2, r2, #3
 80041b6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80041b8:	697a      	ldr	r2, [r7, #20]
 80041ba:	2380      	movs	r3, #128	@ 0x80
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	4013      	ands	r3, r2
 80041c0:	d00e      	beq.n	80041e0 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	2280      	movs	r2, #128	@ 0x80
 80041c6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80041c8:	d00a      	beq.n	80041e0 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ce:	2202      	movs	r2, #2
 80041d0:	431a      	orrs	r2, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2280      	movs	r2, #128	@ 0x80
 80041dc:	0092      	lsls	r2, r2, #2
 80041de:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041e4:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	220b      	movs	r2, #11
 80041ea:	4013      	ands	r3, r2
 80041ec:	d005      	beq.n	80041fa <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	0011      	movs	r1, r2
 80041f4:	0018      	movs	r0, r3
 80041f6:	f000 fc1d 	bl	8004a34 <I2C_ITError>
  }
}
 80041fa:	46c0      	nop			@ (mov r8, r8)
 80041fc:	46bd      	mov	sp, r7
 80041fe:	b006      	add	sp, #24
 8004200:	bd80      	pop	{r7, pc}

08004202 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004202:	b580      	push	{r7, lr}
 8004204:	b082      	sub	sp, #8
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800420a:	46c0      	nop			@ (mov r8, r8)
 800420c:	46bd      	mov	sp, r7
 800420e:	b002      	add	sp, #8
 8004210:	bd80      	pop	{r7, pc}

08004212 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004212:	b580      	push	{r7, lr}
 8004214:	b082      	sub	sp, #8
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800421a:	46c0      	nop			@ (mov r8, r8)
 800421c:	46bd      	mov	sp, r7
 800421e:	b002      	add	sp, #8
 8004220:	bd80      	pop	{r7, pc}

08004222 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004222:	b580      	push	{r7, lr}
 8004224:	b082      	sub	sp, #8
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
 800422a:	0008      	movs	r0, r1
 800422c:	0011      	movs	r1, r2
 800422e:	1cfb      	adds	r3, r7, #3
 8004230:	1c02      	adds	r2, r0, #0
 8004232:	701a      	strb	r2, [r3, #0]
 8004234:	003b      	movs	r3, r7
 8004236:	1c0a      	adds	r2, r1, #0
 8004238:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800423a:	46c0      	nop			@ (mov r8, r8)
 800423c:	46bd      	mov	sp, r7
 800423e:	b002      	add	sp, #8
 8004240:	bd80      	pop	{r7, pc}

08004242 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004242:	b580      	push	{r7, lr}
 8004244:	b082      	sub	sp, #8
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800424a:	46c0      	nop			@ (mov r8, r8)
 800424c:	46bd      	mov	sp, r7
 800424e:	b002      	add	sp, #8
 8004250:	bd80      	pop	{r7, pc}

08004252 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b082      	sub	sp, #8
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800425a:	46c0      	nop			@ (mov r8, r8)
 800425c:	46bd      	mov	sp, r7
 800425e:	b002      	add	sp, #8
 8004260:	bd80      	pop	{r7, pc}
	...

08004264 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b086      	sub	sp, #24
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004274:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2240      	movs	r2, #64	@ 0x40
 800427e:	5c9b      	ldrb	r3, [r3, r2]
 8004280:	2b01      	cmp	r3, #1
 8004282:	d101      	bne.n	8004288 <I2C_Slave_ISR_IT+0x24>
 8004284:	2302      	movs	r3, #2
 8004286:	e0e7      	b.n	8004458 <I2C_Slave_ISR_IT+0x1f4>
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2240      	movs	r2, #64	@ 0x40
 800428c:	2101      	movs	r1, #1
 800428e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	2220      	movs	r2, #32
 8004294:	4013      	ands	r3, r2
 8004296:	d00a      	beq.n	80042ae <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2220      	movs	r2, #32
 800429c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800429e:	d006      	beq.n	80042ae <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80042a0:	693a      	ldr	r2, [r7, #16]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	0011      	movs	r1, r2
 80042a6:	0018      	movs	r0, r3
 80042a8:	f000 f9e4 	bl	8004674 <I2C_ITSlaveCplt>
 80042ac:	e0cf      	b.n	800444e <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	2210      	movs	r2, #16
 80042b2:	4013      	ands	r3, r2
 80042b4:	d052      	beq.n	800435c <I2C_Slave_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2210      	movs	r2, #16
 80042ba:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80042bc:	d04e      	beq.n	800435c <I2C_Slave_ISR_IT+0xf8>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d12d      	bne.n	8004324 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2241      	movs	r2, #65	@ 0x41
 80042cc:	5c9b      	ldrb	r3, [r3, r2]
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	2b28      	cmp	r3, #40	@ 0x28
 80042d2:	d10b      	bne.n	80042ec <I2C_Slave_ISR_IT+0x88>
 80042d4:	697a      	ldr	r2, [r7, #20]
 80042d6:	2380      	movs	r3, #128	@ 0x80
 80042d8:	049b      	lsls	r3, r3, #18
 80042da:	429a      	cmp	r2, r3
 80042dc:	d106      	bne.n	80042ec <I2C_Slave_ISR_IT+0x88>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80042de:	693a      	ldr	r2, [r7, #16]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	0011      	movs	r1, r2
 80042e4:	0018      	movs	r0, r3
 80042e6:	f000 fb4d 	bl	8004984 <I2C_ITListenCplt>
 80042ea:	e036      	b.n	800435a <I2C_Slave_ISR_IT+0xf6>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2241      	movs	r2, #65	@ 0x41
 80042f0:	5c9b      	ldrb	r3, [r3, r2]
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	2b29      	cmp	r3, #41	@ 0x29
 80042f6:	d110      	bne.n	800431a <I2C_Slave_ISR_IT+0xb6>
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	4a59      	ldr	r2, [pc, #356]	@ (8004460 <I2C_Slave_ISR_IT+0x1fc>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d00c      	beq.n	800431a <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2210      	movs	r2, #16
 8004306:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	0018      	movs	r0, r3
 800430c:	f000 fcbd 	bl	8004c8a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	0018      	movs	r0, r3
 8004314:	f000 f94a 	bl	80045ac <I2C_ITSlaveSeqCplt>
 8004318:	e01f      	b.n	800435a <I2C_Slave_ISR_IT+0xf6>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2210      	movs	r2, #16
 8004320:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004322:	e091      	b.n	8004448 <I2C_Slave_ISR_IT+0x1e4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2210      	movs	r2, #16
 800432a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004330:	2204      	movs	r2, #4
 8004332:	431a      	orrs	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d005      	beq.n	800434a <I2C_Slave_ISR_IT+0xe6>
 800433e:	697a      	ldr	r2, [r7, #20]
 8004340:	2380      	movs	r3, #128	@ 0x80
 8004342:	045b      	lsls	r3, r3, #17
 8004344:	429a      	cmp	r2, r3
 8004346:	d000      	beq.n	800434a <I2C_Slave_ISR_IT+0xe6>
 8004348:	e07e      	b.n	8004448 <I2C_Slave_ISR_IT+0x1e4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	0011      	movs	r1, r2
 8004352:	0018      	movs	r0, r3
 8004354:	f000 fb6e 	bl	8004a34 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004358:	e076      	b.n	8004448 <I2C_Slave_ISR_IT+0x1e4>
 800435a:	e075      	b.n	8004448 <I2C_Slave_ISR_IT+0x1e4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	2204      	movs	r2, #4
 8004360:	4013      	ands	r3, r2
 8004362:	d02f      	beq.n	80043c4 <I2C_Slave_ISR_IT+0x160>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2204      	movs	r2, #4
 8004368:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800436a:	d02b      	beq.n	80043c4 <I2C_Slave_ISR_IT+0x160>
  {
    if (hi2c->XferCount > 0U)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004370:	b29b      	uxth	r3, r3
 8004372:	2b00      	cmp	r3, #0
 8004374:	d018      	beq.n	80043a8 <I2C_Slave_ISR_IT+0x144>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004380:	b2d2      	uxtb	r2, r2
 8004382:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004388:	1c5a      	adds	r2, r3, #1
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004392:	3b01      	subs	r3, #1
 8004394:	b29a      	uxth	r2, r3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800439e:	b29b      	uxth	r3, r3
 80043a0:	3b01      	subs	r3, #1
 80043a2:	b29a      	uxth	r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d14c      	bne.n	800444c <I2C_Slave_ISR_IT+0x1e8>
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	4a2a      	ldr	r2, [pc, #168]	@ (8004460 <I2C_Slave_ISR_IT+0x1fc>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d048      	beq.n	800444c <I2C_Slave_ISR_IT+0x1e8>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	0018      	movs	r0, r3
 80043be:	f000 f8f5 	bl	80045ac <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80043c2:	e043      	b.n	800444c <I2C_Slave_ISR_IT+0x1e8>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	2208      	movs	r2, #8
 80043c8:	4013      	ands	r3, r2
 80043ca:	d00a      	beq.n	80043e2 <I2C_Slave_ISR_IT+0x17e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2208      	movs	r2, #8
 80043d0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80043d2:	d006      	beq.n	80043e2 <I2C_Slave_ISR_IT+0x17e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80043d4:	693a      	ldr	r2, [r7, #16]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	0011      	movs	r1, r2
 80043da:	0018      	movs	r0, r3
 80043dc:	f000 f842 	bl	8004464 <I2C_ITAddrCplt>
 80043e0:	e035      	b.n	800444e <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	2202      	movs	r2, #2
 80043e6:	4013      	ands	r3, r2
 80043e8:	d031      	beq.n	800444e <I2C_Slave_ISR_IT+0x1ea>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2202      	movs	r2, #2
 80043ee:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80043f0:	d02d      	beq.n	800444e <I2C_Slave_ISR_IT+0x1ea>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d018      	beq.n	800442e <I2C_Slave_ISR_IT+0x1ca>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004400:	781a      	ldrb	r2, [r3, #0]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800440c:	1c5a      	adds	r2, r3, #1
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004416:	b29b      	uxth	r3, r3
 8004418:	3b01      	subs	r3, #1
 800441a:	b29a      	uxth	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004424:	3b01      	subs	r3, #1
 8004426:	b29a      	uxth	r2, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800442c:	e00f      	b.n	800444e <I2C_Slave_ISR_IT+0x1ea>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800442e:	697a      	ldr	r2, [r7, #20]
 8004430:	2380      	movs	r3, #128	@ 0x80
 8004432:	045b      	lsls	r3, r3, #17
 8004434:	429a      	cmp	r2, r3
 8004436:	d002      	beq.n	800443e <I2C_Slave_ISR_IT+0x1da>
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d107      	bne.n	800444e <I2C_Slave_ISR_IT+0x1ea>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	0018      	movs	r0, r3
 8004442:	f000 f8b3 	bl	80045ac <I2C_ITSlaveSeqCplt>
 8004446:	e002      	b.n	800444e <I2C_Slave_ISR_IT+0x1ea>
    if (hi2c->XferCount == 0U)
 8004448:	46c0      	nop			@ (mov r8, r8)
 800444a:	e000      	b.n	800444e <I2C_Slave_ISR_IT+0x1ea>
    if ((hi2c->XferCount == 0U) && \
 800444c:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2240      	movs	r2, #64	@ 0x40
 8004452:	2100      	movs	r1, #0
 8004454:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004456:	2300      	movs	r3, #0
}
 8004458:	0018      	movs	r0, r3
 800445a:	46bd      	mov	sp, r7
 800445c:	b006      	add	sp, #24
 800445e:	bd80      	pop	{r7, pc}
 8004460:	ffff0000 	.word	0xffff0000

08004464 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004464:	b5b0      	push	{r4, r5, r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2241      	movs	r2, #65	@ 0x41
 8004472:	5c9b      	ldrb	r3, [r3, r2]
 8004474:	b2db      	uxtb	r3, r3
 8004476:	001a      	movs	r2, r3
 8004478:	2328      	movs	r3, #40	@ 0x28
 800447a:	4013      	ands	r3, r2
 800447c:	2b28      	cmp	r3, #40	@ 0x28
 800447e:	d000      	beq.n	8004482 <I2C_ITAddrCplt+0x1e>
 8004480:	e088      	b.n	8004594 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	699b      	ldr	r3, [r3, #24]
 8004488:	0c1b      	lsrs	r3, r3, #16
 800448a:	b2da      	uxtb	r2, r3
 800448c:	250f      	movs	r5, #15
 800448e:	197b      	adds	r3, r7, r5
 8004490:	2101      	movs	r1, #1
 8004492:	400a      	ands	r2, r1
 8004494:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	0c1b      	lsrs	r3, r3, #16
 800449e:	b29a      	uxth	r2, r3
 80044a0:	200c      	movs	r0, #12
 80044a2:	183b      	adds	r3, r7, r0
 80044a4:	21fe      	movs	r1, #254	@ 0xfe
 80044a6:	400a      	ands	r2, r1
 80044a8:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	b29a      	uxth	r2, r3
 80044b2:	240a      	movs	r4, #10
 80044b4:	193b      	adds	r3, r7, r4
 80044b6:	0592      	lsls	r2, r2, #22
 80044b8:	0d92      	lsrs	r2, r2, #22
 80044ba:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	b29a      	uxth	r2, r3
 80044c4:	2308      	movs	r3, #8
 80044c6:	18fb      	adds	r3, r7, r3
 80044c8:	21fe      	movs	r1, #254	@ 0xfe
 80044ca:	400a      	ands	r2, r1
 80044cc:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d148      	bne.n	8004568 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80044d6:	0021      	movs	r1, r4
 80044d8:	187b      	adds	r3, r7, r1
 80044da:	881b      	ldrh	r3, [r3, #0]
 80044dc:	09db      	lsrs	r3, r3, #7
 80044de:	b29a      	uxth	r2, r3
 80044e0:	183b      	adds	r3, r7, r0
 80044e2:	881b      	ldrh	r3, [r3, #0]
 80044e4:	4053      	eors	r3, r2
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	001a      	movs	r2, r3
 80044ea:	2306      	movs	r3, #6
 80044ec:	4013      	ands	r3, r2
 80044ee:	d120      	bne.n	8004532 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 80044f0:	183b      	adds	r3, r7, r0
 80044f2:	187a      	adds	r2, r7, r1
 80044f4:	8812      	ldrh	r2, [r2, #0]
 80044f6:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044fc:	1c5a      	adds	r2, r3, #1
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004506:	2b02      	cmp	r3, #2
 8004508:	d14c      	bne.n	80045a4 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2208      	movs	r2, #8
 8004516:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2240      	movs	r2, #64	@ 0x40
 800451c:	2100      	movs	r1, #0
 800451e:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004520:	183b      	adds	r3, r7, r0
 8004522:	881a      	ldrh	r2, [r3, #0]
 8004524:	197b      	adds	r3, r7, r5
 8004526:	7819      	ldrb	r1, [r3, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	0018      	movs	r0, r3
 800452c:	f7ff fe79 	bl	8004222 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004530:	e038      	b.n	80045a4 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8004532:	240c      	movs	r4, #12
 8004534:	193b      	adds	r3, r7, r4
 8004536:	2208      	movs	r2, #8
 8004538:	18ba      	adds	r2, r7, r2
 800453a:	8812      	ldrh	r2, [r2, #0]
 800453c:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800453e:	2380      	movs	r3, #128	@ 0x80
 8004540:	021a      	lsls	r2, r3, #8
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	0011      	movs	r1, r2
 8004546:	0018      	movs	r0, r3
 8004548:	f000 fbe0 	bl	8004d0c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2240      	movs	r2, #64	@ 0x40
 8004550:	2100      	movs	r1, #0
 8004552:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004554:	193b      	adds	r3, r7, r4
 8004556:	881a      	ldrh	r2, [r3, #0]
 8004558:	230f      	movs	r3, #15
 800455a:	18fb      	adds	r3, r7, r3
 800455c:	7819      	ldrb	r1, [r3, #0]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	0018      	movs	r0, r3
 8004562:	f7ff fe5e 	bl	8004222 <HAL_I2C_AddrCallback>
}
 8004566:	e01d      	b.n	80045a4 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004568:	2380      	movs	r3, #128	@ 0x80
 800456a:	021a      	lsls	r2, r3, #8
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	0011      	movs	r1, r2
 8004570:	0018      	movs	r0, r3
 8004572:	f000 fbcb 	bl	8004d0c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2240      	movs	r2, #64	@ 0x40
 800457a:	2100      	movs	r1, #0
 800457c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800457e:	230c      	movs	r3, #12
 8004580:	18fb      	adds	r3, r7, r3
 8004582:	881a      	ldrh	r2, [r3, #0]
 8004584:	230f      	movs	r3, #15
 8004586:	18fb      	adds	r3, r7, r3
 8004588:	7819      	ldrb	r1, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	0018      	movs	r0, r3
 800458e:	f7ff fe48 	bl	8004222 <HAL_I2C_AddrCallback>
}
 8004592:	e007      	b.n	80045a4 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2208      	movs	r2, #8
 800459a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2240      	movs	r2, #64	@ 0x40
 80045a0:	2100      	movs	r1, #0
 80045a2:	5499      	strb	r1, [r3, r2]
}
 80045a4:	46c0      	nop			@ (mov r8, r8)
 80045a6:	46bd      	mov	sp, r7
 80045a8:	b004      	add	sp, #16
 80045aa:	bdb0      	pop	{r4, r5, r7, pc}

080045ac <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2242      	movs	r2, #66	@ 0x42
 80045c0:	2100      	movs	r1, #0
 80045c2:	5499      	strb	r1, [r3, r2]

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80045c4:	68fa      	ldr	r2, [r7, #12]
 80045c6:	2380      	movs	r3, #128	@ 0x80
 80045c8:	01db      	lsls	r3, r3, #7
 80045ca:	4013      	ands	r3, r2
 80045cc:	d008      	beq.n	80045e0 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4924      	ldr	r1, [pc, #144]	@ (800466c <I2C_ITSlaveSeqCplt+0xc0>)
 80045da:	400a      	ands	r2, r1
 80045dc:	601a      	str	r2, [r3, #0]
 80045de:	e00c      	b.n	80045fa <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80045e0:	68fa      	ldr	r2, [r7, #12]
 80045e2:	2380      	movs	r3, #128	@ 0x80
 80045e4:	021b      	lsls	r3, r3, #8
 80045e6:	4013      	ands	r3, r2
 80045e8:	d007      	beq.n	80045fa <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	491e      	ldr	r1, [pc, #120]	@ (8004670 <I2C_ITSlaveSeqCplt+0xc4>)
 80045f6:	400a      	ands	r2, r1
 80045f8:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2241      	movs	r2, #65	@ 0x41
 80045fe:	5c9b      	ldrb	r3, [r3, r2]
 8004600:	b2db      	uxtb	r3, r3
 8004602:	2b29      	cmp	r3, #41	@ 0x29
 8004604:	d114      	bne.n	8004630 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2241      	movs	r2, #65	@ 0x41
 800460a:	2128      	movs	r1, #40	@ 0x28
 800460c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2221      	movs	r2, #33	@ 0x21
 8004612:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2101      	movs	r1, #1
 8004618:	0018      	movs	r0, r3
 800461a:	f000 fb77 	bl	8004d0c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2240      	movs	r2, #64	@ 0x40
 8004622:	2100      	movs	r1, #0
 8004624:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	0018      	movs	r0, r3
 800462a:	f7ff fdea 	bl	8004202 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800462e:	e019      	b.n	8004664 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2241      	movs	r2, #65	@ 0x41
 8004634:	5c9b      	ldrb	r3, [r3, r2]
 8004636:	b2db      	uxtb	r3, r3
 8004638:	2b2a      	cmp	r3, #42	@ 0x2a
 800463a:	d113      	bne.n	8004664 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2241      	movs	r2, #65	@ 0x41
 8004640:	2128      	movs	r1, #40	@ 0x28
 8004642:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2222      	movs	r2, #34	@ 0x22
 8004648:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2102      	movs	r1, #2
 800464e:	0018      	movs	r0, r3
 8004650:	f000 fb5c 	bl	8004d0c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2240      	movs	r2, #64	@ 0x40
 8004658:	2100      	movs	r1, #0
 800465a:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	0018      	movs	r0, r3
 8004660:	f7ff fdd7 	bl	8004212 <HAL_I2C_SlaveRxCpltCallback>
}
 8004664:	46c0      	nop			@ (mov r8, r8)
 8004666:	46bd      	mov	sp, r7
 8004668:	b004      	add	sp, #16
 800466a:	bd80      	pop	{r7, pc}
 800466c:	ffffbfff 	.word	0xffffbfff
 8004670:	ffff7fff 	.word	0xffff7fff

08004674 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b086      	sub	sp, #24
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800468e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004690:	200b      	movs	r0, #11
 8004692:	183b      	adds	r3, r7, r0
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	2141      	movs	r1, #65	@ 0x41
 8004698:	5c52      	ldrb	r2, [r2, r1]
 800469a:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2220      	movs	r2, #32
 80046a2:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80046a4:	183b      	adds	r3, r7, r0
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	2b21      	cmp	r3, #33	@ 0x21
 80046aa:	d003      	beq.n	80046b4 <I2C_ITSlaveCplt+0x40>
 80046ac:	183b      	adds	r3, r7, r0
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	2b29      	cmp	r3, #41	@ 0x29
 80046b2:	d109      	bne.n	80046c8 <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80046b4:	4aac      	ldr	r2, [pc, #688]	@ (8004968 <I2C_ITSlaveCplt+0x2f4>)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	0011      	movs	r1, r2
 80046ba:	0018      	movs	r0, r3
 80046bc:	f000 fb26 	bl	8004d0c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2221      	movs	r2, #33	@ 0x21
 80046c4:	631a      	str	r2, [r3, #48]	@ 0x30
 80046c6:	e020      	b.n	800470a <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80046c8:	220b      	movs	r2, #11
 80046ca:	18bb      	adds	r3, r7, r2
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	2b22      	cmp	r3, #34	@ 0x22
 80046d0:	d003      	beq.n	80046da <I2C_ITSlaveCplt+0x66>
 80046d2:	18bb      	adds	r3, r7, r2
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80046d8:	d109      	bne.n	80046ee <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80046da:	4aa4      	ldr	r2, [pc, #656]	@ (800496c <I2C_ITSlaveCplt+0x2f8>)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	0011      	movs	r1, r2
 80046e0:	0018      	movs	r0, r3
 80046e2:	f000 fb13 	bl	8004d0c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2222      	movs	r2, #34	@ 0x22
 80046ea:	631a      	str	r2, [r3, #48]	@ 0x30
 80046ec:	e00d      	b.n	800470a <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80046ee:	230b      	movs	r3, #11
 80046f0:	18fb      	adds	r3, r7, r3
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	2b28      	cmp	r3, #40	@ 0x28
 80046f6:	d108      	bne.n	800470a <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80046f8:	4a9d      	ldr	r2, [pc, #628]	@ (8004970 <I2C_ITSlaveCplt+0x2fc>)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	0011      	movs	r1, r2
 80046fe:	0018      	movs	r0, r3
 8004700:	f000 fb04 	bl	8004d0c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	685a      	ldr	r2, [r3, #4]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2180      	movs	r1, #128	@ 0x80
 8004716:	0209      	lsls	r1, r1, #8
 8004718:	430a      	orrs	r2, r1
 800471a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	685a      	ldr	r2, [r3, #4]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4993      	ldr	r1, [pc, #588]	@ (8004974 <I2C_ITSlaveCplt+0x300>)
 8004728:	400a      	ands	r2, r1
 800472a:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	0018      	movs	r0, r3
 8004730:	f000 faab 	bl	8004c8a <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004734:	693a      	ldr	r2, [r7, #16]
 8004736:	2380      	movs	r3, #128	@ 0x80
 8004738:	01db      	lsls	r3, r3, #7
 800473a:	4013      	ands	r3, r2
 800473c:	d013      	beq.n	8004766 <I2C_ITSlaveCplt+0xf2>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	498b      	ldr	r1, [pc, #556]	@ (8004978 <I2C_ITSlaveCplt+0x304>)
 800474a:	400a      	ands	r2, r1
 800474c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004752:	2b00      	cmp	r3, #0
 8004754:	d01f      	beq.n	8004796 <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	b29a      	uxth	r2, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004764:	e017      	b.n	8004796 <I2C_ITSlaveCplt+0x122>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004766:	693a      	ldr	r2, [r7, #16]
 8004768:	2380      	movs	r3, #128	@ 0x80
 800476a:	021b      	lsls	r3, r3, #8
 800476c:	4013      	ands	r3, r2
 800476e:	d012      	beq.n	8004796 <I2C_ITSlaveCplt+0x122>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4980      	ldr	r1, [pc, #512]	@ (800497c <I2C_ITSlaveCplt+0x308>)
 800477c:	400a      	ands	r2, r1
 800477e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004784:	2b00      	cmp	r3, #0
 8004786:	d006      	beq.n	8004796 <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	b29a      	uxth	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	2204      	movs	r2, #4
 800479a:	4013      	ands	r3, r2
 800479c:	d020      	beq.n	80047e0 <I2C_ITSlaveCplt+0x16c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	2204      	movs	r2, #4
 80047a2:	4393      	bics	r3, r2
 80047a4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b0:	b2d2      	uxtb	r2, r2
 80047b2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b8:	1c5a      	adds	r2, r3, #1
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00c      	beq.n	80047e0 <I2C_ITSlaveCplt+0x16c>
    {
      hi2c->XferSize--;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047ca:	3b01      	subs	r3, #1
 80047cc:	b29a      	uxth	r2, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	3b01      	subs	r3, #1
 80047da:	b29a      	uxth	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d005      	beq.n	80047f6 <I2C_ITSlaveCplt+0x182>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ee:	2204      	movs	r2, #4
 80047f0:	431a      	orrs	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	2210      	movs	r2, #16
 80047fa:	4013      	ands	r3, r2
 80047fc:	d04f      	beq.n	800489e <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	2210      	movs	r2, #16
 8004802:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004804:	d04b      	beq.n	800489e <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800480a:	b29b      	uxth	r3, r3
 800480c:	2b00      	cmp	r3, #0
 800480e:	d12d      	bne.n	800486c <I2C_ITSlaveCplt+0x1f8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2241      	movs	r2, #65	@ 0x41
 8004814:	5c9b      	ldrb	r3, [r3, r2]
 8004816:	b2db      	uxtb	r3, r3
 8004818:	2b28      	cmp	r3, #40	@ 0x28
 800481a:	d10b      	bne.n	8004834 <I2C_ITSlaveCplt+0x1c0>
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	2380      	movs	r3, #128	@ 0x80
 8004820:	049b      	lsls	r3, r3, #18
 8004822:	429a      	cmp	r2, r3
 8004824:	d106      	bne.n	8004834 <I2C_ITSlaveCplt+0x1c0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004826:	697a      	ldr	r2, [r7, #20]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	0011      	movs	r1, r2
 800482c:	0018      	movs	r0, r3
 800482e:	f000 f8a9 	bl	8004984 <I2C_ITListenCplt>
 8004832:	e034      	b.n	800489e <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2241      	movs	r2, #65	@ 0x41
 8004838:	5c9b      	ldrb	r3, [r3, r2]
 800483a:	b2db      	uxtb	r3, r3
 800483c:	2b29      	cmp	r3, #41	@ 0x29
 800483e:	d110      	bne.n	8004862 <I2C_ITSlaveCplt+0x1ee>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	4a4f      	ldr	r2, [pc, #316]	@ (8004980 <I2C_ITSlaveCplt+0x30c>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d00c      	beq.n	8004862 <I2C_ITSlaveCplt+0x1ee>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2210      	movs	r2, #16
 800484e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	0018      	movs	r0, r3
 8004854:	f000 fa19 	bl	8004c8a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	0018      	movs	r0, r3
 800485c:	f7ff fea6 	bl	80045ac <I2C_ITSlaveSeqCplt>
 8004860:	e01d      	b.n	800489e <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2210      	movs	r2, #16
 8004868:	61da      	str	r2, [r3, #28]
 800486a:	e018      	b.n	800489e <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2210      	movs	r2, #16
 8004872:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004878:	2204      	movs	r2, #4
 800487a:	431a      	orrs	r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d004      	beq.n	8004890 <I2C_ITSlaveCplt+0x21c>
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	2380      	movs	r3, #128	@ 0x80
 800488a:	045b      	lsls	r3, r3, #17
 800488c:	429a      	cmp	r2, r3
 800488e:	d106      	bne.n	800489e <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	0011      	movs	r1, r2
 8004898:	0018      	movs	r0, r3
 800489a:	f000 f8cb 	bl	8004a34 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2242      	movs	r2, #66	@ 0x42
 80048a2:	2100      	movs	r1, #0
 80048a4:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d013      	beq.n	80048dc <I2C_ITSlaveCplt+0x268>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	0011      	movs	r1, r2
 80048bc:	0018      	movs	r0, r3
 80048be:	f000 f8b9 	bl	8004a34 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2241      	movs	r2, #65	@ 0x41
 80048c6:	5c9b      	ldrb	r3, [r3, r2]
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	2b28      	cmp	r3, #40	@ 0x28
 80048cc:	d147      	bne.n	800495e <I2C_ITSlaveCplt+0x2ea>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80048ce:	697a      	ldr	r2, [r7, #20]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	0011      	movs	r1, r2
 80048d4:	0018      	movs	r0, r3
 80048d6:	f000 f855 	bl	8004984 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80048da:	e040      	b.n	800495e <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048e0:	4a27      	ldr	r2, [pc, #156]	@ (8004980 <I2C_ITSlaveCplt+0x30c>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d016      	beq.n	8004914 <I2C_ITSlaveCplt+0x2a0>
    I2C_ITSlaveSeqCplt(hi2c);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	0018      	movs	r0, r3
 80048ea:	f7ff fe5f 	bl	80045ac <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a23      	ldr	r2, [pc, #140]	@ (8004980 <I2C_ITSlaveCplt+0x30c>)
 80048f2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2241      	movs	r2, #65	@ 0x41
 80048f8:	2120      	movs	r1, #32
 80048fa:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2240      	movs	r2, #64	@ 0x40
 8004906:	2100      	movs	r1, #0
 8004908:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	0018      	movs	r0, r3
 800490e:	f7ff fc98 	bl	8004242 <HAL_I2C_ListenCpltCallback>
}
 8004912:	e024      	b.n	800495e <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2241      	movs	r2, #65	@ 0x41
 8004918:	5c9b      	ldrb	r3, [r3, r2]
 800491a:	b2db      	uxtb	r3, r3
 800491c:	2b22      	cmp	r3, #34	@ 0x22
 800491e:	d10f      	bne.n	8004940 <I2C_ITSlaveCplt+0x2cc>
    hi2c->State = HAL_I2C_STATE_READY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2241      	movs	r2, #65	@ 0x41
 8004924:	2120      	movs	r1, #32
 8004926:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2240      	movs	r2, #64	@ 0x40
 8004932:	2100      	movs	r1, #0
 8004934:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	0018      	movs	r0, r3
 800493a:	f7ff fc6a 	bl	8004212 <HAL_I2C_SlaveRxCpltCallback>
}
 800493e:	e00e      	b.n	800495e <I2C_ITSlaveCplt+0x2ea>
    hi2c->State = HAL_I2C_STATE_READY;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2241      	movs	r2, #65	@ 0x41
 8004944:	2120      	movs	r1, #32
 8004946:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2240      	movs	r2, #64	@ 0x40
 8004952:	2100      	movs	r1, #0
 8004954:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	0018      	movs	r0, r3
 800495a:	f7ff fc52 	bl	8004202 <HAL_I2C_SlaveTxCpltCallback>
}
 800495e:	46c0      	nop			@ (mov r8, r8)
 8004960:	46bd      	mov	sp, r7
 8004962:	b006      	add	sp, #24
 8004964:	bd80      	pop	{r7, pc}
 8004966:	46c0      	nop			@ (mov r8, r8)
 8004968:	00008001 	.word	0x00008001
 800496c:	00008002 	.word	0x00008002
 8004970:	00008003 	.word	0x00008003
 8004974:	fe00e800 	.word	0xfe00e800
 8004978:	ffffbfff 	.word	0xffffbfff
 800497c:	ffff7fff 	.word	0xffff7fff
 8004980:	ffff0000 	.word	0xffff0000

08004984 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a26      	ldr	r2, [pc, #152]	@ (8004a2c <I2C_ITListenCplt+0xa8>)
 8004992:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2241      	movs	r2, #65	@ 0x41
 800499e:	2120      	movs	r1, #32
 80049a0:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2242      	movs	r2, #66	@ 0x42
 80049a6:	2100      	movs	r1, #0
 80049a8:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	2204      	movs	r2, #4
 80049b4:	4013      	ands	r3, r2
 80049b6:	d022      	beq.n	80049fe <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c2:	b2d2      	uxtb	r2, r2
 80049c4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ca:	1c5a      	adds	r2, r3, #1
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d012      	beq.n	80049fe <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049dc:	3b01      	subs	r3, #1
 80049de:	b29a      	uxth	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	3b01      	subs	r3, #1
 80049ec:	b29a      	uxth	r2, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049f6:	2204      	movs	r2, #4
 80049f8:	431a      	orrs	r2, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80049fe:	4a0c      	ldr	r2, [pc, #48]	@ (8004a30 <I2C_ITListenCplt+0xac>)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	0011      	movs	r1, r2
 8004a04:	0018      	movs	r0, r3
 8004a06:	f000 f981 	bl	8004d0c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	2210      	movs	r2, #16
 8004a10:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2240      	movs	r2, #64	@ 0x40
 8004a16:	2100      	movs	r1, #0
 8004a18:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	0018      	movs	r0, r3
 8004a1e:	f7ff fc10 	bl	8004242 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004a22:	46c0      	nop			@ (mov r8, r8)
 8004a24:	46bd      	mov	sp, r7
 8004a26:	b002      	add	sp, #8
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	46c0      	nop			@ (mov r8, r8)
 8004a2c:	ffff0000 	.word	0xffff0000
 8004a30:	00008003 	.word	0x00008003

08004a34 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004a3e:	200f      	movs	r0, #15
 8004a40:	183b      	adds	r3, r7, r0
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	2141      	movs	r1, #65	@ 0x41
 8004a46:	5c52      	ldrb	r2, [r2, r1]
 8004a48:	701a      	strb	r2, [r3, #0]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2242      	movs	r2, #66	@ 0x42
 8004a4e:	2100      	movs	r1, #0
 8004a50:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a72      	ldr	r2, [pc, #456]	@ (8004c20 <I2C_ITError+0x1ec>)
 8004a56:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	431a      	orrs	r2, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004a6a:	183b      	adds	r3, r7, r0
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	2b28      	cmp	r3, #40	@ 0x28
 8004a70:	d007      	beq.n	8004a82 <I2C_ITError+0x4e>
 8004a72:	183b      	adds	r3, r7, r0
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	2b29      	cmp	r3, #41	@ 0x29
 8004a78:	d003      	beq.n	8004a82 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004a7a:	183b      	adds	r3, r7, r0
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a80:	d10c      	bne.n	8004a9c <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2103      	movs	r1, #3
 8004a86:	0018      	movs	r0, r3
 8004a88:	f000 f940 	bl	8004d0c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2241      	movs	r2, #65	@ 0x41
 8004a90:	2128      	movs	r1, #40	@ 0x28
 8004a92:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4a63      	ldr	r2, [pc, #396]	@ (8004c24 <I2C_ITError+0x1f0>)
 8004a98:	635a      	str	r2, [r3, #52]	@ 0x34
 8004a9a:	e032      	b.n	8004b02 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004a9c:	4a62      	ldr	r2, [pc, #392]	@ (8004c28 <I2C_ITError+0x1f4>)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	0011      	movs	r1, r2
 8004aa2:	0018      	movs	r0, r3
 8004aa4:	f000 f932 	bl	8004d0c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	0018      	movs	r0, r3
 8004aac:	f000 f8ed 	bl	8004c8a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2241      	movs	r2, #65	@ 0x41
 8004ab4:	5c9b      	ldrb	r3, [r3, r2]
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	2b60      	cmp	r3, #96	@ 0x60
 8004aba:	d01f      	beq.n	8004afc <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2241      	movs	r2, #65	@ 0x41
 8004ac0:	2120      	movs	r1, #32
 8004ac2:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	2220      	movs	r2, #32
 8004acc:	4013      	ands	r3, r2
 8004ace:	2b20      	cmp	r3, #32
 8004ad0:	d114      	bne.n	8004afc <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	699b      	ldr	r3, [r3, #24]
 8004ad8:	2210      	movs	r2, #16
 8004ada:	4013      	ands	r3, r2
 8004adc:	2b10      	cmp	r3, #16
 8004ade:	d109      	bne.n	8004af4 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2210      	movs	r2, #16
 8004ae6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aec:	2204      	movs	r2, #4
 8004aee:	431a      	orrs	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2220      	movs	r2, #32
 8004afa:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b06:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d03b      	beq.n	8004b88 <I2C_ITError+0x154>
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	2b11      	cmp	r3, #17
 8004b14:	d002      	beq.n	8004b1c <I2C_ITError+0xe8>
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	2b21      	cmp	r3, #33	@ 0x21
 8004b1a:	d135      	bne.n	8004b88 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	2380      	movs	r3, #128	@ 0x80
 8004b24:	01db      	lsls	r3, r3, #7
 8004b26:	401a      	ands	r2, r3
 8004b28:	2380      	movs	r3, #128	@ 0x80
 8004b2a:	01db      	lsls	r3, r3, #7
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d107      	bne.n	8004b40 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	493c      	ldr	r1, [pc, #240]	@ (8004c2c <I2C_ITError+0x1f8>)
 8004b3c:	400a      	ands	r2, r1
 8004b3e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b44:	0018      	movs	r0, r3
 8004b46:	f7fe ff35 	bl	80039b4 <HAL_DMA_GetState>
 8004b4a:	0003      	movs	r3, r0
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d016      	beq.n	8004b7e <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b54:	4a36      	ldr	r2, [pc, #216]	@ (8004c30 <I2C_ITError+0x1fc>)
 8004b56:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2240      	movs	r2, #64	@ 0x40
 8004b5c:	2100      	movs	r1, #0
 8004b5e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b64:	0018      	movs	r0, r3
 8004b66:	f7fe fdf9 	bl	800375c <HAL_DMA_Abort_IT>
 8004b6a:	1e03      	subs	r3, r0, #0
 8004b6c:	d051      	beq.n	8004c12 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b72:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b78:	0018      	movs	r0, r3
 8004b7a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004b7c:	e049      	b.n	8004c12 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	0018      	movs	r0, r3
 8004b82:	f000 f859 	bl	8004c38 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004b86:	e044      	b.n	8004c12 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d03b      	beq.n	8004c08 <I2C_ITError+0x1d4>
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	2b12      	cmp	r3, #18
 8004b94:	d002      	beq.n	8004b9c <I2C_ITError+0x168>
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	2b22      	cmp	r3, #34	@ 0x22
 8004b9a:	d135      	bne.n	8004c08 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	2380      	movs	r3, #128	@ 0x80
 8004ba4:	021b      	lsls	r3, r3, #8
 8004ba6:	401a      	ands	r2, r3
 8004ba8:	2380      	movs	r3, #128	@ 0x80
 8004baa:	021b      	lsls	r3, r3, #8
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d107      	bne.n	8004bc0 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	491e      	ldr	r1, [pc, #120]	@ (8004c34 <I2C_ITError+0x200>)
 8004bbc:	400a      	ands	r2, r1
 8004bbe:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bc4:	0018      	movs	r0, r3
 8004bc6:	f7fe fef5 	bl	80039b4 <HAL_DMA_GetState>
 8004bca:	0003      	movs	r3, r0
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d016      	beq.n	8004bfe <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bd4:	4a16      	ldr	r2, [pc, #88]	@ (8004c30 <I2C_ITError+0x1fc>)
 8004bd6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2240      	movs	r2, #64	@ 0x40
 8004bdc:	2100      	movs	r1, #0
 8004bde:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004be4:	0018      	movs	r0, r3
 8004be6:	f7fe fdb9 	bl	800375c <HAL_DMA_Abort_IT>
 8004bea:	1e03      	subs	r3, r0, #0
 8004bec:	d013      	beq.n	8004c16 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bf2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bf8:	0018      	movs	r0, r3
 8004bfa:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004bfc:	e00b      	b.n	8004c16 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	0018      	movs	r0, r3
 8004c02:	f000 f819 	bl	8004c38 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004c06:	e006      	b.n	8004c16 <I2C_ITError+0x1e2>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	0018      	movs	r0, r3
 8004c0c:	f000 f814 	bl	8004c38 <I2C_TreatErrorCallback>
  }
}
 8004c10:	e002      	b.n	8004c18 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004c12:	46c0      	nop			@ (mov r8, r8)
 8004c14:	e000      	b.n	8004c18 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004c16:	46c0      	nop			@ (mov r8, r8)
}
 8004c18:	46c0      	nop			@ (mov r8, r8)
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	b004      	add	sp, #16
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	ffff0000 	.word	0xffff0000
 8004c24:	08004265 	.word	0x08004265
 8004c28:	00008003 	.word	0x00008003
 8004c2c:	ffffbfff 	.word	0xffffbfff
 8004c30:	08004ccf 	.word	0x08004ccf
 8004c34:	ffff7fff 	.word	0xffff7fff

08004c38 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2241      	movs	r2, #65	@ 0x41
 8004c44:	5c9b      	ldrb	r3, [r3, r2]
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	2b60      	cmp	r3, #96	@ 0x60
 8004c4a:	d10f      	bne.n	8004c6c <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2241      	movs	r2, #65	@ 0x41
 8004c50:	2120      	movs	r1, #32
 8004c52:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2240      	movs	r2, #64	@ 0x40
 8004c5e:	2100      	movs	r1, #0
 8004c60:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	0018      	movs	r0, r3
 8004c66:	f7ff faf4 	bl	8004252 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004c6a:	e00a      	b.n	8004c82 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2240      	movs	r2, #64	@ 0x40
 8004c76:	2100      	movs	r1, #0
 8004c78:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	0018      	movs	r0, r3
 8004c7e:	f7fb fbb9 	bl	80003f4 <HAL_I2C_ErrorCallback>
}
 8004c82:	46c0      	nop			@ (mov r8, r8)
 8004c84:	46bd      	mov	sp, r7
 8004c86:	b002      	add	sp, #8
 8004c88:	bd80      	pop	{r7, pc}

08004c8a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004c8a:	b580      	push	{r7, lr}
 8004c8c:	b082      	sub	sp, #8
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	699b      	ldr	r3, [r3, #24]
 8004c98:	2202      	movs	r2, #2
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d103      	bne.n	8004ca8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d007      	beq.n	8004cc6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	699a      	ldr	r2, [r3, #24]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2101      	movs	r1, #1
 8004cc2:	430a      	orrs	r2, r1
 8004cc4:	619a      	str	r2, [r3, #24]
  }
}
 8004cc6:	46c0      	nop			@ (mov r8, r8)
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	b002      	add	sp, #8
 8004ccc:	bd80      	pop	{r7, pc}

08004cce <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004cce:	b580      	push	{r7, lr}
 8004cd0:	b084      	sub	sp, #16
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cda:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d003      	beq.n	8004cec <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ce8:	2200      	movs	r2, #0
 8004cea:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d003      	beq.n	8004cfc <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	0018      	movs	r0, r3
 8004d00:	f7ff ff9a 	bl	8004c38 <I2C_TreatErrorCallback>
}
 8004d04:	46c0      	nop			@ (mov r8, r8)
 8004d06:	46bd      	mov	sp, r7
 8004d08:	b004      	add	sp, #16
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	000a      	movs	r2, r1
 8004d16:	1cbb      	adds	r3, r7, #2
 8004d18:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004d1e:	1cbb      	adds	r3, r7, #2
 8004d20:	881b      	ldrh	r3, [r3, #0]
 8004d22:	2201      	movs	r2, #1
 8004d24:	4013      	ands	r3, r2
 8004d26:	d010      	beq.n	8004d4a <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2242      	movs	r2, #66	@ 0x42
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2241      	movs	r2, #65	@ 0x41
 8004d34:	5c9b      	ldrb	r3, [r3, r2]
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	001a      	movs	r2, r3
 8004d3a:	2328      	movs	r3, #40	@ 0x28
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	2b28      	cmp	r3, #40	@ 0x28
 8004d40:	d003      	beq.n	8004d4a <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	22b0      	movs	r2, #176	@ 0xb0
 8004d46:	4313      	orrs	r3, r2
 8004d48:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004d4a:	1cbb      	adds	r3, r7, #2
 8004d4c:	881b      	ldrh	r3, [r3, #0]
 8004d4e:	2202      	movs	r2, #2
 8004d50:	4013      	ands	r3, r2
 8004d52:	d010      	beq.n	8004d76 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2244      	movs	r2, #68	@ 0x44
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2241      	movs	r2, #65	@ 0x41
 8004d60:	5c9b      	ldrb	r3, [r3, r2]
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	001a      	movs	r2, r3
 8004d66:	2328      	movs	r3, #40	@ 0x28
 8004d68:	4013      	ands	r3, r2
 8004d6a:	2b28      	cmp	r3, #40	@ 0x28
 8004d6c:	d003      	beq.n	8004d76 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	22b0      	movs	r2, #176	@ 0xb0
 8004d72:	4313      	orrs	r3, r2
 8004d74:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004d76:	1cbb      	adds	r3, r7, #2
 8004d78:	2200      	movs	r2, #0
 8004d7a:	5e9b      	ldrsh	r3, [r3, r2]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	da03      	bge.n	8004d88 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	22b8      	movs	r2, #184	@ 0xb8
 8004d84:	4313      	orrs	r3, r2
 8004d86:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004d88:	1cbb      	adds	r3, r7, #2
 8004d8a:	881b      	ldrh	r3, [r3, #0]
 8004d8c:	2b10      	cmp	r3, #16
 8004d8e:	d103      	bne.n	8004d98 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2290      	movs	r2, #144	@ 0x90
 8004d94:	4313      	orrs	r3, r2
 8004d96:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004d98:	1cbb      	adds	r3, r7, #2
 8004d9a:	881b      	ldrh	r3, [r3, #0]
 8004d9c:	2b20      	cmp	r3, #32
 8004d9e:	d103      	bne.n	8004da8 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2220      	movs	r2, #32
 8004da4:	4313      	orrs	r3, r2
 8004da6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004da8:	1cbb      	adds	r3, r7, #2
 8004daa:	881b      	ldrh	r3, [r3, #0]
 8004dac:	2b40      	cmp	r3, #64	@ 0x40
 8004dae:	d103      	bne.n	8004db8 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2240      	movs	r2, #64	@ 0x40
 8004db4:	4313      	orrs	r3, r2
 8004db6:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	43d9      	mvns	r1, r3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	400a      	ands	r2, r1
 8004dc8:	601a      	str	r2, [r3, #0]
}
 8004dca:	46c0      	nop			@ (mov r8, r8)
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	b004      	add	sp, #16
 8004dd0:	bd80      	pop	{r7, pc}
	...

08004dd4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b082      	sub	sp, #8
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2241      	movs	r2, #65	@ 0x41
 8004de2:	5c9b      	ldrb	r3, [r3, r2]
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	2b20      	cmp	r3, #32
 8004de8:	d138      	bne.n	8004e5c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2240      	movs	r2, #64	@ 0x40
 8004dee:	5c9b      	ldrb	r3, [r3, r2]
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d101      	bne.n	8004df8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004df4:	2302      	movs	r3, #2
 8004df6:	e032      	b.n	8004e5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2240      	movs	r2, #64	@ 0x40
 8004dfc:	2101      	movs	r1, #1
 8004dfe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2241      	movs	r2, #65	@ 0x41
 8004e04:	2124      	movs	r1, #36	@ 0x24
 8004e06:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	2101      	movs	r1, #1
 8004e14:	438a      	bics	r2, r1
 8004e16:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4911      	ldr	r1, [pc, #68]	@ (8004e68 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004e24:	400a      	ands	r2, r1
 8004e26:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	6819      	ldr	r1, [r3, #0]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	683a      	ldr	r2, [r7, #0]
 8004e34:	430a      	orrs	r2, r1
 8004e36:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2101      	movs	r1, #1
 8004e44:	430a      	orrs	r2, r1
 8004e46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2241      	movs	r2, #65	@ 0x41
 8004e4c:	2120      	movs	r1, #32
 8004e4e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2240      	movs	r2, #64	@ 0x40
 8004e54:	2100      	movs	r1, #0
 8004e56:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	e000      	b.n	8004e5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004e5c:	2302      	movs	r3, #2
  }
}
 8004e5e:	0018      	movs	r0, r3
 8004e60:	46bd      	mov	sp, r7
 8004e62:	b002      	add	sp, #8
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	46c0      	nop			@ (mov r8, r8)
 8004e68:	ffffefff 	.word	0xffffefff

08004e6c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2241      	movs	r2, #65	@ 0x41
 8004e7a:	5c9b      	ldrb	r3, [r3, r2]
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	2b20      	cmp	r3, #32
 8004e80:	d139      	bne.n	8004ef6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2240      	movs	r2, #64	@ 0x40
 8004e86:	5c9b      	ldrb	r3, [r3, r2]
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d101      	bne.n	8004e90 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004e8c:	2302      	movs	r3, #2
 8004e8e:	e033      	b.n	8004ef8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2240      	movs	r2, #64	@ 0x40
 8004e94:	2101      	movs	r1, #1
 8004e96:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2241      	movs	r2, #65	@ 0x41
 8004e9c:	2124      	movs	r1, #36	@ 0x24
 8004e9e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2101      	movs	r1, #1
 8004eac:	438a      	bics	r2, r1
 8004eae:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	4a11      	ldr	r2, [pc, #68]	@ (8004f00 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	021b      	lsls	r3, r3, #8
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2101      	movs	r1, #1
 8004ede:	430a      	orrs	r2, r1
 8004ee0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2241      	movs	r2, #65	@ 0x41
 8004ee6:	2120      	movs	r1, #32
 8004ee8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2240      	movs	r2, #64	@ 0x40
 8004eee:	2100      	movs	r1, #0
 8004ef0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	e000      	b.n	8004ef8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004ef6:	2302      	movs	r3, #2
  }
}
 8004ef8:	0018      	movs	r0, r3
 8004efa:	46bd      	mov	sp, r7
 8004efc:	b004      	add	sp, #16
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	fffff0ff 	.word	0xfffff0ff

08004f04 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b086      	sub	sp, #24
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d101      	bne.n	8004f16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e20f      	b.n	8005336 <HAL_RCC_OscConfig+0x432>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	d100      	bne.n	8004f22 <HAL_RCC_OscConfig+0x1e>
 8004f20:	e069      	b.n	8004ff6 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f22:	4bc8      	ldr	r3, [pc, #800]	@ (8005244 <HAL_RCC_OscConfig+0x340>)
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	2238      	movs	r2, #56	@ 0x38
 8004f28:	4013      	ands	r3, r2
 8004f2a:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	2b08      	cmp	r3, #8
 8004f30:	d105      	bne.n	8004f3e <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d15d      	bne.n	8004ff6 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e1fb      	b.n	8005336 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	685a      	ldr	r2, [r3, #4]
 8004f42:	2380      	movs	r3, #128	@ 0x80
 8004f44:	025b      	lsls	r3, r3, #9
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d107      	bne.n	8004f5a <HAL_RCC_OscConfig+0x56>
 8004f4a:	4bbe      	ldr	r3, [pc, #760]	@ (8005244 <HAL_RCC_OscConfig+0x340>)
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	4bbd      	ldr	r3, [pc, #756]	@ (8005244 <HAL_RCC_OscConfig+0x340>)
 8004f50:	2180      	movs	r1, #128	@ 0x80
 8004f52:	0249      	lsls	r1, r1, #9
 8004f54:	430a      	orrs	r2, r1
 8004f56:	601a      	str	r2, [r3, #0]
 8004f58:	e020      	b.n	8004f9c <HAL_RCC_OscConfig+0x98>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685a      	ldr	r2, [r3, #4]
 8004f5e:	23a0      	movs	r3, #160	@ 0xa0
 8004f60:	02db      	lsls	r3, r3, #11
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d10e      	bne.n	8004f84 <HAL_RCC_OscConfig+0x80>
 8004f66:	4bb7      	ldr	r3, [pc, #732]	@ (8005244 <HAL_RCC_OscConfig+0x340>)
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	4bb6      	ldr	r3, [pc, #728]	@ (8005244 <HAL_RCC_OscConfig+0x340>)
 8004f6c:	2180      	movs	r1, #128	@ 0x80
 8004f6e:	02c9      	lsls	r1, r1, #11
 8004f70:	430a      	orrs	r2, r1
 8004f72:	601a      	str	r2, [r3, #0]
 8004f74:	4bb3      	ldr	r3, [pc, #716]	@ (8005244 <HAL_RCC_OscConfig+0x340>)
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	4bb2      	ldr	r3, [pc, #712]	@ (8005244 <HAL_RCC_OscConfig+0x340>)
 8004f7a:	2180      	movs	r1, #128	@ 0x80
 8004f7c:	0249      	lsls	r1, r1, #9
 8004f7e:	430a      	orrs	r2, r1
 8004f80:	601a      	str	r2, [r3, #0]
 8004f82:	e00b      	b.n	8004f9c <HAL_RCC_OscConfig+0x98>
 8004f84:	4baf      	ldr	r3, [pc, #700]	@ (8005244 <HAL_RCC_OscConfig+0x340>)
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	4bae      	ldr	r3, [pc, #696]	@ (8005244 <HAL_RCC_OscConfig+0x340>)
 8004f8a:	49af      	ldr	r1, [pc, #700]	@ (8005248 <HAL_RCC_OscConfig+0x344>)
 8004f8c:	400a      	ands	r2, r1
 8004f8e:	601a      	str	r2, [r3, #0]
 8004f90:	4bac      	ldr	r3, [pc, #688]	@ (8005244 <HAL_RCC_OscConfig+0x340>)
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	4bab      	ldr	r3, [pc, #684]	@ (8005244 <HAL_RCC_OscConfig+0x340>)
 8004f96:	49ad      	ldr	r1, [pc, #692]	@ (800524c <HAL_RCC_OscConfig+0x348>)
 8004f98:	400a      	ands	r2, r1
 8004f9a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d014      	beq.n	8004fce <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa4:	f7fe f8b0 	bl	8003108 <HAL_GetTick>
 8004fa8:	0003      	movs	r3, r0
 8004faa:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fac:	e008      	b.n	8004fc0 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8004fae:	f7fe f8ab 	bl	8003108 <HAL_GetTick>
 8004fb2:	0002      	movs	r2, r0
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	2b64      	cmp	r3, #100	@ 0x64
 8004fba:	d901      	bls.n	8004fc0 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	e1ba      	b.n	8005336 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fc0:	4ba0      	ldr	r3, [pc, #640]	@ (8005244 <HAL_RCC_OscConfig+0x340>)
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	2380      	movs	r3, #128	@ 0x80
 8004fc6:	029b      	lsls	r3, r3, #10
 8004fc8:	4013      	ands	r3, r2
 8004fca:	d0f0      	beq.n	8004fae <HAL_RCC_OscConfig+0xaa>
 8004fcc:	e013      	b.n	8004ff6 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fce:	f7fe f89b 	bl	8003108 <HAL_GetTick>
 8004fd2:	0003      	movs	r3, r0
 8004fd4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004fd6:	e008      	b.n	8004fea <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8004fd8:	f7fe f896 	bl	8003108 <HAL_GetTick>
 8004fdc:	0002      	movs	r2, r0
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	2b64      	cmp	r3, #100	@ 0x64
 8004fe4:	d901      	bls.n	8004fea <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e1a5      	b.n	8005336 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004fea:	4b96      	ldr	r3, [pc, #600]	@ (8005244 <HAL_RCC_OscConfig+0x340>)
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	2380      	movs	r3, #128	@ 0x80
 8004ff0:	029b      	lsls	r3, r3, #10
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	d1f0      	bne.n	8004fd8 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2202      	movs	r2, #2
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	d100      	bne.n	8005002 <HAL_RCC_OscConfig+0xfe>
 8005000:	e086      	b.n	8005110 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005002:	4b90      	ldr	r3, [pc, #576]	@ (8005244 <HAL_RCC_OscConfig+0x340>)
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	2238      	movs	r2, #56	@ 0x38
 8005008:	4013      	ands	r3, r2
 800500a:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d12f      	bne.n	8005072 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d101      	bne.n	800501e <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e18b      	b.n	8005336 <HAL_RCC_OscConfig+0x432>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800501e:	4b89      	ldr	r3, [pc, #548]	@ (8005244 <HAL_RCC_OscConfig+0x340>)
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	4a8b      	ldr	r2, [pc, #556]	@ (8005250 <HAL_RCC_OscConfig+0x34c>)
 8005024:	4013      	ands	r3, r2
 8005026:	0019      	movs	r1, r3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	695b      	ldr	r3, [r3, #20]
 800502c:	021a      	lsls	r2, r3, #8
 800502e:	4b85      	ldr	r3, [pc, #532]	@ (8005244 <HAL_RCC_OscConfig+0x340>)
 8005030:	430a      	orrs	r2, r1
 8005032:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d112      	bne.n	8005060 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800503a:	4b82      	ldr	r3, [pc, #520]	@ (8005244 <HAL_RCC_OscConfig+0x340>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a85      	ldr	r2, [pc, #532]	@ (8005254 <HAL_RCC_OscConfig+0x350>)
 8005040:	4013      	ands	r3, r2
 8005042:	0019      	movs	r1, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	691a      	ldr	r2, [r3, #16]
 8005048:	4b7e      	ldr	r3, [pc, #504]	@ (8005244 <HAL_RCC_OscConfig+0x340>)
 800504a:	430a      	orrs	r2, r1
 800504c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800504e:	4b7d      	ldr	r3, [pc, #500]	@ (8005244 <HAL_RCC_OscConfig+0x340>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	0adb      	lsrs	r3, r3, #11
 8005054:	2207      	movs	r2, #7
 8005056:	4013      	ands	r3, r2
 8005058:	4a7f      	ldr	r2, [pc, #508]	@ (8005258 <HAL_RCC_OscConfig+0x354>)
 800505a:	40da      	lsrs	r2, r3
 800505c:	4b7f      	ldr	r3, [pc, #508]	@ (800525c <HAL_RCC_OscConfig+0x358>)
 800505e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005060:	4b7f      	ldr	r3, [pc, #508]	@ (8005260 <HAL_RCC_OscConfig+0x35c>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	0018      	movs	r0, r3
 8005066:	f7fd fff3 	bl	8003050 <HAL_InitTick>
 800506a:	1e03      	subs	r3, r0, #0
 800506c:	d050      	beq.n	8005110 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e161      	b.n	8005336 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d030      	beq.n	80050dc <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800507a:	4b72      	ldr	r3, [pc, #456]	@ (8005244 <HAL_RCC_OscConfig+0x340>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a75      	ldr	r2, [pc, #468]	@ (8005254 <HAL_RCC_OscConfig+0x350>)
 8005080:	4013      	ands	r3, r2
 8005082:	0019      	movs	r1, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	691a      	ldr	r2, [r3, #16]
 8005088:	4b6e      	ldr	r3, [pc, #440]	@ (8005244 <HAL_RCC_OscConfig+0x340>)
 800508a:	430a      	orrs	r2, r1
 800508c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 800508e:	4b6d      	ldr	r3, [pc, #436]	@ (8005244 <HAL_RCC_OscConfig+0x340>)
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	4b6c      	ldr	r3, [pc, #432]	@ (8005244 <HAL_RCC_OscConfig+0x340>)
 8005094:	2180      	movs	r1, #128	@ 0x80
 8005096:	0049      	lsls	r1, r1, #1
 8005098:	430a      	orrs	r2, r1
 800509a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800509c:	f7fe f834 	bl	8003108 <HAL_GetTick>
 80050a0:	0003      	movs	r3, r0
 80050a2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050a4:	e008      	b.n	80050b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80050a6:	f7fe f82f 	bl	8003108 <HAL_GetTick>
 80050aa:	0002      	movs	r2, r0
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	2b02      	cmp	r3, #2
 80050b2:	d901      	bls.n	80050b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80050b4:	2303      	movs	r3, #3
 80050b6:	e13e      	b.n	8005336 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050b8:	4b62      	ldr	r3, [pc, #392]	@ (8005244 <HAL_RCC_OscConfig+0x340>)
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	2380      	movs	r3, #128	@ 0x80
 80050be:	00db      	lsls	r3, r3, #3
 80050c0:	4013      	ands	r3, r2
 80050c2:	d0f0      	beq.n	80050a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050c4:	4b5f      	ldr	r3, [pc, #380]	@ (8005244 <HAL_RCC_OscConfig+0x340>)
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	4a61      	ldr	r2, [pc, #388]	@ (8005250 <HAL_RCC_OscConfig+0x34c>)
 80050ca:	4013      	ands	r3, r2
 80050cc:	0019      	movs	r1, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	695b      	ldr	r3, [r3, #20]
 80050d2:	021a      	lsls	r2, r3, #8
 80050d4:	4b5b      	ldr	r3, [pc, #364]	@ (8005244 <HAL_RCC_OscConfig+0x340>)
 80050d6:	430a      	orrs	r2, r1
 80050d8:	605a      	str	r2, [r3, #4]
 80050da:	e019      	b.n	8005110 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 80050dc:	4b59      	ldr	r3, [pc, #356]	@ (8005244 <HAL_RCC_OscConfig+0x340>)
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	4b58      	ldr	r3, [pc, #352]	@ (8005244 <HAL_RCC_OscConfig+0x340>)
 80050e2:	4960      	ldr	r1, [pc, #384]	@ (8005264 <HAL_RCC_OscConfig+0x360>)
 80050e4:	400a      	ands	r2, r1
 80050e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e8:	f7fe f80e 	bl	8003108 <HAL_GetTick>
 80050ec:	0003      	movs	r3, r0
 80050ee:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80050f0:	e008      	b.n	8005104 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80050f2:	f7fe f809 	bl	8003108 <HAL_GetTick>
 80050f6:	0002      	movs	r2, r0
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	1ad3      	subs	r3, r2, r3
 80050fc:	2b02      	cmp	r3, #2
 80050fe:	d901      	bls.n	8005104 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	e118      	b.n	8005336 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005104:	4b4f      	ldr	r3, [pc, #316]	@ (8005244 <HAL_RCC_OscConfig+0x340>)
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	2380      	movs	r3, #128	@ 0x80
 800510a:	00db      	lsls	r3, r3, #3
 800510c:	4013      	ands	r3, r2
 800510e:	d1f0      	bne.n	80050f2 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2208      	movs	r2, #8
 8005116:	4013      	ands	r3, r2
 8005118:	d042      	beq.n	80051a0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800511a:	4b4a      	ldr	r3, [pc, #296]	@ (8005244 <HAL_RCC_OscConfig+0x340>)
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	2238      	movs	r2, #56	@ 0x38
 8005120:	4013      	ands	r3, r2
 8005122:	2b18      	cmp	r3, #24
 8005124:	d105      	bne.n	8005132 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	699b      	ldr	r3, [r3, #24]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d138      	bne.n	80051a0 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e101      	b.n	8005336 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	699b      	ldr	r3, [r3, #24]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d019      	beq.n	800516e <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800513a:	4b42      	ldr	r3, [pc, #264]	@ (8005244 <HAL_RCC_OscConfig+0x340>)
 800513c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800513e:	4b41      	ldr	r3, [pc, #260]	@ (8005244 <HAL_RCC_OscConfig+0x340>)
 8005140:	2101      	movs	r1, #1
 8005142:	430a      	orrs	r2, r1
 8005144:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005146:	f7fd ffdf 	bl	8003108 <HAL_GetTick>
 800514a:	0003      	movs	r3, r0
 800514c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800514e:	e008      	b.n	8005162 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8005150:	f7fd ffda 	bl	8003108 <HAL_GetTick>
 8005154:	0002      	movs	r2, r0
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	2b02      	cmp	r3, #2
 800515c:	d901      	bls.n	8005162 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 800515e:	2303      	movs	r3, #3
 8005160:	e0e9      	b.n	8005336 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8005162:	4b38      	ldr	r3, [pc, #224]	@ (8005244 <HAL_RCC_OscConfig+0x340>)
 8005164:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005166:	2202      	movs	r2, #2
 8005168:	4013      	ands	r3, r2
 800516a:	d0f1      	beq.n	8005150 <HAL_RCC_OscConfig+0x24c>
 800516c:	e018      	b.n	80051a0 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800516e:	4b35      	ldr	r3, [pc, #212]	@ (8005244 <HAL_RCC_OscConfig+0x340>)
 8005170:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005172:	4b34      	ldr	r3, [pc, #208]	@ (8005244 <HAL_RCC_OscConfig+0x340>)
 8005174:	2101      	movs	r1, #1
 8005176:	438a      	bics	r2, r1
 8005178:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800517a:	f7fd ffc5 	bl	8003108 <HAL_GetTick>
 800517e:	0003      	movs	r3, r0
 8005180:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8005182:	e008      	b.n	8005196 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8005184:	f7fd ffc0 	bl	8003108 <HAL_GetTick>
 8005188:	0002      	movs	r2, r0
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	2b02      	cmp	r3, #2
 8005190:	d901      	bls.n	8005196 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e0cf      	b.n	8005336 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8005196:	4b2b      	ldr	r3, [pc, #172]	@ (8005244 <HAL_RCC_OscConfig+0x340>)
 8005198:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800519a:	2202      	movs	r2, #2
 800519c:	4013      	ands	r3, r2
 800519e:	d1f1      	bne.n	8005184 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2204      	movs	r2, #4
 80051a6:	4013      	ands	r3, r2
 80051a8:	d100      	bne.n	80051ac <HAL_RCC_OscConfig+0x2a8>
 80051aa:	e084      	b.n	80052b6 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051ac:	230f      	movs	r3, #15
 80051ae:	18fb      	adds	r3, r7, r3
 80051b0:	2200      	movs	r2, #0
 80051b2:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80051b4:	4b23      	ldr	r3, [pc, #140]	@ (8005244 <HAL_RCC_OscConfig+0x340>)
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	2238      	movs	r2, #56	@ 0x38
 80051ba:	4013      	ands	r3, r2
 80051bc:	2b20      	cmp	r3, #32
 80051be:	d106      	bne.n	80051ce <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d000      	beq.n	80051ca <HAL_RCC_OscConfig+0x2c6>
 80051c8:	e075      	b.n	80052b6 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e0b3      	b.n	8005336 <HAL_RCC_OscConfig+0x432>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d106      	bne.n	80051e4 <HAL_RCC_OscConfig+0x2e0>
 80051d6:	4b1b      	ldr	r3, [pc, #108]	@ (8005244 <HAL_RCC_OscConfig+0x340>)
 80051d8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80051da:	4b1a      	ldr	r3, [pc, #104]	@ (8005244 <HAL_RCC_OscConfig+0x340>)
 80051dc:	2101      	movs	r1, #1
 80051de:	430a      	orrs	r2, r1
 80051e0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80051e2:	e01c      	b.n	800521e <HAL_RCC_OscConfig+0x31a>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	2b05      	cmp	r3, #5
 80051ea:	d10c      	bne.n	8005206 <HAL_RCC_OscConfig+0x302>
 80051ec:	4b15      	ldr	r3, [pc, #84]	@ (8005244 <HAL_RCC_OscConfig+0x340>)
 80051ee:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80051f0:	4b14      	ldr	r3, [pc, #80]	@ (8005244 <HAL_RCC_OscConfig+0x340>)
 80051f2:	2104      	movs	r1, #4
 80051f4:	430a      	orrs	r2, r1
 80051f6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80051f8:	4b12      	ldr	r3, [pc, #72]	@ (8005244 <HAL_RCC_OscConfig+0x340>)
 80051fa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80051fc:	4b11      	ldr	r3, [pc, #68]	@ (8005244 <HAL_RCC_OscConfig+0x340>)
 80051fe:	2101      	movs	r1, #1
 8005200:	430a      	orrs	r2, r1
 8005202:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005204:	e00b      	b.n	800521e <HAL_RCC_OscConfig+0x31a>
 8005206:	4b0f      	ldr	r3, [pc, #60]	@ (8005244 <HAL_RCC_OscConfig+0x340>)
 8005208:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800520a:	4b0e      	ldr	r3, [pc, #56]	@ (8005244 <HAL_RCC_OscConfig+0x340>)
 800520c:	2101      	movs	r1, #1
 800520e:	438a      	bics	r2, r1
 8005210:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005212:	4b0c      	ldr	r3, [pc, #48]	@ (8005244 <HAL_RCC_OscConfig+0x340>)
 8005214:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005216:	4b0b      	ldr	r3, [pc, #44]	@ (8005244 <HAL_RCC_OscConfig+0x340>)
 8005218:	2104      	movs	r1, #4
 800521a:	438a      	bics	r2, r1
 800521c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d028      	beq.n	8005278 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005226:	f7fd ff6f 	bl	8003108 <HAL_GetTick>
 800522a:	0003      	movs	r3, r0
 800522c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800522e:	e01d      	b.n	800526c <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005230:	f7fd ff6a 	bl	8003108 <HAL_GetTick>
 8005234:	0002      	movs	r2, r0
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	4a0b      	ldr	r2, [pc, #44]	@ (8005268 <HAL_RCC_OscConfig+0x364>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d915      	bls.n	800526c <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8005240:	2303      	movs	r3, #3
 8005242:	e078      	b.n	8005336 <HAL_RCC_OscConfig+0x432>
 8005244:	40021000 	.word	0x40021000
 8005248:	fffeffff 	.word	0xfffeffff
 800524c:	fffbffff 	.word	0xfffbffff
 8005250:	ffff80ff 	.word	0xffff80ff
 8005254:	ffffc7ff 	.word	0xffffc7ff
 8005258:	02dc6c00 	.word	0x02dc6c00
 800525c:	2000009c 	.word	0x2000009c
 8005260:	200000a0 	.word	0x200000a0
 8005264:	fffffeff 	.word	0xfffffeff
 8005268:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800526c:	4b34      	ldr	r3, [pc, #208]	@ (8005340 <HAL_RCC_OscConfig+0x43c>)
 800526e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005270:	2202      	movs	r2, #2
 8005272:	4013      	ands	r3, r2
 8005274:	d0dc      	beq.n	8005230 <HAL_RCC_OscConfig+0x32c>
 8005276:	e013      	b.n	80052a0 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005278:	f7fd ff46 	bl	8003108 <HAL_GetTick>
 800527c:	0003      	movs	r3, r0
 800527e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8005280:	e009      	b.n	8005296 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005282:	f7fd ff41 	bl	8003108 <HAL_GetTick>
 8005286:	0002      	movs	r2, r0
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	4a2d      	ldr	r2, [pc, #180]	@ (8005344 <HAL_RCC_OscConfig+0x440>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d901      	bls.n	8005296 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e04f      	b.n	8005336 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8005296:	4b2a      	ldr	r3, [pc, #168]	@ (8005340 <HAL_RCC_OscConfig+0x43c>)
 8005298:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800529a:	2202      	movs	r2, #2
 800529c:	4013      	ands	r3, r2
 800529e:	d1f0      	bne.n	8005282 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80052a0:	230f      	movs	r3, #15
 80052a2:	18fb      	adds	r3, r7, r3
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d105      	bne.n	80052b6 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80052aa:	4b25      	ldr	r3, [pc, #148]	@ (8005340 <HAL_RCC_OscConfig+0x43c>)
 80052ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80052ae:	4b24      	ldr	r3, [pc, #144]	@ (8005340 <HAL_RCC_OscConfig+0x43c>)
 80052b0:	4925      	ldr	r1, [pc, #148]	@ (8005348 <HAL_RCC_OscConfig+0x444>)
 80052b2:	400a      	ands	r2, r1
 80052b4:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_CR_HSIUSB48ON)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2210      	movs	r2, #16
 80052bc:	4013      	ands	r3, r2
 80052be:	d039      	beq.n	8005334 <HAL_RCC_OscConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	69db      	ldr	r3, [r3, #28]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d01b      	beq.n	8005300 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80052c8:	4b1d      	ldr	r3, [pc, #116]	@ (8005340 <HAL_RCC_OscConfig+0x43c>)
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	4b1c      	ldr	r3, [pc, #112]	@ (8005340 <HAL_RCC_OscConfig+0x43c>)
 80052ce:	2180      	movs	r1, #128	@ 0x80
 80052d0:	03c9      	lsls	r1, r1, #15
 80052d2:	430a      	orrs	r2, r1
 80052d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052d6:	f7fd ff17 	bl	8003108 <HAL_GetTick>
 80052da:	0003      	movs	r3, r0
 80052dc:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 80052de:	e008      	b.n	80052f2 <HAL_RCC_OscConfig+0x3ee>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80052e0:	f7fd ff12 	bl	8003108 <HAL_GetTick>
 80052e4:	0002      	movs	r2, r0
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d901      	bls.n	80052f2 <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e021      	b.n	8005336 <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 80052f2:	4b13      	ldr	r3, [pc, #76]	@ (8005340 <HAL_RCC_OscConfig+0x43c>)
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	2380      	movs	r3, #128	@ 0x80
 80052f8:	041b      	lsls	r3, r3, #16
 80052fa:	4013      	ands	r3, r2
 80052fc:	d0f0      	beq.n	80052e0 <HAL_RCC_OscConfig+0x3dc>
 80052fe:	e019      	b.n	8005334 <HAL_RCC_OscConfig+0x430>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005300:	4b0f      	ldr	r3, [pc, #60]	@ (8005340 <HAL_RCC_OscConfig+0x43c>)
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	4b0e      	ldr	r3, [pc, #56]	@ (8005340 <HAL_RCC_OscConfig+0x43c>)
 8005306:	4911      	ldr	r1, [pc, #68]	@ (800534c <HAL_RCC_OscConfig+0x448>)
 8005308:	400a      	ands	r2, r1
 800530a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800530c:	f7fd fefc 	bl	8003108 <HAL_GetTick>
 8005310:	0003      	movs	r3, r0
 8005312:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 8005314:	e008      	b.n	8005328 <HAL_RCC_OscConfig+0x424>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005316:	f7fd fef7 	bl	8003108 <HAL_GetTick>
 800531a:	0002      	movs	r2, r0
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	2b02      	cmp	r3, #2
 8005322:	d901      	bls.n	8005328 <HAL_RCC_OscConfig+0x424>
        {
          return HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	e006      	b.n	8005336 <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 8005328:	4b05      	ldr	r3, [pc, #20]	@ (8005340 <HAL_RCC_OscConfig+0x43c>)
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	2380      	movs	r3, #128	@ 0x80
 800532e:	041b      	lsls	r3, r3, #16
 8005330:	4013      	ands	r3, r2
 8005332:	d1f0      	bne.n	8005316 <HAL_RCC_OscConfig+0x412>
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	0018      	movs	r0, r3
 8005338:	46bd      	mov	sp, r7
 800533a:	b006      	add	sp, #24
 800533c:	bd80      	pop	{r7, pc}
 800533e:	46c0      	nop			@ (mov r8, r8)
 8005340:	40021000 	.word	0x40021000
 8005344:	00001388 	.word	0x00001388
 8005348:	efffffff 	.word	0xefffffff
 800534c:	ffbfffff 	.word	0xffbfffff

08005350 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d101      	bne.n	8005364 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e0f6      	b.n	8005552 <HAL_RCC_ClockConfig+0x202>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005364:	4b7d      	ldr	r3, [pc, #500]	@ (800555c <HAL_RCC_ClockConfig+0x20c>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2207      	movs	r2, #7
 800536a:	4013      	ands	r3, r2
 800536c:	683a      	ldr	r2, [r7, #0]
 800536e:	429a      	cmp	r2, r3
 8005370:	d91e      	bls.n	80053b0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005372:	4b7a      	ldr	r3, [pc, #488]	@ (800555c <HAL_RCC_ClockConfig+0x20c>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	2207      	movs	r2, #7
 8005378:	4393      	bics	r3, r2
 800537a:	0019      	movs	r1, r3
 800537c:	4b77      	ldr	r3, [pc, #476]	@ (800555c <HAL_RCC_ClockConfig+0x20c>)
 800537e:	683a      	ldr	r2, [r7, #0]
 8005380:	430a      	orrs	r2, r1
 8005382:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005384:	f7fd fec0 	bl	8003108 <HAL_GetTick>
 8005388:	0003      	movs	r3, r0
 800538a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800538c:	e009      	b.n	80053a2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800538e:	f7fd febb 	bl	8003108 <HAL_GetTick>
 8005392:	0002      	movs	r2, r0
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	4a71      	ldr	r2, [pc, #452]	@ (8005560 <HAL_RCC_ClockConfig+0x210>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d901      	bls.n	80053a2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	e0d7      	b.n	8005552 <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80053a2:	4b6e      	ldr	r3, [pc, #440]	@ (800555c <HAL_RCC_ClockConfig+0x20c>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	2207      	movs	r2, #7
 80053a8:	4013      	ands	r3, r2
 80053aa:	683a      	ldr	r2, [r7, #0]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d1ee      	bne.n	800538e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2202      	movs	r2, #2
 80053b6:	4013      	ands	r3, r2
 80053b8:	d017      	beq.n	80053ea <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2204      	movs	r2, #4
 80053c0:	4013      	ands	r3, r2
 80053c2:	d008      	beq.n	80053d6 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80053c4:	4b67      	ldr	r3, [pc, #412]	@ (8005564 <HAL_RCC_ClockConfig+0x214>)
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	4a67      	ldr	r2, [pc, #412]	@ (8005568 <HAL_RCC_ClockConfig+0x218>)
 80053ca:	401a      	ands	r2, r3
 80053cc:	4b65      	ldr	r3, [pc, #404]	@ (8005564 <HAL_RCC_ClockConfig+0x214>)
 80053ce:	21b0      	movs	r1, #176	@ 0xb0
 80053d0:	0109      	lsls	r1, r1, #4
 80053d2:	430a      	orrs	r2, r1
 80053d4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053d6:	4b63      	ldr	r3, [pc, #396]	@ (8005564 <HAL_RCC_ClockConfig+0x214>)
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	4a64      	ldr	r2, [pc, #400]	@ (800556c <HAL_RCC_ClockConfig+0x21c>)
 80053dc:	4013      	ands	r3, r2
 80053de:	0019      	movs	r1, r3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	68da      	ldr	r2, [r3, #12]
 80053e4:	4b5f      	ldr	r3, [pc, #380]	@ (8005564 <HAL_RCC_ClockConfig+0x214>)
 80053e6:	430a      	orrs	r2, r1
 80053e8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	2201      	movs	r2, #1
 80053f0:	4013      	ands	r3, r2
 80053f2:	d100      	bne.n	80053f6 <HAL_RCC_ClockConfig+0xa6>
 80053f4:	e061      	b.n	80054ba <HAL_RCC_ClockConfig+0x16a>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 80053f6:	4b5b      	ldr	r3, [pc, #364]	@ (8005564 <HAL_RCC_ClockConfig+0x214>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	221c      	movs	r2, #28
 80053fc:	4393      	bics	r3, r2
 80053fe:	0019      	movs	r1, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	689a      	ldr	r2, [r3, #8]
 8005404:	4b57      	ldr	r3, [pc, #348]	@ (8005564 <HAL_RCC_ClockConfig+0x214>)
 8005406:	430a      	orrs	r2, r1
 8005408:	601a      	str	r2, [r3, #0]
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	2b01      	cmp	r3, #1
 8005410:	d107      	bne.n	8005422 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005412:	4b54      	ldr	r3, [pc, #336]	@ (8005564 <HAL_RCC_ClockConfig+0x214>)
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	2380      	movs	r3, #128	@ 0x80
 8005418:	029b      	lsls	r3, r3, #10
 800541a:	4013      	ands	r3, r2
 800541c:	d12b      	bne.n	8005476 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e097      	b.n	8005552 <HAL_RCC_ClockConfig+0x202>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d107      	bne.n	800543a <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800542a:	4b4e      	ldr	r3, [pc, #312]	@ (8005564 <HAL_RCC_ClockConfig+0x214>)
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	2380      	movs	r3, #128	@ 0x80
 8005430:	00db      	lsls	r3, r3, #3
 8005432:	4013      	ands	r3, r2
 8005434:	d11f      	bne.n	8005476 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e08b      	b.n	8005552 <HAL_RCC_ClockConfig+0x202>
      }
    }
#if defined(RCC_HSI48_SUPPORT)
    /* HSIUSB48 is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSIUSB48)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	2b02      	cmp	r3, #2
 8005440:	d107      	bne.n	8005452 <HAL_RCC_ClockConfig+0x102>
    {
      /* Check the HSIUSB48 ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 8005442:	4b48      	ldr	r3, [pc, #288]	@ (8005564 <HAL_RCC_ClockConfig+0x214>)
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	2380      	movs	r3, #128	@ 0x80
 8005448:	041b      	lsls	r3, r3, #16
 800544a:	4013      	ands	r3, r2
 800544c:	d113      	bne.n	8005476 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e07f      	b.n	8005552 <HAL_RCC_ClockConfig+0x202>
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	2b03      	cmp	r3, #3
 8005458:	d106      	bne.n	8005468 <HAL_RCC_ClockConfig+0x118>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800545a:	4b42      	ldr	r3, [pc, #264]	@ (8005564 <HAL_RCC_ClockConfig+0x214>)
 800545c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800545e:	2202      	movs	r2, #2
 8005460:	4013      	ands	r3, r2
 8005462:	d108      	bne.n	8005476 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e074      	b.n	8005552 <HAL_RCC_ClockConfig+0x202>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8005468:	4b3e      	ldr	r3, [pc, #248]	@ (8005564 <HAL_RCC_ClockConfig+0x214>)
 800546a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800546c:	2202      	movs	r2, #2
 800546e:	4013      	ands	r3, r2
 8005470:	d101      	bne.n	8005476 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e06d      	b.n	8005552 <HAL_RCC_ClockConfig+0x202>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005476:	4b3b      	ldr	r3, [pc, #236]	@ (8005564 <HAL_RCC_ClockConfig+0x214>)
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	2207      	movs	r2, #7
 800547c:	4393      	bics	r3, r2
 800547e:	0019      	movs	r1, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	685a      	ldr	r2, [r3, #4]
 8005484:	4b37      	ldr	r3, [pc, #220]	@ (8005564 <HAL_RCC_ClockConfig+0x214>)
 8005486:	430a      	orrs	r2, r1
 8005488:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800548a:	f7fd fe3d 	bl	8003108 <HAL_GetTick>
 800548e:	0003      	movs	r3, r0
 8005490:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005492:	e009      	b.n	80054a8 <HAL_RCC_ClockConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005494:	f7fd fe38 	bl	8003108 <HAL_GetTick>
 8005498:	0002      	movs	r2, r0
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	1ad3      	subs	r3, r2, r3
 800549e:	4a30      	ldr	r2, [pc, #192]	@ (8005560 <HAL_RCC_ClockConfig+0x210>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d901      	bls.n	80054a8 <HAL_RCC_ClockConfig+0x158>
      {
        return HAL_TIMEOUT;
 80054a4:	2303      	movs	r3, #3
 80054a6:	e054      	b.n	8005552 <HAL_RCC_ClockConfig+0x202>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054a8:	4b2e      	ldr	r3, [pc, #184]	@ (8005564 <HAL_RCC_ClockConfig+0x214>)
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	2238      	movs	r2, #56	@ 0x38
 80054ae:	401a      	ands	r2, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	00db      	lsls	r3, r3, #3
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d1ec      	bne.n	8005494 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80054ba:	4b28      	ldr	r3, [pc, #160]	@ (800555c <HAL_RCC_ClockConfig+0x20c>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	2207      	movs	r2, #7
 80054c0:	4013      	ands	r3, r2
 80054c2:	683a      	ldr	r2, [r7, #0]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d21e      	bcs.n	8005506 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054c8:	4b24      	ldr	r3, [pc, #144]	@ (800555c <HAL_RCC_ClockConfig+0x20c>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2207      	movs	r2, #7
 80054ce:	4393      	bics	r3, r2
 80054d0:	0019      	movs	r1, r3
 80054d2:	4b22      	ldr	r3, [pc, #136]	@ (800555c <HAL_RCC_ClockConfig+0x20c>)
 80054d4:	683a      	ldr	r2, [r7, #0]
 80054d6:	430a      	orrs	r2, r1
 80054d8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80054da:	f7fd fe15 	bl	8003108 <HAL_GetTick>
 80054de:	0003      	movs	r3, r0
 80054e0:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80054e2:	e009      	b.n	80054f8 <HAL_RCC_ClockConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80054e4:	f7fd fe10 	bl	8003108 <HAL_GetTick>
 80054e8:	0002      	movs	r2, r0
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	4a1c      	ldr	r2, [pc, #112]	@ (8005560 <HAL_RCC_ClockConfig+0x210>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d901      	bls.n	80054f8 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	e02c      	b.n	8005552 <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80054f8:	4b18      	ldr	r3, [pc, #96]	@ (800555c <HAL_RCC_ClockConfig+0x20c>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2207      	movs	r2, #7
 80054fe:	4013      	ands	r3, r2
 8005500:	683a      	ldr	r2, [r7, #0]
 8005502:	429a      	cmp	r2, r3
 8005504:	d1ee      	bne.n	80054e4 <HAL_RCC_ClockConfig+0x194>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2204      	movs	r2, #4
 800550c:	4013      	ands	r3, r2
 800550e:	d009      	beq.n	8005524 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005510:	4b14      	ldr	r3, [pc, #80]	@ (8005564 <HAL_RCC_ClockConfig+0x214>)
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	4a16      	ldr	r2, [pc, #88]	@ (8005570 <HAL_RCC_ClockConfig+0x220>)
 8005516:	4013      	ands	r3, r2
 8005518:	0019      	movs	r1, r3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	691a      	ldr	r2, [r3, #16]
 800551e:	4b11      	ldr	r3, [pc, #68]	@ (8005564 <HAL_RCC_ClockConfig+0x214>)
 8005520:	430a      	orrs	r2, r1
 8005522:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8005524:	f000 f82c 	bl	8005580 <HAL_RCC_GetSysClockFreq>
 8005528:	0001      	movs	r1, r0
 800552a:	4b0e      	ldr	r3, [pc, #56]	@ (8005564 <HAL_RCC_ClockConfig+0x214>)
 800552c:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800552e:	0a1b      	lsrs	r3, r3, #8
 8005530:	220f      	movs	r2, #15
 8005532:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8005534:	4b0f      	ldr	r3, [pc, #60]	@ (8005574 <HAL_RCC_ClockConfig+0x224>)
 8005536:	0092      	lsls	r2, r2, #2
 8005538:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800553a:	221f      	movs	r2, #31
 800553c:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800553e:	000a      	movs	r2, r1
 8005540:	40da      	lsrs	r2, r3
 8005542:	4b0d      	ldr	r3, [pc, #52]	@ (8005578 <HAL_RCC_ClockConfig+0x228>)
 8005544:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005546:	4b0d      	ldr	r3, [pc, #52]	@ (800557c <HAL_RCC_ClockConfig+0x22c>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	0018      	movs	r0, r3
 800554c:	f7fd fd80 	bl	8003050 <HAL_InitTick>
 8005550:	0003      	movs	r3, r0
}
 8005552:	0018      	movs	r0, r3
 8005554:	46bd      	mov	sp, r7
 8005556:	b004      	add	sp, #16
 8005558:	bd80      	pop	{r7, pc}
 800555a:	46c0      	nop			@ (mov r8, r8)
 800555c:	40022000 	.word	0x40022000
 8005560:	00001388 	.word	0x00001388
 8005564:	40021000 	.word	0x40021000
 8005568:	ffff84ff 	.word	0xffff84ff
 800556c:	fffff0ff 	.word	0xfffff0ff
 8005570:	ffff8fff 	.word	0xffff8fff
 8005574:	08008810 	.word	0x08008810
 8005578:	2000009c 	.word	0x2000009c
 800557c:	200000a0 	.word	0x200000a0

08005580 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 8005586:	4b27      	ldr	r3, [pc, #156]	@ (8005624 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	089b      	lsrs	r3, r3, #2
 800558c:	2207      	movs	r2, #7
 800558e:	4013      	ands	r3, r2
 8005590:	3301      	adds	r3, #1
 8005592:	60bb      	str	r3, [r7, #8]
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005594:	4b23      	ldr	r3, [pc, #140]	@ (8005624 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	2238      	movs	r2, #56	@ 0x38
 800559a:	4013      	ands	r3, r2
 800559c:	d10f      	bne.n	80055be <HAL_RCC_GetSysClockFreq+0x3e>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800559e:	4b21      	ldr	r3, [pc, #132]	@ (8005624 <HAL_RCC_GetSysClockFreq+0xa4>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	0adb      	lsrs	r3, r3, #11
 80055a4:	2207      	movs	r2, #7
 80055a6:	4013      	ands	r3, r2
 80055a8:	2201      	movs	r2, #1
 80055aa:	409a      	lsls	r2, r3
 80055ac:	0013      	movs	r3, r2
 80055ae:	607b      	str	r3, [r7, #4]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80055b0:	6879      	ldr	r1, [r7, #4]
 80055b2:	481d      	ldr	r0, [pc, #116]	@ (8005628 <HAL_RCC_GetSysClockFreq+0xa8>)
 80055b4:	f7fa fda8 	bl	8000108 <__udivsi3>
 80055b8:	0003      	movs	r3, r0
 80055ba:	60fb      	str	r3, [r7, #12]
 80055bc:	e027      	b.n	800560e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80055be:	4b19      	ldr	r3, [pc, #100]	@ (8005624 <HAL_RCC_GetSysClockFreq+0xa4>)
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	2238      	movs	r2, #56	@ 0x38
 80055c4:	4013      	ands	r3, r2
 80055c6:	2b08      	cmp	r3, #8
 80055c8:	d102      	bne.n	80055d0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80055ca:	4b18      	ldr	r3, [pc, #96]	@ (800562c <HAL_RCC_GetSysClockFreq+0xac>)
 80055cc:	60fb      	str	r3, [r7, #12]
 80055ce:	e01e      	b.n	800560e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80055d0:	4b14      	ldr	r3, [pc, #80]	@ (8005624 <HAL_RCC_GetSysClockFreq+0xa4>)
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	2238      	movs	r2, #56	@ 0x38
 80055d6:	4013      	ands	r3, r2
 80055d8:	2b20      	cmp	r3, #32
 80055da:	d103      	bne.n	80055e4 <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80055dc:	2380      	movs	r3, #128	@ 0x80
 80055de:	021b      	lsls	r3, r3, #8
 80055e0:	60fb      	str	r3, [r7, #12]
 80055e2:	e014      	b.n	800560e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80055e4:	4b0f      	ldr	r3, [pc, #60]	@ (8005624 <HAL_RCC_GetSysClockFreq+0xa4>)
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	2238      	movs	r2, #56	@ 0x38
 80055ea:	4013      	ands	r3, r2
 80055ec:	2b18      	cmp	r3, #24
 80055ee:	d103      	bne.n	80055f8 <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80055f0:	23fa      	movs	r3, #250	@ 0xfa
 80055f2:	01db      	lsls	r3, r3, #7
 80055f4:	60fb      	str	r3, [r7, #12]
 80055f6:	e00a      	b.n	800560e <HAL_RCC_GetSysClockFreq+0x8e>
  }
#if defined(RCC_HSI48_SUPPORT)
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI48)
 80055f8:	4b0a      	ldr	r3, [pc, #40]	@ (8005624 <HAL_RCC_GetSysClockFreq+0xa4>)
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	2238      	movs	r2, #56	@ 0x38
 80055fe:	4013      	ands	r3, r2
 8005600:	2b10      	cmp	r3, #16
 8005602:	d102      	bne.n	800560a <HAL_RCC_GetSysClockFreq+0x8a>
  {
    /* HSI48 used as system clock source */
    sysclockfreq = HSI48_VALUE;
 8005604:	4b08      	ldr	r3, [pc, #32]	@ (8005628 <HAL_RCC_GetSysClockFreq+0xa8>)
 8005606:	60fb      	str	r3, [r7, #12]
 8005608:	e001      	b.n	800560e <HAL_RCC_GetSysClockFreq+0x8e>
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 800560a:	2300      	movs	r3, #0
 800560c:	60fb      	str	r3, [r7, #12]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 800560e:	68b9      	ldr	r1, [r7, #8]
 8005610:	68f8      	ldr	r0, [r7, #12]
 8005612:	f7fa fd79 	bl	8000108 <__udivsi3>
 8005616:	0003      	movs	r3, r0
 8005618:	60fb      	str	r3, [r7, #12]
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 800561a:	68fb      	ldr	r3, [r7, #12]
}
 800561c:	0018      	movs	r0, r3
 800561e:	46bd      	mov	sp, r7
 8005620:	b004      	add	sp, #16
 8005622:	bd80      	pop	{r7, pc}
 8005624:	40021000 	.word	0x40021000
 8005628:	02dc6c00 	.word	0x02dc6c00
 800562c:	007a1200 	.word	0x007a1200

08005630 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8005634:	f7ff ffa4 	bl	8005580 <HAL_RCC_GetSysClockFreq>
 8005638:	0001      	movs	r1, r0
 800563a:	4b09      	ldr	r3, [pc, #36]	@ (8005660 <HAL_RCC_GetHCLKFreq+0x30>)
 800563c:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800563e:	0a1b      	lsrs	r3, r3, #8
 8005640:	220f      	movs	r2, #15
 8005642:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8005644:	4b07      	ldr	r3, [pc, #28]	@ (8005664 <HAL_RCC_GetHCLKFreq+0x34>)
 8005646:	0092      	lsls	r2, r2, #2
 8005648:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800564a:	221f      	movs	r2, #31
 800564c:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800564e:	000a      	movs	r2, r1
 8005650:	40da      	lsrs	r2, r3
 8005652:	4b05      	ldr	r3, [pc, #20]	@ (8005668 <HAL_RCC_GetHCLKFreq+0x38>)
 8005654:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 8005656:	4b04      	ldr	r3, [pc, #16]	@ (8005668 <HAL_RCC_GetHCLKFreq+0x38>)
 8005658:	681b      	ldr	r3, [r3, #0]
}
 800565a:	0018      	movs	r0, r3
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}
 8005660:	40021000 	.word	0x40021000
 8005664:	08008810 	.word	0x08008810
 8005668:	2000009c 	.word	0x2000009c

0800566c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8005670:	f7ff ffde 	bl	8005630 <HAL_RCC_GetHCLKFreq>
 8005674:	0001      	movs	r1, r0
 8005676:	4b07      	ldr	r3, [pc, #28]	@ (8005694 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	0b1b      	lsrs	r3, r3, #12
 800567c:	2207      	movs	r2, #7
 800567e:	401a      	ands	r2, r3
 8005680:	4b05      	ldr	r3, [pc, #20]	@ (8005698 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8005682:	0092      	lsls	r2, r2, #2
 8005684:	58d3      	ldr	r3, [r2, r3]
 8005686:	221f      	movs	r2, #31
 8005688:	4013      	ands	r3, r2
 800568a:	40d9      	lsrs	r1, r3
 800568c:	000b      	movs	r3, r1
}
 800568e:	0018      	movs	r0, r3
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}
 8005694:	40021000 	.word	0x40021000
 8005698:	08008850 	.word	0x08008850

0800569c <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b086      	sub	sp, #24
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80056a4:	2313      	movs	r3, #19
 80056a6:	18fb      	adds	r3, r7, r3
 80056a8:	2200      	movs	r2, #0
 80056aa:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80056ac:	2312      	movs	r3, #18
 80056ae:	18fb      	adds	r3, r7, r3
 80056b0:	2200      	movs	r2, #0
 80056b2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2240      	movs	r2, #64	@ 0x40
 80056ba:	4013      	ands	r3, r2
 80056bc:	d100      	bne.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x24>
 80056be:	e079      	b.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056c0:	2011      	movs	r0, #17
 80056c2:	183b      	adds	r3, r7, r0
 80056c4:	2200      	movs	r2, #0
 80056c6:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056c8:	4b6a      	ldr	r3, [pc, #424]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80056ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80056cc:	2380      	movs	r3, #128	@ 0x80
 80056ce:	055b      	lsls	r3, r3, #21
 80056d0:	4013      	ands	r3, r2
 80056d2:	d110      	bne.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056d4:	4b67      	ldr	r3, [pc, #412]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80056d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80056d8:	4b66      	ldr	r3, [pc, #408]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80056da:	2180      	movs	r1, #128	@ 0x80
 80056dc:	0549      	lsls	r1, r1, #21
 80056de:	430a      	orrs	r2, r1
 80056e0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80056e2:	4b64      	ldr	r3, [pc, #400]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80056e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80056e6:	2380      	movs	r3, #128	@ 0x80
 80056e8:	055b      	lsls	r3, r3, #21
 80056ea:	4013      	ands	r3, r2
 80056ec:	60bb      	str	r3, [r7, #8]
 80056ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056f0:	183b      	adds	r3, r7, r0
 80056f2:	2201      	movs	r2, #1
 80056f4:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 80056f6:	4b5f      	ldr	r3, [pc, #380]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80056f8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80056fa:	23c0      	movs	r3, #192	@ 0xc0
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	4013      	ands	r3, r2
 8005700:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d019      	beq.n	800573c <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	69db      	ldr	r3, [r3, #28]
 800570c:	697a      	ldr	r2, [r7, #20]
 800570e:	429a      	cmp	r2, r3
 8005710:	d014      	beq.n	800573c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8005712:	4b58      	ldr	r3, [pc, #352]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005714:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005716:	4a58      	ldr	r2, [pc, #352]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005718:	4013      	ands	r3, r2
 800571a:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800571c:	4b55      	ldr	r3, [pc, #340]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800571e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005720:	4b54      	ldr	r3, [pc, #336]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005722:	2180      	movs	r1, #128	@ 0x80
 8005724:	0249      	lsls	r1, r1, #9
 8005726:	430a      	orrs	r2, r1
 8005728:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 800572a:	4b52      	ldr	r3, [pc, #328]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800572c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800572e:	4b51      	ldr	r3, [pc, #324]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005730:	4952      	ldr	r1, [pc, #328]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005732:	400a      	ands	r2, r1
 8005734:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8005736:	4b4f      	ldr	r3, [pc, #316]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005738:	697a      	ldr	r2, [r7, #20]
 800573a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	2201      	movs	r2, #1
 8005740:	4013      	ands	r3, r2
 8005742:	d016      	beq.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005744:	f7fd fce0 	bl	8003108 <HAL_GetTick>
 8005748:	0003      	movs	r3, r0
 800574a:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800574c:	e00c      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800574e:	f7fd fcdb 	bl	8003108 <HAL_GetTick>
 8005752:	0002      	movs	r2, r0
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	4a49      	ldr	r2, [pc, #292]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d904      	bls.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 800575e:	2313      	movs	r3, #19
 8005760:	18fb      	adds	r3, r7, r3
 8005762:	2203      	movs	r2, #3
 8005764:	701a      	strb	r2, [r3, #0]
          break;
 8005766:	e004      	b.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8005768:	4b42      	ldr	r3, [pc, #264]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800576a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800576c:	2202      	movs	r2, #2
 800576e:	4013      	ands	r3, r2
 8005770:	d0ed      	beq.n	800574e <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 8005772:	2313      	movs	r3, #19
 8005774:	18fb      	adds	r3, r7, r3
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d10a      	bne.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800577c:	4b3d      	ldr	r3, [pc, #244]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800577e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005780:	4a3d      	ldr	r2, [pc, #244]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005782:	4013      	ands	r3, r2
 8005784:	0019      	movs	r1, r3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	69da      	ldr	r2, [r3, #28]
 800578a:	4b3a      	ldr	r3, [pc, #232]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800578c:	430a      	orrs	r2, r1
 800578e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005790:	e005      	b.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005792:	2312      	movs	r3, #18
 8005794:	18fb      	adds	r3, r7, r3
 8005796:	2213      	movs	r2, #19
 8005798:	18ba      	adds	r2, r7, r2
 800579a:	7812      	ldrb	r2, [r2, #0]
 800579c:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800579e:	2311      	movs	r3, #17
 80057a0:	18fb      	adds	r3, r7, r3
 80057a2:	781b      	ldrb	r3, [r3, #0]
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d105      	bne.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057a8:	4b32      	ldr	r3, [pc, #200]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80057aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80057ac:	4b31      	ldr	r3, [pc, #196]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80057ae:	4935      	ldr	r1, [pc, #212]	@ (8005884 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80057b0:	400a      	ands	r2, r1
 80057b2:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	2201      	movs	r2, #1
 80057ba:	4013      	ands	r3, r2
 80057bc:	d009      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80057be:	4b2d      	ldr	r3, [pc, #180]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80057c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057c2:	2203      	movs	r2, #3
 80057c4:	4393      	bics	r3, r2
 80057c6:	0019      	movs	r1, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	689a      	ldr	r2, [r3, #8]
 80057cc:	4b29      	ldr	r3, [pc, #164]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80057ce:	430a      	orrs	r2, r1
 80057d0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	2202      	movs	r2, #2
 80057d8:	4013      	ands	r3, r2
 80057da:	d009      	beq.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80057dc:	4b25      	ldr	r3, [pc, #148]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80057de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057e0:	4a29      	ldr	r2, [pc, #164]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80057e2:	4013      	ands	r3, r2
 80057e4:	0019      	movs	r1, r3
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	68da      	ldr	r2, [r3, #12]
 80057ea:	4b22      	ldr	r3, [pc, #136]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80057ec:	430a      	orrs	r2, r1
 80057ee:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	2220      	movs	r2, #32
 80057f6:	4013      	ands	r3, r2
 80057f8:	d008      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80057fa:	4b1e      	ldr	r3, [pc, #120]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80057fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	0899      	lsrs	r1, r3, #2
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	699a      	ldr	r2, [r3, #24]
 8005806:	4b1b      	ldr	r3, [pc, #108]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005808:	430a      	orrs	r2, r1
 800580a:	655a      	str	r2, [r3, #84]	@ 0x54

  }
#if defined (USB_DRD_FS)
  /*-------------------------- USB clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2208      	movs	r2, #8
 8005812:	4013      	ands	r3, r2
 8005814:	d009      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005816:	4b17      	ldr	r3, [pc, #92]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800581a:	4a1c      	ldr	r2, [pc, #112]	@ (800588c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800581c:	4013      	ands	r3, r2
 800581e:	0019      	movs	r1, r3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	695a      	ldr	r2, [r3, #20]
 8005824:	4b13      	ldr	r3, [pc, #76]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005826:	430a      	orrs	r2, r1
 8005828:	659a      	str	r2, [r3, #88]	@ 0x58

  }
#endif /* USB_DRD_FS */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2204      	movs	r2, #4
 8005830:	4013      	ands	r3, r2
 8005832:	d009      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005834:	4b0f      	ldr	r3, [pc, #60]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005836:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005838:	4a15      	ldr	r2, [pc, #84]	@ (8005890 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 800583a:	4013      	ands	r3, r2
 800583c:	0019      	movs	r1, r3
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	691a      	ldr	r2, [r3, #16]
 8005842:	4b0c      	ldr	r3, [pc, #48]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005844:	430a      	orrs	r2, r1
 8005846:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2280      	movs	r2, #128	@ 0x80
 800584e:	4013      	ands	r3, r2
 8005850:	d009      	beq.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8005852:	4b08      	ldr	r3, [pc, #32]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	22e0      	movs	r2, #224	@ 0xe0
 8005858:	4393      	bics	r3, r2
 800585a:	0019      	movs	r1, r3
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	685a      	ldr	r2, [r3, #4]
 8005860:	4b04      	ldr	r3, [pc, #16]	@ (8005874 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005862:	430a      	orrs	r2, r1
 8005864:	601a      	str	r2, [r3, #0]
  }
  return status;
 8005866:	2312      	movs	r3, #18
 8005868:	18fb      	adds	r3, r7, r3
 800586a:	781b      	ldrb	r3, [r3, #0]
}
 800586c:	0018      	movs	r0, r3
 800586e:	46bd      	mov	sp, r7
 8005870:	b006      	add	sp, #24
 8005872:	bd80      	pop	{r7, pc}
 8005874:	40021000 	.word	0x40021000
 8005878:	fffffcff 	.word	0xfffffcff
 800587c:	fffeffff 	.word	0xfffeffff
 8005880:	00001388 	.word	0x00001388
 8005884:	efffffff 	.word	0xefffffff
 8005888:	ffffcfff 	.word	0xffffcfff
 800588c:	ffffefff 	.word	0xffffefff
 8005890:	ffff3fff 	.word	0xffff3fff

08005894 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d101      	bne.n	80058a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e0a8      	b.n	80059f8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d109      	bne.n	80058c2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	685a      	ldr	r2, [r3, #4]
 80058b2:	2382      	movs	r3, #130	@ 0x82
 80058b4:	005b      	lsls	r3, r3, #1
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d009      	beq.n	80058ce <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	61da      	str	r2, [r3, #28]
 80058c0:	e005      	b.n	80058ce <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	225d      	movs	r2, #93	@ 0x5d
 80058d8:	5c9b      	ldrb	r3, [r3, r2]
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d107      	bne.n	80058f0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	225c      	movs	r2, #92	@ 0x5c
 80058e4:	2100      	movs	r1, #0
 80058e6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	0018      	movs	r0, r3
 80058ec:	f7fc fffa 	bl	80028e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	225d      	movs	r2, #93	@ 0x5d
 80058f4:	2102      	movs	r1, #2
 80058f6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2140      	movs	r1, #64	@ 0x40
 8005904:	438a      	bics	r2, r1
 8005906:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	68da      	ldr	r2, [r3, #12]
 800590c:	23e0      	movs	r3, #224	@ 0xe0
 800590e:	00db      	lsls	r3, r3, #3
 8005910:	429a      	cmp	r2, r3
 8005912:	d902      	bls.n	800591a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005914:	2300      	movs	r3, #0
 8005916:	60fb      	str	r3, [r7, #12]
 8005918:	e002      	b.n	8005920 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800591a:	2380      	movs	r3, #128	@ 0x80
 800591c:	015b      	lsls	r3, r3, #5
 800591e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	68da      	ldr	r2, [r3, #12]
 8005924:	23f0      	movs	r3, #240	@ 0xf0
 8005926:	011b      	lsls	r3, r3, #4
 8005928:	429a      	cmp	r2, r3
 800592a:	d008      	beq.n	800593e <HAL_SPI_Init+0xaa>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	68da      	ldr	r2, [r3, #12]
 8005930:	23e0      	movs	r3, #224	@ 0xe0
 8005932:	00db      	lsls	r3, r3, #3
 8005934:	429a      	cmp	r2, r3
 8005936:	d002      	beq.n	800593e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	685a      	ldr	r2, [r3, #4]
 8005942:	2382      	movs	r3, #130	@ 0x82
 8005944:	005b      	lsls	r3, r3, #1
 8005946:	401a      	ands	r2, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6899      	ldr	r1, [r3, #8]
 800594c:	2384      	movs	r3, #132	@ 0x84
 800594e:	021b      	lsls	r3, r3, #8
 8005950:	400b      	ands	r3, r1
 8005952:	431a      	orrs	r2, r3
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	691b      	ldr	r3, [r3, #16]
 8005958:	2102      	movs	r1, #2
 800595a:	400b      	ands	r3, r1
 800595c:	431a      	orrs	r2, r3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	695b      	ldr	r3, [r3, #20]
 8005962:	2101      	movs	r1, #1
 8005964:	400b      	ands	r3, r1
 8005966:	431a      	orrs	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6999      	ldr	r1, [r3, #24]
 800596c:	2380      	movs	r3, #128	@ 0x80
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	400b      	ands	r3, r1
 8005972:	431a      	orrs	r2, r3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	69db      	ldr	r3, [r3, #28]
 8005978:	2138      	movs	r1, #56	@ 0x38
 800597a:	400b      	ands	r3, r1
 800597c:	431a      	orrs	r2, r3
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a1b      	ldr	r3, [r3, #32]
 8005982:	2180      	movs	r1, #128	@ 0x80
 8005984:	400b      	ands	r3, r1
 8005986:	431a      	orrs	r2, r3
 8005988:	0011      	movs	r1, r2
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800598e:	2380      	movs	r3, #128	@ 0x80
 8005990:	019b      	lsls	r3, r3, #6
 8005992:	401a      	ands	r2, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	430a      	orrs	r2, r1
 800599a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	699b      	ldr	r3, [r3, #24]
 80059a0:	0c1b      	lsrs	r3, r3, #16
 80059a2:	2204      	movs	r2, #4
 80059a4:	401a      	ands	r2, r3
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059aa:	2110      	movs	r1, #16
 80059ac:	400b      	ands	r3, r1
 80059ae:	431a      	orrs	r2, r3
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059b4:	2108      	movs	r1, #8
 80059b6:	400b      	ands	r3, r1
 80059b8:	431a      	orrs	r2, r3
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	68d9      	ldr	r1, [r3, #12]
 80059be:	23f0      	movs	r3, #240	@ 0xf0
 80059c0:	011b      	lsls	r3, r3, #4
 80059c2:	400b      	ands	r3, r1
 80059c4:	431a      	orrs	r2, r3
 80059c6:	0011      	movs	r1, r2
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	2380      	movs	r3, #128	@ 0x80
 80059cc:	015b      	lsls	r3, r3, #5
 80059ce:	401a      	ands	r2, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	430a      	orrs	r2, r1
 80059d6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	69da      	ldr	r2, [r3, #28]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4907      	ldr	r1, [pc, #28]	@ (8005a00 <HAL_SPI_Init+0x16c>)
 80059e4:	400a      	ands	r2, r1
 80059e6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	225d      	movs	r2, #93	@ 0x5d
 80059f2:	2101      	movs	r1, #1
 80059f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80059f6:	2300      	movs	r3, #0
}
 80059f8:	0018      	movs	r0, r3
 80059fa:	46bd      	mov	sp, r7
 80059fc:	b004      	add	sp, #16
 80059fe:	bd80      	pop	{r7, pc}
 8005a00:	fffff7ff 	.word	0xfffff7ff

08005a04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d101      	bne.n	8005a16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e04a      	b.n	8005aac <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	223d      	movs	r2, #61	@ 0x3d
 8005a1a:	5c9b      	ldrb	r3, [r3, r2]
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d107      	bne.n	8005a32 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	223c      	movs	r2, #60	@ 0x3c
 8005a26:	2100      	movs	r1, #0
 8005a28:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	0018      	movs	r0, r3
 8005a2e:	f7fc ffff 	bl	8002a30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	223d      	movs	r2, #61	@ 0x3d
 8005a36:	2102      	movs	r1, #2
 8005a38:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	3304      	adds	r3, #4
 8005a42:	0019      	movs	r1, r3
 8005a44:	0010      	movs	r0, r2
 8005a46:	f000 f98d 	bl	8005d64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2248      	movs	r2, #72	@ 0x48
 8005a4e:	2101      	movs	r1, #1
 8005a50:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	223e      	movs	r2, #62	@ 0x3e
 8005a56:	2101      	movs	r1, #1
 8005a58:	5499      	strb	r1, [r3, r2]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	223f      	movs	r2, #63	@ 0x3f
 8005a5e:	2101      	movs	r1, #1
 8005a60:	5499      	strb	r1, [r3, r2]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2240      	movs	r2, #64	@ 0x40
 8005a66:	2101      	movs	r1, #1
 8005a68:	5499      	strb	r1, [r3, r2]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2241      	movs	r2, #65	@ 0x41
 8005a6e:	2101      	movs	r1, #1
 8005a70:	5499      	strb	r1, [r3, r2]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2242      	movs	r2, #66	@ 0x42
 8005a76:	2101      	movs	r1, #1
 8005a78:	5499      	strb	r1, [r3, r2]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2243      	movs	r2, #67	@ 0x43
 8005a7e:	2101      	movs	r1, #1
 8005a80:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2244      	movs	r2, #68	@ 0x44
 8005a86:	2101      	movs	r1, #1
 8005a88:	5499      	strb	r1, [r3, r2]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2245      	movs	r2, #69	@ 0x45
 8005a8e:	2101      	movs	r1, #1
 8005a90:	5499      	strb	r1, [r3, r2]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2246      	movs	r2, #70	@ 0x46
 8005a96:	2101      	movs	r1, #1
 8005a98:	5499      	strb	r1, [r3, r2]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2247      	movs	r2, #71	@ 0x47
 8005a9e:	2101      	movs	r1, #1
 8005aa0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	223d      	movs	r2, #61	@ 0x3d
 8005aa6:	2101      	movs	r1, #1
 8005aa8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005aaa:	2300      	movs	r3, #0
}
 8005aac:	0018      	movs	r0, r3
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	b002      	add	sp, #8
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b082      	sub	sp, #8
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d101      	bne.n	8005ac6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e04a      	b.n	8005b5c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	223d      	movs	r2, #61	@ 0x3d
 8005aca:	5c9b      	ldrb	r3, [r3, r2]
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d107      	bne.n	8005ae2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	223c      	movs	r2, #60	@ 0x3c
 8005ad6:	2100      	movs	r1, #0
 8005ad8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	0018      	movs	r0, r3
 8005ade:	f7fc ff87 	bl	80029f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	223d      	movs	r2, #61	@ 0x3d
 8005ae6:	2102      	movs	r1, #2
 8005ae8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	3304      	adds	r3, #4
 8005af2:	0019      	movs	r1, r3
 8005af4:	0010      	movs	r0, r2
 8005af6:	f000 f935 	bl	8005d64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2248      	movs	r2, #72	@ 0x48
 8005afe:	2101      	movs	r1, #1
 8005b00:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	223e      	movs	r2, #62	@ 0x3e
 8005b06:	2101      	movs	r1, #1
 8005b08:	5499      	strb	r1, [r3, r2]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	223f      	movs	r2, #63	@ 0x3f
 8005b0e:	2101      	movs	r1, #1
 8005b10:	5499      	strb	r1, [r3, r2]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2240      	movs	r2, #64	@ 0x40
 8005b16:	2101      	movs	r1, #1
 8005b18:	5499      	strb	r1, [r3, r2]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2241      	movs	r2, #65	@ 0x41
 8005b1e:	2101      	movs	r1, #1
 8005b20:	5499      	strb	r1, [r3, r2]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2242      	movs	r2, #66	@ 0x42
 8005b26:	2101      	movs	r1, #1
 8005b28:	5499      	strb	r1, [r3, r2]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2243      	movs	r2, #67	@ 0x43
 8005b2e:	2101      	movs	r1, #1
 8005b30:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2244      	movs	r2, #68	@ 0x44
 8005b36:	2101      	movs	r1, #1
 8005b38:	5499      	strb	r1, [r3, r2]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2245      	movs	r2, #69	@ 0x45
 8005b3e:	2101      	movs	r1, #1
 8005b40:	5499      	strb	r1, [r3, r2]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2246      	movs	r2, #70	@ 0x46
 8005b46:	2101      	movs	r1, #1
 8005b48:	5499      	strb	r1, [r3, r2]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2247      	movs	r2, #71	@ 0x47
 8005b4e:	2101      	movs	r1, #1
 8005b50:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	223d      	movs	r2, #61	@ 0x3d
 8005b56:	2101      	movs	r1, #1
 8005b58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b5a:	2300      	movs	r3, #0
}
 8005b5c:	0018      	movs	r0, r3
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	b002      	add	sp, #8
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b086      	sub	sp, #24
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	60b9      	str	r1, [r7, #8]
 8005b6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b70:	2317      	movs	r3, #23
 8005b72:	18fb      	adds	r3, r7, r3
 8005b74:	2200      	movs	r2, #0
 8005b76:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	223c      	movs	r2, #60	@ 0x3c
 8005b7c:	5c9b      	ldrb	r3, [r3, r2]
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d101      	bne.n	8005b86 <HAL_TIM_PWM_ConfigChannel+0x22>
 8005b82:	2302      	movs	r3, #2
 8005b84:	e0e5      	b.n	8005d52 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	223c      	movs	r2, #60	@ 0x3c
 8005b8a:	2101      	movs	r1, #1
 8005b8c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2b14      	cmp	r3, #20
 8005b92:	d900      	bls.n	8005b96 <HAL_TIM_PWM_ConfigChannel+0x32>
 8005b94:	e0d1      	b.n	8005d3a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	009a      	lsls	r2, r3, #2
 8005b9a:	4b70      	ldr	r3, [pc, #448]	@ (8005d5c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8005b9c:	18d3      	adds	r3, r2, r3
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	68ba      	ldr	r2, [r7, #8]
 8005ba8:	0011      	movs	r1, r2
 8005baa:	0018      	movs	r0, r3
 8005bac:	f000 f95e 	bl	8005e6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	699a      	ldr	r2, [r3, #24]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2108      	movs	r1, #8
 8005bbc:	430a      	orrs	r2, r1
 8005bbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	699a      	ldr	r2, [r3, #24]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	2104      	movs	r1, #4
 8005bcc:	438a      	bics	r2, r1
 8005bce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	6999      	ldr	r1, [r3, #24]
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	691a      	ldr	r2, [r3, #16]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	430a      	orrs	r2, r1
 8005be0:	619a      	str	r2, [r3, #24]
      break;
 8005be2:	e0af      	b.n	8005d44 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	68ba      	ldr	r2, [r7, #8]
 8005bea:	0011      	movs	r1, r2
 8005bec:	0018      	movs	r0, r3
 8005bee:	f000 f9bd 	bl	8005f6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	699a      	ldr	r2, [r3, #24]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2180      	movs	r1, #128	@ 0x80
 8005bfe:	0109      	lsls	r1, r1, #4
 8005c00:	430a      	orrs	r2, r1
 8005c02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	699a      	ldr	r2, [r3, #24]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4954      	ldr	r1, [pc, #336]	@ (8005d60 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005c10:	400a      	ands	r2, r1
 8005c12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	6999      	ldr	r1, [r3, #24]
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	021a      	lsls	r2, r3, #8
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	430a      	orrs	r2, r1
 8005c26:	619a      	str	r2, [r3, #24]
      break;
 8005c28:	e08c      	b.n	8005d44 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68ba      	ldr	r2, [r7, #8]
 8005c30:	0011      	movs	r1, r2
 8005c32:	0018      	movs	r0, r3
 8005c34:	f000 fa18 	bl	8006068 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	69da      	ldr	r2, [r3, #28]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	2108      	movs	r1, #8
 8005c44:	430a      	orrs	r2, r1
 8005c46:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	69da      	ldr	r2, [r3, #28]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	2104      	movs	r1, #4
 8005c54:	438a      	bics	r2, r1
 8005c56:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	69d9      	ldr	r1, [r3, #28]
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	691a      	ldr	r2, [r3, #16]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	430a      	orrs	r2, r1
 8005c68:	61da      	str	r2, [r3, #28]
      break;
 8005c6a:	e06b      	b.n	8005d44 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	68ba      	ldr	r2, [r7, #8]
 8005c72:	0011      	movs	r1, r2
 8005c74:	0018      	movs	r0, r3
 8005c76:	f000 fa79 	bl	800616c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	69da      	ldr	r2, [r3, #28]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	2180      	movs	r1, #128	@ 0x80
 8005c86:	0109      	lsls	r1, r1, #4
 8005c88:	430a      	orrs	r2, r1
 8005c8a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	69da      	ldr	r2, [r3, #28]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4932      	ldr	r1, [pc, #200]	@ (8005d60 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005c98:	400a      	ands	r2, r1
 8005c9a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	69d9      	ldr	r1, [r3, #28]
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	691b      	ldr	r3, [r3, #16]
 8005ca6:	021a      	lsls	r2, r3, #8
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	430a      	orrs	r2, r1
 8005cae:	61da      	str	r2, [r3, #28]
      break;
 8005cb0:	e048      	b.n	8005d44 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	68ba      	ldr	r2, [r7, #8]
 8005cb8:	0011      	movs	r1, r2
 8005cba:	0018      	movs	r0, r3
 8005cbc:	f000 faba 	bl	8006234 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2108      	movs	r1, #8
 8005ccc:	430a      	orrs	r2, r1
 8005cce:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2104      	movs	r1, #4
 8005cdc:	438a      	bics	r2, r1
 8005cde:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	691a      	ldr	r2, [r3, #16]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	430a      	orrs	r2, r1
 8005cf0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005cf2:	e027      	b.n	8005d44 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	68ba      	ldr	r2, [r7, #8]
 8005cfa:	0011      	movs	r1, r2
 8005cfc:	0018      	movs	r0, r3
 8005cfe:	f000 faf3 	bl	80062e8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2180      	movs	r1, #128	@ 0x80
 8005d0e:	0109      	lsls	r1, r1, #4
 8005d10:	430a      	orrs	r2, r1
 8005d12:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4910      	ldr	r1, [pc, #64]	@ (8005d60 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005d20:	400a      	ands	r2, r1
 8005d22:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	021a      	lsls	r2, r3, #8
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	430a      	orrs	r2, r1
 8005d36:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005d38:	e004      	b.n	8005d44 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8005d3a:	2317      	movs	r3, #23
 8005d3c:	18fb      	adds	r3, r7, r3
 8005d3e:	2201      	movs	r2, #1
 8005d40:	701a      	strb	r2, [r3, #0]
      break;
 8005d42:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	223c      	movs	r2, #60	@ 0x3c
 8005d48:	2100      	movs	r1, #0
 8005d4a:	5499      	strb	r1, [r3, r2]

  return status;
 8005d4c:	2317      	movs	r3, #23
 8005d4e:	18fb      	adds	r3, r7, r3
 8005d50:	781b      	ldrb	r3, [r3, #0]
}
 8005d52:	0018      	movs	r0, r3
 8005d54:	46bd      	mov	sp, r7
 8005d56:	b006      	add	sp, #24
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	46c0      	nop			@ (mov r8, r8)
 8005d5c:	08008870 	.word	0x08008870
 8005d60:	fffffbff 	.word	0xfffffbff

08005d64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b084      	sub	sp, #16
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4a37      	ldr	r2, [pc, #220]	@ (8005e54 <TIM_Base_SetConfig+0xf0>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d008      	beq.n	8005d8e <TIM_Base_SetConfig+0x2a>
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	2380      	movs	r3, #128	@ 0x80
 8005d80:	05db      	lsls	r3, r3, #23
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d003      	beq.n	8005d8e <TIM_Base_SetConfig+0x2a>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4a33      	ldr	r2, [pc, #204]	@ (8005e58 <TIM_Base_SetConfig+0xf4>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d108      	bne.n	8005da0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2270      	movs	r2, #112	@ 0x70
 8005d92:	4393      	bics	r3, r2
 8005d94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	68fa      	ldr	r2, [r7, #12]
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4a2c      	ldr	r2, [pc, #176]	@ (8005e54 <TIM_Base_SetConfig+0xf0>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d014      	beq.n	8005dd2 <TIM_Base_SetConfig+0x6e>
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	2380      	movs	r3, #128	@ 0x80
 8005dac:	05db      	lsls	r3, r3, #23
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d00f      	beq.n	8005dd2 <TIM_Base_SetConfig+0x6e>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a28      	ldr	r2, [pc, #160]	@ (8005e58 <TIM_Base_SetConfig+0xf4>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d00b      	beq.n	8005dd2 <TIM_Base_SetConfig+0x6e>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a27      	ldr	r2, [pc, #156]	@ (8005e5c <TIM_Base_SetConfig+0xf8>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d007      	beq.n	8005dd2 <TIM_Base_SetConfig+0x6e>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4a26      	ldr	r2, [pc, #152]	@ (8005e60 <TIM_Base_SetConfig+0xfc>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d003      	beq.n	8005dd2 <TIM_Base_SetConfig+0x6e>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4a25      	ldr	r2, [pc, #148]	@ (8005e64 <TIM_Base_SetConfig+0x100>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d108      	bne.n	8005de4 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	4a24      	ldr	r2, [pc, #144]	@ (8005e68 <TIM_Base_SetConfig+0x104>)
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2280      	movs	r2, #128	@ 0x80
 8005de8:	4393      	bics	r3, r2
 8005dea:	001a      	movs	r2, r3
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	695b      	ldr	r3, [r3, #20]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	68fa      	ldr	r2, [r7, #12]
 8005df8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	689a      	ldr	r2, [r3, #8]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a11      	ldr	r2, [pc, #68]	@ (8005e54 <TIM_Base_SetConfig+0xf0>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d007      	beq.n	8005e22 <TIM_Base_SetConfig+0xbe>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a12      	ldr	r2, [pc, #72]	@ (8005e60 <TIM_Base_SetConfig+0xfc>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d003      	beq.n	8005e22 <TIM_Base_SetConfig+0xbe>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a11      	ldr	r2, [pc, #68]	@ (8005e64 <TIM_Base_SetConfig+0x100>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d103      	bne.n	8005e2a <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	691a      	ldr	r2, [r3, #16]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	691b      	ldr	r3, [r3, #16]
 8005e34:	2201      	movs	r2, #1
 8005e36:	4013      	ands	r3, r2
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d106      	bne.n	8005e4a <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	691b      	ldr	r3, [r3, #16]
 8005e40:	2201      	movs	r2, #1
 8005e42:	4393      	bics	r3, r2
 8005e44:	001a      	movs	r2, r3
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	611a      	str	r2, [r3, #16]
  }
}
 8005e4a:	46c0      	nop			@ (mov r8, r8)
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	b004      	add	sp, #16
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	46c0      	nop			@ (mov r8, r8)
 8005e54:	40012c00 	.word	0x40012c00
 8005e58:	40000400 	.word	0x40000400
 8005e5c:	40002000 	.word	0x40002000
 8005e60:	40014400 	.word	0x40014400
 8005e64:	40014800 	.word	0x40014800
 8005e68:	fffffcff 	.word	0xfffffcff

08005e6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b086      	sub	sp, #24
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a1b      	ldr	r3, [r3, #32]
 8005e7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6a1b      	ldr	r3, [r3, #32]
 8005e80:	2201      	movs	r2, #1
 8005e82:	4393      	bics	r3, r2
 8005e84:	001a      	movs	r2, r3
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	699b      	ldr	r3, [r3, #24]
 8005e94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	4a2e      	ldr	r2, [pc, #184]	@ (8005f54 <TIM_OC1_SetConfig+0xe8>)
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2203      	movs	r2, #3
 8005ea2:	4393      	bics	r3, r2
 8005ea4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	2202      	movs	r2, #2
 8005eb4:	4393      	bics	r3, r2
 8005eb6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	697a      	ldr	r2, [r7, #20]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4a24      	ldr	r2, [pc, #144]	@ (8005f58 <TIM_OC1_SetConfig+0xec>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d007      	beq.n	8005eda <TIM_OC1_SetConfig+0x6e>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a23      	ldr	r2, [pc, #140]	@ (8005f5c <TIM_OC1_SetConfig+0xf0>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d003      	beq.n	8005eda <TIM_OC1_SetConfig+0x6e>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a22      	ldr	r2, [pc, #136]	@ (8005f60 <TIM_OC1_SetConfig+0xf4>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d10c      	bne.n	8005ef4 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	2208      	movs	r2, #8
 8005ede:	4393      	bics	r3, r2
 8005ee0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	697a      	ldr	r2, [r7, #20]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	2204      	movs	r2, #4
 8005ef0:	4393      	bics	r3, r2
 8005ef2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	4a18      	ldr	r2, [pc, #96]	@ (8005f58 <TIM_OC1_SetConfig+0xec>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d007      	beq.n	8005f0c <TIM_OC1_SetConfig+0xa0>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	4a17      	ldr	r2, [pc, #92]	@ (8005f5c <TIM_OC1_SetConfig+0xf0>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d003      	beq.n	8005f0c <TIM_OC1_SetConfig+0xa0>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	4a16      	ldr	r2, [pc, #88]	@ (8005f60 <TIM_OC1_SetConfig+0xf4>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d111      	bne.n	8005f30 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	4a15      	ldr	r2, [pc, #84]	@ (8005f64 <TIM_OC1_SetConfig+0xf8>)
 8005f10:	4013      	ands	r3, r2
 8005f12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	4a14      	ldr	r2, [pc, #80]	@ (8005f68 <TIM_OC1_SetConfig+0xfc>)
 8005f18:	4013      	ands	r3, r2
 8005f1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	695b      	ldr	r3, [r3, #20]
 8005f20:	693a      	ldr	r2, [r7, #16]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	699b      	ldr	r3, [r3, #24]
 8005f2a:	693a      	ldr	r2, [r7, #16]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	693a      	ldr	r2, [r7, #16]
 8005f34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	685a      	ldr	r2, [r3, #4]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	697a      	ldr	r2, [r7, #20]
 8005f48:	621a      	str	r2, [r3, #32]
}
 8005f4a:	46c0      	nop			@ (mov r8, r8)
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	b006      	add	sp, #24
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	46c0      	nop			@ (mov r8, r8)
 8005f54:	fffeff8f 	.word	0xfffeff8f
 8005f58:	40012c00 	.word	0x40012c00
 8005f5c:	40014400 	.word	0x40014400
 8005f60:	40014800 	.word	0x40014800
 8005f64:	fffffeff 	.word	0xfffffeff
 8005f68:	fffffdff 	.word	0xfffffdff

08005f6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b086      	sub	sp, #24
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a1b      	ldr	r3, [r3, #32]
 8005f7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6a1b      	ldr	r3, [r3, #32]
 8005f80:	2210      	movs	r2, #16
 8005f82:	4393      	bics	r3, r2
 8005f84:	001a      	movs	r2, r3
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	699b      	ldr	r3, [r3, #24]
 8005f94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	4a2c      	ldr	r2, [pc, #176]	@ (800604c <TIM_OC2_SetConfig+0xe0>)
 8005f9a:	4013      	ands	r3, r2
 8005f9c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	4a2b      	ldr	r2, [pc, #172]	@ (8006050 <TIM_OC2_SetConfig+0xe4>)
 8005fa2:	4013      	ands	r3, r2
 8005fa4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	021b      	lsls	r3, r3, #8
 8005fac:	68fa      	ldr	r2, [r7, #12]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	2220      	movs	r2, #32
 8005fb6:	4393      	bics	r3, r2
 8005fb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	011b      	lsls	r3, r3, #4
 8005fc0:	697a      	ldr	r2, [r7, #20]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a22      	ldr	r2, [pc, #136]	@ (8006054 <TIM_OC2_SetConfig+0xe8>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d10d      	bne.n	8005fea <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	2280      	movs	r2, #128	@ 0x80
 8005fd2:	4393      	bics	r3, r2
 8005fd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	011b      	lsls	r3, r3, #4
 8005fdc:	697a      	ldr	r2, [r7, #20]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	2240      	movs	r2, #64	@ 0x40
 8005fe6:	4393      	bics	r3, r2
 8005fe8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a19      	ldr	r2, [pc, #100]	@ (8006054 <TIM_OC2_SetConfig+0xe8>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d007      	beq.n	8006002 <TIM_OC2_SetConfig+0x96>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a18      	ldr	r2, [pc, #96]	@ (8006058 <TIM_OC2_SetConfig+0xec>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d003      	beq.n	8006002 <TIM_OC2_SetConfig+0x96>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4a17      	ldr	r2, [pc, #92]	@ (800605c <TIM_OC2_SetConfig+0xf0>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d113      	bne.n	800602a <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	4a16      	ldr	r2, [pc, #88]	@ (8006060 <TIM_OC2_SetConfig+0xf4>)
 8006006:	4013      	ands	r3, r2
 8006008:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	4a15      	ldr	r2, [pc, #84]	@ (8006064 <TIM_OC2_SetConfig+0xf8>)
 800600e:	4013      	ands	r3, r2
 8006010:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	695b      	ldr	r3, [r3, #20]
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	693a      	ldr	r2, [r7, #16]
 800601a:	4313      	orrs	r3, r2
 800601c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	699b      	ldr	r3, [r3, #24]
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	693a      	ldr	r2, [r7, #16]
 8006026:	4313      	orrs	r3, r2
 8006028:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	693a      	ldr	r2, [r7, #16]
 800602e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	68fa      	ldr	r2, [r7, #12]
 8006034:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	685a      	ldr	r2, [r3, #4]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	697a      	ldr	r2, [r7, #20]
 8006042:	621a      	str	r2, [r3, #32]
}
 8006044:	46c0      	nop			@ (mov r8, r8)
 8006046:	46bd      	mov	sp, r7
 8006048:	b006      	add	sp, #24
 800604a:	bd80      	pop	{r7, pc}
 800604c:	feff8fff 	.word	0xfeff8fff
 8006050:	fffffcff 	.word	0xfffffcff
 8006054:	40012c00 	.word	0x40012c00
 8006058:	40014400 	.word	0x40014400
 800605c:	40014800 	.word	0x40014800
 8006060:	fffffbff 	.word	0xfffffbff
 8006064:	fffff7ff 	.word	0xfffff7ff

08006068 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b086      	sub	sp, #24
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6a1b      	ldr	r3, [r3, #32]
 8006076:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6a1b      	ldr	r3, [r3, #32]
 800607c:	4a31      	ldr	r2, [pc, #196]	@ (8006144 <TIM_OC3_SetConfig+0xdc>)
 800607e:	401a      	ands	r2, r3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	69db      	ldr	r3, [r3, #28]
 800608e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	4a2d      	ldr	r2, [pc, #180]	@ (8006148 <TIM_OC3_SetConfig+0xe0>)
 8006094:	4013      	ands	r3, r2
 8006096:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2203      	movs	r2, #3
 800609c:	4393      	bics	r3, r2
 800609e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	4a27      	ldr	r2, [pc, #156]	@ (800614c <TIM_OC3_SetConfig+0xe4>)
 80060ae:	4013      	ands	r3, r2
 80060b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	021b      	lsls	r3, r3, #8
 80060b8:	697a      	ldr	r2, [r7, #20]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a23      	ldr	r2, [pc, #140]	@ (8006150 <TIM_OC3_SetConfig+0xe8>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d10d      	bne.n	80060e2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	4a22      	ldr	r2, [pc, #136]	@ (8006154 <TIM_OC3_SetConfig+0xec>)
 80060ca:	4013      	ands	r3, r2
 80060cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	021b      	lsls	r3, r3, #8
 80060d4:	697a      	ldr	r2, [r7, #20]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	4a1e      	ldr	r2, [pc, #120]	@ (8006158 <TIM_OC3_SetConfig+0xf0>)
 80060de:	4013      	ands	r3, r2
 80060e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a1a      	ldr	r2, [pc, #104]	@ (8006150 <TIM_OC3_SetConfig+0xe8>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d007      	beq.n	80060fa <TIM_OC3_SetConfig+0x92>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a1b      	ldr	r2, [pc, #108]	@ (800615c <TIM_OC3_SetConfig+0xf4>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d003      	beq.n	80060fa <TIM_OC3_SetConfig+0x92>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a1a      	ldr	r2, [pc, #104]	@ (8006160 <TIM_OC3_SetConfig+0xf8>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d113      	bne.n	8006122 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	4a19      	ldr	r2, [pc, #100]	@ (8006164 <TIM_OC3_SetConfig+0xfc>)
 80060fe:	4013      	ands	r3, r2
 8006100:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	4a18      	ldr	r2, [pc, #96]	@ (8006168 <TIM_OC3_SetConfig+0x100>)
 8006106:	4013      	ands	r3, r2
 8006108:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	695b      	ldr	r3, [r3, #20]
 800610e:	011b      	lsls	r3, r3, #4
 8006110:	693a      	ldr	r2, [r7, #16]
 8006112:	4313      	orrs	r3, r2
 8006114:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	699b      	ldr	r3, [r3, #24]
 800611a:	011b      	lsls	r3, r3, #4
 800611c:	693a      	ldr	r2, [r7, #16]
 800611e:	4313      	orrs	r3, r2
 8006120:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	693a      	ldr	r2, [r7, #16]
 8006126:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	68fa      	ldr	r2, [r7, #12]
 800612c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	685a      	ldr	r2, [r3, #4]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	697a      	ldr	r2, [r7, #20]
 800613a:	621a      	str	r2, [r3, #32]
}
 800613c:	46c0      	nop			@ (mov r8, r8)
 800613e:	46bd      	mov	sp, r7
 8006140:	b006      	add	sp, #24
 8006142:	bd80      	pop	{r7, pc}
 8006144:	fffffeff 	.word	0xfffffeff
 8006148:	fffeff8f 	.word	0xfffeff8f
 800614c:	fffffdff 	.word	0xfffffdff
 8006150:	40012c00 	.word	0x40012c00
 8006154:	fffff7ff 	.word	0xfffff7ff
 8006158:	fffffbff 	.word	0xfffffbff
 800615c:	40014400 	.word	0x40014400
 8006160:	40014800 	.word	0x40014800
 8006164:	ffffefff 	.word	0xffffefff
 8006168:	ffffdfff 	.word	0xffffdfff

0800616c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b086      	sub	sp, #24
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6a1b      	ldr	r3, [r3, #32]
 800617a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6a1b      	ldr	r3, [r3, #32]
 8006180:	4a24      	ldr	r2, [pc, #144]	@ (8006214 <TIM_OC4_SetConfig+0xa8>)
 8006182:	401a      	ands	r2, r3
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	69db      	ldr	r3, [r3, #28]
 8006192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	4a20      	ldr	r2, [pc, #128]	@ (8006218 <TIM_OC4_SetConfig+0xac>)
 8006198:	4013      	ands	r3, r2
 800619a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	4a1f      	ldr	r2, [pc, #124]	@ (800621c <TIM_OC4_SetConfig+0xb0>)
 80061a0:	4013      	ands	r3, r2
 80061a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	021b      	lsls	r3, r3, #8
 80061aa:	68fa      	ldr	r2, [r7, #12]
 80061ac:	4313      	orrs	r3, r2
 80061ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	4a1b      	ldr	r2, [pc, #108]	@ (8006220 <TIM_OC4_SetConfig+0xb4>)
 80061b4:	4013      	ands	r3, r2
 80061b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	031b      	lsls	r3, r3, #12
 80061be:	693a      	ldr	r2, [r7, #16]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	4a17      	ldr	r2, [pc, #92]	@ (8006224 <TIM_OC4_SetConfig+0xb8>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d007      	beq.n	80061dc <TIM_OC4_SetConfig+0x70>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	4a16      	ldr	r2, [pc, #88]	@ (8006228 <TIM_OC4_SetConfig+0xbc>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d003      	beq.n	80061dc <TIM_OC4_SetConfig+0x70>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	4a15      	ldr	r2, [pc, #84]	@ (800622c <TIM_OC4_SetConfig+0xc0>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d109      	bne.n	80061f0 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	4a14      	ldr	r2, [pc, #80]	@ (8006230 <TIM_OC4_SetConfig+0xc4>)
 80061e0:	4013      	ands	r3, r2
 80061e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	695b      	ldr	r3, [r3, #20]
 80061e8:	019b      	lsls	r3, r3, #6
 80061ea:	697a      	ldr	r2, [r7, #20]
 80061ec:	4313      	orrs	r3, r2
 80061ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	697a      	ldr	r2, [r7, #20]
 80061f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	68fa      	ldr	r2, [r7, #12]
 80061fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	685a      	ldr	r2, [r3, #4]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	693a      	ldr	r2, [r7, #16]
 8006208:	621a      	str	r2, [r3, #32]
}
 800620a:	46c0      	nop			@ (mov r8, r8)
 800620c:	46bd      	mov	sp, r7
 800620e:	b006      	add	sp, #24
 8006210:	bd80      	pop	{r7, pc}
 8006212:	46c0      	nop			@ (mov r8, r8)
 8006214:	ffffefff 	.word	0xffffefff
 8006218:	feff8fff 	.word	0xfeff8fff
 800621c:	fffffcff 	.word	0xfffffcff
 8006220:	ffffdfff 	.word	0xffffdfff
 8006224:	40012c00 	.word	0x40012c00
 8006228:	40014400 	.word	0x40014400
 800622c:	40014800 	.word	0x40014800
 8006230:	ffffbfff 	.word	0xffffbfff

08006234 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b086      	sub	sp, #24
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a1b      	ldr	r3, [r3, #32]
 8006242:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6a1b      	ldr	r3, [r3, #32]
 8006248:	4a21      	ldr	r2, [pc, #132]	@ (80062d0 <TIM_OC5_SetConfig+0x9c>)
 800624a:	401a      	ands	r2, r3
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800625a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	4a1d      	ldr	r2, [pc, #116]	@ (80062d4 <TIM_OC5_SetConfig+0xa0>)
 8006260:	4013      	ands	r3, r2
 8006262:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	68fa      	ldr	r2, [r7, #12]
 800626a:	4313      	orrs	r3, r2
 800626c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	4a19      	ldr	r2, [pc, #100]	@ (80062d8 <TIM_OC5_SetConfig+0xa4>)
 8006272:	4013      	ands	r3, r2
 8006274:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	041b      	lsls	r3, r3, #16
 800627c:	693a      	ldr	r2, [r7, #16]
 800627e:	4313      	orrs	r3, r2
 8006280:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a15      	ldr	r2, [pc, #84]	@ (80062dc <TIM_OC5_SetConfig+0xa8>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d007      	beq.n	800629a <TIM_OC5_SetConfig+0x66>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4a14      	ldr	r2, [pc, #80]	@ (80062e0 <TIM_OC5_SetConfig+0xac>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d003      	beq.n	800629a <TIM_OC5_SetConfig+0x66>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a13      	ldr	r2, [pc, #76]	@ (80062e4 <TIM_OC5_SetConfig+0xb0>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d109      	bne.n	80062ae <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	4a0c      	ldr	r2, [pc, #48]	@ (80062d0 <TIM_OC5_SetConfig+0x9c>)
 800629e:	4013      	ands	r3, r2
 80062a0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	695b      	ldr	r3, [r3, #20]
 80062a6:	021b      	lsls	r3, r3, #8
 80062a8:	697a      	ldr	r2, [r7, #20]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	697a      	ldr	r2, [r7, #20]
 80062b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	685a      	ldr	r2, [r3, #4]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	693a      	ldr	r2, [r7, #16]
 80062c6:	621a      	str	r2, [r3, #32]
}
 80062c8:	46c0      	nop			@ (mov r8, r8)
 80062ca:	46bd      	mov	sp, r7
 80062cc:	b006      	add	sp, #24
 80062ce:	bd80      	pop	{r7, pc}
 80062d0:	fffeffff 	.word	0xfffeffff
 80062d4:	fffeff8f 	.word	0xfffeff8f
 80062d8:	fffdffff 	.word	0xfffdffff
 80062dc:	40012c00 	.word	0x40012c00
 80062e0:	40014400 	.word	0x40014400
 80062e4:	40014800 	.word	0x40014800

080062e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b086      	sub	sp, #24
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6a1b      	ldr	r3, [r3, #32]
 80062f6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6a1b      	ldr	r3, [r3, #32]
 80062fc:	4a22      	ldr	r2, [pc, #136]	@ (8006388 <TIM_OC6_SetConfig+0xa0>)
 80062fe:	401a      	ands	r2, r3
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800630e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	4a1e      	ldr	r2, [pc, #120]	@ (800638c <TIM_OC6_SetConfig+0xa4>)
 8006314:	4013      	ands	r3, r2
 8006316:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	021b      	lsls	r3, r3, #8
 800631e:	68fa      	ldr	r2, [r7, #12]
 8006320:	4313      	orrs	r3, r2
 8006322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	4a1a      	ldr	r2, [pc, #104]	@ (8006390 <TIM_OC6_SetConfig+0xa8>)
 8006328:	4013      	ands	r3, r2
 800632a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	051b      	lsls	r3, r3, #20
 8006332:	693a      	ldr	r2, [r7, #16]
 8006334:	4313      	orrs	r3, r2
 8006336:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	4a16      	ldr	r2, [pc, #88]	@ (8006394 <TIM_OC6_SetConfig+0xac>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d007      	beq.n	8006350 <TIM_OC6_SetConfig+0x68>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4a15      	ldr	r2, [pc, #84]	@ (8006398 <TIM_OC6_SetConfig+0xb0>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d003      	beq.n	8006350 <TIM_OC6_SetConfig+0x68>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	4a14      	ldr	r2, [pc, #80]	@ (800639c <TIM_OC6_SetConfig+0xb4>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d109      	bne.n	8006364 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	4a13      	ldr	r2, [pc, #76]	@ (80063a0 <TIM_OC6_SetConfig+0xb8>)
 8006354:	4013      	ands	r3, r2
 8006356:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	695b      	ldr	r3, [r3, #20]
 800635c:	029b      	lsls	r3, r3, #10
 800635e:	697a      	ldr	r2, [r7, #20]
 8006360:	4313      	orrs	r3, r2
 8006362:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	697a      	ldr	r2, [r7, #20]
 8006368:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	68fa      	ldr	r2, [r7, #12]
 800636e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	685a      	ldr	r2, [r3, #4]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	693a      	ldr	r2, [r7, #16]
 800637c:	621a      	str	r2, [r3, #32]
}
 800637e:	46c0      	nop			@ (mov r8, r8)
 8006380:	46bd      	mov	sp, r7
 8006382:	b006      	add	sp, #24
 8006384:	bd80      	pop	{r7, pc}
 8006386:	46c0      	nop			@ (mov r8, r8)
 8006388:	ffefffff 	.word	0xffefffff
 800638c:	feff8fff 	.word	0xfeff8fff
 8006390:	ffdfffff 	.word	0xffdfffff
 8006394:	40012c00 	.word	0x40012c00
 8006398:	40014400 	.word	0x40014400
 800639c:	40014800 	.word	0x40014800
 80063a0:	fffbffff 	.word	0xfffbffff

080063a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	223c      	movs	r2, #60	@ 0x3c
 80063b2:	5c9b      	ldrb	r3, [r3, r2]
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d101      	bne.n	80063bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063b8:	2302      	movs	r3, #2
 80063ba:	e050      	b.n	800645e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	223c      	movs	r2, #60	@ 0x3c
 80063c0:	2101      	movs	r1, #1
 80063c2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	223d      	movs	r2, #61	@ 0x3d
 80063c8:	2102      	movs	r1, #2
 80063ca:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a21      	ldr	r2, [pc, #132]	@ (8006468 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d108      	bne.n	80063f8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	4a20      	ldr	r2, [pc, #128]	@ (800646c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80063ea:	4013      	ands	r3, r2
 80063ec:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	68fa      	ldr	r2, [r7, #12]
 80063f4:	4313      	orrs	r3, r2
 80063f6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2270      	movs	r2, #112	@ 0x70
 80063fc:	4393      	bics	r3, r2
 80063fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	4313      	orrs	r3, r2
 8006408:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	68fa      	ldr	r2, [r7, #12]
 8006410:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a14      	ldr	r2, [pc, #80]	@ (8006468 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d00a      	beq.n	8006432 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	2380      	movs	r3, #128	@ 0x80
 8006422:	05db      	lsls	r3, r3, #23
 8006424:	429a      	cmp	r2, r3
 8006426:	d004      	beq.n	8006432 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a10      	ldr	r2, [pc, #64]	@ (8006470 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d10c      	bne.n	800644c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	2280      	movs	r2, #128	@ 0x80
 8006436:	4393      	bics	r3, r2
 8006438:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	68ba      	ldr	r2, [r7, #8]
 8006440:	4313      	orrs	r3, r2
 8006442:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	68ba      	ldr	r2, [r7, #8]
 800644a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	223d      	movs	r2, #61	@ 0x3d
 8006450:	2101      	movs	r1, #1
 8006452:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	223c      	movs	r2, #60	@ 0x3c
 8006458:	2100      	movs	r1, #0
 800645a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800645c:	2300      	movs	r3, #0
}
 800645e:	0018      	movs	r0, r3
 8006460:	46bd      	mov	sp, r7
 8006462:	b004      	add	sp, #16
 8006464:	bd80      	pop	{r7, pc}
 8006466:	46c0      	nop			@ (mov r8, r8)
 8006468:	40012c00 	.word	0x40012c00
 800646c:	ff0fffff 	.word	0xff0fffff
 8006470:	40000400 	.word	0x40000400

08006474 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800647e:	2300      	movs	r3, #0
 8006480:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	223c      	movs	r2, #60	@ 0x3c
 8006486:	5c9b      	ldrb	r3, [r3, r2]
 8006488:	2b01      	cmp	r3, #1
 800648a:	d101      	bne.n	8006490 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800648c:	2302      	movs	r3, #2
 800648e:	e06f      	b.n	8006570 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	223c      	movs	r2, #60	@ 0x3c
 8006494:	2101      	movs	r1, #1
 8006496:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	22ff      	movs	r2, #255	@ 0xff
 800649c:	4393      	bics	r3, r2
 800649e:	001a      	movs	r2, r3
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	68db      	ldr	r3, [r3, #12]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	4a33      	ldr	r2, [pc, #204]	@ (8006578 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 80064ac:	401a      	ands	r2, r3
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	4a30      	ldr	r2, [pc, #192]	@ (800657c <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 80064ba:	401a      	ands	r2, r3
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	4313      	orrs	r3, r2
 80064c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	4a2e      	ldr	r2, [pc, #184]	@ (8006580 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 80064c8:	401a      	ands	r2, r3
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4313      	orrs	r3, r2
 80064d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	4a2b      	ldr	r2, [pc, #172]	@ (8006584 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80064d6:	401a      	ands	r2, r3
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	691b      	ldr	r3, [r3, #16]
 80064dc:	4313      	orrs	r3, r2
 80064de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	4a29      	ldr	r2, [pc, #164]	@ (8006588 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80064e4:	401a      	ands	r2, r3
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	695b      	ldr	r3, [r3, #20]
 80064ea:	4313      	orrs	r3, r2
 80064ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	4a26      	ldr	r2, [pc, #152]	@ (800658c <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80064f2:	401a      	ands	r2, r3
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064f8:	4313      	orrs	r3, r2
 80064fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	4a24      	ldr	r2, [pc, #144]	@ (8006590 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006500:	401a      	ands	r2, r3
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	699b      	ldr	r3, [r3, #24]
 8006506:	041b      	lsls	r3, r3, #16
 8006508:	4313      	orrs	r3, r2
 800650a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	4a21      	ldr	r2, [pc, #132]	@ (8006594 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006510:	401a      	ands	r2, r3
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	69db      	ldr	r3, [r3, #28]
 8006516:	4313      	orrs	r3, r2
 8006518:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a1e      	ldr	r2, [pc, #120]	@ (8006598 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d11c      	bne.n	800655e <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	4a1d      	ldr	r2, [pc, #116]	@ (800659c <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8006528:	401a      	ands	r2, r3
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800652e:	051b      	lsls	r3, r3, #20
 8006530:	4313      	orrs	r3, r2
 8006532:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	4a1a      	ldr	r2, [pc, #104]	@ (80065a0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8006538:	401a      	ands	r2, r3
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	6a1b      	ldr	r3, [r3, #32]
 800653e:	4313      	orrs	r3, r2
 8006540:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	4a17      	ldr	r2, [pc, #92]	@ (80065a4 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8006546:	401a      	ands	r2, r3
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800654c:	4313      	orrs	r3, r2
 800654e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	4a15      	ldr	r2, [pc, #84]	@ (80065a8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8006554:	401a      	ands	r2, r3
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800655a:	4313      	orrs	r3, r2
 800655c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	223c      	movs	r2, #60	@ 0x3c
 800656a:	2100      	movs	r1, #0
 800656c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800656e:	2300      	movs	r3, #0
}
 8006570:	0018      	movs	r0, r3
 8006572:	46bd      	mov	sp, r7
 8006574:	b004      	add	sp, #16
 8006576:	bd80      	pop	{r7, pc}
 8006578:	fffffcff 	.word	0xfffffcff
 800657c:	fffffbff 	.word	0xfffffbff
 8006580:	fffff7ff 	.word	0xfffff7ff
 8006584:	ffffefff 	.word	0xffffefff
 8006588:	ffffdfff 	.word	0xffffdfff
 800658c:	ffffbfff 	.word	0xffffbfff
 8006590:	fff0ffff 	.word	0xfff0ffff
 8006594:	efffffff 	.word	0xefffffff
 8006598:	40012c00 	.word	0x40012c00
 800659c:	ff0fffff 	.word	0xff0fffff
 80065a0:	feffffff 	.word	0xfeffffff
 80065a4:	fdffffff 	.word	0xfdffffff
 80065a8:	dfffffff 	.word	0xdfffffff

080065ac <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b082      	sub	sp, #8
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d101      	bne.n	80065be <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	e032      	b.n	8006624 <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2288      	movs	r2, #136	@ 0x88
 80065c2:	2124      	movs	r1, #36	@ 0x24
 80065c4:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	2101      	movs	r1, #1
 80065d2:	438a      	bics	r2, r1
 80065d4:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	2200      	movs	r2, #0
 80065dc:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	2200      	movs	r2, #0
 80065e4:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2200      	movs	r2, #0
 80065ec:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	0018      	movs	r0, r3
 80065f2:	f7fc fb8b 	bl	8002d0c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2290      	movs	r2, #144	@ 0x90
 80065fa:	2100      	movs	r1, #0
 80065fc:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2288      	movs	r2, #136	@ 0x88
 8006602:	2100      	movs	r1, #0
 8006604:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	228c      	movs	r2, #140	@ 0x8c
 800660a:	2100      	movs	r1, #0
 800660c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2200      	movs	r2, #0
 8006612:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2200      	movs	r2, #0
 8006618:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2284      	movs	r2, #132	@ 0x84
 800661e:	2100      	movs	r1, #0
 8006620:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006622:	2300      	movs	r3, #0
}
 8006624:	0018      	movs	r0, r3
 8006626:	46bd      	mov	sp, r7
 8006628:	b002      	add	sp, #8
 800662a:	bd80      	pop	{r7, pc}

0800662c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b088      	sub	sp, #32
 8006630:	af00      	add	r7, sp, #0
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	1dbb      	adds	r3, r7, #6
 8006638:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2288      	movs	r2, #136	@ 0x88
 800663e:	589b      	ldr	r3, [r3, r2]
 8006640:	2b20      	cmp	r3, #32
 8006642:	d000      	beq.n	8006646 <HAL_UART_Transmit_DMA+0x1a>
 8006644:	e079      	b.n	800673a <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d003      	beq.n	8006654 <HAL_UART_Transmit_DMA+0x28>
 800664c:	1dbb      	adds	r3, r7, #6
 800664e:	881b      	ldrh	r3, [r3, #0]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d101      	bne.n	8006658 <HAL_UART_Transmit_DMA+0x2c>
    {
      return HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	e071      	b.n	800673c <HAL_UART_Transmit_DMA+0x110>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	689a      	ldr	r2, [r3, #8]
 800665c:	2380      	movs	r3, #128	@ 0x80
 800665e:	015b      	lsls	r3, r3, #5
 8006660:	429a      	cmp	r2, r3
 8006662:	d109      	bne.n	8006678 <HAL_UART_Transmit_DMA+0x4c>
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	691b      	ldr	r3, [r3, #16]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d105      	bne.n	8006678 <HAL_UART_Transmit_DMA+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	2201      	movs	r2, #1
 8006670:	4013      	ands	r3, r2
 8006672:	d001      	beq.n	8006678 <HAL_UART_Transmit_DMA+0x4c>
      {
        return  HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	e061      	b.n	800673c <HAL_UART_Transmit_DMA+0x110>
      }
    }

    huart->pTxBuffPtr  = pData;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	68ba      	ldr	r2, [r7, #8]
 800667c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	1dba      	adds	r2, r7, #6
 8006682:	2154      	movs	r1, #84	@ 0x54
 8006684:	8812      	ldrh	r2, [r2, #0]
 8006686:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	1dba      	adds	r2, r7, #6
 800668c:	2156      	movs	r1, #86	@ 0x56
 800668e:	8812      	ldrh	r2, [r2, #0]
 8006690:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2290      	movs	r2, #144	@ 0x90
 8006696:	2100      	movs	r1, #0
 8006698:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2288      	movs	r2, #136	@ 0x88
 800669e:	2121      	movs	r1, #33	@ 0x21
 80066a0:	5099      	str	r1, [r3, r2]

    if (huart->hdmatx != NULL)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d028      	beq.n	80066fc <HAL_UART_Transmit_DMA+0xd0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80066ae:	4a25      	ldr	r2, [pc, #148]	@ (8006744 <HAL_UART_Transmit_DMA+0x118>)
 80066b0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80066b6:	4a24      	ldr	r2, [pc, #144]	@ (8006748 <HAL_UART_Transmit_DMA+0x11c>)
 80066b8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80066be:	4a23      	ldr	r2, [pc, #140]	@ (800674c <HAL_UART_Transmit_DMA+0x120>)
 80066c0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80066c6:	2200      	movs	r2, #0
 80066c8:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066d2:	0019      	movs	r1, r3
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	3328      	adds	r3, #40	@ 0x28
 80066da:	001a      	movs	r2, r3
 80066dc:	1dbb      	adds	r3, r7, #6
 80066de:	881b      	ldrh	r3, [r3, #0]
 80066e0:	f7fc ff52 	bl	8003588 <HAL_DMA_Start_IT>
 80066e4:	1e03      	subs	r3, r0, #0
 80066e6:	d009      	beq.n	80066fc <HAL_UART_Transmit_DMA+0xd0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2290      	movs	r2, #144	@ 0x90
 80066ec:	2110      	movs	r1, #16
 80066ee:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2288      	movs	r2, #136	@ 0x88
 80066f4:	2120      	movs	r1, #32
 80066f6:	5099      	str	r1, [r3, r2]

        return HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	e01f      	b.n	800673c <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	2240      	movs	r2, #64	@ 0x40
 8006702:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006704:	f3ef 8310 	mrs	r3, PRIMASK
 8006708:	613b      	str	r3, [r7, #16]
  return(result);
 800670a:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800670c:	61fb      	str	r3, [r7, #28]
 800670e:	2301      	movs	r3, #1
 8006710:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	f383 8810 	msr	PRIMASK, r3
}
 8006718:	46c0      	nop			@ (mov r8, r8)
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	689a      	ldr	r2, [r3, #8]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	2180      	movs	r1, #128	@ 0x80
 8006726:	430a      	orrs	r2, r1
 8006728:	609a      	str	r2, [r3, #8]
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800672e:	69bb      	ldr	r3, [r7, #24]
 8006730:	f383 8810 	msr	PRIMASK, r3
}
 8006734:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8006736:	2300      	movs	r3, #0
 8006738:	e000      	b.n	800673c <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800673a:	2302      	movs	r3, #2
  }
}
 800673c:	0018      	movs	r0, r3
 800673e:	46bd      	mov	sp, r7
 8006740:	b008      	add	sp, #32
 8006742:	bd80      	pop	{r7, pc}
 8006744:	08007955 	.word	0x08007955
 8006748:	080079ed 	.word	0x080079ed
 800674c:	08007b7f 	.word	0x08007b7f

08006750 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b096      	sub	sp, #88	@ 0x58
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006758:	f3ef 8310 	mrs	r3, PRIMASK
 800675c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 800675e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006760:	657b      	str	r3, [r7, #84]	@ 0x54
 8006762:	2301      	movs	r3, #1
 8006764:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006768:	f383 8810 	msr	PRIMASK, r3
}
 800676c:	46c0      	nop			@ (mov r8, r8)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4979      	ldr	r1, [pc, #484]	@ (8006960 <HAL_UART_Abort+0x210>)
 800677a:	400a      	ands	r2, r1
 800677c:	601a      	str	r2, [r3, #0]
 800677e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006780:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006782:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006784:	f383 8810 	msr	PRIMASK, r3
}
 8006788:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800678a:	f3ef 8310 	mrs	r3, PRIMASK
 800678e:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 8006790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 8006792:	653b      	str	r3, [r7, #80]	@ 0x50
 8006794:	2301      	movs	r3, #1
 8006796:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006798:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800679a:	f383 8810 	msr	PRIMASK, r3
}
 800679e:	46c0      	nop			@ (mov r8, r8)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	689a      	ldr	r2, [r3, #8]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	496e      	ldr	r1, [pc, #440]	@ (8006964 <HAL_UART_Abort+0x214>)
 80067ac:	400a      	ands	r2, r1
 80067ae:	609a      	str	r2, [r3, #8]
 80067b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80067b2:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067b6:	f383 8810 	msr	PRIMASK, r3
}
 80067ba:	46c0      	nop			@ (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d118      	bne.n	80067f6 <HAL_UART_Abort+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80067c4:	f3ef 8310 	mrs	r3, PRIMASK
 80067c8:	623b      	str	r3, [r7, #32]
  return(result);
 80067ca:	6a3b      	ldr	r3, [r7, #32]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80067cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067ce:	2301      	movs	r3, #1
 80067d0:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d4:	f383 8810 	msr	PRIMASK, r3
}
 80067d8:	46c0      	nop			@ (mov r8, r8)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	2110      	movs	r1, #16
 80067e6:	438a      	bics	r2, r1
 80067e8:	601a      	str	r2, [r3, #0]
 80067ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067f0:	f383 8810 	msr	PRIMASK, r3
}
 80067f4:	46c0      	nop			@ (mov r8, r8)
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	2280      	movs	r2, #128	@ 0x80
 80067fe:	4013      	ands	r3, r2
 8006800:	2b80      	cmp	r3, #128	@ 0x80
 8006802:	d135      	bne.n	8006870 <HAL_UART_Abort+0x120>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006804:	f3ef 8310 	mrs	r3, PRIMASK
 8006808:	617b      	str	r3, [r7, #20]
  return(result);
 800680a:	697b      	ldr	r3, [r7, #20]
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800680c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800680e:	2301      	movs	r3, #1
 8006810:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006812:	69bb      	ldr	r3, [r7, #24]
 8006814:	f383 8810 	msr	PRIMASK, r3
}
 8006818:	46c0      	nop			@ (mov r8, r8)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	689a      	ldr	r2, [r3, #8]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	2180      	movs	r1, #128	@ 0x80
 8006826:	438a      	bics	r2, r1
 8006828:	609a      	str	r2, [r3, #8]
 800682a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800682c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800682e:	69fb      	ldr	r3, [r7, #28]
 8006830:	f383 8810 	msr	PRIMASK, r3
}
 8006834:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800683a:	2b00      	cmp	r3, #0
 800683c:	d018      	beq.n	8006870 <HAL_UART_Abort+0x120>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006842:	2200      	movs	r2, #0
 8006844:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800684a:	0018      	movs	r0, r3
 800684c:	f7fc ff24 	bl	8003698 <HAL_DMA_Abort>
 8006850:	1e03      	subs	r3, r0, #0
 8006852:	d00d      	beq.n	8006870 <HAL_UART_Abort+0x120>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006858:	0018      	movs	r0, r3
 800685a:	f7fd f8b7 	bl	80039cc <HAL_DMA_GetError>
 800685e:	0003      	movs	r3, r0
 8006860:	2b20      	cmp	r3, #32
 8006862:	d105      	bne.n	8006870 <HAL_UART_Abort+0x120>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2290      	movs	r2, #144	@ 0x90
 8006868:	2110      	movs	r1, #16
 800686a:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 800686c:	2303      	movs	r3, #3
 800686e:	e072      	b.n	8006956 <HAL_UART_Abort+0x206>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	2240      	movs	r2, #64	@ 0x40
 8006878:	4013      	ands	r3, r2
 800687a:	2b40      	cmp	r3, #64	@ 0x40
 800687c:	d139      	bne.n	80068f2 <HAL_UART_Abort+0x1a2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800687e:	f3ef 8310 	mrs	r3, PRIMASK
 8006882:	60bb      	str	r3, [r7, #8]
  return(result);
 8006884:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006886:	647b      	str	r3, [r7, #68]	@ 0x44
 8006888:	2301      	movs	r3, #1
 800688a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f383 8810 	msr	PRIMASK, r3
}
 8006892:	46c0      	nop			@ (mov r8, r8)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	689a      	ldr	r2, [r3, #8]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	2140      	movs	r1, #64	@ 0x40
 80068a0:	438a      	bics	r2, r1
 80068a2:	609a      	str	r2, [r3, #8]
 80068a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	f383 8810 	msr	PRIMASK, r3
}
 80068ae:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2280      	movs	r2, #128	@ 0x80
 80068b4:	589b      	ldr	r3, [r3, r2]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d01b      	beq.n	80068f2 <HAL_UART_Abort+0x1a2>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2280      	movs	r2, #128	@ 0x80
 80068be:	589b      	ldr	r3, [r3, r2]
 80068c0:	2200      	movs	r2, #0
 80068c2:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2280      	movs	r2, #128	@ 0x80
 80068c8:	589b      	ldr	r3, [r3, r2]
 80068ca:	0018      	movs	r0, r3
 80068cc:	f7fc fee4 	bl	8003698 <HAL_DMA_Abort>
 80068d0:	1e03      	subs	r3, r0, #0
 80068d2:	d00e      	beq.n	80068f2 <HAL_UART_Abort+0x1a2>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2280      	movs	r2, #128	@ 0x80
 80068d8:	589b      	ldr	r3, [r3, r2]
 80068da:	0018      	movs	r0, r3
 80068dc:	f7fd f876 	bl	80039cc <HAL_DMA_GetError>
 80068e0:	0003      	movs	r3, r0
 80068e2:	2b20      	cmp	r3, #32
 80068e4:	d105      	bne.n	80068f2 <HAL_UART_Abort+0x1a2>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2290      	movs	r2, #144	@ 0x90
 80068ea:	2110      	movs	r1, #16
 80068ec:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 80068ee:	2303      	movs	r3, #3
 80068f0:	e031      	b.n	8006956 <HAL_UART_Abort+0x206>
    }
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2256      	movs	r2, #86	@ 0x56
 80068f6:	2100      	movs	r1, #0
 80068f8:	5299      	strh	r1, [r3, r2]
  huart->RxXferCount = 0U;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	225e      	movs	r2, #94	@ 0x5e
 80068fe:	2100      	movs	r1, #0
 8006900:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	220f      	movs	r2, #15
 8006908:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800690e:	2380      	movs	r3, #128	@ 0x80
 8006910:	059b      	lsls	r3, r3, #22
 8006912:	429a      	cmp	r2, r3
 8006914:	d107      	bne.n	8006926 <HAL_UART_Abort+0x1d6>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	699a      	ldr	r2, [r3, #24]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	2110      	movs	r1, #16
 8006922:	430a      	orrs	r2, r1
 8006924:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	699a      	ldr	r2, [r3, #24]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	2108      	movs	r1, #8
 8006932:	430a      	orrs	r2, r1
 8006934:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2288      	movs	r2, #136	@ 0x88
 800693a:	2120      	movs	r1, #32
 800693c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	228c      	movs	r2, #140	@ 0x8c
 8006942:	2120      	movs	r1, #32
 8006944:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	66da      	str	r2, [r3, #108]	@ 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2290      	movs	r2, #144	@ 0x90
 8006950:	2100      	movs	r1, #0
 8006952:	5099      	str	r1, [r3, r2]

  return HAL_OK;
 8006954:	2300      	movs	r3, #0
}
 8006956:	0018      	movs	r0, r3
 8006958:	46bd      	mov	sp, r7
 800695a:	b016      	add	sp, #88	@ 0x58
 800695c:	bd80      	pop	{r7, pc}
 800695e:	46c0      	nop			@ (mov r8, r8)
 8006960:	fffffe1f 	.word	0xfffffe1f
 8006964:	ef7ffffe 	.word	0xef7ffffe

08006968 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006968:	b5b0      	push	{r4, r5, r7, lr}
 800696a:	b0aa      	sub	sp, #168	@ 0xa8
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	69db      	ldr	r3, [r3, #28]
 8006976:	22a4      	movs	r2, #164	@ 0xa4
 8006978:	18b9      	adds	r1, r7, r2
 800697a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	20a0      	movs	r0, #160	@ 0xa0
 8006984:	1839      	adds	r1, r7, r0
 8006986:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	249c      	movs	r4, #156	@ 0x9c
 8006990:	1939      	adds	r1, r7, r4
 8006992:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006994:	0011      	movs	r1, r2
 8006996:	18bb      	adds	r3, r7, r2
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4aa2      	ldr	r2, [pc, #648]	@ (8006c24 <HAL_UART_IRQHandler+0x2bc>)
 800699c:	4013      	ands	r3, r2
 800699e:	2298      	movs	r2, #152	@ 0x98
 80069a0:	18bd      	adds	r5, r7, r2
 80069a2:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80069a4:	18bb      	adds	r3, r7, r2
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d11a      	bne.n	80069e2 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80069ac:	187b      	adds	r3, r7, r1
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	2220      	movs	r2, #32
 80069b2:	4013      	ands	r3, r2
 80069b4:	d015      	beq.n	80069e2 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80069b6:	183b      	adds	r3, r7, r0
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	2220      	movs	r2, #32
 80069bc:	4013      	ands	r3, r2
 80069be:	d105      	bne.n	80069cc <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80069c0:	193b      	adds	r3, r7, r4
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	2380      	movs	r3, #128	@ 0x80
 80069c6:	055b      	lsls	r3, r3, #21
 80069c8:	4013      	ands	r3, r2
 80069ca:	d00a      	beq.n	80069e2 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d100      	bne.n	80069d6 <HAL_UART_IRQHandler+0x6e>
 80069d4:	e2fb      	b.n	8006fce <HAL_UART_IRQHandler+0x666>
      {
        huart->RxISR(huart);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	0010      	movs	r0, r2
 80069de:	4798      	blx	r3
      }
      return;
 80069e0:	e2f5      	b.n	8006fce <HAL_UART_IRQHandler+0x666>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80069e2:	2398      	movs	r3, #152	@ 0x98
 80069e4:	18fb      	adds	r3, r7, r3
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d100      	bne.n	80069ee <HAL_UART_IRQHandler+0x86>
 80069ec:	e122      	b.n	8006c34 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80069ee:	239c      	movs	r3, #156	@ 0x9c
 80069f0:	18fb      	adds	r3, r7, r3
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a8c      	ldr	r2, [pc, #560]	@ (8006c28 <HAL_UART_IRQHandler+0x2c0>)
 80069f6:	4013      	ands	r3, r2
 80069f8:	d106      	bne.n	8006a08 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80069fa:	23a0      	movs	r3, #160	@ 0xa0
 80069fc:	18fb      	adds	r3, r7, r3
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a8a      	ldr	r2, [pc, #552]	@ (8006c2c <HAL_UART_IRQHandler+0x2c4>)
 8006a02:	4013      	ands	r3, r2
 8006a04:	d100      	bne.n	8006a08 <HAL_UART_IRQHandler+0xa0>
 8006a06:	e115      	b.n	8006c34 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006a08:	23a4      	movs	r3, #164	@ 0xa4
 8006a0a:	18fb      	adds	r3, r7, r3
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	4013      	ands	r3, r2
 8006a12:	d012      	beq.n	8006a3a <HAL_UART_IRQHandler+0xd2>
 8006a14:	23a0      	movs	r3, #160	@ 0xa0
 8006a16:	18fb      	adds	r3, r7, r3
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	2380      	movs	r3, #128	@ 0x80
 8006a1c:	005b      	lsls	r3, r3, #1
 8006a1e:	4013      	ands	r3, r2
 8006a20:	d00b      	beq.n	8006a3a <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	2201      	movs	r2, #1
 8006a28:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2290      	movs	r2, #144	@ 0x90
 8006a2e:	589b      	ldr	r3, [r3, r2]
 8006a30:	2201      	movs	r2, #1
 8006a32:	431a      	orrs	r2, r3
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2190      	movs	r1, #144	@ 0x90
 8006a38:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a3a:	23a4      	movs	r3, #164	@ 0xa4
 8006a3c:	18fb      	adds	r3, r7, r3
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	2202      	movs	r2, #2
 8006a42:	4013      	ands	r3, r2
 8006a44:	d011      	beq.n	8006a6a <HAL_UART_IRQHandler+0x102>
 8006a46:	239c      	movs	r3, #156	@ 0x9c
 8006a48:	18fb      	adds	r3, r7, r3
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	4013      	ands	r3, r2
 8006a50:	d00b      	beq.n	8006a6a <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	2202      	movs	r2, #2
 8006a58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2290      	movs	r2, #144	@ 0x90
 8006a5e:	589b      	ldr	r3, [r3, r2]
 8006a60:	2204      	movs	r2, #4
 8006a62:	431a      	orrs	r2, r3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2190      	movs	r1, #144	@ 0x90
 8006a68:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a6a:	23a4      	movs	r3, #164	@ 0xa4
 8006a6c:	18fb      	adds	r3, r7, r3
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	2204      	movs	r2, #4
 8006a72:	4013      	ands	r3, r2
 8006a74:	d011      	beq.n	8006a9a <HAL_UART_IRQHandler+0x132>
 8006a76:	239c      	movs	r3, #156	@ 0x9c
 8006a78:	18fb      	adds	r3, r7, r3
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	4013      	ands	r3, r2
 8006a80:	d00b      	beq.n	8006a9a <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	2204      	movs	r2, #4
 8006a88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2290      	movs	r2, #144	@ 0x90
 8006a8e:	589b      	ldr	r3, [r3, r2]
 8006a90:	2202      	movs	r2, #2
 8006a92:	431a      	orrs	r2, r3
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2190      	movs	r1, #144	@ 0x90
 8006a98:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006a9a:	23a4      	movs	r3, #164	@ 0xa4
 8006a9c:	18fb      	adds	r3, r7, r3
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	2208      	movs	r2, #8
 8006aa2:	4013      	ands	r3, r2
 8006aa4:	d017      	beq.n	8006ad6 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006aa6:	23a0      	movs	r3, #160	@ 0xa0
 8006aa8:	18fb      	adds	r3, r7, r3
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	2220      	movs	r2, #32
 8006aae:	4013      	ands	r3, r2
 8006ab0:	d105      	bne.n	8006abe <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006ab2:	239c      	movs	r3, #156	@ 0x9c
 8006ab4:	18fb      	adds	r3, r7, r3
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a5b      	ldr	r2, [pc, #364]	@ (8006c28 <HAL_UART_IRQHandler+0x2c0>)
 8006aba:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006abc:	d00b      	beq.n	8006ad6 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	2208      	movs	r2, #8
 8006ac4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2290      	movs	r2, #144	@ 0x90
 8006aca:	589b      	ldr	r3, [r3, r2]
 8006acc:	2208      	movs	r2, #8
 8006ace:	431a      	orrs	r2, r3
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2190      	movs	r1, #144	@ 0x90
 8006ad4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006ad6:	23a4      	movs	r3, #164	@ 0xa4
 8006ad8:	18fb      	adds	r3, r7, r3
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	2380      	movs	r3, #128	@ 0x80
 8006ade:	011b      	lsls	r3, r3, #4
 8006ae0:	4013      	ands	r3, r2
 8006ae2:	d013      	beq.n	8006b0c <HAL_UART_IRQHandler+0x1a4>
 8006ae4:	23a0      	movs	r3, #160	@ 0xa0
 8006ae6:	18fb      	adds	r3, r7, r3
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	2380      	movs	r3, #128	@ 0x80
 8006aec:	04db      	lsls	r3, r3, #19
 8006aee:	4013      	ands	r3, r2
 8006af0:	d00c      	beq.n	8006b0c <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	2280      	movs	r2, #128	@ 0x80
 8006af8:	0112      	lsls	r2, r2, #4
 8006afa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2290      	movs	r2, #144	@ 0x90
 8006b00:	589b      	ldr	r3, [r3, r2]
 8006b02:	2220      	movs	r2, #32
 8006b04:	431a      	orrs	r2, r3
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2190      	movs	r1, #144	@ 0x90
 8006b0a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2290      	movs	r2, #144	@ 0x90
 8006b10:	589b      	ldr	r3, [r3, r2]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d100      	bne.n	8006b18 <HAL_UART_IRQHandler+0x1b0>
 8006b16:	e25c      	b.n	8006fd2 <HAL_UART_IRQHandler+0x66a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006b18:	23a4      	movs	r3, #164	@ 0xa4
 8006b1a:	18fb      	adds	r3, r7, r3
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	2220      	movs	r2, #32
 8006b20:	4013      	ands	r3, r2
 8006b22:	d015      	beq.n	8006b50 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006b24:	23a0      	movs	r3, #160	@ 0xa0
 8006b26:	18fb      	adds	r3, r7, r3
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	2220      	movs	r2, #32
 8006b2c:	4013      	ands	r3, r2
 8006b2e:	d106      	bne.n	8006b3e <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006b30:	239c      	movs	r3, #156	@ 0x9c
 8006b32:	18fb      	adds	r3, r7, r3
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	2380      	movs	r3, #128	@ 0x80
 8006b38:	055b      	lsls	r3, r3, #21
 8006b3a:	4013      	ands	r3, r2
 8006b3c:	d008      	beq.n	8006b50 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d004      	beq.n	8006b50 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	0010      	movs	r0, r2
 8006b4e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2290      	movs	r2, #144	@ 0x90
 8006b54:	589b      	ldr	r3, [r3, r2]
 8006b56:	2194      	movs	r1, #148	@ 0x94
 8006b58:	187a      	adds	r2, r7, r1
 8006b5a:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	2240      	movs	r2, #64	@ 0x40
 8006b64:	4013      	ands	r3, r2
 8006b66:	2b40      	cmp	r3, #64	@ 0x40
 8006b68:	d004      	beq.n	8006b74 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006b6a:	187b      	adds	r3, r7, r1
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	2228      	movs	r2, #40	@ 0x28
 8006b70:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006b72:	d04c      	beq.n	8006c0e <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	0018      	movs	r0, r3
 8006b78:	f000 fe86 	bl	8007888 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	2240      	movs	r2, #64	@ 0x40
 8006b84:	4013      	ands	r3, r2
 8006b86:	2b40      	cmp	r3, #64	@ 0x40
 8006b88:	d13c      	bne.n	8006c04 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006b8a:	f3ef 8310 	mrs	r3, PRIMASK
 8006b8e:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8006b90:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b92:	2090      	movs	r0, #144	@ 0x90
 8006b94:	183a      	adds	r2, r7, r0
 8006b96:	6013      	str	r3, [r2, #0]
 8006b98:	2301      	movs	r3, #1
 8006b9a:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b9c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006b9e:	f383 8810 	msr	PRIMASK, r3
}
 8006ba2:	46c0      	nop			@ (mov r8, r8)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	689a      	ldr	r2, [r3, #8]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	2140      	movs	r1, #64	@ 0x40
 8006bb0:	438a      	bics	r2, r1
 8006bb2:	609a      	str	r2, [r3, #8]
 8006bb4:	183b      	adds	r3, r7, r0
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006bbc:	f383 8810 	msr	PRIMASK, r3
}
 8006bc0:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2280      	movs	r2, #128	@ 0x80
 8006bc6:	589b      	ldr	r3, [r3, r2]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d016      	beq.n	8006bfa <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2280      	movs	r2, #128	@ 0x80
 8006bd0:	589b      	ldr	r3, [r3, r2]
 8006bd2:	4a17      	ldr	r2, [pc, #92]	@ (8006c30 <HAL_UART_IRQHandler+0x2c8>)
 8006bd4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2280      	movs	r2, #128	@ 0x80
 8006bda:	589b      	ldr	r3, [r3, r2]
 8006bdc:	0018      	movs	r0, r3
 8006bde:	f7fc fdbd 	bl	800375c <HAL_DMA_Abort_IT>
 8006be2:	1e03      	subs	r3, r0, #0
 8006be4:	d01c      	beq.n	8006c20 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2280      	movs	r2, #128	@ 0x80
 8006bea:	589b      	ldr	r3, [r3, r2]
 8006bec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	2180      	movs	r1, #128	@ 0x80
 8006bf2:	5852      	ldr	r2, [r2, r1]
 8006bf4:	0010      	movs	r0, r2
 8006bf6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bf8:	e012      	b.n	8006c20 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	0018      	movs	r0, r3
 8006bfe:	f7fa feeb 	bl	80019d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c02:	e00d      	b.n	8006c20 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	0018      	movs	r0, r3
 8006c08:	f7fa fee6 	bl	80019d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c0c:	e008      	b.n	8006c20 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	0018      	movs	r0, r3
 8006c12:	f7fa fee1 	bl	80019d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2290      	movs	r2, #144	@ 0x90
 8006c1a:	2100      	movs	r1, #0
 8006c1c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8006c1e:	e1d8      	b.n	8006fd2 <HAL_UART_IRQHandler+0x66a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c20:	46c0      	nop			@ (mov r8, r8)
    return;
 8006c22:	e1d6      	b.n	8006fd2 <HAL_UART_IRQHandler+0x66a>
 8006c24:	0000080f 	.word	0x0000080f
 8006c28:	10000001 	.word	0x10000001
 8006c2c:	04000120 	.word	0x04000120
 8006c30:	08007c05 	.word	0x08007c05

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d000      	beq.n	8006c3e <HAL_UART_IRQHandler+0x2d6>
 8006c3c:	e15d      	b.n	8006efa <HAL_UART_IRQHandler+0x592>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006c3e:	23a4      	movs	r3, #164	@ 0xa4
 8006c40:	18fb      	adds	r3, r7, r3
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	2210      	movs	r2, #16
 8006c46:	4013      	ands	r3, r2
 8006c48:	d100      	bne.n	8006c4c <HAL_UART_IRQHandler+0x2e4>
 8006c4a:	e156      	b.n	8006efa <HAL_UART_IRQHandler+0x592>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006c4c:	23a0      	movs	r3, #160	@ 0xa0
 8006c4e:	18fb      	adds	r3, r7, r3
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	2210      	movs	r2, #16
 8006c54:	4013      	ands	r3, r2
 8006c56:	d100      	bne.n	8006c5a <HAL_UART_IRQHandler+0x2f2>
 8006c58:	e14f      	b.n	8006efa <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	2210      	movs	r2, #16
 8006c60:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	2240      	movs	r2, #64	@ 0x40
 8006c6a:	4013      	ands	r3, r2
 8006c6c:	2b40      	cmp	r3, #64	@ 0x40
 8006c6e:	d000      	beq.n	8006c72 <HAL_UART_IRQHandler+0x30a>
 8006c70:	e0c3      	b.n	8006dfa <HAL_UART_IRQHandler+0x492>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2280      	movs	r2, #128	@ 0x80
 8006c76:	589b      	ldr	r3, [r3, r2]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	685a      	ldr	r2, [r3, #4]
 8006c7c:	217e      	movs	r1, #126	@ 0x7e
 8006c7e:	187b      	adds	r3, r7, r1
 8006c80:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8006c82:	187b      	adds	r3, r7, r1
 8006c84:	881b      	ldrh	r3, [r3, #0]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d100      	bne.n	8006c8c <HAL_UART_IRQHandler+0x324>
 8006c8a:	e097      	b.n	8006dbc <HAL_UART_IRQHandler+0x454>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	225c      	movs	r2, #92	@ 0x5c
 8006c90:	5a9b      	ldrh	r3, [r3, r2]
 8006c92:	187a      	adds	r2, r7, r1
 8006c94:	8812      	ldrh	r2, [r2, #0]
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d300      	bcc.n	8006c9c <HAL_UART_IRQHandler+0x334>
 8006c9a:	e08f      	b.n	8006dbc <HAL_UART_IRQHandler+0x454>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	187a      	adds	r2, r7, r1
 8006ca0:	215e      	movs	r1, #94	@ 0x5e
 8006ca2:	8812      	ldrh	r2, [r2, #0]
 8006ca4:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2280      	movs	r2, #128	@ 0x80
 8006caa:	589b      	ldr	r3, [r3, r2]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	2220      	movs	r2, #32
 8006cb2:	4013      	ands	r3, r2
 8006cb4:	d170      	bne.n	8006d98 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006cb6:	f3ef 8310 	mrs	r3, PRIMASK
 8006cba:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8006cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006cbe:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cc6:	f383 8810 	msr	PRIMASK, r3
}
 8006cca:	46c0      	nop			@ (mov r8, r8)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	49c4      	ldr	r1, [pc, #784]	@ (8006fe8 <HAL_UART_IRQHandler+0x680>)
 8006cd8:	400a      	ands	r2, r1
 8006cda:	601a      	str	r2, [r3, #0]
 8006cdc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006cde:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ce2:	f383 8810 	msr	PRIMASK, r3
}
 8006ce6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006ce8:	f3ef 8310 	mrs	r3, PRIMASK
 8006cec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8006cee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cf0:	677b      	str	r3, [r7, #116]	@ 0x74
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006cf8:	f383 8810 	msr	PRIMASK, r3
}
 8006cfc:	46c0      	nop			@ (mov r8, r8)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	689a      	ldr	r2, [r3, #8]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	2101      	movs	r1, #1
 8006d0a:	438a      	bics	r2, r1
 8006d0c:	609a      	str	r2, [r3, #8]
 8006d0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006d10:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d14:	f383 8810 	msr	PRIMASK, r3
}
 8006d18:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006d1a:	f3ef 8310 	mrs	r3, PRIMASK
 8006d1e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8006d20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d22:	673b      	str	r3, [r7, #112]	@ 0x70
 8006d24:	2301      	movs	r3, #1
 8006d26:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d2a:	f383 8810 	msr	PRIMASK, r3
}
 8006d2e:	46c0      	nop			@ (mov r8, r8)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	689a      	ldr	r2, [r3, #8]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	2140      	movs	r1, #64	@ 0x40
 8006d3c:	438a      	bics	r2, r1
 8006d3e:	609a      	str	r2, [r3, #8]
 8006d40:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006d42:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d46:	f383 8810 	msr	PRIMASK, r3
}
 8006d4a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	228c      	movs	r2, #140	@ 0x8c
 8006d50:	2120      	movs	r1, #32
 8006d52:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006d5a:	f3ef 8310 	mrs	r3, PRIMASK
 8006d5e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8006d60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d62:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006d64:	2301      	movs	r3, #1
 8006d66:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d68:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006d6a:	f383 8810 	msr	PRIMASK, r3
}
 8006d6e:	46c0      	nop			@ (mov r8, r8)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	2110      	movs	r1, #16
 8006d7c:	438a      	bics	r2, r1
 8006d7e:	601a      	str	r2, [r3, #0]
 8006d80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d82:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d84:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006d86:	f383 8810 	msr	PRIMASK, r3
}
 8006d8a:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2280      	movs	r2, #128	@ 0x80
 8006d90:	589b      	ldr	r3, [r3, r2]
 8006d92:	0018      	movs	r0, r3
 8006d94:	f7fc fc80 	bl	8003698 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2202      	movs	r2, #2
 8006d9c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	225c      	movs	r2, #92	@ 0x5c
 8006da2:	5a9a      	ldrh	r2, [r3, r2]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	215e      	movs	r1, #94	@ 0x5e
 8006da8:	5a5b      	ldrh	r3, [r3, r1]
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	1ad3      	subs	r3, r2, r3
 8006dae:	b29a      	uxth	r2, r3
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	0011      	movs	r1, r2
 8006db4:	0018      	movs	r0, r3
 8006db6:	f7fa fd57 	bl	8001868 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006dba:	e10c      	b.n	8006fd6 <HAL_UART_IRQHandler+0x66e>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	225c      	movs	r2, #92	@ 0x5c
 8006dc0:	5a9b      	ldrh	r3, [r3, r2]
 8006dc2:	227e      	movs	r2, #126	@ 0x7e
 8006dc4:	18ba      	adds	r2, r7, r2
 8006dc6:	8812      	ldrh	r2, [r2, #0]
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d000      	beq.n	8006dce <HAL_UART_IRQHandler+0x466>
 8006dcc:	e103      	b.n	8006fd6 <HAL_UART_IRQHandler+0x66e>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2280      	movs	r2, #128	@ 0x80
 8006dd2:	589b      	ldr	r3, [r3, r2]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	2220      	movs	r2, #32
 8006dda:	4013      	ands	r3, r2
 8006ddc:	2b20      	cmp	r3, #32
 8006dde:	d000      	beq.n	8006de2 <HAL_UART_IRQHandler+0x47a>
 8006de0:	e0f9      	b.n	8006fd6 <HAL_UART_IRQHandler+0x66e>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2202      	movs	r2, #2
 8006de6:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	225c      	movs	r2, #92	@ 0x5c
 8006dec:	5a9a      	ldrh	r2, [r3, r2]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	0011      	movs	r1, r2
 8006df2:	0018      	movs	r0, r3
 8006df4:	f7fa fd38 	bl	8001868 <HAL_UARTEx_RxEventCallback>
      return;
 8006df8:	e0ed      	b.n	8006fd6 <HAL_UART_IRQHandler+0x66e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	225c      	movs	r2, #92	@ 0x5c
 8006dfe:	5a99      	ldrh	r1, [r3, r2]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	225e      	movs	r2, #94	@ 0x5e
 8006e04:	5a9b      	ldrh	r3, [r3, r2]
 8006e06:	b29a      	uxth	r2, r3
 8006e08:	208e      	movs	r0, #142	@ 0x8e
 8006e0a:	183b      	adds	r3, r7, r0
 8006e0c:	1a8a      	subs	r2, r1, r2
 8006e0e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	225e      	movs	r2, #94	@ 0x5e
 8006e14:	5a9b      	ldrh	r3, [r3, r2]
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d100      	bne.n	8006e1e <HAL_UART_IRQHandler+0x4b6>
 8006e1c:	e0dd      	b.n	8006fda <HAL_UART_IRQHandler+0x672>
          && (nb_rx_data > 0U))
 8006e1e:	183b      	adds	r3, r7, r0
 8006e20:	881b      	ldrh	r3, [r3, #0]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d100      	bne.n	8006e28 <HAL_UART_IRQHandler+0x4c0>
 8006e26:	e0d8      	b.n	8006fda <HAL_UART_IRQHandler+0x672>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006e28:	f3ef 8310 	mrs	r3, PRIMASK
 8006e2c:	60fb      	str	r3, [r7, #12]
  return(result);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e30:	2488      	movs	r4, #136	@ 0x88
 8006e32:	193a      	adds	r2, r7, r4
 8006e34:	6013      	str	r3, [r2, #0]
 8006e36:	2301      	movs	r3, #1
 8006e38:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	f383 8810 	msr	PRIMASK, r3
}
 8006e40:	46c0      	nop			@ (mov r8, r8)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4967      	ldr	r1, [pc, #412]	@ (8006fec <HAL_UART_IRQHandler+0x684>)
 8006e4e:	400a      	ands	r2, r1
 8006e50:	601a      	str	r2, [r3, #0]
 8006e52:	193b      	adds	r3, r7, r4
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	f383 8810 	msr	PRIMASK, r3
}
 8006e5e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006e60:	f3ef 8310 	mrs	r3, PRIMASK
 8006e64:	61bb      	str	r3, [r7, #24]
  return(result);
 8006e66:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006e68:	2484      	movs	r4, #132	@ 0x84
 8006e6a:	193a      	adds	r2, r7, r4
 8006e6c:	6013      	str	r3, [r2, #0]
 8006e6e:	2301      	movs	r3, #1
 8006e70:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e72:	69fb      	ldr	r3, [r7, #28]
 8006e74:	f383 8810 	msr	PRIMASK, r3
}
 8006e78:	46c0      	nop			@ (mov r8, r8)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	689a      	ldr	r2, [r3, #8]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	495a      	ldr	r1, [pc, #360]	@ (8006ff0 <HAL_UART_IRQHandler+0x688>)
 8006e86:	400a      	ands	r2, r1
 8006e88:	609a      	str	r2, [r3, #8]
 8006e8a:	193b      	adds	r3, r7, r4
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e90:	6a3b      	ldr	r3, [r7, #32]
 8006e92:	f383 8810 	msr	PRIMASK, r3
}
 8006e96:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	228c      	movs	r2, #140	@ 0x8c
 8006e9c:	2120      	movs	r1, #32
 8006e9e:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006eac:	f3ef 8310 	mrs	r3, PRIMASK
 8006eb0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8006eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006eb4:	2480      	movs	r4, #128	@ 0x80
 8006eb6:	193a      	adds	r2, r7, r4
 8006eb8:	6013      	str	r3, [r2, #0]
 8006eba:	2301      	movs	r3, #1
 8006ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ec0:	f383 8810 	msr	PRIMASK, r3
}
 8006ec4:	46c0      	nop			@ (mov r8, r8)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	2110      	movs	r1, #16
 8006ed2:	438a      	bics	r2, r1
 8006ed4:	601a      	str	r2, [r3, #0]
 8006ed6:	193b      	adds	r3, r7, r4
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ede:	f383 8810 	msr	PRIMASK, r3
}
 8006ee2:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2202      	movs	r2, #2
 8006ee8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006eea:	183b      	adds	r3, r7, r0
 8006eec:	881a      	ldrh	r2, [r3, #0]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	0011      	movs	r1, r2
 8006ef2:	0018      	movs	r0, r3
 8006ef4:	f7fa fcb8 	bl	8001868 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006ef8:	e06f      	b.n	8006fda <HAL_UART_IRQHandler+0x672>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006efa:	23a4      	movs	r3, #164	@ 0xa4
 8006efc:	18fb      	adds	r3, r7, r3
 8006efe:	681a      	ldr	r2, [r3, #0]
 8006f00:	2380      	movs	r3, #128	@ 0x80
 8006f02:	035b      	lsls	r3, r3, #13
 8006f04:	4013      	ands	r3, r2
 8006f06:	d010      	beq.n	8006f2a <HAL_UART_IRQHandler+0x5c2>
 8006f08:	239c      	movs	r3, #156	@ 0x9c
 8006f0a:	18fb      	adds	r3, r7, r3
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	2380      	movs	r3, #128	@ 0x80
 8006f10:	03db      	lsls	r3, r3, #15
 8006f12:	4013      	ands	r3, r2
 8006f14:	d009      	beq.n	8006f2a <HAL_UART_IRQHandler+0x5c2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2280      	movs	r2, #128	@ 0x80
 8006f1c:	0352      	lsls	r2, r2, #13
 8006f1e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	0018      	movs	r0, r3
 8006f24:	f000 ff24 	bl	8007d70 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006f28:	e05a      	b.n	8006fe0 <HAL_UART_IRQHandler+0x678>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006f2a:	23a4      	movs	r3, #164	@ 0xa4
 8006f2c:	18fb      	adds	r3, r7, r3
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	2280      	movs	r2, #128	@ 0x80
 8006f32:	4013      	ands	r3, r2
 8006f34:	d016      	beq.n	8006f64 <HAL_UART_IRQHandler+0x5fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006f36:	23a0      	movs	r3, #160	@ 0xa0
 8006f38:	18fb      	adds	r3, r7, r3
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	2280      	movs	r2, #128	@ 0x80
 8006f3e:	4013      	ands	r3, r2
 8006f40:	d106      	bne.n	8006f50 <HAL_UART_IRQHandler+0x5e8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006f42:	239c      	movs	r3, #156	@ 0x9c
 8006f44:	18fb      	adds	r3, r7, r3
 8006f46:	681a      	ldr	r2, [r3, #0]
 8006f48:	2380      	movs	r3, #128	@ 0x80
 8006f4a:	041b      	lsls	r3, r3, #16
 8006f4c:	4013      	ands	r3, r2
 8006f4e:	d009      	beq.n	8006f64 <HAL_UART_IRQHandler+0x5fc>
  {
    if (huart->TxISR != NULL)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d042      	beq.n	8006fde <HAL_UART_IRQHandler+0x676>
    {
      huart->TxISR(huart);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006f5c:	687a      	ldr	r2, [r7, #4]
 8006f5e:	0010      	movs	r0, r2
 8006f60:	4798      	blx	r3
    }
    return;
 8006f62:	e03c      	b.n	8006fde <HAL_UART_IRQHandler+0x676>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006f64:	23a4      	movs	r3, #164	@ 0xa4
 8006f66:	18fb      	adds	r3, r7, r3
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	2240      	movs	r2, #64	@ 0x40
 8006f6c:	4013      	ands	r3, r2
 8006f6e:	d00a      	beq.n	8006f86 <HAL_UART_IRQHandler+0x61e>
 8006f70:	23a0      	movs	r3, #160	@ 0xa0
 8006f72:	18fb      	adds	r3, r7, r3
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	2240      	movs	r2, #64	@ 0x40
 8006f78:	4013      	ands	r3, r2
 8006f7a:	d004      	beq.n	8006f86 <HAL_UART_IRQHandler+0x61e>
  {
    UART_EndTransmit_IT(huart);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	0018      	movs	r0, r3
 8006f80:	f000 fe57 	bl	8007c32 <UART_EndTransmit_IT>
    return;
 8006f84:	e02c      	b.n	8006fe0 <HAL_UART_IRQHandler+0x678>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006f86:	23a4      	movs	r3, #164	@ 0xa4
 8006f88:	18fb      	adds	r3, r7, r3
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	2380      	movs	r3, #128	@ 0x80
 8006f8e:	041b      	lsls	r3, r3, #16
 8006f90:	4013      	ands	r3, r2
 8006f92:	d00b      	beq.n	8006fac <HAL_UART_IRQHandler+0x644>
 8006f94:	23a0      	movs	r3, #160	@ 0xa0
 8006f96:	18fb      	adds	r3, r7, r3
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	2380      	movs	r3, #128	@ 0x80
 8006f9c:	05db      	lsls	r3, r3, #23
 8006f9e:	4013      	ands	r3, r2
 8006fa0:	d004      	beq.n	8006fac <HAL_UART_IRQHandler+0x644>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	0018      	movs	r0, r3
 8006fa6:	f000 fef3 	bl	8007d90 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006faa:	e019      	b.n	8006fe0 <HAL_UART_IRQHandler+0x678>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006fac:	23a4      	movs	r3, #164	@ 0xa4
 8006fae:	18fb      	adds	r3, r7, r3
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	2380      	movs	r3, #128	@ 0x80
 8006fb4:	045b      	lsls	r3, r3, #17
 8006fb6:	4013      	ands	r3, r2
 8006fb8:	d012      	beq.n	8006fe0 <HAL_UART_IRQHandler+0x678>
 8006fba:	23a0      	movs	r3, #160	@ 0xa0
 8006fbc:	18fb      	adds	r3, r7, r3
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	da0d      	bge.n	8006fe0 <HAL_UART_IRQHandler+0x678>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	0018      	movs	r0, r3
 8006fc8:	f000 feda 	bl	8007d80 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006fcc:	e008      	b.n	8006fe0 <HAL_UART_IRQHandler+0x678>
      return;
 8006fce:	46c0      	nop			@ (mov r8, r8)
 8006fd0:	e006      	b.n	8006fe0 <HAL_UART_IRQHandler+0x678>
    return;
 8006fd2:	46c0      	nop			@ (mov r8, r8)
 8006fd4:	e004      	b.n	8006fe0 <HAL_UART_IRQHandler+0x678>
      return;
 8006fd6:	46c0      	nop			@ (mov r8, r8)
 8006fd8:	e002      	b.n	8006fe0 <HAL_UART_IRQHandler+0x678>
      return;
 8006fda:	46c0      	nop			@ (mov r8, r8)
 8006fdc:	e000      	b.n	8006fe0 <HAL_UART_IRQHandler+0x678>
    return;
 8006fde:	46c0      	nop			@ (mov r8, r8)
  }
}
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	b02a      	add	sp, #168	@ 0xa8
 8006fe4:	bdb0      	pop	{r4, r5, r7, pc}
 8006fe6:	46c0      	nop			@ (mov r8, r8)
 8006fe8:	fffffeff 	.word	0xfffffeff
 8006fec:	fffffedf 	.word	0xfffffedf
 8006ff0:	effffffe 	.word	0xeffffffe

08006ff4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b082      	sub	sp, #8
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006ffc:	46c0      	nop			@ (mov r8, r8)
 8006ffe:	46bd      	mov	sp, r7
 8007000:	b002      	add	sp, #8
 8007002:	bd80      	pop	{r7, pc}

08007004 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b082      	sub	sp, #8
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800700c:	46c0      	nop			@ (mov r8, r8)
 800700e:	46bd      	mov	sp, r7
 8007010:	b002      	add	sp, #8
 8007012:	bd80      	pop	{r7, pc}

08007014 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b082      	sub	sp, #8
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800701c:	46c0      	nop			@ (mov r8, r8)
 800701e:	46bd      	mov	sp, r7
 8007020:	b002      	add	sp, #8
 8007022:	bd80      	pop	{r7, pc}

08007024 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b088      	sub	sp, #32
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800702c:	231e      	movs	r3, #30
 800702e:	18fb      	adds	r3, r7, r3
 8007030:	2200      	movs	r2, #0
 8007032:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	689a      	ldr	r2, [r3, #8]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	691b      	ldr	r3, [r3, #16]
 800703c:	431a      	orrs	r2, r3
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	695b      	ldr	r3, [r3, #20]
 8007042:	431a      	orrs	r2, r3
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	69db      	ldr	r3, [r3, #28]
 8007048:	4313      	orrs	r3, r2
 800704a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4aab      	ldr	r2, [pc, #684]	@ (8007300 <UART_SetConfig+0x2dc>)
 8007054:	4013      	ands	r3, r2
 8007056:	0019      	movs	r1, r3
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	697a      	ldr	r2, [r7, #20]
 800705e:	430a      	orrs	r2, r1
 8007060:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	4aa6      	ldr	r2, [pc, #664]	@ (8007304 <UART_SetConfig+0x2e0>)
 800706a:	4013      	ands	r3, r2
 800706c:	0019      	movs	r1, r3
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	68da      	ldr	r2, [r3, #12]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	430a      	orrs	r2, r1
 8007078:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	699b      	ldr	r3, [r3, #24]
 800707e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6a1b      	ldr	r3, [r3, #32]
 8007084:	697a      	ldr	r2, [r7, #20]
 8007086:	4313      	orrs	r3, r2
 8007088:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	4a9d      	ldr	r2, [pc, #628]	@ (8007308 <UART_SetConfig+0x2e4>)
 8007092:	4013      	ands	r3, r2
 8007094:	0019      	movs	r1, r3
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	697a      	ldr	r2, [r7, #20]
 800709c:	430a      	orrs	r2, r1
 800709e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070a6:	220f      	movs	r2, #15
 80070a8:	4393      	bics	r3, r2
 80070aa:	0019      	movs	r1, r3
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	430a      	orrs	r2, r1
 80070b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a93      	ldr	r2, [pc, #588]	@ (800730c <UART_SetConfig+0x2e8>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d127      	bne.n	8007112 <UART_SetConfig+0xee>
 80070c2:	4b93      	ldr	r3, [pc, #588]	@ (8007310 <UART_SetConfig+0x2ec>)
 80070c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070c6:	2203      	movs	r2, #3
 80070c8:	4013      	ands	r3, r2
 80070ca:	2b03      	cmp	r3, #3
 80070cc:	d017      	beq.n	80070fe <UART_SetConfig+0xda>
 80070ce:	d81b      	bhi.n	8007108 <UART_SetConfig+0xe4>
 80070d0:	2b02      	cmp	r3, #2
 80070d2:	d00a      	beq.n	80070ea <UART_SetConfig+0xc6>
 80070d4:	d818      	bhi.n	8007108 <UART_SetConfig+0xe4>
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d002      	beq.n	80070e0 <UART_SetConfig+0xbc>
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d00a      	beq.n	80070f4 <UART_SetConfig+0xd0>
 80070de:	e013      	b.n	8007108 <UART_SetConfig+0xe4>
 80070e0:	231f      	movs	r3, #31
 80070e2:	18fb      	adds	r3, r7, r3
 80070e4:	2200      	movs	r2, #0
 80070e6:	701a      	strb	r2, [r3, #0]
 80070e8:	e021      	b.n	800712e <UART_SetConfig+0x10a>
 80070ea:	231f      	movs	r3, #31
 80070ec:	18fb      	adds	r3, r7, r3
 80070ee:	2202      	movs	r2, #2
 80070f0:	701a      	strb	r2, [r3, #0]
 80070f2:	e01c      	b.n	800712e <UART_SetConfig+0x10a>
 80070f4:	231f      	movs	r3, #31
 80070f6:	18fb      	adds	r3, r7, r3
 80070f8:	2204      	movs	r2, #4
 80070fa:	701a      	strb	r2, [r3, #0]
 80070fc:	e017      	b.n	800712e <UART_SetConfig+0x10a>
 80070fe:	231f      	movs	r3, #31
 8007100:	18fb      	adds	r3, r7, r3
 8007102:	2208      	movs	r2, #8
 8007104:	701a      	strb	r2, [r3, #0]
 8007106:	e012      	b.n	800712e <UART_SetConfig+0x10a>
 8007108:	231f      	movs	r3, #31
 800710a:	18fb      	adds	r3, r7, r3
 800710c:	2210      	movs	r2, #16
 800710e:	701a      	strb	r2, [r3, #0]
 8007110:	e00d      	b.n	800712e <UART_SetConfig+0x10a>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a7f      	ldr	r2, [pc, #508]	@ (8007314 <UART_SetConfig+0x2f0>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d104      	bne.n	8007126 <UART_SetConfig+0x102>
 800711c:	231f      	movs	r3, #31
 800711e:	18fb      	adds	r3, r7, r3
 8007120:	2200      	movs	r2, #0
 8007122:	701a      	strb	r2, [r3, #0]
 8007124:	e003      	b.n	800712e <UART_SetConfig+0x10a>
 8007126:	231f      	movs	r3, #31
 8007128:	18fb      	adds	r3, r7, r3
 800712a:	2210      	movs	r2, #16
 800712c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	69da      	ldr	r2, [r3, #28]
 8007132:	2380      	movs	r3, #128	@ 0x80
 8007134:	021b      	lsls	r3, r3, #8
 8007136:	429a      	cmp	r2, r3
 8007138:	d000      	beq.n	800713c <UART_SetConfig+0x118>
 800713a:	e06f      	b.n	800721c <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 800713c:	231f      	movs	r3, #31
 800713e:	18fb      	adds	r3, r7, r3
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	2b08      	cmp	r3, #8
 8007144:	d01f      	beq.n	8007186 <UART_SetConfig+0x162>
 8007146:	dc22      	bgt.n	800718e <UART_SetConfig+0x16a>
 8007148:	2b04      	cmp	r3, #4
 800714a:	d017      	beq.n	800717c <UART_SetConfig+0x158>
 800714c:	dc1f      	bgt.n	800718e <UART_SetConfig+0x16a>
 800714e:	2b00      	cmp	r3, #0
 8007150:	d002      	beq.n	8007158 <UART_SetConfig+0x134>
 8007152:	2b02      	cmp	r3, #2
 8007154:	d005      	beq.n	8007162 <UART_SetConfig+0x13e>
 8007156:	e01a      	b.n	800718e <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007158:	f7fe fa88 	bl	800566c <HAL_RCC_GetPCLK1Freq>
 800715c:	0003      	movs	r3, r0
 800715e:	61bb      	str	r3, [r7, #24]
        break;
 8007160:	e01c      	b.n	800719c <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8007162:	4b6b      	ldr	r3, [pc, #428]	@ (8007310 <UART_SetConfig+0x2ec>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	095b      	lsrs	r3, r3, #5
 8007168:	2207      	movs	r2, #7
 800716a:	4013      	ands	r3, r2
 800716c:	3301      	adds	r3, #1
 800716e:	0019      	movs	r1, r3
 8007170:	4869      	ldr	r0, [pc, #420]	@ (8007318 <UART_SetConfig+0x2f4>)
 8007172:	f7f8 ffc9 	bl	8000108 <__udivsi3>
 8007176:	0003      	movs	r3, r0
 8007178:	61bb      	str	r3, [r7, #24]
        break;
 800717a:	e00f      	b.n	800719c <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800717c:	f7fe fa00 	bl	8005580 <HAL_RCC_GetSysClockFreq>
 8007180:	0003      	movs	r3, r0
 8007182:	61bb      	str	r3, [r7, #24]
        break;
 8007184:	e00a      	b.n	800719c <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007186:	2380      	movs	r3, #128	@ 0x80
 8007188:	021b      	lsls	r3, r3, #8
 800718a:	61bb      	str	r3, [r7, #24]
        break;
 800718c:	e006      	b.n	800719c <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 800718e:	2300      	movs	r3, #0
 8007190:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007192:	231e      	movs	r3, #30
 8007194:	18fb      	adds	r3, r7, r3
 8007196:	2201      	movs	r2, #1
 8007198:	701a      	strb	r2, [r3, #0]
        break;
 800719a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800719c:	69bb      	ldr	r3, [r7, #24]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d100      	bne.n	80071a4 <UART_SetConfig+0x180>
 80071a2:	e097      	b.n	80072d4 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80071a8:	4b5c      	ldr	r3, [pc, #368]	@ (800731c <UART_SetConfig+0x2f8>)
 80071aa:	0052      	lsls	r2, r2, #1
 80071ac:	5ad3      	ldrh	r3, [r2, r3]
 80071ae:	0019      	movs	r1, r3
 80071b0:	69b8      	ldr	r0, [r7, #24]
 80071b2:	f7f8 ffa9 	bl	8000108 <__udivsi3>
 80071b6:	0003      	movs	r3, r0
 80071b8:	005a      	lsls	r2, r3, #1
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	085b      	lsrs	r3, r3, #1
 80071c0:	18d2      	adds	r2, r2, r3
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	0019      	movs	r1, r3
 80071c8:	0010      	movs	r0, r2
 80071ca:	f7f8 ff9d 	bl	8000108 <__udivsi3>
 80071ce:	0003      	movs	r3, r0
 80071d0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	2b0f      	cmp	r3, #15
 80071d6:	d91c      	bls.n	8007212 <UART_SetConfig+0x1ee>
 80071d8:	693a      	ldr	r2, [r7, #16]
 80071da:	2380      	movs	r3, #128	@ 0x80
 80071dc:	025b      	lsls	r3, r3, #9
 80071de:	429a      	cmp	r2, r3
 80071e0:	d217      	bcs.n	8007212 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	b29a      	uxth	r2, r3
 80071e6:	200e      	movs	r0, #14
 80071e8:	183b      	adds	r3, r7, r0
 80071ea:	210f      	movs	r1, #15
 80071ec:	438a      	bics	r2, r1
 80071ee:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	085b      	lsrs	r3, r3, #1
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	2207      	movs	r2, #7
 80071f8:	4013      	ands	r3, r2
 80071fa:	b299      	uxth	r1, r3
 80071fc:	183b      	adds	r3, r7, r0
 80071fe:	183a      	adds	r2, r7, r0
 8007200:	8812      	ldrh	r2, [r2, #0]
 8007202:	430a      	orrs	r2, r1
 8007204:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	183a      	adds	r2, r7, r0
 800720c:	8812      	ldrh	r2, [r2, #0]
 800720e:	60da      	str	r2, [r3, #12]
 8007210:	e060      	b.n	80072d4 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8007212:	231e      	movs	r3, #30
 8007214:	18fb      	adds	r3, r7, r3
 8007216:	2201      	movs	r2, #1
 8007218:	701a      	strb	r2, [r3, #0]
 800721a:	e05b      	b.n	80072d4 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800721c:	231f      	movs	r3, #31
 800721e:	18fb      	adds	r3, r7, r3
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	2b08      	cmp	r3, #8
 8007224:	d01f      	beq.n	8007266 <UART_SetConfig+0x242>
 8007226:	dc22      	bgt.n	800726e <UART_SetConfig+0x24a>
 8007228:	2b04      	cmp	r3, #4
 800722a:	d017      	beq.n	800725c <UART_SetConfig+0x238>
 800722c:	dc1f      	bgt.n	800726e <UART_SetConfig+0x24a>
 800722e:	2b00      	cmp	r3, #0
 8007230:	d002      	beq.n	8007238 <UART_SetConfig+0x214>
 8007232:	2b02      	cmp	r3, #2
 8007234:	d005      	beq.n	8007242 <UART_SetConfig+0x21e>
 8007236:	e01a      	b.n	800726e <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007238:	f7fe fa18 	bl	800566c <HAL_RCC_GetPCLK1Freq>
 800723c:	0003      	movs	r3, r0
 800723e:	61bb      	str	r3, [r7, #24]
        break;
 8007240:	e01c      	b.n	800727c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8007242:	4b33      	ldr	r3, [pc, #204]	@ (8007310 <UART_SetConfig+0x2ec>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	095b      	lsrs	r3, r3, #5
 8007248:	2207      	movs	r2, #7
 800724a:	4013      	ands	r3, r2
 800724c:	3301      	adds	r3, #1
 800724e:	0019      	movs	r1, r3
 8007250:	4831      	ldr	r0, [pc, #196]	@ (8007318 <UART_SetConfig+0x2f4>)
 8007252:	f7f8 ff59 	bl	8000108 <__udivsi3>
 8007256:	0003      	movs	r3, r0
 8007258:	61bb      	str	r3, [r7, #24]
        break;
 800725a:	e00f      	b.n	800727c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800725c:	f7fe f990 	bl	8005580 <HAL_RCC_GetSysClockFreq>
 8007260:	0003      	movs	r3, r0
 8007262:	61bb      	str	r3, [r7, #24]
        break;
 8007264:	e00a      	b.n	800727c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007266:	2380      	movs	r3, #128	@ 0x80
 8007268:	021b      	lsls	r3, r3, #8
 800726a:	61bb      	str	r3, [r7, #24]
        break;
 800726c:	e006      	b.n	800727c <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 800726e:	2300      	movs	r3, #0
 8007270:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007272:	231e      	movs	r3, #30
 8007274:	18fb      	adds	r3, r7, r3
 8007276:	2201      	movs	r2, #1
 8007278:	701a      	strb	r2, [r3, #0]
        break;
 800727a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800727c:	69bb      	ldr	r3, [r7, #24]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d028      	beq.n	80072d4 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007286:	4b25      	ldr	r3, [pc, #148]	@ (800731c <UART_SetConfig+0x2f8>)
 8007288:	0052      	lsls	r2, r2, #1
 800728a:	5ad3      	ldrh	r3, [r2, r3]
 800728c:	0019      	movs	r1, r3
 800728e:	69b8      	ldr	r0, [r7, #24]
 8007290:	f7f8 ff3a 	bl	8000108 <__udivsi3>
 8007294:	0003      	movs	r3, r0
 8007296:	001a      	movs	r2, r3
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	085b      	lsrs	r3, r3, #1
 800729e:	18d2      	adds	r2, r2, r3
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	0019      	movs	r1, r3
 80072a6:	0010      	movs	r0, r2
 80072a8:	f7f8 ff2e 	bl	8000108 <__udivsi3>
 80072ac:	0003      	movs	r3, r0
 80072ae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	2b0f      	cmp	r3, #15
 80072b4:	d90a      	bls.n	80072cc <UART_SetConfig+0x2a8>
 80072b6:	693a      	ldr	r2, [r7, #16]
 80072b8:	2380      	movs	r3, #128	@ 0x80
 80072ba:	025b      	lsls	r3, r3, #9
 80072bc:	429a      	cmp	r2, r3
 80072be:	d205      	bcs.n	80072cc <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	b29a      	uxth	r2, r3
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	60da      	str	r2, [r3, #12]
 80072ca:	e003      	b.n	80072d4 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 80072cc:	231e      	movs	r3, #30
 80072ce:	18fb      	adds	r3, r7, r3
 80072d0:	2201      	movs	r2, #1
 80072d2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	226a      	movs	r2, #106	@ 0x6a
 80072d8:	2101      	movs	r1, #1
 80072da:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2268      	movs	r2, #104	@ 0x68
 80072e0:	2101      	movs	r1, #1
 80072e2:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2200      	movs	r2, #0
 80072e8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2200      	movs	r2, #0
 80072ee:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80072f0:	231e      	movs	r3, #30
 80072f2:	18fb      	adds	r3, r7, r3
 80072f4:	781b      	ldrb	r3, [r3, #0]
}
 80072f6:	0018      	movs	r0, r3
 80072f8:	46bd      	mov	sp, r7
 80072fa:	b008      	add	sp, #32
 80072fc:	bd80      	pop	{r7, pc}
 80072fe:	46c0      	nop			@ (mov r8, r8)
 8007300:	cfff69f3 	.word	0xcfff69f3
 8007304:	ffffcfff 	.word	0xffffcfff
 8007308:	11fff4ff 	.word	0x11fff4ff
 800730c:	40013800 	.word	0x40013800
 8007310:	40021000 	.word	0x40021000
 8007314:	40004400 	.word	0x40004400
 8007318:	02dc6c00 	.word	0x02dc6c00
 800731c:	080088c4 	.word	0x080088c4

08007320 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b082      	sub	sp, #8
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800732c:	2208      	movs	r2, #8
 800732e:	4013      	ands	r3, r2
 8007330:	d00b      	beq.n	800734a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	4a4a      	ldr	r2, [pc, #296]	@ (8007464 <UART_AdvFeatureConfig+0x144>)
 800733a:	4013      	ands	r3, r2
 800733c:	0019      	movs	r1, r3
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	430a      	orrs	r2, r1
 8007348:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800734e:	2201      	movs	r2, #1
 8007350:	4013      	ands	r3, r2
 8007352:	d00b      	beq.n	800736c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	4a43      	ldr	r2, [pc, #268]	@ (8007468 <UART_AdvFeatureConfig+0x148>)
 800735c:	4013      	ands	r3, r2
 800735e:	0019      	movs	r1, r3
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	430a      	orrs	r2, r1
 800736a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007370:	2202      	movs	r2, #2
 8007372:	4013      	ands	r3, r2
 8007374:	d00b      	beq.n	800738e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	4a3b      	ldr	r2, [pc, #236]	@ (800746c <UART_AdvFeatureConfig+0x14c>)
 800737e:	4013      	ands	r3, r2
 8007380:	0019      	movs	r1, r3
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	430a      	orrs	r2, r1
 800738c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007392:	2204      	movs	r2, #4
 8007394:	4013      	ands	r3, r2
 8007396:	d00b      	beq.n	80073b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	4a34      	ldr	r2, [pc, #208]	@ (8007470 <UART_AdvFeatureConfig+0x150>)
 80073a0:	4013      	ands	r3, r2
 80073a2:	0019      	movs	r1, r3
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	430a      	orrs	r2, r1
 80073ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073b4:	2210      	movs	r2, #16
 80073b6:	4013      	ands	r3, r2
 80073b8:	d00b      	beq.n	80073d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	4a2c      	ldr	r2, [pc, #176]	@ (8007474 <UART_AdvFeatureConfig+0x154>)
 80073c2:	4013      	ands	r3, r2
 80073c4:	0019      	movs	r1, r3
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	430a      	orrs	r2, r1
 80073d0:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073d6:	2220      	movs	r2, #32
 80073d8:	4013      	ands	r3, r2
 80073da:	d00b      	beq.n	80073f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	689b      	ldr	r3, [r3, #8]
 80073e2:	4a25      	ldr	r2, [pc, #148]	@ (8007478 <UART_AdvFeatureConfig+0x158>)
 80073e4:	4013      	ands	r3, r2
 80073e6:	0019      	movs	r1, r3
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	430a      	orrs	r2, r1
 80073f2:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073f8:	2240      	movs	r2, #64	@ 0x40
 80073fa:	4013      	ands	r3, r2
 80073fc:	d01d      	beq.n	800743a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	4a1d      	ldr	r2, [pc, #116]	@ (800747c <UART_AdvFeatureConfig+0x15c>)
 8007406:	4013      	ands	r3, r2
 8007408:	0019      	movs	r1, r3
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	430a      	orrs	r2, r1
 8007414:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800741a:	2380      	movs	r3, #128	@ 0x80
 800741c:	035b      	lsls	r3, r3, #13
 800741e:	429a      	cmp	r2, r3
 8007420:	d10b      	bne.n	800743a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	4a15      	ldr	r2, [pc, #84]	@ (8007480 <UART_AdvFeatureConfig+0x160>)
 800742a:	4013      	ands	r3, r2
 800742c:	0019      	movs	r1, r3
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	430a      	orrs	r2, r1
 8007438:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800743e:	2280      	movs	r2, #128	@ 0x80
 8007440:	4013      	ands	r3, r2
 8007442:	d00b      	beq.n	800745c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	4a0e      	ldr	r2, [pc, #56]	@ (8007484 <UART_AdvFeatureConfig+0x164>)
 800744c:	4013      	ands	r3, r2
 800744e:	0019      	movs	r1, r3
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	430a      	orrs	r2, r1
 800745a:	605a      	str	r2, [r3, #4]
  }
}
 800745c:	46c0      	nop			@ (mov r8, r8)
 800745e:	46bd      	mov	sp, r7
 8007460:	b002      	add	sp, #8
 8007462:	bd80      	pop	{r7, pc}
 8007464:	ffff7fff 	.word	0xffff7fff
 8007468:	fffdffff 	.word	0xfffdffff
 800746c:	fffeffff 	.word	0xfffeffff
 8007470:	fffbffff 	.word	0xfffbffff
 8007474:	ffffefff 	.word	0xffffefff
 8007478:	ffffdfff 	.word	0xffffdfff
 800747c:	ffefffff 	.word	0xffefffff
 8007480:	ff9fffff 	.word	0xff9fffff
 8007484:	fff7ffff 	.word	0xfff7ffff

08007488 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b092      	sub	sp, #72	@ 0x48
 800748c:	af02      	add	r7, sp, #8
 800748e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2290      	movs	r2, #144	@ 0x90
 8007494:	2100      	movs	r1, #0
 8007496:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007498:	f7fb fe36 	bl	8003108 <HAL_GetTick>
 800749c:	0003      	movs	r3, r0
 800749e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	2208      	movs	r2, #8
 80074a8:	4013      	ands	r3, r2
 80074aa:	2b08      	cmp	r3, #8
 80074ac:	d12d      	bne.n	800750a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074b0:	2280      	movs	r2, #128	@ 0x80
 80074b2:	0391      	lsls	r1, r2, #14
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	4a47      	ldr	r2, [pc, #284]	@ (80075d4 <UART_CheckIdleState+0x14c>)
 80074b8:	9200      	str	r2, [sp, #0]
 80074ba:	2200      	movs	r2, #0
 80074bc:	f000 f88e 	bl	80075dc <UART_WaitOnFlagUntilTimeout>
 80074c0:	1e03      	subs	r3, r0, #0
 80074c2:	d022      	beq.n	800750a <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80074c4:	f3ef 8310 	mrs	r3, PRIMASK
 80074c8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80074ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80074cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80074ce:	2301      	movs	r3, #1
 80074d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074d4:	f383 8810 	msr	PRIMASK, r3
}
 80074d8:	46c0      	nop			@ (mov r8, r8)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	681a      	ldr	r2, [r3, #0]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	2180      	movs	r1, #128	@ 0x80
 80074e6:	438a      	bics	r2, r1
 80074e8:	601a      	str	r2, [r3, #0]
 80074ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074f0:	f383 8810 	msr	PRIMASK, r3
}
 80074f4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2288      	movs	r2, #136	@ 0x88
 80074fa:	2120      	movs	r1, #32
 80074fc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2284      	movs	r2, #132	@ 0x84
 8007502:	2100      	movs	r1, #0
 8007504:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007506:	2303      	movs	r3, #3
 8007508:	e060      	b.n	80075cc <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	2204      	movs	r2, #4
 8007512:	4013      	ands	r3, r2
 8007514:	2b04      	cmp	r3, #4
 8007516:	d146      	bne.n	80075a6 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007518:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800751a:	2280      	movs	r2, #128	@ 0x80
 800751c:	03d1      	lsls	r1, r2, #15
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	4a2c      	ldr	r2, [pc, #176]	@ (80075d4 <UART_CheckIdleState+0x14c>)
 8007522:	9200      	str	r2, [sp, #0]
 8007524:	2200      	movs	r2, #0
 8007526:	f000 f859 	bl	80075dc <UART_WaitOnFlagUntilTimeout>
 800752a:	1e03      	subs	r3, r0, #0
 800752c:	d03b      	beq.n	80075a6 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800752e:	f3ef 8310 	mrs	r3, PRIMASK
 8007532:	60fb      	str	r3, [r7, #12]
  return(result);
 8007534:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007536:	637b      	str	r3, [r7, #52]	@ 0x34
 8007538:	2301      	movs	r3, #1
 800753a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	f383 8810 	msr	PRIMASK, r3
}
 8007542:	46c0      	nop			@ (mov r8, r8)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4922      	ldr	r1, [pc, #136]	@ (80075d8 <UART_CheckIdleState+0x150>)
 8007550:	400a      	ands	r2, r1
 8007552:	601a      	str	r2, [r3, #0]
 8007554:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007556:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	f383 8810 	msr	PRIMASK, r3
}
 800755e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007560:	f3ef 8310 	mrs	r3, PRIMASK
 8007564:	61bb      	str	r3, [r7, #24]
  return(result);
 8007566:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007568:	633b      	str	r3, [r7, #48]	@ 0x30
 800756a:	2301      	movs	r3, #1
 800756c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800756e:	69fb      	ldr	r3, [r7, #28]
 8007570:	f383 8810 	msr	PRIMASK, r3
}
 8007574:	46c0      	nop			@ (mov r8, r8)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	689a      	ldr	r2, [r3, #8]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	2101      	movs	r1, #1
 8007582:	438a      	bics	r2, r1
 8007584:	609a      	str	r2, [r3, #8]
 8007586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007588:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800758a:	6a3b      	ldr	r3, [r7, #32]
 800758c:	f383 8810 	msr	PRIMASK, r3
}
 8007590:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	228c      	movs	r2, #140	@ 0x8c
 8007596:	2120      	movs	r1, #32
 8007598:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2284      	movs	r2, #132	@ 0x84
 800759e:	2100      	movs	r1, #0
 80075a0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075a2:	2303      	movs	r3, #3
 80075a4:	e012      	b.n	80075cc <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2288      	movs	r2, #136	@ 0x88
 80075aa:	2120      	movs	r1, #32
 80075ac:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	228c      	movs	r2, #140	@ 0x8c
 80075b2:	2120      	movs	r1, #32
 80075b4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2200      	movs	r2, #0
 80075ba:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2284      	movs	r2, #132	@ 0x84
 80075c6:	2100      	movs	r1, #0
 80075c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80075ca:	2300      	movs	r3, #0
}
 80075cc:	0018      	movs	r0, r3
 80075ce:	46bd      	mov	sp, r7
 80075d0:	b010      	add	sp, #64	@ 0x40
 80075d2:	bd80      	pop	{r7, pc}
 80075d4:	01ffffff 	.word	0x01ffffff
 80075d8:	fffffedf 	.word	0xfffffedf

080075dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	60f8      	str	r0, [r7, #12]
 80075e4:	60b9      	str	r1, [r7, #8]
 80075e6:	603b      	str	r3, [r7, #0]
 80075e8:	1dfb      	adds	r3, r7, #7
 80075ea:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075ec:	e051      	b.n	8007692 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075ee:	69bb      	ldr	r3, [r7, #24]
 80075f0:	3301      	adds	r3, #1
 80075f2:	d04e      	beq.n	8007692 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075f4:	f7fb fd88 	bl	8003108 <HAL_GetTick>
 80075f8:	0002      	movs	r2, r0
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	1ad3      	subs	r3, r2, r3
 80075fe:	69ba      	ldr	r2, [r7, #24]
 8007600:	429a      	cmp	r2, r3
 8007602:	d302      	bcc.n	800760a <UART_WaitOnFlagUntilTimeout+0x2e>
 8007604:	69bb      	ldr	r3, [r7, #24]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d101      	bne.n	800760e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800760a:	2303      	movs	r3, #3
 800760c:	e051      	b.n	80076b2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	2204      	movs	r2, #4
 8007616:	4013      	ands	r3, r2
 8007618:	d03b      	beq.n	8007692 <UART_WaitOnFlagUntilTimeout+0xb6>
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	2b80      	cmp	r3, #128	@ 0x80
 800761e:	d038      	beq.n	8007692 <UART_WaitOnFlagUntilTimeout+0xb6>
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	2b40      	cmp	r3, #64	@ 0x40
 8007624:	d035      	beq.n	8007692 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	69db      	ldr	r3, [r3, #28]
 800762c:	2208      	movs	r2, #8
 800762e:	4013      	ands	r3, r2
 8007630:	2b08      	cmp	r3, #8
 8007632:	d111      	bne.n	8007658 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	2208      	movs	r2, #8
 800763a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	0018      	movs	r0, r3
 8007640:	f000 f922 	bl	8007888 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2290      	movs	r2, #144	@ 0x90
 8007648:	2108      	movs	r1, #8
 800764a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2284      	movs	r2, #132	@ 0x84
 8007650:	2100      	movs	r1, #0
 8007652:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007654:	2301      	movs	r3, #1
 8007656:	e02c      	b.n	80076b2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	69da      	ldr	r2, [r3, #28]
 800765e:	2380      	movs	r3, #128	@ 0x80
 8007660:	011b      	lsls	r3, r3, #4
 8007662:	401a      	ands	r2, r3
 8007664:	2380      	movs	r3, #128	@ 0x80
 8007666:	011b      	lsls	r3, r3, #4
 8007668:	429a      	cmp	r2, r3
 800766a:	d112      	bne.n	8007692 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	2280      	movs	r2, #128	@ 0x80
 8007672:	0112      	lsls	r2, r2, #4
 8007674:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	0018      	movs	r0, r3
 800767a:	f000 f905 	bl	8007888 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2290      	movs	r2, #144	@ 0x90
 8007682:	2120      	movs	r1, #32
 8007684:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2284      	movs	r2, #132	@ 0x84
 800768a:	2100      	movs	r1, #0
 800768c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800768e:	2303      	movs	r3, #3
 8007690:	e00f      	b.n	80076b2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	69db      	ldr	r3, [r3, #28]
 8007698:	68ba      	ldr	r2, [r7, #8]
 800769a:	4013      	ands	r3, r2
 800769c:	68ba      	ldr	r2, [r7, #8]
 800769e:	1ad3      	subs	r3, r2, r3
 80076a0:	425a      	negs	r2, r3
 80076a2:	4153      	adcs	r3, r2
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	001a      	movs	r2, r3
 80076a8:	1dfb      	adds	r3, r7, #7
 80076aa:	781b      	ldrb	r3, [r3, #0]
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d09e      	beq.n	80075ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80076b0:	2300      	movs	r3, #0
}
 80076b2:	0018      	movs	r0, r3
 80076b4:	46bd      	mov	sp, r7
 80076b6:	b004      	add	sp, #16
 80076b8:	bd80      	pop	{r7, pc}
	...

080076bc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b090      	sub	sp, #64	@ 0x40
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	60f8      	str	r0, [r7, #12]
 80076c4:	60b9      	str	r1, [r7, #8]
 80076c6:	1dbb      	adds	r3, r7, #6
 80076c8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	68ba      	ldr	r2, [r7, #8]
 80076ce:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	1dba      	adds	r2, r7, #6
 80076d4:	215c      	movs	r1, #92	@ 0x5c
 80076d6:	8812      	ldrh	r2, [r2, #0]
 80076d8:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2290      	movs	r2, #144	@ 0x90
 80076de:	2100      	movs	r1, #0
 80076e0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	228c      	movs	r2, #140	@ 0x8c
 80076e6:	2122      	movs	r1, #34	@ 0x22
 80076e8:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2280      	movs	r2, #128	@ 0x80
 80076ee:	589b      	ldr	r3, [r3, r2]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d02d      	beq.n	8007750 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2280      	movs	r2, #128	@ 0x80
 80076f8:	589b      	ldr	r3, [r3, r2]
 80076fa:	4a40      	ldr	r2, [pc, #256]	@ (80077fc <UART_Start_Receive_DMA+0x140>)
 80076fc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2280      	movs	r2, #128	@ 0x80
 8007702:	589b      	ldr	r3, [r3, r2]
 8007704:	4a3e      	ldr	r2, [pc, #248]	@ (8007800 <UART_Start_Receive_DMA+0x144>)
 8007706:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2280      	movs	r2, #128	@ 0x80
 800770c:	589b      	ldr	r3, [r3, r2]
 800770e:	4a3d      	ldr	r2, [pc, #244]	@ (8007804 <UART_Start_Receive_DMA+0x148>)
 8007710:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2280      	movs	r2, #128	@ 0x80
 8007716:	589b      	ldr	r3, [r3, r2]
 8007718:	2200      	movs	r2, #0
 800771a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2280      	movs	r2, #128	@ 0x80
 8007720:	5898      	ldr	r0, [r3, r2]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	3324      	adds	r3, #36	@ 0x24
 8007728:	0019      	movs	r1, r3
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800772e:	001a      	movs	r2, r3
 8007730:	1dbb      	adds	r3, r7, #6
 8007732:	881b      	ldrh	r3, [r3, #0]
 8007734:	f7fb ff28 	bl	8003588 <HAL_DMA_Start_IT>
 8007738:	1e03      	subs	r3, r0, #0
 800773a:	d009      	beq.n	8007750 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2290      	movs	r2, #144	@ 0x90
 8007740:	2110      	movs	r1, #16
 8007742:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	228c      	movs	r2, #140	@ 0x8c
 8007748:	2120      	movs	r1, #32
 800774a:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 800774c:	2301      	movs	r3, #1
 800774e:	e050      	b.n	80077f2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	691b      	ldr	r3, [r3, #16]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d019      	beq.n	800778c <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007758:	f3ef 8310 	mrs	r3, PRIMASK
 800775c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800775e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007760:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007762:	2301      	movs	r3, #1
 8007764:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007768:	f383 8810 	msr	PRIMASK, r3
}
 800776c:	46c0      	nop			@ (mov r8, r8)
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	2180      	movs	r1, #128	@ 0x80
 800777a:	0049      	lsls	r1, r1, #1
 800777c:	430a      	orrs	r2, r1
 800777e:	601a      	str	r2, [r3, #0]
 8007780:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007782:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007786:	f383 8810 	msr	PRIMASK, r3
}
 800778a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800778c:	f3ef 8310 	mrs	r3, PRIMASK
 8007790:	613b      	str	r3, [r7, #16]
  return(result);
 8007792:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007794:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007796:	2301      	movs	r3, #1
 8007798:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	f383 8810 	msr	PRIMASK, r3
}
 80077a0:	46c0      	nop			@ (mov r8, r8)
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	689a      	ldr	r2, [r3, #8]
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	2101      	movs	r1, #1
 80077ae:	430a      	orrs	r2, r1
 80077b0:	609a      	str	r2, [r3, #8]
 80077b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077b4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077b6:	69bb      	ldr	r3, [r7, #24]
 80077b8:	f383 8810 	msr	PRIMASK, r3
}
 80077bc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80077be:	f3ef 8310 	mrs	r3, PRIMASK
 80077c2:	61fb      	str	r3, [r7, #28]
  return(result);
 80077c4:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80077c8:	2301      	movs	r3, #1
 80077ca:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077cc:	6a3b      	ldr	r3, [r7, #32]
 80077ce:	f383 8810 	msr	PRIMASK, r3
}
 80077d2:	46c0      	nop			@ (mov r8, r8)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	689a      	ldr	r2, [r3, #8]
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	2140      	movs	r1, #64	@ 0x40
 80077e0:	430a      	orrs	r2, r1
 80077e2:	609a      	str	r2, [r3, #8]
 80077e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077e6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ea:	f383 8810 	msr	PRIMASK, r3
}
 80077ee:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 80077f0:	2300      	movs	r3, #0
}
 80077f2:	0018      	movs	r0, r3
 80077f4:	46bd      	mov	sp, r7
 80077f6:	b010      	add	sp, #64	@ 0x40
 80077f8:	bd80      	pop	{r7, pc}
 80077fa:	46c0      	nop			@ (mov r8, r8)
 80077fc:	08007a0d 	.word	0x08007a0d
 8007800:	08007b3d 	.word	0x08007b3d
 8007804:	08007b7f 	.word	0x08007b7f

08007808 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b08a      	sub	sp, #40	@ 0x28
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007810:	f3ef 8310 	mrs	r3, PRIMASK
 8007814:	60bb      	str	r3, [r7, #8]
  return(result);
 8007816:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007818:	627b      	str	r3, [r7, #36]	@ 0x24
 800781a:	2301      	movs	r3, #1
 800781c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f383 8810 	msr	PRIMASK, r3
}
 8007824:	46c0      	nop			@ (mov r8, r8)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	681a      	ldr	r2, [r3, #0]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	21c0      	movs	r1, #192	@ 0xc0
 8007832:	438a      	bics	r2, r1
 8007834:	601a      	str	r2, [r3, #0]
 8007836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007838:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	f383 8810 	msr	PRIMASK, r3
}
 8007840:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007842:	f3ef 8310 	mrs	r3, PRIMASK
 8007846:	617b      	str	r3, [r7, #20]
  return(result);
 8007848:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800784a:	623b      	str	r3, [r7, #32]
 800784c:	2301      	movs	r3, #1
 800784e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007850:	69bb      	ldr	r3, [r7, #24]
 8007852:	f383 8810 	msr	PRIMASK, r3
}
 8007856:	46c0      	nop			@ (mov r8, r8)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	689a      	ldr	r2, [r3, #8]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4908      	ldr	r1, [pc, #32]	@ (8007884 <UART_EndTxTransfer+0x7c>)
 8007864:	400a      	ands	r2, r1
 8007866:	609a      	str	r2, [r3, #8]
 8007868:	6a3b      	ldr	r3, [r7, #32]
 800786a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800786c:	69fb      	ldr	r3, [r7, #28]
 800786e:	f383 8810 	msr	PRIMASK, r3
}
 8007872:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2288      	movs	r2, #136	@ 0x88
 8007878:	2120      	movs	r1, #32
 800787a:	5099      	str	r1, [r3, r2]
}
 800787c:	46c0      	nop			@ (mov r8, r8)
 800787e:	46bd      	mov	sp, r7
 8007880:	b00a      	add	sp, #40	@ 0x28
 8007882:	bd80      	pop	{r7, pc}
 8007884:	ff7fffff 	.word	0xff7fffff

08007888 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b08e      	sub	sp, #56	@ 0x38
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007890:	f3ef 8310 	mrs	r3, PRIMASK
 8007894:	617b      	str	r3, [r7, #20]
  return(result);
 8007896:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007898:	637b      	str	r3, [r7, #52]	@ 0x34
 800789a:	2301      	movs	r3, #1
 800789c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800789e:	69bb      	ldr	r3, [r7, #24]
 80078a0:	f383 8810 	msr	PRIMASK, r3
}
 80078a4:	46c0      	nop			@ (mov r8, r8)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	681a      	ldr	r2, [r3, #0]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4926      	ldr	r1, [pc, #152]	@ (800794c <UART_EndRxTransfer+0xc4>)
 80078b2:	400a      	ands	r2, r1
 80078b4:	601a      	str	r2, [r3, #0]
 80078b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078ba:	69fb      	ldr	r3, [r7, #28]
 80078bc:	f383 8810 	msr	PRIMASK, r3
}
 80078c0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80078c2:	f3ef 8310 	mrs	r3, PRIMASK
 80078c6:	623b      	str	r3, [r7, #32]
  return(result);
 80078c8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80078ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80078cc:	2301      	movs	r3, #1
 80078ce:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078d2:	f383 8810 	msr	PRIMASK, r3
}
 80078d6:	46c0      	nop			@ (mov r8, r8)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	689a      	ldr	r2, [r3, #8]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	491b      	ldr	r1, [pc, #108]	@ (8007950 <UART_EndRxTransfer+0xc8>)
 80078e4:	400a      	ands	r2, r1
 80078e6:	609a      	str	r2, [r3, #8]
 80078e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078ee:	f383 8810 	msr	PRIMASK, r3
}
 80078f2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d118      	bne.n	800792e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80078fc:	f3ef 8310 	mrs	r3, PRIMASK
 8007900:	60bb      	str	r3, [r7, #8]
  return(result);
 8007902:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007904:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007906:	2301      	movs	r3, #1
 8007908:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	f383 8810 	msr	PRIMASK, r3
}
 8007910:	46c0      	nop			@ (mov r8, r8)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	681a      	ldr	r2, [r3, #0]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	2110      	movs	r1, #16
 800791e:	438a      	bics	r2, r1
 8007920:	601a      	str	r2, [r3, #0]
 8007922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007924:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	f383 8810 	msr	PRIMASK, r3
}
 800792c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	228c      	movs	r2, #140	@ 0x8c
 8007932:	2120      	movs	r1, #32
 8007934:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2200      	movs	r2, #0
 800793a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2200      	movs	r2, #0
 8007940:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007942:	46c0      	nop			@ (mov r8, r8)
 8007944:	46bd      	mov	sp, r7
 8007946:	b00e      	add	sp, #56	@ 0x38
 8007948:	bd80      	pop	{r7, pc}
 800794a:	46c0      	nop			@ (mov r8, r8)
 800794c:	fffffedf 	.word	0xfffffedf
 8007950:	effffffe 	.word	0xeffffffe

08007954 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b08c      	sub	sp, #48	@ 0x30
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007960:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	2220      	movs	r2, #32
 800796a:	4013      	ands	r3, r2
 800796c:	d135      	bne.n	80079da <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 800796e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007970:	2256      	movs	r2, #86	@ 0x56
 8007972:	2100      	movs	r1, #0
 8007974:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007976:	f3ef 8310 	mrs	r3, PRIMASK
 800797a:	60fb      	str	r3, [r7, #12]
  return(result);
 800797c:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800797e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007980:	2301      	movs	r3, #1
 8007982:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	f383 8810 	msr	PRIMASK, r3
}
 800798a:	46c0      	nop			@ (mov r8, r8)
 800798c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	689a      	ldr	r2, [r3, #8]
 8007992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	2180      	movs	r1, #128	@ 0x80
 8007998:	438a      	bics	r2, r1
 800799a:	609a      	str	r2, [r3, #8]
 800799c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800799e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	f383 8810 	msr	PRIMASK, r3
}
 80079a6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80079a8:	f3ef 8310 	mrs	r3, PRIMASK
 80079ac:	61bb      	str	r3, [r7, #24]
  return(result);
 80079ae:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80079b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80079b2:	2301      	movs	r3, #1
 80079b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079b6:	69fb      	ldr	r3, [r7, #28]
 80079b8:	f383 8810 	msr	PRIMASK, r3
}
 80079bc:	46c0      	nop			@ (mov r8, r8)
 80079be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	2140      	movs	r1, #64	@ 0x40
 80079ca:	430a      	orrs	r2, r1
 80079cc:	601a      	str	r2, [r3, #0]
 80079ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079d0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079d2:	6a3b      	ldr	r3, [r7, #32]
 80079d4:	f383 8810 	msr	PRIMASK, r3
}
 80079d8:	e004      	b.n	80079e4 <UART_DMATransmitCplt+0x90>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 80079da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079dc:	0018      	movs	r0, r3
 80079de:	f7f9 ffed 	bl	80019bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80079e2:	46c0      	nop			@ (mov r8, r8)
 80079e4:	46c0      	nop			@ (mov r8, r8)
 80079e6:	46bd      	mov	sp, r7
 80079e8:	b00c      	add	sp, #48	@ 0x30
 80079ea:	bd80      	pop	{r7, pc}

080079ec <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b084      	sub	sp, #16
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079f8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	0018      	movs	r0, r3
 80079fe:	f7ff faf9 	bl	8006ff4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a02:	46c0      	nop			@ (mov r8, r8)
 8007a04:	46bd      	mov	sp, r7
 8007a06:	b004      	add	sp, #16
 8007a08:	bd80      	pop	{r7, pc}
	...

08007a0c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b094      	sub	sp, #80	@ 0x50
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a18:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	2220      	movs	r2, #32
 8007a22:	4013      	ands	r3, r2
 8007a24:	d16f      	bne.n	8007b06 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8007a26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a28:	225e      	movs	r2, #94	@ 0x5e
 8007a2a:	2100      	movs	r1, #0
 8007a2c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007a2e:	f3ef 8310 	mrs	r3, PRIMASK
 8007a32:	61bb      	str	r3, [r7, #24]
  return(result);
 8007a34:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007a38:	2301      	movs	r3, #1
 8007a3a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a3c:	69fb      	ldr	r3, [r7, #28]
 8007a3e:	f383 8810 	msr	PRIMASK, r3
}
 8007a42:	46c0      	nop			@ (mov r8, r8)
 8007a44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	681a      	ldr	r2, [r3, #0]
 8007a4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	493a      	ldr	r1, [pc, #232]	@ (8007b38 <UART_DMAReceiveCplt+0x12c>)
 8007a50:	400a      	ands	r2, r1
 8007a52:	601a      	str	r2, [r3, #0]
 8007a54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a56:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a58:	6a3b      	ldr	r3, [r7, #32]
 8007a5a:	f383 8810 	msr	PRIMASK, r3
}
 8007a5e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007a60:	f3ef 8310 	mrs	r3, PRIMASK
 8007a64:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8007a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a68:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a70:	f383 8810 	msr	PRIMASK, r3
}
 8007a74:	46c0      	nop			@ (mov r8, r8)
 8007a76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	689a      	ldr	r2, [r3, #8]
 8007a7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	2101      	movs	r1, #1
 8007a82:	438a      	bics	r2, r1
 8007a84:	609a      	str	r2, [r3, #8]
 8007a86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a8c:	f383 8810 	msr	PRIMASK, r3
}
 8007a90:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007a92:	f3ef 8310 	mrs	r3, PRIMASK
 8007a96:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8007a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a9a:	643b      	str	r3, [r7, #64]	@ 0x40
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007aa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007aa2:	f383 8810 	msr	PRIMASK, r3
}
 8007aa6:	46c0      	nop			@ (mov r8, r8)
 8007aa8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	689a      	ldr	r2, [r3, #8]
 8007aae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	2140      	movs	r1, #64	@ 0x40
 8007ab4:	438a      	bics	r2, r1
 8007ab6:	609a      	str	r2, [r3, #8]
 8007ab8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007aba:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007abc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007abe:	f383 8810 	msr	PRIMASK, r3
}
 8007ac2:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007ac4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ac6:	228c      	movs	r2, #140	@ 0x8c
 8007ac8:	2120      	movs	r1, #32
 8007aca:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007acc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ace:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d118      	bne.n	8007b06 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007ad4:	f3ef 8310 	mrs	r3, PRIMASK
 8007ad8:	60fb      	str	r3, [r7, #12]
  return(result);
 8007ada:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007adc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ade:	2301      	movs	r3, #1
 8007ae0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	f383 8810 	msr	PRIMASK, r3
}
 8007ae8:	46c0      	nop			@ (mov r8, r8)
 8007aea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	681a      	ldr	r2, [r3, #0]
 8007af0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	2110      	movs	r1, #16
 8007af6:	438a      	bics	r2, r1
 8007af8:	601a      	str	r2, [r3, #0]
 8007afa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007afc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	f383 8810 	msr	PRIMASK, r3
}
 8007b04:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b08:	2200      	movs	r2, #0
 8007b0a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d108      	bne.n	8007b26 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b16:	225c      	movs	r2, #92	@ 0x5c
 8007b18:	5a9a      	ldrh	r2, [r3, r2]
 8007b1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b1c:	0011      	movs	r1, r2
 8007b1e:	0018      	movs	r0, r3
 8007b20:	f7f9 fea2 	bl	8001868 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007b24:	e003      	b.n	8007b2e <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8007b26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b28:	0018      	movs	r0, r3
 8007b2a:	f7ff fa6b 	bl	8007004 <HAL_UART_RxCpltCallback>
}
 8007b2e:	46c0      	nop			@ (mov r8, r8)
 8007b30:	46bd      	mov	sp, r7
 8007b32:	b014      	add	sp, #80	@ 0x50
 8007b34:	bd80      	pop	{r7, pc}
 8007b36:	46c0      	nop			@ (mov r8, r8)
 8007b38:	fffffeff 	.word	0xfffffeff

08007b3c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b084      	sub	sp, #16
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b48:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	d10a      	bne.n	8007b6e <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	225c      	movs	r2, #92	@ 0x5c
 8007b5c:	5a9b      	ldrh	r3, [r3, r2]
 8007b5e:	085b      	lsrs	r3, r3, #1
 8007b60:	b29a      	uxth	r2, r3
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	0011      	movs	r1, r2
 8007b66:	0018      	movs	r0, r3
 8007b68:	f7f9 fe7e 	bl	8001868 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007b6c:	e003      	b.n	8007b76 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	0018      	movs	r0, r3
 8007b72:	f7ff fa4f 	bl	8007014 <HAL_UART_RxHalfCpltCallback>
}
 8007b76:	46c0      	nop			@ (mov r8, r8)
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	b004      	add	sp, #16
 8007b7c:	bd80      	pop	{r7, pc}

08007b7e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007b7e:	b580      	push	{r7, lr}
 8007b80:	b086      	sub	sp, #24
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b8a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	2288      	movs	r2, #136	@ 0x88
 8007b90:	589b      	ldr	r3, [r3, r2]
 8007b92:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	228c      	movs	r2, #140	@ 0x8c
 8007b98:	589b      	ldr	r3, [r3, r2]
 8007b9a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	689b      	ldr	r3, [r3, #8]
 8007ba2:	2280      	movs	r2, #128	@ 0x80
 8007ba4:	4013      	ands	r3, r2
 8007ba6:	2b80      	cmp	r3, #128	@ 0x80
 8007ba8:	d10a      	bne.n	8007bc0 <UART_DMAError+0x42>
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	2b21      	cmp	r3, #33	@ 0x21
 8007bae:	d107      	bne.n	8007bc0 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	2256      	movs	r2, #86	@ 0x56
 8007bb4:	2100      	movs	r1, #0
 8007bb6:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	0018      	movs	r0, r3
 8007bbc:	f7ff fe24 	bl	8007808 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	2240      	movs	r2, #64	@ 0x40
 8007bc8:	4013      	ands	r3, r2
 8007bca:	2b40      	cmp	r3, #64	@ 0x40
 8007bcc:	d10a      	bne.n	8007be4 <UART_DMAError+0x66>
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2b22      	cmp	r3, #34	@ 0x22
 8007bd2:	d107      	bne.n	8007be4 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	225e      	movs	r2, #94	@ 0x5e
 8007bd8:	2100      	movs	r1, #0
 8007bda:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	0018      	movs	r0, r3
 8007be0:	f7ff fe52 	bl	8007888 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	2290      	movs	r2, #144	@ 0x90
 8007be8:	589b      	ldr	r3, [r3, r2]
 8007bea:	2210      	movs	r2, #16
 8007bec:	431a      	orrs	r2, r3
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	2190      	movs	r1, #144	@ 0x90
 8007bf2:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	0018      	movs	r0, r3
 8007bf8:	f7f9 feee 	bl	80019d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007bfc:	46c0      	nop			@ (mov r8, r8)
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	b006      	add	sp, #24
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b084      	sub	sp, #16
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c10:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	225e      	movs	r2, #94	@ 0x5e
 8007c16:	2100      	movs	r1, #0
 8007c18:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2256      	movs	r2, #86	@ 0x56
 8007c1e:	2100      	movs	r1, #0
 8007c20:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	0018      	movs	r0, r3
 8007c26:	f7f9 fed7 	bl	80019d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c2a:	46c0      	nop			@ (mov r8, r8)
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	b004      	add	sp, #16
 8007c30:	bd80      	pop	{r7, pc}

08007c32 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007c32:	b580      	push	{r7, lr}
 8007c34:	b086      	sub	sp, #24
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007c3a:	f3ef 8310 	mrs	r3, PRIMASK
 8007c3e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007c40:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c42:	617b      	str	r3, [r7, #20]
 8007c44:	2301      	movs	r3, #1
 8007c46:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f383 8810 	msr	PRIMASK, r3
}
 8007c4e:	46c0      	nop			@ (mov r8, r8)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	681a      	ldr	r2, [r3, #0]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	2140      	movs	r1, #64	@ 0x40
 8007c5c:	438a      	bics	r2, r1
 8007c5e:	601a      	str	r2, [r3, #0]
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	f383 8810 	msr	PRIMASK, r3
}
 8007c6a:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2288      	movs	r2, #136	@ 0x88
 8007c70:	2120      	movs	r1, #32
 8007c72:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2200      	movs	r2, #0
 8007c78:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	0018      	movs	r0, r3
 8007c7e:	f7f9 fe9d 	bl	80019bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c82:	46c0      	nop			@ (mov r8, r8)
 8007c84:	46bd      	mov	sp, r7
 8007c86:	b006      	add	sp, #24
 8007c88:	bd80      	pop	{r7, pc}
	...

08007c8c <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b086      	sub	sp, #24
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	60f8      	str	r0, [r7, #12]
 8007c94:	60b9      	str	r1, [r7, #8]
 8007c96:	607a      	str	r2, [r7, #4]
 8007c98:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d101      	bne.n	8007ca4 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	e05d      	b.n	8007d60 <HAL_RS485Ex_Init+0xd4>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2288      	movs	r2, #136	@ 0x88
 8007ca8:	589b      	ldr	r3, [r3, r2]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d107      	bne.n	8007cbe <HAL_RS485Ex_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	2284      	movs	r2, #132	@ 0x84
 8007cb2:	2100      	movs	r1, #0
 8007cb4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	0018      	movs	r0, r3
 8007cba:	f7fa ff17 	bl	8002aec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2288      	movs	r2, #136	@ 0x88
 8007cc2:	2124      	movs	r1, #36	@ 0x24
 8007cc4:	5099      	str	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	681a      	ldr	r2, [r3, #0]
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	2101      	movs	r1, #1
 8007cd2:	438a      	bics	r2, r1
 8007cd4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d003      	beq.n	8007ce6 <HAL_RS485Ex_Init+0x5a>
  {
    UART_AdvFeatureConfig(huart);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	0018      	movs	r0, r3
 8007ce2:	f7ff fb1d 	bl	8007320 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	0018      	movs	r0, r3
 8007cea:	f7ff f99b 	bl	8007024 <UART_SetConfig>
 8007cee:	0003      	movs	r3, r0
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d101      	bne.n	8007cf8 <HAL_RS485Ex_Init+0x6c>
  {
    return HAL_ERROR;
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	e033      	b.n	8007d60 <HAL_RS485Ex_Init+0xd4>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	689a      	ldr	r2, [r3, #8]
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	2180      	movs	r1, #128	@ 0x80
 8007d04:	01c9      	lsls	r1, r1, #7
 8007d06:	430a      	orrs	r2, r1
 8007d08:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	689b      	ldr	r3, [r3, #8]
 8007d10:	4a15      	ldr	r2, [pc, #84]	@ (8007d68 <HAL_RS485Ex_Init+0xdc>)
 8007d12:	4013      	ands	r3, r2
 8007d14:	0019      	movs	r1, r3
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	68ba      	ldr	r2, [r7, #8]
 8007d1c:	430a      	orrs	r2, r1
 8007d1e:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	055b      	lsls	r3, r3, #21
 8007d24:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	041b      	lsls	r3, r3, #16
 8007d2a:	697a      	ldr	r2, [r7, #20]
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a0d      	ldr	r2, [pc, #52]	@ (8007d6c <HAL_RS485Ex_Init+0xe0>)
 8007d38:	4013      	ands	r3, r2
 8007d3a:	0019      	movs	r1, r3
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	697a      	ldr	r2, [r7, #20]
 8007d42:	430a      	orrs	r2, r1
 8007d44:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	681a      	ldr	r2, [r3, #0]
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	2101      	movs	r1, #1
 8007d52:	430a      	orrs	r2, r1
 8007d54:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	0018      	movs	r0, r3
 8007d5a:	f7ff fb95 	bl	8007488 <UART_CheckIdleState>
 8007d5e:	0003      	movs	r3, r0
}
 8007d60:	0018      	movs	r0, r3
 8007d62:	46bd      	mov	sp, r7
 8007d64:	b006      	add	sp, #24
 8007d66:	bd80      	pop	{r7, pc}
 8007d68:	ffff7fff 	.word	0xffff7fff
 8007d6c:	fc00ffff 	.word	0xfc00ffff

08007d70 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b082      	sub	sp, #8
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007d78:	46c0      	nop			@ (mov r8, r8)
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	b002      	add	sp, #8
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b082      	sub	sp, #8
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007d88:	46c0      	nop			@ (mov r8, r8)
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	b002      	add	sp, #8
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b082      	sub	sp, #8
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007d98:	46c0      	nop			@ (mov r8, r8)
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	b002      	add	sp, #8
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b084      	sub	sp, #16
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2284      	movs	r2, #132	@ 0x84
 8007dac:	5c9b      	ldrb	r3, [r3, r2]
 8007dae:	2b01      	cmp	r3, #1
 8007db0:	d101      	bne.n	8007db6 <HAL_UARTEx_DisableFifoMode+0x16>
 8007db2:	2302      	movs	r3, #2
 8007db4:	e027      	b.n	8007e06 <HAL_UARTEx_DisableFifoMode+0x66>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2284      	movs	r2, #132	@ 0x84
 8007dba:	2101      	movs	r1, #1
 8007dbc:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2288      	movs	r2, #136	@ 0x88
 8007dc2:	2124      	movs	r1, #36	@ 0x24
 8007dc4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	681a      	ldr	r2, [r3, #0]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	2101      	movs	r1, #1
 8007dda:	438a      	bics	r2, r1
 8007ddc:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	4a0b      	ldr	r2, [pc, #44]	@ (8007e10 <HAL_UARTEx_DisableFifoMode+0x70>)
 8007de2:	4013      	ands	r3, r2
 8007de4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2200      	movs	r2, #0
 8007dea:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	68fa      	ldr	r2, [r7, #12]
 8007df2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2288      	movs	r2, #136	@ 0x88
 8007df8:	2120      	movs	r1, #32
 8007dfa:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2284      	movs	r2, #132	@ 0x84
 8007e00:	2100      	movs	r1, #0
 8007e02:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007e04:	2300      	movs	r3, #0
}
 8007e06:	0018      	movs	r0, r3
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	b004      	add	sp, #16
 8007e0c:	bd80      	pop	{r7, pc}
 8007e0e:	46c0      	nop			@ (mov r8, r8)
 8007e10:	dfffffff 	.word	0xdfffffff

08007e14 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b084      	sub	sp, #16
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2284      	movs	r2, #132	@ 0x84
 8007e22:	5c9b      	ldrb	r3, [r3, r2]
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	d101      	bne.n	8007e2c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007e28:	2302      	movs	r3, #2
 8007e2a:	e02e      	b.n	8007e8a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2284      	movs	r2, #132	@ 0x84
 8007e30:	2101      	movs	r1, #1
 8007e32:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2288      	movs	r2, #136	@ 0x88
 8007e38:	2124      	movs	r1, #36	@ 0x24
 8007e3a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	681a      	ldr	r2, [r3, #0]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	2101      	movs	r1, #1
 8007e50:	438a      	bics	r2, r1
 8007e52:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	689b      	ldr	r3, [r3, #8]
 8007e5a:	00db      	lsls	r3, r3, #3
 8007e5c:	08d9      	lsrs	r1, r3, #3
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	683a      	ldr	r2, [r7, #0]
 8007e64:	430a      	orrs	r2, r1
 8007e66:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	0018      	movs	r0, r3
 8007e6c:	f000 f8bc 	bl	8007fe8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	68fa      	ldr	r2, [r7, #12]
 8007e76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2288      	movs	r2, #136	@ 0x88
 8007e7c:	2120      	movs	r1, #32
 8007e7e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2284      	movs	r2, #132	@ 0x84
 8007e84:	2100      	movs	r1, #0
 8007e86:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007e88:	2300      	movs	r3, #0
}
 8007e8a:	0018      	movs	r0, r3
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	b004      	add	sp, #16
 8007e90:	bd80      	pop	{r7, pc}
	...

08007e94 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b084      	sub	sp, #16
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2284      	movs	r2, #132	@ 0x84
 8007ea2:	5c9b      	ldrb	r3, [r3, r2]
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	d101      	bne.n	8007eac <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007ea8:	2302      	movs	r3, #2
 8007eaa:	e02f      	b.n	8007f0c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2284      	movs	r2, #132	@ 0x84
 8007eb0:	2101      	movs	r1, #1
 8007eb2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2288      	movs	r2, #136	@ 0x88
 8007eb8:	2124      	movs	r1, #36	@ 0x24
 8007eba:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	2101      	movs	r1, #1
 8007ed0:	438a      	bics	r2, r1
 8007ed2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	689b      	ldr	r3, [r3, #8]
 8007eda:	4a0e      	ldr	r2, [pc, #56]	@ (8007f14 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8007edc:	4013      	ands	r3, r2
 8007ede:	0019      	movs	r1, r3
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	683a      	ldr	r2, [r7, #0]
 8007ee6:	430a      	orrs	r2, r1
 8007ee8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	0018      	movs	r0, r3
 8007eee:	f000 f87b 	bl	8007fe8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	68fa      	ldr	r2, [r7, #12]
 8007ef8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2288      	movs	r2, #136	@ 0x88
 8007efe:	2120      	movs	r1, #32
 8007f00:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2284      	movs	r2, #132	@ 0x84
 8007f06:	2100      	movs	r1, #0
 8007f08:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007f0a:	2300      	movs	r3, #0
}
 8007f0c:	0018      	movs	r0, r3
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	b004      	add	sp, #16
 8007f12:	bd80      	pop	{r7, pc}
 8007f14:	f1ffffff 	.word	0xf1ffffff

08007f18 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f18:	b5b0      	push	{r4, r5, r7, lr}
 8007f1a:	b08a      	sub	sp, #40	@ 0x28
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	60f8      	str	r0, [r7, #12]
 8007f20:	60b9      	str	r1, [r7, #8]
 8007f22:	1dbb      	adds	r3, r7, #6
 8007f24:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	228c      	movs	r2, #140	@ 0x8c
 8007f2a:	589b      	ldr	r3, [r3, r2]
 8007f2c:	2b20      	cmp	r3, #32
 8007f2e:	d156      	bne.n	8007fde <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d003      	beq.n	8007f3e <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8007f36:	1dbb      	adds	r3, r7, #6
 8007f38:	881b      	ldrh	r3, [r3, #0]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d101      	bne.n	8007f42 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	e04e      	b.n	8007fe0 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	689a      	ldr	r2, [r3, #8]
 8007f46:	2380      	movs	r3, #128	@ 0x80
 8007f48:	015b      	lsls	r3, r3, #5
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d109      	bne.n	8007f62 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	691b      	ldr	r3, [r3, #16]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d105      	bne.n	8007f62 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	2201      	movs	r2, #1
 8007f5a:	4013      	ands	r3, r2
 8007f5c:	d001      	beq.n	8007f62 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 8007f5e:	2301      	movs	r3, #1
 8007f60:	e03e      	b.n	8007fe0 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2201      	movs	r2, #1
 8007f66:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8007f6e:	2527      	movs	r5, #39	@ 0x27
 8007f70:	197c      	adds	r4, r7, r5
 8007f72:	1dbb      	adds	r3, r7, #6
 8007f74:	881a      	ldrh	r2, [r3, #0]
 8007f76:	68b9      	ldr	r1, [r7, #8]
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	0018      	movs	r0, r3
 8007f7c:	f7ff fb9e 	bl	80076bc <UART_Start_Receive_DMA>
 8007f80:	0003      	movs	r3, r0
 8007f82:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8007f84:	197b      	adds	r3, r7, r5
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d124      	bne.n	8007fd6 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f90:	2b01      	cmp	r3, #1
 8007f92:	d11c      	bne.n	8007fce <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	2210      	movs	r2, #16
 8007f9a:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007f9c:	f3ef 8310 	mrs	r3, PRIMASK
 8007fa0:	617b      	str	r3, [r7, #20]
  return(result);
 8007fa2:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fa4:	623b      	str	r3, [r7, #32]
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007faa:	69bb      	ldr	r3, [r7, #24]
 8007fac:	f383 8810 	msr	PRIMASK, r3
}
 8007fb0:	46c0      	nop			@ (mov r8, r8)
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	681a      	ldr	r2, [r3, #0]
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	2110      	movs	r1, #16
 8007fbe:	430a      	orrs	r2, r1
 8007fc0:	601a      	str	r2, [r3, #0]
 8007fc2:	6a3b      	ldr	r3, [r7, #32]
 8007fc4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fc6:	69fb      	ldr	r3, [r7, #28]
 8007fc8:	f383 8810 	msr	PRIMASK, r3
}
 8007fcc:	e003      	b.n	8007fd6 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8007fce:	2327      	movs	r3, #39	@ 0x27
 8007fd0:	18fb      	adds	r3, r7, r3
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 8007fd6:	2327      	movs	r3, #39	@ 0x27
 8007fd8:	18fb      	adds	r3, r7, r3
 8007fda:	781b      	ldrb	r3, [r3, #0]
 8007fdc:	e000      	b.n	8007fe0 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8007fde:	2302      	movs	r3, #2
  }
}
 8007fe0:	0018      	movs	r0, r3
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	b00a      	add	sp, #40	@ 0x28
 8007fe6:	bdb0      	pop	{r4, r5, r7, pc}

08007fe8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fea:	b085      	sub	sp, #20
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d108      	bne.n	800800a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	226a      	movs	r2, #106	@ 0x6a
 8007ffc:	2101      	movs	r1, #1
 8007ffe:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2268      	movs	r2, #104	@ 0x68
 8008004:	2101      	movs	r1, #1
 8008006:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008008:	e043      	b.n	8008092 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800800a:	260f      	movs	r6, #15
 800800c:	19bb      	adds	r3, r7, r6
 800800e:	2208      	movs	r2, #8
 8008010:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008012:	200e      	movs	r0, #14
 8008014:	183b      	adds	r3, r7, r0
 8008016:	2208      	movs	r2, #8
 8008018:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	689b      	ldr	r3, [r3, #8]
 8008020:	0e5b      	lsrs	r3, r3, #25
 8008022:	b2da      	uxtb	r2, r3
 8008024:	240d      	movs	r4, #13
 8008026:	193b      	adds	r3, r7, r4
 8008028:	2107      	movs	r1, #7
 800802a:	400a      	ands	r2, r1
 800802c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	689b      	ldr	r3, [r3, #8]
 8008034:	0f5b      	lsrs	r3, r3, #29
 8008036:	b2da      	uxtb	r2, r3
 8008038:	250c      	movs	r5, #12
 800803a:	197b      	adds	r3, r7, r5
 800803c:	2107      	movs	r1, #7
 800803e:	400a      	ands	r2, r1
 8008040:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008042:	183b      	adds	r3, r7, r0
 8008044:	781b      	ldrb	r3, [r3, #0]
 8008046:	197a      	adds	r2, r7, r5
 8008048:	7812      	ldrb	r2, [r2, #0]
 800804a:	4914      	ldr	r1, [pc, #80]	@ (800809c <UARTEx_SetNbDataToProcess+0xb4>)
 800804c:	5c8a      	ldrb	r2, [r1, r2]
 800804e:	435a      	muls	r2, r3
 8008050:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8008052:	197b      	adds	r3, r7, r5
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	4a12      	ldr	r2, [pc, #72]	@ (80080a0 <UARTEx_SetNbDataToProcess+0xb8>)
 8008058:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800805a:	0019      	movs	r1, r3
 800805c:	f7f8 f8de 	bl	800021c <__divsi3>
 8008060:	0003      	movs	r3, r0
 8008062:	b299      	uxth	r1, r3
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	226a      	movs	r2, #106	@ 0x6a
 8008068:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800806a:	19bb      	adds	r3, r7, r6
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	193a      	adds	r2, r7, r4
 8008070:	7812      	ldrb	r2, [r2, #0]
 8008072:	490a      	ldr	r1, [pc, #40]	@ (800809c <UARTEx_SetNbDataToProcess+0xb4>)
 8008074:	5c8a      	ldrb	r2, [r1, r2]
 8008076:	435a      	muls	r2, r3
 8008078:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800807a:	193b      	adds	r3, r7, r4
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	4a08      	ldr	r2, [pc, #32]	@ (80080a0 <UARTEx_SetNbDataToProcess+0xb8>)
 8008080:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008082:	0019      	movs	r1, r3
 8008084:	f7f8 f8ca 	bl	800021c <__divsi3>
 8008088:	0003      	movs	r3, r0
 800808a:	b299      	uxth	r1, r3
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2268      	movs	r2, #104	@ 0x68
 8008090:	5299      	strh	r1, [r3, r2]
}
 8008092:	46c0      	nop			@ (mov r8, r8)
 8008094:	46bd      	mov	sp, r7
 8008096:	b005      	add	sp, #20
 8008098:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800809a:	46c0      	nop			@ (mov r8, r8)
 800809c:	080088dc 	.word	0x080088dc
 80080a0:	080088e4 	.word	0x080088e4

080080a4 <LL_ADC_REG_GetSequencerConfigurable>:
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b082      	sub	sp, #8
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_CHSELRMOD));
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	68da      	ldr	r2, [r3, #12]
 80080b0:	2380      	movs	r3, #128	@ 0x80
 80080b2:	039b      	lsls	r3, r3, #14
 80080b4:	4013      	ands	r3, r2
}
 80080b6:	0018      	movs	r0, r3
 80080b8:	46bd      	mov	sp, r7
 80080ba:	b002      	add	sp, #8
 80080bc:	bd80      	pop	{r7, pc}

080080be <LL_ADC_REG_SetSequencerLength>:
{
 80080be:	b580      	push	{r7, lr}
 80080c0:	b082      	sub	sp, #8
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	6078      	str	r0, [r7, #4]
 80080c6:	6039      	str	r1, [r7, #0]
  SET_BIT(ADCx->CHSELR, SequencerNbRanks);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	431a      	orrs	r2, r3
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80080d4:	46c0      	nop			@ (mov r8, r8)
 80080d6:	46bd      	mov	sp, r7
 80080d8:	b002      	add	sp, #8
 80080da:	bd80      	pop	{r7, pc}

080080dc <LL_ADC_IsEnabled>:
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b082      	sub	sp, #8
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	689b      	ldr	r3, [r3, #8]
 80080e8:	2201      	movs	r2, #1
 80080ea:	4013      	ands	r3, r2
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d101      	bne.n	80080f4 <LL_ADC_IsEnabled+0x18>
 80080f0:	2301      	movs	r3, #1
 80080f2:	e000      	b.n	80080f6 <LL_ADC_IsEnabled+0x1a>
 80080f4:	2300      	movs	r3, #0
}
 80080f6:	0018      	movs	r0, r3
 80080f8:	46bd      	mov	sp, r7
 80080fa:	b002      	add	sp, #8
 80080fc:	bd80      	pop	{r7, pc}
	...

08008100 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b084      	sub	sp, #16
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800810a:	230f      	movs	r3, #15
 800810c:	18fb      	adds	r3, r7, r3
 800810e:	2200      	movs	r2, #0
 8008110:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	0018      	movs	r0, r3
 8008116:	f7ff ffe1 	bl	80080dc <LL_ADC_IsEnabled>
 800811a:	1e03      	subs	r3, r0, #0
 800811c:	d118      	bne.n	8008150 <LL_ADC_Init+0x50>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR1,
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	68db      	ldr	r3, [r3, #12]
 8008122:	4a11      	ldr	r2, [pc, #68]	@ (8008168 <LL_ADC_Init+0x68>)
 8008124:	401a      	ands	r2, r3
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	6859      	ldr	r1, [r3, #4]
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	689b      	ldr	r3, [r3, #8]
 800812e:	4319      	orrs	r1, r3
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	68db      	ldr	r3, [r3, #12]
 8008134:	430b      	orrs	r3, r1
 8008136:	431a      	orrs	r2, r3
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	60da      	str	r2, [r3, #12]
               ADC_InitStruct->Resolution
               | ADC_InitStruct->DataAlignment
               | ADC_InitStruct->LowPowerMode
              );

    MODIFY_REG(ADCx->CFGR2,
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	691b      	ldr	r3, [r3, #16]
 8008140:	009b      	lsls	r3, r3, #2
 8008142:	089a      	lsrs	r2, r3, #2
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	431a      	orrs	r2, r3
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	611a      	str	r2, [r3, #16]
 800814e:	e003      	b.n	8008158 <LL_ADC_Init+0x58>
              );
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8008150:	230f      	movs	r3, #15
 8008152:	18fb      	adds	r3, r7, r3
 8008154:	2201      	movs	r2, #1
 8008156:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8008158:	230f      	movs	r3, #15
 800815a:	18fb      	adds	r3, r7, r3
 800815c:	781b      	ldrb	r3, [r3, #0]
}
 800815e:	0018      	movs	r0, r3
 8008160:	46bd      	mov	sp, r7
 8008162:	b004      	add	sp, #16
 8008164:	bd80      	pop	{r7, pc}
 8008166:	46c0      	nop			@ (mov r8, r8)
 8008168:	ffff3fc7 	.word	0xffff3fc7

0800816c <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b084      	sub	sp, #16
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8008176:	230f      	movs	r3, #15
 8008178:	18fb      	adds	r3, r7, r3
 800817a:	2200      	movs	r2, #0
 800817c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_ADC_REG_TRIG_SOURCE(ADC_REG_InitStruct->TriggerSource));
  assert_param(IS_LL_ADC_REG_CONTINUOUS_MODE(ADC_REG_InitStruct->ContinuousMode));
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));

  if (LL_ADC_REG_GetSequencerConfigurable(ADCx) != LL_ADC_REG_SEQ_FIXED)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	0018      	movs	r0, r3
 8008182:	f7ff ff8f 	bl	80080a4 <LL_ADC_REG_GetSequencerConfigurable>
  {
    assert_param(IS_LL_ADC_REG_SEQ_SCAN_LENGTH(ADC_REG_InitStruct->SequencerLength));
  }

  if ((LL_ADC_REG_GetSequencerConfigurable(ADCx) == LL_ADC_REG_SEQ_FIXED)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	0018      	movs	r0, r3
 800818a:	f7ff ff8b 	bl	80080a4 <LL_ADC_REG_GetSequencerConfigurable>
                 || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  }

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	0018      	movs	r0, r3
 8008192:	f7ff ffa3 	bl	80080dc <LL_ADC_IsEnabled>
 8008196:	1e03      	subs	r3, r0, #0
 8008198:	d13f      	bne.n	800821a <LL_ADC_REG_Init+0xae>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by    */
    /*       setting of trigger source to SW start.                           */
    if ((LL_ADC_REG_GetSequencerConfigurable(ADCx) == LL_ADC_REG_SEQ_FIXED)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	0018      	movs	r0, r3
 800819e:	f7ff ff81 	bl	80080a4 <LL_ADC_REG_GetSequencerConfigurable>
 80081a2:	1e03      	subs	r3, r0, #0
 80081a4:	d003      	beq.n	80081ae <LL_ADC_REG_Init+0x42>
        || (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	2bf0      	cmp	r3, #240	@ 0xf0
 80081ac:	d015      	beq.n	80081da <LL_ADC_REG_Init+0x6e>
       )
    {
      /* Case of sequencer mode fixed
         or sequencer length >= 2 ranks with sequencer mode fully configurable:
         discontinuous mode configured */
      MODIFY_REG(ADCx->CFGR1,
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	68db      	ldr	r3, [r3, #12]
 80081b2:	4a1f      	ldr	r2, [pc, #124]	@ (8008230 <LL_ADC_REG_Init+0xc4>)
 80081b4:	401a      	ands	r2, r3
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	6819      	ldr	r1, [r3, #0]
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	689b      	ldr	r3, [r3, #8]
 80081be:	4319      	orrs	r1, r3
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	68db      	ldr	r3, [r3, #12]
 80081c4:	4319      	orrs	r1, r3
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	691b      	ldr	r3, [r3, #16]
 80081ca:	4319      	orrs	r1, r3
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	695b      	ldr	r3, [r3, #20]
 80081d0:	430b      	orrs	r3, r1
 80081d2:	431a      	orrs	r2, r3
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	60da      	str	r2, [r3, #12]
 80081d8:	e011      	b.n	80081fe <LL_ADC_REG_Init+0x92>
    else
    {
      /* Case of sequencer mode fully configurable
         and sequencer length 1 rank (sequencer disabled):
         discontinuous mode discarded (fixed to disable) */
      MODIFY_REG(ADCx->CFGR1,
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	68db      	ldr	r3, [r3, #12]
 80081de:	4a14      	ldr	r2, [pc, #80]	@ (8008230 <LL_ADC_REG_Init+0xc4>)
 80081e0:	401a      	ands	r2, r3
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	6819      	ldr	r1, [r3, #0]
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	68db      	ldr	r3, [r3, #12]
 80081ea:	4319      	orrs	r1, r3
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	691b      	ldr	r3, [r3, #16]
 80081f0:	4319      	orrs	r1, r3
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	695b      	ldr	r3, [r3, #20]
 80081f6:	430b      	orrs	r3, r1
 80081f8:	431a      	orrs	r2, r3
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	60da      	str	r2, [r3, #12]
                 | ADC_REG_InitStruct->Overrun
                );
    }

    /* Set ADC group regular sequencer length */
    if (LL_ADC_REG_GetSequencerConfigurable(ADCx) != LL_ADC_REG_SEQ_FIXED)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	0018      	movs	r0, r3
 8008202:	f7ff ff4f 	bl	80080a4 <LL_ADC_REG_GetSequencerConfigurable>
 8008206:	1e03      	subs	r3, r0, #0
 8008208:	d00b      	beq.n	8008222 <LL_ADC_REG_Init+0xb6>
    {
      LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	685a      	ldr	r2, [r3, #4]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	0011      	movs	r1, r2
 8008212:	0018      	movs	r0, r3
 8008214:	f7ff ff53 	bl	80080be <LL_ADC_REG_SetSequencerLength>
 8008218:	e003      	b.n	8008222 <LL_ADC_REG_Init+0xb6>
    }
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800821a:	230f      	movs	r3, #15
 800821c:	18fb      	adds	r3, r7, r3
 800821e:	2201      	movs	r2, #1
 8008220:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8008222:	230f      	movs	r3, #15
 8008224:	18fb      	adds	r3, r7, r3
 8008226:	781b      	ldrb	r3, [r3, #0]
}
 8008228:	0018      	movs	r0, r3
 800822a:	46bd      	mov	sp, r7
 800822c:	b004      	add	sp, #16
 800822e:	bd80      	pop	{r7, pc}
 8008230:	fffec23c 	.word	0xfffec23c

08008234 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b084      	sub	sp, #16
 8008238:	af00      	add	r7, sp, #0
 800823a:	60f8      	str	r0, [r7, #12]
 800823c:	60b9      	str	r1, [r7, #8]
 800823e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	6819      	ldr	r1, [r3, #0]
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	435b      	muls	r3, r3
 8008248:	001a      	movs	r2, r3
 800824a:	0013      	movs	r3, r2
 800824c:	005b      	lsls	r3, r3, #1
 800824e:	189b      	adds	r3, r3, r2
 8008250:	43db      	mvns	r3, r3
 8008252:	400b      	ands	r3, r1
 8008254:	001a      	movs	r2, r3
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	435b      	muls	r3, r3
 800825a:	6879      	ldr	r1, [r7, #4]
 800825c:	434b      	muls	r3, r1
 800825e:	431a      	orrs	r2, r3
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	601a      	str	r2, [r3, #0]
}
 8008264:	46c0      	nop			@ (mov r8, r8)
 8008266:	46bd      	mov	sp, r7
 8008268:	b004      	add	sp, #16
 800826a:	bd80      	pop	{r7, pc}

0800826c <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b084      	sub	sp, #16
 8008270:	af00      	add	r7, sp, #0
 8008272:	60f8      	str	r0, [r7, #12]
 8008274:	60b9      	str	r1, [r7, #8]
 8008276:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	685b      	ldr	r3, [r3, #4]
 800827c:	68ba      	ldr	r2, [r7, #8]
 800827e:	43d2      	mvns	r2, r2
 8008280:	401a      	ands	r2, r3
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	6879      	ldr	r1, [r7, #4]
 8008286:	434b      	muls	r3, r1
 8008288:	431a      	orrs	r2, r3
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	605a      	str	r2, [r3, #4]
}
 800828e:	46c0      	nop			@ (mov r8, r8)
 8008290:	46bd      	mov	sp, r7
 8008292:	b004      	add	sp, #16
 8008294:	bd80      	pop	{r7, pc}

08008296 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8008296:	b580      	push	{r7, lr}
 8008298:	b084      	sub	sp, #16
 800829a:	af00      	add	r7, sp, #0
 800829c:	60f8      	str	r0, [r7, #12]
 800829e:	60b9      	str	r1, [r7, #8]
 80082a0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	6899      	ldr	r1, [r3, #8]
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	435b      	muls	r3, r3
 80082aa:	001a      	movs	r2, r3
 80082ac:	0013      	movs	r3, r2
 80082ae:	005b      	lsls	r3, r3, #1
 80082b0:	189b      	adds	r3, r3, r2
 80082b2:	43db      	mvns	r3, r3
 80082b4:	400b      	ands	r3, r1
 80082b6:	001a      	movs	r2, r3
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	435b      	muls	r3, r3
 80082bc:	6879      	ldr	r1, [r7, #4]
 80082be:	434b      	muls	r3, r1
 80082c0:	431a      	orrs	r2, r3
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	609a      	str	r2, [r3, #8]
}
 80082c6:	46c0      	nop			@ (mov r8, r8)
 80082c8:	46bd      	mov	sp, r7
 80082ca:	b004      	add	sp, #16
 80082cc:	bd80      	pop	{r7, pc}

080082ce <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80082ce:	b580      	push	{r7, lr}
 80082d0:	b084      	sub	sp, #16
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	60f8      	str	r0, [r7, #12]
 80082d6:	60b9      	str	r1, [r7, #8]
 80082d8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	68d9      	ldr	r1, [r3, #12]
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	435b      	muls	r3, r3
 80082e2:	001a      	movs	r2, r3
 80082e4:	0013      	movs	r3, r2
 80082e6:	005b      	lsls	r3, r3, #1
 80082e8:	189b      	adds	r3, r3, r2
 80082ea:	43db      	mvns	r3, r3
 80082ec:	400b      	ands	r3, r1
 80082ee:	001a      	movs	r2, r3
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	435b      	muls	r3, r3
 80082f4:	6879      	ldr	r1, [r7, #4]
 80082f6:	434b      	muls	r3, r1
 80082f8:	431a      	orrs	r2, r3
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	60da      	str	r2, [r3, #12]
}
 80082fe:	46c0      	nop			@ (mov r8, r8)
 8008300:	46bd      	mov	sp, r7
 8008302:	b004      	add	sp, #16
 8008304:	bd80      	pop	{r7, pc}

08008306 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8008306:	b580      	push	{r7, lr}
 8008308:	b084      	sub	sp, #16
 800830a:	af00      	add	r7, sp, #0
 800830c:	60f8      	str	r0, [r7, #12]
 800830e:	60b9      	str	r1, [r7, #8]
 8008310:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	6a19      	ldr	r1, [r3, #32]
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	435b      	muls	r3, r3
 800831a:	68ba      	ldr	r2, [r7, #8]
 800831c:	4353      	muls	r3, r2
 800831e:	68ba      	ldr	r2, [r7, #8]
 8008320:	435a      	muls	r2, r3
 8008322:	0013      	movs	r3, r2
 8008324:	011b      	lsls	r3, r3, #4
 8008326:	1a9b      	subs	r3, r3, r2
 8008328:	43db      	mvns	r3, r3
 800832a:	400b      	ands	r3, r1
 800832c:	001a      	movs	r2, r3
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	435b      	muls	r3, r3
 8008332:	68b9      	ldr	r1, [r7, #8]
 8008334:	434b      	muls	r3, r1
 8008336:	68b9      	ldr	r1, [r7, #8]
 8008338:	434b      	muls	r3, r1
 800833a:	6879      	ldr	r1, [r7, #4]
 800833c:	434b      	muls	r3, r1
 800833e:	431a      	orrs	r2, r3
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	621a      	str	r2, [r3, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 8008344:	46c0      	nop			@ (mov r8, r8)
 8008346:	46bd      	mov	sp, r7
 8008348:	b004      	add	sp, #16
 800834a:	bd80      	pop	{r7, pc}

0800834c <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b084      	sub	sp, #16
 8008350:	af00      	add	r7, sp, #0
 8008352:	60f8      	str	r0, [r7, #12]
 8008354:	60b9      	str	r1, [r7, #8]
 8008356:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	0a1b      	lsrs	r3, r3, #8
 8008360:	68ba      	ldr	r2, [r7, #8]
 8008362:	0a12      	lsrs	r2, r2, #8
 8008364:	4353      	muls	r3, r2
 8008366:	68ba      	ldr	r2, [r7, #8]
 8008368:	0a12      	lsrs	r2, r2, #8
 800836a:	4353      	muls	r3, r2
 800836c:	68ba      	ldr	r2, [r7, #8]
 800836e:	0a12      	lsrs	r2, r2, #8
 8008370:	435a      	muls	r2, r3
 8008372:	0013      	movs	r3, r2
 8008374:	011b      	lsls	r3, r3, #4
 8008376:	1a9b      	subs	r3, r3, r2
 8008378:	43db      	mvns	r3, r3
 800837a:	400b      	ands	r3, r1
 800837c:	001a      	movs	r2, r3
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	0a1b      	lsrs	r3, r3, #8
 8008382:	68b9      	ldr	r1, [r7, #8]
 8008384:	0a09      	lsrs	r1, r1, #8
 8008386:	434b      	muls	r3, r1
 8008388:	68b9      	ldr	r1, [r7, #8]
 800838a:	0a09      	lsrs	r1, r1, #8
 800838c:	434b      	muls	r3, r1
 800838e:	68b9      	ldr	r1, [r7, #8]
 8008390:	0a09      	lsrs	r1, r1, #8
 8008392:	434b      	muls	r3, r1
 8008394:	6879      	ldr	r1, [r7, #4]
 8008396:	434b      	muls	r3, r1
 8008398:	431a      	orrs	r2, r3
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	625a      	str	r2, [r3, #36]	@ 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 800839e:	46c0      	nop			@ (mov r8, r8)
 80083a0:	46bd      	mov	sp, r7
 80083a2:	b004      	add	sp, #16
 80083a4:	bd80      	pop	{r7, pc}

080083a6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80083a6:	b580      	push	{r7, lr}
 80083a8:	b084      	sub	sp, #16
 80083aa:	af00      	add	r7, sp, #0
 80083ac:	6078      	str	r0, [r7, #4]
 80083ae:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 80083b0:	2300      	movs	r3, #0
 80083b2:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80083b4:	e047      	b.n	8008446 <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	2101      	movs	r1, #1
 80083bc:	68fa      	ldr	r2, [r7, #12]
 80083be:	4091      	lsls	r1, r2
 80083c0:	000a      	movs	r2, r1
 80083c2:	4013      	ands	r3, r2
 80083c4:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d039      	beq.n	8008440 <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	2b01      	cmp	r3, #1
 80083d2:	d003      	beq.n	80083dc <LL_GPIO_Init+0x36>
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	2b02      	cmp	r3, #2
 80083da:	d10d      	bne.n	80083f8 <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	689a      	ldr	r2, [r3, #8]
 80083e0:	68b9      	ldr	r1, [r7, #8]
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	0018      	movs	r0, r3
 80083e6:	f7ff ff56 	bl	8008296 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	68da      	ldr	r2, [r3, #12]
 80083ee:	68b9      	ldr	r1, [r7, #8]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	0018      	movs	r0, r3
 80083f4:	f7ff ff3a 	bl	800826c <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	691a      	ldr	r2, [r3, #16]
 80083fc:	68b9      	ldr	r1, [r7, #8]
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	0018      	movs	r0, r3
 8008402:	f7ff ff64 	bl	80082ce <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	2b02      	cmp	r3, #2
 800840c:	d111      	bne.n	8008432 <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	2bff      	cmp	r3, #255	@ 0xff
 8008412:	d807      	bhi.n	8008424 <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	695a      	ldr	r2, [r3, #20]
 8008418:	68b9      	ldr	r1, [r7, #8]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	0018      	movs	r0, r3
 800841e:	f7ff ff72 	bl	8008306 <LL_GPIO_SetAFPin_0_7>
 8008422:	e006      	b.n	8008432 <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	695a      	ldr	r2, [r3, #20]
 8008428:	68b9      	ldr	r1, [r7, #8]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	0018      	movs	r0, r3
 800842e:	f7ff ff8d 	bl	800834c <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	685a      	ldr	r2, [r3, #4]
 8008436:	68b9      	ldr	r1, [r7, #8]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	0018      	movs	r0, r3
 800843c:	f7ff fefa 	bl	8008234 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	3301      	adds	r3, #1
 8008444:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	681a      	ldr	r2, [r3, #0]
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	40da      	lsrs	r2, r3
 800844e:	1e13      	subs	r3, r2, #0
 8008450:	d1b1      	bne.n	80083b6 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 8008452:	2300      	movs	r3, #0
}
 8008454:	0018      	movs	r0, r3
 8008456:	46bd      	mov	sp, r7
 8008458:	b004      	add	sp, #16
 800845a:	bd80      	pop	{r7, pc}

0800845c <memset>:
 800845c:	0003      	movs	r3, r0
 800845e:	1882      	adds	r2, r0, r2
 8008460:	4293      	cmp	r3, r2
 8008462:	d100      	bne.n	8008466 <memset+0xa>
 8008464:	4770      	bx	lr
 8008466:	7019      	strb	r1, [r3, #0]
 8008468:	3301      	adds	r3, #1
 800846a:	e7f9      	b.n	8008460 <memset+0x4>

0800846c <__libc_init_array>:
 800846c:	b570      	push	{r4, r5, r6, lr}
 800846e:	2600      	movs	r6, #0
 8008470:	4c0c      	ldr	r4, [pc, #48]	@ (80084a4 <__libc_init_array+0x38>)
 8008472:	4d0d      	ldr	r5, [pc, #52]	@ (80084a8 <__libc_init_array+0x3c>)
 8008474:	1b64      	subs	r4, r4, r5
 8008476:	10a4      	asrs	r4, r4, #2
 8008478:	42a6      	cmp	r6, r4
 800847a:	d109      	bne.n	8008490 <__libc_init_array+0x24>
 800847c:	2600      	movs	r6, #0
 800847e:	f000 f823 	bl	80084c8 <_init>
 8008482:	4c0a      	ldr	r4, [pc, #40]	@ (80084ac <__libc_init_array+0x40>)
 8008484:	4d0a      	ldr	r5, [pc, #40]	@ (80084b0 <__libc_init_array+0x44>)
 8008486:	1b64      	subs	r4, r4, r5
 8008488:	10a4      	asrs	r4, r4, #2
 800848a:	42a6      	cmp	r6, r4
 800848c:	d105      	bne.n	800849a <__libc_init_array+0x2e>
 800848e:	bd70      	pop	{r4, r5, r6, pc}
 8008490:	00b3      	lsls	r3, r6, #2
 8008492:	58eb      	ldr	r3, [r5, r3]
 8008494:	4798      	blx	r3
 8008496:	3601      	adds	r6, #1
 8008498:	e7ee      	b.n	8008478 <__libc_init_array+0xc>
 800849a:	00b3      	lsls	r3, r6, #2
 800849c:	58eb      	ldr	r3, [r5, r3]
 800849e:	4798      	blx	r3
 80084a0:	3601      	adds	r6, #1
 80084a2:	e7f2      	b.n	800848a <__libc_init_array+0x1e>
 80084a4:	080088ec 	.word	0x080088ec
 80084a8:	080088ec 	.word	0x080088ec
 80084ac:	080088f0 	.word	0x080088f0
 80084b0:	080088ec 	.word	0x080088ec

080084b4 <memcpy>:
 80084b4:	2300      	movs	r3, #0
 80084b6:	b510      	push	{r4, lr}
 80084b8:	429a      	cmp	r2, r3
 80084ba:	d100      	bne.n	80084be <memcpy+0xa>
 80084bc:	bd10      	pop	{r4, pc}
 80084be:	5ccc      	ldrb	r4, [r1, r3]
 80084c0:	54c4      	strb	r4, [r0, r3]
 80084c2:	3301      	adds	r3, #1
 80084c4:	e7f8      	b.n	80084b8 <memcpy+0x4>
	...

080084c8 <_init>:
 80084c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ca:	46c0      	nop			@ (mov r8, r8)
 80084cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084ce:	bc08      	pop	{r3}
 80084d0:	469e      	mov	lr, r3
 80084d2:	4770      	bx	lr

080084d4 <_fini>:
 80084d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084d6:	46c0      	nop			@ (mov r8, r8)
 80084d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084da:	bc08      	pop	{r3}
 80084dc:	469e      	mov	lr, r3
 80084de:	4770      	bx	lr
