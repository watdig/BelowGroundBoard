
BelowGroundBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c1a8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000420  0800c268  0800c268  0000d268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c688  0800c688  0000e0c4  2**0
                  CONTENTS
  4 .ARM          00000000  0800c688  0800c688  0000e0c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c688  0800c688  0000e0c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c688  0800c688  0000d688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c68c  0800c68c  0000d68c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c4  20000000  0800c690  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008f8  200000c4  0800c754  0000e0c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009bc  0800c754  0000e9bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000e0c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c618  00000000  00000000  0000e0ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039f6  00000000  00000000  0002a704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018e0  00000000  00000000  0002e100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001396  00000000  00000000  0002f9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019ffc  00000000  00000000  00030d76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d844  00000000  00000000  0004ad72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f80a  00000000  00000000  000685b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00107dc0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c1c  00000000  00000000  00107e04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  0010da20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000c4 	.word	0x200000c4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800c250 	.word	0x0800c250

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000c8 	.word	0x200000c8
 8000104:	0800c250 	.word	0x0800c250

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <HAL_I2C_MemTxCpltCallback>:
void bno055_delay(uint32_t time);
int8_t bno055_write(uint8_t *data, uint8_t len);
int8_t bno055_read(uint8_t reg, uint8_t *data, uint8_t len);

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
	i2c_tx_int = 1;
 80003fc:	4b03      	ldr	r3, [pc, #12]	@ (800040c <HAL_I2C_MemTxCpltCallback+0x18>)
 80003fe:	2201      	movs	r2, #1
 8000400:	701a      	strb	r2, [r3, #0]
}
 8000402:	46c0      	nop			@ (mov r8, r8)
 8000404:	46bd      	mov	sp, r7
 8000406:	b002      	add	sp, #8
 8000408:	bd80      	pop	{r7, pc}
 800040a:	46c0      	nop			@ (mov r8, r8)
 800040c:	2000000e 	.word	0x2000000e

08000410 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
	i2c_rx_int = 1;
 8000418:	4b03      	ldr	r3, [pc, #12]	@ (8000428 <HAL_I2C_MemRxCpltCallback+0x18>)
 800041a:	2201      	movs	r2, #1
 800041c:	701a      	strb	r2, [r3, #0]
}
 800041e:	46c0      	nop			@ (mov r8, r8)
 8000420:	46bd      	mov	sp, r7
 8000422:	b002      	add	sp, #8
 8000424:	bd80      	pop	{r7, pc}
 8000426:	46c0      	nop			@ (mov r8, r8)
 8000428:	2000000f 	.word	0x2000000f

0800042c <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
	i2c_tx_int = 1;
 8000434:	4b03      	ldr	r3, [pc, #12]	@ (8000444 <HAL_I2C_MasterTxCpltCallback+0x18>)
 8000436:	2201      	movs	r2, #1
 8000438:	701a      	strb	r2, [r3, #0]
}
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	46bd      	mov	sp, r7
 800043e:	b002      	add	sp, #8
 8000440:	bd80      	pop	{r7, pc}
 8000442:	46c0      	nop			@ (mov r8, r8)
 8000444:	2000000e 	.word	0x2000000e

08000448 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
	i2c_rx_int = 1;
 8000450:	4b03      	ldr	r3, [pc, #12]	@ (8000460 <HAL_I2C_MasterRxCpltCallback+0x18>)
 8000452:	2201      	movs	r2, #1
 8000454:	701a      	strb	r2, [r3, #0]
}
 8000456:	46c0      	nop			@ (mov r8, r8)
 8000458:	46bd      	mov	sp, r7
 800045a:	b002      	add	sp, #8
 800045c:	bd80      	pop	{r7, pc}
 800045e:	46c0      	nop			@ (mov r8, r8)
 8000460:	2000000f 	.word	0x2000000f

08000464 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
	// Do something
	i2c_err_int = 1;
 800046c:	4b07      	ldr	r3, [pc, #28]	@ (800048c <HAL_I2C_ErrorCallback+0x28>)
 800046e:	2201      	movs	r2, #1
 8000470:	701a      	strb	r2, [r3, #0]
	__HAL_I2C_DISABLE_IT(&hi2c1, I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI |
 8000472:	4b07      	ldr	r3, [pc, #28]	@ (8000490 <HAL_I2C_ErrorCallback+0x2c>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	681a      	ldr	r2, [r3, #0]
 8000478:	4b05      	ldr	r3, [pc, #20]	@ (8000490 <HAL_I2C_ErrorCallback+0x2c>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	21fe      	movs	r1, #254	@ 0xfe
 800047e:	438a      	bics	r2, r1
 8000480:	601a      	str	r2, [r3, #0]
										 I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI);
}
 8000482:	46c0      	nop			@ (mov r8, r8)
 8000484:	46bd      	mov	sp, r7
 8000486:	b002      	add	sp, #8
 8000488:	bd80      	pop	{r7, pc}
 800048a:	46c0      	nop			@ (mov r8, r8)
 800048c:	200002ec 	.word	0x200002ec
 8000490:	20000304 	.word	0x20000304

08000494 <bno055_delay>:


void bno055_delay(uint32_t time)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	0018      	movs	r0, r3
 80004a0:	f004 fba8 	bl	8004bf4 <HAL_Delay>
#endif
}
 80004a4:	46c0      	nop			@ (mov r8, r8)
 80004a6:	46bd      	mov	sp, r7
 80004a8:	b002      	add	sp, #8
 80004aa:	bd80      	pop	{r7, pc}

080004ac <bno055_init>:

int8_t bno055_init()
{
 80004ac:	b590      	push	{r4, r7, lr}
 80004ae:	b083      	sub	sp, #12
 80004b0:	af00      	add	r7, sp, #0
	int8_t status = HAL_OK;
 80004b2:	1dfb      	adds	r3, r7, #7
 80004b4:	2200      	movs	r2, #0
 80004b6:	701a      	strb	r2, [r3, #0]

	// Set up the local IMU
	bno055_address = BNO055_I2C_ADDR_LO << 1;
 80004b8:	4b1d      	ldr	r3, [pc, #116]	@ (8000530 <bno055_init+0x84>)
 80004ba:	2250      	movs	r2, #80	@ 0x50
 80004bc:	701a      	strb	r2, [r3, #0]
	status = bno055_setup();
 80004be:	1dfc      	adds	r4, r7, #7
 80004c0:	f000 f98a 	bl	80007d8 <bno055_setup>
 80004c4:	0003      	movs	r3, r0
 80004c6:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80004c8:	1dfb      	adds	r3, r7, #7
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	b25b      	sxtb	r3, r3
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d003      	beq.n	80004da <bno055_init+0x2e>
 80004d2:	1dfb      	adds	r3, r7, #7
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	b25b      	sxtb	r3, r3
 80004d8:	e026      	b.n	8000528 <bno055_init+0x7c>

	status = bno055_setOperationModeNDOF();
 80004da:	1dfc      	adds	r4, r7, #7
 80004dc:	f000 f895 	bl	800060a <bno055_setOperationModeNDOF>
 80004e0:	0003      	movs	r3, r0
 80004e2:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80004e4:	1dfb      	adds	r3, r7, #7
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	b25b      	sxtb	r3, r3
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d003      	beq.n	80004f6 <bno055_init+0x4a>
 80004ee:	1dfb      	adds	r3, r7, #7
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	b25b      	sxtb	r3, r3
 80004f4:	e018      	b.n	8000528 <bno055_init+0x7c>

	// Setup the remote IMU
	bno055_address = BNO055_I2C_ADDR_HI << 1;
 80004f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000530 <bno055_init+0x84>)
 80004f8:	2252      	movs	r2, #82	@ 0x52
 80004fa:	701a      	strb	r2, [r3, #0]
	status = bno055_setup();
 80004fc:	1dfc      	adds	r4, r7, #7
 80004fe:	f000 f96b 	bl	80007d8 <bno055_setup>
 8000502:	0003      	movs	r3, r0
 8000504:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8000506:	1dfb      	adds	r3, r7, #7
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	b25b      	sxtb	r3, r3
 800050c:	2b00      	cmp	r3, #0
 800050e:	d003      	beq.n	8000518 <bno055_init+0x6c>
 8000510:	1dfb      	adds	r3, r7, #7
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	b25b      	sxtb	r3, r3
 8000516:	e007      	b.n	8000528 <bno055_init+0x7c>

	status = bno055_setOperationModeNDOF();
 8000518:	1dfc      	adds	r4, r7, #7
 800051a:	f000 f876 	bl	800060a <bno055_setOperationModeNDOF>
 800051e:	0003      	movs	r3, r0
 8000520:	7023      	strb	r3, [r4, #0]
	return status;
 8000522:	1dfb      	adds	r3, r7, #7
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	b25b      	sxtb	r3, r3
}
 8000528:	0018      	movs	r0, r3
 800052a:	46bd      	mov	sp, r7
 800052c:	b003      	add	sp, #12
 800052e:	bd90      	pop	{r4, r7, pc}
 8000530:	200002e1 	.word	0x200002e1

08000534 <bno055_setPage>:

int8_t bno055_setPage(uint8_t page)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	0002      	movs	r2, r0
 800053c:	1dfb      	adds	r3, r7, #7
 800053e:	701a      	strb	r2, [r3, #0]
	i2c_tx_buffer[0] = BNO055_PAGE_ID;
 8000540:	4b08      	ldr	r3, [pc, #32]	@ (8000564 <bno055_setPage+0x30>)
 8000542:	2207      	movs	r2, #7
 8000544:	701a      	strb	r2, [r3, #0]
	i2c_tx_buffer[1] = page;
 8000546:	4b07      	ldr	r3, [pc, #28]	@ (8000564 <bno055_setPage+0x30>)
 8000548:	1dfa      	adds	r2, r7, #7
 800054a:	7812      	ldrb	r2, [r2, #0]
 800054c:	705a      	strb	r2, [r3, #1]
	return bno055_write(i2c_tx_buffer, 2);
 800054e:	4b05      	ldr	r3, [pc, #20]	@ (8000564 <bno055_setPage+0x30>)
 8000550:	2102      	movs	r1, #2
 8000552:	0018      	movs	r0, r3
 8000554:	f000 fab2 	bl	8000abc <bno055_write>
 8000558:	0003      	movs	r3, r0
}
 800055a:	0018      	movs	r0, r3
 800055c:	46bd      	mov	sp, r7
 800055e:	b002      	add	sp, #8
 8000560:	bd80      	pop	{r7, pc}
 8000562:	46c0      	nop			@ (mov r8, r8)
 8000564:	200000e0 	.word	0x200000e0

08000568 <bno055_setOperationMode>:
{
	return bno055_read(BNO055_OPR_MODE, mode, 1);
}

int8_t bno055_setOperationMode(bno055_opmode_t mode)
{
 8000568:	b5b0      	push	{r4, r5, r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af00      	add	r7, sp, #0
 800056e:	0002      	movs	r2, r0
 8000570:	1dfb      	adds	r3, r7, #7
 8000572:	701a      	strb	r2, [r3, #0]
	int8_t status = HAL_OK;
 8000574:	210f      	movs	r1, #15
 8000576:	187b      	adds	r3, r7, r1
 8000578:	2200      	movs	r2, #0
 800057a:	701a      	strb	r2, [r3, #0]
	i2c_tx_buffer[0] = BNO055_OPR_MODE;
 800057c:	4b1d      	ldr	r3, [pc, #116]	@ (80005f4 <bno055_setOperationMode+0x8c>)
 800057e:	223d      	movs	r2, #61	@ 0x3d
 8000580:	701a      	strb	r2, [r3, #0]
	i2c_tx_buffer[1] = mode;
 8000582:	4b1c      	ldr	r3, [pc, #112]	@ (80005f4 <bno055_setOperationMode+0x8c>)
 8000584:	1dfa      	adds	r2, r7, #7
 8000586:	7812      	ldrb	r2, [r2, #0]
 8000588:	705a      	strb	r2, [r3, #1]
	status = bno055_write(i2c_tx_buffer, 2);
 800058a:	000d      	movs	r5, r1
 800058c:	187c      	adds	r4, r7, r1
 800058e:	4b19      	ldr	r3, [pc, #100]	@ (80005f4 <bno055_setOperationMode+0x8c>)
 8000590:	2102      	movs	r1, #2
 8000592:	0018      	movs	r0, r3
 8000594:	f000 fa92 	bl	8000abc <bno055_write>
 8000598:	0003      	movs	r3, r0
 800059a:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800059c:	197b      	adds	r3, r7, r5
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	b25b      	sxtb	r3, r3
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d003      	beq.n	80005ae <bno055_setOperationMode+0x46>
 80005a6:	197b      	adds	r3, r7, r5
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	b25b      	sxtb	r3, r3
 80005ac:	e01e      	b.n	80005ec <bno055_setOperationMode+0x84>

	status = bno055_poll_transaction();
 80005ae:	250f      	movs	r5, #15
 80005b0:	197c      	adds	r4, r7, r5
 80005b2:	f000 f8bf 	bl	8000734 <bno055_poll_transaction>
 80005b6:	0003      	movs	r3, r0
 80005b8:	7023      	strb	r3, [r4, #0]
//	bno055_writeData(BNO055_OPR_MODE, mode);
	if(status != HAL_OK){return status;}
 80005ba:	002a      	movs	r2, r5
 80005bc:	18bb      	adds	r3, r7, r2
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	b25b      	sxtb	r3, r3
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d003      	beq.n	80005ce <bno055_setOperationMode+0x66>
 80005c6:	18bb      	adds	r3, r7, r2
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	b25b      	sxtb	r3, r3
 80005cc:	e00e      	b.n	80005ec <bno055_setOperationMode+0x84>

	if (mode == BNO055_OPERATION_MODE_CONFIG)
 80005ce:	1dfb      	adds	r3, r7, #7
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d103      	bne.n	80005de <bno055_setOperationMode+0x76>
	{
		bno055_delay(19);
 80005d6:	2013      	movs	r0, #19
 80005d8:	f7ff ff5c 	bl	8000494 <bno055_delay>
 80005dc:	e002      	b.n	80005e4 <bno055_setOperationMode+0x7c>
	}
	else
	{
		bno055_delay(7);
 80005de:	2007      	movs	r0, #7
 80005e0:	f7ff ff58 	bl	8000494 <bno055_delay>
	}
	return status;
 80005e4:	230f      	movs	r3, #15
 80005e6:	18fb      	adds	r3, r7, r3
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	b25b      	sxtb	r3, r3
}
 80005ec:	0018      	movs	r0, r3
 80005ee:	46bd      	mov	sp, r7
 80005f0:	b004      	add	sp, #16
 80005f2:	bdb0      	pop	{r4, r5, r7, pc}
 80005f4:	200000e0 	.word	0x200000e0

080005f8 <bno055_setOperationModeConfig>:

int8_t bno055_setOperationModeConfig()
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
	return bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 80005fc:	2000      	movs	r0, #0
 80005fe:	f7ff ffb3 	bl	8000568 <bno055_setOperationMode>
 8000602:	0003      	movs	r3, r0
}
 8000604:	0018      	movs	r0, r3
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}

0800060a <bno055_setOperationModeNDOF>:

int8_t bno055_setOperationModeNDOF()
{
 800060a:	b580      	push	{r7, lr}
 800060c:	af00      	add	r7, sp, #0
	return bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 800060e:	200c      	movs	r0, #12
 8000610:	f7ff ffaa 	bl	8000568 <bno055_setOperationMode>
 8000614:	0003      	movs	r3, r0
}
 8000616:	0018      	movs	r0, r3
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}

0800061c <bno055_setExternalCrystalUse>:

int8_t bno055_setExternalCrystalUse(uint8_t state)
{
 800061c:	b5b0      	push	{r4, r5, r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	0002      	movs	r2, r0
 8000624:	1dfb      	adds	r3, r7, #7
 8000626:	701a      	strb	r2, [r3, #0]
	int8_t status = HAL_OK;
 8000628:	250f      	movs	r5, #15
 800062a:	197b      	adds	r3, r7, r5
 800062c:	2200      	movs	r2, #0
 800062e:	701a      	strb	r2, [r3, #0]
	status = bno055_setPage(0);
 8000630:	197c      	adds	r4, r7, r5
 8000632:	2000      	movs	r0, #0
 8000634:	f7ff ff7e 	bl	8000534 <bno055_setPage>
 8000638:	0003      	movs	r3, r0
 800063a:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800063c:	002a      	movs	r2, r5
 800063e:	18bb      	adds	r3, r7, r2
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	b25b      	sxtb	r3, r3
 8000644:	2b00      	cmp	r3, #0
 8000646:	d003      	beq.n	8000650 <bno055_setExternalCrystalUse+0x34>
 8000648:	18bb      	adds	r3, r7, r2
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	b25b      	sxtb	r3, r3
 800064e:	e069      	b.n	8000724 <bno055_setExternalCrystalUse+0x108>

	status = bno055_poll_transaction();
 8000650:	250f      	movs	r5, #15
 8000652:	197c      	adds	r4, r7, r5
 8000654:	f000 f86e 	bl	8000734 <bno055_poll_transaction>
 8000658:	0003      	movs	r3, r0
 800065a:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800065c:	002a      	movs	r2, r5
 800065e:	18bb      	adds	r3, r7, r2
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	b25b      	sxtb	r3, r3
 8000664:	2b00      	cmp	r3, #0
 8000666:	d003      	beq.n	8000670 <bno055_setExternalCrystalUse+0x54>
 8000668:	18bb      	adds	r3, r7, r2
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	b25b      	sxtb	r3, r3
 800066e:	e059      	b.n	8000724 <bno055_setExternalCrystalUse+0x108>

	status = bno055_read(BNO055_SYS_TRIGGER, i2c_rx_buffer, 1);
 8000670:	250f      	movs	r5, #15
 8000672:	197c      	adds	r4, r7, r5
 8000674:	4b2d      	ldr	r3, [pc, #180]	@ (800072c <bno055_setExternalCrystalUse+0x110>)
 8000676:	2201      	movs	r2, #1
 8000678:	0019      	movs	r1, r3
 800067a:	203f      	movs	r0, #63	@ 0x3f
 800067c:	f000 fa58 	bl	8000b30 <bno055_read>
 8000680:	0003      	movs	r3, r0
 8000682:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8000684:	197b      	adds	r3, r7, r5
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	b25b      	sxtb	r3, r3
 800068a:	2b00      	cmp	r3, #0
 800068c:	d003      	beq.n	8000696 <bno055_setExternalCrystalUse+0x7a>
 800068e:	197b      	adds	r3, r7, r5
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	b25b      	sxtb	r3, r3
 8000694:	e046      	b.n	8000724 <bno055_setExternalCrystalUse+0x108>

	status = bno055_poll_transaction();
 8000696:	250f      	movs	r5, #15
 8000698:	197c      	adds	r4, r7, r5
 800069a:	f000 f84b 	bl	8000734 <bno055_poll_transaction>
 800069e:	0003      	movs	r3, r0
 80006a0:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80006a2:	002a      	movs	r2, r5
 80006a4:	18bb      	adds	r3, r7, r2
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	b25b      	sxtb	r3, r3
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d003      	beq.n	80006b6 <bno055_setExternalCrystalUse+0x9a>
 80006ae:	18bb      	adds	r3, r7, r2
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	b25b      	sxtb	r3, r3
 80006b4:	e036      	b.n	8000724 <bno055_setExternalCrystalUse+0x108>

	i2c_rx_buffer[0] |= (state == 1) ? 0x80 : 0x0;
 80006b6:	4b1d      	ldr	r3, [pc, #116]	@ (800072c <bno055_setExternalCrystalUse+0x110>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	b25a      	sxtb	r2, r3
 80006bc:	1dfb      	adds	r3, r7, #7
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d102      	bne.n	80006ca <bno055_setExternalCrystalUse+0xae>
 80006c4:	2380      	movs	r3, #128	@ 0x80
 80006c6:	425b      	negs	r3, r3
 80006c8:	e000      	b.n	80006cc <bno055_setExternalCrystalUse+0xb0>
 80006ca:	2300      	movs	r3, #0
 80006cc:	4313      	orrs	r3, r2
 80006ce:	b25b      	sxtb	r3, r3
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	4b16      	ldr	r3, [pc, #88]	@ (800072c <bno055_setExternalCrystalUse+0x110>)
 80006d4:	701a      	strb	r2, [r3, #0]
	i2c_tx_buffer[0] = BNO055_SYS_TRIGGER;
 80006d6:	4b16      	ldr	r3, [pc, #88]	@ (8000730 <bno055_setExternalCrystalUse+0x114>)
 80006d8:	223f      	movs	r2, #63	@ 0x3f
 80006da:	701a      	strb	r2, [r3, #0]
	i2c_tx_buffer[1] = i2c_rx_buffer[0];
 80006dc:	4b13      	ldr	r3, [pc, #76]	@ (800072c <bno055_setExternalCrystalUse+0x110>)
 80006de:	781a      	ldrb	r2, [r3, #0]
 80006e0:	4b13      	ldr	r3, [pc, #76]	@ (8000730 <bno055_setExternalCrystalUse+0x114>)
 80006e2:	705a      	strb	r2, [r3, #1]
	status = bno055_write(i2c_tx_buffer, 2);
 80006e4:	250f      	movs	r5, #15
 80006e6:	197c      	adds	r4, r7, r5
 80006e8:	4b11      	ldr	r3, [pc, #68]	@ (8000730 <bno055_setExternalCrystalUse+0x114>)
 80006ea:	2102      	movs	r1, #2
 80006ec:	0018      	movs	r0, r3
 80006ee:	f000 f9e5 	bl	8000abc <bno055_write>
 80006f2:	0003      	movs	r3, r0
 80006f4:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80006f6:	197b      	adds	r3, r7, r5
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	b25b      	sxtb	r3, r3
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d003      	beq.n	8000708 <bno055_setExternalCrystalUse+0xec>
 8000700:	197b      	adds	r3, r7, r5
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	b25b      	sxtb	r3, r3
 8000706:	e00d      	b.n	8000724 <bno055_setExternalCrystalUse+0x108>

	status = bno055_poll_transaction();
 8000708:	250f      	movs	r5, #15
 800070a:	197c      	adds	r4, r7, r5
 800070c:	f000 f812 	bl	8000734 <bno055_poll_transaction>
 8000710:	0003      	movs	r3, r0
 8000712:	7023      	strb	r3, [r4, #0]
	bno055_delay(700);
 8000714:	23af      	movs	r3, #175	@ 0xaf
 8000716:	009b      	lsls	r3, r3, #2
 8000718:	0018      	movs	r0, r3
 800071a:	f7ff febb 	bl	8000494 <bno055_delay>
	return status;
 800071e:	197b      	adds	r3, r7, r5
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	b25b      	sxtb	r3, r3
}
 8000724:	0018      	movs	r0, r3
 8000726:	46bd      	mov	sp, r7
 8000728:	b004      	add	sp, #16
 800072a:	bdb0      	pop	{r4, r5, r7, pc}
 800072c:	200001e0 	.word	0x200001e0
 8000730:	200000e0 	.word	0x200000e0

08000734 <bno055_poll_transaction>:

int8_t bno055_enableExternalCrystal() { return bno055_setExternalCrystalUse(1); }
int8_t bno055_disableExternalCrystal() { return bno055_setExternalCrystalUse(0); }

int8_t bno055_poll_transaction()
{
 8000734:	b590      	push	{r4, r7, lr}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
	int8_t status = HAL_BUSY;
 800073a:	1dfb      	adds	r3, r7, #7
 800073c:	2202      	movs	r2, #2
 800073e:	701a      	strb	r2, [r3, #0]

	while(status == HAL_BUSY)
 8000740:	e004      	b.n	800074c <bno055_poll_transaction+0x18>
	{
		status = monitor_i2c();
 8000742:	1dfc      	adds	r4, r7, #7
 8000744:	f000 f958 	bl	80009f8 <monitor_i2c>
 8000748:	0003      	movs	r3, r0
 800074a:	7023      	strb	r3, [r4, #0]
	while(status == HAL_BUSY)
 800074c:	1dfb      	adds	r3, r7, #7
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	b25b      	sxtb	r3, r3
 8000752:	2b02      	cmp	r3, #2
 8000754:	d0f5      	beq.n	8000742 <bno055_poll_transaction+0xe>
	}

	return status;
 8000756:	1dfb      	adds	r3, r7, #7
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	b25b      	sxtb	r3, r3
}
 800075c:	0018      	movs	r0, r3
 800075e:	46bd      	mov	sp, r7
 8000760:	b003      	add	sp, #12
 8000762:	bd90      	pop	{r4, r7, pc}

08000764 <bno055_reset>:

int8_t bno055_reset()
{
 8000764:	b590      	push	{r4, r7, lr}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
	int8_t status = HAL_OK;
 800076a:	1dfb      	adds	r3, r7, #7
 800076c:	2200      	movs	r2, #0
 800076e:	701a      	strb	r2, [r3, #0]
	i2c_tx_buffer[0] = BNO055_SYS_TRIGGER;
 8000770:	4b18      	ldr	r3, [pc, #96]	@ (80007d4 <bno055_reset+0x70>)
 8000772:	223f      	movs	r2, #63	@ 0x3f
 8000774:	701a      	strb	r2, [r3, #0]
	i2c_tx_buffer[1] = 0x20;
 8000776:	4b17      	ldr	r3, [pc, #92]	@ (80007d4 <bno055_reset+0x70>)
 8000778:	2220      	movs	r2, #32
 800077a:	705a      	strb	r2, [r3, #1]
	status = bno055_write(i2c_tx_buffer, 2);
 800077c:	1dfc      	adds	r4, r7, #7
 800077e:	4b15      	ldr	r3, [pc, #84]	@ (80007d4 <bno055_reset+0x70>)
 8000780:	2102      	movs	r1, #2
 8000782:	0018      	movs	r0, r3
 8000784:	f000 f99a 	bl	8000abc <bno055_write>
 8000788:	0003      	movs	r3, r0
 800078a:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800078c:	1dfb      	adds	r3, r7, #7
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	b25b      	sxtb	r3, r3
 8000792:	2b00      	cmp	r3, #0
 8000794:	d003      	beq.n	800079e <bno055_reset+0x3a>
 8000796:	1dfb      	adds	r3, r7, #7
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	b25b      	sxtb	r3, r3
 800079c:	e015      	b.n	80007ca <bno055_reset+0x66>

	status = bno055_poll_transaction();
 800079e:	1dfc      	adds	r4, r7, #7
 80007a0:	f7ff ffc8 	bl	8000734 <bno055_poll_transaction>
 80007a4:	0003      	movs	r3, r0
 80007a6:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80007a8:	1dfb      	adds	r3, r7, #7
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	b25b      	sxtb	r3, r3
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d003      	beq.n	80007ba <bno055_reset+0x56>
 80007b2:	1dfb      	adds	r3, r7, #7
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	b25b      	sxtb	r3, r3
 80007b8:	e007      	b.n	80007ca <bno055_reset+0x66>

	bno055_delay(700);
 80007ba:	23af      	movs	r3, #175	@ 0xaf
 80007bc:	009b      	lsls	r3, r3, #2
 80007be:	0018      	movs	r0, r3
 80007c0:	f7ff fe68 	bl	8000494 <bno055_delay>
	return status;
 80007c4:	1dfb      	adds	r3, r7, #7
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	b25b      	sxtb	r3, r3
}
 80007ca:	0018      	movs	r0, r3
 80007cc:	46bd      	mov	sp, r7
 80007ce:	b003      	add	sp, #12
 80007d0:	bd90      	pop	{r4, r7, pc}
 80007d2:	46c0      	nop			@ (mov r8, r8)
 80007d4:	200000e0 	.word	0x200000e0

080007d8 <bno055_setup>:

	return bno055_read(BNO055_TEMP, (uint8_t*) temp, 1);
}

int8_t bno055_setup()
{
 80007d8:	b590      	push	{r4, r7, lr}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
	int8_t status = HAL_OK;
 80007de:	1dfb      	adds	r3, r7, #7
 80007e0:	2200      	movs	r2, #0
 80007e2:	701a      	strb	r2, [r3, #0]
	read_index = 0;
 80007e4:	4b38      	ldr	r3, [pc, #224]	@ (80008c8 <bno055_setup+0xf0>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	701a      	strb	r2, [r3, #0]
	status = bno055_reset();
 80007ea:	1dfc      	adds	r4, r7, #7
 80007ec:	f7ff ffba 	bl	8000764 <bno055_reset>
 80007f0:	0003      	movs	r3, r0
 80007f2:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80007f4:	1dfb      	adds	r3, r7, #7
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	b25b      	sxtb	r3, r3
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d003      	beq.n	8000806 <bno055_setup+0x2e>
 80007fe:	1dfb      	adds	r3, r7, #7
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	b25b      	sxtb	r3, r3
 8000804:	e05c      	b.n	80008c0 <bno055_setup+0xe8>

	status = bno055_read(BNO055_CHIP_ID, i2c_rx_buffer, 1);
 8000806:	1dfc      	adds	r4, r7, #7
 8000808:	4b30      	ldr	r3, [pc, #192]	@ (80008cc <bno055_setup+0xf4>)
 800080a:	2201      	movs	r2, #1
 800080c:	0019      	movs	r1, r3
 800080e:	2000      	movs	r0, #0
 8000810:	f000 f98e 	bl	8000b30 <bno055_read>
 8000814:	0003      	movs	r3, r0
 8000816:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8000818:	1dfb      	adds	r3, r7, #7
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	b25b      	sxtb	r3, r3
 800081e:	2b00      	cmp	r3, #0
 8000820:	d003      	beq.n	800082a <bno055_setup+0x52>
 8000822:	1dfb      	adds	r3, r7, #7
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	b25b      	sxtb	r3, r3
 8000828:	e04a      	b.n	80008c0 <bno055_setup+0xe8>

	status = bno055_poll_transaction();
 800082a:	1dfc      	adds	r4, r7, #7
 800082c:	f7ff ff82 	bl	8000734 <bno055_poll_transaction>
 8000830:	0003      	movs	r3, r0
 8000832:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8000834:	1dfb      	adds	r3, r7, #7
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	b25b      	sxtb	r3, r3
 800083a:	2b00      	cmp	r3, #0
 800083c:	d003      	beq.n	8000846 <bno055_setup+0x6e>
 800083e:	1dfb      	adds	r3, r7, #7
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	b25b      	sxtb	r3, r3
 8000844:	e03c      	b.n	80008c0 <bno055_setup+0xe8>

	if(i2c_rx_buffer[0] != BNO055_ID)
 8000846:	4b21      	ldr	r3, [pc, #132]	@ (80008cc <bno055_setup+0xf4>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	2ba0      	cmp	r3, #160	@ 0xa0
 800084c:	d001      	beq.n	8000852 <bno055_setup+0x7a>
	{
		return HAL_ERROR;
 800084e:	2301      	movs	r3, #1
 8000850:	e036      	b.n	80008c0 <bno055_setup+0xe8>
	}
	status = bno055_setPage(0);
 8000852:	1dfc      	adds	r4, r7, #7
 8000854:	2000      	movs	r0, #0
 8000856:	f7ff fe6d 	bl	8000534 <bno055_setPage>
 800085a:	0003      	movs	r3, r0
 800085c:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800085e:	1dfb      	adds	r3, r7, #7
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	b25b      	sxtb	r3, r3
 8000864:	2b00      	cmp	r3, #0
 8000866:	d003      	beq.n	8000870 <bno055_setup+0x98>
 8000868:	1dfb      	adds	r3, r7, #7
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	b25b      	sxtb	r3, r3
 800086e:	e027      	b.n	80008c0 <bno055_setup+0xe8>

	status = bno055_poll_transaction();
 8000870:	1dfc      	adds	r4, r7, #7
 8000872:	f7ff ff5f 	bl	8000734 <bno055_poll_transaction>
 8000876:	0003      	movs	r3, r0
 8000878:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800087a:	1dfb      	adds	r3, r7, #7
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	b25b      	sxtb	r3, r3
 8000880:	2b00      	cmp	r3, #0
 8000882:	d003      	beq.n	800088c <bno055_setup+0xb4>
 8000884:	1dfb      	adds	r3, r7, #7
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	b25b      	sxtb	r3, r3
 800088a:	e019      	b.n	80008c0 <bno055_setup+0xe8>

	status = bno055_setExternalCrystalUse(0);
 800088c:	1dfc      	adds	r4, r7, #7
 800088e:	2000      	movs	r0, #0
 8000890:	f7ff fec4 	bl	800061c <bno055_setExternalCrystalUse>
 8000894:	0003      	movs	r3, r0
 8000896:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8000898:	1dfb      	adds	r3, r7, #7
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	b25b      	sxtb	r3, r3
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d003      	beq.n	80008aa <bno055_setup+0xd2>
 80008a2:	1dfb      	adds	r3, r7, #7
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	b25b      	sxtb	r3, r3
 80008a8:	e00a      	b.n	80008c0 <bno055_setup+0xe8>

	// Select BNO055 config mode
	status = bno055_setOperationModeConfig();
 80008aa:	1dfc      	adds	r4, r7, #7
 80008ac:	f7ff fea4 	bl	80005f8 <bno055_setOperationModeConfig>
 80008b0:	0003      	movs	r3, r0
 80008b2:	7023      	strb	r3, [r4, #0]
	bno055_delay(10);
 80008b4:	200a      	movs	r0, #10
 80008b6:	f7ff fded 	bl	8000494 <bno055_delay>
	return status;
 80008ba:	1dfb      	adds	r3, r7, #7
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	b25b      	sxtb	r3, r3
}
 80008c0:	0018      	movs	r0, r3
 80008c2:	46bd      	mov	sp, r7
 80008c4:	b003      	add	sp, #12
 80008c6:	bd90      	pop	{r4, r7, pc}
 80008c8:	200002e0 	.word	0x200002e0
 80008cc:	200001e0 	.word	0x200001e0

080008d0 <bno055_rx>:
		bno055_read(mem_read_map[i].reg, &buffer[6 * i], mem_read_map[i].reg_len);
	}
}

uint8_t bno055_rx()
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
	if(i2c_rx_int)
 80008d4:	4b07      	ldr	r3, [pc, #28]	@ (80008f4 <bno055_rx+0x24>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d004      	beq.n	80008e8 <bno055_rx+0x18>
	{
		i2c_rx_int = 0;
 80008de:	4b05      	ldr	r3, [pc, #20]	@ (80008f4 <bno055_rx+0x24>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	701a      	strb	r2, [r3, #0]
		return 1;
 80008e4:	2301      	movs	r3, #1
 80008e6:	e002      	b.n	80008ee <bno055_rx+0x1e>
	}
	return i2c_rx_int;
 80008e8:	4b02      	ldr	r3, [pc, #8]	@ (80008f4 <bno055_rx+0x24>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	b2db      	uxtb	r3, r3
}
 80008ee:	0018      	movs	r0, r3
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	2000000f 	.word	0x2000000f

080008f8 <bno055_queue_transaction>:

int8_t bno055_queue_transaction()
{
 80008f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008fa:	b085      	sub	sp, #20
 80008fc:	af02      	add	r7, sp, #8
	uint8_t status = HAL_OK;
 80008fe:	1d7b      	adds	r3, r7, #5
 8000900:	2200      	movs	r2, #0
 8000902:	701a      	strb	r2, [r3, #0]
	uint16_t start_register = 0;
 8000904:	1dbb      	adds	r3, r7, #6
 8000906:	2200      	movs	r2, #0
 8000908:	801a      	strh	r2, [r3, #0]
	if(bno055_address == BNO055_I2C_ADDR_LO << 1)
 800090a:	4b33      	ldr	r3, [pc, #204]	@ (80009d8 <bno055_queue_transaction+0xe0>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	2b50      	cmp	r3, #80	@ 0x50
 8000910:	d103      	bne.n	800091a <bno055_queue_transaction+0x22>
	{
		start_register = ACCELEROMETER_X;
 8000912:	1dbb      	adds	r3, r7, #6
 8000914:	2212      	movs	r2, #18
 8000916:	801a      	strh	r2, [r3, #0]
 8000918:	e002      	b.n	8000920 <bno055_queue_transaction+0x28>
	}
	else
	{
		start_register = REMOTE_ACCELEROMETER_X;
 800091a:	1dbb      	adds	r3, r7, #6
 800091c:	2228      	movs	r2, #40	@ 0x28
 800091e:	801a      	strh	r2, [r3, #0]
	}
	uint8_t* buffer = (uint8_t*)(&holding_register_database[start_register]);
 8000920:	1dbb      	adds	r3, r7, #6
 8000922:	881b      	ldrh	r3, [r3, #0]
 8000924:	005a      	lsls	r2, r3, #1
 8000926:	4b2d      	ldr	r3, [pc, #180]	@ (80009dc <bno055_queue_transaction+0xe4>)
 8000928:	18d3      	adds	r3, r2, r3
 800092a:	603b      	str	r3, [r7, #0]
	i2c_rx_int = 0;
 800092c:	4b2c      	ldr	r3, [pc, #176]	@ (80009e0 <bno055_queue_transaction+0xe8>)
 800092e:	2200      	movs	r2, #0
 8000930:	701a      	strb	r2, [r3, #0]
	i2c_rx_time = HAL_GetTick();
 8000932:	f004 f955 	bl	8004be0 <HAL_GetTick>
 8000936:	0002      	movs	r2, r0
 8000938:	4b2a      	ldr	r3, [pc, #168]	@ (80009e4 <bno055_queue_transaction+0xec>)
 800093a:	601a      	str	r2, [r3, #0]
	status = HAL_I2C_Mem_Read_DMA(&hi2c1, bno055_address, mem_read_map[read_index].reg,
 800093c:	4b26      	ldr	r3, [pc, #152]	@ (80009d8 <bno055_queue_transaction+0xe0>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	001d      	movs	r5, r3
 8000942:	4b29      	ldr	r3, [pc, #164]	@ (80009e8 <bno055_queue_transaction+0xf0>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	001a      	movs	r2, r3
 8000948:	4b28      	ldr	r3, [pc, #160]	@ (80009ec <bno055_queue_transaction+0xf4>)
 800094a:	0052      	lsls	r2, r2, #1
 800094c:	5cd3      	ldrb	r3, [r2, r3]
 800094e:	001e      	movs	r6, r3
			I2C_MEMADD_SIZE_8BIT, (uint8_t*)(&holding_register_database[start_register + (3 * read_index)]),
 8000950:	1dbb      	adds	r3, r7, #6
 8000952:	881a      	ldrh	r2, [r3, #0]
 8000954:	4b24      	ldr	r3, [pc, #144]	@ (80009e8 <bno055_queue_transaction+0xf0>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	0019      	movs	r1, r3
 800095a:	000b      	movs	r3, r1
 800095c:	005b      	lsls	r3, r3, #1
 800095e:	185b      	adds	r3, r3, r1
 8000960:	18d3      	adds	r3, r2, r3
 8000962:	005a      	lsls	r2, r3, #1
 8000964:	4b1d      	ldr	r3, [pc, #116]	@ (80009dc <bno055_queue_transaction+0xe4>)
 8000966:	18d3      	adds	r3, r2, r3
			mem_read_map[read_index].reg_len);
 8000968:	4a1f      	ldr	r2, [pc, #124]	@ (80009e8 <bno055_queue_transaction+0xf0>)
 800096a:	7812      	ldrb	r2, [r2, #0]
 800096c:	491f      	ldr	r1, [pc, #124]	@ (80009ec <bno055_queue_transaction+0xf4>)
 800096e:	0052      	lsls	r2, r2, #1
 8000970:	188a      	adds	r2, r1, r2
 8000972:	3201      	adds	r2, #1
 8000974:	7812      	ldrb	r2, [r2, #0]
	status = HAL_I2C_Mem_Read_DMA(&hi2c1, bno055_address, mem_read_map[read_index].reg,
 8000976:	1d7c      	adds	r4, r7, #5
 8000978:	481d      	ldr	r0, [pc, #116]	@ (80009f0 <bno055_queue_transaction+0xf8>)
 800097a:	9201      	str	r2, [sp, #4]
 800097c:	9300      	str	r3, [sp, #0]
 800097e:	2301      	movs	r3, #1
 8000980:	0032      	movs	r2, r6
 8000982:	0029      	movs	r1, r5
 8000984:	f005 fbe6 	bl	8006154 <HAL_I2C_Mem_Read_DMA>
 8000988:	0003      	movs	r3, r0
 800098a:	7023      	strb	r3, [r4, #0]
	__HAL_DMA_DISABLE_IT(&hdma_i2c1_rx, DMA_IT_HT);
 800098c:	4b19      	ldr	r3, [pc, #100]	@ (80009f4 <bno055_queue_transaction+0xfc>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	681a      	ldr	r2, [r3, #0]
 8000992:	4b18      	ldr	r3, [pc, #96]	@ (80009f4 <bno055_queue_transaction+0xfc>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	2104      	movs	r1, #4
 8000998:	438a      	bics	r2, r1
 800099a:	601a      	str	r2, [r3, #0]

	if(read_index == NUM_VECTORS - 1)
 800099c:	4b12      	ldr	r3, [pc, #72]	@ (80009e8 <bno055_queue_transaction+0xf0>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	2b06      	cmp	r3, #6
 80009a2:	d10c      	bne.n	80009be <bno055_queue_transaction+0xc6>
	{
		// Reset the read index
		read_index = 0;
 80009a4:	4b10      	ldr	r3, [pc, #64]	@ (80009e8 <bno055_queue_transaction+0xf0>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	701a      	strb	r2, [r3, #0]
		// Switch to the other IMU
		bno055_address = (bno055_address == (BNO055_I2C_ADDR_LO << 1))? (BNO055_I2C_ADDR_HI << 1): (BNO055_I2C_ADDR_LO << 1);
 80009aa:	4b0b      	ldr	r3, [pc, #44]	@ (80009d8 <bno055_queue_transaction+0xe0>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	2b50      	cmp	r3, #80	@ 0x50
 80009b0:	d101      	bne.n	80009b6 <bno055_queue_transaction+0xbe>
 80009b2:	2252      	movs	r2, #82	@ 0x52
 80009b4:	e000      	b.n	80009b8 <bno055_queue_transaction+0xc0>
 80009b6:	2250      	movs	r2, #80	@ 0x50
 80009b8:	4b07      	ldr	r3, [pc, #28]	@ (80009d8 <bno055_queue_transaction+0xe0>)
 80009ba:	701a      	strb	r2, [r3, #0]
 80009bc:	e005      	b.n	80009ca <bno055_queue_transaction+0xd2>
	}
	else
	{
		// Increment the read index to read the next vector on the next run
		read_index = read_index + 1;
 80009be:	4b0a      	ldr	r3, [pc, #40]	@ (80009e8 <bno055_queue_transaction+0xf0>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	3301      	adds	r3, #1
 80009c4:	b2da      	uxtb	r2, r3
 80009c6:	4b08      	ldr	r3, [pc, #32]	@ (80009e8 <bno055_queue_transaction+0xf0>)
 80009c8:	701a      	strb	r2, [r3, #0]
	}
	return status;
 80009ca:	1d7b      	adds	r3, r7, #5
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	b25b      	sxtb	r3, r3
}
 80009d0:	0018      	movs	r0, r3
 80009d2:	46bd      	mov	sp, r7
 80009d4:	b003      	add	sp, #12
 80009d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009d8:	200002e1 	.word	0x200002e1
 80009dc:	20000014 	.word	0x20000014
 80009e0:	2000000f 	.word	0x2000000f
 80009e4:	200002e8 	.word	0x200002e8
 80009e8:	200002e0 	.word	0x200002e0
 80009ec:	20000000 	.word	0x20000000
 80009f0:	20000304 	.word	0x20000304
 80009f4:	20000358 	.word	0x20000358

080009f8 <monitor_i2c>:
//	status = bno055_write(i2c_rx_buffer, 2);
//	status |= bno055_poll_transaction();
}

int8_t monitor_i2c()
{
 80009f8:	b590      	push	{r4, r7, lr}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
	int8_t status = HAL_OK;
 80009fe:	1dfb      	adds	r3, r7, #7
 8000a00:	2200      	movs	r2, #0
 8000a02:	701a      	strb	r2, [r3, #0]

	// I2C error handling
	if(i2c_err_int)
 8000a04:	4b28      	ldr	r3, [pc, #160]	@ (8000aa8 <monitor_i2c+0xb0>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d015      	beq.n	8000a3a <monitor_i2c+0x42>
	{
		i2c_err_int = 0;
 8000a0e:	4b26      	ldr	r3, [pc, #152]	@ (8000aa8 <monitor_i2c+0xb0>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	701a      	strb	r2, [r3, #0]
		status = i2c_reset();
 8000a14:	1dfc      	adds	r4, r7, #7
 8000a16:	f000 f905 	bl	8000c24 <i2c_reset>
 8000a1a:	0003      	movs	r3, r0
 8000a1c:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK)
 8000a1e:	1dfb      	adds	r3, r7, #7
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	b25b      	sxtb	r3, r3
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d003      	beq.n	8000a30 <monitor_i2c+0x38>
		{
			return status;
 8000a28:	1dfb      	adds	r3, r7, #7
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	b25b      	sxtb	r3, r3
 8000a2e:	e037      	b.n	8000aa0 <monitor_i2c+0xa8>
		}
		return handle_i2c_error(I2C_ERROR);
 8000a30:	2018      	movs	r0, #24
 8000a32:	f000 f955 	bl	8000ce0 <handle_i2c_error>
 8000a36:	0003      	movs	r3, r0
 8000a38:	e032      	b.n	8000aa0 <monitor_i2c+0xa8>
	}

	// TX timeout handling
	if(!i2c_tx_int)
 8000a3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000aac <monitor_i2c+0xb4>)
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d112      	bne.n	8000a6a <monitor_i2c+0x72>
	{
		if(HAL_GetTick() - i2c_tx_time >= 20)
 8000a44:	f004 f8cc 	bl	8004be0 <HAL_GetTick>
 8000a48:	0002      	movs	r2, r0
 8000a4a:	4b19      	ldr	r3, [pc, #100]	@ (8000ab0 <monitor_i2c+0xb8>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	1ad3      	subs	r3, r2, r3
 8000a50:	2b13      	cmp	r3, #19
 8000a52:	d907      	bls.n	8000a64 <monitor_i2c+0x6c>
		{
			i2c_tx_int = 1;
 8000a54:	4b15      	ldr	r3, [pc, #84]	@ (8000aac <monitor_i2c+0xb4>)
 8000a56:	2201      	movs	r2, #1
 8000a58:	701a      	strb	r2, [r3, #0]
			return handle_i2c_error(I2C_TX_TIMEOUT);
 8000a5a:	2016      	movs	r0, #22
 8000a5c:	f000 f940 	bl	8000ce0 <handle_i2c_error>
 8000a60:	0003      	movs	r3, r0
 8000a62:	e01d      	b.n	8000aa0 <monitor_i2c+0xa8>
		}
		status = HAL_BUSY;
 8000a64:	1dfb      	adds	r3, r7, #7
 8000a66:	2202      	movs	r2, #2
 8000a68:	701a      	strb	r2, [r3, #0]
	}

	// RX timeout handling
	if(!i2c_rx_int)
 8000a6a:	4b12      	ldr	r3, [pc, #72]	@ (8000ab4 <monitor_i2c+0xbc>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d112      	bne.n	8000a9a <monitor_i2c+0xa2>
	{
		if(HAL_GetTick() - i2c_rx_time >= 20)
 8000a74:	f004 f8b4 	bl	8004be0 <HAL_GetTick>
 8000a78:	0002      	movs	r2, r0
 8000a7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab8 <monitor_i2c+0xc0>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	1ad3      	subs	r3, r2, r3
 8000a80:	2b13      	cmp	r3, #19
 8000a82:	d907      	bls.n	8000a94 <monitor_i2c+0x9c>
		{
			i2c_rx_int = 1;
 8000a84:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab4 <monitor_i2c+0xbc>)
 8000a86:	2201      	movs	r2, #1
 8000a88:	701a      	strb	r2, [r3, #0]
			return handle_i2c_error(I2C_RX_TIMEOUT);
 8000a8a:	2017      	movs	r0, #23
 8000a8c:	f000 f928 	bl	8000ce0 <handle_i2c_error>
 8000a90:	0003      	movs	r3, r0
 8000a92:	e005      	b.n	8000aa0 <monitor_i2c+0xa8>
		}
		status = HAL_BUSY;
 8000a94:	1dfb      	adds	r3, r7, #7
 8000a96:	2202      	movs	r2, #2
 8000a98:	701a      	strb	r2, [r3, #0]
	}

	return status;
 8000a9a:	1dfb      	adds	r3, r7, #7
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	b25b      	sxtb	r3, r3
}
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	b003      	add	sp, #12
 8000aa6:	bd90      	pop	{r4, r7, pc}
 8000aa8:	200002ec 	.word	0x200002ec
 8000aac:	2000000e 	.word	0x2000000e
 8000ab0:	200002e4 	.word	0x200002e4
 8000ab4:	2000000f 	.word	0x2000000f
 8000ab8:	200002e8 	.word	0x200002e8

08000abc <bno055_write>:

int8_t bno055_write(uint8_t *data, uint8_t len)
{
 8000abc:	b590      	push	{r4, r7, lr}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	000a      	movs	r2, r1
 8000ac6:	1cfb      	adds	r3, r7, #3
 8000ac8:	701a      	strb	r2, [r3, #0]
	int8_t status = HAL_OK;
 8000aca:	240f      	movs	r4, #15
 8000acc:	193b      	adds	r3, r7, r4
 8000ace:	2200      	movs	r2, #0
 8000ad0:	701a      	strb	r2, [r3, #0]
	i2c_tx_int = 0;
 8000ad2:	4b12      	ldr	r3, [pc, #72]	@ (8000b1c <bno055_write+0x60>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	701a      	strb	r2, [r3, #0]
	i2c_tx_time = HAL_GetTick();
 8000ad8:	f004 f882 	bl	8004be0 <HAL_GetTick>
 8000adc:	0002      	movs	r2, r0
 8000ade:	4b10      	ldr	r3, [pc, #64]	@ (8000b20 <bno055_write+0x64>)
 8000ae0:	601a      	str	r2, [r3, #0]
	status = HAL_I2C_Master_Transmit_DMA(&hi2c1, bno055_address, data, len);
 8000ae2:	4b10      	ldr	r3, [pc, #64]	@ (8000b24 <bno055_write+0x68>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	0019      	movs	r1, r3
 8000ae8:	1cfb      	adds	r3, r7, #3
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	b29b      	uxth	r3, r3
 8000aee:	687a      	ldr	r2, [r7, #4]
 8000af0:	480d      	ldr	r0, [pc, #52]	@ (8000b28 <bno055_write+0x6c>)
 8000af2:	f005 f8ff 	bl	8005cf4 <HAL_I2C_Master_Transmit_DMA>
 8000af6:	0003      	movs	r3, r0
 8000af8:	001a      	movs	r2, r3
 8000afa:	193b      	adds	r3, r7, r4
 8000afc:	701a      	strb	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(&hdma_i2c1_tx, DMA_IT_HT);
 8000afe:	4b0b      	ldr	r3, [pc, #44]	@ (8000b2c <bno055_write+0x70>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	4b09      	ldr	r3, [pc, #36]	@ (8000b2c <bno055_write+0x70>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	2104      	movs	r1, #4
 8000b0a:	438a      	bics	r2, r1
 8000b0c:	601a      	str	r2, [r3, #0]

	return status;
 8000b0e:	193b      	adds	r3, r7, r4
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	b25b      	sxtb	r3, r3
}
 8000b14:	0018      	movs	r0, r3
 8000b16:	46bd      	mov	sp, r7
 8000b18:	b005      	add	sp, #20
 8000b1a:	bd90      	pop	{r4, r7, pc}
 8000b1c:	2000000e 	.word	0x2000000e
 8000b20:	200002e4 	.word	0x200002e4
 8000b24:	200002e1 	.word	0x200002e1
 8000b28:	20000304 	.word	0x20000304
 8000b2c:	200003b4 	.word	0x200003b4

08000b30 <bno055_read>:

int8_t bno055_read(uint8_t reg, uint8_t *data, uint8_t len)
{
 8000b30:	b5b0      	push	{r4, r5, r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6039      	str	r1, [r7, #0]
 8000b38:	0011      	movs	r1, r2
 8000b3a:	1dfb      	adds	r3, r7, #7
 8000b3c:	1c02      	adds	r2, r0, #0
 8000b3e:	701a      	strb	r2, [r3, #0]
 8000b40:	1dbb      	adds	r3, r7, #6
 8000b42:	1c0a      	adds	r2, r1, #0
 8000b44:	701a      	strb	r2, [r3, #0]
	int8_t status = HAL_OK;
 8000b46:	240f      	movs	r4, #15
 8000b48:	193b      	adds	r3, r7, r4
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	701a      	strb	r2, [r3, #0]
	i2c_tx_int = 0;
 8000b4e:	4b2d      	ldr	r3, [pc, #180]	@ (8000c04 <bno055_read+0xd4>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	701a      	strb	r2, [r3, #0]
	i2c_tx_time = HAL_GetTick();
 8000b54:	f004 f844 	bl	8004be0 <HAL_GetTick>
 8000b58:	0002      	movs	r2, r0
 8000b5a:	4b2b      	ldr	r3, [pc, #172]	@ (8000c08 <bno055_read+0xd8>)
 8000b5c:	601a      	str	r2, [r3, #0]
	status = HAL_I2C_Master_Transmit_DMA(&hi2c1, bno055_address, &reg, 1);
 8000b5e:	4b2b      	ldr	r3, [pc, #172]	@ (8000c0c <bno055_read+0xdc>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	0019      	movs	r1, r3
 8000b64:	1dfa      	adds	r2, r7, #7
 8000b66:	482a      	ldr	r0, [pc, #168]	@ (8000c10 <bno055_read+0xe0>)
 8000b68:	2301      	movs	r3, #1
 8000b6a:	f005 f8c3 	bl	8005cf4 <HAL_I2C_Master_Transmit_DMA>
 8000b6e:	0003      	movs	r3, r0
 8000b70:	001a      	movs	r2, r3
 8000b72:	193b      	adds	r3, r7, r4
 8000b74:	701a      	strb	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(&hdma_i2c1_tx, DMA_IT_HT);
 8000b76:	4b27      	ldr	r3, [pc, #156]	@ (8000c14 <bno055_read+0xe4>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	4b25      	ldr	r3, [pc, #148]	@ (8000c14 <bno055_read+0xe4>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2104      	movs	r1, #4
 8000b82:	438a      	bics	r2, r1
 8000b84:	601a      	str	r2, [r3, #0]
	if(status != HAL_OK){return status;}
 8000b86:	193b      	adds	r3, r7, r4
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	b25b      	sxtb	r3, r3
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d003      	beq.n	8000b98 <bno055_read+0x68>
 8000b90:	193b      	adds	r3, r7, r4
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	b25b      	sxtb	r3, r3
 8000b96:	e031      	b.n	8000bfc <bno055_read+0xcc>
	status = bno055_poll_transaction();
 8000b98:	250f      	movs	r5, #15
 8000b9a:	197c      	adds	r4, r7, r5
 8000b9c:	f7ff fdca 	bl	8000734 <bno055_poll_transaction>
 8000ba0:	0003      	movs	r3, r0
 8000ba2:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8000ba4:	002a      	movs	r2, r5
 8000ba6:	18bb      	adds	r3, r7, r2
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	b25b      	sxtb	r3, r3
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d003      	beq.n	8000bb8 <bno055_read+0x88>
 8000bb0:	18bb      	adds	r3, r7, r2
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	b25b      	sxtb	r3, r3
 8000bb6:	e021      	b.n	8000bfc <bno055_read+0xcc>

	i2c_rx_int = 0;
 8000bb8:	4b17      	ldr	r3, [pc, #92]	@ (8000c18 <bno055_read+0xe8>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	701a      	strb	r2, [r3, #0]
	i2c_rx_time = HAL_GetTick();
 8000bbe:	f004 f80f 	bl	8004be0 <HAL_GetTick>
 8000bc2:	0002      	movs	r2, r0
 8000bc4:	4b15      	ldr	r3, [pc, #84]	@ (8000c1c <bno055_read+0xec>)
 8000bc6:	601a      	str	r2, [r3, #0]
	status = HAL_I2C_Master_Receive_DMA(&hi2c1, bno055_address, data, len);
 8000bc8:	4b10      	ldr	r3, [pc, #64]	@ (8000c0c <bno055_read+0xdc>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	0019      	movs	r1, r3
 8000bce:	1dbb      	adds	r3, r7, #6
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	b29b      	uxth	r3, r3
 8000bd4:	683a      	ldr	r2, [r7, #0]
 8000bd6:	480e      	ldr	r0, [pc, #56]	@ (8000c10 <bno055_read+0xe0>)
 8000bd8:	f005 f9b6 	bl	8005f48 <HAL_I2C_Master_Receive_DMA>
 8000bdc:	0003      	movs	r3, r0
 8000bde:	001a      	movs	r2, r3
 8000be0:	200f      	movs	r0, #15
 8000be2:	183b      	adds	r3, r7, r0
 8000be4:	701a      	strb	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(&hdma_i2c1_rx, DMA_IT_HT);
 8000be6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c20 <bno055_read+0xf0>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	4b0c      	ldr	r3, [pc, #48]	@ (8000c20 <bno055_read+0xf0>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2104      	movs	r1, #4
 8000bf2:	438a      	bics	r2, r1
 8000bf4:	601a      	str	r2, [r3, #0]

	return status;
 8000bf6:	183b      	adds	r3, r7, r0
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	b25b      	sxtb	r3, r3
}
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	b004      	add	sp, #16
 8000c02:	bdb0      	pop	{r4, r5, r7, pc}
 8000c04:	2000000e 	.word	0x2000000e
 8000c08:	200002e4 	.word	0x200002e4
 8000c0c:	200002e1 	.word	0x200002e1
 8000c10:	20000304 	.word	0x20000304
 8000c14:	200003b4 	.word	0x200003b4
 8000c18:	2000000f 	.word	0x2000000f
 8000c1c:	200002e8 	.word	0x200002e8
 8000c20:	20000358 	.word	0x20000358

08000c24 <i2c_reset>:

int8_t i2c_reset()
{
 8000c24:	b590      	push	{r4, r7, lr}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
	int8_t status = HAL_OK;
 8000c2a:	1dfb      	adds	r3, r7, #7
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	701a      	strb	r2, [r3, #0]
	status = bno055_poll_transaction();
 8000c30:	1dfc      	adds	r4, r7, #7
 8000c32:	f7ff fd7f 	bl	8000734 <bno055_poll_transaction>
 8000c36:	0003      	movs	r3, r0
 8000c38:	7023      	strb	r3, [r4, #0]
	status |= HAL_I2C_DeInit(&hi2c1);
 8000c3a:	4b26      	ldr	r3, [pc, #152]	@ (8000cd4 <i2c_reset+0xb0>)
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	f005 f829 	bl	8005c94 <HAL_I2C_DeInit>
 8000c42:	0003      	movs	r3, r0
 8000c44:	b259      	sxtb	r1, r3
 8000c46:	1dfb      	adds	r3, r7, #7
 8000c48:	1dfa      	adds	r2, r7, #7
 8000c4a:	7812      	ldrb	r2, [r2, #0]
 8000c4c:	430a      	orrs	r2, r1
 8000c4e:	701a      	strb	r2, [r3, #0]
	__I2C1_FORCE_RESET();
 8000c50:	4b21      	ldr	r3, [pc, #132]	@ (8000cd8 <i2c_reset+0xb4>)
 8000c52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c54:	4b20      	ldr	r3, [pc, #128]	@ (8000cd8 <i2c_reset+0xb4>)
 8000c56:	2180      	movs	r1, #128	@ 0x80
 8000c58:	0389      	lsls	r1, r1, #14
 8000c5a:	430a      	orrs	r2, r1
 8000c5c:	62da      	str	r2, [r3, #44]	@ 0x2c
	HAL_Delay(100);
 8000c5e:	2064      	movs	r0, #100	@ 0x64
 8000c60:	f003 ffc8 	bl	8004bf4 <HAL_Delay>
	__I2C1_RELEASE_RESET();
 8000c64:	4b1c      	ldr	r3, [pc, #112]	@ (8000cd8 <i2c_reset+0xb4>)
 8000c66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c68:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd8 <i2c_reset+0xb4>)
 8000c6a:	491c      	ldr	r1, [pc, #112]	@ (8000cdc <i2c_reset+0xb8>)
 8000c6c:	400a      	ands	r2, r1
 8000c6e:	62da      	str	r2, [r3, #44]	@ 0x2c
	status = HAL_I2C_Init(&hi2c1);
 8000c70:	4b18      	ldr	r3, [pc, #96]	@ (8000cd4 <i2c_reset+0xb0>)
 8000c72:	0018      	movs	r0, r3
 8000c74:	f004 ff68 	bl	8005b48 <HAL_I2C_Init>
 8000c78:	0003      	movs	r3, r0
 8000c7a:	001a      	movs	r2, r3
 8000c7c:	1dfb      	adds	r3, r7, #7
 8000c7e:	701a      	strb	r2, [r3, #0]
	status |= HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE);
 8000c80:	4b14      	ldr	r3, [pc, #80]	@ (8000cd4 <i2c_reset+0xb0>)
 8000c82:	2100      	movs	r1, #0
 8000c84:	0018      	movs	r0, r3
 8000c86:	f007 f893 	bl	8007db0 <HAL_I2CEx_ConfigAnalogFilter>
 8000c8a:	0003      	movs	r3, r0
 8000c8c:	b259      	sxtb	r1, r3
 8000c8e:	1dfb      	adds	r3, r7, #7
 8000c90:	1dfa      	adds	r2, r7, #7
 8000c92:	7812      	ldrb	r2, [r2, #0]
 8000c94:	430a      	orrs	r2, r1
 8000c96:	701a      	strb	r2, [r3, #0]
	status |= HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0);
 8000c98:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd4 <i2c_reset+0xb0>)
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	0018      	movs	r0, r3
 8000c9e:	f007 f8d3 	bl	8007e48 <HAL_I2CEx_ConfigDigitalFilter>
 8000ca2:	0003      	movs	r3, r0
 8000ca4:	b259      	sxtb	r1, r3
 8000ca6:	1dfb      	adds	r3, r7, #7
 8000ca8:	1dfa      	adds	r2, r7, #7
 8000caa:	7812      	ldrb	r2, [r2, #0]
 8000cac:	430a      	orrs	r2, r1
 8000cae:	701a      	strb	r2, [r3, #0]
	if(status != HAL_OK)
 8000cb0:	1dfb      	adds	r3, r7, #7
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	b25b      	sxtb	r3, r3
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d004      	beq.n	8000cc4 <i2c_reset+0xa0>
	{
		return handle_i2c_error(I2C_FATAL_ERROR);
 8000cba:	2019      	movs	r0, #25
 8000cbc:	f000 f810 	bl	8000ce0 <handle_i2c_error>
 8000cc0:	0003      	movs	r3, r0
 8000cc2:	e002      	b.n	8000cca <i2c_reset+0xa6>
	}
	return status;
 8000cc4:	1dfb      	adds	r3, r7, #7
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	b25b      	sxtb	r3, r3
}
 8000cca:	0018      	movs	r0, r3
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	b003      	add	sp, #12
 8000cd0:	bd90      	pop	{r4, r7, pc}
 8000cd2:	46c0      	nop			@ (mov r8, r8)
 8000cd4:	20000304 	.word	0x20000304
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	ffdfffff 	.word	0xffdfffff

08000ce0 <handle_i2c_error>:

int8_t handle_i2c_error(int8_t error_code)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	0002      	movs	r2, r0
 8000ce8:	1dfb      	adds	r3, r7, #7
 8000cea:	701a      	strb	r2, [r3, #0]
	holding_register_database[I2C_ERRORS] |= 1U << (error_code - I2C_TX_TIMEOUT);
 8000cec:	4b0a      	ldr	r3, [pc, #40]	@ (8000d18 <handle_i2c_error+0x38>)
 8000cee:	895a      	ldrh	r2, [r3, #10]
 8000cf0:	1dfb      	adds	r3, r7, #7
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	b25b      	sxtb	r3, r3
 8000cf6:	3b16      	subs	r3, #22
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	4099      	lsls	r1, r3
 8000cfc:	000b      	movs	r3, r1
 8000cfe:	b29b      	uxth	r3, r3
 8000d00:	4313      	orrs	r3, r2
 8000d02:	b29a      	uxth	r2, r3
 8000d04:	4b04      	ldr	r3, [pc, #16]	@ (8000d18 <handle_i2c_error+0x38>)
 8000d06:	815a      	strh	r2, [r3, #10]
	return error_code;
 8000d08:	1dfb      	adds	r3, r7, #7
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	b25b      	sxtb	r3, r3
}
 8000d0e:	0018      	movs	r0, r3
 8000d10:	46bd      	mov	sp, r7
 8000d12:	b002      	add	sp, #8
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	46c0      	nop			@ (mov r8, r8)
 8000d18:	20000014 	.word	0x20000014

08000d1c <actuate>:
uint8_t rx_data[2];

float pid_step(pid_t *pid, float measurement, float setpoint);

int8_t actuate(uint8_t actuator, uint16_t current, uint16_t target)
{
 8000d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	0004      	movs	r4, r0
 8000d24:	0008      	movs	r0, r1
 8000d26:	0011      	movs	r1, r2
 8000d28:	1dfb      	adds	r3, r7, #7
 8000d2a:	1c22      	adds	r2, r4, #0
 8000d2c:	701a      	strb	r2, [r3, #0]
 8000d2e:	1d3b      	adds	r3, r7, #4
 8000d30:	1c02      	adds	r2, r0, #0
 8000d32:	801a      	strh	r2, [r3, #0]
 8000d34:	1cbb      	adds	r3, r7, #2
 8000d36:	1c0a      	adds	r2, r1, #0
 8000d38:	801a      	strh	r2, [r3, #0]
	if(selected_actuator != actuator)
 8000d3a:	4b61      	ldr	r3, [pc, #388]	@ (8000ec0 <actuate+0x1a4>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	1dfa      	adds	r2, r7, #7
 8000d40:	7812      	ldrb	r2, [r2, #0]
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d100      	bne.n	8000d48 <actuate+0x2c>
 8000d46:	e0b5      	b.n	8000eb4 <actuate+0x198>
	{
		int8_t status = HAL_OK;
 8000d48:	200f      	movs	r0, #15
 8000d4a:	183b      	adds	r3, r7, r0
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	701a      	strb	r2, [r3, #0]
		drv_command_t command = DEFAULT_DRV_COMMAND;
 8000d50:	260c      	movs	r6, #12
 8000d52:	19bb      	adds	r3, r7, r6
 8000d54:	4a5b      	ldr	r2, [pc, #364]	@ (8000ec4 <actuate+0x1a8>)
 8000d56:	7812      	ldrb	r2, [r2, #0]
 8000d58:	701a      	strb	r2, [r3, #0]
		drv_spi_in_t spi_in = DEFAULT_DRV_SPI_IN;
 8000d5a:	2308      	movs	r3, #8
 8000d5c:	18fb      	adds	r3, r7, r3
 8000d5e:	4a5a      	ldr	r2, [pc, #360]	@ (8000ec8 <actuate+0x1ac>)
 8000d60:	7812      	ldrb	r2, [r2, #0]
 8000d62:	701a      	strb	r2, [r3, #0]
		if(drv_on)
 8000d64:	4b59      	ldr	r3, [pc, #356]	@ (8000ecc <actuate+0x1b0>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d059      	beq.n	8000e20 <actuate+0x104>
		{
			// Unlock the SPI_IN register. Refer to section 8.6.1.5
			command.spi_in_lock = SPI_IN_UNLOCK;
 8000d6c:	19bb      	adds	r3, r7, r6
 8000d6e:	781a      	ldrb	r2, [r3, #0]
 8000d70:	2118      	movs	r1, #24
 8000d72:	438a      	bics	r2, r1
 8000d74:	1c11      	adds	r1, r2, #0
 8000d76:	2210      	movs	r2, #16
 8000d78:	430a      	orrs	r2, r1
 8000d7a:	701a      	strb	r2, [r3, #0]
			status = DRV_SetCommand(&command);
 8000d7c:	0005      	movs	r5, r0
 8000d7e:	183c      	adds	r4, r7, r0
 8000d80:	19bb      	adds	r3, r7, r6
 8000d82:	0018      	movs	r0, r3
 8000d84:	f000 fb70 	bl	8001468 <DRV_SetCommand>
 8000d88:	0003      	movs	r3, r0
 8000d8a:	7023      	strb	r3, [r4, #0]
			if(status != HAL_OK){return status;}
 8000d8c:	197b      	adds	r3, r7, r5
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	b25b      	sxtb	r3, r3
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d003      	beq.n	8000d9e <actuate+0x82>
 8000d96:	197b      	adds	r3, r7, r5
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	b25b      	sxtb	r3, r3
 8000d9c:	e08b      	b.n	8000eb6 <actuate+0x19a>

			// Turn off the DRV8244
			TIM1->CCR1 = 0;
 8000d9e:	4b4c      	ldr	r3, [pc, #304]	@ (8000ed0 <actuate+0x1b4>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	635a      	str	r2, [r3, #52]	@ 0x34
			spi_in.s_drv_off = 1;
 8000da4:	2008      	movs	r0, #8
 8000da6:	183b      	adds	r3, r7, r0
 8000da8:	781a      	ldrb	r2, [r3, #0]
 8000daa:	2108      	movs	r1, #8
 8000dac:	430a      	orrs	r2, r1
 8000dae:	701a      	strb	r2, [r3, #0]
			spi_in.s_drv_off2 = 1;
 8000db0:	183b      	adds	r3, r7, r0
 8000db2:	781a      	ldrb	r2, [r3, #0]
 8000db4:	2104      	movs	r1, #4
 8000db6:	430a      	orrs	r2, r1
 8000db8:	701a      	strb	r2, [r3, #0]
			status = DRV_SetSpiIn(&spi_in);
 8000dba:	250f      	movs	r5, #15
 8000dbc:	197c      	adds	r4, r7, r5
 8000dbe:	183b      	adds	r3, r7, r0
 8000dc0:	0018      	movs	r0, r3
 8000dc2:	f000 fb87 	bl	80014d4 <DRV_SetSpiIn>
 8000dc6:	0003      	movs	r3, r0
 8000dc8:	7023      	strb	r3, [r4, #0]
			if(status != HAL_OK){return status;}
 8000dca:	197b      	adds	r3, r7, r5
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	b25b      	sxtb	r3, r3
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d003      	beq.n	8000ddc <actuate+0xc0>
 8000dd4:	197b      	adds	r3, r7, r5
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	b25b      	sxtb	r3, r3
 8000dda:	e06c      	b.n	8000eb6 <actuate+0x19a>
			drv_on = 0;
 8000ddc:	4b3b      	ldr	r3, [pc, #236]	@ (8000ecc <actuate+0x1b0>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	701a      	strb	r2, [r3, #0]

			// Lock the SPI_IN register. Refer to section 8.6.1.5
			command.spi_in_lock = SPI_IN_LOCK;
 8000de2:	200c      	movs	r0, #12
 8000de4:	183b      	adds	r3, r7, r0
 8000de6:	781a      	ldrb	r2, [r3, #0]
 8000de8:	2118      	movs	r1, #24
 8000dea:	438a      	bics	r2, r1
 8000dec:	1c11      	adds	r1, r2, #0
 8000dee:	2208      	movs	r2, #8
 8000df0:	430a      	orrs	r2, r1
 8000df2:	701a      	strb	r2, [r3, #0]
			status = DRV_SetCommand(&command);
 8000df4:	250f      	movs	r5, #15
 8000df6:	197c      	adds	r4, r7, r5
 8000df8:	183b      	adds	r3, r7, r0
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	f000 fb34 	bl	8001468 <DRV_SetCommand>
 8000e00:	0003      	movs	r3, r0
 8000e02:	7023      	strb	r3, [r4, #0]
			if(status != HAL_OK){return status;}
 8000e04:	197b      	adds	r3, r7, r5
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	b25b      	sxtb	r3, r3
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d003      	beq.n	8000e16 <actuate+0xfa>
 8000e0e:	197b      	adds	r3, r7, r5
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	b25b      	sxtb	r3, r3
 8000e14:	e04f      	b.n	8000eb6 <actuate+0x19a>

			time_ms = HAL_GetTick();
 8000e16:	f003 fee3 	bl	8004be0 <HAL_GetTick>
 8000e1a:	0002      	movs	r2, r0
 8000e1c:	4b2d      	ldr	r3, [pc, #180]	@ (8000ed4 <actuate+0x1b8>)
 8000e1e:	601a      	str	r2, [r3, #0]
		}
		if(HAL_GetTick() - time_ms >= ACTUATOR_TRANSIENT_DELAY)
 8000e20:	f003 fede 	bl	8004be0 <HAL_GetTick>
 8000e24:	0002      	movs	r2, r0
 8000e26:	4b2b      	ldr	r3, [pc, #172]	@ (8000ed4 <actuate+0x1b8>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	1ad2      	subs	r2, r2, r3
 8000e2c:	23fa      	movs	r3, #250	@ 0xfa
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d33a      	bcc.n	8000eaa <actuate+0x18e>
		{
			if(!pin_off[selected_actuator])
 8000e34:	4b22      	ldr	r3, [pc, #136]	@ (8000ec0 <actuate+0x1a4>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	001a      	movs	r2, r3
 8000e3a:	4b27      	ldr	r3, [pc, #156]	@ (8000ed8 <actuate+0x1bc>)
 8000e3c:	5c9b      	ldrb	r3, [r3, r2]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d115      	bne.n	8000e6e <actuate+0x152>
			{
				pin_off[selected_actuator] = 1;
 8000e42:	4b1f      	ldr	r3, [pc, #124]	@ (8000ec0 <actuate+0x1a4>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	001a      	movs	r2, r3
 8000e48:	4b23      	ldr	r3, [pc, #140]	@ (8000ed8 <actuate+0x1bc>)
 8000e4a:	2101      	movs	r1, #1
 8000e4c:	5499      	strb	r1, [r3, r2]
				// Deactivate the old actuator
				HAL_GPIO_WritePin(port_map[selected_actuator], pin_map[selected_actuator], GPIO_PIN_RESET);
 8000e4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ec0 <actuate+0x1a4>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	001a      	movs	r2, r3
 8000e54:	4b21      	ldr	r3, [pc, #132]	@ (8000edc <actuate+0x1c0>)
 8000e56:	0092      	lsls	r2, r2, #2
 8000e58:	58d0      	ldr	r0, [r2, r3]
 8000e5a:	4b19      	ldr	r3, [pc, #100]	@ (8000ec0 <actuate+0x1a4>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	001a      	movs	r2, r3
 8000e60:	4b1f      	ldr	r3, [pc, #124]	@ (8000ee0 <actuate+0x1c4>)
 8000e62:	0052      	lsls	r2, r2, #1
 8000e64:	5ad3      	ldrh	r3, [r2, r3]
 8000e66:	2200      	movs	r2, #0
 8000e68:	0019      	movs	r1, r3
 8000e6a:	f004 fe1c 	bl	8005aa6 <HAL_GPIO_WritePin>
			}

			if(!drv_shutoff)
 8000e6e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ee4 <actuate+0x1c8>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d115      	bne.n	8000ea2 <actuate+0x186>
			{
				status = DRV_Activate(actuator, current, target);
 8000e76:	250f      	movs	r5, #15
 8000e78:	197c      	adds	r4, r7, r5
 8000e7a:	1cbb      	adds	r3, r7, #2
 8000e7c:	881a      	ldrh	r2, [r3, #0]
 8000e7e:	1d3b      	adds	r3, r7, #4
 8000e80:	8819      	ldrh	r1, [r3, #0]
 8000e82:	1dfb      	adds	r3, r7, #7
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	0018      	movs	r0, r3
 8000e88:	f000 f842 	bl	8000f10 <DRV_Activate>
 8000e8c:	0003      	movs	r3, r0
 8000e8e:	7023      	strb	r3, [r4, #0]
				if(status != HAL_OK){return status;}
 8000e90:	197b      	adds	r3, r7, r5
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	b25b      	sxtb	r3, r3
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d003      	beq.n	8000ea2 <actuate+0x186>
 8000e9a:	197b      	adds	r3, r7, r5
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	b25b      	sxtb	r3, r3
 8000ea0:	e009      	b.n	8000eb6 <actuate+0x19a>
			}
			selected_actuator = actuator;
 8000ea2:	4b07      	ldr	r3, [pc, #28]	@ (8000ec0 <actuate+0x1a4>)
 8000ea4:	1dfa      	adds	r2, r7, #7
 8000ea6:	7812      	ldrb	r2, [r2, #0]
 8000ea8:	701a      	strb	r2, [r3, #0]
		}
		return status;
 8000eaa:	230f      	movs	r3, #15
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	b25b      	sxtb	r3, r3
 8000eb2:	e000      	b.n	8000eb6 <actuate+0x19a>
	}
	return HAL_OK;
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	b005      	add	sp, #20
 8000ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ebe:	46c0      	nop			@ (mov r8, r8)
 8000ec0:	20000010 	.word	0x20000010
 8000ec4:	0800c268 	.word	0x0800c268
 8000ec8:	0800c26c 	.word	0x0800c26c
 8000ecc:	200002ed 	.word	0x200002ed
 8000ed0:	40012c00 	.word	0x40012c00
 8000ed4:	200002f0 	.word	0x200002f0
 8000ed8:	200002f8 	.word	0x200002f8
 8000edc:	20000698 	.word	0x20000698
 8000ee0:	20000690 	.word	0x20000690
 8000ee4:	200002f4 	.word	0x200002f4

08000ee8 <DRV_Shutoff>:

void DRV_Shutoff()
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
	drv_shutoff = 1;
 8000eec:	4b02      	ldr	r3, [pc, #8]	@ (8000ef8 <DRV_Shutoff+0x10>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	701a      	strb	r2, [r3, #0]
}
 8000ef2:	46c0      	nop			@ (mov r8, r8)
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	200002f4 	.word	0x200002f4

08000efc <DRV_GetShutoff>:

uint8_t DRV_GetShutoff()
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
	return drv_shutoff;
 8000f00:	4b02      	ldr	r3, [pc, #8]	@ (8000f0c <DRV_GetShutoff+0x10>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
}
 8000f04:	0018      	movs	r0, r3
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	46c0      	nop			@ (mov r8, r8)
 8000f0c:	200002f4 	.word	0x200002f4

08000f10 <DRV_Activate>:

int8_t DRV_Activate(uint8_t actuator, uint16_t current, uint16_t target)
{
 8000f10:	b5b0      	push	{r4, r5, r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	0004      	movs	r4, r0
 8000f18:	0008      	movs	r0, r1
 8000f1a:	0011      	movs	r1, r2
 8000f1c:	1dfb      	adds	r3, r7, #7
 8000f1e:	1c22      	adds	r2, r4, #0
 8000f20:	701a      	strb	r2, [r3, #0]
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	1c02      	adds	r2, r0, #0
 8000f26:	801a      	strh	r2, [r3, #0]
 8000f28:	1cbb      	adds	r3, r7, #2
 8000f2a:	1c0a      	adds	r2, r1, #0
 8000f2c:	801a      	strh	r2, [r3, #0]
	int8_t status = HAL_OK;
 8000f2e:	240f      	movs	r4, #15
 8000f30:	193b      	adds	r3, r7, r4
 8000f32:	2200      	movs	r2, #0
 8000f34:	701a      	strb	r2, [r3, #0]
	drv_command_t command = DEFAULT_DRV_COMMAND;
 8000f36:	250c      	movs	r5, #12
 8000f38:	197b      	adds	r3, r7, r5
 8000f3a:	4a47      	ldr	r2, [pc, #284]	@ (8001058 <DRV_Activate+0x148>)
 8000f3c:	7812      	ldrb	r2, [r2, #0]
 8000f3e:	701a      	strb	r2, [r3, #0]
	drv_spi_in_t spi_in = DEFAULT_DRV_SPI_IN;
 8000f40:	2308      	movs	r3, #8
 8000f42:	18fb      	adds	r3, r7, r3
 8000f44:	4a45      	ldr	r2, [pc, #276]	@ (800105c <DRV_Activate+0x14c>)
 8000f46:	7812      	ldrb	r2, [r2, #0]
 8000f48:	701a      	strb	r2, [r3, #0]

	drv_shutoff = 0;
 8000f4a:	4b45      	ldr	r3, [pc, #276]	@ (8001060 <DRV_Activate+0x150>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	701a      	strb	r2, [r3, #0]

	// Activate the new actuator
	HAL_GPIO_WritePin(port_map[actuator], pin_map[actuator], GPIO_PIN_SET);
 8000f50:	1dfb      	adds	r3, r7, #7
 8000f52:	781a      	ldrb	r2, [r3, #0]
 8000f54:	4b43      	ldr	r3, [pc, #268]	@ (8001064 <DRV_Activate+0x154>)
 8000f56:	0092      	lsls	r2, r2, #2
 8000f58:	58d0      	ldr	r0, [r2, r3]
 8000f5a:	1dfb      	adds	r3, r7, #7
 8000f5c:	781a      	ldrb	r2, [r3, #0]
 8000f5e:	4b42      	ldr	r3, [pc, #264]	@ (8001068 <DRV_Activate+0x158>)
 8000f60:	0052      	lsls	r2, r2, #1
 8000f62:	5ad3      	ldrh	r3, [r2, r3]
 8000f64:	2201      	movs	r2, #1
 8000f66:	0019      	movs	r1, r3
 8000f68:	f004 fd9d 	bl	8005aa6 <HAL_GPIO_WritePin>
	pin_off[actuator] = 0;
 8000f6c:	1dfb      	adds	r3, r7, #7
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	4a3e      	ldr	r2, [pc, #248]	@ (800106c <DRV_Activate+0x15c>)
 8000f72:	2100      	movs	r1, #0
 8000f74:	54d1      	strb	r1, [r2, r3]

	// Unlock the SPI_IN register. Refer to section 8.6.1.5
	command.spi_in_lock = SPI_IN_UNLOCK;
 8000f76:	0028      	movs	r0, r5
 8000f78:	183b      	adds	r3, r7, r0
 8000f7a:	781a      	ldrb	r2, [r3, #0]
 8000f7c:	2118      	movs	r1, #24
 8000f7e:	438a      	bics	r2, r1
 8000f80:	1c11      	adds	r1, r2, #0
 8000f82:	2210      	movs	r2, #16
 8000f84:	430a      	orrs	r2, r1
 8000f86:	701a      	strb	r2, [r3, #0]
	status = DRV_SetCommand(&command);
 8000f88:	0025      	movs	r5, r4
 8000f8a:	193c      	adds	r4, r7, r4
 8000f8c:	183b      	adds	r3, r7, r0
 8000f8e:	0018      	movs	r0, r3
 8000f90:	f000 fa6a 	bl	8001468 <DRV_SetCommand>
 8000f94:	0003      	movs	r3, r0
 8000f96:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8000f98:	197b      	adds	r3, r7, r5
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	b25b      	sxtb	r3, r3
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d003      	beq.n	8000faa <DRV_Activate+0x9a>
 8000fa2:	197b      	adds	r3, r7, r5
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	b25b      	sxtb	r3, r3
 8000fa8:	e051      	b.n	800104e <DRV_Activate+0x13e>

	// Turn on the DRV8244
	spi_in.s_en_in1 = 0;
 8000faa:	2008      	movs	r0, #8
 8000fac:	183b      	adds	r3, r7, r0
 8000fae:	781a      	ldrb	r2, [r3, #0]
 8000fb0:	2102      	movs	r1, #2
 8000fb2:	438a      	bics	r2, r1
 8000fb4:	701a      	strb	r2, [r3, #0]
	spi_in.s_drv_off = 0;
 8000fb6:	183b      	adds	r3, r7, r0
 8000fb8:	781a      	ldrb	r2, [r3, #0]
 8000fba:	2108      	movs	r1, #8
 8000fbc:	438a      	bics	r2, r1
 8000fbe:	701a      	strb	r2, [r3, #0]
	spi_in.s_drv_off2 = 0;
 8000fc0:	183b      	adds	r3, r7, r0
 8000fc2:	781a      	ldrb	r2, [r3, #0]
 8000fc4:	2104      	movs	r1, #4
 8000fc6:	438a      	bics	r2, r1
 8000fc8:	701a      	strb	r2, [r3, #0]
	if(target > current)
 8000fca:	1cba      	adds	r2, r7, #2
 8000fcc:	1d3b      	adds	r3, r7, #4
 8000fce:	8812      	ldrh	r2, [r2, #0]
 8000fd0:	881b      	ldrh	r3, [r3, #0]
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	d905      	bls.n	8000fe2 <DRV_Activate+0xd2>
	{
		// Extend
		spi_in.s_ph_in2 = 1;
 8000fd6:	183b      	adds	r3, r7, r0
 8000fd8:	781a      	ldrb	r2, [r3, #0]
 8000fda:	2101      	movs	r1, #1
 8000fdc:	430a      	orrs	r2, r1
 8000fde:	701a      	strb	r2, [r3, #0]
 8000fe0:	e005      	b.n	8000fee <DRV_Activate+0xde>
	}
	else
	{
		// Retract
		spi_in.s_ph_in2 = 0;
 8000fe2:	2308      	movs	r3, #8
 8000fe4:	18fb      	adds	r3, r7, r3
 8000fe6:	781a      	ldrb	r2, [r3, #0]
 8000fe8:	2101      	movs	r1, #1
 8000fea:	438a      	bics	r2, r1
 8000fec:	701a      	strb	r2, [r3, #0]
	}
	status = DRV_SetSpiIn(&spi_in);
 8000fee:	250f      	movs	r5, #15
 8000ff0:	197c      	adds	r4, r7, r5
 8000ff2:	2308      	movs	r3, #8
 8000ff4:	18fb      	adds	r3, r7, r3
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	f000 fa6c 	bl	80014d4 <DRV_SetSpiIn>
 8000ffc:	0003      	movs	r3, r0
 8000ffe:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8001000:	197b      	adds	r3, r7, r5
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	b25b      	sxtb	r3, r3
 8001006:	2b00      	cmp	r3, #0
 8001008:	d003      	beq.n	8001012 <DRV_Activate+0x102>
 800100a:	197b      	adds	r3, r7, r5
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	b25b      	sxtb	r3, r3
 8001010:	e01d      	b.n	800104e <DRV_Activate+0x13e>

	// Lock the SPI_IN register. Refer to section 8.6.1.5
	command.spi_in_lock = SPI_IN_LOCK;
 8001012:	200c      	movs	r0, #12
 8001014:	183b      	adds	r3, r7, r0
 8001016:	781a      	ldrb	r2, [r3, #0]
 8001018:	2118      	movs	r1, #24
 800101a:	438a      	bics	r2, r1
 800101c:	1c11      	adds	r1, r2, #0
 800101e:	2208      	movs	r2, #8
 8001020:	430a      	orrs	r2, r1
 8001022:	701a      	strb	r2, [r3, #0]
	status = DRV_SetCommand(&command);
 8001024:	250f      	movs	r5, #15
 8001026:	197c      	adds	r4, r7, r5
 8001028:	183b      	adds	r3, r7, r0
 800102a:	0018      	movs	r0, r3
 800102c:	f000 fa1c 	bl	8001468 <DRV_SetCommand>
 8001030:	0003      	movs	r3, r0
 8001032:	7023      	strb	r3, [r4, #0]

	// Set the PWM Frequency
	TIM1->CCR1 = 40;
 8001034:	4b0e      	ldr	r3, [pc, #56]	@ (8001070 <DRV_Activate+0x160>)
 8001036:	2228      	movs	r2, #40	@ 0x28
 8001038:	635a      	str	r2, [r3, #52]	@ 0x34

	drv_on = 1;
 800103a:	4b0e      	ldr	r3, [pc, #56]	@ (8001074 <DRV_Activate+0x164>)
 800103c:	2201      	movs	r2, #1
 800103e:	701a      	strb	r2, [r3, #0]
	selected_actuator = actuator;
 8001040:	4b0d      	ldr	r3, [pc, #52]	@ (8001078 <DRV_Activate+0x168>)
 8001042:	1dfa      	adds	r2, r7, #7
 8001044:	7812      	ldrb	r2, [r2, #0]
 8001046:	701a      	strb	r2, [r3, #0]

	return status;
 8001048:	197b      	adds	r3, r7, r5
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	b25b      	sxtb	r3, r3
}
 800104e:	0018      	movs	r0, r3
 8001050:	46bd      	mov	sp, r7
 8001052:	b004      	add	sp, #16
 8001054:	bdb0      	pop	{r4, r5, r7, pc}
 8001056:	46c0      	nop			@ (mov r8, r8)
 8001058:	0800c268 	.word	0x0800c268
 800105c:	0800c26c 	.word	0x0800c26c
 8001060:	200002f4 	.word	0x200002f4
 8001064:	20000698 	.word	0x20000698
 8001068:	20000690 	.word	0x20000690
 800106c:	200002f8 	.word	0x200002f8
 8001070:	40012c00 	.word	0x40012c00
 8001074:	200002ed 	.word	0x200002ed
 8001078:	20000010 	.word	0x20000010

0800107c <DRV_Init>:

    return command_sat;
}

int8_t DRV_Init(uint8_t device_id)
{
 800107c:	b5b0      	push	{r4, r5, r7, lr}
 800107e:	b08c      	sub	sp, #48	@ 0x30
 8001080:	af00      	add	r7, sp, #0
 8001082:	0002      	movs	r2, r0
 8001084:	1dfb      	adds	r3, r7, #7
 8001086:	701a      	strb	r2, [r3, #0]
	int8_t status = HAL_OK;
 8001088:	242f      	movs	r4, #47	@ 0x2f
 800108a:	193b      	adds	r3, r7, r4
 800108c:	2200      	movs	r2, #0
 800108e:	701a      	strb	r2, [r3, #0]
	pin_off[0] = 1;
 8001090:	4bcd      	ldr	r3, [pc, #820]	@ (80013c8 <DRV_Init+0x34c>)
 8001092:	2201      	movs	r2, #1
 8001094:	701a      	strb	r2, [r3, #0]
	pin_off[1] = 1;
 8001096:	4bcc      	ldr	r3, [pc, #816]	@ (80013c8 <DRV_Init+0x34c>)
 8001098:	2201      	movs	r2, #1
 800109a:	705a      	strb	r2, [r3, #1]
	pin_off[2] = 1;
 800109c:	4bca      	ldr	r3, [pc, #808]	@ (80013c8 <DRV_Init+0x34c>)
 800109e:	2201      	movs	r2, #1
 80010a0:	709a      	strb	r2, [r3, #2]

	// Initialize the PWM signal
	TIM1->CCR1 = 0;
 80010a2:	4bca      	ldr	r3, [pc, #808]	@ (80013cc <DRV_Init+0x350>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	635a      	str	r2, [r3, #52]	@ 0x34
	status = HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80010a8:	4bc9      	ldr	r3, [pc, #804]	@ (80013d0 <DRV_Init+0x354>)
 80010aa:	2100      	movs	r1, #0
 80010ac:	0018      	movs	r0, r3
 80010ae:	f008 f9db 	bl	8009468 <HAL_TIM_PWM_Start>
 80010b2:	0003      	movs	r3, r0
 80010b4:	001a      	movs	r2, r3
 80010b6:	193b      	adds	r3, r7, r4
 80010b8:	701a      	strb	r2, [r3, #0]
	if(status != HAL_OK){return status;}
 80010ba:	193b      	adds	r3, r7, r4
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	b25b      	sxtb	r3, r3
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d003      	beq.n	80010cc <DRV_Init+0x50>
 80010c4:	193b      	adds	r3, r7, r4
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	b25b      	sxtb	r3, r3
 80010ca:	e179      	b.n	80013c0 <DRV_Init+0x344>

	// Test communication by reading the Device ID
	uint8_t dev_id = 0;
 80010cc:	212e      	movs	r1, #46	@ 0x2e
 80010ce:	187b      	adds	r3, r7, r1
 80010d0:	2200      	movs	r2, #0
 80010d2:	701a      	strb	r2, [r3, #0]
	status = DRV_GetDeviceId(&dev_id);
 80010d4:	252f      	movs	r5, #47	@ 0x2f
 80010d6:	197c      	adds	r4, r7, r5
 80010d8:	187b      	adds	r3, r7, r1
 80010da:	0018      	movs	r0, r3
 80010dc:	f000 f97a 	bl	80013d4 <DRV_GetDeviceId>
 80010e0:	0003      	movs	r3, r0
 80010e2:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80010e4:	197b      	adds	r3, r7, r5
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	b25b      	sxtb	r3, r3
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d003      	beq.n	80010f6 <DRV_Init+0x7a>
 80010ee:	197b      	adds	r3, r7, r5
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	b25b      	sxtb	r3, r3
 80010f4:	e164      	b.n	80013c0 <DRV_Init+0x344>

	if(dev_id == device_id)
 80010f6:	232e      	movs	r3, #46	@ 0x2e
 80010f8:	18fb      	adds	r3, r7, r3
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	1dfa      	adds	r2, r7, #7
 80010fe:	7812      	ldrb	r2, [r2, #0]
 8001100:	429a      	cmp	r2, r3
 8001102:	d000      	beq.n	8001106 <DRV_Init+0x8a>
 8001104:	e156      	b.n	80013b4 <DRV_Init+0x338>
	{
		// Unlock the Config Registers, clear the fault register. Refer to section 8.6.1.5
		drv_command_t command;
		command.clr_flt = 1;
 8001106:	202c      	movs	r0, #44	@ 0x2c
 8001108:	183b      	adds	r3, r7, r0
 800110a:	781a      	ldrb	r2, [r3, #0]
 800110c:	2180      	movs	r1, #128	@ 0x80
 800110e:	4249      	negs	r1, r1
 8001110:	430a      	orrs	r2, r1
 8001112:	701a      	strb	r2, [r3, #0]
		command.reg_lock = REG_UNLOCK;
 8001114:	183b      	adds	r3, r7, r0
 8001116:	781a      	ldrb	r2, [r3, #0]
 8001118:	2103      	movs	r1, #3
 800111a:	438a      	bics	r2, r1
 800111c:	1c11      	adds	r1, r2, #0
 800111e:	2201      	movs	r2, #1
 8001120:	430a      	orrs	r2, r1
 8001122:	701a      	strb	r2, [r3, #0]
		command.spi_in_lock = SPI_IN_LOCK;
 8001124:	183b      	adds	r3, r7, r0
 8001126:	781a      	ldrb	r2, [r3, #0]
 8001128:	2118      	movs	r1, #24
 800112a:	438a      	bics	r2, r1
 800112c:	1c11      	adds	r1, r2, #0
 800112e:	2208      	movs	r2, #8
 8001130:	430a      	orrs	r2, r1
 8001132:	701a      	strb	r2, [r3, #0]
		status = DRV_SetCommand(&command);
 8001134:	252f      	movs	r5, #47	@ 0x2f
 8001136:	197c      	adds	r4, r7, r5
 8001138:	183b      	adds	r3, r7, r0
 800113a:	0018      	movs	r0, r3
 800113c:	f000 f994 	bl	8001468 <DRV_SetCommand>
 8001140:	0003      	movs	r3, r0
 8001142:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK){return status;}
 8001144:	197b      	adds	r3, r7, r5
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	b25b      	sxtb	r3, r3
 800114a:	2b00      	cmp	r3, #0
 800114c:	d003      	beq.n	8001156 <DRV_Init+0xda>
 800114e:	197b      	adds	r3, r7, r5
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	b25b      	sxtb	r3, r3
 8001154:	e134      	b.n	80013c0 <DRV_Init+0x344>

		drv_config_1_t w_config_1;
		w_config_1.raw_data = 0;
 8001156:	2028      	movs	r0, #40	@ 0x28
 8001158:	183b      	adds	r3, r7, r0
 800115a:	2200      	movs	r2, #0
 800115c:	701a      	strb	r2, [r3, #0]
		w_config_1.en_ola = 1;
 800115e:	183b      	adds	r3, r7, r0
 8001160:	781a      	ldrb	r2, [r3, #0]
 8001162:	2180      	movs	r1, #128	@ 0x80
 8001164:	4249      	negs	r1, r1
 8001166:	430a      	orrs	r2, r1
 8001168:	701a      	strb	r2, [r3, #0]
		w_config_1.ocp_retry = 1;
 800116a:	183b      	adds	r3, r7, r0
 800116c:	781a      	ldrb	r2, [r3, #0]
 800116e:	2108      	movs	r1, #8
 8001170:	430a      	orrs	r2, r1
 8001172:	701a      	strb	r2, [r3, #0]
		w_config_1.ola_retry = 1;
 8001174:	183b      	adds	r3, r7, r0
 8001176:	781a      	ldrb	r2, [r3, #0]
 8001178:	2101      	movs	r1, #1
 800117a:	430a      	orrs	r2, r1
 800117c:	701a      	strb	r2, [r3, #0]
		w_config_1.ssc_dis = 1;
 800117e:	183b      	adds	r3, r7, r0
 8001180:	781a      	ldrb	r2, [r3, #0]
 8001182:	2110      	movs	r1, #16
 8001184:	430a      	orrs	r2, r1
 8001186:	701a      	strb	r2, [r3, #0]
		w_config_1.tsd_retry = 1;
 8001188:	183b      	adds	r3, r7, r0
 800118a:	781a      	ldrb	r2, [r3, #0]
 800118c:	2104      	movs	r1, #4
 800118e:	430a      	orrs	r2, r1
 8001190:	701a      	strb	r2, [r3, #0]
		w_config_1.vmov_retry = 1;
 8001192:	183b      	adds	r3, r7, r0
 8001194:	781a      	ldrb	r2, [r3, #0]
 8001196:	2102      	movs	r1, #2
 8001198:	430a      	orrs	r2, r1
 800119a:	701a      	strb	r2, [r3, #0]
		w_config_1.vmov_sel = VMOV_SEL_18V;
 800119c:	183b      	adds	r3, r7, r0
 800119e:	781a      	ldrb	r2, [r3, #0]
 80011a0:	2160      	movs	r1, #96	@ 0x60
 80011a2:	438a      	bics	r2, r1
 80011a4:	1c11      	adds	r1, r2, #0
 80011a6:	2240      	movs	r2, #64	@ 0x40
 80011a8:	430a      	orrs	r2, r1
 80011aa:	701a      	strb	r2, [r3, #0]
		status = DRV_SetConfig1(&w_config_1);
 80011ac:	252f      	movs	r5, #47	@ 0x2f
 80011ae:	197c      	adds	r4, r7, r5
 80011b0:	183b      	adds	r3, r7, r0
 80011b2:	0018      	movs	r0, r3
 80011b4:	f000 fa04 	bl	80015c0 <DRV_SetConfig1>
 80011b8:	0003      	movs	r3, r0
 80011ba:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK){return status;}
 80011bc:	197b      	adds	r3, r7, r5
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	b25b      	sxtb	r3, r3
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d003      	beq.n	80011ce <DRV_Init+0x152>
 80011c6:	197b      	adds	r3, r7, r5
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	b25b      	sxtb	r3, r3
 80011cc:	e0f8      	b.n	80013c0 <DRV_Init+0x344>

		drv_config_2_t w_config_2;
		w_config_2.raw_data = 0;
 80011ce:	2024      	movs	r0, #36	@ 0x24
 80011d0:	183b      	adds	r3, r7, r0
 80011d2:	2200      	movs	r2, #0
 80011d4:	701a      	strb	r2, [r3, #0]
		w_config_2.pwm_extend = 0;
 80011d6:	183b      	adds	r3, r7, r0
 80011d8:	781a      	ldrb	r2, [r3, #0]
 80011da:	217f      	movs	r1, #127	@ 0x7f
 80011dc:	400a      	ands	r2, r1
 80011de:	701a      	strb	r2, [r3, #0]
		w_config_2.s_diag = S_DIAG_MODE_3;
 80011e0:	183b      	adds	r3, r7, r0
 80011e2:	781a      	ldrb	r2, [r3, #0]
 80011e4:	2160      	movs	r1, #96	@ 0x60
 80011e6:	430a      	orrs	r2, r1
 80011e8:	701a      	strb	r2, [r3, #0]
		w_config_2.s_itrip = S_ITRIP_DISABLE;
 80011ea:	183b      	adds	r3, r7, r0
 80011ec:	781a      	ldrb	r2, [r3, #0]
 80011ee:	2107      	movs	r1, #7
 80011f0:	438a      	bics	r2, r1
 80011f2:	701a      	strb	r2, [r3, #0]
		status = DRV_SetConfig2(&w_config_2);
 80011f4:	252f      	movs	r5, #47	@ 0x2f
 80011f6:	197c      	adds	r4, r7, r5
 80011f8:	183b      	adds	r3, r7, r0
 80011fa:	0018      	movs	r0, r3
 80011fc:	f000 fa56 	bl	80016ac <DRV_SetConfig2>
 8001200:	0003      	movs	r3, r0
 8001202:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK){return status;}
 8001204:	197b      	adds	r3, r7, r5
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	b25b      	sxtb	r3, r3
 800120a:	2b00      	cmp	r3, #0
 800120c:	d003      	beq.n	8001216 <DRV_Init+0x19a>
 800120e:	197b      	adds	r3, r7, r5
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	b25b      	sxtb	r3, r3
 8001214:	e0d4      	b.n	80013c0 <DRV_Init+0x344>

		// Configure PH/EN Mode
		drv_config_3_t w_config_3;
		w_config_3.raw_data = 0;
 8001216:	2020      	movs	r0, #32
 8001218:	183b      	adds	r3, r7, r0
 800121a:	2200      	movs	r2, #0
 800121c:	701a      	strb	r2, [r3, #0]
		w_config_3.s_mode = S_MODE_PH_EN;
 800121e:	183b      	adds	r3, r7, r0
 8001220:	781a      	ldrb	r2, [r3, #0]
 8001222:	2103      	movs	r1, #3
 8001224:	438a      	bics	r2, r1
 8001226:	701a      	strb	r2, [r3, #0]
		w_config_3.toff = TOFF_40US;
 8001228:	183b      	adds	r3, r7, r0
 800122a:	781a      	ldrb	r2, [r3, #0]
 800122c:	213f      	movs	r1, #63	@ 0x3f
 800122e:	400a      	ands	r2, r1
 8001230:	1c11      	adds	r1, r2, #0
 8001232:	2280      	movs	r2, #128	@ 0x80
 8001234:	4252      	negs	r2, r2
 8001236:	430a      	orrs	r2, r1
 8001238:	701a      	strb	r2, [r3, #0]
		w_config_3.s_sr = 0;
 800123a:	183b      	adds	r3, r7, r0
 800123c:	781a      	ldrb	r2, [r3, #0]
 800123e:	211c      	movs	r1, #28
 8001240:	438a      	bics	r2, r1
 8001242:	701a      	strb	r2, [r3, #0]
		status = DRV_SetConfig3(&w_config_3);
 8001244:	252f      	movs	r5, #47	@ 0x2f
 8001246:	197c      	adds	r4, r7, r5
 8001248:	183b      	adds	r3, r7, r0
 800124a:	0018      	movs	r0, r3
 800124c:	f000 faa4 	bl	8001798 <DRV_SetConfig3>
 8001250:	0003      	movs	r3, r0
 8001252:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK){return status;}
 8001254:	197b      	adds	r3, r7, r5
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	b25b      	sxtb	r3, r3
 800125a:	2b00      	cmp	r3, #0
 800125c:	d003      	beq.n	8001266 <DRV_Init+0x1ea>
 800125e:	197b      	adds	r3, r7, r5
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	b25b      	sxtb	r3, r3
 8001264:	e0ac      	b.n	80013c0 <DRV_Init+0x344>

		// Configure the DRV to allow the SPI bit configuration to control the h-bridge
		drv_config_4_t w_config_4;
		w_config_4.raw_data = 0;
 8001266:	201c      	movs	r0, #28
 8001268:	183b      	adds	r3, r7, r0
 800126a:	2200      	movs	r2, #0
 800126c:	701a      	strb	r2, [r3, #0]
		w_config_4.drvoff_sel = DRVOFF_SEL_OR;
 800126e:	183b      	adds	r3, r7, r0
 8001270:	781a      	ldrb	r2, [r3, #0]
 8001272:	2104      	movs	r1, #4
 8001274:	438a      	bics	r2, r1
 8001276:	701a      	strb	r2, [r3, #0]
		w_config_4.en_in1_sel = EN_IN1_SEL_OR;
 8001278:	183b      	adds	r3, r7, r0
 800127a:	781a      	ldrb	r2, [r3, #0]
 800127c:	2102      	movs	r1, #2
 800127e:	438a      	bics	r2, r1
 8001280:	701a      	strb	r2, [r3, #0]
		w_config_4.ph_in2_sel = PH_IN2_SEL_OR;
 8001282:	183b      	adds	r3, r7, r0
 8001284:	781a      	ldrb	r2, [r3, #0]
 8001286:	2101      	movs	r1, #1
 8001288:	438a      	bics	r2, r1
 800128a:	701a      	strb	r2, [r3, #0]
		w_config_4.tocp_sel = TOCP_SEL_6US;
 800128c:	183b      	adds	r3, r7, r0
 800128e:	781a      	ldrb	r2, [r3, #0]
 8001290:	213f      	movs	r1, #63	@ 0x3f
 8001292:	400a      	ands	r2, r1
 8001294:	701a      	strb	r2, [r3, #0]
		w_config_4.ocp_sel = OCP_SEL_100;
 8001296:	183b      	adds	r3, r7, r0
 8001298:	781a      	ldrb	r2, [r3, #0]
 800129a:	2118      	movs	r1, #24
 800129c:	438a      	bics	r2, r1
 800129e:	701a      	strb	r2, [r3, #0]
		status = DRV_SetConfig4(&w_config_4);
 80012a0:	252f      	movs	r5, #47	@ 0x2f
 80012a2:	197c      	adds	r4, r7, r5
 80012a4:	183b      	adds	r3, r7, r0
 80012a6:	0018      	movs	r0, r3
 80012a8:	f000 faec 	bl	8001884 <DRV_SetConfig4>
 80012ac:	0003      	movs	r3, r0
 80012ae:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK){return status;}
 80012b0:	197b      	adds	r3, r7, r5
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	b25b      	sxtb	r3, r3
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d003      	beq.n	80012c2 <DRV_Init+0x246>
 80012ba:	197b      	adds	r3, r7, r5
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	b25b      	sxtb	r3, r3
 80012c0:	e07e      	b.n	80013c0 <DRV_Init+0x344>

		// Lock the Config Registers. Refer to section 8.6.1.5
		command.reg_lock = REG_LOCK;
 80012c2:	202c      	movs	r0, #44	@ 0x2c
 80012c4:	183b      	adds	r3, r7, r0
 80012c6:	781a      	ldrb	r2, [r3, #0]
 80012c8:	2103      	movs	r1, #3
 80012ca:	438a      	bics	r2, r1
 80012cc:	1c11      	adds	r1, r2, #0
 80012ce:	2202      	movs	r2, #2
 80012d0:	430a      	orrs	r2, r1
 80012d2:	701a      	strb	r2, [r3, #0]
		status = DRV_SetCommand(&command);
 80012d4:	252f      	movs	r5, #47	@ 0x2f
 80012d6:	197c      	adds	r4, r7, r5
 80012d8:	183b      	adds	r3, r7, r0
 80012da:	0018      	movs	r0, r3
 80012dc:	f000 f8c4 	bl	8001468 <DRV_SetCommand>
 80012e0:	0003      	movs	r3, r0
 80012e2:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK){return status;}
 80012e4:	197b      	adds	r3, r7, r5
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	b25b      	sxtb	r3, r3
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d003      	beq.n	80012f6 <DRV_Init+0x27a>
 80012ee:	197b      	adds	r3, r7, r5
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	b25b      	sxtb	r3, r3
 80012f4:	e064      	b.n	80013c0 <DRV_Init+0x344>
		drv_config_1_t r_config_1;
		drv_config_2_t r_config_2;
		drv_config_3_t r_config_3;
		drv_config_4_t r_config_4;

		status = DRV_GetConfig1(&r_config_1);
 80012f6:	252f      	movs	r5, #47	@ 0x2f
 80012f8:	197c      	adds	r4, r7, r5
 80012fa:	2318      	movs	r3, #24
 80012fc:	18fb      	adds	r3, r7, r3
 80012fe:	0018      	movs	r0, r3
 8001300:	f000 f91e 	bl	8001540 <DRV_GetConfig1>
 8001304:	0003      	movs	r3, r0
 8001306:	7023      	strb	r3, [r4, #0]
		status |= DRV_GetConfig2(&r_config_2);
 8001308:	2314      	movs	r3, #20
 800130a:	18fb      	adds	r3, r7, r3
 800130c:	0018      	movs	r0, r3
 800130e:	f000 f98d 	bl	800162c <DRV_GetConfig2>
 8001312:	0003      	movs	r3, r0
 8001314:	0019      	movs	r1, r3
 8001316:	002c      	movs	r4, r5
 8001318:	193b      	adds	r3, r7, r4
 800131a:	193a      	adds	r2, r7, r4
 800131c:	7812      	ldrb	r2, [r2, #0]
 800131e:	430a      	orrs	r2, r1
 8001320:	701a      	strb	r2, [r3, #0]
		status |= DRV_GetConfig3(&r_config_3);
 8001322:	2310      	movs	r3, #16
 8001324:	18fb      	adds	r3, r7, r3
 8001326:	0018      	movs	r0, r3
 8001328:	f000 f9f6 	bl	8001718 <DRV_GetConfig3>
 800132c:	0003      	movs	r3, r0
 800132e:	0019      	movs	r1, r3
 8001330:	193b      	adds	r3, r7, r4
 8001332:	193a      	adds	r2, r7, r4
 8001334:	7812      	ldrb	r2, [r2, #0]
 8001336:	430a      	orrs	r2, r1
 8001338:	701a      	strb	r2, [r3, #0]
		status |= DRV_GetConfig4(&r_config_4);
 800133a:	230c      	movs	r3, #12
 800133c:	18fb      	adds	r3, r7, r3
 800133e:	0018      	movs	r0, r3
 8001340:	f000 fa60 	bl	8001804 <DRV_GetConfig4>
 8001344:	0003      	movs	r3, r0
 8001346:	0019      	movs	r1, r3
 8001348:	193b      	adds	r3, r7, r4
 800134a:	193a      	adds	r2, r7, r4
 800134c:	7812      	ldrb	r2, [r2, #0]
 800134e:	430a      	orrs	r2, r1
 8001350:	701a      	strb	r2, [r3, #0]
		if(status != HAL_OK){return status;}
 8001352:	193b      	adds	r3, r7, r4
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	b25b      	sxtb	r3, r3
 8001358:	2b00      	cmp	r3, #0
 800135a:	d003      	beq.n	8001364 <DRV_Init+0x2e8>
 800135c:	193b      	adds	r3, r7, r4
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	b25b      	sxtb	r3, r3
 8001362:	e02d      	b.n	80013c0 <DRV_Init+0x344>

		if(r_config_1.raw_data != w_config_1.raw_data){return HAL_ERROR;}
 8001364:	2318      	movs	r3, #24
 8001366:	18fb      	adds	r3, r7, r3
 8001368:	781a      	ldrb	r2, [r3, #0]
 800136a:	2328      	movs	r3, #40	@ 0x28
 800136c:	18fb      	adds	r3, r7, r3
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	429a      	cmp	r2, r3
 8001372:	d001      	beq.n	8001378 <DRV_Init+0x2fc>
 8001374:	2301      	movs	r3, #1
 8001376:	e023      	b.n	80013c0 <DRV_Init+0x344>
		if(r_config_2.raw_data != w_config_2.raw_data){return HAL_ERROR;}
 8001378:	2314      	movs	r3, #20
 800137a:	18fb      	adds	r3, r7, r3
 800137c:	781a      	ldrb	r2, [r3, #0]
 800137e:	2324      	movs	r3, #36	@ 0x24
 8001380:	18fb      	adds	r3, r7, r3
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	429a      	cmp	r2, r3
 8001386:	d001      	beq.n	800138c <DRV_Init+0x310>
 8001388:	2301      	movs	r3, #1
 800138a:	e019      	b.n	80013c0 <DRV_Init+0x344>
		if(r_config_3.raw_data != w_config_3.raw_data){return HAL_ERROR;}
 800138c:	2310      	movs	r3, #16
 800138e:	18fb      	adds	r3, r7, r3
 8001390:	781a      	ldrb	r2, [r3, #0]
 8001392:	2320      	movs	r3, #32
 8001394:	18fb      	adds	r3, r7, r3
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	429a      	cmp	r2, r3
 800139a:	d001      	beq.n	80013a0 <DRV_Init+0x324>
 800139c:	2301      	movs	r3, #1
 800139e:	e00f      	b.n	80013c0 <DRV_Init+0x344>
		if(r_config_4.raw_data != w_config_4.raw_data){return HAL_ERROR;}
 80013a0:	230c      	movs	r3, #12
 80013a2:	18fb      	adds	r3, r7, r3
 80013a4:	781a      	ldrb	r2, [r3, #0]
 80013a6:	231c      	movs	r3, #28
 80013a8:	18fb      	adds	r3, r7, r3
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d003      	beq.n	80013b8 <DRV_Init+0x33c>
 80013b0:	2301      	movs	r3, #1
 80013b2:	e005      	b.n	80013c0 <DRV_Init+0x344>
	}
	else
	{
		return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e003      	b.n	80013c0 <DRV_Init+0x344>
	}
	return status;
 80013b8:	232f      	movs	r3, #47	@ 0x2f
 80013ba:	18fb      	adds	r3, r7, r3
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	b25b      	sxtb	r3, r3
}
 80013c0:	0018      	movs	r0, r3
 80013c2:	46bd      	mov	sp, r7
 80013c4:	b00c      	add	sp, #48	@ 0x30
 80013c6:	bdb0      	pop	{r4, r5, r7, pc}
 80013c8:	200002f8 	.word	0x200002f8
 80013cc:	40012c00 	.word	0x40012c00
 80013d0:	20000474 	.word	0x20000474

080013d4 <DRV_GetDeviceId>:

int8_t DRV_GetDeviceId(uint8_t* device_id)
{
 80013d4:	b590      	push	{r4, r7, lr}
 80013d6:	b087      	sub	sp, #28
 80013d8:	af02      	add	r7, sp, #8
 80013da:	6078      	str	r0, [r7, #4]
	int8_t status = HAL_OK;
 80013dc:	240f      	movs	r4, #15
 80013de:	193b      	adds	r3, r7, r4
 80013e0:	2200      	movs	r2, #0
 80013e2:	701a      	strb	r2, [r3, #0]
	tx_data[0] = (DEVICE_ID | READ_MASK);
 80013e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001458 <DRV_GetDeviceId+0x84>)
 80013e6:	2240      	movs	r2, #64	@ 0x40
 80013e8:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0;
 80013ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001458 <DRV_GetDeviceId+0x84>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	705a      	strb	r2, [r3, #1]
	rx_data[0] = 0;
 80013f0:	4b1a      	ldr	r3, [pc, #104]	@ (800145c <DRV_GetDeviceId+0x88>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	701a      	strb	r2, [r3, #0]
	rx_data[0] = 0;
 80013f6:	4b19      	ldr	r3, [pc, #100]	@ (800145c <DRV_GetDeviceId+0x88>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_RESET);
 80013fc:	4b18      	ldr	r3, [pc, #96]	@ (8001460 <DRV_GetDeviceId+0x8c>)
 80013fe:	2200      	movs	r2, #0
 8001400:	2101      	movs	r1, #1
 8001402:	0018      	movs	r0, r3
 8001404:	f004 fb4f 	bl	8005aa6 <HAL_GPIO_WritePin>
	status = HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 100);
 8001408:	4a14      	ldr	r2, [pc, #80]	@ (800145c <DRV_GetDeviceId+0x88>)
 800140a:	4913      	ldr	r1, [pc, #76]	@ (8001458 <DRV_GetDeviceId+0x84>)
 800140c:	4815      	ldr	r0, [pc, #84]	@ (8001464 <DRV_GetDeviceId+0x90>)
 800140e:	2364      	movs	r3, #100	@ 0x64
 8001410:	9300      	str	r3, [sp, #0]
 8001412:	2302      	movs	r3, #2
 8001414:	f007 fae4 	bl	80089e0 <HAL_SPI_TransmitReceive>
 8001418:	0003      	movs	r3, r0
 800141a:	001a      	movs	r2, r3
 800141c:	193b      	adds	r3, r7, r4
 800141e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_SET);
 8001420:	4b0f      	ldr	r3, [pc, #60]	@ (8001460 <DRV_GetDeviceId+0x8c>)
 8001422:	2201      	movs	r2, #1
 8001424:	2101      	movs	r1, #1
 8001426:	0018      	movs	r0, r3
 8001428:	f004 fb3d 	bl	8005aa6 <HAL_GPIO_WritePin>
	if(status != HAL_OK){return status;}
 800142c:	193b      	adds	r3, r7, r4
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	b25b      	sxtb	r3, r3
 8001432:	2b00      	cmp	r3, #0
 8001434:	d003      	beq.n	800143e <DRV_GetDeviceId+0x6a>
 8001436:	193b      	adds	r3, r7, r4
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	b25b      	sxtb	r3, r3
 800143c:	e007      	b.n	800144e <DRV_GetDeviceId+0x7a>

	(*device_id) = rx_data[1];
 800143e:	4b07      	ldr	r3, [pc, #28]	@ (800145c <DRV_GetDeviceId+0x88>)
 8001440:	785a      	ldrb	r2, [r3, #1]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	701a      	strb	r2, [r3, #0]
	return status;
 8001446:	230f      	movs	r3, #15
 8001448:	18fb      	adds	r3, r7, r3
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	b25b      	sxtb	r3, r3
}
 800144e:	0018      	movs	r0, r3
 8001450:	46bd      	mov	sp, r7
 8001452:	b005      	add	sp, #20
 8001454:	bd90      	pop	{r4, r7, pc}
 8001456:	46c0      	nop			@ (mov r8, r8)
 8001458:	200002fc 	.word	0x200002fc
 800145c:	20000300 	.word	0x20000300
 8001460:	50000c00 	.word	0x50000c00
 8001464:	20000410 	.word	0x20000410

08001468 <DRV_SetCommand>:
	command->raw_data = rx_data[1];
	return status;
}

int8_t DRV_SetCommand(drv_command_t* command)
{
 8001468:	b590      	push	{r4, r7, lr}
 800146a:	b087      	sub	sp, #28
 800146c:	af02      	add	r7, sp, #8
 800146e:	6078      	str	r0, [r7, #4]
	int8_t status = HAL_OK;
 8001470:	240f      	movs	r4, #15
 8001472:	193b      	adds	r3, r7, r4
 8001474:	2200      	movs	r2, #0
 8001476:	701a      	strb	r2, [r3, #0]

	tx_data[0] = COMMAND;
 8001478:	4b12      	ldr	r3, [pc, #72]	@ (80014c4 <DRV_SetCommand+0x5c>)
 800147a:	2208      	movs	r2, #8
 800147c:	701a      	strb	r2, [r3, #0]
	tx_data[1] = command->raw_data;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	781a      	ldrb	r2, [r3, #0]
 8001482:	4b10      	ldr	r3, [pc, #64]	@ (80014c4 <DRV_SetCommand+0x5c>)
 8001484:	705a      	strb	r2, [r3, #1]

	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_RESET);
 8001486:	4b10      	ldr	r3, [pc, #64]	@ (80014c8 <DRV_SetCommand+0x60>)
 8001488:	2200      	movs	r2, #0
 800148a:	2101      	movs	r1, #1
 800148c:	0018      	movs	r0, r3
 800148e:	f004 fb0a 	bl	8005aa6 <HAL_GPIO_WritePin>
	status = HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 100);
 8001492:	4a0e      	ldr	r2, [pc, #56]	@ (80014cc <DRV_SetCommand+0x64>)
 8001494:	490b      	ldr	r1, [pc, #44]	@ (80014c4 <DRV_SetCommand+0x5c>)
 8001496:	480e      	ldr	r0, [pc, #56]	@ (80014d0 <DRV_SetCommand+0x68>)
 8001498:	2364      	movs	r3, #100	@ 0x64
 800149a:	9300      	str	r3, [sp, #0]
 800149c:	2302      	movs	r3, #2
 800149e:	f007 fa9f 	bl	80089e0 <HAL_SPI_TransmitReceive>
 80014a2:	0003      	movs	r3, r0
 80014a4:	001a      	movs	r2, r3
 80014a6:	193b      	adds	r3, r7, r4
 80014a8:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_SET);
 80014aa:	4b07      	ldr	r3, [pc, #28]	@ (80014c8 <DRV_SetCommand+0x60>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	2101      	movs	r1, #1
 80014b0:	0018      	movs	r0, r3
 80014b2:	f004 faf8 	bl	8005aa6 <HAL_GPIO_WritePin>
	return status;
 80014b6:	193b      	adds	r3, r7, r4
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	b25b      	sxtb	r3, r3
}
 80014bc:	0018      	movs	r0, r3
 80014be:	46bd      	mov	sp, r7
 80014c0:	b005      	add	sp, #20
 80014c2:	bd90      	pop	{r4, r7, pc}
 80014c4:	200002fc 	.word	0x200002fc
 80014c8:	50000c00 	.word	0x50000c00
 80014cc:	20000300 	.word	0x20000300
 80014d0:	20000410 	.word	0x20000410

080014d4 <DRV_SetSpiIn>:
	spi_in->raw_data = rx_data[1];
	return status;
}

int8_t DRV_SetSpiIn(drv_spi_in_t* spi_in)
{
 80014d4:	b590      	push	{r4, r7, lr}
 80014d6:	b087      	sub	sp, #28
 80014d8:	af02      	add	r7, sp, #8
 80014da:	6078      	str	r0, [r7, #4]
	int8_t status = HAL_OK;
 80014dc:	240f      	movs	r4, #15
 80014de:	193b      	adds	r3, r7, r4
 80014e0:	2200      	movs	r2, #0
 80014e2:	701a      	strb	r2, [r3, #0]

	tx_data[0] = SPI_IN;
 80014e4:	4b12      	ldr	r3, [pc, #72]	@ (8001530 <DRV_SetSpiIn+0x5c>)
 80014e6:	2209      	movs	r2, #9
 80014e8:	701a      	strb	r2, [r3, #0]
	tx_data[1] = spi_in->raw_data;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	781a      	ldrb	r2, [r3, #0]
 80014ee:	4b10      	ldr	r3, [pc, #64]	@ (8001530 <DRV_SetSpiIn+0x5c>)
 80014f0:	705a      	strb	r2, [r3, #1]

	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_RESET);
 80014f2:	4b10      	ldr	r3, [pc, #64]	@ (8001534 <DRV_SetSpiIn+0x60>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	2101      	movs	r1, #1
 80014f8:	0018      	movs	r0, r3
 80014fa:	f004 fad4 	bl	8005aa6 <HAL_GPIO_WritePin>
	status = HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 100);
 80014fe:	4a0e      	ldr	r2, [pc, #56]	@ (8001538 <DRV_SetSpiIn+0x64>)
 8001500:	490b      	ldr	r1, [pc, #44]	@ (8001530 <DRV_SetSpiIn+0x5c>)
 8001502:	480e      	ldr	r0, [pc, #56]	@ (800153c <DRV_SetSpiIn+0x68>)
 8001504:	2364      	movs	r3, #100	@ 0x64
 8001506:	9300      	str	r3, [sp, #0]
 8001508:	2302      	movs	r3, #2
 800150a:	f007 fa69 	bl	80089e0 <HAL_SPI_TransmitReceive>
 800150e:	0003      	movs	r3, r0
 8001510:	001a      	movs	r2, r3
 8001512:	193b      	adds	r3, r7, r4
 8001514:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_SET);
 8001516:	4b07      	ldr	r3, [pc, #28]	@ (8001534 <DRV_SetSpiIn+0x60>)
 8001518:	2201      	movs	r2, #1
 800151a:	2101      	movs	r1, #1
 800151c:	0018      	movs	r0, r3
 800151e:	f004 fac2 	bl	8005aa6 <HAL_GPIO_WritePin>
	return status;
 8001522:	193b      	adds	r3, r7, r4
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	b25b      	sxtb	r3, r3
}
 8001528:	0018      	movs	r0, r3
 800152a:	46bd      	mov	sp, r7
 800152c:	b005      	add	sp, #20
 800152e:	bd90      	pop	{r4, r7, pc}
 8001530:	200002fc 	.word	0x200002fc
 8001534:	50000c00 	.word	0x50000c00
 8001538:	20000300 	.word	0x20000300
 800153c:	20000410 	.word	0x20000410

08001540 <DRV_GetConfig1>:

int8_t DRV_GetConfig1(drv_config_1_t* config_1)
{
 8001540:	b590      	push	{r4, r7, lr}
 8001542:	b087      	sub	sp, #28
 8001544:	af02      	add	r7, sp, #8
 8001546:	6078      	str	r0, [r7, #4]
	int8_t status = HAL_OK;
 8001548:	240f      	movs	r4, #15
 800154a:	193b      	adds	r3, r7, r4
 800154c:	2200      	movs	r2, #0
 800154e:	701a      	strb	r2, [r3, #0]

	tx_data[0] = (CONFIG_1 | READ_MASK);
 8001550:	4b17      	ldr	r3, [pc, #92]	@ (80015b0 <DRV_GetConfig1+0x70>)
 8001552:	224a      	movs	r2, #74	@ 0x4a
 8001554:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0;
 8001556:	4b16      	ldr	r3, [pc, #88]	@ (80015b0 <DRV_GetConfig1+0x70>)
 8001558:	2200      	movs	r2, #0
 800155a:	705a      	strb	r2, [r3, #1]
	rx_data[0] = 0;
 800155c:	4b15      	ldr	r3, [pc, #84]	@ (80015b4 <DRV_GetConfig1+0x74>)
 800155e:	2200      	movs	r2, #0
 8001560:	701a      	strb	r2, [r3, #0]
	rx_data[1] = 0;
 8001562:	4b14      	ldr	r3, [pc, #80]	@ (80015b4 <DRV_GetConfig1+0x74>)
 8001564:	2200      	movs	r2, #0
 8001566:	705a      	strb	r2, [r3, #1]

	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_RESET);
 8001568:	4b13      	ldr	r3, [pc, #76]	@ (80015b8 <DRV_GetConfig1+0x78>)
 800156a:	2200      	movs	r2, #0
 800156c:	2101      	movs	r1, #1
 800156e:	0018      	movs	r0, r3
 8001570:	f004 fa99 	bl	8005aa6 <HAL_GPIO_WritePin>
	status = HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 100);
 8001574:	4a0f      	ldr	r2, [pc, #60]	@ (80015b4 <DRV_GetConfig1+0x74>)
 8001576:	490e      	ldr	r1, [pc, #56]	@ (80015b0 <DRV_GetConfig1+0x70>)
 8001578:	4810      	ldr	r0, [pc, #64]	@ (80015bc <DRV_GetConfig1+0x7c>)
 800157a:	2364      	movs	r3, #100	@ 0x64
 800157c:	9300      	str	r3, [sp, #0]
 800157e:	2302      	movs	r3, #2
 8001580:	f007 fa2e 	bl	80089e0 <HAL_SPI_TransmitReceive>
 8001584:	0003      	movs	r3, r0
 8001586:	001a      	movs	r2, r3
 8001588:	193b      	adds	r3, r7, r4
 800158a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_SET);
 800158c:	4b0a      	ldr	r3, [pc, #40]	@ (80015b8 <DRV_GetConfig1+0x78>)
 800158e:	2201      	movs	r2, #1
 8001590:	2101      	movs	r1, #1
 8001592:	0018      	movs	r0, r3
 8001594:	f004 fa87 	bl	8005aa6 <HAL_GPIO_WritePin>

	config_1->raw_data = rx_data[1];
 8001598:	4b06      	ldr	r3, [pc, #24]	@ (80015b4 <DRV_GetConfig1+0x74>)
 800159a:	785a      	ldrb	r2, [r3, #1]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	701a      	strb	r2, [r3, #0]
	return status;
 80015a0:	193b      	adds	r3, r7, r4
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	b25b      	sxtb	r3, r3
}
 80015a6:	0018      	movs	r0, r3
 80015a8:	46bd      	mov	sp, r7
 80015aa:	b005      	add	sp, #20
 80015ac:	bd90      	pop	{r4, r7, pc}
 80015ae:	46c0      	nop			@ (mov r8, r8)
 80015b0:	200002fc 	.word	0x200002fc
 80015b4:	20000300 	.word	0x20000300
 80015b8:	50000c00 	.word	0x50000c00
 80015bc:	20000410 	.word	0x20000410

080015c0 <DRV_SetConfig1>:

int8_t DRV_SetConfig1(drv_config_1_t* config_1)
{
 80015c0:	b590      	push	{r4, r7, lr}
 80015c2:	b087      	sub	sp, #28
 80015c4:	af02      	add	r7, sp, #8
 80015c6:	6078      	str	r0, [r7, #4]
	int8_t status = HAL_OK;
 80015c8:	240f      	movs	r4, #15
 80015ca:	193b      	adds	r3, r7, r4
 80015cc:	2200      	movs	r2, #0
 80015ce:	701a      	strb	r2, [r3, #0]

	tx_data[0] = CONFIG_1;
 80015d0:	4b12      	ldr	r3, [pc, #72]	@ (800161c <DRV_SetConfig1+0x5c>)
 80015d2:	220a      	movs	r2, #10
 80015d4:	701a      	strb	r2, [r3, #0]
	tx_data[1] = config_1->raw_data;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	781a      	ldrb	r2, [r3, #0]
 80015da:	4b10      	ldr	r3, [pc, #64]	@ (800161c <DRV_SetConfig1+0x5c>)
 80015dc:	705a      	strb	r2, [r3, #1]

	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_RESET);
 80015de:	4b10      	ldr	r3, [pc, #64]	@ (8001620 <DRV_SetConfig1+0x60>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	2101      	movs	r1, #1
 80015e4:	0018      	movs	r0, r3
 80015e6:	f004 fa5e 	bl	8005aa6 <HAL_GPIO_WritePin>
	status = HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 100);
 80015ea:	4a0e      	ldr	r2, [pc, #56]	@ (8001624 <DRV_SetConfig1+0x64>)
 80015ec:	490b      	ldr	r1, [pc, #44]	@ (800161c <DRV_SetConfig1+0x5c>)
 80015ee:	480e      	ldr	r0, [pc, #56]	@ (8001628 <DRV_SetConfig1+0x68>)
 80015f0:	2364      	movs	r3, #100	@ 0x64
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	2302      	movs	r3, #2
 80015f6:	f007 f9f3 	bl	80089e0 <HAL_SPI_TransmitReceive>
 80015fa:	0003      	movs	r3, r0
 80015fc:	001a      	movs	r2, r3
 80015fe:	193b      	adds	r3, r7, r4
 8001600:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_SET);
 8001602:	4b07      	ldr	r3, [pc, #28]	@ (8001620 <DRV_SetConfig1+0x60>)
 8001604:	2201      	movs	r2, #1
 8001606:	2101      	movs	r1, #1
 8001608:	0018      	movs	r0, r3
 800160a:	f004 fa4c 	bl	8005aa6 <HAL_GPIO_WritePin>
	return status;
 800160e:	193b      	adds	r3, r7, r4
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	b25b      	sxtb	r3, r3
}
 8001614:	0018      	movs	r0, r3
 8001616:	46bd      	mov	sp, r7
 8001618:	b005      	add	sp, #20
 800161a:	bd90      	pop	{r4, r7, pc}
 800161c:	200002fc 	.word	0x200002fc
 8001620:	50000c00 	.word	0x50000c00
 8001624:	20000300 	.word	0x20000300
 8001628:	20000410 	.word	0x20000410

0800162c <DRV_GetConfig2>:

int8_t DRV_GetConfig2(drv_config_2_t* config_2)
{
 800162c:	b590      	push	{r4, r7, lr}
 800162e:	b087      	sub	sp, #28
 8001630:	af02      	add	r7, sp, #8
 8001632:	6078      	str	r0, [r7, #4]
	int8_t status = HAL_OK;
 8001634:	240f      	movs	r4, #15
 8001636:	193b      	adds	r3, r7, r4
 8001638:	2200      	movs	r2, #0
 800163a:	701a      	strb	r2, [r3, #0]

	tx_data[0] = (CONFIG_2 | READ_MASK);
 800163c:	4b17      	ldr	r3, [pc, #92]	@ (800169c <DRV_GetConfig2+0x70>)
 800163e:	224b      	movs	r2, #75	@ 0x4b
 8001640:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0;
 8001642:	4b16      	ldr	r3, [pc, #88]	@ (800169c <DRV_GetConfig2+0x70>)
 8001644:	2200      	movs	r2, #0
 8001646:	705a      	strb	r2, [r3, #1]
	rx_data[0] = 0;
 8001648:	4b15      	ldr	r3, [pc, #84]	@ (80016a0 <DRV_GetConfig2+0x74>)
 800164a:	2200      	movs	r2, #0
 800164c:	701a      	strb	r2, [r3, #0]
	rx_data[1] = 0;
 800164e:	4b14      	ldr	r3, [pc, #80]	@ (80016a0 <DRV_GetConfig2+0x74>)
 8001650:	2200      	movs	r2, #0
 8001652:	705a      	strb	r2, [r3, #1]

	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_RESET);
 8001654:	4b13      	ldr	r3, [pc, #76]	@ (80016a4 <DRV_GetConfig2+0x78>)
 8001656:	2200      	movs	r2, #0
 8001658:	2101      	movs	r1, #1
 800165a:	0018      	movs	r0, r3
 800165c:	f004 fa23 	bl	8005aa6 <HAL_GPIO_WritePin>
	status = HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 100);
 8001660:	4a0f      	ldr	r2, [pc, #60]	@ (80016a0 <DRV_GetConfig2+0x74>)
 8001662:	490e      	ldr	r1, [pc, #56]	@ (800169c <DRV_GetConfig2+0x70>)
 8001664:	4810      	ldr	r0, [pc, #64]	@ (80016a8 <DRV_GetConfig2+0x7c>)
 8001666:	2364      	movs	r3, #100	@ 0x64
 8001668:	9300      	str	r3, [sp, #0]
 800166a:	2302      	movs	r3, #2
 800166c:	f007 f9b8 	bl	80089e0 <HAL_SPI_TransmitReceive>
 8001670:	0003      	movs	r3, r0
 8001672:	001a      	movs	r2, r3
 8001674:	193b      	adds	r3, r7, r4
 8001676:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_SET);
 8001678:	4b0a      	ldr	r3, [pc, #40]	@ (80016a4 <DRV_GetConfig2+0x78>)
 800167a:	2201      	movs	r2, #1
 800167c:	2101      	movs	r1, #1
 800167e:	0018      	movs	r0, r3
 8001680:	f004 fa11 	bl	8005aa6 <HAL_GPIO_WritePin>

	config_2->raw_data = rx_data[1];
 8001684:	4b06      	ldr	r3, [pc, #24]	@ (80016a0 <DRV_GetConfig2+0x74>)
 8001686:	785a      	ldrb	r2, [r3, #1]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	701a      	strb	r2, [r3, #0]
	return status;
 800168c:	193b      	adds	r3, r7, r4
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	b25b      	sxtb	r3, r3
}
 8001692:	0018      	movs	r0, r3
 8001694:	46bd      	mov	sp, r7
 8001696:	b005      	add	sp, #20
 8001698:	bd90      	pop	{r4, r7, pc}
 800169a:	46c0      	nop			@ (mov r8, r8)
 800169c:	200002fc 	.word	0x200002fc
 80016a0:	20000300 	.word	0x20000300
 80016a4:	50000c00 	.word	0x50000c00
 80016a8:	20000410 	.word	0x20000410

080016ac <DRV_SetConfig2>:

int8_t DRV_SetConfig2(drv_config_2_t* config_2)
{
 80016ac:	b590      	push	{r4, r7, lr}
 80016ae:	b087      	sub	sp, #28
 80016b0:	af02      	add	r7, sp, #8
 80016b2:	6078      	str	r0, [r7, #4]
	int8_t status = HAL_OK;
 80016b4:	240f      	movs	r4, #15
 80016b6:	193b      	adds	r3, r7, r4
 80016b8:	2200      	movs	r2, #0
 80016ba:	701a      	strb	r2, [r3, #0]

	tx_data[0] = CONFIG_2;
 80016bc:	4b12      	ldr	r3, [pc, #72]	@ (8001708 <DRV_SetConfig2+0x5c>)
 80016be:	220b      	movs	r2, #11
 80016c0:	701a      	strb	r2, [r3, #0]
	tx_data[1] = config_2->raw_data;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	781a      	ldrb	r2, [r3, #0]
 80016c6:	4b10      	ldr	r3, [pc, #64]	@ (8001708 <DRV_SetConfig2+0x5c>)
 80016c8:	705a      	strb	r2, [r3, #1]

	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_RESET);
 80016ca:	4b10      	ldr	r3, [pc, #64]	@ (800170c <DRV_SetConfig2+0x60>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	2101      	movs	r1, #1
 80016d0:	0018      	movs	r0, r3
 80016d2:	f004 f9e8 	bl	8005aa6 <HAL_GPIO_WritePin>
	status = HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 100);
 80016d6:	4a0e      	ldr	r2, [pc, #56]	@ (8001710 <DRV_SetConfig2+0x64>)
 80016d8:	490b      	ldr	r1, [pc, #44]	@ (8001708 <DRV_SetConfig2+0x5c>)
 80016da:	480e      	ldr	r0, [pc, #56]	@ (8001714 <DRV_SetConfig2+0x68>)
 80016dc:	2364      	movs	r3, #100	@ 0x64
 80016de:	9300      	str	r3, [sp, #0]
 80016e0:	2302      	movs	r3, #2
 80016e2:	f007 f97d 	bl	80089e0 <HAL_SPI_TransmitReceive>
 80016e6:	0003      	movs	r3, r0
 80016e8:	001a      	movs	r2, r3
 80016ea:	193b      	adds	r3, r7, r4
 80016ec:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_SET);
 80016ee:	4b07      	ldr	r3, [pc, #28]	@ (800170c <DRV_SetConfig2+0x60>)
 80016f0:	2201      	movs	r2, #1
 80016f2:	2101      	movs	r1, #1
 80016f4:	0018      	movs	r0, r3
 80016f6:	f004 f9d6 	bl	8005aa6 <HAL_GPIO_WritePin>
	return status;
 80016fa:	193b      	adds	r3, r7, r4
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	b25b      	sxtb	r3, r3
}
 8001700:	0018      	movs	r0, r3
 8001702:	46bd      	mov	sp, r7
 8001704:	b005      	add	sp, #20
 8001706:	bd90      	pop	{r4, r7, pc}
 8001708:	200002fc 	.word	0x200002fc
 800170c:	50000c00 	.word	0x50000c00
 8001710:	20000300 	.word	0x20000300
 8001714:	20000410 	.word	0x20000410

08001718 <DRV_GetConfig3>:

int8_t DRV_GetConfig3(drv_config_3_t* config_3)
{
 8001718:	b590      	push	{r4, r7, lr}
 800171a:	b087      	sub	sp, #28
 800171c:	af02      	add	r7, sp, #8
 800171e:	6078      	str	r0, [r7, #4]
	int8_t status = HAL_OK;
 8001720:	240f      	movs	r4, #15
 8001722:	193b      	adds	r3, r7, r4
 8001724:	2200      	movs	r2, #0
 8001726:	701a      	strb	r2, [r3, #0]

	tx_data[0] = (CONFIG_3 | READ_MASK);
 8001728:	4b17      	ldr	r3, [pc, #92]	@ (8001788 <DRV_GetConfig3+0x70>)
 800172a:	224c      	movs	r2, #76	@ 0x4c
 800172c:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0;
 800172e:	4b16      	ldr	r3, [pc, #88]	@ (8001788 <DRV_GetConfig3+0x70>)
 8001730:	2200      	movs	r2, #0
 8001732:	705a      	strb	r2, [r3, #1]
	rx_data[0] = 0;
 8001734:	4b15      	ldr	r3, [pc, #84]	@ (800178c <DRV_GetConfig3+0x74>)
 8001736:	2200      	movs	r2, #0
 8001738:	701a      	strb	r2, [r3, #0]
	rx_data[1] = 0;
 800173a:	4b14      	ldr	r3, [pc, #80]	@ (800178c <DRV_GetConfig3+0x74>)
 800173c:	2200      	movs	r2, #0
 800173e:	705a      	strb	r2, [r3, #1]

	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_RESET);
 8001740:	4b13      	ldr	r3, [pc, #76]	@ (8001790 <DRV_GetConfig3+0x78>)
 8001742:	2200      	movs	r2, #0
 8001744:	2101      	movs	r1, #1
 8001746:	0018      	movs	r0, r3
 8001748:	f004 f9ad 	bl	8005aa6 <HAL_GPIO_WritePin>
	status = HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 100);
 800174c:	4a0f      	ldr	r2, [pc, #60]	@ (800178c <DRV_GetConfig3+0x74>)
 800174e:	490e      	ldr	r1, [pc, #56]	@ (8001788 <DRV_GetConfig3+0x70>)
 8001750:	4810      	ldr	r0, [pc, #64]	@ (8001794 <DRV_GetConfig3+0x7c>)
 8001752:	2364      	movs	r3, #100	@ 0x64
 8001754:	9300      	str	r3, [sp, #0]
 8001756:	2302      	movs	r3, #2
 8001758:	f007 f942 	bl	80089e0 <HAL_SPI_TransmitReceive>
 800175c:	0003      	movs	r3, r0
 800175e:	001a      	movs	r2, r3
 8001760:	193b      	adds	r3, r7, r4
 8001762:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_SET);
 8001764:	4b0a      	ldr	r3, [pc, #40]	@ (8001790 <DRV_GetConfig3+0x78>)
 8001766:	2201      	movs	r2, #1
 8001768:	2101      	movs	r1, #1
 800176a:	0018      	movs	r0, r3
 800176c:	f004 f99b 	bl	8005aa6 <HAL_GPIO_WritePin>

	config_3->raw_data = rx_data[1];
 8001770:	4b06      	ldr	r3, [pc, #24]	@ (800178c <DRV_GetConfig3+0x74>)
 8001772:	785a      	ldrb	r2, [r3, #1]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	701a      	strb	r2, [r3, #0]
	return status;
 8001778:	193b      	adds	r3, r7, r4
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	b25b      	sxtb	r3, r3
}
 800177e:	0018      	movs	r0, r3
 8001780:	46bd      	mov	sp, r7
 8001782:	b005      	add	sp, #20
 8001784:	bd90      	pop	{r4, r7, pc}
 8001786:	46c0      	nop			@ (mov r8, r8)
 8001788:	200002fc 	.word	0x200002fc
 800178c:	20000300 	.word	0x20000300
 8001790:	50000c00 	.word	0x50000c00
 8001794:	20000410 	.word	0x20000410

08001798 <DRV_SetConfig3>:

int8_t DRV_SetConfig3(drv_config_3_t* config_3)
{
 8001798:	b590      	push	{r4, r7, lr}
 800179a:	b087      	sub	sp, #28
 800179c:	af02      	add	r7, sp, #8
 800179e:	6078      	str	r0, [r7, #4]
	int8_t status = HAL_OK;
 80017a0:	240f      	movs	r4, #15
 80017a2:	193b      	adds	r3, r7, r4
 80017a4:	2200      	movs	r2, #0
 80017a6:	701a      	strb	r2, [r3, #0]

	tx_data[0] = CONFIG_3;
 80017a8:	4b12      	ldr	r3, [pc, #72]	@ (80017f4 <DRV_SetConfig3+0x5c>)
 80017aa:	220c      	movs	r2, #12
 80017ac:	701a      	strb	r2, [r3, #0]
	tx_data[1] = config_3->raw_data;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	781a      	ldrb	r2, [r3, #0]
 80017b2:	4b10      	ldr	r3, [pc, #64]	@ (80017f4 <DRV_SetConfig3+0x5c>)
 80017b4:	705a      	strb	r2, [r3, #1]

	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_RESET);
 80017b6:	4b10      	ldr	r3, [pc, #64]	@ (80017f8 <DRV_SetConfig3+0x60>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	2101      	movs	r1, #1
 80017bc:	0018      	movs	r0, r3
 80017be:	f004 f972 	bl	8005aa6 <HAL_GPIO_WritePin>
	status = HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 100);
 80017c2:	4a0e      	ldr	r2, [pc, #56]	@ (80017fc <DRV_SetConfig3+0x64>)
 80017c4:	490b      	ldr	r1, [pc, #44]	@ (80017f4 <DRV_SetConfig3+0x5c>)
 80017c6:	480e      	ldr	r0, [pc, #56]	@ (8001800 <DRV_SetConfig3+0x68>)
 80017c8:	2364      	movs	r3, #100	@ 0x64
 80017ca:	9300      	str	r3, [sp, #0]
 80017cc:	2302      	movs	r3, #2
 80017ce:	f007 f907 	bl	80089e0 <HAL_SPI_TransmitReceive>
 80017d2:	0003      	movs	r3, r0
 80017d4:	001a      	movs	r2, r3
 80017d6:	193b      	adds	r3, r7, r4
 80017d8:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_SET);
 80017da:	4b07      	ldr	r3, [pc, #28]	@ (80017f8 <DRV_SetConfig3+0x60>)
 80017dc:	2201      	movs	r2, #1
 80017de:	2101      	movs	r1, #1
 80017e0:	0018      	movs	r0, r3
 80017e2:	f004 f960 	bl	8005aa6 <HAL_GPIO_WritePin>
	return status;
 80017e6:	193b      	adds	r3, r7, r4
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	b25b      	sxtb	r3, r3
}
 80017ec:	0018      	movs	r0, r3
 80017ee:	46bd      	mov	sp, r7
 80017f0:	b005      	add	sp, #20
 80017f2:	bd90      	pop	{r4, r7, pc}
 80017f4:	200002fc 	.word	0x200002fc
 80017f8:	50000c00 	.word	0x50000c00
 80017fc:	20000300 	.word	0x20000300
 8001800:	20000410 	.word	0x20000410

08001804 <DRV_GetConfig4>:

int8_t DRV_GetConfig4(drv_config_4_t* config_4)
{
 8001804:	b590      	push	{r4, r7, lr}
 8001806:	b087      	sub	sp, #28
 8001808:	af02      	add	r7, sp, #8
 800180a:	6078      	str	r0, [r7, #4]
	int8_t status = HAL_OK;
 800180c:	240f      	movs	r4, #15
 800180e:	193b      	adds	r3, r7, r4
 8001810:	2200      	movs	r2, #0
 8001812:	701a      	strb	r2, [r3, #0]

	tx_data[0] = (CONFIG_4 | READ_MASK);
 8001814:	4b17      	ldr	r3, [pc, #92]	@ (8001874 <DRV_GetConfig4+0x70>)
 8001816:	224d      	movs	r2, #77	@ 0x4d
 8001818:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0;
 800181a:	4b16      	ldr	r3, [pc, #88]	@ (8001874 <DRV_GetConfig4+0x70>)
 800181c:	2200      	movs	r2, #0
 800181e:	705a      	strb	r2, [r3, #1]
	rx_data[0] = 0;
 8001820:	4b15      	ldr	r3, [pc, #84]	@ (8001878 <DRV_GetConfig4+0x74>)
 8001822:	2200      	movs	r2, #0
 8001824:	701a      	strb	r2, [r3, #0]
	rx_data[1] = 0;
 8001826:	4b14      	ldr	r3, [pc, #80]	@ (8001878 <DRV_GetConfig4+0x74>)
 8001828:	2200      	movs	r2, #0
 800182a:	705a      	strb	r2, [r3, #1]

	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_RESET);
 800182c:	4b13      	ldr	r3, [pc, #76]	@ (800187c <DRV_GetConfig4+0x78>)
 800182e:	2200      	movs	r2, #0
 8001830:	2101      	movs	r1, #1
 8001832:	0018      	movs	r0, r3
 8001834:	f004 f937 	bl	8005aa6 <HAL_GPIO_WritePin>
	status = HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 100);
 8001838:	4a0f      	ldr	r2, [pc, #60]	@ (8001878 <DRV_GetConfig4+0x74>)
 800183a:	490e      	ldr	r1, [pc, #56]	@ (8001874 <DRV_GetConfig4+0x70>)
 800183c:	4810      	ldr	r0, [pc, #64]	@ (8001880 <DRV_GetConfig4+0x7c>)
 800183e:	2364      	movs	r3, #100	@ 0x64
 8001840:	9300      	str	r3, [sp, #0]
 8001842:	2302      	movs	r3, #2
 8001844:	f007 f8cc 	bl	80089e0 <HAL_SPI_TransmitReceive>
 8001848:	0003      	movs	r3, r0
 800184a:	001a      	movs	r2, r3
 800184c:	193b      	adds	r3, r7, r4
 800184e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_SET);
 8001850:	4b0a      	ldr	r3, [pc, #40]	@ (800187c <DRV_GetConfig4+0x78>)
 8001852:	2201      	movs	r2, #1
 8001854:	2101      	movs	r1, #1
 8001856:	0018      	movs	r0, r3
 8001858:	f004 f925 	bl	8005aa6 <HAL_GPIO_WritePin>

	config_4->raw_data = rx_data[1];
 800185c:	4b06      	ldr	r3, [pc, #24]	@ (8001878 <DRV_GetConfig4+0x74>)
 800185e:	785a      	ldrb	r2, [r3, #1]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	701a      	strb	r2, [r3, #0]
	return status;
 8001864:	193b      	adds	r3, r7, r4
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	b25b      	sxtb	r3, r3
}
 800186a:	0018      	movs	r0, r3
 800186c:	46bd      	mov	sp, r7
 800186e:	b005      	add	sp, #20
 8001870:	bd90      	pop	{r4, r7, pc}
 8001872:	46c0      	nop			@ (mov r8, r8)
 8001874:	200002fc 	.word	0x200002fc
 8001878:	20000300 	.word	0x20000300
 800187c:	50000c00 	.word	0x50000c00
 8001880:	20000410 	.word	0x20000410

08001884 <DRV_SetConfig4>:

int8_t DRV_SetConfig4(drv_config_4_t* config_4)
{
 8001884:	b590      	push	{r4, r7, lr}
 8001886:	b087      	sub	sp, #28
 8001888:	af02      	add	r7, sp, #8
 800188a:	6078      	str	r0, [r7, #4]
	int8_t status = HAL_OK;
 800188c:	240f      	movs	r4, #15
 800188e:	193b      	adds	r3, r7, r4
 8001890:	2200      	movs	r2, #0
 8001892:	701a      	strb	r2, [r3, #0]

	tx_data[0] = CONFIG_4;
 8001894:	4b12      	ldr	r3, [pc, #72]	@ (80018e0 <DRV_SetConfig4+0x5c>)
 8001896:	220d      	movs	r2, #13
 8001898:	701a      	strb	r2, [r3, #0]
	tx_data[1] = config_4->raw_data;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	781a      	ldrb	r2, [r3, #0]
 800189e:	4b10      	ldr	r3, [pc, #64]	@ (80018e0 <DRV_SetConfig4+0x5c>)
 80018a0:	705a      	strb	r2, [r3, #1]

	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_RESET);
 80018a2:	4b10      	ldr	r3, [pc, #64]	@ (80018e4 <DRV_SetConfig4+0x60>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	2101      	movs	r1, #1
 80018a8:	0018      	movs	r0, r3
 80018aa:	f004 f8fc 	bl	8005aa6 <HAL_GPIO_WritePin>
	status = HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, 2, 100);
 80018ae:	4a0e      	ldr	r2, [pc, #56]	@ (80018e8 <DRV_SetConfig4+0x64>)
 80018b0:	490b      	ldr	r1, [pc, #44]	@ (80018e0 <DRV_SetConfig4+0x5c>)
 80018b2:	480e      	ldr	r0, [pc, #56]	@ (80018ec <DRV_SetConfig4+0x68>)
 80018b4:	2364      	movs	r3, #100	@ 0x64
 80018b6:	9300      	str	r3, [sp, #0]
 80018b8:	2302      	movs	r3, #2
 80018ba:	f007 f891 	bl	80089e0 <HAL_SPI_TransmitReceive>
 80018be:	0003      	movs	r3, r0
 80018c0:	001a      	movs	r2, r3
 80018c2:	193b      	adds	r3, r7, r4
 80018c4:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_SET);
 80018c6:	4b07      	ldr	r3, [pc, #28]	@ (80018e4 <DRV_SetConfig4+0x60>)
 80018c8:	2201      	movs	r2, #1
 80018ca:	2101      	movs	r1, #1
 80018cc:	0018      	movs	r0, r3
 80018ce:	f004 f8ea 	bl	8005aa6 <HAL_GPIO_WritePin>
	return status;
 80018d2:	193b      	adds	r3, r7, r4
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	b25b      	sxtb	r3, r3
}
 80018d8:	0018      	movs	r0, r3
 80018da:	46bd      	mov	sp, r7
 80018dc:	b005      	add	sp, #20
 80018de:	bd90      	pop	{r4, r7, pc}
 80018e0:	200002fc 	.word	0x200002fc
 80018e4:	50000c00 	.word	0x50000c00
 80018e8:	20000300 	.word	0x20000300
 80018ec:	20000410 	.word	0x20000410

080018f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	0002      	movs	r2, r0
 80018f8:	1dfb      	adds	r3, r7, #7
 80018fa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80018fc:	1dfb      	adds	r3, r7, #7
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b7f      	cmp	r3, #127	@ 0x7f
 8001902:	d809      	bhi.n	8001918 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001904:	1dfb      	adds	r3, r7, #7
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	001a      	movs	r2, r3
 800190a:	231f      	movs	r3, #31
 800190c:	401a      	ands	r2, r3
 800190e:	4b04      	ldr	r3, [pc, #16]	@ (8001920 <__NVIC_EnableIRQ+0x30>)
 8001910:	2101      	movs	r1, #1
 8001912:	4091      	lsls	r1, r2
 8001914:	000a      	movs	r2, r1
 8001916:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001918:	46c0      	nop			@ (mov r8, r8)
 800191a:	46bd      	mov	sp, r7
 800191c:	b002      	add	sp, #8
 800191e:	bd80      	pop	{r7, pc}
 8001920:	e000e100 	.word	0xe000e100

08001924 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001924:	b590      	push	{r4, r7, lr}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	0002      	movs	r2, r0
 800192c:	6039      	str	r1, [r7, #0]
 800192e:	1dfb      	adds	r3, r7, #7
 8001930:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001932:	1dfb      	adds	r3, r7, #7
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2b7f      	cmp	r3, #127	@ 0x7f
 8001938:	d828      	bhi.n	800198c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800193a:	4a2f      	ldr	r2, [pc, #188]	@ (80019f8 <__NVIC_SetPriority+0xd4>)
 800193c:	1dfb      	adds	r3, r7, #7
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	b25b      	sxtb	r3, r3
 8001942:	089b      	lsrs	r3, r3, #2
 8001944:	33c0      	adds	r3, #192	@ 0xc0
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	589b      	ldr	r3, [r3, r2]
 800194a:	1dfa      	adds	r2, r7, #7
 800194c:	7812      	ldrb	r2, [r2, #0]
 800194e:	0011      	movs	r1, r2
 8001950:	2203      	movs	r2, #3
 8001952:	400a      	ands	r2, r1
 8001954:	00d2      	lsls	r2, r2, #3
 8001956:	21ff      	movs	r1, #255	@ 0xff
 8001958:	4091      	lsls	r1, r2
 800195a:	000a      	movs	r2, r1
 800195c:	43d2      	mvns	r2, r2
 800195e:	401a      	ands	r2, r3
 8001960:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	019b      	lsls	r3, r3, #6
 8001966:	22ff      	movs	r2, #255	@ 0xff
 8001968:	401a      	ands	r2, r3
 800196a:	1dfb      	adds	r3, r7, #7
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	0018      	movs	r0, r3
 8001970:	2303      	movs	r3, #3
 8001972:	4003      	ands	r3, r0
 8001974:	00db      	lsls	r3, r3, #3
 8001976:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001978:	481f      	ldr	r0, [pc, #124]	@ (80019f8 <__NVIC_SetPriority+0xd4>)
 800197a:	1dfb      	adds	r3, r7, #7
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	b25b      	sxtb	r3, r3
 8001980:	089b      	lsrs	r3, r3, #2
 8001982:	430a      	orrs	r2, r1
 8001984:	33c0      	adds	r3, #192	@ 0xc0
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800198a:	e031      	b.n	80019f0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800198c:	4a1b      	ldr	r2, [pc, #108]	@ (80019fc <__NVIC_SetPriority+0xd8>)
 800198e:	1dfb      	adds	r3, r7, #7
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	0019      	movs	r1, r3
 8001994:	230f      	movs	r3, #15
 8001996:	400b      	ands	r3, r1
 8001998:	3b08      	subs	r3, #8
 800199a:	089b      	lsrs	r3, r3, #2
 800199c:	3306      	adds	r3, #6
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	18d3      	adds	r3, r2, r3
 80019a2:	3304      	adds	r3, #4
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	1dfa      	adds	r2, r7, #7
 80019a8:	7812      	ldrb	r2, [r2, #0]
 80019aa:	0011      	movs	r1, r2
 80019ac:	2203      	movs	r2, #3
 80019ae:	400a      	ands	r2, r1
 80019b0:	00d2      	lsls	r2, r2, #3
 80019b2:	21ff      	movs	r1, #255	@ 0xff
 80019b4:	4091      	lsls	r1, r2
 80019b6:	000a      	movs	r2, r1
 80019b8:	43d2      	mvns	r2, r2
 80019ba:	401a      	ands	r2, r3
 80019bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	019b      	lsls	r3, r3, #6
 80019c2:	22ff      	movs	r2, #255	@ 0xff
 80019c4:	401a      	ands	r2, r3
 80019c6:	1dfb      	adds	r3, r7, #7
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	0018      	movs	r0, r3
 80019cc:	2303      	movs	r3, #3
 80019ce:	4003      	ands	r3, r0
 80019d0:	00db      	lsls	r3, r3, #3
 80019d2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019d4:	4809      	ldr	r0, [pc, #36]	@ (80019fc <__NVIC_SetPriority+0xd8>)
 80019d6:	1dfb      	adds	r3, r7, #7
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	001c      	movs	r4, r3
 80019dc:	230f      	movs	r3, #15
 80019de:	4023      	ands	r3, r4
 80019e0:	3b08      	subs	r3, #8
 80019e2:	089b      	lsrs	r3, r3, #2
 80019e4:	430a      	orrs	r2, r1
 80019e6:	3306      	adds	r3, #6
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	18c3      	adds	r3, r0, r3
 80019ec:	3304      	adds	r3, #4
 80019ee:	601a      	str	r2, [r3, #0]
}
 80019f0:	46c0      	nop			@ (mov r8, r8)
 80019f2:	46bd      	mov	sp, r7
 80019f4:	b003      	add	sp, #12
 80019f6:	bd90      	pop	{r4, r7, pc}
 80019f8:	e000e100 	.word	0xe000e100
 80019fc:	e000ed00 	.word	0xe000ed00

08001a00 <LL_ADC_DMA_GetRegAddr>:
  * @param  Register This parameter can be one of the following values:
  *         @arg @ref LL_ADC_DMA_REG_REGULAR_DATA
  * @retval ADC register address
  */
__STATIC_INLINE uint32_t LL_ADC_DMA_GetRegAddr(ADC_TypeDef *ADCx, uint32_t Register)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(Register);

  /* Retrieve address of register DR */
  return (uint32_t) &(ADCx->DR);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	3340      	adds	r3, #64	@ 0x40
}
 8001a0e:	0018      	movs	r0, r3
 8001a10:	46bd      	mov	sp, r7
 8001a12:	b002      	add	sp, #8
 8001a14:	bd80      	pop	{r7, pc}
	...

08001a18 <LL_ADC_SetTriggerFrequencyMode>:
  *         @arg @ref LL_ADC_TRIGGER_FREQ_HIGH
  *         @arg @ref LL_ADC_TRIGGER_FREQ_LOW
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetTriggerFrequencyMode(ADC_TypeDef *ADCx, uint32_t TriggerFrequencyMode)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_LFTRIG, TriggerFrequencyMode);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	691b      	ldr	r3, [r3, #16]
 8001a26:	4a05      	ldr	r2, [pc, #20]	@ (8001a3c <LL_ADC_SetTriggerFrequencyMode+0x24>)
 8001a28:	401a      	ands	r2, r3
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	431a      	orrs	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	611a      	str	r2, [r3, #16]
}
 8001a32:	46c0      	nop			@ (mov r8, r8)
 8001a34:	46bd      	mov	sp, r7
 8001a36:	b002      	add	sp, #8
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	46c0      	nop			@ (mov r8, r8)
 8001a3c:	dfffffff 	.word	0xdfffffff

08001a40 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	695b      	ldr	r3, [r3, #20]
 8001a50:	68ba      	ldr	r2, [r7, #8]
 8001a52:	2104      	movs	r1, #4
 8001a54:	400a      	ands	r2, r1
 8001a56:	2107      	movs	r1, #7
 8001a58:	4091      	lsls	r1, r2
 8001a5a:	000a      	movs	r2, r1
 8001a5c:	43d2      	mvns	r2, r2
 8001a5e:	401a      	ands	r2, r3
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	2104      	movs	r1, #4
 8001a64:	400b      	ands	r3, r1
 8001a66:	6879      	ldr	r1, [r7, #4]
 8001a68:	4099      	lsls	r1, r3
 8001a6a:	000b      	movs	r3, r1
 8001a6c:	431a      	orrs	r2, r3
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001a72:	46c0      	nop			@ (mov r8, r8)
 8001a74:	46bd      	mov	sp, r7
 8001a76:	b004      	add	sp, #16
 8001a78:	bd80      	pop	{r7, pc}
	...

08001a7c <LL_ADC_REG_SetSequencerConfigurable>:
  *         @arg @ref LL_ADC_REG_SEQ_FIXED
  *         @arg @ref LL_ADC_REG_SEQ_CONFIGURABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerConfigurable(ADC_TypeDef *ADCx, uint32_t Configurability)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_CHSELRMOD, Configurability);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	4a05      	ldr	r2, [pc, #20]	@ (8001aa0 <LL_ADC_REG_SetSequencerConfigurable+0x24>)
 8001a8c:	401a      	ands	r2, r3
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	431a      	orrs	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	60da      	str	r2, [r3, #12]
}
 8001a96:	46c0      	nop			@ (mov r8, r8)
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	b002      	add	sp, #8
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	46c0      	nop			@ (mov r8, r8)
 8001aa0:	ffdfffff 	.word	0xffdfffff

08001aa4 <LL_ADC_REG_SetSequencerScanDirection>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_FORWARD
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_BACKWARD
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerScanDirection(ADC_TypeDef *ADCx, uint32_t ScanDirection)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	2204      	movs	r2, #4
 8001ab4:	4393      	bics	r3, r2
 8001ab6:	001a      	movs	r2, r3
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	431a      	orrs	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	60da      	str	r2, [r3, #12]
}
 8001ac0:	46c0      	nop			@ (mov r8, r8)
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	b002      	add	sp, #8
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	025b      	lsls	r3, r3, #9
 8001ada:	0a5b      	lsrs	r3, r3, #9
 8001adc:	431a      	orrs	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001ae2:	46c0      	nop			@ (mov r8, r8)
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	b002      	add	sp, #8
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <LL_ADC_SetOverSamplingScope>:
  *         @arg @ref LL_ADC_OVS_DISABLE
  *         @arg @ref LL_ADC_OVS_GRP_REGULAR_CONTINUED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b082      	sub	sp, #8
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
 8001af2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_OVSE, OvsScope);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	2201      	movs	r2, #1
 8001afa:	4393      	bics	r3, r2
 8001afc:	001a      	movs	r2, r3
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	431a      	orrs	r2, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	611a      	str	r2, [r3, #16]
}
 8001b06:	46c0      	nop			@ (mov r8, r8)
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	b002      	add	sp, #8
 8001b0c:	bd80      	pop	{r7, pc}
	...

08001b10 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	4a05      	ldr	r2, [pc, #20]	@ (8001b34 <LL_ADC_EnableInternalRegulator+0x24>)
 8001b1e:	4013      	ands	r3, r2
 8001b20:	2280      	movs	r2, #128	@ 0x80
 8001b22:	0552      	lsls	r2, r2, #21
 8001b24:	431a      	orrs	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b2a:	46c0      	nop			@ (mov r8, r8)
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	b002      	add	sp, #8
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	46c0      	nop			@ (mov r8, r8)
 8001b34:	6fffffe8 	.word	0x6fffffe8

08001b38 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	2201      	movs	r2, #1
 8001b46:	4013      	ands	r3, r2
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d101      	bne.n	8001b50 <LL_ADC_IsEnabled+0x18>
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e000      	b.n	8001b52 <LL_ADC_IsEnabled+0x1a>
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	0018      	movs	r0, r3
 8001b54:	46bd      	mov	sp, r7
 8001b56:	b002      	add	sp, #8
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b082      	sub	sp, #8
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	2202      	movs	r2, #2
 8001b68:	4013      	ands	r3, r2
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d101      	bne.n	8001b72 <LL_ADC_IsDisableOngoing+0x18>
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e000      	b.n	8001b74 <LL_ADC_IsDisableOngoing+0x1a>
 8001b72:	2300      	movs	r3, #0
}
 8001b74:	0018      	movs	r0, r3
 8001b76:	46bd      	mov	sp, r7
 8001b78:	b002      	add	sp, #8
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	4a04      	ldr	r2, [pc, #16]	@ (8001b9c <LL_ADC_REG_StartConversion+0x20>)
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	2204      	movs	r2, #4
 8001b8e:	431a      	orrs	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001b94:	46c0      	nop			@ (mov r8, r8)
 8001b96:	46bd      	mov	sp, r7
 8001b98:	b002      	add	sp, #8
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	7fffffe8 	.word	0x7fffffe8

08001ba0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	2204      	movs	r2, #4
 8001bae:	4013      	ands	r3, r2
 8001bb0:	2b04      	cmp	r3, #4
 8001bb2:	d101      	bne.n	8001bb8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e000      	b.n	8001bba <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	0018      	movs	r0, r3
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	b002      	add	sp, #8
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <LL_ADC_IsActiveFlag_CCRDY>:
  * @rmtoll ISR      CCRDY          LL_ADC_IsActiveFlag_CCRDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_CCRDY(ADC_TypeDef *ADCx)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b082      	sub	sp, #8
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_CCRDY) == (LL_ADC_FLAG_CCRDY)) ? 1UL : 0UL);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	2380      	movs	r3, #128	@ 0x80
 8001bd0:	019b      	lsls	r3, r3, #6
 8001bd2:	401a      	ands	r2, r3
 8001bd4:	2380      	movs	r3, #128	@ 0x80
 8001bd6:	019b      	lsls	r3, r3, #6
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d101      	bne.n	8001be0 <LL_ADC_IsActiveFlag_CCRDY+0x1e>
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e000      	b.n	8001be2 <LL_ADC_IsActiveFlag_CCRDY+0x20>
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	0018      	movs	r0, r3
 8001be4:	46bd      	mov	sp, r7
 8001be6:	b002      	add	sp, #8
 8001be8:	bd80      	pop	{r7, pc}

08001bea <LL_ADC_ClearFlag_CCRDY>:
  * @rmtoll ISR      CCRDY          LL_ADC_ClearFlag_CCRDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE void LL_ADC_ClearFlag_CCRDY(ADC_TypeDef *ADCx)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b082      	sub	sp, #8
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_CCRDY);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2280      	movs	r2, #128	@ 0x80
 8001bf6:	0192      	lsls	r2, r2, #6
 8001bf8:	601a      	str	r2, [r3, #0]
}
 8001bfa:	46c0      	nop			@ (mov r8, r8)
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	b002      	add	sp, #8
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <LL_ADC_EnableIT_OVR>:
  * @rmtoll IER      OVRIE          LL_ADC_EnableIT_OVR
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_OVR(ADC_TypeDef *ADCx)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b082      	sub	sp, #8
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_OVR);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	2210      	movs	r2, #16
 8001c10:	431a      	orrs	r2, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	605a      	str	r2, [r3, #4]
}
 8001c16:	46c0      	nop			@ (mov r8, r8)
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	b002      	add	sp, #8
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <LL_ADC_DisableIT_EOC>:
  * @rmtoll IER      EOCIE          LL_ADC_DisableIT_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b082      	sub	sp, #8
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	2204      	movs	r2, #4
 8001c2c:	4393      	bics	r3, r2
 8001c2e:	001a      	movs	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	605a      	str	r2, [r3, #4]
}
 8001c34:	46c0      	nop			@ (mov r8, r8)
 8001c36:	46bd      	mov	sp, r7
 8001c38:	b002      	add	sp, #8
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <LL_ADC_DisableIT_EOS>:
  * @rmtoll IER      EOSIE          LL_ADC_DisableIT_EOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	2208      	movs	r2, #8
 8001c4a:	4393      	bics	r3, r2
 8001c4c:	001a      	movs	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	605a      	str	r2, [r3, #4]
}
 8001c52:	46c0      	nop			@ (mov r8, r8)
 8001c54:	46bd      	mov	sp, r7
 8001c56:	b002      	add	sp, #8
 8001c58:	bd80      	pop	{r7, pc}
	...

08001c5c <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_TIM17
  *         @arg @ref LL_APB1_GRP2_PERIPH_ADC
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR2, Periphs);
 8001c64:	4b07      	ldr	r3, [pc, #28]	@ (8001c84 <LL_APB1_GRP2_EnableClock+0x28>)
 8001c66:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8001c68:	4b06      	ldr	r3, [pc, #24]	@ (8001c84 <LL_APB1_GRP2_EnableClock+0x28>)
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 8001c70:	4b04      	ldr	r3, [pc, #16]	@ (8001c84 <LL_APB1_GRP2_EnableClock+0x28>)
 8001c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	4013      	ands	r3, r2
 8001c78:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
}
 8001c7c:	46c0      	nop			@ (mov r8, r8)
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	b004      	add	sp, #16
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	40021000 	.word	0x40021000

08001c88 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOD
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8001c90:	4b07      	ldr	r3, [pc, #28]	@ (8001cb0 <LL_IOP_GRP1_EnableClock+0x28>)
 8001c92:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001c94:	4b06      	ldr	r3, [pc, #24]	@ (8001cb0 <LL_IOP_GRP1_EnableClock+0x28>)
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8001c9c:	4b04      	ldr	r3, [pc, #16]	@ (8001cb0 <LL_IOP_GRP1_EnableClock+0x28>)
 8001c9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
}
 8001ca8:	46c0      	nop			@ (mov r8, r8)
 8001caa:	46bd      	mov	sp, r7
 8001cac:	b004      	add	sp, #16
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40021000 	.word	0x40021000

08001cb4 <LL_SYSTICK_IsActiveCounterFlag>:
  * @note   It can be used in timeout function on application side.
  * @rmtoll STK_CTRL     COUNTFLAG     LL_SYSTICK_IsActiveCounterFlag
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  return (((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk)) ? 1UL : 0UL);
 8001cb8:	4b07      	ldr	r3, [pc, #28]	@ (8001cd8 <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	2380      	movs	r3, #128	@ 0x80
 8001cbe:	025b      	lsls	r3, r3, #9
 8001cc0:	401a      	ands	r2, r3
 8001cc2:	2380      	movs	r3, #128	@ 0x80
 8001cc4:	025b      	lsls	r3, r3, #9
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d101      	bne.n	8001cce <LL_SYSTICK_IsActiveCounterFlag+0x1a>
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e000      	b.n	8001cd0 <LL_SYSTICK_IsActiveCounterFlag+0x1c>
 8001cce:	2300      	movs	r3, #0
}
 8001cd0:	0018      	movs	r0, r3
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	46c0      	nop			@ (mov r8, r8)
 8001cd8:	e000e010 	.word	0xe000e010

08001cdc <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_5 (*)
  * @note (*) Availability depends on devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_EN);
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	3b01      	subs	r3, #1
 8001cee:	4a0a      	ldr	r2, [pc, #40]	@ (8001d18 <LL_DMA_EnableChannel+0x3c>)
 8001cf0:	5cd3      	ldrb	r3, [r2, r3]
 8001cf2:	001a      	movs	r2, r3
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	18d3      	adds	r3, r2, r3
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	3b01      	subs	r3, #1
 8001cfe:	4906      	ldr	r1, [pc, #24]	@ (8001d18 <LL_DMA_EnableChannel+0x3c>)
 8001d00:	5ccb      	ldrb	r3, [r1, r3]
 8001d02:	0019      	movs	r1, r3
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	18cb      	adds	r3, r1, r3
 8001d08:	2101      	movs	r1, #1
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	601a      	str	r2, [r3, #0]
}
 8001d0e:	46c0      	nop			@ (mov r8, r8)
 8001d10:	46bd      	mov	sp, r7
 8001d12:	b004      	add	sp, #16
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	46c0      	nop			@ (mov r8, r8)
 8001d18:	0800c270 	.word	0x0800c270

08001d1c <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR,
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	4a0b      	ldr	r2, [pc, #44]	@ (8001d60 <LL_DMA_SetDataTransferDirection+0x44>)
 8001d32:	5cd3      	ldrb	r3, [r2, r3]
 8001d34:	001a      	movs	r2, r3
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	18d3      	adds	r3, r2, r3
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a09      	ldr	r2, [pc, #36]	@ (8001d64 <LL_DMA_SetDataTransferDirection+0x48>)
 8001d3e:	4013      	ands	r3, r2
 8001d40:	0019      	movs	r1, r3
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	3b01      	subs	r3, #1
 8001d46:	4a06      	ldr	r2, [pc, #24]	@ (8001d60 <LL_DMA_SetDataTransferDirection+0x44>)
 8001d48:	5cd3      	ldrb	r3, [r2, r3]
 8001d4a:	001a      	movs	r2, r3
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	18d3      	adds	r3, r2, r3
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	430a      	orrs	r2, r1
 8001d54:	601a      	str	r2, [r3, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 8001d56:	46c0      	nop			@ (mov r8, r8)
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	b006      	add	sp, #24
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	46c0      	nop			@ (mov r8, r8)
 8001d60:	0800c270 	.word	0x0800c270
 8001d64:	ffffbfef 	.word	0xffffbfef

08001d68 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_CIRC,
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	4a0b      	ldr	r2, [pc, #44]	@ (8001dac <LL_DMA_SetMode+0x44>)
 8001d7e:	5cd3      	ldrb	r3, [r2, r3]
 8001d80:	001a      	movs	r2, r3
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	18d3      	adds	r3, r2, r3
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2220      	movs	r2, #32
 8001d8a:	4393      	bics	r3, r2
 8001d8c:	0019      	movs	r1, r3
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	3b01      	subs	r3, #1
 8001d92:	4a06      	ldr	r2, [pc, #24]	@ (8001dac <LL_DMA_SetMode+0x44>)
 8001d94:	5cd3      	ldrb	r3, [r2, r3]
 8001d96:	001a      	movs	r2, r3
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	18d3      	adds	r3, r2, r3
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	601a      	str	r2, [r3, #0]
             Mode);
}
 8001da2:	46c0      	nop			@ (mov r8, r8)
 8001da4:	46bd      	mov	sp, r7
 8001da6:	b006      	add	sp, #24
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	46c0      	nop			@ (mov r8, r8)
 8001dac:	0800c270 	.word	0x0800c270

08001db0 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_PINC,
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	4a0b      	ldr	r2, [pc, #44]	@ (8001df4 <LL_DMA_SetPeriphIncMode+0x44>)
 8001dc6:	5cd3      	ldrb	r3, [r2, r3]
 8001dc8:	001a      	movs	r2, r3
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	18d3      	adds	r3, r2, r3
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2240      	movs	r2, #64	@ 0x40
 8001dd2:	4393      	bics	r3, r2
 8001dd4:	0019      	movs	r1, r3
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	4a06      	ldr	r2, [pc, #24]	@ (8001df4 <LL_DMA_SetPeriphIncMode+0x44>)
 8001ddc:	5cd3      	ldrb	r3, [r2, r3]
 8001dde:	001a      	movs	r2, r3
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	18d3      	adds	r3, r2, r3
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	430a      	orrs	r2, r1
 8001de8:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcIncMode);
}
 8001dea:	46c0      	nop			@ (mov r8, r8)
 8001dec:	46bd      	mov	sp, r7
 8001dee:	b006      	add	sp, #24
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	46c0      	nop			@ (mov r8, r8)
 8001df4:	0800c270 	.word	0x0800c270

08001df8 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b086      	sub	sp, #24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_MINC,
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	4a0b      	ldr	r2, [pc, #44]	@ (8001e3c <LL_DMA_SetMemoryIncMode+0x44>)
 8001e0e:	5cd3      	ldrb	r3, [r2, r3]
 8001e10:	001a      	movs	r2, r3
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	18d3      	adds	r3, r2, r3
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2280      	movs	r2, #128	@ 0x80
 8001e1a:	4393      	bics	r3, r2
 8001e1c:	0019      	movs	r1, r3
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	3b01      	subs	r3, #1
 8001e22:	4a06      	ldr	r2, [pc, #24]	@ (8001e3c <LL_DMA_SetMemoryIncMode+0x44>)
 8001e24:	5cd3      	ldrb	r3, [r2, r3]
 8001e26:	001a      	movs	r2, r3
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	18d3      	adds	r3, r2, r3
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstIncMode);
}
 8001e32:	46c0      	nop			@ (mov r8, r8)
 8001e34:	46bd      	mov	sp, r7
 8001e36:	b006      	add	sp, #24
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	46c0      	nop			@ (mov r8, r8)
 8001e3c:	0800c270 	.word	0x0800c270

08001e40 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_PSIZE,
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	3b01      	subs	r3, #1
 8001e54:	4a0b      	ldr	r2, [pc, #44]	@ (8001e84 <LL_DMA_SetPeriphSize+0x44>)
 8001e56:	5cd3      	ldrb	r3, [r2, r3]
 8001e58:	001a      	movs	r2, r3
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	18d3      	adds	r3, r2, r3
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a09      	ldr	r2, [pc, #36]	@ (8001e88 <LL_DMA_SetPeriphSize+0x48>)
 8001e62:	4013      	ands	r3, r2
 8001e64:	0019      	movs	r1, r3
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	3b01      	subs	r3, #1
 8001e6a:	4a06      	ldr	r2, [pc, #24]	@ (8001e84 <LL_DMA_SetPeriphSize+0x44>)
 8001e6c:	5cd3      	ldrb	r3, [r2, r3]
 8001e6e:	001a      	movs	r2, r3
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	18d3      	adds	r3, r2, r3
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	430a      	orrs	r2, r1
 8001e78:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcDataSize);
}
 8001e7a:	46c0      	nop			@ (mov r8, r8)
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	b006      	add	sp, #24
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	46c0      	nop			@ (mov r8, r8)
 8001e84:	0800c270 	.word	0x0800c270
 8001e88:	fffffcff 	.word	0xfffffcff

08001e8c <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_MSIZE,
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	4a0b      	ldr	r2, [pc, #44]	@ (8001ed0 <LL_DMA_SetMemorySize+0x44>)
 8001ea2:	5cd3      	ldrb	r3, [r2, r3]
 8001ea4:	001a      	movs	r2, r3
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	18d3      	adds	r3, r2, r3
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a09      	ldr	r2, [pc, #36]	@ (8001ed4 <LL_DMA_SetMemorySize+0x48>)
 8001eae:	4013      	ands	r3, r2
 8001eb0:	0019      	movs	r1, r3
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	3b01      	subs	r3, #1
 8001eb6:	4a06      	ldr	r2, [pc, #24]	@ (8001ed0 <LL_DMA_SetMemorySize+0x44>)
 8001eb8:	5cd3      	ldrb	r3, [r2, r3]
 8001eba:	001a      	movs	r2, r3
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	18d3      	adds	r3, r2, r3
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstDataSize);
}
 8001ec6:	46c0      	nop			@ (mov r8, r8)
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	b006      	add	sp, #24
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	46c0      	nop			@ (mov r8, r8)
 8001ed0:	0800c270 	.word	0x0800c270
 8001ed4:	fffff3ff 	.word	0xfffff3ff

08001ed8 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_PL,
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	3b01      	subs	r3, #1
 8001eec:	4a0b      	ldr	r2, [pc, #44]	@ (8001f1c <LL_DMA_SetChannelPriorityLevel+0x44>)
 8001eee:	5cd3      	ldrb	r3, [r2, r3]
 8001ef0:	001a      	movs	r2, r3
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	18d3      	adds	r3, r2, r3
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a09      	ldr	r2, [pc, #36]	@ (8001f20 <LL_DMA_SetChannelPriorityLevel+0x48>)
 8001efa:	4013      	ands	r3, r2
 8001efc:	0019      	movs	r1, r3
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	3b01      	subs	r3, #1
 8001f02:	4a06      	ldr	r2, [pc, #24]	@ (8001f1c <LL_DMA_SetChannelPriorityLevel+0x44>)
 8001f04:	5cd3      	ldrb	r3, [r2, r3]
 8001f06:	001a      	movs	r2, r3
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	18d3      	adds	r3, r2, r3
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	601a      	str	r2, [r3, #0]
             Priority);
}
 8001f12:	46c0      	nop			@ (mov r8, r8)
 8001f14:	46bd      	mov	sp, r7
 8001f16:	b006      	add	sp, #24
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	46c0      	nop			@ (mov r8, r8)
 8001f1c:	0800c270 	.word	0x0800c270
 8001f20:	ffffcfff 	.word	0xffffcfff

08001f24 <LL_DMA_SetDataLength>:
  * @note (*) Availability depends on devices
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CNDTR,
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	3b01      	subs	r3, #1
 8001f38:	4a0a      	ldr	r2, [pc, #40]	@ (8001f64 <LL_DMA_SetDataLength+0x40>)
 8001f3a:	5cd3      	ldrb	r3, [r2, r3]
 8001f3c:	001a      	movs	r2, r3
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	18d3      	adds	r3, r2, r3
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	0c1b      	lsrs	r3, r3, #16
 8001f46:	0419      	lsls	r1, r3, #16
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	4a05      	ldr	r2, [pc, #20]	@ (8001f64 <LL_DMA_SetDataLength+0x40>)
 8001f4e:	5cd3      	ldrb	r3, [r2, r3]
 8001f50:	001a      	movs	r2, r3
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	18d3      	adds	r3, r2, r3
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	605a      	str	r2, [r3, #4]
             DMA_CNDTR_NDT, NbData);
}
 8001f5c:	46c0      	nop			@ (mov r8, r8)
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	b006      	add	sp, #24
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	0800c270 	.word	0x0800c270

08001f68 <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddress,
                                            uint32_t DstAddress, uint32_t Direction)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
 8001f74:	603b      	str	r3, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	617b      	str	r3, [r7, #20]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 8001f7a:	6a3b      	ldr	r3, [r7, #32]
 8001f7c:	2b10      	cmp	r3, #16
 8001f7e:	d112      	bne.n	8001fa6 <LL_DMA_ConfigAddresses+0x3e>
  {
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CMAR, SrcAddress);
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	3b01      	subs	r3, #1
 8001f84:	4a13      	ldr	r2, [pc, #76]	@ (8001fd4 <LL_DMA_ConfigAddresses+0x6c>)
 8001f86:	5cd3      	ldrb	r3, [r2, r3]
 8001f88:	001a      	movs	r2, r3
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	18d3      	adds	r3, r2, r3
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	60da      	str	r2, [r3, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CPAR, DstAddress);
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	3b01      	subs	r3, #1
 8001f96:	4a0f      	ldr	r2, [pc, #60]	@ (8001fd4 <LL_DMA_ConfigAddresses+0x6c>)
 8001f98:	5cd3      	ldrb	r3, [r2, r3]
 8001f9a:	001a      	movs	r2, r3
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	18d3      	adds	r3, r2, r3
 8001fa0:	683a      	ldr	r2, [r7, #0]
 8001fa2:	609a      	str	r2, [r3, #8]
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CPAR, SrcAddress);
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CMAR, DstAddress);
  }
}
 8001fa4:	e011      	b.n	8001fca <LL_DMA_ConfigAddresses+0x62>
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CPAR, SrcAddress);
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	3b01      	subs	r3, #1
 8001faa:	4a0a      	ldr	r2, [pc, #40]	@ (8001fd4 <LL_DMA_ConfigAddresses+0x6c>)
 8001fac:	5cd3      	ldrb	r3, [r2, r3]
 8001fae:	001a      	movs	r2, r3
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	18d3      	adds	r3, r2, r3
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	609a      	str	r2, [r3, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CMAR, DstAddress);
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	4a05      	ldr	r2, [pc, #20]	@ (8001fd4 <LL_DMA_ConfigAddresses+0x6c>)
 8001fbe:	5cd3      	ldrb	r3, [r2, r3]
 8001fc0:	001a      	movs	r2, r3
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	18d3      	adds	r3, r2, r3
 8001fc6:	683a      	ldr	r2, [r7, #0]
 8001fc8:	60da      	str	r2, [r3, #12]
}
 8001fca:	46c0      	nop			@ (mov r8, r8)
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	b006      	add	sp, #24
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	46c0      	nop			@ (mov r8, r8)
 8001fd4:	0800c270 	.word	0x0800c270

08001fd8 <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMAMUX_REQ_USART2_TX
  * @note (*) Availability depends on devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Request)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	607a      	str	r2, [r7, #4]
  (void)(DMAx);
  MODIFY_REG(((DMAMUX_Channel_TypeDef *)((uint32_t)DMAMUX1_Channel0 + (DMAMUX_CCR_SIZE * (Channel - 1UL))))->CCR,
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	4a0a      	ldr	r2, [pc, #40]	@ (8002010 <LL_DMA_SetPeriphRequest+0x38>)
 8001fe8:	4694      	mov	ip, r2
 8001fea:	4463      	add	r3, ip
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	22ff      	movs	r2, #255	@ 0xff
 8001ff2:	4393      	bics	r3, r2
 8001ff4:	0019      	movs	r1, r3
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	4a05      	ldr	r2, [pc, #20]	@ (8002010 <LL_DMA_SetPeriphRequest+0x38>)
 8001ffa:	4694      	mov	ip, r2
 8001ffc:	4463      	add	r3, ip
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	430a      	orrs	r2, r1
 8002004:	601a      	str	r2, [r3, #0]
             DMAMUX_CxCR_DMAREQ_ID, Request);
}
 8002006:	46c0      	nop			@ (mov r8, r8)
 8002008:	46bd      	mov	sp, r7
 800200a:	b004      	add	sp, #16
 800200c:	bd80      	pop	{r7, pc}
 800200e:	46c0      	nop			@ (mov r8, r8)
 8002010:	100081ff 	.word	0x100081ff

08002014 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_5 (*)
  * @note (*) Availability depends on devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_TCIE);
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	3b01      	subs	r3, #1
 8002026:	4a0a      	ldr	r2, [pc, #40]	@ (8002050 <LL_DMA_EnableIT_TC+0x3c>)
 8002028:	5cd3      	ldrb	r3, [r2, r3]
 800202a:	001a      	movs	r2, r3
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	18d3      	adds	r3, r2, r3
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	3b01      	subs	r3, #1
 8002036:	4906      	ldr	r1, [pc, #24]	@ (8002050 <LL_DMA_EnableIT_TC+0x3c>)
 8002038:	5ccb      	ldrb	r3, [r1, r3]
 800203a:	0019      	movs	r1, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	18cb      	adds	r3, r1, r3
 8002040:	2102      	movs	r1, #2
 8002042:	430a      	orrs	r2, r1
 8002044:	601a      	str	r2, [r3, #0]
}
 8002046:	46c0      	nop			@ (mov r8, r8)
 8002048:	46bd      	mov	sp, r7
 800204a:	b004      	add	sp, #16
 800204c:	bd80      	pop	{r7, pc}
 800204e:	46c0      	nop			@ (mov r8, r8)
 8002050:	0800c270 	.word	0x0800c270

08002054 <LL_DMA_EnableIT_HT>:
  *         @arg @ref LL_DMA_CHANNEL_5 (*)
  * @note (*) Availability depends on devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_HTIE);
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	3b01      	subs	r3, #1
 8002066:	4a0a      	ldr	r2, [pc, #40]	@ (8002090 <LL_DMA_EnableIT_HT+0x3c>)
 8002068:	5cd3      	ldrb	r3, [r2, r3]
 800206a:	001a      	movs	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	18d3      	adds	r3, r2, r3
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	3b01      	subs	r3, #1
 8002076:	4906      	ldr	r1, [pc, #24]	@ (8002090 <LL_DMA_EnableIT_HT+0x3c>)
 8002078:	5ccb      	ldrb	r3, [r1, r3]
 800207a:	0019      	movs	r1, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	18cb      	adds	r3, r1, r3
 8002080:	2104      	movs	r1, #4
 8002082:	430a      	orrs	r2, r1
 8002084:	601a      	str	r2, [r3, #0]
}
 8002086:	46c0      	nop			@ (mov r8, r8)
 8002088:	46bd      	mov	sp, r7
 800208a:	b004      	add	sp, #16
 800208c:	bd80      	pop	{r7, pc}
 800208e:	46c0      	nop			@ (mov r8, r8)
 8002090:	0800c270 	.word	0x0800c270

08002094 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_5 (*)
  * @note (*) Availability depends on devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel - 1U]))->CCR, DMA_CCR_TEIE);
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	3b01      	subs	r3, #1
 80020a6:	4a0a      	ldr	r2, [pc, #40]	@ (80020d0 <LL_DMA_EnableIT_TE+0x3c>)
 80020a8:	5cd3      	ldrb	r3, [r2, r3]
 80020aa:	001a      	movs	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	18d3      	adds	r3, r2, r3
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	3b01      	subs	r3, #1
 80020b6:	4906      	ldr	r1, [pc, #24]	@ (80020d0 <LL_DMA_EnableIT_TE+0x3c>)
 80020b8:	5ccb      	ldrb	r3, [r1, r3]
 80020ba:	0019      	movs	r1, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	18cb      	adds	r3, r1, r3
 80020c0:	2108      	movs	r1, #8
 80020c2:	430a      	orrs	r2, r1
 80020c4:	601a      	str	r2, [r3, #0]
}
 80020c6:	46c0      	nop			@ (mov r8, r8)
 80020c8:	46bd      	mov	sp, r7
 80020ca:	b004      	add	sp, #16
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	46c0      	nop			@ (mov r8, r8)
 80020d0:	0800c270 	.word	0x0800c270

080020d4 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
	// Refresh the Encoder Speed (pulses / 10 minutes)
	holding_register_database[ENCODER_SPEED] = (int16_t)((((uint32_t)encoder_pulse)*600UL*10000UL) / (htim14.Init.Period + 1UL));
 80020dc:	4b0b      	ldr	r3, [pc, #44]	@ (800210c <HAL_TIM_PeriodElapsedCallback+0x38>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	001a      	movs	r2, r3
 80020e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002110 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80020e4:	435a      	muls	r2, r3
 80020e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002114 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	3301      	adds	r3, #1
 80020ec:	0019      	movs	r1, r3
 80020ee:	0010      	movs	r0, r2
 80020f0:	f7fe f80a 	bl	8000108 <__udivsi3>
 80020f4:	0003      	movs	r3, r0
 80020f6:	b299      	uxth	r1, r3
 80020f8:	4b07      	ldr	r3, [pc, #28]	@ (8002118 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80020fa:	227c      	movs	r2, #124	@ 0x7c
 80020fc:	5299      	strh	r1, [r3, r2]
	encoder_pulse = 0;
 80020fe:	4b03      	ldr	r3, [pc, #12]	@ (800210c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]
}
 8002104:	46c0      	nop			@ (mov r8, r8)
 8002106:	46bd      	mov	sp, r7
 8002108:	b002      	add	sp, #8
 800210a:	bd80      	pop	{r7, pc}
 800210c:	200006a4 	.word	0x200006a4
 8002110:	005b8d80 	.word	0x005b8d80
 8002114:	200004c0 	.word	0x200004c0
 8002118:	20000014 	.word	0x20000014

0800211c <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 800211c:	b5b0      	push	{r4, r5, r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	0002      	movs	r2, r0
 8002124:	1dbb      	adds	r3, r7, #6
 8002126:	801a      	strh	r2, [r3, #0]
	GPIO_PinState pulse_b = HAL_GPIO_ReadPin(Encoder_Pulse_B_GPIO_Port, Encoder_Pulse_B_Pin);
 8002128:	250f      	movs	r5, #15
 800212a:	197c      	adds	r4, r7, r5
 800212c:	2380      	movs	r3, #128	@ 0x80
 800212e:	01db      	lsls	r3, r3, #7
 8002130:	4a0c      	ldr	r2, [pc, #48]	@ (8002164 <HAL_GPIO_EXTI_Rising_Callback+0x48>)
 8002132:	0019      	movs	r1, r3
 8002134:	0010      	movs	r0, r2
 8002136:	f003 fc99 	bl	8005a6c <HAL_GPIO_ReadPin>
 800213a:	0003      	movs	r3, r0
 800213c:	7023      	strb	r3, [r4, #0]
	if(pulse_b == GPIO_PIN_SET)
 800213e:	197b      	adds	r3, r7, r5
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	2b01      	cmp	r3, #1
 8002144:	d105      	bne.n	8002152 <HAL_GPIO_EXTI_Rising_Callback+0x36>
	{
		encoder_pulse++;
 8002146:	4b08      	ldr	r3, [pc, #32]	@ (8002168 <HAL_GPIO_EXTI_Rising_Callback+0x4c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	1c5a      	adds	r2, r3, #1
 800214c:	4b06      	ldr	r3, [pc, #24]	@ (8002168 <HAL_GPIO_EXTI_Rising_Callback+0x4c>)
 800214e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		encoder_pulse--;
	}
}
 8002150:	e004      	b.n	800215c <HAL_GPIO_EXTI_Rising_Callback+0x40>
		encoder_pulse--;
 8002152:	4b05      	ldr	r3, [pc, #20]	@ (8002168 <HAL_GPIO_EXTI_Rising_Callback+0x4c>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	1e5a      	subs	r2, r3, #1
 8002158:	4b03      	ldr	r3, [pc, #12]	@ (8002168 <HAL_GPIO_EXTI_Rising_Callback+0x4c>)
 800215a:	601a      	str	r2, [r3, #0]
}
 800215c:	46c0      	nop			@ (mov r8, r8)
 800215e:	46bd      	mov	sp, r7
 8002160:	b004      	add	sp, #16
 8002162:	bdb0      	pop	{r4, r5, r7, pc}
 8002164:	50000400 	.word	0x50000400
 8002168:	200006a4 	.word	0x200006a4

0800216c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800216c:	b5b0      	push	{r4, r5, r7, lr}
 800216e:	b086      	sub	sp, #24
 8002170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	int8_t modbus_status = HAL_OK;
 8002172:	2317      	movs	r3, #23
 8002174:	18fb      	adds	r3, r7, r3
 8002176:	2200      	movs	r2, #0
 8002178:	701a      	strb	r2, [r3, #0]
	int8_t i2c_status = HAL_OK;
 800217a:	230d      	movs	r3, #13
 800217c:	18fb      	adds	r3, r7, r3
 800217e:	2200      	movs	r2, #0
 8002180:	701a      	strb	r2, [r3, #0]
	int8_t adc_status = HAL_OK;
 8002182:	230c      	movs	r3, #12
 8002184:	18fb      	adds	r3, r7, r3
 8002186:	2200      	movs	r2, #0
 8002188:	701a      	strb	r2, [r3, #0]
	uint8_t modbus_tx_len = 0;
 800218a:	230b      	movs	r3, #11
 800218c:	18fb      	adds	r3, r7, r3
 800218e:	2200      	movs	r2, #0
 8002190:	701a      	strb	r2, [r3, #0]
	uint16_t encoder_refresh = 10000;
 8002192:	2314      	movs	r3, #20
 8002194:	18fb      	adds	r3, r7, r3
 8002196:	4ad6      	ldr	r2, [pc, #856]	@ (80024f0 <main+0x384>)
 8002198:	801a      	strh	r2, [r3, #0]
	uint8_t actuate_complete[NUM_ACTUATORS];
	uint8_t macro_consistency_count[NUM_ACTUATORS];
	uint8_t micro_consistency_count[NUM_ACTUATORS];
	uint32_t actuator_time = 0;
 800219a:	2300      	movs	r3, #0
 800219c:	613b      	str	r3, [r7, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800219e:	f002 fcac 	bl	8004afa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021a2:	f000 fb67 	bl	8002874 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021a6:	f000 ff3b 	bl	8003020 <MX_GPIO_Init>
  MX_DMA_Init();
 80021aa:	f000 ff0d 	bl	8002fc8 <MX_DMA_Init>
  MX_ADC1_Init();
 80021ae:	f000 fb9f 	bl	80028f0 <MX_ADC1_Init>
  MX_I2C1_Init();
 80021b2:	f000 fd69 	bl	8002c88 <MX_I2C1_Init>
  MX_SPI1_Init();
 80021b6:	f000 fda7 	bl	8002d08 <MX_SPI1_Init>
  MX_TIM1_Init();
 80021ba:	f000 fde3 	bl	8002d84 <MX_TIM1_Init>
  MX_TIM14_Init();
 80021be:	f000 fe8b 	bl	8002ed8 <MX_TIM14_Init>
  MX_USART1_UART_Init();
 80021c2:	f000 feb1 	bl	8002f28 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // Initialize the pin mapping table
  pin_map[0] = Actuator_A_EN_Pin;
 80021c6:	4bcb      	ldr	r3, [pc, #812]	@ (80024f4 <main+0x388>)
 80021c8:	2240      	movs	r2, #64	@ 0x40
 80021ca:	801a      	strh	r2, [r3, #0]
  pin_map[1] = Actuator_B_EN_Pin;
 80021cc:	4bc9      	ldr	r3, [pc, #804]	@ (80024f4 <main+0x388>)
 80021ce:	2280      	movs	r2, #128	@ 0x80
 80021d0:	805a      	strh	r2, [r3, #2]
  pin_map[2] = Actuator_C_EN_Pin;
 80021d2:	4bc8      	ldr	r3, [pc, #800]	@ (80024f4 <main+0x388>)
 80021d4:	2201      	movs	r2, #1
 80021d6:	809a      	strh	r2, [r3, #4]

  port_map[0] = Actuator_A_EN_GPIO_Port;
 80021d8:	4bc7      	ldr	r3, [pc, #796]	@ (80024f8 <main+0x38c>)
 80021da:	4ac8      	ldr	r2, [pc, #800]	@ (80024fc <main+0x390>)
 80021dc:	601a      	str	r2, [r3, #0]
  port_map[1] = Actuator_B_EN_GPIO_Port;
 80021de:	4bc6      	ldr	r3, [pc, #792]	@ (80024f8 <main+0x38c>)
 80021e0:	4ac6      	ldr	r2, [pc, #792]	@ (80024fc <main+0x390>)
 80021e2:	605a      	str	r2, [r3, #4]
  port_map[2] = Actuator_C_EN_GPIO_Port;
 80021e4:	4bc4      	ldr	r3, [pc, #784]	@ (80024f8 <main+0x38c>)
 80021e6:	4ac6      	ldr	r2, [pc, #792]	@ (8002500 <main+0x394>)
 80021e8:	609a      	str	r2, [r3, #8]

  // Initialize the PID constraints to defaults
  pid_constraints.Kp = 1;              // Proportional gain constant
 80021ea:	4bc6      	ldr	r3, [pc, #792]	@ (8002504 <main+0x398>)
 80021ec:	22fe      	movs	r2, #254	@ 0xfe
 80021ee:	0592      	lsls	r2, r2, #22
 80021f0:	601a      	str	r2, [r3, #0]
  pid_constraints.Ki = 0.1;            // Integral gain constant
 80021f2:	4bc4      	ldr	r3, [pc, #784]	@ (8002504 <main+0x398>)
 80021f4:	4ac4      	ldr	r2, [pc, #784]	@ (8002508 <main+0x39c>)
 80021f6:	605a      	str	r2, [r3, #4]
  pid_constraints.Kd = 5;              // Derivative gain constant
 80021f8:	4bc2      	ldr	r3, [pc, #776]	@ (8002504 <main+0x398>)
 80021fa:	4ac4      	ldr	r2, [pc, #784]	@ (800250c <main+0x3a0>)
 80021fc:	609a      	str	r2, [r3, #8]
  pid_constraints.Kaw = 0.1;           // Anti-windup gain constant
 80021fe:	4bc1      	ldr	r3, [pc, #772]	@ (8002504 <main+0x398>)
 8002200:	4ac1      	ldr	r2, [pc, #772]	@ (8002508 <main+0x39c>)
 8002202:	60da      	str	r2, [r3, #12]
  pid_constraints.T_C = 1;             // Time constant for derivative filtering
 8002204:	4bbf      	ldr	r3, [pc, #764]	@ (8002504 <main+0x398>)
 8002206:	22fe      	movs	r2, #254	@ 0xfe
 8002208:	0592      	lsls	r2, r2, #22
 800220a:	611a      	str	r2, [r3, #16]
  pid_constraints.T = 100;             // Time step
 800220c:	4bbd      	ldr	r3, [pc, #756]	@ (8002504 <main+0x398>)
 800220e:	4ac0      	ldr	r2, [pc, #768]	@ (8002510 <main+0x3a4>)
 8002210:	615a      	str	r2, [r3, #20]
  pid_constraints.max = 100;           // Max command
 8002212:	4bbc      	ldr	r3, [pc, #752]	@ (8002504 <main+0x398>)
 8002214:	4abe      	ldr	r2, [pc, #760]	@ (8002510 <main+0x3a4>)
 8002216:	619a      	str	r2, [r3, #24]
  pid_constraints.min = 0;             // Min command
 8002218:	4bba      	ldr	r3, [pc, #744]	@ (8002504 <main+0x398>)
 800221a:	2200      	movs	r2, #0
 800221c:	61da      	str	r2, [r3, #28]
  pid_constraints.max_rate = 40;       // Max rate of change of the command
 800221e:	4bb9      	ldr	r3, [pc, #740]	@ (8002504 <main+0x398>)
 8002220:	4abc      	ldr	r2, [pc, #752]	@ (8002514 <main+0x3a8>)
 8002222:	621a      	str	r2, [r3, #32]
  pid_constraints.integral = 0;        // Integral term
 8002224:	4bb7      	ldr	r3, [pc, #732]	@ (8002504 <main+0x398>)
 8002226:	2200      	movs	r2, #0
 8002228:	625a      	str	r2, [r3, #36]	@ 0x24
  pid_constraints.err_prev = 0;        // Previous error
 800222a:	4bb6      	ldr	r3, [pc, #728]	@ (8002504 <main+0x398>)
 800222c:	2200      	movs	r2, #0
 800222e:	629a      	str	r2, [r3, #40]	@ 0x28
  pid_constraints.deriv_prev = 0;      // Previous derivative
 8002230:	4bb4      	ldr	r3, [pc, #720]	@ (8002504 <main+0x398>)
 8002232:	2200      	movs	r2, #0
 8002234:	62da      	str	r2, [r3, #44]	@ 0x2c
  pid_constraints.command_sat_prev = 0;// Previous saturated command
 8002236:	4bb3      	ldr	r3, [pc, #716]	@ (8002504 <main+0x398>)
 8002238:	2200      	movs	r2, #0
 800223a:	631a      	str	r2, [r3, #48]	@ 0x30
  pid_constraints.command_prev = 0;    // Previous command
 800223c:	4bb1      	ldr	r3, [pc, #708]	@ (8002504 <main+0x398>)
 800223e:	2200      	movs	r2, #0
 8002240:	635a      	str	r2, [r3, #52]	@ 0x34

  if(modbus_set_rx() != HAL_OK)
 8002242:	f001 fc2f 	bl	8003aa4 <modbus_set_rx>
 8002246:	1e03      	subs	r3, r0, #0
 8002248:	d001      	beq.n	800224e <main+0xe2>
  {
	  Error_Handler();
 800224a:	f000 ffc3 	bl	80031d4 <Error_Handler>
  }

  /* Perform ADC activation procedure to make it ready to convert. */
  ADC_Activate();
 800224e:	f001 febf 	bl	8003fd0 <ADC_Activate>
  if ((LL_ADC_IsEnabled(ADC1) == 1)               &&
 8002252:	4bb1      	ldr	r3, [pc, #708]	@ (8002518 <main+0x3ac>)
 8002254:	0018      	movs	r0, r3
 8002256:	f7ff fc6f 	bl	8001b38 <LL_ADC_IsEnabled>
 800225a:	0003      	movs	r3, r0
 800225c:	2b01      	cmp	r3, #1
 800225e:	d10f      	bne.n	8002280 <main+0x114>
	  (LL_ADC_IsDisableOngoing(ADC1) == 0)        &&
 8002260:	4bad      	ldr	r3, [pc, #692]	@ (8002518 <main+0x3ac>)
 8002262:	0018      	movs	r0, r3
 8002264:	f7ff fc79 	bl	8001b5a <LL_ADC_IsDisableOngoing>
 8002268:	1e03      	subs	r3, r0, #0
  if ((LL_ADC_IsEnabled(ADC1) == 1)               &&
 800226a:	d109      	bne.n	8002280 <main+0x114>
	  (LL_ADC_REG_IsConversionOngoing(ADC1) == 0))
 800226c:	4baa      	ldr	r3, [pc, #680]	@ (8002518 <main+0x3ac>)
 800226e:	0018      	movs	r0, r3
 8002270:	f7ff fc96 	bl	8001ba0 <LL_ADC_REG_IsConversionOngoing>
 8002274:	1e03      	subs	r3, r0, #0
	  (LL_ADC_IsDisableOngoing(ADC1) == 0)        &&
 8002276:	d103      	bne.n	8002280 <main+0x114>
  {
	  LL_ADC_REG_StartConversion(ADC1);
 8002278:	4ba7      	ldr	r3, [pc, #668]	@ (8002518 <main+0x3ac>)
 800227a:	0018      	movs	r0, r3
 800227c:	f7ff fc7e 	bl	8001b7c <LL_ADC_REG_StartConversion>
  }

  bno055_init();
 8002280:	f7fe f914 	bl	80004ac <bno055_init>

  	if(DRV_Init(DRV8244P_Q1) != HAL_OK)
 8002284:	2046      	movs	r0, #70	@ 0x46
 8002286:	f7fe fef9 	bl	800107c <DRV_Init>
 800228a:	1e03      	subs	r3, r0, #0
 800228c:	d001      	beq.n	8002292 <main+0x126>
  	{
  		Error_Handler();
 800228e:	f000 ffa1 	bl	80031d4 <Error_Handler>
	* target_actuator
	* 0: Actuator A
	* 1: Actuator B
	* 2: Actuator C
	*/
  	uint8_t target_actuator = 0;
 8002292:	230f      	movs	r3, #15
 8002294:	18fb      	adds	r3, r7, r3
 8002296:	2200      	movs	r2, #0
 8002298:	701a      	strb	r2, [r3, #0]
  	actuate_complete[0] = 0;
 800229a:	2108      	movs	r1, #8
 800229c:	187b      	adds	r3, r7, r1
 800229e:	2200      	movs	r2, #0
 80022a0:	701a      	strb	r2, [r3, #0]
  	actuate_complete[1] = 0;
 80022a2:	187b      	adds	r3, r7, r1
 80022a4:	2200      	movs	r2, #0
 80022a6:	705a      	strb	r2, [r3, #1]
  	actuate_complete[2] = 0;
 80022a8:	187b      	adds	r3, r7, r1
 80022aa:	2200      	movs	r2, #0
 80022ac:	709a      	strb	r2, [r3, #2]
//  	actuate(target_actuator, holding_register_database[ADC_6 + target_actuator], holding_register_database[ACTUATOR_A_TARGET + target_actuator]);
//  	run_motor();

  	HAL_TIM_Base_Start_IT(&htim14);
 80022ae:	4b9b      	ldr	r3, [pc, #620]	@ (800251c <main+0x3b0>)
 80022b0:	0018      	movs	r0, r3
 80022b2:	f006 ffff 	bl	80092b4 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */


  while (1)
  {
	  if(modbus_rx())
 80022b6:	f001 f863 	bl	8003380 <modbus_rx>
 80022ba:	1e03      	subs	r3, r0, #0
 80022bc:	d100      	bne.n	80022c0 <main+0x154>
 80022be:	e09b      	b.n	80023f8 <main+0x28c>
	  {
		  if(get_rx_buffer(0) == holding_register_database[MODBUS_ID]) // Check Slave ID
 80022c0:	2000      	movs	r0, #0
 80022c2:	f001 fcfb 	bl	8003cbc <get_rx_buffer>
 80022c6:	0003      	movs	r3, r0
 80022c8:	001a      	movs	r2, r3
 80022ca:	4b95      	ldr	r3, [pc, #596]	@ (8002520 <main+0x3b4>)
 80022cc:	881b      	ldrh	r3, [r3, #0]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d139      	bne.n	8002346 <main+0x1da>
		  {
			  switch(get_rx_buffer(1))
 80022d2:	2001      	movs	r0, #1
 80022d4:	f001 fcf2 	bl	8003cbc <get_rx_buffer>
 80022d8:	0003      	movs	r3, r0
 80022da:	2b03      	cmp	r3, #3
 80022dc:	d002      	beq.n	80022e4 <main+0x178>
 80022de:	2b10      	cmp	r3, #16
 80022e0:	d00a      	beq.n	80022f8 <main+0x18c>
 80022e2:	e013      	b.n	800230c <main+0x1a0>
			  {
				  case 0x03:
				  {
					  // Return holding registers
					  modbus_status = return_holding_registers(&modbus_tx_len);
 80022e4:	2317      	movs	r3, #23
 80022e6:	18fc      	adds	r4, r7, r3
 80022e8:	230b      	movs	r3, #11
 80022ea:	18fb      	adds	r3, r7, r3
 80022ec:	0018      	movs	r0, r3
 80022ee:	f001 f859 	bl	80033a4 <return_holding_registers>
 80022f2:	0003      	movs	r3, r0
 80022f4:	7023      	strb	r3, [r4, #0]
					  break;
 80022f6:	e011      	b.n	800231c <main+0x1b0>
				  }
				  case 0x10:
				  {
					  // Write holding registers
					  modbus_status = edit_multiple_registers(&modbus_tx_len);
 80022f8:	2317      	movs	r3, #23
 80022fa:	18fc      	adds	r4, r7, r3
 80022fc:	230b      	movs	r3, #11
 80022fe:	18fb      	adds	r3, r7, r3
 8002300:	0018      	movs	r0, r3
 8002302:	f001 f8fb 	bl	80034fc <edit_multiple_registers>
 8002306:	0003      	movs	r3, r0
 8002308:	7023      	strb	r3, [r4, #0]
					  break;
 800230a:	e007      	b.n	800231c <main+0x1b0>
				  }
				  default:
				  {
					  modbus_status = modbus_exception(MB_ILLEGAL_FUNCTION);
 800230c:	2317      	movs	r3, #23
 800230e:	18fc      	adds	r4, r7, r3
 8002310:	2004      	movs	r0, #4
 8002312:	f001 f9f5 	bl	8003700 <modbus_exception>
 8002316:	0003      	movs	r3, r0
 8002318:	7023      	strb	r3, [r4, #0]
					  break;
 800231a:	46c0      	nop			@ (mov r8, r8)
				  }
			  }
			  if(modbus_status != 0)
 800231c:	2117      	movs	r1, #23
 800231e:	187b      	adds	r3, r7, r1
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	b25b      	sxtb	r3, r3
 8002324:	2b00      	cmp	r3, #0
 8002326:	d04d      	beq.n	80023c4 <main+0x258>
			  {
				  holding_register_database[MB_ERRORS] |= 1U << (modbus_status + (MB_FATAL_ERROR - 1));
 8002328:	4b7d      	ldr	r3, [pc, #500]	@ (8002520 <main+0x3b4>)
 800232a:	891a      	ldrh	r2, [r3, #8]
 800232c:	187b      	adds	r3, r7, r1
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	b25b      	sxtb	r3, r3
 8002332:	3314      	adds	r3, #20
 8002334:	2101      	movs	r1, #1
 8002336:	4099      	lsls	r1, r3
 8002338:	000b      	movs	r3, r1
 800233a:	b29b      	uxth	r3, r3
 800233c:	4313      	orrs	r3, r2
 800233e:	b29a      	uxth	r2, r3
 8002340:	4b77      	ldr	r3, [pc, #476]	@ (8002520 <main+0x3b4>)
 8002342:	811a      	strh	r2, [r3, #8]
 8002344:	e03e      	b.n	80023c4 <main+0x258>
			  }
		  }
		  // Special case where you retrieve the modbus ID
		  else if((get_rx_buffer(0) == 0xFF) && // modbus_id = 0xFF = 255
 8002346:	2000      	movs	r0, #0
 8002348:	f001 fcb8 	bl	8003cbc <get_rx_buffer>
 800234c:	0003      	movs	r3, r0
 800234e:	2bff      	cmp	r3, #255	@ 0xff
 8002350:	d138      	bne.n	80023c4 <main+0x258>
			(get_rx_buffer(1) == 0x03) && // Function code = read_holding_registers
 8002352:	2001      	movs	r0, #1
 8002354:	f001 fcb2 	bl	8003cbc <get_rx_buffer>
 8002358:	0003      	movs	r3, r0
		  else if((get_rx_buffer(0) == 0xFF) && // modbus_id = 0xFF = 255
 800235a:	2b03      	cmp	r3, #3
 800235c:	d132      	bne.n	80023c4 <main+0x258>
			(((get_rx_buffer(2) << 8) | get_rx_buffer(3)) == 0x00) && // Address to read = 0
 800235e:	2002      	movs	r0, #2
 8002360:	f001 fcac 	bl	8003cbc <get_rx_buffer>
 8002364:	0003      	movs	r3, r0
 8002366:	021c      	lsls	r4, r3, #8
 8002368:	2003      	movs	r0, #3
 800236a:	f001 fca7 	bl	8003cbc <get_rx_buffer>
 800236e:	0003      	movs	r3, r0
 8002370:	4323      	orrs	r3, r4
			(get_rx_buffer(1) == 0x03) && // Function code = read_holding_registers
 8002372:	d127      	bne.n	80023c4 <main+0x258>
			(((get_rx_buffer(4) << 8) | get_rx_buffer(5)) == 1)) // # of registers to read = 1
 8002374:	2004      	movs	r0, #4
 8002376:	f001 fca1 	bl	8003cbc <get_rx_buffer>
 800237a:	0003      	movs	r3, r0
 800237c:	021c      	lsls	r4, r3, #8
 800237e:	2005      	movs	r0, #5
 8002380:	f001 fc9c 	bl	8003cbc <get_rx_buffer>
 8002384:	0003      	movs	r3, r0
 8002386:	4323      	orrs	r3, r4
			(((get_rx_buffer(2) << 8) | get_rx_buffer(3)) == 0x00) && // Address to read = 0
 8002388:	2b01      	cmp	r3, #1
 800238a:	d11b      	bne.n	80023c4 <main+0x258>
		  {

			  modbus_status = return_holding_registers(&modbus_tx_len);
 800238c:	2517      	movs	r5, #23
 800238e:	197c      	adds	r4, r7, r5
 8002390:	230b      	movs	r3, #11
 8002392:	18fb      	adds	r3, r7, r3
 8002394:	0018      	movs	r0, r3
 8002396:	f001 f805 	bl	80033a4 <return_holding_registers>
 800239a:	0003      	movs	r3, r0
 800239c:	7023      	strb	r3, [r4, #0]
			  if(modbus_status != 0)
 800239e:	197b      	adds	r3, r7, r5
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	b25b      	sxtb	r3, r3
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d00d      	beq.n	80023c4 <main+0x258>
			  {
				  holding_register_database[MB_ERRORS] |= 1U << ((modbus_status - 1) + MB_FATAL_ERROR);
 80023a8:	4b5d      	ldr	r3, [pc, #372]	@ (8002520 <main+0x3b4>)
 80023aa:	891a      	ldrh	r2, [r3, #8]
 80023ac:	197b      	adds	r3, r7, r5
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	b25b      	sxtb	r3, r3
 80023b2:	3314      	adds	r3, #20
 80023b4:	2101      	movs	r1, #1
 80023b6:	4099      	lsls	r1, r3
 80023b8:	000b      	movs	r3, r1
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	4313      	orrs	r3, r2
 80023be:	b29a      	uxth	r2, r3
 80023c0:	4b57      	ldr	r3, [pc, #348]	@ (8002520 <main+0x3b4>)
 80023c2:	811a      	strh	r2, [r3, #8]
			  }
		  }
		  modbus_status = modbus_set_rx();
 80023c4:	2517      	movs	r5, #23
 80023c6:	197c      	adds	r4, r7, r5
 80023c8:	f001 fb6c 	bl	8003aa4 <modbus_set_rx>
 80023cc:	0003      	movs	r3, r0
 80023ce:	7023      	strb	r3, [r4, #0]
		  if(modbus_status != 0)
 80023d0:	0029      	movs	r1, r5
 80023d2:	187b      	adds	r3, r7, r1
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	b25b      	sxtb	r3, r3
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d00d      	beq.n	80023f8 <main+0x28c>
		  {
			  holding_register_database[MB_ERRORS] |= 1U << ((modbus_status - 1) + MB_FATAL_ERROR);
 80023dc:	4b50      	ldr	r3, [pc, #320]	@ (8002520 <main+0x3b4>)
 80023de:	891a      	ldrh	r2, [r3, #8]
 80023e0:	187b      	adds	r3, r7, r1
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	b25b      	sxtb	r3, r3
 80023e6:	3314      	adds	r3, #20
 80023e8:	2101      	movs	r1, #1
 80023ea:	4099      	lsls	r1, r3
 80023ec:	000b      	movs	r3, r1
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	4313      	orrs	r3, r2
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	4b4a      	ldr	r3, [pc, #296]	@ (8002520 <main+0x3b4>)
 80023f6:	811a      	strh	r2, [r3, #8]
		  }
	  }
	  modbus_status = monitor_modbus();
 80023f8:	2517      	movs	r5, #23
 80023fa:	197c      	adds	r4, r7, r5
 80023fc:	f001 fb74 	bl	8003ae8 <monitor_modbus>
 8002400:	0003      	movs	r3, r0
 8002402:	7023      	strb	r3, [r4, #0]
	  if(modbus_status != HAL_OK && modbus_status != HAL_BUSY)
 8002404:	197b      	adds	r3, r7, r5
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	b25b      	sxtb	r3, r3
 800240a:	2b00      	cmp	r3, #0
 800240c:	d100      	bne.n	8002410 <main+0x2a4>
 800240e:	e06b      	b.n	80024e8 <main+0x37c>
 8002410:	197b      	adds	r3, r7, r5
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	b25b      	sxtb	r3, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d066      	beq.n	80024e8 <main+0x37c>
	  {
		  switch(modbus_status)
 800241a:	197b      	adds	r3, r7, r5
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	b25b      	sxtb	r3, r3
 8002420:	2b15      	cmp	r3, #21
 8002422:	d05a      	beq.n	80024da <main+0x36e>
 8002424:	dd00      	ble.n	8002428 <main+0x2bc>
 8002426:	e07e      	b.n	8002526 <main+0x3ba>
 8002428:	2b14      	cmp	r3, #20
 800242a:	d035      	beq.n	8002498 <main+0x32c>
 800242c:	dd00      	ble.n	8002430 <main+0x2c4>
 800242e:	e07a      	b.n	8002526 <main+0x3ba>
 8002430:	2b12      	cmp	r3, #18
 8002432:	d15b      	bne.n	80024ec <main+0x380>
		  {
			  case MB_TX_TIMEOUT:
			  {
				  for(uint8_t i = 0; i < holding_register_database[MB_TRANSMIT_RETRIES]; i++)
 8002434:	230e      	movs	r3, #14
 8002436:	18fb      	adds	r3, r7, r3
 8002438:	2200      	movs	r2, #0
 800243a:	701a      	strb	r2, [r3, #0]
 800243c:	e023      	b.n	8002486 <main+0x31a>
				  {
					  modbus_status = modbus_send(modbus_tx_len);
 800243e:	230b      	movs	r3, #11
 8002440:	18fb      	adds	r3, r7, r3
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	2517      	movs	r5, #23
 8002446:	197c      	adds	r4, r7, r5
 8002448:	0018      	movs	r0, r3
 800244a:	f001 fa67 	bl	800391c <modbus_send>
 800244e:	0003      	movs	r3, r0
 8002450:	7023      	strb	r3, [r4, #0]
					  if(modbus_status != HAL_OK)
 8002452:	0029      	movs	r1, r5
 8002454:	187b      	adds	r3, r7, r1
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	b25b      	sxtb	r3, r3
 800245a:	2b00      	cmp	r3, #0
 800245c:	d00d      	beq.n	800247a <main+0x30e>
					  {
						  holding_register_database[MB_ERRORS] |= 1U << ((modbus_status - 1) + MB_FATAL_ERROR);
 800245e:	4b30      	ldr	r3, [pc, #192]	@ (8002520 <main+0x3b4>)
 8002460:	891a      	ldrh	r2, [r3, #8]
 8002462:	187b      	adds	r3, r7, r1
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	b25b      	sxtb	r3, r3
 8002468:	3314      	adds	r3, #20
 800246a:	2101      	movs	r1, #1
 800246c:	4099      	lsls	r1, r3
 800246e:	000b      	movs	r3, r1
 8002470:	b29b      	uxth	r3, r3
 8002472:	4313      	orrs	r3, r2
 8002474:	b29a      	uxth	r2, r3
 8002476:	4b2a      	ldr	r3, [pc, #168]	@ (8002520 <main+0x3b4>)
 8002478:	811a      	strh	r2, [r3, #8]
				  for(uint8_t i = 0; i < holding_register_database[MB_TRANSMIT_RETRIES]; i++)
 800247a:	210e      	movs	r1, #14
 800247c:	187b      	adds	r3, r7, r1
 800247e:	781a      	ldrb	r2, [r3, #0]
 8002480:	187b      	adds	r3, r7, r1
 8002482:	3201      	adds	r2, #1
 8002484:	701a      	strb	r2, [r3, #0]
 8002486:	230e      	movs	r3, #14
 8002488:	18fb      	adds	r3, r7, r3
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	b29a      	uxth	r2, r3
 800248e:	4b24      	ldr	r3, [pc, #144]	@ (8002520 <main+0x3b4>)
 8002490:	88db      	ldrh	r3, [r3, #6]
 8002492:	429a      	cmp	r2, r3
 8002494:	d3d3      	bcc.n	800243e <main+0x2d2>
					  }
				  }
				  break;
 8002496:	e046      	b.n	8002526 <main+0x3ba>
				  // Error only relates to Modbus Master Nodes
				  break;
			  }
			  case MB_UART_ERROR:
			  {
				  modbus_status = modbus_set_rx();
 8002498:	2517      	movs	r5, #23
 800249a:	197c      	adds	r4, r7, r5
 800249c:	f001 fb02 	bl	8003aa4 <modbus_set_rx>
 80024a0:	0003      	movs	r3, r0
 80024a2:	7023      	strb	r3, [r4, #0]
				  if(modbus_status != 0)
 80024a4:	0029      	movs	r1, r5
 80024a6:	187b      	adds	r3, r7, r1
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	b25b      	sxtb	r3, r3
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d039      	beq.n	8002524 <main+0x3b8>
				  {
					  holding_register_database[MB_ERRORS] |= 1U << ((modbus_status - 1) + MB_FATAL_ERROR);
 80024b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002520 <main+0x3b4>)
 80024b2:	891a      	ldrh	r2, [r3, #8]
 80024b4:	187b      	adds	r3, r7, r1
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	b25b      	sxtb	r3, r3
 80024ba:	3314      	adds	r3, #20
 80024bc:	2101      	movs	r1, #1
 80024be:	4099      	lsls	r1, r3
 80024c0:	000b      	movs	r3, r1
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	4313      	orrs	r3, r2
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	4b15      	ldr	r3, [pc, #84]	@ (8002520 <main+0x3b4>)
 80024ca:	811a      	strh	r2, [r3, #8]
				  }
				  break;
 80024cc:	e02a      	b.n	8002524 <main+0x3b8>
			  }
			  case MB_FATAL_ERROR:
			  {
				  while(modbus_status != HAL_OK)
				  {
					  modbus_status = modbus_reset();
 80024ce:	2317      	movs	r3, #23
 80024d0:	18fc      	adds	r4, r7, r3
 80024d2:	f001 fa79 	bl	80039c8 <modbus_reset>
 80024d6:	0003      	movs	r3, r0
 80024d8:	7023      	strb	r3, [r4, #0]
				  while(modbus_status != HAL_OK)
 80024da:	2317      	movs	r3, #23
 80024dc:	18fb      	adds	r3, r7, r3
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	b25b      	sxtb	r3, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1f3      	bne.n	80024ce <main+0x362>
				  }
				  break;
 80024e6:	e01e      	b.n	8002526 <main+0x3ba>
			  }
			  default:
 80024e8:	46c0      	nop			@ (mov r8, r8)
 80024ea:	e01c      	b.n	8002526 <main+0x3ba>
				  break;
 80024ec:	46c0      	nop			@ (mov r8, r8)
 80024ee:	e01a      	b.n	8002526 <main+0x3ba>
 80024f0:	00002710 	.word	0x00002710
 80024f4:	20000690 	.word	0x20000690
 80024f8:	20000698 	.word	0x20000698
 80024fc:	50000800 	.word	0x50000800
 8002500:	50000400 	.word	0x50000400
 8002504:	20000658 	.word	0x20000658
 8002508:	3dcccccd 	.word	0x3dcccccd
 800250c:	40a00000 	.word	0x40a00000
 8002510:	42c80000 	.word	0x42c80000
 8002514:	42200000 	.word	0x42200000
 8002518:	40012400 	.word	0x40012400
 800251c:	200004c0 	.word	0x200004c0
 8002520:	20000014 	.word	0x20000014
				  break;
 8002524:	46c0      	nop			@ (mov r8, r8)
				  // Unknown error
			  }
		  }
	  }

	  if(!holding_register_database[I2C_SHUTDOWN])
 8002526:	4bcf      	ldr	r3, [pc, #828]	@ (8002864 <main+0x6f8>)
 8002528:	899b      	ldrh	r3, [r3, #12]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d136      	bne.n	800259c <main+0x430>
	  {
		  if(bno055_rx())
 800252e:	f7fe f9cf 	bl	80008d0 <bno055_rx>
 8002532:	1e03      	subs	r3, r0, #0
 8002534:	d019      	beq.n	800256a <main+0x3fe>
		  {
			  i2c_status = bno055_queue_transaction();
 8002536:	250d      	movs	r5, #13
 8002538:	197c      	adds	r4, r7, r5
 800253a:	f7fe f9dd 	bl	80008f8 <bno055_queue_transaction>
 800253e:	0003      	movs	r3, r0
 8002540:	7023      	strb	r3, [r4, #0]
			  if(i2c_status != 0)
 8002542:	0029      	movs	r1, r5
 8002544:	187b      	adds	r3, r7, r1
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	b25b      	sxtb	r3, r3
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00d      	beq.n	800256a <main+0x3fe>
			  {
				  holding_register_database[I2C_ERRORS] |= 1U << ((i2c_status - 1) + I2C_FATAL_ERROR);
 800254e:	4bc5      	ldr	r3, [pc, #788]	@ (8002864 <main+0x6f8>)
 8002550:	895a      	ldrh	r2, [r3, #10]
 8002552:	187b      	adds	r3, r7, r1
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	b25b      	sxtb	r3, r3
 8002558:	3318      	adds	r3, #24
 800255a:	2101      	movs	r1, #1
 800255c:	4099      	lsls	r1, r3
 800255e:	000b      	movs	r3, r1
 8002560:	b29b      	uxth	r3, r3
 8002562:	4313      	orrs	r3, r2
 8002564:	b29a      	uxth	r2, r3
 8002566:	4bbf      	ldr	r3, [pc, #764]	@ (8002864 <main+0x6f8>)
 8002568:	815a      	strh	r2, [r3, #10]
			  }
		  }

		  i2c_status = monitor_i2c();
 800256a:	250d      	movs	r5, #13
 800256c:	197c      	adds	r4, r7, r5
 800256e:	f7fe fa43 	bl	80009f8 <monitor_i2c>
 8002572:	0003      	movs	r3, r0
 8002574:	7023      	strb	r3, [r4, #0]
		  if(i2c_status != HAL_OK && i2c_status != HAL_BUSY)
 8002576:	197b      	adds	r3, r7, r5
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	b25b      	sxtb	r3, r3
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00d      	beq.n	800259c <main+0x430>
 8002580:	197b      	adds	r3, r7, r5
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	b25b      	sxtb	r3, r3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d008      	beq.n	800259c <main+0x430>
		  {
			  switch(i2c_status)
 800258a:	197b      	adds	r3, r7, r5
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	b25b      	sxtb	r3, r3
 8002590:	2b19      	cmp	r3, #25
 8002592:	d104      	bne.n	800259e <main+0x432>
					  break;
				  }
				  case I2C_FATAL_ERROR:
				  {
					  // Disable the I2C peripheral
					  holding_register_database[I2C_SHUTDOWN] = 1;
 8002594:	4bb3      	ldr	r3, [pc, #716]	@ (8002864 <main+0x6f8>)
 8002596:	2201      	movs	r2, #1
 8002598:	819a      	strh	r2, [r3, #12]
					  break;
 800259a:	e000      	b.n	800259e <main+0x432>
				  }
				  default:
 800259c:	46c0      	nop			@ (mov r8, r8)
			  }
		  }
	  }

	  // If the actuator is in the Micro range
	  if(((holding_register_database[ADC_6 + target_actuator]) >= (holding_register_database[ACTUATOR_A_TARGET + target_actuator] - ACTUATOR_TOLERANCE)) &&
 800259e:	200f      	movs	r0, #15
 80025a0:	183b      	adds	r3, r7, r0
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	330f      	adds	r3, #15
 80025a6:	001a      	movs	r2, r3
 80025a8:	4bae      	ldr	r3, [pc, #696]	@ (8002864 <main+0x6f8>)
 80025aa:	0052      	lsls	r2, r2, #1
 80025ac:	5ad3      	ldrh	r3, [r2, r3]
 80025ae:	0019      	movs	r1, r3
 80025b0:	183b      	adds	r3, r7, r0
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	3340      	adds	r3, #64	@ 0x40
 80025b6:	001a      	movs	r2, r3
 80025b8:	4baa      	ldr	r3, [pc, #680]	@ (8002864 <main+0x6f8>)
 80025ba:	0052      	lsls	r2, r2, #1
 80025bc:	5ad3      	ldrh	r3, [r2, r3]
 80025be:	3b05      	subs	r3, #5
 80025c0:	4299      	cmp	r1, r3
 80025c2:	db5b      	blt.n	800267c <main+0x510>
		 ((holding_register_database[ADC_6 + target_actuator]) <= (holding_register_database[ACTUATOR_A_TARGET + target_actuator] + ACTUATOR_TOLERANCE)))
 80025c4:	183b      	adds	r3, r7, r0
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	330f      	adds	r3, #15
 80025ca:	001a      	movs	r2, r3
 80025cc:	4ba5      	ldr	r3, [pc, #660]	@ (8002864 <main+0x6f8>)
 80025ce:	0052      	lsls	r2, r2, #1
 80025d0:	5ad3      	ldrh	r3, [r2, r3]
 80025d2:	0019      	movs	r1, r3
 80025d4:	183b      	adds	r3, r7, r0
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	3340      	adds	r3, #64	@ 0x40
 80025da:	001a      	movs	r2, r3
 80025dc:	4ba1      	ldr	r3, [pc, #644]	@ (8002864 <main+0x6f8>)
 80025de:	0052      	lsls	r2, r2, #1
 80025e0:	5ad3      	ldrh	r3, [r2, r3]
 80025e2:	3305      	adds	r3, #5
	  if(((holding_register_database[ADC_6 + target_actuator]) >= (holding_register_database[ACTUATOR_A_TARGET + target_actuator] - ACTUATOR_TOLERANCE)) &&
 80025e4:	4299      	cmp	r1, r3
 80025e6:	dc49      	bgt.n	800267c <main+0x510>
	  {
		  micro_consistency_count[target_actuator]++;
 80025e8:	183b      	adds	r3, r7, r0
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	003a      	movs	r2, r7
 80025ee:	5cd2      	ldrb	r2, [r2, r3]
 80025f0:	3201      	adds	r2, #1
 80025f2:	b2d1      	uxtb	r1, r2
 80025f4:	003a      	movs	r2, r7
 80025f6:	54d1      	strb	r1, [r2, r3]
		  if(micro_consistency_count[target_actuator] >= 5)
 80025f8:	183b      	adds	r3, r7, r0
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	003a      	movs	r2, r7
 80025fe:	5cd3      	ldrb	r3, [r2, r3]
 8002600:	2b04      	cmp	r3, #4
 8002602:	d800      	bhi.n	8002606 <main+0x49a>
 8002604:	e0d2      	b.n	80027ac <main+0x640>
		  {
			  micro_consistency_count[target_actuator] = 5;
 8002606:	183b      	adds	r3, r7, r0
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	003a      	movs	r2, r7
 800260c:	2105      	movs	r1, #5
 800260e:	54d1      	strb	r1, [r2, r3]
			  actuate_complete[target_actuator] = 1;
 8002610:	183b      	adds	r3, r7, r0
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	2008      	movs	r0, #8
 8002616:	183a      	adds	r2, r7, r0
 8002618:	2101      	movs	r1, #1
 800261a:	54d1      	strb	r1, [r2, r3]
			  if(actuate_complete[0] == 1 &&
 800261c:	0002      	movs	r2, r0
 800261e:	18bb      	adds	r3, r7, r2
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d10e      	bne.n	8002644 <main+0x4d8>
				 actuate_complete[1] == 1 &&
 8002626:	18bb      	adds	r3, r7, r2
 8002628:	785b      	ldrb	r3, [r3, #1]
			  if(actuate_complete[0] == 1 &&
 800262a:	2b01      	cmp	r3, #1
 800262c:	d10a      	bne.n	8002644 <main+0x4d8>
				 actuate_complete[2] == 1 &&
 800262e:	18bb      	adds	r3, r7, r2
 8002630:	789b      	ldrb	r3, [r3, #2]
				 actuate_complete[1] == 1 &&
 8002632:	2b01      	cmp	r3, #1
 8002634:	d106      	bne.n	8002644 <main+0x4d8>
				 !DRV_GetShutoff())
 8002636:	f7fe fc61 	bl	8000efc <DRV_GetShutoff>
 800263a:	1e03      	subs	r3, r0, #0
				 actuate_complete[2] == 1 &&
 800263c:	d102      	bne.n	8002644 <main+0x4d8>
			  {
				  DRV_Shutoff();
 800263e:	f7fe fc53 	bl	8000ee8 <DRV_Shutoff>
		  if(micro_consistency_count[target_actuator] >= 5)
 8002642:	e0b3      	b.n	80027ac <main+0x640>
			  }
			  else if(!DRV_GetShutoff())
 8002644:	f7fe fc5a 	bl	8000efc <DRV_GetShutoff>
 8002648:	1e03      	subs	r3, r0, #0
 800264a:	d000      	beq.n	800264e <main+0x4e2>
 800264c:	e0ae      	b.n	80027ac <main+0x640>
			  {
				  // Move to the next actuator and force it to run if it isn't in the requested range
				  actuator_time = HAL_GetTick() - ((uint32_t)holding_register_database[ACTUATOR_TIME]);
 800264e:	f002 fac7 	bl	8004be0 <HAL_GetTick>
 8002652:	0002      	movs	r2, r0
 8002654:	4b83      	ldr	r3, [pc, #524]	@ (8002864 <main+0x6f8>)
 8002656:	2186      	movs	r1, #134	@ 0x86
 8002658:	5a5b      	ldrh	r3, [r3, r1]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	613b      	str	r3, [r7, #16]
				  target_actuator = ((target_actuator + 1) == NUM_ACTUATORS)? 0: target_actuator + 1;
 800265e:	220f      	movs	r2, #15
 8002660:	18bb      	adds	r3, r7, r2
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	2b02      	cmp	r3, #2
 8002666:	d004      	beq.n	8002672 <main+0x506>
 8002668:	18bb      	adds	r3, r7, r2
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	3301      	adds	r3, #1
 800266e:	b2da      	uxtb	r2, r3
 8002670:	e000      	b.n	8002674 <main+0x508>
 8002672:	2200      	movs	r2, #0
 8002674:	230f      	movs	r3, #15
 8002676:	18fb      	adds	r3, r7, r3
 8002678:	701a      	strb	r2, [r3, #0]
		  if(micro_consistency_count[target_actuator] >= 5)
 800267a:	e097      	b.n	80027ac <main+0x640>
			  }
		  }
	  }
	  else
	  {
		  micro_consistency_count[target_actuator] = 0;
 800267c:	240f      	movs	r4, #15
 800267e:	193b      	adds	r3, r7, r4
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	003a      	movs	r2, r7
 8002684:	2100      	movs	r1, #0
 8002686:	54d1      	strb	r1, [r2, r3]
		  // if the DRV is shutoff
		  if(DRV_GetShutoff())
 8002688:	f7fe fc38 	bl	8000efc <DRV_GetShutoff>
 800268c:	1e03      	subs	r3, r0, #0
 800268e:	d100      	bne.n	8002692 <main+0x526>
 8002690:	e06f      	b.n	8002772 <main+0x606>
		  {
			  // If the ADC is outside of the Macro range
			  if(((holding_register_database[ADC_6 + target_actuator]) <= (holding_register_database[ACTUATOR_A_TARGET + target_actuator] - ACTUATOR_TOLERANCE_MACRO)) ||
 8002692:	0021      	movs	r1, r4
 8002694:	187b      	adds	r3, r7, r1
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	3340      	adds	r3, #64	@ 0x40
 800269a:	001a      	movs	r2, r3
 800269c:	4b71      	ldr	r3, [pc, #452]	@ (8002864 <main+0x6f8>)
 800269e:	0052      	lsls	r2, r2, #1
 80026a0:	5ad3      	ldrh	r3, [r2, r3]
 80026a2:	3b18      	subs	r3, #24
 80026a4:	0008      	movs	r0, r1
 80026a6:	187a      	adds	r2, r7, r1
 80026a8:	7812      	ldrb	r2, [r2, #0]
 80026aa:	320f      	adds	r2, #15
 80026ac:	0011      	movs	r1, r2
 80026ae:	4a6d      	ldr	r2, [pc, #436]	@ (8002864 <main+0x6f8>)
 80026b0:	0049      	lsls	r1, r1, #1
 80026b2:	5a8a      	ldrh	r2, [r1, r2]
 80026b4:	4293      	cmp	r3, r2
 80026b6:	dc11      	bgt.n	80026dc <main+0x570>
				 ((holding_register_database[ADC_6 + target_actuator]) >= (holding_register_database[ACTUATOR_A_TARGET + target_actuator] + ACTUATOR_TOLERANCE_MACRO)))
 80026b8:	0001      	movs	r1, r0
 80026ba:	187b      	adds	r3, r7, r1
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	3340      	adds	r3, #64	@ 0x40
 80026c0:	001a      	movs	r2, r3
 80026c2:	4b68      	ldr	r3, [pc, #416]	@ (8002864 <main+0x6f8>)
 80026c4:	0052      	lsls	r2, r2, #1
 80026c6:	5ad3      	ldrh	r3, [r2, r3]
 80026c8:	3318      	adds	r3, #24
 80026ca:	187a      	adds	r2, r7, r1
 80026cc:	7812      	ldrb	r2, [r2, #0]
 80026ce:	320f      	adds	r2, #15
 80026d0:	0011      	movs	r1, r2
 80026d2:	4a64      	ldr	r2, [pc, #400]	@ (8002864 <main+0x6f8>)
 80026d4:	0049      	lsls	r1, r1, #1
 80026d6:	5a8a      	ldrh	r2, [r1, r2]
			  if(((holding_register_database[ADC_6 + target_actuator]) <= (holding_register_database[ACTUATOR_A_TARGET + target_actuator] - ACTUATOR_TOLERANCE_MACRO)) ||
 80026d8:	4293      	cmp	r3, r2
 80026da:	da35      	bge.n	8002748 <main+0x5dc>
			  {
				  macro_consistency_count[target_actuator]++;
 80026dc:	200f      	movs	r0, #15
 80026de:	183b      	adds	r3, r7, r0
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	1d3a      	adds	r2, r7, #4
 80026e4:	5cd2      	ldrb	r2, [r2, r3]
 80026e6:	3201      	adds	r2, #1
 80026e8:	b2d1      	uxtb	r1, r2
 80026ea:	1d3a      	adds	r2, r7, #4
 80026ec:	54d1      	strb	r1, [r2, r3]
				  if(macro_consistency_count[target_actuator] >= 10)
 80026ee:	183b      	adds	r3, r7, r0
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	1d3a      	adds	r2, r7, #4
 80026f4:	5cd3      	ldrb	r3, [r2, r3]
 80026f6:	2b09      	cmp	r3, #9
 80026f8:	d959      	bls.n	80027ae <main+0x642>
				  {
					  macro_consistency_count[target_actuator] = 10;
 80026fa:	183b      	adds	r3, r7, r0
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	1d3a      	adds	r2, r7, #4
 8002700:	210a      	movs	r1, #10
 8002702:	54d1      	strb	r1, [r2, r3]
					  DRV_Activate(target_actuator, holding_register_database[ADC_6 + target_actuator], holding_register_database[ACTUATOR_A_TARGET + target_actuator]);
 8002704:	183b      	adds	r3, r7, r0
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	330f      	adds	r3, #15
 800270a:	001a      	movs	r2, r3
 800270c:	4b55      	ldr	r3, [pc, #340]	@ (8002864 <main+0x6f8>)
 800270e:	0052      	lsls	r2, r2, #1
 8002710:	5ad1      	ldrh	r1, [r2, r3]
 8002712:	183b      	adds	r3, r7, r0
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	3340      	adds	r3, #64	@ 0x40
 8002718:	001a      	movs	r2, r3
 800271a:	4b52      	ldr	r3, [pc, #328]	@ (8002864 <main+0x6f8>)
 800271c:	0052      	lsls	r2, r2, #1
 800271e:	5ad2      	ldrh	r2, [r2, r3]
 8002720:	183b      	adds	r3, r7, r0
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	0018      	movs	r0, r3
 8002726:	f7fe fbf3 	bl	8000f10 <DRV_Activate>
					  actuator_time = HAL_GetTick();
 800272a:	f002 fa59 	bl	8004be0 <HAL_GetTick>
 800272e:	0003      	movs	r3, r0
 8002730:	613b      	str	r3, [r7, #16]
					  actuate_complete[0] = 0;
 8002732:	2108      	movs	r1, #8
 8002734:	187b      	adds	r3, r7, r1
 8002736:	2200      	movs	r2, #0
 8002738:	701a      	strb	r2, [r3, #0]
					  actuate_complete[1] = 0;
 800273a:	187b      	adds	r3, r7, r1
 800273c:	2200      	movs	r2, #0
 800273e:	705a      	strb	r2, [r3, #1]
					  actuate_complete[2] = 0;
 8002740:	187b      	adds	r3, r7, r1
 8002742:	2200      	movs	r2, #0
 8002744:	709a      	strb	r2, [r3, #2]
				  if(macro_consistency_count[target_actuator] >= 10)
 8002746:	e032      	b.n	80027ae <main+0x642>
				  }
			  }
			  else
			  {
				 // Check a different actuator
				  macro_consistency_count[target_actuator] = 0;
 8002748:	200f      	movs	r0, #15
 800274a:	183b      	adds	r3, r7, r0
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	1d3a      	adds	r2, r7, #4
 8002750:	2100      	movs	r1, #0
 8002752:	54d1      	strb	r1, [r2, r3]
				  target_actuator = ((target_actuator + 1) == NUM_ACTUATORS)? 0: target_actuator + 1;
 8002754:	0002      	movs	r2, r0
 8002756:	18bb      	adds	r3, r7, r2
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	2b02      	cmp	r3, #2
 800275c:	d004      	beq.n	8002768 <main+0x5fc>
 800275e:	18bb      	adds	r3, r7, r2
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	3301      	adds	r3, #1
 8002764:	b2da      	uxtb	r2, r3
 8002766:	e000      	b.n	800276a <main+0x5fe>
 8002768:	2200      	movs	r2, #0
 800276a:	230f      	movs	r3, #15
 800276c:	18fb      	adds	r3, r7, r3
 800276e:	701a      	strb	r2, [r3, #0]
 8002770:	e01d      	b.n	80027ae <main+0x642>
			  }
		  }
		  else
		  {
			  // If the actuator has been running for a given amount of time
			  if((HAL_GetTick() - actuator_time) >= ((uint32_t)holding_register_database[ACTUATOR_TIME]))
 8002772:	f002 fa35 	bl	8004be0 <HAL_GetTick>
 8002776:	0002      	movs	r2, r0
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	4a39      	ldr	r2, [pc, #228]	@ (8002864 <main+0x6f8>)
 800277e:	2186      	movs	r1, #134	@ 0x86
 8002780:	5a52      	ldrh	r2, [r2, r1]
 8002782:	4293      	cmp	r3, r2
 8002784:	d313      	bcc.n	80027ae <main+0x642>
			  {
				  actuator_time = HAL_GetTick();
 8002786:	f002 fa2b 	bl	8004be0 <HAL_GetTick>
 800278a:	0003      	movs	r3, r0
 800278c:	613b      	str	r3, [r7, #16]
				  target_actuator = ((target_actuator + 1) == NUM_ACTUATORS)? 0: target_actuator + 1;
 800278e:	220f      	movs	r2, #15
 8002790:	18bb      	adds	r3, r7, r2
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	2b02      	cmp	r3, #2
 8002796:	d004      	beq.n	80027a2 <main+0x636>
 8002798:	18bb      	adds	r3, r7, r2
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	3301      	adds	r3, #1
 800279e:	b2da      	uxtb	r2, r3
 80027a0:	e000      	b.n	80027a4 <main+0x638>
 80027a2:	2200      	movs	r2, #0
 80027a4:	230f      	movs	r3, #15
 80027a6:	18fb      	adds	r3, r7, r3
 80027a8:	701a      	strb	r2, [r3, #0]
 80027aa:	e000      	b.n	80027ae <main+0x642>
		  if(micro_consistency_count[target_actuator] >= 5)
 80027ac:	46c0      	nop			@ (mov r8, r8)
			  }
		  }
	  }
	  actuate(target_actuator, holding_register_database[ADC_6 + target_actuator], holding_register_database[ACTUATOR_A_TARGET + target_actuator]);
 80027ae:	200f      	movs	r0, #15
 80027b0:	183b      	adds	r3, r7, r0
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	330f      	adds	r3, #15
 80027b6:	001a      	movs	r2, r3
 80027b8:	4b2a      	ldr	r3, [pc, #168]	@ (8002864 <main+0x6f8>)
 80027ba:	0052      	lsls	r2, r2, #1
 80027bc:	5ad1      	ldrh	r1, [r2, r3]
 80027be:	183b      	adds	r3, r7, r0
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	3340      	adds	r3, #64	@ 0x40
 80027c4:	001a      	movs	r2, r3
 80027c6:	4b27      	ldr	r3, [pc, #156]	@ (8002864 <main+0x6f8>)
 80027c8:	0052      	lsls	r2, r2, #1
 80027ca:	5ad2      	ldrh	r2, [r2, r3]
 80027cc:	183b      	adds	r3, r7, r0
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	0018      	movs	r0, r3
 80027d2:	f7fe faa3 	bl	8000d1c <actuate>
//	  {
//		  target_actuator = ((target_actuator + 1) == NUM_ACTUATORS)? 0: target_actuator + 1;
//	  }

	  // Monitor any ADC Errors
	  adc_status = monitor_adc();
 80027d6:	250c      	movs	r5, #12
 80027d8:	197c      	adds	r4, r7, r5
 80027da:	f001 fc83 	bl	80040e4 <monitor_adc>
 80027de:	0003      	movs	r3, r0
 80027e0:	7023      	strb	r3, [r4, #0]
	  if(adc_status != HAL_OK)
 80027e2:	197b      	adds	r3, r7, r5
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	b25b      	sxtb	r3, r3
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d002      	beq.n	80027f2 <main+0x686>
	  {
		  // An Overrun has occurred as shown in ADC1_IRQHandler in stm32c0xx_it.c. Log the error
		  holding_register_database[ADC_ERRORS] = 1;
 80027ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002864 <main+0x6f8>)
 80027ee:	2201      	movs	r2, #1
 80027f0:	81da      	strh	r2, [r3, #14]
	  }

	  // Handle the User changing the encoder refresh rate (does not log potential errors)
	  if(encoder_refresh != holding_register_database[ENCODER_REFRESH])
 80027f2:	4b1c      	ldr	r3, [pc, #112]	@ (8002864 <main+0x6f8>)
 80027f4:	227e      	movs	r2, #126	@ 0x7e
 80027f6:	5a9b      	ldrh	r3, [r3, r2]
 80027f8:	2414      	movs	r4, #20
 80027fa:	193a      	adds	r2, r7, r4
 80027fc:	8812      	ldrh	r2, [r2, #0]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d100      	bne.n	8002804 <main+0x698>
 8002802:	e558      	b.n	80022b6 <main+0x14a>
	  {
		  HAL_TIM_Base_Stop_IT(&htim14);
 8002804:	4b18      	ldr	r3, [pc, #96]	@ (8002868 <main+0x6fc>)
 8002806:	0018      	movs	r0, r3
 8002808:	f006 fda8 	bl	800935c <HAL_TIM_Base_Stop_IT>
		  HAL_TIM_Base_DeInit(&htim14);
 800280c:	4b16      	ldr	r3, [pc, #88]	@ (8002868 <main+0x6fc>)
 800280e:	0018      	movs	r0, r3
 8002810:	f006 fcf2 	bl	80091f8 <HAL_TIM_Base_DeInit>
		  __HAL_RCC_TIM14_FORCE_RESET();
 8002814:	4b15      	ldr	r3, [pc, #84]	@ (800286c <main+0x700>)
 8002816:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002818:	4b14      	ldr	r3, [pc, #80]	@ (800286c <main+0x700>)
 800281a:	2180      	movs	r1, #128	@ 0x80
 800281c:	0209      	lsls	r1, r1, #8
 800281e:	430a      	orrs	r2, r1
 8002820:	631a      	str	r2, [r3, #48]	@ 0x30
		  HAL_Delay(10);
 8002822:	200a      	movs	r0, #10
 8002824:	f002 f9e6 	bl	8004bf4 <HAL_Delay>
		  __HAL_RCC_TIM14_RELEASE_RESET();
 8002828:	4b10      	ldr	r3, [pc, #64]	@ (800286c <main+0x700>)
 800282a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800282c:	4b0f      	ldr	r3, [pc, #60]	@ (800286c <main+0x700>)
 800282e:	4910      	ldr	r1, [pc, #64]	@ (8002870 <main+0x704>)
 8002830:	400a      	ands	r2, r1
 8002832:	631a      	str	r2, [r3, #48]	@ 0x30
		  HAL_Delay(10);
 8002834:	200a      	movs	r0, #10
 8002836:	f002 f9dd 	bl	8004bf4 <HAL_Delay>
		  htim14.Init.Period = holding_register_database[ENCODER_REFRESH] - 1;
 800283a:	4b0a      	ldr	r3, [pc, #40]	@ (8002864 <main+0x6f8>)
 800283c:	227e      	movs	r2, #126	@ 0x7e
 800283e:	5a9b      	ldrh	r3, [r3, r2]
 8002840:	3b01      	subs	r3, #1
 8002842:	001a      	movs	r2, r3
 8002844:	4b08      	ldr	r3, [pc, #32]	@ (8002868 <main+0x6fc>)
 8002846:	60da      	str	r2, [r3, #12]
		  HAL_TIM_Base_Init(&htim14);
 8002848:	4b07      	ldr	r3, [pc, #28]	@ (8002868 <main+0x6fc>)
 800284a:	0018      	movs	r0, r3
 800284c:	f006 fc7c 	bl	8009148 <HAL_TIM_Base_Init>
		  HAL_TIM_Base_Start_IT(&htim14);
 8002850:	4b05      	ldr	r3, [pc, #20]	@ (8002868 <main+0x6fc>)
 8002852:	0018      	movs	r0, r3
 8002854:	f006 fd2e 	bl	80092b4 <HAL_TIM_Base_Start_IT>
		  encoder_refresh = holding_register_database[ENCODER_REFRESH];
 8002858:	193b      	adds	r3, r7, r4
 800285a:	4a02      	ldr	r2, [pc, #8]	@ (8002864 <main+0x6f8>)
 800285c:	217e      	movs	r1, #126	@ 0x7e
 800285e:	5a52      	ldrh	r2, [r2, r1]
 8002860:	801a      	strh	r2, [r3, #0]
	  if(modbus_rx())
 8002862:	e528      	b.n	80022b6 <main+0x14a>
 8002864:	20000014 	.word	0x20000014
 8002868:	200004c0 	.word	0x200004c0
 800286c:	40021000 	.word	0x40021000
 8002870:	ffff7fff 	.word	0xffff7fff

08002874 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002874:	b590      	push	{r4, r7, lr}
 8002876:	b08f      	sub	sp, #60	@ 0x3c
 8002878:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800287a:	2418      	movs	r4, #24
 800287c:	193b      	adds	r3, r7, r4
 800287e:	0018      	movs	r0, r3
 8002880:	2320      	movs	r3, #32
 8002882:	001a      	movs	r2, r3
 8002884:	2100      	movs	r1, #0
 8002886:	f009 fcad 	bl	800c1e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800288a:	1d3b      	adds	r3, r7, #4
 800288c:	0018      	movs	r0, r3
 800288e:	2314      	movs	r3, #20
 8002890:	001a      	movs	r2, r3
 8002892:	2100      	movs	r1, #0
 8002894:	f009 fca6 	bl	800c1e4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002898:	193b      	adds	r3, r7, r4
 800289a:	2201      	movs	r2, #1
 800289c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800289e:	193b      	adds	r3, r7, r4
 80028a0:	2280      	movs	r2, #128	@ 0x80
 80028a2:	0252      	lsls	r2, r2, #9
 80028a4:	605a      	str	r2, [r3, #4]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028a6:	193b      	adds	r3, r7, r4
 80028a8:	0018      	movs	r0, r3
 80028aa:	f005 fb19 	bl	8007ee0 <HAL_RCC_OscConfig>
 80028ae:	1e03      	subs	r3, r0, #0
 80028b0:	d001      	beq.n	80028b6 <SystemClock_Config+0x42>
  {
    Error_Handler();
 80028b2:	f000 fc8f 	bl	80031d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028b6:	1d3b      	adds	r3, r7, #4
 80028b8:	2207      	movs	r2, #7
 80028ba:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80028bc:	1d3b      	adds	r3, r7, #4
 80028be:	2201      	movs	r2, #1
 80028c0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80028c2:	1d3b      	adds	r3, r7, #4
 80028c4:	2200      	movs	r2, #0
 80028c6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80028c8:	1d3b      	adds	r3, r7, #4
 80028ca:	2200      	movs	r2, #0
 80028cc:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80028ce:	1d3b      	adds	r3, r7, #4
 80028d0:	2200      	movs	r2, #0
 80028d2:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80028d4:	1d3b      	adds	r3, r7, #4
 80028d6:	2100      	movs	r1, #0
 80028d8:	0018      	movs	r0, r3
 80028da:	f005 fd27 	bl	800832c <HAL_RCC_ClockConfig>
 80028de:	1e03      	subs	r3, r0, #0
 80028e0:	d001      	beq.n	80028e6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80028e2:	f000 fc77 	bl	80031d4 <Error_Handler>
  }
}
 80028e6:	46c0      	nop			@ (mov r8, r8)
 80028e8:	46bd      	mov	sp, r7
 80028ea:	b00f      	add	sp, #60	@ 0x3c
 80028ec:	bd90      	pop	{r4, r7, pc}
	...

080028f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80028f0:	b590      	push	{r4, r7, lr}
 80028f2:	b09d      	sub	sp, #116	@ 0x74
 80028f4:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80028f6:	2350      	movs	r3, #80	@ 0x50
 80028f8:	18fb      	adds	r3, r7, r3
 80028fa:	0018      	movs	r0, r3
 80028fc:	2310      	movs	r3, #16
 80028fe:	001a      	movs	r2, r3
 8002900:	2100      	movs	r1, #0
 8002902:	f009 fc6f 	bl	800c1e4 <memset>
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8002906:	2338      	movs	r3, #56	@ 0x38
 8002908:	18fb      	adds	r3, r7, r3
 800290a:	0018      	movs	r0, r3
 800290c:	2318      	movs	r3, #24
 800290e:	001a      	movs	r2, r3
 8002910:	2100      	movs	r1, #0
 8002912:	f009 fc67 	bl	800c1e4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002916:	2320      	movs	r3, #32
 8002918:	18fb      	adds	r3, r7, r3
 800291a:	0018      	movs	r0, r3
 800291c:	2318      	movs	r3, #24
 800291e:	001a      	movs	r2, r3
 8002920:	2100      	movs	r1, #0
 8002922:	f009 fc5f 	bl	800c1e4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002926:	003b      	movs	r3, r7
 8002928:	0018      	movs	r0, r3
 800292a:	2320      	movs	r3, #32
 800292c:	001a      	movs	r2, r3
 800292e:	2100      	movs	r1, #0
 8002930:	f009 fc58 	bl	800c1e4 <memset>

  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002934:	003b      	movs	r3, r7
 8002936:	2220      	movs	r2, #32
 8002938:	601a      	str	r2, [r3, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800293a:	003b      	movs	r3, r7
 800293c:	2200      	movs	r2, #0
 800293e:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002940:	003b      	movs	r3, r7
 8002942:	0018      	movs	r0, r3
 8002944:	f005 fe98 	bl	8008678 <HAL_RCCEx_PeriphCLKConfig>
 8002948:	1e03      	subs	r3, r0, #0
 800294a:	d001      	beq.n	8002950 <MX_ADC1_Init+0x60>
  {
    Error_Handler();
 800294c:	f000 fc42 	bl	80031d4 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC);
 8002950:	2380      	movs	r3, #128	@ 0x80
 8002952:	035b      	lsls	r3, r3, #13
 8002954:	0018      	movs	r0, r3
 8002956:	f7ff f981 	bl	8001c5c <LL_APB1_GRP2_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 800295a:	2001      	movs	r0, #1
 800295c:	f7ff f994 	bl	8001c88 <LL_IOP_GRP1_EnableClock>
  PA5   ------> ADC1_IN5
  PA6   ------> ADC1_IN6
  PA7   ------> ADC1_IN7
  PA8   ------> ADC1_IN8
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8002960:	2420      	movs	r4, #32
 8002962:	193b      	adds	r3, r7, r4
 8002964:	2201      	movs	r2, #1
 8002966:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8002968:	193b      	adds	r3, r7, r4
 800296a:	2203      	movs	r2, #3
 800296c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800296e:	193b      	adds	r3, r7, r4
 8002970:	2200      	movs	r2, #0
 8002972:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002974:	193a      	adds	r2, r7, r4
 8002976:	23a0      	movs	r3, #160	@ 0xa0
 8002978:	05db      	lsls	r3, r3, #23
 800297a:	0011      	movs	r1, r2
 800297c:	0018      	movs	r0, r3
 800297e:	f009 fbd6 	bl	800c12e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8002982:	193b      	adds	r3, r7, r4
 8002984:	2202      	movs	r2, #2
 8002986:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8002988:	193b      	adds	r3, r7, r4
 800298a:	2203      	movs	r2, #3
 800298c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800298e:	193b      	adds	r3, r7, r4
 8002990:	2200      	movs	r2, #0
 8002992:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002994:	193a      	adds	r2, r7, r4
 8002996:	23a0      	movs	r3, #160	@ 0xa0
 8002998:	05db      	lsls	r3, r3, #23
 800299a:	0011      	movs	r1, r2
 800299c:	0018      	movs	r0, r3
 800299e:	f009 fbc6 	bl	800c12e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 80029a2:	193b      	adds	r3, r7, r4
 80029a4:	2204      	movs	r2, #4
 80029a6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80029a8:	193b      	adds	r3, r7, r4
 80029aa:	2203      	movs	r2, #3
 80029ac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80029ae:	193b      	adds	r3, r7, r4
 80029b0:	2200      	movs	r2, #0
 80029b2:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029b4:	193a      	adds	r2, r7, r4
 80029b6:	23a0      	movs	r3, #160	@ 0xa0
 80029b8:	05db      	lsls	r3, r3, #23
 80029ba:	0011      	movs	r1, r2
 80029bc:	0018      	movs	r0, r3
 80029be:	f009 fbb6 	bl	800c12e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 80029c2:	193b      	adds	r3, r7, r4
 80029c4:	2208      	movs	r2, #8
 80029c6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80029c8:	193b      	adds	r3, r7, r4
 80029ca:	2203      	movs	r2, #3
 80029cc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80029ce:	193b      	adds	r3, r7, r4
 80029d0:	2200      	movs	r2, #0
 80029d2:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029d4:	193a      	adds	r2, r7, r4
 80029d6:	23a0      	movs	r3, #160	@ 0xa0
 80029d8:	05db      	lsls	r3, r3, #23
 80029da:	0011      	movs	r1, r2
 80029dc:	0018      	movs	r0, r3
 80029de:	f009 fba6 	bl	800c12e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 80029e2:	193b      	adds	r3, r7, r4
 80029e4:	2210      	movs	r2, #16
 80029e6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80029e8:	193b      	adds	r3, r7, r4
 80029ea:	2203      	movs	r2, #3
 80029ec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80029ee:	193b      	adds	r3, r7, r4
 80029f0:	2200      	movs	r2, #0
 80029f2:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029f4:	193a      	adds	r2, r7, r4
 80029f6:	23a0      	movs	r3, #160	@ 0xa0
 80029f8:	05db      	lsls	r3, r3, #23
 80029fa:	0011      	movs	r1, r2
 80029fc:	0018      	movs	r0, r3
 80029fe:	f009 fb96 	bl	800c12e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8002a02:	193b      	adds	r3, r7, r4
 8002a04:	2220      	movs	r2, #32
 8002a06:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8002a08:	193b      	adds	r3, r7, r4
 8002a0a:	2203      	movs	r2, #3
 8002a0c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002a0e:	193b      	adds	r3, r7, r4
 8002a10:	2200      	movs	r2, #0
 8002a12:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a14:	193a      	adds	r2, r7, r4
 8002a16:	23a0      	movs	r3, #160	@ 0xa0
 8002a18:	05db      	lsls	r3, r3, #23
 8002a1a:	0011      	movs	r1, r2
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	f009 fb86 	bl	800c12e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8002a22:	193b      	adds	r3, r7, r4
 8002a24:	2240      	movs	r2, #64	@ 0x40
 8002a26:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8002a28:	193b      	adds	r3, r7, r4
 8002a2a:	2203      	movs	r2, #3
 8002a2c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002a2e:	193b      	adds	r3, r7, r4
 8002a30:	2200      	movs	r2, #0
 8002a32:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a34:	193a      	adds	r2, r7, r4
 8002a36:	23a0      	movs	r3, #160	@ 0xa0
 8002a38:	05db      	lsls	r3, r3, #23
 8002a3a:	0011      	movs	r1, r2
 8002a3c:	0018      	movs	r0, r3
 8002a3e:	f009 fb76 	bl	800c12e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8002a42:	193b      	adds	r3, r7, r4
 8002a44:	2280      	movs	r2, #128	@ 0x80
 8002a46:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8002a48:	193b      	adds	r3, r7, r4
 8002a4a:	2203      	movs	r2, #3
 8002a4c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002a4e:	193b      	adds	r3, r7, r4
 8002a50:	2200      	movs	r2, #0
 8002a52:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a54:	193a      	adds	r2, r7, r4
 8002a56:	23a0      	movs	r3, #160	@ 0xa0
 8002a58:	05db      	lsls	r3, r3, #23
 8002a5a:	0011      	movs	r1, r2
 8002a5c:	0018      	movs	r0, r3
 8002a5e:	f009 fb66 	bl	800c12e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8002a62:	0021      	movs	r1, r4
 8002a64:	187b      	adds	r3, r7, r1
 8002a66:	2280      	movs	r2, #128	@ 0x80
 8002a68:	0052      	lsls	r2, r2, #1
 8002a6a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8002a6c:	187b      	adds	r3, r7, r1
 8002a6e:	2203      	movs	r2, #3
 8002a70:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002a72:	187b      	adds	r3, r7, r1
 8002a74:	2200      	movs	r2, #0
 8002a76:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a78:	187a      	adds	r2, r7, r1
 8002a7a:	23a0      	movs	r3, #160	@ 0xa0
 8002a7c:	05db      	lsls	r3, r3, #23
 8002a7e:	0011      	movs	r1, r2
 8002a80:	0018      	movs	r0, r3
 8002a82:	f009 fb54 	bl	800c12e <LL_GPIO_Init>

  /* ADC1 DMA Init */

  /* ADC1 Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_1, LL_DMAMUX_REQ_ADC1);
 8002a86:	4b7a      	ldr	r3, [pc, #488]	@ (8002c70 <MX_ADC1_Init+0x380>)
 8002a88:	2205      	movs	r2, #5
 8002a8a:	2101      	movs	r1, #1
 8002a8c:	0018      	movs	r0, r3
 8002a8e:	f7ff faa3 	bl	8001fd8 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8002a92:	4b77      	ldr	r3, [pc, #476]	@ (8002c70 <MX_ADC1_Init+0x380>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	2101      	movs	r1, #1
 8002a98:	0018      	movs	r0, r3
 8002a9a:	f7ff f93f 	bl	8001d1c <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_LOW);
 8002a9e:	4b74      	ldr	r3, [pc, #464]	@ (8002c70 <MX_ADC1_Init+0x380>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	2101      	movs	r1, #1
 8002aa4:	0018      	movs	r0, r3
 8002aa6:	f7ff fa17 	bl	8001ed8 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_CIRCULAR);
 8002aaa:	4b71      	ldr	r3, [pc, #452]	@ (8002c70 <MX_ADC1_Init+0x380>)
 8002aac:	2220      	movs	r2, #32
 8002aae:	2101      	movs	r1, #1
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	f7ff f959 	bl	8001d68 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 8002ab6:	4b6e      	ldr	r3, [pc, #440]	@ (8002c70 <MX_ADC1_Init+0x380>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	2101      	movs	r1, #1
 8002abc:	0018      	movs	r0, r3
 8002abe:	f7ff f977 	bl	8001db0 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 8002ac2:	4b6b      	ldr	r3, [pc, #428]	@ (8002c70 <MX_ADC1_Init+0x380>)
 8002ac4:	2280      	movs	r2, #128	@ 0x80
 8002ac6:	2101      	movs	r1, #1
 8002ac8:	0018      	movs	r0, r3
 8002aca:	f7ff f995 	bl	8001df8 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_HALFWORD);
 8002ace:	2380      	movs	r3, #128	@ 0x80
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	4867      	ldr	r0, [pc, #412]	@ (8002c70 <MX_ADC1_Init+0x380>)
 8002ad4:	001a      	movs	r2, r3
 8002ad6:	2101      	movs	r1, #1
 8002ad8:	f7ff f9b2 	bl	8001e40 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_HALFWORD);
 8002adc:	2380      	movs	r3, #128	@ 0x80
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	4863      	ldr	r0, [pc, #396]	@ (8002c70 <MX_ADC1_Init+0x380>)
 8002ae2:	001a      	movs	r2, r3
 8002ae4:	2101      	movs	r1, #1
 8002ae6:	f7ff f9d1 	bl	8001e8c <LL_DMA_SetMemorySize>

  /* ADC1 interrupt Init */
  NVIC_SetPriority(ADC1_IRQn, 0);
 8002aea:	2100      	movs	r1, #0
 8002aec:	200c      	movs	r0, #12
 8002aee:	f7fe ff19 	bl	8001924 <__NVIC_SetPriority>
  NVIC_EnableIRQ(ADC1_IRQn);
 8002af2:	200c      	movs	r0, #12
 8002af4:	f7fe fefc 	bl	80018f0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN ADC1_Init 1 */

  /* Set DMA transfer addresses of source and destination */
  LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_1, LL_ADC_DMA_GetRegAddr(ADC1, LL_ADC_DMA_REG_REGULAR_DATA),
 8002af8:	4b5e      	ldr	r3, [pc, #376]	@ (8002c74 <MX_ADC1_Init+0x384>)
 8002afa:	2100      	movs	r1, #0
 8002afc:	0018      	movs	r0, r3
 8002afe:	f7fe ff7f 	bl	8001a00 <LL_ADC_DMA_GetRegAddr>
 8002b02:	0001      	movs	r1, r0
 8002b04:	4b5c      	ldr	r3, [pc, #368]	@ (8002c78 <MX_ADC1_Init+0x388>)
 8002b06:	485a      	ldr	r0, [pc, #360]	@ (8002c70 <MX_ADC1_Init+0x380>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	9200      	str	r2, [sp, #0]
 8002b0c:	000a      	movs	r2, r1
 8002b0e:	2101      	movs	r1, #1
 8002b10:	f7ff fa2a 	bl	8001f68 <LL_DMA_ConfigAddresses>
		  (uint32_t)&holding_register_database[ADC_0],
		  LL_DMA_DIRECTION_PERIPH_TO_MEMORY);

  /* Set DMA transfer size */
  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_1, 9);
 8002b14:	4b56      	ldr	r3, [pc, #344]	@ (8002c70 <MX_ADC1_Init+0x380>)
 8002b16:	2209      	movs	r2, #9
 8002b18:	2101      	movs	r1, #1
 8002b1a:	0018      	movs	r0, r3
 8002b1c:	f7ff fa02 	bl	8001f24 <LL_DMA_SetDataLength>

  /* Enable DMA transfer interruption: transfer complete */
  LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_1);
 8002b20:	4b53      	ldr	r3, [pc, #332]	@ (8002c70 <MX_ADC1_Init+0x380>)
 8002b22:	2101      	movs	r1, #1
 8002b24:	0018      	movs	r0, r3
 8002b26:	f7ff fa75 	bl	8002014 <LL_DMA_EnableIT_TC>

  /* Enable DMA transfer interruption: transfer half complete */
  LL_DMA_EnableIT_HT(DMA1, LL_DMA_CHANNEL_1);
 8002b2a:	4b51      	ldr	r3, [pc, #324]	@ (8002c70 <MX_ADC1_Init+0x380>)
 8002b2c:	2101      	movs	r1, #1
 8002b2e:	0018      	movs	r0, r3
 8002b30:	f7ff fa90 	bl	8002054 <LL_DMA_EnableIT_HT>

  /* Enable DMA transfer interruption: transfer error */
  LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_1);
 8002b34:	4b4e      	ldr	r3, [pc, #312]	@ (8002c70 <MX_ADC1_Init+0x380>)
 8002b36:	2101      	movs	r1, #1
 8002b38:	0018      	movs	r0, r3
 8002b3a:	f7ff faab 	bl	8002094 <LL_DMA_EnableIT_TE>

  /* Enable the DMA transfer */
  LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_1);
 8002b3e:	4b4c      	ldr	r3, [pc, #304]	@ (8002c70 <MX_ADC1_Init+0x380>)
 8002b40:	2101      	movs	r1, #1
 8002b42:	0018      	movs	r0, r3
 8002b44:	f7ff f8ca 	bl	8001cdc <LL_DMA_EnableChannel>
   #define ADC_CHANNEL_CONF_RDY_TIMEOUT_MS ( 1U)
   #if (USE_TIMEOUT == 1)
   uint32_t Timeout ; /* Variable used for Timeout management */
   #endif /* USE_TIMEOUT */

  ADC_InitStruct.Clock = LL_ADC_CLOCK_SYNC_PCLK_DIV2;
 8002b48:	2150      	movs	r1, #80	@ 0x50
 8002b4a:	187b      	adds	r3, r7, r1
 8002b4c:	2280      	movs	r2, #128	@ 0x80
 8002b4e:	05d2      	lsls	r2, r2, #23
 8002b50:	601a      	str	r2, [r3, #0]
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8002b52:	187b      	adds	r3, r7, r1
 8002b54:	2200      	movs	r2, #0
 8002b56:	605a      	str	r2, [r3, #4]
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8002b58:	187b      	adds	r3, r7, r1
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	609a      	str	r2, [r3, #8]
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8002b5e:	187b      	adds	r3, r7, r1
 8002b60:	2200      	movs	r2, #0
 8002b62:	60da      	str	r2, [r3, #12]
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8002b64:	187b      	adds	r3, r7, r1
 8002b66:	4a43      	ldr	r2, [pc, #268]	@ (8002c74 <MX_ADC1_Init+0x384>)
 8002b68:	0019      	movs	r1, r3
 8002b6a:	0010      	movs	r0, r2
 8002b6c:	f009 f98c 	bl	800be88 <LL_ADC_Init>
  LL_ADC_REG_SetSequencerConfigurable(ADC1, LL_ADC_REG_SEQ_FIXED);
 8002b70:	4b40      	ldr	r3, [pc, #256]	@ (8002c74 <MX_ADC1_Init+0x384>)
 8002b72:	2100      	movs	r1, #0
 8002b74:	0018      	movs	r0, r3
 8002b76:	f7fe ff81 	bl	8001a7c <LL_ADC_REG_SetSequencerConfigurable>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8002b7a:	2138      	movs	r1, #56	@ 0x38
 8002b7c:	187b      	adds	r3, r7, r1
 8002b7e:	2200      	movs	r2, #0
 8002b80:	601a      	str	r2, [r3, #0]
  ADC_REG_InitStruct.SequencerLength = 0;
 8002b82:	187b      	adds	r3, r7, r1
 8002b84:	2200      	movs	r2, #0
 8002b86:	605a      	str	r2, [r3, #4]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8002b88:	187b      	adds	r3, r7, r1
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	609a      	str	r2, [r3, #8]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 8002b8e:	187b      	adds	r3, r7, r1
 8002b90:	2280      	movs	r2, #128	@ 0x80
 8002b92:	0192      	lsls	r2, r2, #6
 8002b94:	60da      	str	r2, [r3, #12]
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 8002b96:	187b      	adds	r3, r7, r1
 8002b98:	2203      	movs	r2, #3
 8002b9a:	611a      	str	r2, [r3, #16]
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8002b9c:	187b      	adds	r3, r7, r1
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	615a      	str	r2, [r3, #20]
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8002ba2:	187b      	adds	r3, r7, r1
 8002ba4:	4a33      	ldr	r2, [pc, #204]	@ (8002c74 <MX_ADC1_Init+0x384>)
 8002ba6:	0019      	movs	r1, r3
 8002ba8:	0010      	movs	r0, r2
 8002baa:	f009 f9a3 	bl	800bef4 <LL_ADC_REG_Init>
  LL_ADC_REG_SetSequencerScanDirection(ADC1, LL_ADC_REG_SEQ_SCAN_DIR_FORWARD);
 8002bae:	4b31      	ldr	r3, [pc, #196]	@ (8002c74 <MX_ADC1_Init+0x384>)
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	0018      	movs	r0, r3
 8002bb4:	f7fe ff76 	bl	8001aa4 <LL_ADC_REG_SetSequencerScanDirection>
  LL_ADC_SetOverSamplingScope(ADC1, LL_ADC_OVS_DISABLE);
 8002bb8:	4b2e      	ldr	r3, [pc, #184]	@ (8002c74 <MX_ADC1_Init+0x384>)
 8002bba:	2100      	movs	r1, #0
 8002bbc:	0018      	movs	r0, r3
 8002bbe:	f7fe ff94 	bl	8001aea <LL_ADC_SetOverSamplingScope>
  LL_ADC_SetTriggerFrequencyMode(ADC1, LL_ADC_CLOCK_FREQ_MODE_HIGH);
 8002bc2:	4b2c      	ldr	r3, [pc, #176]	@ (8002c74 <MX_ADC1_Init+0x384>)
 8002bc4:	2100      	movs	r1, #0
 8002bc6:	0018      	movs	r0, r3
 8002bc8:	f7fe ff26 	bl	8001a18 <LL_ADC_SetTriggerFrequencyMode>
  LL_ADC_REG_SetSequencerChAdd(ADC1, LL_ADC_CHANNEL_0|LL_ADC_CHANNEL_1
 8002bcc:	4a2b      	ldr	r2, [pc, #172]	@ (8002c7c <MX_ADC1_Init+0x38c>)
 8002bce:	4b29      	ldr	r3, [pc, #164]	@ (8002c74 <MX_ADC1_Init+0x384>)
 8002bd0:	0011      	movs	r1, r2
 8002bd2:	0018      	movs	r0, r3
 8002bd4:	f7fe ff78 	bl	8001ac8 <LL_ADC_REG_SetSequencerChAdd>
                              |LL_ADC_CHANNEL_6|LL_ADC_CHANNEL_7
                              |LL_ADC_CHANNEL_8);

   /* Poll for ADC channel configuration ready */
   #if (USE_TIMEOUT == 1)
   Timeout = ADC_CHANNEL_CONF_RDY_TIMEOUT_MS;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	667b      	str	r3, [r7, #100]	@ 0x64
   #endif /* USE_TIMEOUT */
   while (LL_ADC_IsActiveFlag_CCRDY(ADC1) == 0)
 8002bdc:	e00a      	b.n	8002bf4 <MX_ADC1_Init+0x304>
     {
   #if (USE_TIMEOUT == 1)
   /* Check Systick counter flag to decrement the time-out value */
   if (LL_SYSTICK_IsActiveCounterFlag())
 8002bde:	f7ff f869 	bl	8001cb4 <LL_SYSTICK_IsActiveCounterFlag>
 8002be2:	1e03      	subs	r3, r0, #0
 8002be4:	d006      	beq.n	8002bf4 <MX_ADC1_Init+0x304>
     {
   if(Timeout-- == 0)
 8002be6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002be8:	1e5a      	subs	r2, r3, #1
 8002bea:	667a      	str	r2, [r7, #100]	@ 0x64
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d101      	bne.n	8002bf4 <MX_ADC1_Init+0x304>
         {
   Error_Handler();
 8002bf0:	f000 faf0 	bl	80031d4 <Error_Handler>
   while (LL_ADC_IsActiveFlag_CCRDY(ADC1) == 0)
 8002bf4:	4b1f      	ldr	r3, [pc, #124]	@ (8002c74 <MX_ADC1_Init+0x384>)
 8002bf6:	0018      	movs	r0, r3
 8002bf8:	f7fe ffe3 	bl	8001bc2 <LL_ADC_IsActiveFlag_CCRDY>
 8002bfc:	1e03      	subs	r3, r0, #0
 8002bfe:	d0ee      	beq.n	8002bde <MX_ADC1_Init+0x2ee>
         }
     }
   #endif /* USE_TIMEOUT */
     }
   /* Clear flag ADC channel configuration ready */
   LL_ADC_ClearFlag_CCRDY(ADC1);
 8002c00:	4b1c      	ldr	r3, [pc, #112]	@ (8002c74 <MX_ADC1_Init+0x384>)
 8002c02:	0018      	movs	r0, r3
 8002c04:	f7fe fff1 	bl	8001bea <LL_ADC_ClearFlag_CCRDY>
  LL_ADC_SetSamplingTimeCommonChannels(ADC1, LL_ADC_SAMPLINGTIME_COMMON_1, LL_ADC_SAMPLINGTIME_160CYCLES_5);
 8002c08:	4b1a      	ldr	r3, [pc, #104]	@ (8002c74 <MX_ADC1_Init+0x384>)
 8002c0a:	2207      	movs	r2, #7
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	0018      	movs	r0, r3
 8002c10:	f7fe ff16 	bl	8001a40 <LL_ADC_SetSamplingTimeCommonChannels>
  LL_ADC_DisableIT_EOC(ADC1);
 8002c14:	4b17      	ldr	r3, [pc, #92]	@ (8002c74 <MX_ADC1_Init+0x384>)
 8002c16:	0018      	movs	r0, r3
 8002c18:	f7ff f801 	bl	8001c1e <LL_ADC_DisableIT_EOC>
  LL_ADC_DisableIT_EOS(ADC1);
 8002c1c:	4b15      	ldr	r3, [pc, #84]	@ (8002c74 <MX_ADC1_Init+0x384>)
 8002c1e:	0018      	movs	r0, r3
 8002c20:	f7ff f80c 	bl	8001c3c <LL_ADC_DisableIT_EOS>

   /* Enable ADC internal voltage regulator */
   LL_ADC_EnableInternalRegulator(ADC1);
 8002c24:	4b13      	ldr	r3, [pc, #76]	@ (8002c74 <MX_ADC1_Init+0x384>)
 8002c26:	0018      	movs	r0, r3
 8002c28:	f7fe ff72 	bl	8001b10 <LL_ADC_EnableInternalRegulator>
   /* Note: Variable divided by 2 to compensate partially */
   /* CPU processing cycles (depends on compilation optimization). */
   /* Note: If system core clock frequency is below 200kHz, wait time */
   /* is only a few CPU processing cycles. */
   uint32_t wait_loop_index;
   wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8002c2c:	4b14      	ldr	r3, [pc, #80]	@ (8002c80 <MX_ADC1_Init+0x390>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4914      	ldr	r1, [pc, #80]	@ (8002c84 <MX_ADC1_Init+0x394>)
 8002c32:	0018      	movs	r0, r3
 8002c34:	f7fd fa68 	bl	8000108 <__udivsi3>
 8002c38:	0003      	movs	r3, r0
 8002c3a:	001a      	movs	r2, r3
 8002c3c:	0013      	movs	r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	189b      	adds	r3, r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	210a      	movs	r1, #10
 8002c46:	0018      	movs	r0, r3
 8002c48:	f7fd fa5e 	bl	8000108 <__udivsi3>
 8002c4c:	0003      	movs	r3, r0
 8002c4e:	663b      	str	r3, [r7, #96]	@ 0x60
   while(wait_loop_index != 0)
 8002c50:	e002      	b.n	8002c58 <MX_ADC1_Init+0x368>
     {
   wait_loop_index--;
 8002c52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c54:	3b01      	subs	r3, #1
 8002c56:	663b      	str	r3, [r7, #96]	@ 0x60
   while(wait_loop_index != 0)
 8002c58:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1f9      	bne.n	8002c52 <MX_ADC1_Init+0x362>
     }
  /* USER CODE BEGIN ADC1_Init 2 */

   LL_ADC_EnableIT_OVR(ADC1);
 8002c5e:	4b05      	ldr	r3, [pc, #20]	@ (8002c74 <MX_ADC1_Init+0x384>)
 8002c60:	0018      	movs	r0, r3
 8002c62:	f7fe ffce 	bl	8001c02 <LL_ADC_EnableIT_OVR>

  /* USER CODE END ADC1_Init 2 */

}
 8002c66:	46c0      	nop			@ (mov r8, r8)
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	b01b      	add	sp, #108	@ 0x6c
 8002c6c:	bd90      	pop	{r4, r7, pc}
 8002c6e:	46c0      	nop			@ (mov r8, r8)
 8002c70:	40020000 	.word	0x40020000
 8002c74:	40012400 	.word	0x40012400
 8002c78:	20000026 	.word	0x20000026
 8002c7c:	3c0001ff 	.word	0x3c0001ff
 8002c80:	200000b8 	.word	0x200000b8
 8002c84:	00030d40 	.word	0x00030d40

08002c88 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002c8c:	4b1b      	ldr	r3, [pc, #108]	@ (8002cfc <MX_I2C1_Init+0x74>)
 8002c8e:	4a1c      	ldr	r2, [pc, #112]	@ (8002d00 <MX_I2C1_Init+0x78>)
 8002c90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2C;
 8002c92:	4b1a      	ldr	r3, [pc, #104]	@ (8002cfc <MX_I2C1_Init+0x74>)
 8002c94:	4a1b      	ldr	r2, [pc, #108]	@ (8002d04 <MX_I2C1_Init+0x7c>)
 8002c96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002c98:	4b18      	ldr	r3, [pc, #96]	@ (8002cfc <MX_I2C1_Init+0x74>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c9e:	4b17      	ldr	r3, [pc, #92]	@ (8002cfc <MX_I2C1_Init+0x74>)
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ca4:	4b15      	ldr	r3, [pc, #84]	@ (8002cfc <MX_I2C1_Init+0x74>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002caa:	4b14      	ldr	r3, [pc, #80]	@ (8002cfc <MX_I2C1_Init+0x74>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002cb0:	4b12      	ldr	r3, [pc, #72]	@ (8002cfc <MX_I2C1_Init+0x74>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002cb6:	4b11      	ldr	r3, [pc, #68]	@ (8002cfc <MX_I2C1_Init+0x74>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002cbc:	4b0f      	ldr	r3, [pc, #60]	@ (8002cfc <MX_I2C1_Init+0x74>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002cc2:	4b0e      	ldr	r3, [pc, #56]	@ (8002cfc <MX_I2C1_Init+0x74>)
 8002cc4:	0018      	movs	r0, r3
 8002cc6:	f002 ff3f 	bl	8005b48 <HAL_I2C_Init>
 8002cca:	1e03      	subs	r3, r0, #0
 8002ccc:	d001      	beq.n	8002cd2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002cce:	f000 fa81 	bl	80031d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002cd2:	4b0a      	ldr	r3, [pc, #40]	@ (8002cfc <MX_I2C1_Init+0x74>)
 8002cd4:	2100      	movs	r1, #0
 8002cd6:	0018      	movs	r0, r3
 8002cd8:	f005 f86a 	bl	8007db0 <HAL_I2CEx_ConfigAnalogFilter>
 8002cdc:	1e03      	subs	r3, r0, #0
 8002cde:	d001      	beq.n	8002ce4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002ce0:	f000 fa78 	bl	80031d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002ce4:	4b05      	ldr	r3, [pc, #20]	@ (8002cfc <MX_I2C1_Init+0x74>)
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	0018      	movs	r0, r3
 8002cea:	f005 f8ad 	bl	8007e48 <HAL_I2CEx_ConfigDigitalFilter>
 8002cee:	1e03      	subs	r3, r0, #0
 8002cf0:	d001      	beq.n	8002cf6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002cf2:	f000 fa6f 	bl	80031d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002cf6:	46c0      	nop			@ (mov r8, r8)
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	20000304 	.word	0x20000304
 8002d00:	40005400 	.word	0x40005400
 8002d04:	00201d2c 	.word	0x00201d2c

08002d08 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002d0c:	4b1b      	ldr	r3, [pc, #108]	@ (8002d7c <MX_SPI1_Init+0x74>)
 8002d0e:	4a1c      	ldr	r2, [pc, #112]	@ (8002d80 <MX_SPI1_Init+0x78>)
 8002d10:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002d12:	4b1a      	ldr	r3, [pc, #104]	@ (8002d7c <MX_SPI1_Init+0x74>)
 8002d14:	2282      	movs	r2, #130	@ 0x82
 8002d16:	0052      	lsls	r2, r2, #1
 8002d18:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002d1a:	4b18      	ldr	r3, [pc, #96]	@ (8002d7c <MX_SPI1_Init+0x74>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d20:	4b16      	ldr	r3, [pc, #88]	@ (8002d7c <MX_SPI1_Init+0x74>)
 8002d22:	22e0      	movs	r2, #224	@ 0xe0
 8002d24:	00d2      	lsls	r2, r2, #3
 8002d26:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d28:	4b14      	ldr	r3, [pc, #80]	@ (8002d7c <MX_SPI1_Init+0x74>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002d2e:	4b13      	ldr	r3, [pc, #76]	@ (8002d7c <MX_SPI1_Init+0x74>)
 8002d30:	2201      	movs	r2, #1
 8002d32:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002d34:	4b11      	ldr	r3, [pc, #68]	@ (8002d7c <MX_SPI1_Init+0x74>)
 8002d36:	2280      	movs	r2, #128	@ 0x80
 8002d38:	0092      	lsls	r2, r2, #2
 8002d3a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002d3c:	4b0f      	ldr	r3, [pc, #60]	@ (8002d7c <MX_SPI1_Init+0x74>)
 8002d3e:	2210      	movs	r2, #16
 8002d40:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d42:	4b0e      	ldr	r3, [pc, #56]	@ (8002d7c <MX_SPI1_Init+0x74>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d48:	4b0c      	ldr	r3, [pc, #48]	@ (8002d7c <MX_SPI1_Init+0x74>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d4e:	4b0b      	ldr	r3, [pc, #44]	@ (8002d7c <MX_SPI1_Init+0x74>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002d54:	4b09      	ldr	r3, [pc, #36]	@ (8002d7c <MX_SPI1_Init+0x74>)
 8002d56:	2207      	movs	r2, #7
 8002d58:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002d5a:	4b08      	ldr	r3, [pc, #32]	@ (8002d7c <MX_SPI1_Init+0x74>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002d60:	4b06      	ldr	r3, [pc, #24]	@ (8002d7c <MX_SPI1_Init+0x74>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002d66:	4b05      	ldr	r3, [pc, #20]	@ (8002d7c <MX_SPI1_Init+0x74>)
 8002d68:	0018      	movs	r0, r3
 8002d6a:	f005 fd81 	bl	8008870 <HAL_SPI_Init>
 8002d6e:	1e03      	subs	r3, r0, #0
 8002d70:	d001      	beq.n	8002d76 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002d72:	f000 fa2f 	bl	80031d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002d76:	46c0      	nop			@ (mov r8, r8)
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	20000410 	.word	0x20000410
 8002d80:	40013000 	.word	0x40013000

08002d84 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b098      	sub	sp, #96	@ 0x60
 8002d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d8a:	2354      	movs	r3, #84	@ 0x54
 8002d8c:	18fb      	adds	r3, r7, r3
 8002d8e:	0018      	movs	r0, r3
 8002d90:	230c      	movs	r3, #12
 8002d92:	001a      	movs	r2, r3
 8002d94:	2100      	movs	r1, #0
 8002d96:	f009 fa25 	bl	800c1e4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d9a:	2338      	movs	r3, #56	@ 0x38
 8002d9c:	18fb      	adds	r3, r7, r3
 8002d9e:	0018      	movs	r0, r3
 8002da0:	231c      	movs	r3, #28
 8002da2:	001a      	movs	r2, r3
 8002da4:	2100      	movs	r1, #0
 8002da6:	f009 fa1d 	bl	800c1e4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002daa:	1d3b      	adds	r3, r7, #4
 8002dac:	0018      	movs	r0, r3
 8002dae:	2334      	movs	r3, #52	@ 0x34
 8002db0:	001a      	movs	r2, r3
 8002db2:	2100      	movs	r1, #0
 8002db4:	f009 fa16 	bl	800c1e4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002db8:	4b45      	ldr	r3, [pc, #276]	@ (8002ed0 <MX_TIM1_Init+0x14c>)
 8002dba:	4a46      	ldr	r2, [pc, #280]	@ (8002ed4 <MX_TIM1_Init+0x150>)
 8002dbc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 8002dbe:	4b44      	ldr	r3, [pc, #272]	@ (8002ed0 <MX_TIM1_Init+0x14c>)
 8002dc0:	224f      	movs	r2, #79	@ 0x4f
 8002dc2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dc4:	4b42      	ldr	r3, [pc, #264]	@ (8002ed0 <MX_TIM1_Init+0x14c>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8002dca:	4b41      	ldr	r3, [pc, #260]	@ (8002ed0 <MX_TIM1_Init+0x14c>)
 8002dcc:	2263      	movs	r2, #99	@ 0x63
 8002dce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dd0:	4b3f      	ldr	r3, [pc, #252]	@ (8002ed0 <MX_TIM1_Init+0x14c>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002dd6:	4b3e      	ldr	r3, [pc, #248]	@ (8002ed0 <MX_TIM1_Init+0x14c>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ddc:	4b3c      	ldr	r3, [pc, #240]	@ (8002ed0 <MX_TIM1_Init+0x14c>)
 8002dde:	2280      	movs	r2, #128	@ 0x80
 8002de0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002de2:	4b3b      	ldr	r3, [pc, #236]	@ (8002ed0 <MX_TIM1_Init+0x14c>)
 8002de4:	0018      	movs	r0, r3
 8002de6:	f006 fae7 	bl	80093b8 <HAL_TIM_PWM_Init>
 8002dea:	1e03      	subs	r3, r0, #0
 8002dec:	d001      	beq.n	8002df2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8002dee:	f000 f9f1 	bl	80031d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002df2:	2154      	movs	r1, #84	@ 0x54
 8002df4:	187b      	adds	r3, r7, r1
 8002df6:	2200      	movs	r2, #0
 8002df8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002dfa:	187b      	adds	r3, r7, r1
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e00:	187b      	adds	r3, r7, r1
 8002e02:	2200      	movs	r2, #0
 8002e04:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002e06:	187a      	adds	r2, r7, r1
 8002e08:	4b31      	ldr	r3, [pc, #196]	@ (8002ed0 <MX_TIM1_Init+0x14c>)
 8002e0a:	0011      	movs	r1, r2
 8002e0c:	0018      	movs	r0, r3
 8002e0e:	f007 f975 	bl	800a0fc <HAL_TIMEx_MasterConfigSynchronization>
 8002e12:	1e03      	subs	r3, r0, #0
 8002e14:	d001      	beq.n	8002e1a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002e16:	f000 f9dd 	bl	80031d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e1a:	2138      	movs	r1, #56	@ 0x38
 8002e1c:	187b      	adds	r3, r7, r1
 8002e1e:	2260      	movs	r2, #96	@ 0x60
 8002e20:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002e22:	187b      	adds	r3, r7, r1
 8002e24:	2200      	movs	r2, #0
 8002e26:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e28:	187b      	adds	r3, r7, r1
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002e2e:	187b      	adds	r3, r7, r1
 8002e30:	2200      	movs	r2, #0
 8002e32:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e34:	187b      	adds	r3, r7, r1
 8002e36:	2200      	movs	r2, #0
 8002e38:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002e3a:	187b      	adds	r3, r7, r1
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002e40:	187b      	adds	r3, r7, r1
 8002e42:	2200      	movs	r2, #0
 8002e44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e46:	1879      	adds	r1, r7, r1
 8002e48:	4b21      	ldr	r3, [pc, #132]	@ (8002ed0 <MX_TIM1_Init+0x14c>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	0018      	movs	r0, r3
 8002e4e:	f006 fcf1 	bl	8009834 <HAL_TIM_PWM_ConfigChannel>
 8002e52:	1e03      	subs	r3, r0, #0
 8002e54:	d001      	beq.n	8002e5a <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8002e56:	f000 f9bd 	bl	80031d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002e5a:	1d3b      	adds	r3, r7, #4
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002e60:	1d3b      	adds	r3, r7, #4
 8002e62:	2200      	movs	r2, #0
 8002e64:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002e66:	1d3b      	adds	r3, r7, #4
 8002e68:	2200      	movs	r2, #0
 8002e6a:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002e6c:	1d3b      	adds	r3, r7, #4
 8002e6e:	2200      	movs	r2, #0
 8002e70:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002e72:	1d3b      	adds	r3, r7, #4
 8002e74:	2200      	movs	r2, #0
 8002e76:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002e78:	1d3b      	adds	r3, r7, #4
 8002e7a:	2280      	movs	r2, #128	@ 0x80
 8002e7c:	0192      	lsls	r2, r2, #6
 8002e7e:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002e80:	1d3b      	adds	r3, r7, #4
 8002e82:	2200      	movs	r2, #0
 8002e84:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002e86:	1d3b      	adds	r3, r7, #4
 8002e88:	2200      	movs	r2, #0
 8002e8a:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002e8c:	1d3b      	adds	r3, r7, #4
 8002e8e:	2200      	movs	r2, #0
 8002e90:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002e92:	1d3b      	adds	r3, r7, #4
 8002e94:	2280      	movs	r2, #128	@ 0x80
 8002e96:	0492      	lsls	r2, r2, #18
 8002e98:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002e9a:	1d3b      	adds	r3, r7, #4
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002ea0:	1d3b      	adds	r3, r7, #4
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002ea6:	1d3b      	adds	r3, r7, #4
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002eac:	1d3a      	adds	r2, r7, #4
 8002eae:	4b08      	ldr	r3, [pc, #32]	@ (8002ed0 <MX_TIM1_Init+0x14c>)
 8002eb0:	0011      	movs	r1, r2
 8002eb2:	0018      	movs	r0, r3
 8002eb4:	f007 f98a 	bl	800a1cc <HAL_TIMEx_ConfigBreakDeadTime>
 8002eb8:	1e03      	subs	r3, r0, #0
 8002eba:	d001      	beq.n	8002ec0 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8002ebc:	f000 f98a 	bl	80031d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002ec0:	4b03      	ldr	r3, [pc, #12]	@ (8002ed0 <MX_TIM1_Init+0x14c>)
 8002ec2:	0018      	movs	r0, r3
 8002ec4:	f001 fb0e 	bl	80044e4 <HAL_TIM_MspPostInit>

}
 8002ec8:	46c0      	nop			@ (mov r8, r8)
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	b018      	add	sp, #96	@ 0x60
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	20000474 	.word	0x20000474
 8002ed4:	40012c00 	.word	0x40012c00

08002ed8 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002edc:	4b0e      	ldr	r3, [pc, #56]	@ (8002f18 <MX_TIM14_Init+0x40>)
 8002ede:	4a0f      	ldr	r2, [pc, #60]	@ (8002f1c <MX_TIM14_Init+0x44>)
 8002ee0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 800 - 1 ;
 8002ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8002f18 <MX_TIM14_Init+0x40>)
 8002ee4:	4a0e      	ldr	r2, [pc, #56]	@ (8002f20 <MX_TIM14_Init+0x48>)
 8002ee6:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8002f18 <MX_TIM14_Init+0x40>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000 - 1;
 8002eee:	4b0a      	ldr	r3, [pc, #40]	@ (8002f18 <MX_TIM14_Init+0x40>)
 8002ef0:	4a0c      	ldr	r2, [pc, #48]	@ (8002f24 <MX_TIM14_Init+0x4c>)
 8002ef2:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ef4:	4b08      	ldr	r3, [pc, #32]	@ (8002f18 <MX_TIM14_Init+0x40>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002efa:	4b07      	ldr	r3, [pc, #28]	@ (8002f18 <MX_TIM14_Init+0x40>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002f00:	4b05      	ldr	r3, [pc, #20]	@ (8002f18 <MX_TIM14_Init+0x40>)
 8002f02:	0018      	movs	r0, r3
 8002f04:	f006 f920 	bl	8009148 <HAL_TIM_Base_Init>
 8002f08:	1e03      	subs	r3, r0, #0
 8002f0a:	d001      	beq.n	8002f10 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8002f0c:	f000 f962 	bl	80031d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8002f10:	46c0      	nop			@ (mov r8, r8)
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	46c0      	nop			@ (mov r8, r8)
 8002f18:	200004c0 	.word	0x200004c0
 8002f1c:	40002000 	.word	0x40002000
 8002f20:	0000031f 	.word	0x0000031f
 8002f24:	0000270f 	.word	0x0000270f

08002f28 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002f2c:	4b24      	ldr	r3, [pc, #144]	@ (8002fc0 <MX_USART1_UART_Init+0x98>)
 8002f2e:	4a25      	ldr	r2, [pc, #148]	@ (8002fc4 <MX_USART1_UART_Init+0x9c>)
 8002f30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002f32:	4b23      	ldr	r3, [pc, #140]	@ (8002fc0 <MX_USART1_UART_Init+0x98>)
 8002f34:	2296      	movs	r2, #150	@ 0x96
 8002f36:	0192      	lsls	r2, r2, #6
 8002f38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f3a:	4b21      	ldr	r3, [pc, #132]	@ (8002fc0 <MX_USART1_UART_Init+0x98>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002f40:	4b1f      	ldr	r3, [pc, #124]	@ (8002fc0 <MX_USART1_UART_Init+0x98>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002f46:	4b1e      	ldr	r3, [pc, #120]	@ (8002fc0 <MX_USART1_UART_Init+0x98>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f4c:	4b1c      	ldr	r3, [pc, #112]	@ (8002fc0 <MX_USART1_UART_Init+0x98>)
 8002f4e:	220c      	movs	r2, #12
 8002f50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f52:	4b1b      	ldr	r3, [pc, #108]	@ (8002fc0 <MX_USART1_UART_Init+0x98>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f58:	4b19      	ldr	r3, [pc, #100]	@ (8002fc0 <MX_USART1_UART_Init+0x98>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f5e:	4b18      	ldr	r3, [pc, #96]	@ (8002fc0 <MX_USART1_UART_Init+0x98>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002f64:	4b16      	ldr	r3, [pc, #88]	@ (8002fc0 <MX_USART1_UART_Init+0x98>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f6a:	4b15      	ldr	r3, [pc, #84]	@ (8002fc0 <MX_USART1_UART_Init+0x98>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8002f70:	4813      	ldr	r0, [pc, #76]	@ (8002fc0 <MX_USART1_UART_Init+0x98>)
 8002f72:	2300      	movs	r3, #0
 8002f74:	2200      	movs	r2, #0
 8002f76:	2100      	movs	r1, #0
 8002f78:	f008 fd4c 	bl	800ba14 <HAL_RS485Ex_Init>
 8002f7c:	1e03      	subs	r3, r0, #0
 8002f7e:	d001      	beq.n	8002f84 <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 8002f80:	f000 f928 	bl	80031d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f84:	4b0e      	ldr	r3, [pc, #56]	@ (8002fc0 <MX_USART1_UART_Init+0x98>)
 8002f86:	2100      	movs	r1, #0
 8002f88:	0018      	movs	r0, r3
 8002f8a:	f008 fe07 	bl	800bb9c <HAL_UARTEx_SetTxFifoThreshold>
 8002f8e:	1e03      	subs	r3, r0, #0
 8002f90:	d001      	beq.n	8002f96 <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 8002f92:	f000 f91f 	bl	80031d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f96:	4b0a      	ldr	r3, [pc, #40]	@ (8002fc0 <MX_USART1_UART_Init+0x98>)
 8002f98:	2100      	movs	r1, #0
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	f008 fe3e 	bl	800bc1c <HAL_UARTEx_SetRxFifoThreshold>
 8002fa0:	1e03      	subs	r3, r0, #0
 8002fa2:	d001      	beq.n	8002fa8 <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 8002fa4:	f000 f916 	bl	80031d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002fa8:	4b05      	ldr	r3, [pc, #20]	@ (8002fc0 <MX_USART1_UART_Init+0x98>)
 8002faa:	0018      	movs	r0, r3
 8002fac:	f008 fdbc 	bl	800bb28 <HAL_UARTEx_DisableFifoMode>
 8002fb0:	1e03      	subs	r3, r0, #0
 8002fb2:	d001      	beq.n	8002fb8 <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 8002fb4:	f000 f90e 	bl	80031d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002fb8:	46c0      	nop			@ (mov r8, r8)
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	46c0      	nop			@ (mov r8, r8)
 8002fc0:	2000050c 	.word	0x2000050c
 8002fc4:	40013800 	.word	0x40013800

08002fc8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002fce:	4b13      	ldr	r3, [pc, #76]	@ (800301c <MX_DMA_Init+0x54>)
 8002fd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002fd2:	4b12      	ldr	r3, [pc, #72]	@ (800301c <MX_DMA_Init+0x54>)
 8002fd4:	2101      	movs	r1, #1
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	639a      	str	r2, [r3, #56]	@ 0x38
 8002fda:	4b10      	ldr	r3, [pc, #64]	@ (800301c <MX_DMA_Init+0x54>)
 8002fdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fde:	2201      	movs	r2, #1
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	607b      	str	r3, [r7, #4]
 8002fe4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, 0);
 8002fe6:	2100      	movs	r1, #0
 8002fe8:	2009      	movs	r0, #9
 8002fea:	f7fe fc9b 	bl	8001924 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002fee:	2009      	movs	r0, #9
 8002ff0:	f7fe fc7e 	bl	80018f0 <__NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	2100      	movs	r1, #0
 8002ff8:	200a      	movs	r0, #10
 8002ffa:	f001 feed 	bl	8004dd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8002ffe:	200a      	movs	r0, #10
 8003000:	f001 feff 	bl	8004e02 <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_DMA1_CH4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_DMA1_CH4_5_IRQn, 0, 0);
 8003004:	2200      	movs	r2, #0
 8003006:	2100      	movs	r1, #0
 8003008:	200b      	movs	r0, #11
 800300a:	f001 fee5 	bl	8004dd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_DMA1_CH4_5_IRQn);
 800300e:	200b      	movs	r0, #11
 8003010:	f001 fef7 	bl	8004e02 <HAL_NVIC_EnableIRQ>

}
 8003014:	46c0      	nop			@ (mov r8, r8)
 8003016:	46bd      	mov	sp, r7
 8003018:	b002      	add	sp, #8
 800301a:	bd80      	pop	{r7, pc}
 800301c:	40021000 	.word	0x40021000

08003020 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003020:	b590      	push	{r4, r7, lr}
 8003022:	b08b      	sub	sp, #44	@ 0x2c
 8003024:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003026:	2414      	movs	r4, #20
 8003028:	193b      	adds	r3, r7, r4
 800302a:	0018      	movs	r0, r3
 800302c:	2314      	movs	r3, #20
 800302e:	001a      	movs	r2, r3
 8003030:	2100      	movs	r1, #0
 8003032:	f009 f8d7 	bl	800c1e4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003036:	4b62      	ldr	r3, [pc, #392]	@ (80031c0 <MX_GPIO_Init+0x1a0>)
 8003038:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800303a:	4b61      	ldr	r3, [pc, #388]	@ (80031c0 <MX_GPIO_Init+0x1a0>)
 800303c:	2104      	movs	r1, #4
 800303e:	430a      	orrs	r2, r1
 8003040:	635a      	str	r2, [r3, #52]	@ 0x34
 8003042:	4b5f      	ldr	r3, [pc, #380]	@ (80031c0 <MX_GPIO_Init+0x1a0>)
 8003044:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003046:	2204      	movs	r2, #4
 8003048:	4013      	ands	r3, r2
 800304a:	613b      	str	r3, [r7, #16]
 800304c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800304e:	4b5c      	ldr	r3, [pc, #368]	@ (80031c0 <MX_GPIO_Init+0x1a0>)
 8003050:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003052:	4b5b      	ldr	r3, [pc, #364]	@ (80031c0 <MX_GPIO_Init+0x1a0>)
 8003054:	2120      	movs	r1, #32
 8003056:	430a      	orrs	r2, r1
 8003058:	635a      	str	r2, [r3, #52]	@ 0x34
 800305a:	4b59      	ldr	r3, [pc, #356]	@ (80031c0 <MX_GPIO_Init+0x1a0>)
 800305c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800305e:	2220      	movs	r2, #32
 8003060:	4013      	ands	r3, r2
 8003062:	60fb      	str	r3, [r7, #12]
 8003064:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003066:	4b56      	ldr	r3, [pc, #344]	@ (80031c0 <MX_GPIO_Init+0x1a0>)
 8003068:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800306a:	4b55      	ldr	r3, [pc, #340]	@ (80031c0 <MX_GPIO_Init+0x1a0>)
 800306c:	2101      	movs	r1, #1
 800306e:	430a      	orrs	r2, r1
 8003070:	635a      	str	r2, [r3, #52]	@ 0x34
 8003072:	4b53      	ldr	r3, [pc, #332]	@ (80031c0 <MX_GPIO_Init+0x1a0>)
 8003074:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003076:	2201      	movs	r2, #1
 8003078:	4013      	ands	r3, r2
 800307a:	60bb      	str	r3, [r7, #8]
 800307c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800307e:	4b50      	ldr	r3, [pc, #320]	@ (80031c0 <MX_GPIO_Init+0x1a0>)
 8003080:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003082:	4b4f      	ldr	r3, [pc, #316]	@ (80031c0 <MX_GPIO_Init+0x1a0>)
 8003084:	2102      	movs	r1, #2
 8003086:	430a      	orrs	r2, r1
 8003088:	635a      	str	r2, [r3, #52]	@ 0x34
 800308a:	4b4d      	ldr	r3, [pc, #308]	@ (80031c0 <MX_GPIO_Init+0x1a0>)
 800308c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800308e:	2202      	movs	r2, #2
 8003090:	4013      	ands	r3, r2
 8003092:	607b      	str	r3, [r7, #4]
 8003094:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003096:	4b4a      	ldr	r3, [pc, #296]	@ (80031c0 <MX_GPIO_Init+0x1a0>)
 8003098:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800309a:	4b49      	ldr	r3, [pc, #292]	@ (80031c0 <MX_GPIO_Init+0x1a0>)
 800309c:	2108      	movs	r1, #8
 800309e:	430a      	orrs	r2, r1
 80030a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80030a2:	4b47      	ldr	r3, [pc, #284]	@ (80031c0 <MX_GPIO_Init+0x1a0>)
 80030a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030a6:	2208      	movs	r2, #8
 80030a8:	4013      	ands	r3, r2
 80030aa:	603b      	str	r3, [r7, #0]
 80030ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Actuator_C_EN_GPIO_Port, Actuator_C_EN_Pin, GPIO_PIN_RESET);
 80030ae:	4b45      	ldr	r3, [pc, #276]	@ (80031c4 <MX_GPIO_Init+0x1a4>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	2101      	movs	r1, #1
 80030b4:	0018      	movs	r0, r3
 80030b6:	f002 fcf6 	bl	8005aa6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Actuator_A_EN_Pin|Actuator_B_EN_Pin, GPIO_PIN_RESET);
 80030ba:	4b43      	ldr	r3, [pc, #268]	@ (80031c8 <MX_GPIO_Init+0x1a8>)
 80030bc:	2200      	movs	r2, #0
 80030be:	21c0      	movs	r1, #192	@ 0xc0
 80030c0:	0018      	movs	r0, r3
 80030c2:	f002 fcf0 	bl	8005aa6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_SET);
 80030c6:	4b41      	ldr	r3, [pc, #260]	@ (80031cc <MX_GPIO_Init+0x1ac>)
 80030c8:	2201      	movs	r2, #1
 80030ca:	2101      	movs	r1, #1
 80030cc:	0018      	movs	r0, r3
 80030ce:	f002 fcea 	bl	8005aa6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Actuator_C_EN_Pin */
  GPIO_InitStruct.Pin = Actuator_C_EN_Pin;
 80030d2:	193b      	adds	r3, r7, r4
 80030d4:	2201      	movs	r2, #1
 80030d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030d8:	193b      	adds	r3, r7, r4
 80030da:	2201      	movs	r2, #1
 80030dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030de:	193b      	adds	r3, r7, r4
 80030e0:	2200      	movs	r2, #0
 80030e2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030e4:	193b      	adds	r3, r7, r4
 80030e6:	2200      	movs	r2, #0
 80030e8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Actuator_C_EN_GPIO_Port, &GPIO_InitStruct);
 80030ea:	193b      	adds	r3, r7, r4
 80030ec:	4a35      	ldr	r2, [pc, #212]	@ (80031c4 <MX_GPIO_Init+0x1a4>)
 80030ee:	0019      	movs	r1, r3
 80030f0:	0010      	movs	r0, r2
 80030f2:	f002 fa71 	bl	80055d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Encoder_Pulse_A_Pin */
  GPIO_InitStruct.Pin = Encoder_Pulse_A_Pin;
 80030f6:	0021      	movs	r1, r4
 80030f8:	187b      	adds	r3, r7, r1
 80030fa:	2280      	movs	r2, #128	@ 0x80
 80030fc:	0192      	lsls	r2, r2, #6
 80030fe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003100:	000c      	movs	r4, r1
 8003102:	193b      	adds	r3, r7, r4
 8003104:	4a32      	ldr	r2, [pc, #200]	@ (80031d0 <MX_GPIO_Init+0x1b0>)
 8003106:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003108:	193b      	adds	r3, r7, r4
 800310a:	2200      	movs	r2, #0
 800310c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Encoder_Pulse_A_GPIO_Port, &GPIO_InitStruct);
 800310e:	193b      	adds	r3, r7, r4
 8003110:	4a2c      	ldr	r2, [pc, #176]	@ (80031c4 <MX_GPIO_Init+0x1a4>)
 8003112:	0019      	movs	r1, r3
 8003114:	0010      	movs	r0, r2
 8003116:	f002 fa5f 	bl	80055d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Encoder_Pulse_B_Pin */
  GPIO_InitStruct.Pin = Encoder_Pulse_B_Pin;
 800311a:	0021      	movs	r1, r4
 800311c:	187b      	adds	r3, r7, r1
 800311e:	2280      	movs	r2, #128	@ 0x80
 8003120:	01d2      	lsls	r2, r2, #7
 8003122:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003124:	000c      	movs	r4, r1
 8003126:	193b      	adds	r3, r7, r4
 8003128:	2200      	movs	r2, #0
 800312a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800312c:	193b      	adds	r3, r7, r4
 800312e:	2200      	movs	r2, #0
 8003130:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Encoder_Pulse_B_GPIO_Port, &GPIO_InitStruct);
 8003132:	193b      	adds	r3, r7, r4
 8003134:	4a23      	ldr	r2, [pc, #140]	@ (80031c4 <MX_GPIO_Init+0x1a4>)
 8003136:	0019      	movs	r1, r3
 8003138:	0010      	movs	r0, r2
 800313a:	f002 fa4d 	bl	80055d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Actuator_A_EN_Pin Actuator_B_EN_Pin */
  GPIO_InitStruct.Pin = Actuator_A_EN_Pin|Actuator_B_EN_Pin;
 800313e:	193b      	adds	r3, r7, r4
 8003140:	22c0      	movs	r2, #192	@ 0xc0
 8003142:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003144:	193b      	adds	r3, r7, r4
 8003146:	2201      	movs	r2, #1
 8003148:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314a:	193b      	adds	r3, r7, r4
 800314c:	2200      	movs	r2, #0
 800314e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003150:	193b      	adds	r3, r7, r4
 8003152:	2200      	movs	r2, #0
 8003154:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003156:	193b      	adds	r3, r7, r4
 8003158:	4a1b      	ldr	r2, [pc, #108]	@ (80031c8 <MX_GPIO_Init+0x1a8>)
 800315a:	0019      	movs	r1, r3
 800315c:	0010      	movs	r0, r2
 800315e:	f002 fa3b 	bl	80055d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Actuator_CS_Pin */
  GPIO_InitStruct.Pin = Actuator_CS_Pin;
 8003162:	193b      	adds	r3, r7, r4
 8003164:	2201      	movs	r2, #1
 8003166:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003168:	193b      	adds	r3, r7, r4
 800316a:	2201      	movs	r2, #1
 800316c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800316e:	193b      	adds	r3, r7, r4
 8003170:	2200      	movs	r2, #0
 8003172:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003174:	193b      	adds	r3, r7, r4
 8003176:	2203      	movs	r2, #3
 8003178:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Actuator_CS_GPIO_Port, &GPIO_InitStruct);
 800317a:	193b      	adds	r3, r7, r4
 800317c:	4a13      	ldr	r2, [pc, #76]	@ (80031cc <MX_GPIO_Init+0x1ac>)
 800317e:	0019      	movs	r1, r3
 8003180:	0010      	movs	r0, r2
 8003182:	f002 fa29 	bl	80055d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_Reset_Pin */
  GPIO_InitStruct.Pin = IMU_Reset_Pin;
 8003186:	0021      	movs	r1, r4
 8003188:	187b      	adds	r3, r7, r1
 800318a:	2202      	movs	r2, #2
 800318c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800318e:	187b      	adds	r3, r7, r1
 8003190:	2200      	movs	r2, #0
 8003192:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003194:	187b      	adds	r3, r7, r1
 8003196:	2200      	movs	r2, #0
 8003198:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(IMU_Reset_GPIO_Port, &GPIO_InitStruct);
 800319a:	187b      	adds	r3, r7, r1
 800319c:	4a0b      	ldr	r2, [pc, #44]	@ (80031cc <MX_GPIO_Init+0x1ac>)
 800319e:	0019      	movs	r1, r3
 80031a0:	0010      	movs	r0, r2
 80031a2:	f002 fa19 	bl	80055d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80031a6:	2200      	movs	r2, #0
 80031a8:	2100      	movs	r1, #0
 80031aa:	2007      	movs	r0, #7
 80031ac:	f001 fe14 	bl	8004dd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80031b0:	2007      	movs	r0, #7
 80031b2:	f001 fe26 	bl	8004e02 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80031b6:	46c0      	nop			@ (mov r8, r8)
 80031b8:	46bd      	mov	sp, r7
 80031ba:	b00b      	add	sp, #44	@ 0x2c
 80031bc:	bd90      	pop	{r4, r7, pc}
 80031be:	46c0      	nop			@ (mov r8, r8)
 80031c0:	40021000 	.word	0x40021000
 80031c4:	50000400 	.word	0x50000400
 80031c8:	50000800 	.word	0x50000800
 80031cc:	50000c00 	.word	0x50000c00
 80031d0:	10110000 	.word	0x10110000

080031d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80031d8:	b672      	cpsid	i
}
 80031da:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80031dc:	46c0      	nop			@ (mov r8, r8)
 80031de:	e7fd      	b.n	80031dc <Error_Handler+0x8>

080031e0 <HAL_UARTEx_RxEventCallback>:

/*
 * Modbus reception handler function
 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80031e0:	b590      	push	{r4, r7, lr}
 80031e2:	b085      	sub	sp, #20
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	000a      	movs	r2, r1
 80031ea:	1cbb      	adds	r3, r7, #2
 80031ec:	801a      	strh	r2, [r3, #0]
	if(huart->Instance == USART1)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a45      	ldr	r2, [pc, #276]	@ (8003308 <HAL_UARTEx_RxEventCallback+0x128>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d000      	beq.n	80031fa <HAL_UARTEx_RxEventCallback+0x1a>
 80031f8:	e081      	b.n	80032fe <HAL_UARTEx_RxEventCallback+0x11e>
	{
		chunk_start_i = chunk_end_i;  // Update the last position before copying new data
 80031fa:	4b44      	ldr	r3, [pc, #272]	@ (800330c <HAL_UARTEx_RxEventCallback+0x12c>)
 80031fc:	881b      	ldrh	r3, [r3, #0]
 80031fe:	b29a      	uxth	r2, r3
 8003200:	4b43      	ldr	r3, [pc, #268]	@ (8003310 <HAL_UARTEx_RxEventCallback+0x130>)
 8003202:	801a      	strh	r2, [r3, #0]
		/*
		 * If the data is large and it is about to exceed the buffer size, we have to route it to the start of the buffer
		 * This is to maintain the circular buffer
		 * The old data in the main buffer will be overlapped
		 */
		if (chunk_start_i + Size > MODBUS_RX_BUFFER_SIZE)  // If the current position + new data size is greater than the main buffer
 8003204:	4b42      	ldr	r3, [pc, #264]	@ (8003310 <HAL_UARTEx_RxEventCallback+0x130>)
 8003206:	881b      	ldrh	r3, [r3, #0]
 8003208:	b29b      	uxth	r3, r3
 800320a:	001a      	movs	r2, r3
 800320c:	1cbb      	adds	r3, r7, #2
 800320e:	881b      	ldrh	r3, [r3, #0]
 8003210:	18d2      	adds	r2, r2, r3
 8003212:	2380      	movs	r3, #128	@ 0x80
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	429a      	cmp	r2, r3
 8003218:	dd29      	ble.n	800326e <HAL_UARTEx_RxEventCallback+0x8e>
		{
			uint16_t datatocopy = MODBUS_RX_BUFFER_SIZE - chunk_start_i;  // find out how much space is left in the main buffer
 800321a:	4b3d      	ldr	r3, [pc, #244]	@ (8003310 <HAL_UARTEx_RxEventCallback+0x130>)
 800321c:	881b      	ldrh	r3, [r3, #0]
 800321e:	b29a      	uxth	r2, r3
 8003220:	240e      	movs	r4, #14
 8003222:	193b      	adds	r3, r7, r4
 8003224:	2180      	movs	r1, #128	@ 0x80
 8003226:	0049      	lsls	r1, r1, #1
 8003228:	1a8a      	subs	r2, r1, r2
 800322a:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)(modbus_rx_buffer + chunk_start_i), rx_chunk, datatocopy);  // copy data in that remaining space
 800322c:	4b38      	ldr	r3, [pc, #224]	@ (8003310 <HAL_UARTEx_RxEventCallback+0x130>)
 800322e:	881b      	ldrh	r3, [r3, #0]
 8003230:	b29b      	uxth	r3, r3
 8003232:	001a      	movs	r2, r3
 8003234:	4b37      	ldr	r3, [pc, #220]	@ (8003314 <HAL_UARTEx_RxEventCallback+0x134>)
 8003236:	18d0      	adds	r0, r2, r3
 8003238:	193b      	adds	r3, r7, r4
 800323a:	881a      	ldrh	r2, [r3, #0]
 800323c:	4b36      	ldr	r3, [pc, #216]	@ (8003318 <HAL_UARTEx_RxEventCallback+0x138>)
 800323e:	0019      	movs	r1, r3
 8003240:	f008 fffc 	bl	800c23c <memcpy>

			chunk_end_i = (Size - datatocopy);  // update the position
 8003244:	1cba      	adds	r2, r7, #2
 8003246:	193b      	adds	r3, r7, r4
 8003248:	8812      	ldrh	r2, [r2, #0]
 800324a:	881b      	ldrh	r3, [r3, #0]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	b29a      	uxth	r2, r3
 8003250:	4b2e      	ldr	r3, [pc, #184]	@ (800330c <HAL_UARTEx_RxEventCallback+0x12c>)
 8003252:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)modbus_rx_buffer, (uint8_t *)(rx_chunk + datatocopy), chunk_end_i);  // copy the remaining data
 8003254:	193b      	adds	r3, r7, r4
 8003256:	881a      	ldrh	r2, [r3, #0]
 8003258:	4b2f      	ldr	r3, [pc, #188]	@ (8003318 <HAL_UARTEx_RxEventCallback+0x138>)
 800325a:	18d1      	adds	r1, r2, r3
 800325c:	4b2b      	ldr	r3, [pc, #172]	@ (800330c <HAL_UARTEx_RxEventCallback+0x12c>)
 800325e:	881b      	ldrh	r3, [r3, #0]
 8003260:	b29b      	uxth	r3, r3
 8003262:	001a      	movs	r2, r3
 8003264:	4b2b      	ldr	r3, [pc, #172]	@ (8003314 <HAL_UARTEx_RxEventCallback+0x134>)
 8003266:	0018      	movs	r0, r3
 8003268:	f008 ffe8 	bl	800c23c <memcpy>
 800326c:	e014      	b.n	8003298 <HAL_UARTEx_RxEventCallback+0xb8>
		 * If the current position + new data size is less than the main buffer
		 * we will simply copy the data into the buffer and update the position
		 */
		else
		{
			memcpy ((uint8_t *)(modbus_rx_buffer + chunk_start_i), rx_chunk, Size);
 800326e:	4b28      	ldr	r3, [pc, #160]	@ (8003310 <HAL_UARTEx_RxEventCallback+0x130>)
 8003270:	881b      	ldrh	r3, [r3, #0]
 8003272:	b29b      	uxth	r3, r3
 8003274:	001a      	movs	r2, r3
 8003276:	4b27      	ldr	r3, [pc, #156]	@ (8003314 <HAL_UARTEx_RxEventCallback+0x134>)
 8003278:	18d0      	adds	r0, r2, r3
 800327a:	1cbb      	adds	r3, r7, #2
 800327c:	881a      	ldrh	r2, [r3, #0]
 800327e:	4b26      	ldr	r3, [pc, #152]	@ (8003318 <HAL_UARTEx_RxEventCallback+0x138>)
 8003280:	0019      	movs	r1, r3
 8003282:	f008 ffdb 	bl	800c23c <memcpy>
			chunk_end_i = Size + chunk_start_i;
 8003286:	4b22      	ldr	r3, [pc, #136]	@ (8003310 <HAL_UARTEx_RxEventCallback+0x130>)
 8003288:	881b      	ldrh	r3, [r3, #0]
 800328a:	b29a      	uxth	r2, r3
 800328c:	1cbb      	adds	r3, r7, #2
 800328e:	881b      	ldrh	r3, [r3, #0]
 8003290:	18d3      	adds	r3, r2, r3
 8003292:	b29a      	uxth	r2, r3
 8003294:	4b1d      	ldr	r3, [pc, #116]	@ (800330c <HAL_UARTEx_RxEventCallback+0x12c>)
 8003296:	801a      	strh	r2, [r3, #0]
		}

		if(modbus_header)
 8003298:	4b20      	ldr	r3, [pc, #128]	@ (800331c <HAL_UARTEx_RxEventCallback+0x13c>)
 800329a:	881b      	ldrh	r3, [r3, #0]
 800329c:	b29b      	uxth	r3, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d027      	beq.n	80032f2 <HAL_UARTEx_RxEventCallback+0x112>
		{
			// Log the time for chunk miss error handling
			chunk_time = HAL_GetTick();
 80032a2:	f001 fc9d 	bl	8004be0 <HAL_GetTick>
 80032a6:	0002      	movs	r2, r0
 80032a8:	4b1d      	ldr	r3, [pc, #116]	@ (8003320 <HAL_UARTEx_RxEventCallback+0x140>)
 80032aa:	601a      	str	r2, [r3, #0]

			start_index = chunk_start_i;
 80032ac:	4b18      	ldr	r3, [pc, #96]	@ (8003310 <HAL_UARTEx_RxEventCallback+0x130>)
 80032ae:	881b      	ldrh	r3, [r3, #0]
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	4b1c      	ldr	r3, [pc, #112]	@ (8003324 <HAL_UARTEx_RxEventCallback+0x144>)
 80032b4:	801a      	strh	r2, [r3, #0]
			modbus_header = 0;
 80032b6:	4b19      	ldr	r3, [pc, #100]	@ (800331c <HAL_UARTEx_RxEventCallback+0x13c>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	801a      	strh	r2, [r3, #0]

			// Setup the DMA to receive the # message bytes + crc + 1 in the event that the # bytes is in the message
			HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rx_chunk, (uint16_t)(((rx_chunk[4] << 8) | rx_chunk[5])*2 + 2 + 1));
 80032bc:	4b16      	ldr	r3, [pc, #88]	@ (8003318 <HAL_UARTEx_RxEventCallback+0x138>)
 80032be:	791b      	ldrb	r3, [r3, #4]
 80032c0:	021b      	lsls	r3, r3, #8
 80032c2:	4a15      	ldr	r2, [pc, #84]	@ (8003318 <HAL_UARTEx_RxEventCallback+0x138>)
 80032c4:	7952      	ldrb	r2, [r2, #5]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	3301      	adds	r3, #1
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	18db      	adds	r3, r3, r3
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	3301      	adds	r3, #1
 80032d4:	b29a      	uxth	r2, r3
 80032d6:	4910      	ldr	r1, [pc, #64]	@ (8003318 <HAL_UARTEx_RxEventCallback+0x138>)
 80032d8:	4b13      	ldr	r3, [pc, #76]	@ (8003328 <HAL_UARTEx_RxEventCallback+0x148>)
 80032da:	0018      	movs	r0, r3
 80032dc:	f008 fce0 	bl	800bca0 <HAL_UARTEx_ReceiveToIdle_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80032e0:	4b12      	ldr	r3, [pc, #72]	@ (800332c <HAL_UARTEx_RxEventCallback+0x14c>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	4b11      	ldr	r3, [pc, #68]	@ (800332c <HAL_UARTEx_RxEventCallback+0x14c>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2104      	movs	r1, #4
 80032ec:	438a      	bics	r2, r1
 80032ee:	601a      	str	r2, [r3, #0]
			 */
			modbus_header = 1;
			uart_rx_int = 1;
		}
	}
}
 80032f0:	e005      	b.n	80032fe <HAL_UARTEx_RxEventCallback+0x11e>
			modbus_header = 1;
 80032f2:	4b0a      	ldr	r3, [pc, #40]	@ (800331c <HAL_UARTEx_RxEventCallback+0x13c>)
 80032f4:	2201      	movs	r2, #1
 80032f6:	801a      	strh	r2, [r3, #0]
			uart_rx_int = 1;
 80032f8:	4b0d      	ldr	r3, [pc, #52]	@ (8003330 <HAL_UARTEx_RxEventCallback+0x150>)
 80032fa:	2201      	movs	r2, #1
 80032fc:	701a      	strb	r2, [r3, #0]
}
 80032fe:	46c0      	nop			@ (mov r8, r8)
 8003300:	46bd      	mov	sp, r7
 8003302:	b005      	add	sp, #20
 8003304:	bd90      	pop	{r4, r7, pc}
 8003306:	46c0      	nop			@ (mov r8, r8)
 8003308:	40013800 	.word	0x40013800
 800330c:	200009b0 	.word	0x200009b0
 8003310:	200009ae 	.word	0x200009ae
 8003314:	200006a8 	.word	0x200006a8
 8003318:	200008a8 	.word	0x200008a8
 800331c:	200000b4 	.word	0x200000b4
 8003320:	200009a8 	.word	0x200009a8
 8003324:	200009ac 	.word	0x200009ac
 8003328:	2000050c 	.word	0x2000050c
 800332c:	200005a0 	.word	0x200005a0
 8003330:	200009b2 	.word	0x200009b2

08003334 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
	uart_tx_int = 1;
 800333c:	4b03      	ldr	r3, [pc, #12]	@ (800334c <HAL_UART_TxCpltCallback+0x18>)
 800333e:	2201      	movs	r2, #1
 8003340:	701a      	strb	r2, [r3, #0]
}
 8003342:	46c0      	nop			@ (mov r8, r8)
 8003344:	46bd      	mov	sp, r7
 8003346:	b002      	add	sp, #8
 8003348:	bd80      	pop	{r7, pc}
 800334a:	46c0      	nop			@ (mov r8, r8)
 800334c:	200000b6 	.word	0x200000b6

08003350 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
	uart_err_int = 1;
 8003358:	4b07      	ldr	r3, [pc, #28]	@ (8003378 <HAL_UART_ErrorCallback+0x28>)
 800335a:	2201      	movs	r2, #1
 800335c:	701a      	strb	r2, [r3, #0]
	__HAL_UART_DISABLE_IT(&huart1, UART_IT_MASK);
 800335e:	4b07      	ldr	r3, [pc, #28]	@ (800337c <HAL_UART_ErrorCallback+0x2c>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	689a      	ldr	r2, [r3, #8]
 8003364:	4b05      	ldr	r3, [pc, #20]	@ (800337c <HAL_UART_ErrorCallback+0x2c>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	0052      	lsls	r2, r2, #1
 800336a:	0852      	lsrs	r2, r2, #1
 800336c:	609a      	str	r2, [r3, #8]
}
 800336e:	46c0      	nop			@ (mov r8, r8)
 8003370:	46bd      	mov	sp, r7
 8003372:	b002      	add	sp, #8
 8003374:	bd80      	pop	{r7, pc}
 8003376:	46c0      	nop			@ (mov r8, r8)
 8003378:	200009b3 	.word	0x200009b3
 800337c:	2000050c 	.word	0x2000050c

08003380 <modbus_rx>:

// Modbus Slave Functions ---------------------------------------------------------------------

#ifdef MB_SLAVE
uint8_t modbus_rx()
{
 8003380:	b580      	push	{r7, lr}
 8003382:	af00      	add	r7, sp, #0
	if(uart_rx_int)
 8003384:	4b06      	ldr	r3, [pc, #24]	@ (80033a0 <modbus_rx+0x20>)
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d004      	beq.n	8003398 <modbus_rx+0x18>
	{
		uart_rx_int = 0;
 800338e:	4b04      	ldr	r3, [pc, #16]	@ (80033a0 <modbus_rx+0x20>)
 8003390:	2200      	movs	r2, #0
 8003392:	701a      	strb	r2, [r3, #0]
		return 1;
 8003394:	2301      	movs	r3, #1
 8003396:	e000      	b.n	800339a <modbus_rx+0x1a>
	}
	return 0;
 8003398:	2300      	movs	r3, #0
}
 800339a:	0018      	movs	r0, r3
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	200009b2 	.word	0x200009b2

080033a4 <return_holding_registers>:

int8_t return_holding_registers(uint8_t* tx_len)
{
 80033a4:	b5b0      	push	{r4, r5, r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
	(*tx_len) = 0;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	701a      	strb	r2, [r3, #0]
	// Handle Error Checking
	uint16_t first_register_address = (get_rx_buffer(2) << 8) | get_rx_buffer(3);
 80033b2:	2002      	movs	r0, #2
 80033b4:	f000 fc82 	bl	8003cbc <get_rx_buffer>
 80033b8:	0003      	movs	r3, r0
 80033ba:	021b      	lsls	r3, r3, #8
 80033bc:	b21c      	sxth	r4, r3
 80033be:	2003      	movs	r0, #3
 80033c0:	f000 fc7c 	bl	8003cbc <get_rx_buffer>
 80033c4:	0003      	movs	r3, r0
 80033c6:	b21b      	sxth	r3, r3
 80033c8:	4323      	orrs	r3, r4
 80033ca:	b21a      	sxth	r2, r3
 80033cc:	230c      	movs	r3, #12
 80033ce:	18fb      	adds	r3, r7, r3
 80033d0:	801a      	strh	r2, [r3, #0]

	// Get the number of registers requested by the master
	uint16_t num_registers = (get_rx_buffer(4) << 8) | get_rx_buffer(5);
 80033d2:	2004      	movs	r0, #4
 80033d4:	f000 fc72 	bl	8003cbc <get_rx_buffer>
 80033d8:	0003      	movs	r3, r0
 80033da:	021b      	lsls	r3, r3, #8
 80033dc:	b21c      	sxth	r4, r3
 80033de:	2005      	movs	r0, #5
 80033e0:	f000 fc6c 	bl	8003cbc <get_rx_buffer>
 80033e4:	0003      	movs	r3, r0
 80033e6:	b21b      	sxth	r3, r3
 80033e8:	4323      	orrs	r3, r4
 80033ea:	b21a      	sxth	r2, r3
 80033ec:	210a      	movs	r1, #10
 80033ee:	187b      	adds	r3, r7, r1
 80033f0:	801a      	strh	r2, [r3, #0]

	if(num_registers > RX_BUFFER_SIZE || num_registers < 1) // 125 is the limit according to modbus protocol
 80033f2:	000a      	movs	r2, r1
 80033f4:	18bb      	adds	r3, r7, r2
 80033f6:	881b      	ldrh	r3, [r3, #0]
 80033f8:	2b7d      	cmp	r3, #125	@ 0x7d
 80033fa:	d803      	bhi.n	8003404 <return_holding_registers+0x60>
 80033fc:	18bb      	adds	r3, r7, r2
 80033fe:	881b      	ldrh	r3, [r3, #0]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d104      	bne.n	800340e <return_holding_registers+0x6a>
	{
		return modbus_exception(MB_ILLEGAL_DATA_VALUE);
 8003404:	2006      	movs	r0, #6
 8003406:	f000 f97b 	bl	8003700 <modbus_exception>
 800340a:	0003      	movs	r3, r0
 800340c:	e06e      	b.n	80034ec <return_holding_registers+0x148>
	}

	uint16_t last_register_address = first_register_address + (num_registers - 1);
 800340e:	230a      	movs	r3, #10
 8003410:	18fa      	adds	r2, r7, r3
 8003412:	230c      	movs	r3, #12
 8003414:	18fb      	adds	r3, r7, r3
 8003416:	8812      	ldrh	r2, [r2, #0]
 8003418:	881b      	ldrh	r3, [r3, #0]
 800341a:	18d3      	adds	r3, r2, r3
 800341c:	b29a      	uxth	r2, r3
 800341e:	2108      	movs	r1, #8
 8003420:	187b      	adds	r3, r7, r1
 8003422:	3a01      	subs	r2, #1
 8003424:	801a      	strh	r2, [r3, #0]

	if(last_register_address > NUM_HOLDING_REGISTERS)
 8003426:	187b      	adds	r3, r7, r1
 8003428:	881b      	ldrh	r3, [r3, #0]
 800342a:	2b50      	cmp	r3, #80	@ 0x50
 800342c:	d904      	bls.n	8003438 <return_holding_registers+0x94>
	{
		return modbus_exception(MB_ILLEGAL_DATA_ADDRESS);
 800342e:	2005      	movs	r0, #5
 8003430:	f000 f966 	bl	8003700 <modbus_exception>
 8003434:	0003      	movs	r3, r0
 8003436:	e059      	b.n	80034ec <return_holding_registers+0x148>
	}

	// Return register values

	modbus_tx_buffer[0] = get_rx_buffer(0); // Append Slave id
 8003438:	2000      	movs	r0, #0
 800343a:	f000 fc3f 	bl	8003cbc <get_rx_buffer>
 800343e:	0003      	movs	r3, r0
 8003440:	001a      	movs	r2, r3
 8003442:	4b2c      	ldr	r3, [pc, #176]	@ (80034f4 <return_holding_registers+0x150>)
 8003444:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = get_rx_buffer(1); // Append Function Code
 8003446:	2001      	movs	r0, #1
 8003448:	f000 fc38 	bl	8003cbc <get_rx_buffer>
 800344c:	0003      	movs	r3, r0
 800344e:	001a      	movs	r2, r3
 8003450:	4b28      	ldr	r3, [pc, #160]	@ (80034f4 <return_holding_registers+0x150>)
 8003452:	705a      	strb	r2, [r3, #1]
	modbus_tx_buffer[2] = num_registers * 2; // Append number of bytes
 8003454:	230a      	movs	r3, #10
 8003456:	18fb      	adds	r3, r7, r3
 8003458:	881b      	ldrh	r3, [r3, #0]
 800345a:	b2db      	uxtb	r3, r3
 800345c:	18db      	adds	r3, r3, r3
 800345e:	b2da      	uxtb	r2, r3
 8003460:	4b24      	ldr	r3, [pc, #144]	@ (80034f4 <return_holding_registers+0x150>)
 8003462:	709a      	strb	r2, [r3, #2]
	(*tx_len) = 3;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2203      	movs	r2, #3
 8003468:	701a      	strb	r2, [r3, #0]
//		prim = __get_PRIMASK();
//		__disable_irq();
	}

	// Append the Register Values
	for(uint8_t i = 0; i < num_registers; i++)
 800346a:	230f      	movs	r3, #15
 800346c:	18fb      	adds	r3, r7, r3
 800346e:	2200      	movs	r2, #0
 8003470:	701a      	strb	r2, [r3, #0]
 8003472:	e02c      	b.n	80034ce <return_holding_registers+0x12a>
	{
		modbus_tx_buffer[(*tx_len)++] = high_byte(holding_register_database[first_register_address + i]);
 8003474:	250c      	movs	r5, #12
 8003476:	197b      	adds	r3, r7, r5
 8003478:	881a      	ldrh	r2, [r3, #0]
 800347a:	240f      	movs	r4, #15
 800347c:	193b      	adds	r3, r7, r4
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	18d2      	adds	r2, r2, r3
 8003482:	4b1d      	ldr	r3, [pc, #116]	@ (80034f8 <return_holding_registers+0x154>)
 8003484:	0052      	lsls	r2, r2, #1
 8003486:	5ad3      	ldrh	r3, [r2, r3]
 8003488:	0a1b      	lsrs	r3, r3, #8
 800348a:	b299      	uxth	r1, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	1c5a      	adds	r2, r3, #1
 8003492:	b2d0      	uxtb	r0, r2
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	7010      	strb	r0, [r2, #0]
 8003498:	001a      	movs	r2, r3
 800349a:	b2c9      	uxtb	r1, r1
 800349c:	4b15      	ldr	r3, [pc, #84]	@ (80034f4 <return_holding_registers+0x150>)
 800349e:	5499      	strb	r1, [r3, r2]
		modbus_tx_buffer[(*tx_len)++] = low_byte(holding_register_database[first_register_address + i]);
 80034a0:	197b      	adds	r3, r7, r5
 80034a2:	881a      	ldrh	r2, [r3, #0]
 80034a4:	193b      	adds	r3, r7, r4
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	18d2      	adds	r2, r2, r3
 80034aa:	4b13      	ldr	r3, [pc, #76]	@ (80034f8 <return_holding_registers+0x154>)
 80034ac:	0052      	lsls	r2, r2, #1
 80034ae:	5ad1      	ldrh	r1, [r2, r3]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	1c5a      	adds	r2, r3, #1
 80034b6:	b2d0      	uxtb	r0, r2
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	7010      	strb	r0, [r2, #0]
 80034bc:	001a      	movs	r2, r3
 80034be:	b2c9      	uxtb	r1, r1
 80034c0:	4b0c      	ldr	r3, [pc, #48]	@ (80034f4 <return_holding_registers+0x150>)
 80034c2:	5499      	strb	r1, [r3, r2]
	for(uint8_t i = 0; i < num_registers; i++)
 80034c4:	193b      	adds	r3, r7, r4
 80034c6:	781a      	ldrb	r2, [r3, #0]
 80034c8:	193b      	adds	r3, r7, r4
 80034ca:	3201      	adds	r2, #1
 80034cc:	701a      	strb	r2, [r3, #0]
 80034ce:	230f      	movs	r3, #15
 80034d0:	18fb      	adds	r3, r7, r3
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	220a      	movs	r2, #10
 80034d8:	18ba      	adds	r2, r7, r2
 80034da:	8812      	ldrh	r2, [r2, #0]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d8c9      	bhi.n	8003474 <return_holding_registers+0xd0>
//		if(prim == 0)
//		{
//			__enable_irq();
//		}
	}
	return modbus_send((*tx_len));
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	0018      	movs	r0, r3
 80034e6:	f000 fa19 	bl	800391c <modbus_send>
 80034ea:	0003      	movs	r3, r0
}
 80034ec:	0018      	movs	r0, r3
 80034ee:	46bd      	mov	sp, r7
 80034f0:	b004      	add	sp, #16
 80034f2:	bdb0      	pop	{r4, r5, r7, pc}
 80034f4:	200007a8 	.word	0x200007a8
 80034f8:	20000014 	.word	0x20000014

080034fc <edit_multiple_registers>:

int8_t edit_multiple_registers(uint8_t *tx_len)
{
 80034fc:	b5b0      	push	{r4, r5, r7, lr}
 80034fe:	b086      	sub	sp, #24
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
	(*tx_len) = 0;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	701a      	strb	r2, [r3, #0]
	// Handle Error Checking
	uint16_t first_register_address = (get_rx_buffer(2) << 8) | get_rx_buffer(3);
 800350a:	2002      	movs	r0, #2
 800350c:	f000 fbd6 	bl	8003cbc <get_rx_buffer>
 8003510:	0003      	movs	r3, r0
 8003512:	021b      	lsls	r3, r3, #8
 8003514:	b21c      	sxth	r4, r3
 8003516:	2003      	movs	r0, #3
 8003518:	f000 fbd0 	bl	8003cbc <get_rx_buffer>
 800351c:	0003      	movs	r3, r0
 800351e:	b21b      	sxth	r3, r3
 8003520:	4323      	orrs	r3, r4
 8003522:	b21a      	sxth	r2, r3
 8003524:	2314      	movs	r3, #20
 8003526:	18fb      	adds	r3, r7, r3
 8003528:	801a      	strh	r2, [r3, #0]

	uint16_t num_registers = (get_rx_buffer(4) << 8) | get_rx_buffer(5);
 800352a:	2004      	movs	r0, #4
 800352c:	f000 fbc6 	bl	8003cbc <get_rx_buffer>
 8003530:	0003      	movs	r3, r0
 8003532:	021b      	lsls	r3, r3, #8
 8003534:	b21c      	sxth	r4, r3
 8003536:	2005      	movs	r0, #5
 8003538:	f000 fbc0 	bl	8003cbc <get_rx_buffer>
 800353c:	0003      	movs	r3, r0
 800353e:	b21b      	sxth	r3, r3
 8003540:	4323      	orrs	r3, r4
 8003542:	b21a      	sxth	r2, r3
 8003544:	2112      	movs	r1, #18
 8003546:	187b      	adds	r3, r7, r1
 8003548:	801a      	strh	r2, [r3, #0]

	if(num_registers > 125 || num_registers < 1) // 125 is the limit according to modbus protocol
 800354a:	000a      	movs	r2, r1
 800354c:	18bb      	adds	r3, r7, r2
 800354e:	881b      	ldrh	r3, [r3, #0]
 8003550:	2b7d      	cmp	r3, #125	@ 0x7d
 8003552:	d803      	bhi.n	800355c <edit_multiple_registers+0x60>
 8003554:	18bb      	adds	r3, r7, r2
 8003556:	881b      	ldrh	r3, [r3, #0]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d104      	bne.n	8003566 <edit_multiple_registers+0x6a>
	{
		return modbus_exception(MB_ILLEGAL_DATA_VALUE);
 800355c:	2006      	movs	r0, #6
 800355e:	f000 f8cf 	bl	8003700 <modbus_exception>
 8003562:	0003      	movs	r3, r0
 8003564:	e0c3      	b.n	80036ee <edit_multiple_registers+0x1f2>
	}

	uint16_t last_register_address = first_register_address + (num_registers - 1);
 8003566:	2312      	movs	r3, #18
 8003568:	18fa      	adds	r2, r7, r3
 800356a:	2314      	movs	r3, #20
 800356c:	18fb      	adds	r3, r7, r3
 800356e:	8812      	ldrh	r2, [r2, #0]
 8003570:	881b      	ldrh	r3, [r3, #0]
 8003572:	18d3      	adds	r3, r2, r3
 8003574:	b29a      	uxth	r2, r3
 8003576:	2110      	movs	r1, #16
 8003578:	187b      	adds	r3, r7, r1
 800357a:	3a01      	subs	r2, #1
 800357c:	801a      	strh	r2, [r3, #0]

	if(last_register_address > NUM_HOLDING_REGISTERS)
 800357e:	187b      	adds	r3, r7, r1
 8003580:	881b      	ldrh	r3, [r3, #0]
 8003582:	2b50      	cmp	r3, #80	@ 0x50
 8003584:	d904      	bls.n	8003590 <edit_multiple_registers+0x94>
	{
		return modbus_exception(MB_ILLEGAL_DATA_ADDRESS);
 8003586:	2005      	movs	r0, #5
 8003588:	f000 f8ba 	bl	8003700 <modbus_exception>
 800358c:	0003      	movs	r3, r0
 800358e:	e0ae      	b.n	80036ee <edit_multiple_registers+0x1f2>
	}

	// Protect Read only values
	if(((first_register_address >= ADC_0) && (first_register_address <= ENCODER_SPEED)) ||
 8003590:	2214      	movs	r2, #20
 8003592:	18bb      	adds	r3, r7, r2
 8003594:	881b      	ldrh	r3, [r3, #0]
 8003596:	2b08      	cmp	r3, #8
 8003598:	d903      	bls.n	80035a2 <edit_multiple_registers+0xa6>
 800359a:	18bb      	adds	r3, r7, r2
 800359c:	881b      	ldrh	r3, [r3, #0]
 800359e:	2b3e      	cmp	r3, #62	@ 0x3e
 80035a0:	d912      	bls.n	80035c8 <edit_multiple_registers+0xcc>
 80035a2:	2210      	movs	r2, #16
 80035a4:	18bb      	adds	r3, r7, r2
 80035a6:	881b      	ldrh	r3, [r3, #0]
 80035a8:	2b08      	cmp	r3, #8
 80035aa:	d903      	bls.n	80035b4 <edit_multiple_registers+0xb8>
		 ((last_register_address >= ADC_0) && (last_register_address <= ENCODER_SPEED)) ||
 80035ac:	18bb      	adds	r3, r7, r2
 80035ae:	881b      	ldrh	r3, [r3, #0]
 80035b0:	2b3e      	cmp	r3, #62	@ 0x3e
 80035b2:	d909      	bls.n	80035c8 <edit_multiple_registers+0xcc>
 80035b4:	2314      	movs	r3, #20
 80035b6:	18fb      	adds	r3, r7, r3
 80035b8:	881b      	ldrh	r3, [r3, #0]
 80035ba:	2b08      	cmp	r3, #8
 80035bc:	d809      	bhi.n	80035d2 <edit_multiple_registers+0xd6>
		 ((first_register_address < ADC_0) && (last_register_address > ENCODER_SPEED)))
 80035be:	2310      	movs	r3, #16
 80035c0:	18fb      	adds	r3, r7, r3
 80035c2:	881b      	ldrh	r3, [r3, #0]
 80035c4:	2b3e      	cmp	r3, #62	@ 0x3e
 80035c6:	d904      	bls.n	80035d2 <edit_multiple_registers+0xd6>
	{
		// Ensure that sensor values are restricted to read-only
		return modbus_exception(MB_ILLEGAL_FUNCTION);
 80035c8:	2004      	movs	r0, #4
 80035ca:	f000 f899 	bl	8003700 <modbus_exception>
 80035ce:	0003      	movs	r3, r0
 80035d0:	e08d      	b.n	80036ee <edit_multiple_registers+0x1f2>
	}

	// Edit holding registers
	modbus_tx_buffer[0] = get_rx_buffer(0); // Append Slave id
 80035d2:	2000      	movs	r0, #0
 80035d4:	f000 fb72 	bl	8003cbc <get_rx_buffer>
 80035d8:	0003      	movs	r3, r0
 80035da:	001a      	movs	r2, r3
 80035dc:	4b46      	ldr	r3, [pc, #280]	@ (80036f8 <edit_multiple_registers+0x1fc>)
 80035de:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = get_rx_buffer(1); // Append Function Code
 80035e0:	2001      	movs	r0, #1
 80035e2:	f000 fb6b 	bl	8003cbc <get_rx_buffer>
 80035e6:	0003      	movs	r3, r0
 80035e8:	001a      	movs	r2, r3
 80035ea:	4b43      	ldr	r3, [pc, #268]	@ (80036f8 <edit_multiple_registers+0x1fc>)
 80035ec:	705a      	strb	r2, [r3, #1]
	// Append the Write Address (high byte then low byte)
	modbus_tx_buffer[2] = get_rx_buffer(2);
 80035ee:	2002      	movs	r0, #2
 80035f0:	f000 fb64 	bl	8003cbc <get_rx_buffer>
 80035f4:	0003      	movs	r3, r0
 80035f6:	001a      	movs	r2, r3
 80035f8:	4b3f      	ldr	r3, [pc, #252]	@ (80036f8 <edit_multiple_registers+0x1fc>)
 80035fa:	709a      	strb	r2, [r3, #2]
	modbus_tx_buffer[3] = get_rx_buffer(3);
 80035fc:	2003      	movs	r0, #3
 80035fe:	f000 fb5d 	bl	8003cbc <get_rx_buffer>
 8003602:	0003      	movs	r3, r0
 8003604:	001a      	movs	r2, r3
 8003606:	4b3c      	ldr	r3, [pc, #240]	@ (80036f8 <edit_multiple_registers+0x1fc>)
 8003608:	70da      	strb	r2, [r3, #3]
	// Append the quantity of registers to be written (high byte then low byte)
	modbus_tx_buffer[4] = get_rx_buffer(4);
 800360a:	2004      	movs	r0, #4
 800360c:	f000 fb56 	bl	8003cbc <get_rx_buffer>
 8003610:	0003      	movs	r3, r0
 8003612:	001a      	movs	r2, r3
 8003614:	4b38      	ldr	r3, [pc, #224]	@ (80036f8 <edit_multiple_registers+0x1fc>)
 8003616:	711a      	strb	r2, [r3, #4]
	modbus_tx_buffer[5] = get_rx_buffer(5);
 8003618:	2005      	movs	r0, #5
 800361a:	f000 fb4f 	bl	8003cbc <get_rx_buffer>
 800361e:	0003      	movs	r3, r0
 8003620:	001a      	movs	r2, r3
 8003622:	4b35      	ldr	r3, [pc, #212]	@ (80036f8 <edit_multiple_registers+0x1fc>)
 8003624:	715a      	strb	r2, [r3, #5]
	(*tx_len) = 6;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2206      	movs	r2, #6
 800362a:	701a      	strb	r2, [r3, #0]

	for(uint8_t i = 0; i < num_registers; i++)
 800362c:	2317      	movs	r3, #23
 800362e:	18fb      	adds	r3, r7, r3
 8003630:	2200      	movs	r2, #0
 8003632:	701a      	strb	r2, [r3, #0]
 8003634:	e032      	b.n	800369c <edit_multiple_registers+0x1a0>
	{
		holding_register_database[first_register_address + i] = (get_rx_buffer(2 * i + 7) << 8) | get_rx_buffer(2 * i + 8);
 8003636:	2517      	movs	r5, #23
 8003638:	197b      	adds	r3, r7, r5
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	18db      	adds	r3, r3, r3
 800363e:	b2db      	uxtb	r3, r3
 8003640:	3307      	adds	r3, #7
 8003642:	b2db      	uxtb	r3, r3
 8003644:	0018      	movs	r0, r3
 8003646:	f000 fb39 	bl	8003cbc <get_rx_buffer>
 800364a:	0003      	movs	r3, r0
 800364c:	021b      	lsls	r3, r3, #8
 800364e:	b21c      	sxth	r4, r3
 8003650:	197b      	adds	r3, r7, r5
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	3304      	adds	r3, #4
 8003656:	b2db      	uxtb	r3, r3
 8003658:	18db      	adds	r3, r3, r3
 800365a:	b2db      	uxtb	r3, r3
 800365c:	0018      	movs	r0, r3
 800365e:	f000 fb2d 	bl	8003cbc <get_rx_buffer>
 8003662:	0003      	movs	r3, r0
 8003664:	b21b      	sxth	r3, r3
 8003666:	4323      	orrs	r3, r4
 8003668:	b219      	sxth	r1, r3
 800366a:	2014      	movs	r0, #20
 800366c:	183b      	adds	r3, r7, r0
 800366e:	881a      	ldrh	r2, [r3, #0]
 8003670:	197b      	adds	r3, r7, r5
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	18d2      	adds	r2, r2, r3
 8003676:	b289      	uxth	r1, r1
 8003678:	4b20      	ldr	r3, [pc, #128]	@ (80036fc <edit_multiple_registers+0x200>)
 800367a:	0052      	lsls	r2, r2, #1
 800367c:	52d1      	strh	r1, [r2, r3]

		// Handle the range boundaries of each writable register
		handle_range(first_register_address + i);
 800367e:	197b      	adds	r3, r7, r5
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	b29a      	uxth	r2, r3
 8003684:	183b      	adds	r3, r7, r0
 8003686:	881b      	ldrh	r3, [r3, #0]
 8003688:	18d3      	adds	r3, r2, r3
 800368a:	b29b      	uxth	r3, r3
 800368c:	0018      	movs	r0, r3
 800368e:	f000 f85f 	bl	8003750 <handle_range>
	for(uint8_t i = 0; i < num_registers; i++)
 8003692:	197b      	adds	r3, r7, r5
 8003694:	781a      	ldrb	r2, [r3, #0]
 8003696:	197b      	adds	r3, r7, r5
 8003698:	3201      	adds	r2, #1
 800369a:	701a      	strb	r2, [r3, #0]
 800369c:	2317      	movs	r3, #23
 800369e:	18fb      	adds	r3, r7, r3
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	2212      	movs	r2, #18
 80036a6:	18ba      	adds	r2, r7, r2
 80036a8:	8812      	ldrh	r2, [r2, #0]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d8c3      	bhi.n	8003636 <edit_multiple_registers+0x13a>

	// TIMING WORKAROUND START
//	HAL_Delay(1);
	// TIMING WORKAROUND END

	int8_t status = modbus_send((*tx_len));
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	250f      	movs	r5, #15
 80036b4:	197c      	adds	r4, r7, r5
 80036b6:	0018      	movs	r0, r3
 80036b8:	f000 f930 	bl	800391c <modbus_send>
 80036bc:	0003      	movs	r3, r0
 80036be:	7023      	strb	r3, [r4, #0]

	if(status == MB_SUCCESS)
 80036c0:	197b      	adds	r3, r7, r5
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	b25b      	sxtb	r3, r3
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10d      	bne.n	80036e6 <edit_multiple_registers+0x1ea>
	{
		// Special Case Modbus Baud Rate Modification
		if((first_register_address <= 1) && last_register_address >= 1)
 80036ca:	2314      	movs	r3, #20
 80036cc:	18fb      	adds	r3, r7, r3
 80036ce:	881b      	ldrh	r3, [r3, #0]
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d808      	bhi.n	80036e6 <edit_multiple_registers+0x1ea>
 80036d4:	2310      	movs	r3, #16
 80036d6:	18fb      	adds	r3, r7, r3
 80036d8:	881b      	ldrh	r3, [r3, #0]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d003      	beq.n	80036e6 <edit_multiple_registers+0x1ea>
		{
			return modbus_change_baud_rate();
 80036de:	f000 fa67 	bl	8003bb0 <modbus_change_baud_rate>
 80036e2:	0003      	movs	r3, r0
 80036e4:	e003      	b.n	80036ee <edit_multiple_registers+0x1f2>
		}
	}
	return status;
 80036e6:	230f      	movs	r3, #15
 80036e8:	18fb      	adds	r3, r7, r3
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	b25b      	sxtb	r3, r3
}
 80036ee:	0018      	movs	r0, r3
 80036f0:	46bd      	mov	sp, r7
 80036f2:	b006      	add	sp, #24
 80036f4:	bdb0      	pop	{r4, r5, r7, pc}
 80036f6:	46c0      	nop			@ (mov r8, r8)
 80036f8:	200007a8 	.word	0x200007a8
 80036fc:	20000014 	.word	0x20000014

08003700 <modbus_exception>:

int8_t modbus_exception(int8_t exception_code)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	0002      	movs	r2, r0
 8003708:	1dfb      	adds	r3, r7, #7
 800370a:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[0] = get_rx_buffer(0);
 800370c:	2000      	movs	r0, #0
 800370e:	f000 fad5 	bl	8003cbc <get_rx_buffer>
 8003712:	0003      	movs	r3, r0
 8003714:	001a      	movs	r2, r3
 8003716:	4b0d      	ldr	r3, [pc, #52]	@ (800374c <modbus_exception+0x4c>)
 8003718:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = get_rx_buffer(1) | 0x80;
 800371a:	2001      	movs	r0, #1
 800371c:	f000 face 	bl	8003cbc <get_rx_buffer>
 8003720:	0003      	movs	r3, r0
 8003722:	001a      	movs	r2, r3
 8003724:	2380      	movs	r3, #128	@ 0x80
 8003726:	425b      	negs	r3, r3
 8003728:	4313      	orrs	r3, r2
 800372a:	b2da      	uxtb	r2, r3
 800372c:	4b07      	ldr	r3, [pc, #28]	@ (800374c <modbus_exception+0x4c>)
 800372e:	705a      	strb	r2, [r3, #1]
	modbus_tx_buffer[2] = exception_code - 3; // Subtract 3 to match the modbus defined error code value
 8003730:	1dfb      	adds	r3, r7, #7
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	3b03      	subs	r3, #3
 8003736:	b2da      	uxtb	r2, r3
 8003738:	4b04      	ldr	r3, [pc, #16]	@ (800374c <modbus_exception+0x4c>)
 800373a:	709a      	strb	r2, [r3, #2]

	return modbus_send(3);
 800373c:	2003      	movs	r0, #3
 800373e:	f000 f8ed 	bl	800391c <modbus_send>
 8003742:	0003      	movs	r3, r0
}
 8003744:	0018      	movs	r0, r3
 8003746:	46bd      	mov	sp, r7
 8003748:	b002      	add	sp, #8
 800374a:	bd80      	pop	{r7, pc}
 800374c:	200007a8 	.word	0x200007a8

08003750 <handle_range>:

void handle_range(uint16_t holding_register)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	0002      	movs	r2, r0
 8003758:	1dbb      	adds	r3, r7, #6
 800375a:	801a      	strh	r2, [r3, #0]
	switch(holding_register)
 800375c:	1dbb      	adds	r3, r7, #6
 800375e:	881b      	ldrh	r3, [r3, #0]
 8003760:	2b42      	cmp	r3, #66	@ 0x42
 8003762:	d900      	bls.n	8003766 <handle_range+0x16>
 8003764:	e0cc      	b.n	8003900 <handle_range+0x1b0>
 8003766:	009a      	lsls	r2, r3, #2
 8003768:	4b67      	ldr	r3, [pc, #412]	@ (8003908 <handle_range+0x1b8>)
 800376a:	18d3      	adds	r3, r2, r3
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	469f      	mov	pc, r3
	{
		case MODBUS_ID:
		{
			if(holding_register_database[holding_register] > 0xFF)
 8003770:	1dbb      	adds	r3, r7, #6
 8003772:	881a      	ldrh	r2, [r3, #0]
 8003774:	4b65      	ldr	r3, [pc, #404]	@ (800390c <handle_range+0x1bc>)
 8003776:	0052      	lsls	r2, r2, #1
 8003778:	5ad3      	ldrh	r3, [r2, r3]
 800377a:	2bff      	cmp	r3, #255	@ 0xff
 800377c:	d800      	bhi.n	8003780 <handle_range+0x30>
 800377e:	e0ae      	b.n	80038de <handle_range+0x18e>
			{
				holding_register_database[holding_register] = 0xFF;
 8003780:	1dbb      	adds	r3, r7, #6
 8003782:	881a      	ldrh	r2, [r3, #0]
 8003784:	4b61      	ldr	r3, [pc, #388]	@ (800390c <handle_range+0x1bc>)
 8003786:	0052      	lsls	r2, r2, #1
 8003788:	21ff      	movs	r1, #255	@ 0xff
 800378a:	52d1      	strh	r1, [r2, r3]
			}
			break;
 800378c:	e0a7      	b.n	80038de <handle_range+0x18e>
		}
		case MB_BAUD_RATE:
		{
			if(holding_register_database[holding_register] < BAUD_RATE_4800)
 800378e:	1dbb      	adds	r3, r7, #6
 8003790:	881a      	ldrh	r2, [r3, #0]
 8003792:	4b5e      	ldr	r3, [pc, #376]	@ (800390c <handle_range+0x1bc>)
 8003794:	0052      	lsls	r2, r2, #1
 8003796:	5ad3      	ldrh	r3, [r2, r3]
 8003798:	2b01      	cmp	r3, #1
 800379a:	d806      	bhi.n	80037aa <handle_range+0x5a>
			{
				holding_register_database[holding_register] = BAUD_RATE_4800;
 800379c:	1dbb      	adds	r3, r7, #6
 800379e:	881a      	ldrh	r2, [r3, #0]
 80037a0:	4b5a      	ldr	r3, [pc, #360]	@ (800390c <handle_range+0x1bc>)
 80037a2:	0052      	lsls	r2, r2, #1
 80037a4:	2102      	movs	r1, #2
 80037a6:	52d1      	strh	r1, [r2, r3]
			}
			else if(holding_register_database[holding_register] > BAUD_RATE_256000)
			{
				holding_register_database[holding_register] = BAUD_RATE_256000;
			}
			break;
 80037a8:	e09b      	b.n	80038e2 <handle_range+0x192>
			else if(holding_register_database[holding_register] > BAUD_RATE_256000)
 80037aa:	1dbb      	adds	r3, r7, #6
 80037ac:	881a      	ldrh	r2, [r3, #0]
 80037ae:	4b57      	ldr	r3, [pc, #348]	@ (800390c <handle_range+0x1bc>)
 80037b0:	0052      	lsls	r2, r2, #1
 80037b2:	5ad3      	ldrh	r3, [r2, r3]
 80037b4:	2b09      	cmp	r3, #9
 80037b6:	d800      	bhi.n	80037ba <handle_range+0x6a>
 80037b8:	e093      	b.n	80038e2 <handle_range+0x192>
				holding_register_database[holding_register] = BAUD_RATE_256000;
 80037ba:	1dbb      	adds	r3, r7, #6
 80037bc:	881a      	ldrh	r2, [r3, #0]
 80037be:	4b53      	ldr	r3, [pc, #332]	@ (800390c <handle_range+0x1bc>)
 80037c0:	0052      	lsls	r2, r2, #1
 80037c2:	2109      	movs	r1, #9
 80037c4:	52d1      	strh	r1, [r2, r3]
			break;
 80037c6:	e08c      	b.n	80038e2 <handle_range+0x192>
		}
		case MB_TRANSMIT_TIMEOUT:
		{
			if(holding_register_database[holding_register] < 5)
 80037c8:	1dbb      	adds	r3, r7, #6
 80037ca:	881a      	ldrh	r2, [r3, #0]
 80037cc:	4b4f      	ldr	r3, [pc, #316]	@ (800390c <handle_range+0x1bc>)
 80037ce:	0052      	lsls	r2, r2, #1
 80037d0:	5ad3      	ldrh	r3, [r2, r3]
 80037d2:	2b04      	cmp	r3, #4
 80037d4:	d806      	bhi.n	80037e4 <handle_range+0x94>
			{
				holding_register_database[holding_register] = 5;
 80037d6:	1dbb      	adds	r3, r7, #6
 80037d8:	881a      	ldrh	r2, [r3, #0]
 80037da:	4b4c      	ldr	r3, [pc, #304]	@ (800390c <handle_range+0x1bc>)
 80037dc:	0052      	lsls	r2, r2, #1
 80037de:	2105      	movs	r1, #5
 80037e0:	52d1      	strh	r1, [r2, r3]
			}
			else if(holding_register_database[holding_register] > 1000)
			{
				holding_register_database[holding_register] = 1000;
			}
			break;
 80037e2:	e080      	b.n	80038e6 <handle_range+0x196>
			else if(holding_register_database[holding_register] > 1000)
 80037e4:	1dbb      	adds	r3, r7, #6
 80037e6:	881a      	ldrh	r2, [r3, #0]
 80037e8:	4b48      	ldr	r3, [pc, #288]	@ (800390c <handle_range+0x1bc>)
 80037ea:	0052      	lsls	r2, r2, #1
 80037ec:	5ad2      	ldrh	r2, [r2, r3]
 80037ee:	23fa      	movs	r3, #250	@ 0xfa
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d800      	bhi.n	80037f8 <handle_range+0xa8>
 80037f6:	e076      	b.n	80038e6 <handle_range+0x196>
				holding_register_database[holding_register] = 1000;
 80037f8:	1dbb      	adds	r3, r7, #6
 80037fa:	881a      	ldrh	r2, [r3, #0]
 80037fc:	4b43      	ldr	r3, [pc, #268]	@ (800390c <handle_range+0x1bc>)
 80037fe:	0052      	lsls	r2, r2, #1
 8003800:	21fa      	movs	r1, #250	@ 0xfa
 8003802:	0089      	lsls	r1, r1, #2
 8003804:	52d1      	strh	r1, [r2, r3]
			break;
 8003806:	e06e      	b.n	80038e6 <handle_range+0x196>
		}
		case MB_TRANSMIT_RETRIES:
		{
			if(holding_register_database[holding_register] > 5)
 8003808:	1dbb      	adds	r3, r7, #6
 800380a:	881a      	ldrh	r2, [r3, #0]
 800380c:	4b3f      	ldr	r3, [pc, #252]	@ (800390c <handle_range+0x1bc>)
 800380e:	0052      	lsls	r2, r2, #1
 8003810:	5ad3      	ldrh	r3, [r2, r3]
 8003812:	2b05      	cmp	r3, #5
 8003814:	d800      	bhi.n	8003818 <handle_range+0xc8>
 8003816:	e068      	b.n	80038ea <handle_range+0x19a>
			{
				holding_register_database[holding_register] = 5;
 8003818:	1dbb      	adds	r3, r7, #6
 800381a:	881a      	ldrh	r2, [r3, #0]
 800381c:	4b3b      	ldr	r3, [pc, #236]	@ (800390c <handle_range+0x1bc>)
 800381e:	0052      	lsls	r2, r2, #1
 8003820:	2105      	movs	r1, #5
 8003822:	52d1      	strh	r1, [r2, r3]
			}
			break;
 8003824:	e061      	b.n	80038ea <handle_range+0x19a>
		}
		case MB_ERRORS:
		{
			if(holding_register_database[holding_register] > 0x3FF)
 8003826:	1dbb      	adds	r3, r7, #6
 8003828:	881a      	ldrh	r2, [r3, #0]
 800382a:	4b38      	ldr	r3, [pc, #224]	@ (800390c <handle_range+0x1bc>)
 800382c:	0052      	lsls	r2, r2, #1
 800382e:	5ad2      	ldrh	r2, [r2, r3]
 8003830:	2380      	movs	r3, #128	@ 0x80
 8003832:	00db      	lsls	r3, r3, #3
 8003834:	429a      	cmp	r2, r3
 8003836:	d35a      	bcc.n	80038ee <handle_range+0x19e>
			{
				holding_register_database[holding_register] = 0x3FF;
 8003838:	1dbb      	adds	r3, r7, #6
 800383a:	881a      	ldrh	r2, [r3, #0]
 800383c:	4b33      	ldr	r3, [pc, #204]	@ (800390c <handle_range+0x1bc>)
 800383e:	0052      	lsls	r2, r2, #1
 8003840:	4933      	ldr	r1, [pc, #204]	@ (8003910 <handle_range+0x1c0>)
 8003842:	52d1      	strh	r1, [r2, r3]
			}
			break;
 8003844:	e053      	b.n	80038ee <handle_range+0x19e>
		}
		case I2C_ERRORS:
		{
			if(holding_register_database[holding_register] > 0x7F)
 8003846:	1dbb      	adds	r3, r7, #6
 8003848:	881a      	ldrh	r2, [r3, #0]
 800384a:	4b30      	ldr	r3, [pc, #192]	@ (800390c <handle_range+0x1bc>)
 800384c:	0052      	lsls	r2, r2, #1
 800384e:	5ad3      	ldrh	r3, [r2, r3]
 8003850:	2b7f      	cmp	r3, #127	@ 0x7f
 8003852:	d94e      	bls.n	80038f2 <handle_range+0x1a2>
			{
				holding_register_database[holding_register] = 0x7F;
 8003854:	1dbb      	adds	r3, r7, #6
 8003856:	881a      	ldrh	r2, [r3, #0]
 8003858:	4b2c      	ldr	r3, [pc, #176]	@ (800390c <handle_range+0x1bc>)
 800385a:	0052      	lsls	r2, r2, #1
 800385c:	217f      	movs	r1, #127	@ 0x7f
 800385e:	52d1      	strh	r1, [r2, r3]
			}
			break;
 8003860:	e047      	b.n	80038f2 <handle_range+0x1a2>
		}
		case I2C_SHUTDOWN ... AUTOPILOT:
		{
			if(holding_register_database[holding_register] > 1)
 8003862:	1dbb      	adds	r3, r7, #6
 8003864:	881a      	ldrh	r2, [r3, #0]
 8003866:	4b29      	ldr	r3, [pc, #164]	@ (800390c <handle_range+0x1bc>)
 8003868:	0052      	lsls	r2, r2, #1
 800386a:	5ad3      	ldrh	r3, [r2, r3]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d942      	bls.n	80038f6 <handle_range+0x1a6>
			{
				holding_register_database[holding_register] = 1;
 8003870:	1dbb      	adds	r3, r7, #6
 8003872:	881a      	ldrh	r2, [r3, #0]
 8003874:	4b25      	ldr	r3, [pc, #148]	@ (800390c <handle_range+0x1bc>)
 8003876:	0052      	lsls	r2, r2, #1
 8003878:	2101      	movs	r1, #1
 800387a:	52d1      	strh	r1, [r2, r3]
			}
			break;
 800387c:	e03b      	b.n	80038f6 <handle_range+0x1a6>
		}
		case ENCODER_REFRESH:
		{
			if(holding_register_database[holding_register] < 1000)
 800387e:	1dbb      	adds	r3, r7, #6
 8003880:	881a      	ldrh	r2, [r3, #0]
 8003882:	4b22      	ldr	r3, [pc, #136]	@ (800390c <handle_range+0x1bc>)
 8003884:	0052      	lsls	r2, r2, #1
 8003886:	5ad2      	ldrh	r2, [r2, r3]
 8003888:	23fa      	movs	r3, #250	@ 0xfa
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	429a      	cmp	r2, r3
 800388e:	d207      	bcs.n	80038a0 <handle_range+0x150>
			{
				holding_register_database[holding_register] = 1000;
 8003890:	1dbb      	adds	r3, r7, #6
 8003892:	881a      	ldrh	r2, [r3, #0]
 8003894:	4b1d      	ldr	r3, [pc, #116]	@ (800390c <handle_range+0x1bc>)
 8003896:	0052      	lsls	r2, r2, #1
 8003898:	21fa      	movs	r1, #250	@ 0xfa
 800389a:	0089      	lsls	r1, r1, #2
 800389c:	52d1      	strh	r1, [r2, r3]
			}
			else if(holding_register_database[holding_register] > 10000)
			{
				holding_register_database[holding_register] = 10000;
			}
			break;
 800389e:	e02c      	b.n	80038fa <handle_range+0x1aa>
			else if(holding_register_database[holding_register] > 10000)
 80038a0:	1dbb      	adds	r3, r7, #6
 80038a2:	881a      	ldrh	r2, [r3, #0]
 80038a4:	4b19      	ldr	r3, [pc, #100]	@ (800390c <handle_range+0x1bc>)
 80038a6:	0052      	lsls	r2, r2, #1
 80038a8:	5ad3      	ldrh	r3, [r2, r3]
 80038aa:	4a1a      	ldr	r2, [pc, #104]	@ (8003914 <handle_range+0x1c4>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d924      	bls.n	80038fa <handle_range+0x1aa>
				holding_register_database[holding_register] = 10000;
 80038b0:	1dbb      	adds	r3, r7, #6
 80038b2:	881a      	ldrh	r2, [r3, #0]
 80038b4:	4b15      	ldr	r3, [pc, #84]	@ (800390c <handle_range+0x1bc>)
 80038b6:	0052      	lsls	r2, r2, #1
 80038b8:	4916      	ldr	r1, [pc, #88]	@ (8003914 <handle_range+0x1c4>)
 80038ba:	52d1      	strh	r1, [r2, r3]
			break;
 80038bc:	e01d      	b.n	80038fa <handle_range+0x1aa>
		}
		case ACTUATOR_A_TARGET ... ACTUATOR_C_TARGET:
		{
			if(holding_register_database[holding_register] > 0x0FFF)
 80038be:	1dbb      	adds	r3, r7, #6
 80038c0:	881a      	ldrh	r2, [r3, #0]
 80038c2:	4b12      	ldr	r3, [pc, #72]	@ (800390c <handle_range+0x1bc>)
 80038c4:	0052      	lsls	r2, r2, #1
 80038c6:	5ad2      	ldrh	r2, [r2, r3]
 80038c8:	2380      	movs	r3, #128	@ 0x80
 80038ca:	015b      	lsls	r3, r3, #5
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d316      	bcc.n	80038fe <handle_range+0x1ae>
			{
				holding_register_database[holding_register] = 0x0FFF;
 80038d0:	1dbb      	adds	r3, r7, #6
 80038d2:	881a      	ldrh	r2, [r3, #0]
 80038d4:	4b0d      	ldr	r3, [pc, #52]	@ (800390c <handle_range+0x1bc>)
 80038d6:	0052      	lsls	r2, r2, #1
 80038d8:	490f      	ldr	r1, [pc, #60]	@ (8003918 <handle_range+0x1c8>)
 80038da:	52d1      	strh	r1, [r2, r3]
			}
			break;
 80038dc:	e00f      	b.n	80038fe <handle_range+0x1ae>
			break;
 80038de:	46c0      	nop			@ (mov r8, r8)
 80038e0:	e00e      	b.n	8003900 <handle_range+0x1b0>
			break;
 80038e2:	46c0      	nop			@ (mov r8, r8)
 80038e4:	e00c      	b.n	8003900 <handle_range+0x1b0>
			break;
 80038e6:	46c0      	nop			@ (mov r8, r8)
 80038e8:	e00a      	b.n	8003900 <handle_range+0x1b0>
			break;
 80038ea:	46c0      	nop			@ (mov r8, r8)
 80038ec:	e008      	b.n	8003900 <handle_range+0x1b0>
			break;
 80038ee:	46c0      	nop			@ (mov r8, r8)
 80038f0:	e006      	b.n	8003900 <handle_range+0x1b0>
			break;
 80038f2:	46c0      	nop			@ (mov r8, r8)
 80038f4:	e004      	b.n	8003900 <handle_range+0x1b0>
			break;
 80038f6:	46c0      	nop			@ (mov r8, r8)
 80038f8:	e002      	b.n	8003900 <handle_range+0x1b0>
			break;
 80038fa:	46c0      	nop			@ (mov r8, r8)
 80038fc:	e000      	b.n	8003900 <handle_range+0x1b0>
			break;
 80038fe:	46c0      	nop			@ (mov r8, r8)
		}
	}
}
 8003900:	46c0      	nop			@ (mov r8, r8)
 8003902:	46bd      	mov	sp, r7
 8003904:	b002      	add	sp, #8
 8003906:	bd80      	pop	{r7, pc}
 8003908:	0800c478 	.word	0x0800c478
 800390c:	20000014 	.word	0x20000014
 8003910:	000003ff 	.word	0x000003ff
 8003914:	00002710 	.word	0x00002710
 8003918:	00000fff 	.word	0x00000fff

0800391c <modbus_send>:
#endif // MB_SLAVE

// General Modbus Functions -------------------------------------------------------------------

int8_t modbus_send(uint8_t size)
{
 800391c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800391e:	b085      	sub	sp, #20
 8003920:	af00      	add	r7, sp, #0
 8003922:	0002      	movs	r2, r0
 8003924:	1dfb      	adds	r3, r7, #7
 8003926:	701a      	strb	r2, [r3, #0]
	int8_t status = HAL_OK;
 8003928:	250f      	movs	r5, #15
 800392a:	197b      	adds	r3, r7, r5
 800392c:	2200      	movs	r2, #0
 800392e:	701a      	strb	r2, [r3, #0]
	// Append CRC (low byte then high byte)
	uint16_t crc = crc_16(modbus_tx_buffer, size);
 8003930:	260c      	movs	r6, #12
 8003932:	19bc      	adds	r4, r7, r6
 8003934:	1dfb      	adds	r3, r7, #7
 8003936:	781a      	ldrb	r2, [r3, #0]
 8003938:	4b1e      	ldr	r3, [pc, #120]	@ (80039b4 <modbus_send+0x98>)
 800393a:	0011      	movs	r1, r2
 800393c:	0018      	movs	r0, r3
 800393e:	f000 fa0d 	bl	8003d5c <crc_16>
 8003942:	0003      	movs	r3, r0
 8003944:	8023      	strh	r3, [r4, #0]
	modbus_tx_buffer[size] = low_byte(crc);
 8003946:	1dfb      	adds	r3, r7, #7
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	19ba      	adds	r2, r7, r6
 800394c:	8812      	ldrh	r2, [r2, #0]
 800394e:	b2d1      	uxtb	r1, r2
 8003950:	4a18      	ldr	r2, [pc, #96]	@ (80039b4 <modbus_send+0x98>)
 8003952:	54d1      	strb	r1, [r2, r3]
	modbus_tx_buffer[size + 1] = high_byte(crc);
 8003954:	19bb      	adds	r3, r7, r6
 8003956:	881b      	ldrh	r3, [r3, #0]
 8003958:	0a1b      	lsrs	r3, r3, #8
 800395a:	b29a      	uxth	r2, r3
 800395c:	1dfb      	adds	r3, r7, #7
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	3301      	adds	r3, #1
 8003962:	b2d1      	uxtb	r1, r2
 8003964:	4a13      	ldr	r2, [pc, #76]	@ (80039b4 <modbus_send+0x98>)
 8003966:	54d1      	strb	r1, [r2, r3]

	uart_tx_int = 0; // This will enable tx timeout monitoring
 8003968:	4b13      	ldr	r3, [pc, #76]	@ (80039b8 <modbus_send+0x9c>)
 800396a:	2200      	movs	r2, #0
 800396c:	701a      	strb	r2, [r3, #0]
	tx_time = HAL_GetTick();
 800396e:	f001 f937 	bl	8004be0 <HAL_GetTick>
 8003972:	0002      	movs	r2, r0
 8003974:	4b11      	ldr	r3, [pc, #68]	@ (80039bc <modbus_send+0xa0>)
 8003976:	601a      	str	r2, [r3, #0]
	status = HAL_UART_Transmit_DMA(&huart1, modbus_tx_buffer, size + 2);
 8003978:	1dfb      	adds	r3, r7, #7
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	b29b      	uxth	r3, r3
 800397e:	3302      	adds	r3, #2
 8003980:	b29a      	uxth	r2, r3
 8003982:	490c      	ldr	r1, [pc, #48]	@ (80039b4 <modbus_send+0x98>)
 8003984:	4b0e      	ldr	r3, [pc, #56]	@ (80039c0 <modbus_send+0xa4>)
 8003986:	0018      	movs	r0, r3
 8003988:	f006 fd14 	bl	800a3b4 <HAL_UART_Transmit_DMA>
 800398c:	0003      	movs	r3, r0
 800398e:	001a      	movs	r2, r3
 8003990:	197b      	adds	r3, r7, r5
 8003992:	701a      	strb	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(&hdma_usart1_tx, DMA_IT_HT);
 8003994:	4b0b      	ldr	r3, [pc, #44]	@ (80039c4 <modbus_send+0xa8>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	4b0a      	ldr	r3, [pc, #40]	@ (80039c4 <modbus_send+0xa8>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2104      	movs	r1, #4
 80039a0:	438a      	bics	r2, r1
 80039a2:	601a      	str	r2, [r3, #0]
	return status;
 80039a4:	197b      	adds	r3, r7, r5
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	b25b      	sxtb	r3, r3
}
 80039aa:	0018      	movs	r0, r3
 80039ac:	46bd      	mov	sp, r7
 80039ae:	b005      	add	sp, #20
 80039b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039b2:	46c0      	nop			@ (mov r8, r8)
 80039b4:	200007a8 	.word	0x200007a8
 80039b8:	200000b6 	.word	0x200000b6
 80039bc:	200009a4 	.word	0x200009a4
 80039c0:	2000050c 	.word	0x2000050c
 80039c4:	200005fc 	.word	0x200005fc

080039c8 <modbus_reset>:

int8_t modbus_reset()
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
	int8_t status = 0;
 80039ce:	1dfb      	adds	r3, r7, #7
 80039d0:	2200      	movs	r2, #0
 80039d2:	701a      	strb	r2, [r3, #0]
	status = HAL_UART_Abort(&huart1);
 80039d4:	4b30      	ldr	r3, [pc, #192]	@ (8003a98 <modbus_reset+0xd0>)
 80039d6:	0018      	movs	r0, r3
 80039d8:	f006 fd7e 	bl	800a4d8 <HAL_UART_Abort>
 80039dc:	0003      	movs	r3, r0
 80039de:	001a      	movs	r2, r3
 80039e0:	1dfb      	adds	r3, r7, #7
 80039e2:	701a      	strb	r2, [r3, #0]
	status |= HAL_UART_DeInit(&huart1);
 80039e4:	4b2c      	ldr	r3, [pc, #176]	@ (8003a98 <modbus_reset+0xd0>)
 80039e6:	0018      	movs	r0, r3
 80039e8:	f006 fca4 	bl	800a334 <HAL_UART_DeInit>
 80039ec:	0003      	movs	r3, r0
 80039ee:	b259      	sxtb	r1, r3
 80039f0:	1dfb      	adds	r3, r7, #7
 80039f2:	1dfa      	adds	r2, r7, #7
 80039f4:	7812      	ldrb	r2, [r2, #0]
 80039f6:	430a      	orrs	r2, r1
 80039f8:	701a      	strb	r2, [r3, #0]
	__USART1_FORCE_RESET();
 80039fa:	4b28      	ldr	r3, [pc, #160]	@ (8003a9c <modbus_reset+0xd4>)
 80039fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80039fe:	4b27      	ldr	r3, [pc, #156]	@ (8003a9c <modbus_reset+0xd4>)
 8003a00:	2180      	movs	r1, #128	@ 0x80
 8003a02:	01c9      	lsls	r1, r1, #7
 8003a04:	430a      	orrs	r2, r1
 8003a06:	631a      	str	r2, [r3, #48]	@ 0x30
	HAL_Delay(100);
 8003a08:	2064      	movs	r0, #100	@ 0x64
 8003a0a:	f001 f8f3 	bl	8004bf4 <HAL_Delay>
	__USART1_RELEASE_RESET();
 8003a0e:	4b23      	ldr	r3, [pc, #140]	@ (8003a9c <modbus_reset+0xd4>)
 8003a10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a12:	4b22      	ldr	r3, [pc, #136]	@ (8003a9c <modbus_reset+0xd4>)
 8003a14:	4922      	ldr	r1, [pc, #136]	@ (8003aa0 <modbus_reset+0xd8>)
 8003a16:	400a      	ands	r2, r1
 8003a18:	631a      	str	r2, [r3, #48]	@ 0x30
	status = HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0);
 8003a1a:	481f      	ldr	r0, [pc, #124]	@ (8003a98 <modbus_reset+0xd0>)
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	2200      	movs	r2, #0
 8003a20:	2100      	movs	r1, #0
 8003a22:	f007 fff7 	bl	800ba14 <HAL_RS485Ex_Init>
 8003a26:	0003      	movs	r3, r0
 8003a28:	001a      	movs	r2, r3
 8003a2a:	1dfb      	adds	r3, r7, #7
 8003a2c:	701a      	strb	r2, [r3, #0]
	status |= HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8);
 8003a2e:	4b1a      	ldr	r3, [pc, #104]	@ (8003a98 <modbus_reset+0xd0>)
 8003a30:	2100      	movs	r1, #0
 8003a32:	0018      	movs	r0, r3
 8003a34:	f008 f8b2 	bl	800bb9c <HAL_UARTEx_SetTxFifoThreshold>
 8003a38:	0003      	movs	r3, r0
 8003a3a:	b259      	sxtb	r1, r3
 8003a3c:	1dfb      	adds	r3, r7, #7
 8003a3e:	1dfa      	adds	r2, r7, #7
 8003a40:	7812      	ldrb	r2, [r2, #0]
 8003a42:	430a      	orrs	r2, r1
 8003a44:	701a      	strb	r2, [r3, #0]
	status |= HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8);
 8003a46:	4b14      	ldr	r3, [pc, #80]	@ (8003a98 <modbus_reset+0xd0>)
 8003a48:	2100      	movs	r1, #0
 8003a4a:	0018      	movs	r0, r3
 8003a4c:	f008 f8e6 	bl	800bc1c <HAL_UARTEx_SetRxFifoThreshold>
 8003a50:	0003      	movs	r3, r0
 8003a52:	b259      	sxtb	r1, r3
 8003a54:	1dfb      	adds	r3, r7, #7
 8003a56:	1dfa      	adds	r2, r7, #7
 8003a58:	7812      	ldrb	r2, [r2, #0]
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	701a      	strb	r2, [r3, #0]
	status |= HAL_UARTEx_DisableFifoMode(&huart1);
 8003a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8003a98 <modbus_reset+0xd0>)
 8003a60:	0018      	movs	r0, r3
 8003a62:	f008 f861 	bl	800bb28 <HAL_UARTEx_DisableFifoMode>
 8003a66:	0003      	movs	r3, r0
 8003a68:	b259      	sxtb	r1, r3
 8003a6a:	1dfb      	adds	r3, r7, #7
 8003a6c:	1dfa      	adds	r2, r7, #7
 8003a6e:	7812      	ldrb	r2, [r2, #0]
 8003a70:	430a      	orrs	r2, r1
 8003a72:	701a      	strb	r2, [r3, #0]
	if(status != HAL_OK)
 8003a74:	1dfb      	adds	r3, r7, #7
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	b25b      	sxtb	r3, r3
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d004      	beq.n	8003a88 <modbus_reset+0xc0>
	{
		return handle_modbus_error(MB_FATAL_ERROR);
 8003a7e:	2015      	movs	r0, #21
 8003a80:	f000 f94e 	bl	8003d20 <handle_modbus_error>
 8003a84:	0003      	movs	r3, r0
 8003a86:	e002      	b.n	8003a8e <modbus_reset+0xc6>
	}
	return status;
 8003a88:	1dfb      	adds	r3, r7, #7
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	b25b      	sxtb	r3, r3
}
 8003a8e:	0018      	movs	r0, r3
 8003a90:	46bd      	mov	sp, r7
 8003a92:	b002      	add	sp, #8
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	46c0      	nop			@ (mov r8, r8)
 8003a98:	2000050c 	.word	0x2000050c
 8003a9c:	40021000 	.word	0x40021000
 8003aa0:	ffffbfff 	.word	0xffffbfff

08003aa4 <modbus_set_rx>:

int8_t modbus_set_rx()
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
	int8_t status = HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rx_chunk, 6);
 8003aaa:	490c      	ldr	r1, [pc, #48]	@ (8003adc <modbus_set_rx+0x38>)
 8003aac:	4b0c      	ldr	r3, [pc, #48]	@ (8003ae0 <modbus_set_rx+0x3c>)
 8003aae:	2206      	movs	r2, #6
 8003ab0:	0018      	movs	r0, r3
 8003ab2:	f008 f8f5 	bl	800bca0 <HAL_UARTEx_ReceiveToIdle_DMA>
 8003ab6:	0003      	movs	r3, r0
 8003ab8:	001a      	movs	r2, r3
 8003aba:	1dfb      	adds	r3, r7, #7
 8003abc:	701a      	strb	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8003abe:	4b09      	ldr	r3, [pc, #36]	@ (8003ae4 <modbus_set_rx+0x40>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	4b07      	ldr	r3, [pc, #28]	@ (8003ae4 <modbus_set_rx+0x40>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2104      	movs	r1, #4
 8003aca:	438a      	bics	r2, r1
 8003acc:	601a      	str	r2, [r3, #0]

	return status;
 8003ace:	1dfb      	adds	r3, r7, #7
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	b25b      	sxtb	r3, r3
}
 8003ad4:	0018      	movs	r0, r3
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	b002      	add	sp, #8
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	200008a8 	.word	0x200008a8
 8003ae0:	2000050c 	.word	0x2000050c
 8003ae4:	200005a0 	.word	0x200005a0

08003ae8 <monitor_modbus>:

int8_t monitor_modbus()
{
 8003ae8:	b590      	push	{r4, r7, lr}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
	int8_t status = MB_SUCCESS;
 8003aee:	1dfb      	adds	r3, r7, #7
 8003af0:	2200      	movs	r2, #0
 8003af2:	701a      	strb	r2, [r3, #0]

	// Chunk miss handling
	status = handle_chunk_miss();
 8003af4:	1dfc      	adds	r4, r7, #7
 8003af6:	f000 f977 	bl	8003de8 <handle_chunk_miss>
 8003afa:	0003      	movs	r3, r0
 8003afc:	7023      	strb	r3, [r4, #0]
	if(status != MB_SUCCESS)
 8003afe:	1dfb      	adds	r3, r7, #7
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	b25b      	sxtb	r3, r3
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d012      	beq.n	8003b2e <monitor_modbus+0x46>
	{
		status = modbus_reset();
 8003b08:	1dfc      	adds	r4, r7, #7
 8003b0a:	f7ff ff5d 	bl	80039c8 <modbus_reset>
 8003b0e:	0003      	movs	r3, r0
 8003b10:	7023      	strb	r3, [r4, #0]
		if(status != MB_SUCCESS)
 8003b12:	1dfb      	adds	r3, r7, #7
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	b25b      	sxtb	r3, r3
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d003      	beq.n	8003b24 <monitor_modbus+0x3c>
		{
			return status;
 8003b1c:	1dfb      	adds	r3, r7, #7
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	b25b      	sxtb	r3, r3
 8003b22:	e039      	b.n	8003b98 <monitor_modbus+0xb0>
		}
		return handle_modbus_error(MB_UART_ERROR);
 8003b24:	2014      	movs	r0, #20
 8003b26:	f000 f8fb 	bl	8003d20 <handle_modbus_error>
 8003b2a:	0003      	movs	r3, r0
 8003b2c:	e034      	b.n	8003b98 <monitor_modbus+0xb0>
	}

	// Uart error handling
	if(uart_err_int)
 8003b2e:	4b1c      	ldr	r3, [pc, #112]	@ (8003ba0 <monitor_modbus+0xb8>)
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d015      	beq.n	8003b64 <monitor_modbus+0x7c>
	{
		uart_err_int = 0;
 8003b38:	4b19      	ldr	r3, [pc, #100]	@ (8003ba0 <monitor_modbus+0xb8>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	701a      	strb	r2, [r3, #0]
		status = modbus_reset();
 8003b3e:	1dfc      	adds	r4, r7, #7
 8003b40:	f7ff ff42 	bl	80039c8 <modbus_reset>
 8003b44:	0003      	movs	r3, r0
 8003b46:	7023      	strb	r3, [r4, #0]
		if(status != MB_SUCCESS)
 8003b48:	1dfb      	adds	r3, r7, #7
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	b25b      	sxtb	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d003      	beq.n	8003b5a <monitor_modbus+0x72>
		{
			return status;
 8003b52:	1dfb      	adds	r3, r7, #7
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	b25b      	sxtb	r3, r3
 8003b58:	e01e      	b.n	8003b98 <monitor_modbus+0xb0>
		}
		return handle_modbus_error(MB_UART_ERROR);
 8003b5a:	2014      	movs	r0, #20
 8003b5c:	f000 f8e0 	bl	8003d20 <handle_modbus_error>
 8003b60:	0003      	movs	r3, r0
 8003b62:	e019      	b.n	8003b98 <monitor_modbus+0xb0>
	}

	// TX timeout handling
	if(!uart_tx_int)
 8003b64:	4b0f      	ldr	r3, [pc, #60]	@ (8003ba4 <monitor_modbus+0xbc>)
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d111      	bne.n	8003b92 <monitor_modbus+0xaa>
	{
		if(HAL_GetTick() - tx_time >= holding_register_database[MB_TRANSMIT_TIMEOUT])
 8003b6e:	f001 f837 	bl	8004be0 <HAL_GetTick>
 8003b72:	0002      	movs	r2, r0
 8003b74:	4b0c      	ldr	r3, [pc, #48]	@ (8003ba8 <monitor_modbus+0xc0>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	4a0c      	ldr	r2, [pc, #48]	@ (8003bac <monitor_modbus+0xc4>)
 8003b7c:	8892      	ldrh	r2, [r2, #4]
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d304      	bcc.n	8003b8c <monitor_modbus+0xa4>
		{
			return handle_modbus_error(MB_TX_TIMEOUT);
 8003b82:	2012      	movs	r0, #18
 8003b84:	f000 f8cc 	bl	8003d20 <handle_modbus_error>
 8003b88:	0003      	movs	r3, r0
 8003b8a:	e005      	b.n	8003b98 <monitor_modbus+0xb0>
		}
		status = HAL_BUSY;
 8003b8c:	1dfb      	adds	r3, r7, #7
 8003b8e:	2202      	movs	r2, #2
 8003b90:	701a      	strb	r2, [r3, #0]
			}
			status = HAL_BUSY;
		}
	}
#endif
	return status;
 8003b92:	1dfb      	adds	r3, r7, #7
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	b25b      	sxtb	r3, r3
}
 8003b98:	0018      	movs	r0, r3
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	b003      	add	sp, #12
 8003b9e:	bd90      	pop	{r4, r7, pc}
 8003ba0:	200009b3 	.word	0x200009b3
 8003ba4:	200000b6 	.word	0x200000b6
 8003ba8:	200009a4 	.word	0x200009a4
 8003bac:	20000014 	.word	0x20000014

08003bb0 <modbus_change_baud_rate>:

	return status;
}

int8_t modbus_change_baud_rate()
{
 8003bb0:	b590      	push	{r4, r7, lr}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
	int8_t status = 0;
 8003bb6:	1dfb      	adds	r3, r7, #7
 8003bb8:	2200      	movs	r2, #0
 8003bba:	701a      	strb	r2, [r3, #0]

	switch(holding_register_database[MB_BAUD_RATE])
 8003bbc:	4b3c      	ldr	r3, [pc, #240]	@ (8003cb0 <modbus_change_baud_rate+0x100>)
 8003bbe:	885b      	ldrh	r3, [r3, #2]
 8003bc0:	2b09      	cmp	r3, #9
 8003bc2:	d82c      	bhi.n	8003c1e <modbus_change_baud_rate+0x6e>
 8003bc4:	009a      	lsls	r2, r3, #2
 8003bc6:	4b3b      	ldr	r3, [pc, #236]	@ (8003cb4 <modbus_change_baud_rate+0x104>)
 8003bc8:	18d3      	adds	r3, r2, r3
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	469f      	mov	pc, r3
	{
		case BAUD_RATE_4800:
		{
			huart1.Init.BaudRate = 4800;
 8003bce:	4b3a      	ldr	r3, [pc, #232]	@ (8003cb8 <modbus_change_baud_rate+0x108>)
 8003bd0:	2296      	movs	r2, #150	@ 0x96
 8003bd2:	0152      	lsls	r2, r2, #5
 8003bd4:	605a      	str	r2, [r3, #4]
			break;
 8003bd6:	e049      	b.n	8003c6c <modbus_change_baud_rate+0xbc>
		}
		case BAUD_RATE_9600:
		{
			huart1.Init.BaudRate = 9600;
 8003bd8:	4b37      	ldr	r3, [pc, #220]	@ (8003cb8 <modbus_change_baud_rate+0x108>)
 8003bda:	2296      	movs	r2, #150	@ 0x96
 8003bdc:	0192      	lsls	r2, r2, #6
 8003bde:	605a      	str	r2, [r3, #4]
			break;
 8003be0:	e044      	b.n	8003c6c <modbus_change_baud_rate+0xbc>
		}
		case BAUD_RATE_19200:
		{
			huart1.Init.BaudRate = 19200;
 8003be2:	4b35      	ldr	r3, [pc, #212]	@ (8003cb8 <modbus_change_baud_rate+0x108>)
 8003be4:	2296      	movs	r2, #150	@ 0x96
 8003be6:	01d2      	lsls	r2, r2, #7
 8003be8:	605a      	str	r2, [r3, #4]
			break;
 8003bea:	e03f      	b.n	8003c6c <modbus_change_baud_rate+0xbc>
		}
		case BAUD_RATE_38400:
		{
			huart1.Init.BaudRate = 38400;
 8003bec:	4b32      	ldr	r3, [pc, #200]	@ (8003cb8 <modbus_change_baud_rate+0x108>)
 8003bee:	2296      	movs	r2, #150	@ 0x96
 8003bf0:	0212      	lsls	r2, r2, #8
 8003bf2:	605a      	str	r2, [r3, #4]
			break;
 8003bf4:	e03a      	b.n	8003c6c <modbus_change_baud_rate+0xbc>
		}
		case BAUD_RATE_57600:
		{
			huart1.Init.BaudRate = 57600;
 8003bf6:	4b30      	ldr	r3, [pc, #192]	@ (8003cb8 <modbus_change_baud_rate+0x108>)
 8003bf8:	22e1      	movs	r2, #225	@ 0xe1
 8003bfa:	0212      	lsls	r2, r2, #8
 8003bfc:	605a      	str	r2, [r3, #4]
			break;
 8003bfe:	e035      	b.n	8003c6c <modbus_change_baud_rate+0xbc>
		}
		case BAUD_RATE_115200:
		{
			huart1.Init.BaudRate = 115200;
 8003c00:	4b2d      	ldr	r3, [pc, #180]	@ (8003cb8 <modbus_change_baud_rate+0x108>)
 8003c02:	22e1      	movs	r2, #225	@ 0xe1
 8003c04:	0252      	lsls	r2, r2, #9
 8003c06:	605a      	str	r2, [r3, #4]
			break;
 8003c08:	e030      	b.n	8003c6c <modbus_change_baud_rate+0xbc>
		}
		case BAUD_RATE_128000:
		{
			huart1.Init.BaudRate = 128000;
 8003c0a:	4b2b      	ldr	r3, [pc, #172]	@ (8003cb8 <modbus_change_baud_rate+0x108>)
 8003c0c:	22fa      	movs	r2, #250	@ 0xfa
 8003c0e:	0252      	lsls	r2, r2, #9
 8003c10:	605a      	str	r2, [r3, #4]
			break;
 8003c12:	e02b      	b.n	8003c6c <modbus_change_baud_rate+0xbc>
		}
		case BAUD_RATE_256000:
		{
			huart1.Init.BaudRate = 256000;
 8003c14:	4b28      	ldr	r3, [pc, #160]	@ (8003cb8 <modbus_change_baud_rate+0x108>)
 8003c16:	22fa      	movs	r2, #250	@ 0xfa
 8003c18:	0292      	lsls	r2, r2, #10
 8003c1a:	605a      	str	r2, [r3, #4]
			break;
 8003c1c:	e026      	b.n	8003c6c <modbus_change_baud_rate+0xbc>
		}
		default:
		{
			holding_register_database[MB_BAUD_RATE] = BAUD_RATE_9600;
 8003c1e:	4b24      	ldr	r3, [pc, #144]	@ (8003cb0 <modbus_change_baud_rate+0x100>)
 8003c20:	2203      	movs	r2, #3
 8003c22:	805a      	strh	r2, [r3, #2]
			huart1.Init.BaudRate = 9600;
 8003c24:	4b24      	ldr	r3, [pc, #144]	@ (8003cb8 <modbus_change_baud_rate+0x108>)
 8003c26:	2296      	movs	r2, #150	@ 0x96
 8003c28:	0192      	lsls	r2, r2, #6
 8003c2a:	605a      	str	r2, [r3, #4]
			status = UART_SetConfig(&huart1);
 8003c2c:	4b22      	ldr	r3, [pc, #136]	@ (8003cb8 <modbus_change_baud_rate+0x108>)
 8003c2e:	0018      	movs	r0, r3
 8003c30:	f007 f8bc 	bl	800adac <UART_SetConfig>
 8003c34:	0003      	movs	r3, r0
 8003c36:	001a      	movs	r2, r3
 8003c38:	1dfb      	adds	r3, r7, #7
 8003c3a:	701a      	strb	r2, [r3, #0]
			if(status == HAL_OK)
 8003c3c:	1dfb      	adds	r3, r7, #7
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	b25b      	sxtb	r3, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d10d      	bne.n	8003c62 <modbus_change_baud_rate+0xb2>
			{
				status = modbus_reset();
 8003c46:	1dfc      	adds	r4, r7, #7
 8003c48:	f7ff febe 	bl	80039c8 <modbus_reset>
 8003c4c:	0003      	movs	r3, r0
 8003c4e:	7023      	strb	r3, [r4, #0]
				if(status != HAL_OK)
 8003c50:	1dfb      	adds	r3, r7, #7
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	b25b      	sxtb	r3, r3
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d003      	beq.n	8003c62 <modbus_change_baud_rate+0xb2>
				{
					return status;
 8003c5a:	1dfb      	adds	r3, r7, #7
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	b25b      	sxtb	r3, r3
 8003c60:	e022      	b.n	8003ca8 <modbus_change_baud_rate+0xf8>
				}
			}
			return handle_modbus_error(RANGE_ERROR);
 8003c62:	200e      	movs	r0, #14
 8003c64:	f000 f85c 	bl	8003d20 <handle_modbus_error>
 8003c68:	0003      	movs	r3, r0
 8003c6a:	e01d      	b.n	8003ca8 <modbus_change_baud_rate+0xf8>
		}
	}
	status = UART_SetConfig(&huart1);
 8003c6c:	4b12      	ldr	r3, [pc, #72]	@ (8003cb8 <modbus_change_baud_rate+0x108>)
 8003c6e:	0018      	movs	r0, r3
 8003c70:	f007 f89c 	bl	800adac <UART_SetConfig>
 8003c74:	0003      	movs	r3, r0
 8003c76:	001a      	movs	r2, r3
 8003c78:	1dfb      	adds	r3, r7, #7
 8003c7a:	701a      	strb	r2, [r3, #0]
	if(status == HAL_OK)
 8003c7c:	1dfb      	adds	r3, r7, #7
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	b25b      	sxtb	r3, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d10d      	bne.n	8003ca2 <modbus_change_baud_rate+0xf2>
	{
		// Log error, reset UART
		status = modbus_reset();
 8003c86:	1dfc      	adds	r4, r7, #7
 8003c88:	f7ff fe9e 	bl	80039c8 <modbus_reset>
 8003c8c:	0003      	movs	r3, r0
 8003c8e:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK)
 8003c90:	1dfb      	adds	r3, r7, #7
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	b25b      	sxtb	r3, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d003      	beq.n	8003ca2 <modbus_change_baud_rate+0xf2>
		{
			return status;
 8003c9a:	1dfb      	adds	r3, r7, #7
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	b25b      	sxtb	r3, r3
 8003ca0:	e002      	b.n	8003ca8 <modbus_change_baud_rate+0xf8>
		}
	}

	return modbus_set_rx();
 8003ca2:	f7ff feff 	bl	8003aa4 <modbus_set_rx>
 8003ca6:	0003      	movs	r3, r0
}
 8003ca8:	0018      	movs	r0, r3
 8003caa:	46bd      	mov	sp, r7
 8003cac:	b003      	add	sp, #12
 8003cae:	bd90      	pop	{r4, r7, pc}
 8003cb0:	20000014 	.word	0x20000014
 8003cb4:	0800c584 	.word	0x0800c584
 8003cb8:	2000050c 	.word	0x2000050c

08003cbc <get_rx_buffer>:
}


// Low Level Functions -------------------------------------------------------------------------
uint8_t get_rx_buffer(uint8_t index)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	0002      	movs	r2, r0
 8003cc4:	1dfb      	adds	r3, r7, #7
 8003cc6:	701a      	strb	r2, [r3, #0]
	if (index < MODBUS_RX_BUFFER_SIZE - 1)
 8003cc8:	1dfb      	adds	r3, r7, #7
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	2bff      	cmp	r3, #255	@ 0xff
 8003cce:	d01e      	beq.n	8003d0e <get_rx_buffer+0x52>
	{
		return ((start_index + index) > (MODBUS_RX_BUFFER_SIZE - 1))?
 8003cd0:	4b11      	ldr	r3, [pc, #68]	@ (8003d18 <get_rx_buffer+0x5c>)
 8003cd2:	881b      	ldrh	r3, [r3, #0]
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	001a      	movs	r2, r3
 8003cd8:	1dfb      	adds	r3, r7, #7
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	18d3      	adds	r3, r2, r3
				modbus_rx_buffer[(start_index + index) - MODBUS_RX_BUFFER_SIZE] :
 8003cde:	2bff      	cmp	r3, #255	@ 0xff
 8003ce0:	dd0b      	ble.n	8003cfa <get_rx_buffer+0x3e>
 8003ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8003d18 <get_rx_buffer+0x5c>)
 8003ce4:	881b      	ldrh	r3, [r3, #0]
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	001a      	movs	r2, r3
 8003cea:	1dfb      	adds	r3, r7, #7
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	18d3      	adds	r3, r2, r3
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	3bff      	subs	r3, #255	@ 0xff
 8003cf4:	4a09      	ldr	r2, [pc, #36]	@ (8003d1c <get_rx_buffer+0x60>)
 8003cf6:	5cd3      	ldrb	r3, [r2, r3]
 8003cf8:	e00a      	b.n	8003d10 <get_rx_buffer+0x54>
				modbus_rx_buffer[start_index + index];
 8003cfa:	4b07      	ldr	r3, [pc, #28]	@ (8003d18 <get_rx_buffer+0x5c>)
 8003cfc:	881b      	ldrh	r3, [r3, #0]
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	001a      	movs	r2, r3
 8003d02:	1dfb      	adds	r3, r7, #7
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	18d3      	adds	r3, r2, r3
				modbus_rx_buffer[(start_index + index) - MODBUS_RX_BUFFER_SIZE] :
 8003d08:	4a04      	ldr	r2, [pc, #16]	@ (8003d1c <get_rx_buffer+0x60>)
 8003d0a:	5cd3      	ldrb	r3, [r2, r3]
 8003d0c:	e000      	b.n	8003d10 <get_rx_buffer+0x54>
	}
	return 0xFF;
 8003d0e:	23ff      	movs	r3, #255	@ 0xff
}
 8003d10:	0018      	movs	r0, r3
 8003d12:	46bd      	mov	sp, r7
 8003d14:	b002      	add	sp, #8
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	200009ac 	.word	0x200009ac
 8003d1c:	200006a8 	.word	0x200006a8

08003d20 <handle_modbus_error>:

int8_t handle_modbus_error(int8_t error_code)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	0002      	movs	r2, r0
 8003d28:	1dfb      	adds	r3, r7, #7
 8003d2a:	701a      	strb	r2, [r3, #0]
	holding_register_database[MB_ERRORS] |= 1U << (error_code - RANGE_ERROR);
 8003d2c:	4b0a      	ldr	r3, [pc, #40]	@ (8003d58 <handle_modbus_error+0x38>)
 8003d2e:	891a      	ldrh	r2, [r3, #8]
 8003d30:	1dfb      	adds	r3, r7, #7
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	b25b      	sxtb	r3, r3
 8003d36:	3b0e      	subs	r3, #14
 8003d38:	2101      	movs	r1, #1
 8003d3a:	4099      	lsls	r1, r3
 8003d3c:	000b      	movs	r3, r1
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	4313      	orrs	r3, r2
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	4b04      	ldr	r3, [pc, #16]	@ (8003d58 <handle_modbus_error+0x38>)
 8003d46:	811a      	strh	r2, [r3, #8]
	return error_code;
 8003d48:	1dfb      	adds	r3, r7, #7
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	b25b      	sxtb	r3, r3
}
 8003d4e:	0018      	movs	r0, r3
 8003d50:	46bd      	mov	sp, r7
 8003d52:	b002      	add	sp, #8
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	46c0      	nop			@ (mov r8, r8)
 8003d58:	20000014 	.word	0x20000014

08003d5c <crc_16>:

// Private Functions ---------------------------------------------------------------------------

uint16_t crc_16(uint8_t *data, uint8_t size)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	000a      	movs	r2, r1
 8003d66:	1cfb      	adds	r3, r7, #3
 8003d68:	701a      	strb	r2, [r3, #0]
	uint8_t crc_hi = 0xFF;
 8003d6a:	230f      	movs	r3, #15
 8003d6c:	18fb      	adds	r3, r7, r3
 8003d6e:	22ff      	movs	r2, #255	@ 0xff
 8003d70:	701a      	strb	r2, [r3, #0]
	uint8_t crc_low = 0xFF;
 8003d72:	230e      	movs	r3, #14
 8003d74:	18fb      	adds	r3, r7, r3
 8003d76:	22ff      	movs	r2, #255	@ 0xff
 8003d78:	701a      	strb	r2, [r3, #0]
	 unsigned int i; /* will index into CRC lookup */

	/* pass through message buffer */
	while (size--)
 8003d7a:	e019      	b.n	8003db0 <crc_16+0x54>
	{
		i = crc_low ^ *data++; /* calculate the CRC  */
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	1c5a      	adds	r2, r3, #1
 8003d80:	607a      	str	r2, [r7, #4]
 8003d82:	781a      	ldrb	r2, [r3, #0]
 8003d84:	200e      	movs	r0, #14
 8003d86:	183b      	adds	r3, r7, r0
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	4053      	eors	r3, r2
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	60bb      	str	r3, [r7, #8]
		crc_low = crc_hi ^ table_crc_hi[i];
 8003d90:	4a13      	ldr	r2, [pc, #76]	@ (8003de0 <crc_16+0x84>)
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	18d3      	adds	r3, r2, r3
 8003d96:	7819      	ldrb	r1, [r3, #0]
 8003d98:	183b      	adds	r3, r7, r0
 8003d9a:	200f      	movs	r0, #15
 8003d9c:	183a      	adds	r2, r7, r0
 8003d9e:	7812      	ldrb	r2, [r2, #0]
 8003da0:	404a      	eors	r2, r1
 8003da2:	701a      	strb	r2, [r3, #0]
		crc_hi = table_crc_lo[i];
 8003da4:	183b      	adds	r3, r7, r0
 8003da6:	490f      	ldr	r1, [pc, #60]	@ (8003de4 <crc_16+0x88>)
 8003da8:	68ba      	ldr	r2, [r7, #8]
 8003daa:	188a      	adds	r2, r1, r2
 8003dac:	7812      	ldrb	r2, [r2, #0]
 8003dae:	701a      	strb	r2, [r3, #0]
	while (size--)
 8003db0:	1cfb      	adds	r3, r7, #3
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	1cfa      	adds	r2, r7, #3
 8003db6:	1e59      	subs	r1, r3, #1
 8003db8:	7011      	strb	r1, [r2, #0]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1de      	bne.n	8003d7c <crc_16+0x20>
	}

	return (crc_hi << 8 | crc_low);
 8003dbe:	230f      	movs	r3, #15
 8003dc0:	18fb      	adds	r3, r7, r3
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	021b      	lsls	r3, r3, #8
 8003dc6:	b21a      	sxth	r2, r3
 8003dc8:	230e      	movs	r3, #14
 8003dca:	18fb      	adds	r3, r7, r3
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	b21b      	sxth	r3, r3
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	b21b      	sxth	r3, r3
 8003dd4:	b29b      	uxth	r3, r3
}
 8003dd6:	0018      	movs	r0, r3
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	b004      	add	sp, #16
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	46c0      	nop			@ (mov r8, r8)
 8003de0:	0800c278 	.word	0x0800c278
 8003de4:	0800c378 	.word	0x0800c378

08003de8 <handle_chunk_miss>:

int8_t handle_chunk_miss()
{
 8003de8:	b590      	push	{r4, r7, lr}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
	if(modbus_header == 0)
 8003dee:	4b15      	ldr	r3, [pc, #84]	@ (8003e44 <handle_chunk_miss+0x5c>)
 8003df0:	881b      	ldrh	r3, [r3, #0]
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d120      	bne.n	8003e3a <handle_chunk_miss+0x52>
	{
		if(HAL_GetTick() - chunk_time > 10)
 8003df8:	f000 fef2 	bl	8004be0 <HAL_GetTick>
 8003dfc:	0002      	movs	r2, r0
 8003dfe:	4b12      	ldr	r3, [pc, #72]	@ (8003e48 <handle_chunk_miss+0x60>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	2b0a      	cmp	r3, #10
 8003e06:	d918      	bls.n	8003e3a <handle_chunk_miss+0x52>
		{
			modbus_header = 1;
 8003e08:	4b0e      	ldr	r3, [pc, #56]	@ (8003e44 <handle_chunk_miss+0x5c>)
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	801a      	strh	r2, [r3, #0]
			int8_t status = HAL_UART_Abort(&huart1);
 8003e0e:	4b0f      	ldr	r3, [pc, #60]	@ (8003e4c <handle_chunk_miss+0x64>)
 8003e10:	0018      	movs	r0, r3
 8003e12:	f006 fb61 	bl	800a4d8 <HAL_UART_Abort>
 8003e16:	0003      	movs	r3, r0
 8003e18:	001a      	movs	r2, r3
 8003e1a:	1dfb      	adds	r3, r7, #7
 8003e1c:	701a      	strb	r2, [r3, #0]
			if(status == HAL_OK)
 8003e1e:	1dfb      	adds	r3, r7, #7
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	b25b      	sxtb	r3, r3
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d104      	bne.n	8003e32 <handle_chunk_miss+0x4a>
			{
				status = modbus_set_rx();
 8003e28:	1dfc      	adds	r4, r7, #7
 8003e2a:	f7ff fe3b 	bl	8003aa4 <modbus_set_rx>
 8003e2e:	0003      	movs	r3, r0
 8003e30:	7023      	strb	r3, [r4, #0]
			}
			return status;
 8003e32:	1dfb      	adds	r3, r7, #7
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	b25b      	sxtb	r3, r3
 8003e38:	e000      	b.n	8003e3c <handle_chunk_miss+0x54>
		}
	}
	return MB_SUCCESS;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	0018      	movs	r0, r3
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	b003      	add	sp, #12
 8003e42:	bd90      	pop	{r4, r7, pc}
 8003e44:	200000b4 	.word	0x200000b4
 8003e48:	200009a8 	.word	0x200009a8
 8003e4c:	2000050c 	.word	0x2000050c

08003e50 <LL_ADC_REG_SetDMATransfer>:
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	2203      	movs	r2, #3
 8003e60:	4393      	bics	r3, r2
 8003e62:	001a      	movs	r2, r3
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	431a      	orrs	r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	60da      	str	r2, [r3, #12]
}
 8003e6c:	46c0      	nop			@ (mov r8, r8)
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	b002      	add	sp, #8
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <LL_ADC_REG_GetDMATransfer>:
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	2203      	movs	r2, #3
 8003e82:	4013      	ands	r3, r2
}
 8003e84:	0018      	movs	r0, r3
 8003e86:	46bd      	mov	sp, r7
 8003e88:	b002      	add	sp, #8
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <LL_ADC_EnableInternalRegulator>:
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	4a05      	ldr	r2, [pc, #20]	@ (8003eb0 <LL_ADC_EnableInternalRegulator+0x24>)
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	2280      	movs	r2, #128	@ 0x80
 8003e9e:	0552      	lsls	r2, r2, #21
 8003ea0:	431a      	orrs	r2, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	609a      	str	r2, [r3, #8]
}
 8003ea6:	46c0      	nop			@ (mov r8, r8)
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	b002      	add	sp, #8
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	46c0      	nop			@ (mov r8, r8)
 8003eb0:	6fffffe8 	.word	0x6fffffe8

08003eb4 <LL_ADC_Enable>:
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	4a04      	ldr	r2, [pc, #16]	@ (8003ed4 <LL_ADC_Enable+0x20>)
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	609a      	str	r2, [r3, #8]
}
 8003ecc:	46c0      	nop			@ (mov r8, r8)
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	b002      	add	sp, #8
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	7fffffe8 	.word	0x7fffffe8

08003ed8 <LL_ADC_IsEnabled>:
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d101      	bne.n	8003ef0 <LL_ADC_IsEnabled+0x18>
 8003eec:	2301      	movs	r3, #1
 8003eee:	e000      	b.n	8003ef2 <LL_ADC_IsEnabled+0x1a>
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	0018      	movs	r0, r3
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	b002      	add	sp, #8
 8003ef8:	bd80      	pop	{r7, pc}
	...

08003efc <LL_ADC_StartCalibration>:
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	4a05      	ldr	r2, [pc, #20]	@ (8003f20 <LL_ADC_StartCalibration+0x24>)
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	2280      	movs	r2, #128	@ 0x80
 8003f0e:	0612      	lsls	r2, r2, #24
 8003f10:	431a      	orrs	r2, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	609a      	str	r2, [r3, #8]
}
 8003f16:	46c0      	nop			@ (mov r8, r8)
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	b002      	add	sp, #8
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	46c0      	nop			@ (mov r8, r8)
 8003f20:	7fffffe8 	.word	0x7fffffe8

08003f24 <LL_ADC_IsCalibrationOnGoing>:
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	0fdb      	lsrs	r3, r3, #31
 8003f32:	07da      	lsls	r2, r3, #31
 8003f34:	2380      	movs	r3, #128	@ 0x80
 8003f36:	061b      	lsls	r3, r3, #24
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d101      	bne.n	8003f40 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e000      	b.n	8003f42 <LL_ADC_IsCalibrationOnGoing+0x1e>
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	0018      	movs	r0, r3
 8003f44:	46bd      	mov	sp, r7
 8003f46:	b002      	add	sp, #8
 8003f48:	bd80      	pop	{r7, pc}

08003f4a <LL_ADC_IsActiveFlag_ADRDY>:
{
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	b082      	sub	sp, #8
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2201      	movs	r2, #1
 8003f58:	4013      	ands	r3, r2
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d101      	bne.n	8003f62 <LL_ADC_IsActiveFlag_ADRDY+0x18>
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e000      	b.n	8003f64 <LL_ADC_IsActiveFlag_ADRDY+0x1a>
 8003f62:	2300      	movs	r3, #0
}
 8003f64:	0018      	movs	r0, r3
 8003f66:	46bd      	mov	sp, r7
 8003f68:	b002      	add	sp, #8
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <LL_SYSTICK_IsActiveCounterFlag>:
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	af00      	add	r7, sp, #0
  return (((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk)) ? 1UL : 0UL);
 8003f70:	4b07      	ldr	r3, [pc, #28]	@ (8003f90 <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	2380      	movs	r3, #128	@ 0x80
 8003f76:	025b      	lsls	r3, r3, #9
 8003f78:	401a      	ands	r2, r3
 8003f7a:	2380      	movs	r3, #128	@ 0x80
 8003f7c:	025b      	lsls	r3, r3, #9
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d101      	bne.n	8003f86 <LL_SYSTICK_IsActiveCounterFlag+0x1a>
 8003f82:	2301      	movs	r3, #1
 8003f84:	e000      	b.n	8003f88 <LL_SYSTICK_IsActiveCounterFlag+0x1c>
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	0018      	movs	r0, r3
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	46c0      	nop			@ (mov r8, r8)
 8003f90:	e000e010 	.word	0xe000e010

08003f94 <ADC_ConvCpltCallback>:
#define VAR_CONVERTED_DATA_INIT_VALUE    (__LL_ADC_DIGITAL_SCALE(LL_ADC_RESOLUTION_12B) + 1)

volatile uint8_t low_half_safe;
volatile uint8_t adc_err_int;
void ADC_ConvCpltCallback()
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	af00      	add	r7, sp, #0
	low_half_safe = 0;
 8003f98:	4b02      	ldr	r3, [pc, #8]	@ (8003fa4 <ADC_ConvCpltCallback+0x10>)
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	701a      	strb	r2, [r3, #0]
}
 8003f9e:	46c0      	nop			@ (mov r8, r8)
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	200009b4 	.word	0x200009b4

08003fa8 <ADC_ConvHalfCpltCallback>:

void ADC_ConvHalfCpltCallback()
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	af00      	add	r7, sp, #0
	low_half_safe = 1;
 8003fac:	4b02      	ldr	r3, [pc, #8]	@ (8003fb8 <ADC_ConvHalfCpltCallback+0x10>)
 8003fae:	2201      	movs	r2, #1
 8003fb0:	701a      	strb	r2, [r3, #0]
}
 8003fb2:	46c0      	nop			@ (mov r8, r8)
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	200009b4 	.word	0x200009b4

08003fbc <ADC_ErrorCallback>:

void ADC_ErrorCallback()
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	af00      	add	r7, sp, #0
	adc_err_int = 1;
 8003fc0:	4b02      	ldr	r3, [pc, #8]	@ (8003fcc <ADC_ErrorCallback+0x10>)
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	701a      	strb	r2, [r3, #0]
}
 8003fc6:	46c0      	nop			@ (mov r8, r8)
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	200009b5 	.word	0x200009b5

08003fd0 <ADC_Activate>:

void ADC_Activate()
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
	low_half_safe = 0;
 8003fd6:	4b3e      	ldr	r3, [pc, #248]	@ (80040d0 <ADC_Activate+0x100>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	701a      	strb	r2, [r3, #0]
	adc_err_int = 0;
 8003fdc:	4b3d      	ldr	r3, [pc, #244]	@ (80040d4 <ADC_Activate+0x104>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	701a      	strb	r2, [r3, #0]
	__IO uint32_t wait_loop_index = 0U;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	60bb      	str	r3, [r7, #8]
	__IO uint32_t backup_setting_adc_dma_transfer = 0U;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	607b      	str	r3, [r7, #4]
	#if (USE_TIMEOUT == 1)
	uint32_t Timeout = 0U; /* Variable used for timeout management */
 8003fea:	2300      	movs	r3, #0
 8003fec:	60fb      	str	r3, [r7, #12]
	/*       implemented anyway to show the best practice usages                */
	/*       corresponding to reference manual procedure.                       */
	/*       Software can be optimized by removing some of these checks, if     */
	/*       they are not relevant considering previous settings and actions    */
	/*       in user application.                                               */
	if (LL_ADC_IsEnabled(ADC1) == 0)
 8003fee:	4b3a      	ldr	r3, [pc, #232]	@ (80040d8 <ADC_Activate+0x108>)
 8003ff0:	0018      	movs	r0, r3
 8003ff2:	f7ff ff71 	bl	8003ed8 <LL_ADC_IsEnabled>
 8003ff6:	1e03      	subs	r3, r0, #0
 8003ff8:	d166      	bne.n	80040c8 <ADC_Activate+0xf8>
	{
		/* Enable ADC internal voltage regulator */
		LL_ADC_EnableInternalRegulator(ADC1);
 8003ffa:	4b37      	ldr	r3, [pc, #220]	@ (80040d8 <ADC_Activate+0x108>)
 8003ffc:	0018      	movs	r0, r3
 8003ffe:	f7ff ff45 	bl	8003e8c <LL_ADC_EnableInternalRegulator>
		/* Compute number of CPU cycles to wait for, from delay in us.            */
		/* Note: Variable divided by 2 to compensate partially                    */
		/*       CPU processing cycles (depends on compilation optimization).     */
		/* Note: If system core clock frequency is below 200kHz, wait time        */
		/*       is only a few CPU processing cycles.                             */
		wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8004002:	4b36      	ldr	r3, [pc, #216]	@ (80040dc <ADC_Activate+0x10c>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4936      	ldr	r1, [pc, #216]	@ (80040e0 <ADC_Activate+0x110>)
 8004008:	0018      	movs	r0, r3
 800400a:	f7fc f87d 	bl	8000108 <__udivsi3>
 800400e:	0003      	movs	r3, r0
 8004010:	001a      	movs	r2, r3
 8004012:	0013      	movs	r3, r2
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	189b      	adds	r3, r3, r2
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	210a      	movs	r1, #10
 800401c:	0018      	movs	r0, r3
 800401e:	f7fc f873 	bl	8000108 <__udivsi3>
 8004022:	0003      	movs	r3, r0
 8004024:	60bb      	str	r3, [r7, #8]
		while(wait_loop_index != 0)
 8004026:	e002      	b.n	800402e <ADC_Activate+0x5e>
		{
			wait_loop_index--;
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	3b01      	subs	r3, #1
 800402c:	60bb      	str	r3, [r7, #8]
		while(wait_loop_index != 0)
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1f9      	bne.n	8004028 <ADC_Activate+0x58>
		/* Note: Specificity of this STM32 series: Calibration factor is           */
		/*       available in data register and also transferred by DMA.           */
		/*       To not insert ADC calibration factor among ADC conversion data   */
		/*       in DMA destination address, DMA transfer must be disabled during */
		/*       calibration.                                                     */
		backup_setting_adc_dma_transfer = LL_ADC_REG_GetDMATransfer(ADC1);
 8004034:	4b28      	ldr	r3, [pc, #160]	@ (80040d8 <ADC_Activate+0x108>)
 8004036:	0018      	movs	r0, r3
 8004038:	f7ff ff1c 	bl	8003e74 <LL_ADC_REG_GetDMATransfer>
 800403c:	0003      	movs	r3, r0
 800403e:	607b      	str	r3, [r7, #4]
		LL_ADC_REG_SetDMATransfer(ADC1, LL_ADC_REG_DMA_TRANSFER_NONE);
 8004040:	4b25      	ldr	r3, [pc, #148]	@ (80040d8 <ADC_Activate+0x108>)
 8004042:	2100      	movs	r1, #0
 8004044:	0018      	movs	r0, r3
 8004046:	f7ff ff03 	bl	8003e50 <LL_ADC_REG_SetDMATransfer>

		/* Run ADC self calibration */
		LL_ADC_StartCalibration(ADC1);
 800404a:	4b23      	ldr	r3, [pc, #140]	@ (80040d8 <ADC_Activate+0x108>)
 800404c:	0018      	movs	r0, r3
 800404e:	f7ff ff55 	bl	8003efc <LL_ADC_StartCalibration>

		/* Poll for ADC effectively calibrated */
#if (USE_TIMEOUT == 1)
		Timeout = ADC_CALIBRATION_TIMEOUT_MS;
 8004052:	2301      	movs	r3, #1
 8004054:	60fb      	str	r3, [r7, #12]
#endif /* USE_TIMEOUT */

		while (LL_ADC_IsCalibrationOnGoing(ADC1) != 0)
 8004056:	e00a      	b.n	800406e <ADC_Activate+0x9e>
		{
#if (USE_TIMEOUT == 1)
			/* Check Systick counter flag to decrement the time-out value */
			if (LL_SYSTICK_IsActiveCounterFlag())
 8004058:	f7ff ff88 	bl	8003f6c <LL_SYSTICK_IsActiveCounterFlag>
 800405c:	1e03      	subs	r3, r0, #0
 800405e:	d006      	beq.n	800406e <ADC_Activate+0x9e>
			{
				if(Timeout-- == 0)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	1e5a      	subs	r2, r3, #1
 8004064:	60fa      	str	r2, [r7, #12]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d101      	bne.n	800406e <ADC_Activate+0x9e>
				{
					/* Error: Time-out */
					Error_Handler();
 800406a:	f7ff f8b3 	bl	80031d4 <Error_Handler>
		while (LL_ADC_IsCalibrationOnGoing(ADC1) != 0)
 800406e:	4b1a      	ldr	r3, [pc, #104]	@ (80040d8 <ADC_Activate+0x108>)
 8004070:	0018      	movs	r0, r3
 8004072:	f7ff ff57 	bl	8003f24 <LL_ADC_IsCalibrationOnGoing>
 8004076:	1e03      	subs	r3, r0, #0
 8004078:	d1ee      	bne.n	8004058 <ADC_Activate+0x88>
			}
#endif /* USE_TIMEOUT */
		}

		/* Restore ADC DMA transfer request after calibration */
		LL_ADC_REG_SetDMATransfer(ADC1, backup_setting_adc_dma_transfer);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a16      	ldr	r2, [pc, #88]	@ (80040d8 <ADC_Activate+0x108>)
 800407e:	0019      	movs	r1, r3
 8004080:	0010      	movs	r0, r2
 8004082:	f7ff fee5 	bl	8003e50 <LL_ADC_REG_SetDMATransfer>

		/* Delay between ADC end of calibration and ADC enable.                   */
		/* Note: Variable divided by 2 to compensate partially                    */
		/*       CPU processing cycles (depends on compilation optimization).     */
		wait_loop_index = (ADC_DELAY_CALIB_ENABLE_CPU_CYCLES >> 1);
 8004086:	2320      	movs	r3, #32
 8004088:	60bb      	str	r3, [r7, #8]
		while(wait_loop_index != 0)
 800408a:	e002      	b.n	8004092 <ADC_Activate+0xc2>
		{
			wait_loop_index--;
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	3b01      	subs	r3, #1
 8004090:	60bb      	str	r3, [r7, #8]
		while(wait_loop_index != 0)
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d1f9      	bne.n	800408c <ADC_Activate+0xbc>
		}

		/* Enable ADC */
		LL_ADC_Enable(ADC1);
 8004098:	4b0f      	ldr	r3, [pc, #60]	@ (80040d8 <ADC_Activate+0x108>)
 800409a:	0018      	movs	r0, r3
 800409c:	f7ff ff0a 	bl	8003eb4 <LL_ADC_Enable>


		/* Poll for ADC ready to convert */
#if (USE_TIMEOUT == 1)
		Timeout = ADC_ENABLE_TIMEOUT_MS;
 80040a0:	2301      	movs	r3, #1
 80040a2:	60fb      	str	r3, [r7, #12]
#endif /* USE_TIMEOUT */

		while (LL_ADC_IsActiveFlag_ADRDY(ADC1) == 0)
 80040a4:	e00a      	b.n	80040bc <ADC_Activate+0xec>
		{
#if (USE_TIMEOUT == 1)
			/* Check Systick counter flag to decrement the time-out value */
			if (LL_SYSTICK_IsActiveCounterFlag())
 80040a6:	f7ff ff61 	bl	8003f6c <LL_SYSTICK_IsActiveCounterFlag>
 80040aa:	1e03      	subs	r3, r0, #0
 80040ac:	d006      	beq.n	80040bc <ADC_Activate+0xec>
			{
				if(Timeout-- == 0)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	1e5a      	subs	r2, r3, #1
 80040b2:	60fa      	str	r2, [r7, #12]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d101      	bne.n	80040bc <ADC_Activate+0xec>
				{
					/* Error: Time-out */
					Error_Handler();
 80040b8:	f7ff f88c 	bl	80031d4 <Error_Handler>
		while (LL_ADC_IsActiveFlag_ADRDY(ADC1) == 0)
 80040bc:	4b06      	ldr	r3, [pc, #24]	@ (80040d8 <ADC_Activate+0x108>)
 80040be:	0018      	movs	r0, r3
 80040c0:	f7ff ff43 	bl	8003f4a <LL_ADC_IsActiveFlag_ADRDY>
 80040c4:	1e03      	subs	r3, r0, #0
 80040c6:	d0ee      	beq.n	80040a6 <ADC_Activate+0xd6>
	/*       using function:                                                    */
	/*       "LL_ADC_REG_StartConversion();"                                    */

	/*## Operation on ADC hierarchical scope: ADC group injected ###############*/
	/* Note: Feature not available on this STM32 series */
}
 80040c8:	46c0      	nop			@ (mov r8, r8)
 80040ca:	46bd      	mov	sp, r7
 80040cc:	b004      	add	sp, #16
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	200009b4 	.word	0x200009b4
 80040d4:	200009b5 	.word	0x200009b5
 80040d8:	40012400 	.word	0x40012400
 80040dc:	200000b8 	.word	0x200000b8
 80040e0:	00030d40 	.word	0x00030d40

080040e4 <monitor_adc>:

int8_t monitor_adc()
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	af00      	add	r7, sp, #0
	if(adc_err_int)
 80040e8:	4b06      	ldr	r3, [pc, #24]	@ (8004104 <monitor_adc+0x20>)
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d004      	beq.n	80040fc <monitor_adc+0x18>
	{
		adc_err_int = 0;
 80040f2:	4b04      	ldr	r3, [pc, #16]	@ (8004104 <monitor_adc+0x20>)
 80040f4:	2200      	movs	r2, #0
 80040f6:	701a      	strb	r2, [r3, #0]
		return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e000      	b.n	80040fe <monitor_adc+0x1a>
	}
	return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	0018      	movs	r0, r3
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}
 8004104:	200009b5 	.word	0x200009b5

08004108 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800410e:	4b0f      	ldr	r3, [pc, #60]	@ (800414c <HAL_MspInit+0x44>)
 8004110:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004112:	4b0e      	ldr	r3, [pc, #56]	@ (800414c <HAL_MspInit+0x44>)
 8004114:	2101      	movs	r1, #1
 8004116:	430a      	orrs	r2, r1
 8004118:	641a      	str	r2, [r3, #64]	@ 0x40
 800411a:	4b0c      	ldr	r3, [pc, #48]	@ (800414c <HAL_MspInit+0x44>)
 800411c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800411e:	2201      	movs	r2, #1
 8004120:	4013      	ands	r3, r2
 8004122:	607b      	str	r3, [r7, #4]
 8004124:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004126:	4b09      	ldr	r3, [pc, #36]	@ (800414c <HAL_MspInit+0x44>)
 8004128:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800412a:	4b08      	ldr	r3, [pc, #32]	@ (800414c <HAL_MspInit+0x44>)
 800412c:	2180      	movs	r1, #128	@ 0x80
 800412e:	0549      	lsls	r1, r1, #21
 8004130:	430a      	orrs	r2, r1
 8004132:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004134:	4b05      	ldr	r3, [pc, #20]	@ (800414c <HAL_MspInit+0x44>)
 8004136:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004138:	2380      	movs	r3, #128	@ 0x80
 800413a:	055b      	lsls	r3, r3, #21
 800413c:	4013      	ands	r3, r2
 800413e:	603b      	str	r3, [r7, #0]
 8004140:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004142:	46c0      	nop			@ (mov r8, r8)
 8004144:	46bd      	mov	sp, r7
 8004146:	b002      	add	sp, #8
 8004148:	bd80      	pop	{r7, pc}
 800414a:	46c0      	nop			@ (mov r8, r8)
 800414c:	40021000 	.word	0x40021000

08004150 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004150:	b590      	push	{r4, r7, lr}
 8004152:	b093      	sub	sp, #76	@ 0x4c
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004158:	2334      	movs	r3, #52	@ 0x34
 800415a:	18fb      	adds	r3, r7, r3
 800415c:	0018      	movs	r0, r3
 800415e:	2314      	movs	r3, #20
 8004160:	001a      	movs	r2, r3
 8004162:	2100      	movs	r1, #0
 8004164:	f008 f83e 	bl	800c1e4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004168:	2414      	movs	r4, #20
 800416a:	193b      	adds	r3, r7, r4
 800416c:	0018      	movs	r0, r3
 800416e:	2320      	movs	r3, #32
 8004170:	001a      	movs	r2, r3
 8004172:	2100      	movs	r1, #0
 8004174:	f008 f836 	bl	800c1e4 <memset>
  if(hi2c->Instance==I2C1)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a51      	ldr	r2, [pc, #324]	@ (80042c4 <HAL_I2C_MspInit+0x174>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d000      	beq.n	8004184 <HAL_I2C_MspInit+0x34>
 8004182:	e09a      	b.n	80042ba <HAL_I2C_MspInit+0x16a>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004184:	193b      	adds	r3, r7, r4
 8004186:	2202      	movs	r2, #2
 8004188:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800418a:	193b      	adds	r3, r7, r4
 800418c:	2200      	movs	r2, #0
 800418e:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004190:	193b      	adds	r3, r7, r4
 8004192:	0018      	movs	r0, r3
 8004194:	f004 fa70 	bl	8008678 <HAL_RCCEx_PeriphCLKConfig>
 8004198:	1e03      	subs	r3, r0, #0
 800419a:	d001      	beq.n	80041a0 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 800419c:	f7ff f81a 	bl	80031d4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041a0:	4b49      	ldr	r3, [pc, #292]	@ (80042c8 <HAL_I2C_MspInit+0x178>)
 80041a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041a4:	4b48      	ldr	r3, [pc, #288]	@ (80042c8 <HAL_I2C_MspInit+0x178>)
 80041a6:	2101      	movs	r1, #1
 80041a8:	430a      	orrs	r2, r1
 80041aa:	635a      	str	r2, [r3, #52]	@ 0x34
 80041ac:	4b46      	ldr	r3, [pc, #280]	@ (80042c8 <HAL_I2C_MspInit+0x178>)
 80041ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041b0:	2201      	movs	r2, #1
 80041b2:	4013      	ands	r3, r2
 80041b4:	613b      	str	r3, [r7, #16]
 80041b6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9 [PA11]     ------> I2C1_SCL
    PA10 [PA12]     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80041b8:	2134      	movs	r1, #52	@ 0x34
 80041ba:	187b      	adds	r3, r7, r1
 80041bc:	22c0      	movs	r2, #192	@ 0xc0
 80041be:	00d2      	lsls	r2, r2, #3
 80041c0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80041c2:	187b      	adds	r3, r7, r1
 80041c4:	2212      	movs	r2, #18
 80041c6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041c8:	187b      	adds	r3, r7, r1
 80041ca:	2200      	movs	r2, #0
 80041cc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041ce:	187b      	adds	r3, r7, r1
 80041d0:	2200      	movs	r2, #0
 80041d2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80041d4:	187b      	adds	r3, r7, r1
 80041d6:	2206      	movs	r2, #6
 80041d8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041da:	187a      	adds	r2, r7, r1
 80041dc:	23a0      	movs	r3, #160	@ 0xa0
 80041de:	05db      	lsls	r3, r3, #23
 80041e0:	0011      	movs	r1, r2
 80041e2:	0018      	movs	r0, r3
 80041e4:	f001 f9f8 	bl	80055d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80041e8:	4b37      	ldr	r3, [pc, #220]	@ (80042c8 <HAL_I2C_MspInit+0x178>)
 80041ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80041ec:	4b36      	ldr	r3, [pc, #216]	@ (80042c8 <HAL_I2C_MspInit+0x178>)
 80041ee:	2180      	movs	r1, #128	@ 0x80
 80041f0:	0389      	lsls	r1, r1, #14
 80041f2:	430a      	orrs	r2, r1
 80041f4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80041f6:	4b34      	ldr	r3, [pc, #208]	@ (80042c8 <HAL_I2C_MspInit+0x178>)
 80041f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80041fa:	2380      	movs	r3, #128	@ 0x80
 80041fc:	039b      	lsls	r3, r3, #14
 80041fe:	4013      	ands	r3, r2
 8004200:	60fb      	str	r3, [r7, #12]
 8004202:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel4;
 8004204:	4b31      	ldr	r3, [pc, #196]	@ (80042cc <HAL_I2C_MspInit+0x17c>)
 8004206:	4a32      	ldr	r2, [pc, #200]	@ (80042d0 <HAL_I2C_MspInit+0x180>)
 8004208:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 800420a:	4b30      	ldr	r3, [pc, #192]	@ (80042cc <HAL_I2C_MspInit+0x17c>)
 800420c:	220a      	movs	r2, #10
 800420e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004210:	4b2e      	ldr	r3, [pc, #184]	@ (80042cc <HAL_I2C_MspInit+0x17c>)
 8004212:	2200      	movs	r2, #0
 8004214:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004216:	4b2d      	ldr	r3, [pc, #180]	@ (80042cc <HAL_I2C_MspInit+0x17c>)
 8004218:	2200      	movs	r2, #0
 800421a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800421c:	4b2b      	ldr	r3, [pc, #172]	@ (80042cc <HAL_I2C_MspInit+0x17c>)
 800421e:	2280      	movs	r2, #128	@ 0x80
 8004220:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004222:	4b2a      	ldr	r3, [pc, #168]	@ (80042cc <HAL_I2C_MspInit+0x17c>)
 8004224:	2200      	movs	r2, #0
 8004226:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004228:	4b28      	ldr	r3, [pc, #160]	@ (80042cc <HAL_I2C_MspInit+0x17c>)
 800422a:	2200      	movs	r2, #0
 800422c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800422e:	4b27      	ldr	r3, [pc, #156]	@ (80042cc <HAL_I2C_MspInit+0x17c>)
 8004230:	2200      	movs	r2, #0
 8004232:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004234:	4b25      	ldr	r3, [pc, #148]	@ (80042cc <HAL_I2C_MspInit+0x17c>)
 8004236:	2280      	movs	r2, #128	@ 0x80
 8004238:	0152      	lsls	r2, r2, #5
 800423a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800423c:	4b23      	ldr	r3, [pc, #140]	@ (80042cc <HAL_I2C_MspInit+0x17c>)
 800423e:	0018      	movs	r0, r3
 8004240:	f000 fe0c 	bl	8004e5c <HAL_DMA_Init>
 8004244:	1e03      	subs	r3, r0, #0
 8004246:	d001      	beq.n	800424c <HAL_I2C_MspInit+0xfc>
    {
      Error_Handler();
 8004248:	f7fe ffc4 	bl	80031d4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a1f      	ldr	r2, [pc, #124]	@ (80042cc <HAL_I2C_MspInit+0x17c>)
 8004250:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004252:	4b1e      	ldr	r3, [pc, #120]	@ (80042cc <HAL_I2C_MspInit+0x17c>)
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel5;
 8004258:	4b1e      	ldr	r3, [pc, #120]	@ (80042d4 <HAL_I2C_MspInit+0x184>)
 800425a:	4a1f      	ldr	r2, [pc, #124]	@ (80042d8 <HAL_I2C_MspInit+0x188>)
 800425c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 800425e:	4b1d      	ldr	r3, [pc, #116]	@ (80042d4 <HAL_I2C_MspInit+0x184>)
 8004260:	220b      	movs	r2, #11
 8004262:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004264:	4b1b      	ldr	r3, [pc, #108]	@ (80042d4 <HAL_I2C_MspInit+0x184>)
 8004266:	2210      	movs	r2, #16
 8004268:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800426a:	4b1a      	ldr	r3, [pc, #104]	@ (80042d4 <HAL_I2C_MspInit+0x184>)
 800426c:	2200      	movs	r2, #0
 800426e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004270:	4b18      	ldr	r3, [pc, #96]	@ (80042d4 <HAL_I2C_MspInit+0x184>)
 8004272:	2280      	movs	r2, #128	@ 0x80
 8004274:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004276:	4b17      	ldr	r3, [pc, #92]	@ (80042d4 <HAL_I2C_MspInit+0x184>)
 8004278:	2200      	movs	r2, #0
 800427a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800427c:	4b15      	ldr	r3, [pc, #84]	@ (80042d4 <HAL_I2C_MspInit+0x184>)
 800427e:	2200      	movs	r2, #0
 8004280:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8004282:	4b14      	ldr	r3, [pc, #80]	@ (80042d4 <HAL_I2C_MspInit+0x184>)
 8004284:	2200      	movs	r2, #0
 8004286:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004288:	4b12      	ldr	r3, [pc, #72]	@ (80042d4 <HAL_I2C_MspInit+0x184>)
 800428a:	2200      	movs	r2, #0
 800428c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800428e:	4b11      	ldr	r3, [pc, #68]	@ (80042d4 <HAL_I2C_MspInit+0x184>)
 8004290:	0018      	movs	r0, r3
 8004292:	f000 fde3 	bl	8004e5c <HAL_DMA_Init>
 8004296:	1e03      	subs	r3, r0, #0
 8004298:	d001      	beq.n	800429e <HAL_I2C_MspInit+0x14e>
    {
      Error_Handler();
 800429a:	f7fe ff9b 	bl	80031d4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a0c      	ldr	r2, [pc, #48]	@ (80042d4 <HAL_I2C_MspInit+0x184>)
 80042a2:	639a      	str	r2, [r3, #56]	@ 0x38
 80042a4:	4b0b      	ldr	r3, [pc, #44]	@ (80042d4 <HAL_I2C_MspInit+0x184>)
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 3, 0);
 80042aa:	2200      	movs	r2, #0
 80042ac:	2103      	movs	r1, #3
 80042ae:	2017      	movs	r0, #23
 80042b0:	f000 fd92 	bl	8004dd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 80042b4:	2017      	movs	r0, #23
 80042b6:	f000 fda4 	bl	8004e02 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80042ba:	46c0      	nop			@ (mov r8, r8)
 80042bc:	46bd      	mov	sp, r7
 80042be:	b013      	add	sp, #76	@ 0x4c
 80042c0:	bd90      	pop	{r4, r7, pc}
 80042c2:	46c0      	nop			@ (mov r8, r8)
 80042c4:	40005400 	.word	0x40005400
 80042c8:	40021000 	.word	0x40021000
 80042cc:	20000358 	.word	0x20000358
 80042d0:	40020044 	.word	0x40020044
 80042d4:	200003b4 	.word	0x200003b4
 80042d8:	40020058 	.word	0x40020058

080042dc <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a14      	ldr	r2, [pc, #80]	@ (800433c <HAL_I2C_MspDeInit+0x60>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d122      	bne.n	8004334 <HAL_I2C_MspDeInit+0x58>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80042ee:	4b14      	ldr	r3, [pc, #80]	@ (8004340 <HAL_I2C_MspDeInit+0x64>)
 80042f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80042f2:	4b13      	ldr	r3, [pc, #76]	@ (8004340 <HAL_I2C_MspDeInit+0x64>)
 80042f4:	4913      	ldr	r1, [pc, #76]	@ (8004344 <HAL_I2C_MspDeInit+0x68>)
 80042f6:	400a      	ands	r2, r1
 80042f8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /**I2C1 GPIO Configuration
    PA9 [PA11]     ------> I2C1_SCL
    PA10 [PA12]     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9);
 80042fa:	2380      	movs	r3, #128	@ 0x80
 80042fc:	009a      	lsls	r2, r3, #2
 80042fe:	23a0      	movs	r3, #160	@ 0xa0
 8004300:	05db      	lsls	r3, r3, #23
 8004302:	0011      	movs	r1, r2
 8004304:	0018      	movs	r0, r3
 8004306:	f001 fad9 	bl	80058bc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_10);
 800430a:	2380      	movs	r3, #128	@ 0x80
 800430c:	00da      	lsls	r2, r3, #3
 800430e:	23a0      	movs	r3, #160	@ 0xa0
 8004310:	05db      	lsls	r3, r3, #23
 8004312:	0011      	movs	r1, r2
 8004314:	0018      	movs	r0, r3
 8004316:	f001 fad1 	bl	80058bc <HAL_GPIO_DeInit>

    /* I2C1 DMA DeInit */
    HAL_DMA_DeInit(hi2c->hdmarx);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800431e:	0018      	movs	r0, r3
 8004320:	f000 fe26 	bl	8004f70 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hi2c->hdmatx);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004328:	0018      	movs	r0, r3
 800432a:	f000 fe21 	bl	8004f70 <HAL_DMA_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_IRQn);
 800432e:	2017      	movs	r0, #23
 8004330:	f000 fd77 	bl	8004e22 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8004334:	46c0      	nop			@ (mov r8, r8)
 8004336:	46bd      	mov	sp, r7
 8004338:	b002      	add	sp, #8
 800433a:	bd80      	pop	{r7, pc}
 800433c:	40005400 	.word	0x40005400
 8004340:	40021000 	.word	0x40021000
 8004344:	ffdfffff 	.word	0xffdfffff

08004348 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004348:	b590      	push	{r4, r7, lr}
 800434a:	b093      	sub	sp, #76	@ 0x4c
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004350:	2334      	movs	r3, #52	@ 0x34
 8004352:	18fb      	adds	r3, r7, r3
 8004354:	0018      	movs	r0, r3
 8004356:	2314      	movs	r3, #20
 8004358:	001a      	movs	r2, r3
 800435a:	2100      	movs	r1, #0
 800435c:	f007 ff42 	bl	800c1e4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004360:	2414      	movs	r4, #20
 8004362:	193b      	adds	r3, r7, r4
 8004364:	0018      	movs	r0, r3
 8004366:	2320      	movs	r3, #32
 8004368:	001a      	movs	r2, r3
 800436a:	2100      	movs	r1, #0
 800436c:	f007 ff3a 	bl	800c1e4 <memset>
  if(hspi->Instance==SPI1)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a34      	ldr	r2, [pc, #208]	@ (8004448 <HAL_SPI_MspInit+0x100>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d162      	bne.n	8004440 <HAL_SPI_MspInit+0xf8>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 800437a:	193b      	adds	r3, r7, r4
 800437c:	2204      	movs	r2, #4
 800437e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 8004380:	193b      	adds	r3, r7, r4
 8004382:	2200      	movs	r2, #0
 8004384:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004386:	193b      	adds	r3, r7, r4
 8004388:	0018      	movs	r0, r3
 800438a:	f004 f975 	bl	8008678 <HAL_RCCEx_PeriphCLKConfig>
 800438e:	1e03      	subs	r3, r0, #0
 8004390:	d001      	beq.n	8004396 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8004392:	f7fe ff1f 	bl	80031d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004396:	4b2d      	ldr	r3, [pc, #180]	@ (800444c <HAL_SPI_MspInit+0x104>)
 8004398:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800439a:	4b2c      	ldr	r3, [pc, #176]	@ (800444c <HAL_SPI_MspInit+0x104>)
 800439c:	2180      	movs	r1, #128	@ 0x80
 800439e:	0149      	lsls	r1, r1, #5
 80043a0:	430a      	orrs	r2, r1
 80043a2:	641a      	str	r2, [r3, #64]	@ 0x40
 80043a4:	4b29      	ldr	r3, [pc, #164]	@ (800444c <HAL_SPI_MspInit+0x104>)
 80043a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80043a8:	2380      	movs	r3, #128	@ 0x80
 80043aa:	015b      	lsls	r3, r3, #5
 80043ac:	4013      	ands	r3, r2
 80043ae:	613b      	str	r3, [r7, #16]
 80043b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043b2:	4b26      	ldr	r3, [pc, #152]	@ (800444c <HAL_SPI_MspInit+0x104>)
 80043b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80043b6:	4b25      	ldr	r3, [pc, #148]	@ (800444c <HAL_SPI_MspInit+0x104>)
 80043b8:	2101      	movs	r1, #1
 80043ba:	430a      	orrs	r2, r1
 80043bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80043be:	4b23      	ldr	r3, [pc, #140]	@ (800444c <HAL_SPI_MspInit+0x104>)
 80043c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043c2:	2201      	movs	r2, #1
 80043c4:	4013      	ands	r3, r2
 80043c6:	60fb      	str	r3, [r7, #12]
 80043c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043ca:	4b20      	ldr	r3, [pc, #128]	@ (800444c <HAL_SPI_MspInit+0x104>)
 80043cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80043ce:	4b1f      	ldr	r3, [pc, #124]	@ (800444c <HAL_SPI_MspInit+0x104>)
 80043d0:	2102      	movs	r1, #2
 80043d2:	430a      	orrs	r2, r1
 80043d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80043d6:	4b1d      	ldr	r3, [pc, #116]	@ (800444c <HAL_SPI_MspInit+0x104>)
 80043d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043da:	2202      	movs	r2, #2
 80043dc:	4013      	ands	r3, r2
 80043de:	60bb      	str	r3, [r7, #8]
 80043e0:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA11 [PA9]     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80043e2:	2134      	movs	r1, #52	@ 0x34
 80043e4:	187b      	adds	r3, r7, r1
 80043e6:	2280      	movs	r2, #128	@ 0x80
 80043e8:	0112      	lsls	r2, r2, #4
 80043ea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043ec:	000c      	movs	r4, r1
 80043ee:	193b      	adds	r3, r7, r4
 80043f0:	2202      	movs	r2, #2
 80043f2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043f4:	193b      	adds	r3, r7, r4
 80043f6:	2200      	movs	r2, #0
 80043f8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043fa:	193b      	adds	r3, r7, r4
 80043fc:	2200      	movs	r2, #0
 80043fe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8004400:	193b      	adds	r3, r7, r4
 8004402:	2200      	movs	r2, #0
 8004404:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004406:	193a      	adds	r2, r7, r4
 8004408:	23a0      	movs	r3, #160	@ 0xa0
 800440a:	05db      	lsls	r3, r3, #23
 800440c:	0011      	movs	r1, r2
 800440e:	0018      	movs	r0, r3
 8004410:	f001 f8e2 	bl	80055d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8004414:	0021      	movs	r1, r4
 8004416:	187b      	adds	r3, r7, r1
 8004418:	2228      	movs	r2, #40	@ 0x28
 800441a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800441c:	187b      	adds	r3, r7, r1
 800441e:	2202      	movs	r2, #2
 8004420:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004422:	187b      	adds	r3, r7, r1
 8004424:	2200      	movs	r2, #0
 8004426:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004428:	187b      	adds	r3, r7, r1
 800442a:	2200      	movs	r2, #0
 800442c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800442e:	187b      	adds	r3, r7, r1
 8004430:	2200      	movs	r2, #0
 8004432:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004434:	187b      	adds	r3, r7, r1
 8004436:	4a06      	ldr	r2, [pc, #24]	@ (8004450 <HAL_SPI_MspInit+0x108>)
 8004438:	0019      	movs	r1, r3
 800443a:	0010      	movs	r0, r2
 800443c:	f001 f8cc 	bl	80055d8 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8004440:	46c0      	nop			@ (mov r8, r8)
 8004442:	46bd      	mov	sp, r7
 8004444:	b013      	add	sp, #76	@ 0x4c
 8004446:	bd90      	pop	{r4, r7, pc}
 8004448:	40013000 	.word	0x40013000
 800444c:	40021000 	.word	0x40021000
 8004450:	50000400 	.word	0x50000400

08004454 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a0a      	ldr	r2, [pc, #40]	@ (800448c <HAL_TIM_PWM_MspInit+0x38>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d10d      	bne.n	8004482 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004466:	4b0a      	ldr	r3, [pc, #40]	@ (8004490 <HAL_TIM_PWM_MspInit+0x3c>)
 8004468:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800446a:	4b09      	ldr	r3, [pc, #36]	@ (8004490 <HAL_TIM_PWM_MspInit+0x3c>)
 800446c:	2180      	movs	r1, #128	@ 0x80
 800446e:	0109      	lsls	r1, r1, #4
 8004470:	430a      	orrs	r2, r1
 8004472:	641a      	str	r2, [r3, #64]	@ 0x40
 8004474:	4b06      	ldr	r3, [pc, #24]	@ (8004490 <HAL_TIM_PWM_MspInit+0x3c>)
 8004476:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004478:	2380      	movs	r3, #128	@ 0x80
 800447a:	011b      	lsls	r3, r3, #4
 800447c:	4013      	ands	r3, r2
 800447e:	60fb      	str	r3, [r7, #12]
 8004480:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8004482:	46c0      	nop			@ (mov r8, r8)
 8004484:	46bd      	mov	sp, r7
 8004486:	b004      	add	sp, #16
 8004488:	bd80      	pop	{r7, pc}
 800448a:	46c0      	nop			@ (mov r8, r8)
 800448c:	40012c00 	.word	0x40012c00
 8004490:	40021000 	.word	0x40021000

08004494 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a0e      	ldr	r2, [pc, #56]	@ (80044dc <HAL_TIM_Base_MspInit+0x48>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d115      	bne.n	80044d2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80044a6:	4b0e      	ldr	r3, [pc, #56]	@ (80044e0 <HAL_TIM_Base_MspInit+0x4c>)
 80044a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80044aa:	4b0d      	ldr	r3, [pc, #52]	@ (80044e0 <HAL_TIM_Base_MspInit+0x4c>)
 80044ac:	2180      	movs	r1, #128	@ 0x80
 80044ae:	0209      	lsls	r1, r1, #8
 80044b0:	430a      	orrs	r2, r1
 80044b2:	641a      	str	r2, [r3, #64]	@ 0x40
 80044b4:	4b0a      	ldr	r3, [pc, #40]	@ (80044e0 <HAL_TIM_Base_MspInit+0x4c>)
 80044b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80044b8:	2380      	movs	r3, #128	@ 0x80
 80044ba:	021b      	lsls	r3, r3, #8
 80044bc:	4013      	ands	r3, r2
 80044be:	60fb      	str	r3, [r7, #12]
 80044c0:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 80044c2:	2200      	movs	r2, #0
 80044c4:	2100      	movs	r1, #0
 80044c6:	2013      	movs	r0, #19
 80044c8:	f000 fc86 	bl	8004dd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80044cc:	2013      	movs	r0, #19
 80044ce:	f000 fc98 	bl	8004e02 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM14_MspInit 1 */

  }

}
 80044d2:	46c0      	nop			@ (mov r8, r8)
 80044d4:	46bd      	mov	sp, r7
 80044d6:	b004      	add	sp, #16
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	46c0      	nop			@ (mov r8, r8)
 80044dc:	40002000 	.word	0x40002000
 80044e0:	40021000 	.word	0x40021000

080044e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80044e4:	b590      	push	{r4, r7, lr}
 80044e6:	b089      	sub	sp, #36	@ 0x24
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044ec:	240c      	movs	r4, #12
 80044ee:	193b      	adds	r3, r7, r4
 80044f0:	0018      	movs	r0, r3
 80044f2:	2314      	movs	r3, #20
 80044f4:	001a      	movs	r2, r3
 80044f6:	2100      	movs	r1, #0
 80044f8:	f007 fe74 	bl	800c1e4 <memset>
  if(htim->Instance==TIM1)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a15      	ldr	r2, [pc, #84]	@ (8004558 <HAL_TIM_MspPostInit+0x74>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d123      	bne.n	800454e <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004506:	4b15      	ldr	r3, [pc, #84]	@ (800455c <HAL_TIM_MspPostInit+0x78>)
 8004508:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800450a:	4b14      	ldr	r3, [pc, #80]	@ (800455c <HAL_TIM_MspPostInit+0x78>)
 800450c:	2101      	movs	r1, #1
 800450e:	430a      	orrs	r2, r1
 8004510:	635a      	str	r2, [r3, #52]	@ 0x34
 8004512:	4b12      	ldr	r3, [pc, #72]	@ (800455c <HAL_TIM_MspPostInit+0x78>)
 8004514:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004516:	2201      	movs	r2, #1
 8004518:	4013      	ands	r3, r2
 800451a:	60bb      	str	r3, [r7, #8]
 800451c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA15     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = Actuator_PWM_Pin;
 800451e:	193b      	adds	r3, r7, r4
 8004520:	2280      	movs	r2, #128	@ 0x80
 8004522:	0212      	lsls	r2, r2, #8
 8004524:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004526:	0021      	movs	r1, r4
 8004528:	187b      	adds	r3, r7, r1
 800452a:	2202      	movs	r2, #2
 800452c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800452e:	187b      	adds	r3, r7, r1
 8004530:	2200      	movs	r2, #0
 8004532:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004534:	187b      	adds	r3, r7, r1
 8004536:	2200      	movs	r2, #0
 8004538:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800453a:	187b      	adds	r3, r7, r1
 800453c:	2202      	movs	r2, #2
 800453e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(Actuator_PWM_GPIO_Port, &GPIO_InitStruct);
 8004540:	187a      	adds	r2, r7, r1
 8004542:	23a0      	movs	r3, #160	@ 0xa0
 8004544:	05db      	lsls	r3, r3, #23
 8004546:	0011      	movs	r1, r2
 8004548:	0018      	movs	r0, r3
 800454a:	f001 f845 	bl	80055d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800454e:	46c0      	nop			@ (mov r8, r8)
 8004550:	46bd      	mov	sp, r7
 8004552:	b009      	add	sp, #36	@ 0x24
 8004554:	bd90      	pop	{r4, r7, pc}
 8004556:	46c0      	nop			@ (mov r8, r8)
 8004558:	40012c00 	.word	0x40012c00
 800455c:	40021000 	.word	0x40021000

08004560 <HAL_TIM_Base_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a07      	ldr	r2, [pc, #28]	@ (800458c <HAL_TIM_Base_MspDeInit+0x2c>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d108      	bne.n	8004584 <HAL_TIM_Base_MspDeInit+0x24>
  {
  /* USER CODE BEGIN TIM14_MspDeInit 0 */

  /* USER CODE END TIM14_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM14_CLK_DISABLE();
 8004572:	4b07      	ldr	r3, [pc, #28]	@ (8004590 <HAL_TIM_Base_MspDeInit+0x30>)
 8004574:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004576:	4b06      	ldr	r3, [pc, #24]	@ (8004590 <HAL_TIM_Base_MspDeInit+0x30>)
 8004578:	4906      	ldr	r1, [pc, #24]	@ (8004594 <HAL_TIM_Base_MspDeInit+0x34>)
 800457a:	400a      	ands	r2, r1
 800457c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* TIM14 interrupt DeInit */
    HAL_NVIC_DisableIRQ(TIM14_IRQn);
 800457e:	2013      	movs	r0, #19
 8004580:	f000 fc4f 	bl	8004e22 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN TIM14_MspDeInit 1 */

  /* USER CODE END TIM14_MspDeInit 1 */
  }

}
 8004584:	46c0      	nop			@ (mov r8, r8)
 8004586:	46bd      	mov	sp, r7
 8004588:	b002      	add	sp, #8
 800458a:	bd80      	pop	{r7, pc}
 800458c:	40002000 	.word	0x40002000
 8004590:	40021000 	.word	0x40021000
 8004594:	ffff7fff 	.word	0xffff7fff

08004598 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004598:	b590      	push	{r4, r7, lr}
 800459a:	b095      	sub	sp, #84	@ 0x54
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045a0:	233c      	movs	r3, #60	@ 0x3c
 80045a2:	18fb      	adds	r3, r7, r3
 80045a4:	0018      	movs	r0, r3
 80045a6:	2314      	movs	r3, #20
 80045a8:	001a      	movs	r2, r3
 80045aa:	2100      	movs	r1, #0
 80045ac:	f007 fe1a 	bl	800c1e4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80045b0:	241c      	movs	r4, #28
 80045b2:	193b      	adds	r3, r7, r4
 80045b4:	0018      	movs	r0, r3
 80045b6:	2320      	movs	r3, #32
 80045b8:	001a      	movs	r2, r3
 80045ba:	2100      	movs	r1, #0
 80045bc:	f007 fe12 	bl	800c1e4 <memset>
  if(huart->Instance==USART1)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a74      	ldr	r2, [pc, #464]	@ (8004798 <HAL_UART_MspInit+0x200>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d000      	beq.n	80045cc <HAL_UART_MspInit+0x34>
 80045ca:	e0e1      	b.n	8004790 <HAL_UART_MspInit+0x1f8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80045cc:	193b      	adds	r3, r7, r4
 80045ce:	2201      	movs	r2, #1
 80045d0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80045d2:	193b      	adds	r3, r7, r4
 80045d4:	2200      	movs	r2, #0
 80045d6:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80045d8:	193b      	adds	r3, r7, r4
 80045da:	0018      	movs	r0, r3
 80045dc:	f004 f84c 	bl	8008678 <HAL_RCCEx_PeriphCLKConfig>
 80045e0:	1e03      	subs	r3, r0, #0
 80045e2:	d001      	beq.n	80045e8 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80045e4:	f7fe fdf6 	bl	80031d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80045e8:	4b6c      	ldr	r3, [pc, #432]	@ (800479c <HAL_UART_MspInit+0x204>)
 80045ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80045ec:	4b6b      	ldr	r3, [pc, #428]	@ (800479c <HAL_UART_MspInit+0x204>)
 80045ee:	2180      	movs	r1, #128	@ 0x80
 80045f0:	01c9      	lsls	r1, r1, #7
 80045f2:	430a      	orrs	r2, r1
 80045f4:	641a      	str	r2, [r3, #64]	@ 0x40
 80045f6:	4b69      	ldr	r3, [pc, #420]	@ (800479c <HAL_UART_MspInit+0x204>)
 80045f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80045fa:	2380      	movs	r3, #128	@ 0x80
 80045fc:	01db      	lsls	r3, r3, #7
 80045fe:	4013      	ands	r3, r2
 8004600:	61bb      	str	r3, [r7, #24]
 8004602:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004604:	4b65      	ldr	r3, [pc, #404]	@ (800479c <HAL_UART_MspInit+0x204>)
 8004606:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004608:	4b64      	ldr	r3, [pc, #400]	@ (800479c <HAL_UART_MspInit+0x204>)
 800460a:	2104      	movs	r1, #4
 800460c:	430a      	orrs	r2, r1
 800460e:	635a      	str	r2, [r3, #52]	@ 0x34
 8004610:	4b62      	ldr	r3, [pc, #392]	@ (800479c <HAL_UART_MspInit+0x204>)
 8004612:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004614:	2204      	movs	r2, #4
 8004616:	4013      	ands	r3, r2
 8004618:	617b      	str	r3, [r7, #20]
 800461a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800461c:	4b5f      	ldr	r3, [pc, #380]	@ (800479c <HAL_UART_MspInit+0x204>)
 800461e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004620:	4b5e      	ldr	r3, [pc, #376]	@ (800479c <HAL_UART_MspInit+0x204>)
 8004622:	2102      	movs	r1, #2
 8004624:	430a      	orrs	r2, r1
 8004626:	635a      	str	r2, [r3, #52]	@ 0x34
 8004628:	4b5c      	ldr	r3, [pc, #368]	@ (800479c <HAL_UART_MspInit+0x204>)
 800462a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800462c:	2202      	movs	r2, #2
 800462e:	4013      	ands	r3, r2
 8004630:	613b      	str	r3, [r7, #16]
 8004632:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004634:	4b59      	ldr	r3, [pc, #356]	@ (800479c <HAL_UART_MspInit+0x204>)
 8004636:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004638:	4b58      	ldr	r3, [pc, #352]	@ (800479c <HAL_UART_MspInit+0x204>)
 800463a:	2101      	movs	r1, #1
 800463c:	430a      	orrs	r2, r1
 800463e:	635a      	str	r2, [r3, #52]	@ 0x34
 8004640:	4b56      	ldr	r3, [pc, #344]	@ (800479c <HAL_UART_MspInit+0x204>)
 8004642:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004644:	2201      	movs	r2, #1
 8004646:	4013      	ands	r3, r2
 8004648:	60fb      	str	r3, [r7, #12]
 800464a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC14-OSCX_IN(PC14)     ------> USART1_TX
    PB2     ------> USART1_RX
    PA12 [PA10]     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800464c:	213c      	movs	r1, #60	@ 0x3c
 800464e:	187b      	adds	r3, r7, r1
 8004650:	2280      	movs	r2, #128	@ 0x80
 8004652:	01d2      	lsls	r2, r2, #7
 8004654:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004656:	000c      	movs	r4, r1
 8004658:	193b      	adds	r3, r7, r4
 800465a:	2202      	movs	r2, #2
 800465c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800465e:	193b      	adds	r3, r7, r4
 8004660:	2200      	movs	r2, #0
 8004662:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004664:	193b      	adds	r3, r7, r4
 8004666:	2200      	movs	r2, #0
 8004668:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 800466a:	193b      	adds	r3, r7, r4
 800466c:	2200      	movs	r2, #0
 800466e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004670:	193b      	adds	r3, r7, r4
 8004672:	4a4b      	ldr	r2, [pc, #300]	@ (80047a0 <HAL_UART_MspInit+0x208>)
 8004674:	0019      	movs	r1, r3
 8004676:	0010      	movs	r0, r2
 8004678:	f000 ffae 	bl	80055d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800467c:	193b      	adds	r3, r7, r4
 800467e:	2204      	movs	r2, #4
 8004680:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004682:	193b      	adds	r3, r7, r4
 8004684:	2202      	movs	r2, #2
 8004686:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004688:	193b      	adds	r3, r7, r4
 800468a:	2200      	movs	r2, #0
 800468c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800468e:	193b      	adds	r3, r7, r4
 8004690:	2200      	movs	r2, #0
 8004692:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8004694:	193b      	adds	r3, r7, r4
 8004696:	2200      	movs	r2, #0
 8004698:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800469a:	193b      	adds	r3, r7, r4
 800469c:	4a41      	ldr	r2, [pc, #260]	@ (80047a4 <HAL_UART_MspInit+0x20c>)
 800469e:	0019      	movs	r1, r3
 80046a0:	0010      	movs	r0, r2
 80046a2:	f000 ff99 	bl	80055d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80046a6:	0021      	movs	r1, r4
 80046a8:	187b      	adds	r3, r7, r1
 80046aa:	2280      	movs	r2, #128	@ 0x80
 80046ac:	0152      	lsls	r2, r2, #5
 80046ae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046b0:	187b      	adds	r3, r7, r1
 80046b2:	2202      	movs	r2, #2
 80046b4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046b6:	187b      	adds	r3, r7, r1
 80046b8:	2200      	movs	r2, #0
 80046ba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046bc:	187b      	adds	r3, r7, r1
 80046be:	2200      	movs	r2, #0
 80046c0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80046c2:	187b      	adds	r3, r7, r1
 80046c4:	2201      	movs	r2, #1
 80046c6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046c8:	187a      	adds	r2, r7, r1
 80046ca:	23a0      	movs	r3, #160	@ 0xa0
 80046cc:	05db      	lsls	r3, r3, #23
 80046ce:	0011      	movs	r1, r2
 80046d0:	0018      	movs	r0, r3
 80046d2:	f000 ff81 	bl	80055d8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 80046d6:	4b34      	ldr	r3, [pc, #208]	@ (80047a8 <HAL_UART_MspInit+0x210>)
 80046d8:	4a34      	ldr	r2, [pc, #208]	@ (80047ac <HAL_UART_MspInit+0x214>)
 80046da:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80046dc:	4b32      	ldr	r3, [pc, #200]	@ (80047a8 <HAL_UART_MspInit+0x210>)
 80046de:	2232      	movs	r2, #50	@ 0x32
 80046e0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80046e2:	4b31      	ldr	r3, [pc, #196]	@ (80047a8 <HAL_UART_MspInit+0x210>)
 80046e4:	2200      	movs	r2, #0
 80046e6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80046e8:	4b2f      	ldr	r3, [pc, #188]	@ (80047a8 <HAL_UART_MspInit+0x210>)
 80046ea:	2200      	movs	r2, #0
 80046ec:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80046ee:	4b2e      	ldr	r3, [pc, #184]	@ (80047a8 <HAL_UART_MspInit+0x210>)
 80046f0:	2280      	movs	r2, #128	@ 0x80
 80046f2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80046f4:	4b2c      	ldr	r3, [pc, #176]	@ (80047a8 <HAL_UART_MspInit+0x210>)
 80046f6:	2200      	movs	r2, #0
 80046f8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80046fa:	4b2b      	ldr	r3, [pc, #172]	@ (80047a8 <HAL_UART_MspInit+0x210>)
 80046fc:	2200      	movs	r2, #0
 80046fe:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8004700:	4b29      	ldr	r3, [pc, #164]	@ (80047a8 <HAL_UART_MspInit+0x210>)
 8004702:	2200      	movs	r2, #0
 8004704:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004706:	4b28      	ldr	r3, [pc, #160]	@ (80047a8 <HAL_UART_MspInit+0x210>)
 8004708:	22c0      	movs	r2, #192	@ 0xc0
 800470a:	0192      	lsls	r2, r2, #6
 800470c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800470e:	4b26      	ldr	r3, [pc, #152]	@ (80047a8 <HAL_UART_MspInit+0x210>)
 8004710:	0018      	movs	r0, r3
 8004712:	f000 fba3 	bl	8004e5c <HAL_DMA_Init>
 8004716:	1e03      	subs	r3, r0, #0
 8004718:	d001      	beq.n	800471e <HAL_UART_MspInit+0x186>
    {
      Error_Handler();
 800471a:	f7fe fd5b 	bl	80031d4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2180      	movs	r1, #128	@ 0x80
 8004722:	4a21      	ldr	r2, [pc, #132]	@ (80047a8 <HAL_UART_MspInit+0x210>)
 8004724:	505a      	str	r2, [r3, r1]
 8004726:	4b20      	ldr	r3, [pc, #128]	@ (80047a8 <HAL_UART_MspInit+0x210>)
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel3;
 800472c:	4b20      	ldr	r3, [pc, #128]	@ (80047b0 <HAL_UART_MspInit+0x218>)
 800472e:	4a21      	ldr	r2, [pc, #132]	@ (80047b4 <HAL_UART_MspInit+0x21c>)
 8004730:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8004732:	4b1f      	ldr	r3, [pc, #124]	@ (80047b0 <HAL_UART_MspInit+0x218>)
 8004734:	2233      	movs	r2, #51	@ 0x33
 8004736:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004738:	4b1d      	ldr	r3, [pc, #116]	@ (80047b0 <HAL_UART_MspInit+0x218>)
 800473a:	2210      	movs	r2, #16
 800473c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800473e:	4b1c      	ldr	r3, [pc, #112]	@ (80047b0 <HAL_UART_MspInit+0x218>)
 8004740:	2200      	movs	r2, #0
 8004742:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004744:	4b1a      	ldr	r3, [pc, #104]	@ (80047b0 <HAL_UART_MspInit+0x218>)
 8004746:	2280      	movs	r2, #128	@ 0x80
 8004748:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800474a:	4b19      	ldr	r3, [pc, #100]	@ (80047b0 <HAL_UART_MspInit+0x218>)
 800474c:	2200      	movs	r2, #0
 800474e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004750:	4b17      	ldr	r3, [pc, #92]	@ (80047b0 <HAL_UART_MspInit+0x218>)
 8004752:	2200      	movs	r2, #0
 8004754:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004756:	4b16      	ldr	r3, [pc, #88]	@ (80047b0 <HAL_UART_MspInit+0x218>)
 8004758:	2200      	movs	r2, #0
 800475a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800475c:	4b14      	ldr	r3, [pc, #80]	@ (80047b0 <HAL_UART_MspInit+0x218>)
 800475e:	2280      	movs	r2, #128	@ 0x80
 8004760:	0192      	lsls	r2, r2, #6
 8004762:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004764:	4b12      	ldr	r3, [pc, #72]	@ (80047b0 <HAL_UART_MspInit+0x218>)
 8004766:	0018      	movs	r0, r3
 8004768:	f000 fb78 	bl	8004e5c <HAL_DMA_Init>
 800476c:	1e03      	subs	r3, r0, #0
 800476e:	d001      	beq.n	8004774 <HAL_UART_MspInit+0x1dc>
    {
      Error_Handler();
 8004770:	f7fe fd30 	bl	80031d4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a0e      	ldr	r2, [pc, #56]	@ (80047b0 <HAL_UART_MspInit+0x218>)
 8004778:	67da      	str	r2, [r3, #124]	@ 0x7c
 800477a:	4b0d      	ldr	r3, [pc, #52]	@ (80047b0 <HAL_UART_MspInit+0x218>)
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004780:	2200      	movs	r2, #0
 8004782:	2100      	movs	r1, #0
 8004784:	201b      	movs	r0, #27
 8004786:	f000 fb27 	bl	8004dd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800478a:	201b      	movs	r0, #27
 800478c:	f000 fb39 	bl	8004e02 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8004790:	46c0      	nop			@ (mov r8, r8)
 8004792:	46bd      	mov	sp, r7
 8004794:	b015      	add	sp, #84	@ 0x54
 8004796:	bd90      	pop	{r4, r7, pc}
 8004798:	40013800 	.word	0x40013800
 800479c:	40021000 	.word	0x40021000
 80047a0:	50000800 	.word	0x50000800
 80047a4:	50000400 	.word	0x50000400
 80047a8:	200005a0 	.word	0x200005a0
 80047ac:	4002001c 	.word	0x4002001c
 80047b0:	200005fc 	.word	0x200005fc
 80047b4:	40020030 	.word	0x40020030

080047b8 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a17      	ldr	r2, [pc, #92]	@ (8004824 <HAL_UART_MspDeInit+0x6c>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d127      	bne.n	800481a <HAL_UART_MspDeInit+0x62>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80047ca:	4b17      	ldr	r3, [pc, #92]	@ (8004828 <HAL_UART_MspDeInit+0x70>)
 80047cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80047ce:	4b16      	ldr	r3, [pc, #88]	@ (8004828 <HAL_UART_MspDeInit+0x70>)
 80047d0:	4916      	ldr	r1, [pc, #88]	@ (800482c <HAL_UART_MspDeInit+0x74>)
 80047d2:	400a      	ands	r2, r1
 80047d4:	641a      	str	r2, [r3, #64]	@ 0x40
    /**USART1 GPIO Configuration
    PC14-OSCX_IN(PC14)     ------> USART1_TX
    PB2     ------> USART1_RX
    PA12 [PA10]     ------> USART1_DE
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_14);
 80047d6:	2380      	movs	r3, #128	@ 0x80
 80047d8:	01db      	lsls	r3, r3, #7
 80047da:	4a15      	ldr	r2, [pc, #84]	@ (8004830 <HAL_UART_MspDeInit+0x78>)
 80047dc:	0019      	movs	r1, r3
 80047de:	0010      	movs	r0, r2
 80047e0:	f001 f86c 	bl	80058bc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2);
 80047e4:	4b13      	ldr	r3, [pc, #76]	@ (8004834 <HAL_UART_MspDeInit+0x7c>)
 80047e6:	2104      	movs	r1, #4
 80047e8:	0018      	movs	r0, r3
 80047ea:	f001 f867 	bl	80058bc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_12);
 80047ee:	2380      	movs	r3, #128	@ 0x80
 80047f0:	015a      	lsls	r2, r3, #5
 80047f2:	23a0      	movs	r3, #160	@ 0xa0
 80047f4:	05db      	lsls	r3, r3, #23
 80047f6:	0011      	movs	r1, r2
 80047f8:	0018      	movs	r0, r3
 80047fa:	f001 f85f 	bl	80058bc <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2280      	movs	r2, #128	@ 0x80
 8004802:	589b      	ldr	r3, [r3, r2]
 8004804:	0018      	movs	r0, r3
 8004806:	f000 fbb3 	bl	8004f70 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800480e:	0018      	movs	r0, r3
 8004810:	f000 fbae 	bl	8004f70 <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8004814:	201b      	movs	r0, #27
 8004816:	f000 fb04 	bl	8004e22 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 800481a:	46c0      	nop			@ (mov r8, r8)
 800481c:	46bd      	mov	sp, r7
 800481e:	b002      	add	sp, #8
 8004820:	bd80      	pop	{r7, pc}
 8004822:	46c0      	nop			@ (mov r8, r8)
 8004824:	40013800 	.word	0x40013800
 8004828:	40021000 	.word	0x40021000
 800482c:	ffffbfff 	.word	0xffffbfff
 8004830:	50000800 	.word	0x50000800
 8004834:	50000400 	.word	0x50000400

08004838 <LL_ADC_IsActiveFlag_OVR>:
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_OVR) == (LL_ADC_FLAG_OVR)) ? 1UL : 0UL);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2210      	movs	r2, #16
 8004846:	4013      	ands	r3, r2
 8004848:	2b10      	cmp	r3, #16
 800484a:	d101      	bne.n	8004850 <LL_ADC_IsActiveFlag_OVR+0x18>
 800484c:	2301      	movs	r3, #1
 800484e:	e000      	b.n	8004852 <LL_ADC_IsActiveFlag_OVR+0x1a>
 8004850:	2300      	movs	r3, #0
}
 8004852:	0018      	movs	r0, r3
 8004854:	46bd      	mov	sp, r7
 8004856:	b002      	add	sp, #8
 8004858:	bd80      	pop	{r7, pc}

0800485a <LL_ADC_ClearFlag_OVR>:
{
 800485a:	b580      	push	{r7, lr}
 800485c:	b082      	sub	sp, #8
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_OVR);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2210      	movs	r2, #16
 8004866:	601a      	str	r2, [r3, #0]
}
 8004868:	46c0      	nop			@ (mov r8, r8)
 800486a:	46bd      	mov	sp, r7
 800486c:	b002      	add	sp, #8
 800486e:	bd80      	pop	{r7, pc}

08004870 <LL_DMA_IsActiveFlag_TC1>:
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF1) == (DMA_ISR_TCIF1)) ? 1UL : 0UL);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2202      	movs	r2, #2
 800487e:	4013      	ands	r3, r2
 8004880:	2b02      	cmp	r3, #2
 8004882:	d101      	bne.n	8004888 <LL_DMA_IsActiveFlag_TC1+0x18>
 8004884:	2301      	movs	r3, #1
 8004886:	e000      	b.n	800488a <LL_DMA_IsActiveFlag_TC1+0x1a>
 8004888:	2300      	movs	r3, #0
}
 800488a:	0018      	movs	r0, r3
 800488c:	46bd      	mov	sp, r7
 800488e:	b002      	add	sp, #8
 8004890:	bd80      	pop	{r7, pc}

08004892 <LL_DMA_IsActiveFlag_HT1>:
{
 8004892:	b580      	push	{r7, lr}
 8004894:	b082      	sub	sp, #8
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_HTIF1) == (DMA_ISR_HTIF1)) ? 1UL : 0UL);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2204      	movs	r2, #4
 80048a0:	4013      	ands	r3, r2
 80048a2:	2b04      	cmp	r3, #4
 80048a4:	d101      	bne.n	80048aa <LL_DMA_IsActiveFlag_HT1+0x18>
 80048a6:	2301      	movs	r3, #1
 80048a8:	e000      	b.n	80048ac <LL_DMA_IsActiveFlag_HT1+0x1a>
 80048aa:	2300      	movs	r3, #0
}
 80048ac:	0018      	movs	r0, r3
 80048ae:	46bd      	mov	sp, r7
 80048b0:	b002      	add	sp, #8
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <LL_DMA_IsActiveFlag_TE1>:
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b082      	sub	sp, #8
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF1) == (DMA_ISR_TEIF1)) ? 1UL : 0UL);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2208      	movs	r2, #8
 80048c2:	4013      	ands	r3, r2
 80048c4:	2b08      	cmp	r3, #8
 80048c6:	d101      	bne.n	80048cc <LL_DMA_IsActiveFlag_TE1+0x18>
 80048c8:	2301      	movs	r3, #1
 80048ca:	e000      	b.n	80048ce <LL_DMA_IsActiveFlag_TE1+0x1a>
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	0018      	movs	r0, r3
 80048d0:	46bd      	mov	sp, r7
 80048d2:	b002      	add	sp, #8
 80048d4:	bd80      	pop	{r7, pc}

080048d6 <LL_DMA_ClearFlag_TC1>:
{
 80048d6:	b580      	push	{r7, lr}
 80048d8:	b082      	sub	sp, #8
 80048da:	af00      	add	r7, sp, #0
 80048dc:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2202      	movs	r2, #2
 80048e2:	605a      	str	r2, [r3, #4]
}
 80048e4:	46c0      	nop			@ (mov r8, r8)
 80048e6:	46bd      	mov	sp, r7
 80048e8:	b002      	add	sp, #8
 80048ea:	bd80      	pop	{r7, pc}

080048ec <LL_DMA_ClearFlag_HT1>:
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF1);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2204      	movs	r2, #4
 80048f8:	605a      	str	r2, [r3, #4]
}
 80048fa:	46c0      	nop			@ (mov r8, r8)
 80048fc:	46bd      	mov	sp, r7
 80048fe:	b002      	add	sp, #8
 8004900:	bd80      	pop	{r7, pc}

08004902 <LL_DMA_ClearFlag_TE1>:
{
 8004902:	b580      	push	{r7, lr}
 8004904:	b082      	sub	sp, #8
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF1);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2208      	movs	r2, #8
 800490e:	605a      	str	r2, [r3, #4]
}
 8004910:	46c0      	nop			@ (mov r8, r8)
 8004912:	46bd      	mov	sp, r7
 8004914:	b002      	add	sp, #8
 8004916:	bd80      	pop	{r7, pc}

08004918 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800491c:	46c0      	nop			@ (mov r8, r8)
 800491e:	e7fd      	b.n	800491c <NMI_Handler+0x4>

08004920 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004924:	46c0      	nop			@ (mov r8, r8)
 8004926:	e7fd      	b.n	8004924 <HardFault_Handler+0x4>

08004928 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800492c:	46c0      	nop			@ (mov r8, r8)
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}

08004932 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004932:	b580      	push	{r7, lr}
 8004934:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004936:	46c0      	nop			@ (mov r8, r8)
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}

0800493c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004940:	f000 f93c 	bl	8004bbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004944:	46c0      	nop			@ (mov r8, r8)
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}

0800494a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800494a:	b580      	push	{r7, lr}
 800494c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encoder_Pulse_A_Pin);
 800494e:	2380      	movs	r3, #128	@ 0x80
 8004950:	019b      	lsls	r3, r3, #6
 8004952:	0018      	movs	r0, r3
 8004954:	f001 f8c4 	bl	8005ae0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8004958:	46c0      	nop			@ (mov r8, r8)
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
	...

08004960 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
  /* Check whether DMA transfer complete caused the DMA interruption */
  if(LL_DMA_IsActiveFlag_TC1(DMA1) == 1)
 8004964:	4b15      	ldr	r3, [pc, #84]	@ (80049bc <DMA1_Channel1_IRQHandler+0x5c>)
 8004966:	0018      	movs	r0, r3
 8004968:	f7ff ff82 	bl	8004870 <LL_DMA_IsActiveFlag_TC1>
 800496c:	0003      	movs	r3, r0
 800496e:	2b01      	cmp	r3, #1
 8004970:	d106      	bne.n	8004980 <DMA1_Channel1_IRQHandler+0x20>
  {
	/* Clear flag DMA transfer complete */
	LL_DMA_ClearFlag_TC1(DMA1);
 8004972:	4b12      	ldr	r3, [pc, #72]	@ (80049bc <DMA1_Channel1_IRQHandler+0x5c>)
 8004974:	0018      	movs	r0, r3
 8004976:	f7ff ffae 	bl	80048d6 <LL_DMA_ClearFlag_TC1>

	/* Call interruption treatment function */
	ADC_ConvCpltCallback();
 800497a:	f7ff fb0b 	bl	8003f94 <ADC_ConvCpltCallback>
 800497e:	e00c      	b.n	800499a <DMA1_Channel1_IRQHandler+0x3a>
  }
  else if(LL_DMA_IsActiveFlag_HT1(DMA1) == 1)
 8004980:	4b0e      	ldr	r3, [pc, #56]	@ (80049bc <DMA1_Channel1_IRQHandler+0x5c>)
 8004982:	0018      	movs	r0, r3
 8004984:	f7ff ff85 	bl	8004892 <LL_DMA_IsActiveFlag_HT1>
 8004988:	0003      	movs	r3, r0
 800498a:	2b01      	cmp	r3, #1
 800498c:	d105      	bne.n	800499a <DMA1_Channel1_IRQHandler+0x3a>
  {
	  /* Clear flag DMA half transfer complete */
	  LL_DMA_ClearFlag_HT1(DMA1);
 800498e:	4b0b      	ldr	r3, [pc, #44]	@ (80049bc <DMA1_Channel1_IRQHandler+0x5c>)
 8004990:	0018      	movs	r0, r3
 8004992:	f7ff ffab 	bl	80048ec <LL_DMA_ClearFlag_HT1>

	  /* Call interruption treatment function */
	  ADC_ConvHalfCpltCallback();
 8004996:	f7ff fb07 	bl	8003fa8 <ADC_ConvHalfCpltCallback>
  }
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
  /* Check whether DMA transfer error caused the DMA interruption */
  if(LL_DMA_IsActiveFlag_TE1(DMA1) == 1)
 800499a:	4b08      	ldr	r3, [pc, #32]	@ (80049bc <DMA1_Channel1_IRQHandler+0x5c>)
 800499c:	0018      	movs	r0, r3
 800499e:	f7ff ff89 	bl	80048b4 <LL_DMA_IsActiveFlag_TE1>
 80049a2:	0003      	movs	r3, r0
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d105      	bne.n	80049b4 <DMA1_Channel1_IRQHandler+0x54>
  {
	  /* Clear flag DMA transfer error */
	  LL_DMA_ClearFlag_TE1(DMA1);
 80049a8:	4b04      	ldr	r3, [pc, #16]	@ (80049bc <DMA1_Channel1_IRQHandler+0x5c>)
 80049aa:	0018      	movs	r0, r3
 80049ac:	f7ff ffa9 	bl	8004902 <LL_DMA_ClearFlag_TE1>

	  /* Call interruption treatment function */
	  ADC_ErrorCallback();
 80049b0:	f7ff fb04 	bl	8003fbc <ADC_ErrorCallback>
  }
  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80049b4:	46c0      	nop			@ (mov r8, r8)
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	46c0      	nop			@ (mov r8, r8)
 80049bc:	40020000 	.word	0x40020000

080049c0 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80049c4:	4b05      	ldr	r3, [pc, #20]	@ (80049dc <DMA1_Channel2_3_IRQHandler+0x1c>)
 80049c6:	0018      	movs	r0, r3
 80049c8:	f000 fcae 	bl	8005328 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80049cc:	4b04      	ldr	r3, [pc, #16]	@ (80049e0 <DMA1_Channel2_3_IRQHandler+0x20>)
 80049ce:	0018      	movs	r0, r3
 80049d0:	f000 fcaa 	bl	8005328 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80049d4:	46c0      	nop			@ (mov r8, r8)
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	46c0      	nop			@ (mov r8, r8)
 80049dc:	200005a0 	.word	0x200005a0
 80049e0:	200005fc 	.word	0x200005fc

080049e4 <DMAMUX1_DMA1_CH4_5_IRQHandler>:

/**
  * @brief This function handles DMAMUX1, DMA1 Channel 4 and 5.
  */
void DMAMUX1_DMA1_CH4_5_IRQHandler(void)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_DMA1_CH4_5_IRQn 0 */

  /* USER CODE END DMAMUX1_DMA1_CH4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80049e8:	4b05      	ldr	r3, [pc, #20]	@ (8004a00 <DMAMUX1_DMA1_CH4_5_IRQHandler+0x1c>)
 80049ea:	0018      	movs	r0, r3
 80049ec:	f000 fc9c 	bl	8005328 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80049f0:	4b04      	ldr	r3, [pc, #16]	@ (8004a04 <DMAMUX1_DMA1_CH4_5_IRQHandler+0x20>)
 80049f2:	0018      	movs	r0, r3
 80049f4:	f000 fc98 	bl	8005328 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_DMA1_CH4_5_IRQn 1 */

  /* USER CODE END DMAMUX1_DMA1_CH4_5_IRQn 1 */
}
 80049f8:	46c0      	nop			@ (mov r8, r8)
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	46c0      	nop			@ (mov r8, r8)
 8004a00:	20000358 	.word	0x20000358
 8004a04:	200003b4 	.word	0x200003b4

08004a08 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */
  /* Check whether ADC group regular overrun caused the ADC interruption */
  if(LL_ADC_IsActiveFlag_OVR(ADC1) != 0)
 8004a0c:	4b07      	ldr	r3, [pc, #28]	@ (8004a2c <ADC1_IRQHandler+0x24>)
 8004a0e:	0018      	movs	r0, r3
 8004a10:	f7ff ff12 	bl	8004838 <LL_ADC_IsActiveFlag_OVR>
 8004a14:	1e03      	subs	r3, r0, #0
 8004a16:	d005      	beq.n	8004a24 <ADC1_IRQHandler+0x1c>
  {
	/* Clear flag ADC group regular overrun */
	LL_ADC_ClearFlag_OVR(ADC1);
 8004a18:	4b04      	ldr	r3, [pc, #16]	@ (8004a2c <ADC1_IRQHandler+0x24>)
 8004a1a:	0018      	movs	r0, r3
 8004a1c:	f7ff ff1d 	bl	800485a <LL_ADC_ClearFlag_OVR>

	/* Call interruption treatment function */
	ADC_ErrorCallback();
 8004a20:	f7ff facc 	bl	8003fbc <ADC_ErrorCallback>
  }
  /* USER CODE END ADC1_IRQn 0 */
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8004a24:	46c0      	nop			@ (mov r8, r8)
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	46c0      	nop			@ (mov r8, r8)
 8004a2c:	40012400 	.word	0x40012400

08004a30 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8004a34:	4b03      	ldr	r3, [pc, #12]	@ (8004a44 <TIM14_IRQHandler+0x14>)
 8004a36:	0018      	movs	r0, r3
 8004a38:	f004 fdf4 	bl	8009624 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8004a3c:	46c0      	nop			@ (mov r8, r8)
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	46c0      	nop			@ (mov r8, r8)
 8004a44:	200004c0 	.word	0x200004c0

08004a48 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 interrupt (combined with EXTI 23).
  */
void I2C1_IRQHandler(void)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8004a4c:	4b09      	ldr	r3, [pc, #36]	@ (8004a74 <I2C1_IRQHandler+0x2c>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	699a      	ldr	r2, [r3, #24]
 8004a52:	23e0      	movs	r3, #224	@ 0xe0
 8004a54:	00db      	lsls	r3, r3, #3
 8004a56:	4013      	ands	r3, r2
 8004a58:	d004      	beq.n	8004a64 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8004a5a:	4b06      	ldr	r3, [pc, #24]	@ (8004a74 <I2C1_IRQHandler+0x2c>)
 8004a5c:	0018      	movs	r0, r3
 8004a5e:	f001 fc93 	bl	8006388 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8004a62:	e003      	b.n	8004a6c <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8004a64:	4b03      	ldr	r3, [pc, #12]	@ (8004a74 <I2C1_IRQHandler+0x2c>)
 8004a66:	0018      	movs	r0, r3
 8004a68:	f001 fc74 	bl	8006354 <HAL_I2C_EV_IRQHandler>
}
 8004a6c:	46c0      	nop			@ (mov r8, r8)
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	46c0      	nop			@ (mov r8, r8)
 8004a74:	20000304 	.word	0x20000304

08004a78 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 interrupt.
  */
void USART1_IRQHandler(void)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004a7c:	4b03      	ldr	r3, [pc, #12]	@ (8004a8c <USART1_IRQHandler+0x14>)
 8004a7e:	0018      	movs	r0, r3
 8004a80:	f005 fe36 	bl	800a6f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004a84:	46c0      	nop			@ (mov r8, r8)
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	46c0      	nop			@ (mov r8, r8)
 8004a8c:	2000050c 	.word	0x2000050c

08004a90 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004a94:	4b03      	ldr	r3, [pc, #12]	@ (8004aa4 <SystemInit+0x14>)
 8004a96:	2280      	movs	r2, #128	@ 0x80
 8004a98:	0512      	lsls	r2, r2, #20
 8004a9a:	609a      	str	r2, [r3, #8]
#endif
}
 8004a9c:	46c0      	nop			@ (mov r8, r8)
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	46c0      	nop			@ (mov r8, r8)
 8004aa4:	e000ed00 	.word	0xe000ed00

08004aa8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004aa8:	480d      	ldr	r0, [pc, #52]	@ (8004ae0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004aaa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004aac:	f7ff fff0 	bl	8004a90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004ab0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8004ab2:	e003      	b.n	8004abc <LoopCopyDataInit>

08004ab4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8004ae4 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8004ab6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004ab8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004aba:	3104      	adds	r1, #4

08004abc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004abc:	480a      	ldr	r0, [pc, #40]	@ (8004ae8 <LoopForever+0xa>)
  ldr r3, =_edata
 8004abe:	4b0b      	ldr	r3, [pc, #44]	@ (8004aec <LoopForever+0xe>)
  adds r2, r0, r1
 8004ac0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004ac2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004ac4:	d3f6      	bcc.n	8004ab4 <CopyDataInit>
  ldr r2, =_sbss
 8004ac6:	4a0a      	ldr	r2, [pc, #40]	@ (8004af0 <LoopForever+0x12>)
  b LoopFillZerobss
 8004ac8:	e002      	b.n	8004ad0 <LoopFillZerobss>

08004aca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004aca:	2300      	movs	r3, #0
  str  r3, [r2]
 8004acc:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004ace:	3204      	adds	r2, #4

08004ad0 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8004ad0:	4b08      	ldr	r3, [pc, #32]	@ (8004af4 <LoopForever+0x16>)
  cmp r2, r3
 8004ad2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004ad4:	d3f9      	bcc.n	8004aca <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8004ad6:	f007 fb8d 	bl	800c1f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004ada:	f7fd fb47 	bl	800216c <main>

08004ade <LoopForever>:

LoopForever:
    b LoopForever
 8004ade:	e7fe      	b.n	8004ade <LoopForever>
  ldr   r0, =_estack
 8004ae0:	20006000 	.word	0x20006000
  ldr r3, =_sidata
 8004ae4:	0800c690 	.word	0x0800c690
  ldr r0, =_sdata
 8004ae8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004aec:	200000c4 	.word	0x200000c4
  ldr r2, =_sbss
 8004af0:	200000c4 	.word	0x200000c4
  ldr r3, = _ebss
 8004af4:	200009bc 	.word	0x200009bc

08004af8 <EXTI0_1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004af8:	e7fe      	b.n	8004af8 <EXTI0_1_IRQHandler>

08004afa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004afa:	b580      	push	{r7, lr}
 8004afc:	b082      	sub	sp, #8
 8004afe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004b00:	1dfb      	adds	r3, r7, #7
 8004b02:	2200      	movs	r2, #0
 8004b04:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004b06:	2003      	movs	r0, #3
 8004b08:	f000 f80e 	bl	8004b28 <HAL_InitTick>
 8004b0c:	1e03      	subs	r3, r0, #0
 8004b0e:	d003      	beq.n	8004b18 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8004b10:	1dfb      	adds	r3, r7, #7
 8004b12:	2201      	movs	r2, #1
 8004b14:	701a      	strb	r2, [r3, #0]
 8004b16:	e001      	b.n	8004b1c <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004b18:	f7ff faf6 	bl	8004108 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004b1c:	1dfb      	adds	r3, r7, #7
 8004b1e:	781b      	ldrb	r3, [r3, #0]
}
 8004b20:	0018      	movs	r0, r3
 8004b22:	46bd      	mov	sp, r7
 8004b24:	b002      	add	sp, #8
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b28:	b590      	push	{r4, r7, lr}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004b30:	230f      	movs	r3, #15
 8004b32:	18fb      	adds	r3, r7, r3
 8004b34:	2200      	movs	r2, #0
 8004b36:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8004b38:	4b1d      	ldr	r3, [pc, #116]	@ (8004bb0 <HAL_InitTick+0x88>)
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d02b      	beq.n	8004b98 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8004b40:	4b1c      	ldr	r3, [pc, #112]	@ (8004bb4 <HAL_InitTick+0x8c>)
 8004b42:	681c      	ldr	r4, [r3, #0]
 8004b44:	4b1a      	ldr	r3, [pc, #104]	@ (8004bb0 <HAL_InitTick+0x88>)
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	0019      	movs	r1, r3
 8004b4a:	23fa      	movs	r3, #250	@ 0xfa
 8004b4c:	0098      	lsls	r0, r3, #2
 8004b4e:	f7fb fadb 	bl	8000108 <__udivsi3>
 8004b52:	0003      	movs	r3, r0
 8004b54:	0019      	movs	r1, r3
 8004b56:	0020      	movs	r0, r4
 8004b58:	f7fb fad6 	bl	8000108 <__udivsi3>
 8004b5c:	0003      	movs	r3, r0
 8004b5e:	0018      	movs	r0, r3
 8004b60:	f000 f96f 	bl	8004e42 <HAL_SYSTICK_Config>
 8004b64:	1e03      	subs	r3, r0, #0
 8004b66:	d112      	bne.n	8004b8e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2b03      	cmp	r3, #3
 8004b6c:	d80a      	bhi.n	8004b84 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004b6e:	6879      	ldr	r1, [r7, #4]
 8004b70:	2301      	movs	r3, #1
 8004b72:	425b      	negs	r3, r3
 8004b74:	2200      	movs	r2, #0
 8004b76:	0018      	movs	r0, r3
 8004b78:	f000 f92e 	bl	8004dd8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004b7c:	4b0e      	ldr	r3, [pc, #56]	@ (8004bb8 <HAL_InitTick+0x90>)
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	601a      	str	r2, [r3, #0]
 8004b82:	e00d      	b.n	8004ba0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8004b84:	230f      	movs	r3, #15
 8004b86:	18fb      	adds	r3, r7, r3
 8004b88:	2201      	movs	r2, #1
 8004b8a:	701a      	strb	r2, [r3, #0]
 8004b8c:	e008      	b.n	8004ba0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004b8e:	230f      	movs	r3, #15
 8004b90:	18fb      	adds	r3, r7, r3
 8004b92:	2201      	movs	r2, #1
 8004b94:	701a      	strb	r2, [r3, #0]
 8004b96:	e003      	b.n	8004ba0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004b98:	230f      	movs	r3, #15
 8004b9a:	18fb      	adds	r3, r7, r3
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8004ba0:	230f      	movs	r3, #15
 8004ba2:	18fb      	adds	r3, r7, r3
 8004ba4:	781b      	ldrb	r3, [r3, #0]
}
 8004ba6:	0018      	movs	r0, r3
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	b005      	add	sp, #20
 8004bac:	bd90      	pop	{r4, r7, pc}
 8004bae:	46c0      	nop			@ (mov r8, r8)
 8004bb0:	200000c0 	.word	0x200000c0
 8004bb4:	200000b8 	.word	0x200000b8
 8004bb8:	200000bc 	.word	0x200000bc

08004bbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004bc0:	4b05      	ldr	r3, [pc, #20]	@ (8004bd8 <HAL_IncTick+0x1c>)
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	001a      	movs	r2, r3
 8004bc6:	4b05      	ldr	r3, [pc, #20]	@ (8004bdc <HAL_IncTick+0x20>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	18d2      	adds	r2, r2, r3
 8004bcc:	4b03      	ldr	r3, [pc, #12]	@ (8004bdc <HAL_IncTick+0x20>)
 8004bce:	601a      	str	r2, [r3, #0]
}
 8004bd0:	46c0      	nop			@ (mov r8, r8)
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	46c0      	nop			@ (mov r8, r8)
 8004bd8:	200000c0 	.word	0x200000c0
 8004bdc:	200009b8 	.word	0x200009b8

08004be0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	af00      	add	r7, sp, #0
  return uwTick;
 8004be4:	4b02      	ldr	r3, [pc, #8]	@ (8004bf0 <HAL_GetTick+0x10>)
 8004be6:	681b      	ldr	r3, [r3, #0]
}
 8004be8:	0018      	movs	r0, r3
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	46c0      	nop			@ (mov r8, r8)
 8004bf0:	200009b8 	.word	0x200009b8

08004bf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004bfc:	f7ff fff0 	bl	8004be0 <HAL_GetTick>
 8004c00:	0003      	movs	r3, r0
 8004c02:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	d005      	beq.n	8004c1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004c0e:	4b0a      	ldr	r3, [pc, #40]	@ (8004c38 <HAL_Delay+0x44>)
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	001a      	movs	r2, r3
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	189b      	adds	r3, r3, r2
 8004c18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004c1a:	46c0      	nop			@ (mov r8, r8)
 8004c1c:	f7ff ffe0 	bl	8004be0 <HAL_GetTick>
 8004c20:	0002      	movs	r2, r0
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d8f7      	bhi.n	8004c1c <HAL_Delay+0x28>
  {
  }
}
 8004c2c:	46c0      	nop			@ (mov r8, r8)
 8004c2e:	46c0      	nop			@ (mov r8, r8)
 8004c30:	46bd      	mov	sp, r7
 8004c32:	b004      	add	sp, #16
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	46c0      	nop			@ (mov r8, r8)
 8004c38:	200000c0 	.word	0x200000c0

08004c3c <__NVIC_EnableIRQ>:
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	0002      	movs	r2, r0
 8004c44:	1dfb      	adds	r3, r7, #7
 8004c46:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004c48:	1dfb      	adds	r3, r7, #7
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	2b7f      	cmp	r3, #127	@ 0x7f
 8004c4e:	d809      	bhi.n	8004c64 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c50:	1dfb      	adds	r3, r7, #7
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	001a      	movs	r2, r3
 8004c56:	231f      	movs	r3, #31
 8004c58:	401a      	ands	r2, r3
 8004c5a:	4b04      	ldr	r3, [pc, #16]	@ (8004c6c <__NVIC_EnableIRQ+0x30>)
 8004c5c:	2101      	movs	r1, #1
 8004c5e:	4091      	lsls	r1, r2
 8004c60:	000a      	movs	r2, r1
 8004c62:	601a      	str	r2, [r3, #0]
}
 8004c64:	46c0      	nop			@ (mov r8, r8)
 8004c66:	46bd      	mov	sp, r7
 8004c68:	b002      	add	sp, #8
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	e000e100 	.word	0xe000e100

08004c70 <__NVIC_DisableIRQ>:
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	0002      	movs	r2, r0
 8004c78:	1dfb      	adds	r3, r7, #7
 8004c7a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004c7c:	1dfb      	adds	r3, r7, #7
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	2b7f      	cmp	r3, #127	@ 0x7f
 8004c82:	d810      	bhi.n	8004ca6 <__NVIC_DisableIRQ+0x36>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c84:	1dfb      	adds	r3, r7, #7
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	001a      	movs	r2, r3
 8004c8a:	231f      	movs	r3, #31
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	4908      	ldr	r1, [pc, #32]	@ (8004cb0 <__NVIC_DisableIRQ+0x40>)
 8004c90:	2201      	movs	r2, #1
 8004c92:	409a      	lsls	r2, r3
 8004c94:	0013      	movs	r3, r2
 8004c96:	2280      	movs	r2, #128	@ 0x80
 8004c98:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004c9a:	f3bf 8f4f 	dsb	sy
}
 8004c9e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8004ca0:	f3bf 8f6f 	isb	sy
}
 8004ca4:	46c0      	nop			@ (mov r8, r8)
}
 8004ca6:	46c0      	nop			@ (mov r8, r8)
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	b002      	add	sp, #8
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	46c0      	nop			@ (mov r8, r8)
 8004cb0:	e000e100 	.word	0xe000e100

08004cb4 <__NVIC_SetPriority>:
{
 8004cb4:	b590      	push	{r4, r7, lr}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	0002      	movs	r2, r0
 8004cbc:	6039      	str	r1, [r7, #0]
 8004cbe:	1dfb      	adds	r3, r7, #7
 8004cc0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004cc2:	1dfb      	adds	r3, r7, #7
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	2b7f      	cmp	r3, #127	@ 0x7f
 8004cc8:	d828      	bhi.n	8004d1c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004cca:	4a2f      	ldr	r2, [pc, #188]	@ (8004d88 <__NVIC_SetPriority+0xd4>)
 8004ccc:	1dfb      	adds	r3, r7, #7
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	b25b      	sxtb	r3, r3
 8004cd2:	089b      	lsrs	r3, r3, #2
 8004cd4:	33c0      	adds	r3, #192	@ 0xc0
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	589b      	ldr	r3, [r3, r2]
 8004cda:	1dfa      	adds	r2, r7, #7
 8004cdc:	7812      	ldrb	r2, [r2, #0]
 8004cde:	0011      	movs	r1, r2
 8004ce0:	2203      	movs	r2, #3
 8004ce2:	400a      	ands	r2, r1
 8004ce4:	00d2      	lsls	r2, r2, #3
 8004ce6:	21ff      	movs	r1, #255	@ 0xff
 8004ce8:	4091      	lsls	r1, r2
 8004cea:	000a      	movs	r2, r1
 8004cec:	43d2      	mvns	r2, r2
 8004cee:	401a      	ands	r2, r3
 8004cf0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	019b      	lsls	r3, r3, #6
 8004cf6:	22ff      	movs	r2, #255	@ 0xff
 8004cf8:	401a      	ands	r2, r3
 8004cfa:	1dfb      	adds	r3, r7, #7
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	0018      	movs	r0, r3
 8004d00:	2303      	movs	r3, #3
 8004d02:	4003      	ands	r3, r0
 8004d04:	00db      	lsls	r3, r3, #3
 8004d06:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004d08:	481f      	ldr	r0, [pc, #124]	@ (8004d88 <__NVIC_SetPriority+0xd4>)
 8004d0a:	1dfb      	adds	r3, r7, #7
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	b25b      	sxtb	r3, r3
 8004d10:	089b      	lsrs	r3, r3, #2
 8004d12:	430a      	orrs	r2, r1
 8004d14:	33c0      	adds	r3, #192	@ 0xc0
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	501a      	str	r2, [r3, r0]
}
 8004d1a:	e031      	b.n	8004d80 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004d1c:	4a1b      	ldr	r2, [pc, #108]	@ (8004d8c <__NVIC_SetPriority+0xd8>)
 8004d1e:	1dfb      	adds	r3, r7, #7
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	0019      	movs	r1, r3
 8004d24:	230f      	movs	r3, #15
 8004d26:	400b      	ands	r3, r1
 8004d28:	3b08      	subs	r3, #8
 8004d2a:	089b      	lsrs	r3, r3, #2
 8004d2c:	3306      	adds	r3, #6
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	18d3      	adds	r3, r2, r3
 8004d32:	3304      	adds	r3, #4
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	1dfa      	adds	r2, r7, #7
 8004d38:	7812      	ldrb	r2, [r2, #0]
 8004d3a:	0011      	movs	r1, r2
 8004d3c:	2203      	movs	r2, #3
 8004d3e:	400a      	ands	r2, r1
 8004d40:	00d2      	lsls	r2, r2, #3
 8004d42:	21ff      	movs	r1, #255	@ 0xff
 8004d44:	4091      	lsls	r1, r2
 8004d46:	000a      	movs	r2, r1
 8004d48:	43d2      	mvns	r2, r2
 8004d4a:	401a      	ands	r2, r3
 8004d4c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	019b      	lsls	r3, r3, #6
 8004d52:	22ff      	movs	r2, #255	@ 0xff
 8004d54:	401a      	ands	r2, r3
 8004d56:	1dfb      	adds	r3, r7, #7
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	0018      	movs	r0, r3
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	4003      	ands	r3, r0
 8004d60:	00db      	lsls	r3, r3, #3
 8004d62:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004d64:	4809      	ldr	r0, [pc, #36]	@ (8004d8c <__NVIC_SetPriority+0xd8>)
 8004d66:	1dfb      	adds	r3, r7, #7
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	001c      	movs	r4, r3
 8004d6c:	230f      	movs	r3, #15
 8004d6e:	4023      	ands	r3, r4
 8004d70:	3b08      	subs	r3, #8
 8004d72:	089b      	lsrs	r3, r3, #2
 8004d74:	430a      	orrs	r2, r1
 8004d76:	3306      	adds	r3, #6
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	18c3      	adds	r3, r0, r3
 8004d7c:	3304      	adds	r3, #4
 8004d7e:	601a      	str	r2, [r3, #0]
}
 8004d80:	46c0      	nop			@ (mov r8, r8)
 8004d82:	46bd      	mov	sp, r7
 8004d84:	b003      	add	sp, #12
 8004d86:	bd90      	pop	{r4, r7, pc}
 8004d88:	e000e100 	.word	0xe000e100
 8004d8c:	e000ed00 	.word	0xe000ed00

08004d90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	1e5a      	subs	r2, r3, #1
 8004d9c:	2380      	movs	r3, #128	@ 0x80
 8004d9e:	045b      	lsls	r3, r3, #17
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d301      	bcc.n	8004da8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004da4:	2301      	movs	r3, #1
 8004da6:	e010      	b.n	8004dca <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004da8:	4b0a      	ldr	r3, [pc, #40]	@ (8004dd4 <SysTick_Config+0x44>)
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	3a01      	subs	r2, #1
 8004dae:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004db0:	2301      	movs	r3, #1
 8004db2:	425b      	negs	r3, r3
 8004db4:	2103      	movs	r1, #3
 8004db6:	0018      	movs	r0, r3
 8004db8:	f7ff ff7c 	bl	8004cb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004dbc:	4b05      	ldr	r3, [pc, #20]	@ (8004dd4 <SysTick_Config+0x44>)
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004dc2:	4b04      	ldr	r3, [pc, #16]	@ (8004dd4 <SysTick_Config+0x44>)
 8004dc4:	2207      	movs	r2, #7
 8004dc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	0018      	movs	r0, r3
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	b002      	add	sp, #8
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	46c0      	nop			@ (mov r8, r8)
 8004dd4:	e000e010 	.word	0xe000e010

08004dd8 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60b9      	str	r1, [r7, #8]
 8004de0:	607a      	str	r2, [r7, #4]
 8004de2:	210f      	movs	r1, #15
 8004de4:	187b      	adds	r3, r7, r1
 8004de6:	1c02      	adds	r2, r0, #0
 8004de8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8004dea:	68ba      	ldr	r2, [r7, #8]
 8004dec:	187b      	adds	r3, r7, r1
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	b25b      	sxtb	r3, r3
 8004df2:	0011      	movs	r1, r2
 8004df4:	0018      	movs	r0, r3
 8004df6:	f7ff ff5d 	bl	8004cb4 <__NVIC_SetPriority>
}
 8004dfa:	46c0      	nop			@ (mov r8, r8)
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	b004      	add	sp, #16
 8004e00:	bd80      	pop	{r7, pc}

08004e02 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e02:	b580      	push	{r7, lr}
 8004e04:	b082      	sub	sp, #8
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	0002      	movs	r2, r0
 8004e0a:	1dfb      	adds	r3, r7, #7
 8004e0c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e0e:	1dfb      	adds	r3, r7, #7
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	b25b      	sxtb	r3, r3
 8004e14:	0018      	movs	r0, r3
 8004e16:	f7ff ff11 	bl	8004c3c <__NVIC_EnableIRQ>
}
 8004e1a:	46c0      	nop			@ (mov r8, r8)
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	b002      	add	sp, #8
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b082      	sub	sp, #8
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	0002      	movs	r2, r0
 8004e2a:	1dfb      	adds	r3, r7, #7
 8004e2c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004e2e:	1dfb      	adds	r3, r7, #7
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	b25b      	sxtb	r3, r3
 8004e34:	0018      	movs	r0, r3
 8004e36:	f7ff ff1b 	bl	8004c70 <__NVIC_DisableIRQ>
}
 8004e3a:	46c0      	nop			@ (mov r8, r8)
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	b002      	add	sp, #8
 8004e40:	bd80      	pop	{r7, pc}

08004e42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004e42:	b580      	push	{r7, lr}
 8004e44:	b082      	sub	sp, #8
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	0018      	movs	r0, r3
 8004e4e:	f7ff ff9f 	bl	8004d90 <SysTick_Config>
 8004e52:	0003      	movs	r3, r0
}
 8004e54:	0018      	movs	r0, r3
 8004e56:	46bd      	mov	sp, r7
 8004e58:	b002      	add	sp, #8
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d101      	bne.n	8004e6e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e077      	b.n	8004f5e <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a3d      	ldr	r2, [pc, #244]	@ (8004f68 <HAL_DMA_Init+0x10c>)
 8004e74:	4694      	mov	ip, r2
 8004e76:	4463      	add	r3, ip
 8004e78:	2114      	movs	r1, #20
 8004e7a:	0018      	movs	r0, r3
 8004e7c:	f7fb f944 	bl	8000108 <__udivsi3>
 8004e80:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 8004e82:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2225      	movs	r2, #37	@ 0x25
 8004e8c:	2102      	movs	r1, #2
 8004e8e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4934      	ldr	r1, [pc, #208]	@ (8004f6c <HAL_DMA_Init+0x110>)
 8004e9c:	400a      	ands	r2, r1
 8004e9e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	6819      	ldr	r1, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	689a      	ldr	r2, [r3, #8]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	431a      	orrs	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	691b      	ldr	r3, [r3, #16]
 8004eb4:	431a      	orrs	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	695b      	ldr	r3, [r3, #20]
 8004eba:	431a      	orrs	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	699b      	ldr	r3, [r3, #24]
 8004ec0:	431a      	orrs	r2, r3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	69db      	ldr	r3, [r3, #28]
 8004ec6:	431a      	orrs	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a1b      	ldr	r3, [r3, #32]
 8004ecc:	431a      	orrs	r2, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	0018      	movs	r0, r3
 8004eda:	f000 fb2d 	bl	8005538 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	689a      	ldr	r2, [r3, #8]
 8004ee2:	2380      	movs	r3, #128	@ 0x80
 8004ee4:	01db      	lsls	r3, r3, #7
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d102      	bne.n	8004ef0 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	685a      	ldr	r2, [r3, #4]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ef8:	21ff      	movs	r1, #255	@ 0xff
 8004efa:	400a      	ands	r2, r1
 8004efc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004f06:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d011      	beq.n	8004f34 <HAL_DMA_Init+0xd8>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	2b04      	cmp	r3, #4
 8004f16:	d80d      	bhi.n	8004f34 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	0018      	movs	r0, r3
 8004f1c:	f000 fb38 	bl	8005590 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f24:	2200      	movs	r2, #0
 8004f26:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8004f30:	605a      	str	r2, [r3, #4]
 8004f32:	e008      	b.n	8004f46 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2225      	movs	r2, #37	@ 0x25
 8004f50:	2101      	movs	r1, #1
 8004f52:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2224      	movs	r2, #36	@ 0x24
 8004f58:	2100      	movs	r1, #0
 8004f5a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	0018      	movs	r0, r3
 8004f60:	46bd      	mov	sp, r7
 8004f62:	b002      	add	sp, #8
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	46c0      	nop			@ (mov r8, r8)
 8004f68:	bffdfff8 	.word	0xbffdfff8
 8004f6c:	ffff800f 	.word	0xffff800f

08004f70 <HAL_DMA_DeInit>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d101      	bne.n	8004f82 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e066      	b.n	8005050 <HAL_DMA_DeInit+0xe0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2101      	movs	r1, #1
 8004f8e:	438a      	bics	r2, r1
 8004f90:	601a      	str	r2, [r3, #0]

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a30      	ldr	r2, [pc, #192]	@ (8005058 <HAL_DMA_DeInit+0xe8>)
 8004f98:	4694      	mov	ip, r2
 8004f9a:	4463      	add	r3, ip
 8004f9c:	2114      	movs	r1, #20
 8004f9e:	0018      	movs	r0, r3
 8004fa0:	f7fb f8b2 	bl	8000108 <__udivsi3>
 8004fa4:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 8004fa6:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8004fb4:	4b29      	ldr	r3, [pc, #164]	@ (800505c <HAL_DMA_DeInit+0xec>)
 8004fb6:	6859      	ldr	r1, [r3, #4]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fbc:	221c      	movs	r2, #28
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	409a      	lsls	r2, r3
 8004fc4:	4b25      	ldr	r3, [pc, #148]	@ (800505c <HAL_DMA_DeInit+0xec>)
 8004fc6:	430a      	orrs	r2, r1
 8004fc8:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	0018      	movs	r0, r3
 8004fce:	f000 fab3 	bl	8005538 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004fe2:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d010      	beq.n	800500e <HAL_DMA_DeInit+0x9e>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	2b04      	cmp	r3, #4
 8004ff2:	d80c      	bhi.n	800500e <HAL_DMA_DeInit+0x9e>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	0018      	movs	r0, r3
 8004ff8:	f000 faca 	bl	8005590 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005000:	2200      	movs	r2, #0
 8005002:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800500c:	605a      	str	r2, [r3, #4]
  }

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	639a      	str	r2, [r3, #56]	@ 0x38

  hdma->DMAmuxRequestGen = 0U;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma->DMAmuxRequestGenStatus = 0U;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2225      	movs	r2, #37	@ 0x25
 8005042:	2100      	movs	r1, #0
 8005044:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2224      	movs	r2, #36	@ 0x24
 800504a:	2100      	movs	r1, #0
 800504c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800504e:	2300      	movs	r3, #0
}
 8005050:	0018      	movs	r0, r3
 8005052:	46bd      	mov	sp, r7
 8005054:	b002      	add	sp, #8
 8005056:	bd80      	pop	{r7, pc}
 8005058:	bffdfff8 	.word	0xbffdfff8
 800505c:	40020000 	.word	0x40020000

08005060 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b086      	sub	sp, #24
 8005064:	af00      	add	r7, sp, #0
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	607a      	str	r2, [r7, #4]
 800506c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800506e:	2317      	movs	r3, #23
 8005070:	18fb      	adds	r3, r7, r3
 8005072:	2200      	movs	r2, #0
 8005074:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2224      	movs	r2, #36	@ 0x24
 800507a:	5c9b      	ldrb	r3, [r3, r2]
 800507c:	2b01      	cmp	r3, #1
 800507e:	d101      	bne.n	8005084 <HAL_DMA_Start_IT+0x24>
 8005080:	2302      	movs	r3, #2
 8005082:	e070      	b.n	8005166 <HAL_DMA_Start_IT+0x106>
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2224      	movs	r2, #36	@ 0x24
 8005088:	2101      	movs	r1, #1
 800508a:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2225      	movs	r2, #37	@ 0x25
 8005090:	5c9b      	ldrb	r3, [r3, r2]
 8005092:	b2db      	uxtb	r3, r3
 8005094:	2b01      	cmp	r3, #1
 8005096:	d157      	bne.n	8005148 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2225      	movs	r2, #37	@ 0x25
 800509c:	2102      	movs	r1, #2
 800509e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2101      	movs	r1, #1
 80050b2:	438a      	bics	r2, r1
 80050b4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	68b9      	ldr	r1, [r7, #8]
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	f000 f9fb 	bl	80054b8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d008      	beq.n	80050dc <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	210e      	movs	r1, #14
 80050d6:	430a      	orrs	r2, r1
 80050d8:	601a      	str	r2, [r3, #0]
 80050da:	e00f      	b.n	80050fc <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	2104      	movs	r1, #4
 80050e8:	438a      	bics	r2, r1
 80050ea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	210a      	movs	r1, #10
 80050f8:	430a      	orrs	r2, r1
 80050fa:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	2380      	movs	r3, #128	@ 0x80
 8005104:	025b      	lsls	r3, r3, #9
 8005106:	4013      	ands	r3, r2
 8005108:	d008      	beq.n	800511c <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005114:	2180      	movs	r1, #128	@ 0x80
 8005116:	0049      	lsls	r1, r1, #1
 8005118:	430a      	orrs	r2, r1
 800511a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005120:	2b00      	cmp	r3, #0
 8005122:	d008      	beq.n	8005136 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800512e:	2180      	movs	r1, #128	@ 0x80
 8005130:	0049      	lsls	r1, r1, #1
 8005132:	430a      	orrs	r2, r1
 8005134:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2101      	movs	r1, #1
 8005142:	430a      	orrs	r2, r1
 8005144:	601a      	str	r2, [r3, #0]
 8005146:	e007      	b.n	8005158 <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2224      	movs	r2, #36	@ 0x24
 800514c:	2100      	movs	r1, #0
 800514e:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8005150:	2317      	movs	r3, #23
 8005152:	18fb      	adds	r3, r7, r3
 8005154:	2202      	movs	r2, #2
 8005156:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2224      	movs	r2, #36	@ 0x24
 800515c:	2100      	movs	r1, #0
 800515e:	5499      	strb	r1, [r3, r2]

  return status;
 8005160:	2317      	movs	r3, #23
 8005162:	18fb      	adds	r3, r7, r3
 8005164:	781b      	ldrb	r3, [r3, #0]
}
 8005166:	0018      	movs	r0, r3
 8005168:	46bd      	mov	sp, r7
 800516a:	b006      	add	sp, #24
 800516c:	bd80      	pop	{r7, pc}
	...

08005170 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b082      	sub	sp, #8
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d101      	bne.n	8005182 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e050      	b.n	8005224 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2225      	movs	r2, #37	@ 0x25
 8005186:	5c9b      	ldrb	r3, [r3, r2]
 8005188:	b2db      	uxtb	r3, r3
 800518a:	2b02      	cmp	r3, #2
 800518c:	d008      	beq.n	80051a0 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2204      	movs	r2, #4
 8005192:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2224      	movs	r2, #36	@ 0x24
 8005198:	2100      	movs	r1, #0
 800519a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e041      	b.n	8005224 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	210e      	movs	r1, #14
 80051ac:	438a      	bics	r2, r1
 80051ae:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ba:	491c      	ldr	r1, [pc, #112]	@ (800522c <HAL_DMA_Abort+0xbc>)
 80051bc:	400a      	ands	r2, r1
 80051be:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	2101      	movs	r1, #1
 80051cc:	438a      	bics	r2, r1
 80051ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 80051d0:	4b17      	ldr	r3, [pc, #92]	@ (8005230 <HAL_DMA_Abort+0xc0>)
 80051d2:	6859      	ldr	r1, [r3, #4]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051d8:	221c      	movs	r2, #28
 80051da:	4013      	ands	r3, r2
 80051dc:	2201      	movs	r2, #1
 80051de:	409a      	lsls	r2, r3
 80051e0:	4b13      	ldr	r3, [pc, #76]	@ (8005230 <HAL_DMA_Abort+0xc0>)
 80051e2:	430a      	orrs	r2, r1
 80051e4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80051ee:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d00c      	beq.n	8005212 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005202:	490a      	ldr	r1, [pc, #40]	@ (800522c <HAL_DMA_Abort+0xbc>)
 8005204:	400a      	ands	r2, r1
 8005206:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8005210:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2225      	movs	r2, #37	@ 0x25
 8005216:	2101      	movs	r1, #1
 8005218:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2224      	movs	r2, #36	@ 0x24
 800521e:	2100      	movs	r1, #0
 8005220:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8005222:	2300      	movs	r3, #0
}
 8005224:	0018      	movs	r0, r3
 8005226:	46bd      	mov	sp, r7
 8005228:	b002      	add	sp, #8
 800522a:	bd80      	pop	{r7, pc}
 800522c:	fffffeff 	.word	0xfffffeff
 8005230:	40020000 	.word	0x40020000

08005234 <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800523c:	230f      	movs	r3, #15
 800523e:	18fb      	adds	r3, r7, r3
 8005240:	2200      	movs	r2, #0
 8005242:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2224      	movs	r2, #36	@ 0x24
 8005248:	2100      	movs	r1, #0
 800524a:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2224      	movs	r2, #36	@ 0x24
 8005250:	5c9b      	ldrb	r3, [r3, r2]
 8005252:	2b01      	cmp	r3, #1
 8005254:	d101      	bne.n	800525a <HAL_DMA_Abort_IT+0x26>
 8005256:	2302      	movs	r3, #2
 8005258:	e05e      	b.n	8005318 <HAL_DMA_Abort_IT+0xe4>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2224      	movs	r2, #36	@ 0x24
 800525e:	2101      	movs	r1, #1
 8005260:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2225      	movs	r2, #37	@ 0x25
 8005266:	5c9b      	ldrb	r3, [r3, r2]
 8005268:	b2db      	uxtb	r3, r3
 800526a:	2b02      	cmp	r3, #2
 800526c:	d007      	beq.n	800527e <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2204      	movs	r2, #4
 8005272:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005274:	230f      	movs	r3, #15
 8005276:	18fb      	adds	r3, r7, r3
 8005278:	2201      	movs	r2, #1
 800527a:	701a      	strb	r2, [r3, #0]
 800527c:	e049      	b.n	8005312 <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	210e      	movs	r1, #14
 800528a:	438a      	bics	r2, r1
 800528c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2101      	movs	r1, #1
 800529a:	438a      	bics	r2, r1
 800529c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052a8:	491d      	ldr	r1, [pc, #116]	@ (8005320 <HAL_DMA_Abort_IT+0xec>)
 80052aa:	400a      	ands	r2, r1
 80052ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 80052ae:	4b1d      	ldr	r3, [pc, #116]	@ (8005324 <HAL_DMA_Abort_IT+0xf0>)
 80052b0:	6859      	ldr	r1, [r3, #4]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052b6:	221c      	movs	r2, #28
 80052b8:	4013      	ands	r3, r2
 80052ba:	2201      	movs	r2, #1
 80052bc:	409a      	lsls	r2, r3
 80052be:	4b19      	ldr	r3, [pc, #100]	@ (8005324 <HAL_DMA_Abort_IT+0xf0>)
 80052c0:	430a      	orrs	r2, r1
 80052c2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80052cc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d00c      	beq.n	80052f0 <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052e0:	490f      	ldr	r1, [pc, #60]	@ (8005320 <HAL_DMA_Abort_IT+0xec>)
 80052e2:	400a      	ands	r2, r1
 80052e4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80052ee:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2225      	movs	r2, #37	@ 0x25
 80052f4:	2101      	movs	r1, #1
 80052f6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2224      	movs	r2, #36	@ 0x24
 80052fc:	2100      	movs	r1, #0
 80052fe:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005304:	2b00      	cmp	r3, #0
 8005306:	d004      	beq.n	8005312 <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	0010      	movs	r0, r2
 8005310:	4798      	blx	r3
    }
  }
  return status;
 8005312:	230f      	movs	r3, #15
 8005314:	18fb      	adds	r3, r7, r3
 8005316:	781b      	ldrb	r3, [r3, #0]
}
 8005318:	0018      	movs	r0, r3
 800531a:	46bd      	mov	sp, r7
 800531c:	b004      	add	sp, #16
 800531e:	bd80      	pop	{r7, pc}
 8005320:	fffffeff 	.word	0xfffffeff
 8005324:	40020000 	.word	0x40020000

08005328 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 8005330:	4b55      	ldr	r3, [pc, #340]	@ (8005488 <HAL_DMA_IRQHandler+0x160>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005342:	221c      	movs	r2, #28
 8005344:	4013      	ands	r3, r2
 8005346:	2204      	movs	r2, #4
 8005348:	409a      	lsls	r2, r3
 800534a:	0013      	movs	r3, r2
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	4013      	ands	r3, r2
 8005350:	d027      	beq.n	80053a2 <HAL_DMA_IRQHandler+0x7a>
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	2204      	movs	r2, #4
 8005356:	4013      	ands	r3, r2
 8005358:	d023      	beq.n	80053a2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2220      	movs	r2, #32
 8005362:	4013      	ands	r3, r2
 8005364:	d107      	bne.n	8005376 <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2104      	movs	r1, #4
 8005372:	438a      	bics	r2, r1
 8005374:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 8005376:	4b44      	ldr	r3, [pc, #272]	@ (8005488 <HAL_DMA_IRQHandler+0x160>)
 8005378:	6859      	ldr	r1, [r3, #4]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800537e:	221c      	movs	r2, #28
 8005380:	4013      	ands	r3, r2
 8005382:	2204      	movs	r2, #4
 8005384:	409a      	lsls	r2, r3
 8005386:	4b40      	ldr	r3, [pc, #256]	@ (8005488 <HAL_DMA_IRQHandler+0x160>)
 8005388:	430a      	orrs	r2, r1
 800538a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005390:	2b00      	cmp	r3, #0
 8005392:	d100      	bne.n	8005396 <HAL_DMA_IRQHandler+0x6e>
 8005394:	e073      	b.n	800547e <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	0010      	movs	r0, r2
 800539e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80053a0:	e06d      	b.n	800547e <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053a6:	221c      	movs	r2, #28
 80053a8:	4013      	ands	r3, r2
 80053aa:	2202      	movs	r2, #2
 80053ac:	409a      	lsls	r2, r3
 80053ae:	0013      	movs	r3, r2
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	4013      	ands	r3, r2
 80053b4:	d02e      	beq.n	8005414 <HAL_DMA_IRQHandler+0xec>
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	2202      	movs	r2, #2
 80053ba:	4013      	ands	r3, r2
 80053bc:	d02a      	beq.n	8005414 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2220      	movs	r2, #32
 80053c6:	4013      	ands	r3, r2
 80053c8:	d10b      	bne.n	80053e2 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	210a      	movs	r1, #10
 80053d6:	438a      	bics	r2, r1
 80053d8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2225      	movs	r2, #37	@ 0x25
 80053de:	2101      	movs	r1, #1
 80053e0:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 80053e2:	4b29      	ldr	r3, [pc, #164]	@ (8005488 <HAL_DMA_IRQHandler+0x160>)
 80053e4:	6859      	ldr	r1, [r3, #4]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ea:	221c      	movs	r2, #28
 80053ec:	4013      	ands	r3, r2
 80053ee:	2202      	movs	r2, #2
 80053f0:	409a      	lsls	r2, r3
 80053f2:	4b25      	ldr	r3, [pc, #148]	@ (8005488 <HAL_DMA_IRQHandler+0x160>)
 80053f4:	430a      	orrs	r2, r1
 80053f6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2224      	movs	r2, #36	@ 0x24
 80053fc:	2100      	movs	r1, #0
 80053fe:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005404:	2b00      	cmp	r3, #0
 8005406:	d03a      	beq.n	800547e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	0010      	movs	r0, r2
 8005410:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005412:	e034      	b.n	800547e <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005418:	221c      	movs	r2, #28
 800541a:	4013      	ands	r3, r2
 800541c:	2208      	movs	r2, #8
 800541e:	409a      	lsls	r2, r3
 8005420:	0013      	movs	r3, r2
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	4013      	ands	r3, r2
 8005426:	d02b      	beq.n	8005480 <HAL_DMA_IRQHandler+0x158>
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	2208      	movs	r2, #8
 800542c:	4013      	ands	r3, r2
 800542e:	d027      	beq.n	8005480 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	210e      	movs	r1, #14
 800543c:	438a      	bics	r2, r1
 800543e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8005440:	4b11      	ldr	r3, [pc, #68]	@ (8005488 <HAL_DMA_IRQHandler+0x160>)
 8005442:	6859      	ldr	r1, [r3, #4]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005448:	221c      	movs	r2, #28
 800544a:	4013      	ands	r3, r2
 800544c:	2201      	movs	r2, #1
 800544e:	409a      	lsls	r2, r3
 8005450:	4b0d      	ldr	r3, [pc, #52]	@ (8005488 <HAL_DMA_IRQHandler+0x160>)
 8005452:	430a      	orrs	r2, r1
 8005454:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2201      	movs	r2, #1
 800545a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2225      	movs	r2, #37	@ 0x25
 8005460:	2101      	movs	r1, #1
 8005462:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2224      	movs	r2, #36	@ 0x24
 8005468:	2100      	movs	r1, #0
 800546a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005470:	2b00      	cmp	r3, #0
 8005472:	d005      	beq.n	8005480 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	0010      	movs	r0, r2
 800547c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800547e:	46c0      	nop			@ (mov r8, r8)
 8005480:	46c0      	nop			@ (mov r8, r8)
}
 8005482:	46bd      	mov	sp, r7
 8005484:	b004      	add	sp, #16
 8005486:	bd80      	pop	{r7, pc}
 8005488:	40020000 	.word	0x40020000

0800548c <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b082      	sub	sp, #8
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2225      	movs	r2, #37	@ 0x25
 8005498:	5c9b      	ldrb	r3, [r3, r2]
 800549a:	b2db      	uxtb	r3, r3
}
 800549c:	0018      	movs	r0, r3
 800549e:	46bd      	mov	sp, r7
 80054a0:	b002      	add	sp, #8
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <HAL_DMA_GetError>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b082      	sub	sp, #8
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 80054b0:	0018      	movs	r0, r3
 80054b2:	46bd      	mov	sp, r7
 80054b4:	b002      	add	sp, #8
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	607a      	str	r2, [r7, #4]
 80054c4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80054ce:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d004      	beq.n	80054e2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054dc:	68fa      	ldr	r2, [r7, #12]
 80054de:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80054e0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 80054e2:	4b14      	ldr	r3, [pc, #80]	@ (8005534 <DMA_SetConfig+0x7c>)
 80054e4:	6859      	ldr	r1, [r3, #4]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ea:	221c      	movs	r2, #28
 80054ec:	4013      	ands	r3, r2
 80054ee:	2201      	movs	r2, #1
 80054f0:	409a      	lsls	r2, r3
 80054f2:	4b10      	ldr	r3, [pc, #64]	@ (8005534 <DMA_SetConfig+0x7c>)
 80054f4:	430a      	orrs	r2, r1
 80054f6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	683a      	ldr	r2, [r7, #0]
 80054fe:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	2b10      	cmp	r3, #16
 8005506:	d108      	bne.n	800551a <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	68ba      	ldr	r2, [r7, #8]
 8005516:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005518:	e007      	b.n	800552a <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	68ba      	ldr	r2, [r7, #8]
 8005520:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	60da      	str	r2, [r3, #12]
}
 800552a:	46c0      	nop			@ (mov r8, r8)
 800552c:	46bd      	mov	sp, r7
 800552e:	b004      	add	sp, #16
 8005530:	bd80      	pop	{r7, pc}
 8005532:	46c0      	nop			@ (mov r8, r8)
 8005534:	40020000 	.word	0x40020000

08005538 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	001a      	movs	r2, r3
 8005546:	23ff      	movs	r3, #255	@ 0xff
 8005548:	4013      	ands	r3, r2
 800554a:	3b08      	subs	r3, #8
 800554c:	2114      	movs	r1, #20
 800554e:	0018      	movs	r0, r3
 8005550:	f7fa fdda 	bl	8000108 <__udivsi3>
 8005554:	0003      	movs	r3, r0
 8005556:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800555c:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 800555e:	4a0a      	ldr	r2, [pc, #40]	@ (8005588 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8005560:	4694      	mov	ip, r2
 8005562:	4463      	add	r3, ip
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	001a      	movs	r2, r3
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	645a      	str	r2, [r3, #68]	@ 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a07      	ldr	r2, [pc, #28]	@ (800558c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8005570:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	221c      	movs	r2, #28
 8005576:	4013      	ands	r3, r2
 8005578:	2201      	movs	r2, #1
 800557a:	409a      	lsls	r2, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8005580:	46c0      	nop			@ (mov r8, r8)
 8005582:	46bd      	mov	sp, r7
 8005584:	b004      	add	sp, #16
 8005586:	bd80      	pop	{r7, pc}
 8005588:	10008200 	.word	0x10008200
 800558c:	40020880 	.word	0x40020880

08005590 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	22ff      	movs	r2, #255	@ 0xff
 800559e:	4013      	ands	r3, r2
 80055a0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	4a0a      	ldr	r2, [pc, #40]	@ (80055d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80055a6:	4694      	mov	ip, r2
 80055a8:	4463      	add	r3, ip
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	001a      	movs	r2, r3
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	651a      	str	r2, [r3, #80]	@ 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a07      	ldr	r2, [pc, #28]	@ (80055d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80055b6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	3b01      	subs	r3, #1
 80055bc:	2203      	movs	r2, #3
 80055be:	4013      	ands	r3, r2
 80055c0:	2201      	movs	r2, #1
 80055c2:	409a      	lsls	r2, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80055c8:	46c0      	nop			@ (mov r8, r8)
 80055ca:	46bd      	mov	sp, r7
 80055cc:	b004      	add	sp, #16
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	1000823f 	.word	0x1000823f
 80055d4:	40020940 	.word	0x40020940

080055d8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b086      	sub	sp, #24
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80055e2:	2300      	movs	r3, #0
 80055e4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80055e6:	e153      	b.n	8005890 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2101      	movs	r1, #1
 80055ee:	693a      	ldr	r2, [r7, #16]
 80055f0:	4091      	lsls	r1, r2
 80055f2:	000a      	movs	r2, r1
 80055f4:	4013      	ands	r3, r2
 80055f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d100      	bne.n	8005600 <HAL_GPIO_Init+0x28>
 80055fe:	e144      	b.n	800588a <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	2b02      	cmp	r3, #2
 8005606:	d003      	beq.n	8005610 <HAL_GPIO_Init+0x38>
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	2b12      	cmp	r3, #18
 800560e:	d125      	bne.n	800565c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	08da      	lsrs	r2, r3, #3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	3208      	adds	r2, #8
 8005618:	0092      	lsls	r2, r2, #2
 800561a:	58d3      	ldr	r3, [r2, r3]
 800561c:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	2207      	movs	r2, #7
 8005622:	4013      	ands	r3, r2
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	220f      	movs	r2, #15
 8005628:	409a      	lsls	r2, r3
 800562a:	0013      	movs	r3, r2
 800562c:	43da      	mvns	r2, r3
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	4013      	ands	r3, r2
 8005632:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	691b      	ldr	r3, [r3, #16]
 8005638:	220f      	movs	r2, #15
 800563a:	401a      	ands	r2, r3
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	2107      	movs	r1, #7
 8005640:	400b      	ands	r3, r1
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	409a      	lsls	r2, r3
 8005646:	0013      	movs	r3, r2
 8005648:	697a      	ldr	r2, [r7, #20]
 800564a:	4313      	orrs	r3, r2
 800564c:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	08da      	lsrs	r2, r3, #3
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	3208      	adds	r2, #8
 8005656:	0092      	lsls	r2, r2, #2
 8005658:	6979      	ldr	r1, [r7, #20]
 800565a:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	005b      	lsls	r3, r3, #1
 8005666:	2203      	movs	r2, #3
 8005668:	409a      	lsls	r2, r3
 800566a:	0013      	movs	r3, r2
 800566c:	43da      	mvns	r2, r3
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	4013      	ands	r3, r2
 8005672:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	2203      	movs	r2, #3
 800567a:	401a      	ands	r2, r3
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	005b      	lsls	r3, r3, #1
 8005680:	409a      	lsls	r2, r3
 8005682:	0013      	movs	r3, r2
 8005684:	697a      	ldr	r2, [r7, #20]
 8005686:	4313      	orrs	r3, r2
 8005688:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	697a      	ldr	r2, [r7, #20]
 800568e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	2b01      	cmp	r3, #1
 8005696:	d00b      	beq.n	80056b0 <HAL_GPIO_Init+0xd8>
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	2b02      	cmp	r3, #2
 800569e:	d007      	beq.n	80056b0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80056a4:	2b11      	cmp	r3, #17
 80056a6:	d003      	beq.n	80056b0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	2b12      	cmp	r3, #18
 80056ae:	d130      	bne.n	8005712 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	005b      	lsls	r3, r3, #1
 80056ba:	2203      	movs	r2, #3
 80056bc:	409a      	lsls	r2, r3
 80056be:	0013      	movs	r3, r2
 80056c0:	43da      	mvns	r2, r3
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	4013      	ands	r3, r2
 80056c6:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	68da      	ldr	r2, [r3, #12]
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	005b      	lsls	r3, r3, #1
 80056d0:	409a      	lsls	r2, r3
 80056d2:	0013      	movs	r3, r2
 80056d4:	697a      	ldr	r2, [r7, #20]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	697a      	ldr	r2, [r7, #20]
 80056de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80056e6:	2201      	movs	r2, #1
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	409a      	lsls	r2, r3
 80056ec:	0013      	movs	r3, r2
 80056ee:	43da      	mvns	r2, r3
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	4013      	ands	r3, r2
 80056f4:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	091b      	lsrs	r3, r3, #4
 80056fc:	2201      	movs	r2, #1
 80056fe:	401a      	ands	r2, r3
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	409a      	lsls	r2, r3
 8005704:	0013      	movs	r3, r2
 8005706:	697a      	ldr	r2, [r7, #20]
 8005708:	4313      	orrs	r3, r2
 800570a:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	697a      	ldr	r2, [r7, #20]
 8005710:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	2b03      	cmp	r3, #3
 8005718:	d017      	beq.n	800574a <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	005b      	lsls	r3, r3, #1
 8005724:	2203      	movs	r2, #3
 8005726:	409a      	lsls	r2, r3
 8005728:	0013      	movs	r3, r2
 800572a:	43da      	mvns	r2, r3
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	4013      	ands	r3, r2
 8005730:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	689a      	ldr	r2, [r3, #8]
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	005b      	lsls	r3, r3, #1
 800573a:	409a      	lsls	r2, r3
 800573c:	0013      	movs	r3, r2
 800573e:	697a      	ldr	r2, [r7, #20]
 8005740:	4313      	orrs	r3, r2
 8005742:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	697a      	ldr	r2, [r7, #20]
 8005748:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	685a      	ldr	r2, [r3, #4]
 800574e:	2380      	movs	r3, #128	@ 0x80
 8005750:	055b      	lsls	r3, r3, #21
 8005752:	4013      	ands	r3, r2
 8005754:	d100      	bne.n	8005758 <HAL_GPIO_Init+0x180>
 8005756:	e098      	b.n	800588a <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8005758:	4a53      	ldr	r2, [pc, #332]	@ (80058a8 <HAL_GPIO_Init+0x2d0>)
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	089b      	lsrs	r3, r3, #2
 800575e:	3318      	adds	r3, #24
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	589b      	ldr	r3, [r3, r2]
 8005764:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	2203      	movs	r2, #3
 800576a:	4013      	ands	r3, r2
 800576c:	00db      	lsls	r3, r3, #3
 800576e:	220f      	movs	r2, #15
 8005770:	409a      	lsls	r2, r3
 8005772:	0013      	movs	r3, r2
 8005774:	43da      	mvns	r2, r3
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	4013      	ands	r3, r2
 800577a:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	23a0      	movs	r3, #160	@ 0xa0
 8005780:	05db      	lsls	r3, r3, #23
 8005782:	429a      	cmp	r2, r3
 8005784:	d019      	beq.n	80057ba <HAL_GPIO_Init+0x1e2>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a48      	ldr	r2, [pc, #288]	@ (80058ac <HAL_GPIO_Init+0x2d4>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d013      	beq.n	80057b6 <HAL_GPIO_Init+0x1de>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a47      	ldr	r2, [pc, #284]	@ (80058b0 <HAL_GPIO_Init+0x2d8>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d00d      	beq.n	80057b2 <HAL_GPIO_Init+0x1da>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a46      	ldr	r2, [pc, #280]	@ (80058b4 <HAL_GPIO_Init+0x2dc>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d007      	beq.n	80057ae <HAL_GPIO_Init+0x1d6>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a45      	ldr	r2, [pc, #276]	@ (80058b8 <HAL_GPIO_Init+0x2e0>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d101      	bne.n	80057aa <HAL_GPIO_Init+0x1d2>
 80057a6:	2305      	movs	r3, #5
 80057a8:	e008      	b.n	80057bc <HAL_GPIO_Init+0x1e4>
 80057aa:	2306      	movs	r3, #6
 80057ac:	e006      	b.n	80057bc <HAL_GPIO_Init+0x1e4>
 80057ae:	2303      	movs	r3, #3
 80057b0:	e004      	b.n	80057bc <HAL_GPIO_Init+0x1e4>
 80057b2:	2302      	movs	r3, #2
 80057b4:	e002      	b.n	80057bc <HAL_GPIO_Init+0x1e4>
 80057b6:	2301      	movs	r3, #1
 80057b8:	e000      	b.n	80057bc <HAL_GPIO_Init+0x1e4>
 80057ba:	2300      	movs	r3, #0
 80057bc:	693a      	ldr	r2, [r7, #16]
 80057be:	2103      	movs	r1, #3
 80057c0:	400a      	ands	r2, r1
 80057c2:	00d2      	lsls	r2, r2, #3
 80057c4:	4093      	lsls	r3, r2
 80057c6:	697a      	ldr	r2, [r7, #20]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80057cc:	4936      	ldr	r1, [pc, #216]	@ (80058a8 <HAL_GPIO_Init+0x2d0>)
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	089b      	lsrs	r3, r3, #2
 80057d2:	3318      	adds	r3, #24
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	697a      	ldr	r2, [r7, #20]
 80057d8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 80057da:	4a33      	ldr	r2, [pc, #204]	@ (80058a8 <HAL_GPIO_Init+0x2d0>)
 80057dc:	2380      	movs	r3, #128	@ 0x80
 80057de:	58d3      	ldr	r3, [r2, r3]
 80057e0:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	43da      	mvns	r2, r3
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	4013      	ands	r3, r2
 80057ea:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	685a      	ldr	r2, [r3, #4]
 80057f0:	2380      	movs	r3, #128	@ 0x80
 80057f2:	025b      	lsls	r3, r3, #9
 80057f4:	4013      	ands	r3, r2
 80057f6:	d003      	beq.n	8005800 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 80057f8:	697a      	ldr	r2, [r7, #20]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8005800:	4929      	ldr	r1, [pc, #164]	@ (80058a8 <HAL_GPIO_Init+0x2d0>)
 8005802:	2280      	movs	r2, #128	@ 0x80
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8005808:	4a27      	ldr	r2, [pc, #156]	@ (80058a8 <HAL_GPIO_Init+0x2d0>)
 800580a:	2384      	movs	r3, #132	@ 0x84
 800580c:	58d3      	ldr	r3, [r2, r3]
 800580e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	43da      	mvns	r2, r3
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	4013      	ands	r3, r2
 8005818:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	685a      	ldr	r2, [r3, #4]
 800581e:	2380      	movs	r3, #128	@ 0x80
 8005820:	029b      	lsls	r3, r3, #10
 8005822:	4013      	ands	r3, r2
 8005824:	d003      	beq.n	800582e <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 8005826:	697a      	ldr	r2, [r7, #20]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	4313      	orrs	r3, r2
 800582c:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800582e:	491e      	ldr	r1, [pc, #120]	@ (80058a8 <HAL_GPIO_Init+0x2d0>)
 8005830:	2284      	movs	r2, #132	@ 0x84
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8005836:	4b1c      	ldr	r3, [pc, #112]	@ (80058a8 <HAL_GPIO_Init+0x2d0>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	43da      	mvns	r2, r3
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	4013      	ands	r3, r2
 8005844:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	685a      	ldr	r2, [r3, #4]
 800584a:	2380      	movs	r3, #128	@ 0x80
 800584c:	035b      	lsls	r3, r3, #13
 800584e:	4013      	ands	r3, r2
 8005850:	d003      	beq.n	800585a <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 8005852:	697a      	ldr	r2, [r7, #20]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	4313      	orrs	r3, r2
 8005858:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 800585a:	4b13      	ldr	r3, [pc, #76]	@ (80058a8 <HAL_GPIO_Init+0x2d0>)
 800585c:	697a      	ldr	r2, [r7, #20]
 800585e:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8005860:	4b11      	ldr	r3, [pc, #68]	@ (80058a8 <HAL_GPIO_Init+0x2d0>)
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	43da      	mvns	r2, r3
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	4013      	ands	r3, r2
 800586e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	685a      	ldr	r2, [r3, #4]
 8005874:	2380      	movs	r3, #128	@ 0x80
 8005876:	039b      	lsls	r3, r3, #14
 8005878:	4013      	ands	r3, r2
 800587a:	d003      	beq.n	8005884 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 800587c:	697a      	ldr	r2, [r7, #20]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	4313      	orrs	r3, r2
 8005882:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8005884:	4b08      	ldr	r3, [pc, #32]	@ (80058a8 <HAL_GPIO_Init+0x2d0>)
 8005886:	697a      	ldr	r2, [r7, #20]
 8005888:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	3301      	adds	r3, #1
 800588e:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	40da      	lsrs	r2, r3
 8005898:	1e13      	subs	r3, r2, #0
 800589a:	d000      	beq.n	800589e <HAL_GPIO_Init+0x2c6>
 800589c:	e6a4      	b.n	80055e8 <HAL_GPIO_Init+0x10>
  }
}
 800589e:	46c0      	nop			@ (mov r8, r8)
 80058a0:	46c0      	nop			@ (mov r8, r8)
 80058a2:	46bd      	mov	sp, r7
 80058a4:	b006      	add	sp, #24
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	40021800 	.word	0x40021800
 80058ac:	50000400 	.word	0x50000400
 80058b0:	50000800 	.word	0x50000800
 80058b4:	50000c00 	.word	0x50000c00
 80058b8:	50001400 	.word	0x50001400

080058bc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b086      	sub	sp, #24
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80058c6:	2300      	movs	r3, #0
 80058c8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 80058ca:	e0ba      	b.n	8005a42 <HAL_GPIO_DeInit+0x186>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 80058cc:	2201      	movs	r2, #1
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	409a      	lsls	r2, r3
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	4013      	ands	r3, r2
 80058d6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0U)
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d100      	bne.n	80058e0 <HAL_GPIO_DeInit+0x24>
 80058de:	e0ad      	b.n	8005a3c <HAL_GPIO_DeInit+0x180>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = EXTI->EXTICR[position >> 2U];
 80058e0:	4a5d      	ldr	r2, [pc, #372]	@ (8005a58 <HAL_GPIO_DeInit+0x19c>)
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	089b      	lsrs	r3, r3, #2
 80058e6:	3318      	adds	r3, #24
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	589b      	ldr	r3, [r3, r2]
 80058ec:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	2203      	movs	r2, #3
 80058f2:	4013      	ands	r3, r2
 80058f4:	00db      	lsls	r3, r3, #3
 80058f6:	220f      	movs	r2, #15
 80058f8:	409a      	lsls	r2, r3
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	4013      	ands	r3, r2
 80058fe:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos)))
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	23a0      	movs	r3, #160	@ 0xa0
 8005904:	05db      	lsls	r3, r3, #23
 8005906:	429a      	cmp	r2, r3
 8005908:	d019      	beq.n	800593e <HAL_GPIO_DeInit+0x82>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a53      	ldr	r2, [pc, #332]	@ (8005a5c <HAL_GPIO_DeInit+0x1a0>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d013      	beq.n	800593a <HAL_GPIO_DeInit+0x7e>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a52      	ldr	r2, [pc, #328]	@ (8005a60 <HAL_GPIO_DeInit+0x1a4>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d00d      	beq.n	8005936 <HAL_GPIO_DeInit+0x7a>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a51      	ldr	r2, [pc, #324]	@ (8005a64 <HAL_GPIO_DeInit+0x1a8>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d007      	beq.n	8005932 <HAL_GPIO_DeInit+0x76>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a50      	ldr	r2, [pc, #320]	@ (8005a68 <HAL_GPIO_DeInit+0x1ac>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d101      	bne.n	800592e <HAL_GPIO_DeInit+0x72>
 800592a:	2305      	movs	r3, #5
 800592c:	e008      	b.n	8005940 <HAL_GPIO_DeInit+0x84>
 800592e:	2306      	movs	r3, #6
 8005930:	e006      	b.n	8005940 <HAL_GPIO_DeInit+0x84>
 8005932:	2303      	movs	r3, #3
 8005934:	e004      	b.n	8005940 <HAL_GPIO_DeInit+0x84>
 8005936:	2302      	movs	r3, #2
 8005938:	e002      	b.n	8005940 <HAL_GPIO_DeInit+0x84>
 800593a:	2301      	movs	r3, #1
 800593c:	e000      	b.n	8005940 <HAL_GPIO_DeInit+0x84>
 800593e:	2300      	movs	r3, #0
 8005940:	697a      	ldr	r2, [r7, #20]
 8005942:	2103      	movs	r1, #3
 8005944:	400a      	ands	r2, r1
 8005946:	00d2      	lsls	r2, r2, #3
 8005948:	4093      	lsls	r3, r2
 800594a:	68fa      	ldr	r2, [r7, #12]
 800594c:	429a      	cmp	r2, r3
 800594e:	d136      	bne.n	80059be <HAL_GPIO_DeInit+0x102>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8005950:	4a41      	ldr	r2, [pc, #260]	@ (8005a58 <HAL_GPIO_DeInit+0x19c>)
 8005952:	2380      	movs	r3, #128	@ 0x80
 8005954:	58d3      	ldr	r3, [r2, r3]
 8005956:	693a      	ldr	r2, [r7, #16]
 8005958:	43d2      	mvns	r2, r2
 800595a:	493f      	ldr	r1, [pc, #252]	@ (8005a58 <HAL_GPIO_DeInit+0x19c>)
 800595c:	4013      	ands	r3, r2
 800595e:	2280      	movs	r2, #128	@ 0x80
 8005960:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 8005962:	4a3d      	ldr	r2, [pc, #244]	@ (8005a58 <HAL_GPIO_DeInit+0x19c>)
 8005964:	2384      	movs	r3, #132	@ 0x84
 8005966:	58d3      	ldr	r3, [r2, r3]
 8005968:	693a      	ldr	r2, [r7, #16]
 800596a:	43d2      	mvns	r2, r2
 800596c:	493a      	ldr	r1, [pc, #232]	@ (8005a58 <HAL_GPIO_DeInit+0x19c>)
 800596e:	4013      	ands	r3, r2
 8005970:	2284      	movs	r2, #132	@ 0x84
 8005972:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8005974:	4b38      	ldr	r3, [pc, #224]	@ (8005a58 <HAL_GPIO_DeInit+0x19c>)
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	43d9      	mvns	r1, r3
 800597c:	4b36      	ldr	r3, [pc, #216]	@ (8005a58 <HAL_GPIO_DeInit+0x19c>)
 800597e:	400a      	ands	r2, r1
 8005980:	601a      	str	r2, [r3, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8005982:	4b35      	ldr	r3, [pc, #212]	@ (8005a58 <HAL_GPIO_DeInit+0x19c>)
 8005984:	685a      	ldr	r2, [r3, #4]
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	43d9      	mvns	r1, r3
 800598a:	4b33      	ldr	r3, [pc, #204]	@ (8005a58 <HAL_GPIO_DeInit+0x19c>)
 800598c:	400a      	ands	r2, r1
 800598e:	605a      	str	r2, [r3, #4]

        tmp = (0x0FUL) << (8U * (position & 0x03U));
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	2203      	movs	r2, #3
 8005994:	4013      	ands	r3, r2
 8005996:	00db      	lsls	r3, r3, #3
 8005998:	220f      	movs	r2, #15
 800599a:	409a      	lsls	r2, r3
 800599c:	0013      	movs	r3, r2
 800599e:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2U] &= ~tmp;
 80059a0:	4a2d      	ldr	r2, [pc, #180]	@ (8005a58 <HAL_GPIO_DeInit+0x19c>)
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	089b      	lsrs	r3, r3, #2
 80059a6:	3318      	adds	r3, #24
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	589a      	ldr	r2, [r3, r2]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	43d9      	mvns	r1, r3
 80059b0:	4829      	ldr	r0, [pc, #164]	@ (8005a58 <HAL_GPIO_DeInit+0x19c>)
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	089b      	lsrs	r3, r3, #2
 80059b6:	400a      	ands	r2, r1
 80059b8:	3318      	adds	r3, #24
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	005b      	lsls	r3, r3, #1
 80059c6:	2103      	movs	r1, #3
 80059c8:	4099      	lsls	r1, r3
 80059ca:	000b      	movs	r3, r1
 80059cc:	431a      	orrs	r2, r3
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	08da      	lsrs	r2, r3, #3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	3208      	adds	r2, #8
 80059da:	0092      	lsls	r2, r2, #2
 80059dc:	58d3      	ldr	r3, [r2, r3]
 80059de:	697a      	ldr	r2, [r7, #20]
 80059e0:	2107      	movs	r1, #7
 80059e2:	400a      	ands	r2, r1
 80059e4:	0092      	lsls	r2, r2, #2
 80059e6:	210f      	movs	r1, #15
 80059e8:	4091      	lsls	r1, r2
 80059ea:	000a      	movs	r2, r1
 80059ec:	43d1      	mvns	r1, r2
 80059ee:	697a      	ldr	r2, [r7, #20]
 80059f0:	08d2      	lsrs	r2, r2, #3
 80059f2:	4019      	ands	r1, r3
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	3208      	adds	r2, #8
 80059f8:	0092      	lsls	r2, r2, #2
 80059fa:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	697a      	ldr	r2, [r7, #20]
 8005a02:	0052      	lsls	r2, r2, #1
 8005a04:	2103      	movs	r1, #3
 8005a06:	4091      	lsls	r1, r2
 8005a08:	000a      	movs	r2, r1
 8005a0a:	43d2      	mvns	r2, r2
 8005a0c:	401a      	ands	r2, r3
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	2101      	movs	r1, #1
 8005a18:	697a      	ldr	r2, [r7, #20]
 8005a1a:	4091      	lsls	r1, r2
 8005a1c:	000a      	movs	r2, r1
 8005a1e:	43d2      	mvns	r2, r2
 8005a20:	401a      	ands	r2, r3
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	697a      	ldr	r2, [r7, #20]
 8005a2c:	0052      	lsls	r2, r2, #1
 8005a2e:	2103      	movs	r1, #3
 8005a30:	4091      	lsls	r1, r2
 8005a32:	000a      	movs	r2, r1
 8005a34:	43d2      	mvns	r2, r2
 8005a36:	401a      	ands	r2, r3
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	60da      	str	r2, [r3, #12]
    }

    position++;
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	3301      	adds	r3, #1
 8005a40:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 8005a42:	683a      	ldr	r2, [r7, #0]
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	40da      	lsrs	r2, r3
 8005a48:	1e13      	subs	r3, r2, #0
 8005a4a:	d000      	beq.n	8005a4e <HAL_GPIO_DeInit+0x192>
 8005a4c:	e73e      	b.n	80058cc <HAL_GPIO_DeInit+0x10>
  }
}
 8005a4e:	46c0      	nop			@ (mov r8, r8)
 8005a50:	46c0      	nop			@ (mov r8, r8)
 8005a52:	46bd      	mov	sp, r7
 8005a54:	b006      	add	sp, #24
 8005a56:	bd80      	pop	{r7, pc}
 8005a58:	40021800 	.word	0x40021800
 8005a5c:	50000400 	.word	0x50000400
 8005a60:	50000800 	.word	0x50000800
 8005a64:	50000c00 	.word	0x50000c00
 8005a68:	50001400 	.word	0x50001400

08005a6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b084      	sub	sp, #16
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	000a      	movs	r2, r1
 8005a76:	1cbb      	adds	r3, r7, #2
 8005a78:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	1cba      	adds	r2, r7, #2
 8005a80:	8812      	ldrh	r2, [r2, #0]
 8005a82:	4013      	ands	r3, r2
 8005a84:	d004      	beq.n	8005a90 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8005a86:	230f      	movs	r3, #15
 8005a88:	18fb      	adds	r3, r7, r3
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	701a      	strb	r2, [r3, #0]
 8005a8e:	e003      	b.n	8005a98 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005a90:	230f      	movs	r3, #15
 8005a92:	18fb      	adds	r3, r7, r3
 8005a94:	2200      	movs	r2, #0
 8005a96:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8005a98:	230f      	movs	r3, #15
 8005a9a:	18fb      	adds	r3, r7, r3
 8005a9c:	781b      	ldrb	r3, [r3, #0]
}
 8005a9e:	0018      	movs	r0, r3
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	b004      	add	sp, #16
 8005aa4:	bd80      	pop	{r7, pc}

08005aa6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005aa6:	b580      	push	{r7, lr}
 8005aa8:	b082      	sub	sp, #8
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
 8005aae:	0008      	movs	r0, r1
 8005ab0:	0011      	movs	r1, r2
 8005ab2:	1cbb      	adds	r3, r7, #2
 8005ab4:	1c02      	adds	r2, r0, #0
 8005ab6:	801a      	strh	r2, [r3, #0]
 8005ab8:	1c7b      	adds	r3, r7, #1
 8005aba:	1c0a      	adds	r2, r1, #0
 8005abc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005abe:	1c7b      	adds	r3, r7, #1
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d004      	beq.n	8005ad0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005ac6:	1cbb      	adds	r3, r7, #2
 8005ac8:	881a      	ldrh	r2, [r3, #0]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005ace:	e003      	b.n	8005ad8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005ad0:	1cbb      	adds	r3, r7, #2
 8005ad2:	881a      	ldrh	r2, [r3, #0]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005ad8:	46c0      	nop			@ (mov r8, r8)
 8005ada:	46bd      	mov	sp, r7
 8005adc:	b002      	add	sp, #8
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b082      	sub	sp, #8
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	0002      	movs	r2, r0
 8005ae8:	1dbb      	adds	r3, r7, #6
 8005aea:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8005aec:	4b10      	ldr	r3, [pc, #64]	@ (8005b30 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	1dba      	adds	r2, r7, #6
 8005af2:	8812      	ldrh	r2, [r2, #0]
 8005af4:	4013      	ands	r3, r2
 8005af6:	d008      	beq.n	8005b0a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8005af8:	4b0d      	ldr	r3, [pc, #52]	@ (8005b30 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8005afa:	1dba      	adds	r2, r7, #6
 8005afc:	8812      	ldrh	r2, [r2, #0]
 8005afe:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8005b00:	1dbb      	adds	r3, r7, #6
 8005b02:	881b      	ldrh	r3, [r3, #0]
 8005b04:	0018      	movs	r0, r3
 8005b06:	f7fc fb09 	bl	800211c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8005b0a:	4b09      	ldr	r3, [pc, #36]	@ (8005b30 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	1dba      	adds	r2, r7, #6
 8005b10:	8812      	ldrh	r2, [r2, #0]
 8005b12:	4013      	ands	r3, r2
 8005b14:	d008      	beq.n	8005b28 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8005b16:	4b06      	ldr	r3, [pc, #24]	@ (8005b30 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8005b18:	1dba      	adds	r2, r7, #6
 8005b1a:	8812      	ldrh	r2, [r2, #0]
 8005b1c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8005b1e:	1dbb      	adds	r3, r7, #6
 8005b20:	881b      	ldrh	r3, [r3, #0]
 8005b22:	0018      	movs	r0, r3
 8005b24:	f000 f806 	bl	8005b34 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8005b28:	46c0      	nop			@ (mov r8, r8)
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	b002      	add	sp, #8
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	40021800 	.word	0x40021800

08005b34 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b082      	sub	sp, #8
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	0002      	movs	r2, r0
 8005b3c:	1dbb      	adds	r3, r7, #6
 8005b3e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8005b40:	46c0      	nop			@ (mov r8, r8)
 8005b42:	46bd      	mov	sp, r7
 8005b44:	b002      	add	sp, #8
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d101      	bne.n	8005b5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e08f      	b.n	8005c7a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2241      	movs	r2, #65	@ 0x41
 8005b5e:	5c9b      	ldrb	r3, [r3, r2]
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d107      	bne.n	8005b76 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2240      	movs	r2, #64	@ 0x40
 8005b6a:	2100      	movs	r1, #0
 8005b6c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	0018      	movs	r0, r3
 8005b72:	f7fe faed 	bl	8004150 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2241      	movs	r2, #65	@ 0x41
 8005b7a:	2124      	movs	r1, #36	@ 0x24
 8005b7c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2101      	movs	r1, #1
 8005b8a:	438a      	bics	r2, r1
 8005b8c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	685a      	ldr	r2, [r3, #4]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	493b      	ldr	r1, [pc, #236]	@ (8005c84 <HAL_I2C_Init+0x13c>)
 8005b98:	400a      	ands	r2, r1
 8005b9a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	689a      	ldr	r2, [r3, #8]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4938      	ldr	r1, [pc, #224]	@ (8005c88 <HAL_I2C_Init+0x140>)
 8005ba8:	400a      	ands	r2, r1
 8005baa:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d108      	bne.n	8005bc6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	689a      	ldr	r2, [r3, #8]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	2180      	movs	r1, #128	@ 0x80
 8005bbe:	0209      	lsls	r1, r1, #8
 8005bc0:	430a      	orrs	r2, r1
 8005bc2:	609a      	str	r2, [r3, #8]
 8005bc4:	e007      	b.n	8005bd6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	689a      	ldr	r2, [r3, #8]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	2184      	movs	r1, #132	@ 0x84
 8005bd0:	0209      	lsls	r1, r1, #8
 8005bd2:	430a      	orrs	r2, r1
 8005bd4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	d109      	bne.n	8005bf2 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	685a      	ldr	r2, [r3, #4]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	2180      	movs	r1, #128	@ 0x80
 8005bea:	0109      	lsls	r1, r1, #4
 8005bec:	430a      	orrs	r2, r1
 8005bee:	605a      	str	r2, [r3, #4]
 8005bf0:	e007      	b.n	8005c02 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	685a      	ldr	r2, [r3, #4]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4923      	ldr	r1, [pc, #140]	@ (8005c8c <HAL_I2C_Init+0x144>)
 8005bfe:	400a      	ands	r2, r1
 8005c00:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	685a      	ldr	r2, [r3, #4]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4920      	ldr	r1, [pc, #128]	@ (8005c90 <HAL_I2C_Init+0x148>)
 8005c0e:	430a      	orrs	r2, r1
 8005c10:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68da      	ldr	r2, [r3, #12]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	491a      	ldr	r1, [pc, #104]	@ (8005c88 <HAL_I2C_Init+0x140>)
 8005c1e:	400a      	ands	r2, r1
 8005c20:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	691a      	ldr	r2, [r3, #16]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	695b      	ldr	r3, [r3, #20]
 8005c2a:	431a      	orrs	r2, r3
 8005c2c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	699b      	ldr	r3, [r3, #24]
 8005c32:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	430a      	orrs	r2, r1
 8005c3a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	69d9      	ldr	r1, [r3, #28]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6a1a      	ldr	r2, [r3, #32]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	430a      	orrs	r2, r1
 8005c4a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	2101      	movs	r1, #1
 8005c58:	430a      	orrs	r2, r1
 8005c5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2241      	movs	r2, #65	@ 0x41
 8005c66:	2120      	movs	r1, #32
 8005c68:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2242      	movs	r2, #66	@ 0x42
 8005c74:	2100      	movs	r1, #0
 8005c76:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	0018      	movs	r0, r3
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	b002      	add	sp, #8
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	46c0      	nop			@ (mov r8, r8)
 8005c84:	f0ffffff 	.word	0xf0ffffff
 8005c88:	ffff7fff 	.word	0xffff7fff
 8005c8c:	fffff7ff 	.word	0xfffff7ff
 8005c90:	02008000 	.word	0x02008000

08005c94 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b082      	sub	sp, #8
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d101      	bne.n	8005ca6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e022      	b.n	8005cec <HAL_I2C_DeInit+0x58>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2241      	movs	r2, #65	@ 0x41
 8005caa:	2124      	movs	r1, #36	@ 0x24
 8005cac:	5499      	strb	r1, [r3, r2]

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2101      	movs	r1, #1
 8005cba:	438a      	bics	r2, r1
 8005cbc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	0018      	movs	r0, r3
 8005cc2:	f7fe fb0b 	bl	80042dc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2241      	movs	r2, #65	@ 0x41
 8005cd0:	2100      	movs	r1, #0
 8005cd2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2242      	movs	r2, #66	@ 0x42
 8005cde:	2100      	movs	r1, #0
 8005ce0:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2240      	movs	r2, #64	@ 0x40
 8005ce6:	2100      	movs	r1, #0
 8005ce8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005cea:	2300      	movs	r3, #0
}
 8005cec:	0018      	movs	r0, r3
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	b002      	add	sp, #8
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8005cf4:	b5b0      	push	{r4, r5, r7, lr}
 8005cf6:	b08a      	sub	sp, #40	@ 0x28
 8005cf8:	af02      	add	r7, sp, #8
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	0008      	movs	r0, r1
 8005cfe:	607a      	str	r2, [r7, #4]
 8005d00:	0019      	movs	r1, r3
 8005d02:	230a      	movs	r3, #10
 8005d04:	18fb      	adds	r3, r7, r3
 8005d06:	1c02      	adds	r2, r0, #0
 8005d08:	801a      	strh	r2, [r3, #0]
 8005d0a:	2308      	movs	r3, #8
 8005d0c:	18fb      	adds	r3, r7, r3
 8005d0e:	1c0a      	adds	r2, r1, #0
 8005d10:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8005d12:	2300      	movs	r3, #0
 8005d14:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2241      	movs	r2, #65	@ 0x41
 8005d1a:	5c9b      	ldrb	r3, [r3, r2]
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	2b20      	cmp	r3, #32
 8005d20:	d000      	beq.n	8005d24 <HAL_I2C_Master_Transmit_DMA+0x30>
 8005d22:	e0ff      	b.n	8005f24 <HAL_I2C_Master_Transmit_DMA+0x230>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	699a      	ldr	r2, [r3, #24]
 8005d2a:	2380      	movs	r3, #128	@ 0x80
 8005d2c:	021b      	lsls	r3, r3, #8
 8005d2e:	401a      	ands	r2, r3
 8005d30:	2380      	movs	r3, #128	@ 0x80
 8005d32:	021b      	lsls	r3, r3, #8
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d101      	bne.n	8005d3c <HAL_I2C_Master_Transmit_DMA+0x48>
    {
      return HAL_BUSY;
 8005d38:	2302      	movs	r3, #2
 8005d3a:	e0f4      	b.n	8005f26 <HAL_I2C_Master_Transmit_DMA+0x232>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2240      	movs	r2, #64	@ 0x40
 8005d40:	5c9b      	ldrb	r3, [r3, r2]
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d101      	bne.n	8005d4a <HAL_I2C_Master_Transmit_DMA+0x56>
 8005d46:	2302      	movs	r3, #2
 8005d48:	e0ed      	b.n	8005f26 <HAL_I2C_Master_Transmit_DMA+0x232>
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2240      	movs	r2, #64	@ 0x40
 8005d4e:	2101      	movs	r1, #1
 8005d50:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2241      	movs	r2, #65	@ 0x41
 8005d56:	2121      	movs	r1, #33	@ 0x21
 8005d58:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2242      	movs	r2, #66	@ 0x42
 8005d5e:	2110      	movs	r1, #16
 8005d60:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2200      	movs	r2, #0
 8005d66:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2208      	movs	r2, #8
 8005d72:	18ba      	adds	r2, r7, r2
 8005d74:	8812      	ldrh	r2, [r2, #0]
 8005d76:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	4a6d      	ldr	r2, [pc, #436]	@ (8005f30 <HAL_I2C_Master_Transmit_DMA+0x23c>)
 8005d7c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	4a6c      	ldr	r2, [pc, #432]	@ (8005f34 <HAL_I2C_Master_Transmit_DMA+0x240>)
 8005d82:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	2bff      	cmp	r3, #255	@ 0xff
 8005d8c:	d906      	bls.n	8005d9c <HAL_I2C_Master_Transmit_DMA+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	22ff      	movs	r2, #255	@ 0xff
 8005d92:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005d94:	2380      	movs	r3, #128	@ 0x80
 8005d96:	045b      	lsls	r3, r3, #17
 8005d98:	61fb      	str	r3, [r7, #28]
 8005d9a:	e007      	b.n	8005dac <HAL_I2C_Master_Transmit_DMA+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005da0:	b29a      	uxth	r2, r3
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005da6:	2380      	movs	r3, #128	@ 0x80
 8005da8:	049b      	lsls	r3, r3, #18
 8005daa:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d01a      	beq.n	8005dea <HAL_I2C_Master_Transmit_DMA+0xf6>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005db8:	781a      	ldrb	r2, [r3, #0]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dc4:	1c5a      	adds	r2, r3, #1
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dce:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	b29a      	uxth	r2, r3
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005de2:	3b01      	subs	r3, #1
 8005de4:	b29a      	uxth	r2, r3
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d100      	bne.n	8005df4 <HAL_I2C_Master_Transmit_DMA+0x100>
 8005df2:	e07c      	b.n	8005eee <HAL_I2C_Master_Transmit_DMA+0x1fa>
    {
      if (hi2c->hdmatx != NULL)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d025      	beq.n	8005e48 <HAL_I2C_Master_Transmit_DMA+0x154>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e00:	4a4d      	ldr	r2, [pc, #308]	@ (8005f38 <HAL_I2C_Master_Transmit_DMA+0x244>)
 8005e02:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e08:	4a4c      	ldr	r2, [pc, #304]	@ (8005f3c <HAL_I2C_Master_Transmit_DMA+0x248>)
 8005e0a:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e10:	2200      	movs	r2, #0
 8005e12:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e18:	2200      	movs	r2, #0
 8005e1a:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e24:	0019      	movs	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8005e2c:	001a      	movs	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8005e32:	2517      	movs	r5, #23
 8005e34:	197c      	adds	r4, r7, r5
 8005e36:	f7ff f913 	bl	8005060 <HAL_DMA_Start_IT>
 8005e3a:	0003      	movs	r3, r0
 8005e3c:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005e3e:	197b      	adds	r3, r7, r5
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d13f      	bne.n	8005ec6 <HAL_I2C_Master_Transmit_DMA+0x1d2>
 8005e46:	e013      	b.n	8005e70 <HAL_I2C_Master_Transmit_DMA+0x17c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2241      	movs	r2, #65	@ 0x41
 8005e4c:	2120      	movs	r1, #32
 8005e4e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2242      	movs	r2, #66	@ 0x42
 8005e54:	2100      	movs	r1, #0
 8005e56:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e5c:	2280      	movs	r2, #128	@ 0x80
 8005e5e:	431a      	orrs	r2, r3
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2240      	movs	r2, #64	@ 0x40
 8005e68:	2100      	movs	r1, #0
 8005e6a:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e05a      	b.n	8005f26 <HAL_I2C_Master_Transmit_DMA+0x232>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	3301      	adds	r3, #1
 8005e78:	b2da      	uxtb	r2, r3
 8005e7a:	69fc      	ldr	r4, [r7, #28]
 8005e7c:	230a      	movs	r3, #10
 8005e7e:	18fb      	adds	r3, r7, r3
 8005e80:	8819      	ldrh	r1, [r3, #0]
 8005e82:	68f8      	ldr	r0, [r7, #12]
 8005e84:	4b2e      	ldr	r3, [pc, #184]	@ (8005f40 <HAL_I2C_Master_Transmit_DMA+0x24c>)
 8005e86:	9300      	str	r3, [sp, #0]
 8005e88:	0023      	movs	r3, r4
 8005e8a:	f001 fe69 	bl	8007b60 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e92:	b29a      	uxth	r2, r3
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	b29a      	uxth	r2, r3
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2240      	movs	r2, #64	@ 0x40
 8005ea4:	2100      	movs	r1, #0
 8005ea6:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2110      	movs	r1, #16
 8005eac:	0018      	movs	r0, r3
 8005eae:	f001 fe91 	bl	8007bd4 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2180      	movs	r1, #128	@ 0x80
 8005ebe:	01c9      	lsls	r1, r1, #7
 8005ec0:	430a      	orrs	r2, r1
 8005ec2:	601a      	str	r2, [r3, #0]
 8005ec4:	e02c      	b.n	8005f20 <HAL_I2C_Master_Transmit_DMA+0x22c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2241      	movs	r2, #65	@ 0x41
 8005eca:	2120      	movs	r1, #32
 8005ecc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2242      	movs	r2, #66	@ 0x42
 8005ed2:	2100      	movs	r1, #0
 8005ed4:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eda:	2210      	movs	r2, #16
 8005edc:	431a      	orrs	r2, r3
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2240      	movs	r2, #64	@ 0x40
 8005ee6:	2100      	movs	r1, #0
 8005ee8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	e01b      	b.n	8005f26 <HAL_I2C_Master_Transmit_DMA+0x232>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	4a14      	ldr	r2, [pc, #80]	@ (8005f44 <HAL_I2C_Master_Transmit_DMA+0x250>)
 8005ef2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	b2da      	uxtb	r2, r3
 8005ef8:	2380      	movs	r3, #128	@ 0x80
 8005efa:	049c      	lsls	r4, r3, #18
 8005efc:	230a      	movs	r3, #10
 8005efe:	18fb      	adds	r3, r7, r3
 8005f00:	8819      	ldrh	r1, [r3, #0]
 8005f02:	68f8      	ldr	r0, [r7, #12]
 8005f04:	4b0e      	ldr	r3, [pc, #56]	@ (8005f40 <HAL_I2C_Master_Transmit_DMA+0x24c>)
 8005f06:	9300      	str	r3, [sp, #0]
 8005f08:	0023      	movs	r3, r4
 8005f0a:	f001 fe29 	bl	8007b60 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2240      	movs	r2, #64	@ 0x40
 8005f12:	2100      	movs	r1, #0
 8005f14:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2101      	movs	r1, #1
 8005f1a:	0018      	movs	r0, r3
 8005f1c:	f001 fe5a 	bl	8007bd4 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8005f20:	2300      	movs	r3, #0
 8005f22:	e000      	b.n	8005f26 <HAL_I2C_Master_Transmit_DMA+0x232>
  }
  else
  {
    return HAL_BUSY;
 8005f24:	2302      	movs	r3, #2
  }
}
 8005f26:	0018      	movs	r0, r3
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	b008      	add	sp, #32
 8005f2c:	bdb0      	pop	{r4, r5, r7, pc}
 8005f2e:	46c0      	nop			@ (mov r8, r8)
 8005f30:	ffff0000 	.word	0xffff0000
 8005f34:	08006905 	.word	0x08006905
 8005f38:	080079b1 	.word	0x080079b1
 8005f3c:	08007af1 	.word	0x08007af1
 8005f40:	80002000 	.word	0x80002000
 8005f44:	0800649d 	.word	0x0800649d

08005f48 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8005f48:	b5b0      	push	{r4, r5, r7, lr}
 8005f4a:	b088      	sub	sp, #32
 8005f4c:	af02      	add	r7, sp, #8
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	0008      	movs	r0, r1
 8005f52:	607a      	str	r2, [r7, #4]
 8005f54:	0019      	movs	r1, r3
 8005f56:	230a      	movs	r3, #10
 8005f58:	18fb      	adds	r3, r7, r3
 8005f5a:	1c02      	adds	r2, r0, #0
 8005f5c:	801a      	strh	r2, [r3, #0]
 8005f5e:	2308      	movs	r3, #8
 8005f60:	18fb      	adds	r3, r7, r3
 8005f62:	1c0a      	adds	r2, r1, #0
 8005f64:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2241      	movs	r2, #65	@ 0x41
 8005f6a:	5c9b      	ldrb	r3, [r3, r2]
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	2b20      	cmp	r3, #32
 8005f70:	d000      	beq.n	8005f74 <HAL_I2C_Master_Receive_DMA+0x2c>
 8005f72:	e0dd      	b.n	8006130 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	699a      	ldr	r2, [r3, #24]
 8005f7a:	2380      	movs	r3, #128	@ 0x80
 8005f7c:	021b      	lsls	r3, r3, #8
 8005f7e:	401a      	ands	r2, r3
 8005f80:	2380      	movs	r3, #128	@ 0x80
 8005f82:	021b      	lsls	r3, r3, #8
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d101      	bne.n	8005f8c <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 8005f88:	2302      	movs	r3, #2
 8005f8a:	e0d2      	b.n	8006132 <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2240      	movs	r2, #64	@ 0x40
 8005f90:	5c9b      	ldrb	r3, [r3, r2]
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d101      	bne.n	8005f9a <HAL_I2C_Master_Receive_DMA+0x52>
 8005f96:	2302      	movs	r3, #2
 8005f98:	e0cb      	b.n	8006132 <HAL_I2C_Master_Receive_DMA+0x1ea>
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2240      	movs	r2, #64	@ 0x40
 8005f9e:	2101      	movs	r1, #1
 8005fa0:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2241      	movs	r2, #65	@ 0x41
 8005fa6:	2122      	movs	r1, #34	@ 0x22
 8005fa8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2242      	movs	r2, #66	@ 0x42
 8005fae:	2110      	movs	r1, #16
 8005fb0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2208      	movs	r2, #8
 8005fc2:	18ba      	adds	r2, r7, r2
 8005fc4:	8812      	ldrh	r2, [r2, #0]
 8005fc6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	4a5c      	ldr	r2, [pc, #368]	@ (800613c <HAL_I2C_Master_Receive_DMA+0x1f4>)
 8005fcc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	4a5b      	ldr	r2, [pc, #364]	@ (8006140 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 8005fd2:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	2bff      	cmp	r3, #255	@ 0xff
 8005fdc:	d906      	bls.n	8005fec <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	22ff      	movs	r2, #255	@ 0xff
 8005fe2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005fe4:	2380      	movs	r3, #128	@ 0x80
 8005fe6:	045b      	lsls	r3, r3, #17
 8005fe8:	617b      	str	r3, [r7, #20]
 8005fea:	e007      	b.n	8005ffc <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ff0:	b29a      	uxth	r2, r3
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005ff6:	2380      	movs	r3, #128	@ 0x80
 8005ff8:	049b      	lsls	r3, r3, #18
 8005ffa:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006000:	2b00      	cmp	r3, #0
 8006002:	d100      	bne.n	8006006 <HAL_I2C_Master_Receive_DMA+0xbe>
 8006004:	e078      	b.n	80060f8 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800600a:	2b00      	cmp	r3, #0
 800600c:	d023      	beq.n	8006056 <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006012:	4a4c      	ldr	r2, [pc, #304]	@ (8006144 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 8006014:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800601a:	4a4b      	ldr	r2, [pc, #300]	@ (8006148 <HAL_I2C_Master_Receive_DMA+0x200>)
 800601c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006022:	2200      	movs	r2, #0
 8006024:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800602a:	2200      	movs	r2, #0
 800602c:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	3324      	adds	r3, #36	@ 0x24
 8006038:	0019      	movs	r1, r3
 800603a:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8006040:	2513      	movs	r5, #19
 8006042:	197c      	adds	r4, r7, r5
 8006044:	f7ff f80c 	bl	8005060 <HAL_DMA_Start_IT>
 8006048:	0003      	movs	r3, r0
 800604a:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800604c:	197b      	adds	r3, r7, r5
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d13d      	bne.n	80060d0 <HAL_I2C_Master_Receive_DMA+0x188>
 8006054:	e013      	b.n	800607e <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2241      	movs	r2, #65	@ 0x41
 800605a:	2120      	movs	r1, #32
 800605c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2242      	movs	r2, #66	@ 0x42
 8006062:	2100      	movs	r1, #0
 8006064:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800606a:	2280      	movs	r2, #128	@ 0x80
 800606c:	431a      	orrs	r2, r3
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2240      	movs	r2, #64	@ 0x40
 8006076:	2100      	movs	r1, #0
 8006078:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	e059      	b.n	8006132 <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006082:	b2da      	uxtb	r2, r3
 8006084:	697c      	ldr	r4, [r7, #20]
 8006086:	230a      	movs	r3, #10
 8006088:	18fb      	adds	r3, r7, r3
 800608a:	8819      	ldrh	r1, [r3, #0]
 800608c:	68f8      	ldr	r0, [r7, #12]
 800608e:	4b2f      	ldr	r3, [pc, #188]	@ (800614c <HAL_I2C_Master_Receive_DMA+0x204>)
 8006090:	9300      	str	r3, [sp, #0]
 8006092:	0023      	movs	r3, r4
 8006094:	f001 fd64 	bl	8007b60 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800609c:	b29a      	uxth	r2, r3
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060a2:	1ad3      	subs	r3, r2, r3
 80060a4:	b29a      	uxth	r2, r3
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2240      	movs	r2, #64	@ 0x40
 80060ae:	2100      	movs	r1, #0
 80060b0:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2110      	movs	r1, #16
 80060b6:	0018      	movs	r0, r3
 80060b8:	f001 fd8c 	bl	8007bd4 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	2180      	movs	r1, #128	@ 0x80
 80060c8:	0209      	lsls	r1, r1, #8
 80060ca:	430a      	orrs	r2, r1
 80060cc:	601a      	str	r2, [r3, #0]
 80060ce:	e02d      	b.n	800612c <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2241      	movs	r2, #65	@ 0x41
 80060d4:	2120      	movs	r1, #32
 80060d6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2242      	movs	r2, #66	@ 0x42
 80060dc:	2100      	movs	r1, #0
 80060de:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060e4:	2210      	movs	r2, #16
 80060e6:	431a      	orrs	r2, r3
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2240      	movs	r2, #64	@ 0x40
 80060f0:	2100      	movs	r1, #0
 80060f2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	e01c      	b.n	8006132 <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	4a15      	ldr	r2, [pc, #84]	@ (8006150 <HAL_I2C_Master_Receive_DMA+0x208>)
 80060fc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006102:	b2da      	uxtb	r2, r3
 8006104:	2380      	movs	r3, #128	@ 0x80
 8006106:	049c      	lsls	r4, r3, #18
 8006108:	230a      	movs	r3, #10
 800610a:	18fb      	adds	r3, r7, r3
 800610c:	8819      	ldrh	r1, [r3, #0]
 800610e:	68f8      	ldr	r0, [r7, #12]
 8006110:	4b0e      	ldr	r3, [pc, #56]	@ (800614c <HAL_I2C_Master_Receive_DMA+0x204>)
 8006112:	9300      	str	r3, [sp, #0]
 8006114:	0023      	movs	r3, r4
 8006116:	f001 fd23 	bl	8007b60 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2240      	movs	r2, #64	@ 0x40
 800611e:	2100      	movs	r1, #0
 8006120:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2102      	movs	r1, #2
 8006126:	0018      	movs	r0, r3
 8006128:	f001 fd54 	bl	8007bd4 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800612c:	2300      	movs	r3, #0
 800612e:	e000      	b.n	8006132 <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006130:	2302      	movs	r3, #2
  }
}
 8006132:	0018      	movs	r0, r3
 8006134:	46bd      	mov	sp, r7
 8006136:	b006      	add	sp, #24
 8006138:	bdb0      	pop	{r4, r5, r7, pc}
 800613a:	46c0      	nop			@ (mov r8, r8)
 800613c:	ffff0000 	.word	0xffff0000
 8006140:	08006905 	.word	0x08006905
 8006144:	08007a51 	.word	0x08007a51
 8006148:	08007af1 	.word	0x08007af1
 800614c:	80002400 	.word	0x80002400
 8006150:	0800649d 	.word	0x0800649d

08006154 <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8006154:	b5b0      	push	{r4, r5, r7, lr}
 8006156:	b088      	sub	sp, #32
 8006158:	af02      	add	r7, sp, #8
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	000c      	movs	r4, r1
 800615e:	0010      	movs	r0, r2
 8006160:	0019      	movs	r1, r3
 8006162:	230a      	movs	r3, #10
 8006164:	18fb      	adds	r3, r7, r3
 8006166:	1c22      	adds	r2, r4, #0
 8006168:	801a      	strh	r2, [r3, #0]
 800616a:	2308      	movs	r3, #8
 800616c:	18fb      	adds	r3, r7, r3
 800616e:	1c02      	adds	r2, r0, #0
 8006170:	801a      	strh	r2, [r3, #0]
 8006172:	1dbb      	adds	r3, r7, #6
 8006174:	1c0a      	adds	r2, r1, #0
 8006176:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2241      	movs	r2, #65	@ 0x41
 800617c:	5c9b      	ldrb	r3, [r3, r2]
 800617e:	b2db      	uxtb	r3, r3
 8006180:	2b20      	cmp	r3, #32
 8006182:	d000      	beq.n	8006186 <HAL_I2C_Mem_Read_DMA+0x32>
 8006184:	e0d6      	b.n	8006334 <HAL_I2C_Mem_Read_DMA+0x1e0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006188:	2b00      	cmp	r3, #0
 800618a:	d004      	beq.n	8006196 <HAL_I2C_Mem_Read_DMA+0x42>
 800618c:	232c      	movs	r3, #44	@ 0x2c
 800618e:	18fb      	adds	r3, r7, r3
 8006190:	881b      	ldrh	r3, [r3, #0]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d105      	bne.n	80061a2 <HAL_I2C_Mem_Read_DMA+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2280      	movs	r2, #128	@ 0x80
 800619a:	0092      	lsls	r2, r2, #2
 800619c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e0c9      	b.n	8006336 <HAL_I2C_Mem_Read_DMA+0x1e2>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	699a      	ldr	r2, [r3, #24]
 80061a8:	2380      	movs	r3, #128	@ 0x80
 80061aa:	021b      	lsls	r3, r3, #8
 80061ac:	401a      	ands	r2, r3
 80061ae:	2380      	movs	r3, #128	@ 0x80
 80061b0:	021b      	lsls	r3, r3, #8
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d101      	bne.n	80061ba <HAL_I2C_Mem_Read_DMA+0x66>
    {
      return HAL_BUSY;
 80061b6:	2302      	movs	r3, #2
 80061b8:	e0bd      	b.n	8006336 <HAL_I2C_Mem_Read_DMA+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2240      	movs	r2, #64	@ 0x40
 80061be:	5c9b      	ldrb	r3, [r3, r2]
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d101      	bne.n	80061c8 <HAL_I2C_Mem_Read_DMA+0x74>
 80061c4:	2302      	movs	r3, #2
 80061c6:	e0b6      	b.n	8006336 <HAL_I2C_Mem_Read_DMA+0x1e2>
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2240      	movs	r2, #64	@ 0x40
 80061cc:	2101      	movs	r1, #1
 80061ce:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2241      	movs	r2, #65	@ 0x41
 80061d4:	2122      	movs	r1, #34	@ 0x22
 80061d6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2242      	movs	r2, #66	@ 0x42
 80061dc:	2140      	movs	r1, #64	@ 0x40
 80061de:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2200      	movs	r2, #0
 80061e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80061ea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	222c      	movs	r2, #44	@ 0x2c
 80061f0:	18ba      	adds	r2, r7, r2
 80061f2:	8812      	ldrh	r2, [r2, #0]
 80061f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	4a51      	ldr	r2, [pc, #324]	@ (8006340 <HAL_I2C_Mem_Read_DMA+0x1ec>)
 80061fa:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	4a51      	ldr	r2, [pc, #324]	@ (8006344 <HAL_I2C_Mem_Read_DMA+0x1f0>)
 8006200:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 8006202:	230a      	movs	r3, #10
 8006204:	18fb      	adds	r3, r7, r3
 8006206:	881a      	ldrh	r2, [r3, #0]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	64da      	str	r2, [r3, #76]	@ 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006210:	b29b      	uxth	r3, r3
 8006212:	2bff      	cmp	r3, #255	@ 0xff
 8006214:	d903      	bls.n	800621e <HAL_I2C_Mem_Read_DMA+0xca>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	22ff      	movs	r2, #255	@ 0xff
 800621a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800621c:	e004      	b.n	8006228 <HAL_I2C_Mem_Read_DMA+0xd4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006222:	b29a      	uxth	r2, r3
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006228:	1dbb      	adds	r3, r7, #6
 800622a:	881b      	ldrh	r3, [r3, #0]
 800622c:	2b01      	cmp	r3, #1
 800622e:	d10b      	bne.n	8006248 <HAL_I2C_Mem_Read_DMA+0xf4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006230:	2308      	movs	r3, #8
 8006232:	18fb      	adds	r3, r7, r3
 8006234:	881b      	ldrh	r3, [r3, #0]
 8006236:	b2da      	uxtb	r2, r3
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2201      	movs	r2, #1
 8006242:	4252      	negs	r2, r2
 8006244:	651a      	str	r2, [r3, #80]	@ 0x50
 8006246:	e00e      	b.n	8006266 <HAL_I2C_Mem_Read_DMA+0x112>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006248:	2108      	movs	r1, #8
 800624a:	187b      	adds	r3, r7, r1
 800624c:	881b      	ldrh	r3, [r3, #0]
 800624e:	0a1b      	lsrs	r3, r3, #8
 8006250:	b29b      	uxth	r3, r3
 8006252:	b2da      	uxtb	r2, r3
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 800625a:	187b      	adds	r3, r7, r1
 800625c:	881b      	ldrh	r3, [r3, #0]
 800625e:	b2db      	uxtb	r3, r3
 8006260:	001a      	movs	r2, r3
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if (hi2c->hdmarx != NULL)
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800626a:	2b00      	cmp	r3, #0
 800626c:	d023      	beq.n	80062b6 <HAL_I2C_Mem_Read_DMA+0x162>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006272:	4a35      	ldr	r2, [pc, #212]	@ (8006348 <HAL_I2C_Mem_Read_DMA+0x1f4>)
 8006274:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800627a:	4a34      	ldr	r2, [pc, #208]	@ (800634c <HAL_I2C_Mem_Read_DMA+0x1f8>)
 800627c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006282:	2200      	movs	r2, #0
 8006284:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->hdmarx->XferAbortCallback = NULL;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800628a:	2200      	movs	r2, #0
 800628c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	3324      	adds	r3, #36	@ 0x24
 8006298:	0019      	movs	r1, r3
 800629a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
                                       hi2c->XferSize);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80062a0:	2517      	movs	r5, #23
 80062a2:	197c      	adds	r4, r7, r5
 80062a4:	f7fe fedc 	bl	8005060 <HAL_DMA_Start_IT>
 80062a8:	0003      	movs	r3, r0
 80062aa:	7023      	strb	r3, [r4, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 80062ac:	197b      	adds	r3, r7, r5
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d12b      	bne.n	800630c <HAL_I2C_Mem_Read_DMA+0x1b8>
 80062b4:	e013      	b.n	80062de <HAL_I2C_Mem_Read_DMA+0x18a>
      hi2c->State     = HAL_I2C_STATE_READY;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2241      	movs	r2, #65	@ 0x41
 80062ba:	2120      	movs	r1, #32
 80062bc:	5499      	strb	r1, [r3, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2242      	movs	r2, #66	@ 0x42
 80062c2:	2100      	movs	r1, #0
 80062c4:	5499      	strb	r1, [r3, r2]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062ca:	2280      	movs	r2, #128	@ 0x80
 80062cc:	431a      	orrs	r2, r3
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2240      	movs	r2, #64	@ 0x40
 80062d6:	2100      	movs	r1, #0
 80062d8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	e02b      	b.n	8006336 <HAL_I2C_Mem_Read_DMA+0x1e2>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80062de:	1dbb      	adds	r3, r7, #6
 80062e0:	881b      	ldrh	r3, [r3, #0]
 80062e2:	b2da      	uxtb	r2, r3
 80062e4:	230a      	movs	r3, #10
 80062e6:	18fb      	adds	r3, r7, r3
 80062e8:	8819      	ldrh	r1, [r3, #0]
 80062ea:	68f8      	ldr	r0, [r7, #12]
 80062ec:	4b18      	ldr	r3, [pc, #96]	@ (8006350 <HAL_I2C_Mem_Read_DMA+0x1fc>)
 80062ee:	9300      	str	r3, [sp, #0]
 80062f0:	2300      	movs	r3, #0
 80062f2:	f001 fc35 	bl	8007b60 <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2240      	movs	r2, #64	@ 0x40
 80062fa:	2100      	movs	r1, #0
 80062fc:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2101      	movs	r1, #1
 8006302:	0018      	movs	r0, r3
 8006304:	f001 fc66 	bl	8007bd4 <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8006308:	2300      	movs	r3, #0
 800630a:	e014      	b.n	8006336 <HAL_I2C_Mem_Read_DMA+0x1e2>
      hi2c->State     = HAL_I2C_STATE_READY;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2241      	movs	r2, #65	@ 0x41
 8006310:	2120      	movs	r1, #32
 8006312:	5499      	strb	r1, [r3, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2242      	movs	r2, #66	@ 0x42
 8006318:	2100      	movs	r1, #0
 800631a:	5499      	strb	r1, [r3, r2]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006320:	2210      	movs	r2, #16
 8006322:	431a      	orrs	r2, r3
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2240      	movs	r2, #64	@ 0x40
 800632c:	2100      	movs	r1, #0
 800632e:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	e000      	b.n	8006336 <HAL_I2C_Mem_Read_DMA+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006334:	2302      	movs	r3, #2
  }
}
 8006336:	0018      	movs	r0, r3
 8006338:	46bd      	mov	sp, r7
 800633a:	b006      	add	sp, #24
 800633c:	bdb0      	pop	{r4, r5, r7, pc}
 800633e:	46c0      	nop			@ (mov r8, r8)
 8006340:	ffff0000 	.word	0xffff0000
 8006344:	08006afd 	.word	0x08006afd
 8006348:	08007a51 	.word	0x08007a51
 800634c:	08007af1 	.word	0x08007af1
 8006350:	80002000 	.word	0x80002000

08006354 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	699b      	ldr	r3, [r3, #24]
 8006362:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006370:	2b00      	cmp	r3, #0
 8006372:	d005      	beq.n	8006380 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006378:	68ba      	ldr	r2, [r7, #8]
 800637a:	68f9      	ldr	r1, [r7, #12]
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	4798      	blx	r3
  }
}
 8006380:	46c0      	nop			@ (mov r8, r8)
 8006382:	46bd      	mov	sp, r7
 8006384:	b004      	add	sp, #16
 8006386:	bd80      	pop	{r7, pc}

08006388 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b086      	sub	sp, #24
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	699b      	ldr	r3, [r3, #24]
 8006396:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80063a0:	697a      	ldr	r2, [r7, #20]
 80063a2:	2380      	movs	r3, #128	@ 0x80
 80063a4:	005b      	lsls	r3, r3, #1
 80063a6:	4013      	ands	r3, r2
 80063a8:	d00e      	beq.n	80063c8 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	2280      	movs	r2, #128	@ 0x80
 80063ae:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80063b0:	d00a      	beq.n	80063c8 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063b6:	2201      	movs	r2, #1
 80063b8:	431a      	orrs	r2, r3
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	2280      	movs	r2, #128	@ 0x80
 80063c4:	0052      	lsls	r2, r2, #1
 80063c6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80063c8:	697a      	ldr	r2, [r7, #20]
 80063ca:	2380      	movs	r3, #128	@ 0x80
 80063cc:	00db      	lsls	r3, r3, #3
 80063ce:	4013      	ands	r3, r2
 80063d0:	d00e      	beq.n	80063f0 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	2280      	movs	r2, #128	@ 0x80
 80063d6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80063d8:	d00a      	beq.n	80063f0 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063de:	2208      	movs	r2, #8
 80063e0:	431a      	orrs	r2, r3
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2280      	movs	r2, #128	@ 0x80
 80063ec:	00d2      	lsls	r2, r2, #3
 80063ee:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80063f0:	697a      	ldr	r2, [r7, #20]
 80063f2:	2380      	movs	r3, #128	@ 0x80
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	4013      	ands	r3, r2
 80063f8:	d00e      	beq.n	8006418 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	2280      	movs	r2, #128	@ 0x80
 80063fe:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006400:	d00a      	beq.n	8006418 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006406:	2202      	movs	r2, #2
 8006408:	431a      	orrs	r2, r3
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	2280      	movs	r2, #128	@ 0x80
 8006414:	0092      	lsls	r2, r2, #2
 8006416:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800641c:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	220b      	movs	r2, #11
 8006422:	4013      	ands	r3, r2
 8006424:	d005      	beq.n	8006432 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	0011      	movs	r1, r2
 800642c:	0018      	movs	r0, r3
 800642e:	f001 f971 	bl	8007714 <I2C_ITError>
  }
}
 8006432:	46c0      	nop			@ (mov r8, r8)
 8006434:	46bd      	mov	sp, r7
 8006436:	b006      	add	sp, #24
 8006438:	bd80      	pop	{r7, pc}

0800643a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800643a:	b580      	push	{r7, lr}
 800643c:	b082      	sub	sp, #8
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006442:	46c0      	nop			@ (mov r8, r8)
 8006444:	46bd      	mov	sp, r7
 8006446:	b002      	add	sp, #8
 8006448:	bd80      	pop	{r7, pc}

0800644a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800644a:	b580      	push	{r7, lr}
 800644c:	b082      	sub	sp, #8
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006452:	46c0      	nop			@ (mov r8, r8)
 8006454:	46bd      	mov	sp, r7
 8006456:	b002      	add	sp, #8
 8006458:	bd80      	pop	{r7, pc}

0800645a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800645a:	b580      	push	{r7, lr}
 800645c:	b082      	sub	sp, #8
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]
 8006462:	0008      	movs	r0, r1
 8006464:	0011      	movs	r1, r2
 8006466:	1cfb      	adds	r3, r7, #3
 8006468:	1c02      	adds	r2, r0, #0
 800646a:	701a      	strb	r2, [r3, #0]
 800646c:	003b      	movs	r3, r7
 800646e:	1c0a      	adds	r2, r1, #0
 8006470:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006472:	46c0      	nop			@ (mov r8, r8)
 8006474:	46bd      	mov	sp, r7
 8006476:	b002      	add	sp, #8
 8006478:	bd80      	pop	{r7, pc}

0800647a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800647a:	b580      	push	{r7, lr}
 800647c:	b082      	sub	sp, #8
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8006482:	46c0      	nop			@ (mov r8, r8)
 8006484:	46bd      	mov	sp, r7
 8006486:	b002      	add	sp, #8
 8006488:	bd80      	pop	{r7, pc}

0800648a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800648a:	b580      	push	{r7, lr}
 800648c:	b082      	sub	sp, #8
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006492:	46c0      	nop			@ (mov r8, r8)
 8006494:	46bd      	mov	sp, r7
 8006496:	b002      	add	sp, #8
 8006498:	bd80      	pop	{r7, pc}
	...

0800649c <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800649c:	b590      	push	{r4, r7, lr}
 800649e:	b089      	sub	sp, #36	@ 0x24
 80064a0:	af02      	add	r7, sp, #8
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2240      	movs	r2, #64	@ 0x40
 80064b0:	5c9b      	ldrb	r3, [r3, r2]
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d101      	bne.n	80064ba <I2C_Master_ISR_IT+0x1e>
 80064b6:	2302      	movs	r3, #2
 80064b8:	e11d      	b.n	80066f6 <I2C_Master_ISR_IT+0x25a>
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2240      	movs	r2, #64	@ 0x40
 80064be:	2101      	movs	r1, #1
 80064c0:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	2210      	movs	r2, #16
 80064c6:	4013      	ands	r3, r2
 80064c8:	d012      	beq.n	80064f0 <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2210      	movs	r2, #16
 80064ce:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80064d0:	d00e      	beq.n	80064f0 <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	2210      	movs	r2, #16
 80064d8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064de:	2204      	movs	r2, #4
 80064e0:	431a      	orrs	r2, r3
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	0018      	movs	r0, r3
 80064ea:	f001 fa3e 	bl	800796a <I2C_Flush_TXDR>
 80064ee:	e0ef      	b.n	80066d0 <I2C_Master_ISR_IT+0x234>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	2204      	movs	r2, #4
 80064f4:	4013      	ands	r3, r2
 80064f6:	d021      	beq.n	800653c <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2204      	movs	r2, #4
 80064fc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80064fe:	d01d      	beq.n	800653c <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	2204      	movs	r2, #4
 8006504:	4393      	bics	r3, r2
 8006506:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006512:	b2d2      	uxtb	r2, r2
 8006514:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800651a:	1c5a      	adds	r2, r3, #1
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006524:	3b01      	subs	r3, #1
 8006526:	b29a      	uxth	r2, r3
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006530:	b29b      	uxth	r3, r3
 8006532:	3b01      	subs	r3, #1
 8006534:	b29a      	uxth	r2, r3
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800653a:	e0c9      	b.n	80066d0 <I2C_Master_ISR_IT+0x234>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	2240      	movs	r2, #64	@ 0x40
 8006540:	4013      	ands	r3, r2
 8006542:	d126      	bne.n	8006592 <I2C_Master_ISR_IT+0xf6>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	2202      	movs	r2, #2
 8006548:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800654a:	d022      	beq.n	8006592 <I2C_Master_ISR_IT+0xf6>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2202      	movs	r2, #2
 8006550:	4013      	ands	r3, r2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006552:	d01e      	beq.n	8006592 <I2C_Master_ISR_IT+0xf6>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006558:	b29b      	uxth	r3, r3
 800655a:	2b00      	cmp	r3, #0
 800655c:	d100      	bne.n	8006560 <I2C_Master_ISR_IT+0xc4>
 800655e:	e0b7      	b.n	80066d0 <I2C_Master_ISR_IT+0x234>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006564:	781a      	ldrb	r2, [r3, #0]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006570:	1c5a      	adds	r2, r3, #1
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800657a:	3b01      	subs	r3, #1
 800657c:	b29a      	uxth	r2, r3
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006586:	b29b      	uxth	r3, r3
 8006588:	3b01      	subs	r3, #1
 800658a:	b29a      	uxth	r2, r3
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8006590:	e09e      	b.n	80066d0 <I2C_Master_ISR_IT+0x234>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	2280      	movs	r2, #128	@ 0x80
 8006596:	4013      	ands	r3, r2
 8006598:	d100      	bne.n	800659c <I2C_Master_ISR_IT+0x100>
 800659a:	e069      	b.n	8006670 <I2C_Master_ISR_IT+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2240      	movs	r2, #64	@ 0x40
 80065a0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80065a2:	d065      	beq.n	8006670 <I2C_Master_ISR_IT+0x1d4>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d04a      	beq.n	8006644 <I2C_Master_ISR_IT+0x1a8>
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d146      	bne.n	8006644 <I2C_Master_ISR_IT+0x1a8>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	b29a      	uxth	r2, r3
 80065be:	2112      	movs	r1, #18
 80065c0:	187b      	adds	r3, r7, r1
 80065c2:	0592      	lsls	r2, r2, #22
 80065c4:	0d92      	lsrs	r2, r2, #22
 80065c6:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	2bff      	cmp	r3, #255	@ 0xff
 80065d0:	d910      	bls.n	80065f4 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	22ff      	movs	r2, #255	@ 0xff
 80065d6:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065dc:	b2da      	uxtb	r2, r3
 80065de:	2380      	movs	r3, #128	@ 0x80
 80065e0:	045c      	lsls	r4, r3, #17
 80065e2:	187b      	adds	r3, r7, r1
 80065e4:	8819      	ldrh	r1, [r3, #0]
 80065e6:	68f8      	ldr	r0, [r7, #12]
 80065e8:	2300      	movs	r3, #0
 80065ea:	9300      	str	r3, [sp, #0]
 80065ec:	0023      	movs	r3, r4
 80065ee:	f001 fab7 	bl	8007b60 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80065f2:	e03c      	b.n	800666e <I2C_Master_ISR_IT+0x1d2>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065f8:	b29a      	uxth	r2, r3
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006602:	4a3f      	ldr	r2, [pc, #252]	@ (8006700 <I2C_Master_ISR_IT+0x264>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d00e      	beq.n	8006626 <I2C_Master_ISR_IT+0x18a>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800660c:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8006612:	2312      	movs	r3, #18
 8006614:	18fb      	adds	r3, r7, r3
 8006616:	8819      	ldrh	r1, [r3, #0]
 8006618:	68f8      	ldr	r0, [r7, #12]
 800661a:	2300      	movs	r3, #0
 800661c:	9300      	str	r3, [sp, #0]
 800661e:	0023      	movs	r3, r4
 8006620:	f001 fa9e 	bl	8007b60 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006624:	e023      	b.n	800666e <I2C_Master_ISR_IT+0x1d2>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800662a:	b2da      	uxtb	r2, r3
 800662c:	2380      	movs	r3, #128	@ 0x80
 800662e:	049c      	lsls	r4, r3, #18
 8006630:	2312      	movs	r3, #18
 8006632:	18fb      	adds	r3, r7, r3
 8006634:	8819      	ldrh	r1, [r3, #0]
 8006636:	68f8      	ldr	r0, [r7, #12]
 8006638:	2300      	movs	r3, #0
 800663a:	9300      	str	r3, [sp, #0]
 800663c:	0023      	movs	r3, r4
 800663e:	f001 fa8f 	bl	8007b60 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006642:	e014      	b.n	800666e <I2C_Master_ISR_IT+0x1d2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	685a      	ldr	r2, [r3, #4]
 800664a:	2380      	movs	r3, #128	@ 0x80
 800664c:	049b      	lsls	r3, r3, #18
 800664e:	401a      	ands	r2, r3
 8006650:	2380      	movs	r3, #128	@ 0x80
 8006652:	049b      	lsls	r3, r3, #18
 8006654:	429a      	cmp	r2, r3
 8006656:	d004      	beq.n	8006662 <I2C_Master_ISR_IT+0x1c6>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	0018      	movs	r0, r3
 800665c:	f000 fd06 	bl	800706c <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006660:	e036      	b.n	80066d0 <I2C_Master_ISR_IT+0x234>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2140      	movs	r1, #64	@ 0x40
 8006666:	0018      	movs	r0, r3
 8006668:	f001 f854 	bl	8007714 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800666c:	e030      	b.n	80066d0 <I2C_Master_ISR_IT+0x234>
 800666e:	e02f      	b.n	80066d0 <I2C_Master_ISR_IT+0x234>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	2240      	movs	r2, #64	@ 0x40
 8006674:	4013      	ands	r3, r2
 8006676:	d02b      	beq.n	80066d0 <I2C_Master_ISR_IT+0x234>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2240      	movs	r2, #64	@ 0x40
 800667c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800667e:	d027      	beq.n	80066d0 <I2C_Master_ISR_IT+0x234>
  {
    if (hi2c->XferCount == 0U)
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006684:	b29b      	uxth	r3, r3
 8006686:	2b00      	cmp	r3, #0
 8006688:	d11d      	bne.n	80066c6 <I2C_Master_ISR_IT+0x22a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	685a      	ldr	r2, [r3, #4]
 8006690:	2380      	movs	r3, #128	@ 0x80
 8006692:	049b      	lsls	r3, r3, #18
 8006694:	401a      	ands	r2, r3
 8006696:	2380      	movs	r3, #128	@ 0x80
 8006698:	049b      	lsls	r3, r3, #18
 800669a:	429a      	cmp	r2, r3
 800669c:	d018      	beq.n	80066d0 <I2C_Master_ISR_IT+0x234>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066a2:	4a17      	ldr	r2, [pc, #92]	@ (8006700 <I2C_Master_ISR_IT+0x264>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d109      	bne.n	80066bc <I2C_Master_ISR_IT+0x220>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	685a      	ldr	r2, [r3, #4]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	2180      	movs	r1, #128	@ 0x80
 80066b4:	01c9      	lsls	r1, r1, #7
 80066b6:	430a      	orrs	r2, r1
 80066b8:	605a      	str	r2, [r3, #4]
 80066ba:	e009      	b.n	80066d0 <I2C_Master_ISR_IT+0x234>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	0018      	movs	r0, r3
 80066c0:	f000 fcd4 	bl	800706c <I2C_ITMasterSeqCplt>
 80066c4:	e004      	b.n	80066d0 <I2C_Master_ISR_IT+0x234>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2140      	movs	r1, #64	@ 0x40
 80066ca:	0018      	movs	r0, r3
 80066cc:	f001 f822 	bl	8007714 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	2220      	movs	r2, #32
 80066d4:	4013      	ands	r3, r2
 80066d6:	d009      	beq.n	80066ec <I2C_Master_ISR_IT+0x250>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2220      	movs	r2, #32
 80066dc:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80066de:	d005      	beq.n	80066ec <I2C_Master_ISR_IT+0x250>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80066e0:	697a      	ldr	r2, [r7, #20]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	0011      	movs	r1, r2
 80066e6:	0018      	movs	r0, r3
 80066e8:	f000 fd66 	bl	80071b8 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2240      	movs	r2, #64	@ 0x40
 80066f0:	2100      	movs	r1, #0
 80066f2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80066f4:	2300      	movs	r3, #0
}
 80066f6:	0018      	movs	r0, r3
 80066f8:	46bd      	mov	sp, r7
 80066fa:	b007      	add	sp, #28
 80066fc:	bd90      	pop	{r4, r7, pc}
 80066fe:	46c0      	nop			@ (mov r8, r8)
 8006700:	ffff0000 	.word	0xffff0000

08006704 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b086      	sub	sp, #24
 8006708:	af00      	add	r7, sp, #0
 800670a:	60f8      	str	r0, [r7, #12]
 800670c:	60b9      	str	r1, [r7, #8]
 800670e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006714:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2240      	movs	r2, #64	@ 0x40
 800671e:	5c9b      	ldrb	r3, [r3, r2]
 8006720:	2b01      	cmp	r3, #1
 8006722:	d101      	bne.n	8006728 <I2C_Slave_ISR_IT+0x24>
 8006724:	2302      	movs	r3, #2
 8006726:	e0e7      	b.n	80068f8 <I2C_Slave_ISR_IT+0x1f4>
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2240      	movs	r2, #64	@ 0x40
 800672c:	2101      	movs	r1, #1
 800672e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	2220      	movs	r2, #32
 8006734:	4013      	ands	r3, r2
 8006736:	d00a      	beq.n	800674e <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2220      	movs	r2, #32
 800673c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800673e:	d006      	beq.n	800674e <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8006740:	693a      	ldr	r2, [r7, #16]
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	0011      	movs	r1, r2
 8006746:	0018      	movs	r0, r3
 8006748:	f000 fe04 	bl	8007354 <I2C_ITSlaveCplt>
 800674c:	e0cf      	b.n	80068ee <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	2210      	movs	r2, #16
 8006752:	4013      	ands	r3, r2
 8006754:	d052      	beq.n	80067fc <I2C_Slave_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2210      	movs	r2, #16
 800675a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800675c:	d04e      	beq.n	80067fc <I2C_Slave_ISR_IT+0xf8>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006762:	b29b      	uxth	r3, r3
 8006764:	2b00      	cmp	r3, #0
 8006766:	d12d      	bne.n	80067c4 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2241      	movs	r2, #65	@ 0x41
 800676c:	5c9b      	ldrb	r3, [r3, r2]
 800676e:	b2db      	uxtb	r3, r3
 8006770:	2b28      	cmp	r3, #40	@ 0x28
 8006772:	d10b      	bne.n	800678c <I2C_Slave_ISR_IT+0x88>
 8006774:	697a      	ldr	r2, [r7, #20]
 8006776:	2380      	movs	r3, #128	@ 0x80
 8006778:	049b      	lsls	r3, r3, #18
 800677a:	429a      	cmp	r2, r3
 800677c:	d106      	bne.n	800678c <I2C_Slave_ISR_IT+0x88>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800677e:	693a      	ldr	r2, [r7, #16]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	0011      	movs	r1, r2
 8006784:	0018      	movs	r0, r3
 8006786:	f000 ff6d 	bl	8007664 <I2C_ITListenCplt>
 800678a:	e036      	b.n	80067fa <I2C_Slave_ISR_IT+0xf6>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2241      	movs	r2, #65	@ 0x41
 8006790:	5c9b      	ldrb	r3, [r3, r2]
 8006792:	b2db      	uxtb	r3, r3
 8006794:	2b29      	cmp	r3, #41	@ 0x29
 8006796:	d110      	bne.n	80067ba <I2C_Slave_ISR_IT+0xb6>
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	4a59      	ldr	r2, [pc, #356]	@ (8006900 <I2C_Slave_ISR_IT+0x1fc>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d00c      	beq.n	80067ba <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	2210      	movs	r2, #16
 80067a6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	0018      	movs	r0, r3
 80067ac:	f001 f8dd 	bl	800796a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	0018      	movs	r0, r3
 80067b4:	f000 fc9c 	bl	80070f0 <I2C_ITSlaveSeqCplt>
 80067b8:	e01f      	b.n	80067fa <I2C_Slave_ISR_IT+0xf6>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	2210      	movs	r2, #16
 80067c0:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80067c2:	e091      	b.n	80068e8 <I2C_Slave_ISR_IT+0x1e4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	2210      	movs	r2, #16
 80067ca:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067d0:	2204      	movs	r2, #4
 80067d2:	431a      	orrs	r2, r3
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d005      	beq.n	80067ea <I2C_Slave_ISR_IT+0xe6>
 80067de:	697a      	ldr	r2, [r7, #20]
 80067e0:	2380      	movs	r3, #128	@ 0x80
 80067e2:	045b      	lsls	r3, r3, #17
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d000      	beq.n	80067ea <I2C_Slave_ISR_IT+0xe6>
 80067e8:	e07e      	b.n	80068e8 <I2C_Slave_ISR_IT+0x1e4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	0011      	movs	r1, r2
 80067f2:	0018      	movs	r0, r3
 80067f4:	f000 ff8e 	bl	8007714 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80067f8:	e076      	b.n	80068e8 <I2C_Slave_ISR_IT+0x1e4>
 80067fa:	e075      	b.n	80068e8 <I2C_Slave_ISR_IT+0x1e4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	2204      	movs	r2, #4
 8006800:	4013      	ands	r3, r2
 8006802:	d02f      	beq.n	8006864 <I2C_Slave_ISR_IT+0x160>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2204      	movs	r2, #4
 8006808:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800680a:	d02b      	beq.n	8006864 <I2C_Slave_ISR_IT+0x160>
  {
    if (hi2c->XferCount > 0U)
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006810:	b29b      	uxth	r3, r3
 8006812:	2b00      	cmp	r3, #0
 8006814:	d018      	beq.n	8006848 <I2C_Slave_ISR_IT+0x144>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006820:	b2d2      	uxtb	r2, r2
 8006822:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006828:	1c5a      	adds	r2, r3, #1
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006832:	3b01      	subs	r3, #1
 8006834:	b29a      	uxth	r2, r3
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800683e:	b29b      	uxth	r3, r3
 8006840:	3b01      	subs	r3, #1
 8006842:	b29a      	uxth	r2, r3
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800684c:	b29b      	uxth	r3, r3
 800684e:	2b00      	cmp	r3, #0
 8006850:	d14c      	bne.n	80068ec <I2C_Slave_ISR_IT+0x1e8>
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	4a2a      	ldr	r2, [pc, #168]	@ (8006900 <I2C_Slave_ISR_IT+0x1fc>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d048      	beq.n	80068ec <I2C_Slave_ISR_IT+0x1e8>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	0018      	movs	r0, r3
 800685e:	f000 fc47 	bl	80070f0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8006862:	e043      	b.n	80068ec <I2C_Slave_ISR_IT+0x1e8>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	2208      	movs	r2, #8
 8006868:	4013      	ands	r3, r2
 800686a:	d00a      	beq.n	8006882 <I2C_Slave_ISR_IT+0x17e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2208      	movs	r2, #8
 8006870:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006872:	d006      	beq.n	8006882 <I2C_Slave_ISR_IT+0x17e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8006874:	693a      	ldr	r2, [r7, #16]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	0011      	movs	r1, r2
 800687a:	0018      	movs	r0, r3
 800687c:	f000 fb52 	bl	8006f24 <I2C_ITAddrCplt>
 8006880:	e035      	b.n	80068ee <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	2202      	movs	r2, #2
 8006886:	4013      	ands	r3, r2
 8006888:	d031      	beq.n	80068ee <I2C_Slave_ISR_IT+0x1ea>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2202      	movs	r2, #2
 800688e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006890:	d02d      	beq.n	80068ee <I2C_Slave_ISR_IT+0x1ea>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006896:	b29b      	uxth	r3, r3
 8006898:	2b00      	cmp	r3, #0
 800689a:	d018      	beq.n	80068ce <I2C_Slave_ISR_IT+0x1ca>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068a0:	781a      	ldrb	r2, [r3, #0]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ac:	1c5a      	adds	r2, r3, #1
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	3b01      	subs	r3, #1
 80068ba:	b29a      	uxth	r2, r3
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068c4:	3b01      	subs	r3, #1
 80068c6:	b29a      	uxth	r2, r3
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	851a      	strh	r2, [r3, #40]	@ 0x28
 80068cc:	e00f      	b.n	80068ee <I2C_Slave_ISR_IT+0x1ea>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80068ce:	697a      	ldr	r2, [r7, #20]
 80068d0:	2380      	movs	r3, #128	@ 0x80
 80068d2:	045b      	lsls	r3, r3, #17
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d002      	beq.n	80068de <I2C_Slave_ISR_IT+0x1da>
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d107      	bne.n	80068ee <I2C_Slave_ISR_IT+0x1ea>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	0018      	movs	r0, r3
 80068e2:	f000 fc05 	bl	80070f0 <I2C_ITSlaveSeqCplt>
 80068e6:	e002      	b.n	80068ee <I2C_Slave_ISR_IT+0x1ea>
    if (hi2c->XferCount == 0U)
 80068e8:	46c0      	nop			@ (mov r8, r8)
 80068ea:	e000      	b.n	80068ee <I2C_Slave_ISR_IT+0x1ea>
    if ((hi2c->XferCount == 0U) && \
 80068ec:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2240      	movs	r2, #64	@ 0x40
 80068f2:	2100      	movs	r1, #0
 80068f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80068f6:	2300      	movs	r3, #0
}
 80068f8:	0018      	movs	r0, r3
 80068fa:	46bd      	mov	sp, r7
 80068fc:	b006      	add	sp, #24
 80068fe:	bd80      	pop	{r7, pc}
 8006900:	ffff0000 	.word	0xffff0000

08006904 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8006904:	b590      	push	{r4, r7, lr}
 8006906:	b089      	sub	sp, #36	@ 0x24
 8006908:	af02      	add	r7, sp, #8
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2240      	movs	r2, #64	@ 0x40
 8006914:	5c9b      	ldrb	r3, [r3, r2]
 8006916:	2b01      	cmp	r3, #1
 8006918:	d101      	bne.n	800691e <I2C_Master_ISR_DMA+0x1a>
 800691a:	2302      	movs	r3, #2
 800691c:	e0e7      	b.n	8006aee <I2C_Master_ISR_DMA+0x1ea>
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2240      	movs	r2, #64	@ 0x40
 8006922:	2101      	movs	r1, #1
 8006924:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	2210      	movs	r2, #16
 800692a:	4013      	ands	r3, r2
 800692c:	d017      	beq.n	800695e <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2210      	movs	r2, #16
 8006932:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006934:	d013      	beq.n	800695e <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	2210      	movs	r2, #16
 800693c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006942:	2204      	movs	r2, #4
 8006944:	431a      	orrs	r2, r3
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2120      	movs	r1, #32
 800694e:	0018      	movs	r0, r3
 8006950:	f001 f940 	bl	8007bd4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	0018      	movs	r0, r3
 8006958:	f001 f807 	bl	800796a <I2C_Flush_TXDR>
 800695c:	e0c2      	b.n	8006ae4 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	2280      	movs	r2, #128	@ 0x80
 8006962:	4013      	ands	r3, r2
 8006964:	d100      	bne.n	8006968 <I2C_Master_ISR_DMA+0x64>
 8006966:	e07c      	b.n	8006a62 <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2240      	movs	r2, #64	@ 0x40
 800696c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800696e:	d100      	bne.n	8006972 <I2C_Master_ISR_DMA+0x6e>
 8006970:	e077      	b.n	8006a62 <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	2140      	movs	r1, #64	@ 0x40
 800697e:	438a      	bics	r2, r1
 8006980:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006986:	b29b      	uxth	r3, r3
 8006988:	2b00      	cmp	r3, #0
 800698a:	d055      	beq.n	8006a38 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	b29a      	uxth	r2, r3
 8006994:	2312      	movs	r3, #18
 8006996:	18fb      	adds	r3, r7, r3
 8006998:	0592      	lsls	r2, r2, #22
 800699a:	0d92      	lsrs	r2, r2, #22
 800699c:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	2bff      	cmp	r3, #255	@ 0xff
 80069a6:	d906      	bls.n	80069b6 <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	22ff      	movs	r2, #255	@ 0xff
 80069ac:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 80069ae:	2380      	movs	r3, #128	@ 0x80
 80069b0:	045b      	lsls	r3, r3, #17
 80069b2:	617b      	str	r3, [r7, #20]
 80069b4:	e010      	b.n	80069d8 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069ba:	b29a      	uxth	r2, r3
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069c4:	4a4c      	ldr	r2, [pc, #304]	@ (8006af8 <I2C_Master_ISR_DMA+0x1f4>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d003      	beq.n	80069d2 <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069ce:	617b      	str	r3, [r7, #20]
 80069d0:	e002      	b.n	80069d8 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80069d2:	2380      	movs	r3, #128	@ 0x80
 80069d4:	049b      	lsls	r3, r3, #18
 80069d6:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069dc:	b2da      	uxtb	r2, r3
 80069de:	697c      	ldr	r4, [r7, #20]
 80069e0:	2312      	movs	r3, #18
 80069e2:	18fb      	adds	r3, r7, r3
 80069e4:	8819      	ldrh	r1, [r3, #0]
 80069e6:	68f8      	ldr	r0, [r7, #12]
 80069e8:	2300      	movs	r3, #0
 80069ea:	9300      	str	r3, [sp, #0]
 80069ec:	0023      	movs	r3, r4
 80069ee:	f001 f8b7 	bl	8007b60 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069f6:	b29a      	uxth	r2, r3
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069fc:	1ad3      	subs	r3, r2, r3
 80069fe:	b29a      	uxth	r2, r3
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2241      	movs	r2, #65	@ 0x41
 8006a08:	5c9b      	ldrb	r3, [r3, r2]
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	2b22      	cmp	r3, #34	@ 0x22
 8006a0e:	d109      	bne.n	8006a24 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	2180      	movs	r1, #128	@ 0x80
 8006a1c:	0209      	lsls	r1, r1, #8
 8006a1e:	430a      	orrs	r2, r1
 8006a20:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006a22:	e05f      	b.n	8006ae4 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	2180      	movs	r1, #128	@ 0x80
 8006a30:	01c9      	lsls	r1, r1, #7
 8006a32:	430a      	orrs	r2, r1
 8006a34:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006a36:	e055      	b.n	8006ae4 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	685a      	ldr	r2, [r3, #4]
 8006a3e:	2380      	movs	r3, #128	@ 0x80
 8006a40:	049b      	lsls	r3, r3, #18
 8006a42:	401a      	ands	r2, r3
 8006a44:	2380      	movs	r3, #128	@ 0x80
 8006a46:	049b      	lsls	r3, r3, #18
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d004      	beq.n	8006a56 <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	0018      	movs	r0, r3
 8006a50:	f000 fb0c 	bl	800706c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8006a54:	e046      	b.n	8006ae4 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2140      	movs	r1, #64	@ 0x40
 8006a5a:	0018      	movs	r0, r3
 8006a5c:	f000 fe5a 	bl	8007714 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006a60:	e040      	b.n	8006ae4 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	2240      	movs	r2, #64	@ 0x40
 8006a66:	4013      	ands	r3, r2
 8006a68:	d02c      	beq.n	8006ac4 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2240      	movs	r2, #64	@ 0x40
 8006a6e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006a70:	d028      	beq.n	8006ac4 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d11d      	bne.n	8006ab8 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	685a      	ldr	r2, [r3, #4]
 8006a82:	2380      	movs	r3, #128	@ 0x80
 8006a84:	049b      	lsls	r3, r3, #18
 8006a86:	401a      	ands	r2, r3
 8006a88:	2380      	movs	r3, #128	@ 0x80
 8006a8a:	049b      	lsls	r3, r3, #18
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d028      	beq.n	8006ae2 <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a94:	4a18      	ldr	r2, [pc, #96]	@ (8006af8 <I2C_Master_ISR_DMA+0x1f4>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d109      	bne.n	8006aae <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	685a      	ldr	r2, [r3, #4]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	2180      	movs	r1, #128	@ 0x80
 8006aa6:	01c9      	lsls	r1, r1, #7
 8006aa8:	430a      	orrs	r2, r1
 8006aaa:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8006aac:	e019      	b.n	8006ae2 <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	0018      	movs	r0, r3
 8006ab2:	f000 fadb 	bl	800706c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8006ab6:	e014      	b.n	8006ae2 <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2140      	movs	r1, #64	@ 0x40
 8006abc:	0018      	movs	r0, r3
 8006abe:	f000 fe29 	bl	8007714 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006ac2:	e00e      	b.n	8006ae2 <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	2220      	movs	r2, #32
 8006ac8:	4013      	ands	r3, r2
 8006aca:	d00b      	beq.n	8006ae4 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2220      	movs	r2, #32
 8006ad0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006ad2:	d007      	beq.n	8006ae4 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006ad4:	68ba      	ldr	r2, [r7, #8]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	0011      	movs	r1, r2
 8006ada:	0018      	movs	r0, r3
 8006adc:	f000 fb6c 	bl	80071b8 <I2C_ITMasterCplt>
 8006ae0:	e000      	b.n	8006ae4 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 8006ae2:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2240      	movs	r2, #64	@ 0x40
 8006ae8:	2100      	movs	r1, #0
 8006aea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006aec:	2300      	movs	r3, #0
}
 8006aee:	0018      	movs	r0, r3
 8006af0:	46bd      	mov	sp, r7
 8006af2:	b007      	add	sp, #28
 8006af4:	bd90      	pop	{r4, r7, pc}
 8006af6:	46c0      	nop			@ (mov r8, r8)
 8006af8:	ffff0000 	.word	0xffff0000

08006afc <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8006afc:	b590      	push	{r4, r7, lr}
 8006afe:	b089      	sub	sp, #36	@ 0x24
 8006b00:	af02      	add	r7, sp, #8
 8006b02:	60f8      	str	r0, [r7, #12]
 8006b04:	60b9      	str	r1, [r7, #8]
 8006b06:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8006b08:	4b90      	ldr	r3, [pc, #576]	@ (8006d4c <I2C_Mem_ISR_DMA+0x250>)
 8006b0a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2240      	movs	r2, #64	@ 0x40
 8006b10:	5c9b      	ldrb	r3, [r3, r2]
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d101      	bne.n	8006b1a <I2C_Mem_ISR_DMA+0x1e>
 8006b16:	2302      	movs	r3, #2
 8006b18:	e113      	b.n	8006d42 <I2C_Mem_ISR_DMA+0x246>
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2240      	movs	r2, #64	@ 0x40
 8006b1e:	2101      	movs	r1, #1
 8006b20:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	2210      	movs	r2, #16
 8006b26:	4013      	ands	r3, r2
 8006b28:	d017      	beq.n	8006b5a <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2210      	movs	r2, #16
 8006b2e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006b30:	d013      	beq.n	8006b5a <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	2210      	movs	r2, #16
 8006b38:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b3e:	2204      	movs	r2, #4
 8006b40:	431a      	orrs	r2, r3
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2120      	movs	r1, #32
 8006b4a:	0018      	movs	r0, r3
 8006b4c:	f001 f842 	bl	8007bd4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	0018      	movs	r0, r3
 8006b54:	f000 ff09 	bl	800796a <I2C_Flush_TXDR>
 8006b58:	e0ee      	b.n	8006d38 <I2C_Mem_ISR_DMA+0x23c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	2202      	movs	r2, #2
 8006b5e:	4013      	ands	r3, r2
 8006b60:	d00d      	beq.n	8006b7e <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2202      	movs	r2, #2
 8006b66:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006b68:	d009      	beq.n	8006b7e <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	68fa      	ldr	r2, [r7, #12]
 8006b70:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006b72:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2201      	movs	r2, #1
 8006b78:	4252      	negs	r2, r2
 8006b7a:	651a      	str	r2, [r3, #80]	@ 0x50
 8006b7c:	e0dc      	b.n	8006d38 <I2C_Mem_ISR_DMA+0x23c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	2280      	movs	r2, #128	@ 0x80
 8006b82:	4013      	ands	r3, r2
 8006b84:	d063      	beq.n	8006c4e <I2C_Mem_ISR_DMA+0x152>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2240      	movs	r2, #64	@ 0x40
 8006b8a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006b8c:	d05f      	beq.n	8006c4e <I2C_Mem_ISR_DMA+0x152>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2101      	movs	r1, #1
 8006b92:	0018      	movs	r0, r3
 8006b94:	f001 f8a8 	bl	8007ce8 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2110      	movs	r1, #16
 8006b9c:	0018      	movs	r0, r3
 8006b9e:	f001 f819 	bl	8007bd4 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d04a      	beq.n	8006c42 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	2bff      	cmp	r3, #255	@ 0xff
 8006bb4:	d910      	bls.n	8006bd8 <I2C_Mem_ISR_DMA+0xdc>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	22ff      	movs	r2, #255	@ 0xff
 8006bba:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bc0:	b299      	uxth	r1, r3
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bc6:	b2da      	uxtb	r2, r3
 8006bc8:	2380      	movs	r3, #128	@ 0x80
 8006bca:	045b      	lsls	r3, r3, #17
 8006bcc:	68f8      	ldr	r0, [r7, #12]
 8006bce:	2400      	movs	r4, #0
 8006bd0:	9400      	str	r4, [sp, #0]
 8006bd2:	f000 ffc5 	bl	8007b60 <I2C_TransferConfig>
 8006bd6:	e011      	b.n	8006bfc <I2C_Mem_ISR_DMA+0x100>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bdc:	b29a      	uxth	r2, r3
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006be6:	b299      	uxth	r1, r3
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bec:	b2da      	uxtb	r2, r3
 8006bee:	2380      	movs	r3, #128	@ 0x80
 8006bf0:	049b      	lsls	r3, r3, #18
 8006bf2:	68f8      	ldr	r0, [r7, #12]
 8006bf4:	2400      	movs	r4, #0
 8006bf6:	9400      	str	r4, [sp, #0]
 8006bf8:	f000 ffb2 	bl	8007b60 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c00:	b29a      	uxth	r2, r3
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c06:	1ad3      	subs	r3, r2, r3
 8006c08:	b29a      	uxth	r2, r3
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2241      	movs	r2, #65	@ 0x41
 8006c12:	5c9b      	ldrb	r3, [r3, r2]
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	2b22      	cmp	r3, #34	@ 0x22
 8006c18:	d109      	bne.n	8006c2e <I2C_Mem_ISR_DMA+0x132>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	2180      	movs	r1, #128	@ 0x80
 8006c26:	0209      	lsls	r1, r1, #8
 8006c28:	430a      	orrs	r2, r1
 8006c2a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006c2c:	e084      	b.n	8006d38 <I2C_Mem_ISR_DMA+0x23c>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	2180      	movs	r1, #128	@ 0x80
 8006c3a:	01c9      	lsls	r1, r1, #7
 8006c3c:	430a      	orrs	r2, r1
 8006c3e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006c40:	e07a      	b.n	8006d38 <I2C_Mem_ISR_DMA+0x23c>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2140      	movs	r1, #64	@ 0x40
 8006c46:	0018      	movs	r0, r3
 8006c48:	f000 fd64 	bl	8007714 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006c4c:	e074      	b.n	8006d38 <I2C_Mem_ISR_DMA+0x23c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	2240      	movs	r2, #64	@ 0x40
 8006c52:	4013      	ands	r3, r2
 8006c54:	d062      	beq.n	8006d1c <I2C_Mem_ISR_DMA+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2240      	movs	r2, #64	@ 0x40
 8006c5a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006c5c:	d05e      	beq.n	8006d1c <I2C_Mem_ISR_DMA+0x220>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2101      	movs	r1, #1
 8006c62:	0018      	movs	r0, r3
 8006c64:	f001 f840 	bl	8007ce8 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2110      	movs	r1, #16
 8006c6c:	0018      	movs	r0, r3
 8006c6e:	f000 ffb1 	bl	8007bd4 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2241      	movs	r2, #65	@ 0x41
 8006c76:	5c9b      	ldrb	r3, [r3, r2]
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	2b22      	cmp	r3, #34	@ 0x22
 8006c7c:	d101      	bne.n	8006c82 <I2C_Mem_ISR_DMA+0x186>
    {
      direction = I2C_GENERATE_START_READ;
 8006c7e:	4b34      	ldr	r3, [pc, #208]	@ (8006d50 <I2C_Mem_ISR_DMA+0x254>)
 8006c80:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	2bff      	cmp	r3, #255	@ 0xff
 8006c8a:	d911      	bls.n	8006cb0 <I2C_Mem_ISR_DMA+0x1b4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	22ff      	movs	r2, #255	@ 0xff
 8006c90:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c96:	b299      	uxth	r1, r3
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c9c:	b2da      	uxtb	r2, r3
 8006c9e:	2380      	movs	r3, #128	@ 0x80
 8006ca0:	045c      	lsls	r4, r3, #17
 8006ca2:	68f8      	ldr	r0, [r7, #12]
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	9300      	str	r3, [sp, #0]
 8006ca8:	0023      	movs	r3, r4
 8006caa:	f000 ff59 	bl	8007b60 <I2C_TransferConfig>
 8006cae:	e012      	b.n	8006cd6 <I2C_Mem_ISR_DMA+0x1da>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cb4:	b29a      	uxth	r2, r3
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006cbe:	b299      	uxth	r1, r3
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cc4:	b2da      	uxtb	r2, r3
 8006cc6:	2380      	movs	r3, #128	@ 0x80
 8006cc8:	049c      	lsls	r4, r3, #18
 8006cca:	68f8      	ldr	r0, [r7, #12]
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	9300      	str	r3, [sp, #0]
 8006cd0:	0023      	movs	r3, r4
 8006cd2:	f000 ff45 	bl	8007b60 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cda:	b29a      	uxth	r2, r3
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ce0:	1ad3      	subs	r3, r2, r3
 8006ce2:	b29a      	uxth	r2, r3
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2241      	movs	r2, #65	@ 0x41
 8006cec:	5c9b      	ldrb	r3, [r3, r2]
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	2b22      	cmp	r3, #34	@ 0x22
 8006cf2:	d109      	bne.n	8006d08 <I2C_Mem_ISR_DMA+0x20c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	2180      	movs	r1, #128	@ 0x80
 8006d00:	0209      	lsls	r1, r1, #8
 8006d02:	430a      	orrs	r2, r1
 8006d04:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006d06:	e017      	b.n	8006d38 <I2C_Mem_ISR_DMA+0x23c>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	2180      	movs	r1, #128	@ 0x80
 8006d14:	01c9      	lsls	r1, r1, #7
 8006d16:	430a      	orrs	r2, r1
 8006d18:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006d1a:	e00d      	b.n	8006d38 <I2C_Mem_ISR_DMA+0x23c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	2220      	movs	r2, #32
 8006d20:	4013      	ands	r3, r2
 8006d22:	d009      	beq.n	8006d38 <I2C_Mem_ISR_DMA+0x23c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2220      	movs	r2, #32
 8006d28:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006d2a:	d005      	beq.n	8006d38 <I2C_Mem_ISR_DMA+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006d2c:	68ba      	ldr	r2, [r7, #8]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	0011      	movs	r1, r2
 8006d32:	0018      	movs	r0, r3
 8006d34:	f000 fa40 	bl	80071b8 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2240      	movs	r2, #64	@ 0x40
 8006d3c:	2100      	movs	r1, #0
 8006d3e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006d40:	2300      	movs	r3, #0
}
 8006d42:	0018      	movs	r0, r3
 8006d44:	46bd      	mov	sp, r7
 8006d46:	b007      	add	sp, #28
 8006d48:	bd90      	pop	{r4, r7, pc}
 8006d4a:	46c0      	nop			@ (mov r8, r8)
 8006d4c:	80002000 	.word	0x80002000
 8006d50:	80002400 	.word	0x80002400

08006d54 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b088      	sub	sp, #32
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	60b9      	str	r1, [r7, #8]
 8006d5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d64:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8006d66:	2300      	movs	r3, #0
 8006d68:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2240      	movs	r2, #64	@ 0x40
 8006d6e:	5c9b      	ldrb	r3, [r3, r2]
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d101      	bne.n	8006d78 <I2C_Slave_ISR_DMA+0x24>
 8006d74:	2302      	movs	r3, #2
 8006d76:	e0ce      	b.n	8006f16 <I2C_Slave_ISR_DMA+0x1c2>
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2240      	movs	r2, #64	@ 0x40
 8006d7c:	2101      	movs	r1, #1
 8006d7e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	2220      	movs	r2, #32
 8006d84:	4013      	ands	r3, r2
 8006d86:	d00a      	beq.n	8006d9e <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2220      	movs	r2, #32
 8006d8c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006d8e:	d006      	beq.n	8006d9e <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8006d90:	68ba      	ldr	r2, [r7, #8]
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	0011      	movs	r1, r2
 8006d96:	0018      	movs	r0, r3
 8006d98:	f000 fadc 	bl	8007354 <I2C_ITSlaveCplt>
 8006d9c:	e0b6      	b.n	8006f0c <I2C_Slave_ISR_DMA+0x1b8>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	2210      	movs	r2, #16
 8006da2:	4013      	ands	r3, r2
 8006da4:	d100      	bne.n	8006da8 <I2C_Slave_ISR_DMA+0x54>
 8006da6:	e0a3      	b.n	8006ef0 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2210      	movs	r2, #16
 8006dac:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006dae:	d100      	bne.n	8006db2 <I2C_Slave_ISR_DMA+0x5e>
 8006db0:	e09e      	b.n	8006ef0 <I2C_Slave_ISR_DMA+0x19c>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	2380      	movs	r3, #128	@ 0x80
 8006db6:	01db      	lsls	r3, r3, #7
 8006db8:	4013      	ands	r3, r2
 8006dba:	d105      	bne.n	8006dc8 <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8006dbc:	687a      	ldr	r2, [r7, #4]
 8006dbe:	2380      	movs	r3, #128	@ 0x80
 8006dc0:	021b      	lsls	r3, r3, #8
 8006dc2:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006dc4:	d100      	bne.n	8006dc8 <I2C_Slave_ISR_DMA+0x74>
 8006dc6:	e08c      	b.n	8006ee2 <I2C_Slave_ISR_DMA+0x18e>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d00c      	beq.n	8006dea <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	2380      	movs	r3, #128	@ 0x80
 8006dd4:	021b      	lsls	r3, r3, #8
 8006dd6:	4013      	ands	r3, r2
 8006dd8:	d007      	beq.n	8006dea <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d101      	bne.n	8006dea <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 8006de6:	2301      	movs	r3, #1
 8006de8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d00c      	beq.n	8006e0c <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	2380      	movs	r3, #128	@ 0x80
 8006df6:	01db      	lsls	r3, r3, #7
 8006df8:	4013      	ands	r3, r2
 8006dfa:	d007      	beq.n	8006e0c <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d101      	bne.n	8006e0c <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8006e0c:	69fb      	ldr	r3, [r7, #28]
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	d12d      	bne.n	8006e6e <I2C_Slave_ISR_DMA+0x11a>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2241      	movs	r2, #65	@ 0x41
 8006e16:	5c9b      	ldrb	r3, [r3, r2]
 8006e18:	b2db      	uxtb	r3, r3
 8006e1a:	2b28      	cmp	r3, #40	@ 0x28
 8006e1c:	d10b      	bne.n	8006e36 <I2C_Slave_ISR_DMA+0xe2>
 8006e1e:	69ba      	ldr	r2, [r7, #24]
 8006e20:	2380      	movs	r3, #128	@ 0x80
 8006e22:	049b      	lsls	r3, r3, #18
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d106      	bne.n	8006e36 <I2C_Slave_ISR_DMA+0xe2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8006e28:	68ba      	ldr	r2, [r7, #8]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	0011      	movs	r1, r2
 8006e2e:	0018      	movs	r0, r3
 8006e30:	f000 fc18 	bl	8007664 <I2C_ITListenCplt>
 8006e34:	e054      	b.n	8006ee0 <I2C_Slave_ISR_DMA+0x18c>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2241      	movs	r2, #65	@ 0x41
 8006e3a:	5c9b      	ldrb	r3, [r3, r2]
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	2b29      	cmp	r3, #41	@ 0x29
 8006e40:	d110      	bne.n	8006e64 <I2C_Slave_ISR_DMA+0x110>
 8006e42:	69bb      	ldr	r3, [r7, #24]
 8006e44:	4a36      	ldr	r2, [pc, #216]	@ (8006f20 <I2C_Slave_ISR_DMA+0x1cc>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d00c      	beq.n	8006e64 <I2C_Slave_ISR_DMA+0x110>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	2210      	movs	r2, #16
 8006e50:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	0018      	movs	r0, r3
 8006e56:	f000 fd88 	bl	800796a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	0018      	movs	r0, r3
 8006e5e:	f000 f947 	bl	80070f0 <I2C_ITSlaveSeqCplt>
 8006e62:	e03d      	b.n	8006ee0 <I2C_Slave_ISR_DMA+0x18c>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	2210      	movs	r2, #16
 8006e6a:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8006e6c:	e03e      	b.n	8006eec <I2C_Slave_ISR_DMA+0x198>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	2210      	movs	r2, #16
 8006e74:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e7a:	2204      	movs	r2, #4
 8006e7c:	431a      	orrs	r2, r3
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8006e82:	2317      	movs	r3, #23
 8006e84:	18fb      	adds	r3, r7, r3
 8006e86:	68fa      	ldr	r2, [r7, #12]
 8006e88:	2141      	movs	r1, #65	@ 0x41
 8006e8a:	5c52      	ldrb	r2, [r2, r1]
 8006e8c:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006e8e:	69bb      	ldr	r3, [r7, #24]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d004      	beq.n	8006e9e <I2C_Slave_ISR_DMA+0x14a>
 8006e94:	69ba      	ldr	r2, [r7, #24]
 8006e96:	2380      	movs	r3, #128	@ 0x80
 8006e98:	045b      	lsls	r3, r3, #17
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d126      	bne.n	8006eec <I2C_Slave_ISR_DMA+0x198>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006e9e:	2217      	movs	r2, #23
 8006ea0:	18bb      	adds	r3, r7, r2
 8006ea2:	781b      	ldrb	r3, [r3, #0]
 8006ea4:	2b21      	cmp	r3, #33	@ 0x21
 8006ea6:	d003      	beq.n	8006eb0 <I2C_Slave_ISR_DMA+0x15c>
 8006ea8:	18bb      	adds	r3, r7, r2
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	2b29      	cmp	r3, #41	@ 0x29
 8006eae:	d103      	bne.n	8006eb8 <I2C_Slave_ISR_DMA+0x164>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2221      	movs	r2, #33	@ 0x21
 8006eb4:	631a      	str	r2, [r3, #48]	@ 0x30
 8006eb6:	e00b      	b.n	8006ed0 <I2C_Slave_ISR_DMA+0x17c>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006eb8:	2217      	movs	r2, #23
 8006eba:	18bb      	adds	r3, r7, r2
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	2b22      	cmp	r3, #34	@ 0x22
 8006ec0:	d003      	beq.n	8006eca <I2C_Slave_ISR_DMA+0x176>
 8006ec2:	18bb      	adds	r3, r7, r2
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ec8:	d102      	bne.n	8006ed0 <I2C_Slave_ISR_DMA+0x17c>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2222      	movs	r2, #34	@ 0x22
 8006ece:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	0011      	movs	r1, r2
 8006ed8:	0018      	movs	r0, r3
 8006eda:	f000 fc1b 	bl	8007714 <I2C_ITError>
      if (treatdmanack == 1U)
 8006ede:	e005      	b.n	8006eec <I2C_Slave_ISR_DMA+0x198>
 8006ee0:	e004      	b.n	8006eec <I2C_Slave_ISR_DMA+0x198>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	2210      	movs	r2, #16
 8006ee8:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006eea:	e00f      	b.n	8006f0c <I2C_Slave_ISR_DMA+0x1b8>
      if (treatdmanack == 1U)
 8006eec:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006eee:	e00d      	b.n	8006f0c <I2C_Slave_ISR_DMA+0x1b8>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	2208      	movs	r2, #8
 8006ef4:	4013      	ands	r3, r2
 8006ef6:	d009      	beq.n	8006f0c <I2C_Slave_ISR_DMA+0x1b8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2208      	movs	r2, #8
 8006efc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006efe:	d005      	beq.n	8006f0c <I2C_Slave_ISR_DMA+0x1b8>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8006f00:	68ba      	ldr	r2, [r7, #8]
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	0011      	movs	r1, r2
 8006f06:	0018      	movs	r0, r3
 8006f08:	f000 f80c 	bl	8006f24 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2240      	movs	r2, #64	@ 0x40
 8006f10:	2100      	movs	r1, #0
 8006f12:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006f14:	2300      	movs	r3, #0
}
 8006f16:	0018      	movs	r0, r3
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	b008      	add	sp, #32
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	46c0      	nop			@ (mov r8, r8)
 8006f20:	ffff0000 	.word	0xffff0000

08006f24 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006f24:	b5b0      	push	{r4, r5, r7, lr}
 8006f26:	b084      	sub	sp, #16
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2241      	movs	r2, #65	@ 0x41
 8006f32:	5c9b      	ldrb	r3, [r3, r2]
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	001a      	movs	r2, r3
 8006f38:	2328      	movs	r3, #40	@ 0x28
 8006f3a:	4013      	ands	r3, r2
 8006f3c:	2b28      	cmp	r3, #40	@ 0x28
 8006f3e:	d000      	beq.n	8006f42 <I2C_ITAddrCplt+0x1e>
 8006f40:	e088      	b.n	8007054 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	699b      	ldr	r3, [r3, #24]
 8006f48:	0c1b      	lsrs	r3, r3, #16
 8006f4a:	b2da      	uxtb	r2, r3
 8006f4c:	250f      	movs	r5, #15
 8006f4e:	197b      	adds	r3, r7, r5
 8006f50:	2101      	movs	r1, #1
 8006f52:	400a      	ands	r2, r1
 8006f54:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	699b      	ldr	r3, [r3, #24]
 8006f5c:	0c1b      	lsrs	r3, r3, #16
 8006f5e:	b29a      	uxth	r2, r3
 8006f60:	200c      	movs	r0, #12
 8006f62:	183b      	adds	r3, r7, r0
 8006f64:	21fe      	movs	r1, #254	@ 0xfe
 8006f66:	400a      	ands	r2, r1
 8006f68:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	b29a      	uxth	r2, r3
 8006f72:	240a      	movs	r4, #10
 8006f74:	193b      	adds	r3, r7, r4
 8006f76:	0592      	lsls	r2, r2, #22
 8006f78:	0d92      	lsrs	r2, r2, #22
 8006f7a:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	68db      	ldr	r3, [r3, #12]
 8006f82:	b29a      	uxth	r2, r3
 8006f84:	2308      	movs	r3, #8
 8006f86:	18fb      	adds	r3, r7, r3
 8006f88:	21fe      	movs	r1, #254	@ 0xfe
 8006f8a:	400a      	ands	r2, r1
 8006f8c:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	68db      	ldr	r3, [r3, #12]
 8006f92:	2b02      	cmp	r3, #2
 8006f94:	d148      	bne.n	8007028 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006f96:	0021      	movs	r1, r4
 8006f98:	187b      	adds	r3, r7, r1
 8006f9a:	881b      	ldrh	r3, [r3, #0]
 8006f9c:	09db      	lsrs	r3, r3, #7
 8006f9e:	b29a      	uxth	r2, r3
 8006fa0:	183b      	adds	r3, r7, r0
 8006fa2:	881b      	ldrh	r3, [r3, #0]
 8006fa4:	4053      	eors	r3, r2
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	001a      	movs	r2, r3
 8006faa:	2306      	movs	r3, #6
 8006fac:	4013      	ands	r3, r2
 8006fae:	d120      	bne.n	8006ff2 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8006fb0:	183b      	adds	r3, r7, r0
 8006fb2:	187a      	adds	r2, r7, r1
 8006fb4:	8812      	ldrh	r2, [r2, #0]
 8006fb6:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006fbc:	1c5a      	adds	r2, r3, #1
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006fc6:	2b02      	cmp	r3, #2
 8006fc8:	d14c      	bne.n	8007064 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	2208      	movs	r2, #8
 8006fd6:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2240      	movs	r2, #64	@ 0x40
 8006fdc:	2100      	movs	r1, #0
 8006fde:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006fe0:	183b      	adds	r3, r7, r0
 8006fe2:	881a      	ldrh	r2, [r3, #0]
 8006fe4:	197b      	adds	r3, r7, r5
 8006fe6:	7819      	ldrb	r1, [r3, #0]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	0018      	movs	r0, r3
 8006fec:	f7ff fa35 	bl	800645a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006ff0:	e038      	b.n	8007064 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8006ff2:	240c      	movs	r4, #12
 8006ff4:	193b      	adds	r3, r7, r4
 8006ff6:	2208      	movs	r2, #8
 8006ff8:	18ba      	adds	r2, r7, r2
 8006ffa:	8812      	ldrh	r2, [r2, #0]
 8006ffc:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006ffe:	2380      	movs	r3, #128	@ 0x80
 8007000:	021a      	lsls	r2, r3, #8
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	0011      	movs	r1, r2
 8007006:	0018      	movs	r0, r3
 8007008:	f000 fe6e 	bl	8007ce8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2240      	movs	r2, #64	@ 0x40
 8007010:	2100      	movs	r1, #0
 8007012:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007014:	193b      	adds	r3, r7, r4
 8007016:	881a      	ldrh	r2, [r3, #0]
 8007018:	230f      	movs	r3, #15
 800701a:	18fb      	adds	r3, r7, r3
 800701c:	7819      	ldrb	r1, [r3, #0]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	0018      	movs	r0, r3
 8007022:	f7ff fa1a 	bl	800645a <HAL_I2C_AddrCallback>
}
 8007026:	e01d      	b.n	8007064 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007028:	2380      	movs	r3, #128	@ 0x80
 800702a:	021a      	lsls	r2, r3, #8
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	0011      	movs	r1, r2
 8007030:	0018      	movs	r0, r3
 8007032:	f000 fe59 	bl	8007ce8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2240      	movs	r2, #64	@ 0x40
 800703a:	2100      	movs	r1, #0
 800703c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800703e:	230c      	movs	r3, #12
 8007040:	18fb      	adds	r3, r7, r3
 8007042:	881a      	ldrh	r2, [r3, #0]
 8007044:	230f      	movs	r3, #15
 8007046:	18fb      	adds	r3, r7, r3
 8007048:	7819      	ldrb	r1, [r3, #0]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	0018      	movs	r0, r3
 800704e:	f7ff fa04 	bl	800645a <HAL_I2C_AddrCallback>
}
 8007052:	e007      	b.n	8007064 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	2208      	movs	r2, #8
 800705a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2240      	movs	r2, #64	@ 0x40
 8007060:	2100      	movs	r1, #0
 8007062:	5499      	strb	r1, [r3, r2]
}
 8007064:	46c0      	nop			@ (mov r8, r8)
 8007066:	46bd      	mov	sp, r7
 8007068:	b004      	add	sp, #16
 800706a:	bdb0      	pop	{r4, r5, r7, pc}

0800706c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b082      	sub	sp, #8
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2242      	movs	r2, #66	@ 0x42
 8007078:	2100      	movs	r1, #0
 800707a:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2241      	movs	r2, #65	@ 0x41
 8007080:	5c9b      	ldrb	r3, [r3, r2]
 8007082:	b2db      	uxtb	r3, r3
 8007084:	2b21      	cmp	r3, #33	@ 0x21
 8007086:	d117      	bne.n	80070b8 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2241      	movs	r2, #65	@ 0x41
 800708c:	2120      	movs	r1, #32
 800708e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2211      	movs	r2, #17
 8007094:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2200      	movs	r2, #0
 800709a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2101      	movs	r1, #1
 80070a0:	0018      	movs	r0, r3
 80070a2:	f000 fe21 	bl	8007ce8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2240      	movs	r2, #64	@ 0x40
 80070aa:	2100      	movs	r1, #0
 80070ac:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	0018      	movs	r0, r3
 80070b2:	f7f9 f9bb 	bl	800042c <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80070b6:	e016      	b.n	80070e6 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2241      	movs	r2, #65	@ 0x41
 80070bc:	2120      	movs	r1, #32
 80070be:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2212      	movs	r2, #18
 80070c4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2200      	movs	r2, #0
 80070ca:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2102      	movs	r1, #2
 80070d0:	0018      	movs	r0, r3
 80070d2:	f000 fe09 	bl	8007ce8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2240      	movs	r2, #64	@ 0x40
 80070da:	2100      	movs	r1, #0
 80070dc:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	0018      	movs	r0, r3
 80070e2:	f7f9 f9b1 	bl	8000448 <HAL_I2C_MasterRxCpltCallback>
}
 80070e6:	46c0      	nop			@ (mov r8, r8)
 80070e8:	46bd      	mov	sp, r7
 80070ea:	b002      	add	sp, #8
 80070ec:	bd80      	pop	{r7, pc}
	...

080070f0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b084      	sub	sp, #16
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2242      	movs	r2, #66	@ 0x42
 8007104:	2100      	movs	r1, #0
 8007106:	5499      	strb	r1, [r3, r2]

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007108:	68fa      	ldr	r2, [r7, #12]
 800710a:	2380      	movs	r3, #128	@ 0x80
 800710c:	01db      	lsls	r3, r3, #7
 800710e:	4013      	ands	r3, r2
 8007110:	d008      	beq.n	8007124 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	681a      	ldr	r2, [r3, #0]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4924      	ldr	r1, [pc, #144]	@ (80071b0 <I2C_ITSlaveSeqCplt+0xc0>)
 800711e:	400a      	ands	r2, r1
 8007120:	601a      	str	r2, [r3, #0]
 8007122:	e00c      	b.n	800713e <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007124:	68fa      	ldr	r2, [r7, #12]
 8007126:	2380      	movs	r3, #128	@ 0x80
 8007128:	021b      	lsls	r3, r3, #8
 800712a:	4013      	ands	r3, r2
 800712c:	d007      	beq.n	800713e <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	681a      	ldr	r2, [r3, #0]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	491e      	ldr	r1, [pc, #120]	@ (80071b4 <I2C_ITSlaveSeqCplt+0xc4>)
 800713a:	400a      	ands	r2, r1
 800713c:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2241      	movs	r2, #65	@ 0x41
 8007142:	5c9b      	ldrb	r3, [r3, r2]
 8007144:	b2db      	uxtb	r3, r3
 8007146:	2b29      	cmp	r3, #41	@ 0x29
 8007148:	d114      	bne.n	8007174 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2241      	movs	r2, #65	@ 0x41
 800714e:	2128      	movs	r1, #40	@ 0x28
 8007150:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2221      	movs	r2, #33	@ 0x21
 8007156:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2101      	movs	r1, #1
 800715c:	0018      	movs	r0, r3
 800715e:	f000 fdc3 	bl	8007ce8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2240      	movs	r2, #64	@ 0x40
 8007166:	2100      	movs	r1, #0
 8007168:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	0018      	movs	r0, r3
 800716e:	f7ff f964 	bl	800643a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007172:	e019      	b.n	80071a8 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2241      	movs	r2, #65	@ 0x41
 8007178:	5c9b      	ldrb	r3, [r3, r2]
 800717a:	b2db      	uxtb	r3, r3
 800717c:	2b2a      	cmp	r3, #42	@ 0x2a
 800717e:	d113      	bne.n	80071a8 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2241      	movs	r2, #65	@ 0x41
 8007184:	2128      	movs	r1, #40	@ 0x28
 8007186:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2222      	movs	r2, #34	@ 0x22
 800718c:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2102      	movs	r1, #2
 8007192:	0018      	movs	r0, r3
 8007194:	f000 fda8 	bl	8007ce8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2240      	movs	r2, #64	@ 0x40
 800719c:	2100      	movs	r1, #0
 800719e:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	0018      	movs	r0, r3
 80071a4:	f7ff f951 	bl	800644a <HAL_I2C_SlaveRxCpltCallback>
}
 80071a8:	46c0      	nop			@ (mov r8, r8)
 80071aa:	46bd      	mov	sp, r7
 80071ac:	b004      	add	sp, #16
 80071ae:	bd80      	pop	{r7, pc}
 80071b0:	ffffbfff 	.word	0xffffbfff
 80071b4:	ffff7fff 	.word	0xffff7fff

080071b8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b086      	sub	sp, #24
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	2220      	movs	r2, #32
 80071cc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2241      	movs	r2, #65	@ 0x41
 80071d2:	5c9b      	ldrb	r3, [r3, r2]
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	2b21      	cmp	r3, #33	@ 0x21
 80071d8:	d108      	bne.n	80071ec <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2101      	movs	r1, #1
 80071de:	0018      	movs	r0, r3
 80071e0:	f000 fd82 	bl	8007ce8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2211      	movs	r2, #17
 80071e8:	631a      	str	r2, [r3, #48]	@ 0x30
 80071ea:	e00d      	b.n	8007208 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2241      	movs	r2, #65	@ 0x41
 80071f0:	5c9b      	ldrb	r3, [r3, r2]
 80071f2:	b2db      	uxtb	r3, r3
 80071f4:	2b22      	cmp	r3, #34	@ 0x22
 80071f6:	d107      	bne.n	8007208 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2102      	movs	r1, #2
 80071fc:	0018      	movs	r0, r3
 80071fe:	f000 fd73 	bl	8007ce8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2212      	movs	r2, #18
 8007206:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	685a      	ldr	r2, [r3, #4]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	494e      	ldr	r1, [pc, #312]	@ (800734c <I2C_ITMasterCplt+0x194>)
 8007214:	400a      	ands	r2, r1
 8007216:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	4a4b      	ldr	r2, [pc, #300]	@ (8007350 <I2C_ITMasterCplt+0x198>)
 8007222:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	2210      	movs	r2, #16
 8007228:	4013      	ands	r3, r2
 800722a:	d009      	beq.n	8007240 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	2210      	movs	r2, #16
 8007232:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007238:	2204      	movs	r2, #4
 800723a:	431a      	orrs	r2, r3
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2241      	movs	r2, #65	@ 0x41
 8007244:	5c9b      	ldrb	r3, [r3, r2]
 8007246:	b2db      	uxtb	r3, r3
 8007248:	2b60      	cmp	r3, #96	@ 0x60
 800724a:	d109      	bne.n	8007260 <I2C_ITMasterCplt+0xa8>
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	2204      	movs	r2, #4
 8007250:	4013      	ands	r3, r2
 8007252:	d005      	beq.n	8007260 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800725a:	b2db      	uxtb	r3, r3
 800725c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800725e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	0018      	movs	r0, r3
 8007264:	f000 fb81 	bl	800796a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800726c:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2241      	movs	r2, #65	@ 0x41
 8007272:	5c9b      	ldrb	r3, [r3, r2]
 8007274:	b2db      	uxtb	r3, r3
 8007276:	2b60      	cmp	r3, #96	@ 0x60
 8007278:	d002      	beq.n	8007280 <I2C_ITMasterCplt+0xc8>
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d007      	beq.n	8007290 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	0011      	movs	r1, r2
 8007288:	0018      	movs	r0, r3
 800728a:	f000 fa43 	bl	8007714 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800728e:	e058      	b.n	8007342 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2241      	movs	r2, #65	@ 0x41
 8007294:	5c9b      	ldrb	r3, [r3, r2]
 8007296:	b2db      	uxtb	r3, r3
 8007298:	2b21      	cmp	r3, #33	@ 0x21
 800729a:	d126      	bne.n	80072ea <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2241      	movs	r2, #65	@ 0x41
 80072a0:	2120      	movs	r1, #32
 80072a2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2200      	movs	r2, #0
 80072a8:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2242      	movs	r2, #66	@ 0x42
 80072ae:	5c9b      	ldrb	r3, [r3, r2]
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	2b40      	cmp	r3, #64	@ 0x40
 80072b4:	d10c      	bne.n	80072d0 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2242      	movs	r2, #66	@ 0x42
 80072ba:	2100      	movs	r1, #0
 80072bc:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2240      	movs	r2, #64	@ 0x40
 80072c2:	2100      	movs	r1, #0
 80072c4:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	0018      	movs	r0, r3
 80072ca:	f7f9 f893 	bl	80003f4 <HAL_I2C_MemTxCpltCallback>
}
 80072ce:	e038      	b.n	8007342 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2242      	movs	r2, #66	@ 0x42
 80072d4:	2100      	movs	r1, #0
 80072d6:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2240      	movs	r2, #64	@ 0x40
 80072dc:	2100      	movs	r1, #0
 80072de:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	0018      	movs	r0, r3
 80072e4:	f7f9 f8a2 	bl	800042c <HAL_I2C_MasterTxCpltCallback>
}
 80072e8:	e02b      	b.n	8007342 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2241      	movs	r2, #65	@ 0x41
 80072ee:	5c9b      	ldrb	r3, [r3, r2]
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	2b22      	cmp	r3, #34	@ 0x22
 80072f4:	d125      	bne.n	8007342 <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2241      	movs	r2, #65	@ 0x41
 80072fa:	2120      	movs	r1, #32
 80072fc:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2200      	movs	r2, #0
 8007302:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2242      	movs	r2, #66	@ 0x42
 8007308:	5c9b      	ldrb	r3, [r3, r2]
 800730a:	b2db      	uxtb	r3, r3
 800730c:	2b40      	cmp	r3, #64	@ 0x40
 800730e:	d10c      	bne.n	800732a <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2242      	movs	r2, #66	@ 0x42
 8007314:	2100      	movs	r1, #0
 8007316:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2240      	movs	r2, #64	@ 0x40
 800731c:	2100      	movs	r1, #0
 800731e:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	0018      	movs	r0, r3
 8007324:	f7f9 f874 	bl	8000410 <HAL_I2C_MemRxCpltCallback>
}
 8007328:	e00b      	b.n	8007342 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2242      	movs	r2, #66	@ 0x42
 800732e:	2100      	movs	r1, #0
 8007330:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2240      	movs	r2, #64	@ 0x40
 8007336:	2100      	movs	r1, #0
 8007338:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	0018      	movs	r0, r3
 800733e:	f7f9 f883 	bl	8000448 <HAL_I2C_MasterRxCpltCallback>
}
 8007342:	46c0      	nop			@ (mov r8, r8)
 8007344:	46bd      	mov	sp, r7
 8007346:	b006      	add	sp, #24
 8007348:	bd80      	pop	{r7, pc}
 800734a:	46c0      	nop			@ (mov r8, r8)
 800734c:	fe00e800 	.word	0xfe00e800
 8007350:	ffff0000 	.word	0xffff0000

08007354 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b086      	sub	sp, #24
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800736e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007370:	200b      	movs	r0, #11
 8007372:	183b      	adds	r3, r7, r0
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	2141      	movs	r1, #65	@ 0x41
 8007378:	5c52      	ldrb	r2, [r2, r1]
 800737a:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	2220      	movs	r2, #32
 8007382:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007384:	183b      	adds	r3, r7, r0
 8007386:	781b      	ldrb	r3, [r3, #0]
 8007388:	2b21      	cmp	r3, #33	@ 0x21
 800738a:	d003      	beq.n	8007394 <I2C_ITSlaveCplt+0x40>
 800738c:	183b      	adds	r3, r7, r0
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	2b29      	cmp	r3, #41	@ 0x29
 8007392:	d109      	bne.n	80073a8 <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8007394:	4aac      	ldr	r2, [pc, #688]	@ (8007648 <I2C_ITSlaveCplt+0x2f4>)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	0011      	movs	r1, r2
 800739a:	0018      	movs	r0, r3
 800739c:	f000 fca4 	bl	8007ce8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2221      	movs	r2, #33	@ 0x21
 80073a4:	631a      	str	r2, [r3, #48]	@ 0x30
 80073a6:	e020      	b.n	80073ea <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80073a8:	220b      	movs	r2, #11
 80073aa:	18bb      	adds	r3, r7, r2
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	2b22      	cmp	r3, #34	@ 0x22
 80073b0:	d003      	beq.n	80073ba <I2C_ITSlaveCplt+0x66>
 80073b2:	18bb      	adds	r3, r7, r2
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80073b8:	d109      	bne.n	80073ce <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80073ba:	4aa4      	ldr	r2, [pc, #656]	@ (800764c <I2C_ITSlaveCplt+0x2f8>)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	0011      	movs	r1, r2
 80073c0:	0018      	movs	r0, r3
 80073c2:	f000 fc91 	bl	8007ce8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2222      	movs	r2, #34	@ 0x22
 80073ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80073cc:	e00d      	b.n	80073ea <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80073ce:	230b      	movs	r3, #11
 80073d0:	18fb      	adds	r3, r7, r3
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	2b28      	cmp	r3, #40	@ 0x28
 80073d6:	d108      	bne.n	80073ea <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80073d8:	4a9d      	ldr	r2, [pc, #628]	@ (8007650 <I2C_ITSlaveCplt+0x2fc>)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	0011      	movs	r1, r2
 80073de:	0018      	movs	r0, r3
 80073e0:	f000 fc82 	bl	8007ce8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2200      	movs	r2, #0
 80073e8:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	685a      	ldr	r2, [r3, #4]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	2180      	movs	r1, #128	@ 0x80
 80073f6:	0209      	lsls	r1, r1, #8
 80073f8:	430a      	orrs	r2, r1
 80073fa:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	685a      	ldr	r2, [r3, #4]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4993      	ldr	r1, [pc, #588]	@ (8007654 <I2C_ITSlaveCplt+0x300>)
 8007408:	400a      	ands	r2, r1
 800740a:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	0018      	movs	r0, r3
 8007410:	f000 faab 	bl	800796a <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007414:	693a      	ldr	r2, [r7, #16]
 8007416:	2380      	movs	r3, #128	@ 0x80
 8007418:	01db      	lsls	r3, r3, #7
 800741a:	4013      	ands	r3, r2
 800741c:	d013      	beq.n	8007446 <I2C_ITSlaveCplt+0xf2>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	681a      	ldr	r2, [r3, #0]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	498b      	ldr	r1, [pc, #556]	@ (8007658 <I2C_ITSlaveCplt+0x304>)
 800742a:	400a      	ands	r2, r1
 800742c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007432:	2b00      	cmp	r3, #0
 8007434:	d01f      	beq.n	8007476 <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	b29a      	uxth	r2, r3
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007444:	e017      	b.n	8007476 <I2C_ITSlaveCplt+0x122>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007446:	693a      	ldr	r2, [r7, #16]
 8007448:	2380      	movs	r3, #128	@ 0x80
 800744a:	021b      	lsls	r3, r3, #8
 800744c:	4013      	ands	r3, r2
 800744e:	d012      	beq.n	8007476 <I2C_ITSlaveCplt+0x122>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	681a      	ldr	r2, [r3, #0]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4980      	ldr	r1, [pc, #512]	@ (800765c <I2C_ITSlaveCplt+0x308>)
 800745c:	400a      	ands	r2, r1
 800745e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007464:	2b00      	cmp	r3, #0
 8007466:	d006      	beq.n	8007476 <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	b29a      	uxth	r2, r3
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	2204      	movs	r2, #4
 800747a:	4013      	ands	r3, r2
 800747c:	d020      	beq.n	80074c0 <I2C_ITSlaveCplt+0x16c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	2204      	movs	r2, #4
 8007482:	4393      	bics	r3, r2
 8007484:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007490:	b2d2      	uxtb	r2, r2
 8007492:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007498:	1c5a      	adds	r2, r3, #1
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d00c      	beq.n	80074c0 <I2C_ITSlaveCplt+0x16c>
    {
      hi2c->XferSize--;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074aa:	3b01      	subs	r3, #1
 80074ac:	b29a      	uxth	r2, r3
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	3b01      	subs	r3, #1
 80074ba:	b29a      	uxth	r2, r3
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d005      	beq.n	80074d6 <I2C_ITSlaveCplt+0x182>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074ce:	2204      	movs	r2, #4
 80074d0:	431a      	orrs	r2, r3
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	2210      	movs	r2, #16
 80074da:	4013      	ands	r3, r2
 80074dc:	d04f      	beq.n	800757e <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	2210      	movs	r2, #16
 80074e2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80074e4:	d04b      	beq.n	800757e <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d12d      	bne.n	800754c <I2C_ITSlaveCplt+0x1f8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2241      	movs	r2, #65	@ 0x41
 80074f4:	5c9b      	ldrb	r3, [r3, r2]
 80074f6:	b2db      	uxtb	r3, r3
 80074f8:	2b28      	cmp	r3, #40	@ 0x28
 80074fa:	d10b      	bne.n	8007514 <I2C_ITSlaveCplt+0x1c0>
 80074fc:	68fa      	ldr	r2, [r7, #12]
 80074fe:	2380      	movs	r3, #128	@ 0x80
 8007500:	049b      	lsls	r3, r3, #18
 8007502:	429a      	cmp	r2, r3
 8007504:	d106      	bne.n	8007514 <I2C_ITSlaveCplt+0x1c0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007506:	697a      	ldr	r2, [r7, #20]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	0011      	movs	r1, r2
 800750c:	0018      	movs	r0, r3
 800750e:	f000 f8a9 	bl	8007664 <I2C_ITListenCplt>
 8007512:	e034      	b.n	800757e <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2241      	movs	r2, #65	@ 0x41
 8007518:	5c9b      	ldrb	r3, [r3, r2]
 800751a:	b2db      	uxtb	r3, r3
 800751c:	2b29      	cmp	r3, #41	@ 0x29
 800751e:	d110      	bne.n	8007542 <I2C_ITSlaveCplt+0x1ee>
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	4a4f      	ldr	r2, [pc, #316]	@ (8007660 <I2C_ITSlaveCplt+0x30c>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d00c      	beq.n	8007542 <I2C_ITSlaveCplt+0x1ee>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2210      	movs	r2, #16
 800752e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	0018      	movs	r0, r3
 8007534:	f000 fa19 	bl	800796a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	0018      	movs	r0, r3
 800753c:	f7ff fdd8 	bl	80070f0 <I2C_ITSlaveSeqCplt>
 8007540:	e01d      	b.n	800757e <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	2210      	movs	r2, #16
 8007548:	61da      	str	r2, [r3, #28]
 800754a:	e018      	b.n	800757e <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	2210      	movs	r2, #16
 8007552:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007558:	2204      	movs	r2, #4
 800755a:	431a      	orrs	r2, r3
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d004      	beq.n	8007570 <I2C_ITSlaveCplt+0x21c>
 8007566:	68fa      	ldr	r2, [r7, #12]
 8007568:	2380      	movs	r3, #128	@ 0x80
 800756a:	045b      	lsls	r3, r3, #17
 800756c:	429a      	cmp	r2, r3
 800756e:	d106      	bne.n	800757e <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	0011      	movs	r1, r2
 8007578:	0018      	movs	r0, r3
 800757a:	f000 f8cb 	bl	8007714 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2242      	movs	r2, #66	@ 0x42
 8007582:	2100      	movs	r1, #0
 8007584:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2200      	movs	r2, #0
 800758a:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007590:	2b00      	cmp	r3, #0
 8007592:	d013      	beq.n	80075bc <I2C_ITSlaveCplt+0x268>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	0011      	movs	r1, r2
 800759c:	0018      	movs	r0, r3
 800759e:	f000 f8b9 	bl	8007714 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2241      	movs	r2, #65	@ 0x41
 80075a6:	5c9b      	ldrb	r3, [r3, r2]
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	2b28      	cmp	r3, #40	@ 0x28
 80075ac:	d147      	bne.n	800763e <I2C_ITSlaveCplt+0x2ea>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80075ae:	697a      	ldr	r2, [r7, #20]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	0011      	movs	r1, r2
 80075b4:	0018      	movs	r0, r3
 80075b6:	f000 f855 	bl	8007664 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80075ba:	e040      	b.n	800763e <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075c0:	4a27      	ldr	r2, [pc, #156]	@ (8007660 <I2C_ITSlaveCplt+0x30c>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d016      	beq.n	80075f4 <I2C_ITSlaveCplt+0x2a0>
    I2C_ITSlaveSeqCplt(hi2c);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	0018      	movs	r0, r3
 80075ca:	f7ff fd91 	bl	80070f0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	4a23      	ldr	r2, [pc, #140]	@ (8007660 <I2C_ITSlaveCplt+0x30c>)
 80075d2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2241      	movs	r2, #65	@ 0x41
 80075d8:	2120      	movs	r1, #32
 80075da:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2240      	movs	r2, #64	@ 0x40
 80075e6:	2100      	movs	r1, #0
 80075e8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	0018      	movs	r0, r3
 80075ee:	f7fe ff44 	bl	800647a <HAL_I2C_ListenCpltCallback>
}
 80075f2:	e024      	b.n	800763e <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2241      	movs	r2, #65	@ 0x41
 80075f8:	5c9b      	ldrb	r3, [r3, r2]
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	2b22      	cmp	r3, #34	@ 0x22
 80075fe:	d10f      	bne.n	8007620 <I2C_ITSlaveCplt+0x2cc>
    hi2c->State = HAL_I2C_STATE_READY;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2241      	movs	r2, #65	@ 0x41
 8007604:	2120      	movs	r1, #32
 8007606:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2240      	movs	r2, #64	@ 0x40
 8007612:	2100      	movs	r1, #0
 8007614:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	0018      	movs	r0, r3
 800761a:	f7fe ff16 	bl	800644a <HAL_I2C_SlaveRxCpltCallback>
}
 800761e:	e00e      	b.n	800763e <I2C_ITSlaveCplt+0x2ea>
    hi2c->State = HAL_I2C_STATE_READY;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2241      	movs	r2, #65	@ 0x41
 8007624:	2120      	movs	r1, #32
 8007626:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2200      	movs	r2, #0
 800762c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2240      	movs	r2, #64	@ 0x40
 8007632:	2100      	movs	r1, #0
 8007634:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	0018      	movs	r0, r3
 800763a:	f7fe fefe 	bl	800643a <HAL_I2C_SlaveTxCpltCallback>
}
 800763e:	46c0      	nop			@ (mov r8, r8)
 8007640:	46bd      	mov	sp, r7
 8007642:	b006      	add	sp, #24
 8007644:	bd80      	pop	{r7, pc}
 8007646:	46c0      	nop			@ (mov r8, r8)
 8007648:	00008001 	.word	0x00008001
 800764c:	00008002 	.word	0x00008002
 8007650:	00008003 	.word	0x00008003
 8007654:	fe00e800 	.word	0xfe00e800
 8007658:	ffffbfff 	.word	0xffffbfff
 800765c:	ffff7fff 	.word	0xffff7fff
 8007660:	ffff0000 	.word	0xffff0000

08007664 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b082      	sub	sp, #8
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	4a26      	ldr	r2, [pc, #152]	@ (800770c <I2C_ITListenCplt+0xa8>)
 8007672:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2200      	movs	r2, #0
 8007678:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2241      	movs	r2, #65	@ 0x41
 800767e:	2120      	movs	r1, #32
 8007680:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2242      	movs	r2, #66	@ 0x42
 8007686:	2100      	movs	r1, #0
 8007688:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	2204      	movs	r2, #4
 8007694:	4013      	ands	r3, r2
 8007696:	d022      	beq.n	80076de <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076a2:	b2d2      	uxtb	r2, r2
 80076a4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076aa:	1c5a      	adds	r2, r3, #1
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d012      	beq.n	80076de <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076bc:	3b01      	subs	r3, #1
 80076be:	b29a      	uxth	r2, r3
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	3b01      	subs	r3, #1
 80076cc:	b29a      	uxth	r2, r3
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076d6:	2204      	movs	r2, #4
 80076d8:	431a      	orrs	r2, r3
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80076de:	4a0c      	ldr	r2, [pc, #48]	@ (8007710 <I2C_ITListenCplt+0xac>)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	0011      	movs	r1, r2
 80076e4:	0018      	movs	r0, r3
 80076e6:	f000 faff 	bl	8007ce8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2210      	movs	r2, #16
 80076f0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2240      	movs	r2, #64	@ 0x40
 80076f6:	2100      	movs	r1, #0
 80076f8:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	0018      	movs	r0, r3
 80076fe:	f7fe febc 	bl	800647a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8007702:	46c0      	nop			@ (mov r8, r8)
 8007704:	46bd      	mov	sp, r7
 8007706:	b002      	add	sp, #8
 8007708:	bd80      	pop	{r7, pc}
 800770a:	46c0      	nop			@ (mov r8, r8)
 800770c:	ffff0000 	.word	0xffff0000
 8007710:	00008003 	.word	0x00008003

08007714 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b084      	sub	sp, #16
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800771e:	200f      	movs	r0, #15
 8007720:	183b      	adds	r3, r7, r0
 8007722:	687a      	ldr	r2, [r7, #4]
 8007724:	2141      	movs	r1, #65	@ 0x41
 8007726:	5c52      	ldrb	r2, [r2, r1]
 8007728:	701a      	strb	r2, [r3, #0]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2242      	movs	r2, #66	@ 0x42
 800772e:	2100      	movs	r1, #0
 8007730:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	4a72      	ldr	r2, [pc, #456]	@ (8007900 <I2C_ITError+0x1ec>)
 8007736:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2200      	movs	r2, #0
 800773c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	431a      	orrs	r2, r3
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800774a:	183b      	adds	r3, r7, r0
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	2b28      	cmp	r3, #40	@ 0x28
 8007750:	d007      	beq.n	8007762 <I2C_ITError+0x4e>
 8007752:	183b      	adds	r3, r7, r0
 8007754:	781b      	ldrb	r3, [r3, #0]
 8007756:	2b29      	cmp	r3, #41	@ 0x29
 8007758:	d003      	beq.n	8007762 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800775a:	183b      	adds	r3, r7, r0
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007760:	d10c      	bne.n	800777c <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2103      	movs	r1, #3
 8007766:	0018      	movs	r0, r3
 8007768:	f000 fabe 	bl	8007ce8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2241      	movs	r2, #65	@ 0x41
 8007770:	2128      	movs	r1, #40	@ 0x28
 8007772:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	4a63      	ldr	r2, [pc, #396]	@ (8007904 <I2C_ITError+0x1f0>)
 8007778:	635a      	str	r2, [r3, #52]	@ 0x34
 800777a:	e032      	b.n	80077e2 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800777c:	4a62      	ldr	r2, [pc, #392]	@ (8007908 <I2C_ITError+0x1f4>)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	0011      	movs	r1, r2
 8007782:	0018      	movs	r0, r3
 8007784:	f000 fab0 	bl	8007ce8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	0018      	movs	r0, r3
 800778c:	f000 f8ed 	bl	800796a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2241      	movs	r2, #65	@ 0x41
 8007794:	5c9b      	ldrb	r3, [r3, r2]
 8007796:	b2db      	uxtb	r3, r3
 8007798:	2b60      	cmp	r3, #96	@ 0x60
 800779a:	d01f      	beq.n	80077dc <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2241      	movs	r2, #65	@ 0x41
 80077a0:	2120      	movs	r1, #32
 80077a2:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	699b      	ldr	r3, [r3, #24]
 80077aa:	2220      	movs	r2, #32
 80077ac:	4013      	ands	r3, r2
 80077ae:	2b20      	cmp	r3, #32
 80077b0:	d114      	bne.n	80077dc <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	699b      	ldr	r3, [r3, #24]
 80077b8:	2210      	movs	r2, #16
 80077ba:	4013      	ands	r3, r2
 80077bc:	2b10      	cmp	r3, #16
 80077be:	d109      	bne.n	80077d4 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	2210      	movs	r2, #16
 80077c6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077cc:	2204      	movs	r2, #4
 80077ce:	431a      	orrs	r2, r3
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	2220      	movs	r2, #32
 80077da:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2200      	movs	r2, #0
 80077e0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077e6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d03b      	beq.n	8007868 <I2C_ITError+0x154>
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	2b11      	cmp	r3, #17
 80077f4:	d002      	beq.n	80077fc <I2C_ITError+0xe8>
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	2b21      	cmp	r3, #33	@ 0x21
 80077fa:	d135      	bne.n	8007868 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	2380      	movs	r3, #128	@ 0x80
 8007804:	01db      	lsls	r3, r3, #7
 8007806:	401a      	ands	r2, r3
 8007808:	2380      	movs	r3, #128	@ 0x80
 800780a:	01db      	lsls	r3, r3, #7
 800780c:	429a      	cmp	r2, r3
 800780e:	d107      	bne.n	8007820 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	681a      	ldr	r2, [r3, #0]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	493c      	ldr	r1, [pc, #240]	@ (800790c <I2C_ITError+0x1f8>)
 800781c:	400a      	ands	r2, r1
 800781e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007824:	0018      	movs	r0, r3
 8007826:	f7fd fe31 	bl	800548c <HAL_DMA_GetState>
 800782a:	0003      	movs	r3, r0
 800782c:	2b01      	cmp	r3, #1
 800782e:	d016      	beq.n	800785e <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007834:	4a36      	ldr	r2, [pc, #216]	@ (8007910 <I2C_ITError+0x1fc>)
 8007836:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2240      	movs	r2, #64	@ 0x40
 800783c:	2100      	movs	r1, #0
 800783e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007844:	0018      	movs	r0, r3
 8007846:	f7fd fcf5 	bl	8005234 <HAL_DMA_Abort_IT>
 800784a:	1e03      	subs	r3, r0, #0
 800784c:	d051      	beq.n	80078f2 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007852:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007858:	0018      	movs	r0, r3
 800785a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800785c:	e049      	b.n	80078f2 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	0018      	movs	r0, r3
 8007862:	f000 f859 	bl	8007918 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007866:	e044      	b.n	80078f2 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800786c:	2b00      	cmp	r3, #0
 800786e:	d03b      	beq.n	80078e8 <I2C_ITError+0x1d4>
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	2b12      	cmp	r3, #18
 8007874:	d002      	beq.n	800787c <I2C_ITError+0x168>
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	2b22      	cmp	r3, #34	@ 0x22
 800787a:	d135      	bne.n	80078e8 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	681a      	ldr	r2, [r3, #0]
 8007882:	2380      	movs	r3, #128	@ 0x80
 8007884:	021b      	lsls	r3, r3, #8
 8007886:	401a      	ands	r2, r3
 8007888:	2380      	movs	r3, #128	@ 0x80
 800788a:	021b      	lsls	r3, r3, #8
 800788c:	429a      	cmp	r2, r3
 800788e:	d107      	bne.n	80078a0 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	681a      	ldr	r2, [r3, #0]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	491e      	ldr	r1, [pc, #120]	@ (8007914 <I2C_ITError+0x200>)
 800789c:	400a      	ands	r2, r1
 800789e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078a4:	0018      	movs	r0, r3
 80078a6:	f7fd fdf1 	bl	800548c <HAL_DMA_GetState>
 80078aa:	0003      	movs	r3, r0
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d016      	beq.n	80078de <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078b4:	4a16      	ldr	r2, [pc, #88]	@ (8007910 <I2C_ITError+0x1fc>)
 80078b6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2240      	movs	r2, #64	@ 0x40
 80078bc:	2100      	movs	r1, #0
 80078be:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078c4:	0018      	movs	r0, r3
 80078c6:	f7fd fcb5 	bl	8005234 <HAL_DMA_Abort_IT>
 80078ca:	1e03      	subs	r3, r0, #0
 80078cc:	d013      	beq.n	80078f6 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078d8:	0018      	movs	r0, r3
 80078da:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80078dc:	e00b      	b.n	80078f6 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	0018      	movs	r0, r3
 80078e2:	f000 f819 	bl	8007918 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80078e6:	e006      	b.n	80078f6 <I2C_ITError+0x1e2>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	0018      	movs	r0, r3
 80078ec:	f000 f814 	bl	8007918 <I2C_TreatErrorCallback>
  }
}
 80078f0:	e002      	b.n	80078f8 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80078f2:	46c0      	nop			@ (mov r8, r8)
 80078f4:	e000      	b.n	80078f8 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80078f6:	46c0      	nop			@ (mov r8, r8)
}
 80078f8:	46c0      	nop			@ (mov r8, r8)
 80078fa:	46bd      	mov	sp, r7
 80078fc:	b004      	add	sp, #16
 80078fe:	bd80      	pop	{r7, pc}
 8007900:	ffff0000 	.word	0xffff0000
 8007904:	08006705 	.word	0x08006705
 8007908:	00008003 	.word	0x00008003
 800790c:	ffffbfff 	.word	0xffffbfff
 8007910:	08007b23 	.word	0x08007b23
 8007914:	ffff7fff 	.word	0xffff7fff

08007918 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b082      	sub	sp, #8
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2241      	movs	r2, #65	@ 0x41
 8007924:	5c9b      	ldrb	r3, [r3, r2]
 8007926:	b2db      	uxtb	r3, r3
 8007928:	2b60      	cmp	r3, #96	@ 0x60
 800792a:	d10f      	bne.n	800794c <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2241      	movs	r2, #65	@ 0x41
 8007930:	2120      	movs	r1, #32
 8007932:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2240      	movs	r2, #64	@ 0x40
 800793e:	2100      	movs	r1, #0
 8007940:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	0018      	movs	r0, r3
 8007946:	f7fe fda0 	bl	800648a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800794a:	e00a      	b.n	8007962 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2200      	movs	r2, #0
 8007950:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2240      	movs	r2, #64	@ 0x40
 8007956:	2100      	movs	r1, #0
 8007958:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	0018      	movs	r0, r3
 800795e:	f7f8 fd81 	bl	8000464 <HAL_I2C_ErrorCallback>
}
 8007962:	46c0      	nop			@ (mov r8, r8)
 8007964:	46bd      	mov	sp, r7
 8007966:	b002      	add	sp, #8
 8007968:	bd80      	pop	{r7, pc}

0800796a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800796a:	b580      	push	{r7, lr}
 800796c:	b082      	sub	sp, #8
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	699b      	ldr	r3, [r3, #24]
 8007978:	2202      	movs	r2, #2
 800797a:	4013      	ands	r3, r2
 800797c:	2b02      	cmp	r3, #2
 800797e:	d103      	bne.n	8007988 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	2200      	movs	r2, #0
 8007986:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	699b      	ldr	r3, [r3, #24]
 800798e:	2201      	movs	r2, #1
 8007990:	4013      	ands	r3, r2
 8007992:	2b01      	cmp	r3, #1
 8007994:	d007      	beq.n	80079a6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	699a      	ldr	r2, [r3, #24]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	2101      	movs	r1, #1
 80079a2:	430a      	orrs	r2, r1
 80079a4:	619a      	str	r2, [r3, #24]
  }
}
 80079a6:	46c0      	nop			@ (mov r8, r8)
 80079a8:	46bd      	mov	sp, r7
 80079aa:	b002      	add	sp, #8
 80079ac:	bd80      	pop	{r7, pc}
	...

080079b0 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b084      	sub	sp, #16
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079bc:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4920      	ldr	r1, [pc, #128]	@ (8007a4c <I2C_DMAMasterTransmitCplt+0x9c>)
 80079ca:	400a      	ands	r2, r1
 80079cc:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d105      	bne.n	80079e4 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2120      	movs	r1, #32
 80079dc:	0018      	movs	r0, r3
 80079de:	f000 f8f9 	bl	8007bd4 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80079e2:	e02e      	b.n	8007a42 <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079e8:	68fa      	ldr	r2, [r7, #12]
 80079ea:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80079ec:	189a      	adds	r2, r3, r2
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	2bff      	cmp	r3, #255	@ 0xff
 80079fa:	d903      	bls.n	8007a04 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	22ff      	movs	r2, #255	@ 0xff
 8007a00:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007a02:	e004      	b.n	8007a0e <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a08:	b29a      	uxth	r2, r3
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a16:	0019      	movs	r1, r3
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	3328      	adds	r3, #40	@ 0x28
 8007a1e:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8007a24:	f7fd fb1c 	bl	8005060 <HAL_DMA_Start_IT>
 8007a28:	1e03      	subs	r3, r0, #0
 8007a2a:	d005      	beq.n	8007a38 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2110      	movs	r1, #16
 8007a30:	0018      	movs	r0, r3
 8007a32:	f7ff fe6f 	bl	8007714 <I2C_ITError>
}
 8007a36:	e004      	b.n	8007a42 <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2140      	movs	r1, #64	@ 0x40
 8007a3c:	0018      	movs	r0, r3
 8007a3e:	f000 f8c9 	bl	8007bd4 <I2C_Enable_IRQ>
}
 8007a42:	46c0      	nop			@ (mov r8, r8)
 8007a44:	46bd      	mov	sp, r7
 8007a46:	b004      	add	sp, #16
 8007a48:	bd80      	pop	{r7, pc}
 8007a4a:	46c0      	nop			@ (mov r8, r8)
 8007a4c:	ffffbfff 	.word	0xffffbfff

08007a50 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b084      	sub	sp, #16
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a5c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4920      	ldr	r1, [pc, #128]	@ (8007aec <I2C_DMAMasterReceiveCplt+0x9c>)
 8007a6a:	400a      	ands	r2, r1
 8007a6c:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d105      	bne.n	8007a84 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2120      	movs	r1, #32
 8007a7c:	0018      	movs	r0, r3
 8007a7e:	f000 f8a9 	bl	8007bd4 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8007a82:	e02e      	b.n	8007ae2 <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a88:	68fa      	ldr	r2, [r7, #12]
 8007a8a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8007a8c:	189a      	adds	r2, r3, r2
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	2bff      	cmp	r3, #255	@ 0xff
 8007a9a:	d903      	bls.n	8007aa4 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	22ff      	movs	r2, #255	@ 0xff
 8007aa0:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007aa2:	e004      	b.n	8007aae <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007aa8:	b29a      	uxth	r2, r3
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	3324      	adds	r3, #36	@ 0x24
 8007ab8:	0019      	movs	r1, r3
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007abe:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8007ac4:	f7fd facc 	bl	8005060 <HAL_DMA_Start_IT>
 8007ac8:	1e03      	subs	r3, r0, #0
 8007aca:	d005      	beq.n	8007ad8 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2110      	movs	r1, #16
 8007ad0:	0018      	movs	r0, r3
 8007ad2:	f7ff fe1f 	bl	8007714 <I2C_ITError>
}
 8007ad6:	e004      	b.n	8007ae2 <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2140      	movs	r1, #64	@ 0x40
 8007adc:	0018      	movs	r0, r3
 8007ade:	f000 f879 	bl	8007bd4 <I2C_Enable_IRQ>
}
 8007ae2:	46c0      	nop			@ (mov r8, r8)
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	b004      	add	sp, #16
 8007ae8:	bd80      	pop	{r7, pc}
 8007aea:	46c0      	nop			@ (mov r8, r8)
 8007aec:	ffff7fff 	.word	0xffff7fff

08007af0 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b084      	sub	sp, #16
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007afc:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	685a      	ldr	r2, [r3, #4]
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	2180      	movs	r1, #128	@ 0x80
 8007b0a:	0209      	lsls	r1, r1, #8
 8007b0c:	430a      	orrs	r2, r1
 8007b0e:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2110      	movs	r1, #16
 8007b14:	0018      	movs	r0, r3
 8007b16:	f7ff fdfd 	bl	8007714 <I2C_ITError>
}
 8007b1a:	46c0      	nop			@ (mov r8, r8)
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	b004      	add	sp, #16
 8007b20:	bd80      	pop	{r7, pc}

08007b22 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007b22:	b580      	push	{r7, lr}
 8007b24:	b084      	sub	sp, #16
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b2e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d003      	beq.n	8007b40 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d003      	beq.n	8007b50 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	0018      	movs	r0, r3
 8007b54:	f7ff fee0 	bl	8007918 <I2C_TreatErrorCallback>
}
 8007b58:	46c0      	nop			@ (mov r8, r8)
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	b004      	add	sp, #16
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007b60:	b590      	push	{r4, r7, lr}
 8007b62:	b087      	sub	sp, #28
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	60f8      	str	r0, [r7, #12]
 8007b68:	0008      	movs	r0, r1
 8007b6a:	0011      	movs	r1, r2
 8007b6c:	607b      	str	r3, [r7, #4]
 8007b6e:	240a      	movs	r4, #10
 8007b70:	193b      	adds	r3, r7, r4
 8007b72:	1c02      	adds	r2, r0, #0
 8007b74:	801a      	strh	r2, [r3, #0]
 8007b76:	2009      	movs	r0, #9
 8007b78:	183b      	adds	r3, r7, r0
 8007b7a:	1c0a      	adds	r2, r1, #0
 8007b7c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007b7e:	193b      	adds	r3, r7, r4
 8007b80:	881b      	ldrh	r3, [r3, #0]
 8007b82:	059b      	lsls	r3, r3, #22
 8007b84:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007b86:	183b      	adds	r3, r7, r0
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	0419      	lsls	r1, r3, #16
 8007b8c:	23ff      	movs	r3, #255	@ 0xff
 8007b8e:	041b      	lsls	r3, r3, #16
 8007b90:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007b92:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	005b      	lsls	r3, r3, #1
 8007b9e:	085b      	lsrs	r3, r3, #1
 8007ba0:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007baa:	0d51      	lsrs	r1, r2, #21
 8007bac:	2280      	movs	r2, #128	@ 0x80
 8007bae:	00d2      	lsls	r2, r2, #3
 8007bb0:	400a      	ands	r2, r1
 8007bb2:	4907      	ldr	r1, [pc, #28]	@ (8007bd0 <I2C_TransferConfig+0x70>)
 8007bb4:	430a      	orrs	r2, r1
 8007bb6:	43d2      	mvns	r2, r2
 8007bb8:	401a      	ands	r2, r3
 8007bba:	0011      	movs	r1, r2
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	697a      	ldr	r2, [r7, #20]
 8007bc2:	430a      	orrs	r2, r1
 8007bc4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007bc6:	46c0      	nop			@ (mov r8, r8)
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	b007      	add	sp, #28
 8007bcc:	bd90      	pop	{r4, r7, pc}
 8007bce:	46c0      	nop			@ (mov r8, r8)
 8007bd0:	03ff63ff 	.word	0x03ff63ff

08007bd4 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b084      	sub	sp, #16
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	000a      	movs	r2, r1
 8007bde:	1cbb      	adds	r3, r7, #2
 8007be0:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8007be2:	2300      	movs	r3, #0
 8007be4:	60fb      	str	r3, [r7, #12]

#if defined(HAL_DMA_MODULE_ENABLED)
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007bea:	4b3c      	ldr	r3, [pc, #240]	@ (8007cdc <I2C_Enable_IRQ+0x108>)
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d035      	beq.n	8007c5c <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8007bf4:	4b3a      	ldr	r3, [pc, #232]	@ (8007ce0 <I2C_Enable_IRQ+0x10c>)
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	d030      	beq.n	8007c5c <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8007bfe:	4b39      	ldr	r3, [pc, #228]	@ (8007ce4 <I2C_Enable_IRQ+0x110>)
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d02b      	beq.n	8007c5c <I2C_Enable_IRQ+0x88>
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007c04:	1cbb      	adds	r3, r7, #2
 8007c06:	2200      	movs	r2, #0
 8007c08:	5e9b      	ldrsh	r3, [r3, r2]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	da03      	bge.n	8007c16 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	22b8      	movs	r2, #184	@ 0xb8
 8007c12:	4313      	orrs	r3, r2
 8007c14:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007c16:	1cbb      	adds	r3, r7, #2
 8007c18:	881b      	ldrh	r3, [r3, #0]
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	4013      	ands	r3, r2
 8007c1e:	d003      	beq.n	8007c28 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	22f2      	movs	r2, #242	@ 0xf2
 8007c24:	4313      	orrs	r3, r2
 8007c26:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007c28:	1cbb      	adds	r3, r7, #2
 8007c2a:	881b      	ldrh	r3, [r3, #0]
 8007c2c:	2202      	movs	r2, #2
 8007c2e:	4013      	ands	r3, r2
 8007c30:	d003      	beq.n	8007c3a <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	22f4      	movs	r2, #244	@ 0xf4
 8007c36:	4313      	orrs	r3, r2
 8007c38:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007c3a:	1cbb      	adds	r3, r7, #2
 8007c3c:	881b      	ldrh	r3, [r3, #0]
 8007c3e:	2b10      	cmp	r3, #16
 8007c40:	d103      	bne.n	8007c4a <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2290      	movs	r2, #144	@ 0x90
 8007c46:	4313      	orrs	r3, r2
 8007c48:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007c4a:	1cbb      	adds	r3, r7, #2
 8007c4c:	881b      	ldrh	r3, [r3, #0]
 8007c4e:	2b20      	cmp	r3, #32
 8007c50:	d137      	bne.n	8007cc2 <I2C_Enable_IRQ+0xee>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	2220      	movs	r2, #32
 8007c56:	4313      	orrs	r3, r2
 8007c58:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007c5a:	e032      	b.n	8007cc2 <I2C_Enable_IRQ+0xee>
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007c5c:	1cbb      	adds	r3, r7, #2
 8007c5e:	2200      	movs	r2, #0
 8007c60:	5e9b      	ldrsh	r3, [r3, r2]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	da03      	bge.n	8007c6e <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	22b8      	movs	r2, #184	@ 0xb8
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007c6e:	1cbb      	adds	r3, r7, #2
 8007c70:	881b      	ldrh	r3, [r3, #0]
 8007c72:	2201      	movs	r2, #1
 8007c74:	4013      	ands	r3, r2
 8007c76:	d003      	beq.n	8007c80 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	22f2      	movs	r2, #242	@ 0xf2
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007c80:	1cbb      	adds	r3, r7, #2
 8007c82:	881b      	ldrh	r3, [r3, #0]
 8007c84:	2202      	movs	r2, #2
 8007c86:	4013      	ands	r3, r2
 8007c88:	d003      	beq.n	8007c92 <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	22f4      	movs	r2, #244	@ 0xf4
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007c92:	1cbb      	adds	r3, r7, #2
 8007c94:	881b      	ldrh	r3, [r3, #0]
 8007c96:	2b10      	cmp	r3, #16
 8007c98:	d103      	bne.n	8007ca2 <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2290      	movs	r2, #144	@ 0x90
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007ca2:	1cbb      	adds	r3, r7, #2
 8007ca4:	881b      	ldrh	r3, [r3, #0]
 8007ca6:	2b20      	cmp	r3, #32
 8007ca8:	d103      	bne.n	8007cb2 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	2260      	movs	r2, #96	@ 0x60
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007cb2:	1cbb      	adds	r3, r7, #2
 8007cb4:	881b      	ldrh	r3, [r3, #0]
 8007cb6:	2b40      	cmp	r3, #64	@ 0x40
 8007cb8:	d103      	bne.n	8007cc2 <I2C_Enable_IRQ+0xee>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2240      	movs	r2, #64	@ 0x40
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	60fb      	str	r3, [r7, #12]
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	6819      	ldr	r1, [r3, #0]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	68fa      	ldr	r2, [r7, #12]
 8007cce:	430a      	orrs	r2, r1
 8007cd0:	601a      	str	r2, [r3, #0]
}
 8007cd2:	46c0      	nop			@ (mov r8, r8)
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	b004      	add	sp, #16
 8007cd8:	bd80      	pop	{r7, pc}
 8007cda:	46c0      	nop			@ (mov r8, r8)
 8007cdc:	08006905 	.word	0x08006905
 8007ce0:	08006d55 	.word	0x08006d55
 8007ce4:	08006afd 	.word	0x08006afd

08007ce8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	000a      	movs	r2, r1
 8007cf2:	1cbb      	adds	r3, r7, #2
 8007cf4:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007cfa:	1cbb      	adds	r3, r7, #2
 8007cfc:	881b      	ldrh	r3, [r3, #0]
 8007cfe:	2201      	movs	r2, #1
 8007d00:	4013      	ands	r3, r2
 8007d02:	d010      	beq.n	8007d26 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2242      	movs	r2, #66	@ 0x42
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2241      	movs	r2, #65	@ 0x41
 8007d10:	5c9b      	ldrb	r3, [r3, r2]
 8007d12:	b2db      	uxtb	r3, r3
 8007d14:	001a      	movs	r2, r3
 8007d16:	2328      	movs	r3, #40	@ 0x28
 8007d18:	4013      	ands	r3, r2
 8007d1a:	2b28      	cmp	r3, #40	@ 0x28
 8007d1c:	d003      	beq.n	8007d26 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	22b0      	movs	r2, #176	@ 0xb0
 8007d22:	4313      	orrs	r3, r2
 8007d24:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007d26:	1cbb      	adds	r3, r7, #2
 8007d28:	881b      	ldrh	r3, [r3, #0]
 8007d2a:	2202      	movs	r2, #2
 8007d2c:	4013      	ands	r3, r2
 8007d2e:	d010      	beq.n	8007d52 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	2244      	movs	r2, #68	@ 0x44
 8007d34:	4313      	orrs	r3, r2
 8007d36:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2241      	movs	r2, #65	@ 0x41
 8007d3c:	5c9b      	ldrb	r3, [r3, r2]
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	001a      	movs	r2, r3
 8007d42:	2328      	movs	r3, #40	@ 0x28
 8007d44:	4013      	ands	r3, r2
 8007d46:	2b28      	cmp	r3, #40	@ 0x28
 8007d48:	d003      	beq.n	8007d52 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	22b0      	movs	r2, #176	@ 0xb0
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007d52:	1cbb      	adds	r3, r7, #2
 8007d54:	2200      	movs	r2, #0
 8007d56:	5e9b      	ldrsh	r3, [r3, r2]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	da03      	bge.n	8007d64 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	22b8      	movs	r2, #184	@ 0xb8
 8007d60:	4313      	orrs	r3, r2
 8007d62:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007d64:	1cbb      	adds	r3, r7, #2
 8007d66:	881b      	ldrh	r3, [r3, #0]
 8007d68:	2b10      	cmp	r3, #16
 8007d6a:	d103      	bne.n	8007d74 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2290      	movs	r2, #144	@ 0x90
 8007d70:	4313      	orrs	r3, r2
 8007d72:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007d74:	1cbb      	adds	r3, r7, #2
 8007d76:	881b      	ldrh	r3, [r3, #0]
 8007d78:	2b20      	cmp	r3, #32
 8007d7a:	d103      	bne.n	8007d84 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2220      	movs	r2, #32
 8007d80:	4313      	orrs	r3, r2
 8007d82:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007d84:	1cbb      	adds	r3, r7, #2
 8007d86:	881b      	ldrh	r3, [r3, #0]
 8007d88:	2b40      	cmp	r3, #64	@ 0x40
 8007d8a:	d103      	bne.n	8007d94 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2240      	movs	r2, #64	@ 0x40
 8007d90:	4313      	orrs	r3, r2
 8007d92:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	681a      	ldr	r2, [r3, #0]
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	43d9      	mvns	r1, r3
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	400a      	ands	r2, r1
 8007da4:	601a      	str	r2, [r3, #0]
}
 8007da6:	46c0      	nop			@ (mov r8, r8)
 8007da8:	46bd      	mov	sp, r7
 8007daa:	b004      	add	sp, #16
 8007dac:	bd80      	pop	{r7, pc}
	...

08007db0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b082      	sub	sp, #8
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2241      	movs	r2, #65	@ 0x41
 8007dbe:	5c9b      	ldrb	r3, [r3, r2]
 8007dc0:	b2db      	uxtb	r3, r3
 8007dc2:	2b20      	cmp	r3, #32
 8007dc4:	d138      	bne.n	8007e38 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2240      	movs	r2, #64	@ 0x40
 8007dca:	5c9b      	ldrb	r3, [r3, r2]
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d101      	bne.n	8007dd4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007dd0:	2302      	movs	r3, #2
 8007dd2:	e032      	b.n	8007e3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2240      	movs	r2, #64	@ 0x40
 8007dd8:	2101      	movs	r1, #1
 8007dda:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2241      	movs	r2, #65	@ 0x41
 8007de0:	2124      	movs	r1, #36	@ 0x24
 8007de2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	681a      	ldr	r2, [r3, #0]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	2101      	movs	r1, #1
 8007df0:	438a      	bics	r2, r1
 8007df2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4911      	ldr	r1, [pc, #68]	@ (8007e44 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8007e00:	400a      	ands	r2, r1
 8007e02:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	6819      	ldr	r1, [r3, #0]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	683a      	ldr	r2, [r7, #0]
 8007e10:	430a      	orrs	r2, r1
 8007e12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	681a      	ldr	r2, [r3, #0]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	2101      	movs	r1, #1
 8007e20:	430a      	orrs	r2, r1
 8007e22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2241      	movs	r2, #65	@ 0x41
 8007e28:	2120      	movs	r1, #32
 8007e2a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2240      	movs	r2, #64	@ 0x40
 8007e30:	2100      	movs	r1, #0
 8007e32:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007e34:	2300      	movs	r3, #0
 8007e36:	e000      	b.n	8007e3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007e38:	2302      	movs	r3, #2
  }
}
 8007e3a:	0018      	movs	r0, r3
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	b002      	add	sp, #8
 8007e40:	bd80      	pop	{r7, pc}
 8007e42:	46c0      	nop			@ (mov r8, r8)
 8007e44:	ffffefff 	.word	0xffffefff

08007e48 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2241      	movs	r2, #65	@ 0x41
 8007e56:	5c9b      	ldrb	r3, [r3, r2]
 8007e58:	b2db      	uxtb	r3, r3
 8007e5a:	2b20      	cmp	r3, #32
 8007e5c:	d139      	bne.n	8007ed2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2240      	movs	r2, #64	@ 0x40
 8007e62:	5c9b      	ldrb	r3, [r3, r2]
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	d101      	bne.n	8007e6c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007e68:	2302      	movs	r3, #2
 8007e6a:	e033      	b.n	8007ed4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2240      	movs	r2, #64	@ 0x40
 8007e70:	2101      	movs	r1, #1
 8007e72:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2241      	movs	r2, #65	@ 0x41
 8007e78:	2124      	movs	r1, #36	@ 0x24
 8007e7a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	2101      	movs	r1, #1
 8007e88:	438a      	bics	r2, r1
 8007e8a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	4a11      	ldr	r2, [pc, #68]	@ (8007edc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8007e98:	4013      	ands	r3, r2
 8007e9a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	021b      	lsls	r3, r3, #8
 8007ea0:	68fa      	ldr	r2, [r7, #12]
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	68fa      	ldr	r2, [r7, #12]
 8007eac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	681a      	ldr	r2, [r3, #0]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	2101      	movs	r1, #1
 8007eba:	430a      	orrs	r2, r1
 8007ebc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2241      	movs	r2, #65	@ 0x41
 8007ec2:	2120      	movs	r1, #32
 8007ec4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2240      	movs	r2, #64	@ 0x40
 8007eca:	2100      	movs	r1, #0
 8007ecc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	e000      	b.n	8007ed4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007ed2:	2302      	movs	r3, #2
  }
}
 8007ed4:	0018      	movs	r0, r3
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	b004      	add	sp, #16
 8007eda:	bd80      	pop	{r7, pc}
 8007edc:	fffff0ff 	.word	0xfffff0ff

08007ee0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b086      	sub	sp, #24
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d101      	bne.n	8007ef2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	e20f      	b.n	8008312 <HAL_RCC_OscConfig+0x432>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	4013      	ands	r3, r2
 8007efa:	d100      	bne.n	8007efe <HAL_RCC_OscConfig+0x1e>
 8007efc:	e069      	b.n	8007fd2 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007efe:	4bc8      	ldr	r3, [pc, #800]	@ (8008220 <HAL_RCC_OscConfig+0x340>)
 8007f00:	689b      	ldr	r3, [r3, #8]
 8007f02:	2238      	movs	r2, #56	@ 0x38
 8007f04:	4013      	ands	r3, r2
 8007f06:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	2b08      	cmp	r3, #8
 8007f0c:	d105      	bne.n	8007f1a <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d15d      	bne.n	8007fd2 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8007f16:	2301      	movs	r3, #1
 8007f18:	e1fb      	b.n	8008312 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	685a      	ldr	r2, [r3, #4]
 8007f1e:	2380      	movs	r3, #128	@ 0x80
 8007f20:	025b      	lsls	r3, r3, #9
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d107      	bne.n	8007f36 <HAL_RCC_OscConfig+0x56>
 8007f26:	4bbe      	ldr	r3, [pc, #760]	@ (8008220 <HAL_RCC_OscConfig+0x340>)
 8007f28:	681a      	ldr	r2, [r3, #0]
 8007f2a:	4bbd      	ldr	r3, [pc, #756]	@ (8008220 <HAL_RCC_OscConfig+0x340>)
 8007f2c:	2180      	movs	r1, #128	@ 0x80
 8007f2e:	0249      	lsls	r1, r1, #9
 8007f30:	430a      	orrs	r2, r1
 8007f32:	601a      	str	r2, [r3, #0]
 8007f34:	e020      	b.n	8007f78 <HAL_RCC_OscConfig+0x98>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	685a      	ldr	r2, [r3, #4]
 8007f3a:	23a0      	movs	r3, #160	@ 0xa0
 8007f3c:	02db      	lsls	r3, r3, #11
 8007f3e:	429a      	cmp	r2, r3
 8007f40:	d10e      	bne.n	8007f60 <HAL_RCC_OscConfig+0x80>
 8007f42:	4bb7      	ldr	r3, [pc, #732]	@ (8008220 <HAL_RCC_OscConfig+0x340>)
 8007f44:	681a      	ldr	r2, [r3, #0]
 8007f46:	4bb6      	ldr	r3, [pc, #728]	@ (8008220 <HAL_RCC_OscConfig+0x340>)
 8007f48:	2180      	movs	r1, #128	@ 0x80
 8007f4a:	02c9      	lsls	r1, r1, #11
 8007f4c:	430a      	orrs	r2, r1
 8007f4e:	601a      	str	r2, [r3, #0]
 8007f50:	4bb3      	ldr	r3, [pc, #716]	@ (8008220 <HAL_RCC_OscConfig+0x340>)
 8007f52:	681a      	ldr	r2, [r3, #0]
 8007f54:	4bb2      	ldr	r3, [pc, #712]	@ (8008220 <HAL_RCC_OscConfig+0x340>)
 8007f56:	2180      	movs	r1, #128	@ 0x80
 8007f58:	0249      	lsls	r1, r1, #9
 8007f5a:	430a      	orrs	r2, r1
 8007f5c:	601a      	str	r2, [r3, #0]
 8007f5e:	e00b      	b.n	8007f78 <HAL_RCC_OscConfig+0x98>
 8007f60:	4baf      	ldr	r3, [pc, #700]	@ (8008220 <HAL_RCC_OscConfig+0x340>)
 8007f62:	681a      	ldr	r2, [r3, #0]
 8007f64:	4bae      	ldr	r3, [pc, #696]	@ (8008220 <HAL_RCC_OscConfig+0x340>)
 8007f66:	49af      	ldr	r1, [pc, #700]	@ (8008224 <HAL_RCC_OscConfig+0x344>)
 8007f68:	400a      	ands	r2, r1
 8007f6a:	601a      	str	r2, [r3, #0]
 8007f6c:	4bac      	ldr	r3, [pc, #688]	@ (8008220 <HAL_RCC_OscConfig+0x340>)
 8007f6e:	681a      	ldr	r2, [r3, #0]
 8007f70:	4bab      	ldr	r3, [pc, #684]	@ (8008220 <HAL_RCC_OscConfig+0x340>)
 8007f72:	49ad      	ldr	r1, [pc, #692]	@ (8008228 <HAL_RCC_OscConfig+0x348>)
 8007f74:	400a      	ands	r2, r1
 8007f76:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	685b      	ldr	r3, [r3, #4]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d014      	beq.n	8007faa <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f80:	f7fc fe2e 	bl	8004be0 <HAL_GetTick>
 8007f84:	0003      	movs	r3, r0
 8007f86:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007f88:	e008      	b.n	8007f9c <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8007f8a:	f7fc fe29 	bl	8004be0 <HAL_GetTick>
 8007f8e:	0002      	movs	r2, r0
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	1ad3      	subs	r3, r2, r3
 8007f94:	2b64      	cmp	r3, #100	@ 0x64
 8007f96:	d901      	bls.n	8007f9c <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8007f98:	2303      	movs	r3, #3
 8007f9a:	e1ba      	b.n	8008312 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007f9c:	4ba0      	ldr	r3, [pc, #640]	@ (8008220 <HAL_RCC_OscConfig+0x340>)
 8007f9e:	681a      	ldr	r2, [r3, #0]
 8007fa0:	2380      	movs	r3, #128	@ 0x80
 8007fa2:	029b      	lsls	r3, r3, #10
 8007fa4:	4013      	ands	r3, r2
 8007fa6:	d0f0      	beq.n	8007f8a <HAL_RCC_OscConfig+0xaa>
 8007fa8:	e013      	b.n	8007fd2 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007faa:	f7fc fe19 	bl	8004be0 <HAL_GetTick>
 8007fae:	0003      	movs	r3, r0
 8007fb0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007fb2:	e008      	b.n	8007fc6 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8007fb4:	f7fc fe14 	bl	8004be0 <HAL_GetTick>
 8007fb8:	0002      	movs	r2, r0
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	1ad3      	subs	r3, r2, r3
 8007fbe:	2b64      	cmp	r3, #100	@ 0x64
 8007fc0:	d901      	bls.n	8007fc6 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8007fc2:	2303      	movs	r3, #3
 8007fc4:	e1a5      	b.n	8008312 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007fc6:	4b96      	ldr	r3, [pc, #600]	@ (8008220 <HAL_RCC_OscConfig+0x340>)
 8007fc8:	681a      	ldr	r2, [r3, #0]
 8007fca:	2380      	movs	r3, #128	@ 0x80
 8007fcc:	029b      	lsls	r3, r3, #10
 8007fce:	4013      	ands	r3, r2
 8007fd0:	d1f0      	bne.n	8007fb4 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	2202      	movs	r2, #2
 8007fd8:	4013      	ands	r3, r2
 8007fda:	d100      	bne.n	8007fde <HAL_RCC_OscConfig+0xfe>
 8007fdc:	e086      	b.n	80080ec <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007fde:	4b90      	ldr	r3, [pc, #576]	@ (8008220 <HAL_RCC_OscConfig+0x340>)
 8007fe0:	689b      	ldr	r3, [r3, #8]
 8007fe2:	2238      	movs	r2, #56	@ 0x38
 8007fe4:	4013      	ands	r3, r2
 8007fe6:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d12f      	bne.n	800804e <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	68db      	ldr	r3, [r3, #12]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d101      	bne.n	8007ffa <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	e18b      	b.n	8008312 <HAL_RCC_OscConfig+0x432>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ffa:	4b89      	ldr	r3, [pc, #548]	@ (8008220 <HAL_RCC_OscConfig+0x340>)
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	4a8b      	ldr	r2, [pc, #556]	@ (800822c <HAL_RCC_OscConfig+0x34c>)
 8008000:	4013      	ands	r3, r2
 8008002:	0019      	movs	r1, r3
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	695b      	ldr	r3, [r3, #20]
 8008008:	021a      	lsls	r2, r3, #8
 800800a:	4b85      	ldr	r3, [pc, #532]	@ (8008220 <HAL_RCC_OscConfig+0x340>)
 800800c:	430a      	orrs	r2, r1
 800800e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d112      	bne.n	800803c <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8008016:	4b82      	ldr	r3, [pc, #520]	@ (8008220 <HAL_RCC_OscConfig+0x340>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a85      	ldr	r2, [pc, #532]	@ (8008230 <HAL_RCC_OscConfig+0x350>)
 800801c:	4013      	ands	r3, r2
 800801e:	0019      	movs	r1, r3
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	691a      	ldr	r2, [r3, #16]
 8008024:	4b7e      	ldr	r3, [pc, #504]	@ (8008220 <HAL_RCC_OscConfig+0x340>)
 8008026:	430a      	orrs	r2, r1
 8008028:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800802a:	4b7d      	ldr	r3, [pc, #500]	@ (8008220 <HAL_RCC_OscConfig+0x340>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	0adb      	lsrs	r3, r3, #11
 8008030:	2207      	movs	r2, #7
 8008032:	4013      	ands	r3, r2
 8008034:	4a7f      	ldr	r2, [pc, #508]	@ (8008234 <HAL_RCC_OscConfig+0x354>)
 8008036:	40da      	lsrs	r2, r3
 8008038:	4b7f      	ldr	r3, [pc, #508]	@ (8008238 <HAL_RCC_OscConfig+0x358>)
 800803a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800803c:	4b7f      	ldr	r3, [pc, #508]	@ (800823c <HAL_RCC_OscConfig+0x35c>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	0018      	movs	r0, r3
 8008042:	f7fc fd71 	bl	8004b28 <HAL_InitTick>
 8008046:	1e03      	subs	r3, r0, #0
 8008048:	d050      	beq.n	80080ec <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 800804a:	2301      	movs	r3, #1
 800804c:	e161      	b.n	8008312 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	68db      	ldr	r3, [r3, #12]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d030      	beq.n	80080b8 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8008056:	4b72      	ldr	r3, [pc, #456]	@ (8008220 <HAL_RCC_OscConfig+0x340>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a75      	ldr	r2, [pc, #468]	@ (8008230 <HAL_RCC_OscConfig+0x350>)
 800805c:	4013      	ands	r3, r2
 800805e:	0019      	movs	r1, r3
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	691a      	ldr	r2, [r3, #16]
 8008064:	4b6e      	ldr	r3, [pc, #440]	@ (8008220 <HAL_RCC_OscConfig+0x340>)
 8008066:	430a      	orrs	r2, r1
 8008068:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 800806a:	4b6d      	ldr	r3, [pc, #436]	@ (8008220 <HAL_RCC_OscConfig+0x340>)
 800806c:	681a      	ldr	r2, [r3, #0]
 800806e:	4b6c      	ldr	r3, [pc, #432]	@ (8008220 <HAL_RCC_OscConfig+0x340>)
 8008070:	2180      	movs	r1, #128	@ 0x80
 8008072:	0049      	lsls	r1, r1, #1
 8008074:	430a      	orrs	r2, r1
 8008076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008078:	f7fc fdb2 	bl	8004be0 <HAL_GetTick>
 800807c:	0003      	movs	r3, r0
 800807e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008080:	e008      	b.n	8008094 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8008082:	f7fc fdad 	bl	8004be0 <HAL_GetTick>
 8008086:	0002      	movs	r2, r0
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	1ad3      	subs	r3, r2, r3
 800808c:	2b02      	cmp	r3, #2
 800808e:	d901      	bls.n	8008094 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8008090:	2303      	movs	r3, #3
 8008092:	e13e      	b.n	8008312 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008094:	4b62      	ldr	r3, [pc, #392]	@ (8008220 <HAL_RCC_OscConfig+0x340>)
 8008096:	681a      	ldr	r2, [r3, #0]
 8008098:	2380      	movs	r3, #128	@ 0x80
 800809a:	00db      	lsls	r3, r3, #3
 800809c:	4013      	ands	r3, r2
 800809e:	d0f0      	beq.n	8008082 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080a0:	4b5f      	ldr	r3, [pc, #380]	@ (8008220 <HAL_RCC_OscConfig+0x340>)
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	4a61      	ldr	r2, [pc, #388]	@ (800822c <HAL_RCC_OscConfig+0x34c>)
 80080a6:	4013      	ands	r3, r2
 80080a8:	0019      	movs	r1, r3
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	695b      	ldr	r3, [r3, #20]
 80080ae:	021a      	lsls	r2, r3, #8
 80080b0:	4b5b      	ldr	r3, [pc, #364]	@ (8008220 <HAL_RCC_OscConfig+0x340>)
 80080b2:	430a      	orrs	r2, r1
 80080b4:	605a      	str	r2, [r3, #4]
 80080b6:	e019      	b.n	80080ec <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 80080b8:	4b59      	ldr	r3, [pc, #356]	@ (8008220 <HAL_RCC_OscConfig+0x340>)
 80080ba:	681a      	ldr	r2, [r3, #0]
 80080bc:	4b58      	ldr	r3, [pc, #352]	@ (8008220 <HAL_RCC_OscConfig+0x340>)
 80080be:	4960      	ldr	r1, [pc, #384]	@ (8008240 <HAL_RCC_OscConfig+0x360>)
 80080c0:	400a      	ands	r2, r1
 80080c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080c4:	f7fc fd8c 	bl	8004be0 <HAL_GetTick>
 80080c8:	0003      	movs	r3, r0
 80080ca:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80080cc:	e008      	b.n	80080e0 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80080ce:	f7fc fd87 	bl	8004be0 <HAL_GetTick>
 80080d2:	0002      	movs	r2, r0
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	1ad3      	subs	r3, r2, r3
 80080d8:	2b02      	cmp	r3, #2
 80080da:	d901      	bls.n	80080e0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80080dc:	2303      	movs	r3, #3
 80080de:	e118      	b.n	8008312 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80080e0:	4b4f      	ldr	r3, [pc, #316]	@ (8008220 <HAL_RCC_OscConfig+0x340>)
 80080e2:	681a      	ldr	r2, [r3, #0]
 80080e4:	2380      	movs	r3, #128	@ 0x80
 80080e6:	00db      	lsls	r3, r3, #3
 80080e8:	4013      	ands	r3, r2
 80080ea:	d1f0      	bne.n	80080ce <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	2208      	movs	r2, #8
 80080f2:	4013      	ands	r3, r2
 80080f4:	d042      	beq.n	800817c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80080f6:	4b4a      	ldr	r3, [pc, #296]	@ (8008220 <HAL_RCC_OscConfig+0x340>)
 80080f8:	689b      	ldr	r3, [r3, #8]
 80080fa:	2238      	movs	r2, #56	@ 0x38
 80080fc:	4013      	ands	r3, r2
 80080fe:	2b18      	cmp	r3, #24
 8008100:	d105      	bne.n	800810e <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	699b      	ldr	r3, [r3, #24]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d138      	bne.n	800817c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800810a:	2301      	movs	r3, #1
 800810c:	e101      	b.n	8008312 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	699b      	ldr	r3, [r3, #24]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d019      	beq.n	800814a <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8008116:	4b42      	ldr	r3, [pc, #264]	@ (8008220 <HAL_RCC_OscConfig+0x340>)
 8008118:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800811a:	4b41      	ldr	r3, [pc, #260]	@ (8008220 <HAL_RCC_OscConfig+0x340>)
 800811c:	2101      	movs	r1, #1
 800811e:	430a      	orrs	r2, r1
 8008120:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008122:	f7fc fd5d 	bl	8004be0 <HAL_GetTick>
 8008126:	0003      	movs	r3, r0
 8008128:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800812a:	e008      	b.n	800813e <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800812c:	f7fc fd58 	bl	8004be0 <HAL_GetTick>
 8008130:	0002      	movs	r2, r0
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	1ad3      	subs	r3, r2, r3
 8008136:	2b02      	cmp	r3, #2
 8008138:	d901      	bls.n	800813e <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 800813a:	2303      	movs	r3, #3
 800813c:	e0e9      	b.n	8008312 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800813e:	4b38      	ldr	r3, [pc, #224]	@ (8008220 <HAL_RCC_OscConfig+0x340>)
 8008140:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008142:	2202      	movs	r2, #2
 8008144:	4013      	ands	r3, r2
 8008146:	d0f1      	beq.n	800812c <HAL_RCC_OscConfig+0x24c>
 8008148:	e018      	b.n	800817c <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800814a:	4b35      	ldr	r3, [pc, #212]	@ (8008220 <HAL_RCC_OscConfig+0x340>)
 800814c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800814e:	4b34      	ldr	r3, [pc, #208]	@ (8008220 <HAL_RCC_OscConfig+0x340>)
 8008150:	2101      	movs	r1, #1
 8008152:	438a      	bics	r2, r1
 8008154:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008156:	f7fc fd43 	bl	8004be0 <HAL_GetTick>
 800815a:	0003      	movs	r3, r0
 800815c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800815e:	e008      	b.n	8008172 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8008160:	f7fc fd3e 	bl	8004be0 <HAL_GetTick>
 8008164:	0002      	movs	r2, r0
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	1ad3      	subs	r3, r2, r3
 800816a:	2b02      	cmp	r3, #2
 800816c:	d901      	bls.n	8008172 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 800816e:	2303      	movs	r3, #3
 8008170:	e0cf      	b.n	8008312 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8008172:	4b2b      	ldr	r3, [pc, #172]	@ (8008220 <HAL_RCC_OscConfig+0x340>)
 8008174:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008176:	2202      	movs	r2, #2
 8008178:	4013      	ands	r3, r2
 800817a:	d1f1      	bne.n	8008160 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	2204      	movs	r2, #4
 8008182:	4013      	ands	r3, r2
 8008184:	d100      	bne.n	8008188 <HAL_RCC_OscConfig+0x2a8>
 8008186:	e084      	b.n	8008292 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008188:	230f      	movs	r3, #15
 800818a:	18fb      	adds	r3, r7, r3
 800818c:	2200      	movs	r2, #0
 800818e:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8008190:	4b23      	ldr	r3, [pc, #140]	@ (8008220 <HAL_RCC_OscConfig+0x340>)
 8008192:	689b      	ldr	r3, [r3, #8]
 8008194:	2238      	movs	r2, #56	@ 0x38
 8008196:	4013      	ands	r3, r2
 8008198:	2b20      	cmp	r3, #32
 800819a:	d106      	bne.n	80081aa <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	689b      	ldr	r3, [r3, #8]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d000      	beq.n	80081a6 <HAL_RCC_OscConfig+0x2c6>
 80081a4:	e075      	b.n	8008292 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 80081a6:	2301      	movs	r3, #1
 80081a8:	e0b3      	b.n	8008312 <HAL_RCC_OscConfig+0x432>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	689b      	ldr	r3, [r3, #8]
 80081ae:	2b01      	cmp	r3, #1
 80081b0:	d106      	bne.n	80081c0 <HAL_RCC_OscConfig+0x2e0>
 80081b2:	4b1b      	ldr	r3, [pc, #108]	@ (8008220 <HAL_RCC_OscConfig+0x340>)
 80081b4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80081b6:	4b1a      	ldr	r3, [pc, #104]	@ (8008220 <HAL_RCC_OscConfig+0x340>)
 80081b8:	2101      	movs	r1, #1
 80081ba:	430a      	orrs	r2, r1
 80081bc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80081be:	e01c      	b.n	80081fa <HAL_RCC_OscConfig+0x31a>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	689b      	ldr	r3, [r3, #8]
 80081c4:	2b05      	cmp	r3, #5
 80081c6:	d10c      	bne.n	80081e2 <HAL_RCC_OscConfig+0x302>
 80081c8:	4b15      	ldr	r3, [pc, #84]	@ (8008220 <HAL_RCC_OscConfig+0x340>)
 80081ca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80081cc:	4b14      	ldr	r3, [pc, #80]	@ (8008220 <HAL_RCC_OscConfig+0x340>)
 80081ce:	2104      	movs	r1, #4
 80081d0:	430a      	orrs	r2, r1
 80081d2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80081d4:	4b12      	ldr	r3, [pc, #72]	@ (8008220 <HAL_RCC_OscConfig+0x340>)
 80081d6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80081d8:	4b11      	ldr	r3, [pc, #68]	@ (8008220 <HAL_RCC_OscConfig+0x340>)
 80081da:	2101      	movs	r1, #1
 80081dc:	430a      	orrs	r2, r1
 80081de:	65da      	str	r2, [r3, #92]	@ 0x5c
 80081e0:	e00b      	b.n	80081fa <HAL_RCC_OscConfig+0x31a>
 80081e2:	4b0f      	ldr	r3, [pc, #60]	@ (8008220 <HAL_RCC_OscConfig+0x340>)
 80081e4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80081e6:	4b0e      	ldr	r3, [pc, #56]	@ (8008220 <HAL_RCC_OscConfig+0x340>)
 80081e8:	2101      	movs	r1, #1
 80081ea:	438a      	bics	r2, r1
 80081ec:	65da      	str	r2, [r3, #92]	@ 0x5c
 80081ee:	4b0c      	ldr	r3, [pc, #48]	@ (8008220 <HAL_RCC_OscConfig+0x340>)
 80081f0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80081f2:	4b0b      	ldr	r3, [pc, #44]	@ (8008220 <HAL_RCC_OscConfig+0x340>)
 80081f4:	2104      	movs	r1, #4
 80081f6:	438a      	bics	r2, r1
 80081f8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	689b      	ldr	r3, [r3, #8]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d028      	beq.n	8008254 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008202:	f7fc fced 	bl	8004be0 <HAL_GetTick>
 8008206:	0003      	movs	r3, r0
 8008208:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800820a:	e01d      	b.n	8008248 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800820c:	f7fc fce8 	bl	8004be0 <HAL_GetTick>
 8008210:	0002      	movs	r2, r0
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	1ad3      	subs	r3, r2, r3
 8008216:	4a0b      	ldr	r2, [pc, #44]	@ (8008244 <HAL_RCC_OscConfig+0x364>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d915      	bls.n	8008248 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 800821c:	2303      	movs	r3, #3
 800821e:	e078      	b.n	8008312 <HAL_RCC_OscConfig+0x432>
 8008220:	40021000 	.word	0x40021000
 8008224:	fffeffff 	.word	0xfffeffff
 8008228:	fffbffff 	.word	0xfffbffff
 800822c:	ffff80ff 	.word	0xffff80ff
 8008230:	ffffc7ff 	.word	0xffffc7ff
 8008234:	02dc6c00 	.word	0x02dc6c00
 8008238:	200000b8 	.word	0x200000b8
 800823c:	200000bc 	.word	0x200000bc
 8008240:	fffffeff 	.word	0xfffffeff
 8008244:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8008248:	4b34      	ldr	r3, [pc, #208]	@ (800831c <HAL_RCC_OscConfig+0x43c>)
 800824a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800824c:	2202      	movs	r2, #2
 800824e:	4013      	ands	r3, r2
 8008250:	d0dc      	beq.n	800820c <HAL_RCC_OscConfig+0x32c>
 8008252:	e013      	b.n	800827c <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008254:	f7fc fcc4 	bl	8004be0 <HAL_GetTick>
 8008258:	0003      	movs	r3, r0
 800825a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800825c:	e009      	b.n	8008272 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800825e:	f7fc fcbf 	bl	8004be0 <HAL_GetTick>
 8008262:	0002      	movs	r2, r0
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	1ad3      	subs	r3, r2, r3
 8008268:	4a2d      	ldr	r2, [pc, #180]	@ (8008320 <HAL_RCC_OscConfig+0x440>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d901      	bls.n	8008272 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 800826e:	2303      	movs	r3, #3
 8008270:	e04f      	b.n	8008312 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8008272:	4b2a      	ldr	r3, [pc, #168]	@ (800831c <HAL_RCC_OscConfig+0x43c>)
 8008274:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008276:	2202      	movs	r2, #2
 8008278:	4013      	ands	r3, r2
 800827a:	d1f0      	bne.n	800825e <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800827c:	230f      	movs	r3, #15
 800827e:	18fb      	adds	r3, r7, r3
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	2b01      	cmp	r3, #1
 8008284:	d105      	bne.n	8008292 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8008286:	4b25      	ldr	r3, [pc, #148]	@ (800831c <HAL_RCC_OscConfig+0x43c>)
 8008288:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800828a:	4b24      	ldr	r3, [pc, #144]	@ (800831c <HAL_RCC_OscConfig+0x43c>)
 800828c:	4925      	ldr	r1, [pc, #148]	@ (8008324 <HAL_RCC_OscConfig+0x444>)
 800828e:	400a      	ands	r2, r1
 8008290:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_CR_HSIUSB48ON)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	2210      	movs	r2, #16
 8008298:	4013      	ands	r3, r2
 800829a:	d039      	beq.n	8008310 <HAL_RCC_OscConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	69db      	ldr	r3, [r3, #28]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d01b      	beq.n	80082dc <HAL_RCC_OscConfig+0x3fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80082a4:	4b1d      	ldr	r3, [pc, #116]	@ (800831c <HAL_RCC_OscConfig+0x43c>)
 80082a6:	681a      	ldr	r2, [r3, #0]
 80082a8:	4b1c      	ldr	r3, [pc, #112]	@ (800831c <HAL_RCC_OscConfig+0x43c>)
 80082aa:	2180      	movs	r1, #128	@ 0x80
 80082ac:	03c9      	lsls	r1, r1, #15
 80082ae:	430a      	orrs	r2, r1
 80082b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082b2:	f7fc fc95 	bl	8004be0 <HAL_GetTick>
 80082b6:	0003      	movs	r3, r0
 80082b8:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 80082ba:	e008      	b.n	80082ce <HAL_RCC_OscConfig+0x3ee>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80082bc:	f7fc fc90 	bl	8004be0 <HAL_GetTick>
 80082c0:	0002      	movs	r2, r0
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	1ad3      	subs	r3, r2, r3
 80082c6:	2b02      	cmp	r3, #2
 80082c8:	d901      	bls.n	80082ce <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 80082ca:	2303      	movs	r3, #3
 80082cc:	e021      	b.n	8008312 <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 80082ce:	4b13      	ldr	r3, [pc, #76]	@ (800831c <HAL_RCC_OscConfig+0x43c>)
 80082d0:	681a      	ldr	r2, [r3, #0]
 80082d2:	2380      	movs	r3, #128	@ 0x80
 80082d4:	041b      	lsls	r3, r3, #16
 80082d6:	4013      	ands	r3, r2
 80082d8:	d0f0      	beq.n	80082bc <HAL_RCC_OscConfig+0x3dc>
 80082da:	e019      	b.n	8008310 <HAL_RCC_OscConfig+0x430>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80082dc:	4b0f      	ldr	r3, [pc, #60]	@ (800831c <HAL_RCC_OscConfig+0x43c>)
 80082de:	681a      	ldr	r2, [r3, #0]
 80082e0:	4b0e      	ldr	r3, [pc, #56]	@ (800831c <HAL_RCC_OscConfig+0x43c>)
 80082e2:	4911      	ldr	r1, [pc, #68]	@ (8008328 <HAL_RCC_OscConfig+0x448>)
 80082e4:	400a      	ands	r2, r1
 80082e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082e8:	f7fc fc7a 	bl	8004be0 <HAL_GetTick>
 80082ec:	0003      	movs	r3, r0
 80082ee:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 80082f0:	e008      	b.n	8008304 <HAL_RCC_OscConfig+0x424>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80082f2:	f7fc fc75 	bl	8004be0 <HAL_GetTick>
 80082f6:	0002      	movs	r2, r0
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	1ad3      	subs	r3, r2, r3
 80082fc:	2b02      	cmp	r3, #2
 80082fe:	d901      	bls.n	8008304 <HAL_RCC_OscConfig+0x424>
        {
          return HAL_TIMEOUT;
 8008300:	2303      	movs	r3, #3
 8008302:	e006      	b.n	8008312 <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 8008304:	4b05      	ldr	r3, [pc, #20]	@ (800831c <HAL_RCC_OscConfig+0x43c>)
 8008306:	681a      	ldr	r2, [r3, #0]
 8008308:	2380      	movs	r3, #128	@ 0x80
 800830a:	041b      	lsls	r3, r3, #16
 800830c:	4013      	ands	r3, r2
 800830e:	d1f0      	bne.n	80082f2 <HAL_RCC_OscConfig+0x412>
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8008310:	2300      	movs	r3, #0
}
 8008312:	0018      	movs	r0, r3
 8008314:	46bd      	mov	sp, r7
 8008316:	b006      	add	sp, #24
 8008318:	bd80      	pop	{r7, pc}
 800831a:	46c0      	nop			@ (mov r8, r8)
 800831c:	40021000 	.word	0x40021000
 8008320:	00001388 	.word	0x00001388
 8008324:	efffffff 	.word	0xefffffff
 8008328:	ffbfffff 	.word	0xffbfffff

0800832c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b084      	sub	sp, #16
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d101      	bne.n	8008340 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800833c:	2301      	movs	r3, #1
 800833e:	e0f6      	b.n	800852e <HAL_RCC_ClockConfig+0x202>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008340:	4b7d      	ldr	r3, [pc, #500]	@ (8008538 <HAL_RCC_ClockConfig+0x20c>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	2207      	movs	r2, #7
 8008346:	4013      	ands	r3, r2
 8008348:	683a      	ldr	r2, [r7, #0]
 800834a:	429a      	cmp	r2, r3
 800834c:	d91e      	bls.n	800838c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800834e:	4b7a      	ldr	r3, [pc, #488]	@ (8008538 <HAL_RCC_ClockConfig+0x20c>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	2207      	movs	r2, #7
 8008354:	4393      	bics	r3, r2
 8008356:	0019      	movs	r1, r3
 8008358:	4b77      	ldr	r3, [pc, #476]	@ (8008538 <HAL_RCC_ClockConfig+0x20c>)
 800835a:	683a      	ldr	r2, [r7, #0]
 800835c:	430a      	orrs	r2, r1
 800835e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008360:	f7fc fc3e 	bl	8004be0 <HAL_GetTick>
 8008364:	0003      	movs	r3, r0
 8008366:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008368:	e009      	b.n	800837e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800836a:	f7fc fc39 	bl	8004be0 <HAL_GetTick>
 800836e:	0002      	movs	r2, r0
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	1ad3      	subs	r3, r2, r3
 8008374:	4a71      	ldr	r2, [pc, #452]	@ (800853c <HAL_RCC_ClockConfig+0x210>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d901      	bls.n	800837e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800837a:	2303      	movs	r3, #3
 800837c:	e0d7      	b.n	800852e <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800837e:	4b6e      	ldr	r3, [pc, #440]	@ (8008538 <HAL_RCC_ClockConfig+0x20c>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	2207      	movs	r2, #7
 8008384:	4013      	ands	r3, r2
 8008386:	683a      	ldr	r2, [r7, #0]
 8008388:	429a      	cmp	r2, r3
 800838a:	d1ee      	bne.n	800836a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	2202      	movs	r2, #2
 8008392:	4013      	ands	r3, r2
 8008394:	d017      	beq.n	80083c6 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	2204      	movs	r2, #4
 800839c:	4013      	ands	r3, r2
 800839e:	d008      	beq.n	80083b2 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80083a0:	4b67      	ldr	r3, [pc, #412]	@ (8008540 <HAL_RCC_ClockConfig+0x214>)
 80083a2:	689b      	ldr	r3, [r3, #8]
 80083a4:	4a67      	ldr	r2, [pc, #412]	@ (8008544 <HAL_RCC_ClockConfig+0x218>)
 80083a6:	401a      	ands	r2, r3
 80083a8:	4b65      	ldr	r3, [pc, #404]	@ (8008540 <HAL_RCC_ClockConfig+0x214>)
 80083aa:	21b0      	movs	r1, #176	@ 0xb0
 80083ac:	0109      	lsls	r1, r1, #4
 80083ae:	430a      	orrs	r2, r1
 80083b0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80083b2:	4b63      	ldr	r3, [pc, #396]	@ (8008540 <HAL_RCC_ClockConfig+0x214>)
 80083b4:	689b      	ldr	r3, [r3, #8]
 80083b6:	4a64      	ldr	r2, [pc, #400]	@ (8008548 <HAL_RCC_ClockConfig+0x21c>)
 80083b8:	4013      	ands	r3, r2
 80083ba:	0019      	movs	r1, r3
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	68da      	ldr	r2, [r3, #12]
 80083c0:	4b5f      	ldr	r3, [pc, #380]	@ (8008540 <HAL_RCC_ClockConfig+0x214>)
 80083c2:	430a      	orrs	r2, r1
 80083c4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	2201      	movs	r2, #1
 80083cc:	4013      	ands	r3, r2
 80083ce:	d100      	bne.n	80083d2 <HAL_RCC_ClockConfig+0xa6>
 80083d0:	e061      	b.n	8008496 <HAL_RCC_ClockConfig+0x16a>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 80083d2:	4b5b      	ldr	r3, [pc, #364]	@ (8008540 <HAL_RCC_ClockConfig+0x214>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	221c      	movs	r2, #28
 80083d8:	4393      	bics	r3, r2
 80083da:	0019      	movs	r1, r3
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	689a      	ldr	r2, [r3, #8]
 80083e0:	4b57      	ldr	r3, [pc, #348]	@ (8008540 <HAL_RCC_ClockConfig+0x214>)
 80083e2:	430a      	orrs	r2, r1
 80083e4:	601a      	str	r2, [r3, #0]
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	2b01      	cmp	r3, #1
 80083ec:	d107      	bne.n	80083fe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80083ee:	4b54      	ldr	r3, [pc, #336]	@ (8008540 <HAL_RCC_ClockConfig+0x214>)
 80083f0:	681a      	ldr	r2, [r3, #0]
 80083f2:	2380      	movs	r3, #128	@ 0x80
 80083f4:	029b      	lsls	r3, r3, #10
 80083f6:	4013      	ands	r3, r2
 80083f8:	d12b      	bne.n	8008452 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 80083fa:	2301      	movs	r3, #1
 80083fc:	e097      	b.n	800852e <HAL_RCC_ClockConfig+0x202>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d107      	bne.n	8008416 <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008406:	4b4e      	ldr	r3, [pc, #312]	@ (8008540 <HAL_RCC_ClockConfig+0x214>)
 8008408:	681a      	ldr	r2, [r3, #0]
 800840a:	2380      	movs	r3, #128	@ 0x80
 800840c:	00db      	lsls	r3, r3, #3
 800840e:	4013      	ands	r3, r2
 8008410:	d11f      	bne.n	8008452 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8008412:	2301      	movs	r3, #1
 8008414:	e08b      	b.n	800852e <HAL_RCC_ClockConfig+0x202>
      }
    }
#if defined(RCC_HSI48_SUPPORT)
    /* HSIUSB48 is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSIUSB48)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	2b02      	cmp	r3, #2
 800841c:	d107      	bne.n	800842e <HAL_RCC_ClockConfig+0x102>
    {
      /* Check the HSIUSB48 ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 800841e:	4b48      	ldr	r3, [pc, #288]	@ (8008540 <HAL_RCC_ClockConfig+0x214>)
 8008420:	681a      	ldr	r2, [r3, #0]
 8008422:	2380      	movs	r3, #128	@ 0x80
 8008424:	041b      	lsls	r3, r3, #16
 8008426:	4013      	ands	r3, r2
 8008428:	d113      	bne.n	8008452 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 800842a:	2301      	movs	r3, #1
 800842c:	e07f      	b.n	800852e <HAL_RCC_ClockConfig+0x202>
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	2b03      	cmp	r3, #3
 8008434:	d106      	bne.n	8008444 <HAL_RCC_ClockConfig+0x118>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8008436:	4b42      	ldr	r3, [pc, #264]	@ (8008540 <HAL_RCC_ClockConfig+0x214>)
 8008438:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800843a:	2202      	movs	r2, #2
 800843c:	4013      	ands	r3, r2
 800843e:	d108      	bne.n	8008452 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8008440:	2301      	movs	r3, #1
 8008442:	e074      	b.n	800852e <HAL_RCC_ClockConfig+0x202>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8008444:	4b3e      	ldr	r3, [pc, #248]	@ (8008540 <HAL_RCC_ClockConfig+0x214>)
 8008446:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008448:	2202      	movs	r2, #2
 800844a:	4013      	ands	r3, r2
 800844c:	d101      	bne.n	8008452 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 800844e:	2301      	movs	r3, #1
 8008450:	e06d      	b.n	800852e <HAL_RCC_ClockConfig+0x202>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008452:	4b3b      	ldr	r3, [pc, #236]	@ (8008540 <HAL_RCC_ClockConfig+0x214>)
 8008454:	689b      	ldr	r3, [r3, #8]
 8008456:	2207      	movs	r2, #7
 8008458:	4393      	bics	r3, r2
 800845a:	0019      	movs	r1, r3
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	685a      	ldr	r2, [r3, #4]
 8008460:	4b37      	ldr	r3, [pc, #220]	@ (8008540 <HAL_RCC_ClockConfig+0x214>)
 8008462:	430a      	orrs	r2, r1
 8008464:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008466:	f7fc fbbb 	bl	8004be0 <HAL_GetTick>
 800846a:	0003      	movs	r3, r0
 800846c:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800846e:	e009      	b.n	8008484 <HAL_RCC_ClockConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8008470:	f7fc fbb6 	bl	8004be0 <HAL_GetTick>
 8008474:	0002      	movs	r2, r0
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	1ad3      	subs	r3, r2, r3
 800847a:	4a30      	ldr	r2, [pc, #192]	@ (800853c <HAL_RCC_ClockConfig+0x210>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d901      	bls.n	8008484 <HAL_RCC_ClockConfig+0x158>
      {
        return HAL_TIMEOUT;
 8008480:	2303      	movs	r3, #3
 8008482:	e054      	b.n	800852e <HAL_RCC_ClockConfig+0x202>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008484:	4b2e      	ldr	r3, [pc, #184]	@ (8008540 <HAL_RCC_ClockConfig+0x214>)
 8008486:	689b      	ldr	r3, [r3, #8]
 8008488:	2238      	movs	r2, #56	@ 0x38
 800848a:	401a      	ands	r2, r3
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	00db      	lsls	r3, r3, #3
 8008492:	429a      	cmp	r2, r3
 8008494:	d1ec      	bne.n	8008470 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008496:	4b28      	ldr	r3, [pc, #160]	@ (8008538 <HAL_RCC_ClockConfig+0x20c>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	2207      	movs	r2, #7
 800849c:	4013      	ands	r3, r2
 800849e:	683a      	ldr	r2, [r7, #0]
 80084a0:	429a      	cmp	r2, r3
 80084a2:	d21e      	bcs.n	80084e2 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80084a4:	4b24      	ldr	r3, [pc, #144]	@ (8008538 <HAL_RCC_ClockConfig+0x20c>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	2207      	movs	r2, #7
 80084aa:	4393      	bics	r3, r2
 80084ac:	0019      	movs	r1, r3
 80084ae:	4b22      	ldr	r3, [pc, #136]	@ (8008538 <HAL_RCC_ClockConfig+0x20c>)
 80084b0:	683a      	ldr	r2, [r7, #0]
 80084b2:	430a      	orrs	r2, r1
 80084b4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80084b6:	f7fc fb93 	bl	8004be0 <HAL_GetTick>
 80084ba:	0003      	movs	r3, r0
 80084bc:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80084be:	e009      	b.n	80084d4 <HAL_RCC_ClockConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80084c0:	f7fc fb8e 	bl	8004be0 <HAL_GetTick>
 80084c4:	0002      	movs	r2, r0
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	1ad3      	subs	r3, r2, r3
 80084ca:	4a1c      	ldr	r2, [pc, #112]	@ (800853c <HAL_RCC_ClockConfig+0x210>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d901      	bls.n	80084d4 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_TIMEOUT;
 80084d0:	2303      	movs	r3, #3
 80084d2:	e02c      	b.n	800852e <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80084d4:	4b18      	ldr	r3, [pc, #96]	@ (8008538 <HAL_RCC_ClockConfig+0x20c>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	2207      	movs	r2, #7
 80084da:	4013      	ands	r3, r2
 80084dc:	683a      	ldr	r2, [r7, #0]
 80084de:	429a      	cmp	r2, r3
 80084e0:	d1ee      	bne.n	80084c0 <HAL_RCC_ClockConfig+0x194>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	2204      	movs	r2, #4
 80084e8:	4013      	ands	r3, r2
 80084ea:	d009      	beq.n	8008500 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80084ec:	4b14      	ldr	r3, [pc, #80]	@ (8008540 <HAL_RCC_ClockConfig+0x214>)
 80084ee:	689b      	ldr	r3, [r3, #8]
 80084f0:	4a16      	ldr	r2, [pc, #88]	@ (800854c <HAL_RCC_ClockConfig+0x220>)
 80084f2:	4013      	ands	r3, r2
 80084f4:	0019      	movs	r1, r3
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	691a      	ldr	r2, [r3, #16]
 80084fa:	4b11      	ldr	r3, [pc, #68]	@ (8008540 <HAL_RCC_ClockConfig+0x214>)
 80084fc:	430a      	orrs	r2, r1
 80084fe:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8008500:	f000 f82c 	bl	800855c <HAL_RCC_GetSysClockFreq>
 8008504:	0001      	movs	r1, r0
 8008506:	4b0e      	ldr	r3, [pc, #56]	@ (8008540 <HAL_RCC_ClockConfig+0x214>)
 8008508:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800850a:	0a1b      	lsrs	r3, r3, #8
 800850c:	220f      	movs	r2, #15
 800850e:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8008510:	4b0f      	ldr	r3, [pc, #60]	@ (8008550 <HAL_RCC_ClockConfig+0x224>)
 8008512:	0092      	lsls	r2, r2, #2
 8008514:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8008516:	221f      	movs	r2, #31
 8008518:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800851a:	000a      	movs	r2, r1
 800851c:	40da      	lsrs	r2, r3
 800851e:	4b0d      	ldr	r3, [pc, #52]	@ (8008554 <HAL_RCC_ClockConfig+0x228>)
 8008520:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008522:	4b0d      	ldr	r3, [pc, #52]	@ (8008558 <HAL_RCC_ClockConfig+0x22c>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	0018      	movs	r0, r3
 8008528:	f7fc fafe 	bl	8004b28 <HAL_InitTick>
 800852c:	0003      	movs	r3, r0
}
 800852e:	0018      	movs	r0, r3
 8008530:	46bd      	mov	sp, r7
 8008532:	b004      	add	sp, #16
 8008534:	bd80      	pop	{r7, pc}
 8008536:	46c0      	nop			@ (mov r8, r8)
 8008538:	40022000 	.word	0x40022000
 800853c:	00001388 	.word	0x00001388
 8008540:	40021000 	.word	0x40021000
 8008544:	ffff84ff 	.word	0xffff84ff
 8008548:	fffff0ff 	.word	0xfffff0ff
 800854c:	ffff8fff 	.word	0xffff8fff
 8008550:	0800c5ac 	.word	0x0800c5ac
 8008554:	200000b8 	.word	0x200000b8
 8008558:	200000bc 	.word	0x200000bc

0800855c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b084      	sub	sp, #16
 8008560:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 8008562:	4b27      	ldr	r3, [pc, #156]	@ (8008600 <HAL_RCC_GetSysClockFreq+0xa4>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	089b      	lsrs	r3, r3, #2
 8008568:	2207      	movs	r2, #7
 800856a:	4013      	ands	r3, r2
 800856c:	3301      	adds	r3, #1
 800856e:	60bb      	str	r3, [r7, #8]
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008570:	4b23      	ldr	r3, [pc, #140]	@ (8008600 <HAL_RCC_GetSysClockFreq+0xa4>)
 8008572:	689b      	ldr	r3, [r3, #8]
 8008574:	2238      	movs	r2, #56	@ 0x38
 8008576:	4013      	ands	r3, r2
 8008578:	d10f      	bne.n	800859a <HAL_RCC_GetSysClockFreq+0x3e>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800857a:	4b21      	ldr	r3, [pc, #132]	@ (8008600 <HAL_RCC_GetSysClockFreq+0xa4>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	0adb      	lsrs	r3, r3, #11
 8008580:	2207      	movs	r2, #7
 8008582:	4013      	ands	r3, r2
 8008584:	2201      	movs	r2, #1
 8008586:	409a      	lsls	r2, r3
 8008588:	0013      	movs	r3, r2
 800858a:	607b      	str	r3, [r7, #4]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800858c:	6879      	ldr	r1, [r7, #4]
 800858e:	481d      	ldr	r0, [pc, #116]	@ (8008604 <HAL_RCC_GetSysClockFreq+0xa8>)
 8008590:	f7f7 fdba 	bl	8000108 <__udivsi3>
 8008594:	0003      	movs	r3, r0
 8008596:	60fb      	str	r3, [r7, #12]
 8008598:	e027      	b.n	80085ea <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800859a:	4b19      	ldr	r3, [pc, #100]	@ (8008600 <HAL_RCC_GetSysClockFreq+0xa4>)
 800859c:	689b      	ldr	r3, [r3, #8]
 800859e:	2238      	movs	r2, #56	@ 0x38
 80085a0:	4013      	ands	r3, r2
 80085a2:	2b08      	cmp	r3, #8
 80085a4:	d102      	bne.n	80085ac <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80085a6:	4b18      	ldr	r3, [pc, #96]	@ (8008608 <HAL_RCC_GetSysClockFreq+0xac>)
 80085a8:	60fb      	str	r3, [r7, #12]
 80085aa:	e01e      	b.n	80085ea <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80085ac:	4b14      	ldr	r3, [pc, #80]	@ (8008600 <HAL_RCC_GetSysClockFreq+0xa4>)
 80085ae:	689b      	ldr	r3, [r3, #8]
 80085b0:	2238      	movs	r2, #56	@ 0x38
 80085b2:	4013      	ands	r3, r2
 80085b4:	2b20      	cmp	r3, #32
 80085b6:	d103      	bne.n	80085c0 <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80085b8:	2380      	movs	r3, #128	@ 0x80
 80085ba:	021b      	lsls	r3, r3, #8
 80085bc:	60fb      	str	r3, [r7, #12]
 80085be:	e014      	b.n	80085ea <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80085c0:	4b0f      	ldr	r3, [pc, #60]	@ (8008600 <HAL_RCC_GetSysClockFreq+0xa4>)
 80085c2:	689b      	ldr	r3, [r3, #8]
 80085c4:	2238      	movs	r2, #56	@ 0x38
 80085c6:	4013      	ands	r3, r2
 80085c8:	2b18      	cmp	r3, #24
 80085ca:	d103      	bne.n	80085d4 <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80085cc:	23fa      	movs	r3, #250	@ 0xfa
 80085ce:	01db      	lsls	r3, r3, #7
 80085d0:	60fb      	str	r3, [r7, #12]
 80085d2:	e00a      	b.n	80085ea <HAL_RCC_GetSysClockFreq+0x8e>
  }
#if defined(RCC_HSI48_SUPPORT)
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI48)
 80085d4:	4b0a      	ldr	r3, [pc, #40]	@ (8008600 <HAL_RCC_GetSysClockFreq+0xa4>)
 80085d6:	689b      	ldr	r3, [r3, #8]
 80085d8:	2238      	movs	r2, #56	@ 0x38
 80085da:	4013      	ands	r3, r2
 80085dc:	2b10      	cmp	r3, #16
 80085de:	d102      	bne.n	80085e6 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    /* HSI48 used as system clock source */
    sysclockfreq = HSI48_VALUE;
 80085e0:	4b08      	ldr	r3, [pc, #32]	@ (8008604 <HAL_RCC_GetSysClockFreq+0xa8>)
 80085e2:	60fb      	str	r3, [r7, #12]
 80085e4:	e001      	b.n	80085ea <HAL_RCC_GetSysClockFreq+0x8e>
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 80085e6:	2300      	movs	r3, #0
 80085e8:	60fb      	str	r3, [r7, #12]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 80085ea:	68b9      	ldr	r1, [r7, #8]
 80085ec:	68f8      	ldr	r0, [r7, #12]
 80085ee:	f7f7 fd8b 	bl	8000108 <__udivsi3>
 80085f2:	0003      	movs	r3, r0
 80085f4:	60fb      	str	r3, [r7, #12]
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 80085f6:	68fb      	ldr	r3, [r7, #12]
}
 80085f8:	0018      	movs	r0, r3
 80085fa:	46bd      	mov	sp, r7
 80085fc:	b004      	add	sp, #16
 80085fe:	bd80      	pop	{r7, pc}
 8008600:	40021000 	.word	0x40021000
 8008604:	02dc6c00 	.word	0x02dc6c00
 8008608:	007a1200 	.word	0x007a1200

0800860c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8008610:	f7ff ffa4 	bl	800855c <HAL_RCC_GetSysClockFreq>
 8008614:	0001      	movs	r1, r0
 8008616:	4b09      	ldr	r3, [pc, #36]	@ (800863c <HAL_RCC_GetHCLKFreq+0x30>)
 8008618:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800861a:	0a1b      	lsrs	r3, r3, #8
 800861c:	220f      	movs	r2, #15
 800861e:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8008620:	4b07      	ldr	r3, [pc, #28]	@ (8008640 <HAL_RCC_GetHCLKFreq+0x34>)
 8008622:	0092      	lsls	r2, r2, #2
 8008624:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8008626:	221f      	movs	r2, #31
 8008628:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800862a:	000a      	movs	r2, r1
 800862c:	40da      	lsrs	r2, r3
 800862e:	4b05      	ldr	r3, [pc, #20]	@ (8008644 <HAL_RCC_GetHCLKFreq+0x38>)
 8008630:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 8008632:	4b04      	ldr	r3, [pc, #16]	@ (8008644 <HAL_RCC_GetHCLKFreq+0x38>)
 8008634:	681b      	ldr	r3, [r3, #0]
}
 8008636:	0018      	movs	r0, r3
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}
 800863c:	40021000 	.word	0x40021000
 8008640:	0800c5ac 	.word	0x0800c5ac
 8008644:	200000b8 	.word	0x200000b8

08008648 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 800864c:	f7ff ffde 	bl	800860c <HAL_RCC_GetHCLKFreq>
 8008650:	0001      	movs	r1, r0
 8008652:	4b07      	ldr	r3, [pc, #28]	@ (8008670 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008654:	689b      	ldr	r3, [r3, #8]
 8008656:	0b1b      	lsrs	r3, r3, #12
 8008658:	2207      	movs	r2, #7
 800865a:	401a      	ands	r2, r3
 800865c:	4b05      	ldr	r3, [pc, #20]	@ (8008674 <HAL_RCC_GetPCLK1Freq+0x2c>)
 800865e:	0092      	lsls	r2, r2, #2
 8008660:	58d3      	ldr	r3, [r2, r3]
 8008662:	221f      	movs	r2, #31
 8008664:	4013      	ands	r3, r2
 8008666:	40d9      	lsrs	r1, r3
 8008668:	000b      	movs	r3, r1
}
 800866a:	0018      	movs	r0, r3
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}
 8008670:	40021000 	.word	0x40021000
 8008674:	0800c5ec 	.word	0x0800c5ec

08008678 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b086      	sub	sp, #24
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8008680:	2313      	movs	r3, #19
 8008682:	18fb      	adds	r3, r7, r3
 8008684:	2200      	movs	r2, #0
 8008686:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008688:	2312      	movs	r3, #18
 800868a:	18fb      	adds	r3, r7, r3
 800868c:	2200      	movs	r2, #0
 800868e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	2240      	movs	r2, #64	@ 0x40
 8008696:	4013      	ands	r3, r2
 8008698:	d100      	bne.n	800869c <HAL_RCCEx_PeriphCLKConfig+0x24>
 800869a:	e079      	b.n	8008790 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 800869c:	2011      	movs	r0, #17
 800869e:	183b      	adds	r3, r7, r0
 80086a0:	2200      	movs	r2, #0
 80086a2:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80086a4:	4b6a      	ldr	r3, [pc, #424]	@ (8008850 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80086a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80086a8:	2380      	movs	r3, #128	@ 0x80
 80086aa:	055b      	lsls	r3, r3, #21
 80086ac:	4013      	ands	r3, r2
 80086ae:	d110      	bne.n	80086d2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80086b0:	4b67      	ldr	r3, [pc, #412]	@ (8008850 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80086b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80086b4:	4b66      	ldr	r3, [pc, #408]	@ (8008850 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80086b6:	2180      	movs	r1, #128	@ 0x80
 80086b8:	0549      	lsls	r1, r1, #21
 80086ba:	430a      	orrs	r2, r1
 80086bc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80086be:	4b64      	ldr	r3, [pc, #400]	@ (8008850 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80086c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80086c2:	2380      	movs	r3, #128	@ 0x80
 80086c4:	055b      	lsls	r3, r3, #21
 80086c6:	4013      	ands	r3, r2
 80086c8:	60bb      	str	r3, [r7, #8]
 80086ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80086cc:	183b      	adds	r3, r7, r0
 80086ce:	2201      	movs	r2, #1
 80086d0:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 80086d2:	4b5f      	ldr	r3, [pc, #380]	@ (8008850 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80086d4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80086d6:	23c0      	movs	r3, #192	@ 0xc0
 80086d8:	009b      	lsls	r3, r3, #2
 80086da:	4013      	ands	r3, r2
 80086dc:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d019      	beq.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	69db      	ldr	r3, [r3, #28]
 80086e8:	697a      	ldr	r2, [r7, #20]
 80086ea:	429a      	cmp	r2, r3
 80086ec:	d014      	beq.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 80086ee:	4b58      	ldr	r3, [pc, #352]	@ (8008850 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80086f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80086f2:	4a58      	ldr	r2, [pc, #352]	@ (8008854 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80086f4:	4013      	ands	r3, r2
 80086f6:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80086f8:	4b55      	ldr	r3, [pc, #340]	@ (8008850 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80086fa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80086fc:	4b54      	ldr	r3, [pc, #336]	@ (8008850 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80086fe:	2180      	movs	r1, #128	@ 0x80
 8008700:	0249      	lsls	r1, r1, #9
 8008702:	430a      	orrs	r2, r1
 8008704:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008706:	4b52      	ldr	r3, [pc, #328]	@ (8008850 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008708:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800870a:	4b51      	ldr	r3, [pc, #324]	@ (8008850 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800870c:	4952      	ldr	r1, [pc, #328]	@ (8008858 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800870e:	400a      	ands	r2, r1
 8008710:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8008712:	4b4f      	ldr	r3, [pc, #316]	@ (8008850 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008714:	697a      	ldr	r2, [r7, #20]
 8008716:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	2201      	movs	r2, #1
 800871c:	4013      	ands	r3, r2
 800871e:	d016      	beq.n	800874e <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008720:	f7fc fa5e 	bl	8004be0 <HAL_GetTick>
 8008724:	0003      	movs	r3, r0
 8008726:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8008728:	e00c      	b.n	8008744 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800872a:	f7fc fa59 	bl	8004be0 <HAL_GetTick>
 800872e:	0002      	movs	r2, r0
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	1ad3      	subs	r3, r2, r3
 8008734:	4a49      	ldr	r2, [pc, #292]	@ (800885c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d904      	bls.n	8008744 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 800873a:	2313      	movs	r3, #19
 800873c:	18fb      	adds	r3, r7, r3
 800873e:	2203      	movs	r2, #3
 8008740:	701a      	strb	r2, [r3, #0]
          break;
 8008742:	e004      	b.n	800874e <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8008744:	4b42      	ldr	r3, [pc, #264]	@ (8008850 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008746:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008748:	2202      	movs	r2, #2
 800874a:	4013      	ands	r3, r2
 800874c:	d0ed      	beq.n	800872a <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 800874e:	2313      	movs	r3, #19
 8008750:	18fb      	adds	r3, r7, r3
 8008752:	781b      	ldrb	r3, [r3, #0]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d10a      	bne.n	800876e <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008758:	4b3d      	ldr	r3, [pc, #244]	@ (8008850 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800875a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800875c:	4a3d      	ldr	r2, [pc, #244]	@ (8008854 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800875e:	4013      	ands	r3, r2
 8008760:	0019      	movs	r1, r3
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	69da      	ldr	r2, [r3, #28]
 8008766:	4b3a      	ldr	r3, [pc, #232]	@ (8008850 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008768:	430a      	orrs	r2, r1
 800876a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800876c:	e005      	b.n	800877a <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800876e:	2312      	movs	r3, #18
 8008770:	18fb      	adds	r3, r7, r3
 8008772:	2213      	movs	r2, #19
 8008774:	18ba      	adds	r2, r7, r2
 8008776:	7812      	ldrb	r2, [r2, #0]
 8008778:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800877a:	2311      	movs	r3, #17
 800877c:	18fb      	adds	r3, r7, r3
 800877e:	781b      	ldrb	r3, [r3, #0]
 8008780:	2b01      	cmp	r3, #1
 8008782:	d105      	bne.n	8008790 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008784:	4b32      	ldr	r3, [pc, #200]	@ (8008850 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008786:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008788:	4b31      	ldr	r3, [pc, #196]	@ (8008850 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800878a:	4935      	ldr	r1, [pc, #212]	@ (8008860 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800878c:	400a      	ands	r2, r1
 800878e:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	2201      	movs	r2, #1
 8008796:	4013      	ands	r3, r2
 8008798:	d009      	beq.n	80087ae <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800879a:	4b2d      	ldr	r3, [pc, #180]	@ (8008850 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800879c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800879e:	2203      	movs	r2, #3
 80087a0:	4393      	bics	r3, r2
 80087a2:	0019      	movs	r1, r3
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	689a      	ldr	r2, [r3, #8]
 80087a8:	4b29      	ldr	r3, [pc, #164]	@ (8008850 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80087aa:	430a      	orrs	r2, r1
 80087ac:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	2202      	movs	r2, #2
 80087b4:	4013      	ands	r3, r2
 80087b6:	d009      	beq.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80087b8:	4b25      	ldr	r3, [pc, #148]	@ (8008850 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80087ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087bc:	4a29      	ldr	r2, [pc, #164]	@ (8008864 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80087be:	4013      	ands	r3, r2
 80087c0:	0019      	movs	r1, r3
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	68da      	ldr	r2, [r3, #12]
 80087c6:	4b22      	ldr	r3, [pc, #136]	@ (8008850 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80087c8:	430a      	orrs	r2, r1
 80087ca:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	2220      	movs	r2, #32
 80087d2:	4013      	ands	r3, r2
 80087d4:	d008      	beq.n	80087e8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80087d6:	4b1e      	ldr	r3, [pc, #120]	@ (8008850 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80087d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087da:	009b      	lsls	r3, r3, #2
 80087dc:	0899      	lsrs	r1, r3, #2
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	699a      	ldr	r2, [r3, #24]
 80087e2:	4b1b      	ldr	r3, [pc, #108]	@ (8008850 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80087e4:	430a      	orrs	r2, r1
 80087e6:	655a      	str	r2, [r3, #84]	@ 0x54

  }
#if defined (USB_DRD_FS)
  /*-------------------------- USB clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	2208      	movs	r2, #8
 80087ee:	4013      	ands	r3, r2
 80087f0:	d009      	beq.n	8008806 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80087f2:	4b17      	ldr	r3, [pc, #92]	@ (8008850 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80087f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087f6:	4a1c      	ldr	r2, [pc, #112]	@ (8008868 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80087f8:	4013      	ands	r3, r2
 80087fa:	0019      	movs	r1, r3
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	695a      	ldr	r2, [r3, #20]
 8008800:	4b13      	ldr	r3, [pc, #76]	@ (8008850 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008802:	430a      	orrs	r2, r1
 8008804:	659a      	str	r2, [r3, #88]	@ 0x58

  }
#endif /* USB_DRD_FS */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	2204      	movs	r2, #4
 800880c:	4013      	ands	r3, r2
 800880e:	d009      	beq.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8008810:	4b0f      	ldr	r3, [pc, #60]	@ (8008850 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008812:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008814:	4a15      	ldr	r2, [pc, #84]	@ (800886c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8008816:	4013      	ands	r3, r2
 8008818:	0019      	movs	r1, r3
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	691a      	ldr	r2, [r3, #16]
 800881e:	4b0c      	ldr	r3, [pc, #48]	@ (8008850 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008820:	430a      	orrs	r2, r1
 8008822:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	2280      	movs	r2, #128	@ 0x80
 800882a:	4013      	ands	r3, r2
 800882c:	d009      	beq.n	8008842 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 800882e:	4b08      	ldr	r3, [pc, #32]	@ (8008850 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	22e0      	movs	r2, #224	@ 0xe0
 8008834:	4393      	bics	r3, r2
 8008836:	0019      	movs	r1, r3
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	685a      	ldr	r2, [r3, #4]
 800883c:	4b04      	ldr	r3, [pc, #16]	@ (8008850 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800883e:	430a      	orrs	r2, r1
 8008840:	601a      	str	r2, [r3, #0]
  }
  return status;
 8008842:	2312      	movs	r3, #18
 8008844:	18fb      	adds	r3, r7, r3
 8008846:	781b      	ldrb	r3, [r3, #0]
}
 8008848:	0018      	movs	r0, r3
 800884a:	46bd      	mov	sp, r7
 800884c:	b006      	add	sp, #24
 800884e:	bd80      	pop	{r7, pc}
 8008850:	40021000 	.word	0x40021000
 8008854:	fffffcff 	.word	0xfffffcff
 8008858:	fffeffff 	.word	0xfffeffff
 800885c:	00001388 	.word	0x00001388
 8008860:	efffffff 	.word	0xefffffff
 8008864:	ffffcfff 	.word	0xffffcfff
 8008868:	ffffefff 	.word	0xffffefff
 800886c:	ffff3fff 	.word	0xffff3fff

08008870 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b084      	sub	sp, #16
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d101      	bne.n	8008882 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800887e:	2301      	movs	r3, #1
 8008880:	e0a8      	b.n	80089d4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008886:	2b00      	cmp	r3, #0
 8008888:	d109      	bne.n	800889e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	685a      	ldr	r2, [r3, #4]
 800888e:	2382      	movs	r3, #130	@ 0x82
 8008890:	005b      	lsls	r3, r3, #1
 8008892:	429a      	cmp	r2, r3
 8008894:	d009      	beq.n	80088aa <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2200      	movs	r2, #0
 800889a:	61da      	str	r2, [r3, #28]
 800889c:	e005      	b.n	80088aa <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2200      	movs	r2, #0
 80088a2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2200      	movs	r2, #0
 80088a8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2200      	movs	r2, #0
 80088ae:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	225d      	movs	r2, #93	@ 0x5d
 80088b4:	5c9b      	ldrb	r3, [r3, r2]
 80088b6:	b2db      	uxtb	r3, r3
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d107      	bne.n	80088cc <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	225c      	movs	r2, #92	@ 0x5c
 80088c0:	2100      	movs	r1, #0
 80088c2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	0018      	movs	r0, r3
 80088c8:	f7fb fd3e 	bl	8004348 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	225d      	movs	r2, #93	@ 0x5d
 80088d0:	2102      	movs	r1, #2
 80088d2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	681a      	ldr	r2, [r3, #0]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	2140      	movs	r1, #64	@ 0x40
 80088e0:	438a      	bics	r2, r1
 80088e2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	68da      	ldr	r2, [r3, #12]
 80088e8:	23e0      	movs	r3, #224	@ 0xe0
 80088ea:	00db      	lsls	r3, r3, #3
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d902      	bls.n	80088f6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80088f0:	2300      	movs	r3, #0
 80088f2:	60fb      	str	r3, [r7, #12]
 80088f4:	e002      	b.n	80088fc <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80088f6:	2380      	movs	r3, #128	@ 0x80
 80088f8:	015b      	lsls	r3, r3, #5
 80088fa:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	68da      	ldr	r2, [r3, #12]
 8008900:	23f0      	movs	r3, #240	@ 0xf0
 8008902:	011b      	lsls	r3, r3, #4
 8008904:	429a      	cmp	r2, r3
 8008906:	d008      	beq.n	800891a <HAL_SPI_Init+0xaa>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	68da      	ldr	r2, [r3, #12]
 800890c:	23e0      	movs	r3, #224	@ 0xe0
 800890e:	00db      	lsls	r3, r3, #3
 8008910:	429a      	cmp	r2, r3
 8008912:	d002      	beq.n	800891a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2200      	movs	r2, #0
 8008918:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	685a      	ldr	r2, [r3, #4]
 800891e:	2382      	movs	r3, #130	@ 0x82
 8008920:	005b      	lsls	r3, r3, #1
 8008922:	401a      	ands	r2, r3
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6899      	ldr	r1, [r3, #8]
 8008928:	2384      	movs	r3, #132	@ 0x84
 800892a:	021b      	lsls	r3, r3, #8
 800892c:	400b      	ands	r3, r1
 800892e:	431a      	orrs	r2, r3
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	691b      	ldr	r3, [r3, #16]
 8008934:	2102      	movs	r1, #2
 8008936:	400b      	ands	r3, r1
 8008938:	431a      	orrs	r2, r3
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	695b      	ldr	r3, [r3, #20]
 800893e:	2101      	movs	r1, #1
 8008940:	400b      	ands	r3, r1
 8008942:	431a      	orrs	r2, r3
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6999      	ldr	r1, [r3, #24]
 8008948:	2380      	movs	r3, #128	@ 0x80
 800894a:	009b      	lsls	r3, r3, #2
 800894c:	400b      	ands	r3, r1
 800894e:	431a      	orrs	r2, r3
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	69db      	ldr	r3, [r3, #28]
 8008954:	2138      	movs	r1, #56	@ 0x38
 8008956:	400b      	ands	r3, r1
 8008958:	431a      	orrs	r2, r3
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6a1b      	ldr	r3, [r3, #32]
 800895e:	2180      	movs	r1, #128	@ 0x80
 8008960:	400b      	ands	r3, r1
 8008962:	431a      	orrs	r2, r3
 8008964:	0011      	movs	r1, r2
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800896a:	2380      	movs	r3, #128	@ 0x80
 800896c:	019b      	lsls	r3, r3, #6
 800896e:	401a      	ands	r2, r3
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	430a      	orrs	r2, r1
 8008976:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	699b      	ldr	r3, [r3, #24]
 800897c:	0c1b      	lsrs	r3, r3, #16
 800897e:	2204      	movs	r2, #4
 8008980:	401a      	ands	r2, r3
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008986:	2110      	movs	r1, #16
 8008988:	400b      	ands	r3, r1
 800898a:	431a      	orrs	r2, r3
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008990:	2108      	movs	r1, #8
 8008992:	400b      	ands	r3, r1
 8008994:	431a      	orrs	r2, r3
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	68d9      	ldr	r1, [r3, #12]
 800899a:	23f0      	movs	r3, #240	@ 0xf0
 800899c:	011b      	lsls	r3, r3, #4
 800899e:	400b      	ands	r3, r1
 80089a0:	431a      	orrs	r2, r3
 80089a2:	0011      	movs	r1, r2
 80089a4:	68fa      	ldr	r2, [r7, #12]
 80089a6:	2380      	movs	r3, #128	@ 0x80
 80089a8:	015b      	lsls	r3, r3, #5
 80089aa:	401a      	ands	r2, r3
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	430a      	orrs	r2, r1
 80089b2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	69da      	ldr	r2, [r3, #28]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	4907      	ldr	r1, [pc, #28]	@ (80089dc <HAL_SPI_Init+0x16c>)
 80089c0:	400a      	ands	r2, r1
 80089c2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2200      	movs	r2, #0
 80089c8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	225d      	movs	r2, #93	@ 0x5d
 80089ce:	2101      	movs	r1, #1
 80089d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80089d2:	2300      	movs	r3, #0
}
 80089d4:	0018      	movs	r0, r3
 80089d6:	46bd      	mov	sp, r7
 80089d8:	b004      	add	sp, #16
 80089da:	bd80      	pop	{r7, pc}
 80089dc:	fffff7ff 	.word	0xfffff7ff

080089e0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b08a      	sub	sp, #40	@ 0x28
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	60f8      	str	r0, [r7, #12]
 80089e8:	60b9      	str	r1, [r7, #8]
 80089ea:	607a      	str	r2, [r7, #4]
 80089ec:	001a      	movs	r2, r3
 80089ee:	1cbb      	adds	r3, r7, #2
 80089f0:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80089f2:	2301      	movs	r3, #1
 80089f4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80089f6:	f7fc f8f3 	bl	8004be0 <HAL_GetTick>
 80089fa:	0003      	movs	r3, r0
 80089fc:	623b      	str	r3, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80089fe:	201f      	movs	r0, #31
 8008a00:	183b      	adds	r3, r7, r0
 8008a02:	68fa      	ldr	r2, [r7, #12]
 8008a04:	215d      	movs	r1, #93	@ 0x5d
 8008a06:	5c52      	ldrb	r2, [r2, r1]
 8008a08:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	685b      	ldr	r3, [r3, #4]
 8008a0e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8008a10:	2316      	movs	r3, #22
 8008a12:	18fb      	adds	r3, r7, r3
 8008a14:	1cba      	adds	r2, r7, #2
 8008a16:	8812      	ldrh	r2, [r2, #0]
 8008a18:	801a      	strh	r2, [r3, #0]
  initial_RxXferCount = Size;
 8008a1a:	2314      	movs	r3, #20
 8008a1c:	18fb      	adds	r3, r7, r3
 8008a1e:	1cba      	adds	r2, r7, #2
 8008a20:	8812      	ldrh	r2, [r2, #0]
 8008a22:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008a24:	183b      	adds	r3, r7, r0
 8008a26:	781b      	ldrb	r3, [r3, #0]
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	d00e      	beq.n	8008a4a <HAL_SPI_TransmitReceive+0x6a>
 8008a2c:	69ba      	ldr	r2, [r7, #24]
 8008a2e:	2382      	movs	r3, #130	@ 0x82
 8008a30:	005b      	lsls	r3, r3, #1
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d107      	bne.n	8008a46 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	689b      	ldr	r3, [r3, #8]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d103      	bne.n	8008a46 <HAL_SPI_TransmitReceive+0x66>
 8008a3e:	183b      	adds	r3, r7, r0
 8008a40:	781b      	ldrb	r3, [r3, #0]
 8008a42:	2b04      	cmp	r3, #4
 8008a44:	d001      	beq.n	8008a4a <HAL_SPI_TransmitReceive+0x6a>
  {
    return HAL_BUSY;
 8008a46:	2302      	movs	r3, #2
 8008a48:	e203      	b.n	8008e52 <HAL_SPI_TransmitReceive+0x472>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d006      	beq.n	8008a5e <HAL_SPI_TransmitReceive+0x7e>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d003      	beq.n	8008a5e <HAL_SPI_TransmitReceive+0x7e>
 8008a56:	1cbb      	adds	r3, r7, #2
 8008a58:	881b      	ldrh	r3, [r3, #0]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d101      	bne.n	8008a62 <HAL_SPI_TransmitReceive+0x82>
  {
    return HAL_ERROR;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	e1f7      	b.n	8008e52 <HAL_SPI_TransmitReceive+0x472>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	225c      	movs	r2, #92	@ 0x5c
 8008a66:	5c9b      	ldrb	r3, [r3, r2]
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	d101      	bne.n	8008a70 <HAL_SPI_TransmitReceive+0x90>
 8008a6c:	2302      	movs	r3, #2
 8008a6e:	e1f0      	b.n	8008e52 <HAL_SPI_TransmitReceive+0x472>
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	225c      	movs	r2, #92	@ 0x5c
 8008a74:	2101      	movs	r1, #1
 8008a76:	5499      	strb	r1, [r3, r2]

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	225d      	movs	r2, #93	@ 0x5d
 8008a7c:	5c9b      	ldrb	r3, [r3, r2]
 8008a7e:	b2db      	uxtb	r3, r3
 8008a80:	2b04      	cmp	r3, #4
 8008a82:	d003      	beq.n	8008a8c <HAL_SPI_TransmitReceive+0xac>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	225d      	movs	r2, #93	@ 0x5d
 8008a88:	2105      	movs	r1, #5
 8008a8a:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	687a      	ldr	r2, [r7, #4]
 8008a96:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	1cba      	adds	r2, r7, #2
 8008a9c:	2146      	movs	r1, #70	@ 0x46
 8008a9e:	8812      	ldrh	r2, [r2, #0]
 8008aa0:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	1cba      	adds	r2, r7, #2
 8008aa6:	2144      	movs	r1, #68	@ 0x44
 8008aa8:	8812      	ldrh	r2, [r2, #0]
 8008aaa:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	68ba      	ldr	r2, [r7, #8]
 8008ab0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	1cba      	adds	r2, r7, #2
 8008ab6:	8812      	ldrh	r2, [r2, #0]
 8008ab8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	1cba      	adds	r2, r7, #2
 8008abe:	8812      	ldrh	r2, [r2, #0]
 8008ac0:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2200      	movs	r2, #0
 8008acc:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	68da      	ldr	r2, [r3, #12]
 8008ad2:	23e0      	movs	r3, #224	@ 0xe0
 8008ad4:	00db      	lsls	r3, r3, #3
 8008ad6:	429a      	cmp	r2, r3
 8008ad8:	d804      	bhi.n	8008ae4 <HAL_SPI_TransmitReceive+0x104>
 8008ada:	2314      	movs	r3, #20
 8008adc:	18fb      	adds	r3, r7, r3
 8008ade:	881b      	ldrh	r3, [r3, #0]
 8008ae0:	2b01      	cmp	r3, #1
 8008ae2:	d908      	bls.n	8008af6 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	685a      	ldr	r2, [r3, #4]
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	49c1      	ldr	r1, [pc, #772]	@ (8008df4 <HAL_SPI_TransmitReceive+0x414>)
 8008af0:	400a      	ands	r2, r1
 8008af2:	605a      	str	r2, [r3, #4]
 8008af4:	e008      	b.n	8008b08 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	685a      	ldr	r2, [r3, #4]
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	2180      	movs	r1, #128	@ 0x80
 8008b02:	0149      	lsls	r1, r1, #5
 8008b04:	430a      	orrs	r2, r1
 8008b06:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	2240      	movs	r2, #64	@ 0x40
 8008b10:	4013      	ands	r3, r2
 8008b12:	2b40      	cmp	r3, #64	@ 0x40
 8008b14:	d007      	beq.n	8008b26 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	681a      	ldr	r2, [r3, #0]
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	2140      	movs	r1, #64	@ 0x40
 8008b22:	430a      	orrs	r2, r1
 8008b24:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	68da      	ldr	r2, [r3, #12]
 8008b2a:	23e0      	movs	r3, #224	@ 0xe0
 8008b2c:	00db      	lsls	r3, r3, #3
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	d800      	bhi.n	8008b34 <HAL_SPI_TransmitReceive+0x154>
 8008b32:	e084      	b.n	8008c3e <HAL_SPI_TransmitReceive+0x25e>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d005      	beq.n	8008b48 <HAL_SPI_TransmitReceive+0x168>
 8008b3c:	2316      	movs	r3, #22
 8008b3e:	18fb      	adds	r3, r7, r3
 8008b40:	881b      	ldrh	r3, [r3, #0]
 8008b42:	2b01      	cmp	r3, #1
 8008b44:	d000      	beq.n	8008b48 <HAL_SPI_TransmitReceive+0x168>
 8008b46:	e06e      	b.n	8008c26 <HAL_SPI_TransmitReceive+0x246>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b4c:	881a      	ldrh	r2, [r3, #0]
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b58:	1c9a      	adds	r2, r3, #2
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008b62:	b29b      	uxth	r3, r3
 8008b64:	3b01      	subs	r3, #1
 8008b66:	b29a      	uxth	r2, r3
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008b6c:	e05b      	b.n	8008c26 <HAL_SPI_TransmitReceive+0x246>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	689b      	ldr	r3, [r3, #8]
 8008b74:	2202      	movs	r2, #2
 8008b76:	4013      	ands	r3, r2
 8008b78:	2b02      	cmp	r3, #2
 8008b7a:	d11b      	bne.n	8008bb4 <HAL_SPI_TransmitReceive+0x1d4>
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d016      	beq.n	8008bb4 <HAL_SPI_TransmitReceive+0x1d4>
 8008b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b88:	2b01      	cmp	r3, #1
 8008b8a:	d113      	bne.n	8008bb4 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b90:	881a      	ldrh	r2, [r3, #0]
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b9c:	1c9a      	adds	r2, r3, #2
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008ba6:	b29b      	uxth	r3, r3
 8008ba8:	3b01      	subs	r3, #1
 8008baa:	b29a      	uxth	r2, r3
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	689b      	ldr	r3, [r3, #8]
 8008bba:	2201      	movs	r2, #1
 8008bbc:	4013      	ands	r3, r2
 8008bbe:	2b01      	cmp	r3, #1
 8008bc0:	d11c      	bne.n	8008bfc <HAL_SPI_TransmitReceive+0x21c>
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	2246      	movs	r2, #70	@ 0x46
 8008bc6:	5a9b      	ldrh	r3, [r3, r2]
 8008bc8:	b29b      	uxth	r3, r3
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d016      	beq.n	8008bfc <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	68da      	ldr	r2, [r3, #12]
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bd8:	b292      	uxth	r2, r2
 8008bda:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008be0:	1c9a      	adds	r2, r3, #2
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	2246      	movs	r2, #70	@ 0x46
 8008bea:	5a9b      	ldrh	r3, [r3, r2]
 8008bec:	b29b      	uxth	r3, r3
 8008bee:	3b01      	subs	r3, #1
 8008bf0:	b299      	uxth	r1, r3
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2246      	movs	r2, #70	@ 0x46
 8008bf6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008bfc:	f7fb fff0 	bl	8004be0 <HAL_GetTick>
 8008c00:	0002      	movs	r2, r0
 8008c02:	6a3b      	ldr	r3, [r7, #32]
 8008c04:	1ad3      	subs	r3, r2, r3
 8008c06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	d80c      	bhi.n	8008c26 <HAL_SPI_TransmitReceive+0x246>
 8008c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c0e:	3301      	adds	r3, #1
 8008c10:	d009      	beq.n	8008c26 <HAL_SPI_TransmitReceive+0x246>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	225d      	movs	r2, #93	@ 0x5d
 8008c16:	2101      	movs	r1, #1
 8008c18:	5499      	strb	r1, [r3, r2]
        __HAL_UNLOCK(hspi);
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	225c      	movs	r2, #92	@ 0x5c
 8008c1e:	2100      	movs	r1, #0
 8008c20:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8008c22:	2303      	movs	r3, #3
 8008c24:	e115      	b.n	8008e52 <HAL_SPI_TransmitReceive+0x472>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d19e      	bne.n	8008b6e <HAL_SPI_TransmitReceive+0x18e>
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2246      	movs	r2, #70	@ 0x46
 8008c34:	5a9b      	ldrh	r3, [r3, r2]
 8008c36:	b29b      	uxth	r3, r3
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d198      	bne.n	8008b6e <HAL_SPI_TransmitReceive+0x18e>
 8008c3c:	e0e9      	b.n	8008e12 <HAL_SPI_TransmitReceive+0x432>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d005      	beq.n	8008c52 <HAL_SPI_TransmitReceive+0x272>
 8008c46:	2316      	movs	r3, #22
 8008c48:	18fb      	adds	r3, r7, r3
 8008c4a:	881b      	ldrh	r3, [r3, #0]
 8008c4c:	2b01      	cmp	r3, #1
 8008c4e:	d000      	beq.n	8008c52 <HAL_SPI_TransmitReceive+0x272>
 8008c50:	e0d2      	b.n	8008df8 <HAL_SPI_TransmitReceive+0x418>
    {
      if (hspi->TxXferCount > 1U)
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008c56:	b29b      	uxth	r3, r3
 8008c58:	2b01      	cmp	r3, #1
 8008c5a:	d912      	bls.n	8008c82 <HAL_SPI_TransmitReceive+0x2a2>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c60:	881a      	ldrh	r2, [r3, #0]
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c6c:	1c9a      	adds	r2, r3, #2
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008c76:	b29b      	uxth	r3, r3
 8008c78:	3b02      	subs	r3, #2
 8008c7a:	b29a      	uxth	r2, r3
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008c80:	e0ba      	b.n	8008df8 <HAL_SPI_TransmitReceive+0x418>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	330c      	adds	r3, #12
 8008c8c:	7812      	ldrb	r2, [r2, #0]
 8008c8e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c94:	1c5a      	adds	r2, r3, #1
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	3b01      	subs	r3, #1
 8008ca2:	b29a      	uxth	r2, r3
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ca8:	e0a6      	b.n	8008df8 <HAL_SPI_TransmitReceive+0x418>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	689b      	ldr	r3, [r3, #8]
 8008cb0:	2202      	movs	r2, #2
 8008cb2:	4013      	ands	r3, r2
 8008cb4:	2b02      	cmp	r3, #2
 8008cb6:	d134      	bne.n	8008d22 <HAL_SPI_TransmitReceive+0x342>
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008cbc:	b29b      	uxth	r3, r3
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d02f      	beq.n	8008d22 <HAL_SPI_TransmitReceive+0x342>
 8008cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	d12c      	bne.n	8008d22 <HAL_SPI_TransmitReceive+0x342>
      {
        if (hspi->TxXferCount > 1U)
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008ccc:	b29b      	uxth	r3, r3
 8008cce:	2b01      	cmp	r3, #1
 8008cd0:	d912      	bls.n	8008cf8 <HAL_SPI_TransmitReceive+0x318>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cd6:	881a      	ldrh	r2, [r3, #0]
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ce2:	1c9a      	adds	r2, r3, #2
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008cec:	b29b      	uxth	r3, r3
 8008cee:	3b02      	subs	r3, #2
 8008cf0:	b29a      	uxth	r2, r3
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008cf6:	e012      	b.n	8008d1e <HAL_SPI_TransmitReceive+0x33e>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	330c      	adds	r3, #12
 8008d02:	7812      	ldrb	r2, [r2, #0]
 8008d04:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d0a:	1c5a      	adds	r2, r3, #1
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d14:	b29b      	uxth	r3, r3
 8008d16:	3b01      	subs	r3, #1
 8008d18:	b29a      	uxth	r2, r3
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	689b      	ldr	r3, [r3, #8]
 8008d28:	2201      	movs	r2, #1
 8008d2a:	4013      	ands	r3, r2
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	d149      	bne.n	8008dc4 <HAL_SPI_TransmitReceive+0x3e4>
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	2246      	movs	r2, #70	@ 0x46
 8008d34:	5a9b      	ldrh	r3, [r3, r2]
 8008d36:	b29b      	uxth	r3, r3
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d043      	beq.n	8008dc4 <HAL_SPI_TransmitReceive+0x3e4>
      {
        if (hspi->RxXferCount > 1U)
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	2246      	movs	r2, #70	@ 0x46
 8008d40:	5a9b      	ldrh	r3, [r3, r2]
 8008d42:	b29b      	uxth	r3, r3
 8008d44:	2b01      	cmp	r3, #1
 8008d46:	d924      	bls.n	8008d92 <HAL_SPI_TransmitReceive+0x3b2>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	68da      	ldr	r2, [r3, #12]
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d52:	b292      	uxth	r2, r2
 8008d54:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d5a:	1c9a      	adds	r2, r3, #2
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	2246      	movs	r2, #70	@ 0x46
 8008d64:	5a9b      	ldrh	r3, [r3, r2]
 8008d66:	b29b      	uxth	r3, r3
 8008d68:	3b02      	subs	r3, #2
 8008d6a:	b299      	uxth	r1, r3
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	2246      	movs	r2, #70	@ 0x46
 8008d70:	5299      	strh	r1, [r3, r2]
          if (hspi->RxXferCount <= 1U)
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	2246      	movs	r2, #70	@ 0x46
 8008d76:	5a9b      	ldrh	r3, [r3, r2]
 8008d78:	b29b      	uxth	r3, r3
 8008d7a:	2b01      	cmp	r3, #1
 8008d7c:	d820      	bhi.n	8008dc0 <HAL_SPI_TransmitReceive+0x3e0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	685a      	ldr	r2, [r3, #4]
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	2180      	movs	r1, #128	@ 0x80
 8008d8a:	0149      	lsls	r1, r1, #5
 8008d8c:	430a      	orrs	r2, r1
 8008d8e:	605a      	str	r2, [r3, #4]
 8008d90:	e016      	b.n	8008dc0 <HAL_SPI_TransmitReceive+0x3e0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	330c      	adds	r3, #12
 8008d98:	001a      	movs	r2, r3
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d9e:	7812      	ldrb	r2, [r2, #0]
 8008da0:	b2d2      	uxtb	r2, r2
 8008da2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008da8:	1c5a      	adds	r2, r3, #1
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	2246      	movs	r2, #70	@ 0x46
 8008db2:	5a9b      	ldrh	r3, [r3, r2]
 8008db4:	b29b      	uxth	r3, r3
 8008db6:	3b01      	subs	r3, #1
 8008db8:	b299      	uxth	r1, r3
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	2246      	movs	r2, #70	@ 0x46
 8008dbe:	5299      	strh	r1, [r3, r2]
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008dc4:	f7fb ff0c 	bl	8004be0 <HAL_GetTick>
 8008dc8:	0002      	movs	r2, r0
 8008dca:	6a3b      	ldr	r3, [r7, #32]
 8008dcc:	1ad3      	subs	r3, r2, r3
 8008dce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008dd0:	429a      	cmp	r2, r3
 8008dd2:	d802      	bhi.n	8008dda <HAL_SPI_TransmitReceive+0x3fa>
 8008dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dd6:	3301      	adds	r3, #1
 8008dd8:	d102      	bne.n	8008de0 <HAL_SPI_TransmitReceive+0x400>
 8008dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d10b      	bne.n	8008df8 <HAL_SPI_TransmitReceive+0x418>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	225d      	movs	r2, #93	@ 0x5d
 8008de4:	2101      	movs	r1, #1
 8008de6:	5499      	strb	r1, [r3, r2]
        __HAL_UNLOCK(hspi);
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	225c      	movs	r2, #92	@ 0x5c
 8008dec:	2100      	movs	r1, #0
 8008dee:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8008df0:	2303      	movs	r3, #3
 8008df2:	e02e      	b.n	8008e52 <HAL_SPI_TransmitReceive+0x472>
 8008df4:	ffffefff 	.word	0xffffefff
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008dfc:	b29b      	uxth	r3, r3
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d000      	beq.n	8008e04 <HAL_SPI_TransmitReceive+0x424>
 8008e02:	e752      	b.n	8008caa <HAL_SPI_TransmitReceive+0x2ca>
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	2246      	movs	r2, #70	@ 0x46
 8008e08:	5a9b      	ldrh	r3, [r3, r2]
 8008e0a:	b29b      	uxth	r3, r3
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d000      	beq.n	8008e12 <HAL_SPI_TransmitReceive+0x432>
 8008e10:	e74b      	b.n	8008caa <HAL_SPI_TransmitReceive+0x2ca>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008e12:	6a3a      	ldr	r2, [r7, #32]
 8008e14:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	0018      	movs	r0, r3
 8008e1a:	f000 f94f 	bl	80090bc <SPI_EndRxTxTransaction>
 8008e1e:	1e03      	subs	r3, r0, #0
 8008e20:	d008      	beq.n	8008e34 <HAL_SPI_TransmitReceive+0x454>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2220      	movs	r2, #32
 8008e26:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	225c      	movs	r2, #92	@ 0x5c
 8008e2c:	2100      	movs	r1, #0
 8008e2e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8008e30:	2301      	movs	r3, #1
 8008e32:	e00e      	b.n	8008e52 <HAL_SPI_TransmitReceive+0x472>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	225d      	movs	r2, #93	@ 0x5d
 8008e38:	2101      	movs	r1, #1
 8008e3a:	5499      	strb	r1, [r3, r2]
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	225c      	movs	r2, #92	@ 0x5c
 8008e40:	2100      	movs	r1, #0
 8008e42:	5499      	strb	r1, [r3, r2]

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d001      	beq.n	8008e50 <HAL_SPI_TransmitReceive+0x470>
  {
    return HAL_ERROR;
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	e000      	b.n	8008e52 <HAL_SPI_TransmitReceive+0x472>
  }
  else
  {
    return HAL_OK;
 8008e50:	2300      	movs	r3, #0
  }
}
 8008e52:	0018      	movs	r0, r3
 8008e54:	46bd      	mov	sp, r7
 8008e56:	b00a      	add	sp, #40	@ 0x28
 8008e58:	bd80      	pop	{r7, pc}
 8008e5a:	46c0      	nop			@ (mov r8, r8)

08008e5c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b088      	sub	sp, #32
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	60f8      	str	r0, [r7, #12]
 8008e64:	60b9      	str	r1, [r7, #8]
 8008e66:	603b      	str	r3, [r7, #0]
 8008e68:	1dfb      	adds	r3, r7, #7
 8008e6a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008e6c:	f7fb feb8 	bl	8004be0 <HAL_GetTick>
 8008e70:	0002      	movs	r2, r0
 8008e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e74:	1a9b      	subs	r3, r3, r2
 8008e76:	683a      	ldr	r2, [r7, #0]
 8008e78:	18d3      	adds	r3, r2, r3
 8008e7a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008e7c:	f7fb feb0 	bl	8004be0 <HAL_GetTick>
 8008e80:	0003      	movs	r3, r0
 8008e82:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008e84:	4b3a      	ldr	r3, [pc, #232]	@ (8008f70 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	015b      	lsls	r3, r3, #5
 8008e8a:	0d1b      	lsrs	r3, r3, #20
 8008e8c:	69fa      	ldr	r2, [r7, #28]
 8008e8e:	4353      	muls	r3, r2
 8008e90:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008e92:	e058      	b.n	8008f46 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	3301      	adds	r3, #1
 8008e98:	d055      	beq.n	8008f46 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008e9a:	f7fb fea1 	bl	8004be0 <HAL_GetTick>
 8008e9e:	0002      	movs	r2, r0
 8008ea0:	69bb      	ldr	r3, [r7, #24]
 8008ea2:	1ad3      	subs	r3, r2, r3
 8008ea4:	69fa      	ldr	r2, [r7, #28]
 8008ea6:	429a      	cmp	r2, r3
 8008ea8:	d902      	bls.n	8008eb0 <SPI_WaitFlagStateUntilTimeout+0x54>
 8008eaa:	69fb      	ldr	r3, [r7, #28]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d142      	bne.n	8008f36 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	685a      	ldr	r2, [r3, #4]
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	21e0      	movs	r1, #224	@ 0xe0
 8008ebc:	438a      	bics	r2, r1
 8008ebe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	685a      	ldr	r2, [r3, #4]
 8008ec4:	2382      	movs	r3, #130	@ 0x82
 8008ec6:	005b      	lsls	r3, r3, #1
 8008ec8:	429a      	cmp	r2, r3
 8008eca:	d113      	bne.n	8008ef4 <SPI_WaitFlagStateUntilTimeout+0x98>
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	689a      	ldr	r2, [r3, #8]
 8008ed0:	2380      	movs	r3, #128	@ 0x80
 8008ed2:	021b      	lsls	r3, r3, #8
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	d005      	beq.n	8008ee4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	689a      	ldr	r2, [r3, #8]
 8008edc:	2380      	movs	r3, #128	@ 0x80
 8008ede:	00db      	lsls	r3, r3, #3
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	d107      	bne.n	8008ef4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	681a      	ldr	r2, [r3, #0]
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	2140      	movs	r1, #64	@ 0x40
 8008ef0:	438a      	bics	r2, r1
 8008ef2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008ef8:	2380      	movs	r3, #128	@ 0x80
 8008efa:	019b      	lsls	r3, r3, #6
 8008efc:	429a      	cmp	r2, r3
 8008efe:	d110      	bne.n	8008f22 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	681a      	ldr	r2, [r3, #0]
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	491a      	ldr	r1, [pc, #104]	@ (8008f74 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8008f0c:	400a      	ands	r2, r1
 8008f0e:	601a      	str	r2, [r3, #0]
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	681a      	ldr	r2, [r3, #0]
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	2180      	movs	r1, #128	@ 0x80
 8008f1c:	0189      	lsls	r1, r1, #6
 8008f1e:	430a      	orrs	r2, r1
 8008f20:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	225d      	movs	r2, #93	@ 0x5d
 8008f26:	2101      	movs	r1, #1
 8008f28:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	225c      	movs	r2, #92	@ 0x5c
 8008f2e:	2100      	movs	r1, #0
 8008f30:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008f32:	2303      	movs	r3, #3
 8008f34:	e017      	b.n	8008f66 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d101      	bne.n	8008f40 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	3b01      	subs	r3, #1
 8008f44:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	689b      	ldr	r3, [r3, #8]
 8008f4c:	68ba      	ldr	r2, [r7, #8]
 8008f4e:	4013      	ands	r3, r2
 8008f50:	68ba      	ldr	r2, [r7, #8]
 8008f52:	1ad3      	subs	r3, r2, r3
 8008f54:	425a      	negs	r2, r3
 8008f56:	4153      	adcs	r3, r2
 8008f58:	b2db      	uxtb	r3, r3
 8008f5a:	001a      	movs	r2, r3
 8008f5c:	1dfb      	adds	r3, r7, #7
 8008f5e:	781b      	ldrb	r3, [r3, #0]
 8008f60:	429a      	cmp	r2, r3
 8008f62:	d197      	bne.n	8008e94 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008f64:	2300      	movs	r3, #0
}
 8008f66:	0018      	movs	r0, r3
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	b008      	add	sp, #32
 8008f6c:	bd80      	pop	{r7, pc}
 8008f6e:	46c0      	nop			@ (mov r8, r8)
 8008f70:	200000b8 	.word	0x200000b8
 8008f74:	ffffdfff 	.word	0xffffdfff

08008f78 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b08a      	sub	sp, #40	@ 0x28
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	60f8      	str	r0, [r7, #12]
 8008f80:	60b9      	str	r1, [r7, #8]
 8008f82:	607a      	str	r2, [r7, #4]
 8008f84:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008f86:	2317      	movs	r3, #23
 8008f88:	18fb      	adds	r3, r7, r3
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008f8e:	f7fb fe27 	bl	8004be0 <HAL_GetTick>
 8008f92:	0002      	movs	r2, r0
 8008f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f96:	1a9b      	subs	r3, r3, r2
 8008f98:	683a      	ldr	r2, [r7, #0]
 8008f9a:	18d3      	adds	r3, r2, r3
 8008f9c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8008f9e:	f7fb fe1f 	bl	8004be0 <HAL_GetTick>
 8008fa2:	0003      	movs	r3, r0
 8008fa4:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	330c      	adds	r3, #12
 8008fac:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008fae:	4b41      	ldr	r3, [pc, #260]	@ (80090b4 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8008fb0:	681a      	ldr	r2, [r3, #0]
 8008fb2:	0013      	movs	r3, r2
 8008fb4:	009b      	lsls	r3, r3, #2
 8008fb6:	189b      	adds	r3, r3, r2
 8008fb8:	00da      	lsls	r2, r3, #3
 8008fba:	1ad3      	subs	r3, r2, r3
 8008fbc:	0d1b      	lsrs	r3, r3, #20
 8008fbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008fc0:	4353      	muls	r3, r2
 8008fc2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008fc4:	e068      	b.n	8009098 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008fc6:	68ba      	ldr	r2, [r7, #8]
 8008fc8:	23c0      	movs	r3, #192	@ 0xc0
 8008fca:	00db      	lsls	r3, r3, #3
 8008fcc:	429a      	cmp	r2, r3
 8008fce:	d10a      	bne.n	8008fe6 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d107      	bne.n	8008fe6 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008fd6:	69fb      	ldr	r3, [r7, #28]
 8008fd8:	781b      	ldrb	r3, [r3, #0]
 8008fda:	b2da      	uxtb	r2, r3
 8008fdc:	2117      	movs	r1, #23
 8008fde:	187b      	adds	r3, r7, r1
 8008fe0:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008fe2:	187b      	adds	r3, r7, r1
 8008fe4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	3301      	adds	r3, #1
 8008fea:	d055      	beq.n	8009098 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008fec:	f7fb fdf8 	bl	8004be0 <HAL_GetTick>
 8008ff0:	0002      	movs	r2, r0
 8008ff2:	6a3b      	ldr	r3, [r7, #32]
 8008ff4:	1ad3      	subs	r3, r2, r3
 8008ff6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ff8:	429a      	cmp	r2, r3
 8008ffa:	d902      	bls.n	8009002 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8008ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d142      	bne.n	8009088 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	685a      	ldr	r2, [r3, #4]
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	21e0      	movs	r1, #224	@ 0xe0
 800900e:	438a      	bics	r2, r1
 8009010:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	685a      	ldr	r2, [r3, #4]
 8009016:	2382      	movs	r3, #130	@ 0x82
 8009018:	005b      	lsls	r3, r3, #1
 800901a:	429a      	cmp	r2, r3
 800901c:	d113      	bne.n	8009046 <SPI_WaitFifoStateUntilTimeout+0xce>
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	689a      	ldr	r2, [r3, #8]
 8009022:	2380      	movs	r3, #128	@ 0x80
 8009024:	021b      	lsls	r3, r3, #8
 8009026:	429a      	cmp	r2, r3
 8009028:	d005      	beq.n	8009036 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	689a      	ldr	r2, [r3, #8]
 800902e:	2380      	movs	r3, #128	@ 0x80
 8009030:	00db      	lsls	r3, r3, #3
 8009032:	429a      	cmp	r2, r3
 8009034:	d107      	bne.n	8009046 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	681a      	ldr	r2, [r3, #0]
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	2140      	movs	r1, #64	@ 0x40
 8009042:	438a      	bics	r2, r1
 8009044:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800904a:	2380      	movs	r3, #128	@ 0x80
 800904c:	019b      	lsls	r3, r3, #6
 800904e:	429a      	cmp	r2, r3
 8009050:	d110      	bne.n	8009074 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	681a      	ldr	r2, [r3, #0]
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	4916      	ldr	r1, [pc, #88]	@ (80090b8 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800905e:	400a      	ands	r2, r1
 8009060:	601a      	str	r2, [r3, #0]
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	681a      	ldr	r2, [r3, #0]
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	2180      	movs	r1, #128	@ 0x80
 800906e:	0189      	lsls	r1, r1, #6
 8009070:	430a      	orrs	r2, r1
 8009072:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	225d      	movs	r2, #93	@ 0x5d
 8009078:	2101      	movs	r1, #1
 800907a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	225c      	movs	r2, #92	@ 0x5c
 8009080:	2100      	movs	r1, #0
 8009082:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009084:	2303      	movs	r3, #3
 8009086:	e010      	b.n	80090aa <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009088:	69bb      	ldr	r3, [r7, #24]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d101      	bne.n	8009092 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800908e:	2300      	movs	r3, #0
 8009090:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8009092:	69bb      	ldr	r3, [r7, #24]
 8009094:	3b01      	subs	r3, #1
 8009096:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	689b      	ldr	r3, [r3, #8]
 800909e:	68ba      	ldr	r2, [r7, #8]
 80090a0:	4013      	ands	r3, r2
 80090a2:	687a      	ldr	r2, [r7, #4]
 80090a4:	429a      	cmp	r2, r3
 80090a6:	d18e      	bne.n	8008fc6 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80090a8:	2300      	movs	r3, #0
}
 80090aa:	0018      	movs	r0, r3
 80090ac:	46bd      	mov	sp, r7
 80090ae:	b00a      	add	sp, #40	@ 0x28
 80090b0:	bd80      	pop	{r7, pc}
 80090b2:	46c0      	nop			@ (mov r8, r8)
 80090b4:	200000b8 	.word	0x200000b8
 80090b8:	ffffdfff 	.word	0xffffdfff

080090bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b086      	sub	sp, #24
 80090c0:	af02      	add	r7, sp, #8
 80090c2:	60f8      	str	r0, [r7, #12]
 80090c4:	60b9      	str	r1, [r7, #8]
 80090c6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80090c8:	68ba      	ldr	r2, [r7, #8]
 80090ca:	23c0      	movs	r3, #192	@ 0xc0
 80090cc:	0159      	lsls	r1, r3, #5
 80090ce:	68f8      	ldr	r0, [r7, #12]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	9300      	str	r3, [sp, #0]
 80090d4:	0013      	movs	r3, r2
 80090d6:	2200      	movs	r2, #0
 80090d8:	f7ff ff4e 	bl	8008f78 <SPI_WaitFifoStateUntilTimeout>
 80090dc:	1e03      	subs	r3, r0, #0
 80090de:	d007      	beq.n	80090f0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80090e4:	2220      	movs	r2, #32
 80090e6:	431a      	orrs	r2, r3
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80090ec:	2303      	movs	r3, #3
 80090ee:	e027      	b.n	8009140 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80090f0:	68ba      	ldr	r2, [r7, #8]
 80090f2:	68f8      	ldr	r0, [r7, #12]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	9300      	str	r3, [sp, #0]
 80090f8:	0013      	movs	r3, r2
 80090fa:	2200      	movs	r2, #0
 80090fc:	2180      	movs	r1, #128	@ 0x80
 80090fe:	f7ff fead 	bl	8008e5c <SPI_WaitFlagStateUntilTimeout>
 8009102:	1e03      	subs	r3, r0, #0
 8009104:	d007      	beq.n	8009116 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800910a:	2220      	movs	r2, #32
 800910c:	431a      	orrs	r2, r3
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009112:	2303      	movs	r3, #3
 8009114:	e014      	b.n	8009140 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009116:	68ba      	ldr	r2, [r7, #8]
 8009118:	23c0      	movs	r3, #192	@ 0xc0
 800911a:	00d9      	lsls	r1, r3, #3
 800911c:	68f8      	ldr	r0, [r7, #12]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	9300      	str	r3, [sp, #0]
 8009122:	0013      	movs	r3, r2
 8009124:	2200      	movs	r2, #0
 8009126:	f7ff ff27 	bl	8008f78 <SPI_WaitFifoStateUntilTimeout>
 800912a:	1e03      	subs	r3, r0, #0
 800912c:	d007      	beq.n	800913e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009132:	2220      	movs	r2, #32
 8009134:	431a      	orrs	r2, r3
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800913a:	2303      	movs	r3, #3
 800913c:	e000      	b.n	8009140 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800913e:	2300      	movs	r3, #0
}
 8009140:	0018      	movs	r0, r3
 8009142:	46bd      	mov	sp, r7
 8009144:	b004      	add	sp, #16
 8009146:	bd80      	pop	{r7, pc}

08009148 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b082      	sub	sp, #8
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d101      	bne.n	800915a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009156:	2301      	movs	r3, #1
 8009158:	e04a      	b.n	80091f0 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	223d      	movs	r2, #61	@ 0x3d
 800915e:	5c9b      	ldrb	r3, [r3, r2]
 8009160:	b2db      	uxtb	r3, r3
 8009162:	2b00      	cmp	r3, #0
 8009164:	d107      	bne.n	8009176 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	223c      	movs	r2, #60	@ 0x3c
 800916a:	2100      	movs	r1, #0
 800916c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	0018      	movs	r0, r3
 8009172:	f7fb f98f 	bl	8004494 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	223d      	movs	r2, #61	@ 0x3d
 800917a:	2102      	movs	r1, #2
 800917c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681a      	ldr	r2, [r3, #0]
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	3304      	adds	r3, #4
 8009186:	0019      	movs	r1, r3
 8009188:	0010      	movs	r0, r2
 800918a:	f000 fc73 	bl	8009a74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2248      	movs	r2, #72	@ 0x48
 8009192:	2101      	movs	r1, #1
 8009194:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	223e      	movs	r2, #62	@ 0x3e
 800919a:	2101      	movs	r1, #1
 800919c:	5499      	strb	r1, [r3, r2]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	223f      	movs	r2, #63	@ 0x3f
 80091a2:	2101      	movs	r1, #1
 80091a4:	5499      	strb	r1, [r3, r2]
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2240      	movs	r2, #64	@ 0x40
 80091aa:	2101      	movs	r1, #1
 80091ac:	5499      	strb	r1, [r3, r2]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2241      	movs	r2, #65	@ 0x41
 80091b2:	2101      	movs	r1, #1
 80091b4:	5499      	strb	r1, [r3, r2]
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2242      	movs	r2, #66	@ 0x42
 80091ba:	2101      	movs	r1, #1
 80091bc:	5499      	strb	r1, [r3, r2]
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2243      	movs	r2, #67	@ 0x43
 80091c2:	2101      	movs	r1, #1
 80091c4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2244      	movs	r2, #68	@ 0x44
 80091ca:	2101      	movs	r1, #1
 80091cc:	5499      	strb	r1, [r3, r2]
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2245      	movs	r2, #69	@ 0x45
 80091d2:	2101      	movs	r1, #1
 80091d4:	5499      	strb	r1, [r3, r2]
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2246      	movs	r2, #70	@ 0x46
 80091da:	2101      	movs	r1, #1
 80091dc:	5499      	strb	r1, [r3, r2]
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2247      	movs	r2, #71	@ 0x47
 80091e2:	2101      	movs	r1, #1
 80091e4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	223d      	movs	r2, #61	@ 0x3d
 80091ea:	2101      	movs	r1, #1
 80091ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80091ee:	2300      	movs	r3, #0
}
 80091f0:	0018      	movs	r0, r3
 80091f2:	46bd      	mov	sp, r7
 80091f4:	b002      	add	sp, #8
 80091f6:	bd80      	pop	{r7, pc}

080091f8 <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b082      	sub	sp, #8
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	223d      	movs	r2, #61	@ 0x3d
 8009204:	2102      	movs	r1, #2
 8009206:	5499      	strb	r1, [r3, r2]

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	6a1b      	ldr	r3, [r3, #32]
 800920e:	4a27      	ldr	r2, [pc, #156]	@ (80092ac <HAL_TIM_Base_DeInit+0xb4>)
 8009210:	4013      	ands	r3, r2
 8009212:	d10d      	bne.n	8009230 <HAL_TIM_Base_DeInit+0x38>
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	6a1b      	ldr	r3, [r3, #32]
 800921a:	4a25      	ldr	r2, [pc, #148]	@ (80092b0 <HAL_TIM_Base_DeInit+0xb8>)
 800921c:	4013      	ands	r3, r2
 800921e:	d107      	bne.n	8009230 <HAL_TIM_Base_DeInit+0x38>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	681a      	ldr	r2, [r3, #0]
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	2101      	movs	r1, #1
 800922c:	438a      	bics	r2, r1
 800922e:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	0018      	movs	r0, r3
 8009234:	f7fb f994 	bl	8004560 <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2248      	movs	r2, #72	@ 0x48
 800923c:	2100      	movs	r1, #0
 800923e:	5499      	strb	r1, [r3, r2]

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	223e      	movs	r2, #62	@ 0x3e
 8009244:	2100      	movs	r1, #0
 8009246:	5499      	strb	r1, [r3, r2]
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	223f      	movs	r2, #63	@ 0x3f
 800924c:	2100      	movs	r1, #0
 800924e:	5499      	strb	r1, [r3, r2]
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2240      	movs	r2, #64	@ 0x40
 8009254:	2100      	movs	r1, #0
 8009256:	5499      	strb	r1, [r3, r2]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2241      	movs	r2, #65	@ 0x41
 800925c:	2100      	movs	r1, #0
 800925e:	5499      	strb	r1, [r3, r2]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2242      	movs	r2, #66	@ 0x42
 8009264:	2100      	movs	r1, #0
 8009266:	5499      	strb	r1, [r3, r2]
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2243      	movs	r2, #67	@ 0x43
 800926c:	2100      	movs	r1, #0
 800926e:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2244      	movs	r2, #68	@ 0x44
 8009274:	2100      	movs	r1, #0
 8009276:	5499      	strb	r1, [r3, r2]
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2245      	movs	r2, #69	@ 0x45
 800927c:	2100      	movs	r1, #0
 800927e:	5499      	strb	r1, [r3, r2]
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2246      	movs	r2, #70	@ 0x46
 8009284:	2100      	movs	r1, #0
 8009286:	5499      	strb	r1, [r3, r2]
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2247      	movs	r2, #71	@ 0x47
 800928c:	2100      	movs	r1, #0
 800928e:	5499      	strb	r1, [r3, r2]

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	223d      	movs	r2, #61	@ 0x3d
 8009294:	2100      	movs	r1, #0
 8009296:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	223c      	movs	r2, #60	@ 0x3c
 800929c:	2100      	movs	r1, #0
 800929e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80092a0:	2300      	movs	r3, #0
}
 80092a2:	0018      	movs	r0, r3
 80092a4:	46bd      	mov	sp, r7
 80092a6:	b002      	add	sp, #8
 80092a8:	bd80      	pop	{r7, pc}
 80092aa:	46c0      	nop			@ (mov r8, r8)
 80092ac:	00001111 	.word	0x00001111
 80092b0:	00000444 	.word	0x00000444

080092b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b084      	sub	sp, #16
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	223d      	movs	r2, #61	@ 0x3d
 80092c0:	5c9b      	ldrb	r3, [r3, r2]
 80092c2:	b2db      	uxtb	r3, r3
 80092c4:	2b01      	cmp	r3, #1
 80092c6:	d001      	beq.n	80092cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80092c8:	2301      	movs	r3, #1
 80092ca:	e03d      	b.n	8009348 <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	223d      	movs	r2, #61	@ 0x3d
 80092d0:	2102      	movs	r1, #2
 80092d2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	68da      	ldr	r2, [r3, #12]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	2101      	movs	r1, #1
 80092e0:	430a      	orrs	r2, r1
 80092e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	4a19      	ldr	r2, [pc, #100]	@ (8009350 <HAL_TIM_Base_Start_IT+0x9c>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d00a      	beq.n	8009304 <HAL_TIM_Base_Start_IT+0x50>
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681a      	ldr	r2, [r3, #0]
 80092f2:	2380      	movs	r3, #128	@ 0x80
 80092f4:	05db      	lsls	r3, r3, #23
 80092f6:	429a      	cmp	r2, r3
 80092f8:	d004      	beq.n	8009304 <HAL_TIM_Base_Start_IT+0x50>
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	4a15      	ldr	r2, [pc, #84]	@ (8009354 <HAL_TIM_Base_Start_IT+0xa0>)
 8009300:	4293      	cmp	r3, r2
 8009302:	d116      	bne.n	8009332 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	689b      	ldr	r3, [r3, #8]
 800930a:	4a13      	ldr	r2, [pc, #76]	@ (8009358 <HAL_TIM_Base_Start_IT+0xa4>)
 800930c:	4013      	ands	r3, r2
 800930e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	2b06      	cmp	r3, #6
 8009314:	d016      	beq.n	8009344 <HAL_TIM_Base_Start_IT+0x90>
 8009316:	68fa      	ldr	r2, [r7, #12]
 8009318:	2380      	movs	r3, #128	@ 0x80
 800931a:	025b      	lsls	r3, r3, #9
 800931c:	429a      	cmp	r2, r3
 800931e:	d011      	beq.n	8009344 <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	681a      	ldr	r2, [r3, #0]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	2101      	movs	r1, #1
 800932c:	430a      	orrs	r2, r1
 800932e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009330:	e008      	b.n	8009344 <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	681a      	ldr	r2, [r3, #0]
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	2101      	movs	r1, #1
 800933e:	430a      	orrs	r2, r1
 8009340:	601a      	str	r2, [r3, #0]
 8009342:	e000      	b.n	8009346 <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009344:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8009346:	2300      	movs	r3, #0
}
 8009348:	0018      	movs	r0, r3
 800934a:	46bd      	mov	sp, r7
 800934c:	b004      	add	sp, #16
 800934e:	bd80      	pop	{r7, pc}
 8009350:	40012c00 	.word	0x40012c00
 8009354:	40000400 	.word	0x40000400
 8009358:	00010007 	.word	0x00010007

0800935c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b082      	sub	sp, #8
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	68da      	ldr	r2, [r3, #12]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	2101      	movs	r1, #1
 8009370:	438a      	bics	r2, r1
 8009372:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	6a1b      	ldr	r3, [r3, #32]
 800937a:	4a0d      	ldr	r2, [pc, #52]	@ (80093b0 <HAL_TIM_Base_Stop_IT+0x54>)
 800937c:	4013      	ands	r3, r2
 800937e:	d10d      	bne.n	800939c <HAL_TIM_Base_Stop_IT+0x40>
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	6a1b      	ldr	r3, [r3, #32]
 8009386:	4a0b      	ldr	r2, [pc, #44]	@ (80093b4 <HAL_TIM_Base_Stop_IT+0x58>)
 8009388:	4013      	ands	r3, r2
 800938a:	d107      	bne.n	800939c <HAL_TIM_Base_Stop_IT+0x40>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	681a      	ldr	r2, [r3, #0]
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	2101      	movs	r1, #1
 8009398:	438a      	bics	r2, r1
 800939a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	223d      	movs	r2, #61	@ 0x3d
 80093a0:	2101      	movs	r1, #1
 80093a2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80093a4:	2300      	movs	r3, #0
}
 80093a6:	0018      	movs	r0, r3
 80093a8:	46bd      	mov	sp, r7
 80093aa:	b002      	add	sp, #8
 80093ac:	bd80      	pop	{r7, pc}
 80093ae:	46c0      	nop			@ (mov r8, r8)
 80093b0:	00001111 	.word	0x00001111
 80093b4:	00000444 	.word	0x00000444

080093b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b082      	sub	sp, #8
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d101      	bne.n	80093ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80093c6:	2301      	movs	r3, #1
 80093c8:	e04a      	b.n	8009460 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	223d      	movs	r2, #61	@ 0x3d
 80093ce:	5c9b      	ldrb	r3, [r3, r2]
 80093d0:	b2db      	uxtb	r3, r3
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d107      	bne.n	80093e6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	223c      	movs	r2, #60	@ 0x3c
 80093da:	2100      	movs	r1, #0
 80093dc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	0018      	movs	r0, r3
 80093e2:	f7fb f837 	bl	8004454 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	223d      	movs	r2, #61	@ 0x3d
 80093ea:	2102      	movs	r1, #2
 80093ec:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681a      	ldr	r2, [r3, #0]
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	3304      	adds	r3, #4
 80093f6:	0019      	movs	r1, r3
 80093f8:	0010      	movs	r0, r2
 80093fa:	f000 fb3b 	bl	8009a74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2248      	movs	r2, #72	@ 0x48
 8009402:	2101      	movs	r1, #1
 8009404:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	223e      	movs	r2, #62	@ 0x3e
 800940a:	2101      	movs	r1, #1
 800940c:	5499      	strb	r1, [r3, r2]
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	223f      	movs	r2, #63	@ 0x3f
 8009412:	2101      	movs	r1, #1
 8009414:	5499      	strb	r1, [r3, r2]
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2240      	movs	r2, #64	@ 0x40
 800941a:	2101      	movs	r1, #1
 800941c:	5499      	strb	r1, [r3, r2]
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2241      	movs	r2, #65	@ 0x41
 8009422:	2101      	movs	r1, #1
 8009424:	5499      	strb	r1, [r3, r2]
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2242      	movs	r2, #66	@ 0x42
 800942a:	2101      	movs	r1, #1
 800942c:	5499      	strb	r1, [r3, r2]
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2243      	movs	r2, #67	@ 0x43
 8009432:	2101      	movs	r1, #1
 8009434:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2244      	movs	r2, #68	@ 0x44
 800943a:	2101      	movs	r1, #1
 800943c:	5499      	strb	r1, [r3, r2]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2245      	movs	r2, #69	@ 0x45
 8009442:	2101      	movs	r1, #1
 8009444:	5499      	strb	r1, [r3, r2]
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2246      	movs	r2, #70	@ 0x46
 800944a:	2101      	movs	r1, #1
 800944c:	5499      	strb	r1, [r3, r2]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2247      	movs	r2, #71	@ 0x47
 8009452:	2101      	movs	r1, #1
 8009454:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	223d      	movs	r2, #61	@ 0x3d
 800945a:	2101      	movs	r1, #1
 800945c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800945e:	2300      	movs	r3, #0
}
 8009460:	0018      	movs	r0, r3
 8009462:	46bd      	mov	sp, r7
 8009464:	b002      	add	sp, #8
 8009466:	bd80      	pop	{r7, pc}

08009468 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b084      	sub	sp, #16
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
 8009470:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d108      	bne.n	800948a <HAL_TIM_PWM_Start+0x22>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	223e      	movs	r2, #62	@ 0x3e
 800947c:	5c9b      	ldrb	r3, [r3, r2]
 800947e:	b2db      	uxtb	r3, r3
 8009480:	3b01      	subs	r3, #1
 8009482:	1e5a      	subs	r2, r3, #1
 8009484:	4193      	sbcs	r3, r2
 8009486:	b2db      	uxtb	r3, r3
 8009488:	e037      	b.n	80094fa <HAL_TIM_PWM_Start+0x92>
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	2b04      	cmp	r3, #4
 800948e:	d108      	bne.n	80094a2 <HAL_TIM_PWM_Start+0x3a>
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	223f      	movs	r2, #63	@ 0x3f
 8009494:	5c9b      	ldrb	r3, [r3, r2]
 8009496:	b2db      	uxtb	r3, r3
 8009498:	3b01      	subs	r3, #1
 800949a:	1e5a      	subs	r2, r3, #1
 800949c:	4193      	sbcs	r3, r2
 800949e:	b2db      	uxtb	r3, r3
 80094a0:	e02b      	b.n	80094fa <HAL_TIM_PWM_Start+0x92>
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	2b08      	cmp	r3, #8
 80094a6:	d108      	bne.n	80094ba <HAL_TIM_PWM_Start+0x52>
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2240      	movs	r2, #64	@ 0x40
 80094ac:	5c9b      	ldrb	r3, [r3, r2]
 80094ae:	b2db      	uxtb	r3, r3
 80094b0:	3b01      	subs	r3, #1
 80094b2:	1e5a      	subs	r2, r3, #1
 80094b4:	4193      	sbcs	r3, r2
 80094b6:	b2db      	uxtb	r3, r3
 80094b8:	e01f      	b.n	80094fa <HAL_TIM_PWM_Start+0x92>
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	2b0c      	cmp	r3, #12
 80094be:	d108      	bne.n	80094d2 <HAL_TIM_PWM_Start+0x6a>
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2241      	movs	r2, #65	@ 0x41
 80094c4:	5c9b      	ldrb	r3, [r3, r2]
 80094c6:	b2db      	uxtb	r3, r3
 80094c8:	3b01      	subs	r3, #1
 80094ca:	1e5a      	subs	r2, r3, #1
 80094cc:	4193      	sbcs	r3, r2
 80094ce:	b2db      	uxtb	r3, r3
 80094d0:	e013      	b.n	80094fa <HAL_TIM_PWM_Start+0x92>
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	2b10      	cmp	r3, #16
 80094d6:	d108      	bne.n	80094ea <HAL_TIM_PWM_Start+0x82>
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2242      	movs	r2, #66	@ 0x42
 80094dc:	5c9b      	ldrb	r3, [r3, r2]
 80094de:	b2db      	uxtb	r3, r3
 80094e0:	3b01      	subs	r3, #1
 80094e2:	1e5a      	subs	r2, r3, #1
 80094e4:	4193      	sbcs	r3, r2
 80094e6:	b2db      	uxtb	r3, r3
 80094e8:	e007      	b.n	80094fa <HAL_TIM_PWM_Start+0x92>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2243      	movs	r2, #67	@ 0x43
 80094ee:	5c9b      	ldrb	r3, [r3, r2]
 80094f0:	b2db      	uxtb	r3, r3
 80094f2:	3b01      	subs	r3, #1
 80094f4:	1e5a      	subs	r2, r3, #1
 80094f6:	4193      	sbcs	r3, r2
 80094f8:	b2db      	uxtb	r3, r3
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d001      	beq.n	8009502 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80094fe:	2301      	movs	r3, #1
 8009500:	e081      	b.n	8009606 <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d104      	bne.n	8009512 <HAL_TIM_PWM_Start+0xaa>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	223e      	movs	r2, #62	@ 0x3e
 800950c:	2102      	movs	r1, #2
 800950e:	5499      	strb	r1, [r3, r2]
 8009510:	e023      	b.n	800955a <HAL_TIM_PWM_Start+0xf2>
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	2b04      	cmp	r3, #4
 8009516:	d104      	bne.n	8009522 <HAL_TIM_PWM_Start+0xba>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	223f      	movs	r2, #63	@ 0x3f
 800951c:	2102      	movs	r1, #2
 800951e:	5499      	strb	r1, [r3, r2]
 8009520:	e01b      	b.n	800955a <HAL_TIM_PWM_Start+0xf2>
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	2b08      	cmp	r3, #8
 8009526:	d104      	bne.n	8009532 <HAL_TIM_PWM_Start+0xca>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2240      	movs	r2, #64	@ 0x40
 800952c:	2102      	movs	r1, #2
 800952e:	5499      	strb	r1, [r3, r2]
 8009530:	e013      	b.n	800955a <HAL_TIM_PWM_Start+0xf2>
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	2b0c      	cmp	r3, #12
 8009536:	d104      	bne.n	8009542 <HAL_TIM_PWM_Start+0xda>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2241      	movs	r2, #65	@ 0x41
 800953c:	2102      	movs	r1, #2
 800953e:	5499      	strb	r1, [r3, r2]
 8009540:	e00b      	b.n	800955a <HAL_TIM_PWM_Start+0xf2>
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	2b10      	cmp	r3, #16
 8009546:	d104      	bne.n	8009552 <HAL_TIM_PWM_Start+0xea>
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2242      	movs	r2, #66	@ 0x42
 800954c:	2102      	movs	r1, #2
 800954e:	5499      	strb	r1, [r3, r2]
 8009550:	e003      	b.n	800955a <HAL_TIM_PWM_Start+0xf2>
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2243      	movs	r2, #67	@ 0x43
 8009556:	2102      	movs	r1, #2
 8009558:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	6839      	ldr	r1, [r7, #0]
 8009560:	2201      	movs	r2, #1
 8009562:	0018      	movs	r0, r3
 8009564:	f000 fda6 	bl	800a0b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	4a28      	ldr	r2, [pc, #160]	@ (8009610 <HAL_TIM_PWM_Start+0x1a8>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d009      	beq.n	8009586 <HAL_TIM_PWM_Start+0x11e>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	4a27      	ldr	r2, [pc, #156]	@ (8009614 <HAL_TIM_PWM_Start+0x1ac>)
 8009578:	4293      	cmp	r3, r2
 800957a:	d004      	beq.n	8009586 <HAL_TIM_PWM_Start+0x11e>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	4a25      	ldr	r2, [pc, #148]	@ (8009618 <HAL_TIM_PWM_Start+0x1b0>)
 8009582:	4293      	cmp	r3, r2
 8009584:	d101      	bne.n	800958a <HAL_TIM_PWM_Start+0x122>
 8009586:	2301      	movs	r3, #1
 8009588:	e000      	b.n	800958c <HAL_TIM_PWM_Start+0x124>
 800958a:	2300      	movs	r3, #0
 800958c:	2b00      	cmp	r3, #0
 800958e:	d008      	beq.n	80095a2 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	2180      	movs	r1, #128	@ 0x80
 800959c:	0209      	lsls	r1, r1, #8
 800959e:	430a      	orrs	r2, r1
 80095a0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	4a1a      	ldr	r2, [pc, #104]	@ (8009610 <HAL_TIM_PWM_Start+0x1a8>)
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d00a      	beq.n	80095c2 <HAL_TIM_PWM_Start+0x15a>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681a      	ldr	r2, [r3, #0]
 80095b0:	2380      	movs	r3, #128	@ 0x80
 80095b2:	05db      	lsls	r3, r3, #23
 80095b4:	429a      	cmp	r2, r3
 80095b6:	d004      	beq.n	80095c2 <HAL_TIM_PWM_Start+0x15a>
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	4a17      	ldr	r2, [pc, #92]	@ (800961c <HAL_TIM_PWM_Start+0x1b4>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d116      	bne.n	80095f0 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	689b      	ldr	r3, [r3, #8]
 80095c8:	4a15      	ldr	r2, [pc, #84]	@ (8009620 <HAL_TIM_PWM_Start+0x1b8>)
 80095ca:	4013      	ands	r3, r2
 80095cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	2b06      	cmp	r3, #6
 80095d2:	d016      	beq.n	8009602 <HAL_TIM_PWM_Start+0x19a>
 80095d4:	68fa      	ldr	r2, [r7, #12]
 80095d6:	2380      	movs	r3, #128	@ 0x80
 80095d8:	025b      	lsls	r3, r3, #9
 80095da:	429a      	cmp	r2, r3
 80095dc:	d011      	beq.n	8009602 <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	681a      	ldr	r2, [r3, #0]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	2101      	movs	r1, #1
 80095ea:	430a      	orrs	r2, r1
 80095ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095ee:	e008      	b.n	8009602 <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	681a      	ldr	r2, [r3, #0]
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	2101      	movs	r1, #1
 80095fc:	430a      	orrs	r2, r1
 80095fe:	601a      	str	r2, [r3, #0]
 8009600:	e000      	b.n	8009604 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009602:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8009604:	2300      	movs	r3, #0
}
 8009606:	0018      	movs	r0, r3
 8009608:	46bd      	mov	sp, r7
 800960a:	b004      	add	sp, #16
 800960c:	bd80      	pop	{r7, pc}
 800960e:	46c0      	nop			@ (mov r8, r8)
 8009610:	40012c00 	.word	0x40012c00
 8009614:	40014400 	.word	0x40014400
 8009618:	40014800 	.word	0x40014800
 800961c:	40000400 	.word	0x40000400
 8009620:	00010007 	.word	0x00010007

08009624 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b084      	sub	sp, #16
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	68db      	ldr	r3, [r3, #12]
 8009632:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	691b      	ldr	r3, [r3, #16]
 800963a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	2202      	movs	r2, #2
 8009640:	4013      	ands	r3, r2
 8009642:	d021      	beq.n	8009688 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2202      	movs	r2, #2
 8009648:	4013      	ands	r3, r2
 800964a:	d01d      	beq.n	8009688 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	2203      	movs	r2, #3
 8009652:	4252      	negs	r2, r2
 8009654:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2201      	movs	r2, #1
 800965a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	699b      	ldr	r3, [r3, #24]
 8009662:	2203      	movs	r2, #3
 8009664:	4013      	ands	r3, r2
 8009666:	d004      	beq.n	8009672 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	0018      	movs	r0, r3
 800966c:	f000 f9ea 	bl	8009a44 <HAL_TIM_IC_CaptureCallback>
 8009670:	e007      	b.n	8009682 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	0018      	movs	r0, r3
 8009676:	f000 f9dd 	bl	8009a34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	0018      	movs	r0, r3
 800967e:	f000 f9e9 	bl	8009a54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2200      	movs	r2, #0
 8009686:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	2204      	movs	r2, #4
 800968c:	4013      	ands	r3, r2
 800968e:	d022      	beq.n	80096d6 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	2204      	movs	r2, #4
 8009694:	4013      	ands	r3, r2
 8009696:	d01e      	beq.n	80096d6 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	2205      	movs	r2, #5
 800969e:	4252      	negs	r2, r2
 80096a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2202      	movs	r2, #2
 80096a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	699a      	ldr	r2, [r3, #24]
 80096ae:	23c0      	movs	r3, #192	@ 0xc0
 80096b0:	009b      	lsls	r3, r3, #2
 80096b2:	4013      	ands	r3, r2
 80096b4:	d004      	beq.n	80096c0 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	0018      	movs	r0, r3
 80096ba:	f000 f9c3 	bl	8009a44 <HAL_TIM_IC_CaptureCallback>
 80096be:	e007      	b.n	80096d0 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	0018      	movs	r0, r3
 80096c4:	f000 f9b6 	bl	8009a34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	0018      	movs	r0, r3
 80096cc:	f000 f9c2 	bl	8009a54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2200      	movs	r2, #0
 80096d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	2208      	movs	r2, #8
 80096da:	4013      	ands	r3, r2
 80096dc:	d021      	beq.n	8009722 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	2208      	movs	r2, #8
 80096e2:	4013      	ands	r3, r2
 80096e4:	d01d      	beq.n	8009722 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	2209      	movs	r2, #9
 80096ec:	4252      	negs	r2, r2
 80096ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2204      	movs	r2, #4
 80096f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	69db      	ldr	r3, [r3, #28]
 80096fc:	2203      	movs	r2, #3
 80096fe:	4013      	ands	r3, r2
 8009700:	d004      	beq.n	800970c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	0018      	movs	r0, r3
 8009706:	f000 f99d 	bl	8009a44 <HAL_TIM_IC_CaptureCallback>
 800970a:	e007      	b.n	800971c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	0018      	movs	r0, r3
 8009710:	f000 f990 	bl	8009a34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	0018      	movs	r0, r3
 8009718:	f000 f99c 	bl	8009a54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2200      	movs	r2, #0
 8009720:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	2210      	movs	r2, #16
 8009726:	4013      	ands	r3, r2
 8009728:	d022      	beq.n	8009770 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	2210      	movs	r2, #16
 800972e:	4013      	ands	r3, r2
 8009730:	d01e      	beq.n	8009770 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	2211      	movs	r2, #17
 8009738:	4252      	negs	r2, r2
 800973a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2208      	movs	r2, #8
 8009740:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	69da      	ldr	r2, [r3, #28]
 8009748:	23c0      	movs	r3, #192	@ 0xc0
 800974a:	009b      	lsls	r3, r3, #2
 800974c:	4013      	ands	r3, r2
 800974e:	d004      	beq.n	800975a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	0018      	movs	r0, r3
 8009754:	f000 f976 	bl	8009a44 <HAL_TIM_IC_CaptureCallback>
 8009758:	e007      	b.n	800976a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	0018      	movs	r0, r3
 800975e:	f000 f969 	bl	8009a34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	0018      	movs	r0, r3
 8009766:	f000 f975 	bl	8009a54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2200      	movs	r2, #0
 800976e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	2201      	movs	r2, #1
 8009774:	4013      	ands	r3, r2
 8009776:	d00c      	beq.n	8009792 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	2201      	movs	r2, #1
 800977c:	4013      	ands	r3, r2
 800977e:	d008      	beq.n	8009792 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	2202      	movs	r2, #2
 8009786:	4252      	negs	r2, r2
 8009788:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	0018      	movs	r0, r3
 800978e:	f7f8 fca1 	bl	80020d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	2280      	movs	r2, #128	@ 0x80
 8009796:	4013      	ands	r3, r2
 8009798:	d104      	bne.n	80097a4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800979a:	68ba      	ldr	r2, [r7, #8]
 800979c:	2380      	movs	r3, #128	@ 0x80
 800979e:	019b      	lsls	r3, r3, #6
 80097a0:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80097a2:	d00b      	beq.n	80097bc <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	2280      	movs	r2, #128	@ 0x80
 80097a8:	4013      	ands	r3, r2
 80097aa:	d007      	beq.n	80097bc <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	4a1e      	ldr	r2, [pc, #120]	@ (800982c <HAL_TIM_IRQHandler+0x208>)
 80097b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	0018      	movs	r0, r3
 80097b8:	f000 fdac 	bl	800a314 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80097bc:	68ba      	ldr	r2, [r7, #8]
 80097be:	2380      	movs	r3, #128	@ 0x80
 80097c0:	005b      	lsls	r3, r3, #1
 80097c2:	4013      	ands	r3, r2
 80097c4:	d00b      	beq.n	80097de <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	2280      	movs	r2, #128	@ 0x80
 80097ca:	4013      	ands	r3, r2
 80097cc:	d007      	beq.n	80097de <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	4a17      	ldr	r2, [pc, #92]	@ (8009830 <HAL_TIM_IRQHandler+0x20c>)
 80097d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	0018      	movs	r0, r3
 80097da:	f000 fda3 	bl	800a324 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	2240      	movs	r2, #64	@ 0x40
 80097e2:	4013      	ands	r3, r2
 80097e4:	d00c      	beq.n	8009800 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	2240      	movs	r2, #64	@ 0x40
 80097ea:	4013      	ands	r3, r2
 80097ec:	d008      	beq.n	8009800 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	2241      	movs	r2, #65	@ 0x41
 80097f4:	4252      	negs	r2, r2
 80097f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	0018      	movs	r0, r3
 80097fc:	f000 f932 	bl	8009a64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	2220      	movs	r2, #32
 8009804:	4013      	ands	r3, r2
 8009806:	d00c      	beq.n	8009822 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	2220      	movs	r2, #32
 800980c:	4013      	ands	r3, r2
 800980e:	d008      	beq.n	8009822 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	2221      	movs	r2, #33	@ 0x21
 8009816:	4252      	negs	r2, r2
 8009818:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	0018      	movs	r0, r3
 800981e:	f000 fd71 	bl	800a304 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009822:	46c0      	nop			@ (mov r8, r8)
 8009824:	46bd      	mov	sp, r7
 8009826:	b004      	add	sp, #16
 8009828:	bd80      	pop	{r7, pc}
 800982a:	46c0      	nop			@ (mov r8, r8)
 800982c:	ffffdf7f 	.word	0xffffdf7f
 8009830:	fffffeff 	.word	0xfffffeff

08009834 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b086      	sub	sp, #24
 8009838:	af00      	add	r7, sp, #0
 800983a:	60f8      	str	r0, [r7, #12]
 800983c:	60b9      	str	r1, [r7, #8]
 800983e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009840:	2317      	movs	r3, #23
 8009842:	18fb      	adds	r3, r7, r3
 8009844:	2200      	movs	r2, #0
 8009846:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	223c      	movs	r2, #60	@ 0x3c
 800984c:	5c9b      	ldrb	r3, [r3, r2]
 800984e:	2b01      	cmp	r3, #1
 8009850:	d101      	bne.n	8009856 <HAL_TIM_PWM_ConfigChannel+0x22>
 8009852:	2302      	movs	r3, #2
 8009854:	e0e5      	b.n	8009a22 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	223c      	movs	r2, #60	@ 0x3c
 800985a:	2101      	movs	r1, #1
 800985c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2b14      	cmp	r3, #20
 8009862:	d900      	bls.n	8009866 <HAL_TIM_PWM_ConfigChannel+0x32>
 8009864:	e0d1      	b.n	8009a0a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	009a      	lsls	r2, r3, #2
 800986a:	4b70      	ldr	r3, [pc, #448]	@ (8009a2c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800986c:	18d3      	adds	r3, r2, r3
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	68ba      	ldr	r2, [r7, #8]
 8009878:	0011      	movs	r1, r2
 800987a:	0018      	movs	r0, r3
 800987c:	f000 f97e 	bl	8009b7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	699a      	ldr	r2, [r3, #24]
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	2108      	movs	r1, #8
 800988c:	430a      	orrs	r2, r1
 800988e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	699a      	ldr	r2, [r3, #24]
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	2104      	movs	r1, #4
 800989c:	438a      	bics	r2, r1
 800989e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	6999      	ldr	r1, [r3, #24]
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	691a      	ldr	r2, [r3, #16]
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	430a      	orrs	r2, r1
 80098b0:	619a      	str	r2, [r3, #24]
      break;
 80098b2:	e0af      	b.n	8009a14 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	68ba      	ldr	r2, [r7, #8]
 80098ba:	0011      	movs	r1, r2
 80098bc:	0018      	movs	r0, r3
 80098be:	f000 f9dd 	bl	8009c7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	699a      	ldr	r2, [r3, #24]
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	2180      	movs	r1, #128	@ 0x80
 80098ce:	0109      	lsls	r1, r1, #4
 80098d0:	430a      	orrs	r2, r1
 80098d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	699a      	ldr	r2, [r3, #24]
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	4954      	ldr	r1, [pc, #336]	@ (8009a30 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80098e0:	400a      	ands	r2, r1
 80098e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	6999      	ldr	r1, [r3, #24]
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	691b      	ldr	r3, [r3, #16]
 80098ee:	021a      	lsls	r2, r3, #8
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	430a      	orrs	r2, r1
 80098f6:	619a      	str	r2, [r3, #24]
      break;
 80098f8:	e08c      	b.n	8009a14 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	68ba      	ldr	r2, [r7, #8]
 8009900:	0011      	movs	r1, r2
 8009902:	0018      	movs	r0, r3
 8009904:	f000 fa38 	bl	8009d78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	69da      	ldr	r2, [r3, #28]
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	2108      	movs	r1, #8
 8009914:	430a      	orrs	r2, r1
 8009916:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	69da      	ldr	r2, [r3, #28]
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	2104      	movs	r1, #4
 8009924:	438a      	bics	r2, r1
 8009926:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	69d9      	ldr	r1, [r3, #28]
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	691a      	ldr	r2, [r3, #16]
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	430a      	orrs	r2, r1
 8009938:	61da      	str	r2, [r3, #28]
      break;
 800993a:	e06b      	b.n	8009a14 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	68ba      	ldr	r2, [r7, #8]
 8009942:	0011      	movs	r1, r2
 8009944:	0018      	movs	r0, r3
 8009946:	f000 fa99 	bl	8009e7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	69da      	ldr	r2, [r3, #28]
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	2180      	movs	r1, #128	@ 0x80
 8009956:	0109      	lsls	r1, r1, #4
 8009958:	430a      	orrs	r2, r1
 800995a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	69da      	ldr	r2, [r3, #28]
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	4932      	ldr	r1, [pc, #200]	@ (8009a30 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8009968:	400a      	ands	r2, r1
 800996a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	69d9      	ldr	r1, [r3, #28]
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	691b      	ldr	r3, [r3, #16]
 8009976:	021a      	lsls	r2, r3, #8
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	430a      	orrs	r2, r1
 800997e:	61da      	str	r2, [r3, #28]
      break;
 8009980:	e048      	b.n	8009a14 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	68ba      	ldr	r2, [r7, #8]
 8009988:	0011      	movs	r1, r2
 800998a:	0018      	movs	r0, r3
 800998c:	f000 fada 	bl	8009f44 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	2108      	movs	r1, #8
 800999c:	430a      	orrs	r2, r1
 800999e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	2104      	movs	r1, #4
 80099ac:	438a      	bics	r2, r1
 80099ae:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	691a      	ldr	r2, [r3, #16]
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	430a      	orrs	r2, r1
 80099c0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80099c2:	e027      	b.n	8009a14 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	68ba      	ldr	r2, [r7, #8]
 80099ca:	0011      	movs	r1, r2
 80099cc:	0018      	movs	r0, r3
 80099ce:	f000 fb13 	bl	8009ff8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	2180      	movs	r1, #128	@ 0x80
 80099de:	0109      	lsls	r1, r1, #4
 80099e0:	430a      	orrs	r2, r1
 80099e2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	4910      	ldr	r1, [pc, #64]	@ (8009a30 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80099f0:	400a      	ands	r2, r1
 80099f2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	691b      	ldr	r3, [r3, #16]
 80099fe:	021a      	lsls	r2, r3, #8
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	430a      	orrs	r2, r1
 8009a06:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009a08:	e004      	b.n	8009a14 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8009a0a:	2317      	movs	r3, #23
 8009a0c:	18fb      	adds	r3, r7, r3
 8009a0e:	2201      	movs	r2, #1
 8009a10:	701a      	strb	r2, [r3, #0]
      break;
 8009a12:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	223c      	movs	r2, #60	@ 0x3c
 8009a18:	2100      	movs	r1, #0
 8009a1a:	5499      	strb	r1, [r3, r2]

  return status;
 8009a1c:	2317      	movs	r3, #23
 8009a1e:	18fb      	adds	r3, r7, r3
 8009a20:	781b      	ldrb	r3, [r3, #0]
}
 8009a22:	0018      	movs	r0, r3
 8009a24:	46bd      	mov	sp, r7
 8009a26:	b006      	add	sp, #24
 8009a28:	bd80      	pop	{r7, pc}
 8009a2a:	46c0      	nop			@ (mov r8, r8)
 8009a2c:	0800c60c 	.word	0x0800c60c
 8009a30:	fffffbff 	.word	0xfffffbff

08009a34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b082      	sub	sp, #8
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009a3c:	46c0      	nop			@ (mov r8, r8)
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	b002      	add	sp, #8
 8009a42:	bd80      	pop	{r7, pc}

08009a44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b082      	sub	sp, #8
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009a4c:	46c0      	nop			@ (mov r8, r8)
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	b002      	add	sp, #8
 8009a52:	bd80      	pop	{r7, pc}

08009a54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b082      	sub	sp, #8
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009a5c:	46c0      	nop			@ (mov r8, r8)
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	b002      	add	sp, #8
 8009a62:	bd80      	pop	{r7, pc}

08009a64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b082      	sub	sp, #8
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009a6c:	46c0      	nop			@ (mov r8, r8)
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	b002      	add	sp, #8
 8009a72:	bd80      	pop	{r7, pc}

08009a74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b084      	sub	sp, #16
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
 8009a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	4a37      	ldr	r2, [pc, #220]	@ (8009b64 <TIM_Base_SetConfig+0xf0>)
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	d008      	beq.n	8009a9e <TIM_Base_SetConfig+0x2a>
 8009a8c:	687a      	ldr	r2, [r7, #4]
 8009a8e:	2380      	movs	r3, #128	@ 0x80
 8009a90:	05db      	lsls	r3, r3, #23
 8009a92:	429a      	cmp	r2, r3
 8009a94:	d003      	beq.n	8009a9e <TIM_Base_SetConfig+0x2a>
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	4a33      	ldr	r2, [pc, #204]	@ (8009b68 <TIM_Base_SetConfig+0xf4>)
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d108      	bne.n	8009ab0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	2270      	movs	r2, #112	@ 0x70
 8009aa2:	4393      	bics	r3, r2
 8009aa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	685b      	ldr	r3, [r3, #4]
 8009aaa:	68fa      	ldr	r2, [r7, #12]
 8009aac:	4313      	orrs	r3, r2
 8009aae:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	4a2c      	ldr	r2, [pc, #176]	@ (8009b64 <TIM_Base_SetConfig+0xf0>)
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	d014      	beq.n	8009ae2 <TIM_Base_SetConfig+0x6e>
 8009ab8:	687a      	ldr	r2, [r7, #4]
 8009aba:	2380      	movs	r3, #128	@ 0x80
 8009abc:	05db      	lsls	r3, r3, #23
 8009abe:	429a      	cmp	r2, r3
 8009ac0:	d00f      	beq.n	8009ae2 <TIM_Base_SetConfig+0x6e>
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	4a28      	ldr	r2, [pc, #160]	@ (8009b68 <TIM_Base_SetConfig+0xf4>)
 8009ac6:	4293      	cmp	r3, r2
 8009ac8:	d00b      	beq.n	8009ae2 <TIM_Base_SetConfig+0x6e>
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	4a27      	ldr	r2, [pc, #156]	@ (8009b6c <TIM_Base_SetConfig+0xf8>)
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d007      	beq.n	8009ae2 <TIM_Base_SetConfig+0x6e>
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	4a26      	ldr	r2, [pc, #152]	@ (8009b70 <TIM_Base_SetConfig+0xfc>)
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	d003      	beq.n	8009ae2 <TIM_Base_SetConfig+0x6e>
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	4a25      	ldr	r2, [pc, #148]	@ (8009b74 <TIM_Base_SetConfig+0x100>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d108      	bne.n	8009af4 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	4a24      	ldr	r2, [pc, #144]	@ (8009b78 <TIM_Base_SetConfig+0x104>)
 8009ae6:	4013      	ands	r3, r2
 8009ae8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	68db      	ldr	r3, [r3, #12]
 8009aee:	68fa      	ldr	r2, [r7, #12]
 8009af0:	4313      	orrs	r3, r2
 8009af2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	2280      	movs	r2, #128	@ 0x80
 8009af8:	4393      	bics	r3, r2
 8009afa:	001a      	movs	r2, r3
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	695b      	ldr	r3, [r3, #20]
 8009b00:	4313      	orrs	r3, r2
 8009b02:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	68fa      	ldr	r2, [r7, #12]
 8009b08:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	689a      	ldr	r2, [r3, #8]
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	681a      	ldr	r2, [r3, #0]
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	4a11      	ldr	r2, [pc, #68]	@ (8009b64 <TIM_Base_SetConfig+0xf0>)
 8009b1e:	4293      	cmp	r3, r2
 8009b20:	d007      	beq.n	8009b32 <TIM_Base_SetConfig+0xbe>
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	4a12      	ldr	r2, [pc, #72]	@ (8009b70 <TIM_Base_SetConfig+0xfc>)
 8009b26:	4293      	cmp	r3, r2
 8009b28:	d003      	beq.n	8009b32 <TIM_Base_SetConfig+0xbe>
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	4a11      	ldr	r2, [pc, #68]	@ (8009b74 <TIM_Base_SetConfig+0x100>)
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	d103      	bne.n	8009b3a <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	691a      	ldr	r2, [r3, #16]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2201      	movs	r2, #1
 8009b3e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	691b      	ldr	r3, [r3, #16]
 8009b44:	2201      	movs	r2, #1
 8009b46:	4013      	ands	r3, r2
 8009b48:	2b01      	cmp	r3, #1
 8009b4a:	d106      	bne.n	8009b5a <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	691b      	ldr	r3, [r3, #16]
 8009b50:	2201      	movs	r2, #1
 8009b52:	4393      	bics	r3, r2
 8009b54:	001a      	movs	r2, r3
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	611a      	str	r2, [r3, #16]
  }
}
 8009b5a:	46c0      	nop			@ (mov r8, r8)
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	b004      	add	sp, #16
 8009b60:	bd80      	pop	{r7, pc}
 8009b62:	46c0      	nop			@ (mov r8, r8)
 8009b64:	40012c00 	.word	0x40012c00
 8009b68:	40000400 	.word	0x40000400
 8009b6c:	40002000 	.word	0x40002000
 8009b70:	40014400 	.word	0x40014400
 8009b74:	40014800 	.word	0x40014800
 8009b78:	fffffcff 	.word	0xfffffcff

08009b7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b086      	sub	sp, #24
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
 8009b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6a1b      	ldr	r3, [r3, #32]
 8009b8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	6a1b      	ldr	r3, [r3, #32]
 8009b90:	2201      	movs	r2, #1
 8009b92:	4393      	bics	r3, r2
 8009b94:	001a      	movs	r2, r3
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	685b      	ldr	r3, [r3, #4]
 8009b9e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	699b      	ldr	r3, [r3, #24]
 8009ba4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	4a2e      	ldr	r2, [pc, #184]	@ (8009c64 <TIM_OC1_SetConfig+0xe8>)
 8009baa:	4013      	ands	r3, r2
 8009bac:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	2203      	movs	r2, #3
 8009bb2:	4393      	bics	r3, r2
 8009bb4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	68fa      	ldr	r2, [r7, #12]
 8009bbc:	4313      	orrs	r3, r2
 8009bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009bc0:	697b      	ldr	r3, [r7, #20]
 8009bc2:	2202      	movs	r2, #2
 8009bc4:	4393      	bics	r3, r2
 8009bc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	689b      	ldr	r3, [r3, #8]
 8009bcc:	697a      	ldr	r2, [r7, #20]
 8009bce:	4313      	orrs	r3, r2
 8009bd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	4a24      	ldr	r2, [pc, #144]	@ (8009c68 <TIM_OC1_SetConfig+0xec>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d007      	beq.n	8009bea <TIM_OC1_SetConfig+0x6e>
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	4a23      	ldr	r2, [pc, #140]	@ (8009c6c <TIM_OC1_SetConfig+0xf0>)
 8009bde:	4293      	cmp	r3, r2
 8009be0:	d003      	beq.n	8009bea <TIM_OC1_SetConfig+0x6e>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	4a22      	ldr	r2, [pc, #136]	@ (8009c70 <TIM_OC1_SetConfig+0xf4>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d10c      	bne.n	8009c04 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009bea:	697b      	ldr	r3, [r7, #20]
 8009bec:	2208      	movs	r2, #8
 8009bee:	4393      	bics	r3, r2
 8009bf0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	68db      	ldr	r3, [r3, #12]
 8009bf6:	697a      	ldr	r2, [r7, #20]
 8009bf8:	4313      	orrs	r3, r2
 8009bfa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009bfc:	697b      	ldr	r3, [r7, #20]
 8009bfe:	2204      	movs	r2, #4
 8009c00:	4393      	bics	r3, r2
 8009c02:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	4a18      	ldr	r2, [pc, #96]	@ (8009c68 <TIM_OC1_SetConfig+0xec>)
 8009c08:	4293      	cmp	r3, r2
 8009c0a:	d007      	beq.n	8009c1c <TIM_OC1_SetConfig+0xa0>
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	4a17      	ldr	r2, [pc, #92]	@ (8009c6c <TIM_OC1_SetConfig+0xf0>)
 8009c10:	4293      	cmp	r3, r2
 8009c12:	d003      	beq.n	8009c1c <TIM_OC1_SetConfig+0xa0>
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	4a16      	ldr	r2, [pc, #88]	@ (8009c70 <TIM_OC1_SetConfig+0xf4>)
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	d111      	bne.n	8009c40 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	4a15      	ldr	r2, [pc, #84]	@ (8009c74 <TIM_OC1_SetConfig+0xf8>)
 8009c20:	4013      	ands	r3, r2
 8009c22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009c24:	693b      	ldr	r3, [r7, #16]
 8009c26:	4a14      	ldr	r2, [pc, #80]	@ (8009c78 <TIM_OC1_SetConfig+0xfc>)
 8009c28:	4013      	ands	r3, r2
 8009c2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	695b      	ldr	r3, [r3, #20]
 8009c30:	693a      	ldr	r2, [r7, #16]
 8009c32:	4313      	orrs	r3, r2
 8009c34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	699b      	ldr	r3, [r3, #24]
 8009c3a:	693a      	ldr	r2, [r7, #16]
 8009c3c:	4313      	orrs	r3, r2
 8009c3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	693a      	ldr	r2, [r7, #16]
 8009c44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	68fa      	ldr	r2, [r7, #12]
 8009c4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	685a      	ldr	r2, [r3, #4]
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	697a      	ldr	r2, [r7, #20]
 8009c58:	621a      	str	r2, [r3, #32]
}
 8009c5a:	46c0      	nop			@ (mov r8, r8)
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	b006      	add	sp, #24
 8009c60:	bd80      	pop	{r7, pc}
 8009c62:	46c0      	nop			@ (mov r8, r8)
 8009c64:	fffeff8f 	.word	0xfffeff8f
 8009c68:	40012c00 	.word	0x40012c00
 8009c6c:	40014400 	.word	0x40014400
 8009c70:	40014800 	.word	0x40014800
 8009c74:	fffffeff 	.word	0xfffffeff
 8009c78:	fffffdff 	.word	0xfffffdff

08009c7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b086      	sub	sp, #24
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
 8009c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6a1b      	ldr	r3, [r3, #32]
 8009c8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6a1b      	ldr	r3, [r3, #32]
 8009c90:	2210      	movs	r2, #16
 8009c92:	4393      	bics	r3, r2
 8009c94:	001a      	movs	r2, r3
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	685b      	ldr	r3, [r3, #4]
 8009c9e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	699b      	ldr	r3, [r3, #24]
 8009ca4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	4a2c      	ldr	r2, [pc, #176]	@ (8009d5c <TIM_OC2_SetConfig+0xe0>)
 8009caa:	4013      	ands	r3, r2
 8009cac:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	4a2b      	ldr	r2, [pc, #172]	@ (8009d60 <TIM_OC2_SetConfig+0xe4>)
 8009cb2:	4013      	ands	r3, r2
 8009cb4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	021b      	lsls	r3, r3, #8
 8009cbc:	68fa      	ldr	r2, [r7, #12]
 8009cbe:	4313      	orrs	r3, r2
 8009cc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009cc2:	697b      	ldr	r3, [r7, #20]
 8009cc4:	2220      	movs	r2, #32
 8009cc6:	4393      	bics	r3, r2
 8009cc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	689b      	ldr	r3, [r3, #8]
 8009cce:	011b      	lsls	r3, r3, #4
 8009cd0:	697a      	ldr	r2, [r7, #20]
 8009cd2:	4313      	orrs	r3, r2
 8009cd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	4a22      	ldr	r2, [pc, #136]	@ (8009d64 <TIM_OC2_SetConfig+0xe8>)
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d10d      	bne.n	8009cfa <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	2280      	movs	r2, #128	@ 0x80
 8009ce2:	4393      	bics	r3, r2
 8009ce4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	68db      	ldr	r3, [r3, #12]
 8009cea:	011b      	lsls	r3, r3, #4
 8009cec:	697a      	ldr	r2, [r7, #20]
 8009cee:	4313      	orrs	r3, r2
 8009cf0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	2240      	movs	r2, #64	@ 0x40
 8009cf6:	4393      	bics	r3, r2
 8009cf8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	4a19      	ldr	r2, [pc, #100]	@ (8009d64 <TIM_OC2_SetConfig+0xe8>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d007      	beq.n	8009d12 <TIM_OC2_SetConfig+0x96>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	4a18      	ldr	r2, [pc, #96]	@ (8009d68 <TIM_OC2_SetConfig+0xec>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d003      	beq.n	8009d12 <TIM_OC2_SetConfig+0x96>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	4a17      	ldr	r2, [pc, #92]	@ (8009d6c <TIM_OC2_SetConfig+0xf0>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d113      	bne.n	8009d3a <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009d12:	693b      	ldr	r3, [r7, #16]
 8009d14:	4a16      	ldr	r2, [pc, #88]	@ (8009d70 <TIM_OC2_SetConfig+0xf4>)
 8009d16:	4013      	ands	r3, r2
 8009d18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009d1a:	693b      	ldr	r3, [r7, #16]
 8009d1c:	4a15      	ldr	r2, [pc, #84]	@ (8009d74 <TIM_OC2_SetConfig+0xf8>)
 8009d1e:	4013      	ands	r3, r2
 8009d20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	695b      	ldr	r3, [r3, #20]
 8009d26:	009b      	lsls	r3, r3, #2
 8009d28:	693a      	ldr	r2, [r7, #16]
 8009d2a:	4313      	orrs	r3, r2
 8009d2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	699b      	ldr	r3, [r3, #24]
 8009d32:	009b      	lsls	r3, r3, #2
 8009d34:	693a      	ldr	r2, [r7, #16]
 8009d36:	4313      	orrs	r3, r2
 8009d38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	693a      	ldr	r2, [r7, #16]
 8009d3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	68fa      	ldr	r2, [r7, #12]
 8009d44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	685a      	ldr	r2, [r3, #4]
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	697a      	ldr	r2, [r7, #20]
 8009d52:	621a      	str	r2, [r3, #32]
}
 8009d54:	46c0      	nop			@ (mov r8, r8)
 8009d56:	46bd      	mov	sp, r7
 8009d58:	b006      	add	sp, #24
 8009d5a:	bd80      	pop	{r7, pc}
 8009d5c:	feff8fff 	.word	0xfeff8fff
 8009d60:	fffffcff 	.word	0xfffffcff
 8009d64:	40012c00 	.word	0x40012c00
 8009d68:	40014400 	.word	0x40014400
 8009d6c:	40014800 	.word	0x40014800
 8009d70:	fffffbff 	.word	0xfffffbff
 8009d74:	fffff7ff 	.word	0xfffff7ff

08009d78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b086      	sub	sp, #24
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
 8009d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6a1b      	ldr	r3, [r3, #32]
 8009d86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6a1b      	ldr	r3, [r3, #32]
 8009d8c:	4a31      	ldr	r2, [pc, #196]	@ (8009e54 <TIM_OC3_SetConfig+0xdc>)
 8009d8e:	401a      	ands	r2, r3
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	685b      	ldr	r3, [r3, #4]
 8009d98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	69db      	ldr	r3, [r3, #28]
 8009d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	4a2d      	ldr	r2, [pc, #180]	@ (8009e58 <TIM_OC3_SetConfig+0xe0>)
 8009da4:	4013      	ands	r3, r2
 8009da6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	2203      	movs	r2, #3
 8009dac:	4393      	bics	r3, r2
 8009dae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	68fa      	ldr	r2, [r7, #12]
 8009db6:	4313      	orrs	r3, r2
 8009db8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009dba:	697b      	ldr	r3, [r7, #20]
 8009dbc:	4a27      	ldr	r2, [pc, #156]	@ (8009e5c <TIM_OC3_SetConfig+0xe4>)
 8009dbe:	4013      	ands	r3, r2
 8009dc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	689b      	ldr	r3, [r3, #8]
 8009dc6:	021b      	lsls	r3, r3, #8
 8009dc8:	697a      	ldr	r2, [r7, #20]
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	4a23      	ldr	r2, [pc, #140]	@ (8009e60 <TIM_OC3_SetConfig+0xe8>)
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	d10d      	bne.n	8009df2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009dd6:	697b      	ldr	r3, [r7, #20]
 8009dd8:	4a22      	ldr	r2, [pc, #136]	@ (8009e64 <TIM_OC3_SetConfig+0xec>)
 8009dda:	4013      	ands	r3, r2
 8009ddc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	68db      	ldr	r3, [r3, #12]
 8009de2:	021b      	lsls	r3, r3, #8
 8009de4:	697a      	ldr	r2, [r7, #20]
 8009de6:	4313      	orrs	r3, r2
 8009de8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009dea:	697b      	ldr	r3, [r7, #20]
 8009dec:	4a1e      	ldr	r2, [pc, #120]	@ (8009e68 <TIM_OC3_SetConfig+0xf0>)
 8009dee:	4013      	ands	r3, r2
 8009df0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	4a1a      	ldr	r2, [pc, #104]	@ (8009e60 <TIM_OC3_SetConfig+0xe8>)
 8009df6:	4293      	cmp	r3, r2
 8009df8:	d007      	beq.n	8009e0a <TIM_OC3_SetConfig+0x92>
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	4a1b      	ldr	r2, [pc, #108]	@ (8009e6c <TIM_OC3_SetConfig+0xf4>)
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d003      	beq.n	8009e0a <TIM_OC3_SetConfig+0x92>
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	4a1a      	ldr	r2, [pc, #104]	@ (8009e70 <TIM_OC3_SetConfig+0xf8>)
 8009e06:	4293      	cmp	r3, r2
 8009e08:	d113      	bne.n	8009e32 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009e0a:	693b      	ldr	r3, [r7, #16]
 8009e0c:	4a19      	ldr	r2, [pc, #100]	@ (8009e74 <TIM_OC3_SetConfig+0xfc>)
 8009e0e:	4013      	ands	r3, r2
 8009e10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009e12:	693b      	ldr	r3, [r7, #16]
 8009e14:	4a18      	ldr	r2, [pc, #96]	@ (8009e78 <TIM_OC3_SetConfig+0x100>)
 8009e16:	4013      	ands	r3, r2
 8009e18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	695b      	ldr	r3, [r3, #20]
 8009e1e:	011b      	lsls	r3, r3, #4
 8009e20:	693a      	ldr	r2, [r7, #16]
 8009e22:	4313      	orrs	r3, r2
 8009e24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	699b      	ldr	r3, [r3, #24]
 8009e2a:	011b      	lsls	r3, r3, #4
 8009e2c:	693a      	ldr	r2, [r7, #16]
 8009e2e:	4313      	orrs	r3, r2
 8009e30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	693a      	ldr	r2, [r7, #16]
 8009e36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	68fa      	ldr	r2, [r7, #12]
 8009e3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	685a      	ldr	r2, [r3, #4]
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	697a      	ldr	r2, [r7, #20]
 8009e4a:	621a      	str	r2, [r3, #32]
}
 8009e4c:	46c0      	nop			@ (mov r8, r8)
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	b006      	add	sp, #24
 8009e52:	bd80      	pop	{r7, pc}
 8009e54:	fffffeff 	.word	0xfffffeff
 8009e58:	fffeff8f 	.word	0xfffeff8f
 8009e5c:	fffffdff 	.word	0xfffffdff
 8009e60:	40012c00 	.word	0x40012c00
 8009e64:	fffff7ff 	.word	0xfffff7ff
 8009e68:	fffffbff 	.word	0xfffffbff
 8009e6c:	40014400 	.word	0x40014400
 8009e70:	40014800 	.word	0x40014800
 8009e74:	ffffefff 	.word	0xffffefff
 8009e78:	ffffdfff 	.word	0xffffdfff

08009e7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b086      	sub	sp, #24
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
 8009e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6a1b      	ldr	r3, [r3, #32]
 8009e8a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6a1b      	ldr	r3, [r3, #32]
 8009e90:	4a24      	ldr	r2, [pc, #144]	@ (8009f24 <TIM_OC4_SetConfig+0xa8>)
 8009e92:	401a      	ands	r2, r3
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	685b      	ldr	r3, [r3, #4]
 8009e9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	69db      	ldr	r3, [r3, #28]
 8009ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	4a20      	ldr	r2, [pc, #128]	@ (8009f28 <TIM_OC4_SetConfig+0xac>)
 8009ea8:	4013      	ands	r3, r2
 8009eaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	4a1f      	ldr	r2, [pc, #124]	@ (8009f2c <TIM_OC4_SetConfig+0xb0>)
 8009eb0:	4013      	ands	r3, r2
 8009eb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	021b      	lsls	r3, r3, #8
 8009eba:	68fa      	ldr	r2, [r7, #12]
 8009ebc:	4313      	orrs	r3, r2
 8009ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009ec0:	693b      	ldr	r3, [r7, #16]
 8009ec2:	4a1b      	ldr	r2, [pc, #108]	@ (8009f30 <TIM_OC4_SetConfig+0xb4>)
 8009ec4:	4013      	ands	r3, r2
 8009ec6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	689b      	ldr	r3, [r3, #8]
 8009ecc:	031b      	lsls	r3, r3, #12
 8009ece:	693a      	ldr	r2, [r7, #16]
 8009ed0:	4313      	orrs	r3, r2
 8009ed2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	4a17      	ldr	r2, [pc, #92]	@ (8009f34 <TIM_OC4_SetConfig+0xb8>)
 8009ed8:	4293      	cmp	r3, r2
 8009eda:	d007      	beq.n	8009eec <TIM_OC4_SetConfig+0x70>
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	4a16      	ldr	r2, [pc, #88]	@ (8009f38 <TIM_OC4_SetConfig+0xbc>)
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	d003      	beq.n	8009eec <TIM_OC4_SetConfig+0x70>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	4a15      	ldr	r2, [pc, #84]	@ (8009f3c <TIM_OC4_SetConfig+0xc0>)
 8009ee8:	4293      	cmp	r3, r2
 8009eea:	d109      	bne.n	8009f00 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009eec:	697b      	ldr	r3, [r7, #20]
 8009eee:	4a14      	ldr	r2, [pc, #80]	@ (8009f40 <TIM_OC4_SetConfig+0xc4>)
 8009ef0:	4013      	ands	r3, r2
 8009ef2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	695b      	ldr	r3, [r3, #20]
 8009ef8:	019b      	lsls	r3, r3, #6
 8009efa:	697a      	ldr	r2, [r7, #20]
 8009efc:	4313      	orrs	r3, r2
 8009efe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	697a      	ldr	r2, [r7, #20]
 8009f04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	68fa      	ldr	r2, [r7, #12]
 8009f0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	685a      	ldr	r2, [r3, #4]
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	693a      	ldr	r2, [r7, #16]
 8009f18:	621a      	str	r2, [r3, #32]
}
 8009f1a:	46c0      	nop			@ (mov r8, r8)
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	b006      	add	sp, #24
 8009f20:	bd80      	pop	{r7, pc}
 8009f22:	46c0      	nop			@ (mov r8, r8)
 8009f24:	ffffefff 	.word	0xffffefff
 8009f28:	feff8fff 	.word	0xfeff8fff
 8009f2c:	fffffcff 	.word	0xfffffcff
 8009f30:	ffffdfff 	.word	0xffffdfff
 8009f34:	40012c00 	.word	0x40012c00
 8009f38:	40014400 	.word	0x40014400
 8009f3c:	40014800 	.word	0x40014800
 8009f40:	ffffbfff 	.word	0xffffbfff

08009f44 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b086      	sub	sp, #24
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
 8009f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6a1b      	ldr	r3, [r3, #32]
 8009f52:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	6a1b      	ldr	r3, [r3, #32]
 8009f58:	4a21      	ldr	r2, [pc, #132]	@ (8009fe0 <TIM_OC5_SetConfig+0x9c>)
 8009f5a:	401a      	ands	r2, r3
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	685b      	ldr	r3, [r3, #4]
 8009f64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	4a1d      	ldr	r2, [pc, #116]	@ (8009fe4 <TIM_OC5_SetConfig+0xa0>)
 8009f70:	4013      	ands	r3, r2
 8009f72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	68fa      	ldr	r2, [r7, #12]
 8009f7a:	4313      	orrs	r3, r2
 8009f7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009f7e:	693b      	ldr	r3, [r7, #16]
 8009f80:	4a19      	ldr	r2, [pc, #100]	@ (8009fe8 <TIM_OC5_SetConfig+0xa4>)
 8009f82:	4013      	ands	r3, r2
 8009f84:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	689b      	ldr	r3, [r3, #8]
 8009f8a:	041b      	lsls	r3, r3, #16
 8009f8c:	693a      	ldr	r2, [r7, #16]
 8009f8e:	4313      	orrs	r3, r2
 8009f90:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	4a15      	ldr	r2, [pc, #84]	@ (8009fec <TIM_OC5_SetConfig+0xa8>)
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d007      	beq.n	8009faa <TIM_OC5_SetConfig+0x66>
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	4a14      	ldr	r2, [pc, #80]	@ (8009ff0 <TIM_OC5_SetConfig+0xac>)
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	d003      	beq.n	8009faa <TIM_OC5_SetConfig+0x66>
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	4a13      	ldr	r2, [pc, #76]	@ (8009ff4 <TIM_OC5_SetConfig+0xb0>)
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	d109      	bne.n	8009fbe <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	4a0c      	ldr	r2, [pc, #48]	@ (8009fe0 <TIM_OC5_SetConfig+0x9c>)
 8009fae:	4013      	ands	r3, r2
 8009fb0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	695b      	ldr	r3, [r3, #20]
 8009fb6:	021b      	lsls	r3, r3, #8
 8009fb8:	697a      	ldr	r2, [r7, #20]
 8009fba:	4313      	orrs	r3, r2
 8009fbc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	697a      	ldr	r2, [r7, #20]
 8009fc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	68fa      	ldr	r2, [r7, #12]
 8009fc8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	685a      	ldr	r2, [r3, #4]
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	693a      	ldr	r2, [r7, #16]
 8009fd6:	621a      	str	r2, [r3, #32]
}
 8009fd8:	46c0      	nop			@ (mov r8, r8)
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	b006      	add	sp, #24
 8009fde:	bd80      	pop	{r7, pc}
 8009fe0:	fffeffff 	.word	0xfffeffff
 8009fe4:	fffeff8f 	.word	0xfffeff8f
 8009fe8:	fffdffff 	.word	0xfffdffff
 8009fec:	40012c00 	.word	0x40012c00
 8009ff0:	40014400 	.word	0x40014400
 8009ff4:	40014800 	.word	0x40014800

08009ff8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b086      	sub	sp, #24
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
 800a000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6a1b      	ldr	r3, [r3, #32]
 800a006:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	6a1b      	ldr	r3, [r3, #32]
 800a00c:	4a22      	ldr	r2, [pc, #136]	@ (800a098 <TIM_OC6_SetConfig+0xa0>)
 800a00e:	401a      	ands	r2, r3
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	685b      	ldr	r3, [r3, #4]
 800a018:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a01e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	4a1e      	ldr	r2, [pc, #120]	@ (800a09c <TIM_OC6_SetConfig+0xa4>)
 800a024:	4013      	ands	r3, r2
 800a026:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	021b      	lsls	r3, r3, #8
 800a02e:	68fa      	ldr	r2, [r7, #12]
 800a030:	4313      	orrs	r3, r2
 800a032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a034:	693b      	ldr	r3, [r7, #16]
 800a036:	4a1a      	ldr	r2, [pc, #104]	@ (800a0a0 <TIM_OC6_SetConfig+0xa8>)
 800a038:	4013      	ands	r3, r2
 800a03a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	689b      	ldr	r3, [r3, #8]
 800a040:	051b      	lsls	r3, r3, #20
 800a042:	693a      	ldr	r2, [r7, #16]
 800a044:	4313      	orrs	r3, r2
 800a046:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	4a16      	ldr	r2, [pc, #88]	@ (800a0a4 <TIM_OC6_SetConfig+0xac>)
 800a04c:	4293      	cmp	r3, r2
 800a04e:	d007      	beq.n	800a060 <TIM_OC6_SetConfig+0x68>
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	4a15      	ldr	r2, [pc, #84]	@ (800a0a8 <TIM_OC6_SetConfig+0xb0>)
 800a054:	4293      	cmp	r3, r2
 800a056:	d003      	beq.n	800a060 <TIM_OC6_SetConfig+0x68>
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	4a14      	ldr	r2, [pc, #80]	@ (800a0ac <TIM_OC6_SetConfig+0xb4>)
 800a05c:	4293      	cmp	r3, r2
 800a05e:	d109      	bne.n	800a074 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a060:	697b      	ldr	r3, [r7, #20]
 800a062:	4a13      	ldr	r2, [pc, #76]	@ (800a0b0 <TIM_OC6_SetConfig+0xb8>)
 800a064:	4013      	ands	r3, r2
 800a066:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	695b      	ldr	r3, [r3, #20]
 800a06c:	029b      	lsls	r3, r3, #10
 800a06e:	697a      	ldr	r2, [r7, #20]
 800a070:	4313      	orrs	r3, r2
 800a072:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	697a      	ldr	r2, [r7, #20]
 800a078:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	68fa      	ldr	r2, [r7, #12]
 800a07e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	685a      	ldr	r2, [r3, #4]
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	693a      	ldr	r2, [r7, #16]
 800a08c:	621a      	str	r2, [r3, #32]
}
 800a08e:	46c0      	nop			@ (mov r8, r8)
 800a090:	46bd      	mov	sp, r7
 800a092:	b006      	add	sp, #24
 800a094:	bd80      	pop	{r7, pc}
 800a096:	46c0      	nop			@ (mov r8, r8)
 800a098:	ffefffff 	.word	0xffefffff
 800a09c:	feff8fff 	.word	0xfeff8fff
 800a0a0:	ffdfffff 	.word	0xffdfffff
 800a0a4:	40012c00 	.word	0x40012c00
 800a0a8:	40014400 	.word	0x40014400
 800a0ac:	40014800 	.word	0x40014800
 800a0b0:	fffbffff 	.word	0xfffbffff

0800a0b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b086      	sub	sp, #24
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	60f8      	str	r0, [r7, #12]
 800a0bc:	60b9      	str	r1, [r7, #8]
 800a0be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a0c0:	68bb      	ldr	r3, [r7, #8]
 800a0c2:	221f      	movs	r2, #31
 800a0c4:	4013      	ands	r3, r2
 800a0c6:	2201      	movs	r2, #1
 800a0c8:	409a      	lsls	r2, r3
 800a0ca:	0013      	movs	r3, r2
 800a0cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	6a1b      	ldr	r3, [r3, #32]
 800a0d2:	697a      	ldr	r2, [r7, #20]
 800a0d4:	43d2      	mvns	r2, r2
 800a0d6:	401a      	ands	r2, r3
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	6a1a      	ldr	r2, [r3, #32]
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	211f      	movs	r1, #31
 800a0e4:	400b      	ands	r3, r1
 800a0e6:	6879      	ldr	r1, [r7, #4]
 800a0e8:	4099      	lsls	r1, r3
 800a0ea:	000b      	movs	r3, r1
 800a0ec:	431a      	orrs	r2, r3
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	621a      	str	r2, [r3, #32]
}
 800a0f2:	46c0      	nop			@ (mov r8, r8)
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	b006      	add	sp, #24
 800a0f8:	bd80      	pop	{r7, pc}
	...

0800a0fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b084      	sub	sp, #16
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
 800a104:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	223c      	movs	r2, #60	@ 0x3c
 800a10a:	5c9b      	ldrb	r3, [r3, r2]
 800a10c:	2b01      	cmp	r3, #1
 800a10e:	d101      	bne.n	800a114 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a110:	2302      	movs	r3, #2
 800a112:	e050      	b.n	800a1b6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	223c      	movs	r2, #60	@ 0x3c
 800a118:	2101      	movs	r1, #1
 800a11a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	223d      	movs	r2, #61	@ 0x3d
 800a120:	2102      	movs	r1, #2
 800a122:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	685b      	ldr	r3, [r3, #4]
 800a12a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	689b      	ldr	r3, [r3, #8]
 800a132:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	4a21      	ldr	r2, [pc, #132]	@ (800a1c0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800a13a:	4293      	cmp	r3, r2
 800a13c:	d108      	bne.n	800a150 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	4a20      	ldr	r2, [pc, #128]	@ (800a1c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a142:	4013      	ands	r3, r2
 800a144:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	685b      	ldr	r3, [r3, #4]
 800a14a:	68fa      	ldr	r2, [r7, #12]
 800a14c:	4313      	orrs	r3, r2
 800a14e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	2270      	movs	r2, #112	@ 0x70
 800a154:	4393      	bics	r3, r2
 800a156:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	68fa      	ldr	r2, [r7, #12]
 800a15e:	4313      	orrs	r3, r2
 800a160:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	68fa      	ldr	r2, [r7, #12]
 800a168:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	4a14      	ldr	r2, [pc, #80]	@ (800a1c0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800a170:	4293      	cmp	r3, r2
 800a172:	d00a      	beq.n	800a18a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681a      	ldr	r2, [r3, #0]
 800a178:	2380      	movs	r3, #128	@ 0x80
 800a17a:	05db      	lsls	r3, r3, #23
 800a17c:	429a      	cmp	r2, r3
 800a17e:	d004      	beq.n	800a18a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	4a10      	ldr	r2, [pc, #64]	@ (800a1c8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a186:	4293      	cmp	r3, r2
 800a188:	d10c      	bne.n	800a1a4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a18a:	68bb      	ldr	r3, [r7, #8]
 800a18c:	2280      	movs	r2, #128	@ 0x80
 800a18e:	4393      	bics	r3, r2
 800a190:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	689b      	ldr	r3, [r3, #8]
 800a196:	68ba      	ldr	r2, [r7, #8]
 800a198:	4313      	orrs	r3, r2
 800a19a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	68ba      	ldr	r2, [r7, #8]
 800a1a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	223d      	movs	r2, #61	@ 0x3d
 800a1a8:	2101      	movs	r1, #1
 800a1aa:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	223c      	movs	r2, #60	@ 0x3c
 800a1b0:	2100      	movs	r1, #0
 800a1b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a1b4:	2300      	movs	r3, #0
}
 800a1b6:	0018      	movs	r0, r3
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	b004      	add	sp, #16
 800a1bc:	bd80      	pop	{r7, pc}
 800a1be:	46c0      	nop			@ (mov r8, r8)
 800a1c0:	40012c00 	.word	0x40012c00
 800a1c4:	ff0fffff 	.word	0xff0fffff
 800a1c8:	40000400 	.word	0x40000400

0800a1cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b084      	sub	sp, #16
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
 800a1d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	223c      	movs	r2, #60	@ 0x3c
 800a1de:	5c9b      	ldrb	r3, [r3, r2]
 800a1e0:	2b01      	cmp	r3, #1
 800a1e2:	d101      	bne.n	800a1e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a1e4:	2302      	movs	r3, #2
 800a1e6:	e06f      	b.n	800a2c8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	223c      	movs	r2, #60	@ 0x3c
 800a1ec:	2101      	movs	r1, #1
 800a1ee:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	22ff      	movs	r2, #255	@ 0xff
 800a1f4:	4393      	bics	r3, r2
 800a1f6:	001a      	movs	r2, r3
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	68db      	ldr	r3, [r3, #12]
 800a1fc:	4313      	orrs	r3, r2
 800a1fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	4a33      	ldr	r2, [pc, #204]	@ (800a2d0 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 800a204:	401a      	ands	r2, r3
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	689b      	ldr	r3, [r3, #8]
 800a20a:	4313      	orrs	r3, r2
 800a20c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	4a30      	ldr	r2, [pc, #192]	@ (800a2d4 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800a212:	401a      	ands	r2, r3
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	685b      	ldr	r3, [r3, #4]
 800a218:	4313      	orrs	r3, r2
 800a21a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	4a2e      	ldr	r2, [pc, #184]	@ (800a2d8 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 800a220:	401a      	ands	r2, r3
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	4313      	orrs	r3, r2
 800a228:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	4a2b      	ldr	r2, [pc, #172]	@ (800a2dc <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800a22e:	401a      	ands	r2, r3
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	691b      	ldr	r3, [r3, #16]
 800a234:	4313      	orrs	r3, r2
 800a236:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	4a29      	ldr	r2, [pc, #164]	@ (800a2e0 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800a23c:	401a      	ands	r2, r3
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	695b      	ldr	r3, [r3, #20]
 800a242:	4313      	orrs	r3, r2
 800a244:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	4a26      	ldr	r2, [pc, #152]	@ (800a2e4 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800a24a:	401a      	ands	r2, r3
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a250:	4313      	orrs	r3, r2
 800a252:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	4a24      	ldr	r2, [pc, #144]	@ (800a2e8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800a258:	401a      	ands	r2, r3
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	699b      	ldr	r3, [r3, #24]
 800a25e:	041b      	lsls	r3, r3, #16
 800a260:	4313      	orrs	r3, r2
 800a262:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	4a21      	ldr	r2, [pc, #132]	@ (800a2ec <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800a268:	401a      	ands	r2, r3
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	69db      	ldr	r3, [r3, #28]
 800a26e:	4313      	orrs	r3, r2
 800a270:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	4a1e      	ldr	r2, [pc, #120]	@ (800a2f0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800a278:	4293      	cmp	r3, r2
 800a27a:	d11c      	bne.n	800a2b6 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	4a1d      	ldr	r2, [pc, #116]	@ (800a2f4 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800a280:	401a      	ands	r2, r3
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a286:	051b      	lsls	r3, r3, #20
 800a288:	4313      	orrs	r3, r2
 800a28a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	4a1a      	ldr	r2, [pc, #104]	@ (800a2f8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800a290:	401a      	ands	r2, r3
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	6a1b      	ldr	r3, [r3, #32]
 800a296:	4313      	orrs	r3, r2
 800a298:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	4a17      	ldr	r2, [pc, #92]	@ (800a2fc <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800a29e:	401a      	ands	r2, r3
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2a4:	4313      	orrs	r3, r2
 800a2a6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	4a15      	ldr	r2, [pc, #84]	@ (800a300 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800a2ac:	401a      	ands	r2, r3
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2b2:	4313      	orrs	r3, r2
 800a2b4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	68fa      	ldr	r2, [r7, #12]
 800a2bc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	223c      	movs	r2, #60	@ 0x3c
 800a2c2:	2100      	movs	r1, #0
 800a2c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a2c6:	2300      	movs	r3, #0
}
 800a2c8:	0018      	movs	r0, r3
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	b004      	add	sp, #16
 800a2ce:	bd80      	pop	{r7, pc}
 800a2d0:	fffffcff 	.word	0xfffffcff
 800a2d4:	fffffbff 	.word	0xfffffbff
 800a2d8:	fffff7ff 	.word	0xfffff7ff
 800a2dc:	ffffefff 	.word	0xffffefff
 800a2e0:	ffffdfff 	.word	0xffffdfff
 800a2e4:	ffffbfff 	.word	0xffffbfff
 800a2e8:	fff0ffff 	.word	0xfff0ffff
 800a2ec:	efffffff 	.word	0xefffffff
 800a2f0:	40012c00 	.word	0x40012c00
 800a2f4:	ff0fffff 	.word	0xff0fffff
 800a2f8:	feffffff 	.word	0xfeffffff
 800a2fc:	fdffffff 	.word	0xfdffffff
 800a300:	dfffffff 	.word	0xdfffffff

0800a304 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b082      	sub	sp, #8
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a30c:	46c0      	nop			@ (mov r8, r8)
 800a30e:	46bd      	mov	sp, r7
 800a310:	b002      	add	sp, #8
 800a312:	bd80      	pop	{r7, pc}

0800a314 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b082      	sub	sp, #8
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a31c:	46c0      	nop			@ (mov r8, r8)
 800a31e:	46bd      	mov	sp, r7
 800a320:	b002      	add	sp, #8
 800a322:	bd80      	pop	{r7, pc}

0800a324 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b082      	sub	sp, #8
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a32c:	46c0      	nop			@ (mov r8, r8)
 800a32e:	46bd      	mov	sp, r7
 800a330:	b002      	add	sp, #8
 800a332:	bd80      	pop	{r7, pc}

0800a334 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b082      	sub	sp, #8
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d101      	bne.n	800a346 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800a342:	2301      	movs	r3, #1
 800a344:	e032      	b.n	800a3ac <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2288      	movs	r2, #136	@ 0x88
 800a34a:	2124      	movs	r1, #36	@ 0x24
 800a34c:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	681a      	ldr	r2, [r3, #0]
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	2101      	movs	r1, #1
 800a35a:	438a      	bics	r2, r1
 800a35c:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	2200      	movs	r2, #0
 800a364:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	2200      	movs	r2, #0
 800a36c:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	2200      	movs	r2, #0
 800a374:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	0018      	movs	r0, r3
 800a37a:	f7fa fa1d 	bl	80047b8 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2290      	movs	r2, #144	@ 0x90
 800a382:	2100      	movs	r1, #0
 800a384:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2288      	movs	r2, #136	@ 0x88
 800a38a:	2100      	movs	r1, #0
 800a38c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	228c      	movs	r2, #140	@ 0x8c
 800a392:	2100      	movs	r1, #0
 800a394:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	2200      	movs	r2, #0
 800a39a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2200      	movs	r2, #0
 800a3a0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	2284      	movs	r2, #132	@ 0x84
 800a3a6:	2100      	movs	r1, #0
 800a3a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a3aa:	2300      	movs	r3, #0
}
 800a3ac:	0018      	movs	r0, r3
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	b002      	add	sp, #8
 800a3b2:	bd80      	pop	{r7, pc}

0800a3b4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b088      	sub	sp, #32
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	60f8      	str	r0, [r7, #12]
 800a3bc:	60b9      	str	r1, [r7, #8]
 800a3be:	1dbb      	adds	r3, r7, #6
 800a3c0:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	2288      	movs	r2, #136	@ 0x88
 800a3c6:	589b      	ldr	r3, [r3, r2]
 800a3c8:	2b20      	cmp	r3, #32
 800a3ca:	d000      	beq.n	800a3ce <HAL_UART_Transmit_DMA+0x1a>
 800a3cc:	e079      	b.n	800a4c2 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a3ce:	68bb      	ldr	r3, [r7, #8]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d003      	beq.n	800a3dc <HAL_UART_Transmit_DMA+0x28>
 800a3d4:	1dbb      	adds	r3, r7, #6
 800a3d6:	881b      	ldrh	r3, [r3, #0]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d101      	bne.n	800a3e0 <HAL_UART_Transmit_DMA+0x2c>
    {
      return HAL_ERROR;
 800a3dc:	2301      	movs	r3, #1
 800a3de:	e071      	b.n	800a4c4 <HAL_UART_Transmit_DMA+0x110>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	689a      	ldr	r2, [r3, #8]
 800a3e4:	2380      	movs	r3, #128	@ 0x80
 800a3e6:	015b      	lsls	r3, r3, #5
 800a3e8:	429a      	cmp	r2, r3
 800a3ea:	d109      	bne.n	800a400 <HAL_UART_Transmit_DMA+0x4c>
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	691b      	ldr	r3, [r3, #16]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d105      	bne.n	800a400 <HAL_UART_Transmit_DMA+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800a3f4:	68bb      	ldr	r3, [r7, #8]
 800a3f6:	2201      	movs	r2, #1
 800a3f8:	4013      	ands	r3, r2
 800a3fa:	d001      	beq.n	800a400 <HAL_UART_Transmit_DMA+0x4c>
      {
        return  HAL_ERROR;
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	e061      	b.n	800a4c4 <HAL_UART_Transmit_DMA+0x110>
      }
    }

    huart->pTxBuffPtr  = pData;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	68ba      	ldr	r2, [r7, #8]
 800a404:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	1dba      	adds	r2, r7, #6
 800a40a:	2154      	movs	r1, #84	@ 0x54
 800a40c:	8812      	ldrh	r2, [r2, #0]
 800a40e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	1dba      	adds	r2, r7, #6
 800a414:	2156      	movs	r1, #86	@ 0x56
 800a416:	8812      	ldrh	r2, [r2, #0]
 800a418:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	2290      	movs	r2, #144	@ 0x90
 800a41e:	2100      	movs	r1, #0
 800a420:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	2288      	movs	r2, #136	@ 0x88
 800a426:	2121      	movs	r1, #33	@ 0x21
 800a428:	5099      	str	r1, [r3, r2]

    if (huart->hdmatx != NULL)
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d028      	beq.n	800a484 <HAL_UART_Transmit_DMA+0xd0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a436:	4a25      	ldr	r2, [pc, #148]	@ (800a4cc <HAL_UART_Transmit_DMA+0x118>)
 800a438:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a43e:	4a24      	ldr	r2, [pc, #144]	@ (800a4d0 <HAL_UART_Transmit_DMA+0x11c>)
 800a440:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a446:	4a23      	ldr	r2, [pc, #140]	@ (800a4d4 <HAL_UART_Transmit_DMA+0x120>)
 800a448:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a44e:	2200      	movs	r2, #0
 800a450:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a45a:	0019      	movs	r1, r3
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	3328      	adds	r3, #40	@ 0x28
 800a462:	001a      	movs	r2, r3
 800a464:	1dbb      	adds	r3, r7, #6
 800a466:	881b      	ldrh	r3, [r3, #0]
 800a468:	f7fa fdfa 	bl	8005060 <HAL_DMA_Start_IT>
 800a46c:	1e03      	subs	r3, r0, #0
 800a46e:	d009      	beq.n	800a484 <HAL_UART_Transmit_DMA+0xd0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	2290      	movs	r2, #144	@ 0x90
 800a474:	2110      	movs	r1, #16
 800a476:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	2288      	movs	r2, #136	@ 0x88
 800a47c:	2120      	movs	r1, #32
 800a47e:	5099      	str	r1, [r3, r2]

        return HAL_ERROR;
 800a480:	2301      	movs	r3, #1
 800a482:	e01f      	b.n	800a4c4 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	2240      	movs	r2, #64	@ 0x40
 800a48a:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a48c:	f3ef 8310 	mrs	r3, PRIMASK
 800a490:	613b      	str	r3, [r7, #16]
  return(result);
 800a492:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a494:	61fb      	str	r3, [r7, #28]
 800a496:	2301      	movs	r3, #1
 800a498:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a49a:	697b      	ldr	r3, [r7, #20]
 800a49c:	f383 8810 	msr	PRIMASK, r3
}
 800a4a0:	46c0      	nop			@ (mov r8, r8)
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	689a      	ldr	r2, [r3, #8]
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	2180      	movs	r1, #128	@ 0x80
 800a4ae:	430a      	orrs	r2, r1
 800a4b0:	609a      	str	r2, [r3, #8]
 800a4b2:	69fb      	ldr	r3, [r7, #28]
 800a4b4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4b6:	69bb      	ldr	r3, [r7, #24]
 800a4b8:	f383 8810 	msr	PRIMASK, r3
}
 800a4bc:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 800a4be:	2300      	movs	r3, #0
 800a4c0:	e000      	b.n	800a4c4 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800a4c2:	2302      	movs	r3, #2
  }
}
 800a4c4:	0018      	movs	r0, r3
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	b008      	add	sp, #32
 800a4ca:	bd80      	pop	{r7, pc}
 800a4cc:	0800b6dd 	.word	0x0800b6dd
 800a4d0:	0800b775 	.word	0x0800b775
 800a4d4:	0800b907 	.word	0x0800b907

0800a4d8 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b096      	sub	sp, #88	@ 0x58
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a4e0:	f3ef 8310 	mrs	r3, PRIMASK
 800a4e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 800a4e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a4e8:	657b      	str	r3, [r7, #84]	@ 0x54
 800a4ea:	2301      	movs	r3, #1
 800a4ec:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4f0:	f383 8810 	msr	PRIMASK, r3
}
 800a4f4:	46c0      	nop			@ (mov r8, r8)
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	681a      	ldr	r2, [r3, #0]
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	4979      	ldr	r1, [pc, #484]	@ (800a6e8 <HAL_UART_Abort+0x210>)
 800a502:	400a      	ands	r2, r1
 800a504:	601a      	str	r2, [r3, #0]
 800a506:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a508:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a50a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a50c:	f383 8810 	msr	PRIMASK, r3
}
 800a510:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a512:	f3ef 8310 	mrs	r3, PRIMASK
 800a516:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 800a518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 800a51a:	653b      	str	r3, [r7, #80]	@ 0x50
 800a51c:	2301      	movs	r3, #1
 800a51e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a520:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a522:	f383 8810 	msr	PRIMASK, r3
}
 800a526:	46c0      	nop			@ (mov r8, r8)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	689a      	ldr	r2, [r3, #8]
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	496e      	ldr	r1, [pc, #440]	@ (800a6ec <HAL_UART_Abort+0x214>)
 800a534:	400a      	ands	r2, r1
 800a536:	609a      	str	r2, [r3, #8]
 800a538:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a53a:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a53c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a53e:	f383 8810 	msr	PRIMASK, r3
}
 800a542:	46c0      	nop			@ (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a548:	2b01      	cmp	r3, #1
 800a54a:	d118      	bne.n	800a57e <HAL_UART_Abort+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a54c:	f3ef 8310 	mrs	r3, PRIMASK
 800a550:	623b      	str	r3, [r7, #32]
  return(result);
 800a552:	6a3b      	ldr	r3, [r7, #32]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800a554:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a556:	2301      	movs	r3, #1
 800a558:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a55a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a55c:	f383 8810 	msr	PRIMASK, r3
}
 800a560:	46c0      	nop			@ (mov r8, r8)
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	681a      	ldr	r2, [r3, #0]
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	2110      	movs	r1, #16
 800a56e:	438a      	bics	r2, r1
 800a570:	601a      	str	r2, [r3, #0]
 800a572:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a574:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a578:	f383 8810 	msr	PRIMASK, r3
}
 800a57c:	46c0      	nop			@ (mov r8, r8)
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	689b      	ldr	r3, [r3, #8]
 800a584:	2280      	movs	r2, #128	@ 0x80
 800a586:	4013      	ands	r3, r2
 800a588:	2b80      	cmp	r3, #128	@ 0x80
 800a58a:	d135      	bne.n	800a5f8 <HAL_UART_Abort+0x120>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a58c:	f3ef 8310 	mrs	r3, PRIMASK
 800a590:	617b      	str	r3, [r7, #20]
  return(result);
 800a592:	697b      	ldr	r3, [r7, #20]
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a594:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a596:	2301      	movs	r3, #1
 800a598:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a59a:	69bb      	ldr	r3, [r7, #24]
 800a59c:	f383 8810 	msr	PRIMASK, r3
}
 800a5a0:	46c0      	nop			@ (mov r8, r8)
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	689a      	ldr	r2, [r3, #8]
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	2180      	movs	r1, #128	@ 0x80
 800a5ae:	438a      	bics	r2, r1
 800a5b0:	609a      	str	r2, [r3, #8]
 800a5b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a5b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a5b6:	69fb      	ldr	r3, [r7, #28]
 800a5b8:	f383 8810 	msr	PRIMASK, r3
}
 800a5bc:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d018      	beq.n	800a5f8 <HAL_UART_Abort+0x120>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a5d2:	0018      	movs	r0, r3
 800a5d4:	f7fa fdcc 	bl	8005170 <HAL_DMA_Abort>
 800a5d8:	1e03      	subs	r3, r0, #0
 800a5da:	d00d      	beq.n	800a5f8 <HAL_UART_Abort+0x120>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a5e0:	0018      	movs	r0, r3
 800a5e2:	f7fa ff5f 	bl	80054a4 <HAL_DMA_GetError>
 800a5e6:	0003      	movs	r3, r0
 800a5e8:	2b20      	cmp	r3, #32
 800a5ea:	d105      	bne.n	800a5f8 <HAL_UART_Abort+0x120>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2290      	movs	r2, #144	@ 0x90
 800a5f0:	2110      	movs	r1, #16
 800a5f2:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 800a5f4:	2303      	movs	r3, #3
 800a5f6:	e072      	b.n	800a6de <HAL_UART_Abort+0x206>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	689b      	ldr	r3, [r3, #8]
 800a5fe:	2240      	movs	r2, #64	@ 0x40
 800a600:	4013      	ands	r3, r2
 800a602:	2b40      	cmp	r3, #64	@ 0x40
 800a604:	d139      	bne.n	800a67a <HAL_UART_Abort+0x1a2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a606:	f3ef 8310 	mrs	r3, PRIMASK
 800a60a:	60bb      	str	r3, [r7, #8]
  return(result);
 800a60c:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a60e:	647b      	str	r3, [r7, #68]	@ 0x44
 800a610:	2301      	movs	r3, #1
 800a612:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	f383 8810 	msr	PRIMASK, r3
}
 800a61a:	46c0      	nop			@ (mov r8, r8)
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	689a      	ldr	r2, [r3, #8]
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	2140      	movs	r1, #64	@ 0x40
 800a628:	438a      	bics	r2, r1
 800a62a:	609a      	str	r2, [r3, #8]
 800a62c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a62e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a630:	693b      	ldr	r3, [r7, #16]
 800a632:	f383 8810 	msr	PRIMASK, r3
}
 800a636:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2280      	movs	r2, #128	@ 0x80
 800a63c:	589b      	ldr	r3, [r3, r2]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d01b      	beq.n	800a67a <HAL_UART_Abort+0x1a2>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2280      	movs	r2, #128	@ 0x80
 800a646:	589b      	ldr	r3, [r3, r2]
 800a648:	2200      	movs	r2, #0
 800a64a:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2280      	movs	r2, #128	@ 0x80
 800a650:	589b      	ldr	r3, [r3, r2]
 800a652:	0018      	movs	r0, r3
 800a654:	f7fa fd8c 	bl	8005170 <HAL_DMA_Abort>
 800a658:	1e03      	subs	r3, r0, #0
 800a65a:	d00e      	beq.n	800a67a <HAL_UART_Abort+0x1a2>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2280      	movs	r2, #128	@ 0x80
 800a660:	589b      	ldr	r3, [r3, r2]
 800a662:	0018      	movs	r0, r3
 800a664:	f7fa ff1e 	bl	80054a4 <HAL_DMA_GetError>
 800a668:	0003      	movs	r3, r0
 800a66a:	2b20      	cmp	r3, #32
 800a66c:	d105      	bne.n	800a67a <HAL_UART_Abort+0x1a2>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2290      	movs	r2, #144	@ 0x90
 800a672:	2110      	movs	r1, #16
 800a674:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 800a676:	2303      	movs	r3, #3
 800a678:	e031      	b.n	800a6de <HAL_UART_Abort+0x206>
    }
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2256      	movs	r2, #86	@ 0x56
 800a67e:	2100      	movs	r1, #0
 800a680:	5299      	strh	r1, [r3, r2]
  huart->RxXferCount = 0U;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	225e      	movs	r2, #94	@ 0x5e
 800a686:	2100      	movs	r1, #0
 800a688:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	220f      	movs	r2, #15
 800a690:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a696:	2380      	movs	r3, #128	@ 0x80
 800a698:	059b      	lsls	r3, r3, #22
 800a69a:	429a      	cmp	r2, r3
 800a69c:	d107      	bne.n	800a6ae <HAL_UART_Abort+0x1d6>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	699a      	ldr	r2, [r3, #24]
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	2110      	movs	r1, #16
 800a6aa:	430a      	orrs	r2, r1
 800a6ac:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	699a      	ldr	r2, [r3, #24]
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	2108      	movs	r1, #8
 800a6ba:	430a      	orrs	r2, r1
 800a6bc:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2288      	movs	r2, #136	@ 0x88
 800a6c2:	2120      	movs	r1, #32
 800a6c4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	228c      	movs	r2, #140	@ 0x8c
 800a6ca:	2120      	movs	r1, #32
 800a6cc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	66da      	str	r2, [r3, #108]	@ 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2290      	movs	r2, #144	@ 0x90
 800a6d8:	2100      	movs	r1, #0
 800a6da:	5099      	str	r1, [r3, r2]

  return HAL_OK;
 800a6dc:	2300      	movs	r3, #0
}
 800a6de:	0018      	movs	r0, r3
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	b016      	add	sp, #88	@ 0x58
 800a6e4:	bd80      	pop	{r7, pc}
 800a6e6:	46c0      	nop			@ (mov r8, r8)
 800a6e8:	fffffe1f 	.word	0xfffffe1f
 800a6ec:	ef7ffffe 	.word	0xef7ffffe

0800a6f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a6f0:	b5b0      	push	{r4, r5, r7, lr}
 800a6f2:	b0aa      	sub	sp, #168	@ 0xa8
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	69db      	ldr	r3, [r3, #28]
 800a6fe:	22a4      	movs	r2, #164	@ 0xa4
 800a700:	18b9      	adds	r1, r7, r2
 800a702:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	20a0      	movs	r0, #160	@ 0xa0
 800a70c:	1839      	adds	r1, r7, r0
 800a70e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	689b      	ldr	r3, [r3, #8]
 800a716:	249c      	movs	r4, #156	@ 0x9c
 800a718:	1939      	adds	r1, r7, r4
 800a71a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a71c:	0011      	movs	r1, r2
 800a71e:	18bb      	adds	r3, r7, r2
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	4aa2      	ldr	r2, [pc, #648]	@ (800a9ac <HAL_UART_IRQHandler+0x2bc>)
 800a724:	4013      	ands	r3, r2
 800a726:	2298      	movs	r2, #152	@ 0x98
 800a728:	18bd      	adds	r5, r7, r2
 800a72a:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800a72c:	18bb      	adds	r3, r7, r2
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d11a      	bne.n	800a76a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a734:	187b      	adds	r3, r7, r1
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	2220      	movs	r2, #32
 800a73a:	4013      	ands	r3, r2
 800a73c:	d015      	beq.n	800a76a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a73e:	183b      	adds	r3, r7, r0
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	2220      	movs	r2, #32
 800a744:	4013      	ands	r3, r2
 800a746:	d105      	bne.n	800a754 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a748:	193b      	adds	r3, r7, r4
 800a74a:	681a      	ldr	r2, [r3, #0]
 800a74c:	2380      	movs	r3, #128	@ 0x80
 800a74e:	055b      	lsls	r3, r3, #21
 800a750:	4013      	ands	r3, r2
 800a752:	d00a      	beq.n	800a76a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d100      	bne.n	800a75e <HAL_UART_IRQHandler+0x6e>
 800a75c:	e2fb      	b.n	800ad56 <HAL_UART_IRQHandler+0x666>
      {
        huart->RxISR(huart);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a762:	687a      	ldr	r2, [r7, #4]
 800a764:	0010      	movs	r0, r2
 800a766:	4798      	blx	r3
      }
      return;
 800a768:	e2f5      	b.n	800ad56 <HAL_UART_IRQHandler+0x666>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a76a:	2398      	movs	r3, #152	@ 0x98
 800a76c:	18fb      	adds	r3, r7, r3
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d100      	bne.n	800a776 <HAL_UART_IRQHandler+0x86>
 800a774:	e122      	b.n	800a9bc <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a776:	239c      	movs	r3, #156	@ 0x9c
 800a778:	18fb      	adds	r3, r7, r3
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	4a8c      	ldr	r2, [pc, #560]	@ (800a9b0 <HAL_UART_IRQHandler+0x2c0>)
 800a77e:	4013      	ands	r3, r2
 800a780:	d106      	bne.n	800a790 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a782:	23a0      	movs	r3, #160	@ 0xa0
 800a784:	18fb      	adds	r3, r7, r3
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	4a8a      	ldr	r2, [pc, #552]	@ (800a9b4 <HAL_UART_IRQHandler+0x2c4>)
 800a78a:	4013      	ands	r3, r2
 800a78c:	d100      	bne.n	800a790 <HAL_UART_IRQHandler+0xa0>
 800a78e:	e115      	b.n	800a9bc <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a790:	23a4      	movs	r3, #164	@ 0xa4
 800a792:	18fb      	adds	r3, r7, r3
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	2201      	movs	r2, #1
 800a798:	4013      	ands	r3, r2
 800a79a:	d012      	beq.n	800a7c2 <HAL_UART_IRQHandler+0xd2>
 800a79c:	23a0      	movs	r3, #160	@ 0xa0
 800a79e:	18fb      	adds	r3, r7, r3
 800a7a0:	681a      	ldr	r2, [r3, #0]
 800a7a2:	2380      	movs	r3, #128	@ 0x80
 800a7a4:	005b      	lsls	r3, r3, #1
 800a7a6:	4013      	ands	r3, r2
 800a7a8:	d00b      	beq.n	800a7c2 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	2201      	movs	r2, #1
 800a7b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2290      	movs	r2, #144	@ 0x90
 800a7b6:	589b      	ldr	r3, [r3, r2]
 800a7b8:	2201      	movs	r2, #1
 800a7ba:	431a      	orrs	r2, r3
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2190      	movs	r1, #144	@ 0x90
 800a7c0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a7c2:	23a4      	movs	r3, #164	@ 0xa4
 800a7c4:	18fb      	adds	r3, r7, r3
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	2202      	movs	r2, #2
 800a7ca:	4013      	ands	r3, r2
 800a7cc:	d011      	beq.n	800a7f2 <HAL_UART_IRQHandler+0x102>
 800a7ce:	239c      	movs	r3, #156	@ 0x9c
 800a7d0:	18fb      	adds	r3, r7, r3
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	2201      	movs	r2, #1
 800a7d6:	4013      	ands	r3, r2
 800a7d8:	d00b      	beq.n	800a7f2 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	2202      	movs	r2, #2
 800a7e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	2290      	movs	r2, #144	@ 0x90
 800a7e6:	589b      	ldr	r3, [r3, r2]
 800a7e8:	2204      	movs	r2, #4
 800a7ea:	431a      	orrs	r2, r3
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2190      	movs	r1, #144	@ 0x90
 800a7f0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a7f2:	23a4      	movs	r3, #164	@ 0xa4
 800a7f4:	18fb      	adds	r3, r7, r3
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	2204      	movs	r2, #4
 800a7fa:	4013      	ands	r3, r2
 800a7fc:	d011      	beq.n	800a822 <HAL_UART_IRQHandler+0x132>
 800a7fe:	239c      	movs	r3, #156	@ 0x9c
 800a800:	18fb      	adds	r3, r7, r3
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	2201      	movs	r2, #1
 800a806:	4013      	ands	r3, r2
 800a808:	d00b      	beq.n	800a822 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	2204      	movs	r2, #4
 800a810:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2290      	movs	r2, #144	@ 0x90
 800a816:	589b      	ldr	r3, [r3, r2]
 800a818:	2202      	movs	r2, #2
 800a81a:	431a      	orrs	r2, r3
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2190      	movs	r1, #144	@ 0x90
 800a820:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a822:	23a4      	movs	r3, #164	@ 0xa4
 800a824:	18fb      	adds	r3, r7, r3
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	2208      	movs	r2, #8
 800a82a:	4013      	ands	r3, r2
 800a82c:	d017      	beq.n	800a85e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a82e:	23a0      	movs	r3, #160	@ 0xa0
 800a830:	18fb      	adds	r3, r7, r3
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	2220      	movs	r2, #32
 800a836:	4013      	ands	r3, r2
 800a838:	d105      	bne.n	800a846 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a83a:	239c      	movs	r3, #156	@ 0x9c
 800a83c:	18fb      	adds	r3, r7, r3
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	4a5b      	ldr	r2, [pc, #364]	@ (800a9b0 <HAL_UART_IRQHandler+0x2c0>)
 800a842:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a844:	d00b      	beq.n	800a85e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	2208      	movs	r2, #8
 800a84c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2290      	movs	r2, #144	@ 0x90
 800a852:	589b      	ldr	r3, [r3, r2]
 800a854:	2208      	movs	r2, #8
 800a856:	431a      	orrs	r2, r3
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2190      	movs	r1, #144	@ 0x90
 800a85c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a85e:	23a4      	movs	r3, #164	@ 0xa4
 800a860:	18fb      	adds	r3, r7, r3
 800a862:	681a      	ldr	r2, [r3, #0]
 800a864:	2380      	movs	r3, #128	@ 0x80
 800a866:	011b      	lsls	r3, r3, #4
 800a868:	4013      	ands	r3, r2
 800a86a:	d013      	beq.n	800a894 <HAL_UART_IRQHandler+0x1a4>
 800a86c:	23a0      	movs	r3, #160	@ 0xa0
 800a86e:	18fb      	adds	r3, r7, r3
 800a870:	681a      	ldr	r2, [r3, #0]
 800a872:	2380      	movs	r3, #128	@ 0x80
 800a874:	04db      	lsls	r3, r3, #19
 800a876:	4013      	ands	r3, r2
 800a878:	d00c      	beq.n	800a894 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	2280      	movs	r2, #128	@ 0x80
 800a880:	0112      	lsls	r2, r2, #4
 800a882:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2290      	movs	r2, #144	@ 0x90
 800a888:	589b      	ldr	r3, [r3, r2]
 800a88a:	2220      	movs	r2, #32
 800a88c:	431a      	orrs	r2, r3
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2190      	movs	r1, #144	@ 0x90
 800a892:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2290      	movs	r2, #144	@ 0x90
 800a898:	589b      	ldr	r3, [r3, r2]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d100      	bne.n	800a8a0 <HAL_UART_IRQHandler+0x1b0>
 800a89e:	e25c      	b.n	800ad5a <HAL_UART_IRQHandler+0x66a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a8a0:	23a4      	movs	r3, #164	@ 0xa4
 800a8a2:	18fb      	adds	r3, r7, r3
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	2220      	movs	r2, #32
 800a8a8:	4013      	ands	r3, r2
 800a8aa:	d015      	beq.n	800a8d8 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a8ac:	23a0      	movs	r3, #160	@ 0xa0
 800a8ae:	18fb      	adds	r3, r7, r3
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	2220      	movs	r2, #32
 800a8b4:	4013      	ands	r3, r2
 800a8b6:	d106      	bne.n	800a8c6 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a8b8:	239c      	movs	r3, #156	@ 0x9c
 800a8ba:	18fb      	adds	r3, r7, r3
 800a8bc:	681a      	ldr	r2, [r3, #0]
 800a8be:	2380      	movs	r3, #128	@ 0x80
 800a8c0:	055b      	lsls	r3, r3, #21
 800a8c2:	4013      	ands	r3, r2
 800a8c4:	d008      	beq.n	800a8d8 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d004      	beq.n	800a8d8 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a8d2:	687a      	ldr	r2, [r7, #4]
 800a8d4:	0010      	movs	r0, r2
 800a8d6:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2290      	movs	r2, #144	@ 0x90
 800a8dc:	589b      	ldr	r3, [r3, r2]
 800a8de:	2194      	movs	r1, #148	@ 0x94
 800a8e0:	187a      	adds	r2, r7, r1
 800a8e2:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	689b      	ldr	r3, [r3, #8]
 800a8ea:	2240      	movs	r2, #64	@ 0x40
 800a8ec:	4013      	ands	r3, r2
 800a8ee:	2b40      	cmp	r3, #64	@ 0x40
 800a8f0:	d004      	beq.n	800a8fc <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a8f2:	187b      	adds	r3, r7, r1
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	2228      	movs	r2, #40	@ 0x28
 800a8f8:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a8fa:	d04c      	beq.n	800a996 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	0018      	movs	r0, r3
 800a900:	f000 fe86 	bl	800b610 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	689b      	ldr	r3, [r3, #8]
 800a90a:	2240      	movs	r2, #64	@ 0x40
 800a90c:	4013      	ands	r3, r2
 800a90e:	2b40      	cmp	r3, #64	@ 0x40
 800a910:	d13c      	bne.n	800a98c <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a912:	f3ef 8310 	mrs	r3, PRIMASK
 800a916:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800a918:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a91a:	2090      	movs	r0, #144	@ 0x90
 800a91c:	183a      	adds	r2, r7, r0
 800a91e:	6013      	str	r3, [r2, #0]
 800a920:	2301      	movs	r3, #1
 800a922:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a924:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a926:	f383 8810 	msr	PRIMASK, r3
}
 800a92a:	46c0      	nop			@ (mov r8, r8)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	689a      	ldr	r2, [r3, #8]
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	2140      	movs	r1, #64	@ 0x40
 800a938:	438a      	bics	r2, r1
 800a93a:	609a      	str	r2, [r3, #8]
 800a93c:	183b      	adds	r3, r7, r0
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a942:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a944:	f383 8810 	msr	PRIMASK, r3
}
 800a948:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2280      	movs	r2, #128	@ 0x80
 800a94e:	589b      	ldr	r3, [r3, r2]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d016      	beq.n	800a982 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2280      	movs	r2, #128	@ 0x80
 800a958:	589b      	ldr	r3, [r3, r2]
 800a95a:	4a17      	ldr	r2, [pc, #92]	@ (800a9b8 <HAL_UART_IRQHandler+0x2c8>)
 800a95c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2280      	movs	r2, #128	@ 0x80
 800a962:	589b      	ldr	r3, [r3, r2]
 800a964:	0018      	movs	r0, r3
 800a966:	f7fa fc65 	bl	8005234 <HAL_DMA_Abort_IT>
 800a96a:	1e03      	subs	r3, r0, #0
 800a96c:	d01c      	beq.n	800a9a8 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2280      	movs	r2, #128	@ 0x80
 800a972:	589b      	ldr	r3, [r3, r2]
 800a974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a976:	687a      	ldr	r2, [r7, #4]
 800a978:	2180      	movs	r1, #128	@ 0x80
 800a97a:	5852      	ldr	r2, [r2, r1]
 800a97c:	0010      	movs	r0, r2
 800a97e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a980:	e012      	b.n	800a9a8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	0018      	movs	r0, r3
 800a986:	f7f8 fce3 	bl	8003350 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a98a:	e00d      	b.n	800a9a8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	0018      	movs	r0, r3
 800a990:	f7f8 fcde 	bl	8003350 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a994:	e008      	b.n	800a9a8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	0018      	movs	r0, r3
 800a99a:	f7f8 fcd9 	bl	8003350 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2290      	movs	r2, #144	@ 0x90
 800a9a2:	2100      	movs	r1, #0
 800a9a4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800a9a6:	e1d8      	b.n	800ad5a <HAL_UART_IRQHandler+0x66a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9a8:	46c0      	nop			@ (mov r8, r8)
    return;
 800a9aa:	e1d6      	b.n	800ad5a <HAL_UART_IRQHandler+0x66a>
 800a9ac:	0000080f 	.word	0x0000080f
 800a9b0:	10000001 	.word	0x10000001
 800a9b4:	04000120 	.word	0x04000120
 800a9b8:	0800b98d 	.word	0x0800b98d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a9c0:	2b01      	cmp	r3, #1
 800a9c2:	d000      	beq.n	800a9c6 <HAL_UART_IRQHandler+0x2d6>
 800a9c4:	e15d      	b.n	800ac82 <HAL_UART_IRQHandler+0x592>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a9c6:	23a4      	movs	r3, #164	@ 0xa4
 800a9c8:	18fb      	adds	r3, r7, r3
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	2210      	movs	r2, #16
 800a9ce:	4013      	ands	r3, r2
 800a9d0:	d100      	bne.n	800a9d4 <HAL_UART_IRQHandler+0x2e4>
 800a9d2:	e156      	b.n	800ac82 <HAL_UART_IRQHandler+0x592>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a9d4:	23a0      	movs	r3, #160	@ 0xa0
 800a9d6:	18fb      	adds	r3, r7, r3
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	2210      	movs	r2, #16
 800a9dc:	4013      	ands	r3, r2
 800a9de:	d100      	bne.n	800a9e2 <HAL_UART_IRQHandler+0x2f2>
 800a9e0:	e14f      	b.n	800ac82 <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	2210      	movs	r2, #16
 800a9e8:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	689b      	ldr	r3, [r3, #8]
 800a9f0:	2240      	movs	r2, #64	@ 0x40
 800a9f2:	4013      	ands	r3, r2
 800a9f4:	2b40      	cmp	r3, #64	@ 0x40
 800a9f6:	d000      	beq.n	800a9fa <HAL_UART_IRQHandler+0x30a>
 800a9f8:	e0c3      	b.n	800ab82 <HAL_UART_IRQHandler+0x492>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2280      	movs	r2, #128	@ 0x80
 800a9fe:	589b      	ldr	r3, [r3, r2]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	685a      	ldr	r2, [r3, #4]
 800aa04:	217e      	movs	r1, #126	@ 0x7e
 800aa06:	187b      	adds	r3, r7, r1
 800aa08:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800aa0a:	187b      	adds	r3, r7, r1
 800aa0c:	881b      	ldrh	r3, [r3, #0]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d100      	bne.n	800aa14 <HAL_UART_IRQHandler+0x324>
 800aa12:	e097      	b.n	800ab44 <HAL_UART_IRQHandler+0x454>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	225c      	movs	r2, #92	@ 0x5c
 800aa18:	5a9b      	ldrh	r3, [r3, r2]
 800aa1a:	187a      	adds	r2, r7, r1
 800aa1c:	8812      	ldrh	r2, [r2, #0]
 800aa1e:	429a      	cmp	r2, r3
 800aa20:	d300      	bcc.n	800aa24 <HAL_UART_IRQHandler+0x334>
 800aa22:	e08f      	b.n	800ab44 <HAL_UART_IRQHandler+0x454>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	187a      	adds	r2, r7, r1
 800aa28:	215e      	movs	r1, #94	@ 0x5e
 800aa2a:	8812      	ldrh	r2, [r2, #0]
 800aa2c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2280      	movs	r2, #128	@ 0x80
 800aa32:	589b      	ldr	r3, [r3, r2]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	2220      	movs	r2, #32
 800aa3a:	4013      	ands	r3, r2
 800aa3c:	d170      	bne.n	800ab20 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800aa3e:	f3ef 8310 	mrs	r3, PRIMASK
 800aa42:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800aa44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aa46:	67bb      	str	r3, [r7, #120]	@ 0x78
 800aa48:	2301      	movs	r3, #1
 800aa4a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa4e:	f383 8810 	msr	PRIMASK, r3
}
 800aa52:	46c0      	nop			@ (mov r8, r8)
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	681a      	ldr	r2, [r3, #0]
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	49c4      	ldr	r1, [pc, #784]	@ (800ad70 <HAL_UART_IRQHandler+0x680>)
 800aa60:	400a      	ands	r2, r1
 800aa62:	601a      	str	r2, [r3, #0]
 800aa64:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800aa66:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa6a:	f383 8810 	msr	PRIMASK, r3
}
 800aa6e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800aa70:	f3ef 8310 	mrs	r3, PRIMASK
 800aa74:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800aa76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa78:	677b      	str	r3, [r7, #116]	@ 0x74
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa80:	f383 8810 	msr	PRIMASK, r3
}
 800aa84:	46c0      	nop			@ (mov r8, r8)
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	689a      	ldr	r2, [r3, #8]
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	2101      	movs	r1, #1
 800aa92:	438a      	bics	r2, r1
 800aa94:	609a      	str	r2, [r3, #8]
 800aa96:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800aa98:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aa9c:	f383 8810 	msr	PRIMASK, r3
}
 800aaa0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800aaa2:	f3ef 8310 	mrs	r3, PRIMASK
 800aaa6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800aaa8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aaaa:	673b      	str	r3, [r7, #112]	@ 0x70
 800aaac:	2301      	movs	r3, #1
 800aaae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aab0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aab2:	f383 8810 	msr	PRIMASK, r3
}
 800aab6:	46c0      	nop			@ (mov r8, r8)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	689a      	ldr	r2, [r3, #8]
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	2140      	movs	r1, #64	@ 0x40
 800aac4:	438a      	bics	r2, r1
 800aac6:	609a      	str	r2, [r3, #8]
 800aac8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800aaca:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aacc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aace:	f383 8810 	msr	PRIMASK, r3
}
 800aad2:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	228c      	movs	r2, #140	@ 0x8c
 800aad8:	2120      	movs	r1, #32
 800aada:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2200      	movs	r2, #0
 800aae0:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800aae2:	f3ef 8310 	mrs	r3, PRIMASK
 800aae6:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 800aae8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aaea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800aaec:	2301      	movs	r3, #1
 800aaee:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aaf0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800aaf2:	f383 8810 	msr	PRIMASK, r3
}
 800aaf6:	46c0      	nop			@ (mov r8, r8)
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	681a      	ldr	r2, [r3, #0]
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	2110      	movs	r1, #16
 800ab04:	438a      	bics	r2, r1
 800ab06:	601a      	str	r2, [r3, #0]
 800ab08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab0c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ab0e:	f383 8810 	msr	PRIMASK, r3
}
 800ab12:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2280      	movs	r2, #128	@ 0x80
 800ab18:	589b      	ldr	r3, [r3, r2]
 800ab1a:	0018      	movs	r0, r3
 800ab1c:	f7fa fb28 	bl	8005170 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2202      	movs	r2, #2
 800ab24:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	225c      	movs	r2, #92	@ 0x5c
 800ab2a:	5a9a      	ldrh	r2, [r3, r2]
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	215e      	movs	r1, #94	@ 0x5e
 800ab30:	5a5b      	ldrh	r3, [r3, r1]
 800ab32:	b29b      	uxth	r3, r3
 800ab34:	1ad3      	subs	r3, r2, r3
 800ab36:	b29a      	uxth	r2, r3
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	0011      	movs	r1, r2
 800ab3c:	0018      	movs	r0, r3
 800ab3e:	f7f8 fb4f 	bl	80031e0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800ab42:	e10c      	b.n	800ad5e <HAL_UART_IRQHandler+0x66e>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	225c      	movs	r2, #92	@ 0x5c
 800ab48:	5a9b      	ldrh	r3, [r3, r2]
 800ab4a:	227e      	movs	r2, #126	@ 0x7e
 800ab4c:	18ba      	adds	r2, r7, r2
 800ab4e:	8812      	ldrh	r2, [r2, #0]
 800ab50:	429a      	cmp	r2, r3
 800ab52:	d000      	beq.n	800ab56 <HAL_UART_IRQHandler+0x466>
 800ab54:	e103      	b.n	800ad5e <HAL_UART_IRQHandler+0x66e>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2280      	movs	r2, #128	@ 0x80
 800ab5a:	589b      	ldr	r3, [r3, r2]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	2220      	movs	r2, #32
 800ab62:	4013      	ands	r3, r2
 800ab64:	2b20      	cmp	r3, #32
 800ab66:	d000      	beq.n	800ab6a <HAL_UART_IRQHandler+0x47a>
 800ab68:	e0f9      	b.n	800ad5e <HAL_UART_IRQHandler+0x66e>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	2202      	movs	r2, #2
 800ab6e:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	225c      	movs	r2, #92	@ 0x5c
 800ab74:	5a9a      	ldrh	r2, [r3, r2]
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	0011      	movs	r1, r2
 800ab7a:	0018      	movs	r0, r3
 800ab7c:	f7f8 fb30 	bl	80031e0 <HAL_UARTEx_RxEventCallback>
      return;
 800ab80:	e0ed      	b.n	800ad5e <HAL_UART_IRQHandler+0x66e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	225c      	movs	r2, #92	@ 0x5c
 800ab86:	5a99      	ldrh	r1, [r3, r2]
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	225e      	movs	r2, #94	@ 0x5e
 800ab8c:	5a9b      	ldrh	r3, [r3, r2]
 800ab8e:	b29a      	uxth	r2, r3
 800ab90:	208e      	movs	r0, #142	@ 0x8e
 800ab92:	183b      	adds	r3, r7, r0
 800ab94:	1a8a      	subs	r2, r1, r2
 800ab96:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	225e      	movs	r2, #94	@ 0x5e
 800ab9c:	5a9b      	ldrh	r3, [r3, r2]
 800ab9e:	b29b      	uxth	r3, r3
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d100      	bne.n	800aba6 <HAL_UART_IRQHandler+0x4b6>
 800aba4:	e0dd      	b.n	800ad62 <HAL_UART_IRQHandler+0x672>
          && (nb_rx_data > 0U))
 800aba6:	183b      	adds	r3, r7, r0
 800aba8:	881b      	ldrh	r3, [r3, #0]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d100      	bne.n	800abb0 <HAL_UART_IRQHandler+0x4c0>
 800abae:	e0d8      	b.n	800ad62 <HAL_UART_IRQHandler+0x672>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800abb0:	f3ef 8310 	mrs	r3, PRIMASK
 800abb4:	60fb      	str	r3, [r7, #12]
  return(result);
 800abb6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800abb8:	2488      	movs	r4, #136	@ 0x88
 800abba:	193a      	adds	r2, r7, r4
 800abbc:	6013      	str	r3, [r2, #0]
 800abbe:	2301      	movs	r3, #1
 800abc0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800abc2:	693b      	ldr	r3, [r7, #16]
 800abc4:	f383 8810 	msr	PRIMASK, r3
}
 800abc8:	46c0      	nop			@ (mov r8, r8)
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	681a      	ldr	r2, [r3, #0]
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	4967      	ldr	r1, [pc, #412]	@ (800ad74 <HAL_UART_IRQHandler+0x684>)
 800abd6:	400a      	ands	r2, r1
 800abd8:	601a      	str	r2, [r3, #0]
 800abda:	193b      	adds	r3, r7, r4
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800abe0:	697b      	ldr	r3, [r7, #20]
 800abe2:	f383 8810 	msr	PRIMASK, r3
}
 800abe6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800abe8:	f3ef 8310 	mrs	r3, PRIMASK
 800abec:	61bb      	str	r3, [r7, #24]
  return(result);
 800abee:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800abf0:	2484      	movs	r4, #132	@ 0x84
 800abf2:	193a      	adds	r2, r7, r4
 800abf4:	6013      	str	r3, [r2, #0]
 800abf6:	2301      	movs	r3, #1
 800abf8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800abfa:	69fb      	ldr	r3, [r7, #28]
 800abfc:	f383 8810 	msr	PRIMASK, r3
}
 800ac00:	46c0      	nop			@ (mov r8, r8)
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	689a      	ldr	r2, [r3, #8]
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	495a      	ldr	r1, [pc, #360]	@ (800ad78 <HAL_UART_IRQHandler+0x688>)
 800ac0e:	400a      	ands	r2, r1
 800ac10:	609a      	str	r2, [r3, #8]
 800ac12:	193b      	adds	r3, r7, r4
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac18:	6a3b      	ldr	r3, [r7, #32]
 800ac1a:	f383 8810 	msr	PRIMASK, r3
}
 800ac1e:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	228c      	movs	r2, #140	@ 0x8c
 800ac24:	2120      	movs	r1, #32
 800ac26:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	2200      	movs	r2, #0
 800ac32:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800ac34:	f3ef 8310 	mrs	r3, PRIMASK
 800ac38:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800ac3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac3c:	2480      	movs	r4, #128	@ 0x80
 800ac3e:	193a      	adds	r2, r7, r4
 800ac40:	6013      	str	r3, [r2, #0]
 800ac42:	2301      	movs	r3, #1
 800ac44:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac48:	f383 8810 	msr	PRIMASK, r3
}
 800ac4c:	46c0      	nop			@ (mov r8, r8)
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	681a      	ldr	r2, [r3, #0]
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	2110      	movs	r1, #16
 800ac5a:	438a      	bics	r2, r1
 800ac5c:	601a      	str	r2, [r3, #0]
 800ac5e:	193b      	adds	r3, r7, r4
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac66:	f383 8810 	msr	PRIMASK, r3
}
 800ac6a:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2202      	movs	r2, #2
 800ac70:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ac72:	183b      	adds	r3, r7, r0
 800ac74:	881a      	ldrh	r2, [r3, #0]
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	0011      	movs	r1, r2
 800ac7a:	0018      	movs	r0, r3
 800ac7c:	f7f8 fab0 	bl	80031e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ac80:	e06f      	b.n	800ad62 <HAL_UART_IRQHandler+0x672>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ac82:	23a4      	movs	r3, #164	@ 0xa4
 800ac84:	18fb      	adds	r3, r7, r3
 800ac86:	681a      	ldr	r2, [r3, #0]
 800ac88:	2380      	movs	r3, #128	@ 0x80
 800ac8a:	035b      	lsls	r3, r3, #13
 800ac8c:	4013      	ands	r3, r2
 800ac8e:	d010      	beq.n	800acb2 <HAL_UART_IRQHandler+0x5c2>
 800ac90:	239c      	movs	r3, #156	@ 0x9c
 800ac92:	18fb      	adds	r3, r7, r3
 800ac94:	681a      	ldr	r2, [r3, #0]
 800ac96:	2380      	movs	r3, #128	@ 0x80
 800ac98:	03db      	lsls	r3, r3, #15
 800ac9a:	4013      	ands	r3, r2
 800ac9c:	d009      	beq.n	800acb2 <HAL_UART_IRQHandler+0x5c2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	2280      	movs	r2, #128	@ 0x80
 800aca4:	0352      	lsls	r2, r2, #13
 800aca6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	0018      	movs	r0, r3
 800acac:	f000 ff24 	bl	800baf8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800acb0:	e05a      	b.n	800ad68 <HAL_UART_IRQHandler+0x678>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800acb2:	23a4      	movs	r3, #164	@ 0xa4
 800acb4:	18fb      	adds	r3, r7, r3
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	2280      	movs	r2, #128	@ 0x80
 800acba:	4013      	ands	r3, r2
 800acbc:	d016      	beq.n	800acec <HAL_UART_IRQHandler+0x5fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800acbe:	23a0      	movs	r3, #160	@ 0xa0
 800acc0:	18fb      	adds	r3, r7, r3
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	2280      	movs	r2, #128	@ 0x80
 800acc6:	4013      	ands	r3, r2
 800acc8:	d106      	bne.n	800acd8 <HAL_UART_IRQHandler+0x5e8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800acca:	239c      	movs	r3, #156	@ 0x9c
 800accc:	18fb      	adds	r3, r7, r3
 800acce:	681a      	ldr	r2, [r3, #0]
 800acd0:	2380      	movs	r3, #128	@ 0x80
 800acd2:	041b      	lsls	r3, r3, #16
 800acd4:	4013      	ands	r3, r2
 800acd6:	d009      	beq.n	800acec <HAL_UART_IRQHandler+0x5fc>
  {
    if (huart->TxISR != NULL)
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d042      	beq.n	800ad66 <HAL_UART_IRQHandler+0x676>
    {
      huart->TxISR(huart);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ace4:	687a      	ldr	r2, [r7, #4]
 800ace6:	0010      	movs	r0, r2
 800ace8:	4798      	blx	r3
    }
    return;
 800acea:	e03c      	b.n	800ad66 <HAL_UART_IRQHandler+0x676>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800acec:	23a4      	movs	r3, #164	@ 0xa4
 800acee:	18fb      	adds	r3, r7, r3
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	2240      	movs	r2, #64	@ 0x40
 800acf4:	4013      	ands	r3, r2
 800acf6:	d00a      	beq.n	800ad0e <HAL_UART_IRQHandler+0x61e>
 800acf8:	23a0      	movs	r3, #160	@ 0xa0
 800acfa:	18fb      	adds	r3, r7, r3
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	2240      	movs	r2, #64	@ 0x40
 800ad00:	4013      	ands	r3, r2
 800ad02:	d004      	beq.n	800ad0e <HAL_UART_IRQHandler+0x61e>
  {
    UART_EndTransmit_IT(huart);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	0018      	movs	r0, r3
 800ad08:	f000 fe57 	bl	800b9ba <UART_EndTransmit_IT>
    return;
 800ad0c:	e02c      	b.n	800ad68 <HAL_UART_IRQHandler+0x678>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ad0e:	23a4      	movs	r3, #164	@ 0xa4
 800ad10:	18fb      	adds	r3, r7, r3
 800ad12:	681a      	ldr	r2, [r3, #0]
 800ad14:	2380      	movs	r3, #128	@ 0x80
 800ad16:	041b      	lsls	r3, r3, #16
 800ad18:	4013      	ands	r3, r2
 800ad1a:	d00b      	beq.n	800ad34 <HAL_UART_IRQHandler+0x644>
 800ad1c:	23a0      	movs	r3, #160	@ 0xa0
 800ad1e:	18fb      	adds	r3, r7, r3
 800ad20:	681a      	ldr	r2, [r3, #0]
 800ad22:	2380      	movs	r3, #128	@ 0x80
 800ad24:	05db      	lsls	r3, r3, #23
 800ad26:	4013      	ands	r3, r2
 800ad28:	d004      	beq.n	800ad34 <HAL_UART_IRQHandler+0x644>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	0018      	movs	r0, r3
 800ad2e:	f000 fef3 	bl	800bb18 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ad32:	e019      	b.n	800ad68 <HAL_UART_IRQHandler+0x678>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ad34:	23a4      	movs	r3, #164	@ 0xa4
 800ad36:	18fb      	adds	r3, r7, r3
 800ad38:	681a      	ldr	r2, [r3, #0]
 800ad3a:	2380      	movs	r3, #128	@ 0x80
 800ad3c:	045b      	lsls	r3, r3, #17
 800ad3e:	4013      	ands	r3, r2
 800ad40:	d012      	beq.n	800ad68 <HAL_UART_IRQHandler+0x678>
 800ad42:	23a0      	movs	r3, #160	@ 0xa0
 800ad44:	18fb      	adds	r3, r7, r3
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	da0d      	bge.n	800ad68 <HAL_UART_IRQHandler+0x678>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	0018      	movs	r0, r3
 800ad50:	f000 feda 	bl	800bb08 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ad54:	e008      	b.n	800ad68 <HAL_UART_IRQHandler+0x678>
      return;
 800ad56:	46c0      	nop			@ (mov r8, r8)
 800ad58:	e006      	b.n	800ad68 <HAL_UART_IRQHandler+0x678>
    return;
 800ad5a:	46c0      	nop			@ (mov r8, r8)
 800ad5c:	e004      	b.n	800ad68 <HAL_UART_IRQHandler+0x678>
      return;
 800ad5e:	46c0      	nop			@ (mov r8, r8)
 800ad60:	e002      	b.n	800ad68 <HAL_UART_IRQHandler+0x678>
      return;
 800ad62:	46c0      	nop			@ (mov r8, r8)
 800ad64:	e000      	b.n	800ad68 <HAL_UART_IRQHandler+0x678>
    return;
 800ad66:	46c0      	nop			@ (mov r8, r8)
  }
}
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	b02a      	add	sp, #168	@ 0xa8
 800ad6c:	bdb0      	pop	{r4, r5, r7, pc}
 800ad6e:	46c0      	nop			@ (mov r8, r8)
 800ad70:	fffffeff 	.word	0xfffffeff
 800ad74:	fffffedf 	.word	0xfffffedf
 800ad78:	effffffe 	.word	0xeffffffe

0800ad7c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b082      	sub	sp, #8
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800ad84:	46c0      	nop			@ (mov r8, r8)
 800ad86:	46bd      	mov	sp, r7
 800ad88:	b002      	add	sp, #8
 800ad8a:	bd80      	pop	{r7, pc}

0800ad8c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b082      	sub	sp, #8
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800ad94:	46c0      	nop			@ (mov r8, r8)
 800ad96:	46bd      	mov	sp, r7
 800ad98:	b002      	add	sp, #8
 800ad9a:	bd80      	pop	{r7, pc}

0800ad9c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b082      	sub	sp, #8
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800ada4:	46c0      	nop			@ (mov r8, r8)
 800ada6:	46bd      	mov	sp, r7
 800ada8:	b002      	add	sp, #8
 800adaa:	bd80      	pop	{r7, pc}

0800adac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b088      	sub	sp, #32
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800adb4:	231e      	movs	r3, #30
 800adb6:	18fb      	adds	r3, r7, r3
 800adb8:	2200      	movs	r2, #0
 800adba:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	689a      	ldr	r2, [r3, #8]
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	691b      	ldr	r3, [r3, #16]
 800adc4:	431a      	orrs	r2, r3
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	695b      	ldr	r3, [r3, #20]
 800adca:	431a      	orrs	r2, r3
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	69db      	ldr	r3, [r3, #28]
 800add0:	4313      	orrs	r3, r2
 800add2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	4aab      	ldr	r2, [pc, #684]	@ (800b088 <UART_SetConfig+0x2dc>)
 800addc:	4013      	ands	r3, r2
 800adde:	0019      	movs	r1, r3
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	697a      	ldr	r2, [r7, #20]
 800ade6:	430a      	orrs	r2, r1
 800ade8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	685b      	ldr	r3, [r3, #4]
 800adf0:	4aa6      	ldr	r2, [pc, #664]	@ (800b08c <UART_SetConfig+0x2e0>)
 800adf2:	4013      	ands	r3, r2
 800adf4:	0019      	movs	r1, r3
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	68da      	ldr	r2, [r3, #12]
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	430a      	orrs	r2, r1
 800ae00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	699b      	ldr	r3, [r3, #24]
 800ae06:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	6a1b      	ldr	r3, [r3, #32]
 800ae0c:	697a      	ldr	r2, [r7, #20]
 800ae0e:	4313      	orrs	r3, r2
 800ae10:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	689b      	ldr	r3, [r3, #8]
 800ae18:	4a9d      	ldr	r2, [pc, #628]	@ (800b090 <UART_SetConfig+0x2e4>)
 800ae1a:	4013      	ands	r3, r2
 800ae1c:	0019      	movs	r1, r3
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	697a      	ldr	r2, [r7, #20]
 800ae24:	430a      	orrs	r2, r1
 800ae26:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae2e:	220f      	movs	r2, #15
 800ae30:	4393      	bics	r3, r2
 800ae32:	0019      	movs	r1, r3
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	430a      	orrs	r2, r1
 800ae3e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	4a93      	ldr	r2, [pc, #588]	@ (800b094 <UART_SetConfig+0x2e8>)
 800ae46:	4293      	cmp	r3, r2
 800ae48:	d127      	bne.n	800ae9a <UART_SetConfig+0xee>
 800ae4a:	4b93      	ldr	r3, [pc, #588]	@ (800b098 <UART_SetConfig+0x2ec>)
 800ae4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae4e:	2203      	movs	r2, #3
 800ae50:	4013      	ands	r3, r2
 800ae52:	2b03      	cmp	r3, #3
 800ae54:	d017      	beq.n	800ae86 <UART_SetConfig+0xda>
 800ae56:	d81b      	bhi.n	800ae90 <UART_SetConfig+0xe4>
 800ae58:	2b02      	cmp	r3, #2
 800ae5a:	d00a      	beq.n	800ae72 <UART_SetConfig+0xc6>
 800ae5c:	d818      	bhi.n	800ae90 <UART_SetConfig+0xe4>
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d002      	beq.n	800ae68 <UART_SetConfig+0xbc>
 800ae62:	2b01      	cmp	r3, #1
 800ae64:	d00a      	beq.n	800ae7c <UART_SetConfig+0xd0>
 800ae66:	e013      	b.n	800ae90 <UART_SetConfig+0xe4>
 800ae68:	231f      	movs	r3, #31
 800ae6a:	18fb      	adds	r3, r7, r3
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	701a      	strb	r2, [r3, #0]
 800ae70:	e021      	b.n	800aeb6 <UART_SetConfig+0x10a>
 800ae72:	231f      	movs	r3, #31
 800ae74:	18fb      	adds	r3, r7, r3
 800ae76:	2202      	movs	r2, #2
 800ae78:	701a      	strb	r2, [r3, #0]
 800ae7a:	e01c      	b.n	800aeb6 <UART_SetConfig+0x10a>
 800ae7c:	231f      	movs	r3, #31
 800ae7e:	18fb      	adds	r3, r7, r3
 800ae80:	2204      	movs	r2, #4
 800ae82:	701a      	strb	r2, [r3, #0]
 800ae84:	e017      	b.n	800aeb6 <UART_SetConfig+0x10a>
 800ae86:	231f      	movs	r3, #31
 800ae88:	18fb      	adds	r3, r7, r3
 800ae8a:	2208      	movs	r2, #8
 800ae8c:	701a      	strb	r2, [r3, #0]
 800ae8e:	e012      	b.n	800aeb6 <UART_SetConfig+0x10a>
 800ae90:	231f      	movs	r3, #31
 800ae92:	18fb      	adds	r3, r7, r3
 800ae94:	2210      	movs	r2, #16
 800ae96:	701a      	strb	r2, [r3, #0]
 800ae98:	e00d      	b.n	800aeb6 <UART_SetConfig+0x10a>
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	4a7f      	ldr	r2, [pc, #508]	@ (800b09c <UART_SetConfig+0x2f0>)
 800aea0:	4293      	cmp	r3, r2
 800aea2:	d104      	bne.n	800aeae <UART_SetConfig+0x102>
 800aea4:	231f      	movs	r3, #31
 800aea6:	18fb      	adds	r3, r7, r3
 800aea8:	2200      	movs	r2, #0
 800aeaa:	701a      	strb	r2, [r3, #0]
 800aeac:	e003      	b.n	800aeb6 <UART_SetConfig+0x10a>
 800aeae:	231f      	movs	r3, #31
 800aeb0:	18fb      	adds	r3, r7, r3
 800aeb2:	2210      	movs	r2, #16
 800aeb4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	69da      	ldr	r2, [r3, #28]
 800aeba:	2380      	movs	r3, #128	@ 0x80
 800aebc:	021b      	lsls	r3, r3, #8
 800aebe:	429a      	cmp	r2, r3
 800aec0:	d000      	beq.n	800aec4 <UART_SetConfig+0x118>
 800aec2:	e06f      	b.n	800afa4 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 800aec4:	231f      	movs	r3, #31
 800aec6:	18fb      	adds	r3, r7, r3
 800aec8:	781b      	ldrb	r3, [r3, #0]
 800aeca:	2b08      	cmp	r3, #8
 800aecc:	d01f      	beq.n	800af0e <UART_SetConfig+0x162>
 800aece:	dc22      	bgt.n	800af16 <UART_SetConfig+0x16a>
 800aed0:	2b04      	cmp	r3, #4
 800aed2:	d017      	beq.n	800af04 <UART_SetConfig+0x158>
 800aed4:	dc1f      	bgt.n	800af16 <UART_SetConfig+0x16a>
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d002      	beq.n	800aee0 <UART_SetConfig+0x134>
 800aeda:	2b02      	cmp	r3, #2
 800aedc:	d005      	beq.n	800aeea <UART_SetConfig+0x13e>
 800aede:	e01a      	b.n	800af16 <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aee0:	f7fd fbb2 	bl	8008648 <HAL_RCC_GetPCLK1Freq>
 800aee4:	0003      	movs	r3, r0
 800aee6:	61bb      	str	r3, [r7, #24]
        break;
 800aee8:	e01c      	b.n	800af24 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 800aeea:	4b6b      	ldr	r3, [pc, #428]	@ (800b098 <UART_SetConfig+0x2ec>)
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	095b      	lsrs	r3, r3, #5
 800aef0:	2207      	movs	r2, #7
 800aef2:	4013      	ands	r3, r2
 800aef4:	3301      	adds	r3, #1
 800aef6:	0019      	movs	r1, r3
 800aef8:	4869      	ldr	r0, [pc, #420]	@ (800b0a0 <UART_SetConfig+0x2f4>)
 800aefa:	f7f5 f905 	bl	8000108 <__udivsi3>
 800aefe:	0003      	movs	r3, r0
 800af00:	61bb      	str	r3, [r7, #24]
        break;
 800af02:	e00f      	b.n	800af24 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800af04:	f7fd fb2a 	bl	800855c <HAL_RCC_GetSysClockFreq>
 800af08:	0003      	movs	r3, r0
 800af0a:	61bb      	str	r3, [r7, #24]
        break;
 800af0c:	e00a      	b.n	800af24 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800af0e:	2380      	movs	r3, #128	@ 0x80
 800af10:	021b      	lsls	r3, r3, #8
 800af12:	61bb      	str	r3, [r7, #24]
        break;
 800af14:	e006      	b.n	800af24 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 800af16:	2300      	movs	r3, #0
 800af18:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800af1a:	231e      	movs	r3, #30
 800af1c:	18fb      	adds	r3, r7, r3
 800af1e:	2201      	movs	r2, #1
 800af20:	701a      	strb	r2, [r3, #0]
        break;
 800af22:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800af24:	69bb      	ldr	r3, [r7, #24]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d100      	bne.n	800af2c <UART_SetConfig+0x180>
 800af2a:	e097      	b.n	800b05c <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800af30:	4b5c      	ldr	r3, [pc, #368]	@ (800b0a4 <UART_SetConfig+0x2f8>)
 800af32:	0052      	lsls	r2, r2, #1
 800af34:	5ad3      	ldrh	r3, [r2, r3]
 800af36:	0019      	movs	r1, r3
 800af38:	69b8      	ldr	r0, [r7, #24]
 800af3a:	f7f5 f8e5 	bl	8000108 <__udivsi3>
 800af3e:	0003      	movs	r3, r0
 800af40:	005a      	lsls	r2, r3, #1
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	685b      	ldr	r3, [r3, #4]
 800af46:	085b      	lsrs	r3, r3, #1
 800af48:	18d2      	adds	r2, r2, r3
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	685b      	ldr	r3, [r3, #4]
 800af4e:	0019      	movs	r1, r3
 800af50:	0010      	movs	r0, r2
 800af52:	f7f5 f8d9 	bl	8000108 <__udivsi3>
 800af56:	0003      	movs	r3, r0
 800af58:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af5a:	693b      	ldr	r3, [r7, #16]
 800af5c:	2b0f      	cmp	r3, #15
 800af5e:	d91c      	bls.n	800af9a <UART_SetConfig+0x1ee>
 800af60:	693a      	ldr	r2, [r7, #16]
 800af62:	2380      	movs	r3, #128	@ 0x80
 800af64:	025b      	lsls	r3, r3, #9
 800af66:	429a      	cmp	r2, r3
 800af68:	d217      	bcs.n	800af9a <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800af6a:	693b      	ldr	r3, [r7, #16]
 800af6c:	b29a      	uxth	r2, r3
 800af6e:	200e      	movs	r0, #14
 800af70:	183b      	adds	r3, r7, r0
 800af72:	210f      	movs	r1, #15
 800af74:	438a      	bics	r2, r1
 800af76:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800af78:	693b      	ldr	r3, [r7, #16]
 800af7a:	085b      	lsrs	r3, r3, #1
 800af7c:	b29b      	uxth	r3, r3
 800af7e:	2207      	movs	r2, #7
 800af80:	4013      	ands	r3, r2
 800af82:	b299      	uxth	r1, r3
 800af84:	183b      	adds	r3, r7, r0
 800af86:	183a      	adds	r2, r7, r0
 800af88:	8812      	ldrh	r2, [r2, #0]
 800af8a:	430a      	orrs	r2, r1
 800af8c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	183a      	adds	r2, r7, r0
 800af94:	8812      	ldrh	r2, [r2, #0]
 800af96:	60da      	str	r2, [r3, #12]
 800af98:	e060      	b.n	800b05c <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 800af9a:	231e      	movs	r3, #30
 800af9c:	18fb      	adds	r3, r7, r3
 800af9e:	2201      	movs	r2, #1
 800afa0:	701a      	strb	r2, [r3, #0]
 800afa2:	e05b      	b.n	800b05c <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800afa4:	231f      	movs	r3, #31
 800afa6:	18fb      	adds	r3, r7, r3
 800afa8:	781b      	ldrb	r3, [r3, #0]
 800afaa:	2b08      	cmp	r3, #8
 800afac:	d01f      	beq.n	800afee <UART_SetConfig+0x242>
 800afae:	dc22      	bgt.n	800aff6 <UART_SetConfig+0x24a>
 800afb0:	2b04      	cmp	r3, #4
 800afb2:	d017      	beq.n	800afe4 <UART_SetConfig+0x238>
 800afb4:	dc1f      	bgt.n	800aff6 <UART_SetConfig+0x24a>
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d002      	beq.n	800afc0 <UART_SetConfig+0x214>
 800afba:	2b02      	cmp	r3, #2
 800afbc:	d005      	beq.n	800afca <UART_SetConfig+0x21e>
 800afbe:	e01a      	b.n	800aff6 <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800afc0:	f7fd fb42 	bl	8008648 <HAL_RCC_GetPCLK1Freq>
 800afc4:	0003      	movs	r3, r0
 800afc6:	61bb      	str	r3, [r7, #24]
        break;
 800afc8:	e01c      	b.n	800b004 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 800afca:	4b33      	ldr	r3, [pc, #204]	@ (800b098 <UART_SetConfig+0x2ec>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	095b      	lsrs	r3, r3, #5
 800afd0:	2207      	movs	r2, #7
 800afd2:	4013      	ands	r3, r2
 800afd4:	3301      	adds	r3, #1
 800afd6:	0019      	movs	r1, r3
 800afd8:	4831      	ldr	r0, [pc, #196]	@ (800b0a0 <UART_SetConfig+0x2f4>)
 800afda:	f7f5 f895 	bl	8000108 <__udivsi3>
 800afde:	0003      	movs	r3, r0
 800afe0:	61bb      	str	r3, [r7, #24]
        break;
 800afe2:	e00f      	b.n	800b004 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800afe4:	f7fd faba 	bl	800855c <HAL_RCC_GetSysClockFreq>
 800afe8:	0003      	movs	r3, r0
 800afea:	61bb      	str	r3, [r7, #24]
        break;
 800afec:	e00a      	b.n	800b004 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800afee:	2380      	movs	r3, #128	@ 0x80
 800aff0:	021b      	lsls	r3, r3, #8
 800aff2:	61bb      	str	r3, [r7, #24]
        break;
 800aff4:	e006      	b.n	800b004 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 800aff6:	2300      	movs	r3, #0
 800aff8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800affa:	231e      	movs	r3, #30
 800affc:	18fb      	adds	r3, r7, r3
 800affe:	2201      	movs	r2, #1
 800b000:	701a      	strb	r2, [r3, #0]
        break;
 800b002:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800b004:	69bb      	ldr	r3, [r7, #24]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d028      	beq.n	800b05c <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b00e:	4b25      	ldr	r3, [pc, #148]	@ (800b0a4 <UART_SetConfig+0x2f8>)
 800b010:	0052      	lsls	r2, r2, #1
 800b012:	5ad3      	ldrh	r3, [r2, r3]
 800b014:	0019      	movs	r1, r3
 800b016:	69b8      	ldr	r0, [r7, #24]
 800b018:	f7f5 f876 	bl	8000108 <__udivsi3>
 800b01c:	0003      	movs	r3, r0
 800b01e:	001a      	movs	r2, r3
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	685b      	ldr	r3, [r3, #4]
 800b024:	085b      	lsrs	r3, r3, #1
 800b026:	18d2      	adds	r2, r2, r3
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	685b      	ldr	r3, [r3, #4]
 800b02c:	0019      	movs	r1, r3
 800b02e:	0010      	movs	r0, r2
 800b030:	f7f5 f86a 	bl	8000108 <__udivsi3>
 800b034:	0003      	movs	r3, r0
 800b036:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b038:	693b      	ldr	r3, [r7, #16]
 800b03a:	2b0f      	cmp	r3, #15
 800b03c:	d90a      	bls.n	800b054 <UART_SetConfig+0x2a8>
 800b03e:	693a      	ldr	r2, [r7, #16]
 800b040:	2380      	movs	r3, #128	@ 0x80
 800b042:	025b      	lsls	r3, r3, #9
 800b044:	429a      	cmp	r2, r3
 800b046:	d205      	bcs.n	800b054 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b048:	693b      	ldr	r3, [r7, #16]
 800b04a:	b29a      	uxth	r2, r3
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	60da      	str	r2, [r3, #12]
 800b052:	e003      	b.n	800b05c <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 800b054:	231e      	movs	r3, #30
 800b056:	18fb      	adds	r3, r7, r3
 800b058:	2201      	movs	r2, #1
 800b05a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	226a      	movs	r2, #106	@ 0x6a
 800b060:	2101      	movs	r1, #1
 800b062:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	2268      	movs	r2, #104	@ 0x68
 800b068:	2101      	movs	r1, #1
 800b06a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2200      	movs	r2, #0
 800b070:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2200      	movs	r2, #0
 800b076:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b078:	231e      	movs	r3, #30
 800b07a:	18fb      	adds	r3, r7, r3
 800b07c:	781b      	ldrb	r3, [r3, #0]
}
 800b07e:	0018      	movs	r0, r3
 800b080:	46bd      	mov	sp, r7
 800b082:	b008      	add	sp, #32
 800b084:	bd80      	pop	{r7, pc}
 800b086:	46c0      	nop			@ (mov r8, r8)
 800b088:	cfff69f3 	.word	0xcfff69f3
 800b08c:	ffffcfff 	.word	0xffffcfff
 800b090:	11fff4ff 	.word	0x11fff4ff
 800b094:	40013800 	.word	0x40013800
 800b098:	40021000 	.word	0x40021000
 800b09c:	40004400 	.word	0x40004400
 800b0a0:	02dc6c00 	.word	0x02dc6c00
 800b0a4:	0800c660 	.word	0x0800c660

0800b0a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b082      	sub	sp, #8
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0b4:	2208      	movs	r2, #8
 800b0b6:	4013      	ands	r3, r2
 800b0b8:	d00b      	beq.n	800b0d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	685b      	ldr	r3, [r3, #4]
 800b0c0:	4a4a      	ldr	r2, [pc, #296]	@ (800b1ec <UART_AdvFeatureConfig+0x144>)
 800b0c2:	4013      	ands	r3, r2
 800b0c4:	0019      	movs	r1, r3
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	430a      	orrs	r2, r1
 800b0d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0d6:	2201      	movs	r2, #1
 800b0d8:	4013      	ands	r3, r2
 800b0da:	d00b      	beq.n	800b0f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	685b      	ldr	r3, [r3, #4]
 800b0e2:	4a43      	ldr	r2, [pc, #268]	@ (800b1f0 <UART_AdvFeatureConfig+0x148>)
 800b0e4:	4013      	ands	r3, r2
 800b0e6:	0019      	movs	r1, r3
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	430a      	orrs	r2, r1
 800b0f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0f8:	2202      	movs	r2, #2
 800b0fa:	4013      	ands	r3, r2
 800b0fc:	d00b      	beq.n	800b116 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	685b      	ldr	r3, [r3, #4]
 800b104:	4a3b      	ldr	r2, [pc, #236]	@ (800b1f4 <UART_AdvFeatureConfig+0x14c>)
 800b106:	4013      	ands	r3, r2
 800b108:	0019      	movs	r1, r3
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	430a      	orrs	r2, r1
 800b114:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b11a:	2204      	movs	r2, #4
 800b11c:	4013      	ands	r3, r2
 800b11e:	d00b      	beq.n	800b138 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	685b      	ldr	r3, [r3, #4]
 800b126:	4a34      	ldr	r2, [pc, #208]	@ (800b1f8 <UART_AdvFeatureConfig+0x150>)
 800b128:	4013      	ands	r3, r2
 800b12a:	0019      	movs	r1, r3
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	430a      	orrs	r2, r1
 800b136:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b13c:	2210      	movs	r2, #16
 800b13e:	4013      	ands	r3, r2
 800b140:	d00b      	beq.n	800b15a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	689b      	ldr	r3, [r3, #8]
 800b148:	4a2c      	ldr	r2, [pc, #176]	@ (800b1fc <UART_AdvFeatureConfig+0x154>)
 800b14a:	4013      	ands	r3, r2
 800b14c:	0019      	movs	r1, r3
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	430a      	orrs	r2, r1
 800b158:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b15e:	2220      	movs	r2, #32
 800b160:	4013      	ands	r3, r2
 800b162:	d00b      	beq.n	800b17c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	689b      	ldr	r3, [r3, #8]
 800b16a:	4a25      	ldr	r2, [pc, #148]	@ (800b200 <UART_AdvFeatureConfig+0x158>)
 800b16c:	4013      	ands	r3, r2
 800b16e:	0019      	movs	r1, r3
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	430a      	orrs	r2, r1
 800b17a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b180:	2240      	movs	r2, #64	@ 0x40
 800b182:	4013      	ands	r3, r2
 800b184:	d01d      	beq.n	800b1c2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	685b      	ldr	r3, [r3, #4]
 800b18c:	4a1d      	ldr	r2, [pc, #116]	@ (800b204 <UART_AdvFeatureConfig+0x15c>)
 800b18e:	4013      	ands	r3, r2
 800b190:	0019      	movs	r1, r3
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	430a      	orrs	r2, r1
 800b19c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b1a2:	2380      	movs	r3, #128	@ 0x80
 800b1a4:	035b      	lsls	r3, r3, #13
 800b1a6:	429a      	cmp	r2, r3
 800b1a8:	d10b      	bne.n	800b1c2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	685b      	ldr	r3, [r3, #4]
 800b1b0:	4a15      	ldr	r2, [pc, #84]	@ (800b208 <UART_AdvFeatureConfig+0x160>)
 800b1b2:	4013      	ands	r3, r2
 800b1b4:	0019      	movs	r1, r3
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	430a      	orrs	r2, r1
 800b1c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1c6:	2280      	movs	r2, #128	@ 0x80
 800b1c8:	4013      	ands	r3, r2
 800b1ca:	d00b      	beq.n	800b1e4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	685b      	ldr	r3, [r3, #4]
 800b1d2:	4a0e      	ldr	r2, [pc, #56]	@ (800b20c <UART_AdvFeatureConfig+0x164>)
 800b1d4:	4013      	ands	r3, r2
 800b1d6:	0019      	movs	r1, r3
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	430a      	orrs	r2, r1
 800b1e2:	605a      	str	r2, [r3, #4]
  }
}
 800b1e4:	46c0      	nop			@ (mov r8, r8)
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	b002      	add	sp, #8
 800b1ea:	bd80      	pop	{r7, pc}
 800b1ec:	ffff7fff 	.word	0xffff7fff
 800b1f0:	fffdffff 	.word	0xfffdffff
 800b1f4:	fffeffff 	.word	0xfffeffff
 800b1f8:	fffbffff 	.word	0xfffbffff
 800b1fc:	ffffefff 	.word	0xffffefff
 800b200:	ffffdfff 	.word	0xffffdfff
 800b204:	ffefffff 	.word	0xffefffff
 800b208:	ff9fffff 	.word	0xff9fffff
 800b20c:	fff7ffff 	.word	0xfff7ffff

0800b210 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b092      	sub	sp, #72	@ 0x48
 800b214:	af02      	add	r7, sp, #8
 800b216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2290      	movs	r2, #144	@ 0x90
 800b21c:	2100      	movs	r1, #0
 800b21e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b220:	f7f9 fcde 	bl	8004be0 <HAL_GetTick>
 800b224:	0003      	movs	r3, r0
 800b226:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	2208      	movs	r2, #8
 800b230:	4013      	ands	r3, r2
 800b232:	2b08      	cmp	r3, #8
 800b234:	d12d      	bne.n	800b292 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b236:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b238:	2280      	movs	r2, #128	@ 0x80
 800b23a:	0391      	lsls	r1, r2, #14
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	4a47      	ldr	r2, [pc, #284]	@ (800b35c <UART_CheckIdleState+0x14c>)
 800b240:	9200      	str	r2, [sp, #0]
 800b242:	2200      	movs	r2, #0
 800b244:	f000 f88e 	bl	800b364 <UART_WaitOnFlagUntilTimeout>
 800b248:	1e03      	subs	r3, r0, #0
 800b24a:	d022      	beq.n	800b292 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800b24c:	f3ef 8310 	mrs	r3, PRIMASK
 800b250:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800b252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b254:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b256:	2301      	movs	r3, #1
 800b258:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b25a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b25c:	f383 8810 	msr	PRIMASK, r3
}
 800b260:	46c0      	nop			@ (mov r8, r8)
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	681a      	ldr	r2, [r3, #0]
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	2180      	movs	r1, #128	@ 0x80
 800b26e:	438a      	bics	r2, r1
 800b270:	601a      	str	r2, [r3, #0]
 800b272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b274:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b278:	f383 8810 	msr	PRIMASK, r3
}
 800b27c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	2288      	movs	r2, #136	@ 0x88
 800b282:	2120      	movs	r1, #32
 800b284:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	2284      	movs	r2, #132	@ 0x84
 800b28a:	2100      	movs	r1, #0
 800b28c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b28e:	2303      	movs	r3, #3
 800b290:	e060      	b.n	800b354 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	2204      	movs	r2, #4
 800b29a:	4013      	ands	r3, r2
 800b29c:	2b04      	cmp	r3, #4
 800b29e:	d146      	bne.n	800b32e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b2a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2a2:	2280      	movs	r2, #128	@ 0x80
 800b2a4:	03d1      	lsls	r1, r2, #15
 800b2a6:	6878      	ldr	r0, [r7, #4]
 800b2a8:	4a2c      	ldr	r2, [pc, #176]	@ (800b35c <UART_CheckIdleState+0x14c>)
 800b2aa:	9200      	str	r2, [sp, #0]
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	f000 f859 	bl	800b364 <UART_WaitOnFlagUntilTimeout>
 800b2b2:	1e03      	subs	r3, r0, #0
 800b2b4:	d03b      	beq.n	800b32e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800b2b6:	f3ef 8310 	mrs	r3, PRIMASK
 800b2ba:	60fb      	str	r3, [r7, #12]
  return(result);
 800b2bc:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b2be:	637b      	str	r3, [r7, #52]	@ 0x34
 800b2c0:	2301      	movs	r3, #1
 800b2c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b2c4:	693b      	ldr	r3, [r7, #16]
 800b2c6:	f383 8810 	msr	PRIMASK, r3
}
 800b2ca:	46c0      	nop			@ (mov r8, r8)
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	681a      	ldr	r2, [r3, #0]
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	4922      	ldr	r1, [pc, #136]	@ (800b360 <UART_CheckIdleState+0x150>)
 800b2d8:	400a      	ands	r2, r1
 800b2da:	601a      	str	r2, [r3, #0]
 800b2dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b2e0:	697b      	ldr	r3, [r7, #20]
 800b2e2:	f383 8810 	msr	PRIMASK, r3
}
 800b2e6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800b2e8:	f3ef 8310 	mrs	r3, PRIMASK
 800b2ec:	61bb      	str	r3, [r7, #24]
  return(result);
 800b2ee:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2f0:	633b      	str	r3, [r7, #48]	@ 0x30
 800b2f2:	2301      	movs	r3, #1
 800b2f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b2f6:	69fb      	ldr	r3, [r7, #28]
 800b2f8:	f383 8810 	msr	PRIMASK, r3
}
 800b2fc:	46c0      	nop			@ (mov r8, r8)
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	689a      	ldr	r2, [r3, #8]
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	2101      	movs	r1, #1
 800b30a:	438a      	bics	r2, r1
 800b30c:	609a      	str	r2, [r3, #8]
 800b30e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b310:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b312:	6a3b      	ldr	r3, [r7, #32]
 800b314:	f383 8810 	msr	PRIMASK, r3
}
 800b318:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	228c      	movs	r2, #140	@ 0x8c
 800b31e:	2120      	movs	r1, #32
 800b320:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	2284      	movs	r2, #132	@ 0x84
 800b326:	2100      	movs	r1, #0
 800b328:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b32a:	2303      	movs	r3, #3
 800b32c:	e012      	b.n	800b354 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	2288      	movs	r2, #136	@ 0x88
 800b332:	2120      	movs	r1, #32
 800b334:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	228c      	movs	r2, #140	@ 0x8c
 800b33a:	2120      	movs	r1, #32
 800b33c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	2200      	movs	r2, #0
 800b342:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2200      	movs	r2, #0
 800b348:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	2284      	movs	r2, #132	@ 0x84
 800b34e:	2100      	movs	r1, #0
 800b350:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b352:	2300      	movs	r3, #0
}
 800b354:	0018      	movs	r0, r3
 800b356:	46bd      	mov	sp, r7
 800b358:	b010      	add	sp, #64	@ 0x40
 800b35a:	bd80      	pop	{r7, pc}
 800b35c:	01ffffff 	.word	0x01ffffff
 800b360:	fffffedf 	.word	0xfffffedf

0800b364 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b084      	sub	sp, #16
 800b368:	af00      	add	r7, sp, #0
 800b36a:	60f8      	str	r0, [r7, #12]
 800b36c:	60b9      	str	r1, [r7, #8]
 800b36e:	603b      	str	r3, [r7, #0]
 800b370:	1dfb      	adds	r3, r7, #7
 800b372:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b374:	e051      	b.n	800b41a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b376:	69bb      	ldr	r3, [r7, #24]
 800b378:	3301      	adds	r3, #1
 800b37a:	d04e      	beq.n	800b41a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b37c:	f7f9 fc30 	bl	8004be0 <HAL_GetTick>
 800b380:	0002      	movs	r2, r0
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	1ad3      	subs	r3, r2, r3
 800b386:	69ba      	ldr	r2, [r7, #24]
 800b388:	429a      	cmp	r2, r3
 800b38a:	d302      	bcc.n	800b392 <UART_WaitOnFlagUntilTimeout+0x2e>
 800b38c:	69bb      	ldr	r3, [r7, #24]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d101      	bne.n	800b396 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800b392:	2303      	movs	r3, #3
 800b394:	e051      	b.n	800b43a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	2204      	movs	r2, #4
 800b39e:	4013      	ands	r3, r2
 800b3a0:	d03b      	beq.n	800b41a <UART_WaitOnFlagUntilTimeout+0xb6>
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	2b80      	cmp	r3, #128	@ 0x80
 800b3a6:	d038      	beq.n	800b41a <UART_WaitOnFlagUntilTimeout+0xb6>
 800b3a8:	68bb      	ldr	r3, [r7, #8]
 800b3aa:	2b40      	cmp	r3, #64	@ 0x40
 800b3ac:	d035      	beq.n	800b41a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	69db      	ldr	r3, [r3, #28]
 800b3b4:	2208      	movs	r2, #8
 800b3b6:	4013      	ands	r3, r2
 800b3b8:	2b08      	cmp	r3, #8
 800b3ba:	d111      	bne.n	800b3e0 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	2208      	movs	r2, #8
 800b3c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	0018      	movs	r0, r3
 800b3c8:	f000 f922 	bl	800b610 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	2290      	movs	r2, #144	@ 0x90
 800b3d0:	2108      	movs	r1, #8
 800b3d2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	2284      	movs	r2, #132	@ 0x84
 800b3d8:	2100      	movs	r1, #0
 800b3da:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800b3dc:	2301      	movs	r3, #1
 800b3de:	e02c      	b.n	800b43a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	69da      	ldr	r2, [r3, #28]
 800b3e6:	2380      	movs	r3, #128	@ 0x80
 800b3e8:	011b      	lsls	r3, r3, #4
 800b3ea:	401a      	ands	r2, r3
 800b3ec:	2380      	movs	r3, #128	@ 0x80
 800b3ee:	011b      	lsls	r3, r3, #4
 800b3f0:	429a      	cmp	r2, r3
 800b3f2:	d112      	bne.n	800b41a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	2280      	movs	r2, #128	@ 0x80
 800b3fa:	0112      	lsls	r2, r2, #4
 800b3fc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	0018      	movs	r0, r3
 800b402:	f000 f905 	bl	800b610 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	2290      	movs	r2, #144	@ 0x90
 800b40a:	2120      	movs	r1, #32
 800b40c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	2284      	movs	r2, #132	@ 0x84
 800b412:	2100      	movs	r1, #0
 800b414:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800b416:	2303      	movs	r3, #3
 800b418:	e00f      	b.n	800b43a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	69db      	ldr	r3, [r3, #28]
 800b420:	68ba      	ldr	r2, [r7, #8]
 800b422:	4013      	ands	r3, r2
 800b424:	68ba      	ldr	r2, [r7, #8]
 800b426:	1ad3      	subs	r3, r2, r3
 800b428:	425a      	negs	r2, r3
 800b42a:	4153      	adcs	r3, r2
 800b42c:	b2db      	uxtb	r3, r3
 800b42e:	001a      	movs	r2, r3
 800b430:	1dfb      	adds	r3, r7, #7
 800b432:	781b      	ldrb	r3, [r3, #0]
 800b434:	429a      	cmp	r2, r3
 800b436:	d09e      	beq.n	800b376 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b438:	2300      	movs	r3, #0
}
 800b43a:	0018      	movs	r0, r3
 800b43c:	46bd      	mov	sp, r7
 800b43e:	b004      	add	sp, #16
 800b440:	bd80      	pop	{r7, pc}
	...

0800b444 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b090      	sub	sp, #64	@ 0x40
 800b448:	af00      	add	r7, sp, #0
 800b44a:	60f8      	str	r0, [r7, #12]
 800b44c:	60b9      	str	r1, [r7, #8]
 800b44e:	1dbb      	adds	r3, r7, #6
 800b450:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	68ba      	ldr	r2, [r7, #8]
 800b456:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	1dba      	adds	r2, r7, #6
 800b45c:	215c      	movs	r1, #92	@ 0x5c
 800b45e:	8812      	ldrh	r2, [r2, #0]
 800b460:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	2290      	movs	r2, #144	@ 0x90
 800b466:	2100      	movs	r1, #0
 800b468:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	228c      	movs	r2, #140	@ 0x8c
 800b46e:	2122      	movs	r1, #34	@ 0x22
 800b470:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	2280      	movs	r2, #128	@ 0x80
 800b476:	589b      	ldr	r3, [r3, r2]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d02d      	beq.n	800b4d8 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	2280      	movs	r2, #128	@ 0x80
 800b480:	589b      	ldr	r3, [r3, r2]
 800b482:	4a40      	ldr	r2, [pc, #256]	@ (800b584 <UART_Start_Receive_DMA+0x140>)
 800b484:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	2280      	movs	r2, #128	@ 0x80
 800b48a:	589b      	ldr	r3, [r3, r2]
 800b48c:	4a3e      	ldr	r2, [pc, #248]	@ (800b588 <UART_Start_Receive_DMA+0x144>)
 800b48e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	2280      	movs	r2, #128	@ 0x80
 800b494:	589b      	ldr	r3, [r3, r2]
 800b496:	4a3d      	ldr	r2, [pc, #244]	@ (800b58c <UART_Start_Receive_DMA+0x148>)
 800b498:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	2280      	movs	r2, #128	@ 0x80
 800b49e:	589b      	ldr	r3, [r3, r2]
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	2280      	movs	r2, #128	@ 0x80
 800b4a8:	5898      	ldr	r0, [r3, r2]
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	3324      	adds	r3, #36	@ 0x24
 800b4b0:	0019      	movs	r1, r3
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b4b6:	001a      	movs	r2, r3
 800b4b8:	1dbb      	adds	r3, r7, #6
 800b4ba:	881b      	ldrh	r3, [r3, #0]
 800b4bc:	f7f9 fdd0 	bl	8005060 <HAL_DMA_Start_IT>
 800b4c0:	1e03      	subs	r3, r0, #0
 800b4c2:	d009      	beq.n	800b4d8 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	2290      	movs	r2, #144	@ 0x90
 800b4c8:	2110      	movs	r1, #16
 800b4ca:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	228c      	movs	r2, #140	@ 0x8c
 800b4d0:	2120      	movs	r1, #32
 800b4d2:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 800b4d4:	2301      	movs	r3, #1
 800b4d6:	e050      	b.n	800b57a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	691b      	ldr	r3, [r3, #16]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d019      	beq.n	800b514 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800b4e0:	f3ef 8310 	mrs	r3, PRIMASK
 800b4e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800b4e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b4e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b4ea:	2301      	movs	r3, #1
 800b4ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b4ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4f0:	f383 8810 	msr	PRIMASK, r3
}
 800b4f4:	46c0      	nop			@ (mov r8, r8)
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	681a      	ldr	r2, [r3, #0]
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	2180      	movs	r1, #128	@ 0x80
 800b502:	0049      	lsls	r1, r1, #1
 800b504:	430a      	orrs	r2, r1
 800b506:	601a      	str	r2, [r3, #0]
 800b508:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b50a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b50c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b50e:	f383 8810 	msr	PRIMASK, r3
}
 800b512:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800b514:	f3ef 8310 	mrs	r3, PRIMASK
 800b518:	613b      	str	r3, [r7, #16]
  return(result);
 800b51a:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b51c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b51e:	2301      	movs	r3, #1
 800b520:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b522:	697b      	ldr	r3, [r7, #20]
 800b524:	f383 8810 	msr	PRIMASK, r3
}
 800b528:	46c0      	nop			@ (mov r8, r8)
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	689a      	ldr	r2, [r3, #8]
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	2101      	movs	r1, #1
 800b536:	430a      	orrs	r2, r1
 800b538:	609a      	str	r2, [r3, #8]
 800b53a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b53c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b53e:	69bb      	ldr	r3, [r7, #24]
 800b540:	f383 8810 	msr	PRIMASK, r3
}
 800b544:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800b546:	f3ef 8310 	mrs	r3, PRIMASK
 800b54a:	61fb      	str	r3, [r7, #28]
  return(result);
 800b54c:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b54e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b550:	2301      	movs	r3, #1
 800b552:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b554:	6a3b      	ldr	r3, [r7, #32]
 800b556:	f383 8810 	msr	PRIMASK, r3
}
 800b55a:	46c0      	nop			@ (mov r8, r8)
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	689a      	ldr	r2, [r3, #8]
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	2140      	movs	r1, #64	@ 0x40
 800b568:	430a      	orrs	r2, r1
 800b56a:	609a      	str	r2, [r3, #8]
 800b56c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b56e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b572:	f383 8810 	msr	PRIMASK, r3
}
 800b576:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 800b578:	2300      	movs	r3, #0
}
 800b57a:	0018      	movs	r0, r3
 800b57c:	46bd      	mov	sp, r7
 800b57e:	b010      	add	sp, #64	@ 0x40
 800b580:	bd80      	pop	{r7, pc}
 800b582:	46c0      	nop			@ (mov r8, r8)
 800b584:	0800b795 	.word	0x0800b795
 800b588:	0800b8c5 	.word	0x0800b8c5
 800b58c:	0800b907 	.word	0x0800b907

0800b590 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b08a      	sub	sp, #40	@ 0x28
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800b598:	f3ef 8310 	mrs	r3, PRIMASK
 800b59c:	60bb      	str	r3, [r7, #8]
  return(result);
 800b59e:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b5a0:	627b      	str	r3, [r7, #36]	@ 0x24
 800b5a2:	2301      	movs	r3, #1
 800b5a4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	f383 8810 	msr	PRIMASK, r3
}
 800b5ac:	46c0      	nop			@ (mov r8, r8)
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	681a      	ldr	r2, [r3, #0]
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	21c0      	movs	r1, #192	@ 0xc0
 800b5ba:	438a      	bics	r2, r1
 800b5bc:	601a      	str	r2, [r3, #0]
 800b5be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b5c2:	693b      	ldr	r3, [r7, #16]
 800b5c4:	f383 8810 	msr	PRIMASK, r3
}
 800b5c8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800b5ca:	f3ef 8310 	mrs	r3, PRIMASK
 800b5ce:	617b      	str	r3, [r7, #20]
  return(result);
 800b5d0:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b5d2:	623b      	str	r3, [r7, #32]
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b5d8:	69bb      	ldr	r3, [r7, #24]
 800b5da:	f383 8810 	msr	PRIMASK, r3
}
 800b5de:	46c0      	nop			@ (mov r8, r8)
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	689a      	ldr	r2, [r3, #8]
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	4908      	ldr	r1, [pc, #32]	@ (800b60c <UART_EndTxTransfer+0x7c>)
 800b5ec:	400a      	ands	r2, r1
 800b5ee:	609a      	str	r2, [r3, #8]
 800b5f0:	6a3b      	ldr	r3, [r7, #32]
 800b5f2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b5f4:	69fb      	ldr	r3, [r7, #28]
 800b5f6:	f383 8810 	msr	PRIMASK, r3
}
 800b5fa:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	2288      	movs	r2, #136	@ 0x88
 800b600:	2120      	movs	r1, #32
 800b602:	5099      	str	r1, [r3, r2]
}
 800b604:	46c0      	nop			@ (mov r8, r8)
 800b606:	46bd      	mov	sp, r7
 800b608:	b00a      	add	sp, #40	@ 0x28
 800b60a:	bd80      	pop	{r7, pc}
 800b60c:	ff7fffff 	.word	0xff7fffff

0800b610 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b08e      	sub	sp, #56	@ 0x38
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800b618:	f3ef 8310 	mrs	r3, PRIMASK
 800b61c:	617b      	str	r3, [r7, #20]
  return(result);
 800b61e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b620:	637b      	str	r3, [r7, #52]	@ 0x34
 800b622:	2301      	movs	r3, #1
 800b624:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b626:	69bb      	ldr	r3, [r7, #24]
 800b628:	f383 8810 	msr	PRIMASK, r3
}
 800b62c:	46c0      	nop			@ (mov r8, r8)
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	681a      	ldr	r2, [r3, #0]
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	4926      	ldr	r1, [pc, #152]	@ (800b6d4 <UART_EndRxTransfer+0xc4>)
 800b63a:	400a      	ands	r2, r1
 800b63c:	601a      	str	r2, [r3, #0]
 800b63e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b640:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b642:	69fb      	ldr	r3, [r7, #28]
 800b644:	f383 8810 	msr	PRIMASK, r3
}
 800b648:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800b64a:	f3ef 8310 	mrs	r3, PRIMASK
 800b64e:	623b      	str	r3, [r7, #32]
  return(result);
 800b650:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b652:	633b      	str	r3, [r7, #48]	@ 0x30
 800b654:	2301      	movs	r3, #1
 800b656:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b65a:	f383 8810 	msr	PRIMASK, r3
}
 800b65e:	46c0      	nop			@ (mov r8, r8)
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	689a      	ldr	r2, [r3, #8]
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	491b      	ldr	r1, [pc, #108]	@ (800b6d8 <UART_EndRxTransfer+0xc8>)
 800b66c:	400a      	ands	r2, r1
 800b66e:	609a      	str	r2, [r3, #8]
 800b670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b672:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b676:	f383 8810 	msr	PRIMASK, r3
}
 800b67a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b680:	2b01      	cmp	r3, #1
 800b682:	d118      	bne.n	800b6b6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800b684:	f3ef 8310 	mrs	r3, PRIMASK
 800b688:	60bb      	str	r3, [r7, #8]
  return(result);
 800b68a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b68c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b68e:	2301      	movs	r3, #1
 800b690:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	f383 8810 	msr	PRIMASK, r3
}
 800b698:	46c0      	nop			@ (mov r8, r8)
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	681a      	ldr	r2, [r3, #0]
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	2110      	movs	r1, #16
 800b6a6:	438a      	bics	r2, r1
 800b6a8:	601a      	str	r2, [r3, #0]
 800b6aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b6ae:	693b      	ldr	r3, [r7, #16]
 800b6b0:	f383 8810 	msr	PRIMASK, r3
}
 800b6b4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	228c      	movs	r2, #140	@ 0x8c
 800b6ba:	2120      	movs	r1, #32
 800b6bc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b6ca:	46c0      	nop			@ (mov r8, r8)
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	b00e      	add	sp, #56	@ 0x38
 800b6d0:	bd80      	pop	{r7, pc}
 800b6d2:	46c0      	nop			@ (mov r8, r8)
 800b6d4:	fffffedf 	.word	0xfffffedf
 800b6d8:	effffffe 	.word	0xeffffffe

0800b6dc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b08c      	sub	sp, #48	@ 0x30
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6e8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	2220      	movs	r2, #32
 800b6f2:	4013      	ands	r3, r2
 800b6f4:	d135      	bne.n	800b762 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 800b6f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6f8:	2256      	movs	r2, #86	@ 0x56
 800b6fa:	2100      	movs	r1, #0
 800b6fc:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800b6fe:	f3ef 8310 	mrs	r3, PRIMASK
 800b702:	60fb      	str	r3, [r7, #12]
  return(result);
 800b704:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b706:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b708:	2301      	movs	r3, #1
 800b70a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b70c:	693b      	ldr	r3, [r7, #16]
 800b70e:	f383 8810 	msr	PRIMASK, r3
}
 800b712:	46c0      	nop			@ (mov r8, r8)
 800b714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	689a      	ldr	r2, [r3, #8]
 800b71a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	2180      	movs	r1, #128	@ 0x80
 800b720:	438a      	bics	r2, r1
 800b722:	609a      	str	r2, [r3, #8]
 800b724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b726:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b728:	697b      	ldr	r3, [r7, #20]
 800b72a:	f383 8810 	msr	PRIMASK, r3
}
 800b72e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800b730:	f3ef 8310 	mrs	r3, PRIMASK
 800b734:	61bb      	str	r3, [r7, #24]
  return(result);
 800b736:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b738:	627b      	str	r3, [r7, #36]	@ 0x24
 800b73a:	2301      	movs	r3, #1
 800b73c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b73e:	69fb      	ldr	r3, [r7, #28]
 800b740:	f383 8810 	msr	PRIMASK, r3
}
 800b744:	46c0      	nop			@ (mov r8, r8)
 800b746:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	681a      	ldr	r2, [r3, #0]
 800b74c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	2140      	movs	r1, #64	@ 0x40
 800b752:	430a      	orrs	r2, r1
 800b754:	601a      	str	r2, [r3, #0]
 800b756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b758:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b75a:	6a3b      	ldr	r3, [r7, #32]
 800b75c:	f383 8810 	msr	PRIMASK, r3
}
 800b760:	e004      	b.n	800b76c <UART_DMATransmitCplt+0x90>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 800b762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b764:	0018      	movs	r0, r3
 800b766:	f7f7 fde5 	bl	8003334 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b76a:	46c0      	nop			@ (mov r8, r8)
 800b76c:	46c0      	nop			@ (mov r8, r8)
 800b76e:	46bd      	mov	sp, r7
 800b770:	b00c      	add	sp, #48	@ 0x30
 800b772:	bd80      	pop	{r7, pc}

0800b774 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b084      	sub	sp, #16
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b780:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	0018      	movs	r0, r3
 800b786:	f7ff faf9 	bl	800ad7c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b78a:	46c0      	nop			@ (mov r8, r8)
 800b78c:	46bd      	mov	sp, r7
 800b78e:	b004      	add	sp, #16
 800b790:	bd80      	pop	{r7, pc}
	...

0800b794 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b094      	sub	sp, #80	@ 0x50
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7a0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	2220      	movs	r2, #32
 800b7aa:	4013      	ands	r3, r2
 800b7ac:	d16f      	bne.n	800b88e <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800b7ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b7b0:	225e      	movs	r2, #94	@ 0x5e
 800b7b2:	2100      	movs	r1, #0
 800b7b4:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800b7b6:	f3ef 8310 	mrs	r3, PRIMASK
 800b7ba:	61bb      	str	r3, [r7, #24]
  return(result);
 800b7bc:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b7be:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b7c0:	2301      	movs	r3, #1
 800b7c2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b7c4:	69fb      	ldr	r3, [r7, #28]
 800b7c6:	f383 8810 	msr	PRIMASK, r3
}
 800b7ca:	46c0      	nop			@ (mov r8, r8)
 800b7cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	681a      	ldr	r2, [r3, #0]
 800b7d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	493a      	ldr	r1, [pc, #232]	@ (800b8c0 <UART_DMAReceiveCplt+0x12c>)
 800b7d8:	400a      	ands	r2, r1
 800b7da:	601a      	str	r2, [r3, #0]
 800b7dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b7de:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b7e0:	6a3b      	ldr	r3, [r7, #32]
 800b7e2:	f383 8810 	msr	PRIMASK, r3
}
 800b7e6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800b7e8:	f3ef 8310 	mrs	r3, PRIMASK
 800b7ec:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800b7ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b7f0:	647b      	str	r3, [r7, #68]	@ 0x44
 800b7f2:	2301      	movs	r3, #1
 800b7f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b7f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7f8:	f383 8810 	msr	PRIMASK, r3
}
 800b7fc:	46c0      	nop			@ (mov r8, r8)
 800b7fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	689a      	ldr	r2, [r3, #8]
 800b804:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	2101      	movs	r1, #1
 800b80a:	438a      	bics	r2, r1
 800b80c:	609a      	str	r2, [r3, #8]
 800b80e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b810:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b814:	f383 8810 	msr	PRIMASK, r3
}
 800b818:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800b81a:	f3ef 8310 	mrs	r3, PRIMASK
 800b81e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800b820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b822:	643b      	str	r3, [r7, #64]	@ 0x40
 800b824:	2301      	movs	r3, #1
 800b826:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b828:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b82a:	f383 8810 	msr	PRIMASK, r3
}
 800b82e:	46c0      	nop			@ (mov r8, r8)
 800b830:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	689a      	ldr	r2, [r3, #8]
 800b836:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	2140      	movs	r1, #64	@ 0x40
 800b83c:	438a      	bics	r2, r1
 800b83e:	609a      	str	r2, [r3, #8]
 800b840:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b842:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b846:	f383 8810 	msr	PRIMASK, r3
}
 800b84a:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b84c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b84e:	228c      	movs	r2, #140	@ 0x8c
 800b850:	2120      	movs	r1, #32
 800b852:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b854:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b856:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b858:	2b01      	cmp	r3, #1
 800b85a:	d118      	bne.n	800b88e <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800b85c:	f3ef 8310 	mrs	r3, PRIMASK
 800b860:	60fb      	str	r3, [r7, #12]
  return(result);
 800b862:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b864:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b866:	2301      	movs	r3, #1
 800b868:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b86a:	693b      	ldr	r3, [r7, #16]
 800b86c:	f383 8810 	msr	PRIMASK, r3
}
 800b870:	46c0      	nop			@ (mov r8, r8)
 800b872:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	681a      	ldr	r2, [r3, #0]
 800b878:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	2110      	movs	r1, #16
 800b87e:	438a      	bics	r2, r1
 800b880:	601a      	str	r2, [r3, #0]
 800b882:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b884:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b886:	697b      	ldr	r3, [r7, #20]
 800b888:	f383 8810 	msr	PRIMASK, r3
}
 800b88c:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b88e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b890:	2200      	movs	r2, #0
 800b892:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b894:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b896:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b898:	2b01      	cmp	r3, #1
 800b89a:	d108      	bne.n	800b8ae <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b89c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b89e:	225c      	movs	r2, #92	@ 0x5c
 800b8a0:	5a9a      	ldrh	r2, [r3, r2]
 800b8a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b8a4:	0011      	movs	r1, r2
 800b8a6:	0018      	movs	r0, r3
 800b8a8:	f7f7 fc9a 	bl	80031e0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b8ac:	e003      	b.n	800b8b6 <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 800b8ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b8b0:	0018      	movs	r0, r3
 800b8b2:	f7ff fa6b 	bl	800ad8c <HAL_UART_RxCpltCallback>
}
 800b8b6:	46c0      	nop			@ (mov r8, r8)
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	b014      	add	sp, #80	@ 0x50
 800b8bc:	bd80      	pop	{r7, pc}
 800b8be:	46c0      	nop			@ (mov r8, r8)
 800b8c0:	fffffeff 	.word	0xfffffeff

0800b8c4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b084      	sub	sp, #16
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8d0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	2201      	movs	r2, #1
 800b8d6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b8dc:	2b01      	cmp	r3, #1
 800b8de:	d10a      	bne.n	800b8f6 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	225c      	movs	r2, #92	@ 0x5c
 800b8e4:	5a9b      	ldrh	r3, [r3, r2]
 800b8e6:	085b      	lsrs	r3, r3, #1
 800b8e8:	b29a      	uxth	r2, r3
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	0011      	movs	r1, r2
 800b8ee:	0018      	movs	r0, r3
 800b8f0:	f7f7 fc76 	bl	80031e0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b8f4:	e003      	b.n	800b8fe <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	0018      	movs	r0, r3
 800b8fa:	f7ff fa4f 	bl	800ad9c <HAL_UART_RxHalfCpltCallback>
}
 800b8fe:	46c0      	nop			@ (mov r8, r8)
 800b900:	46bd      	mov	sp, r7
 800b902:	b004      	add	sp, #16
 800b904:	bd80      	pop	{r7, pc}

0800b906 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b906:	b580      	push	{r7, lr}
 800b908:	b086      	sub	sp, #24
 800b90a:	af00      	add	r7, sp, #0
 800b90c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b912:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b914:	697b      	ldr	r3, [r7, #20]
 800b916:	2288      	movs	r2, #136	@ 0x88
 800b918:	589b      	ldr	r3, [r3, r2]
 800b91a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b91c:	697b      	ldr	r3, [r7, #20]
 800b91e:	228c      	movs	r2, #140	@ 0x8c
 800b920:	589b      	ldr	r3, [r3, r2]
 800b922:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b924:	697b      	ldr	r3, [r7, #20]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	689b      	ldr	r3, [r3, #8]
 800b92a:	2280      	movs	r2, #128	@ 0x80
 800b92c:	4013      	ands	r3, r2
 800b92e:	2b80      	cmp	r3, #128	@ 0x80
 800b930:	d10a      	bne.n	800b948 <UART_DMAError+0x42>
 800b932:	693b      	ldr	r3, [r7, #16]
 800b934:	2b21      	cmp	r3, #33	@ 0x21
 800b936:	d107      	bne.n	800b948 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b938:	697b      	ldr	r3, [r7, #20]
 800b93a:	2256      	movs	r2, #86	@ 0x56
 800b93c:	2100      	movs	r1, #0
 800b93e:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800b940:	697b      	ldr	r3, [r7, #20]
 800b942:	0018      	movs	r0, r3
 800b944:	f7ff fe24 	bl	800b590 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b948:	697b      	ldr	r3, [r7, #20]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	689b      	ldr	r3, [r3, #8]
 800b94e:	2240      	movs	r2, #64	@ 0x40
 800b950:	4013      	ands	r3, r2
 800b952:	2b40      	cmp	r3, #64	@ 0x40
 800b954:	d10a      	bne.n	800b96c <UART_DMAError+0x66>
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	2b22      	cmp	r3, #34	@ 0x22
 800b95a:	d107      	bne.n	800b96c <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b95c:	697b      	ldr	r3, [r7, #20]
 800b95e:	225e      	movs	r2, #94	@ 0x5e
 800b960:	2100      	movs	r1, #0
 800b962:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800b964:	697b      	ldr	r3, [r7, #20]
 800b966:	0018      	movs	r0, r3
 800b968:	f7ff fe52 	bl	800b610 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b96c:	697b      	ldr	r3, [r7, #20]
 800b96e:	2290      	movs	r2, #144	@ 0x90
 800b970:	589b      	ldr	r3, [r3, r2]
 800b972:	2210      	movs	r2, #16
 800b974:	431a      	orrs	r2, r3
 800b976:	697b      	ldr	r3, [r7, #20]
 800b978:	2190      	movs	r1, #144	@ 0x90
 800b97a:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b97c:	697b      	ldr	r3, [r7, #20]
 800b97e:	0018      	movs	r0, r3
 800b980:	f7f7 fce6 	bl	8003350 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b984:	46c0      	nop			@ (mov r8, r8)
 800b986:	46bd      	mov	sp, r7
 800b988:	b006      	add	sp, #24
 800b98a:	bd80      	pop	{r7, pc}

0800b98c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b084      	sub	sp, #16
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b998:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	225e      	movs	r2, #94	@ 0x5e
 800b99e:	2100      	movs	r1, #0
 800b9a0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	2256      	movs	r2, #86	@ 0x56
 800b9a6:	2100      	movs	r1, #0
 800b9a8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	0018      	movs	r0, r3
 800b9ae:	f7f7 fccf 	bl	8003350 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b9b2:	46c0      	nop			@ (mov r8, r8)
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	b004      	add	sp, #16
 800b9b8:	bd80      	pop	{r7, pc}

0800b9ba <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b9ba:	b580      	push	{r7, lr}
 800b9bc:	b086      	sub	sp, #24
 800b9be:	af00      	add	r7, sp, #0
 800b9c0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800b9c2:	f3ef 8310 	mrs	r3, PRIMASK
 800b9c6:	60bb      	str	r3, [r7, #8]
  return(result);
 800b9c8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b9ca:	617b      	str	r3, [r7, #20]
 800b9cc:	2301      	movs	r3, #1
 800b9ce:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	f383 8810 	msr	PRIMASK, r3
}
 800b9d6:	46c0      	nop			@ (mov r8, r8)
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	681a      	ldr	r2, [r3, #0]
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	2140      	movs	r1, #64	@ 0x40
 800b9e4:	438a      	bics	r2, r1
 800b9e6:	601a      	str	r2, [r3, #0]
 800b9e8:	697b      	ldr	r3, [r7, #20]
 800b9ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b9ec:	693b      	ldr	r3, [r7, #16]
 800b9ee:	f383 8810 	msr	PRIMASK, r3
}
 800b9f2:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2288      	movs	r2, #136	@ 0x88
 800b9f8:	2120      	movs	r1, #32
 800b9fa:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2200      	movs	r2, #0
 800ba00:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	0018      	movs	r0, r3
 800ba06:	f7f7 fc95 	bl	8003334 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ba0a:	46c0      	nop			@ (mov r8, r8)
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	b006      	add	sp, #24
 800ba10:	bd80      	pop	{r7, pc}
	...

0800ba14 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b086      	sub	sp, #24
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	60f8      	str	r0, [r7, #12]
 800ba1c:	60b9      	str	r1, [r7, #8]
 800ba1e:	607a      	str	r2, [r7, #4]
 800ba20:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d101      	bne.n	800ba2c <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 800ba28:	2301      	movs	r3, #1
 800ba2a:	e05d      	b.n	800bae8 <HAL_RS485Ex_Init+0xd4>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	2288      	movs	r2, #136	@ 0x88
 800ba30:	589b      	ldr	r3, [r3, r2]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d107      	bne.n	800ba46 <HAL_RS485Ex_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	2284      	movs	r2, #132	@ 0x84
 800ba3a:	2100      	movs	r1, #0
 800ba3c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	0018      	movs	r0, r3
 800ba42:	f7f8 fda9 	bl	8004598 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	2288      	movs	r2, #136	@ 0x88
 800ba4a:	2124      	movs	r1, #36	@ 0x24
 800ba4c:	5099      	str	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	681a      	ldr	r2, [r3, #0]
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	2101      	movs	r1, #1
 800ba5a:	438a      	bics	r2, r1
 800ba5c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d003      	beq.n	800ba6e <HAL_RS485Ex_Init+0x5a>
  {
    UART_AdvFeatureConfig(huart);
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	0018      	movs	r0, r3
 800ba6a:	f7ff fb1d 	bl	800b0a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	0018      	movs	r0, r3
 800ba72:	f7ff f99b 	bl	800adac <UART_SetConfig>
 800ba76:	0003      	movs	r3, r0
 800ba78:	2b01      	cmp	r3, #1
 800ba7a:	d101      	bne.n	800ba80 <HAL_RS485Ex_Init+0x6c>
  {
    return HAL_ERROR;
 800ba7c:	2301      	movs	r3, #1
 800ba7e:	e033      	b.n	800bae8 <HAL_RS485Ex_Init+0xd4>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	689a      	ldr	r2, [r3, #8]
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	2180      	movs	r1, #128	@ 0x80
 800ba8c:	01c9      	lsls	r1, r1, #7
 800ba8e:	430a      	orrs	r2, r1
 800ba90:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	689b      	ldr	r3, [r3, #8]
 800ba98:	4a15      	ldr	r2, [pc, #84]	@ (800baf0 <HAL_RS485Ex_Init+0xdc>)
 800ba9a:	4013      	ands	r3, r2
 800ba9c:	0019      	movs	r1, r3
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	68ba      	ldr	r2, [r7, #8]
 800baa4:	430a      	orrs	r2, r1
 800baa6:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	055b      	lsls	r3, r3, #21
 800baac:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800baae:	683b      	ldr	r3, [r7, #0]
 800bab0:	041b      	lsls	r3, r3, #16
 800bab2:	697a      	ldr	r2, [r7, #20]
 800bab4:	4313      	orrs	r3, r2
 800bab6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	4a0d      	ldr	r2, [pc, #52]	@ (800baf4 <HAL_RS485Ex_Init+0xe0>)
 800bac0:	4013      	ands	r3, r2
 800bac2:	0019      	movs	r1, r3
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	697a      	ldr	r2, [r7, #20]
 800baca:	430a      	orrs	r2, r1
 800bacc:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	681a      	ldr	r2, [r3, #0]
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	2101      	movs	r1, #1
 800bada:	430a      	orrs	r2, r1
 800badc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	0018      	movs	r0, r3
 800bae2:	f7ff fb95 	bl	800b210 <UART_CheckIdleState>
 800bae6:	0003      	movs	r3, r0
}
 800bae8:	0018      	movs	r0, r3
 800baea:	46bd      	mov	sp, r7
 800baec:	b006      	add	sp, #24
 800baee:	bd80      	pop	{r7, pc}
 800baf0:	ffff7fff 	.word	0xffff7fff
 800baf4:	fc00ffff 	.word	0xfc00ffff

0800baf8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b082      	sub	sp, #8
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bb00:	46c0      	nop			@ (mov r8, r8)
 800bb02:	46bd      	mov	sp, r7
 800bb04:	b002      	add	sp, #8
 800bb06:	bd80      	pop	{r7, pc}

0800bb08 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b082      	sub	sp, #8
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800bb10:	46c0      	nop			@ (mov r8, r8)
 800bb12:	46bd      	mov	sp, r7
 800bb14:	b002      	add	sp, #8
 800bb16:	bd80      	pop	{r7, pc}

0800bb18 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b082      	sub	sp, #8
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800bb20:	46c0      	nop			@ (mov r8, r8)
 800bb22:	46bd      	mov	sp, r7
 800bb24:	b002      	add	sp, #8
 800bb26:	bd80      	pop	{r7, pc}

0800bb28 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b084      	sub	sp, #16
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2284      	movs	r2, #132	@ 0x84
 800bb34:	5c9b      	ldrb	r3, [r3, r2]
 800bb36:	2b01      	cmp	r3, #1
 800bb38:	d101      	bne.n	800bb3e <HAL_UARTEx_DisableFifoMode+0x16>
 800bb3a:	2302      	movs	r3, #2
 800bb3c:	e027      	b.n	800bb8e <HAL_UARTEx_DisableFifoMode+0x66>
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2284      	movs	r2, #132	@ 0x84
 800bb42:	2101      	movs	r1, #1
 800bb44:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2288      	movs	r2, #136	@ 0x88
 800bb4a:	2124      	movs	r1, #36	@ 0x24
 800bb4c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	681a      	ldr	r2, [r3, #0]
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	2101      	movs	r1, #1
 800bb62:	438a      	bics	r2, r1
 800bb64:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	4a0b      	ldr	r2, [pc, #44]	@ (800bb98 <HAL_UARTEx_DisableFifoMode+0x70>)
 800bb6a:	4013      	ands	r3, r2
 800bb6c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	2200      	movs	r2, #0
 800bb72:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	68fa      	ldr	r2, [r7, #12]
 800bb7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	2288      	movs	r2, #136	@ 0x88
 800bb80:	2120      	movs	r1, #32
 800bb82:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2284      	movs	r2, #132	@ 0x84
 800bb88:	2100      	movs	r1, #0
 800bb8a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bb8c:	2300      	movs	r3, #0
}
 800bb8e:	0018      	movs	r0, r3
 800bb90:	46bd      	mov	sp, r7
 800bb92:	b004      	add	sp, #16
 800bb94:	bd80      	pop	{r7, pc}
 800bb96:	46c0      	nop			@ (mov r8, r8)
 800bb98:	dfffffff 	.word	0xdfffffff

0800bb9c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b084      	sub	sp, #16
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
 800bba4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	2284      	movs	r2, #132	@ 0x84
 800bbaa:	5c9b      	ldrb	r3, [r3, r2]
 800bbac:	2b01      	cmp	r3, #1
 800bbae:	d101      	bne.n	800bbb4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bbb0:	2302      	movs	r3, #2
 800bbb2:	e02e      	b.n	800bc12 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2284      	movs	r2, #132	@ 0x84
 800bbb8:	2101      	movs	r1, #1
 800bbba:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2288      	movs	r2, #136	@ 0x88
 800bbc0:	2124      	movs	r1, #36	@ 0x24
 800bbc2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	681a      	ldr	r2, [r3, #0]
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	2101      	movs	r1, #1
 800bbd8:	438a      	bics	r2, r1
 800bbda:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	689b      	ldr	r3, [r3, #8]
 800bbe2:	00db      	lsls	r3, r3, #3
 800bbe4:	08d9      	lsrs	r1, r3, #3
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	683a      	ldr	r2, [r7, #0]
 800bbec:	430a      	orrs	r2, r1
 800bbee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	0018      	movs	r0, r3
 800bbf4:	f000 f8bc 	bl	800bd70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	68fa      	ldr	r2, [r7, #12]
 800bbfe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2288      	movs	r2, #136	@ 0x88
 800bc04:	2120      	movs	r1, #32
 800bc06:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2284      	movs	r2, #132	@ 0x84
 800bc0c:	2100      	movs	r1, #0
 800bc0e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bc10:	2300      	movs	r3, #0
}
 800bc12:	0018      	movs	r0, r3
 800bc14:	46bd      	mov	sp, r7
 800bc16:	b004      	add	sp, #16
 800bc18:	bd80      	pop	{r7, pc}
	...

0800bc1c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b084      	sub	sp, #16
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
 800bc24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	2284      	movs	r2, #132	@ 0x84
 800bc2a:	5c9b      	ldrb	r3, [r3, r2]
 800bc2c:	2b01      	cmp	r3, #1
 800bc2e:	d101      	bne.n	800bc34 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bc30:	2302      	movs	r3, #2
 800bc32:	e02f      	b.n	800bc94 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2284      	movs	r2, #132	@ 0x84
 800bc38:	2101      	movs	r1, #1
 800bc3a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2288      	movs	r2, #136	@ 0x88
 800bc40:	2124      	movs	r1, #36	@ 0x24
 800bc42:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	681a      	ldr	r2, [r3, #0]
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	2101      	movs	r1, #1
 800bc58:	438a      	bics	r2, r1
 800bc5a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	689b      	ldr	r3, [r3, #8]
 800bc62:	4a0e      	ldr	r2, [pc, #56]	@ (800bc9c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800bc64:	4013      	ands	r3, r2
 800bc66:	0019      	movs	r1, r3
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	683a      	ldr	r2, [r7, #0]
 800bc6e:	430a      	orrs	r2, r1
 800bc70:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	0018      	movs	r0, r3
 800bc76:	f000 f87b 	bl	800bd70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	68fa      	ldr	r2, [r7, #12]
 800bc80:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	2288      	movs	r2, #136	@ 0x88
 800bc86:	2120      	movs	r1, #32
 800bc88:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	2284      	movs	r2, #132	@ 0x84
 800bc8e:	2100      	movs	r1, #0
 800bc90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bc92:	2300      	movs	r3, #0
}
 800bc94:	0018      	movs	r0, r3
 800bc96:	46bd      	mov	sp, r7
 800bc98:	b004      	add	sp, #16
 800bc9a:	bd80      	pop	{r7, pc}
 800bc9c:	f1ffffff 	.word	0xf1ffffff

0800bca0 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bca0:	b5b0      	push	{r4, r5, r7, lr}
 800bca2:	b08a      	sub	sp, #40	@ 0x28
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	60f8      	str	r0, [r7, #12]
 800bca8:	60b9      	str	r1, [r7, #8]
 800bcaa:	1dbb      	adds	r3, r7, #6
 800bcac:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	228c      	movs	r2, #140	@ 0x8c
 800bcb2:	589b      	ldr	r3, [r3, r2]
 800bcb4:	2b20      	cmp	r3, #32
 800bcb6:	d156      	bne.n	800bd66 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 800bcb8:	68bb      	ldr	r3, [r7, #8]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d003      	beq.n	800bcc6 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800bcbe:	1dbb      	adds	r3, r7, #6
 800bcc0:	881b      	ldrh	r3, [r3, #0]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d101      	bne.n	800bcca <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	e04e      	b.n	800bd68 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	689a      	ldr	r2, [r3, #8]
 800bcce:	2380      	movs	r3, #128	@ 0x80
 800bcd0:	015b      	lsls	r3, r3, #5
 800bcd2:	429a      	cmp	r2, r3
 800bcd4:	d109      	bne.n	800bcea <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	691b      	ldr	r3, [r3, #16]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d105      	bne.n	800bcea <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800bcde:	68bb      	ldr	r3, [r7, #8]
 800bce0:	2201      	movs	r2, #1
 800bce2:	4013      	ands	r3, r2
 800bce4:	d001      	beq.n	800bcea <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 800bce6:	2301      	movs	r3, #1
 800bce8:	e03e      	b.n	800bd68 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	2201      	movs	r2, #1
 800bcee:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800bcf6:	2527      	movs	r5, #39	@ 0x27
 800bcf8:	197c      	adds	r4, r7, r5
 800bcfa:	1dbb      	adds	r3, r7, #6
 800bcfc:	881a      	ldrh	r2, [r3, #0]
 800bcfe:	68b9      	ldr	r1, [r7, #8]
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	0018      	movs	r0, r3
 800bd04:	f7ff fb9e 	bl	800b444 <UART_Start_Receive_DMA>
 800bd08:	0003      	movs	r3, r0
 800bd0a:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800bd0c:	197b      	adds	r3, r7, r5
 800bd0e:	781b      	ldrb	r3, [r3, #0]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d124      	bne.n	800bd5e <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bd18:	2b01      	cmp	r3, #1
 800bd1a:	d11c      	bne.n	800bd56 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	2210      	movs	r2, #16
 800bd22:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800bd24:	f3ef 8310 	mrs	r3, PRIMASK
 800bd28:	617b      	str	r3, [r7, #20]
  return(result);
 800bd2a:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd2c:	623b      	str	r3, [r7, #32]
 800bd2e:	2301      	movs	r3, #1
 800bd30:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bd32:	69bb      	ldr	r3, [r7, #24]
 800bd34:	f383 8810 	msr	PRIMASK, r3
}
 800bd38:	46c0      	nop			@ (mov r8, r8)
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	681a      	ldr	r2, [r3, #0]
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	2110      	movs	r1, #16
 800bd46:	430a      	orrs	r2, r1
 800bd48:	601a      	str	r2, [r3, #0]
 800bd4a:	6a3b      	ldr	r3, [r7, #32]
 800bd4c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bd4e:	69fb      	ldr	r3, [r7, #28]
 800bd50:	f383 8810 	msr	PRIMASK, r3
}
 800bd54:	e003      	b.n	800bd5e <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800bd56:	2327      	movs	r3, #39	@ 0x27
 800bd58:	18fb      	adds	r3, r7, r3
 800bd5a:	2201      	movs	r2, #1
 800bd5c:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 800bd5e:	2327      	movs	r3, #39	@ 0x27
 800bd60:	18fb      	adds	r3, r7, r3
 800bd62:	781b      	ldrb	r3, [r3, #0]
 800bd64:	e000      	b.n	800bd68 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 800bd66:	2302      	movs	r3, #2
  }
}
 800bd68:	0018      	movs	r0, r3
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	b00a      	add	sp, #40	@ 0x28
 800bd6e:	bdb0      	pop	{r4, r5, r7, pc}

0800bd70 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bd70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd72:	b085      	sub	sp, #20
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d108      	bne.n	800bd92 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	226a      	movs	r2, #106	@ 0x6a
 800bd84:	2101      	movs	r1, #1
 800bd86:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2268      	movs	r2, #104	@ 0x68
 800bd8c:	2101      	movs	r1, #1
 800bd8e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bd90:	e043      	b.n	800be1a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bd92:	260f      	movs	r6, #15
 800bd94:	19bb      	adds	r3, r7, r6
 800bd96:	2208      	movs	r2, #8
 800bd98:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bd9a:	200e      	movs	r0, #14
 800bd9c:	183b      	adds	r3, r7, r0
 800bd9e:	2208      	movs	r2, #8
 800bda0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	689b      	ldr	r3, [r3, #8]
 800bda8:	0e5b      	lsrs	r3, r3, #25
 800bdaa:	b2da      	uxtb	r2, r3
 800bdac:	240d      	movs	r4, #13
 800bdae:	193b      	adds	r3, r7, r4
 800bdb0:	2107      	movs	r1, #7
 800bdb2:	400a      	ands	r2, r1
 800bdb4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	689b      	ldr	r3, [r3, #8]
 800bdbc:	0f5b      	lsrs	r3, r3, #29
 800bdbe:	b2da      	uxtb	r2, r3
 800bdc0:	250c      	movs	r5, #12
 800bdc2:	197b      	adds	r3, r7, r5
 800bdc4:	2107      	movs	r1, #7
 800bdc6:	400a      	ands	r2, r1
 800bdc8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bdca:	183b      	adds	r3, r7, r0
 800bdcc:	781b      	ldrb	r3, [r3, #0]
 800bdce:	197a      	adds	r2, r7, r5
 800bdd0:	7812      	ldrb	r2, [r2, #0]
 800bdd2:	4914      	ldr	r1, [pc, #80]	@ (800be24 <UARTEx_SetNbDataToProcess+0xb4>)
 800bdd4:	5c8a      	ldrb	r2, [r1, r2]
 800bdd6:	435a      	muls	r2, r3
 800bdd8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800bdda:	197b      	adds	r3, r7, r5
 800bddc:	781b      	ldrb	r3, [r3, #0]
 800bdde:	4a12      	ldr	r2, [pc, #72]	@ (800be28 <UARTEx_SetNbDataToProcess+0xb8>)
 800bde0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bde2:	0019      	movs	r1, r3
 800bde4:	f7f4 fa1a 	bl	800021c <__divsi3>
 800bde8:	0003      	movs	r3, r0
 800bdea:	b299      	uxth	r1, r3
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	226a      	movs	r2, #106	@ 0x6a
 800bdf0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bdf2:	19bb      	adds	r3, r7, r6
 800bdf4:	781b      	ldrb	r3, [r3, #0]
 800bdf6:	193a      	adds	r2, r7, r4
 800bdf8:	7812      	ldrb	r2, [r2, #0]
 800bdfa:	490a      	ldr	r1, [pc, #40]	@ (800be24 <UARTEx_SetNbDataToProcess+0xb4>)
 800bdfc:	5c8a      	ldrb	r2, [r1, r2]
 800bdfe:	435a      	muls	r2, r3
 800be00:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800be02:	193b      	adds	r3, r7, r4
 800be04:	781b      	ldrb	r3, [r3, #0]
 800be06:	4a08      	ldr	r2, [pc, #32]	@ (800be28 <UARTEx_SetNbDataToProcess+0xb8>)
 800be08:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800be0a:	0019      	movs	r1, r3
 800be0c:	f7f4 fa06 	bl	800021c <__divsi3>
 800be10:	0003      	movs	r3, r0
 800be12:	b299      	uxth	r1, r3
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2268      	movs	r2, #104	@ 0x68
 800be18:	5299      	strh	r1, [r3, r2]
}
 800be1a:	46c0      	nop			@ (mov r8, r8)
 800be1c:	46bd      	mov	sp, r7
 800be1e:	b005      	add	sp, #20
 800be20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be22:	46c0      	nop			@ (mov r8, r8)
 800be24:	0800c678 	.word	0x0800c678
 800be28:	0800c680 	.word	0x0800c680

0800be2c <LL_ADC_REG_GetSequencerConfigurable>:
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b082      	sub	sp, #8
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_CHSELRMOD));
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	68da      	ldr	r2, [r3, #12]
 800be38:	2380      	movs	r3, #128	@ 0x80
 800be3a:	039b      	lsls	r3, r3, #14
 800be3c:	4013      	ands	r3, r2
}
 800be3e:	0018      	movs	r0, r3
 800be40:	46bd      	mov	sp, r7
 800be42:	b002      	add	sp, #8
 800be44:	bd80      	pop	{r7, pc}

0800be46 <LL_ADC_REG_SetSequencerLength>:
{
 800be46:	b580      	push	{r7, lr}
 800be48:	b082      	sub	sp, #8
 800be4a:	af00      	add	r7, sp, #0
 800be4c:	6078      	str	r0, [r7, #4]
 800be4e:	6039      	str	r1, [r7, #0]
  SET_BIT(ADCx->CHSELR, SequencerNbRanks);
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800be54:	683b      	ldr	r3, [r7, #0]
 800be56:	431a      	orrs	r2, r3
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800be5c:	46c0      	nop			@ (mov r8, r8)
 800be5e:	46bd      	mov	sp, r7
 800be60:	b002      	add	sp, #8
 800be62:	bd80      	pop	{r7, pc}

0800be64 <LL_ADC_IsEnabled>:
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b082      	sub	sp, #8
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	689b      	ldr	r3, [r3, #8]
 800be70:	2201      	movs	r2, #1
 800be72:	4013      	ands	r3, r2
 800be74:	2b01      	cmp	r3, #1
 800be76:	d101      	bne.n	800be7c <LL_ADC_IsEnabled+0x18>
 800be78:	2301      	movs	r3, #1
 800be7a:	e000      	b.n	800be7e <LL_ADC_IsEnabled+0x1a>
 800be7c:	2300      	movs	r3, #0
}
 800be7e:	0018      	movs	r0, r3
 800be80:	46bd      	mov	sp, r7
 800be82:	b002      	add	sp, #8
 800be84:	bd80      	pop	{r7, pc}
	...

0800be88 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b084      	sub	sp, #16
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
 800be90:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800be92:	230f      	movs	r3, #15
 800be94:	18fb      	adds	r3, r7, r3
 800be96:	2200      	movs	r2, #0
 800be98:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	0018      	movs	r0, r3
 800be9e:	f7ff ffe1 	bl	800be64 <LL_ADC_IsEnabled>
 800bea2:	1e03      	subs	r3, r0, #0
 800bea4:	d118      	bne.n	800bed8 <LL_ADC_Init+0x50>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR1,
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	68db      	ldr	r3, [r3, #12]
 800beaa:	4a11      	ldr	r2, [pc, #68]	@ (800bef0 <LL_ADC_Init+0x68>)
 800beac:	401a      	ands	r2, r3
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	6859      	ldr	r1, [r3, #4]
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	689b      	ldr	r3, [r3, #8]
 800beb6:	4319      	orrs	r1, r3
 800beb8:	683b      	ldr	r3, [r7, #0]
 800beba:	68db      	ldr	r3, [r3, #12]
 800bebc:	430b      	orrs	r3, r1
 800bebe:	431a      	orrs	r2, r3
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	60da      	str	r2, [r3, #12]
               ADC_InitStruct->Resolution
               | ADC_InitStruct->DataAlignment
               | ADC_InitStruct->LowPowerMode
              );

    MODIFY_REG(ADCx->CFGR2,
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	691b      	ldr	r3, [r3, #16]
 800bec8:	009b      	lsls	r3, r3, #2
 800beca:	089a      	lsrs	r2, r3, #2
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	431a      	orrs	r2, r3
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	611a      	str	r2, [r3, #16]
 800bed6:	e003      	b.n	800bee0 <LL_ADC_Init+0x58>
              );
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800bed8:	230f      	movs	r3, #15
 800beda:	18fb      	adds	r3, r7, r3
 800bedc:	2201      	movs	r2, #1
 800bede:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800bee0:	230f      	movs	r3, #15
 800bee2:	18fb      	adds	r3, r7, r3
 800bee4:	781b      	ldrb	r3, [r3, #0]
}
 800bee6:	0018      	movs	r0, r3
 800bee8:	46bd      	mov	sp, r7
 800beea:	b004      	add	sp, #16
 800beec:	bd80      	pop	{r7, pc}
 800beee:	46c0      	nop			@ (mov r8, r8)
 800bef0:	ffff3fc7 	.word	0xffff3fc7

0800bef4 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b084      	sub	sp, #16
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
 800befc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800befe:	230f      	movs	r3, #15
 800bf00:	18fb      	adds	r3, r7, r3
 800bf02:	2200      	movs	r2, #0
 800bf04:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_ADC_REG_TRIG_SOURCE(ADC_REG_InitStruct->TriggerSource));
  assert_param(IS_LL_ADC_REG_CONTINUOUS_MODE(ADC_REG_InitStruct->ContinuousMode));
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));

  if (LL_ADC_REG_GetSequencerConfigurable(ADCx) != LL_ADC_REG_SEQ_FIXED)
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	0018      	movs	r0, r3
 800bf0a:	f7ff ff8f 	bl	800be2c <LL_ADC_REG_GetSequencerConfigurable>
  {
    assert_param(IS_LL_ADC_REG_SEQ_SCAN_LENGTH(ADC_REG_InitStruct->SequencerLength));
  }

  if ((LL_ADC_REG_GetSequencerConfigurable(ADCx) == LL_ADC_REG_SEQ_FIXED)
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	0018      	movs	r0, r3
 800bf12:	f7ff ff8b 	bl	800be2c <LL_ADC_REG_GetSequencerConfigurable>
                 || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  }

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	0018      	movs	r0, r3
 800bf1a:	f7ff ffa3 	bl	800be64 <LL_ADC_IsEnabled>
 800bf1e:	1e03      	subs	r3, r0, #0
 800bf20:	d13f      	bne.n	800bfa2 <LL_ADC_REG_Init+0xae>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by    */
    /*       setting of trigger source to SW start.                           */
    if ((LL_ADC_REG_GetSequencerConfigurable(ADCx) == LL_ADC_REG_SEQ_FIXED)
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	0018      	movs	r0, r3
 800bf26:	f7ff ff81 	bl	800be2c <LL_ADC_REG_GetSequencerConfigurable>
 800bf2a:	1e03      	subs	r3, r0, #0
 800bf2c:	d003      	beq.n	800bf36 <LL_ADC_REG_Init+0x42>
        || (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	685b      	ldr	r3, [r3, #4]
 800bf32:	2bf0      	cmp	r3, #240	@ 0xf0
 800bf34:	d015      	beq.n	800bf62 <LL_ADC_REG_Init+0x6e>
       )
    {
      /* Case of sequencer mode fixed
         or sequencer length >= 2 ranks with sequencer mode fully configurable:
         discontinuous mode configured */
      MODIFY_REG(ADCx->CFGR1,
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	68db      	ldr	r3, [r3, #12]
 800bf3a:	4a1f      	ldr	r2, [pc, #124]	@ (800bfb8 <LL_ADC_REG_Init+0xc4>)
 800bf3c:	401a      	ands	r2, r3
 800bf3e:	683b      	ldr	r3, [r7, #0]
 800bf40:	6819      	ldr	r1, [r3, #0]
 800bf42:	683b      	ldr	r3, [r7, #0]
 800bf44:	689b      	ldr	r3, [r3, #8]
 800bf46:	4319      	orrs	r1, r3
 800bf48:	683b      	ldr	r3, [r7, #0]
 800bf4a:	68db      	ldr	r3, [r3, #12]
 800bf4c:	4319      	orrs	r1, r3
 800bf4e:	683b      	ldr	r3, [r7, #0]
 800bf50:	691b      	ldr	r3, [r3, #16]
 800bf52:	4319      	orrs	r1, r3
 800bf54:	683b      	ldr	r3, [r7, #0]
 800bf56:	695b      	ldr	r3, [r3, #20]
 800bf58:	430b      	orrs	r3, r1
 800bf5a:	431a      	orrs	r2, r3
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	60da      	str	r2, [r3, #12]
 800bf60:	e011      	b.n	800bf86 <LL_ADC_REG_Init+0x92>
    else
    {
      /* Case of sequencer mode fully configurable
         and sequencer length 1 rank (sequencer disabled):
         discontinuous mode discarded (fixed to disable) */
      MODIFY_REG(ADCx->CFGR1,
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	68db      	ldr	r3, [r3, #12]
 800bf66:	4a14      	ldr	r2, [pc, #80]	@ (800bfb8 <LL_ADC_REG_Init+0xc4>)
 800bf68:	401a      	ands	r2, r3
 800bf6a:	683b      	ldr	r3, [r7, #0]
 800bf6c:	6819      	ldr	r1, [r3, #0]
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	68db      	ldr	r3, [r3, #12]
 800bf72:	4319      	orrs	r1, r3
 800bf74:	683b      	ldr	r3, [r7, #0]
 800bf76:	691b      	ldr	r3, [r3, #16]
 800bf78:	4319      	orrs	r1, r3
 800bf7a:	683b      	ldr	r3, [r7, #0]
 800bf7c:	695b      	ldr	r3, [r3, #20]
 800bf7e:	430b      	orrs	r3, r1
 800bf80:	431a      	orrs	r2, r3
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	60da      	str	r2, [r3, #12]
                 | ADC_REG_InitStruct->Overrun
                );
    }

    /* Set ADC group regular sequencer length */
    if (LL_ADC_REG_GetSequencerConfigurable(ADCx) != LL_ADC_REG_SEQ_FIXED)
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	0018      	movs	r0, r3
 800bf8a:	f7ff ff4f 	bl	800be2c <LL_ADC_REG_GetSequencerConfigurable>
 800bf8e:	1e03      	subs	r3, r0, #0
 800bf90:	d00b      	beq.n	800bfaa <LL_ADC_REG_Init+0xb6>
    {
      LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 800bf92:	683b      	ldr	r3, [r7, #0]
 800bf94:	685a      	ldr	r2, [r3, #4]
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	0011      	movs	r1, r2
 800bf9a:	0018      	movs	r0, r3
 800bf9c:	f7ff ff53 	bl	800be46 <LL_ADC_REG_SetSequencerLength>
 800bfa0:	e003      	b.n	800bfaa <LL_ADC_REG_Init+0xb6>
    }
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800bfa2:	230f      	movs	r3, #15
 800bfa4:	18fb      	adds	r3, r7, r3
 800bfa6:	2201      	movs	r2, #1
 800bfa8:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800bfaa:	230f      	movs	r3, #15
 800bfac:	18fb      	adds	r3, r7, r3
 800bfae:	781b      	ldrb	r3, [r3, #0]
}
 800bfb0:	0018      	movs	r0, r3
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	b004      	add	sp, #16
 800bfb6:	bd80      	pop	{r7, pc}
 800bfb8:	fffec23c 	.word	0xfffec23c

0800bfbc <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b084      	sub	sp, #16
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	60f8      	str	r0, [r7, #12]
 800bfc4:	60b9      	str	r1, [r7, #8]
 800bfc6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	6819      	ldr	r1, [r3, #0]
 800bfcc:	68bb      	ldr	r3, [r7, #8]
 800bfce:	435b      	muls	r3, r3
 800bfd0:	001a      	movs	r2, r3
 800bfd2:	0013      	movs	r3, r2
 800bfd4:	005b      	lsls	r3, r3, #1
 800bfd6:	189b      	adds	r3, r3, r2
 800bfd8:	43db      	mvns	r3, r3
 800bfda:	400b      	ands	r3, r1
 800bfdc:	001a      	movs	r2, r3
 800bfde:	68bb      	ldr	r3, [r7, #8]
 800bfe0:	435b      	muls	r3, r3
 800bfe2:	6879      	ldr	r1, [r7, #4]
 800bfe4:	434b      	muls	r3, r1
 800bfe6:	431a      	orrs	r2, r3
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	601a      	str	r2, [r3, #0]
}
 800bfec:	46c0      	nop			@ (mov r8, r8)
 800bfee:	46bd      	mov	sp, r7
 800bff0:	b004      	add	sp, #16
 800bff2:	bd80      	pop	{r7, pc}

0800bff4 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b084      	sub	sp, #16
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	60f8      	str	r0, [r7, #12]
 800bffc:	60b9      	str	r1, [r7, #8]
 800bffe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	685b      	ldr	r3, [r3, #4]
 800c004:	68ba      	ldr	r2, [r7, #8]
 800c006:	43d2      	mvns	r2, r2
 800c008:	401a      	ands	r2, r3
 800c00a:	68bb      	ldr	r3, [r7, #8]
 800c00c:	6879      	ldr	r1, [r7, #4]
 800c00e:	434b      	muls	r3, r1
 800c010:	431a      	orrs	r2, r3
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	605a      	str	r2, [r3, #4]
}
 800c016:	46c0      	nop			@ (mov r8, r8)
 800c018:	46bd      	mov	sp, r7
 800c01a:	b004      	add	sp, #16
 800c01c:	bd80      	pop	{r7, pc}

0800c01e <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800c01e:	b580      	push	{r7, lr}
 800c020:	b084      	sub	sp, #16
 800c022:	af00      	add	r7, sp, #0
 800c024:	60f8      	str	r0, [r7, #12]
 800c026:	60b9      	str	r1, [r7, #8]
 800c028:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	6899      	ldr	r1, [r3, #8]
 800c02e:	68bb      	ldr	r3, [r7, #8]
 800c030:	435b      	muls	r3, r3
 800c032:	001a      	movs	r2, r3
 800c034:	0013      	movs	r3, r2
 800c036:	005b      	lsls	r3, r3, #1
 800c038:	189b      	adds	r3, r3, r2
 800c03a:	43db      	mvns	r3, r3
 800c03c:	400b      	ands	r3, r1
 800c03e:	001a      	movs	r2, r3
 800c040:	68bb      	ldr	r3, [r7, #8]
 800c042:	435b      	muls	r3, r3
 800c044:	6879      	ldr	r1, [r7, #4]
 800c046:	434b      	muls	r3, r1
 800c048:	431a      	orrs	r2, r3
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	609a      	str	r2, [r3, #8]
}
 800c04e:	46c0      	nop			@ (mov r8, r8)
 800c050:	46bd      	mov	sp, r7
 800c052:	b004      	add	sp, #16
 800c054:	bd80      	pop	{r7, pc}

0800c056 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800c056:	b580      	push	{r7, lr}
 800c058:	b084      	sub	sp, #16
 800c05a:	af00      	add	r7, sp, #0
 800c05c:	60f8      	str	r0, [r7, #12]
 800c05e:	60b9      	str	r1, [r7, #8]
 800c060:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	68d9      	ldr	r1, [r3, #12]
 800c066:	68bb      	ldr	r3, [r7, #8]
 800c068:	435b      	muls	r3, r3
 800c06a:	001a      	movs	r2, r3
 800c06c:	0013      	movs	r3, r2
 800c06e:	005b      	lsls	r3, r3, #1
 800c070:	189b      	adds	r3, r3, r2
 800c072:	43db      	mvns	r3, r3
 800c074:	400b      	ands	r3, r1
 800c076:	001a      	movs	r2, r3
 800c078:	68bb      	ldr	r3, [r7, #8]
 800c07a:	435b      	muls	r3, r3
 800c07c:	6879      	ldr	r1, [r7, #4]
 800c07e:	434b      	muls	r3, r1
 800c080:	431a      	orrs	r2, r3
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	60da      	str	r2, [r3, #12]
}
 800c086:	46c0      	nop			@ (mov r8, r8)
 800c088:	46bd      	mov	sp, r7
 800c08a:	b004      	add	sp, #16
 800c08c:	bd80      	pop	{r7, pc}

0800c08e <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800c08e:	b580      	push	{r7, lr}
 800c090:	b084      	sub	sp, #16
 800c092:	af00      	add	r7, sp, #0
 800c094:	60f8      	str	r0, [r7, #12]
 800c096:	60b9      	str	r1, [r7, #8]
 800c098:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	6a19      	ldr	r1, [r3, #32]
 800c09e:	68bb      	ldr	r3, [r7, #8]
 800c0a0:	435b      	muls	r3, r3
 800c0a2:	68ba      	ldr	r2, [r7, #8]
 800c0a4:	4353      	muls	r3, r2
 800c0a6:	68ba      	ldr	r2, [r7, #8]
 800c0a8:	435a      	muls	r2, r3
 800c0aa:	0013      	movs	r3, r2
 800c0ac:	011b      	lsls	r3, r3, #4
 800c0ae:	1a9b      	subs	r3, r3, r2
 800c0b0:	43db      	mvns	r3, r3
 800c0b2:	400b      	ands	r3, r1
 800c0b4:	001a      	movs	r2, r3
 800c0b6:	68bb      	ldr	r3, [r7, #8]
 800c0b8:	435b      	muls	r3, r3
 800c0ba:	68b9      	ldr	r1, [r7, #8]
 800c0bc:	434b      	muls	r3, r1
 800c0be:	68b9      	ldr	r1, [r7, #8]
 800c0c0:	434b      	muls	r3, r1
 800c0c2:	6879      	ldr	r1, [r7, #4]
 800c0c4:	434b      	muls	r3, r1
 800c0c6:	431a      	orrs	r2, r3
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	621a      	str	r2, [r3, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 800c0cc:	46c0      	nop			@ (mov r8, r8)
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	b004      	add	sp, #16
 800c0d2:	bd80      	pop	{r7, pc}

0800c0d4 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b084      	sub	sp, #16
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	60f8      	str	r0, [r7, #12]
 800c0dc:	60b9      	str	r1, [r7, #8]
 800c0de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800c0e4:	68bb      	ldr	r3, [r7, #8]
 800c0e6:	0a1b      	lsrs	r3, r3, #8
 800c0e8:	68ba      	ldr	r2, [r7, #8]
 800c0ea:	0a12      	lsrs	r2, r2, #8
 800c0ec:	4353      	muls	r3, r2
 800c0ee:	68ba      	ldr	r2, [r7, #8]
 800c0f0:	0a12      	lsrs	r2, r2, #8
 800c0f2:	4353      	muls	r3, r2
 800c0f4:	68ba      	ldr	r2, [r7, #8]
 800c0f6:	0a12      	lsrs	r2, r2, #8
 800c0f8:	435a      	muls	r2, r3
 800c0fa:	0013      	movs	r3, r2
 800c0fc:	011b      	lsls	r3, r3, #4
 800c0fe:	1a9b      	subs	r3, r3, r2
 800c100:	43db      	mvns	r3, r3
 800c102:	400b      	ands	r3, r1
 800c104:	001a      	movs	r2, r3
 800c106:	68bb      	ldr	r3, [r7, #8]
 800c108:	0a1b      	lsrs	r3, r3, #8
 800c10a:	68b9      	ldr	r1, [r7, #8]
 800c10c:	0a09      	lsrs	r1, r1, #8
 800c10e:	434b      	muls	r3, r1
 800c110:	68b9      	ldr	r1, [r7, #8]
 800c112:	0a09      	lsrs	r1, r1, #8
 800c114:	434b      	muls	r3, r1
 800c116:	68b9      	ldr	r1, [r7, #8]
 800c118:	0a09      	lsrs	r1, r1, #8
 800c11a:	434b      	muls	r3, r1
 800c11c:	6879      	ldr	r1, [r7, #4]
 800c11e:	434b      	muls	r3, r1
 800c120:	431a      	orrs	r2, r3
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	625a      	str	r2, [r3, #36]	@ 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 800c126:	46c0      	nop			@ (mov r8, r8)
 800c128:	46bd      	mov	sp, r7
 800c12a:	b004      	add	sp, #16
 800c12c:	bd80      	pop	{r7, pc}

0800c12e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800c12e:	b580      	push	{r7, lr}
 800c130:	b084      	sub	sp, #16
 800c132:	af00      	add	r7, sp, #0
 800c134:	6078      	str	r0, [r7, #4]
 800c136:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 800c138:	2300      	movs	r3, #0
 800c13a:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800c13c:	e047      	b.n	800c1ce <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	2101      	movs	r1, #1
 800c144:	68fa      	ldr	r2, [r7, #12]
 800c146:	4091      	lsls	r1, r2
 800c148:	000a      	movs	r2, r1
 800c14a:	4013      	ands	r3, r2
 800c14c:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 800c14e:	68bb      	ldr	r3, [r7, #8]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d039      	beq.n	800c1c8 <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	685b      	ldr	r3, [r3, #4]
 800c158:	2b01      	cmp	r3, #1
 800c15a:	d003      	beq.n	800c164 <LL_GPIO_Init+0x36>
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	685b      	ldr	r3, [r3, #4]
 800c160:	2b02      	cmp	r3, #2
 800c162:	d10d      	bne.n	800c180 <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800c164:	683b      	ldr	r3, [r7, #0]
 800c166:	689a      	ldr	r2, [r3, #8]
 800c168:	68b9      	ldr	r1, [r7, #8]
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	0018      	movs	r0, r3
 800c16e:	f7ff ff56 	bl	800c01e <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800c172:	683b      	ldr	r3, [r7, #0]
 800c174:	68da      	ldr	r2, [r3, #12]
 800c176:	68b9      	ldr	r1, [r7, #8]
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	0018      	movs	r0, r3
 800c17c:	f7ff ff3a 	bl	800bff4 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800c180:	683b      	ldr	r3, [r7, #0]
 800c182:	691a      	ldr	r2, [r3, #16]
 800c184:	68b9      	ldr	r1, [r7, #8]
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	0018      	movs	r0, r3
 800c18a:	f7ff ff64 	bl	800c056 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800c18e:	683b      	ldr	r3, [r7, #0]
 800c190:	685b      	ldr	r3, [r3, #4]
 800c192:	2b02      	cmp	r3, #2
 800c194:	d111      	bne.n	800c1ba <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800c196:	68bb      	ldr	r3, [r7, #8]
 800c198:	2bff      	cmp	r3, #255	@ 0xff
 800c19a:	d807      	bhi.n	800c1ac <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	695a      	ldr	r2, [r3, #20]
 800c1a0:	68b9      	ldr	r1, [r7, #8]
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	0018      	movs	r0, r3
 800c1a6:	f7ff ff72 	bl	800c08e <LL_GPIO_SetAFPin_0_7>
 800c1aa:	e006      	b.n	800c1ba <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	695a      	ldr	r2, [r3, #20]
 800c1b0:	68b9      	ldr	r1, [r7, #8]
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	0018      	movs	r0, r3
 800c1b6:	f7ff ff8d 	bl	800c0d4 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	685a      	ldr	r2, [r3, #4]
 800c1be:	68b9      	ldr	r1, [r7, #8]
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	0018      	movs	r0, r3
 800c1c4:	f7ff fefa 	bl	800bfbc <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	3301      	adds	r3, #1
 800c1cc:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800c1ce:	683b      	ldr	r3, [r7, #0]
 800c1d0:	681a      	ldr	r2, [r3, #0]
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	40da      	lsrs	r2, r3
 800c1d6:	1e13      	subs	r3, r2, #0
 800c1d8:	d1b1      	bne.n	800c13e <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 800c1da:	2300      	movs	r3, #0
}
 800c1dc:	0018      	movs	r0, r3
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	b004      	add	sp, #16
 800c1e2:	bd80      	pop	{r7, pc}

0800c1e4 <memset>:
 800c1e4:	0003      	movs	r3, r0
 800c1e6:	1882      	adds	r2, r0, r2
 800c1e8:	4293      	cmp	r3, r2
 800c1ea:	d100      	bne.n	800c1ee <memset+0xa>
 800c1ec:	4770      	bx	lr
 800c1ee:	7019      	strb	r1, [r3, #0]
 800c1f0:	3301      	adds	r3, #1
 800c1f2:	e7f9      	b.n	800c1e8 <memset+0x4>

0800c1f4 <__libc_init_array>:
 800c1f4:	b570      	push	{r4, r5, r6, lr}
 800c1f6:	2600      	movs	r6, #0
 800c1f8:	4c0c      	ldr	r4, [pc, #48]	@ (800c22c <__libc_init_array+0x38>)
 800c1fa:	4d0d      	ldr	r5, [pc, #52]	@ (800c230 <__libc_init_array+0x3c>)
 800c1fc:	1b64      	subs	r4, r4, r5
 800c1fe:	10a4      	asrs	r4, r4, #2
 800c200:	42a6      	cmp	r6, r4
 800c202:	d109      	bne.n	800c218 <__libc_init_array+0x24>
 800c204:	2600      	movs	r6, #0
 800c206:	f000 f823 	bl	800c250 <_init>
 800c20a:	4c0a      	ldr	r4, [pc, #40]	@ (800c234 <__libc_init_array+0x40>)
 800c20c:	4d0a      	ldr	r5, [pc, #40]	@ (800c238 <__libc_init_array+0x44>)
 800c20e:	1b64      	subs	r4, r4, r5
 800c210:	10a4      	asrs	r4, r4, #2
 800c212:	42a6      	cmp	r6, r4
 800c214:	d105      	bne.n	800c222 <__libc_init_array+0x2e>
 800c216:	bd70      	pop	{r4, r5, r6, pc}
 800c218:	00b3      	lsls	r3, r6, #2
 800c21a:	58eb      	ldr	r3, [r5, r3]
 800c21c:	4798      	blx	r3
 800c21e:	3601      	adds	r6, #1
 800c220:	e7ee      	b.n	800c200 <__libc_init_array+0xc>
 800c222:	00b3      	lsls	r3, r6, #2
 800c224:	58eb      	ldr	r3, [r5, r3]
 800c226:	4798      	blx	r3
 800c228:	3601      	adds	r6, #1
 800c22a:	e7f2      	b.n	800c212 <__libc_init_array+0x1e>
 800c22c:	0800c688 	.word	0x0800c688
 800c230:	0800c688 	.word	0x0800c688
 800c234:	0800c68c 	.word	0x0800c68c
 800c238:	0800c688 	.word	0x0800c688

0800c23c <memcpy>:
 800c23c:	2300      	movs	r3, #0
 800c23e:	b510      	push	{r4, lr}
 800c240:	429a      	cmp	r2, r3
 800c242:	d100      	bne.n	800c246 <memcpy+0xa>
 800c244:	bd10      	pop	{r4, pc}
 800c246:	5ccc      	ldrb	r4, [r1, r3]
 800c248:	54c4      	strb	r4, [r0, r3]
 800c24a:	3301      	adds	r3, #1
 800c24c:	e7f8      	b.n	800c240 <memcpy+0x4>
	...

0800c250 <_init>:
 800c250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c252:	46c0      	nop			@ (mov r8, r8)
 800c254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c256:	bc08      	pop	{r3}
 800c258:	469e      	mov	lr, r3
 800c25a:	4770      	bx	lr

0800c25c <_fini>:
 800c25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c25e:	46c0      	nop			@ (mov r8, r8)
 800c260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c262:	bc08      	pop	{r3}
 800c264:	469e      	mov	lr, r3
 800c266:	4770      	bx	lr
