
BelowGroundBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f6c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  0800a02c  0800a02c  0000b02c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a430  0800a430  0000c0bc  2**0
                  CONTENTS
  4 .ARM          00000000  0800a430  0800a430  0000c0bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a430  0800a430  0000c0bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a430  0800a430  0000b430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a434  0800a434  0000b434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000bc  20000000  0800a438  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000aa4  200000bc  0800a4f4  0000c0bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b60  0800a4f4  0000cb60  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000c0bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019c81  00000000  00000000  0000c0e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000321c  00000000  00000000  00025d65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001738  00000000  00000000  00028f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001264  00000000  00000000  0002a6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018685  00000000  00000000  0002b924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bd42  00000000  00000000  00043fa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c52c  00000000  00000000  0005fceb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fc217  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000569c  00000000  00000000  000fc25c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  001018f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000bc 	.word	0x200000bc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800a014 	.word	0x0800a014

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000c0 	.word	0x200000c0
 8000104:	0800a014 	.word	0x0800a014

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <HAL_I2C_MemTxCpltCallback>:
void bno055_delay(uint32_t time);
int8_t bno055_write(uint8_t *data, uint8_t len);
int8_t bno055_read(uint8_t reg, uint8_t *data, uint8_t len);

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
	i2c_tx_int = 1;
 80003fc:	4b03      	ldr	r3, [pc, #12]	@ (800040c <HAL_I2C_MemTxCpltCallback+0x18>)
 80003fe:	2201      	movs	r2, #1
 8000400:	701a      	strb	r2, [r3, #0]
}
 8000402:	46c0      	nop			@ (mov r8, r8)
 8000404:	46bd      	mov	sp, r7
 8000406:	b002      	add	sp, #8
 8000408:	bd80      	pop	{r7, pc}
 800040a:	46c0      	nop			@ (mov r8, r8)
 800040c:	2000000e 	.word	0x2000000e

08000410 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
	i2c_rx_int = 1;
 8000418:	4b03      	ldr	r3, [pc, #12]	@ (8000428 <HAL_I2C_MemRxCpltCallback+0x18>)
 800041a:	2201      	movs	r2, #1
 800041c:	701a      	strb	r2, [r3, #0]
}
 800041e:	46c0      	nop			@ (mov r8, r8)
 8000420:	46bd      	mov	sp, r7
 8000422:	b002      	add	sp, #8
 8000424:	bd80      	pop	{r7, pc}
 8000426:	46c0      	nop			@ (mov r8, r8)
 8000428:	2000000f 	.word	0x2000000f

0800042c <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
	i2c_tx_int = 1;
 8000434:	4b03      	ldr	r3, [pc, #12]	@ (8000444 <HAL_I2C_MasterTxCpltCallback+0x18>)
 8000436:	2201      	movs	r2, #1
 8000438:	701a      	strb	r2, [r3, #0]
}
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	46bd      	mov	sp, r7
 800043e:	b002      	add	sp, #8
 8000440:	bd80      	pop	{r7, pc}
 8000442:	46c0      	nop			@ (mov r8, r8)
 8000444:	2000000e 	.word	0x2000000e

08000448 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
	i2c_rx_int = 1;
 8000450:	4b03      	ldr	r3, [pc, #12]	@ (8000460 <HAL_I2C_MasterRxCpltCallback+0x18>)
 8000452:	2201      	movs	r2, #1
 8000454:	701a      	strb	r2, [r3, #0]
}
 8000456:	46c0      	nop			@ (mov r8, r8)
 8000458:	46bd      	mov	sp, r7
 800045a:	b002      	add	sp, #8
 800045c:	bd80      	pop	{r7, pc}
 800045e:	46c0      	nop			@ (mov r8, r8)
 8000460:	2000000f 	.word	0x2000000f

08000464 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
	// Do something
	i2c_err_int = 1;
 800046c:	4b03      	ldr	r3, [pc, #12]	@ (800047c <HAL_I2C_ErrorCallback+0x18>)
 800046e:	2201      	movs	r2, #1
 8000470:	701a      	strb	r2, [r3, #0]
}
 8000472:	46c0      	nop			@ (mov r8, r8)
 8000474:	46bd      	mov	sp, r7
 8000476:	b002      	add	sp, #8
 8000478:	bd80      	pop	{r7, pc}
 800047a:	46c0      	nop			@ (mov r8, r8)
 800047c:	200002e4 	.word	0x200002e4

08000480 <bno055_delay>:


void bno055_delay(uint32_t time)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	0018      	movs	r0, r3
 800048c:	f002 fdc6 	bl	800301c <HAL_Delay>
#endif
}
 8000490:	46c0      	nop			@ (mov r8, r8)
 8000492:	46bd      	mov	sp, r7
 8000494:	b002      	add	sp, #8
 8000496:	bd80      	pop	{r7, pc}

08000498 <bno055_setPage>:
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14


int8_t bno055_setPage(uint8_t page)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b082      	sub	sp, #8
 800049c:	af00      	add	r7, sp, #0
 800049e:	0002      	movs	r2, r0
 80004a0:	1dfb      	adds	r3, r7, #7
 80004a2:	701a      	strb	r2, [r3, #0]
	i2c_tx_buffer[0] = BNO055_PAGE_ID;
 80004a4:	4b09      	ldr	r3, [pc, #36]	@ (80004cc <bno055_setPage+0x34>)
 80004a6:	2207      	movs	r2, #7
 80004a8:	701a      	strb	r2, [r3, #0]
	i2c_tx_buffer[1] = page;
 80004aa:	4b08      	ldr	r3, [pc, #32]	@ (80004cc <bno055_setPage+0x34>)
 80004ac:	1dfa      	adds	r2, r7, #7
 80004ae:	7812      	ldrb	r2, [r2, #0]
 80004b0:	705a      	strb	r2, [r3, #1]
	return bno055_write(i2c_tx_buffer, page);
 80004b2:	1dfb      	adds	r3, r7, #7
 80004b4:	781a      	ldrb	r2, [r3, #0]
 80004b6:	4b05      	ldr	r3, [pc, #20]	@ (80004cc <bno055_setPage+0x34>)
 80004b8:	0011      	movs	r1, r2
 80004ba:	0018      	movs	r0, r3
 80004bc:	f000 fa86 	bl	80009cc <bno055_write>
 80004c0:	0003      	movs	r3, r0

//	bno055_writeData(BNO055_PAGE_ID, page);
}
 80004c2:	0018      	movs	r0, r3
 80004c4:	46bd      	mov	sp, r7
 80004c6:	b002      	add	sp, #8
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	46c0      	nop			@ (mov r8, r8)
 80004cc:	200000d8 	.word	0x200000d8

080004d0 <bno055_setOperationMode>:
	return bno055_read(BNO055_OPR_MODE, mode, 1);
//	bno055_readData(BNO055_OPR_MODE, &mode, 1);
}

int8_t bno055_setOperationMode(bno055_opmode_t mode)
{
 80004d0:	b5b0      	push	{r4, r5, r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	0002      	movs	r2, r0
 80004d8:	1dfb      	adds	r3, r7, #7
 80004da:	701a      	strb	r2, [r3, #0]
	int8_t status = HAL_OK;
 80004dc:	210f      	movs	r1, #15
 80004de:	187b      	adds	r3, r7, r1
 80004e0:	2200      	movs	r2, #0
 80004e2:	701a      	strb	r2, [r3, #0]
	i2c_tx_buffer[0] = BNO055_OPR_MODE;
 80004e4:	4b1d      	ldr	r3, [pc, #116]	@ (800055c <bno055_setOperationMode+0x8c>)
 80004e6:	223d      	movs	r2, #61	@ 0x3d
 80004e8:	701a      	strb	r2, [r3, #0]
	i2c_tx_buffer[1] = mode;
 80004ea:	4b1c      	ldr	r3, [pc, #112]	@ (800055c <bno055_setOperationMode+0x8c>)
 80004ec:	1dfa      	adds	r2, r7, #7
 80004ee:	7812      	ldrb	r2, [r2, #0]
 80004f0:	705a      	strb	r2, [r3, #1]
	status = bno055_write(i2c_tx_buffer, 2);
 80004f2:	000d      	movs	r5, r1
 80004f4:	187c      	adds	r4, r7, r1
 80004f6:	4b19      	ldr	r3, [pc, #100]	@ (800055c <bno055_setOperationMode+0x8c>)
 80004f8:	2102      	movs	r1, #2
 80004fa:	0018      	movs	r0, r3
 80004fc:	f000 fa66 	bl	80009cc <bno055_write>
 8000500:	0003      	movs	r3, r0
 8000502:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8000504:	197b      	adds	r3, r7, r5
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	b25b      	sxtb	r3, r3
 800050a:	2b00      	cmp	r3, #0
 800050c:	d003      	beq.n	8000516 <bno055_setOperationMode+0x46>
 800050e:	197b      	adds	r3, r7, r5
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	b25b      	sxtb	r3, r3
 8000514:	e01e      	b.n	8000554 <bno055_setOperationMode+0x84>

	status = bno055_poll_transaction();
 8000516:	250f      	movs	r5, #15
 8000518:	197c      	adds	r4, r7, r5
 800051a:	f000 f8bf 	bl	800069c <bno055_poll_transaction>
 800051e:	0003      	movs	r3, r0
 8000520:	7023      	strb	r3, [r4, #0]
//	bno055_writeData(BNO055_OPR_MODE, mode);
	if(status != HAL_OK){return status;}
 8000522:	002a      	movs	r2, r5
 8000524:	18bb      	adds	r3, r7, r2
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	b25b      	sxtb	r3, r3
 800052a:	2b00      	cmp	r3, #0
 800052c:	d003      	beq.n	8000536 <bno055_setOperationMode+0x66>
 800052e:	18bb      	adds	r3, r7, r2
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	b25b      	sxtb	r3, r3
 8000534:	e00e      	b.n	8000554 <bno055_setOperationMode+0x84>

	if (mode == BNO055_OPERATION_MODE_CONFIG)
 8000536:	1dfb      	adds	r3, r7, #7
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d103      	bne.n	8000546 <bno055_setOperationMode+0x76>
	{
		bno055_delay(19);
 800053e:	2013      	movs	r0, #19
 8000540:	f7ff ff9e 	bl	8000480 <bno055_delay>
 8000544:	e002      	b.n	800054c <bno055_setOperationMode+0x7c>
	}
	else
	{
		bno055_delay(7);
 8000546:	2007      	movs	r0, #7
 8000548:	f7ff ff9a 	bl	8000480 <bno055_delay>
	}
	return status;
 800054c:	230f      	movs	r3, #15
 800054e:	18fb      	adds	r3, r7, r3
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	b25b      	sxtb	r3, r3
}
 8000554:	0018      	movs	r0, r3
 8000556:	46bd      	mov	sp, r7
 8000558:	b004      	add	sp, #16
 800055a:	bdb0      	pop	{r4, r5, r7, pc}
 800055c:	200000d8 	.word	0x200000d8

08000560 <bno055_setOperationModeConfig>:

int8_t bno055_setOperationModeConfig()
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
	return bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8000564:	2000      	movs	r0, #0
 8000566:	f7ff ffb3 	bl	80004d0 <bno055_setOperationMode>
 800056a:	0003      	movs	r3, r0
}
 800056c:	0018      	movs	r0, r3
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}

08000572 <bno055_setOperationModeNDOF>:

int8_t bno055_setOperationModeNDOF()
{
 8000572:	b580      	push	{r7, lr}
 8000574:	af00      	add	r7, sp, #0
	return bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8000576:	200c      	movs	r0, #12
 8000578:	f7ff ffaa 	bl	80004d0 <bno055_setOperationMode>
 800057c:	0003      	movs	r3, r0
}
 800057e:	0018      	movs	r0, r3
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}

08000584 <bno055_setExternalCrystalUse>:

int8_t bno055_setExternalCrystalUse(uint8_t state)
{
 8000584:	b5b0      	push	{r4, r5, r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	0002      	movs	r2, r0
 800058c:	1dfb      	adds	r3, r7, #7
 800058e:	701a      	strb	r2, [r3, #0]
	int8_t status = HAL_OK;
 8000590:	250f      	movs	r5, #15
 8000592:	197b      	adds	r3, r7, r5
 8000594:	2200      	movs	r2, #0
 8000596:	701a      	strb	r2, [r3, #0]
	status = bno055_setPage(0);
 8000598:	197c      	adds	r4, r7, r5
 800059a:	2000      	movs	r0, #0
 800059c:	f7ff ff7c 	bl	8000498 <bno055_setPage>
 80005a0:	0003      	movs	r3, r0
 80005a2:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80005a4:	002a      	movs	r2, r5
 80005a6:	18bb      	adds	r3, r7, r2
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	b25b      	sxtb	r3, r3
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d003      	beq.n	80005b8 <bno055_setExternalCrystalUse+0x34>
 80005b0:	18bb      	adds	r3, r7, r2
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	b25b      	sxtb	r3, r3
 80005b6:	e069      	b.n	800068c <bno055_setExternalCrystalUse+0x108>

	status = bno055_poll_transaction();
 80005b8:	250f      	movs	r5, #15
 80005ba:	197c      	adds	r4, r7, r5
 80005bc:	f000 f86e 	bl	800069c <bno055_poll_transaction>
 80005c0:	0003      	movs	r3, r0
 80005c2:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80005c4:	002a      	movs	r2, r5
 80005c6:	18bb      	adds	r3, r7, r2
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	b25b      	sxtb	r3, r3
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d003      	beq.n	80005d8 <bno055_setExternalCrystalUse+0x54>
 80005d0:	18bb      	adds	r3, r7, r2
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	b25b      	sxtb	r3, r3
 80005d6:	e059      	b.n	800068c <bno055_setExternalCrystalUse+0x108>

	status = bno055_read(BNO055_SYS_TRIGGER, i2c_rx_buffer, 1);
 80005d8:	250f      	movs	r5, #15
 80005da:	197c      	adds	r4, r7, r5
 80005dc:	4b2d      	ldr	r3, [pc, #180]	@ (8000694 <bno055_setExternalCrystalUse+0x110>)
 80005de:	2201      	movs	r2, #1
 80005e0:	0019      	movs	r1, r3
 80005e2:	203f      	movs	r0, #63	@ 0x3f
 80005e4:	f000 fa2a 	bl	8000a3c <bno055_read>
 80005e8:	0003      	movs	r3, r0
 80005ea:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80005ec:	197b      	adds	r3, r7, r5
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	b25b      	sxtb	r3, r3
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d003      	beq.n	80005fe <bno055_setExternalCrystalUse+0x7a>
 80005f6:	197b      	adds	r3, r7, r5
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	b25b      	sxtb	r3, r3
 80005fc:	e046      	b.n	800068c <bno055_setExternalCrystalUse+0x108>

	status = bno055_poll_transaction();
 80005fe:	250f      	movs	r5, #15
 8000600:	197c      	adds	r4, r7, r5
 8000602:	f000 f84b 	bl	800069c <bno055_poll_transaction>
 8000606:	0003      	movs	r3, r0
 8000608:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800060a:	002a      	movs	r2, r5
 800060c:	18bb      	adds	r3, r7, r2
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	b25b      	sxtb	r3, r3
 8000612:	2b00      	cmp	r3, #0
 8000614:	d003      	beq.n	800061e <bno055_setExternalCrystalUse+0x9a>
 8000616:	18bb      	adds	r3, r7, r2
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	b25b      	sxtb	r3, r3
 800061c:	e036      	b.n	800068c <bno055_setExternalCrystalUse+0x108>

	i2c_rx_buffer[0] |= (state == 1) ? 0x80 : 0x0;
 800061e:	4b1d      	ldr	r3, [pc, #116]	@ (8000694 <bno055_setExternalCrystalUse+0x110>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	b25a      	sxtb	r2, r3
 8000624:	1dfb      	adds	r3, r7, #7
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	2b01      	cmp	r3, #1
 800062a:	d102      	bne.n	8000632 <bno055_setExternalCrystalUse+0xae>
 800062c:	2380      	movs	r3, #128	@ 0x80
 800062e:	425b      	negs	r3, r3
 8000630:	e000      	b.n	8000634 <bno055_setExternalCrystalUse+0xb0>
 8000632:	2300      	movs	r3, #0
 8000634:	4313      	orrs	r3, r2
 8000636:	b25b      	sxtb	r3, r3
 8000638:	b2da      	uxtb	r2, r3
 800063a:	4b16      	ldr	r3, [pc, #88]	@ (8000694 <bno055_setExternalCrystalUse+0x110>)
 800063c:	701a      	strb	r2, [r3, #0]
	i2c_tx_buffer[0] = BNO055_SYS_TRIGGER;
 800063e:	4b16      	ldr	r3, [pc, #88]	@ (8000698 <bno055_setExternalCrystalUse+0x114>)
 8000640:	223f      	movs	r2, #63	@ 0x3f
 8000642:	701a      	strb	r2, [r3, #0]
	i2c_tx_buffer[1] = i2c_rx_buffer[0];
 8000644:	4b13      	ldr	r3, [pc, #76]	@ (8000694 <bno055_setExternalCrystalUse+0x110>)
 8000646:	781a      	ldrb	r2, [r3, #0]
 8000648:	4b13      	ldr	r3, [pc, #76]	@ (8000698 <bno055_setExternalCrystalUse+0x114>)
 800064a:	705a      	strb	r2, [r3, #1]
	status = bno055_write(i2c_tx_buffer, 2);
 800064c:	250f      	movs	r5, #15
 800064e:	197c      	adds	r4, r7, r5
 8000650:	4b11      	ldr	r3, [pc, #68]	@ (8000698 <bno055_setExternalCrystalUse+0x114>)
 8000652:	2102      	movs	r1, #2
 8000654:	0018      	movs	r0, r3
 8000656:	f000 f9b9 	bl	80009cc <bno055_write>
 800065a:	0003      	movs	r3, r0
 800065c:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800065e:	197b      	adds	r3, r7, r5
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	b25b      	sxtb	r3, r3
 8000664:	2b00      	cmp	r3, #0
 8000666:	d003      	beq.n	8000670 <bno055_setExternalCrystalUse+0xec>
 8000668:	197b      	adds	r3, r7, r5
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	b25b      	sxtb	r3, r3
 800066e:	e00d      	b.n	800068c <bno055_setExternalCrystalUse+0x108>

	status = bno055_poll_transaction();
 8000670:	250f      	movs	r5, #15
 8000672:	197c      	adds	r4, r7, r5
 8000674:	f000 f812 	bl	800069c <bno055_poll_transaction>
 8000678:	0003      	movs	r3, r0
 800067a:	7023      	strb	r3, [r4, #0]
	bno055_delay(700);
 800067c:	23af      	movs	r3, #175	@ 0xaf
 800067e:	009b      	lsls	r3, r3, #2
 8000680:	0018      	movs	r0, r3
 8000682:	f7ff fefd 	bl	8000480 <bno055_delay>
	return status;
 8000686:	197b      	adds	r3, r7, r5
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	b25b      	sxtb	r3, r3
}
 800068c:	0018      	movs	r0, r3
 800068e:	46bd      	mov	sp, r7
 8000690:	b004      	add	sp, #16
 8000692:	bdb0      	pop	{r4, r5, r7, pc}
 8000694:	200001d8 	.word	0x200001d8
 8000698:	200000d8 	.word	0x200000d8

0800069c <bno055_poll_transaction>:

int8_t bno055_enableExternalCrystal() { return bno055_setExternalCrystalUse(1); }
int8_t bno055_disableExternalCrystal() { return bno055_setExternalCrystalUse(0); }

int8_t bno055_poll_transaction()
{
 800069c:	b590      	push	{r4, r7, lr}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
	int8_t status = HAL_BUSY;
 80006a2:	1dfb      	adds	r3, r7, #7
 80006a4:	2202      	movs	r2, #2
 80006a6:	701a      	strb	r2, [r3, #0]

	while(status == HAL_BUSY)
 80006a8:	e004      	b.n	80006b4 <bno055_poll_transaction+0x18>
	{
		status = monitor_i2c();
 80006aa:	1dfc      	adds	r4, r7, #7
 80006ac:	f000 f932 	bl	8000914 <monitor_i2c>
 80006b0:	0003      	movs	r3, r0
 80006b2:	7023      	strb	r3, [r4, #0]
	while(status == HAL_BUSY)
 80006b4:	1dfb      	adds	r3, r7, #7
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	b25b      	sxtb	r3, r3
 80006ba:	2b02      	cmp	r3, #2
 80006bc:	d0f5      	beq.n	80006aa <bno055_poll_transaction+0xe>
	}

	return status;
 80006be:	1dfb      	adds	r3, r7, #7
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	b25b      	sxtb	r3, r3
}
 80006c4:	0018      	movs	r0, r3
 80006c6:	46bd      	mov	sp, r7
 80006c8:	b003      	add	sp, #12
 80006ca:	bd90      	pop	{r4, r7, pc}

080006cc <bno055_reset>:

int8_t bno055_reset()
{
 80006cc:	b590      	push	{r4, r7, lr}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
	int8_t status = HAL_OK;
 80006d2:	1dfb      	adds	r3, r7, #7
 80006d4:	2200      	movs	r2, #0
 80006d6:	701a      	strb	r2, [r3, #0]
	i2c_tx_buffer[0] = BNO055_SYS_TRIGGER;
 80006d8:	4b18      	ldr	r3, [pc, #96]	@ (800073c <bno055_reset+0x70>)
 80006da:	223f      	movs	r2, #63	@ 0x3f
 80006dc:	701a      	strb	r2, [r3, #0]
	i2c_tx_buffer[1] = 0x20;
 80006de:	4b17      	ldr	r3, [pc, #92]	@ (800073c <bno055_reset+0x70>)
 80006e0:	2220      	movs	r2, #32
 80006e2:	705a      	strb	r2, [r3, #1]
	status = bno055_write(i2c_tx_buffer, 2);
 80006e4:	1dfc      	adds	r4, r7, #7
 80006e6:	4b15      	ldr	r3, [pc, #84]	@ (800073c <bno055_reset+0x70>)
 80006e8:	2102      	movs	r1, #2
 80006ea:	0018      	movs	r0, r3
 80006ec:	f000 f96e 	bl	80009cc <bno055_write>
 80006f0:	0003      	movs	r3, r0
 80006f2:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80006f4:	1dfb      	adds	r3, r7, #7
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	b25b      	sxtb	r3, r3
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d003      	beq.n	8000706 <bno055_reset+0x3a>
 80006fe:	1dfb      	adds	r3, r7, #7
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	b25b      	sxtb	r3, r3
 8000704:	e015      	b.n	8000732 <bno055_reset+0x66>

	status = bno055_poll_transaction();
 8000706:	1dfc      	adds	r4, r7, #7
 8000708:	f7ff ffc8 	bl	800069c <bno055_poll_transaction>
 800070c:	0003      	movs	r3, r0
 800070e:	7023      	strb	r3, [r4, #0]
//	status = bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
	if(status != HAL_OK){return status;}
 8000710:	1dfb      	adds	r3, r7, #7
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	b25b      	sxtb	r3, r3
 8000716:	2b00      	cmp	r3, #0
 8000718:	d003      	beq.n	8000722 <bno055_reset+0x56>
 800071a:	1dfb      	adds	r3, r7, #7
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	b25b      	sxtb	r3, r3
 8000720:	e007      	b.n	8000732 <bno055_reset+0x66>

	bno055_delay(700);
 8000722:	23af      	movs	r3, #175	@ 0xaf
 8000724:	009b      	lsls	r3, r3, #2
 8000726:	0018      	movs	r0, r3
 8000728:	f7ff feaa 	bl	8000480 <bno055_delay>
	return status;
 800072c:	1dfb      	adds	r3, r7, #7
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	b25b      	sxtb	r3, r3
}
 8000732:	0018      	movs	r0, r3
 8000734:	46bd      	mov	sp, r7
 8000736:	b003      	add	sp, #12
 8000738:	bd90      	pop	{r4, r7, pc}
 800073a:	46c0      	nop			@ (mov r8, r8)
 800073c:	200000d8 	.word	0x200000d8

08000740 <bno055_setup>:
	return bno055_read(BNO055_TEMP, (uint8_t*) temp, 1);
//	bno055_readData(BNO055_TEMP, &t, 1);
}

int8_t bno055_setup()
{
 8000740:	b590      	push	{r4, r7, lr}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
	int8_t status = HAL_OK;
 8000746:	1dfb      	adds	r3, r7, #7
 8000748:	2200      	movs	r2, #0
 800074a:	701a      	strb	r2, [r3, #0]
	read_index = 0;
 800074c:	4b38      	ldr	r3, [pc, #224]	@ (8000830 <bno055_setup+0xf0>)
 800074e:	2200      	movs	r2, #0
 8000750:	701a      	strb	r2, [r3, #0]
	status = bno055_reset();
 8000752:	1dfc      	adds	r4, r7, #7
 8000754:	f7ff ffba 	bl	80006cc <bno055_reset>
 8000758:	0003      	movs	r3, r0
 800075a:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800075c:	1dfb      	adds	r3, r7, #7
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	b25b      	sxtb	r3, r3
 8000762:	2b00      	cmp	r3, #0
 8000764:	d003      	beq.n	800076e <bno055_setup+0x2e>
 8000766:	1dfb      	adds	r3, r7, #7
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	b25b      	sxtb	r3, r3
 800076c:	e05c      	b.n	8000828 <bno055_setup+0xe8>

	status = bno055_read(BNO055_CHIP_ID, i2c_rx_buffer, 1);
 800076e:	1dfc      	adds	r4, r7, #7
 8000770:	4b30      	ldr	r3, [pc, #192]	@ (8000834 <bno055_setup+0xf4>)
 8000772:	2201      	movs	r2, #1
 8000774:	0019      	movs	r1, r3
 8000776:	2000      	movs	r0, #0
 8000778:	f000 f960 	bl	8000a3c <bno055_read>
 800077c:	0003      	movs	r3, r0
 800077e:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8000780:	1dfb      	adds	r3, r7, #7
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	b25b      	sxtb	r3, r3
 8000786:	2b00      	cmp	r3, #0
 8000788:	d003      	beq.n	8000792 <bno055_setup+0x52>
 800078a:	1dfb      	adds	r3, r7, #7
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	b25b      	sxtb	r3, r3
 8000790:	e04a      	b.n	8000828 <bno055_setup+0xe8>

	status = bno055_poll_transaction();
 8000792:	1dfc      	adds	r4, r7, #7
 8000794:	f7ff ff82 	bl	800069c <bno055_poll_transaction>
 8000798:	0003      	movs	r3, r0
 800079a:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 800079c:	1dfb      	adds	r3, r7, #7
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	b25b      	sxtb	r3, r3
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d003      	beq.n	80007ae <bno055_setup+0x6e>
 80007a6:	1dfb      	adds	r3, r7, #7
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	b25b      	sxtb	r3, r3
 80007ac:	e03c      	b.n	8000828 <bno055_setup+0xe8>

//	status = bno055_readData(BNO055_CHIP_ID, &id, 1);

	if(i2c_rx_buffer[0] != BNO055_ID)
 80007ae:	4b21      	ldr	r3, [pc, #132]	@ (8000834 <bno055_setup+0xf4>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	2ba0      	cmp	r3, #160	@ 0xa0
 80007b4:	d001      	beq.n	80007ba <bno055_setup+0x7a>
	{
		return HAL_ERROR;
 80007b6:	2301      	movs	r3, #1
 80007b8:	e036      	b.n	8000828 <bno055_setup+0xe8>
	}
	status = bno055_setPage(0);
 80007ba:	1dfc      	adds	r4, r7, #7
 80007bc:	2000      	movs	r0, #0
 80007be:	f7ff fe6b 	bl	8000498 <bno055_setPage>
 80007c2:	0003      	movs	r3, r0
 80007c4:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80007c6:	1dfb      	adds	r3, r7, #7
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	b25b      	sxtb	r3, r3
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d003      	beq.n	80007d8 <bno055_setup+0x98>
 80007d0:	1dfb      	adds	r3, r7, #7
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	b25b      	sxtb	r3, r3
 80007d6:	e027      	b.n	8000828 <bno055_setup+0xe8>

	status = bno055_poll_transaction();
 80007d8:	1dfc      	adds	r4, r7, #7
 80007da:	f7ff ff5f 	bl	800069c <bno055_poll_transaction>
 80007de:	0003      	movs	r3, r0
 80007e0:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80007e2:	1dfb      	adds	r3, r7, #7
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	b25b      	sxtb	r3, r3
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d003      	beq.n	80007f4 <bno055_setup+0xb4>
 80007ec:	1dfb      	adds	r3, r7, #7
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	b25b      	sxtb	r3, r3
 80007f2:	e019      	b.n	8000828 <bno055_setup+0xe8>

	status = bno055_setExternalCrystalUse(0);
 80007f4:	1dfc      	adds	r4, r7, #7
 80007f6:	2000      	movs	r0, #0
 80007f8:	f7ff fec4 	bl	8000584 <bno055_setExternalCrystalUse>
 80007fc:	0003      	movs	r3, r0
 80007fe:	7023      	strb	r3, [r4, #0]
//	status = bno055_writeData(BNO055_SYS_TRIGGER, 0x0); // TODO: change to external oscillator
	if(status != HAL_OK){return status;}
 8000800:	1dfb      	adds	r3, r7, #7
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	b25b      	sxtb	r3, r3
 8000806:	2b00      	cmp	r3, #0
 8000808:	d003      	beq.n	8000812 <bno055_setup+0xd2>
 800080a:	1dfb      	adds	r3, r7, #7
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	b25b      	sxtb	r3, r3
 8000810:	e00a      	b.n	8000828 <bno055_setup+0xe8>

	// Select BNO055 config mode
	status = bno055_setOperationModeConfig();
 8000812:	1dfc      	adds	r4, r7, #7
 8000814:	f7ff fea4 	bl	8000560 <bno055_setOperationModeConfig>
 8000818:	0003      	movs	r3, r0
 800081a:	7023      	strb	r3, [r4, #0]
	bno055_delay(10);
 800081c:	200a      	movs	r0, #10
 800081e:	f7ff fe2f 	bl	8000480 <bno055_delay>
	return status;
 8000822:	1dfb      	adds	r3, r7, #7
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	b25b      	sxtb	r3, r3
}
 8000828:	0018      	movs	r0, r3
 800082a:	46bd      	mov	sp, r7
 800082c:	b003      	add	sp, #12
 800082e:	bd90      	pop	{r4, r7, pc}
 8000830:	200002d8 	.word	0x200002d8
 8000834:	200001d8 	.word	0x200001d8

08000838 <bno055_rx>:
//		bno055_readData(mem_read_map[i].reg, &buffer[6 * i], mem_read_map[i].reg_len);
	}
}

uint8_t bno055_rx()
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
	if(i2c_rx_int)
 800083c:	4b07      	ldr	r3, [pc, #28]	@ (800085c <bno055_rx+0x24>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	b2db      	uxtb	r3, r3
 8000842:	2b00      	cmp	r3, #0
 8000844:	d004      	beq.n	8000850 <bno055_rx+0x18>
	{
		i2c_rx_int = 0;
 8000846:	4b05      	ldr	r3, [pc, #20]	@ (800085c <bno055_rx+0x24>)
 8000848:	2200      	movs	r2, #0
 800084a:	701a      	strb	r2, [r3, #0]
		return 1;
 800084c:	2301      	movs	r3, #1
 800084e:	e002      	b.n	8000856 <bno055_rx+0x1e>
	}
	return i2c_rx_int;
 8000850:	4b02      	ldr	r3, [pc, #8]	@ (800085c <bno055_rx+0x24>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	b2db      	uxtb	r3, r3
}
 8000856:	0018      	movs	r0, r3
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	2000000f 	.word	0x2000000f

08000860 <bno055_queue_transaction>:

int8_t bno055_queue_transaction()
{
 8000860:	b5b0      	push	{r4, r5, r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af02      	add	r7, sp, #8
	uint8_t status = HAL_OK;
 8000866:	1dfb      	adds	r3, r7, #7
 8000868:	2200      	movs	r2, #0
 800086a:	701a      	strb	r2, [r3, #0]
	uint8_t* buffer = (uint8_t*)(&holding_register_database[12]);
 800086c:	4b23      	ldr	r3, [pc, #140]	@ (80008fc <bno055_queue_transaction+0x9c>)
 800086e:	603b      	str	r3, [r7, #0]
	i2c_tx_int = 0;
 8000870:	4b23      	ldr	r3, [pc, #140]	@ (8000900 <bno055_queue_transaction+0xa0>)
 8000872:	2200      	movs	r2, #0
 8000874:	701a      	strb	r2, [r3, #0]
	i2c_tx_time = HAL_GetTick();
 8000876:	f002 fbc7 	bl	8003008 <HAL_GetTick>
 800087a:	0002      	movs	r2, r0
 800087c:	4b21      	ldr	r3, [pc, #132]	@ (8000904 <bno055_queue_transaction+0xa4>)
 800087e:	601a      	str	r2, [r3, #0]
//	status = HAL_I2C_Mem_Read_IT(&hi2c1, BNO055_I2C_ADDR << 1, mem_read_map[read_index].reg,
//			I2C_MEMADD_SIZE_8BIT, &buffer[6 * read_index], mem_read_map[read_index].reg_len);
	status = HAL_I2C_Mem_Read_DMA(&hi2c1, BNO055_I2C_ADDR << 1, mem_read_map[read_index].reg,
 8000880:	4b21      	ldr	r3, [pc, #132]	@ (8000908 <bno055_queue_transaction+0xa8>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	001a      	movs	r2, r3
 8000886:	4b21      	ldr	r3, [pc, #132]	@ (800090c <bno055_queue_transaction+0xac>)
 8000888:	0052      	lsls	r2, r2, #1
 800088a:	5cd3      	ldrb	r3, [r2, r3]
 800088c:	001d      	movs	r5, r3
			I2C_MEMADD_SIZE_8BIT, &buffer[6 * read_index], mem_read_map[read_index].reg_len);
 800088e:	4b1e      	ldr	r3, [pc, #120]	@ (8000908 <bno055_queue_transaction+0xa8>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	001a      	movs	r2, r3
 8000894:	0013      	movs	r3, r2
 8000896:	005b      	lsls	r3, r3, #1
 8000898:	189b      	adds	r3, r3, r2
 800089a:	005b      	lsls	r3, r3, #1
 800089c:	001a      	movs	r2, r3
	status = HAL_I2C_Mem_Read_DMA(&hi2c1, BNO055_I2C_ADDR << 1, mem_read_map[read_index].reg,
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	189b      	adds	r3, r3, r2
			I2C_MEMADD_SIZE_8BIT, &buffer[6 * read_index], mem_read_map[read_index].reg_len);
 80008a2:	4a19      	ldr	r2, [pc, #100]	@ (8000908 <bno055_queue_transaction+0xa8>)
 80008a4:	7812      	ldrb	r2, [r2, #0]
 80008a6:	4919      	ldr	r1, [pc, #100]	@ (800090c <bno055_queue_transaction+0xac>)
 80008a8:	0052      	lsls	r2, r2, #1
 80008aa:	188a      	adds	r2, r1, r2
 80008ac:	3201      	adds	r2, #1
 80008ae:	7812      	ldrb	r2, [r2, #0]
	status = HAL_I2C_Mem_Read_DMA(&hi2c1, BNO055_I2C_ADDR << 1, mem_read_map[read_index].reg,
 80008b0:	1dfc      	adds	r4, r7, #7
 80008b2:	4817      	ldr	r0, [pc, #92]	@ (8000910 <bno055_queue_transaction+0xb0>)
 80008b4:	9201      	str	r2, [sp, #4]
 80008b6:	9300      	str	r3, [sp, #0]
 80008b8:	2301      	movs	r3, #1
 80008ba:	002a      	movs	r2, r5
 80008bc:	2150      	movs	r1, #80	@ 0x50
 80008be:	f004 fa89 	bl	8004dd4 <HAL_I2C_Mem_Read_DMA>
 80008c2:	0003      	movs	r3, r0
 80008c4:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 80008c6:	1dfb      	adds	r3, r7, #7
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d003      	beq.n	80008d6 <bno055_queue_transaction+0x76>
 80008ce:	1dfb      	adds	r3, r7, #7
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	b25b      	sxtb	r3, r3
 80008d4:	e00e      	b.n	80008f4 <bno055_queue_transaction+0x94>
	read_index = (read_index == NUM_VECTORS - 1)? 0 : read_index + 1;
 80008d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000908 <bno055_queue_transaction+0xa8>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	2b06      	cmp	r3, #6
 80008dc:	d004      	beq.n	80008e8 <bno055_queue_transaction+0x88>
 80008de:	4b0a      	ldr	r3, [pc, #40]	@ (8000908 <bno055_queue_transaction+0xa8>)
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	3301      	adds	r3, #1
 80008e4:	b2da      	uxtb	r2, r3
 80008e6:	e000      	b.n	80008ea <bno055_queue_transaction+0x8a>
 80008e8:	2200      	movs	r2, #0
 80008ea:	4b07      	ldr	r3, [pc, #28]	@ (8000908 <bno055_queue_transaction+0xa8>)
 80008ec:	701a      	strb	r2, [r3, #0]
	return status;
 80008ee:	1dfb      	adds	r3, r7, #7
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	b25b      	sxtb	r3, r3
}
 80008f4:	0018      	movs	r0, r3
 80008f6:	46bd      	mov	sp, r7
 80008f8:	b002      	add	sp, #8
 80008fa:	bdb0      	pop	{r4, r5, r7, pc}
 80008fc:	20000028 	.word	0x20000028
 8000900:	2000000e 	.word	0x2000000e
 8000904:	200002dc 	.word	0x200002dc
 8000908:	200002d8 	.word	0x200002d8
 800090c:	20000000 	.word	0x20000000
 8000910:	200003a8 	.word	0x200003a8

08000914 <monitor_i2c>:

	return status;
}

int8_t monitor_i2c()
{
 8000914:	b590      	push	{r4, r7, lr}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
	int8_t status = HAL_OK;
 800091a:	1dfb      	adds	r3, r7, #7
 800091c:	2200      	movs	r2, #0
 800091e:	701a      	strb	r2, [r3, #0]

	// I2C error handling
	if(i2c_err_int)
 8000920:	4b25      	ldr	r3, [pc, #148]	@ (80009b8 <monitor_i2c+0xa4>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	b2db      	uxtb	r3, r3
 8000926:	2b00      	cmp	r3, #0
 8000928:	d015      	beq.n	8000956 <monitor_i2c+0x42>
	{
		i2c_err_int = 0;
 800092a:	4b23      	ldr	r3, [pc, #140]	@ (80009b8 <monitor_i2c+0xa4>)
 800092c:	2200      	movs	r2, #0
 800092e:	701a      	strb	r2, [r3, #0]
		status = i2c_reset();
 8000930:	1dfc      	adds	r4, r7, #7
 8000932:	f000 f8fb 	bl	8000b2c <i2c_reset>
 8000936:	0003      	movs	r3, r0
 8000938:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK)
 800093a:	1dfb      	adds	r3, r7, #7
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	b25b      	sxtb	r3, r3
 8000940:	2b00      	cmp	r3, #0
 8000942:	d003      	beq.n	800094c <monitor_i2c+0x38>
		{
			return status;
 8000944:	1dfb      	adds	r3, r7, #7
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	b25b      	sxtb	r3, r3
 800094a:	e031      	b.n	80009b0 <monitor_i2c+0x9c>
		}
		return handle_i2c_error(I2C_ERROR);
 800094c:	2018      	movs	r0, #24
 800094e:	f000 f957 	bl	8000c00 <handle_i2c_error>
 8000952:	0003      	movs	r3, r0
 8000954:	e02c      	b.n	80009b0 <monitor_i2c+0x9c>
	}

	// TX timeout handling
	if(!i2c_tx_int)
 8000956:	4b19      	ldr	r3, [pc, #100]	@ (80009bc <monitor_i2c+0xa8>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	b2db      	uxtb	r3, r3
 800095c:	2b00      	cmp	r3, #0
 800095e:	d10f      	bne.n	8000980 <monitor_i2c+0x6c>
	{
		if(HAL_GetTick() - i2c_tx_time >= 100)
 8000960:	f002 fb52 	bl	8003008 <HAL_GetTick>
 8000964:	0002      	movs	r2, r0
 8000966:	4b16      	ldr	r3, [pc, #88]	@ (80009c0 <monitor_i2c+0xac>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	1ad3      	subs	r3, r2, r3
 800096c:	2b63      	cmp	r3, #99	@ 0x63
 800096e:	d904      	bls.n	800097a <monitor_i2c+0x66>
		{
			return handle_i2c_error(I2C_TX_TIMEOUT);
 8000970:	2016      	movs	r0, #22
 8000972:	f000 f945 	bl	8000c00 <handle_i2c_error>
 8000976:	0003      	movs	r3, r0
 8000978:	e01a      	b.n	80009b0 <monitor_i2c+0x9c>
		}
		status = HAL_BUSY;
 800097a:	1dfb      	adds	r3, r7, #7
 800097c:	2202      	movs	r2, #2
 800097e:	701a      	strb	r2, [r3, #0]
	}

	// RX timeout handling
	if(!i2c_rx_int)
 8000980:	4b10      	ldr	r3, [pc, #64]	@ (80009c4 <monitor_i2c+0xb0>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	b2db      	uxtb	r3, r3
 8000986:	2b00      	cmp	r3, #0
 8000988:	d10f      	bne.n	80009aa <monitor_i2c+0x96>
	{
		if(HAL_GetTick() - i2c_rx_time >= 100)
 800098a:	f002 fb3d 	bl	8003008 <HAL_GetTick>
 800098e:	0002      	movs	r2, r0
 8000990:	4b0d      	ldr	r3, [pc, #52]	@ (80009c8 <monitor_i2c+0xb4>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	1ad3      	subs	r3, r2, r3
 8000996:	2b63      	cmp	r3, #99	@ 0x63
 8000998:	d904      	bls.n	80009a4 <monitor_i2c+0x90>
		{
			return handle_i2c_error(I2C_RX_TIMEOUT);
 800099a:	2017      	movs	r0, #23
 800099c:	f000 f930 	bl	8000c00 <handle_i2c_error>
 80009a0:	0003      	movs	r3, r0
 80009a2:	e005      	b.n	80009b0 <monitor_i2c+0x9c>
		}
		status = HAL_BUSY;
 80009a4:	1dfb      	adds	r3, r7, #7
 80009a6:	2202      	movs	r2, #2
 80009a8:	701a      	strb	r2, [r3, #0]
	}

	return status;
 80009aa:	1dfb      	adds	r3, r7, #7
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	b25b      	sxtb	r3, r3
}
 80009b0:	0018      	movs	r0, r3
 80009b2:	46bd      	mov	sp, r7
 80009b4:	b003      	add	sp, #12
 80009b6:	bd90      	pop	{r4, r7, pc}
 80009b8:	200002e4 	.word	0x200002e4
 80009bc:	2000000e 	.word	0x2000000e
 80009c0:	200002dc 	.word	0x200002dc
 80009c4:	2000000f 	.word	0x2000000f
 80009c8:	200002e0 	.word	0x200002e0

080009cc <bno055_write>:

int8_t bno055_write(uint8_t *data, uint8_t len)
{
 80009cc:	b590      	push	{r4, r7, lr}
 80009ce:	b087      	sub	sp, #28
 80009d0:	af02      	add	r7, sp, #8
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	000a      	movs	r2, r1
 80009d6:	1cfb      	adds	r3, r7, #3
 80009d8:	701a      	strb	r2, [r3, #0]
	int8_t status = HAL_OK;
 80009da:	240f      	movs	r4, #15
 80009dc:	193b      	adds	r3, r7, r4
 80009de:	2200      	movs	r2, #0
 80009e0:	701a      	strb	r2, [r3, #0]
	i2c_tx_int = 0;
 80009e2:	4b12      	ldr	r3, [pc, #72]	@ (8000a2c <bno055_write+0x60>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	701a      	strb	r2, [r3, #0]
	i2c_tx_time = HAL_GetTick();
 80009e8:	f002 fb0e 	bl	8003008 <HAL_GetTick>
 80009ec:	0002      	movs	r2, r0
 80009ee:	4b10      	ldr	r3, [pc, #64]	@ (8000a30 <bno055_write+0x64>)
 80009f0:	601a      	str	r2, [r3, #0]
	status = HAL_I2C_Master_Transmit(&hi2c1, BNO055_I2C_ADDR << 1, data, len, 100);
 80009f2:	1cfb      	adds	r3, r7, #3
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	b29b      	uxth	r3, r3
 80009f8:	687a      	ldr	r2, [r7, #4]
 80009fa:	480e      	ldr	r0, [pc, #56]	@ (8000a34 <bno055_write+0x68>)
 80009fc:	2164      	movs	r1, #100	@ 0x64
 80009fe:	9100      	str	r1, [sp, #0]
 8000a00:	2150      	movs	r1, #80	@ 0x50
 8000a02:	f003 ffb5 	bl	8004970 <HAL_I2C_Master_Transmit>
 8000a06:	0003      	movs	r3, r0
 8000a08:	001a      	movs	r2, r3
 8000a0a:	193b      	adds	r3, r7, r4
 8000a0c:	701a      	strb	r2, [r3, #0]
//	status = HAL_I2C_Master_Transmit_DMA(&hi2c1, BNO055_I2C_ADDR << 1, data, len);
	__HAL_DMA_DISABLE_IT(&hdma_i2c1_tx, DMA_IT_HT);
 8000a0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a38 <bno055_write+0x6c>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	681a      	ldr	r2, [r3, #0]
 8000a14:	4b08      	ldr	r3, [pc, #32]	@ (8000a38 <bno055_write+0x6c>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	2104      	movs	r1, #4
 8000a1a:	438a      	bics	r2, r1
 8000a1c:	601a      	str	r2, [r3, #0]

	return status;
 8000a1e:	193b      	adds	r3, r7, r4
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	b25b      	sxtb	r3, r3
}
 8000a24:	0018      	movs	r0, r3
 8000a26:	46bd      	mov	sp, r7
 8000a28:	b005      	add	sp, #20
 8000a2a:	bd90      	pop	{r4, r7, pc}
 8000a2c:	2000000e 	.word	0x2000000e
 8000a30:	200002dc 	.word	0x200002dc
 8000a34:	200003a8 	.word	0x200003a8
 8000a38:	20000458 	.word	0x20000458

08000a3c <bno055_read>:

int8_t bno055_read(uint8_t reg, uint8_t *data, uint8_t len)
{
 8000a3c:	b5b0      	push	{r4, r5, r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af02      	add	r7, sp, #8
 8000a42:	6039      	str	r1, [r7, #0]
 8000a44:	0011      	movs	r1, r2
 8000a46:	1dfb      	adds	r3, r7, #7
 8000a48:	1c02      	adds	r2, r0, #0
 8000a4a:	701a      	strb	r2, [r3, #0]
 8000a4c:	1dbb      	adds	r3, r7, #6
 8000a4e:	1c0a      	adds	r2, r1, #0
 8000a50:	701a      	strb	r2, [r3, #0]
	int8_t status = HAL_OK;
 8000a52:	240f      	movs	r4, #15
 8000a54:	193b      	adds	r3, r7, r4
 8000a56:	2200      	movs	r2, #0
 8000a58:	701a      	strb	r2, [r3, #0]
	i2c_tx_int = 0;
 8000a5a:	4b2d      	ldr	r3, [pc, #180]	@ (8000b10 <bno055_read+0xd4>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	701a      	strb	r2, [r3, #0]
	i2c_tx_time = HAL_GetTick();
 8000a60:	f002 fad2 	bl	8003008 <HAL_GetTick>
 8000a64:	0002      	movs	r2, r0
 8000a66:	4b2b      	ldr	r3, [pc, #172]	@ (8000b14 <bno055_read+0xd8>)
 8000a68:	601a      	str	r2, [r3, #0]
	status = HAL_I2C_Master_Transmit(&hi2c1, BNO055_I2C_ADDR << 1, &reg, 1, 100);
 8000a6a:	1dfa      	adds	r2, r7, #7
 8000a6c:	482a      	ldr	r0, [pc, #168]	@ (8000b18 <bno055_read+0xdc>)
 8000a6e:	2364      	movs	r3, #100	@ 0x64
 8000a70:	9300      	str	r3, [sp, #0]
 8000a72:	2301      	movs	r3, #1
 8000a74:	2150      	movs	r1, #80	@ 0x50
 8000a76:	f003 ff7b 	bl	8004970 <HAL_I2C_Master_Transmit>
 8000a7a:	0003      	movs	r3, r0
 8000a7c:	001a      	movs	r2, r3
 8000a7e:	193b      	adds	r3, r7, r4
 8000a80:	701a      	strb	r2, [r3, #0]
//	status = HAL_I2C_Master_Transmit_DMA(&hi2c1, BNO055_I2C_ADDR << 1, &reg, 1);
	__HAL_DMA_DISABLE_IT(&hdma_i2c1_tx, DMA_IT_HT);
 8000a82:	4b26      	ldr	r3, [pc, #152]	@ (8000b1c <bno055_read+0xe0>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	4b24      	ldr	r3, [pc, #144]	@ (8000b1c <bno055_read+0xe0>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2104      	movs	r1, #4
 8000a8e:	438a      	bics	r2, r1
 8000a90:	601a      	str	r2, [r3, #0]
	if(status != HAL_OK){return status;}
 8000a92:	193b      	adds	r3, r7, r4
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	b25b      	sxtb	r3, r3
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d003      	beq.n	8000aa4 <bno055_read+0x68>
 8000a9c:	193b      	adds	r3, r7, r4
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	b25b      	sxtb	r3, r3
 8000aa2:	e031      	b.n	8000b08 <bno055_read+0xcc>
	status = bno055_poll_transaction();
 8000aa4:	250f      	movs	r5, #15
 8000aa6:	197c      	adds	r4, r7, r5
 8000aa8:	f7ff fdf8 	bl	800069c <bno055_poll_transaction>
 8000aac:	0003      	movs	r3, r0
 8000aae:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK){return status;}
 8000ab0:	002a      	movs	r2, r5
 8000ab2:	18bb      	adds	r3, r7, r2
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	b25b      	sxtb	r3, r3
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d003      	beq.n	8000ac4 <bno055_read+0x88>
 8000abc:	18bb      	adds	r3, r7, r2
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	b25b      	sxtb	r3, r3
 8000ac2:	e021      	b.n	8000b08 <bno055_read+0xcc>

	i2c_rx_int = 0;
 8000ac4:	4b16      	ldr	r3, [pc, #88]	@ (8000b20 <bno055_read+0xe4>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	701a      	strb	r2, [r3, #0]
	i2c_rx_time = HAL_GetTick();
 8000aca:	f002 fa9d 	bl	8003008 <HAL_GetTick>
 8000ace:	0002      	movs	r2, r0
 8000ad0:	4b14      	ldr	r3, [pc, #80]	@ (8000b24 <bno055_read+0xe8>)
 8000ad2:	601a      	str	r2, [r3, #0]
	status = HAL_I2C_Master_Receive(&hi2c1, BNO055_I2C_ADDR << 1, data, len, 100);
 8000ad4:	1dbb      	adds	r3, r7, #6
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	b29b      	uxth	r3, r3
 8000ada:	683a      	ldr	r2, [r7, #0]
 8000adc:	480e      	ldr	r0, [pc, #56]	@ (8000b18 <bno055_read+0xdc>)
 8000ade:	2164      	movs	r1, #100	@ 0x64
 8000ae0:	9100      	str	r1, [sp, #0]
 8000ae2:	2150      	movs	r1, #80	@ 0x50
 8000ae4:	f004 f86e 	bl	8004bc4 <HAL_I2C_Master_Receive>
 8000ae8:	0003      	movs	r3, r0
 8000aea:	001a      	movs	r2, r3
 8000aec:	200f      	movs	r0, #15
 8000aee:	183b      	adds	r3, r7, r0
 8000af0:	701a      	strb	r2, [r3, #0]
//	status = HAL_I2C_Master_Receive_DMA(&hi2c1, BNO055_I2C_ADDR << 1, data, len);
	__HAL_DMA_DISABLE_IT(&hdma_i2c1_rx, DMA_IT_HT);
 8000af2:	4b0d      	ldr	r3, [pc, #52]	@ (8000b28 <bno055_read+0xec>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	4b0b      	ldr	r3, [pc, #44]	@ (8000b28 <bno055_read+0xec>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2104      	movs	r1, #4
 8000afe:	438a      	bics	r2, r1
 8000b00:	601a      	str	r2, [r3, #0]

	return status;
 8000b02:	183b      	adds	r3, r7, r0
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	b25b      	sxtb	r3, r3
}
 8000b08:	0018      	movs	r0, r3
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	b004      	add	sp, #16
 8000b0e:	bdb0      	pop	{r4, r5, r7, pc}
 8000b10:	2000000e 	.word	0x2000000e
 8000b14:	200002dc 	.word	0x200002dc
 8000b18:	200003a8 	.word	0x200003a8
 8000b1c:	20000458 	.word	0x20000458
 8000b20:	2000000f 	.word	0x2000000f
 8000b24:	200002e0 	.word	0x200002e0
 8000b28:	200003fc 	.word	0x200003fc

08000b2c <i2c_reset>:

int8_t i2c_reset()
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
	int8_t status = HAL_OK;
 8000b32:	1dfb      	adds	r3, r7, #7
 8000b34:	2200      	movs	r2, #0
 8000b36:	701a      	strb	r2, [r3, #0]
	status = HAL_I2C_Master_Abort_IT(&hi2c1, BNO055_I2C_ADDR << 1);
 8000b38:	4b2e      	ldr	r3, [pc, #184]	@ (8000bf4 <i2c_reset+0xc8>)
 8000b3a:	2150      	movs	r1, #80	@ 0x50
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	f004 fa49 	bl	8004fd4 <HAL_I2C_Master_Abort_IT>
 8000b42:	0003      	movs	r3, r0
 8000b44:	001a      	movs	r2, r3
 8000b46:	1dfb      	adds	r3, r7, #7
 8000b48:	701a      	strb	r2, [r3, #0]
	status |= bno055_poll_transaction();
 8000b4a:	f7ff fda7 	bl	800069c <bno055_poll_transaction>
 8000b4e:	0003      	movs	r3, r0
 8000b50:	0019      	movs	r1, r3
 8000b52:	1dfb      	adds	r3, r7, #7
 8000b54:	1dfa      	adds	r2, r7, #7
 8000b56:	7812      	ldrb	r2, [r2, #0]
 8000b58:	430a      	orrs	r2, r1
 8000b5a:	701a      	strb	r2, [r3, #0]
	status |= HAL_I2C_DeInit(&hi2c1);
 8000b5c:	4b25      	ldr	r3, [pc, #148]	@ (8000bf4 <i2c_reset+0xc8>)
 8000b5e:	0018      	movs	r0, r3
 8000b60:	f003 fed6 	bl	8004910 <HAL_I2C_DeInit>
 8000b64:	0003      	movs	r3, r0
 8000b66:	b259      	sxtb	r1, r3
 8000b68:	1dfb      	adds	r3, r7, #7
 8000b6a:	1dfa      	adds	r2, r7, #7
 8000b6c:	7812      	ldrb	r2, [r2, #0]
 8000b6e:	430a      	orrs	r2, r1
 8000b70:	701a      	strb	r2, [r3, #0]
	__I2C1_FORCE_RESET();
 8000b72:	4b21      	ldr	r3, [pc, #132]	@ (8000bf8 <i2c_reset+0xcc>)
 8000b74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000b76:	4b20      	ldr	r3, [pc, #128]	@ (8000bf8 <i2c_reset+0xcc>)
 8000b78:	2180      	movs	r1, #128	@ 0x80
 8000b7a:	0389      	lsls	r1, r1, #14
 8000b7c:	430a      	orrs	r2, r1
 8000b7e:	62da      	str	r2, [r3, #44]	@ 0x2c
	HAL_Delay(100);
 8000b80:	2064      	movs	r0, #100	@ 0x64
 8000b82:	f002 fa4b 	bl	800301c <HAL_Delay>
	__I2C1_RELEASE_RESET();
 8000b86:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf8 <i2c_reset+0xcc>)
 8000b88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000b8a:	4b1b      	ldr	r3, [pc, #108]	@ (8000bf8 <i2c_reset+0xcc>)
 8000b8c:	491b      	ldr	r1, [pc, #108]	@ (8000bfc <i2c_reset+0xd0>)
 8000b8e:	400a      	ands	r2, r1
 8000b90:	62da      	str	r2, [r3, #44]	@ 0x2c
	status = HAL_I2C_Init(&hi2c1);
 8000b92:	4b18      	ldr	r3, [pc, #96]	@ (8000bf4 <i2c_reset+0xc8>)
 8000b94:	0018      	movs	r0, r3
 8000b96:	f003 fe15 	bl	80047c4 <HAL_I2C_Init>
 8000b9a:	0003      	movs	r3, r0
 8000b9c:	001a      	movs	r2, r3
 8000b9e:	1dfb      	adds	r3, r7, #7
 8000ba0:	701a      	strb	r2, [r3, #0]
	status |= HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE);
 8000ba2:	4b14      	ldr	r3, [pc, #80]	@ (8000bf4 <i2c_reset+0xc8>)
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	f006 f896 	bl	8006cd8 <HAL_I2CEx_ConfigAnalogFilter>
 8000bac:	0003      	movs	r3, r0
 8000bae:	b259      	sxtb	r1, r3
 8000bb0:	1dfb      	adds	r3, r7, #7
 8000bb2:	1dfa      	adds	r2, r7, #7
 8000bb4:	7812      	ldrb	r2, [r2, #0]
 8000bb6:	430a      	orrs	r2, r1
 8000bb8:	701a      	strb	r2, [r3, #0]
	status |= HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0);
 8000bba:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf4 <i2c_reset+0xc8>)
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	f006 f8d6 	bl	8006d70 <HAL_I2CEx_ConfigDigitalFilter>
 8000bc4:	0003      	movs	r3, r0
 8000bc6:	b259      	sxtb	r1, r3
 8000bc8:	1dfb      	adds	r3, r7, #7
 8000bca:	1dfa      	adds	r2, r7, #7
 8000bcc:	7812      	ldrb	r2, [r2, #0]
 8000bce:	430a      	orrs	r2, r1
 8000bd0:	701a      	strb	r2, [r3, #0]
	if(status != HAL_OK)
 8000bd2:	1dfb      	adds	r3, r7, #7
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	b25b      	sxtb	r3, r3
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d004      	beq.n	8000be6 <i2c_reset+0xba>
	{
		return handle_i2c_error(I2C_FATAL_ERROR);
 8000bdc:	2019      	movs	r0, #25
 8000bde:	f000 f80f 	bl	8000c00 <handle_i2c_error>
 8000be2:	0003      	movs	r3, r0
 8000be4:	e002      	b.n	8000bec <i2c_reset+0xc0>
	}
	return status;
 8000be6:	1dfb      	adds	r3, r7, #7
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	b25b      	sxtb	r3, r3
}
 8000bec:	0018      	movs	r0, r3
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	b002      	add	sp, #8
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	200003a8 	.word	0x200003a8
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	ffdfffff 	.word	0xffdfffff

08000c00 <handle_i2c_error>:

int8_t handle_i2c_error(int8_t error_code)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	0002      	movs	r2, r0
 8000c08:	1dfb      	adds	r3, r7, #7
 8000c0a:	701a      	strb	r2, [r3, #0]
	holding_register_database[I2C_ERRORS] |= 1U << (error_code - I2C_TX_TIMEOUT);
 8000c0c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c38 <handle_i2c_error+0x38>)
 8000c0e:	895a      	ldrh	r2, [r3, #10]
 8000c10:	1dfb      	adds	r3, r7, #7
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	b25b      	sxtb	r3, r3
 8000c16:	3b16      	subs	r3, #22
 8000c18:	2101      	movs	r1, #1
 8000c1a:	4099      	lsls	r1, r3
 8000c1c:	000b      	movs	r3, r1
 8000c1e:	b29b      	uxth	r3, r3
 8000c20:	4313      	orrs	r3, r2
 8000c22:	b29a      	uxth	r2, r3
 8000c24:	4b04      	ldr	r3, [pc, #16]	@ (8000c38 <handle_i2c_error+0x38>)
 8000c26:	815a      	strh	r2, [r3, #10]
	return error_code;
 8000c28:	1dfb      	adds	r3, r7, #7
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	b25b      	sxtb	r3, r3
}
 8000c2e:	0018      	movs	r0, r3
 8000c30:	46bd      	mov	sp, r7
 8000c32:	b002      	add	sp, #8
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	46c0      	nop			@ (mov r8, r8)
 8000c38:	20000010 	.word	0x20000010

08000c3c <LL_ADC_REG_SetSequencerConfigurable>:
  *         @arg @ref LL_ADC_REG_SEQ_FIXED
  *         @arg @ref LL_ADC_REG_SEQ_CONFIGURABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerConfigurable(ADC_TypeDef *ADCx, uint32_t Configurability)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_CHSELRMOD, Configurability);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	68db      	ldr	r3, [r3, #12]
 8000c4a:	4a05      	ldr	r2, [pc, #20]	@ (8000c60 <LL_ADC_REG_SetSequencerConfigurable+0x24>)
 8000c4c:	401a      	ands	r2, r3
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	431a      	orrs	r2, r3
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	60da      	str	r2, [r3, #12]
}
 8000c56:	46c0      	nop			@ (mov r8, r8)
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	b002      	add	sp, #8
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	46c0      	nop			@ (mov r8, r8)
 8000c60:	ffdfffff 	.word	0xffdfffff

08000c64 <LL_ADC_REG_SetSequencerScanDirection>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_FORWARD
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_BACKWARD
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerScanDirection(ADC_TypeDef *ADCx, uint32_t ScanDirection)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	68db      	ldr	r3, [r3, #12]
 8000c72:	2204      	movs	r2, #4
 8000c74:	4393      	bics	r3, r2
 8000c76:	001a      	movs	r2, r3
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	431a      	orrs	r2, r3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	60da      	str	r2, [r3, #12]
}
 8000c80:	46c0      	nop			@ (mov r8, r8)
 8000c82:	46bd      	mov	sp, r7
 8000c84:	b002      	add	sp, #8
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <LL_ADC_REG_SetSequencerChannels>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChannels(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	025b      	lsls	r3, r3, #9
 8000c96:	0a5a      	lsrs	r2, r3, #9
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000c9c:	46c0      	nop			@ (mov r8, r8)
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	b002      	add	sp, #8
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <LL_ADC_IsActiveFlag_CCRDY>:
  * @rmtoll ISR      CCRDY          LL_ADC_IsActiveFlag_CCRDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_CCRDY(ADC_TypeDef *ADCx)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_CCRDY) == (LL_ADC_FLAG_CCRDY)) ? 1UL : 0UL);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	2380      	movs	r3, #128	@ 0x80
 8000cb2:	019b      	lsls	r3, r3, #6
 8000cb4:	401a      	ands	r2, r3
 8000cb6:	2380      	movs	r3, #128	@ 0x80
 8000cb8:	019b      	lsls	r3, r3, #6
 8000cba:	429a      	cmp	r2, r3
 8000cbc:	d101      	bne.n	8000cc2 <LL_ADC_IsActiveFlag_CCRDY+0x1e>
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e000      	b.n	8000cc4 <LL_ADC_IsActiveFlag_CCRDY+0x20>
 8000cc2:	2300      	movs	r3, #0
}
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	b002      	add	sp, #8
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ccc:	b590      	push	{r4, r7, lr}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	int8_t modbus_status = HAL_OK;
 8000cd2:	1dfb      	adds	r3, r7, #7
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	701a      	strb	r2, [r3, #0]
	int8_t i2c_status = HAL_OK;
 8000cd8:	1d7b      	adds	r3, r7, #5
 8000cda:	2200      	movs	r2, #0
 8000cdc:	701a      	strb	r2, [r3, #0]
	uint8_t modbus_tx_len = 0;
 8000cde:	1d3b      	adds	r3, r7, #4
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ce4:	f002 f91d 	bl	8002f22 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ce8:	f000 f9ac 	bl	8001044 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cec:	f000 fcc0 	bl	8001670 <MX_GPIO_Init>
  MX_DMA_Init();
 8000cf0:	f000 fc90 	bl	8001614 <MX_DMA_Init>
  MX_ADC1_Init();
 8000cf4:	f000 f9e4 	bl	80010c0 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000cf8:	f000 faee 	bl	80012d8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000cfc:	f000 fb2c 	bl	8001358 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000d00:	f000 fb68 	bl	80013d4 <MX_TIM1_Init>
  MX_TIM14_Init();
 8000d04:	f000 fc10 	bl	8001528 <MX_TIM14_Init>
  MX_USART1_UART_Init();
 8000d08:	f000 fc34 	bl	8001574 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // Initialize the pin mapping table
  pin_map[0] = Actuator_A_EN_Pin;
 8000d0c:	4bc2      	ldr	r3, [pc, #776]	@ (8001018 <main+0x34c>)
 8000d0e:	2240      	movs	r2, #64	@ 0x40
 8000d10:	801a      	strh	r2, [r3, #0]
  pin_map[1] = Actuator_B_EN_Pin;
 8000d12:	4bc1      	ldr	r3, [pc, #772]	@ (8001018 <main+0x34c>)
 8000d14:	2280      	movs	r2, #128	@ 0x80
 8000d16:	805a      	strh	r2, [r3, #2]
  pin_map[2] = Actuator_C_EN_Pin;
 8000d18:	4bbf      	ldr	r3, [pc, #764]	@ (8001018 <main+0x34c>)
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	809a      	strh	r2, [r3, #4]

  port_map[0] = Actuator_A_EN_GPIO_Port;
 8000d1e:	4bbf      	ldr	r3, [pc, #764]	@ (800101c <main+0x350>)
 8000d20:	4abf      	ldr	r2, [pc, #764]	@ (8001020 <main+0x354>)
 8000d22:	601a      	str	r2, [r3, #0]
  port_map[1] = Actuator_B_EN_GPIO_Port;
 8000d24:	4bbd      	ldr	r3, [pc, #756]	@ (800101c <main+0x350>)
 8000d26:	4abe      	ldr	r2, [pc, #760]	@ (8001020 <main+0x354>)
 8000d28:	605a      	str	r2, [r3, #4]
  port_map[2] = Actuator_C_EN_GPIO_Port;
 8000d2a:	4bbc      	ldr	r3, [pc, #752]	@ (800101c <main+0x350>)
 8000d2c:	4abd      	ldr	r2, [pc, #756]	@ (8001024 <main+0x358>)
 8000d2e:	609a      	str	r2, [r3, #8]

  // Initialize the PID constraints to defaults
  pid_constraints.Kp = 1;              // Proportional gain constant
 8000d30:	4bbd      	ldr	r3, [pc, #756]	@ (8001028 <main+0x35c>)
 8000d32:	22fe      	movs	r2, #254	@ 0xfe
 8000d34:	0592      	lsls	r2, r2, #22
 8000d36:	601a      	str	r2, [r3, #0]
  pid_constraints.Ki = 0.1;            // Integral gain constant
 8000d38:	4bbb      	ldr	r3, [pc, #748]	@ (8001028 <main+0x35c>)
 8000d3a:	4abc      	ldr	r2, [pc, #752]	@ (800102c <main+0x360>)
 8000d3c:	605a      	str	r2, [r3, #4]
  pid_constraints.Kd = 5;              // Derivative gain constant
 8000d3e:	4bba      	ldr	r3, [pc, #744]	@ (8001028 <main+0x35c>)
 8000d40:	4abb      	ldr	r2, [pc, #748]	@ (8001030 <main+0x364>)
 8000d42:	609a      	str	r2, [r3, #8]
  pid_constraints.Kaw = 0.1;           // Anti-windup gain constant
 8000d44:	4bb8      	ldr	r3, [pc, #736]	@ (8001028 <main+0x35c>)
 8000d46:	4ab9      	ldr	r2, [pc, #740]	@ (800102c <main+0x360>)
 8000d48:	60da      	str	r2, [r3, #12]
  pid_constraints.T_C = 1;             // Time constant for derivative filtering
 8000d4a:	4bb7      	ldr	r3, [pc, #732]	@ (8001028 <main+0x35c>)
 8000d4c:	22fe      	movs	r2, #254	@ 0xfe
 8000d4e:	0592      	lsls	r2, r2, #22
 8000d50:	611a      	str	r2, [r3, #16]
  pid_constraints.T = 100;             // Time step
 8000d52:	4bb5      	ldr	r3, [pc, #724]	@ (8001028 <main+0x35c>)
 8000d54:	4ab7      	ldr	r2, [pc, #732]	@ (8001034 <main+0x368>)
 8000d56:	615a      	str	r2, [r3, #20]
  pid_constraints.max = 100;           // Max command
 8000d58:	4bb3      	ldr	r3, [pc, #716]	@ (8001028 <main+0x35c>)
 8000d5a:	4ab6      	ldr	r2, [pc, #728]	@ (8001034 <main+0x368>)
 8000d5c:	619a      	str	r2, [r3, #24]
  pid_constraints.min = 0;             // Min command
 8000d5e:	4bb2      	ldr	r3, [pc, #712]	@ (8001028 <main+0x35c>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	61da      	str	r2, [r3, #28]
  pid_constraints.max_rate = 40;       // Max rate of change of the command
 8000d64:	4bb0      	ldr	r3, [pc, #704]	@ (8001028 <main+0x35c>)
 8000d66:	4ab4      	ldr	r2, [pc, #720]	@ (8001038 <main+0x36c>)
 8000d68:	621a      	str	r2, [r3, #32]
  pid_constraints.integral = 0;        // Integral term
 8000d6a:	4baf      	ldr	r3, [pc, #700]	@ (8001028 <main+0x35c>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	625a      	str	r2, [r3, #36]	@ 0x24
  pid_constraints.err_prev = 0;        // Previous error
 8000d70:	4bad      	ldr	r3, [pc, #692]	@ (8001028 <main+0x35c>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	629a      	str	r2, [r3, #40]	@ 0x28
  pid_constraints.deriv_prev = 0;      // Previous derivative
 8000d76:	4bac      	ldr	r3, [pc, #688]	@ (8001028 <main+0x35c>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	62da      	str	r2, [r3, #44]	@ 0x2c
  pid_constraints.command_sat_prev = 0;// Previous saturated command
 8000d7c:	4baa      	ldr	r3, [pc, #680]	@ (8001028 <main+0x35c>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	631a      	str	r2, [r3, #48]	@ 0x30
  pid_constraints.command_prev = 0;    // Previous command
 8000d82:	4ba9      	ldr	r3, [pc, #676]	@ (8001028 <main+0x35c>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	635a      	str	r2, [r3, #52]	@ 0x34
//  if(modbus_set_rx() != HAL_OK)
//  {
//	  Error_Handler();
//  }

  low_half_safe = 0;
 8000d88:	4bac      	ldr	r3, [pc, #688]	@ (800103c <main+0x370>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	701a      	strb	r2, [r3, #0]
//  if(HAL_ADC_Start_DMA(&hadc1, (uint32_t*)(&holding_register_database[ADC_0]), 9) != HAL_OK)
//  {
//	  Error_Handler();
//  }

  bno055_setup();
 8000d8e:	f7ff fcd7 	bl	8000740 <bno055_setup>
  bno055_setOperationModeNDOF();
 8000d92:	f7ff fbee 	bl	8000572 <bno055_setOperationModeNDOF>
  // Start the retrieval process for the bno055 (i2c in interrupt mode)
  //bno055_queue_transaction();

  while (1)
  {
	  if(modbus_rx())
 8000d96:	f000 fead 	bl	8001af4 <modbus_rx>
 8000d9a:	1e03      	subs	r3, r0, #0
 8000d9c:	d100      	bne.n	8000da0 <main+0xd4>
 8000d9e:	e091      	b.n	8000ec4 <main+0x1f8>
	  {
		  if(get_rx_buffer(0) == holding_register_database[0]) // Check Slave ID
 8000da0:	2000      	movs	r0, #0
 8000da2:	f001 fb51 	bl	8002448 <get_rx_buffer>
 8000da6:	0003      	movs	r3, r0
 8000da8:	001a      	movs	r2, r3
 8000daa:	4ba5      	ldr	r3, [pc, #660]	@ (8001040 <main+0x374>)
 8000dac:	881b      	ldrh	r3, [r3, #0]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d133      	bne.n	8000e1a <main+0x14e>
		  {
			  switch(get_rx_buffer(1))
 8000db2:	2001      	movs	r0, #1
 8000db4:	f001 fb48 	bl	8002448 <get_rx_buffer>
 8000db8:	0003      	movs	r3, r0
 8000dba:	2b03      	cmp	r3, #3
 8000dbc:	d002      	beq.n	8000dc4 <main+0xf8>
 8000dbe:	2b10      	cmp	r3, #16
 8000dc0:	d008      	beq.n	8000dd4 <main+0x108>
 8000dc2:	e00f      	b.n	8000de4 <main+0x118>
			  {
				  case 0x03:
				  {
					  // Return holding registers
					  modbus_status = return_holding_registers(&modbus_tx_len);
 8000dc4:	1dfc      	adds	r4, r7, #7
 8000dc6:	1d3b      	adds	r3, r7, #4
 8000dc8:	0018      	movs	r0, r3
 8000dca:	f000 fea5 	bl	8001b18 <return_holding_registers>
 8000dce:	0003      	movs	r3, r0
 8000dd0:	7023      	strb	r3, [r4, #0]
					  break;
 8000dd2:	e00e      	b.n	8000df2 <main+0x126>
				  }
				  case 0x10:
				  {
					  // Write holding registers
					  modbus_status = edit_multiple_registers(&modbus_tx_len);
 8000dd4:	1dfc      	adds	r4, r7, #7
 8000dd6:	1d3b      	adds	r3, r7, #4
 8000dd8:	0018      	movs	r0, r3
 8000dda:	f000 ff49 	bl	8001c70 <edit_multiple_registers>
 8000dde:	0003      	movs	r3, r0
 8000de0:	7023      	strb	r3, [r4, #0]
					  break;
 8000de2:	e006      	b.n	8000df2 <main+0x126>
				  }
				  default:
				  {
					  modbus_status = modbus_exception(MB_ILLEGAL_FUNCTION);
 8000de4:	1dfc      	adds	r4, r7, #7
 8000de6:	2004      	movs	r0, #4
 8000de8:	f001 f83a 	bl	8001e60 <modbus_exception>
 8000dec:	0003      	movs	r3, r0
 8000dee:	7023      	strb	r3, [r4, #0]
					  break;
 8000df0:	46c0      	nop			@ (mov r8, r8)
				  }
			  }
			  if(modbus_status != 0)
 8000df2:	1dfb      	adds	r3, r7, #7
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	b25b      	sxtb	r3, r3
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d04b      	beq.n	8000e94 <main+0x1c8>
			  {
				  holding_register_database[MB_ERRORS] |= 1U << (modbus_status + (MB_FATAL_ERROR - 1));
 8000dfc:	4b90      	ldr	r3, [pc, #576]	@ (8001040 <main+0x374>)
 8000dfe:	891a      	ldrh	r2, [r3, #8]
 8000e00:	1dfb      	adds	r3, r7, #7
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	b25b      	sxtb	r3, r3
 8000e06:	3314      	adds	r3, #20
 8000e08:	2101      	movs	r1, #1
 8000e0a:	4099      	lsls	r1, r3
 8000e0c:	000b      	movs	r3, r1
 8000e0e:	b29b      	uxth	r3, r3
 8000e10:	4313      	orrs	r3, r2
 8000e12:	b29a      	uxth	r2, r3
 8000e14:	4b8a      	ldr	r3, [pc, #552]	@ (8001040 <main+0x374>)
 8000e16:	811a      	strh	r2, [r3, #8]
 8000e18:	e03c      	b.n	8000e94 <main+0x1c8>
			  }
		  }
		  // Special case where you retrieve the modbus ID
		  else if((get_rx_buffer(0) == 0xFF) && // modbus_id = 0xFF = 255
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	f001 fb14 	bl	8002448 <get_rx_buffer>
 8000e20:	0003      	movs	r3, r0
 8000e22:	2bff      	cmp	r3, #255	@ 0xff
 8000e24:	d136      	bne.n	8000e94 <main+0x1c8>
			(get_rx_buffer(1) == 0x03) && // Function code = read_holding_registers
 8000e26:	2001      	movs	r0, #1
 8000e28:	f001 fb0e 	bl	8002448 <get_rx_buffer>
 8000e2c:	0003      	movs	r3, r0
		  else if((get_rx_buffer(0) == 0xFF) && // modbus_id = 0xFF = 255
 8000e2e:	2b03      	cmp	r3, #3
 8000e30:	d130      	bne.n	8000e94 <main+0x1c8>
			(((get_rx_buffer(2) << 8) | get_rx_buffer(3)) == 0x00) && // Address to read = 0
 8000e32:	2002      	movs	r0, #2
 8000e34:	f001 fb08 	bl	8002448 <get_rx_buffer>
 8000e38:	0003      	movs	r3, r0
 8000e3a:	021c      	lsls	r4, r3, #8
 8000e3c:	2003      	movs	r0, #3
 8000e3e:	f001 fb03 	bl	8002448 <get_rx_buffer>
 8000e42:	0003      	movs	r3, r0
 8000e44:	4323      	orrs	r3, r4
			(get_rx_buffer(1) == 0x03) && // Function code = read_holding_registers
 8000e46:	d125      	bne.n	8000e94 <main+0x1c8>
			(((get_rx_buffer(4) << 8) | get_rx_buffer(5)) == 1)) // # of registers to read = 1
 8000e48:	2004      	movs	r0, #4
 8000e4a:	f001 fafd 	bl	8002448 <get_rx_buffer>
 8000e4e:	0003      	movs	r3, r0
 8000e50:	021c      	lsls	r4, r3, #8
 8000e52:	2005      	movs	r0, #5
 8000e54:	f001 faf8 	bl	8002448 <get_rx_buffer>
 8000e58:	0003      	movs	r3, r0
 8000e5a:	4323      	orrs	r3, r4
			(((get_rx_buffer(2) << 8) | get_rx_buffer(3)) == 0x00) && // Address to read = 0
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d119      	bne.n	8000e94 <main+0x1c8>
		  {

			  modbus_status = return_holding_registers(&modbus_tx_len);
 8000e60:	1dfc      	adds	r4, r7, #7
 8000e62:	1d3b      	adds	r3, r7, #4
 8000e64:	0018      	movs	r0, r3
 8000e66:	f000 fe57 	bl	8001b18 <return_holding_registers>
 8000e6a:	0003      	movs	r3, r0
 8000e6c:	7023      	strb	r3, [r4, #0]
			  if(modbus_status != 0)
 8000e6e:	1dfb      	adds	r3, r7, #7
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	b25b      	sxtb	r3, r3
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d00d      	beq.n	8000e94 <main+0x1c8>
			  {
				  holding_register_database[MB_ERRORS] |= 1U << ((modbus_status - 1) + MB_FATAL_ERROR);
 8000e78:	4b71      	ldr	r3, [pc, #452]	@ (8001040 <main+0x374>)
 8000e7a:	891a      	ldrh	r2, [r3, #8]
 8000e7c:	1dfb      	adds	r3, r7, #7
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	b25b      	sxtb	r3, r3
 8000e82:	3314      	adds	r3, #20
 8000e84:	2101      	movs	r1, #1
 8000e86:	4099      	lsls	r1, r3
 8000e88:	000b      	movs	r3, r1
 8000e8a:	b29b      	uxth	r3, r3
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	b29a      	uxth	r2, r3
 8000e90:	4b6b      	ldr	r3, [pc, #428]	@ (8001040 <main+0x374>)
 8000e92:	811a      	strh	r2, [r3, #8]
			  }
		  }
		  modbus_status = modbus_set_rx();
 8000e94:	1dfc      	adds	r4, r7, #7
 8000e96:	f001 f96b 	bl	8002170 <modbus_set_rx>
 8000e9a:	0003      	movs	r3, r0
 8000e9c:	7023      	strb	r3, [r4, #0]
		  if(modbus_status != 0)
 8000e9e:	1dfb      	adds	r3, r7, #7
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	b25b      	sxtb	r3, r3
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d00d      	beq.n	8000ec4 <main+0x1f8>
		  {
			  holding_register_database[MB_ERRORS] |= 1U << ((modbus_status - 1) + MB_FATAL_ERROR);
 8000ea8:	4b65      	ldr	r3, [pc, #404]	@ (8001040 <main+0x374>)
 8000eaa:	891a      	ldrh	r2, [r3, #8]
 8000eac:	1dfb      	adds	r3, r7, #7
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	b25b      	sxtb	r3, r3
 8000eb2:	3314      	adds	r3, #20
 8000eb4:	2101      	movs	r1, #1
 8000eb6:	4099      	lsls	r1, r3
 8000eb8:	000b      	movs	r3, r1
 8000eba:	b29b      	uxth	r3, r3
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	b29a      	uxth	r2, r3
 8000ec0:	4b5f      	ldr	r3, [pc, #380]	@ (8001040 <main+0x374>)
 8000ec2:	811a      	strh	r2, [r3, #8]
		  }
	  }
	  modbus_status = monitor_modbus();
 8000ec4:	1dfc      	adds	r4, r7, #7
 8000ec6:	f001 f975 	bl	80021b4 <monitor_modbus>
 8000eca:	0003      	movs	r3, r0
 8000ecc:	7023      	strb	r3, [r4, #0]
	  if(modbus_status != HAL_OK && modbus_status != HAL_BUSY)
 8000ece:	1dfb      	adds	r3, r7, #7
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	b25b      	sxtb	r3, r3
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d05f      	beq.n	8000f98 <main+0x2cc>
 8000ed8:	1dfb      	adds	r3, r7, #7
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	b25b      	sxtb	r3, r3
 8000ede:	2b02      	cmp	r3, #2
 8000ee0:	d05a      	beq.n	8000f98 <main+0x2cc>
	  {
		  switch(modbus_status)
 8000ee2:	1dfb      	adds	r3, r7, #7
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	b25b      	sxtb	r3, r3
 8000ee8:	2b15      	cmp	r3, #21
 8000eea:	d04f      	beq.n	8000f8c <main+0x2c0>
 8000eec:	dc59      	bgt.n	8000fa2 <main+0x2d6>
 8000eee:	2b14      	cmp	r3, #20
 8000ef0:	d02e      	beq.n	8000f50 <main+0x284>
 8000ef2:	dc56      	bgt.n	8000fa2 <main+0x2d6>
 8000ef4:	2b12      	cmp	r3, #18
 8000ef6:	d151      	bne.n	8000f9c <main+0x2d0>
		  {
			  case MB_TX_TIMEOUT:
			  {
				  for(uint8_t i = 0; i < holding_register_database[MB_TRANSMIT_RETRIES]; i++)
 8000ef8:	1dbb      	adds	r3, r7, #6
 8000efa:	2200      	movs	r2, #0
 8000efc:	701a      	strb	r2, [r3, #0]
 8000efe:	e01f      	b.n	8000f40 <main+0x274>
				  {
					  modbus_status = modbus_send(modbus_tx_len);
 8000f00:	1d3b      	adds	r3, r7, #4
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	1dfc      	adds	r4, r7, #7
 8000f06:	0018      	movs	r0, r3
 8000f08:	f001 f86e 	bl	8001fe8 <modbus_send>
 8000f0c:	0003      	movs	r3, r0
 8000f0e:	7023      	strb	r3, [r4, #0]
					  if(modbus_status != HAL_OK)
 8000f10:	1dfb      	adds	r3, r7, #7
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	b25b      	sxtb	r3, r3
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d00d      	beq.n	8000f36 <main+0x26a>
					  {
						  holding_register_database[MB_ERRORS] |= 1U << ((modbus_status - 1) + MB_FATAL_ERROR);
 8000f1a:	4b49      	ldr	r3, [pc, #292]	@ (8001040 <main+0x374>)
 8000f1c:	891a      	ldrh	r2, [r3, #8]
 8000f1e:	1dfb      	adds	r3, r7, #7
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	b25b      	sxtb	r3, r3
 8000f24:	3314      	adds	r3, #20
 8000f26:	2101      	movs	r1, #1
 8000f28:	4099      	lsls	r1, r3
 8000f2a:	000b      	movs	r3, r1
 8000f2c:	b29b      	uxth	r3, r3
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	b29a      	uxth	r2, r3
 8000f32:	4b43      	ldr	r3, [pc, #268]	@ (8001040 <main+0x374>)
 8000f34:	811a      	strh	r2, [r3, #8]
				  for(uint8_t i = 0; i < holding_register_database[MB_TRANSMIT_RETRIES]; i++)
 8000f36:	1dbb      	adds	r3, r7, #6
 8000f38:	781a      	ldrb	r2, [r3, #0]
 8000f3a:	1dbb      	adds	r3, r7, #6
 8000f3c:	3201      	adds	r2, #1
 8000f3e:	701a      	strb	r2, [r3, #0]
 8000f40:	1dbb      	adds	r3, r7, #6
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	4b3e      	ldr	r3, [pc, #248]	@ (8001040 <main+0x374>)
 8000f48:	88db      	ldrh	r3, [r3, #6]
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	d3d8      	bcc.n	8000f00 <main+0x234>
					  }
				  }
				  break;
 8000f4e:	e028      	b.n	8000fa2 <main+0x2d6>
				  // Error only relates to Modbus Master Nodes
				  break;
			  }
			  case MB_UART_ERROR:
			  {
				  modbus_status = modbus_set_rx();
 8000f50:	1dfc      	adds	r4, r7, #7
 8000f52:	f001 f90d 	bl	8002170 <modbus_set_rx>
 8000f56:	0003      	movs	r3, r0
 8000f58:	7023      	strb	r3, [r4, #0]
				  if(modbus_status != 0)
 8000f5a:	1dfb      	adds	r3, r7, #7
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	b25b      	sxtb	r3, r3
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d01d      	beq.n	8000fa0 <main+0x2d4>
				  {
					  holding_register_database[MB_ERRORS] |= 1U << ((modbus_status - 1) + MB_FATAL_ERROR);
 8000f64:	4b36      	ldr	r3, [pc, #216]	@ (8001040 <main+0x374>)
 8000f66:	891a      	ldrh	r2, [r3, #8]
 8000f68:	1dfb      	adds	r3, r7, #7
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	b25b      	sxtb	r3, r3
 8000f6e:	3314      	adds	r3, #20
 8000f70:	2101      	movs	r1, #1
 8000f72:	4099      	lsls	r1, r3
 8000f74:	000b      	movs	r3, r1
 8000f76:	b29b      	uxth	r3, r3
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	b29a      	uxth	r2, r3
 8000f7c:	4b30      	ldr	r3, [pc, #192]	@ (8001040 <main+0x374>)
 8000f7e:	811a      	strh	r2, [r3, #8]
				  }
				  break;
 8000f80:	e00e      	b.n	8000fa0 <main+0x2d4>
			  }
			  case MB_FATAL_ERROR:
			  {
				  while(modbus_status != HAL_OK)
				  {
					  modbus_status = modbus_reset();
 8000f82:	1dfc      	adds	r4, r7, #7
 8000f84:	f001 f886 	bl	8002094 <modbus_reset>
 8000f88:	0003      	movs	r3, r0
 8000f8a:	7023      	strb	r3, [r4, #0]
				  while(modbus_status != HAL_OK)
 8000f8c:	1dfb      	adds	r3, r7, #7
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	b25b      	sxtb	r3, r3
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d1f5      	bne.n	8000f82 <main+0x2b6>
				  }
				  break;
 8000f96:	e004      	b.n	8000fa2 <main+0x2d6>
			  }
			  default:
 8000f98:	46c0      	nop			@ (mov r8, r8)
 8000f9a:	e002      	b.n	8000fa2 <main+0x2d6>
				  break;
 8000f9c:	46c0      	nop			@ (mov r8, r8)
 8000f9e:	e000      	b.n	8000fa2 <main+0x2d6>
				  break;
 8000fa0:	46c0      	nop			@ (mov r8, r8)
			  }
		  }
		  // Handle a MB_TX_TIMEOUT
	  }

	  if(!holding_register_database[I2C_SHUTDOWN])
 8000fa2:	4b27      	ldr	r3, [pc, #156]	@ (8001040 <main+0x374>)
 8000fa4:	899b      	ldrh	r3, [r3, #12]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d134      	bne.n	8001014 <main+0x348>
	  {
		  if(bno055_rx())
 8000faa:	f7ff fc45 	bl	8000838 <bno055_rx>
 8000fae:	1e03      	subs	r3, r0, #0
 8000fb0:	d017      	beq.n	8000fe2 <main+0x316>
		  {
			  i2c_status = bno055_queue_transaction();
 8000fb2:	1d7c      	adds	r4, r7, #5
 8000fb4:	f7ff fc54 	bl	8000860 <bno055_queue_transaction>
 8000fb8:	0003      	movs	r3, r0
 8000fba:	7023      	strb	r3, [r4, #0]
			  if(i2c_status != 0)
 8000fbc:	1d7b      	adds	r3, r7, #5
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	b25b      	sxtb	r3, r3
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d00d      	beq.n	8000fe2 <main+0x316>
			  {
				  holding_register_database[I2C_ERRORS] |= 1U << ((i2c_status - 1) + I2C_FATAL_ERROR);
 8000fc6:	4b1e      	ldr	r3, [pc, #120]	@ (8001040 <main+0x374>)
 8000fc8:	895a      	ldrh	r2, [r3, #10]
 8000fca:	1d7b      	adds	r3, r7, #5
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	b25b      	sxtb	r3, r3
 8000fd0:	3318      	adds	r3, #24
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	4099      	lsls	r1, r3
 8000fd6:	000b      	movs	r3, r1
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	b29a      	uxth	r2, r3
 8000fde:	4b18      	ldr	r3, [pc, #96]	@ (8001040 <main+0x374>)
 8000fe0:	815a      	strh	r2, [r3, #10]
			  }
		  }

		  i2c_status = monitor_i2c();
 8000fe2:	1d7c      	adds	r4, r7, #5
 8000fe4:	f7ff fc96 	bl	8000914 <monitor_i2c>
 8000fe8:	0003      	movs	r3, r0
 8000fea:	7023      	strb	r3, [r4, #0]
		  if(i2c_status != HAL_OK && i2c_status != HAL_BUSY)
 8000fec:	1d7b      	adds	r3, r7, #5
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	b25b      	sxtb	r3, r3
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d00e      	beq.n	8001014 <main+0x348>
 8000ff6:	1d7b      	adds	r3, r7, #5
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	b25b      	sxtb	r3, r3
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d009      	beq.n	8001014 <main+0x348>
		  {
			  switch(i2c_status)
 8001000:	1d7b      	adds	r3, r7, #5
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	b25b      	sxtb	r3, r3
 8001006:	2b19      	cmp	r3, #25
 8001008:	d000      	beq.n	800100c <main+0x340>
 800100a:	e6c4      	b.n	8000d96 <main+0xca>
					  break;
				  }
				  case I2C_FATAL_ERROR:
				  {
					  // Disable the I2C peripheral
					  holding_register_database[I2C_SHUTDOWN] = 1;
 800100c:	4b0c      	ldr	r3, [pc, #48]	@ (8001040 <main+0x374>)
 800100e:	2201      	movs	r2, #1
 8001010:	819a      	strh	r2, [r3, #12]
					  break;
 8001012:	e000      	b.n	8001016 <main+0x34a>
				  }
				  default:
 8001014:	46c0      	nop			@ (mov r8, r8)
	  if(modbus_rx())
 8001016:	e6be      	b.n	8000d96 <main+0xca>
 8001018:	20000734 	.word	0x20000734
 800101c:	2000073c 	.word	0x2000073c
 8001020:	50000800 	.word	0x50000800
 8001024:	50000400 	.word	0x50000400
 8001028:	200006fc 	.word	0x200006fc
 800102c:	3dcccccd 	.word	0x3dcccccd
 8001030:	40a00000 	.word	0x40a00000
 8001034:	42c80000 	.word	0x42c80000
 8001038:	42200000 	.word	0x42200000
 800103c:	20000748 	.word	0x20000748
 8001040:	20000010 	.word	0x20000010

08001044 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001044:	b590      	push	{r4, r7, lr}
 8001046:	b08f      	sub	sp, #60	@ 0x3c
 8001048:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800104a:	2418      	movs	r4, #24
 800104c:	193b      	adds	r3, r7, r4
 800104e:	0018      	movs	r0, r3
 8001050:	2320      	movs	r3, #32
 8001052:	001a      	movs	r2, r3
 8001054:	2100      	movs	r1, #0
 8001056:	f008 ffa7 	bl	8009fa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800105a:	1d3b      	adds	r3, r7, #4
 800105c:	0018      	movs	r0, r3
 800105e:	2314      	movs	r3, #20
 8001060:	001a      	movs	r2, r3
 8001062:	2100      	movs	r1, #0
 8001064:	f008 ffa0 	bl	8009fa8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001068:	193b      	adds	r3, r7, r4
 800106a:	2201      	movs	r2, #1
 800106c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800106e:	193b      	adds	r3, r7, r4
 8001070:	2280      	movs	r2, #128	@ 0x80
 8001072:	0252      	lsls	r2, r2, #9
 8001074:	605a      	str	r2, [r3, #4]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001076:	193b      	adds	r3, r7, r4
 8001078:	0018      	movs	r0, r3
 800107a:	f005 fec5 	bl	8006e08 <HAL_RCC_OscConfig>
 800107e:	1e03      	subs	r3, r0, #0
 8001080:	d001      	beq.n	8001086 <SystemClock_Config+0x42>
  {
    Error_Handler();
 8001082:	f000 fbad 	bl	80017e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001086:	1d3b      	adds	r3, r7, #4
 8001088:	2207      	movs	r2, #7
 800108a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800108c:	1d3b      	adds	r3, r7, #4
 800108e:	2201      	movs	r2, #1
 8001090:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001092:	1d3b      	adds	r3, r7, #4
 8001094:	2200      	movs	r2, #0
 8001096:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001098:	1d3b      	adds	r3, r7, #4
 800109a:	2200      	movs	r2, #0
 800109c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800109e:	1d3b      	adds	r3, r7, #4
 80010a0:	2200      	movs	r2, #0
 80010a2:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010a4:	1d3b      	adds	r3, r7, #4
 80010a6:	2100      	movs	r1, #0
 80010a8:	0018      	movs	r0, r3
 80010aa:	f006 f8d3 	bl	8007254 <HAL_RCC_ClockConfig>
 80010ae:	1e03      	subs	r3, r0, #0
 80010b0:	d001      	beq.n	80010b6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80010b2:	f000 fb95 	bl	80017e0 <Error_Handler>
  }
}
 80010b6:	46c0      	nop			@ (mov r8, r8)
 80010b8:	46bd      	mov	sp, r7
 80010ba:	b00f      	add	sp, #60	@ 0x3c
 80010bc:	bd90      	pop	{r4, r7, pc}
	...

080010c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010c6:	003b      	movs	r3, r7
 80010c8:	0018      	movs	r0, r3
 80010ca:	230c      	movs	r3, #12
 80010cc:	001a      	movs	r2, r3
 80010ce:	2100      	movs	r1, #0
 80010d0:	f008 ff6a 	bl	8009fa8 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */
  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010d4:	4b75      	ldr	r3, [pc, #468]	@ (80012ac <MX_ADC1_Init+0x1ec>)
 80010d6:	4a76      	ldr	r2, [pc, #472]	@ (80012b0 <MX_ADC1_Init+0x1f0>)
 80010d8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80010da:	4b74      	ldr	r3, [pc, #464]	@ (80012ac <MX_ADC1_Init+0x1ec>)
 80010dc:	22c0      	movs	r2, #192	@ 0xc0
 80010de:	0612      	lsls	r2, r2, #24
 80010e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010e2:	4b72      	ldr	r3, [pc, #456]	@ (80012ac <MX_ADC1_Init+0x1ec>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010e8:	4b70      	ldr	r3, [pc, #448]	@ (80012ac <MX_ADC1_Init+0x1ec>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 80010ee:	4b6f      	ldr	r3, [pc, #444]	@ (80012ac <MX_ADC1_Init+0x1ec>)
 80010f0:	2280      	movs	r2, #128	@ 0x80
 80010f2:	0612      	lsls	r2, r2, #24
 80010f4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80010f6:	4b6d      	ldr	r3, [pc, #436]	@ (80012ac <MX_ADC1_Init+0x1ec>)
 80010f8:	2208      	movs	r2, #8
 80010fa:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010fc:	4b6b      	ldr	r3, [pc, #428]	@ (80012ac <MX_ADC1_Init+0x1ec>)
 80010fe:	2200      	movs	r2, #0
 8001100:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8001102:	4b6a      	ldr	r3, [pc, #424]	@ (80012ac <MX_ADC1_Init+0x1ec>)
 8001104:	2200      	movs	r2, #0
 8001106:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001108:	4b68      	ldr	r3, [pc, #416]	@ (80012ac <MX_ADC1_Init+0x1ec>)
 800110a:	2200      	movs	r2, #0
 800110c:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 0;
 800110e:	4b67      	ldr	r3, [pc, #412]	@ (80012ac <MX_ADC1_Init+0x1ec>)
 8001110:	2200      	movs	r2, #0
 8001112:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8001114:	4b65      	ldr	r3, [pc, #404]	@ (80012ac <MX_ADC1_Init+0x1ec>)
 8001116:	2220      	movs	r2, #32
 8001118:	2101      	movs	r1, #1
 800111a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800111c:	4b63      	ldr	r3, [pc, #396]	@ (80012ac <MX_ADC1_Init+0x1ec>)
 800111e:	2200      	movs	r2, #0
 8001120:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001122:	4b62      	ldr	r3, [pc, #392]	@ (80012ac <MX_ADC1_Init+0x1ec>)
 8001124:	2200      	movs	r2, #0
 8001126:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001128:	4b60      	ldr	r3, [pc, #384]	@ (80012ac <MX_ADC1_Init+0x1ec>)
 800112a:	222c      	movs	r2, #44	@ 0x2c
 800112c:	2101      	movs	r1, #1
 800112e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001130:	4b5e      	ldr	r3, [pc, #376]	@ (80012ac <MX_ADC1_Init+0x1ec>)
 8001132:	2280      	movs	r2, #128	@ 0x80
 8001134:	0152      	lsls	r2, r2, #5
 8001136:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8001138:	4b5c      	ldr	r3, [pc, #368]	@ (80012ac <MX_ADC1_Init+0x1ec>)
 800113a:	2207      	movs	r2, #7
 800113c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800113e:	4b5b      	ldr	r3, [pc, #364]	@ (80012ac <MX_ADC1_Init+0x1ec>)
 8001140:	223c      	movs	r2, #60	@ 0x3c
 8001142:	2100      	movs	r1, #0
 8001144:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_LOW;
 8001146:	4b59      	ldr	r3, [pc, #356]	@ (80012ac <MX_ADC1_Init+0x1ec>)
 8001148:	2280      	movs	r2, #128	@ 0x80
 800114a:	0592      	lsls	r2, r2, #22
 800114c:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800114e:	4b57      	ldr	r3, [pc, #348]	@ (80012ac <MX_ADC1_Init+0x1ec>)
 8001150:	0018      	movs	r0, r3
 8001152:	f002 f885 	bl	8003260 <HAL_ADC_Init>
 8001156:	1e03      	subs	r3, r0, #0
 8001158:	d001      	beq.n	800115e <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 800115a:	f000 fb41 	bl	80017e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800115e:	003b      	movs	r3, r7
 8001160:	2201      	movs	r2, #1
 8001162:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001164:	003b      	movs	r3, r7
 8001166:	2201      	movs	r2, #1
 8001168:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800116a:	003a      	movs	r2, r7
 800116c:	4b4f      	ldr	r3, [pc, #316]	@ (80012ac <MX_ADC1_Init+0x1ec>)
 800116e:	0011      	movs	r1, r2
 8001170:	0018      	movs	r0, r3
 8001172:	f002 fa1b 	bl	80035ac <HAL_ADC_ConfigChannel>
 8001176:	1e03      	subs	r3, r0, #0
 8001178:	d001      	beq.n	800117e <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 800117a:	f000 fb31 	bl	80017e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800117e:	003b      	movs	r3, r7
 8001180:	4a4c      	ldr	r2, [pc, #304]	@ (80012b4 <MX_ADC1_Init+0x1f4>)
 8001182:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001184:	003a      	movs	r2, r7
 8001186:	4b49      	ldr	r3, [pc, #292]	@ (80012ac <MX_ADC1_Init+0x1ec>)
 8001188:	0011      	movs	r1, r2
 800118a:	0018      	movs	r0, r3
 800118c:	f002 fa0e 	bl	80035ac <HAL_ADC_ConfigChannel>
 8001190:	1e03      	subs	r3, r0, #0
 8001192:	d001      	beq.n	8001198 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001194:	f000 fb24 	bl	80017e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001198:	003b      	movs	r3, r7
 800119a:	4a47      	ldr	r2, [pc, #284]	@ (80012b8 <MX_ADC1_Init+0x1f8>)
 800119c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800119e:	003a      	movs	r2, r7
 80011a0:	4b42      	ldr	r3, [pc, #264]	@ (80012ac <MX_ADC1_Init+0x1ec>)
 80011a2:	0011      	movs	r1, r2
 80011a4:	0018      	movs	r0, r3
 80011a6:	f002 fa01 	bl	80035ac <HAL_ADC_ConfigChannel>
 80011aa:	1e03      	subs	r3, r0, #0
 80011ac:	d001      	beq.n	80011b2 <MX_ADC1_Init+0xf2>
  {
    Error_Handler();
 80011ae:	f000 fb17 	bl	80017e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80011b2:	003b      	movs	r3, r7
 80011b4:	4a41      	ldr	r2, [pc, #260]	@ (80012bc <MX_ADC1_Init+0x1fc>)
 80011b6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011b8:	003a      	movs	r2, r7
 80011ba:	4b3c      	ldr	r3, [pc, #240]	@ (80012ac <MX_ADC1_Init+0x1ec>)
 80011bc:	0011      	movs	r1, r2
 80011be:	0018      	movs	r0, r3
 80011c0:	f002 f9f4 	bl	80035ac <HAL_ADC_ConfigChannel>
 80011c4:	1e03      	subs	r3, r0, #0
 80011c6:	d001      	beq.n	80011cc <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
 80011c8:	f000 fb0a 	bl	80017e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80011cc:	003b      	movs	r3, r7
 80011ce:	4a3c      	ldr	r2, [pc, #240]	@ (80012c0 <MX_ADC1_Init+0x200>)
 80011d0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011d2:	003a      	movs	r2, r7
 80011d4:	4b35      	ldr	r3, [pc, #212]	@ (80012ac <MX_ADC1_Init+0x1ec>)
 80011d6:	0011      	movs	r1, r2
 80011d8:	0018      	movs	r0, r3
 80011da:	f002 f9e7 	bl	80035ac <HAL_ADC_ConfigChannel>
 80011de:	1e03      	subs	r3, r0, #0
 80011e0:	d001      	beq.n	80011e6 <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 80011e2:	f000 fafd 	bl	80017e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80011e6:	003b      	movs	r3, r7
 80011e8:	4a36      	ldr	r2, [pc, #216]	@ (80012c4 <MX_ADC1_Init+0x204>)
 80011ea:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011ec:	003a      	movs	r2, r7
 80011ee:	4b2f      	ldr	r3, [pc, #188]	@ (80012ac <MX_ADC1_Init+0x1ec>)
 80011f0:	0011      	movs	r1, r2
 80011f2:	0018      	movs	r0, r3
 80011f4:	f002 f9da 	bl	80035ac <HAL_ADC_ConfigChannel>
 80011f8:	1e03      	subs	r3, r0, #0
 80011fa:	d001      	beq.n	8001200 <MX_ADC1_Init+0x140>
  {
    Error_Handler();
 80011fc:	f000 faf0 	bl	80017e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001200:	003b      	movs	r3, r7
 8001202:	4a31      	ldr	r2, [pc, #196]	@ (80012c8 <MX_ADC1_Init+0x208>)
 8001204:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001206:	003a      	movs	r2, r7
 8001208:	4b28      	ldr	r3, [pc, #160]	@ (80012ac <MX_ADC1_Init+0x1ec>)
 800120a:	0011      	movs	r1, r2
 800120c:	0018      	movs	r0, r3
 800120e:	f002 f9cd 	bl	80035ac <HAL_ADC_ConfigChannel>
 8001212:	1e03      	subs	r3, r0, #0
 8001214:	d001      	beq.n	800121a <MX_ADC1_Init+0x15a>
  {
    Error_Handler();
 8001216:	f000 fae3 	bl	80017e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800121a:	003b      	movs	r3, r7
 800121c:	4a2b      	ldr	r2, [pc, #172]	@ (80012cc <MX_ADC1_Init+0x20c>)
 800121e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001220:	003a      	movs	r2, r7
 8001222:	4b22      	ldr	r3, [pc, #136]	@ (80012ac <MX_ADC1_Init+0x1ec>)
 8001224:	0011      	movs	r1, r2
 8001226:	0018      	movs	r0, r3
 8001228:	f002 f9c0 	bl	80035ac <HAL_ADC_ConfigChannel>
 800122c:	1e03      	subs	r3, r0, #0
 800122e:	d001      	beq.n	8001234 <MX_ADC1_Init+0x174>
  {
    Error_Handler();
 8001230:	f000 fad6 	bl	80017e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001234:	003b      	movs	r3, r7
 8001236:	4a26      	ldr	r2, [pc, #152]	@ (80012d0 <MX_ADC1_Init+0x210>)
 8001238:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800123a:	003a      	movs	r2, r7
 800123c:	4b1b      	ldr	r3, [pc, #108]	@ (80012ac <MX_ADC1_Init+0x1ec>)
 800123e:	0011      	movs	r1, r2
 8001240:	0018      	movs	r0, r3
 8001242:	f002 f9b3 	bl	80035ac <HAL_ADC_ConfigChannel>
 8001246:	1e03      	subs	r3, r0, #0
 8001248:	d001      	beq.n	800124e <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 800124a:	f000 fac9 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  LL_ADC_REG_SetSequencerConfigurable(ADC1, LL_ADC_REG_SEQ_FIXED);
 800124e:	4b18      	ldr	r3, [pc, #96]	@ (80012b0 <MX_ADC1_Init+0x1f0>)
 8001250:	2100      	movs	r1, #0
 8001252:	0018      	movs	r0, r3
 8001254:	f7ff fcf2 	bl	8000c3c <LL_ADC_REG_SetSequencerConfigurable>
  LL_ADC_REG_SetSequencerScanDirection(ADC1, LL_ADC_REG_SEQ_SCAN_DIR_FORWARD);
 8001258:	4b15      	ldr	r3, [pc, #84]	@ (80012b0 <MX_ADC1_Init+0x1f0>)
 800125a:	2100      	movs	r1, #0
 800125c:	0018      	movs	r0, r3
 800125e:	f7ff fd01 	bl	8000c64 <LL_ADC_REG_SetSequencerScanDirection>

  LL_ADC_REG_SetSequencerChannels(ADC1, LL_ADC_CHANNEL_0 | LL_ADC_CHANNEL_1 |
 8001262:	4a1c      	ldr	r2, [pc, #112]	@ (80012d4 <MX_ADC1_Init+0x214>)
 8001264:	4b12      	ldr	r3, [pc, #72]	@ (80012b0 <MX_ADC1_Init+0x1f0>)
 8001266:	0011      	movs	r1, r2
 8001268:	0018      	movs	r0, r3
 800126a:	f7ff fd0d 	bl	8000c88 <LL_ADC_REG_SetSequencerChannels>
		  	  	  	  	  	  	  	  	LL_ADC_CHANNEL_2 | LL_ADC_CHANNEL_3 |
										LL_ADC_CHANNEL_4 | LL_ADC_CHANNEL_5 |
										LL_ADC_CHANNEL_6 | LL_ADC_CHANNEL_7 |
										LL_ADC_CHANNEL_8);
  uint32_t setup_adc_time = HAL_GetTick();
 800126e:	f001 fecb 	bl	8003008 <HAL_GetTick>
 8001272:	0003      	movs	r3, r0
 8001274:	60fb      	str	r3, [r7, #12]

  while(LL_ADC_IsActiveFlag_CCRDY(ADC1) && HAL_GetTick() - setup_adc_time <= 100);
 8001276:	46c0      	nop			@ (mov r8, r8)
 8001278:	4b0d      	ldr	r3, [pc, #52]	@ (80012b0 <MX_ADC1_Init+0x1f0>)
 800127a:	0018      	movs	r0, r3
 800127c:	f7ff fd12 	bl	8000ca4 <LL_ADC_IsActiveFlag_CCRDY>
 8001280:	1e03      	subs	r3, r0, #0
 8001282:	d006      	beq.n	8001292 <MX_ADC1_Init+0x1d2>
 8001284:	f001 fec0 	bl	8003008 <HAL_GetTick>
 8001288:	0002      	movs	r2, r0
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	2b64      	cmp	r3, #100	@ 0x64
 8001290:	d9f2      	bls.n	8001278 <MX_ADC1_Init+0x1b8>
  if(!LL_ADC_IsActiveFlag_CCRDY(ADC1))
 8001292:	4b07      	ldr	r3, [pc, #28]	@ (80012b0 <MX_ADC1_Init+0x1f0>)
 8001294:	0018      	movs	r0, r3
 8001296:	f7ff fd05 	bl	8000ca4 <LL_ADC_IsActiveFlag_CCRDY>
 800129a:	1e03      	subs	r3, r0, #0
 800129c:	d101      	bne.n	80012a2 <MX_ADC1_Init+0x1e2>
  {
	  Error_Handler();
 800129e:	f000 fa9f 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE END ADC1_Init 2 */

}
 80012a2:	46c0      	nop			@ (mov r8, r8)
 80012a4:	46bd      	mov	sp, r7
 80012a6:	b004      	add	sp, #16
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	46c0      	nop			@ (mov r8, r8)
 80012ac:	200002e8 	.word	0x200002e8
 80012b0:	40012400 	.word	0x40012400
 80012b4:	04000002 	.word	0x04000002
 80012b8:	08000004 	.word	0x08000004
 80012bc:	0c000008 	.word	0x0c000008
 80012c0:	10000010 	.word	0x10000010
 80012c4:	14000020 	.word	0x14000020
 80012c8:	18000040 	.word	0x18000040
 80012cc:	1c000080 	.word	0x1c000080
 80012d0:	20000100 	.word	0x20000100
 80012d4:	3c0001ff 	.word	0x3c0001ff

080012d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012dc:	4b1b      	ldr	r3, [pc, #108]	@ (800134c <MX_I2C1_Init+0x74>)
 80012de:	4a1c      	ldr	r2, [pc, #112]	@ (8001350 <MX_I2C1_Init+0x78>)
 80012e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2C;
 80012e2:	4b1a      	ldr	r3, [pc, #104]	@ (800134c <MX_I2C1_Init+0x74>)
 80012e4:	4a1b      	ldr	r2, [pc, #108]	@ (8001354 <MX_I2C1_Init+0x7c>)
 80012e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80012e8:	4b18      	ldr	r3, [pc, #96]	@ (800134c <MX_I2C1_Init+0x74>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012ee:	4b17      	ldr	r3, [pc, #92]	@ (800134c <MX_I2C1_Init+0x74>)
 80012f0:	2201      	movs	r2, #1
 80012f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012f4:	4b15      	ldr	r3, [pc, #84]	@ (800134c <MX_I2C1_Init+0x74>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80012fa:	4b14      	ldr	r3, [pc, #80]	@ (800134c <MX_I2C1_Init+0x74>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001300:	4b12      	ldr	r3, [pc, #72]	@ (800134c <MX_I2C1_Init+0x74>)
 8001302:	2200      	movs	r2, #0
 8001304:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001306:	4b11      	ldr	r3, [pc, #68]	@ (800134c <MX_I2C1_Init+0x74>)
 8001308:	2200      	movs	r2, #0
 800130a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800130c:	4b0f      	ldr	r3, [pc, #60]	@ (800134c <MX_I2C1_Init+0x74>)
 800130e:	2200      	movs	r2, #0
 8001310:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001312:	4b0e      	ldr	r3, [pc, #56]	@ (800134c <MX_I2C1_Init+0x74>)
 8001314:	0018      	movs	r0, r3
 8001316:	f003 fa55 	bl	80047c4 <HAL_I2C_Init>
 800131a:	1e03      	subs	r3, r0, #0
 800131c:	d001      	beq.n	8001322 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800131e:	f000 fa5f 	bl	80017e0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001322:	4b0a      	ldr	r3, [pc, #40]	@ (800134c <MX_I2C1_Init+0x74>)
 8001324:	2100      	movs	r1, #0
 8001326:	0018      	movs	r0, r3
 8001328:	f005 fcd6 	bl	8006cd8 <HAL_I2CEx_ConfigAnalogFilter>
 800132c:	1e03      	subs	r3, r0, #0
 800132e:	d001      	beq.n	8001334 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001330:	f000 fa56 	bl	80017e0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001334:	4b05      	ldr	r3, [pc, #20]	@ (800134c <MX_I2C1_Init+0x74>)
 8001336:	2100      	movs	r1, #0
 8001338:	0018      	movs	r0, r3
 800133a:	f005 fd19 	bl	8006d70 <HAL_I2CEx_ConfigDigitalFilter>
 800133e:	1e03      	subs	r3, r0, #0
 8001340:	d001      	beq.n	8001346 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001342:	f000 fa4d 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001346:	46c0      	nop			@ (mov r8, r8)
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	200003a8 	.word	0x200003a8
 8001350:	40005400 	.word	0x40005400
 8001354:	00201d2c 	.word	0x00201d2c

08001358 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800135c:	4b1b      	ldr	r3, [pc, #108]	@ (80013cc <MX_SPI1_Init+0x74>)
 800135e:	4a1c      	ldr	r2, [pc, #112]	@ (80013d0 <MX_SPI1_Init+0x78>)
 8001360:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001362:	4b1a      	ldr	r3, [pc, #104]	@ (80013cc <MX_SPI1_Init+0x74>)
 8001364:	2282      	movs	r2, #130	@ 0x82
 8001366:	0052      	lsls	r2, r2, #1
 8001368:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800136a:	4b18      	ldr	r3, [pc, #96]	@ (80013cc <MX_SPI1_Init+0x74>)
 800136c:	2200      	movs	r2, #0
 800136e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001370:	4b16      	ldr	r3, [pc, #88]	@ (80013cc <MX_SPI1_Init+0x74>)
 8001372:	22e0      	movs	r2, #224	@ 0xe0
 8001374:	00d2      	lsls	r2, r2, #3
 8001376:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001378:	4b14      	ldr	r3, [pc, #80]	@ (80013cc <MX_SPI1_Init+0x74>)
 800137a:	2200      	movs	r2, #0
 800137c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800137e:	4b13      	ldr	r3, [pc, #76]	@ (80013cc <MX_SPI1_Init+0x74>)
 8001380:	2201      	movs	r2, #1
 8001382:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001384:	4b11      	ldr	r3, [pc, #68]	@ (80013cc <MX_SPI1_Init+0x74>)
 8001386:	2280      	movs	r2, #128	@ 0x80
 8001388:	0092      	lsls	r2, r2, #2
 800138a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800138c:	4b0f      	ldr	r3, [pc, #60]	@ (80013cc <MX_SPI1_Init+0x74>)
 800138e:	2200      	movs	r2, #0
 8001390:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001392:	4b0e      	ldr	r3, [pc, #56]	@ (80013cc <MX_SPI1_Init+0x74>)
 8001394:	2200      	movs	r2, #0
 8001396:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001398:	4b0c      	ldr	r3, [pc, #48]	@ (80013cc <MX_SPI1_Init+0x74>)
 800139a:	2200      	movs	r2, #0
 800139c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800139e:	4b0b      	ldr	r3, [pc, #44]	@ (80013cc <MX_SPI1_Init+0x74>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80013a4:	4b09      	ldr	r3, [pc, #36]	@ (80013cc <MX_SPI1_Init+0x74>)
 80013a6:	2207      	movs	r2, #7
 80013a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80013aa:	4b08      	ldr	r3, [pc, #32]	@ (80013cc <MX_SPI1_Init+0x74>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80013b0:	4b06      	ldr	r3, [pc, #24]	@ (80013cc <MX_SPI1_Init+0x74>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013b6:	4b05      	ldr	r3, [pc, #20]	@ (80013cc <MX_SPI1_Init+0x74>)
 80013b8:	0018      	movs	r0, r3
 80013ba:	f006 f9ed 	bl	8007798 <HAL_SPI_Init>
 80013be:	1e03      	subs	r3, r0, #0
 80013c0:	d001      	beq.n	80013c6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80013c2:	f000 fa0d 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013c6:	46c0      	nop			@ (mov r8, r8)
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	200004b4 	.word	0x200004b4
 80013d0:	40013000 	.word	0x40013000

080013d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b098      	sub	sp, #96	@ 0x60
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013da:	2354      	movs	r3, #84	@ 0x54
 80013dc:	18fb      	adds	r3, r7, r3
 80013de:	0018      	movs	r0, r3
 80013e0:	230c      	movs	r3, #12
 80013e2:	001a      	movs	r2, r3
 80013e4:	2100      	movs	r1, #0
 80013e6:	f008 fddf 	bl	8009fa8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013ea:	2338      	movs	r3, #56	@ 0x38
 80013ec:	18fb      	adds	r3, r7, r3
 80013ee:	0018      	movs	r0, r3
 80013f0:	231c      	movs	r3, #28
 80013f2:	001a      	movs	r2, r3
 80013f4:	2100      	movs	r1, #0
 80013f6:	f008 fdd7 	bl	8009fa8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013fa:	1d3b      	adds	r3, r7, #4
 80013fc:	0018      	movs	r0, r3
 80013fe:	2334      	movs	r3, #52	@ 0x34
 8001400:	001a      	movs	r2, r3
 8001402:	2100      	movs	r1, #0
 8001404:	f008 fdd0 	bl	8009fa8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001408:	4b45      	ldr	r3, [pc, #276]	@ (8001520 <MX_TIM1_Init+0x14c>)
 800140a:	4a46      	ldr	r2, [pc, #280]	@ (8001524 <MX_TIM1_Init+0x150>)
 800140c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10-1;
 800140e:	4b44      	ldr	r3, [pc, #272]	@ (8001520 <MX_TIM1_Init+0x14c>)
 8001410:	2209      	movs	r2, #9
 8001412:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001414:	4b42      	ldr	r3, [pc, #264]	@ (8001520 <MX_TIM1_Init+0x14c>)
 8001416:	2200      	movs	r2, #0
 8001418:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 800141a:	4b41      	ldr	r3, [pc, #260]	@ (8001520 <MX_TIM1_Init+0x14c>)
 800141c:	2263      	movs	r2, #99	@ 0x63
 800141e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001420:	4b3f      	ldr	r3, [pc, #252]	@ (8001520 <MX_TIM1_Init+0x14c>)
 8001422:	2200      	movs	r2, #0
 8001424:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001426:	4b3e      	ldr	r3, [pc, #248]	@ (8001520 <MX_TIM1_Init+0x14c>)
 8001428:	2200      	movs	r2, #0
 800142a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800142c:	4b3c      	ldr	r3, [pc, #240]	@ (8001520 <MX_TIM1_Init+0x14c>)
 800142e:	2280      	movs	r2, #128	@ 0x80
 8001430:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001432:	4b3b      	ldr	r3, [pc, #236]	@ (8001520 <MX_TIM1_Init+0x14c>)
 8001434:	0018      	movs	r0, r3
 8001436:	f006 fabf 	bl	80079b8 <HAL_TIM_PWM_Init>
 800143a:	1e03      	subs	r3, r0, #0
 800143c:	d001      	beq.n	8001442 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800143e:	f000 f9cf 	bl	80017e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001442:	2154      	movs	r1, #84	@ 0x54
 8001444:	187b      	adds	r3, r7, r1
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800144a:	187b      	adds	r3, r7, r1
 800144c:	2200      	movs	r2, #0
 800144e:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001450:	187b      	adds	r3, r7, r1
 8001452:	2200      	movs	r2, #0
 8001454:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001456:	187a      	adds	r2, r7, r1
 8001458:	4b31      	ldr	r3, [pc, #196]	@ (8001520 <MX_TIM1_Init+0x14c>)
 800145a:	0011      	movs	r1, r2
 800145c:	0018      	movs	r0, r3
 800145e:	f006 ff23 	bl	80082a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001462:	1e03      	subs	r3, r0, #0
 8001464:	d001      	beq.n	800146a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001466:	f000 f9bb 	bl	80017e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800146a:	2138      	movs	r1, #56	@ 0x38
 800146c:	187b      	adds	r3, r7, r1
 800146e:	2260      	movs	r2, #96	@ 0x60
 8001470:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001472:	187b      	adds	r3, r7, r1
 8001474:	2200      	movs	r2, #0
 8001476:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001478:	187b      	adds	r3, r7, r1
 800147a:	2200      	movs	r2, #0
 800147c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800147e:	187b      	adds	r3, r7, r1
 8001480:	2200      	movs	r2, #0
 8001482:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001484:	187b      	adds	r3, r7, r1
 8001486:	2200      	movs	r2, #0
 8001488:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800148a:	187b      	adds	r3, r7, r1
 800148c:	2200      	movs	r2, #0
 800148e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001490:	187b      	adds	r3, r7, r1
 8001492:	2200      	movs	r2, #0
 8001494:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001496:	1879      	adds	r1, r7, r1
 8001498:	4b21      	ldr	r3, [pc, #132]	@ (8001520 <MX_TIM1_Init+0x14c>)
 800149a:	2200      	movs	r2, #0
 800149c:	0018      	movs	r0, r3
 800149e:	f006 fae3 	bl	8007a68 <HAL_TIM_PWM_ConfigChannel>
 80014a2:	1e03      	subs	r3, r0, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80014a6:	f000 f99b 	bl	80017e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014aa:	1d3b      	adds	r3, r7, #4
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014b0:	1d3b      	adds	r3, r7, #4
 80014b2:	2200      	movs	r2, #0
 80014b4:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014b6:	1d3b      	adds	r3, r7, #4
 80014b8:	2200      	movs	r2, #0
 80014ba:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014bc:	1d3b      	adds	r3, r7, #4
 80014be:	2200      	movs	r2, #0
 80014c0:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014c2:	1d3b      	adds	r3, r7, #4
 80014c4:	2200      	movs	r2, #0
 80014c6:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014c8:	1d3b      	adds	r3, r7, #4
 80014ca:	2280      	movs	r2, #128	@ 0x80
 80014cc:	0192      	lsls	r2, r2, #6
 80014ce:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80014d0:	1d3b      	adds	r3, r7, #4
 80014d2:	2200      	movs	r2, #0
 80014d4:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80014d6:	1d3b      	adds	r3, r7, #4
 80014d8:	2200      	movs	r2, #0
 80014da:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80014dc:	1d3b      	adds	r3, r7, #4
 80014de:	2200      	movs	r2, #0
 80014e0:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80014e2:	1d3b      	adds	r3, r7, #4
 80014e4:	2280      	movs	r2, #128	@ 0x80
 80014e6:	0492      	lsls	r2, r2, #18
 80014e8:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	2200      	movs	r2, #0
 80014ee:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80014f0:	1d3b      	adds	r3, r7, #4
 80014f2:	2200      	movs	r2, #0
 80014f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014f6:	1d3b      	adds	r3, r7, #4
 80014f8:	2200      	movs	r2, #0
 80014fa:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014fc:	1d3a      	adds	r2, r7, #4
 80014fe:	4b08      	ldr	r3, [pc, #32]	@ (8001520 <MX_TIM1_Init+0x14c>)
 8001500:	0011      	movs	r1, r2
 8001502:	0018      	movs	r0, r3
 8001504:	f006 ff38 	bl	8008378 <HAL_TIMEx_ConfigBreakDeadTime>
 8001508:	1e03      	subs	r3, r0, #0
 800150a:	d001      	beq.n	8001510 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 800150c:	f000 f968 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001510:	4b03      	ldr	r3, [pc, #12]	@ (8001520 <MX_TIM1_Init+0x14c>)
 8001512:	0018      	movs	r0, r3
 8001514:	f001 fad4 	bl	8002ac0 <HAL_TIM_MspPostInit>

}
 8001518:	46c0      	nop			@ (mov r8, r8)
 800151a:	46bd      	mov	sp, r7
 800151c:	b018      	add	sp, #96	@ 0x60
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20000518 	.word	0x20000518
 8001524:	40012c00 	.word	0x40012c00

08001528 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800152c:	4b0e      	ldr	r3, [pc, #56]	@ (8001568 <MX_TIM14_Init+0x40>)
 800152e:	4a0f      	ldr	r2, [pc, #60]	@ (800156c <MX_TIM14_Init+0x44>)
 8001530:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 12 - 1 ;
 8001532:	4b0d      	ldr	r3, [pc, #52]	@ (8001568 <MX_TIM14_Init+0x40>)
 8001534:	220b      	movs	r2, #11
 8001536:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001538:	4b0b      	ldr	r3, [pc, #44]	@ (8001568 <MX_TIM14_Init+0x40>)
 800153a:	2200      	movs	r2, #0
 800153c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 800153e:	4b0a      	ldr	r3, [pc, #40]	@ (8001568 <MX_TIM14_Init+0x40>)
 8001540:	4a0b      	ldr	r2, [pc, #44]	@ (8001570 <MX_TIM14_Init+0x48>)
 8001542:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001544:	4b08      	ldr	r3, [pc, #32]	@ (8001568 <MX_TIM14_Init+0x40>)
 8001546:	2200      	movs	r2, #0
 8001548:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800154a:	4b07      	ldr	r3, [pc, #28]	@ (8001568 <MX_TIM14_Init+0x40>)
 800154c:	2200      	movs	r2, #0
 800154e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001550:	4b05      	ldr	r3, [pc, #20]	@ (8001568 <MX_TIM14_Init+0x40>)
 8001552:	0018      	movs	r0, r3
 8001554:	f006 f9d8 	bl	8007908 <HAL_TIM_Base_Init>
 8001558:	1e03      	subs	r3, r0, #0
 800155a:	d001      	beq.n	8001560 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 800155c:	f000 f940 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001560:	46c0      	nop			@ (mov r8, r8)
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	46c0      	nop			@ (mov r8, r8)
 8001568:	20000564 	.word	0x20000564
 800156c:	40002000 	.word	0x40002000
 8001570:	0000ffff 	.word	0x0000ffff

08001574 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001578:	4b24      	ldr	r3, [pc, #144]	@ (800160c <MX_USART1_UART_Init+0x98>)
 800157a:	4a25      	ldr	r2, [pc, #148]	@ (8001610 <MX_USART1_UART_Init+0x9c>)
 800157c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800157e:	4b23      	ldr	r3, [pc, #140]	@ (800160c <MX_USART1_UART_Init+0x98>)
 8001580:	2296      	movs	r2, #150	@ 0x96
 8001582:	0192      	lsls	r2, r2, #6
 8001584:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001586:	4b21      	ldr	r3, [pc, #132]	@ (800160c <MX_USART1_UART_Init+0x98>)
 8001588:	2200      	movs	r2, #0
 800158a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800158c:	4b1f      	ldr	r3, [pc, #124]	@ (800160c <MX_USART1_UART_Init+0x98>)
 800158e:	2200      	movs	r2, #0
 8001590:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001592:	4b1e      	ldr	r3, [pc, #120]	@ (800160c <MX_USART1_UART_Init+0x98>)
 8001594:	2200      	movs	r2, #0
 8001596:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001598:	4b1c      	ldr	r3, [pc, #112]	@ (800160c <MX_USART1_UART_Init+0x98>)
 800159a:	220c      	movs	r2, #12
 800159c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800159e:	4b1b      	ldr	r3, [pc, #108]	@ (800160c <MX_USART1_UART_Init+0x98>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a4:	4b19      	ldr	r3, [pc, #100]	@ (800160c <MX_USART1_UART_Init+0x98>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015aa:	4b18      	ldr	r3, [pc, #96]	@ (800160c <MX_USART1_UART_Init+0x98>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015b0:	4b16      	ldr	r3, [pc, #88]	@ (800160c <MX_USART1_UART_Init+0x98>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015b6:	4b15      	ldr	r3, [pc, #84]	@ (800160c <MX_USART1_UART_Init+0x98>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80015bc:	4813      	ldr	r0, [pc, #76]	@ (800160c <MX_USART1_UART_Init+0x98>)
 80015be:	2300      	movs	r3, #0
 80015c0:	2200      	movs	r2, #0
 80015c2:	2100      	movs	r1, #0
 80015c4:	f008 fae4 	bl	8009b90 <HAL_RS485Ex_Init>
 80015c8:	1e03      	subs	r3, r0, #0
 80015ca:	d001      	beq.n	80015d0 <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 80015cc:	f000 f908 	bl	80017e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015d0:	4b0e      	ldr	r3, [pc, #56]	@ (800160c <MX_USART1_UART_Init+0x98>)
 80015d2:	2100      	movs	r1, #0
 80015d4:	0018      	movs	r0, r3
 80015d6:	f008 fb9f 	bl	8009d18 <HAL_UARTEx_SetTxFifoThreshold>
 80015da:	1e03      	subs	r3, r0, #0
 80015dc:	d001      	beq.n	80015e2 <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 80015de:	f000 f8ff 	bl	80017e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015e2:	4b0a      	ldr	r3, [pc, #40]	@ (800160c <MX_USART1_UART_Init+0x98>)
 80015e4:	2100      	movs	r1, #0
 80015e6:	0018      	movs	r0, r3
 80015e8:	f008 fbd6 	bl	8009d98 <HAL_UARTEx_SetRxFifoThreshold>
 80015ec:	1e03      	subs	r3, r0, #0
 80015ee:	d001      	beq.n	80015f4 <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 80015f0:	f000 f8f6 	bl	80017e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80015f4:	4b05      	ldr	r3, [pc, #20]	@ (800160c <MX_USART1_UART_Init+0x98>)
 80015f6:	0018      	movs	r0, r3
 80015f8:	f008 fb54 	bl	8009ca4 <HAL_UARTEx_DisableFifoMode>
 80015fc:	1e03      	subs	r3, r0, #0
 80015fe:	d001      	beq.n	8001604 <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 8001600:	f000 f8ee 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001604:	46c0      	nop			@ (mov r8, r8)
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	46c0      	nop			@ (mov r8, r8)
 800160c:	200005b0 	.word	0x200005b0
 8001610:	40013800 	.word	0x40013800

08001614 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800161a:	4b14      	ldr	r3, [pc, #80]	@ (800166c <MX_DMA_Init+0x58>)
 800161c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800161e:	4b13      	ldr	r3, [pc, #76]	@ (800166c <MX_DMA_Init+0x58>)
 8001620:	2101      	movs	r1, #1
 8001622:	430a      	orrs	r2, r1
 8001624:	639a      	str	r2, [r3, #56]	@ 0x38
 8001626:	4b11      	ldr	r3, [pc, #68]	@ (800166c <MX_DMA_Init+0x58>)
 8001628:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800162a:	2201      	movs	r2, #1
 800162c:	4013      	ands	r3, r2
 800162e:	607b      	str	r3, [r7, #4]
 8001630:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001632:	2200      	movs	r2, #0
 8001634:	2100      	movs	r1, #0
 8001636:	2009      	movs	r0, #9
 8001638:	f002 fa5c 	bl	8003af4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800163c:	2009      	movs	r0, #9
 800163e:	f002 fa6e 	bl	8003b1e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8001642:	2200      	movs	r2, #0
 8001644:	2100      	movs	r1, #0
 8001646:	200a      	movs	r0, #10
 8001648:	f002 fa54 	bl	8003af4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800164c:	200a      	movs	r0, #10
 800164e:	f002 fa66 	bl	8003b1e <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_DMA1_CH4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_DMA1_CH4_5_IRQn, 0, 0);
 8001652:	2200      	movs	r2, #0
 8001654:	2100      	movs	r1, #0
 8001656:	200b      	movs	r0, #11
 8001658:	f002 fa4c 	bl	8003af4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_DMA1_CH4_5_IRQn);
 800165c:	200b      	movs	r0, #11
 800165e:	f002 fa5e 	bl	8003b1e <HAL_NVIC_EnableIRQ>

}
 8001662:	46c0      	nop			@ (mov r8, r8)
 8001664:	46bd      	mov	sp, r7
 8001666:	b002      	add	sp, #8
 8001668:	bd80      	pop	{r7, pc}
 800166a:	46c0      	nop			@ (mov r8, r8)
 800166c:	40021000 	.word	0x40021000

08001670 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001670:	b590      	push	{r4, r7, lr}
 8001672:	b08b      	sub	sp, #44	@ 0x2c
 8001674:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001676:	2414      	movs	r4, #20
 8001678:	193b      	adds	r3, r7, r4
 800167a:	0018      	movs	r0, r3
 800167c:	2314      	movs	r3, #20
 800167e:	001a      	movs	r2, r3
 8001680:	2100      	movs	r1, #0
 8001682:	f008 fc91 	bl	8009fa8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001686:	4b50      	ldr	r3, [pc, #320]	@ (80017c8 <MX_GPIO_Init+0x158>)
 8001688:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800168a:	4b4f      	ldr	r3, [pc, #316]	@ (80017c8 <MX_GPIO_Init+0x158>)
 800168c:	2104      	movs	r1, #4
 800168e:	430a      	orrs	r2, r1
 8001690:	635a      	str	r2, [r3, #52]	@ 0x34
 8001692:	4b4d      	ldr	r3, [pc, #308]	@ (80017c8 <MX_GPIO_Init+0x158>)
 8001694:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001696:	2204      	movs	r2, #4
 8001698:	4013      	ands	r3, r2
 800169a:	613b      	str	r3, [r7, #16]
 800169c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800169e:	4b4a      	ldr	r3, [pc, #296]	@ (80017c8 <MX_GPIO_Init+0x158>)
 80016a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80016a2:	4b49      	ldr	r3, [pc, #292]	@ (80017c8 <MX_GPIO_Init+0x158>)
 80016a4:	2120      	movs	r1, #32
 80016a6:	430a      	orrs	r2, r1
 80016a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80016aa:	4b47      	ldr	r3, [pc, #284]	@ (80017c8 <MX_GPIO_Init+0x158>)
 80016ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016ae:	2220      	movs	r2, #32
 80016b0:	4013      	ands	r3, r2
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b6:	4b44      	ldr	r3, [pc, #272]	@ (80017c8 <MX_GPIO_Init+0x158>)
 80016b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80016ba:	4b43      	ldr	r3, [pc, #268]	@ (80017c8 <MX_GPIO_Init+0x158>)
 80016bc:	2101      	movs	r1, #1
 80016be:	430a      	orrs	r2, r1
 80016c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80016c2:	4b41      	ldr	r3, [pc, #260]	@ (80017c8 <MX_GPIO_Init+0x158>)
 80016c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016c6:	2201      	movs	r2, #1
 80016c8:	4013      	ands	r3, r2
 80016ca:	60bb      	str	r3, [r7, #8]
 80016cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ce:	4b3e      	ldr	r3, [pc, #248]	@ (80017c8 <MX_GPIO_Init+0x158>)
 80016d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80016d2:	4b3d      	ldr	r3, [pc, #244]	@ (80017c8 <MX_GPIO_Init+0x158>)
 80016d4:	2102      	movs	r1, #2
 80016d6:	430a      	orrs	r2, r1
 80016d8:	635a      	str	r2, [r3, #52]	@ 0x34
 80016da:	4b3b      	ldr	r3, [pc, #236]	@ (80017c8 <MX_GPIO_Init+0x158>)
 80016dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016de:	2202      	movs	r2, #2
 80016e0:	4013      	ands	r3, r2
 80016e2:	607b      	str	r3, [r7, #4]
 80016e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016e6:	4b38      	ldr	r3, [pc, #224]	@ (80017c8 <MX_GPIO_Init+0x158>)
 80016e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80016ea:	4b37      	ldr	r3, [pc, #220]	@ (80017c8 <MX_GPIO_Init+0x158>)
 80016ec:	2108      	movs	r1, #8
 80016ee:	430a      	orrs	r2, r1
 80016f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80016f2:	4b35      	ldr	r3, [pc, #212]	@ (80017c8 <MX_GPIO_Init+0x158>)
 80016f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016f6:	2208      	movs	r2, #8
 80016f8:	4013      	ands	r3, r2
 80016fa:	603b      	str	r3, [r7, #0]
 80016fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Actuator_A_EN_Pin|Actuator_B_EN_Pin, GPIO_PIN_RESET);
 80016fe:	4b33      	ldr	r3, [pc, #204]	@ (80017cc <MX_GPIO_Init+0x15c>)
 8001700:	2200      	movs	r2, #0
 8001702:	21c0      	movs	r1, #192	@ 0xc0
 8001704:	0018      	movs	r0, r3
 8001706:	f003 f83f 	bl	8004788 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_SET);
 800170a:	4b31      	ldr	r3, [pc, #196]	@ (80017d0 <MX_GPIO_Init+0x160>)
 800170c:	2201      	movs	r2, #1
 800170e:	2101      	movs	r1, #1
 8001710:	0018      	movs	r0, r3
 8001712:	f003 f839 	bl	8004788 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Actuator_C_EN_Pin Encoder_Pulse_B_Pin */
  GPIO_InitStruct.Pin = Actuator_C_EN_Pin|Encoder_Pulse_B_Pin;
 8001716:	193b      	adds	r3, r7, r4
 8001718:	4a2e      	ldr	r2, [pc, #184]	@ (80017d4 <MX_GPIO_Init+0x164>)
 800171a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800171c:	193b      	adds	r3, r7, r4
 800171e:	2200      	movs	r2, #0
 8001720:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001722:	193b      	adds	r3, r7, r4
 8001724:	2200      	movs	r2, #0
 8001726:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001728:	193b      	adds	r3, r7, r4
 800172a:	4a2b      	ldr	r2, [pc, #172]	@ (80017d8 <MX_GPIO_Init+0x168>)
 800172c:	0019      	movs	r1, r3
 800172e:	0010      	movs	r0, r2
 8001730:	f002 fde0 	bl	80042f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Encoder_Pulse_A_Pin */
  GPIO_InitStruct.Pin = Encoder_Pulse_A_Pin;
 8001734:	0021      	movs	r1, r4
 8001736:	187b      	adds	r3, r7, r1
 8001738:	2280      	movs	r2, #128	@ 0x80
 800173a:	0192      	lsls	r2, r2, #6
 800173c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800173e:	000c      	movs	r4, r1
 8001740:	193b      	adds	r3, r7, r4
 8001742:	4a26      	ldr	r2, [pc, #152]	@ (80017dc <MX_GPIO_Init+0x16c>)
 8001744:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001746:	193b      	adds	r3, r7, r4
 8001748:	2200      	movs	r2, #0
 800174a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Encoder_Pulse_A_GPIO_Port, &GPIO_InitStruct);
 800174c:	193b      	adds	r3, r7, r4
 800174e:	4a22      	ldr	r2, [pc, #136]	@ (80017d8 <MX_GPIO_Init+0x168>)
 8001750:	0019      	movs	r1, r3
 8001752:	0010      	movs	r0, r2
 8001754:	f002 fdce 	bl	80042f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Actuator_A_EN_Pin Actuator_B_EN_Pin */
  GPIO_InitStruct.Pin = Actuator_A_EN_Pin|Actuator_B_EN_Pin;
 8001758:	193b      	adds	r3, r7, r4
 800175a:	22c0      	movs	r2, #192	@ 0xc0
 800175c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800175e:	193b      	adds	r3, r7, r4
 8001760:	2201      	movs	r2, #1
 8001762:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	193b      	adds	r3, r7, r4
 8001766:	2200      	movs	r2, #0
 8001768:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176a:	193b      	adds	r3, r7, r4
 800176c:	2200      	movs	r2, #0
 800176e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001770:	193b      	adds	r3, r7, r4
 8001772:	4a16      	ldr	r2, [pc, #88]	@ (80017cc <MX_GPIO_Init+0x15c>)
 8001774:	0019      	movs	r1, r3
 8001776:	0010      	movs	r0, r2
 8001778:	f002 fdbc 	bl	80042f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Actuator_CS_Pin */
  GPIO_InitStruct.Pin = Actuator_CS_Pin;
 800177c:	193b      	adds	r3, r7, r4
 800177e:	2201      	movs	r2, #1
 8001780:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001782:	193b      	adds	r3, r7, r4
 8001784:	2201      	movs	r2, #1
 8001786:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	193b      	adds	r3, r7, r4
 800178a:	2200      	movs	r2, #0
 800178c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800178e:	193b      	adds	r3, r7, r4
 8001790:	2203      	movs	r2, #3
 8001792:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Actuator_CS_GPIO_Port, &GPIO_InitStruct);
 8001794:	193b      	adds	r3, r7, r4
 8001796:	4a0e      	ldr	r2, [pc, #56]	@ (80017d0 <MX_GPIO_Init+0x160>)
 8001798:	0019      	movs	r1, r3
 800179a:	0010      	movs	r0, r2
 800179c:	f002 fdaa 	bl	80042f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_Reset_Pin */
  GPIO_InitStruct.Pin = IMU_Reset_Pin;
 80017a0:	0021      	movs	r1, r4
 80017a2:	187b      	adds	r3, r7, r1
 80017a4:	2202      	movs	r2, #2
 80017a6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017a8:	187b      	adds	r3, r7, r1
 80017aa:	2200      	movs	r2, #0
 80017ac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	187b      	adds	r3, r7, r1
 80017b0:	2200      	movs	r2, #0
 80017b2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(IMU_Reset_GPIO_Port, &GPIO_InitStruct);
 80017b4:	187b      	adds	r3, r7, r1
 80017b6:	4a06      	ldr	r2, [pc, #24]	@ (80017d0 <MX_GPIO_Init+0x160>)
 80017b8:	0019      	movs	r1, r3
 80017ba:	0010      	movs	r0, r2
 80017bc:	f002 fd9a 	bl	80042f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017c0:	46c0      	nop			@ (mov r8, r8)
 80017c2:	46bd      	mov	sp, r7
 80017c4:	b00b      	add	sp, #44	@ 0x2c
 80017c6:	bd90      	pop	{r4, r7, pc}
 80017c8:	40021000 	.word	0x40021000
 80017cc:	50000800 	.word	0x50000800
 80017d0:	50000c00 	.word	0x50000c00
 80017d4:	00004001 	.word	0x00004001
 80017d8:	50000400 	.word	0x50000400
 80017dc:	10110000 	.word	0x10110000

080017e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017e4:	b672      	cpsid	i
}
 80017e6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017e8:	46c0      	nop			@ (mov r8, r8)
 80017ea:	e7fd      	b.n	80017e8 <Error_Handler+0x8>

080017ec <HAL_UARTEx_RxEventCallback>:

/*
 * Modbus reception handler function
 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80017ec:	b590      	push	{r4, r7, lr}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	000a      	movs	r2, r1
 80017f6:	1cbb      	adds	r3, r7, #2
 80017f8:	801a      	strh	r2, [r3, #0]
	if(huart->Instance == USART1)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a45      	ldr	r2, [pc, #276]	@ (8001914 <HAL_UARTEx_RxEventCallback+0x128>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d000      	beq.n	8001806 <HAL_UARTEx_RxEventCallback+0x1a>
 8001804:	e081      	b.n	800190a <HAL_UARTEx_RxEventCallback+0x11e>
	{
		chunk_start_i = chunk_end_i;  // Update the last position before copying new data
 8001806:	4b44      	ldr	r3, [pc, #272]	@ (8001918 <HAL_UARTEx_RxEventCallback+0x12c>)
 8001808:	881b      	ldrh	r3, [r3, #0]
 800180a:	b29a      	uxth	r2, r3
 800180c:	4b43      	ldr	r3, [pc, #268]	@ (800191c <HAL_UARTEx_RxEventCallback+0x130>)
 800180e:	801a      	strh	r2, [r3, #0]
		/*
		 * If the data is large and it is about to exceed the buffer size, we have to route it to the start of the buffer
		 * This is to maintain the circular buffer
		 * The old data in the main buffer will be overlapped
		 */
		if (chunk_start_i + Size > MODBUS_RX_BUFFER_SIZE)  // If the current position + new data size is greater than the main buffer
 8001810:	4b42      	ldr	r3, [pc, #264]	@ (800191c <HAL_UARTEx_RxEventCallback+0x130>)
 8001812:	881b      	ldrh	r3, [r3, #0]
 8001814:	b29b      	uxth	r3, r3
 8001816:	001a      	movs	r2, r3
 8001818:	1cbb      	adds	r3, r7, #2
 800181a:	881b      	ldrh	r3, [r3, #0]
 800181c:	18d2      	adds	r2, r2, r3
 800181e:	2380      	movs	r3, #128	@ 0x80
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	429a      	cmp	r2, r3
 8001824:	dd29      	ble.n	800187a <HAL_UARTEx_RxEventCallback+0x8e>
		{
			uint16_t datatocopy = MODBUS_RX_BUFFER_SIZE - chunk_start_i;  // find out how much space is left in the main buffer
 8001826:	4b3d      	ldr	r3, [pc, #244]	@ (800191c <HAL_UARTEx_RxEventCallback+0x130>)
 8001828:	881b      	ldrh	r3, [r3, #0]
 800182a:	b29a      	uxth	r2, r3
 800182c:	240e      	movs	r4, #14
 800182e:	193b      	adds	r3, r7, r4
 8001830:	2180      	movs	r1, #128	@ 0x80
 8001832:	0049      	lsls	r1, r1, #1
 8001834:	1a8a      	subs	r2, r1, r2
 8001836:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)(modbus_rx_buffer + chunk_start_i), rx_chunk, datatocopy);  // copy data in that remaining space
 8001838:	4b38      	ldr	r3, [pc, #224]	@ (800191c <HAL_UARTEx_RxEventCallback+0x130>)
 800183a:	881b      	ldrh	r3, [r3, #0]
 800183c:	b29b      	uxth	r3, r3
 800183e:	001a      	movs	r2, r3
 8001840:	4b37      	ldr	r3, [pc, #220]	@ (8001920 <HAL_UARTEx_RxEventCallback+0x134>)
 8001842:	18d0      	adds	r0, r2, r3
 8001844:	193b      	adds	r3, r7, r4
 8001846:	881a      	ldrh	r2, [r3, #0]
 8001848:	4b36      	ldr	r3, [pc, #216]	@ (8001924 <HAL_UARTEx_RxEventCallback+0x138>)
 800184a:	0019      	movs	r1, r3
 800184c:	f008 fbd8 	bl	800a000 <memcpy>

			chunk_end_i = (Size - datatocopy);  // update the position
 8001850:	1cba      	adds	r2, r7, #2
 8001852:	193b      	adds	r3, r7, r4
 8001854:	8812      	ldrh	r2, [r2, #0]
 8001856:	881b      	ldrh	r3, [r3, #0]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	b29a      	uxth	r2, r3
 800185c:	4b2e      	ldr	r3, [pc, #184]	@ (8001918 <HAL_UARTEx_RxEventCallback+0x12c>)
 800185e:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)modbus_rx_buffer, (uint8_t *)(rx_chunk + datatocopy), chunk_end_i);  // copy the remaining data
 8001860:	193b      	adds	r3, r7, r4
 8001862:	881a      	ldrh	r2, [r3, #0]
 8001864:	4b2f      	ldr	r3, [pc, #188]	@ (8001924 <HAL_UARTEx_RxEventCallback+0x138>)
 8001866:	18d1      	adds	r1, r2, r3
 8001868:	4b2b      	ldr	r3, [pc, #172]	@ (8001918 <HAL_UARTEx_RxEventCallback+0x12c>)
 800186a:	881b      	ldrh	r3, [r3, #0]
 800186c:	b29b      	uxth	r3, r3
 800186e:	001a      	movs	r2, r3
 8001870:	4b2b      	ldr	r3, [pc, #172]	@ (8001920 <HAL_UARTEx_RxEventCallback+0x134>)
 8001872:	0018      	movs	r0, r3
 8001874:	f008 fbc4 	bl	800a000 <memcpy>
 8001878:	e014      	b.n	80018a4 <HAL_UARTEx_RxEventCallback+0xb8>
		 * If the current position + new data size is less than the main buffer
		 * we will simply copy the data into the buffer and update the position
		 */
		else
		{
			memcpy ((uint8_t *)(modbus_rx_buffer + chunk_start_i), rx_chunk, Size);
 800187a:	4b28      	ldr	r3, [pc, #160]	@ (800191c <HAL_UARTEx_RxEventCallback+0x130>)
 800187c:	881b      	ldrh	r3, [r3, #0]
 800187e:	b29b      	uxth	r3, r3
 8001880:	001a      	movs	r2, r3
 8001882:	4b27      	ldr	r3, [pc, #156]	@ (8001920 <HAL_UARTEx_RxEventCallback+0x134>)
 8001884:	18d0      	adds	r0, r2, r3
 8001886:	1cbb      	adds	r3, r7, #2
 8001888:	881a      	ldrh	r2, [r3, #0]
 800188a:	4b26      	ldr	r3, [pc, #152]	@ (8001924 <HAL_UARTEx_RxEventCallback+0x138>)
 800188c:	0019      	movs	r1, r3
 800188e:	f008 fbb7 	bl	800a000 <memcpy>
			chunk_end_i = Size + chunk_start_i;
 8001892:	4b22      	ldr	r3, [pc, #136]	@ (800191c <HAL_UARTEx_RxEventCallback+0x130>)
 8001894:	881b      	ldrh	r3, [r3, #0]
 8001896:	b29a      	uxth	r2, r3
 8001898:	1cbb      	adds	r3, r7, #2
 800189a:	881b      	ldrh	r3, [r3, #0]
 800189c:	18d3      	adds	r3, r2, r3
 800189e:	b29a      	uxth	r2, r3
 80018a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001918 <HAL_UARTEx_RxEventCallback+0x12c>)
 80018a2:	801a      	strh	r2, [r3, #0]
		}

		if(modbus_header)
 80018a4:	4b20      	ldr	r3, [pc, #128]	@ (8001928 <HAL_UARTEx_RxEventCallback+0x13c>)
 80018a6:	881b      	ldrh	r3, [r3, #0]
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d027      	beq.n	80018fe <HAL_UARTEx_RxEventCallback+0x112>
		{
			// Log the time for chunk miss error handling
			chunk_time = HAL_GetTick();
 80018ae:	f001 fbab 	bl	8003008 <HAL_GetTick>
 80018b2:	0002      	movs	r2, r0
 80018b4:	4b1d      	ldr	r3, [pc, #116]	@ (800192c <HAL_UARTEx_RxEventCallback+0x140>)
 80018b6:	601a      	str	r2, [r3, #0]

			start_index = chunk_start_i;
 80018b8:	4b18      	ldr	r3, [pc, #96]	@ (800191c <HAL_UARTEx_RxEventCallback+0x130>)
 80018ba:	881b      	ldrh	r3, [r3, #0]
 80018bc:	b29a      	uxth	r2, r3
 80018be:	4b1c      	ldr	r3, [pc, #112]	@ (8001930 <HAL_UARTEx_RxEventCallback+0x144>)
 80018c0:	801a      	strh	r2, [r3, #0]
			modbus_header = 0;
 80018c2:	4b19      	ldr	r3, [pc, #100]	@ (8001928 <HAL_UARTEx_RxEventCallback+0x13c>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	801a      	strh	r2, [r3, #0]

			// Setup the DMA to receive the # message bytes + crc + 1 in the event that the # bytes is in the message
			HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rx_chunk, (uint16_t)(((rx_chunk[4] << 8) | rx_chunk[5])*2 + 2 + 1));
 80018c8:	4b16      	ldr	r3, [pc, #88]	@ (8001924 <HAL_UARTEx_RxEventCallback+0x138>)
 80018ca:	791b      	ldrb	r3, [r3, #4]
 80018cc:	021b      	lsls	r3, r3, #8
 80018ce:	4a15      	ldr	r2, [pc, #84]	@ (8001924 <HAL_UARTEx_RxEventCallback+0x138>)
 80018d0:	7952      	ldrb	r2, [r2, #5]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	3301      	adds	r3, #1
 80018d8:	b29b      	uxth	r3, r3
 80018da:	18db      	adds	r3, r3, r3
 80018dc:	b29b      	uxth	r3, r3
 80018de:	3301      	adds	r3, #1
 80018e0:	b29a      	uxth	r2, r3
 80018e2:	4910      	ldr	r1, [pc, #64]	@ (8001924 <HAL_UARTEx_RxEventCallback+0x138>)
 80018e4:	4b13      	ldr	r3, [pc, #76]	@ (8001934 <HAL_UARTEx_RxEventCallback+0x148>)
 80018e6:	0018      	movs	r0, r3
 80018e8:	f008 fa98 	bl	8009e1c <HAL_UARTEx_ReceiveToIdle_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80018ec:	4b12      	ldr	r3, [pc, #72]	@ (8001938 <HAL_UARTEx_RxEventCallback+0x14c>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	4b11      	ldr	r3, [pc, #68]	@ (8001938 <HAL_UARTEx_RxEventCallback+0x14c>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2104      	movs	r1, #4
 80018f8:	438a      	bics	r2, r1
 80018fa:	601a      	str	r2, [r3, #0]
			 */
			modbus_header = 1;
			uart_rx_int = 1;
		}
	}
}
 80018fc:	e005      	b.n	800190a <HAL_UARTEx_RxEventCallback+0x11e>
			modbus_header = 1;
 80018fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001928 <HAL_UARTEx_RxEventCallback+0x13c>)
 8001900:	2201      	movs	r2, #1
 8001902:	801a      	strh	r2, [r3, #0]
			uart_rx_int = 1;
 8001904:	4b0d      	ldr	r3, [pc, #52]	@ (800193c <HAL_UARTEx_RxEventCallback+0x150>)
 8001906:	2201      	movs	r2, #1
 8001908:	701a      	strb	r2, [r3, #0]
}
 800190a:	46c0      	nop			@ (mov r8, r8)
 800190c:	46bd      	mov	sp, r7
 800190e:	b005      	add	sp, #20
 8001910:	bd90      	pop	{r4, r7, pc}
 8001912:	46c0      	nop			@ (mov r8, r8)
 8001914:	40013800 	.word	0x40013800
 8001918:	20000b58 	.word	0x20000b58
 800191c:	20000b56 	.word	0x20000b56
 8001920:	2000074c 	.word	0x2000074c
 8001924:	2000094c 	.word	0x2000094c
 8001928:	200000ac 	.word	0x200000ac
 800192c:	20000b50 	.word	0x20000b50
 8001930:	20000b54 	.word	0x20000b54
 8001934:	200005b0 	.word	0x200005b0
 8001938:	20000644 	.word	0x20000644
 800193c:	20000b5a 	.word	0x20000b5a

08001940 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
	uart_tx_int = 1;
 8001948:	4b03      	ldr	r3, [pc, #12]	@ (8001958 <HAL_UART_TxCpltCallback+0x18>)
 800194a:	2201      	movs	r2, #1
 800194c:	701a      	strb	r2, [r3, #0]
}
 800194e:	46c0      	nop			@ (mov r8, r8)
 8001950:	46bd      	mov	sp, r7
 8001952:	b002      	add	sp, #8
 8001954:	bd80      	pop	{r7, pc}
 8001956:	46c0      	nop			@ (mov r8, r8)
 8001958:	200000ae 	.word	0x200000ae

0800195c <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
	uart_err_int = 1;
 8001964:	4b03      	ldr	r3, [pc, #12]	@ (8001974 <HAL_UART_ErrorCallback+0x18>)
 8001966:	2201      	movs	r2, #1
 8001968:	701a      	strb	r2, [r3, #0]
}
 800196a:	46c0      	nop			@ (mov r8, r8)
 800196c:	46bd      	mov	sp, r7
 800196e:	b002      	add	sp, #8
 8001970:	bd80      	pop	{r7, pc}
 8001972:	46c0      	nop			@ (mov r8, r8)
 8001974:	20000b5b 	.word	0x20000b5b

08001978 <modbus_mic>:
	expected_rx_len = 8;
	return modbus_set_rx();
}

int8_t modbus_mic(uint8_t id, uint8_t function_code, uint8_t size)
{
 8001978:	b5b0      	push	{r4, r5, r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	0004      	movs	r4, r0
 8001980:	0008      	movs	r0, r1
 8001982:	0011      	movs	r1, r2
 8001984:	1dfb      	adds	r3, r7, #7
 8001986:	1c22      	adds	r2, r4, #0
 8001988:	701a      	strb	r2, [r3, #0]
 800198a:	1dbb      	adds	r3, r7, #6
 800198c:	1c02      	adds	r2, r0, #0
 800198e:	701a      	strb	r2, [r3, #0]
 8001990:	1d7b      	adds	r3, r7, #5
 8001992:	1c0a      	adds	r2, r1, #0
 8001994:	701a      	strb	r2, [r3, #0]
	// Check the slave ID
	if(get_rx_buffer(0) != id)
 8001996:	2000      	movs	r0, #0
 8001998:	f000 fd56 	bl	8002448 <get_rx_buffer>
 800199c:	0003      	movs	r3, r0
 800199e:	001a      	movs	r2, r3
 80019a0:	1dfb      	adds	r3, r7, #7
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d004      	beq.n	80019b2 <modbus_mic+0x3a>
	{
		return handle_modbus_error(MB_SLAVE_ID_MISMATCH);
 80019a8:	200f      	movs	r0, #15
 80019aa:	f000 fd7f 	bl	80024ac <handle_modbus_error>
 80019ae:	0003      	movs	r3, r0
 80019b0:	e059      	b.n	8001a66 <modbus_mic+0xee>
	}
	// Check the function code
	if((get_rx_buffer(1) & 0x7F) != function_code)
 80019b2:	2001      	movs	r0, #1
 80019b4:	f000 fd48 	bl	8002448 <get_rx_buffer>
 80019b8:	0003      	movs	r3, r0
 80019ba:	001a      	movs	r2, r3
 80019bc:	237f      	movs	r3, #127	@ 0x7f
 80019be:	401a      	ands	r2, r3
 80019c0:	1dbb      	adds	r3, r7, #6
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d004      	beq.n	80019d2 <modbus_mic+0x5a>
	{
		return handle_modbus_error(MB_FUNCTION_MISMATCH);
 80019c8:	2010      	movs	r0, #16
 80019ca:	f000 fd6f 	bl	80024ac <handle_modbus_error>
 80019ce:	0003      	movs	r3, r0
 80019d0:	e049      	b.n	8001a66 <modbus_mic+0xee>
	}

	// Check the modbus exception codes within the response if there is some sort of execution error
	if(((get_rx_buffer(1) >> 7) & 0x01))
 80019d2:	2001      	movs	r0, #1
 80019d4:	f000 fd38 	bl	8002448 <get_rx_buffer>
 80019d8:	0003      	movs	r3, r0
 80019da:	09db      	lsrs	r3, r3, #7
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	001a      	movs	r2, r3
 80019e0:	2301      	movs	r3, #1
 80019e2:	4013      	ands	r3, r2
 80019e4:	d007      	beq.n	80019f6 <modbus_mic+0x7e>
	{
		return get_rx_buffer(2) + 0x03;
 80019e6:	2002      	movs	r0, #2
 80019e8:	f000 fd2e 	bl	8002448 <get_rx_buffer>
 80019ec:	0003      	movs	r3, r0
 80019ee:	3303      	adds	r3, #3
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	b25b      	sxtb	r3, r3
 80019f4:	e037      	b.n	8001a66 <modbus_mic+0xee>
	}

	// Check the CRC
	if(size >= 5)
 80019f6:	1d7b      	adds	r3, r7, #5
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	2b04      	cmp	r3, #4
 80019fc:	d932      	bls.n	8001a64 <modbus_mic+0xec>
	{
		uint16_t crc = crc_16(modbus_rx_buffer, size - 2);
 80019fe:	1d7b      	adds	r3, r7, #5
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	3b02      	subs	r3, #2
 8001a04:	b2da      	uxtb	r2, r3
 8001a06:	250e      	movs	r5, #14
 8001a08:	197c      	adds	r4, r7, r5
 8001a0a:	4b19      	ldr	r3, [pc, #100]	@ (8001a70 <modbus_mic+0xf8>)
 8001a0c:	0011      	movs	r1, r2
 8001a0e:	0018      	movs	r0, r3
 8001a10:	f000 fd6a 	bl	80024e8 <crc_16>
 8001a14:	0003      	movs	r3, r0
 8001a16:	8023      	strh	r3, [r4, #0]
		if((low_byte(crc) != get_rx_buffer(size - 2)) || (high_byte(crc) != get_rx_buffer(size - 1)))
 8001a18:	197b      	adds	r3, r7, r5
 8001a1a:	881b      	ldrh	r3, [r3, #0]
 8001a1c:	22ff      	movs	r2, #255	@ 0xff
 8001a1e:	4013      	ands	r3, r2
 8001a20:	001c      	movs	r4, r3
 8001a22:	1d7b      	adds	r3, r7, #5
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	3b02      	subs	r3, #2
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	0018      	movs	r0, r3
 8001a2c:	f000 fd0c 	bl	8002448 <get_rx_buffer>
 8001a30:	0003      	movs	r3, r0
 8001a32:	429c      	cmp	r4, r3
 8001a34:	d111      	bne.n	8001a5a <modbus_mic+0xe2>
 8001a36:	197b      	adds	r3, r7, r5
 8001a38:	881b      	ldrh	r3, [r3, #0]
 8001a3a:	0a1b      	lsrs	r3, r3, #8
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	001a      	movs	r2, r3
 8001a40:	23ff      	movs	r3, #255	@ 0xff
 8001a42:	401a      	ands	r2, r3
 8001a44:	0014      	movs	r4, r2
 8001a46:	1d7b      	adds	r3, r7, #5
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	3b01      	subs	r3, #1
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	0018      	movs	r0, r3
 8001a50:	f000 fcfa 	bl	8002448 <get_rx_buffer>
 8001a54:	0003      	movs	r3, r0
 8001a56:	429c      	cmp	r4, r3
 8001a58:	d004      	beq.n	8001a64 <modbus_mic+0xec>
		{
			return handle_modbus_error(MB_INVALID_CRC);
 8001a5a:	2011      	movs	r0, #17
 8001a5c:	f000 fd26 	bl	80024ac <handle_modbus_error>
 8001a60:	0003      	movs	r3, r0
 8001a62:	e000      	b.n	8001a66 <modbus_mic+0xee>
		}
	}
	return MB_SUCCESS;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	0018      	movs	r0, r3
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	b004      	add	sp, #16
 8001a6c:	bdb0      	pop	{r4, r5, r7, pc}
 8001a6e:	46c0      	nop			@ (mov r8, r8)
 8001a70:	2000074c 	.word	0x2000074c

08001a74 <store_rx_buffer>:
{
	return response_interval;
}

void store_rx_buffer()
{
 8001a74:	b590      	push	{r4, r7, lr}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
	// Store the messages data in the response_buffer
	for(uint8_t i = 0; i < get_rx_buffer(2); i++)
 8001a7a:	1dfb      	adds	r3, r7, #7
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	701a      	strb	r2, [r3, #0]
 8001a80:	e027      	b.n	8001ad2 <store_rx_buffer+0x5e>
	{
		if(i < RX_BUFFER_SIZE)
 8001a82:	1dfb      	adds	r3, r7, #7
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	2b7c      	cmp	r3, #124	@ 0x7c
 8001a88:	d81e      	bhi.n	8001ac8 <store_rx_buffer+0x54>
		{
			response_buffer[i] = (get_rx_buffer(2 * i + 3) << 8) | get_rx_buffer(2 * i + 4);
 8001a8a:	1dfb      	adds	r3, r7, #7
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	18db      	adds	r3, r3, r3
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	3303      	adds	r3, #3
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	0018      	movs	r0, r3
 8001a98:	f000 fcd6 	bl	8002448 <get_rx_buffer>
 8001a9c:	0003      	movs	r3, r0
 8001a9e:	021b      	lsls	r3, r3, #8
 8001aa0:	b21c      	sxth	r4, r3
 8001aa2:	1dfb      	adds	r3, r7, #7
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	3302      	adds	r3, #2
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	18db      	adds	r3, r3, r3
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	0018      	movs	r0, r3
 8001ab0:	f000 fcca 	bl	8002448 <get_rx_buffer>
 8001ab4:	0003      	movs	r3, r0
 8001ab6:	b21b      	sxth	r3, r3
 8001ab8:	4323      	orrs	r3, r4
 8001aba:	b219      	sxth	r1, r3
 8001abc:	1dfb      	adds	r3, r7, #7
 8001abe:	781a      	ldrb	r2, [r3, #0]
 8001ac0:	b289      	uxth	r1, r1
 8001ac2:	4b0b      	ldr	r3, [pc, #44]	@ (8001af0 <store_rx_buffer+0x7c>)
 8001ac4:	0052      	lsls	r2, r2, #1
 8001ac6:	52d1      	strh	r1, [r2, r3]
	for(uint8_t i = 0; i < get_rx_buffer(2); i++)
 8001ac8:	1dfb      	adds	r3, r7, #7
 8001aca:	781a      	ldrb	r2, [r3, #0]
 8001acc:	1dfb      	adds	r3, r7, #7
 8001ace:	3201      	adds	r2, #1
 8001ad0:	701a      	strb	r2, [r3, #0]
 8001ad2:	2002      	movs	r0, #2
 8001ad4:	f000 fcb8 	bl	8002448 <get_rx_buffer>
 8001ad8:	0003      	movs	r3, r0
 8001ada:	001a      	movs	r2, r3
 8001adc:	1dfb      	adds	r3, r7, #7
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d3ce      	bcc.n	8001a82 <store_rx_buffer+0xe>
		}
	}
}
 8001ae4:	46c0      	nop			@ (mov r8, r8)
 8001ae6:	46c0      	nop			@ (mov r8, r8)
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	b003      	add	sp, #12
 8001aec:	bd90      	pop	{r4, r7, pc}
 8001aee:	46c0      	nop			@ (mov r8, r8)
 8001af0:	20000a48 	.word	0x20000a48

08001af4 <modbus_rx>:

// Modbus Slave Functions ---------------------------------------------------------------------

#ifdef MB_SLAVE
uint8_t modbus_rx()
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
	if(uart_rx_int)
 8001af8:	4b06      	ldr	r3, [pc, #24]	@ (8001b14 <modbus_rx+0x20>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d004      	beq.n	8001b0c <modbus_rx+0x18>
	{
		uart_rx_int = 0;
 8001b02:	4b04      	ldr	r3, [pc, #16]	@ (8001b14 <modbus_rx+0x20>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	701a      	strb	r2, [r3, #0]
		return 1;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e000      	b.n	8001b0e <modbus_rx+0x1a>
	}
	return 0;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	0018      	movs	r0, r3
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	20000b5a 	.word	0x20000b5a

08001b18 <return_holding_registers>:

int8_t return_holding_registers(uint8_t* tx_len)
{
 8001b18:	b5b0      	push	{r4, r5, r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
	(*tx_len) = 0;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	701a      	strb	r2, [r3, #0]
	// Handle Error Checking
	uint16_t first_register_address = (get_rx_buffer(2) << 8) | get_rx_buffer(3);
 8001b26:	2002      	movs	r0, #2
 8001b28:	f000 fc8e 	bl	8002448 <get_rx_buffer>
 8001b2c:	0003      	movs	r3, r0
 8001b2e:	021b      	lsls	r3, r3, #8
 8001b30:	b21c      	sxth	r4, r3
 8001b32:	2003      	movs	r0, #3
 8001b34:	f000 fc88 	bl	8002448 <get_rx_buffer>
 8001b38:	0003      	movs	r3, r0
 8001b3a:	b21b      	sxth	r3, r3
 8001b3c:	4323      	orrs	r3, r4
 8001b3e:	b21a      	sxth	r2, r3
 8001b40:	230c      	movs	r3, #12
 8001b42:	18fb      	adds	r3, r7, r3
 8001b44:	801a      	strh	r2, [r3, #0]

	// Get the number of registers requested by the master
	uint16_t num_registers = (get_rx_buffer(4) << 8) | get_rx_buffer(5);
 8001b46:	2004      	movs	r0, #4
 8001b48:	f000 fc7e 	bl	8002448 <get_rx_buffer>
 8001b4c:	0003      	movs	r3, r0
 8001b4e:	021b      	lsls	r3, r3, #8
 8001b50:	b21c      	sxth	r4, r3
 8001b52:	2005      	movs	r0, #5
 8001b54:	f000 fc78 	bl	8002448 <get_rx_buffer>
 8001b58:	0003      	movs	r3, r0
 8001b5a:	b21b      	sxth	r3, r3
 8001b5c:	4323      	orrs	r3, r4
 8001b5e:	b21a      	sxth	r2, r3
 8001b60:	210a      	movs	r1, #10
 8001b62:	187b      	adds	r3, r7, r1
 8001b64:	801a      	strh	r2, [r3, #0]

	if(num_registers > RX_BUFFER_SIZE || num_registers < 1) // 125 is the limit according to modbus protocol
 8001b66:	000a      	movs	r2, r1
 8001b68:	18bb      	adds	r3, r7, r2
 8001b6a:	881b      	ldrh	r3, [r3, #0]
 8001b6c:	2b7d      	cmp	r3, #125	@ 0x7d
 8001b6e:	d803      	bhi.n	8001b78 <return_holding_registers+0x60>
 8001b70:	18bb      	adds	r3, r7, r2
 8001b72:	881b      	ldrh	r3, [r3, #0]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d104      	bne.n	8001b82 <return_holding_registers+0x6a>
	{
		return modbus_exception(MB_ILLEGAL_DATA_VALUE);
 8001b78:	2006      	movs	r0, #6
 8001b7a:	f000 f971 	bl	8001e60 <modbus_exception>
 8001b7e:	0003      	movs	r3, r0
 8001b80:	e06e      	b.n	8001c60 <return_holding_registers+0x148>
	}

	uint16_t last_register_address = first_register_address + (num_registers - 1);
 8001b82:	230a      	movs	r3, #10
 8001b84:	18fa      	adds	r2, r7, r3
 8001b86:	230c      	movs	r3, #12
 8001b88:	18fb      	adds	r3, r7, r3
 8001b8a:	8812      	ldrh	r2, [r2, #0]
 8001b8c:	881b      	ldrh	r3, [r3, #0]
 8001b8e:	18d3      	adds	r3, r2, r3
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	2108      	movs	r1, #8
 8001b94:	187b      	adds	r3, r7, r1
 8001b96:	3a01      	subs	r2, #1
 8001b98:	801a      	strh	r2, [r3, #0]

	if(last_register_address > NUM_HOLDING_REGISTERS)
 8001b9a:	187b      	adds	r3, r7, r1
 8001b9c:	881b      	ldrh	r3, [r3, #0]
 8001b9e:	2b4c      	cmp	r3, #76	@ 0x4c
 8001ba0:	d904      	bls.n	8001bac <return_holding_registers+0x94>
	{
		return modbus_exception(MB_ILLEGAL_DATA_ADDRESS);
 8001ba2:	2005      	movs	r0, #5
 8001ba4:	f000 f95c 	bl	8001e60 <modbus_exception>
 8001ba8:	0003      	movs	r3, r0
 8001baa:	e059      	b.n	8001c60 <return_holding_registers+0x148>
	}

	// Return register values

	modbus_tx_buffer[0] = get_rx_buffer(0); // Append Slave id
 8001bac:	2000      	movs	r0, #0
 8001bae:	f000 fc4b 	bl	8002448 <get_rx_buffer>
 8001bb2:	0003      	movs	r3, r0
 8001bb4:	001a      	movs	r2, r3
 8001bb6:	4b2c      	ldr	r3, [pc, #176]	@ (8001c68 <return_holding_registers+0x150>)
 8001bb8:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = get_rx_buffer(1); // Append Function Code
 8001bba:	2001      	movs	r0, #1
 8001bbc:	f000 fc44 	bl	8002448 <get_rx_buffer>
 8001bc0:	0003      	movs	r3, r0
 8001bc2:	001a      	movs	r2, r3
 8001bc4:	4b28      	ldr	r3, [pc, #160]	@ (8001c68 <return_holding_registers+0x150>)
 8001bc6:	705a      	strb	r2, [r3, #1]
	modbus_tx_buffer[2] = num_registers * 2; // Append number of bytes
 8001bc8:	230a      	movs	r3, #10
 8001bca:	18fb      	adds	r3, r7, r3
 8001bcc:	881b      	ldrh	r3, [r3, #0]
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	18db      	adds	r3, r3, r3
 8001bd2:	b2da      	uxtb	r2, r3
 8001bd4:	4b24      	ldr	r3, [pc, #144]	@ (8001c68 <return_holding_registers+0x150>)
 8001bd6:	709a      	strb	r2, [r3, #2]
	(*tx_len) = 3;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2203      	movs	r2, #3
 8001bdc:	701a      	strb	r2, [r3, #0]
//		prim = __get_PRIMASK();
//		__disable_irq();
	}

	// Append the Register Values
	for(uint8_t i = 0; i < num_registers; i++)
 8001bde:	230f      	movs	r3, #15
 8001be0:	18fb      	adds	r3, r7, r3
 8001be2:	2200      	movs	r2, #0
 8001be4:	701a      	strb	r2, [r3, #0]
 8001be6:	e02c      	b.n	8001c42 <return_holding_registers+0x12a>
	{
		modbus_tx_buffer[(*tx_len)++] = high_byte(holding_register_database[first_register_address + i]);
 8001be8:	250c      	movs	r5, #12
 8001bea:	197b      	adds	r3, r7, r5
 8001bec:	881a      	ldrh	r2, [r3, #0]
 8001bee:	240f      	movs	r4, #15
 8001bf0:	193b      	adds	r3, r7, r4
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	18d2      	adds	r2, r2, r3
 8001bf6:	4b1d      	ldr	r3, [pc, #116]	@ (8001c6c <return_holding_registers+0x154>)
 8001bf8:	0052      	lsls	r2, r2, #1
 8001bfa:	5ad3      	ldrh	r3, [r2, r3]
 8001bfc:	0a1b      	lsrs	r3, r3, #8
 8001bfe:	b299      	uxth	r1, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	1c5a      	adds	r2, r3, #1
 8001c06:	b2d0      	uxtb	r0, r2
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	7010      	strb	r0, [r2, #0]
 8001c0c:	001a      	movs	r2, r3
 8001c0e:	b2c9      	uxtb	r1, r1
 8001c10:	4b15      	ldr	r3, [pc, #84]	@ (8001c68 <return_holding_registers+0x150>)
 8001c12:	5499      	strb	r1, [r3, r2]
		modbus_tx_buffer[(*tx_len)++] = low_byte(holding_register_database[first_register_address + i]);
 8001c14:	197b      	adds	r3, r7, r5
 8001c16:	881a      	ldrh	r2, [r3, #0]
 8001c18:	193b      	adds	r3, r7, r4
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	18d2      	adds	r2, r2, r3
 8001c1e:	4b13      	ldr	r3, [pc, #76]	@ (8001c6c <return_holding_registers+0x154>)
 8001c20:	0052      	lsls	r2, r2, #1
 8001c22:	5ad1      	ldrh	r1, [r2, r3]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	1c5a      	adds	r2, r3, #1
 8001c2a:	b2d0      	uxtb	r0, r2
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	7010      	strb	r0, [r2, #0]
 8001c30:	001a      	movs	r2, r3
 8001c32:	b2c9      	uxtb	r1, r1
 8001c34:	4b0c      	ldr	r3, [pc, #48]	@ (8001c68 <return_holding_registers+0x150>)
 8001c36:	5499      	strb	r1, [r3, r2]
	for(uint8_t i = 0; i < num_registers; i++)
 8001c38:	193b      	adds	r3, r7, r4
 8001c3a:	781a      	ldrb	r2, [r3, #0]
 8001c3c:	193b      	adds	r3, r7, r4
 8001c3e:	3201      	adds	r2, #1
 8001c40:	701a      	strb	r2, [r3, #0]
 8001c42:	230f      	movs	r3, #15
 8001c44:	18fb      	adds	r3, r7, r3
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	220a      	movs	r2, #10
 8001c4c:	18ba      	adds	r2, r7, r2
 8001c4e:	8812      	ldrh	r2, [r2, #0]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d8c9      	bhi.n	8001be8 <return_holding_registers+0xd0>
//		if(prim == 0)
//		{
//			__enable_irq();
//		}
	}
	return modbus_send((*tx_len));
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	0018      	movs	r0, r3
 8001c5a:	f000 f9c5 	bl	8001fe8 <modbus_send>
 8001c5e:	0003      	movs	r3, r0
}
 8001c60:	0018      	movs	r0, r3
 8001c62:	46bd      	mov	sp, r7
 8001c64:	b004      	add	sp, #16
 8001c66:	bdb0      	pop	{r4, r5, r7, pc}
 8001c68:	2000084c 	.word	0x2000084c
 8001c6c:	20000010 	.word	0x20000010

08001c70 <edit_multiple_registers>:

int8_t edit_multiple_registers(uint8_t *tx_len)
{
 8001c70:	b5b0      	push	{r4, r5, r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
	(*tx_len) = 0;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	701a      	strb	r2, [r3, #0]
	// Handle Error Checking
	uint16_t first_register_address = (get_rx_buffer(2) << 8) | get_rx_buffer(3);
 8001c7e:	2002      	movs	r0, #2
 8001c80:	f000 fbe2 	bl	8002448 <get_rx_buffer>
 8001c84:	0003      	movs	r3, r0
 8001c86:	021b      	lsls	r3, r3, #8
 8001c88:	b21c      	sxth	r4, r3
 8001c8a:	2003      	movs	r0, #3
 8001c8c:	f000 fbdc 	bl	8002448 <get_rx_buffer>
 8001c90:	0003      	movs	r3, r0
 8001c92:	b21b      	sxth	r3, r3
 8001c94:	4323      	orrs	r3, r4
 8001c96:	b21a      	sxth	r2, r3
 8001c98:	2314      	movs	r3, #20
 8001c9a:	18fb      	adds	r3, r7, r3
 8001c9c:	801a      	strh	r2, [r3, #0]

	uint16_t num_registers = (get_rx_buffer(4) << 8) | get_rx_buffer(5);
 8001c9e:	2004      	movs	r0, #4
 8001ca0:	f000 fbd2 	bl	8002448 <get_rx_buffer>
 8001ca4:	0003      	movs	r3, r0
 8001ca6:	021b      	lsls	r3, r3, #8
 8001ca8:	b21c      	sxth	r4, r3
 8001caa:	2005      	movs	r0, #5
 8001cac:	f000 fbcc 	bl	8002448 <get_rx_buffer>
 8001cb0:	0003      	movs	r3, r0
 8001cb2:	b21b      	sxth	r3, r3
 8001cb4:	4323      	orrs	r3, r4
 8001cb6:	b21a      	sxth	r2, r3
 8001cb8:	2112      	movs	r1, #18
 8001cba:	187b      	adds	r3, r7, r1
 8001cbc:	801a      	strh	r2, [r3, #0]

	if(num_registers > 125 || num_registers < 1) // 125 is the limit according to modbus protocol
 8001cbe:	000a      	movs	r2, r1
 8001cc0:	18bb      	adds	r3, r7, r2
 8001cc2:	881b      	ldrh	r3, [r3, #0]
 8001cc4:	2b7d      	cmp	r3, #125	@ 0x7d
 8001cc6:	d803      	bhi.n	8001cd0 <edit_multiple_registers+0x60>
 8001cc8:	18bb      	adds	r3, r7, r2
 8001cca:	881b      	ldrh	r3, [r3, #0]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d104      	bne.n	8001cda <edit_multiple_registers+0x6a>
	{
		return modbus_exception(MB_ILLEGAL_DATA_VALUE);
 8001cd0:	2006      	movs	r0, #6
 8001cd2:	f000 f8c5 	bl	8001e60 <modbus_exception>
 8001cd6:	0003      	movs	r3, r0
 8001cd8:	e0b9      	b.n	8001e4e <edit_multiple_registers+0x1de>
	}

	uint16_t last_register_address = first_register_address + (num_registers - 1);
 8001cda:	2312      	movs	r3, #18
 8001cdc:	18fa      	adds	r2, r7, r3
 8001cde:	2314      	movs	r3, #20
 8001ce0:	18fb      	adds	r3, r7, r3
 8001ce2:	8812      	ldrh	r2, [r2, #0]
 8001ce4:	881b      	ldrh	r3, [r3, #0]
 8001ce6:	18d3      	adds	r3, r2, r3
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	2110      	movs	r1, #16
 8001cec:	187b      	adds	r3, r7, r1
 8001cee:	3a01      	subs	r2, #1
 8001cf0:	801a      	strh	r2, [r3, #0]

	if(last_register_address > NUM_HOLDING_REGISTERS)
 8001cf2:	187b      	adds	r3, r7, r1
 8001cf4:	881b      	ldrh	r3, [r3, #0]
 8001cf6:	2b4c      	cmp	r3, #76	@ 0x4c
 8001cf8:	d904      	bls.n	8001d04 <edit_multiple_registers+0x94>
	{
		return modbus_exception(MB_ILLEGAL_DATA_ADDRESS);
 8001cfa:	2005      	movs	r0, #5
 8001cfc:	f000 f8b0 	bl	8001e60 <modbus_exception>
 8001d00:	0003      	movs	r3, r0
 8001d02:	e0a4      	b.n	8001e4e <edit_multiple_registers+0x1de>
	}

	// Protect Read only values
	if(((first_register_address >= ADC_0) && (first_register_address <= QUARTERNION_Z)) ||
 8001d04:	2214      	movs	r2, #20
 8001d06:	18bb      	adds	r3, r7, r2
 8001d08:	881b      	ldrh	r3, [r3, #0]
 8001d0a:	2b07      	cmp	r3, #7
 8001d0c:	d903      	bls.n	8001d16 <edit_multiple_registers+0xa6>
 8001d0e:	18bb      	adds	r3, r7, r2
 8001d10:	881b      	ldrh	r3, [r3, #0]
 8001d12:	2b26      	cmp	r3, #38	@ 0x26
 8001d14:	d908      	bls.n	8001d28 <edit_multiple_registers+0xb8>
 8001d16:	2210      	movs	r2, #16
 8001d18:	18bb      	adds	r3, r7, r2
 8001d1a:	881b      	ldrh	r3, [r3, #0]
 8001d1c:	2b07      	cmp	r3, #7
 8001d1e:	d908      	bls.n	8001d32 <edit_multiple_registers+0xc2>
		((last_register_address >= ADC_0) && (last_register_address <= QUARTERNION_Z)))
 8001d20:	18bb      	adds	r3, r7, r2
 8001d22:	881b      	ldrh	r3, [r3, #0]
 8001d24:	2b26      	cmp	r3, #38	@ 0x26
 8001d26:	d804      	bhi.n	8001d32 <edit_multiple_registers+0xc2>
	{
		// Ensure that sensor values are restricted to read-only
		return modbus_exception(MB_ILLEGAL_FUNCTION);
 8001d28:	2004      	movs	r0, #4
 8001d2a:	f000 f899 	bl	8001e60 <modbus_exception>
 8001d2e:	0003      	movs	r3, r0
 8001d30:	e08d      	b.n	8001e4e <edit_multiple_registers+0x1de>
	}

	// Edit holding registers
	modbus_tx_buffer[0] = get_rx_buffer(0); // Append Slave id
 8001d32:	2000      	movs	r0, #0
 8001d34:	f000 fb88 	bl	8002448 <get_rx_buffer>
 8001d38:	0003      	movs	r3, r0
 8001d3a:	001a      	movs	r2, r3
 8001d3c:	4b46      	ldr	r3, [pc, #280]	@ (8001e58 <edit_multiple_registers+0x1e8>)
 8001d3e:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = get_rx_buffer(1); // Append Function Code
 8001d40:	2001      	movs	r0, #1
 8001d42:	f000 fb81 	bl	8002448 <get_rx_buffer>
 8001d46:	0003      	movs	r3, r0
 8001d48:	001a      	movs	r2, r3
 8001d4a:	4b43      	ldr	r3, [pc, #268]	@ (8001e58 <edit_multiple_registers+0x1e8>)
 8001d4c:	705a      	strb	r2, [r3, #1]
	// Append the Write Address (high byte then low byte)
	modbus_tx_buffer[2] = get_rx_buffer(2);
 8001d4e:	2002      	movs	r0, #2
 8001d50:	f000 fb7a 	bl	8002448 <get_rx_buffer>
 8001d54:	0003      	movs	r3, r0
 8001d56:	001a      	movs	r2, r3
 8001d58:	4b3f      	ldr	r3, [pc, #252]	@ (8001e58 <edit_multiple_registers+0x1e8>)
 8001d5a:	709a      	strb	r2, [r3, #2]
	modbus_tx_buffer[3] = get_rx_buffer(3);
 8001d5c:	2003      	movs	r0, #3
 8001d5e:	f000 fb73 	bl	8002448 <get_rx_buffer>
 8001d62:	0003      	movs	r3, r0
 8001d64:	001a      	movs	r2, r3
 8001d66:	4b3c      	ldr	r3, [pc, #240]	@ (8001e58 <edit_multiple_registers+0x1e8>)
 8001d68:	70da      	strb	r2, [r3, #3]
	// Append the quantity of registers to be written (high byte then low byte)
	modbus_tx_buffer[4] = get_rx_buffer(4);
 8001d6a:	2004      	movs	r0, #4
 8001d6c:	f000 fb6c 	bl	8002448 <get_rx_buffer>
 8001d70:	0003      	movs	r3, r0
 8001d72:	001a      	movs	r2, r3
 8001d74:	4b38      	ldr	r3, [pc, #224]	@ (8001e58 <edit_multiple_registers+0x1e8>)
 8001d76:	711a      	strb	r2, [r3, #4]
	modbus_tx_buffer[5] = get_rx_buffer(5);
 8001d78:	2005      	movs	r0, #5
 8001d7a:	f000 fb65 	bl	8002448 <get_rx_buffer>
 8001d7e:	0003      	movs	r3, r0
 8001d80:	001a      	movs	r2, r3
 8001d82:	4b35      	ldr	r3, [pc, #212]	@ (8001e58 <edit_multiple_registers+0x1e8>)
 8001d84:	715a      	strb	r2, [r3, #5]
	(*tx_len) = 6;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2206      	movs	r2, #6
 8001d8a:	701a      	strb	r2, [r3, #0]

	for(uint8_t i = 0; i < num_registers; i++)
 8001d8c:	2317      	movs	r3, #23
 8001d8e:	18fb      	adds	r3, r7, r3
 8001d90:	2200      	movs	r2, #0
 8001d92:	701a      	strb	r2, [r3, #0]
 8001d94:	e032      	b.n	8001dfc <edit_multiple_registers+0x18c>
	{
		holding_register_database[first_register_address + i] = (get_rx_buffer(2 * i + 7) << 8) | get_rx_buffer(2 * i + 8);
 8001d96:	2517      	movs	r5, #23
 8001d98:	197b      	adds	r3, r7, r5
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	18db      	adds	r3, r3, r3
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	3307      	adds	r3, #7
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	0018      	movs	r0, r3
 8001da6:	f000 fb4f 	bl	8002448 <get_rx_buffer>
 8001daa:	0003      	movs	r3, r0
 8001dac:	021b      	lsls	r3, r3, #8
 8001dae:	b21c      	sxth	r4, r3
 8001db0:	197b      	adds	r3, r7, r5
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	3304      	adds	r3, #4
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	18db      	adds	r3, r3, r3
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	0018      	movs	r0, r3
 8001dbe:	f000 fb43 	bl	8002448 <get_rx_buffer>
 8001dc2:	0003      	movs	r3, r0
 8001dc4:	b21b      	sxth	r3, r3
 8001dc6:	4323      	orrs	r3, r4
 8001dc8:	b219      	sxth	r1, r3
 8001dca:	2014      	movs	r0, #20
 8001dcc:	183b      	adds	r3, r7, r0
 8001dce:	881a      	ldrh	r2, [r3, #0]
 8001dd0:	197b      	adds	r3, r7, r5
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	18d2      	adds	r2, r2, r3
 8001dd6:	b289      	uxth	r1, r1
 8001dd8:	4b20      	ldr	r3, [pc, #128]	@ (8001e5c <edit_multiple_registers+0x1ec>)
 8001dda:	0052      	lsls	r2, r2, #1
 8001ddc:	52d1      	strh	r1, [r2, r3]

		// Handle the range boundaries of each writable register
		handle_range(first_register_address + i);
 8001dde:	197b      	adds	r3, r7, r5
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	b29a      	uxth	r2, r3
 8001de4:	183b      	adds	r3, r7, r0
 8001de6:	881b      	ldrh	r3, [r3, #0]
 8001de8:	18d3      	adds	r3, r2, r3
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	0018      	movs	r0, r3
 8001dee:	f000 f85f 	bl	8001eb0 <handle_range>
	for(uint8_t i = 0; i < num_registers; i++)
 8001df2:	197b      	adds	r3, r7, r5
 8001df4:	781a      	ldrb	r2, [r3, #0]
 8001df6:	197b      	adds	r3, r7, r5
 8001df8:	3201      	adds	r2, #1
 8001dfa:	701a      	strb	r2, [r3, #0]
 8001dfc:	2317      	movs	r3, #23
 8001dfe:	18fb      	adds	r3, r7, r3
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	2212      	movs	r2, #18
 8001e06:	18ba      	adds	r2, r7, r2
 8001e08:	8812      	ldrh	r2, [r2, #0]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d8c3      	bhi.n	8001d96 <edit_multiple_registers+0x126>

	// TIMING WORKAROUND START
//	HAL_Delay(1);
	// TIMING WORKAROUND END

	int8_t status = modbus_send((*tx_len));
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	250f      	movs	r5, #15
 8001e14:	197c      	adds	r4, r7, r5
 8001e16:	0018      	movs	r0, r3
 8001e18:	f000 f8e6 	bl	8001fe8 <modbus_send>
 8001e1c:	0003      	movs	r3, r0
 8001e1e:	7023      	strb	r3, [r4, #0]

	if(status == MB_SUCCESS)
 8001e20:	197b      	adds	r3, r7, r5
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	b25b      	sxtb	r3, r3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d10d      	bne.n	8001e46 <edit_multiple_registers+0x1d6>
	{
		// Special Case Modbus Baud Rate Modification
		if((first_register_address <= 1) && last_register_address >= 1)
 8001e2a:	2314      	movs	r3, #20
 8001e2c:	18fb      	adds	r3, r7, r3
 8001e2e:	881b      	ldrh	r3, [r3, #0]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d808      	bhi.n	8001e46 <edit_multiple_registers+0x1d6>
 8001e34:	2310      	movs	r3, #16
 8001e36:	18fb      	adds	r3, r7, r3
 8001e38:	881b      	ldrh	r3, [r3, #0]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <edit_multiple_registers+0x1d6>
		{
			return modbus_change_baud_rate();
 8001e3e:	f000 fa7f 	bl	8002340 <modbus_change_baud_rate>
 8001e42:	0003      	movs	r3, r0
 8001e44:	e003      	b.n	8001e4e <edit_multiple_registers+0x1de>
		}
	}
	return status;
 8001e46:	230f      	movs	r3, #15
 8001e48:	18fb      	adds	r3, r7, r3
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	b25b      	sxtb	r3, r3
}
 8001e4e:	0018      	movs	r0, r3
 8001e50:	46bd      	mov	sp, r7
 8001e52:	b006      	add	sp, #24
 8001e54:	bdb0      	pop	{r4, r5, r7, pc}
 8001e56:	46c0      	nop			@ (mov r8, r8)
 8001e58:	2000084c 	.word	0x2000084c
 8001e5c:	20000010 	.word	0x20000010

08001e60 <modbus_exception>:

int8_t modbus_exception(int8_t exception_code)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	0002      	movs	r2, r0
 8001e68:	1dfb      	adds	r3, r7, #7
 8001e6a:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[0] = get_rx_buffer(0);
 8001e6c:	2000      	movs	r0, #0
 8001e6e:	f000 faeb 	bl	8002448 <get_rx_buffer>
 8001e72:	0003      	movs	r3, r0
 8001e74:	001a      	movs	r2, r3
 8001e76:	4b0d      	ldr	r3, [pc, #52]	@ (8001eac <modbus_exception+0x4c>)
 8001e78:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = get_rx_buffer(1) | 0x80;
 8001e7a:	2001      	movs	r0, #1
 8001e7c:	f000 fae4 	bl	8002448 <get_rx_buffer>
 8001e80:	0003      	movs	r3, r0
 8001e82:	001a      	movs	r2, r3
 8001e84:	2380      	movs	r3, #128	@ 0x80
 8001e86:	425b      	negs	r3, r3
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	b2da      	uxtb	r2, r3
 8001e8c:	4b07      	ldr	r3, [pc, #28]	@ (8001eac <modbus_exception+0x4c>)
 8001e8e:	705a      	strb	r2, [r3, #1]
	modbus_tx_buffer[2] = exception_code - 3; // Subtract 3 to match the modbus defined error code value
 8001e90:	1dfb      	adds	r3, r7, #7
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	3b03      	subs	r3, #3
 8001e96:	b2da      	uxtb	r2, r3
 8001e98:	4b04      	ldr	r3, [pc, #16]	@ (8001eac <modbus_exception+0x4c>)
 8001e9a:	709a      	strb	r2, [r3, #2]

	return modbus_send(3);
 8001e9c:	2003      	movs	r0, #3
 8001e9e:	f000 f8a3 	bl	8001fe8 <modbus_send>
 8001ea2:	0003      	movs	r3, r0
}
 8001ea4:	0018      	movs	r0, r3
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	b002      	add	sp, #8
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	2000084c 	.word	0x2000084c

08001eb0 <handle_range>:

void handle_range(uint16_t holding_register)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	0002      	movs	r2, r0
 8001eb8:	1dbb      	adds	r3, r7, #6
 8001eba:	801a      	strh	r2, [r3, #0]
	switch(holding_register)
 8001ebc:	1dbb      	adds	r3, r7, #6
 8001ebe:	881b      	ldrh	r3, [r3, #0]
 8001ec0:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ec2:	d900      	bls.n	8001ec6 <handle_range+0x16>
 8001ec4:	e085      	b.n	8001fd2 <handle_range+0x122>
 8001ec6:	009a      	lsls	r2, r3, #2
 8001ec8:	4b44      	ldr	r3, [pc, #272]	@ (8001fdc <handle_range+0x12c>)
 8001eca:	18d3      	adds	r3, r2, r3
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	469f      	mov	pc, r3
	{
		case MODBUS_ID:
		{
			if(holding_register_database[holding_register] > 0xFF)
 8001ed0:	1dbb      	adds	r3, r7, #6
 8001ed2:	881a      	ldrh	r2, [r3, #0]
 8001ed4:	4b42      	ldr	r3, [pc, #264]	@ (8001fe0 <handle_range+0x130>)
 8001ed6:	0052      	lsls	r2, r2, #1
 8001ed8:	5ad3      	ldrh	r3, [r2, r3]
 8001eda:	2bff      	cmp	r3, #255	@ 0xff
 8001edc:	d800      	bhi.n	8001ee0 <handle_range+0x30>
 8001ede:	e06d      	b.n	8001fbc <handle_range+0x10c>
			{
				holding_register_database[holding_register] = 0xFF;
 8001ee0:	1dbb      	adds	r3, r7, #6
 8001ee2:	881a      	ldrh	r2, [r3, #0]
 8001ee4:	4b3e      	ldr	r3, [pc, #248]	@ (8001fe0 <handle_range+0x130>)
 8001ee6:	0052      	lsls	r2, r2, #1
 8001ee8:	21ff      	movs	r1, #255	@ 0xff
 8001eea:	52d1      	strh	r1, [r2, r3]
			}
			break;
 8001eec:	e066      	b.n	8001fbc <handle_range+0x10c>
		}
		case MB_BAUD_RATE:
		{
			if(holding_register_database[holding_register] < BAUD_RATE_4800)
 8001eee:	1dbb      	adds	r3, r7, #6
 8001ef0:	881a      	ldrh	r2, [r3, #0]
 8001ef2:	4b3b      	ldr	r3, [pc, #236]	@ (8001fe0 <handle_range+0x130>)
 8001ef4:	0052      	lsls	r2, r2, #1
 8001ef6:	5ad3      	ldrh	r3, [r2, r3]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d806      	bhi.n	8001f0a <handle_range+0x5a>
			{
				holding_register_database[holding_register] = BAUD_RATE_4800;
 8001efc:	1dbb      	adds	r3, r7, #6
 8001efe:	881a      	ldrh	r2, [r3, #0]
 8001f00:	4b37      	ldr	r3, [pc, #220]	@ (8001fe0 <handle_range+0x130>)
 8001f02:	0052      	lsls	r2, r2, #1
 8001f04:	2102      	movs	r1, #2
 8001f06:	52d1      	strh	r1, [r2, r3]
			}
			else if(holding_register_database[holding_register] > BAUD_RATE_256000)
			{
				holding_register_database[holding_register] = BAUD_RATE_256000;
			}
			break;
 8001f08:	e05a      	b.n	8001fc0 <handle_range+0x110>
			else if(holding_register_database[holding_register] > BAUD_RATE_256000)
 8001f0a:	1dbb      	adds	r3, r7, #6
 8001f0c:	881a      	ldrh	r2, [r3, #0]
 8001f0e:	4b34      	ldr	r3, [pc, #208]	@ (8001fe0 <handle_range+0x130>)
 8001f10:	0052      	lsls	r2, r2, #1
 8001f12:	5ad3      	ldrh	r3, [r2, r3]
 8001f14:	2b09      	cmp	r3, #9
 8001f16:	d953      	bls.n	8001fc0 <handle_range+0x110>
				holding_register_database[holding_register] = BAUD_RATE_256000;
 8001f18:	1dbb      	adds	r3, r7, #6
 8001f1a:	881a      	ldrh	r2, [r3, #0]
 8001f1c:	4b30      	ldr	r3, [pc, #192]	@ (8001fe0 <handle_range+0x130>)
 8001f1e:	0052      	lsls	r2, r2, #1
 8001f20:	2109      	movs	r1, #9
 8001f22:	52d1      	strh	r1, [r2, r3]
			break;
 8001f24:	e04c      	b.n	8001fc0 <handle_range+0x110>
		}
		case MB_TRANSMIT_TIMEOUT:
		{
			if(holding_register_database[holding_register] < 1000)
 8001f26:	1dbb      	adds	r3, r7, #6
 8001f28:	881a      	ldrh	r2, [r3, #0]
 8001f2a:	4b2d      	ldr	r3, [pc, #180]	@ (8001fe0 <handle_range+0x130>)
 8001f2c:	0052      	lsls	r2, r2, #1
 8001f2e:	5ad2      	ldrh	r2, [r2, r3]
 8001f30:	23fa      	movs	r3, #250	@ 0xfa
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d207      	bcs.n	8001f48 <handle_range+0x98>
			{
				holding_register_database[holding_register] = 1000;
 8001f38:	1dbb      	adds	r3, r7, #6
 8001f3a:	881a      	ldrh	r2, [r3, #0]
 8001f3c:	4b28      	ldr	r3, [pc, #160]	@ (8001fe0 <handle_range+0x130>)
 8001f3e:	0052      	lsls	r2, r2, #1
 8001f40:	21fa      	movs	r1, #250	@ 0xfa
 8001f42:	0089      	lsls	r1, r1, #2
 8001f44:	52d1      	strh	r1, [r2, r3]
			}
			else if(holding_register_database[holding_register] > 5)
			{
				holding_register_database[holding_register] = 5;
			}
			break;
 8001f46:	e03d      	b.n	8001fc4 <handle_range+0x114>
			else if(holding_register_database[holding_register] > 5)
 8001f48:	1dbb      	adds	r3, r7, #6
 8001f4a:	881a      	ldrh	r2, [r3, #0]
 8001f4c:	4b24      	ldr	r3, [pc, #144]	@ (8001fe0 <handle_range+0x130>)
 8001f4e:	0052      	lsls	r2, r2, #1
 8001f50:	5ad3      	ldrh	r3, [r2, r3]
 8001f52:	2b05      	cmp	r3, #5
 8001f54:	d936      	bls.n	8001fc4 <handle_range+0x114>
				holding_register_database[holding_register] = 5;
 8001f56:	1dbb      	adds	r3, r7, #6
 8001f58:	881a      	ldrh	r2, [r3, #0]
 8001f5a:	4b21      	ldr	r3, [pc, #132]	@ (8001fe0 <handle_range+0x130>)
 8001f5c:	0052      	lsls	r2, r2, #1
 8001f5e:	2105      	movs	r1, #5
 8001f60:	52d1      	strh	r1, [r2, r3]
			break;
 8001f62:	e02f      	b.n	8001fc4 <handle_range+0x114>
		}
		case I2C_ERRORS:
		{
			if(holding_register_database[holding_register] < 0x7F)
 8001f64:	1dbb      	adds	r3, r7, #6
 8001f66:	881a      	ldrh	r2, [r3, #0]
 8001f68:	4b1d      	ldr	r3, [pc, #116]	@ (8001fe0 <handle_range+0x130>)
 8001f6a:	0052      	lsls	r2, r2, #1
 8001f6c:	5ad3      	ldrh	r3, [r2, r3]
 8001f6e:	2b7e      	cmp	r3, #126	@ 0x7e
 8001f70:	d82a      	bhi.n	8001fc8 <handle_range+0x118>
			{
				holding_register_database[holding_register] = 0x7F;
 8001f72:	1dbb      	adds	r3, r7, #6
 8001f74:	881a      	ldrh	r2, [r3, #0]
 8001f76:	4b1a      	ldr	r3, [pc, #104]	@ (8001fe0 <handle_range+0x130>)
 8001f78:	0052      	lsls	r2, r2, #1
 8001f7a:	217f      	movs	r1, #127	@ 0x7f
 8001f7c:	52d1      	strh	r1, [r2, r3]
			}
			break;
 8001f7e:	e023      	b.n	8001fc8 <handle_range+0x118>
		}
		case I2C_SHUTDOWN ... AUTOPILOT:
		{
			if(holding_register_database[holding_register] > 1)
 8001f80:	1dbb      	adds	r3, r7, #6
 8001f82:	881a      	ldrh	r2, [r3, #0]
 8001f84:	4b16      	ldr	r3, [pc, #88]	@ (8001fe0 <handle_range+0x130>)
 8001f86:	0052      	lsls	r2, r2, #1
 8001f88:	5ad3      	ldrh	r3, [r2, r3]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d91e      	bls.n	8001fcc <handle_range+0x11c>
			{
				holding_register_database[holding_register] = 1;
 8001f8e:	1dbb      	adds	r3, r7, #6
 8001f90:	881a      	ldrh	r2, [r3, #0]
 8001f92:	4b13      	ldr	r3, [pc, #76]	@ (8001fe0 <handle_range+0x130>)
 8001f94:	0052      	lsls	r2, r2, #1
 8001f96:	2101      	movs	r1, #1
 8001f98:	52d1      	strh	r1, [r2, r3]
			}
			break;
 8001f9a:	e017      	b.n	8001fcc <handle_range+0x11c>
		}
		case ACTUATOR_A_TARGET ... ACTUATOR_C_TARGET:
		{
			if(holding_register_database[holding_register] > 0x0FFF)
 8001f9c:	1dbb      	adds	r3, r7, #6
 8001f9e:	881a      	ldrh	r2, [r3, #0]
 8001fa0:	4b0f      	ldr	r3, [pc, #60]	@ (8001fe0 <handle_range+0x130>)
 8001fa2:	0052      	lsls	r2, r2, #1
 8001fa4:	5ad2      	ldrh	r2, [r2, r3]
 8001fa6:	2380      	movs	r3, #128	@ 0x80
 8001fa8:	015b      	lsls	r3, r3, #5
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d310      	bcc.n	8001fd0 <handle_range+0x120>
			{
				holding_register_database[holding_register] = 0x0FFF;
 8001fae:	1dbb      	adds	r3, r7, #6
 8001fb0:	881a      	ldrh	r2, [r3, #0]
 8001fb2:	4b0b      	ldr	r3, [pc, #44]	@ (8001fe0 <handle_range+0x130>)
 8001fb4:	0052      	lsls	r2, r2, #1
 8001fb6:	490b      	ldr	r1, [pc, #44]	@ (8001fe4 <handle_range+0x134>)
 8001fb8:	52d1      	strh	r1, [r2, r3]
			}
			break;
 8001fba:	e009      	b.n	8001fd0 <handle_range+0x120>
			break;
 8001fbc:	46c0      	nop			@ (mov r8, r8)
 8001fbe:	e008      	b.n	8001fd2 <handle_range+0x122>
			break;
 8001fc0:	46c0      	nop			@ (mov r8, r8)
 8001fc2:	e006      	b.n	8001fd2 <handle_range+0x122>
			break;
 8001fc4:	46c0      	nop			@ (mov r8, r8)
 8001fc6:	e004      	b.n	8001fd2 <handle_range+0x122>
			break;
 8001fc8:	46c0      	nop			@ (mov r8, r8)
 8001fca:	e002      	b.n	8001fd2 <handle_range+0x122>
			break;
 8001fcc:	46c0      	nop			@ (mov r8, r8)
 8001fce:	e000      	b.n	8001fd2 <handle_range+0x122>
			break;
 8001fd0:	46c0      	nop			@ (mov r8, r8)
		}
	}
}
 8001fd2:	46c0      	nop			@ (mov r8, r8)
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	b002      	add	sp, #8
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	46c0      	nop			@ (mov r8, r8)
 8001fdc:	0800a22c 	.word	0x0800a22c
 8001fe0:	20000010 	.word	0x20000010
 8001fe4:	00000fff 	.word	0x00000fff

08001fe8 <modbus_send>:
#endif // MB_SLAVE

// General Modbus Functions -------------------------------------------------------------------

int8_t modbus_send(uint8_t size)
{
 8001fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	0002      	movs	r2, r0
 8001ff0:	1dfb      	adds	r3, r7, #7
 8001ff2:	701a      	strb	r2, [r3, #0]
	int8_t status = HAL_OK;
 8001ff4:	250f      	movs	r5, #15
 8001ff6:	197b      	adds	r3, r7, r5
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	701a      	strb	r2, [r3, #0]
	// Append CRC (low byte then high byte)
	uint16_t crc = crc_16(modbus_tx_buffer, size);
 8001ffc:	260c      	movs	r6, #12
 8001ffe:	19bc      	adds	r4, r7, r6
 8002000:	1dfb      	adds	r3, r7, #7
 8002002:	781a      	ldrb	r2, [r3, #0]
 8002004:	4b1e      	ldr	r3, [pc, #120]	@ (8002080 <modbus_send+0x98>)
 8002006:	0011      	movs	r1, r2
 8002008:	0018      	movs	r0, r3
 800200a:	f000 fa6d 	bl	80024e8 <crc_16>
 800200e:	0003      	movs	r3, r0
 8002010:	8023      	strh	r3, [r4, #0]
	modbus_tx_buffer[size] = low_byte(crc);
 8002012:	1dfb      	adds	r3, r7, #7
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	19ba      	adds	r2, r7, r6
 8002018:	8812      	ldrh	r2, [r2, #0]
 800201a:	b2d1      	uxtb	r1, r2
 800201c:	4a18      	ldr	r2, [pc, #96]	@ (8002080 <modbus_send+0x98>)
 800201e:	54d1      	strb	r1, [r2, r3]
	modbus_tx_buffer[size + 1] = high_byte(crc);
 8002020:	19bb      	adds	r3, r7, r6
 8002022:	881b      	ldrh	r3, [r3, #0]
 8002024:	0a1b      	lsrs	r3, r3, #8
 8002026:	b29a      	uxth	r2, r3
 8002028:	1dfb      	adds	r3, r7, #7
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	3301      	adds	r3, #1
 800202e:	b2d1      	uxtb	r1, r2
 8002030:	4a13      	ldr	r2, [pc, #76]	@ (8002080 <modbus_send+0x98>)
 8002032:	54d1      	strb	r1, [r2, r3]

	uart_tx_int = 0; // This will enable tx timeout monitoring
 8002034:	4b13      	ldr	r3, [pc, #76]	@ (8002084 <modbus_send+0x9c>)
 8002036:	2200      	movs	r2, #0
 8002038:	701a      	strb	r2, [r3, #0]
	tx_time = HAL_GetTick();
 800203a:	f000 ffe5 	bl	8003008 <HAL_GetTick>
 800203e:	0002      	movs	r2, r0
 8002040:	4b11      	ldr	r3, [pc, #68]	@ (8002088 <modbus_send+0xa0>)
 8002042:	601a      	str	r2, [r3, #0]
	status = HAL_UART_Transmit_DMA(&huart1, modbus_tx_buffer, size + 2);
 8002044:	1dfb      	adds	r3, r7, #7
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	b29b      	uxth	r3, r3
 800204a:	3302      	adds	r3, #2
 800204c:	b29a      	uxth	r2, r3
 800204e:	490c      	ldr	r1, [pc, #48]	@ (8002080 <modbus_send+0x98>)
 8002050:	4b0e      	ldr	r3, [pc, #56]	@ (800208c <modbus_send+0xa4>)
 8002052:	0018      	movs	r0, r3
 8002054:	f006 fa6c 	bl	8008530 <HAL_UART_Transmit_DMA>
 8002058:	0003      	movs	r3, r0
 800205a:	001a      	movs	r2, r3
 800205c:	197b      	adds	r3, r7, r5
 800205e:	701a      	strb	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(&hdma_usart1_tx, DMA_IT_HT);
 8002060:	4b0b      	ldr	r3, [pc, #44]	@ (8002090 <modbus_send+0xa8>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	4b0a      	ldr	r3, [pc, #40]	@ (8002090 <modbus_send+0xa8>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2104      	movs	r1, #4
 800206c:	438a      	bics	r2, r1
 800206e:	601a      	str	r2, [r3, #0]
	return status;
 8002070:	197b      	adds	r3, r7, r5
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	b25b      	sxtb	r3, r3
}
 8002076:	0018      	movs	r0, r3
 8002078:	46bd      	mov	sp, r7
 800207a:	b005      	add	sp, #20
 800207c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800207e:	46c0      	nop			@ (mov r8, r8)
 8002080:	2000084c 	.word	0x2000084c
 8002084:	200000ae 	.word	0x200000ae
 8002088:	20000b4c 	.word	0x20000b4c
 800208c:	200005b0 	.word	0x200005b0
 8002090:	200006a0 	.word	0x200006a0

08002094 <modbus_reset>:

int8_t modbus_reset()
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
	int8_t status = 0;
 800209a:	1dfb      	adds	r3, r7, #7
 800209c:	2200      	movs	r2, #0
 800209e:	701a      	strb	r2, [r3, #0]
	status = HAL_UART_Abort(&huart1);
 80020a0:	4b30      	ldr	r3, [pc, #192]	@ (8002164 <modbus_reset+0xd0>)
 80020a2:	0018      	movs	r0, r3
 80020a4:	f006 fad6 	bl	8008654 <HAL_UART_Abort>
 80020a8:	0003      	movs	r3, r0
 80020aa:	001a      	movs	r2, r3
 80020ac:	1dfb      	adds	r3, r7, #7
 80020ae:	701a      	strb	r2, [r3, #0]
	status |= HAL_UART_DeInit(&huart1);
 80020b0:	4b2c      	ldr	r3, [pc, #176]	@ (8002164 <modbus_reset+0xd0>)
 80020b2:	0018      	movs	r0, r3
 80020b4:	f006 f9fc 	bl	80084b0 <HAL_UART_DeInit>
 80020b8:	0003      	movs	r3, r0
 80020ba:	b259      	sxtb	r1, r3
 80020bc:	1dfb      	adds	r3, r7, #7
 80020be:	1dfa      	adds	r2, r7, #7
 80020c0:	7812      	ldrb	r2, [r2, #0]
 80020c2:	430a      	orrs	r2, r1
 80020c4:	701a      	strb	r2, [r3, #0]
	__USART1_FORCE_RESET();
 80020c6:	4b28      	ldr	r3, [pc, #160]	@ (8002168 <modbus_reset+0xd4>)
 80020c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020ca:	4b27      	ldr	r3, [pc, #156]	@ (8002168 <modbus_reset+0xd4>)
 80020cc:	2180      	movs	r1, #128	@ 0x80
 80020ce:	01c9      	lsls	r1, r1, #7
 80020d0:	430a      	orrs	r2, r1
 80020d2:	631a      	str	r2, [r3, #48]	@ 0x30
	HAL_Delay(100);
 80020d4:	2064      	movs	r0, #100	@ 0x64
 80020d6:	f000 ffa1 	bl	800301c <HAL_Delay>
	__USART1_RELEASE_RESET();
 80020da:	4b23      	ldr	r3, [pc, #140]	@ (8002168 <modbus_reset+0xd4>)
 80020dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020de:	4b22      	ldr	r3, [pc, #136]	@ (8002168 <modbus_reset+0xd4>)
 80020e0:	4922      	ldr	r1, [pc, #136]	@ (800216c <modbus_reset+0xd8>)
 80020e2:	400a      	ands	r2, r1
 80020e4:	631a      	str	r2, [r3, #48]	@ 0x30
	status = HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0);
 80020e6:	481f      	ldr	r0, [pc, #124]	@ (8002164 <modbus_reset+0xd0>)
 80020e8:	2300      	movs	r3, #0
 80020ea:	2200      	movs	r2, #0
 80020ec:	2100      	movs	r1, #0
 80020ee:	f007 fd4f 	bl	8009b90 <HAL_RS485Ex_Init>
 80020f2:	0003      	movs	r3, r0
 80020f4:	001a      	movs	r2, r3
 80020f6:	1dfb      	adds	r3, r7, #7
 80020f8:	701a      	strb	r2, [r3, #0]
	status |= HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8);
 80020fa:	4b1a      	ldr	r3, [pc, #104]	@ (8002164 <modbus_reset+0xd0>)
 80020fc:	2100      	movs	r1, #0
 80020fe:	0018      	movs	r0, r3
 8002100:	f007 fe0a 	bl	8009d18 <HAL_UARTEx_SetTxFifoThreshold>
 8002104:	0003      	movs	r3, r0
 8002106:	b259      	sxtb	r1, r3
 8002108:	1dfb      	adds	r3, r7, #7
 800210a:	1dfa      	adds	r2, r7, #7
 800210c:	7812      	ldrb	r2, [r2, #0]
 800210e:	430a      	orrs	r2, r1
 8002110:	701a      	strb	r2, [r3, #0]
	status |= HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8);
 8002112:	4b14      	ldr	r3, [pc, #80]	@ (8002164 <modbus_reset+0xd0>)
 8002114:	2100      	movs	r1, #0
 8002116:	0018      	movs	r0, r3
 8002118:	f007 fe3e 	bl	8009d98 <HAL_UARTEx_SetRxFifoThreshold>
 800211c:	0003      	movs	r3, r0
 800211e:	b259      	sxtb	r1, r3
 8002120:	1dfb      	adds	r3, r7, #7
 8002122:	1dfa      	adds	r2, r7, #7
 8002124:	7812      	ldrb	r2, [r2, #0]
 8002126:	430a      	orrs	r2, r1
 8002128:	701a      	strb	r2, [r3, #0]
	status |= HAL_UARTEx_DisableFifoMode(&huart1);
 800212a:	4b0e      	ldr	r3, [pc, #56]	@ (8002164 <modbus_reset+0xd0>)
 800212c:	0018      	movs	r0, r3
 800212e:	f007 fdb9 	bl	8009ca4 <HAL_UARTEx_DisableFifoMode>
 8002132:	0003      	movs	r3, r0
 8002134:	b259      	sxtb	r1, r3
 8002136:	1dfb      	adds	r3, r7, #7
 8002138:	1dfa      	adds	r2, r7, #7
 800213a:	7812      	ldrb	r2, [r2, #0]
 800213c:	430a      	orrs	r2, r1
 800213e:	701a      	strb	r2, [r3, #0]
	if(status != HAL_OK)
 8002140:	1dfb      	adds	r3, r7, #7
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	b25b      	sxtb	r3, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	d004      	beq.n	8002154 <modbus_reset+0xc0>
	{
		return handle_modbus_error(MB_FATAL_ERROR);
 800214a:	2015      	movs	r0, #21
 800214c:	f000 f9ae 	bl	80024ac <handle_modbus_error>
 8002150:	0003      	movs	r3, r0
 8002152:	e002      	b.n	800215a <modbus_reset+0xc6>
	}
	return status;
 8002154:	1dfb      	adds	r3, r7, #7
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	b25b      	sxtb	r3, r3
}
 800215a:	0018      	movs	r0, r3
 800215c:	46bd      	mov	sp, r7
 800215e:	b002      	add	sp, #8
 8002160:	bd80      	pop	{r7, pc}
 8002162:	46c0      	nop			@ (mov r8, r8)
 8002164:	200005b0 	.word	0x200005b0
 8002168:	40021000 	.word	0x40021000
 800216c:	ffffbfff 	.word	0xffffbfff

08002170 <modbus_set_rx>:

int8_t modbus_set_rx()
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
	int8_t status = HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rx_chunk, 6);
 8002176:	490c      	ldr	r1, [pc, #48]	@ (80021a8 <modbus_set_rx+0x38>)
 8002178:	4b0c      	ldr	r3, [pc, #48]	@ (80021ac <modbus_set_rx+0x3c>)
 800217a:	2206      	movs	r2, #6
 800217c:	0018      	movs	r0, r3
 800217e:	f007 fe4d 	bl	8009e1c <HAL_UARTEx_ReceiveToIdle_DMA>
 8002182:	0003      	movs	r3, r0
 8002184:	001a      	movs	r2, r3
 8002186:	1dfb      	adds	r3, r7, #7
 8002188:	701a      	strb	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 800218a:	4b09      	ldr	r3, [pc, #36]	@ (80021b0 <modbus_set_rx+0x40>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	4b07      	ldr	r3, [pc, #28]	@ (80021b0 <modbus_set_rx+0x40>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2104      	movs	r1, #4
 8002196:	438a      	bics	r2, r1
 8002198:	601a      	str	r2, [r3, #0]

	return status;
 800219a:	1dfb      	adds	r3, r7, #7
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	b25b      	sxtb	r3, r3
}
 80021a0:	0018      	movs	r0, r3
 80021a2:	46bd      	mov	sp, r7
 80021a4:	b002      	add	sp, #8
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	2000094c 	.word	0x2000094c
 80021ac:	200005b0 	.word	0x200005b0
 80021b0:	20000644 	.word	0x20000644

080021b4 <monitor_modbus>:

int8_t monitor_modbus()
{
 80021b4:	b590      	push	{r4, r7, lr}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
	int8_t status = MB_SUCCESS;
 80021ba:	1dfb      	adds	r3, r7, #7
 80021bc:	2200      	movs	r2, #0
 80021be:	701a      	strb	r2, [r3, #0]

	// Chunk miss handling
	status = handle_chunk_miss();
 80021c0:	1dfc      	adds	r4, r7, #7
 80021c2:	f000 f9d7 	bl	8002574 <handle_chunk_miss>
 80021c6:	0003      	movs	r3, r0
 80021c8:	7023      	strb	r3, [r4, #0]
	if(status != MB_SUCCESS)
 80021ca:	1dfb      	adds	r3, r7, #7
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	b25b      	sxtb	r3, r3
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d012      	beq.n	80021fa <monitor_modbus+0x46>
	{
		status = modbus_reset();
 80021d4:	1dfc      	adds	r4, r7, #7
 80021d6:	f7ff ff5d 	bl	8002094 <modbus_reset>
 80021da:	0003      	movs	r3, r0
 80021dc:	7023      	strb	r3, [r4, #0]
		if(status != MB_SUCCESS)
 80021de:	1dfb      	adds	r3, r7, #7
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	b25b      	sxtb	r3, r3
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d003      	beq.n	80021f0 <monitor_modbus+0x3c>
		{
			return status;
 80021e8:	1dfb      	adds	r3, r7, #7
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	b25b      	sxtb	r3, r3
 80021ee:	e08d      	b.n	800230c <monitor_modbus+0x158>
		}
		return handle_modbus_error(MB_UART_ERROR);
 80021f0:	2014      	movs	r0, #20
 80021f2:	f000 f95b 	bl	80024ac <handle_modbus_error>
 80021f6:	0003      	movs	r3, r0
 80021f8:	e088      	b.n	800230c <monitor_modbus+0x158>
	}

	// Uart error handling
	if(uart_err_int)
 80021fa:	4b46      	ldr	r3, [pc, #280]	@ (8002314 <monitor_modbus+0x160>)
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	2b00      	cmp	r3, #0
 8002202:	d015      	beq.n	8002230 <monitor_modbus+0x7c>
	{
		uart_err_int = 0;
 8002204:	4b43      	ldr	r3, [pc, #268]	@ (8002314 <monitor_modbus+0x160>)
 8002206:	2200      	movs	r2, #0
 8002208:	701a      	strb	r2, [r3, #0]
		status = modbus_reset();
 800220a:	1dfc      	adds	r4, r7, #7
 800220c:	f7ff ff42 	bl	8002094 <modbus_reset>
 8002210:	0003      	movs	r3, r0
 8002212:	7023      	strb	r3, [r4, #0]
		if(status != MB_SUCCESS)
 8002214:	1dfb      	adds	r3, r7, #7
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	b25b      	sxtb	r3, r3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d003      	beq.n	8002226 <monitor_modbus+0x72>
		{
			return status;
 800221e:	1dfb      	adds	r3, r7, #7
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	b25b      	sxtb	r3, r3
 8002224:	e072      	b.n	800230c <monitor_modbus+0x158>
		}
		return handle_modbus_error(MB_UART_ERROR);
 8002226:	2014      	movs	r0, #20
 8002228:	f000 f940 	bl	80024ac <handle_modbus_error>
 800222c:	0003      	movs	r3, r0
 800222e:	e06d      	b.n	800230c <monitor_modbus+0x158>
	}

	// TX timeout handling
	if(!uart_tx_int)
 8002230:	4b39      	ldr	r3, [pc, #228]	@ (8002318 <monitor_modbus+0x164>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d111      	bne.n	800225e <monitor_modbus+0xaa>
	{
		if(HAL_GetTick() - tx_time >= holding_register_database[MB_TRANSMIT_TIMEOUT])
 800223a:	f000 fee5 	bl	8003008 <HAL_GetTick>
 800223e:	0002      	movs	r2, r0
 8002240:	4b36      	ldr	r3, [pc, #216]	@ (800231c <monitor_modbus+0x168>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	4a36      	ldr	r2, [pc, #216]	@ (8002320 <monitor_modbus+0x16c>)
 8002248:	8892      	ldrh	r2, [r2, #4]
 800224a:	4293      	cmp	r3, r2
 800224c:	d304      	bcc.n	8002258 <monitor_modbus+0xa4>
		{
			return handle_modbus_error(MB_TX_TIMEOUT);
 800224e:	2012      	movs	r0, #18
 8002250:	f000 f92c 	bl	80024ac <handle_modbus_error>
 8002254:	0003      	movs	r3, r0
 8002256:	e059      	b.n	800230c <monitor_modbus+0x158>
		}
		status = HAL_BUSY;
 8002258:	1dfb      	adds	r3, r7, #7
 800225a:	2202      	movs	r2, #2
 800225c:	701a      	strb	r2, [r3, #0]
	}

#ifdef MB_MASTER
	// RX timeout handling
	if(expected_rx_len > 0)
 800225e:	4b31      	ldr	r3, [pc, #196]	@ (8002324 <monitor_modbus+0x170>)
 8002260:	881b      	ldrh	r3, [r3, #0]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d04f      	beq.n	8002306 <monitor_modbus+0x152>
	{
		if(uart_rx_int)
 8002266:	4b30      	ldr	r3, [pc, #192]	@ (8002328 <monitor_modbus+0x174>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	b2db      	uxtb	r3, r3
 800226c:	2b00      	cmp	r3, #0
 800226e:	d02f      	beq.n	80022d0 <monitor_modbus+0x11c>
		{
			uart_rx_int = 0;
 8002270:	4b2d      	ldr	r3, [pc, #180]	@ (8002328 <monitor_modbus+0x174>)
 8002272:	2200      	movs	r2, #0
 8002274:	701a      	strb	r2, [r3, #0]
			status = modbus_mic(target_id, target_function_code, expected_rx_len);
 8002276:	4b2d      	ldr	r3, [pc, #180]	@ (800232c <monitor_modbus+0x178>)
 8002278:	7818      	ldrb	r0, [r3, #0]
 800227a:	4b2d      	ldr	r3, [pc, #180]	@ (8002330 <monitor_modbus+0x17c>)
 800227c:	7819      	ldrb	r1, [r3, #0]
 800227e:	4b29      	ldr	r3, [pc, #164]	@ (8002324 <monitor_modbus+0x170>)
 8002280:	881b      	ldrh	r3, [r3, #0]
 8002282:	b2db      	uxtb	r3, r3
 8002284:	1dfc      	adds	r4, r7, #7
 8002286:	001a      	movs	r2, r3
 8002288:	f7ff fb76 	bl	8001978 <modbus_mic>
 800228c:	0003      	movs	r3, r0
 800228e:	7023      	strb	r3, [r4, #0]
			target_id = 0;
 8002290:	4b26      	ldr	r3, [pc, #152]	@ (800232c <monitor_modbus+0x178>)
 8002292:	2200      	movs	r2, #0
 8002294:	701a      	strb	r2, [r3, #0]
			target_function_code = 0;
 8002296:	4b26      	ldr	r3, [pc, #152]	@ (8002330 <monitor_modbus+0x17c>)
 8002298:	2200      	movs	r2, #0
 800229a:	701a      	strb	r2, [r3, #0]
			expected_rx_len = 0;
 800229c:	4b21      	ldr	r3, [pc, #132]	@ (8002324 <monitor_modbus+0x170>)
 800229e:	2200      	movs	r2, #0
 80022a0:	801a      	strh	r2, [r3, #0]
			if(status == MB_SUCCESS)
 80022a2:	1dfb      	adds	r3, r7, #7
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	b25b      	sxtb	r3, r3
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d10c      	bne.n	80022c6 <monitor_modbus+0x112>
			{
				response_rx = 1;
 80022ac:	4b21      	ldr	r3, [pc, #132]	@ (8002334 <monitor_modbus+0x180>)
 80022ae:	2201      	movs	r2, #1
 80022b0:	701a      	strb	r2, [r3, #0]
				if(target_function_code == 0x03)
 80022b2:	4b1f      	ldr	r3, [pc, #124]	@ (8002330 <monitor_modbus+0x17c>)
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	2b03      	cmp	r3, #3
 80022b8:	d101      	bne.n	80022be <monitor_modbus+0x10a>
				{
					store_rx_buffer();
 80022ba:	f7ff fbdb 	bl	8001a74 <store_rx_buffer>
				}
				return status;
 80022be:	1dfb      	adds	r3, r7, #7
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	b25b      	sxtb	r3, r3
 80022c4:	e022      	b.n	800230c <monitor_modbus+0x158>
			}
			return handle_modbus_error(MB_UART_ERROR);
 80022c6:	2014      	movs	r0, #20
 80022c8:	f000 f8f0 	bl	80024ac <handle_modbus_error>
 80022cc:	0003      	movs	r3, r0
 80022ce:	e01d      	b.n	800230c <monitor_modbus+0x158>
		}
		else
		{
			if(HAL_GetTick() - rx_time >= response_interval)
 80022d0:	f000 fe9a 	bl	8003008 <HAL_GetTick>
 80022d4:	0002      	movs	r2, r0
 80022d6:	4b18      	ldr	r3, [pc, #96]	@ (8002338 <monitor_modbus+0x184>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	1ad2      	subs	r2, r2, r3
 80022dc:	4b17      	ldr	r3, [pc, #92]	@ (800233c <monitor_modbus+0x188>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d30d      	bcc.n	8002300 <monitor_modbus+0x14c>
			{
				target_id = 0;
 80022e4:	4b11      	ldr	r3, [pc, #68]	@ (800232c <monitor_modbus+0x178>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	701a      	strb	r2, [r3, #0]
				target_function_code = 0;
 80022ea:	4b11      	ldr	r3, [pc, #68]	@ (8002330 <monitor_modbus+0x17c>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	701a      	strb	r2, [r3, #0]
				expected_rx_len = 0;
 80022f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002324 <monitor_modbus+0x170>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	801a      	strh	r2, [r3, #0]
				return handle_modbus_error(MB_RX_TIMEOUT);
 80022f6:	2013      	movs	r0, #19
 80022f8:	f000 f8d8 	bl	80024ac <handle_modbus_error>
 80022fc:	0003      	movs	r3, r0
 80022fe:	e005      	b.n	800230c <monitor_modbus+0x158>
			}
			status = HAL_BUSY;
 8002300:	1dfb      	adds	r3, r7, #7
 8002302:	2202      	movs	r2, #2
 8002304:	701a      	strb	r2, [r3, #0]
		}
	}
#endif
	return status;
 8002306:	1dfb      	adds	r3, r7, #7
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	b25b      	sxtb	r3, r3
}
 800230c:	0018      	movs	r0, r3
 800230e:	46bd      	mov	sp, r7
 8002310:	b003      	add	sp, #12
 8002312:	bd90      	pop	{r4, r7, pc}
 8002314:	20000b5b 	.word	0x20000b5b
 8002318:	200000ae 	.word	0x200000ae
 800231c:	20000b4c 	.word	0x20000b4c
 8002320:	20000010 	.word	0x20000010
 8002324:	20000b44 	.word	0x20000b44
 8002328:	20000b5a 	.word	0x20000b5a
 800232c:	20000b42 	.word	0x20000b42
 8002330:	20000b43 	.word	0x20000b43
 8002334:	20000b46 	.word	0x20000b46
 8002338:	20000b48 	.word	0x20000b48
 800233c:	200000a8 	.word	0x200000a8

08002340 <modbus_change_baud_rate>:

// General Modbus Control Functions ------------------------------------------------------------

int8_t modbus_change_baud_rate()
{
 8002340:	b590      	push	{r4, r7, lr}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
	int8_t status = 0;
 8002346:	1dfb      	adds	r3, r7, #7
 8002348:	2200      	movs	r2, #0
 800234a:	701a      	strb	r2, [r3, #0]

	switch(holding_register_database[MB_BAUD_RATE])
 800234c:	4b3b      	ldr	r3, [pc, #236]	@ (800243c <modbus_change_baud_rate+0xfc>)
 800234e:	885b      	ldrh	r3, [r3, #2]
 8002350:	2b09      	cmp	r3, #9
 8002352:	d82c      	bhi.n	80023ae <modbus_change_baud_rate+0x6e>
 8002354:	009a      	lsls	r2, r3, #2
 8002356:	4b3a      	ldr	r3, [pc, #232]	@ (8002440 <modbus_change_baud_rate+0x100>)
 8002358:	18d3      	adds	r3, r2, r3
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	469f      	mov	pc, r3
	{
		case BAUD_RATE_4800:
		{
			huart1.Init.BaudRate = 4800;
 800235e:	4b39      	ldr	r3, [pc, #228]	@ (8002444 <modbus_change_baud_rate+0x104>)
 8002360:	2296      	movs	r2, #150	@ 0x96
 8002362:	0152      	lsls	r2, r2, #5
 8002364:	605a      	str	r2, [r3, #4]
			break;
 8002366:	e046      	b.n	80023f6 <modbus_change_baud_rate+0xb6>
		}
		case BAUD_RATE_9600:
		{
			huart1.Init.BaudRate = 9600;
 8002368:	4b36      	ldr	r3, [pc, #216]	@ (8002444 <modbus_change_baud_rate+0x104>)
 800236a:	2296      	movs	r2, #150	@ 0x96
 800236c:	0192      	lsls	r2, r2, #6
 800236e:	605a      	str	r2, [r3, #4]
			break;
 8002370:	e041      	b.n	80023f6 <modbus_change_baud_rate+0xb6>
		}
		case BAUD_RATE_19200:
		{
			huart1.Init.BaudRate = 19200;
 8002372:	4b34      	ldr	r3, [pc, #208]	@ (8002444 <modbus_change_baud_rate+0x104>)
 8002374:	2296      	movs	r2, #150	@ 0x96
 8002376:	01d2      	lsls	r2, r2, #7
 8002378:	605a      	str	r2, [r3, #4]
			break;
 800237a:	e03c      	b.n	80023f6 <modbus_change_baud_rate+0xb6>
		}
		case BAUD_RATE_38400:
		{
			huart1.Init.BaudRate = 38400;
 800237c:	4b31      	ldr	r3, [pc, #196]	@ (8002444 <modbus_change_baud_rate+0x104>)
 800237e:	2296      	movs	r2, #150	@ 0x96
 8002380:	0212      	lsls	r2, r2, #8
 8002382:	605a      	str	r2, [r3, #4]
			break;
 8002384:	e037      	b.n	80023f6 <modbus_change_baud_rate+0xb6>
		}
		case BAUD_RATE_57600:
		{
			huart1.Init.BaudRate = 57600;
 8002386:	4b2f      	ldr	r3, [pc, #188]	@ (8002444 <modbus_change_baud_rate+0x104>)
 8002388:	22e1      	movs	r2, #225	@ 0xe1
 800238a:	0212      	lsls	r2, r2, #8
 800238c:	605a      	str	r2, [r3, #4]
			break;
 800238e:	e032      	b.n	80023f6 <modbus_change_baud_rate+0xb6>
		}
		case BAUD_RATE_115200:
		{
			huart1.Init.BaudRate = 115200;
 8002390:	4b2c      	ldr	r3, [pc, #176]	@ (8002444 <modbus_change_baud_rate+0x104>)
 8002392:	22e1      	movs	r2, #225	@ 0xe1
 8002394:	0252      	lsls	r2, r2, #9
 8002396:	605a      	str	r2, [r3, #4]
			break;
 8002398:	e02d      	b.n	80023f6 <modbus_change_baud_rate+0xb6>
		}
		case BAUD_RATE_128000:
		{
			huart1.Init.BaudRate = 128000;
 800239a:	4b2a      	ldr	r3, [pc, #168]	@ (8002444 <modbus_change_baud_rate+0x104>)
 800239c:	22fa      	movs	r2, #250	@ 0xfa
 800239e:	0252      	lsls	r2, r2, #9
 80023a0:	605a      	str	r2, [r3, #4]
			break;
 80023a2:	e028      	b.n	80023f6 <modbus_change_baud_rate+0xb6>
		}
		case BAUD_RATE_256000:
		{
			huart1.Init.BaudRate = 256000;
 80023a4:	4b27      	ldr	r3, [pc, #156]	@ (8002444 <modbus_change_baud_rate+0x104>)
 80023a6:	22fa      	movs	r2, #250	@ 0xfa
 80023a8:	0292      	lsls	r2, r2, #10
 80023aa:	605a      	str	r2, [r3, #4]
			break;
 80023ac:	e023      	b.n	80023f6 <modbus_change_baud_rate+0xb6>
		}
		default:
		{
			holding_register_database[MB_BAUD_RATE] = BAUD_RATE_9600;
 80023ae:	4b23      	ldr	r3, [pc, #140]	@ (800243c <modbus_change_baud_rate+0xfc>)
 80023b0:	2203      	movs	r2, #3
 80023b2:	805a      	strh	r2, [r3, #2]
			huart1.Init.BaudRate = 9600;
 80023b4:	4b23      	ldr	r3, [pc, #140]	@ (8002444 <modbus_change_baud_rate+0x104>)
 80023b6:	2296      	movs	r2, #150	@ 0x96
 80023b8:	0192      	lsls	r2, r2, #6
 80023ba:	605a      	str	r2, [r3, #4]
			status = UART_SetConfig(&huart1);
 80023bc:	4b21      	ldr	r3, [pc, #132]	@ (8002444 <modbus_change_baud_rate+0x104>)
 80023be:	0018      	movs	r0, r3
 80023c0:	f006 fdb2 	bl	8008f28 <UART_SetConfig>
 80023c4:	0003      	movs	r3, r0
 80023c6:	001a      	movs	r2, r3
 80023c8:	1dfb      	adds	r3, r7, #7
 80023ca:	701a      	strb	r2, [r3, #0]
			if(status == HAL_OK)
 80023cc:	1dfb      	adds	r3, r7, #7
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	b25b      	sxtb	r3, r3
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d10d      	bne.n	80023f2 <modbus_change_baud_rate+0xb2>
			{
				// Log error, reset UART
				status = modbus_reset();
 80023d6:	1dfc      	adds	r4, r7, #7
 80023d8:	f7ff fe5c 	bl	8002094 <modbus_reset>
 80023dc:	0003      	movs	r3, r0
 80023de:	7023      	strb	r3, [r4, #0]
				if(status != HAL_OK)
 80023e0:	1dfb      	adds	r3, r7, #7
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	b25b      	sxtb	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d003      	beq.n	80023f2 <modbus_change_baud_rate+0xb2>
				{
					return status;
 80023ea:	1dfb      	adds	r3, r7, #7
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	b25b      	sxtb	r3, r3
 80023f0:	e01f      	b.n	8002432 <modbus_change_baud_rate+0xf2>
				}
			}
			return MB_ILLEGAL_DATA_VALUE;
 80023f2:	2306      	movs	r3, #6
 80023f4:	e01d      	b.n	8002432 <modbus_change_baud_rate+0xf2>
		}
	}
	status = UART_SetConfig(&huart1);
 80023f6:	4b13      	ldr	r3, [pc, #76]	@ (8002444 <modbus_change_baud_rate+0x104>)
 80023f8:	0018      	movs	r0, r3
 80023fa:	f006 fd95 	bl	8008f28 <UART_SetConfig>
 80023fe:	0003      	movs	r3, r0
 8002400:	001a      	movs	r2, r3
 8002402:	1dfb      	adds	r3, r7, #7
 8002404:	701a      	strb	r2, [r3, #0]
	if(status == HAL_OK)
 8002406:	1dfb      	adds	r3, r7, #7
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	b25b      	sxtb	r3, r3
 800240c:	2b00      	cmp	r3, #0
 800240e:	d10d      	bne.n	800242c <modbus_change_baud_rate+0xec>
	{
		// Log error, reset UART
		status = modbus_reset();
 8002410:	1dfc      	adds	r4, r7, #7
 8002412:	f7ff fe3f 	bl	8002094 <modbus_reset>
 8002416:	0003      	movs	r3, r0
 8002418:	7023      	strb	r3, [r4, #0]
		if(status != HAL_OK)
 800241a:	1dfb      	adds	r3, r7, #7
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	b25b      	sxtb	r3, r3
 8002420:	2b00      	cmp	r3, #0
 8002422:	d003      	beq.n	800242c <modbus_change_baud_rate+0xec>
		{
			return status;
 8002424:	1dfb      	adds	r3, r7, #7
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	b25b      	sxtb	r3, r3
 800242a:	e002      	b.n	8002432 <modbus_change_baud_rate+0xf2>
		}
	}

	return modbus_set_rx();
 800242c:	f7ff fea0 	bl	8002170 <modbus_set_rx>
 8002430:	0003      	movs	r3, r0
}
 8002432:	0018      	movs	r0, r3
 8002434:	46bd      	mov	sp, r7
 8002436:	b003      	add	sp, #12
 8002438:	bd90      	pop	{r4, r7, pc}
 800243a:	46c0      	nop			@ (mov r8, r8)
 800243c:	20000010 	.word	0x20000010
 8002440:	0800a32c 	.word	0x0800a32c
 8002444:	200005b0 	.word	0x200005b0

08002448 <get_rx_buffer>:
}


// Low Level Functions -------------------------------------------------------------------------
uint8_t get_rx_buffer(uint8_t index)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	0002      	movs	r2, r0
 8002450:	1dfb      	adds	r3, r7, #7
 8002452:	701a      	strb	r2, [r3, #0]
	if (index < MODBUS_RX_BUFFER_SIZE - 1)
 8002454:	1dfb      	adds	r3, r7, #7
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	2bff      	cmp	r3, #255	@ 0xff
 800245a:	d01e      	beq.n	800249a <get_rx_buffer+0x52>
	{
		return ((start_index + index) > (MODBUS_RX_BUFFER_SIZE - 1))?
 800245c:	4b11      	ldr	r3, [pc, #68]	@ (80024a4 <get_rx_buffer+0x5c>)
 800245e:	881b      	ldrh	r3, [r3, #0]
 8002460:	b29b      	uxth	r3, r3
 8002462:	001a      	movs	r2, r3
 8002464:	1dfb      	adds	r3, r7, #7
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	18d3      	adds	r3, r2, r3
				modbus_rx_buffer[(start_index + index) - MODBUS_RX_BUFFER_SIZE] :
 800246a:	2bff      	cmp	r3, #255	@ 0xff
 800246c:	dd0b      	ble.n	8002486 <get_rx_buffer+0x3e>
 800246e:	4b0d      	ldr	r3, [pc, #52]	@ (80024a4 <get_rx_buffer+0x5c>)
 8002470:	881b      	ldrh	r3, [r3, #0]
 8002472:	b29b      	uxth	r3, r3
 8002474:	001a      	movs	r2, r3
 8002476:	1dfb      	adds	r3, r7, #7
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	18d3      	adds	r3, r2, r3
 800247c:	3b01      	subs	r3, #1
 800247e:	3bff      	subs	r3, #255	@ 0xff
 8002480:	4a09      	ldr	r2, [pc, #36]	@ (80024a8 <get_rx_buffer+0x60>)
 8002482:	5cd3      	ldrb	r3, [r2, r3]
 8002484:	e00a      	b.n	800249c <get_rx_buffer+0x54>
				modbus_rx_buffer[start_index + index];
 8002486:	4b07      	ldr	r3, [pc, #28]	@ (80024a4 <get_rx_buffer+0x5c>)
 8002488:	881b      	ldrh	r3, [r3, #0]
 800248a:	b29b      	uxth	r3, r3
 800248c:	001a      	movs	r2, r3
 800248e:	1dfb      	adds	r3, r7, #7
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	18d3      	adds	r3, r2, r3
				modbus_rx_buffer[(start_index + index) - MODBUS_RX_BUFFER_SIZE] :
 8002494:	4a04      	ldr	r2, [pc, #16]	@ (80024a8 <get_rx_buffer+0x60>)
 8002496:	5cd3      	ldrb	r3, [r2, r3]
 8002498:	e000      	b.n	800249c <get_rx_buffer+0x54>
	}
	return 0xFF;
 800249a:	23ff      	movs	r3, #255	@ 0xff
}
 800249c:	0018      	movs	r0, r3
 800249e:	46bd      	mov	sp, r7
 80024a0:	b002      	add	sp, #8
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	20000b54 	.word	0x20000b54
 80024a8:	2000074c 	.word	0x2000074c

080024ac <handle_modbus_error>:

int8_t handle_modbus_error(int8_t error_code)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	0002      	movs	r2, r0
 80024b4:	1dfb      	adds	r3, r7, #7
 80024b6:	701a      	strb	r2, [r3, #0]
	holding_register_database[MB_ERRORS] |= 1U << (error_code - RANGE_ERROR);
 80024b8:	4b0a      	ldr	r3, [pc, #40]	@ (80024e4 <handle_modbus_error+0x38>)
 80024ba:	891a      	ldrh	r2, [r3, #8]
 80024bc:	1dfb      	adds	r3, r7, #7
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	b25b      	sxtb	r3, r3
 80024c2:	3b0e      	subs	r3, #14
 80024c4:	2101      	movs	r1, #1
 80024c6:	4099      	lsls	r1, r3
 80024c8:	000b      	movs	r3, r1
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	4313      	orrs	r3, r2
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	4b04      	ldr	r3, [pc, #16]	@ (80024e4 <handle_modbus_error+0x38>)
 80024d2:	811a      	strh	r2, [r3, #8]
	return error_code;
 80024d4:	1dfb      	adds	r3, r7, #7
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	b25b      	sxtb	r3, r3
}
 80024da:	0018      	movs	r0, r3
 80024dc:	46bd      	mov	sp, r7
 80024de:	b002      	add	sp, #8
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	46c0      	nop			@ (mov r8, r8)
 80024e4:	20000010 	.word	0x20000010

080024e8 <crc_16>:

// Private Functions ---------------------------------------------------------------------------

uint16_t crc_16(uint8_t *data, uint8_t size)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	000a      	movs	r2, r1
 80024f2:	1cfb      	adds	r3, r7, #3
 80024f4:	701a      	strb	r2, [r3, #0]
	uint8_t crc_hi = 0xFF;
 80024f6:	230f      	movs	r3, #15
 80024f8:	18fb      	adds	r3, r7, r3
 80024fa:	22ff      	movs	r2, #255	@ 0xff
 80024fc:	701a      	strb	r2, [r3, #0]
	uint8_t crc_low = 0xFF;
 80024fe:	230e      	movs	r3, #14
 8002500:	18fb      	adds	r3, r7, r3
 8002502:	22ff      	movs	r2, #255	@ 0xff
 8002504:	701a      	strb	r2, [r3, #0]
	 unsigned int i; /* will index into CRC lookup */

	/* pass through message buffer */
	while (size--)
 8002506:	e019      	b.n	800253c <crc_16+0x54>
	{
		i = crc_low ^ *data++; /* calculate the CRC  */
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	1c5a      	adds	r2, r3, #1
 800250c:	607a      	str	r2, [r7, #4]
 800250e:	781a      	ldrb	r2, [r3, #0]
 8002510:	200e      	movs	r0, #14
 8002512:	183b      	adds	r3, r7, r0
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	4053      	eors	r3, r2
 8002518:	b2db      	uxtb	r3, r3
 800251a:	60bb      	str	r3, [r7, #8]
		crc_low = crc_hi ^ table_crc_hi[i];
 800251c:	4a13      	ldr	r2, [pc, #76]	@ (800256c <crc_16+0x84>)
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	18d3      	adds	r3, r2, r3
 8002522:	7819      	ldrb	r1, [r3, #0]
 8002524:	183b      	adds	r3, r7, r0
 8002526:	200f      	movs	r0, #15
 8002528:	183a      	adds	r2, r7, r0
 800252a:	7812      	ldrb	r2, [r2, #0]
 800252c:	404a      	eors	r2, r1
 800252e:	701a      	strb	r2, [r3, #0]
		crc_hi = table_crc_lo[i];
 8002530:	183b      	adds	r3, r7, r0
 8002532:	490f      	ldr	r1, [pc, #60]	@ (8002570 <crc_16+0x88>)
 8002534:	68ba      	ldr	r2, [r7, #8]
 8002536:	188a      	adds	r2, r1, r2
 8002538:	7812      	ldrb	r2, [r2, #0]
 800253a:	701a      	strb	r2, [r3, #0]
	while (size--)
 800253c:	1cfb      	adds	r3, r7, #3
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	1cfa      	adds	r2, r7, #3
 8002542:	1e59      	subs	r1, r3, #1
 8002544:	7011      	strb	r1, [r2, #0]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1de      	bne.n	8002508 <crc_16+0x20>
	}

	return (crc_hi << 8 | crc_low);
 800254a:	230f      	movs	r3, #15
 800254c:	18fb      	adds	r3, r7, r3
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	021b      	lsls	r3, r3, #8
 8002552:	b21a      	sxth	r2, r3
 8002554:	230e      	movs	r3, #14
 8002556:	18fb      	adds	r3, r7, r3
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	b21b      	sxth	r3, r3
 800255c:	4313      	orrs	r3, r2
 800255e:	b21b      	sxth	r3, r3
 8002560:	b29b      	uxth	r3, r3
}
 8002562:	0018      	movs	r0, r3
 8002564:	46bd      	mov	sp, r7
 8002566:	b004      	add	sp, #16
 8002568:	bd80      	pop	{r7, pc}
 800256a:	46c0      	nop			@ (mov r8, r8)
 800256c:	0800a02c 	.word	0x0800a02c
 8002570:	0800a12c 	.word	0x0800a12c

08002574 <handle_chunk_miss>:

int8_t handle_chunk_miss()
{
 8002574:	b590      	push	{r4, r7, lr}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
	if(modbus_header == 0)
 800257a:	4b15      	ldr	r3, [pc, #84]	@ (80025d0 <handle_chunk_miss+0x5c>)
 800257c:	881b      	ldrh	r3, [r3, #0]
 800257e:	b29b      	uxth	r3, r3
 8002580:	2b00      	cmp	r3, #0
 8002582:	d120      	bne.n	80025c6 <handle_chunk_miss+0x52>
	{
		if(HAL_GetTick() - chunk_time > 10)
 8002584:	f000 fd40 	bl	8003008 <HAL_GetTick>
 8002588:	0002      	movs	r2, r0
 800258a:	4b12      	ldr	r3, [pc, #72]	@ (80025d4 <handle_chunk_miss+0x60>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b0a      	cmp	r3, #10
 8002592:	d918      	bls.n	80025c6 <handle_chunk_miss+0x52>
		{
			modbus_header = 1;
 8002594:	4b0e      	ldr	r3, [pc, #56]	@ (80025d0 <handle_chunk_miss+0x5c>)
 8002596:	2201      	movs	r2, #1
 8002598:	801a      	strh	r2, [r3, #0]
			int8_t status = HAL_UART_Abort(&huart1);
 800259a:	4b0f      	ldr	r3, [pc, #60]	@ (80025d8 <handle_chunk_miss+0x64>)
 800259c:	0018      	movs	r0, r3
 800259e:	f006 f859 	bl	8008654 <HAL_UART_Abort>
 80025a2:	0003      	movs	r3, r0
 80025a4:	001a      	movs	r2, r3
 80025a6:	1dfb      	adds	r3, r7, #7
 80025a8:	701a      	strb	r2, [r3, #0]
			if(status == HAL_OK)
 80025aa:	1dfb      	adds	r3, r7, #7
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	b25b      	sxtb	r3, r3
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d104      	bne.n	80025be <handle_chunk_miss+0x4a>
			{
				status = modbus_set_rx();
 80025b4:	1dfc      	adds	r4, r7, #7
 80025b6:	f7ff fddb 	bl	8002170 <modbus_set_rx>
 80025ba:	0003      	movs	r3, r0
 80025bc:	7023      	strb	r3, [r4, #0]
			}
			return status;
 80025be:	1dfb      	adds	r3, r7, #7
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	b25b      	sxtb	r3, r3
 80025c4:	e000      	b.n	80025c8 <handle_chunk_miss+0x54>
		}
	}
	return MB_SUCCESS;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	0018      	movs	r0, r3
 80025ca:	46bd      	mov	sp, r7
 80025cc:	b003      	add	sp, #12
 80025ce:	bd90      	pop	{r4, r7, pc}
 80025d0:	200000ac 	.word	0x200000ac
 80025d4:	20000b50 	.word	0x20000b50
 80025d8:	200005b0 	.word	0x200005b0

080025dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025e2:	4b0f      	ldr	r3, [pc, #60]	@ (8002620 <HAL_MspInit+0x44>)
 80025e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80025e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002620 <HAL_MspInit+0x44>)
 80025e8:	2101      	movs	r1, #1
 80025ea:	430a      	orrs	r2, r1
 80025ec:	641a      	str	r2, [r3, #64]	@ 0x40
 80025ee:	4b0c      	ldr	r3, [pc, #48]	@ (8002620 <HAL_MspInit+0x44>)
 80025f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f2:	2201      	movs	r2, #1
 80025f4:	4013      	ands	r3, r2
 80025f6:	607b      	str	r3, [r7, #4]
 80025f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025fa:	4b09      	ldr	r3, [pc, #36]	@ (8002620 <HAL_MspInit+0x44>)
 80025fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80025fe:	4b08      	ldr	r3, [pc, #32]	@ (8002620 <HAL_MspInit+0x44>)
 8002600:	2180      	movs	r1, #128	@ 0x80
 8002602:	0549      	lsls	r1, r1, #21
 8002604:	430a      	orrs	r2, r1
 8002606:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002608:	4b05      	ldr	r3, [pc, #20]	@ (8002620 <HAL_MspInit+0x44>)
 800260a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800260c:	2380      	movs	r3, #128	@ 0x80
 800260e:	055b      	lsls	r3, r3, #21
 8002610:	4013      	ands	r3, r2
 8002612:	603b      	str	r3, [r7, #0]
 8002614:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002616:	46c0      	nop			@ (mov r8, r8)
 8002618:	46bd      	mov	sp, r7
 800261a:	b002      	add	sp, #8
 800261c:	bd80      	pop	{r7, pc}
 800261e:	46c0      	nop			@ (mov r8, r8)
 8002620:	40021000 	.word	0x40021000

08002624 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002624:	b590      	push	{r4, r7, lr}
 8002626:	b093      	sub	sp, #76	@ 0x4c
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800262c:	2334      	movs	r3, #52	@ 0x34
 800262e:	18fb      	adds	r3, r7, r3
 8002630:	0018      	movs	r0, r3
 8002632:	2314      	movs	r3, #20
 8002634:	001a      	movs	r2, r3
 8002636:	2100      	movs	r1, #0
 8002638:	f007 fcb6 	bl	8009fa8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800263c:	2414      	movs	r4, #20
 800263e:	193b      	adds	r3, r7, r4
 8002640:	0018      	movs	r0, r3
 8002642:	2320      	movs	r3, #32
 8002644:	001a      	movs	r2, r3
 8002646:	2100      	movs	r1, #0
 8002648:	f007 fcae 	bl	8009fa8 <memset>
  if(hadc->Instance==ADC1)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a35      	ldr	r2, [pc, #212]	@ (8002728 <HAL_ADC_MspInit+0x104>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d163      	bne.n	800271e <HAL_ADC_MspInit+0xfa>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002656:	193b      	adds	r3, r7, r4
 8002658:	2220      	movs	r2, #32
 800265a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800265c:	193b      	adds	r3, r7, r4
 800265e:	2200      	movs	r2, #0
 8002660:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002662:	193b      	adds	r3, r7, r4
 8002664:	0018      	movs	r0, r3
 8002666:	f004 ff9b 	bl	80075a0 <HAL_RCCEx_PeriphCLKConfig>
 800266a:	1e03      	subs	r3, r0, #0
 800266c:	d001      	beq.n	8002672 <HAL_ADC_MspInit+0x4e>
    {
      Error_Handler();
 800266e:	f7ff f8b7 	bl	80017e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002672:	4b2e      	ldr	r3, [pc, #184]	@ (800272c <HAL_ADC_MspInit+0x108>)
 8002674:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002676:	4b2d      	ldr	r3, [pc, #180]	@ (800272c <HAL_ADC_MspInit+0x108>)
 8002678:	2180      	movs	r1, #128	@ 0x80
 800267a:	0349      	lsls	r1, r1, #13
 800267c:	430a      	orrs	r2, r1
 800267e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002680:	4b2a      	ldr	r3, [pc, #168]	@ (800272c <HAL_ADC_MspInit+0x108>)
 8002682:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002684:	2380      	movs	r3, #128	@ 0x80
 8002686:	035b      	lsls	r3, r3, #13
 8002688:	4013      	ands	r3, r2
 800268a:	613b      	str	r3, [r7, #16]
 800268c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800268e:	4b27      	ldr	r3, [pc, #156]	@ (800272c <HAL_ADC_MspInit+0x108>)
 8002690:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002692:	4b26      	ldr	r3, [pc, #152]	@ (800272c <HAL_ADC_MspInit+0x108>)
 8002694:	2101      	movs	r1, #1
 8002696:	430a      	orrs	r2, r1
 8002698:	635a      	str	r2, [r3, #52]	@ 0x34
 800269a:	4b24      	ldr	r3, [pc, #144]	@ (800272c <HAL_ADC_MspInit+0x108>)
 800269c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800269e:	2201      	movs	r2, #1
 80026a0:	4013      	ands	r3, r2
 80026a2:	60fb      	str	r3, [r7, #12]
 80026a4:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PA8     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80026a6:	2134      	movs	r1, #52	@ 0x34
 80026a8:	187b      	adds	r3, r7, r1
 80026aa:	4a21      	ldr	r2, [pc, #132]	@ (8002730 <HAL_ADC_MspInit+0x10c>)
 80026ac:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026ae:	187b      	adds	r3, r7, r1
 80026b0:	2203      	movs	r2, #3
 80026b2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b4:	187b      	adds	r3, r7, r1
 80026b6:	2200      	movs	r2, #0
 80026b8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ba:	187a      	adds	r2, r7, r1
 80026bc:	23a0      	movs	r3, #160	@ 0xa0
 80026be:	05db      	lsls	r3, r3, #23
 80026c0:	0011      	movs	r1, r2
 80026c2:	0018      	movs	r0, r3
 80026c4:	f001 fe16 	bl	80042f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 80026c8:	4b1a      	ldr	r3, [pc, #104]	@ (8002734 <HAL_ADC_MspInit+0x110>)
 80026ca:	4a1b      	ldr	r2, [pc, #108]	@ (8002738 <HAL_ADC_MspInit+0x114>)
 80026cc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80026ce:	4b19      	ldr	r3, [pc, #100]	@ (8002734 <HAL_ADC_MspInit+0x110>)
 80026d0:	2205      	movs	r2, #5
 80026d2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026d4:	4b17      	ldr	r3, [pc, #92]	@ (8002734 <HAL_ADC_MspInit+0x110>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80026da:	4b16      	ldr	r3, [pc, #88]	@ (8002734 <HAL_ADC_MspInit+0x110>)
 80026dc:	2200      	movs	r2, #0
 80026de:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80026e0:	4b14      	ldr	r3, [pc, #80]	@ (8002734 <HAL_ADC_MspInit+0x110>)
 80026e2:	2280      	movs	r2, #128	@ 0x80
 80026e4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80026e6:	4b13      	ldr	r3, [pc, #76]	@ (8002734 <HAL_ADC_MspInit+0x110>)
 80026e8:	2280      	movs	r2, #128	@ 0x80
 80026ea:	0052      	lsls	r2, r2, #1
 80026ec:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80026ee:	4b11      	ldr	r3, [pc, #68]	@ (8002734 <HAL_ADC_MspInit+0x110>)
 80026f0:	2280      	movs	r2, #128	@ 0x80
 80026f2:	00d2      	lsls	r2, r2, #3
 80026f4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80026f6:	4b0f      	ldr	r3, [pc, #60]	@ (8002734 <HAL_ADC_MspInit+0x110>)
 80026f8:	2220      	movs	r2, #32
 80026fa:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80026fc:	4b0d      	ldr	r3, [pc, #52]	@ (8002734 <HAL_ADC_MspInit+0x110>)
 80026fe:	2200      	movs	r2, #0
 8002700:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002702:	4b0c      	ldr	r3, [pc, #48]	@ (8002734 <HAL_ADC_MspInit+0x110>)
 8002704:	0018      	movs	r0, r3
 8002706:	f001 fa37 	bl	8003b78 <HAL_DMA_Init>
 800270a:	1e03      	subs	r3, r0, #0
 800270c:	d001      	beq.n	8002712 <HAL_ADC_MspInit+0xee>
    {
      Error_Handler();
 800270e:	f7ff f867 	bl	80017e0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a07      	ldr	r2, [pc, #28]	@ (8002734 <HAL_ADC_MspInit+0x110>)
 8002716:	651a      	str	r2, [r3, #80]	@ 0x50
 8002718:	4b06      	ldr	r3, [pc, #24]	@ (8002734 <HAL_ADC_MspInit+0x110>)
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800271e:	46c0      	nop			@ (mov r8, r8)
 8002720:	46bd      	mov	sp, r7
 8002722:	b013      	add	sp, #76	@ 0x4c
 8002724:	bd90      	pop	{r4, r7, pc}
 8002726:	46c0      	nop			@ (mov r8, r8)
 8002728:	40012400 	.word	0x40012400
 800272c:	40021000 	.word	0x40021000
 8002730:	000001ff 	.word	0x000001ff
 8002734:	2000034c 	.word	0x2000034c
 8002738:	40020030 	.word	0x40020030

0800273c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800273c:	b590      	push	{r4, r7, lr}
 800273e:	b093      	sub	sp, #76	@ 0x4c
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002744:	2334      	movs	r3, #52	@ 0x34
 8002746:	18fb      	adds	r3, r7, r3
 8002748:	0018      	movs	r0, r3
 800274a:	2314      	movs	r3, #20
 800274c:	001a      	movs	r2, r3
 800274e:	2100      	movs	r1, #0
 8002750:	f007 fc2a 	bl	8009fa8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002754:	2414      	movs	r4, #20
 8002756:	193b      	adds	r3, r7, r4
 8002758:	0018      	movs	r0, r3
 800275a:	2320      	movs	r3, #32
 800275c:	001a      	movs	r2, r3
 800275e:	2100      	movs	r1, #0
 8002760:	f007 fc22 	bl	8009fa8 <memset>
  if(hi2c->Instance==I2C1)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a51      	ldr	r2, [pc, #324]	@ (80028b0 <HAL_I2C_MspInit+0x174>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d000      	beq.n	8002770 <HAL_I2C_MspInit+0x34>
 800276e:	e09a      	b.n	80028a6 <HAL_I2C_MspInit+0x16a>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002770:	193b      	adds	r3, r7, r4
 8002772:	2202      	movs	r2, #2
 8002774:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002776:	193b      	adds	r3, r7, r4
 8002778:	2200      	movs	r2, #0
 800277a:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800277c:	193b      	adds	r3, r7, r4
 800277e:	0018      	movs	r0, r3
 8002780:	f004 ff0e 	bl	80075a0 <HAL_RCCEx_PeriphCLKConfig>
 8002784:	1e03      	subs	r3, r0, #0
 8002786:	d001      	beq.n	800278c <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8002788:	f7ff f82a 	bl	80017e0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800278c:	4b49      	ldr	r3, [pc, #292]	@ (80028b4 <HAL_I2C_MspInit+0x178>)
 800278e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002790:	4b48      	ldr	r3, [pc, #288]	@ (80028b4 <HAL_I2C_MspInit+0x178>)
 8002792:	2101      	movs	r1, #1
 8002794:	430a      	orrs	r2, r1
 8002796:	635a      	str	r2, [r3, #52]	@ 0x34
 8002798:	4b46      	ldr	r3, [pc, #280]	@ (80028b4 <HAL_I2C_MspInit+0x178>)
 800279a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800279c:	2201      	movs	r2, #1
 800279e:	4013      	ands	r3, r2
 80027a0:	613b      	str	r3, [r7, #16]
 80027a2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9 [PA11]     ------> I2C1_SCL
    PA10 [PA12]     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80027a4:	2134      	movs	r1, #52	@ 0x34
 80027a6:	187b      	adds	r3, r7, r1
 80027a8:	22c0      	movs	r2, #192	@ 0xc0
 80027aa:	00d2      	lsls	r2, r2, #3
 80027ac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027ae:	187b      	adds	r3, r7, r1
 80027b0:	2212      	movs	r2, #18
 80027b2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b4:	187b      	adds	r3, r7, r1
 80027b6:	2200      	movs	r2, #0
 80027b8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ba:	187b      	adds	r3, r7, r1
 80027bc:	2200      	movs	r2, #0
 80027be:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80027c0:	187b      	adds	r3, r7, r1
 80027c2:	2206      	movs	r2, #6
 80027c4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027c6:	187a      	adds	r2, r7, r1
 80027c8:	23a0      	movs	r3, #160	@ 0xa0
 80027ca:	05db      	lsls	r3, r3, #23
 80027cc:	0011      	movs	r1, r2
 80027ce:	0018      	movs	r0, r3
 80027d0:	f001 fd90 	bl	80042f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027d4:	4b37      	ldr	r3, [pc, #220]	@ (80028b4 <HAL_I2C_MspInit+0x178>)
 80027d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80027d8:	4b36      	ldr	r3, [pc, #216]	@ (80028b4 <HAL_I2C_MspInit+0x178>)
 80027da:	2180      	movs	r1, #128	@ 0x80
 80027dc:	0389      	lsls	r1, r1, #14
 80027de:	430a      	orrs	r2, r1
 80027e0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80027e2:	4b34      	ldr	r3, [pc, #208]	@ (80028b4 <HAL_I2C_MspInit+0x178>)
 80027e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80027e6:	2380      	movs	r3, #128	@ 0x80
 80027e8:	039b      	lsls	r3, r3, #14
 80027ea:	4013      	ands	r3, r2
 80027ec:	60fb      	str	r3, [r7, #12]
 80027ee:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel4;
 80027f0:	4b31      	ldr	r3, [pc, #196]	@ (80028b8 <HAL_I2C_MspInit+0x17c>)
 80027f2:	4a32      	ldr	r2, [pc, #200]	@ (80028bc <HAL_I2C_MspInit+0x180>)
 80027f4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 80027f6:	4b30      	ldr	r3, [pc, #192]	@ (80028b8 <HAL_I2C_MspInit+0x17c>)
 80027f8:	220a      	movs	r2, #10
 80027fa:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027fc:	4b2e      	ldr	r3, [pc, #184]	@ (80028b8 <HAL_I2C_MspInit+0x17c>)
 80027fe:	2200      	movs	r2, #0
 8002800:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002802:	4b2d      	ldr	r3, [pc, #180]	@ (80028b8 <HAL_I2C_MspInit+0x17c>)
 8002804:	2200      	movs	r2, #0
 8002806:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002808:	4b2b      	ldr	r3, [pc, #172]	@ (80028b8 <HAL_I2C_MspInit+0x17c>)
 800280a:	2280      	movs	r2, #128	@ 0x80
 800280c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800280e:	4b2a      	ldr	r3, [pc, #168]	@ (80028b8 <HAL_I2C_MspInit+0x17c>)
 8002810:	2200      	movs	r2, #0
 8002812:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002814:	4b28      	ldr	r3, [pc, #160]	@ (80028b8 <HAL_I2C_MspInit+0x17c>)
 8002816:	2200      	movs	r2, #0
 8002818:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800281a:	4b27      	ldr	r3, [pc, #156]	@ (80028b8 <HAL_I2C_MspInit+0x17c>)
 800281c:	2200      	movs	r2, #0
 800281e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002820:	4b25      	ldr	r3, [pc, #148]	@ (80028b8 <HAL_I2C_MspInit+0x17c>)
 8002822:	2280      	movs	r2, #128	@ 0x80
 8002824:	0152      	lsls	r2, r2, #5
 8002826:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002828:	4b23      	ldr	r3, [pc, #140]	@ (80028b8 <HAL_I2C_MspInit+0x17c>)
 800282a:	0018      	movs	r0, r3
 800282c:	f001 f9a4 	bl	8003b78 <HAL_DMA_Init>
 8002830:	1e03      	subs	r3, r0, #0
 8002832:	d001      	beq.n	8002838 <HAL_I2C_MspInit+0xfc>
    {
      Error_Handler();
 8002834:	f7fe ffd4 	bl	80017e0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4a1f      	ldr	r2, [pc, #124]	@ (80028b8 <HAL_I2C_MspInit+0x17c>)
 800283c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800283e:	4b1e      	ldr	r3, [pc, #120]	@ (80028b8 <HAL_I2C_MspInit+0x17c>)
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel5;
 8002844:	4b1e      	ldr	r3, [pc, #120]	@ (80028c0 <HAL_I2C_MspInit+0x184>)
 8002846:	4a1f      	ldr	r2, [pc, #124]	@ (80028c4 <HAL_I2C_MspInit+0x188>)
 8002848:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 800284a:	4b1d      	ldr	r3, [pc, #116]	@ (80028c0 <HAL_I2C_MspInit+0x184>)
 800284c:	220b      	movs	r2, #11
 800284e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002850:	4b1b      	ldr	r3, [pc, #108]	@ (80028c0 <HAL_I2C_MspInit+0x184>)
 8002852:	2210      	movs	r2, #16
 8002854:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002856:	4b1a      	ldr	r3, [pc, #104]	@ (80028c0 <HAL_I2C_MspInit+0x184>)
 8002858:	2200      	movs	r2, #0
 800285a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800285c:	4b18      	ldr	r3, [pc, #96]	@ (80028c0 <HAL_I2C_MspInit+0x184>)
 800285e:	2280      	movs	r2, #128	@ 0x80
 8002860:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002862:	4b17      	ldr	r3, [pc, #92]	@ (80028c0 <HAL_I2C_MspInit+0x184>)
 8002864:	2200      	movs	r2, #0
 8002866:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002868:	4b15      	ldr	r3, [pc, #84]	@ (80028c0 <HAL_I2C_MspInit+0x184>)
 800286a:	2200      	movs	r2, #0
 800286c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800286e:	4b14      	ldr	r3, [pc, #80]	@ (80028c0 <HAL_I2C_MspInit+0x184>)
 8002870:	2200      	movs	r2, #0
 8002872:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002874:	4b12      	ldr	r3, [pc, #72]	@ (80028c0 <HAL_I2C_MspInit+0x184>)
 8002876:	2200      	movs	r2, #0
 8002878:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800287a:	4b11      	ldr	r3, [pc, #68]	@ (80028c0 <HAL_I2C_MspInit+0x184>)
 800287c:	0018      	movs	r0, r3
 800287e:	f001 f97b 	bl	8003b78 <HAL_DMA_Init>
 8002882:	1e03      	subs	r3, r0, #0
 8002884:	d001      	beq.n	800288a <HAL_I2C_MspInit+0x14e>
    {
      Error_Handler();
 8002886:	f7fe ffab 	bl	80017e0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a0c      	ldr	r2, [pc, #48]	@ (80028c0 <HAL_I2C_MspInit+0x184>)
 800288e:	639a      	str	r2, [r3, #56]	@ 0x38
 8002890:	4b0b      	ldr	r3, [pc, #44]	@ (80028c0 <HAL_I2C_MspInit+0x184>)
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 3, 0);
 8002896:	2200      	movs	r2, #0
 8002898:	2103      	movs	r1, #3
 800289a:	2017      	movs	r0, #23
 800289c:	f001 f92a 	bl	8003af4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 80028a0:	2017      	movs	r0, #23
 80028a2:	f001 f93c 	bl	8003b1e <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80028a6:	46c0      	nop			@ (mov r8, r8)
 80028a8:	46bd      	mov	sp, r7
 80028aa:	b013      	add	sp, #76	@ 0x4c
 80028ac:	bd90      	pop	{r4, r7, pc}
 80028ae:	46c0      	nop			@ (mov r8, r8)
 80028b0:	40005400 	.word	0x40005400
 80028b4:	40021000 	.word	0x40021000
 80028b8:	200003fc 	.word	0x200003fc
 80028bc:	40020044 	.word	0x40020044
 80028c0:	20000458 	.word	0x20000458
 80028c4:	40020058 	.word	0x40020058

080028c8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a14      	ldr	r2, [pc, #80]	@ (8002928 <HAL_I2C_MspDeInit+0x60>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d122      	bne.n	8002920 <HAL_I2C_MspDeInit+0x58>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80028da:	4b14      	ldr	r3, [pc, #80]	@ (800292c <HAL_I2C_MspDeInit+0x64>)
 80028dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80028de:	4b13      	ldr	r3, [pc, #76]	@ (800292c <HAL_I2C_MspDeInit+0x64>)
 80028e0:	4913      	ldr	r1, [pc, #76]	@ (8002930 <HAL_I2C_MspDeInit+0x68>)
 80028e2:	400a      	ands	r2, r1
 80028e4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /**I2C1 GPIO Configuration
    PA9 [PA11]     ------> I2C1_SCL
    PA10 [PA12]     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9);
 80028e6:	2380      	movs	r3, #128	@ 0x80
 80028e8:	009a      	lsls	r2, r3, #2
 80028ea:	23a0      	movs	r3, #160	@ 0xa0
 80028ec:	05db      	lsls	r3, r3, #23
 80028ee:	0011      	movs	r1, r2
 80028f0:	0018      	movs	r0, r3
 80028f2:	f001 fe71 	bl	80045d8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_10);
 80028f6:	2380      	movs	r3, #128	@ 0x80
 80028f8:	00da      	lsls	r2, r3, #3
 80028fa:	23a0      	movs	r3, #160	@ 0xa0
 80028fc:	05db      	lsls	r3, r3, #23
 80028fe:	0011      	movs	r1, r2
 8002900:	0018      	movs	r0, r3
 8002902:	f001 fe69 	bl	80045d8 <HAL_GPIO_DeInit>

    /* I2C1 DMA DeInit */
    HAL_DMA_DeInit(hi2c->hdmarx);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800290a:	0018      	movs	r0, r3
 800290c:	f001 f9be 	bl	8003c8c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hi2c->hdmatx);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002914:	0018      	movs	r0, r3
 8002916:	f001 f9b9 	bl	8003c8c <HAL_DMA_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_IRQn);
 800291a:	2017      	movs	r0, #23
 800291c:	f001 f90f 	bl	8003b3e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8002920:	46c0      	nop			@ (mov r8, r8)
 8002922:	46bd      	mov	sp, r7
 8002924:	b002      	add	sp, #8
 8002926:	bd80      	pop	{r7, pc}
 8002928:	40005400 	.word	0x40005400
 800292c:	40021000 	.word	0x40021000
 8002930:	ffdfffff 	.word	0xffdfffff

08002934 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002934:	b590      	push	{r4, r7, lr}
 8002936:	b093      	sub	sp, #76	@ 0x4c
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800293c:	2334      	movs	r3, #52	@ 0x34
 800293e:	18fb      	adds	r3, r7, r3
 8002940:	0018      	movs	r0, r3
 8002942:	2314      	movs	r3, #20
 8002944:	001a      	movs	r2, r3
 8002946:	2100      	movs	r1, #0
 8002948:	f007 fb2e 	bl	8009fa8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800294c:	2414      	movs	r4, #20
 800294e:	193b      	adds	r3, r7, r4
 8002950:	0018      	movs	r0, r3
 8002952:	2320      	movs	r3, #32
 8002954:	001a      	movs	r2, r3
 8002956:	2100      	movs	r1, #0
 8002958:	f007 fb26 	bl	8009fa8 <memset>
  if(hspi->Instance==SPI1)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a34      	ldr	r2, [pc, #208]	@ (8002a34 <HAL_SPI_MspInit+0x100>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d162      	bne.n	8002a2c <HAL_SPI_MspInit+0xf8>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 8002966:	193b      	adds	r3, r7, r4
 8002968:	2204      	movs	r2, #4
 800296a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 800296c:	193b      	adds	r3, r7, r4
 800296e:	2200      	movs	r2, #0
 8002970:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002972:	193b      	adds	r3, r7, r4
 8002974:	0018      	movs	r0, r3
 8002976:	f004 fe13 	bl	80075a0 <HAL_RCCEx_PeriphCLKConfig>
 800297a:	1e03      	subs	r3, r0, #0
 800297c:	d001      	beq.n	8002982 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 800297e:	f7fe ff2f 	bl	80017e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002982:	4b2d      	ldr	r3, [pc, #180]	@ (8002a38 <HAL_SPI_MspInit+0x104>)
 8002984:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002986:	4b2c      	ldr	r3, [pc, #176]	@ (8002a38 <HAL_SPI_MspInit+0x104>)
 8002988:	2180      	movs	r1, #128	@ 0x80
 800298a:	0149      	lsls	r1, r1, #5
 800298c:	430a      	orrs	r2, r1
 800298e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002990:	4b29      	ldr	r3, [pc, #164]	@ (8002a38 <HAL_SPI_MspInit+0x104>)
 8002992:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002994:	2380      	movs	r3, #128	@ 0x80
 8002996:	015b      	lsls	r3, r3, #5
 8002998:	4013      	ands	r3, r2
 800299a:	613b      	str	r3, [r7, #16]
 800299c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800299e:	4b26      	ldr	r3, [pc, #152]	@ (8002a38 <HAL_SPI_MspInit+0x104>)
 80029a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029a2:	4b25      	ldr	r3, [pc, #148]	@ (8002a38 <HAL_SPI_MspInit+0x104>)
 80029a4:	2101      	movs	r1, #1
 80029a6:	430a      	orrs	r2, r1
 80029a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80029aa:	4b23      	ldr	r3, [pc, #140]	@ (8002a38 <HAL_SPI_MspInit+0x104>)
 80029ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029ae:	2201      	movs	r2, #1
 80029b0:	4013      	ands	r3, r2
 80029b2:	60fb      	str	r3, [r7, #12]
 80029b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029b6:	4b20      	ldr	r3, [pc, #128]	@ (8002a38 <HAL_SPI_MspInit+0x104>)
 80029b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029ba:	4b1f      	ldr	r3, [pc, #124]	@ (8002a38 <HAL_SPI_MspInit+0x104>)
 80029bc:	2102      	movs	r1, #2
 80029be:	430a      	orrs	r2, r1
 80029c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80029c2:	4b1d      	ldr	r3, [pc, #116]	@ (8002a38 <HAL_SPI_MspInit+0x104>)
 80029c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029c6:	2202      	movs	r2, #2
 80029c8:	4013      	ands	r3, r2
 80029ca:	60bb      	str	r3, [r7, #8]
 80029cc:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA11 [PA9]     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80029ce:	2134      	movs	r1, #52	@ 0x34
 80029d0:	187b      	adds	r3, r7, r1
 80029d2:	2280      	movs	r2, #128	@ 0x80
 80029d4:	0112      	lsls	r2, r2, #4
 80029d6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d8:	000c      	movs	r4, r1
 80029da:	193b      	adds	r3, r7, r4
 80029dc:	2202      	movs	r2, #2
 80029de:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e0:	193b      	adds	r3, r7, r4
 80029e2:	2200      	movs	r2, #0
 80029e4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e6:	193b      	adds	r3, r7, r4
 80029e8:	2200      	movs	r2, #0
 80029ea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80029ec:	193b      	adds	r3, r7, r4
 80029ee:	2200      	movs	r2, #0
 80029f0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029f2:	193a      	adds	r2, r7, r4
 80029f4:	23a0      	movs	r3, #160	@ 0xa0
 80029f6:	05db      	lsls	r3, r3, #23
 80029f8:	0011      	movs	r1, r2
 80029fa:	0018      	movs	r0, r3
 80029fc:	f001 fc7a 	bl	80042f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8002a00:	0021      	movs	r1, r4
 8002a02:	187b      	adds	r3, r7, r1
 8002a04:	2228      	movs	r2, #40	@ 0x28
 8002a06:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a08:	187b      	adds	r3, r7, r1
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0e:	187b      	adds	r3, r7, r1
 8002a10:	2200      	movs	r2, #0
 8002a12:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a14:	187b      	adds	r3, r7, r1
 8002a16:	2200      	movs	r2, #0
 8002a18:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002a1a:	187b      	adds	r3, r7, r1
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a20:	187b      	adds	r3, r7, r1
 8002a22:	4a06      	ldr	r2, [pc, #24]	@ (8002a3c <HAL_SPI_MspInit+0x108>)
 8002a24:	0019      	movs	r1, r3
 8002a26:	0010      	movs	r0, r2
 8002a28:	f001 fc64 	bl	80042f4 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002a2c:	46c0      	nop			@ (mov r8, r8)
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	b013      	add	sp, #76	@ 0x4c
 8002a32:	bd90      	pop	{r4, r7, pc}
 8002a34:	40013000 	.word	0x40013000
 8002a38:	40021000 	.word	0x40021000
 8002a3c:	50000400 	.word	0x50000400

08002a40 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a0a      	ldr	r2, [pc, #40]	@ (8002a78 <HAL_TIM_PWM_MspInit+0x38>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d10d      	bne.n	8002a6e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a52:	4b0a      	ldr	r3, [pc, #40]	@ (8002a7c <HAL_TIM_PWM_MspInit+0x3c>)
 8002a54:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a56:	4b09      	ldr	r3, [pc, #36]	@ (8002a7c <HAL_TIM_PWM_MspInit+0x3c>)
 8002a58:	2180      	movs	r1, #128	@ 0x80
 8002a5a:	0109      	lsls	r1, r1, #4
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002a60:	4b06      	ldr	r3, [pc, #24]	@ (8002a7c <HAL_TIM_PWM_MspInit+0x3c>)
 8002a62:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a64:	2380      	movs	r3, #128	@ 0x80
 8002a66:	011b      	lsls	r3, r3, #4
 8002a68:	4013      	ands	r3, r2
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8002a6e:	46c0      	nop			@ (mov r8, r8)
 8002a70:	46bd      	mov	sp, r7
 8002a72:	b004      	add	sp, #16
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	46c0      	nop			@ (mov r8, r8)
 8002a78:	40012c00 	.word	0x40012c00
 8002a7c:	40021000 	.word	0x40021000

08002a80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a0a      	ldr	r2, [pc, #40]	@ (8002ab8 <HAL_TIM_Base_MspInit+0x38>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d10d      	bne.n	8002aae <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002a92:	4b0a      	ldr	r3, [pc, #40]	@ (8002abc <HAL_TIM_Base_MspInit+0x3c>)
 8002a94:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a96:	4b09      	ldr	r3, [pc, #36]	@ (8002abc <HAL_TIM_Base_MspInit+0x3c>)
 8002a98:	2180      	movs	r1, #128	@ 0x80
 8002a9a:	0209      	lsls	r1, r1, #8
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002aa0:	4b06      	ldr	r3, [pc, #24]	@ (8002abc <HAL_TIM_Base_MspInit+0x3c>)
 8002aa2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002aa4:	2380      	movs	r3, #128	@ 0x80
 8002aa6:	021b      	lsls	r3, r3, #8
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	60fb      	str	r3, [r7, #12]
 8002aac:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM14_MspInit 1 */

  }

}
 8002aae:	46c0      	nop			@ (mov r8, r8)
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	b004      	add	sp, #16
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	46c0      	nop			@ (mov r8, r8)
 8002ab8:	40002000 	.word	0x40002000
 8002abc:	40021000 	.word	0x40021000

08002ac0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002ac0:	b590      	push	{r4, r7, lr}
 8002ac2:	b089      	sub	sp, #36	@ 0x24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac8:	240c      	movs	r4, #12
 8002aca:	193b      	adds	r3, r7, r4
 8002acc:	0018      	movs	r0, r3
 8002ace:	2314      	movs	r3, #20
 8002ad0:	001a      	movs	r2, r3
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	f007 fa68 	bl	8009fa8 <memset>
  if(htim->Instance==TIM1)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a15      	ldr	r2, [pc, #84]	@ (8002b34 <HAL_TIM_MspPostInit+0x74>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d123      	bne.n	8002b2a <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ae2:	4b15      	ldr	r3, [pc, #84]	@ (8002b38 <HAL_TIM_MspPostInit+0x78>)
 8002ae4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ae6:	4b14      	ldr	r3, [pc, #80]	@ (8002b38 <HAL_TIM_MspPostInit+0x78>)
 8002ae8:	2101      	movs	r1, #1
 8002aea:	430a      	orrs	r2, r1
 8002aec:	635a      	str	r2, [r3, #52]	@ 0x34
 8002aee:	4b12      	ldr	r3, [pc, #72]	@ (8002b38 <HAL_TIM_MspPostInit+0x78>)
 8002af0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002af2:	2201      	movs	r2, #1
 8002af4:	4013      	ands	r3, r2
 8002af6:	60bb      	str	r3, [r7, #8]
 8002af8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA15     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = Actuator_PWM_Pin;
 8002afa:	193b      	adds	r3, r7, r4
 8002afc:	2280      	movs	r2, #128	@ 0x80
 8002afe:	0212      	lsls	r2, r2, #8
 8002b00:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b02:	0021      	movs	r1, r4
 8002b04:	187b      	adds	r3, r7, r1
 8002b06:	2202      	movs	r2, #2
 8002b08:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0a:	187b      	adds	r3, r7, r1
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b10:	187b      	adds	r3, r7, r1
 8002b12:	2200      	movs	r2, #0
 8002b14:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002b16:	187b      	adds	r3, r7, r1
 8002b18:	2202      	movs	r2, #2
 8002b1a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(Actuator_PWM_GPIO_Port, &GPIO_InitStruct);
 8002b1c:	187a      	adds	r2, r7, r1
 8002b1e:	23a0      	movs	r3, #160	@ 0xa0
 8002b20:	05db      	lsls	r3, r3, #23
 8002b22:	0011      	movs	r1, r2
 8002b24:	0018      	movs	r0, r3
 8002b26:	f001 fbe5 	bl	80042f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002b2a:	46c0      	nop			@ (mov r8, r8)
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	b009      	add	sp, #36	@ 0x24
 8002b30:	bd90      	pop	{r4, r7, pc}
 8002b32:	46c0      	nop			@ (mov r8, r8)
 8002b34:	40012c00 	.word	0x40012c00
 8002b38:	40021000 	.word	0x40021000

08002b3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b3c:	b590      	push	{r4, r7, lr}
 8002b3e:	b095      	sub	sp, #84	@ 0x54
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b44:	233c      	movs	r3, #60	@ 0x3c
 8002b46:	18fb      	adds	r3, r7, r3
 8002b48:	0018      	movs	r0, r3
 8002b4a:	2314      	movs	r3, #20
 8002b4c:	001a      	movs	r2, r3
 8002b4e:	2100      	movs	r1, #0
 8002b50:	f007 fa2a 	bl	8009fa8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b54:	241c      	movs	r4, #28
 8002b56:	193b      	adds	r3, r7, r4
 8002b58:	0018      	movs	r0, r3
 8002b5a:	2320      	movs	r3, #32
 8002b5c:	001a      	movs	r2, r3
 8002b5e:	2100      	movs	r1, #0
 8002b60:	f007 fa22 	bl	8009fa8 <memset>
  if(huart->Instance==USART1)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a74      	ldr	r2, [pc, #464]	@ (8002d3c <HAL_UART_MspInit+0x200>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d000      	beq.n	8002b70 <HAL_UART_MspInit+0x34>
 8002b6e:	e0e1      	b.n	8002d34 <HAL_UART_MspInit+0x1f8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002b70:	193b      	adds	r3, r7, r4
 8002b72:	2201      	movs	r2, #1
 8002b74:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002b76:	193b      	adds	r3, r7, r4
 8002b78:	2200      	movs	r2, #0
 8002b7a:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b7c:	193b      	adds	r3, r7, r4
 8002b7e:	0018      	movs	r0, r3
 8002b80:	f004 fd0e 	bl	80075a0 <HAL_RCCEx_PeriphCLKConfig>
 8002b84:	1e03      	subs	r3, r0, #0
 8002b86:	d001      	beq.n	8002b8c <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8002b88:	f7fe fe2a 	bl	80017e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b8c:	4b6c      	ldr	r3, [pc, #432]	@ (8002d40 <HAL_UART_MspInit+0x204>)
 8002b8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b90:	4b6b      	ldr	r3, [pc, #428]	@ (8002d40 <HAL_UART_MspInit+0x204>)
 8002b92:	2180      	movs	r1, #128	@ 0x80
 8002b94:	01c9      	lsls	r1, r1, #7
 8002b96:	430a      	orrs	r2, r1
 8002b98:	641a      	str	r2, [r3, #64]	@ 0x40
 8002b9a:	4b69      	ldr	r3, [pc, #420]	@ (8002d40 <HAL_UART_MspInit+0x204>)
 8002b9c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b9e:	2380      	movs	r3, #128	@ 0x80
 8002ba0:	01db      	lsls	r3, r3, #7
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	61bb      	str	r3, [r7, #24]
 8002ba6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ba8:	4b65      	ldr	r3, [pc, #404]	@ (8002d40 <HAL_UART_MspInit+0x204>)
 8002baa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002bac:	4b64      	ldr	r3, [pc, #400]	@ (8002d40 <HAL_UART_MspInit+0x204>)
 8002bae:	2104      	movs	r1, #4
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	635a      	str	r2, [r3, #52]	@ 0x34
 8002bb4:	4b62      	ldr	r3, [pc, #392]	@ (8002d40 <HAL_UART_MspInit+0x204>)
 8002bb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bb8:	2204      	movs	r2, #4
 8002bba:	4013      	ands	r3, r2
 8002bbc:	617b      	str	r3, [r7, #20]
 8002bbe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bc0:	4b5f      	ldr	r3, [pc, #380]	@ (8002d40 <HAL_UART_MspInit+0x204>)
 8002bc2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002bc4:	4b5e      	ldr	r3, [pc, #376]	@ (8002d40 <HAL_UART_MspInit+0x204>)
 8002bc6:	2102      	movs	r1, #2
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	635a      	str	r2, [r3, #52]	@ 0x34
 8002bcc:	4b5c      	ldr	r3, [pc, #368]	@ (8002d40 <HAL_UART_MspInit+0x204>)
 8002bce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bd0:	2202      	movs	r2, #2
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	613b      	str	r3, [r7, #16]
 8002bd6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bd8:	4b59      	ldr	r3, [pc, #356]	@ (8002d40 <HAL_UART_MspInit+0x204>)
 8002bda:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002bdc:	4b58      	ldr	r3, [pc, #352]	@ (8002d40 <HAL_UART_MspInit+0x204>)
 8002bde:	2101      	movs	r1, #1
 8002be0:	430a      	orrs	r2, r1
 8002be2:	635a      	str	r2, [r3, #52]	@ 0x34
 8002be4:	4b56      	ldr	r3, [pc, #344]	@ (8002d40 <HAL_UART_MspInit+0x204>)
 8002be6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002be8:	2201      	movs	r2, #1
 8002bea:	4013      	ands	r3, r2
 8002bec:	60fb      	str	r3, [r7, #12]
 8002bee:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC14-OSCX_IN(PC14)     ------> USART1_TX
    PB2     ------> USART1_RX
    PA12 [PA10]     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002bf0:	213c      	movs	r1, #60	@ 0x3c
 8002bf2:	187b      	adds	r3, r7, r1
 8002bf4:	2280      	movs	r2, #128	@ 0x80
 8002bf6:	01d2      	lsls	r2, r2, #7
 8002bf8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bfa:	000c      	movs	r4, r1
 8002bfc:	193b      	adds	r3, r7, r4
 8002bfe:	2202      	movs	r2, #2
 8002c00:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c02:	193b      	adds	r3, r7, r4
 8002c04:	2200      	movs	r2, #0
 8002c06:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c08:	193b      	adds	r3, r7, r4
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8002c0e:	193b      	adds	r3, r7, r4
 8002c10:	2200      	movs	r2, #0
 8002c12:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c14:	193b      	adds	r3, r7, r4
 8002c16:	4a4b      	ldr	r2, [pc, #300]	@ (8002d44 <HAL_UART_MspInit+0x208>)
 8002c18:	0019      	movs	r1, r3
 8002c1a:	0010      	movs	r0, r2
 8002c1c:	f001 fb6a 	bl	80042f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002c20:	193b      	adds	r3, r7, r4
 8002c22:	2204      	movs	r2, #4
 8002c24:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c26:	193b      	adds	r3, r7, r4
 8002c28:	2202      	movs	r2, #2
 8002c2a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2c:	193b      	adds	r3, r7, r4
 8002c2e:	2200      	movs	r2, #0
 8002c30:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c32:	193b      	adds	r3, r7, r4
 8002c34:	2200      	movs	r2, #0
 8002c36:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8002c38:	193b      	adds	r3, r7, r4
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c3e:	193b      	adds	r3, r7, r4
 8002c40:	4a41      	ldr	r2, [pc, #260]	@ (8002d48 <HAL_UART_MspInit+0x20c>)
 8002c42:	0019      	movs	r1, r3
 8002c44:	0010      	movs	r0, r2
 8002c46:	f001 fb55 	bl	80042f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002c4a:	0021      	movs	r1, r4
 8002c4c:	187b      	adds	r3, r7, r1
 8002c4e:	2280      	movs	r2, #128	@ 0x80
 8002c50:	0152      	lsls	r2, r2, #5
 8002c52:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c54:	187b      	adds	r3, r7, r1
 8002c56:	2202      	movs	r2, #2
 8002c58:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5a:	187b      	adds	r3, r7, r1
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c60:	187b      	adds	r3, r7, r1
 8002c62:	2200      	movs	r2, #0
 8002c64:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002c66:	187b      	adds	r3, r7, r1
 8002c68:	2201      	movs	r2, #1
 8002c6a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c6c:	187a      	adds	r2, r7, r1
 8002c6e:	23a0      	movs	r3, #160	@ 0xa0
 8002c70:	05db      	lsls	r3, r3, #23
 8002c72:	0011      	movs	r1, r2
 8002c74:	0018      	movs	r0, r3
 8002c76:	f001 fb3d 	bl	80042f4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8002c7a:	4b34      	ldr	r3, [pc, #208]	@ (8002d4c <HAL_UART_MspInit+0x210>)
 8002c7c:	4a34      	ldr	r2, [pc, #208]	@ (8002d50 <HAL_UART_MspInit+0x214>)
 8002c7e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002c80:	4b32      	ldr	r3, [pc, #200]	@ (8002d4c <HAL_UART_MspInit+0x210>)
 8002c82:	2232      	movs	r2, #50	@ 0x32
 8002c84:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c86:	4b31      	ldr	r3, [pc, #196]	@ (8002d4c <HAL_UART_MspInit+0x210>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c8c:	4b2f      	ldr	r3, [pc, #188]	@ (8002d4c <HAL_UART_MspInit+0x210>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c92:	4b2e      	ldr	r3, [pc, #184]	@ (8002d4c <HAL_UART_MspInit+0x210>)
 8002c94:	2280      	movs	r2, #128	@ 0x80
 8002c96:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c98:	4b2c      	ldr	r3, [pc, #176]	@ (8002d4c <HAL_UART_MspInit+0x210>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c9e:	4b2b      	ldr	r3, [pc, #172]	@ (8002d4c <HAL_UART_MspInit+0x210>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002ca4:	4b29      	ldr	r3, [pc, #164]	@ (8002d4c <HAL_UART_MspInit+0x210>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002caa:	4b28      	ldr	r3, [pc, #160]	@ (8002d4c <HAL_UART_MspInit+0x210>)
 8002cac:	22c0      	movs	r2, #192	@ 0xc0
 8002cae:	0192      	lsls	r2, r2, #6
 8002cb0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002cb2:	4b26      	ldr	r3, [pc, #152]	@ (8002d4c <HAL_UART_MspInit+0x210>)
 8002cb4:	0018      	movs	r0, r3
 8002cb6:	f000 ff5f 	bl	8003b78 <HAL_DMA_Init>
 8002cba:	1e03      	subs	r3, r0, #0
 8002cbc:	d001      	beq.n	8002cc2 <HAL_UART_MspInit+0x186>
    {
      Error_Handler();
 8002cbe:	f7fe fd8f 	bl	80017e0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2180      	movs	r1, #128	@ 0x80
 8002cc6:	4a21      	ldr	r2, [pc, #132]	@ (8002d4c <HAL_UART_MspInit+0x210>)
 8002cc8:	505a      	str	r2, [r3, r1]
 8002cca:	4b20      	ldr	r3, [pc, #128]	@ (8002d4c <HAL_UART_MspInit+0x210>)
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8002cd0:	4b20      	ldr	r3, [pc, #128]	@ (8002d54 <HAL_UART_MspInit+0x218>)
 8002cd2:	4a21      	ldr	r2, [pc, #132]	@ (8002d58 <HAL_UART_MspInit+0x21c>)
 8002cd4:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002cd6:	4b1f      	ldr	r3, [pc, #124]	@ (8002d54 <HAL_UART_MspInit+0x218>)
 8002cd8:	2233      	movs	r2, #51	@ 0x33
 8002cda:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002cdc:	4b1d      	ldr	r3, [pc, #116]	@ (8002d54 <HAL_UART_MspInit+0x218>)
 8002cde:	2210      	movs	r2, #16
 8002ce0:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ce2:	4b1c      	ldr	r3, [pc, #112]	@ (8002d54 <HAL_UART_MspInit+0x218>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ce8:	4b1a      	ldr	r3, [pc, #104]	@ (8002d54 <HAL_UART_MspInit+0x218>)
 8002cea:	2280      	movs	r2, #128	@ 0x80
 8002cec:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002cee:	4b19      	ldr	r3, [pc, #100]	@ (8002d54 <HAL_UART_MspInit+0x218>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cf4:	4b17      	ldr	r3, [pc, #92]	@ (8002d54 <HAL_UART_MspInit+0x218>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002cfa:	4b16      	ldr	r3, [pc, #88]	@ (8002d54 <HAL_UART_MspInit+0x218>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002d00:	4b14      	ldr	r3, [pc, #80]	@ (8002d54 <HAL_UART_MspInit+0x218>)
 8002d02:	2280      	movs	r2, #128	@ 0x80
 8002d04:	0192      	lsls	r2, r2, #6
 8002d06:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002d08:	4b12      	ldr	r3, [pc, #72]	@ (8002d54 <HAL_UART_MspInit+0x218>)
 8002d0a:	0018      	movs	r0, r3
 8002d0c:	f000 ff34 	bl	8003b78 <HAL_DMA_Init>
 8002d10:	1e03      	subs	r3, r0, #0
 8002d12:	d001      	beq.n	8002d18 <HAL_UART_MspInit+0x1dc>
    {
      Error_Handler();
 8002d14:	f7fe fd64 	bl	80017e0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4a0e      	ldr	r2, [pc, #56]	@ (8002d54 <HAL_UART_MspInit+0x218>)
 8002d1c:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002d1e:	4b0d      	ldr	r3, [pc, #52]	@ (8002d54 <HAL_UART_MspInit+0x218>)
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002d24:	2200      	movs	r2, #0
 8002d26:	2100      	movs	r1, #0
 8002d28:	201b      	movs	r0, #27
 8002d2a:	f000 fee3 	bl	8003af4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002d2e:	201b      	movs	r0, #27
 8002d30:	f000 fef5 	bl	8003b1e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002d34:	46c0      	nop			@ (mov r8, r8)
 8002d36:	46bd      	mov	sp, r7
 8002d38:	b015      	add	sp, #84	@ 0x54
 8002d3a:	bd90      	pop	{r4, r7, pc}
 8002d3c:	40013800 	.word	0x40013800
 8002d40:	40021000 	.word	0x40021000
 8002d44:	50000800 	.word	0x50000800
 8002d48:	50000400 	.word	0x50000400
 8002d4c:	20000644 	.word	0x20000644
 8002d50:	40020008 	.word	0x40020008
 8002d54:	200006a0 	.word	0x200006a0
 8002d58:	4002001c 	.word	0x4002001c

08002d5c <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a17      	ldr	r2, [pc, #92]	@ (8002dc8 <HAL_UART_MspDeInit+0x6c>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d127      	bne.n	8002dbe <HAL_UART_MspDeInit+0x62>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002d6e:	4b17      	ldr	r3, [pc, #92]	@ (8002dcc <HAL_UART_MspDeInit+0x70>)
 8002d70:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d72:	4b16      	ldr	r3, [pc, #88]	@ (8002dcc <HAL_UART_MspDeInit+0x70>)
 8002d74:	4916      	ldr	r1, [pc, #88]	@ (8002dd0 <HAL_UART_MspDeInit+0x74>)
 8002d76:	400a      	ands	r2, r1
 8002d78:	641a      	str	r2, [r3, #64]	@ 0x40
    /**USART1 GPIO Configuration
    PC14-OSCX_IN(PC14)     ------> USART1_TX
    PB2     ------> USART1_RX
    PA12 [PA10]     ------> USART1_DE
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_14);
 8002d7a:	2380      	movs	r3, #128	@ 0x80
 8002d7c:	01db      	lsls	r3, r3, #7
 8002d7e:	4a15      	ldr	r2, [pc, #84]	@ (8002dd4 <HAL_UART_MspDeInit+0x78>)
 8002d80:	0019      	movs	r1, r3
 8002d82:	0010      	movs	r0, r2
 8002d84:	f001 fc28 	bl	80045d8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2);
 8002d88:	4b13      	ldr	r3, [pc, #76]	@ (8002dd8 <HAL_UART_MspDeInit+0x7c>)
 8002d8a:	2104      	movs	r1, #4
 8002d8c:	0018      	movs	r0, r3
 8002d8e:	f001 fc23 	bl	80045d8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_12);
 8002d92:	2380      	movs	r3, #128	@ 0x80
 8002d94:	015a      	lsls	r2, r3, #5
 8002d96:	23a0      	movs	r3, #160	@ 0xa0
 8002d98:	05db      	lsls	r3, r3, #23
 8002d9a:	0011      	movs	r1, r2
 8002d9c:	0018      	movs	r0, r3
 8002d9e:	f001 fc1b 	bl	80045d8 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2280      	movs	r2, #128	@ 0x80
 8002da6:	589b      	ldr	r3, [r3, r2]
 8002da8:	0018      	movs	r0, r3
 8002daa:	f000 ff6f 	bl	8003c8c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002db2:	0018      	movs	r0, r3
 8002db4:	f000 ff6a 	bl	8003c8c <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002db8:	201b      	movs	r0, #27
 8002dba:	f000 fec0 	bl	8003b3e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8002dbe:	46c0      	nop			@ (mov r8, r8)
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	b002      	add	sp, #8
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	46c0      	nop			@ (mov r8, r8)
 8002dc8:	40013800 	.word	0x40013800
 8002dcc:	40021000 	.word	0x40021000
 8002dd0:	ffffbfff 	.word	0xffffbfff
 8002dd4:	50000800 	.word	0x50000800
 8002dd8:	50000400 	.word	0x50000400

08002ddc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002de0:	46c0      	nop			@ (mov r8, r8)
 8002de2:	e7fd      	b.n	8002de0 <NMI_Handler+0x4>

08002de4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002de8:	46c0      	nop			@ (mov r8, r8)
 8002dea:	e7fd      	b.n	8002de8 <HardFault_Handler+0x4>

08002dec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002df0:	46c0      	nop			@ (mov r8, r8)
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002dfa:	46c0      	nop			@ (mov r8, r8)
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e04:	f000 f8ee 	bl	8002fe4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e08:	46c0      	nop			@ (mov r8, r8)
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
	...

08002e10 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002e14:	4b03      	ldr	r3, [pc, #12]	@ (8002e24 <DMA1_Channel1_IRQHandler+0x14>)
 8002e16:	0018      	movs	r0, r3
 8002e18:	f001 f914 	bl	8004044 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002e1c:	46c0      	nop			@ (mov r8, r8)
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	46c0      	nop			@ (mov r8, r8)
 8002e24:	20000644 	.word	0x20000644

08002e28 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002e2c:	4b05      	ldr	r3, [pc, #20]	@ (8002e44 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8002e2e:	0018      	movs	r0, r3
 8002e30:	f001 f908 	bl	8004044 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002e34:	4b04      	ldr	r3, [pc, #16]	@ (8002e48 <DMA1_Channel2_3_IRQHandler+0x20>)
 8002e36:	0018      	movs	r0, r3
 8002e38:	f001 f904 	bl	8004044 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8002e3c:	46c0      	nop			@ (mov r8, r8)
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	46c0      	nop			@ (mov r8, r8)
 8002e44:	200006a0 	.word	0x200006a0
 8002e48:	2000034c 	.word	0x2000034c

08002e4c <DMAMUX1_DMA1_CH4_5_IRQHandler>:

/**
  * @brief This function handles DMAMUX1, DMA1 Channel 4 and 5.
  */
void DMAMUX1_DMA1_CH4_5_IRQHandler(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_DMA1_CH4_5_IRQn 0 */

  /* USER CODE END DMAMUX1_DMA1_CH4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002e50:	4b05      	ldr	r3, [pc, #20]	@ (8002e68 <DMAMUX1_DMA1_CH4_5_IRQHandler+0x1c>)
 8002e52:	0018      	movs	r0, r3
 8002e54:	f001 f8f6 	bl	8004044 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002e58:	4b04      	ldr	r3, [pc, #16]	@ (8002e6c <DMAMUX1_DMA1_CH4_5_IRQHandler+0x20>)
 8002e5a:	0018      	movs	r0, r3
 8002e5c:	f001 f8f2 	bl	8004044 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_DMA1_CH4_5_IRQn 1 */

  /* USER CODE END DMAMUX1_DMA1_CH4_5_IRQn 1 */
}
 8002e60:	46c0      	nop			@ (mov r8, r8)
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	46c0      	nop			@ (mov r8, r8)
 8002e68:	200003fc 	.word	0x200003fc
 8002e6c:	20000458 	.word	0x20000458

08002e70 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 interrupt (combined with EXTI 23).
  */
void I2C1_IRQHandler(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8002e74:	4b09      	ldr	r3, [pc, #36]	@ (8002e9c <I2C1_IRQHandler+0x2c>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	699a      	ldr	r2, [r3, #24]
 8002e7a:	23e0      	movs	r3, #224	@ 0xe0
 8002e7c:	00db      	lsls	r3, r3, #3
 8002e7e:	4013      	ands	r3, r2
 8002e80:	d004      	beq.n	8002e8c <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8002e82:	4b06      	ldr	r3, [pc, #24]	@ (8002e9c <I2C1_IRQHandler+0x2c>)
 8002e84:	0018      	movs	r0, r3
 8002e86:	f002 f91f 	bl	80050c8 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8002e8a:	e003      	b.n	8002e94 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8002e8c:	4b03      	ldr	r3, [pc, #12]	@ (8002e9c <I2C1_IRQHandler+0x2c>)
 8002e8e:	0018      	movs	r0, r3
 8002e90:	f002 f900 	bl	8005094 <HAL_I2C_EV_IRQHandler>
}
 8002e94:	46c0      	nop			@ (mov r8, r8)
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	46c0      	nop			@ (mov r8, r8)
 8002e9c:	200003a8 	.word	0x200003a8

08002ea0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 interrupt.
  */
void USART1_IRQHandler(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002ea4:	4b03      	ldr	r3, [pc, #12]	@ (8002eb4 <USART1_IRQHandler+0x14>)
 8002ea6:	0018      	movs	r0, r3
 8002ea8:	f005 fce0 	bl	800886c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002eac:	46c0      	nop			@ (mov r8, r8)
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	46c0      	nop			@ (mov r8, r8)
 8002eb4:	200005b0 	.word	0x200005b0

08002eb8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002ebc:	4b03      	ldr	r3, [pc, #12]	@ (8002ecc <SystemInit+0x14>)
 8002ebe:	2280      	movs	r2, #128	@ 0x80
 8002ec0:	0512      	lsls	r2, r2, #20
 8002ec2:	609a      	str	r2, [r3, #8]
#endif
}
 8002ec4:	46c0      	nop			@ (mov r8, r8)
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	46c0      	nop			@ (mov r8, r8)
 8002ecc:	e000ed00 	.word	0xe000ed00

08002ed0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002ed0:	480d      	ldr	r0, [pc, #52]	@ (8002f08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002ed2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002ed4:	f7ff fff0 	bl	8002eb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002ed8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002eda:	e003      	b.n	8002ee4 <LoopCopyDataInit>

08002edc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002edc:	4b0b      	ldr	r3, [pc, #44]	@ (8002f0c <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8002ede:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002ee0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002ee2:	3104      	adds	r1, #4

08002ee4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002ee4:	480a      	ldr	r0, [pc, #40]	@ (8002f10 <LoopForever+0xa>)
  ldr r3, =_edata
 8002ee6:	4b0b      	ldr	r3, [pc, #44]	@ (8002f14 <LoopForever+0xe>)
  adds r2, r0, r1
 8002ee8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002eea:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002eec:	d3f6      	bcc.n	8002edc <CopyDataInit>
  ldr r2, =_sbss
 8002eee:	4a0a      	ldr	r2, [pc, #40]	@ (8002f18 <LoopForever+0x12>)
  b LoopFillZerobss
 8002ef0:	e002      	b.n	8002ef8 <LoopFillZerobss>

08002ef2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002ef2:	2300      	movs	r3, #0
  str  r3, [r2]
 8002ef4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ef6:	3204      	adds	r2, #4

08002ef8 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8002ef8:	4b08      	ldr	r3, [pc, #32]	@ (8002f1c <LoopForever+0x16>)
  cmp r2, r3
 8002efa:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002efc:	d3f9      	bcc.n	8002ef2 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8002efe:	f007 f85b 	bl	8009fb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002f02:	f7fd fee3 	bl	8000ccc <main>

08002f06 <LoopForever>:

LoopForever:
    b LoopForever
 8002f06:	e7fe      	b.n	8002f06 <LoopForever>
  ldr   r0, =_estack
 8002f08:	20006000 	.word	0x20006000
  ldr r3, =_sidata
 8002f0c:	0800a438 	.word	0x0800a438
  ldr r0, =_sdata
 8002f10:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002f14:	200000bc 	.word	0x200000bc
  ldr r2, =_sbss
 8002f18:	200000bc 	.word	0x200000bc
  ldr r3, = _ebss
 8002f1c:	20000b60 	.word	0x20000b60

08002f20 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f20:	e7fe      	b.n	8002f20 <ADC1_IRQHandler>

08002f22 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b082      	sub	sp, #8
 8002f26:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002f28:	1dfb      	adds	r3, r7, #7
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f2e:	2003      	movs	r0, #3
 8002f30:	f000 f80e 	bl	8002f50 <HAL_InitTick>
 8002f34:	1e03      	subs	r3, r0, #0
 8002f36:	d003      	beq.n	8002f40 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8002f38:	1dfb      	adds	r3, r7, #7
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	701a      	strb	r2, [r3, #0]
 8002f3e:	e001      	b.n	8002f44 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002f40:	f7ff fb4c 	bl	80025dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002f44:	1dfb      	adds	r3, r7, #7
 8002f46:	781b      	ldrb	r3, [r3, #0]
}
 8002f48:	0018      	movs	r0, r3
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	b002      	add	sp, #8
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f50:	b590      	push	{r4, r7, lr}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002f58:	230f      	movs	r3, #15
 8002f5a:	18fb      	adds	r3, r7, r3
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8002f60:	4b1d      	ldr	r3, [pc, #116]	@ (8002fd8 <HAL_InitTick+0x88>)
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d02b      	beq.n	8002fc0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8002f68:	4b1c      	ldr	r3, [pc, #112]	@ (8002fdc <HAL_InitTick+0x8c>)
 8002f6a:	681c      	ldr	r4, [r3, #0]
 8002f6c:	4b1a      	ldr	r3, [pc, #104]	@ (8002fd8 <HAL_InitTick+0x88>)
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	0019      	movs	r1, r3
 8002f72:	23fa      	movs	r3, #250	@ 0xfa
 8002f74:	0098      	lsls	r0, r3, #2
 8002f76:	f7fd f8c7 	bl	8000108 <__udivsi3>
 8002f7a:	0003      	movs	r3, r0
 8002f7c:	0019      	movs	r1, r3
 8002f7e:	0020      	movs	r0, r4
 8002f80:	f7fd f8c2 	bl	8000108 <__udivsi3>
 8002f84:	0003      	movs	r3, r0
 8002f86:	0018      	movs	r0, r3
 8002f88:	f000 fde9 	bl	8003b5e <HAL_SYSTICK_Config>
 8002f8c:	1e03      	subs	r3, r0, #0
 8002f8e:	d112      	bne.n	8002fb6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2b03      	cmp	r3, #3
 8002f94:	d80a      	bhi.n	8002fac <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f96:	6879      	ldr	r1, [r7, #4]
 8002f98:	2301      	movs	r3, #1
 8002f9a:	425b      	negs	r3, r3
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	0018      	movs	r0, r3
 8002fa0:	f000 fda8 	bl	8003af4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002fa4:	4b0e      	ldr	r3, [pc, #56]	@ (8002fe0 <HAL_InitTick+0x90>)
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	601a      	str	r2, [r3, #0]
 8002faa:	e00d      	b.n	8002fc8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002fac:	230f      	movs	r3, #15
 8002fae:	18fb      	adds	r3, r7, r3
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	701a      	strb	r2, [r3, #0]
 8002fb4:	e008      	b.n	8002fc8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002fb6:	230f      	movs	r3, #15
 8002fb8:	18fb      	adds	r3, r7, r3
 8002fba:	2201      	movs	r2, #1
 8002fbc:	701a      	strb	r2, [r3, #0]
 8002fbe:	e003      	b.n	8002fc8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002fc0:	230f      	movs	r3, #15
 8002fc2:	18fb      	adds	r3, r7, r3
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002fc8:	230f      	movs	r3, #15
 8002fca:	18fb      	adds	r3, r7, r3
 8002fcc:	781b      	ldrb	r3, [r3, #0]
}
 8002fce:	0018      	movs	r0, r3
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	b005      	add	sp, #20
 8002fd4:	bd90      	pop	{r4, r7, pc}
 8002fd6:	46c0      	nop			@ (mov r8, r8)
 8002fd8:	200000b8 	.word	0x200000b8
 8002fdc:	200000b0 	.word	0x200000b0
 8002fe0:	200000b4 	.word	0x200000b4

08002fe4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002fe8:	4b05      	ldr	r3, [pc, #20]	@ (8003000 <HAL_IncTick+0x1c>)
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	001a      	movs	r2, r3
 8002fee:	4b05      	ldr	r3, [pc, #20]	@ (8003004 <HAL_IncTick+0x20>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	18d2      	adds	r2, r2, r3
 8002ff4:	4b03      	ldr	r3, [pc, #12]	@ (8003004 <HAL_IncTick+0x20>)
 8002ff6:	601a      	str	r2, [r3, #0]
}
 8002ff8:	46c0      	nop			@ (mov r8, r8)
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	46c0      	nop			@ (mov r8, r8)
 8003000:	200000b8 	.word	0x200000b8
 8003004:	20000b5c 	.word	0x20000b5c

08003008 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
  return uwTick;
 800300c:	4b02      	ldr	r3, [pc, #8]	@ (8003018 <HAL_GetTick+0x10>)
 800300e:	681b      	ldr	r3, [r3, #0]
}
 8003010:	0018      	movs	r0, r3
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	46c0      	nop			@ (mov r8, r8)
 8003018:	20000b5c 	.word	0x20000b5c

0800301c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003024:	f7ff fff0 	bl	8003008 <HAL_GetTick>
 8003028:	0003      	movs	r3, r0
 800302a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	3301      	adds	r3, #1
 8003034:	d005      	beq.n	8003042 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003036:	4b0a      	ldr	r3, [pc, #40]	@ (8003060 <HAL_Delay+0x44>)
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	001a      	movs	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	189b      	adds	r3, r3, r2
 8003040:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003042:	46c0      	nop			@ (mov r8, r8)
 8003044:	f7ff ffe0 	bl	8003008 <HAL_GetTick>
 8003048:	0002      	movs	r2, r0
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	429a      	cmp	r2, r3
 8003052:	d8f7      	bhi.n	8003044 <HAL_Delay+0x28>
  {
  }
}
 8003054:	46c0      	nop			@ (mov r8, r8)
 8003056:	46c0      	nop			@ (mov r8, r8)
 8003058:	46bd      	mov	sp, r7
 800305a:	b004      	add	sp, #16
 800305c:	bd80      	pop	{r7, pc}
 800305e:	46c0      	nop			@ (mov r8, r8)
 8003060:	200000b8 	.word	0x200000b8

08003064 <LL_ADC_SetCommonPathInternalCh>:
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a05      	ldr	r2, [pc, #20]	@ (8003088 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8003074:	401a      	ands	r2, r3
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	431a      	orrs	r2, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	601a      	str	r2, [r3, #0]
}
 800307e:	46c0      	nop			@ (mov r8, r8)
 8003080:	46bd      	mov	sp, r7
 8003082:	b002      	add	sp, #8
 8003084:	bd80      	pop	{r7, pc}
 8003086:	46c0      	nop			@ (mov r8, r8)
 8003088:	ff3fffff 	.word	0xff3fffff

0800308c <LL_ADC_GetCommonPathInternalCh>:
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	23c0      	movs	r3, #192	@ 0xc0
 800309a:	041b      	lsls	r3, r3, #16
 800309c:	4013      	ands	r3, r2
}
 800309e:	0018      	movs	r0, r3
 80030a0:	46bd      	mov	sp, r7
 80030a2:	b002      	add	sp, #8
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <LL_ADC_SetSamplingTimeCommonChannels>:
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b084      	sub	sp, #16
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	60f8      	str	r0, [r7, #12]
 80030ae:	60b9      	str	r1, [r7, #8]
 80030b0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	68ba      	ldr	r2, [r7, #8]
 80030b8:	2104      	movs	r1, #4
 80030ba:	400a      	ands	r2, r1
 80030bc:	2107      	movs	r1, #7
 80030be:	4091      	lsls	r1, r2
 80030c0:	000a      	movs	r2, r1
 80030c2:	43d2      	mvns	r2, r2
 80030c4:	401a      	ands	r2, r3
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	2104      	movs	r1, #4
 80030ca:	400b      	ands	r3, r1
 80030cc:	6879      	ldr	r1, [r7, #4]
 80030ce:	4099      	lsls	r1, r3
 80030d0:	000b      	movs	r3, r1
 80030d2:	431a      	orrs	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	615a      	str	r2, [r3, #20]
}
 80030d8:	46c0      	nop			@ (mov r8, r8)
 80030da:	46bd      	mov	sp, r7
 80030dc:	b004      	add	sp, #16
 80030de:	bd80      	pop	{r7, pc}

080030e0 <LL_ADC_GetSamplingTimeCommonChannels>:
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	683a      	ldr	r2, [r7, #0]
 80030f0:	2104      	movs	r1, #4
 80030f2:	400a      	ands	r2, r1
 80030f4:	2107      	movs	r1, #7
 80030f6:	4091      	lsls	r1, r2
 80030f8:	000a      	movs	r2, r1
 80030fa:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	2104      	movs	r1, #4
 8003100:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003102:	40da      	lsrs	r2, r3
 8003104:	0013      	movs	r3, r2
}
 8003106:	0018      	movs	r0, r3
 8003108:	46bd      	mov	sp, r7
 800310a:	b002      	add	sp, #8
 800310c:	bd80      	pop	{r7, pc}

0800310e <LL_ADC_REG_SetSequencerRanks>:
{
 800310e:	b580      	push	{r7, lr}
 8003110:	b084      	sub	sp, #16
 8003112:	af00      	add	r7, sp, #0
 8003114:	60f8      	str	r0, [r7, #12]
 8003116:	60b9      	str	r1, [r7, #8]
 8003118:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CHSELR,
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800311e:	68ba      	ldr	r2, [r7, #8]
 8003120:	211f      	movs	r1, #31
 8003122:	400a      	ands	r2, r1
 8003124:	210f      	movs	r1, #15
 8003126:	4091      	lsls	r1, r2
 8003128:	000a      	movs	r2, r1
 800312a:	43d2      	mvns	r2, r2
 800312c:	401a      	ands	r2, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	0e9b      	lsrs	r3, r3, #26
 8003132:	210f      	movs	r1, #15
 8003134:	4019      	ands	r1, r3
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	201f      	movs	r0, #31
 800313a:	4003      	ands	r3, r0
 800313c:	4099      	lsls	r1, r3
 800313e:	000b      	movs	r3, r1
 8003140:	431a      	orrs	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003146:	46c0      	nop			@ (mov r8, r8)
 8003148:	46bd      	mov	sp, r7
 800314a:	b004      	add	sp, #16
 800314c:	bd80      	pop	{r7, pc}

0800314e <LL_ADC_REG_SetSequencerChAdd>:
{
 800314e:	b580      	push	{r7, lr}
 8003150:	b082      	sub	sp, #8
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
 8003156:	6039      	str	r1, [r7, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	025b      	lsls	r3, r3, #9
 8003160:	0a5b      	lsrs	r3, r3, #9
 8003162:	431a      	orrs	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003168:	46c0      	nop			@ (mov r8, r8)
 800316a:	46bd      	mov	sp, r7
 800316c:	b002      	add	sp, #8
 800316e:	bd80      	pop	{r7, pc}

08003170 <LL_ADC_REG_SetSequencerChRem>:
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800317e:	683a      	ldr	r2, [r7, #0]
 8003180:	0252      	lsls	r2, r2, #9
 8003182:	0a52      	lsrs	r2, r2, #9
 8003184:	43d2      	mvns	r2, r2
 8003186:	401a      	ands	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800318c:	46c0      	nop			@ (mov r8, r8)
 800318e:	46bd      	mov	sp, r7
 8003190:	b002      	add	sp, #8
 8003192:	bd80      	pop	{r7, pc}

08003194 <LL_ADC_SetChannelSamplingTime>:
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	695b      	ldr	r3, [r3, #20]
 80031a4:	68ba      	ldr	r2, [r7, #8]
 80031a6:	0212      	lsls	r2, r2, #8
 80031a8:	43d2      	mvns	r2, r2
 80031aa:	401a      	ands	r2, r3
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	021b      	lsls	r3, r3, #8
 80031b0:	6879      	ldr	r1, [r7, #4]
 80031b2:	400b      	ands	r3, r1
 80031b4:	4904      	ldr	r1, [pc, #16]	@ (80031c8 <LL_ADC_SetChannelSamplingTime+0x34>)
 80031b6:	400b      	ands	r3, r1
 80031b8:	431a      	orrs	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	615a      	str	r2, [r3, #20]
}
 80031be:	46c0      	nop			@ (mov r8, r8)
 80031c0:	46bd      	mov	sp, r7
 80031c2:	b004      	add	sp, #16
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	46c0      	nop			@ (mov r8, r8)
 80031c8:	7fffff00 	.word	0x7fffff00

080031cc <LL_ADC_EnableInternalRegulator>:
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	4a05      	ldr	r2, [pc, #20]	@ (80031f0 <LL_ADC_EnableInternalRegulator+0x24>)
 80031da:	4013      	ands	r3, r2
 80031dc:	2280      	movs	r2, #128	@ 0x80
 80031de:	0552      	lsls	r2, r2, #21
 80031e0:	431a      	orrs	r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	609a      	str	r2, [r3, #8]
}
 80031e6:	46c0      	nop			@ (mov r8, r8)
 80031e8:	46bd      	mov	sp, r7
 80031ea:	b002      	add	sp, #8
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	46c0      	nop			@ (mov r8, r8)
 80031f0:	6fffffe8 	.word	0x6fffffe8

080031f4 <LL_ADC_IsInternalRegulatorEnabled>:
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689a      	ldr	r2, [r3, #8]
 8003200:	2380      	movs	r3, #128	@ 0x80
 8003202:	055b      	lsls	r3, r3, #21
 8003204:	401a      	ands	r2, r3
 8003206:	2380      	movs	r3, #128	@ 0x80
 8003208:	055b      	lsls	r3, r3, #21
 800320a:	429a      	cmp	r2, r3
 800320c:	d101      	bne.n	8003212 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800320e:	2301      	movs	r3, #1
 8003210:	e000      	b.n	8003214 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8003212:	2300      	movs	r3, #0
}
 8003214:	0018      	movs	r0, r3
 8003216:	46bd      	mov	sp, r7
 8003218:	b002      	add	sp, #8
 800321a:	bd80      	pop	{r7, pc}

0800321c <LL_ADC_IsEnabled>:
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	2201      	movs	r2, #1
 800322a:	4013      	ands	r3, r2
 800322c:	2b01      	cmp	r3, #1
 800322e:	d101      	bne.n	8003234 <LL_ADC_IsEnabled+0x18>
 8003230:	2301      	movs	r3, #1
 8003232:	e000      	b.n	8003236 <LL_ADC_IsEnabled+0x1a>
 8003234:	2300      	movs	r3, #0
}
 8003236:	0018      	movs	r0, r3
 8003238:	46bd      	mov	sp, r7
 800323a:	b002      	add	sp, #8
 800323c:	bd80      	pop	{r7, pc}

0800323e <LL_ADC_REG_IsConversionOngoing>:
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b082      	sub	sp, #8
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	2204      	movs	r2, #4
 800324c:	4013      	ands	r3, r2
 800324e:	2b04      	cmp	r3, #4
 8003250:	d101      	bne.n	8003256 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003252:	2301      	movs	r3, #1
 8003254:	e000      	b.n	8003258 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003256:	2300      	movs	r3, #0
}
 8003258:	0018      	movs	r0, r3
 800325a:	46bd      	mov	sp, r7
 800325c:	b002      	add	sp, #8
 800325e:	bd80      	pop	{r7, pc}

08003260 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b088      	sub	sp, #32
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003268:	231f      	movs	r3, #31
 800326a:	18fb      	adds	r3, r7, r3
 800326c:	2200      	movs	r2, #0
 800326e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8003270:	2300      	movs	r3, #0
 8003272:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003274:	2300      	movs	r3, #0
 8003276:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003278:	2300      	movs	r3, #0
 800327a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d101      	bne.n	8003286 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e17e      	b.n	8003584 <HAL_ADC_Init+0x324>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800328a:	2b00      	cmp	r3, #0
 800328c:	d10a      	bne.n	80032a4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	0018      	movs	r0, r3
 8003292:	f7ff f9c7 	bl	8002624 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2254      	movs	r2, #84	@ 0x54
 80032a0:	2100      	movs	r1, #0
 80032a2:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	0018      	movs	r0, r3
 80032aa:	f7ff ffa3 	bl	80031f4 <LL_ADC_IsInternalRegulatorEnabled>
 80032ae:	1e03      	subs	r3, r0, #0
 80032b0:	d114      	bne.n	80032dc <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	0018      	movs	r0, r3
 80032b8:	f7ff ff88 	bl	80031cc <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80032bc:	4bb3      	ldr	r3, [pc, #716]	@ (800358c <HAL_ADC_Init+0x32c>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	49b3      	ldr	r1, [pc, #716]	@ (8003590 <HAL_ADC_Init+0x330>)
 80032c2:	0018      	movs	r0, r3
 80032c4:	f7fc ff20 	bl	8000108 <__udivsi3>
 80032c8:	0003      	movs	r3, r0
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80032ce:	e002      	b.n	80032d6 <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	3b01      	subs	r3, #1
 80032d4:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d1f9      	bne.n	80032d0 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	0018      	movs	r0, r3
 80032e2:	f7ff ff87 	bl	80031f4 <LL_ADC_IsInternalRegulatorEnabled>
 80032e6:	1e03      	subs	r3, r0, #0
 80032e8:	d10f      	bne.n	800330a <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ee:	2210      	movs	r2, #16
 80032f0:	431a      	orrs	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032fa:	2201      	movs	r2, #1
 80032fc:	431a      	orrs	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003302:	231f      	movs	r3, #31
 8003304:	18fb      	adds	r3, r7, r3
 8003306:	2201      	movs	r2, #1
 8003308:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	0018      	movs	r0, r3
 8003310:	f7ff ff95 	bl	800323e <LL_ADC_REG_IsConversionOngoing>
 8003314:	0003      	movs	r3, r0
 8003316:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800331c:	2210      	movs	r2, #16
 800331e:	4013      	ands	r3, r2
 8003320:	d000      	beq.n	8003324 <HAL_ADC_Init+0xc4>
 8003322:	e122      	b.n	800356a <HAL_ADC_Init+0x30a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d000      	beq.n	800332c <HAL_ADC_Init+0xcc>
 800332a:	e11e      	b.n	800356a <HAL_ADC_Init+0x30a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003330:	4a98      	ldr	r2, [pc, #608]	@ (8003594 <HAL_ADC_Init+0x334>)
 8003332:	4013      	ands	r3, r2
 8003334:	2202      	movs	r2, #2
 8003336:	431a      	orrs	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	0018      	movs	r0, r3
 8003342:	f7ff ff6b 	bl	800321c <LL_ADC_IsEnabled>
 8003346:	1e03      	subs	r3, r0, #0
 8003348:	d000      	beq.n	800334c <HAL_ADC_Init+0xec>
 800334a:	e0ad      	b.n	80034a8 <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	7e1b      	ldrb	r3, [r3, #24]
 8003354:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003356:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	7e5b      	ldrb	r3, [r3, #25]
 800335c:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800335e:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	7e9b      	ldrb	r3, [r3, #26]
 8003364:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003366:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800336c:	2b00      	cmp	r3, #0
 800336e:	d002      	beq.n	8003376 <HAL_ADC_Init+0x116>
 8003370:	2380      	movs	r3, #128	@ 0x80
 8003372:	015b      	lsls	r3, r3, #5
 8003374:	e000      	b.n	8003378 <HAL_ADC_Init+0x118>
 8003376:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003378:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800337e:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	691b      	ldr	r3, [r3, #16]
 8003384:	2b00      	cmp	r3, #0
 8003386:	da04      	bge.n	8003392 <HAL_ADC_Init+0x132>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	085b      	lsrs	r3, r3, #1
 8003390:	e001      	b.n	8003396 <HAL_ADC_Init+0x136>
 8003392:	2380      	movs	r3, #128	@ 0x80
 8003394:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8003396:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	212c      	movs	r1, #44	@ 0x2c
 800339c:	5c5b      	ldrb	r3, [r3, r1]
 800339e:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80033a0:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80033a2:	69ba      	ldr	r2, [r7, #24]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2220      	movs	r2, #32
 80033ac:	5c9b      	ldrb	r3, [r3, r2]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d115      	bne.n	80033de <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	7e9b      	ldrb	r3, [r3, #26]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d105      	bne.n	80033c6 <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	2280      	movs	r2, #128	@ 0x80
 80033be:	0252      	lsls	r2, r2, #9
 80033c0:	4313      	orrs	r3, r2
 80033c2:	61bb      	str	r3, [r7, #24]
 80033c4:	e00b      	b.n	80033de <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ca:	2220      	movs	r2, #32
 80033cc:	431a      	orrs	r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033d6:	2201      	movs	r2, #1
 80033d8:	431a      	orrs	r2, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00a      	beq.n	80033fc <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80033ea:	23e0      	movs	r3, #224	@ 0xe0
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80033f4:	4313      	orrs	r3, r2
 80033f6:	69ba      	ldr	r2, [r7, #24]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	4a65      	ldr	r2, [pc, #404]	@ (8003598 <HAL_ADC_Init+0x338>)
 8003404:	4013      	ands	r3, r2
 8003406:	0019      	movs	r1, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	69ba      	ldr	r2, [r7, #24]
 800340e:	430a      	orrs	r2, r1
 8003410:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	0f9b      	lsrs	r3, r3, #30
 8003418:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800341e:	4313      	orrs	r3, r2
 8003420:	697a      	ldr	r2, [r7, #20]
 8003422:	4313      	orrs	r3, r2
 8003424:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	223c      	movs	r2, #60	@ 0x3c
 800342a:	5c9b      	ldrb	r3, [r3, r2]
 800342c:	2b01      	cmp	r3, #1
 800342e:	d111      	bne.n	8003454 <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	0f9b      	lsrs	r3, r3, #30
 8003436:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800343c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003442:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8003448:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	4313      	orrs	r3, r2
 800344e:	2201      	movs	r2, #1
 8003450:	4313      	orrs	r3, r2
 8003452:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	4a50      	ldr	r2, [pc, #320]	@ (800359c <HAL_ADC_Init+0x33c>)
 800345c:	4013      	ands	r3, r2
 800345e:	0019      	movs	r1, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	697a      	ldr	r2, [r7, #20]
 8003466:	430a      	orrs	r2, r1
 8003468:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685a      	ldr	r2, [r3, #4]
 800346e:	23c0      	movs	r3, #192	@ 0xc0
 8003470:	061b      	lsls	r3, r3, #24
 8003472:	429a      	cmp	r2, r3
 8003474:	d018      	beq.n	80034a8 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800347a:	2380      	movs	r3, #128	@ 0x80
 800347c:	05db      	lsls	r3, r3, #23
 800347e:	429a      	cmp	r2, r3
 8003480:	d012      	beq.n	80034a8 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003486:	2380      	movs	r3, #128	@ 0x80
 8003488:	061b      	lsls	r3, r3, #24
 800348a:	429a      	cmp	r2, r3
 800348c:	d00c      	beq.n	80034a8 <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 800348e:	4b44      	ldr	r3, [pc, #272]	@ (80035a0 <HAL_ADC_Init+0x340>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a44      	ldr	r2, [pc, #272]	@ (80035a4 <HAL_ADC_Init+0x344>)
 8003494:	4013      	ands	r3, r2
 8003496:	0019      	movs	r1, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685a      	ldr	r2, [r3, #4]
 800349c:	23f0      	movs	r3, #240	@ 0xf0
 800349e:	039b      	lsls	r3, r3, #14
 80034a0:	401a      	ands	r2, r3
 80034a2:	4b3f      	ldr	r3, [pc, #252]	@ (80035a0 <HAL_ADC_Init+0x340>)
 80034a4:	430a      	orrs	r2, r1
 80034a6:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6818      	ldr	r0, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034b0:	001a      	movs	r2, r3
 80034b2:	2100      	movs	r1, #0
 80034b4:	f7ff fdf7 	bl	80030a6 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6818      	ldr	r0, [r3, #0]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034c0:	4939      	ldr	r1, [pc, #228]	@ (80035a8 <HAL_ADC_Init+0x348>)
 80034c2:	001a      	movs	r2, r3
 80034c4:	f7ff fdef 	bl	80030a6 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d109      	bne.n	80034e4 <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2110      	movs	r1, #16
 80034dc:	4249      	negs	r1, r1
 80034de:	430a      	orrs	r2, r1
 80034e0:	629a      	str	r2, [r3, #40]	@ 0x28
 80034e2:	e018      	b.n	8003516 <HAL_ADC_Init+0x2b6>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	691a      	ldr	r2, [r3, #16]
 80034e8:	2380      	movs	r3, #128	@ 0x80
 80034ea:	039b      	lsls	r3, r3, #14
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d112      	bne.n	8003516 <HAL_ADC_Init+0x2b6>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	69db      	ldr	r3, [r3, #28]
 80034fa:	3b01      	subs	r3, #1
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	221c      	movs	r2, #28
 8003500:	4013      	ands	r3, r2
 8003502:	2210      	movs	r2, #16
 8003504:	4252      	negs	r2, r2
 8003506:	409a      	lsls	r2, r3
 8003508:	0011      	movs	r1, r2
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	430a      	orrs	r2, r1
 8003514:	629a      	str	r2, [r3, #40]	@ 0x28
    {
      /* Nothing to do */
    }
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2100      	movs	r1, #0
 800351c:	0018      	movs	r0, r3
 800351e:	f7ff fddf 	bl	80030e0 <LL_ADC_GetSamplingTimeCommonChannels>
 8003522:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003528:	429a      	cmp	r2, r3
 800352a:	d10b      	bne.n	8003544 <HAL_ADC_Init+0x2e4>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003536:	2203      	movs	r2, #3
 8003538:	4393      	bics	r3, r2
 800353a:	2201      	movs	r2, #1
 800353c:	431a      	orrs	r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003542:	e01c      	b.n	800357e <HAL_ADC_Init+0x31e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003548:	2212      	movs	r2, #18
 800354a:	4393      	bics	r3, r2
 800354c:	2210      	movs	r2, #16
 800354e:	431a      	orrs	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003558:	2201      	movs	r2, #1
 800355a:	431a      	orrs	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8003560:	231f      	movs	r3, #31
 8003562:	18fb      	adds	r3, r7, r3
 8003564:	2201      	movs	r2, #1
 8003566:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003568:	e009      	b.n	800357e <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800356e:	2210      	movs	r2, #16
 8003570:	431a      	orrs	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003576:	231f      	movs	r3, #31
 8003578:	18fb      	adds	r3, r7, r3
 800357a:	2201      	movs	r2, #1
 800357c:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800357e:	231f      	movs	r3, #31
 8003580:	18fb      	adds	r3, r7, r3
 8003582:	781b      	ldrb	r3, [r3, #0]
}
 8003584:	0018      	movs	r0, r3
 8003586:	46bd      	mov	sp, r7
 8003588:	b008      	add	sp, #32
 800358a:	bd80      	pop	{r7, pc}
 800358c:	200000b0 	.word	0x200000b0
 8003590:	00030d40 	.word	0x00030d40
 8003594:	fffffefd 	.word	0xfffffefd
 8003598:	ffde0201 	.word	0xffde0201
 800359c:	1ffffc02 	.word	0x1ffffc02
 80035a0:	40012708 	.word	0x40012708
 80035a4:	ffc3ffff 	.word	0xffc3ffff
 80035a8:	7fffff04 	.word	0x7fffff04

080035ac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b086      	sub	sp, #24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035b6:	2317      	movs	r3, #23
 80035b8:	18fb      	adds	r3, r7, r3
 80035ba:	2200      	movs	r2, #0
 80035bc:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80035be:	2300      	movs	r3, #0
 80035c0:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2254      	movs	r2, #84	@ 0x54
 80035c6:	5c9b      	ldrb	r3, [r3, r2]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d101      	bne.n	80035d0 <HAL_ADC_ConfigChannel+0x24>
 80035cc:	2302      	movs	r3, #2
 80035ce:	e1be      	b.n	800394e <HAL_ADC_ConfigChannel+0x3a2>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2254      	movs	r2, #84	@ 0x54
 80035d4:	2101      	movs	r1, #1
 80035d6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	0018      	movs	r0, r3
 80035de:	f7ff fe2e 	bl	800323e <LL_ADC_REG_IsConversionOngoing>
 80035e2:	1e03      	subs	r3, r0, #0
 80035e4:	d000      	beq.n	80035e8 <HAL_ADC_ConfigChannel+0x3c>
 80035e6:	e1a1      	b.n	800392c <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d100      	bne.n	80035f2 <HAL_ADC_ConfigChannel+0x46>
 80035f0:	e152      	b.n	8003898 <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	691a      	ldr	r2, [r3, #16]
 80035f6:	2380      	movs	r3, #128	@ 0x80
 80035f8:	061b      	lsls	r3, r3, #24
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d004      	beq.n	8003608 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003602:	4ac2      	ldr	r2, [pc, #776]	@ (800390c <HAL_ADC_ConfigChannel+0x360>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d108      	bne.n	800361a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	0019      	movs	r1, r3
 8003612:	0010      	movs	r0, r2
 8003614:	f7ff fd9b 	bl	800314e <LL_ADC_REG_SetSequencerChAdd>
 8003618:	e0ed      	b.n	80037f6 <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	211f      	movs	r1, #31
 8003624:	400b      	ands	r3, r1
 8003626:	210f      	movs	r1, #15
 8003628:	4099      	lsls	r1, r3
 800362a:	000b      	movs	r3, r1
 800362c:	43db      	mvns	r3, r3
 800362e:	4013      	ands	r3, r2
 8003630:	0019      	movs	r1, r3
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	025b      	lsls	r3, r3, #9
 8003638:	0a5b      	lsrs	r3, r3, #9
 800363a:	d105      	bne.n	8003648 <HAL_ADC_ConfigChannel+0x9c>
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	0e9b      	lsrs	r3, r3, #26
 8003642:	221f      	movs	r2, #31
 8003644:	4013      	ands	r3, r2
 8003646:	e0bc      	b.n	80037c2 <HAL_ADC_ConfigChannel+0x216>
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2201      	movs	r2, #1
 800364e:	4013      	ands	r3, r2
 8003650:	d000      	beq.n	8003654 <HAL_ADC_ConfigChannel+0xa8>
 8003652:	e0b5      	b.n	80037c0 <HAL_ADC_ConfigChannel+0x214>
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2202      	movs	r2, #2
 800365a:	4013      	ands	r3, r2
 800365c:	d000      	beq.n	8003660 <HAL_ADC_ConfigChannel+0xb4>
 800365e:	e0ad      	b.n	80037bc <HAL_ADC_ConfigChannel+0x210>
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2204      	movs	r2, #4
 8003666:	4013      	ands	r3, r2
 8003668:	d000      	beq.n	800366c <HAL_ADC_ConfigChannel+0xc0>
 800366a:	e0a5      	b.n	80037b8 <HAL_ADC_ConfigChannel+0x20c>
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2208      	movs	r2, #8
 8003672:	4013      	ands	r3, r2
 8003674:	d000      	beq.n	8003678 <HAL_ADC_ConfigChannel+0xcc>
 8003676:	e09d      	b.n	80037b4 <HAL_ADC_ConfigChannel+0x208>
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2210      	movs	r2, #16
 800367e:	4013      	ands	r3, r2
 8003680:	d000      	beq.n	8003684 <HAL_ADC_ConfigChannel+0xd8>
 8003682:	e095      	b.n	80037b0 <HAL_ADC_ConfigChannel+0x204>
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2220      	movs	r2, #32
 800368a:	4013      	ands	r3, r2
 800368c:	d000      	beq.n	8003690 <HAL_ADC_ConfigChannel+0xe4>
 800368e:	e08d      	b.n	80037ac <HAL_ADC_ConfigChannel+0x200>
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2240      	movs	r2, #64	@ 0x40
 8003696:	4013      	ands	r3, r2
 8003698:	d000      	beq.n	800369c <HAL_ADC_ConfigChannel+0xf0>
 800369a:	e085      	b.n	80037a8 <HAL_ADC_ConfigChannel+0x1fc>
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2280      	movs	r2, #128	@ 0x80
 80036a2:	4013      	ands	r3, r2
 80036a4:	d000      	beq.n	80036a8 <HAL_ADC_ConfigChannel+0xfc>
 80036a6:	e07d      	b.n	80037a4 <HAL_ADC_ConfigChannel+0x1f8>
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	2380      	movs	r3, #128	@ 0x80
 80036ae:	005b      	lsls	r3, r3, #1
 80036b0:	4013      	ands	r3, r2
 80036b2:	d000      	beq.n	80036b6 <HAL_ADC_ConfigChannel+0x10a>
 80036b4:	e074      	b.n	80037a0 <HAL_ADC_ConfigChannel+0x1f4>
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	2380      	movs	r3, #128	@ 0x80
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	4013      	ands	r3, r2
 80036c0:	d000      	beq.n	80036c4 <HAL_ADC_ConfigChannel+0x118>
 80036c2:	e06b      	b.n	800379c <HAL_ADC_ConfigChannel+0x1f0>
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	2380      	movs	r3, #128	@ 0x80
 80036ca:	00db      	lsls	r3, r3, #3
 80036cc:	4013      	ands	r3, r2
 80036ce:	d000      	beq.n	80036d2 <HAL_ADC_ConfigChannel+0x126>
 80036d0:	e062      	b.n	8003798 <HAL_ADC_ConfigChannel+0x1ec>
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	2380      	movs	r3, #128	@ 0x80
 80036d8:	011b      	lsls	r3, r3, #4
 80036da:	4013      	ands	r3, r2
 80036dc:	d000      	beq.n	80036e0 <HAL_ADC_ConfigChannel+0x134>
 80036de:	e059      	b.n	8003794 <HAL_ADC_ConfigChannel+0x1e8>
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	2380      	movs	r3, #128	@ 0x80
 80036e6:	015b      	lsls	r3, r3, #5
 80036e8:	4013      	ands	r3, r2
 80036ea:	d151      	bne.n	8003790 <HAL_ADC_ConfigChannel+0x1e4>
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	2380      	movs	r3, #128	@ 0x80
 80036f2:	019b      	lsls	r3, r3, #6
 80036f4:	4013      	ands	r3, r2
 80036f6:	d149      	bne.n	800378c <HAL_ADC_ConfigChannel+0x1e0>
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	2380      	movs	r3, #128	@ 0x80
 80036fe:	01db      	lsls	r3, r3, #7
 8003700:	4013      	ands	r3, r2
 8003702:	d141      	bne.n	8003788 <HAL_ADC_ConfigChannel+0x1dc>
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	2380      	movs	r3, #128	@ 0x80
 800370a:	021b      	lsls	r3, r3, #8
 800370c:	4013      	ands	r3, r2
 800370e:	d139      	bne.n	8003784 <HAL_ADC_ConfigChannel+0x1d8>
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	2380      	movs	r3, #128	@ 0x80
 8003716:	025b      	lsls	r3, r3, #9
 8003718:	4013      	ands	r3, r2
 800371a:	d131      	bne.n	8003780 <HAL_ADC_ConfigChannel+0x1d4>
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	2380      	movs	r3, #128	@ 0x80
 8003722:	029b      	lsls	r3, r3, #10
 8003724:	4013      	ands	r3, r2
 8003726:	d129      	bne.n	800377c <HAL_ADC_ConfigChannel+0x1d0>
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	2380      	movs	r3, #128	@ 0x80
 800372e:	02db      	lsls	r3, r3, #11
 8003730:	4013      	ands	r3, r2
 8003732:	d121      	bne.n	8003778 <HAL_ADC_ConfigChannel+0x1cc>
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	2380      	movs	r3, #128	@ 0x80
 800373a:	031b      	lsls	r3, r3, #12
 800373c:	4013      	ands	r3, r2
 800373e:	d119      	bne.n	8003774 <HAL_ADC_ConfigChannel+0x1c8>
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	2380      	movs	r3, #128	@ 0x80
 8003746:	035b      	lsls	r3, r3, #13
 8003748:	4013      	ands	r3, r2
 800374a:	d111      	bne.n	8003770 <HAL_ADC_ConfigChannel+0x1c4>
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	2380      	movs	r3, #128	@ 0x80
 8003752:	039b      	lsls	r3, r3, #14
 8003754:	4013      	ands	r3, r2
 8003756:	d109      	bne.n	800376c <HAL_ADC_ConfigChannel+0x1c0>
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	2380      	movs	r3, #128	@ 0x80
 800375e:	03db      	lsls	r3, r3, #15
 8003760:	4013      	ands	r3, r2
 8003762:	d001      	beq.n	8003768 <HAL_ADC_ConfigChannel+0x1bc>
 8003764:	2316      	movs	r3, #22
 8003766:	e02c      	b.n	80037c2 <HAL_ADC_ConfigChannel+0x216>
 8003768:	2300      	movs	r3, #0
 800376a:	e02a      	b.n	80037c2 <HAL_ADC_ConfigChannel+0x216>
 800376c:	2315      	movs	r3, #21
 800376e:	e028      	b.n	80037c2 <HAL_ADC_ConfigChannel+0x216>
 8003770:	2314      	movs	r3, #20
 8003772:	e026      	b.n	80037c2 <HAL_ADC_ConfigChannel+0x216>
 8003774:	2313      	movs	r3, #19
 8003776:	e024      	b.n	80037c2 <HAL_ADC_ConfigChannel+0x216>
 8003778:	2312      	movs	r3, #18
 800377a:	e022      	b.n	80037c2 <HAL_ADC_ConfigChannel+0x216>
 800377c:	2311      	movs	r3, #17
 800377e:	e020      	b.n	80037c2 <HAL_ADC_ConfigChannel+0x216>
 8003780:	2310      	movs	r3, #16
 8003782:	e01e      	b.n	80037c2 <HAL_ADC_ConfigChannel+0x216>
 8003784:	230f      	movs	r3, #15
 8003786:	e01c      	b.n	80037c2 <HAL_ADC_ConfigChannel+0x216>
 8003788:	230e      	movs	r3, #14
 800378a:	e01a      	b.n	80037c2 <HAL_ADC_ConfigChannel+0x216>
 800378c:	230d      	movs	r3, #13
 800378e:	e018      	b.n	80037c2 <HAL_ADC_ConfigChannel+0x216>
 8003790:	230c      	movs	r3, #12
 8003792:	e016      	b.n	80037c2 <HAL_ADC_ConfigChannel+0x216>
 8003794:	230b      	movs	r3, #11
 8003796:	e014      	b.n	80037c2 <HAL_ADC_ConfigChannel+0x216>
 8003798:	230a      	movs	r3, #10
 800379a:	e012      	b.n	80037c2 <HAL_ADC_ConfigChannel+0x216>
 800379c:	2309      	movs	r3, #9
 800379e:	e010      	b.n	80037c2 <HAL_ADC_ConfigChannel+0x216>
 80037a0:	2308      	movs	r3, #8
 80037a2:	e00e      	b.n	80037c2 <HAL_ADC_ConfigChannel+0x216>
 80037a4:	2307      	movs	r3, #7
 80037a6:	e00c      	b.n	80037c2 <HAL_ADC_ConfigChannel+0x216>
 80037a8:	2306      	movs	r3, #6
 80037aa:	e00a      	b.n	80037c2 <HAL_ADC_ConfigChannel+0x216>
 80037ac:	2305      	movs	r3, #5
 80037ae:	e008      	b.n	80037c2 <HAL_ADC_ConfigChannel+0x216>
 80037b0:	2304      	movs	r3, #4
 80037b2:	e006      	b.n	80037c2 <HAL_ADC_ConfigChannel+0x216>
 80037b4:	2303      	movs	r3, #3
 80037b6:	e004      	b.n	80037c2 <HAL_ADC_ConfigChannel+0x216>
 80037b8:	2302      	movs	r3, #2
 80037ba:	e002      	b.n	80037c2 <HAL_ADC_ConfigChannel+0x216>
 80037bc:	2301      	movs	r3, #1
 80037be:	e000      	b.n	80037c2 <HAL_ADC_ConfigChannel+0x216>
 80037c0:	2300      	movs	r3, #0
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	6852      	ldr	r2, [r2, #4]
 80037c6:	201f      	movs	r0, #31
 80037c8:	4002      	ands	r2, r0
 80037ca:	4093      	lsls	r3, r2
 80037cc:	000a      	movs	r2, r1
 80037ce:	431a      	orrs	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	089b      	lsrs	r3, r3, #2
 80037da:	1c5a      	adds	r2, r3, #1
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	69db      	ldr	r3, [r3, #28]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d808      	bhi.n	80037f6 <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6818      	ldr	r0, [r3, #0]
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	6859      	ldr	r1, [r3, #4]
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	001a      	movs	r2, r3
 80037f2:	f7ff fc8c 	bl	800310e <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6818      	ldr	r0, [r3, #0]
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	6819      	ldr	r1, [r3, #0]
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	001a      	movs	r2, r3
 8003804:	f7ff fcc6 	bl	8003194 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2b00      	cmp	r3, #0
 800380e:	db00      	blt.n	8003812 <HAL_ADC_ConfigChannel+0x266>
 8003810:	e096      	b.n	8003940 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003812:	4b3f      	ldr	r3, [pc, #252]	@ (8003910 <HAL_ADC_ConfigChannel+0x364>)
 8003814:	0018      	movs	r0, r3
 8003816:	f7ff fc39 	bl	800308c <LL_ADC_GetCommonPathInternalCh>
 800381a:	0003      	movs	r3, r0
 800381c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a3c      	ldr	r2, [pc, #240]	@ (8003914 <HAL_ADC_ConfigChannel+0x368>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d123      	bne.n	8003870 <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003828:	693a      	ldr	r2, [r7, #16]
 800382a:	2380      	movs	r3, #128	@ 0x80
 800382c:	041b      	lsls	r3, r3, #16
 800382e:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003830:	d11e      	bne.n	8003870 <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	2280      	movs	r2, #128	@ 0x80
 8003836:	0412      	lsls	r2, r2, #16
 8003838:	4313      	orrs	r3, r2
 800383a:	4a35      	ldr	r2, [pc, #212]	@ (8003910 <HAL_ADC_ConfigChannel+0x364>)
 800383c:	0019      	movs	r1, r3
 800383e:	0010      	movs	r0, r2
 8003840:	f7ff fc10 	bl	8003064 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8003844:	4b34      	ldr	r3, [pc, #208]	@ (8003918 <HAL_ADC_ConfigChannel+0x36c>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4934      	ldr	r1, [pc, #208]	@ (800391c <HAL_ADC_ConfigChannel+0x370>)
 800384a:	0018      	movs	r0, r3
 800384c:	f7fc fc5c 	bl	8000108 <__udivsi3>
 8003850:	0003      	movs	r3, r0
 8003852:	001a      	movs	r2, r3
 8003854:	0013      	movs	r3, r2
 8003856:	005b      	lsls	r3, r3, #1
 8003858:	189b      	adds	r3, r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	3301      	adds	r3, #1
 800385e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003860:	e002      	b.n	8003868 <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	3b01      	subs	r3, #1
 8003866:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1f9      	bne.n	8003862 <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800386e:	e067      	b.n	8003940 <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a2a      	ldr	r2, [pc, #168]	@ (8003920 <HAL_ADC_ConfigChannel+0x374>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d162      	bne.n	8003940 <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800387a:	693a      	ldr	r2, [r7, #16]
 800387c:	2380      	movs	r3, #128	@ 0x80
 800387e:	03db      	lsls	r3, r3, #15
 8003880:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003882:	d15d      	bne.n	8003940 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	2280      	movs	r2, #128	@ 0x80
 8003888:	03d2      	lsls	r2, r2, #15
 800388a:	4313      	orrs	r3, r2
 800388c:	4a20      	ldr	r2, [pc, #128]	@ (8003910 <HAL_ADC_ConfigChannel+0x364>)
 800388e:	0019      	movs	r1, r3
 8003890:	0010      	movs	r0, r2
 8003892:	f7ff fbe7 	bl	8003064 <LL_ADC_SetCommonPathInternalCh>
 8003896:	e053      	b.n	8003940 <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	691a      	ldr	r2, [r3, #16]
 800389c:	2380      	movs	r3, #128	@ 0x80
 800389e:	061b      	lsls	r3, r3, #24
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d004      	beq.n	80038ae <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80038a8:	4a18      	ldr	r2, [pc, #96]	@ (800390c <HAL_ADC_ConfigChannel+0x360>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d107      	bne.n	80038be <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	0019      	movs	r1, r3
 80038b8:	0010      	movs	r0, r2
 80038ba:	f7ff fc59 	bl	8003170 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	da3c      	bge.n	8003940 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80038c6:	4b12      	ldr	r3, [pc, #72]	@ (8003910 <HAL_ADC_ConfigChannel+0x364>)
 80038c8:	0018      	movs	r0, r3
 80038ca:	f7ff fbdf 	bl	800308c <LL_ADC_GetCommonPathInternalCh>
 80038ce:	0003      	movs	r3, r0
 80038d0:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a0f      	ldr	r2, [pc, #60]	@ (8003914 <HAL_ADC_ConfigChannel+0x368>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d108      	bne.n	80038ee <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	4a11      	ldr	r2, [pc, #68]	@ (8003924 <HAL_ADC_ConfigChannel+0x378>)
 80038e0:	4013      	ands	r3, r2
 80038e2:	4a0b      	ldr	r2, [pc, #44]	@ (8003910 <HAL_ADC_ConfigChannel+0x364>)
 80038e4:	0019      	movs	r1, r3
 80038e6:	0010      	movs	r0, r2
 80038e8:	f7ff fbbc 	bl	8003064 <LL_ADC_SetCommonPathInternalCh>
 80038ec:	e028      	b.n	8003940 <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a0b      	ldr	r2, [pc, #44]	@ (8003920 <HAL_ADC_ConfigChannel+0x374>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d123      	bne.n	8003940 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	4a0b      	ldr	r2, [pc, #44]	@ (8003928 <HAL_ADC_ConfigChannel+0x37c>)
 80038fc:	4013      	ands	r3, r2
 80038fe:	4a04      	ldr	r2, [pc, #16]	@ (8003910 <HAL_ADC_ConfigChannel+0x364>)
 8003900:	0019      	movs	r1, r3
 8003902:	0010      	movs	r0, r2
 8003904:	f7ff fbae 	bl	8003064 <LL_ADC_SetCommonPathInternalCh>
 8003908:	e01a      	b.n	8003940 <HAL_ADC_ConfigChannel+0x394>
 800390a:	46c0      	nop			@ (mov r8, r8)
 800390c:	80000004 	.word	0x80000004
 8003910:	40012708 	.word	0x40012708
 8003914:	a4000200 	.word	0xa4000200
 8003918:	200000b0 	.word	0x200000b0
 800391c:	00030d40 	.word	0x00030d40
 8003920:	a8000400 	.word	0xa8000400
 8003924:	ff7fffff 	.word	0xff7fffff
 8003928:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003930:	2220      	movs	r2, #32
 8003932:	431a      	orrs	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003938:	2317      	movs	r3, #23
 800393a:	18fb      	adds	r3, r7, r3
 800393c:	2201      	movs	r2, #1
 800393e:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2254      	movs	r2, #84	@ 0x54
 8003944:	2100      	movs	r1, #0
 8003946:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8003948:	2317      	movs	r3, #23
 800394a:	18fb      	adds	r3, r7, r3
 800394c:	781b      	ldrb	r3, [r3, #0]
}
 800394e:	0018      	movs	r0, r3
 8003950:	46bd      	mov	sp, r7
 8003952:	b006      	add	sp, #24
 8003954:	bd80      	pop	{r7, pc}
 8003956:	46c0      	nop			@ (mov r8, r8)

08003958 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	0002      	movs	r2, r0
 8003960:	1dfb      	adds	r3, r7, #7
 8003962:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003964:	1dfb      	adds	r3, r7, #7
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	2b7f      	cmp	r3, #127	@ 0x7f
 800396a:	d809      	bhi.n	8003980 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800396c:	1dfb      	adds	r3, r7, #7
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	001a      	movs	r2, r3
 8003972:	231f      	movs	r3, #31
 8003974:	401a      	ands	r2, r3
 8003976:	4b04      	ldr	r3, [pc, #16]	@ (8003988 <__NVIC_EnableIRQ+0x30>)
 8003978:	2101      	movs	r1, #1
 800397a:	4091      	lsls	r1, r2
 800397c:	000a      	movs	r2, r1
 800397e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003980:	46c0      	nop			@ (mov r8, r8)
 8003982:	46bd      	mov	sp, r7
 8003984:	b002      	add	sp, #8
 8003986:	bd80      	pop	{r7, pc}
 8003988:	e000e100 	.word	0xe000e100

0800398c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	0002      	movs	r2, r0
 8003994:	1dfb      	adds	r3, r7, #7
 8003996:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003998:	1dfb      	adds	r3, r7, #7
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	2b7f      	cmp	r3, #127	@ 0x7f
 800399e:	d810      	bhi.n	80039c2 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039a0:	1dfb      	adds	r3, r7, #7
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	001a      	movs	r2, r3
 80039a6:	231f      	movs	r3, #31
 80039a8:	4013      	ands	r3, r2
 80039aa:	4908      	ldr	r1, [pc, #32]	@ (80039cc <__NVIC_DisableIRQ+0x40>)
 80039ac:	2201      	movs	r2, #1
 80039ae:	409a      	lsls	r2, r3
 80039b0:	0013      	movs	r3, r2
 80039b2:	2280      	movs	r2, #128	@ 0x80
 80039b4:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
 80039b6:	f3bf 8f4f 	dsb	sy
}
 80039ba:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 80039bc:	f3bf 8f6f 	isb	sy
}
 80039c0:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 80039c2:	46c0      	nop			@ (mov r8, r8)
 80039c4:	46bd      	mov	sp, r7
 80039c6:	b002      	add	sp, #8
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	46c0      	nop			@ (mov r8, r8)
 80039cc:	e000e100 	.word	0xe000e100

080039d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039d0:	b590      	push	{r4, r7, lr}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	0002      	movs	r2, r0
 80039d8:	6039      	str	r1, [r7, #0]
 80039da:	1dfb      	adds	r3, r7, #7
 80039dc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80039de:	1dfb      	adds	r3, r7, #7
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80039e4:	d828      	bhi.n	8003a38 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039e6:	4a2f      	ldr	r2, [pc, #188]	@ (8003aa4 <__NVIC_SetPriority+0xd4>)
 80039e8:	1dfb      	adds	r3, r7, #7
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	b25b      	sxtb	r3, r3
 80039ee:	089b      	lsrs	r3, r3, #2
 80039f0:	33c0      	adds	r3, #192	@ 0xc0
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	589b      	ldr	r3, [r3, r2]
 80039f6:	1dfa      	adds	r2, r7, #7
 80039f8:	7812      	ldrb	r2, [r2, #0]
 80039fa:	0011      	movs	r1, r2
 80039fc:	2203      	movs	r2, #3
 80039fe:	400a      	ands	r2, r1
 8003a00:	00d2      	lsls	r2, r2, #3
 8003a02:	21ff      	movs	r1, #255	@ 0xff
 8003a04:	4091      	lsls	r1, r2
 8003a06:	000a      	movs	r2, r1
 8003a08:	43d2      	mvns	r2, r2
 8003a0a:	401a      	ands	r2, r3
 8003a0c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	019b      	lsls	r3, r3, #6
 8003a12:	22ff      	movs	r2, #255	@ 0xff
 8003a14:	401a      	ands	r2, r3
 8003a16:	1dfb      	adds	r3, r7, #7
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	0018      	movs	r0, r3
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	4003      	ands	r3, r0
 8003a20:	00db      	lsls	r3, r3, #3
 8003a22:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a24:	481f      	ldr	r0, [pc, #124]	@ (8003aa4 <__NVIC_SetPriority+0xd4>)
 8003a26:	1dfb      	adds	r3, r7, #7
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	b25b      	sxtb	r3, r3
 8003a2c:	089b      	lsrs	r3, r3, #2
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	33c0      	adds	r3, #192	@ 0xc0
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003a36:	e031      	b.n	8003a9c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a38:	4a1b      	ldr	r2, [pc, #108]	@ (8003aa8 <__NVIC_SetPriority+0xd8>)
 8003a3a:	1dfb      	adds	r3, r7, #7
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	0019      	movs	r1, r3
 8003a40:	230f      	movs	r3, #15
 8003a42:	400b      	ands	r3, r1
 8003a44:	3b08      	subs	r3, #8
 8003a46:	089b      	lsrs	r3, r3, #2
 8003a48:	3306      	adds	r3, #6
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	18d3      	adds	r3, r2, r3
 8003a4e:	3304      	adds	r3, #4
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	1dfa      	adds	r2, r7, #7
 8003a54:	7812      	ldrb	r2, [r2, #0]
 8003a56:	0011      	movs	r1, r2
 8003a58:	2203      	movs	r2, #3
 8003a5a:	400a      	ands	r2, r1
 8003a5c:	00d2      	lsls	r2, r2, #3
 8003a5e:	21ff      	movs	r1, #255	@ 0xff
 8003a60:	4091      	lsls	r1, r2
 8003a62:	000a      	movs	r2, r1
 8003a64:	43d2      	mvns	r2, r2
 8003a66:	401a      	ands	r2, r3
 8003a68:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	019b      	lsls	r3, r3, #6
 8003a6e:	22ff      	movs	r2, #255	@ 0xff
 8003a70:	401a      	ands	r2, r3
 8003a72:	1dfb      	adds	r3, r7, #7
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	0018      	movs	r0, r3
 8003a78:	2303      	movs	r3, #3
 8003a7a:	4003      	ands	r3, r0
 8003a7c:	00db      	lsls	r3, r3, #3
 8003a7e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a80:	4809      	ldr	r0, [pc, #36]	@ (8003aa8 <__NVIC_SetPriority+0xd8>)
 8003a82:	1dfb      	adds	r3, r7, #7
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	001c      	movs	r4, r3
 8003a88:	230f      	movs	r3, #15
 8003a8a:	4023      	ands	r3, r4
 8003a8c:	3b08      	subs	r3, #8
 8003a8e:	089b      	lsrs	r3, r3, #2
 8003a90:	430a      	orrs	r2, r1
 8003a92:	3306      	adds	r3, #6
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	18c3      	adds	r3, r0, r3
 8003a98:	3304      	adds	r3, #4
 8003a9a:	601a      	str	r2, [r3, #0]
}
 8003a9c:	46c0      	nop			@ (mov r8, r8)
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	b003      	add	sp, #12
 8003aa2:	bd90      	pop	{r4, r7, pc}
 8003aa4:	e000e100 	.word	0xe000e100
 8003aa8:	e000ed00 	.word	0xe000ed00

08003aac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	1e5a      	subs	r2, r3, #1
 8003ab8:	2380      	movs	r3, #128	@ 0x80
 8003aba:	045b      	lsls	r3, r3, #17
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d301      	bcc.n	8003ac4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e010      	b.n	8003ae6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ac4:	4b0a      	ldr	r3, [pc, #40]	@ (8003af0 <SysTick_Config+0x44>)
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	3a01      	subs	r2, #1
 8003aca:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003acc:	2301      	movs	r3, #1
 8003ace:	425b      	negs	r3, r3
 8003ad0:	2103      	movs	r1, #3
 8003ad2:	0018      	movs	r0, r3
 8003ad4:	f7ff ff7c 	bl	80039d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ad8:	4b05      	ldr	r3, [pc, #20]	@ (8003af0 <SysTick_Config+0x44>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ade:	4b04      	ldr	r3, [pc, #16]	@ (8003af0 <SysTick_Config+0x44>)
 8003ae0:	2207      	movs	r2, #7
 8003ae2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	0018      	movs	r0, r3
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	b002      	add	sp, #8
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	46c0      	nop			@ (mov r8, r8)
 8003af0:	e000e010 	.word	0xe000e010

08003af4 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60b9      	str	r1, [r7, #8]
 8003afc:	607a      	str	r2, [r7, #4]
 8003afe:	210f      	movs	r1, #15
 8003b00:	187b      	adds	r3, r7, r1
 8003b02:	1c02      	adds	r2, r0, #0
 8003b04:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003b06:	68ba      	ldr	r2, [r7, #8]
 8003b08:	187b      	adds	r3, r7, r1
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	b25b      	sxtb	r3, r3
 8003b0e:	0011      	movs	r1, r2
 8003b10:	0018      	movs	r0, r3
 8003b12:	f7ff ff5d 	bl	80039d0 <__NVIC_SetPriority>
}
 8003b16:	46c0      	nop			@ (mov r8, r8)
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	b004      	add	sp, #16
 8003b1c:	bd80      	pop	{r7, pc}

08003b1e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	b082      	sub	sp, #8
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	0002      	movs	r2, r0
 8003b26:	1dfb      	adds	r3, r7, #7
 8003b28:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b2a:	1dfb      	adds	r3, r7, #7
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	b25b      	sxtb	r3, r3
 8003b30:	0018      	movs	r0, r3
 8003b32:	f7ff ff11 	bl	8003958 <__NVIC_EnableIRQ>
}
 8003b36:	46c0      	nop			@ (mov r8, r8)
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	b002      	add	sp, #8
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b082      	sub	sp, #8
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	0002      	movs	r2, r0
 8003b46:	1dfb      	adds	r3, r7, #7
 8003b48:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003b4a:	1dfb      	adds	r3, r7, #7
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	b25b      	sxtb	r3, r3
 8003b50:	0018      	movs	r0, r3
 8003b52:	f7ff ff1b 	bl	800398c <__NVIC_DisableIRQ>
}
 8003b56:	46c0      	nop			@ (mov r8, r8)
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	b002      	add	sp, #8
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b082      	sub	sp, #8
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	0018      	movs	r0, r3
 8003b6a:	f7ff ff9f 	bl	8003aac <SysTick_Config>
 8003b6e:	0003      	movs	r3, r0
}
 8003b70:	0018      	movs	r0, r3
 8003b72:	46bd      	mov	sp, r7
 8003b74:	b002      	add	sp, #8
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d101      	bne.n	8003b8a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e077      	b.n	8003c7a <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a3d      	ldr	r2, [pc, #244]	@ (8003c84 <HAL_DMA_Init+0x10c>)
 8003b90:	4694      	mov	ip, r2
 8003b92:	4463      	add	r3, ip
 8003b94:	2114      	movs	r1, #20
 8003b96:	0018      	movs	r0, r3
 8003b98:	f7fc fab6 	bl	8000108 <__udivsi3>
 8003b9c:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 8003b9e:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2225      	movs	r2, #37	@ 0x25
 8003ba8:	2102      	movs	r1, #2
 8003baa:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4934      	ldr	r1, [pc, #208]	@ (8003c88 <HAL_DMA_Init+0x110>)
 8003bb8:	400a      	ands	r2, r1
 8003bba:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	6819      	ldr	r1, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	689a      	ldr	r2, [r3, #8]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	431a      	orrs	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	691b      	ldr	r3, [r3, #16]
 8003bd0:	431a      	orrs	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	431a      	orrs	r2, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	431a      	orrs	r2, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	69db      	ldr	r3, [r3, #28]
 8003be2:	431a      	orrs	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a1b      	ldr	r3, [r3, #32]
 8003be8:	431a      	orrs	r2, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	0018      	movs	r0, r3
 8003bf6:	f000 fb2d 	bl	8004254 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	689a      	ldr	r2, [r3, #8]
 8003bfe:	2380      	movs	r3, #128	@ 0x80
 8003c00:	01db      	lsls	r3, r3, #7
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d102      	bne.n	8003c0c <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685a      	ldr	r2, [r3, #4]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c14:	21ff      	movs	r1, #255	@ 0xff
 8003c16:	400a      	ands	r2, r1
 8003c18:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003c22:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d011      	beq.n	8003c50 <HAL_DMA_Init+0xd8>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	2b04      	cmp	r3, #4
 8003c32:	d80d      	bhi.n	8003c50 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	0018      	movs	r0, r3
 8003c38:	f000 fb38 	bl	80042ac <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c40:	2200      	movs	r2, #0
 8003c42:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003c4c:	605a      	str	r2, [r3, #4]
 8003c4e:	e008      	b.n	8003c62 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2225      	movs	r2, #37	@ 0x25
 8003c6c:	2101      	movs	r1, #1
 8003c6e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2224      	movs	r2, #36	@ 0x24
 8003c74:	2100      	movs	r1, #0
 8003c76:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	0018      	movs	r0, r3
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	b002      	add	sp, #8
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	46c0      	nop			@ (mov r8, r8)
 8003c84:	bffdfff8 	.word	0xbffdfff8
 8003c88:	ffff800f 	.word	0xffff800f

08003c8c <HAL_DMA_DeInit>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d101      	bne.n	8003c9e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e066      	b.n	8003d6c <HAL_DMA_DeInit+0xe0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2101      	movs	r1, #1
 8003caa:	438a      	bics	r2, r1
 8003cac:	601a      	str	r2, [r3, #0]

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a30      	ldr	r2, [pc, #192]	@ (8003d74 <HAL_DMA_DeInit+0xe8>)
 8003cb4:	4694      	mov	ip, r2
 8003cb6:	4463      	add	r3, ip
 8003cb8:	2114      	movs	r1, #20
 8003cba:	0018      	movs	r0, r3
 8003cbc:	f7fc fa24 	bl	8000108 <__udivsi3>
 8003cc0:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 8003cc2:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8003cd0:	4b29      	ldr	r3, [pc, #164]	@ (8003d78 <HAL_DMA_DeInit+0xec>)
 8003cd2:	6859      	ldr	r1, [r3, #4]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd8:	221c      	movs	r2, #28
 8003cda:	4013      	ands	r3, r2
 8003cdc:	2201      	movs	r2, #1
 8003cde:	409a      	lsls	r2, r3
 8003ce0:	4b25      	ldr	r3, [pc, #148]	@ (8003d78 <HAL_DMA_DeInit+0xec>)
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	0018      	movs	r0, r3
 8003cea:	f000 fab3 	bl	8004254 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003cfe:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d010      	beq.n	8003d2a <HAL_DMA_DeInit+0x9e>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	2b04      	cmp	r3, #4
 8003d0e:	d80c      	bhi.n	8003d2a <HAL_DMA_DeInit+0x9e>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	0018      	movs	r0, r3
 8003d14:	f000 faca 	bl	80042ac <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003d28:	605a      	str	r2, [r3, #4]
  }

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	639a      	str	r2, [r3, #56]	@ 0x38

  hdma->DMAmuxRequestGen = 0U;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma->DMAmuxRequestGenStatus = 0U;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2225      	movs	r2, #37	@ 0x25
 8003d5e:	2100      	movs	r1, #0
 8003d60:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2224      	movs	r2, #36	@ 0x24
 8003d66:	2100      	movs	r1, #0
 8003d68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d6a:	2300      	movs	r3, #0
}
 8003d6c:	0018      	movs	r0, r3
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	b002      	add	sp, #8
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	bffdfff8 	.word	0xbffdfff8
 8003d78:	40020000 	.word	0x40020000

08003d7c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b086      	sub	sp, #24
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	607a      	str	r2, [r7, #4]
 8003d88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d8a:	2317      	movs	r3, #23
 8003d8c:	18fb      	adds	r3, r7, r3
 8003d8e:	2200      	movs	r2, #0
 8003d90:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2224      	movs	r2, #36	@ 0x24
 8003d96:	5c9b      	ldrb	r3, [r3, r2]
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d101      	bne.n	8003da0 <HAL_DMA_Start_IT+0x24>
 8003d9c:	2302      	movs	r3, #2
 8003d9e:	e070      	b.n	8003e82 <HAL_DMA_Start_IT+0x106>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2224      	movs	r2, #36	@ 0x24
 8003da4:	2101      	movs	r1, #1
 8003da6:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2225      	movs	r2, #37	@ 0x25
 8003dac:	5c9b      	ldrb	r3, [r3, r2]
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d157      	bne.n	8003e64 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2225      	movs	r2, #37	@ 0x25
 8003db8:	2102      	movs	r1, #2
 8003dba:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2101      	movs	r1, #1
 8003dce:	438a      	bics	r2, r1
 8003dd0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	68b9      	ldr	r1, [r7, #8]
 8003dd8:	68f8      	ldr	r0, [r7, #12]
 8003dda:	f000 f9fb 	bl	80041d4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d008      	beq.n	8003df8 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	210e      	movs	r1, #14
 8003df2:	430a      	orrs	r2, r1
 8003df4:	601a      	str	r2, [r3, #0]
 8003df6:	e00f      	b.n	8003e18 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2104      	movs	r1, #4
 8003e04:	438a      	bics	r2, r1
 8003e06:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	210a      	movs	r1, #10
 8003e14:	430a      	orrs	r2, r1
 8003e16:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	2380      	movs	r3, #128	@ 0x80
 8003e20:	025b      	lsls	r3, r3, #9
 8003e22:	4013      	ands	r3, r2
 8003e24:	d008      	beq.n	8003e38 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e30:	2180      	movs	r1, #128	@ 0x80
 8003e32:	0049      	lsls	r1, r1, #1
 8003e34:	430a      	orrs	r2, r1
 8003e36:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d008      	beq.n	8003e52 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e4a:	2180      	movs	r1, #128	@ 0x80
 8003e4c:	0049      	lsls	r1, r1, #1
 8003e4e:	430a      	orrs	r2, r1
 8003e50:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2101      	movs	r1, #1
 8003e5e:	430a      	orrs	r2, r1
 8003e60:	601a      	str	r2, [r3, #0]
 8003e62:	e007      	b.n	8003e74 <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2224      	movs	r2, #36	@ 0x24
 8003e68:	2100      	movs	r1, #0
 8003e6a:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003e6c:	2317      	movs	r3, #23
 8003e6e:	18fb      	adds	r3, r7, r3
 8003e70:	2202      	movs	r2, #2
 8003e72:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2224      	movs	r2, #36	@ 0x24
 8003e78:	2100      	movs	r1, #0
 8003e7a:	5499      	strb	r1, [r3, r2]

  return status;
 8003e7c:	2317      	movs	r3, #23
 8003e7e:	18fb      	adds	r3, r7, r3
 8003e80:	781b      	ldrb	r3, [r3, #0]
}
 8003e82:	0018      	movs	r0, r3
 8003e84:	46bd      	mov	sp, r7
 8003e86:	b006      	add	sp, #24
 8003e88:	bd80      	pop	{r7, pc}
	...

08003e8c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d101      	bne.n	8003e9e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e050      	b.n	8003f40 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2225      	movs	r2, #37	@ 0x25
 8003ea2:	5c9b      	ldrb	r3, [r3, r2]
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d008      	beq.n	8003ebc <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2204      	movs	r2, #4
 8003eae:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2224      	movs	r2, #36	@ 0x24
 8003eb4:	2100      	movs	r1, #0
 8003eb6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e041      	b.n	8003f40 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	210e      	movs	r1, #14
 8003ec8:	438a      	bics	r2, r1
 8003eca:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ed6:	491c      	ldr	r1, [pc, #112]	@ (8003f48 <HAL_DMA_Abort+0xbc>)
 8003ed8:	400a      	ands	r2, r1
 8003eda:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2101      	movs	r1, #1
 8003ee8:	438a      	bics	r2, r1
 8003eea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 8003eec:	4b17      	ldr	r3, [pc, #92]	@ (8003f4c <HAL_DMA_Abort+0xc0>)
 8003eee:	6859      	ldr	r1, [r3, #4]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef4:	221c      	movs	r2, #28
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	2201      	movs	r2, #1
 8003efa:	409a      	lsls	r2, r3
 8003efc:	4b13      	ldr	r3, [pc, #76]	@ (8003f4c <HAL_DMA_Abort+0xc0>)
 8003efe:	430a      	orrs	r2, r1
 8003f00:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003f0a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00c      	beq.n	8003f2e <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f1e:	490a      	ldr	r1, [pc, #40]	@ (8003f48 <HAL_DMA_Abort+0xbc>)
 8003f20:	400a      	ands	r2, r1
 8003f22:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003f2c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2225      	movs	r2, #37	@ 0x25
 8003f32:	2101      	movs	r1, #1
 8003f34:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2224      	movs	r2, #36	@ 0x24
 8003f3a:	2100      	movs	r1, #0
 8003f3c:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	0018      	movs	r0, r3
 8003f42:	46bd      	mov	sp, r7
 8003f44:	b002      	add	sp, #8
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	fffffeff 	.word	0xfffffeff
 8003f4c:	40020000 	.word	0x40020000

08003f50 <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f58:	230f      	movs	r3, #15
 8003f5a:	18fb      	adds	r3, r7, r3
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2224      	movs	r2, #36	@ 0x24
 8003f64:	2100      	movs	r1, #0
 8003f66:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2224      	movs	r2, #36	@ 0x24
 8003f6c:	5c9b      	ldrb	r3, [r3, r2]
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d101      	bne.n	8003f76 <HAL_DMA_Abort_IT+0x26>
 8003f72:	2302      	movs	r3, #2
 8003f74:	e05e      	b.n	8004034 <HAL_DMA_Abort_IT+0xe4>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2224      	movs	r2, #36	@ 0x24
 8003f7a:	2101      	movs	r1, #1
 8003f7c:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2225      	movs	r2, #37	@ 0x25
 8003f82:	5c9b      	ldrb	r3, [r3, r2]
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d007      	beq.n	8003f9a <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2204      	movs	r2, #4
 8003f8e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003f90:	230f      	movs	r3, #15
 8003f92:	18fb      	adds	r3, r7, r3
 8003f94:	2201      	movs	r2, #1
 8003f96:	701a      	strb	r2, [r3, #0]
 8003f98:	e049      	b.n	800402e <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	210e      	movs	r1, #14
 8003fa6:	438a      	bics	r2, r1
 8003fa8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2101      	movs	r1, #1
 8003fb6:	438a      	bics	r2, r1
 8003fb8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fc4:	491d      	ldr	r1, [pc, #116]	@ (800403c <HAL_DMA_Abort_IT+0xec>)
 8003fc6:	400a      	ands	r2, r1
 8003fc8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 8003fca:	4b1d      	ldr	r3, [pc, #116]	@ (8004040 <HAL_DMA_Abort_IT+0xf0>)
 8003fcc:	6859      	ldr	r1, [r3, #4]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd2:	221c      	movs	r2, #28
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	409a      	lsls	r2, r3
 8003fda:	4b19      	ldr	r3, [pc, #100]	@ (8004040 <HAL_DMA_Abort_IT+0xf0>)
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003fe8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00c      	beq.n	800400c <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ffc:	490f      	ldr	r1, [pc, #60]	@ (800403c <HAL_DMA_Abort_IT+0xec>)
 8003ffe:	400a      	ands	r2, r1
 8004000:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800400a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2225      	movs	r2, #37	@ 0x25
 8004010:	2101      	movs	r1, #1
 8004012:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2224      	movs	r2, #36	@ 0x24
 8004018:	2100      	movs	r1, #0
 800401a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004020:	2b00      	cmp	r3, #0
 8004022:	d004      	beq.n	800402e <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	0010      	movs	r0, r2
 800402c:	4798      	blx	r3
    }
  }
  return status;
 800402e:	230f      	movs	r3, #15
 8004030:	18fb      	adds	r3, r7, r3
 8004032:	781b      	ldrb	r3, [r3, #0]
}
 8004034:	0018      	movs	r0, r3
 8004036:	46bd      	mov	sp, r7
 8004038:	b004      	add	sp, #16
 800403a:	bd80      	pop	{r7, pc}
 800403c:	fffffeff 	.word	0xfffffeff
 8004040:	40020000 	.word	0x40020000

08004044 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 800404c:	4b55      	ldr	r3, [pc, #340]	@ (80041a4 <HAL_DMA_IRQHandler+0x160>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800405e:	221c      	movs	r2, #28
 8004060:	4013      	ands	r3, r2
 8004062:	2204      	movs	r2, #4
 8004064:	409a      	lsls	r2, r3
 8004066:	0013      	movs	r3, r2
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	4013      	ands	r3, r2
 800406c:	d027      	beq.n	80040be <HAL_DMA_IRQHandler+0x7a>
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	2204      	movs	r2, #4
 8004072:	4013      	ands	r3, r2
 8004074:	d023      	beq.n	80040be <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2220      	movs	r2, #32
 800407e:	4013      	ands	r3, r2
 8004080:	d107      	bne.n	8004092 <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2104      	movs	r1, #4
 800408e:	438a      	bics	r2, r1
 8004090:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 8004092:	4b44      	ldr	r3, [pc, #272]	@ (80041a4 <HAL_DMA_IRQHandler+0x160>)
 8004094:	6859      	ldr	r1, [r3, #4]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800409a:	221c      	movs	r2, #28
 800409c:	4013      	ands	r3, r2
 800409e:	2204      	movs	r2, #4
 80040a0:	409a      	lsls	r2, r3
 80040a2:	4b40      	ldr	r3, [pc, #256]	@ (80041a4 <HAL_DMA_IRQHandler+0x160>)
 80040a4:	430a      	orrs	r2, r1
 80040a6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d100      	bne.n	80040b2 <HAL_DMA_IRQHandler+0x6e>
 80040b0:	e073      	b.n	800419a <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	0010      	movs	r0, r2
 80040ba:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80040bc:	e06d      	b.n	800419a <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c2:	221c      	movs	r2, #28
 80040c4:	4013      	ands	r3, r2
 80040c6:	2202      	movs	r2, #2
 80040c8:	409a      	lsls	r2, r3
 80040ca:	0013      	movs	r3, r2
 80040cc:	68fa      	ldr	r2, [r7, #12]
 80040ce:	4013      	ands	r3, r2
 80040d0:	d02e      	beq.n	8004130 <HAL_DMA_IRQHandler+0xec>
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	2202      	movs	r2, #2
 80040d6:	4013      	ands	r3, r2
 80040d8:	d02a      	beq.n	8004130 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2220      	movs	r2, #32
 80040e2:	4013      	ands	r3, r2
 80040e4:	d10b      	bne.n	80040fe <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	210a      	movs	r1, #10
 80040f2:	438a      	bics	r2, r1
 80040f4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2225      	movs	r2, #37	@ 0x25
 80040fa:	2101      	movs	r1, #1
 80040fc:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 80040fe:	4b29      	ldr	r3, [pc, #164]	@ (80041a4 <HAL_DMA_IRQHandler+0x160>)
 8004100:	6859      	ldr	r1, [r3, #4]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004106:	221c      	movs	r2, #28
 8004108:	4013      	ands	r3, r2
 800410a:	2202      	movs	r2, #2
 800410c:	409a      	lsls	r2, r3
 800410e:	4b25      	ldr	r3, [pc, #148]	@ (80041a4 <HAL_DMA_IRQHandler+0x160>)
 8004110:	430a      	orrs	r2, r1
 8004112:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2224      	movs	r2, #36	@ 0x24
 8004118:	2100      	movs	r1, #0
 800411a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004120:	2b00      	cmp	r3, #0
 8004122:	d03a      	beq.n	800419a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	0010      	movs	r0, r2
 800412c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800412e:	e034      	b.n	800419a <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004134:	221c      	movs	r2, #28
 8004136:	4013      	ands	r3, r2
 8004138:	2208      	movs	r2, #8
 800413a:	409a      	lsls	r2, r3
 800413c:	0013      	movs	r3, r2
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	4013      	ands	r3, r2
 8004142:	d02b      	beq.n	800419c <HAL_DMA_IRQHandler+0x158>
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	2208      	movs	r2, #8
 8004148:	4013      	ands	r3, r2
 800414a:	d027      	beq.n	800419c <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	210e      	movs	r1, #14
 8004158:	438a      	bics	r2, r1
 800415a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 800415c:	4b11      	ldr	r3, [pc, #68]	@ (80041a4 <HAL_DMA_IRQHandler+0x160>)
 800415e:	6859      	ldr	r1, [r3, #4]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004164:	221c      	movs	r2, #28
 8004166:	4013      	ands	r3, r2
 8004168:	2201      	movs	r2, #1
 800416a:	409a      	lsls	r2, r3
 800416c:	4b0d      	ldr	r3, [pc, #52]	@ (80041a4 <HAL_DMA_IRQHandler+0x160>)
 800416e:	430a      	orrs	r2, r1
 8004170:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2201      	movs	r2, #1
 8004176:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2225      	movs	r2, #37	@ 0x25
 800417c:	2101      	movs	r1, #1
 800417e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2224      	movs	r2, #36	@ 0x24
 8004184:	2100      	movs	r1, #0
 8004186:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800418c:	2b00      	cmp	r3, #0
 800418e:	d005      	beq.n	800419c <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	0010      	movs	r0, r2
 8004198:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800419a:	46c0      	nop			@ (mov r8, r8)
 800419c:	46c0      	nop			@ (mov r8, r8)
}
 800419e:	46bd      	mov	sp, r7
 80041a0:	b004      	add	sp, #16
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	40020000 	.word	0x40020000

080041a8 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2225      	movs	r2, #37	@ 0x25
 80041b4:	5c9b      	ldrb	r3, [r3, r2]
 80041b6:	b2db      	uxtb	r3, r3
}
 80041b8:	0018      	movs	r0, r3
 80041ba:	46bd      	mov	sp, r7
 80041bc:	b002      	add	sp, #8
 80041be:	bd80      	pop	{r7, pc}

080041c0 <HAL_DMA_GetError>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 80041cc:	0018      	movs	r0, r3
 80041ce:	46bd      	mov	sp, r7
 80041d0:	b002      	add	sp, #8
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	607a      	str	r2, [r7, #4]
 80041e0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80041ea:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d004      	beq.n	80041fe <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80041fc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 80041fe:	4b14      	ldr	r3, [pc, #80]	@ (8004250 <DMA_SetConfig+0x7c>)
 8004200:	6859      	ldr	r1, [r3, #4]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004206:	221c      	movs	r2, #28
 8004208:	4013      	ands	r3, r2
 800420a:	2201      	movs	r2, #1
 800420c:	409a      	lsls	r2, r3
 800420e:	4b10      	ldr	r3, [pc, #64]	@ (8004250 <DMA_SetConfig+0x7c>)
 8004210:	430a      	orrs	r2, r1
 8004212:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	683a      	ldr	r2, [r7, #0]
 800421a:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	2b10      	cmp	r3, #16
 8004222:	d108      	bne.n	8004236 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68ba      	ldr	r2, [r7, #8]
 8004232:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004234:	e007      	b.n	8004246 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68ba      	ldr	r2, [r7, #8]
 800423c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	60da      	str	r2, [r3, #12]
}
 8004246:	46c0      	nop			@ (mov r8, r8)
 8004248:	46bd      	mov	sp, r7
 800424a:	b004      	add	sp, #16
 800424c:	bd80      	pop	{r7, pc}
 800424e:	46c0      	nop			@ (mov r8, r8)
 8004250:	40020000 	.word	0x40020000

08004254 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	001a      	movs	r2, r3
 8004262:	23ff      	movs	r3, #255	@ 0xff
 8004264:	4013      	ands	r3, r2
 8004266:	3b08      	subs	r3, #8
 8004268:	2114      	movs	r1, #20
 800426a:	0018      	movs	r0, r3
 800426c:	f7fb ff4c 	bl	8000108 <__udivsi3>
 8004270:	0003      	movs	r3, r0
 8004272:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004278:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 800427a:	4a0a      	ldr	r2, [pc, #40]	@ (80042a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 800427c:	4694      	mov	ip, r2
 800427e:	4463      	add	r3, ip
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	001a      	movs	r2, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	645a      	str	r2, [r3, #68]	@ 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a07      	ldr	r2, [pc, #28]	@ (80042a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800428c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	221c      	movs	r2, #28
 8004292:	4013      	ands	r3, r2
 8004294:	2201      	movs	r2, #1
 8004296:	409a      	lsls	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 800429c:	46c0      	nop			@ (mov r8, r8)
 800429e:	46bd      	mov	sp, r7
 80042a0:	b004      	add	sp, #16
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	10008200 	.word	0x10008200
 80042a8:	40020880 	.word	0x40020880

080042ac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	22ff      	movs	r2, #255	@ 0xff
 80042ba:	4013      	ands	r3, r2
 80042bc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	4a0a      	ldr	r2, [pc, #40]	@ (80042ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80042c2:	4694      	mov	ip, r2
 80042c4:	4463      	add	r3, ip
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	001a      	movs	r2, r3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	651a      	str	r2, [r3, #80]	@ 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a07      	ldr	r2, [pc, #28]	@ (80042f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80042d2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	3b01      	subs	r3, #1
 80042d8:	2203      	movs	r2, #3
 80042da:	4013      	ands	r3, r2
 80042dc:	2201      	movs	r2, #1
 80042de:	409a      	lsls	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80042e4:	46c0      	nop			@ (mov r8, r8)
 80042e6:	46bd      	mov	sp, r7
 80042e8:	b004      	add	sp, #16
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	1000823f 	.word	0x1000823f
 80042f0:	40020940 	.word	0x40020940

080042f4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b086      	sub	sp, #24
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80042fe:	2300      	movs	r3, #0
 8004300:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004302:	e153      	b.n	80045ac <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2101      	movs	r1, #1
 800430a:	693a      	ldr	r2, [r7, #16]
 800430c:	4091      	lsls	r1, r2
 800430e:	000a      	movs	r2, r1
 8004310:	4013      	ands	r3, r2
 8004312:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d100      	bne.n	800431c <HAL_GPIO_Init+0x28>
 800431a:	e144      	b.n	80045a6 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	2b02      	cmp	r3, #2
 8004322:	d003      	beq.n	800432c <HAL_GPIO_Init+0x38>
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	2b12      	cmp	r3, #18
 800432a:	d125      	bne.n	8004378 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	08da      	lsrs	r2, r3, #3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	3208      	adds	r2, #8
 8004334:	0092      	lsls	r2, r2, #2
 8004336:	58d3      	ldr	r3, [r2, r3]
 8004338:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	2207      	movs	r2, #7
 800433e:	4013      	ands	r3, r2
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	220f      	movs	r2, #15
 8004344:	409a      	lsls	r2, r3
 8004346:	0013      	movs	r3, r2
 8004348:	43da      	mvns	r2, r3
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	4013      	ands	r3, r2
 800434e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	220f      	movs	r2, #15
 8004356:	401a      	ands	r2, r3
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	2107      	movs	r1, #7
 800435c:	400b      	ands	r3, r1
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	409a      	lsls	r2, r3
 8004362:	0013      	movs	r3, r2
 8004364:	697a      	ldr	r2, [r7, #20]
 8004366:	4313      	orrs	r3, r2
 8004368:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	08da      	lsrs	r2, r3, #3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	3208      	adds	r2, #8
 8004372:	0092      	lsls	r2, r2, #2
 8004374:	6979      	ldr	r1, [r7, #20]
 8004376:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	005b      	lsls	r3, r3, #1
 8004382:	2203      	movs	r2, #3
 8004384:	409a      	lsls	r2, r3
 8004386:	0013      	movs	r3, r2
 8004388:	43da      	mvns	r2, r3
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	4013      	ands	r3, r2
 800438e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	2203      	movs	r2, #3
 8004396:	401a      	ands	r2, r3
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	005b      	lsls	r3, r3, #1
 800439c:	409a      	lsls	r2, r3
 800439e:	0013      	movs	r3, r2
 80043a0:	697a      	ldr	r2, [r7, #20]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	697a      	ldr	r2, [r7, #20]
 80043aa:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d00b      	beq.n	80043cc <HAL_GPIO_Init+0xd8>
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d007      	beq.n	80043cc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80043c0:	2b11      	cmp	r3, #17
 80043c2:	d003      	beq.n	80043cc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	2b12      	cmp	r3, #18
 80043ca:	d130      	bne.n	800442e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	005b      	lsls	r3, r3, #1
 80043d6:	2203      	movs	r2, #3
 80043d8:	409a      	lsls	r2, r3
 80043da:	0013      	movs	r3, r2
 80043dc:	43da      	mvns	r2, r3
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	4013      	ands	r3, r2
 80043e2:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	68da      	ldr	r2, [r3, #12]
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	005b      	lsls	r3, r3, #1
 80043ec:	409a      	lsls	r2, r3
 80043ee:	0013      	movs	r3, r2
 80043f0:	697a      	ldr	r2, [r7, #20]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	697a      	ldr	r2, [r7, #20]
 80043fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004402:	2201      	movs	r2, #1
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	409a      	lsls	r2, r3
 8004408:	0013      	movs	r3, r2
 800440a:	43da      	mvns	r2, r3
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	4013      	ands	r3, r2
 8004410:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	091b      	lsrs	r3, r3, #4
 8004418:	2201      	movs	r2, #1
 800441a:	401a      	ands	r2, r3
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	409a      	lsls	r2, r3
 8004420:	0013      	movs	r3, r2
 8004422:	697a      	ldr	r2, [r7, #20]
 8004424:	4313      	orrs	r3, r2
 8004426:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	697a      	ldr	r2, [r7, #20]
 800442c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	2b03      	cmp	r3, #3
 8004434:	d017      	beq.n	8004466 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	005b      	lsls	r3, r3, #1
 8004440:	2203      	movs	r2, #3
 8004442:	409a      	lsls	r2, r3
 8004444:	0013      	movs	r3, r2
 8004446:	43da      	mvns	r2, r3
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	4013      	ands	r3, r2
 800444c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	689a      	ldr	r2, [r3, #8]
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	005b      	lsls	r3, r3, #1
 8004456:	409a      	lsls	r2, r3
 8004458:	0013      	movs	r3, r2
 800445a:	697a      	ldr	r2, [r7, #20]
 800445c:	4313      	orrs	r3, r2
 800445e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	685a      	ldr	r2, [r3, #4]
 800446a:	2380      	movs	r3, #128	@ 0x80
 800446c:	055b      	lsls	r3, r3, #21
 800446e:	4013      	ands	r3, r2
 8004470:	d100      	bne.n	8004474 <HAL_GPIO_Init+0x180>
 8004472:	e098      	b.n	80045a6 <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8004474:	4a53      	ldr	r2, [pc, #332]	@ (80045c4 <HAL_GPIO_Init+0x2d0>)
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	089b      	lsrs	r3, r3, #2
 800447a:	3318      	adds	r3, #24
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	589b      	ldr	r3, [r3, r2]
 8004480:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	2203      	movs	r2, #3
 8004486:	4013      	ands	r3, r2
 8004488:	00db      	lsls	r3, r3, #3
 800448a:	220f      	movs	r2, #15
 800448c:	409a      	lsls	r2, r3
 800448e:	0013      	movs	r3, r2
 8004490:	43da      	mvns	r2, r3
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	4013      	ands	r3, r2
 8004496:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	23a0      	movs	r3, #160	@ 0xa0
 800449c:	05db      	lsls	r3, r3, #23
 800449e:	429a      	cmp	r2, r3
 80044a0:	d019      	beq.n	80044d6 <HAL_GPIO_Init+0x1e2>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a48      	ldr	r2, [pc, #288]	@ (80045c8 <HAL_GPIO_Init+0x2d4>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d013      	beq.n	80044d2 <HAL_GPIO_Init+0x1de>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a47      	ldr	r2, [pc, #284]	@ (80045cc <HAL_GPIO_Init+0x2d8>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d00d      	beq.n	80044ce <HAL_GPIO_Init+0x1da>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a46      	ldr	r2, [pc, #280]	@ (80045d0 <HAL_GPIO_Init+0x2dc>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d007      	beq.n	80044ca <HAL_GPIO_Init+0x1d6>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a45      	ldr	r2, [pc, #276]	@ (80045d4 <HAL_GPIO_Init+0x2e0>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d101      	bne.n	80044c6 <HAL_GPIO_Init+0x1d2>
 80044c2:	2305      	movs	r3, #5
 80044c4:	e008      	b.n	80044d8 <HAL_GPIO_Init+0x1e4>
 80044c6:	2306      	movs	r3, #6
 80044c8:	e006      	b.n	80044d8 <HAL_GPIO_Init+0x1e4>
 80044ca:	2303      	movs	r3, #3
 80044cc:	e004      	b.n	80044d8 <HAL_GPIO_Init+0x1e4>
 80044ce:	2302      	movs	r3, #2
 80044d0:	e002      	b.n	80044d8 <HAL_GPIO_Init+0x1e4>
 80044d2:	2301      	movs	r3, #1
 80044d4:	e000      	b.n	80044d8 <HAL_GPIO_Init+0x1e4>
 80044d6:	2300      	movs	r3, #0
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	2103      	movs	r1, #3
 80044dc:	400a      	ands	r2, r1
 80044de:	00d2      	lsls	r2, r2, #3
 80044e0:	4093      	lsls	r3, r2
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80044e8:	4936      	ldr	r1, [pc, #216]	@ (80045c4 <HAL_GPIO_Init+0x2d0>)
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	089b      	lsrs	r3, r3, #2
 80044ee:	3318      	adds	r3, #24
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 80044f6:	4a33      	ldr	r2, [pc, #204]	@ (80045c4 <HAL_GPIO_Init+0x2d0>)
 80044f8:	2380      	movs	r3, #128	@ 0x80
 80044fa:	58d3      	ldr	r3, [r2, r3]
 80044fc:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	43da      	mvns	r2, r3
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	4013      	ands	r3, r2
 8004506:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	685a      	ldr	r2, [r3, #4]
 800450c:	2380      	movs	r3, #128	@ 0x80
 800450e:	025b      	lsls	r3, r3, #9
 8004510:	4013      	ands	r3, r2
 8004512:	d003      	beq.n	800451c <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8004514:	697a      	ldr	r2, [r7, #20]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	4313      	orrs	r3, r2
 800451a:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 800451c:	4929      	ldr	r1, [pc, #164]	@ (80045c4 <HAL_GPIO_Init+0x2d0>)
 800451e:	2280      	movs	r2, #128	@ 0x80
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8004524:	4a27      	ldr	r2, [pc, #156]	@ (80045c4 <HAL_GPIO_Init+0x2d0>)
 8004526:	2384      	movs	r3, #132	@ 0x84
 8004528:	58d3      	ldr	r3, [r2, r3]
 800452a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	43da      	mvns	r2, r3
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	4013      	ands	r3, r2
 8004534:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	685a      	ldr	r2, [r3, #4]
 800453a:	2380      	movs	r3, #128	@ 0x80
 800453c:	029b      	lsls	r3, r3, #10
 800453e:	4013      	ands	r3, r2
 8004540:	d003      	beq.n	800454a <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 8004542:	697a      	ldr	r2, [r7, #20]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	4313      	orrs	r3, r2
 8004548:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800454a:	491e      	ldr	r1, [pc, #120]	@ (80045c4 <HAL_GPIO_Init+0x2d0>)
 800454c:	2284      	movs	r2, #132	@ 0x84
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8004552:	4b1c      	ldr	r3, [pc, #112]	@ (80045c4 <HAL_GPIO_Init+0x2d0>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	43da      	mvns	r2, r3
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	4013      	ands	r3, r2
 8004560:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	685a      	ldr	r2, [r3, #4]
 8004566:	2380      	movs	r3, #128	@ 0x80
 8004568:	035b      	lsls	r3, r3, #13
 800456a:	4013      	ands	r3, r2
 800456c:	d003      	beq.n	8004576 <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 800456e:	697a      	ldr	r2, [r7, #20]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	4313      	orrs	r3, r2
 8004574:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8004576:	4b13      	ldr	r3, [pc, #76]	@ (80045c4 <HAL_GPIO_Init+0x2d0>)
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 800457c:	4b11      	ldr	r3, [pc, #68]	@ (80045c4 <HAL_GPIO_Init+0x2d0>)
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	43da      	mvns	r2, r3
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	4013      	ands	r3, r2
 800458a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	685a      	ldr	r2, [r3, #4]
 8004590:	2380      	movs	r3, #128	@ 0x80
 8004592:	039b      	lsls	r3, r3, #14
 8004594:	4013      	ands	r3, r2
 8004596:	d003      	beq.n	80045a0 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8004598:	697a      	ldr	r2, [r7, #20]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	4313      	orrs	r3, r2
 800459e:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80045a0:	4b08      	ldr	r3, [pc, #32]	@ (80045c4 <HAL_GPIO_Init+0x2d0>)
 80045a2:	697a      	ldr	r2, [r7, #20]
 80045a4:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	3301      	adds	r3, #1
 80045aa:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	40da      	lsrs	r2, r3
 80045b4:	1e13      	subs	r3, r2, #0
 80045b6:	d000      	beq.n	80045ba <HAL_GPIO_Init+0x2c6>
 80045b8:	e6a4      	b.n	8004304 <HAL_GPIO_Init+0x10>
  }
}
 80045ba:	46c0      	nop			@ (mov r8, r8)
 80045bc:	46c0      	nop			@ (mov r8, r8)
 80045be:	46bd      	mov	sp, r7
 80045c0:	b006      	add	sp, #24
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	40021800 	.word	0x40021800
 80045c8:	50000400 	.word	0x50000400
 80045cc:	50000800 	.word	0x50000800
 80045d0:	50000c00 	.word	0x50000c00
 80045d4:	50001400 	.word	0x50001400

080045d8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b086      	sub	sp, #24
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80045e2:	2300      	movs	r3, #0
 80045e4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 80045e6:	e0ba      	b.n	800475e <HAL_GPIO_DeInit+0x186>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 80045e8:	2201      	movs	r2, #1
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	409a      	lsls	r2, r3
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	4013      	ands	r3, r2
 80045f2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0U)
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d100      	bne.n	80045fc <HAL_GPIO_DeInit+0x24>
 80045fa:	e0ad      	b.n	8004758 <HAL_GPIO_DeInit+0x180>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = EXTI->EXTICR[position >> 2U];
 80045fc:	4a5d      	ldr	r2, [pc, #372]	@ (8004774 <HAL_GPIO_DeInit+0x19c>)
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	089b      	lsrs	r3, r3, #2
 8004602:	3318      	adds	r3, #24
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	589b      	ldr	r3, [r3, r2]
 8004608:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	2203      	movs	r2, #3
 800460e:	4013      	ands	r3, r2
 8004610:	00db      	lsls	r3, r3, #3
 8004612:	220f      	movs	r2, #15
 8004614:	409a      	lsls	r2, r3
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	4013      	ands	r3, r2
 800461a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos)))
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	23a0      	movs	r3, #160	@ 0xa0
 8004620:	05db      	lsls	r3, r3, #23
 8004622:	429a      	cmp	r2, r3
 8004624:	d019      	beq.n	800465a <HAL_GPIO_DeInit+0x82>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a53      	ldr	r2, [pc, #332]	@ (8004778 <HAL_GPIO_DeInit+0x1a0>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d013      	beq.n	8004656 <HAL_GPIO_DeInit+0x7e>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a52      	ldr	r2, [pc, #328]	@ (800477c <HAL_GPIO_DeInit+0x1a4>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d00d      	beq.n	8004652 <HAL_GPIO_DeInit+0x7a>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a51      	ldr	r2, [pc, #324]	@ (8004780 <HAL_GPIO_DeInit+0x1a8>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d007      	beq.n	800464e <HAL_GPIO_DeInit+0x76>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a50      	ldr	r2, [pc, #320]	@ (8004784 <HAL_GPIO_DeInit+0x1ac>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d101      	bne.n	800464a <HAL_GPIO_DeInit+0x72>
 8004646:	2305      	movs	r3, #5
 8004648:	e008      	b.n	800465c <HAL_GPIO_DeInit+0x84>
 800464a:	2306      	movs	r3, #6
 800464c:	e006      	b.n	800465c <HAL_GPIO_DeInit+0x84>
 800464e:	2303      	movs	r3, #3
 8004650:	e004      	b.n	800465c <HAL_GPIO_DeInit+0x84>
 8004652:	2302      	movs	r3, #2
 8004654:	e002      	b.n	800465c <HAL_GPIO_DeInit+0x84>
 8004656:	2301      	movs	r3, #1
 8004658:	e000      	b.n	800465c <HAL_GPIO_DeInit+0x84>
 800465a:	2300      	movs	r3, #0
 800465c:	697a      	ldr	r2, [r7, #20]
 800465e:	2103      	movs	r1, #3
 8004660:	400a      	ands	r2, r1
 8004662:	00d2      	lsls	r2, r2, #3
 8004664:	4093      	lsls	r3, r2
 8004666:	68fa      	ldr	r2, [r7, #12]
 8004668:	429a      	cmp	r2, r3
 800466a:	d136      	bne.n	80046da <HAL_GPIO_DeInit+0x102>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800466c:	4a41      	ldr	r2, [pc, #260]	@ (8004774 <HAL_GPIO_DeInit+0x19c>)
 800466e:	2380      	movs	r3, #128	@ 0x80
 8004670:	58d3      	ldr	r3, [r2, r3]
 8004672:	693a      	ldr	r2, [r7, #16]
 8004674:	43d2      	mvns	r2, r2
 8004676:	493f      	ldr	r1, [pc, #252]	@ (8004774 <HAL_GPIO_DeInit+0x19c>)
 8004678:	4013      	ands	r3, r2
 800467a:	2280      	movs	r2, #128	@ 0x80
 800467c:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 800467e:	4a3d      	ldr	r2, [pc, #244]	@ (8004774 <HAL_GPIO_DeInit+0x19c>)
 8004680:	2384      	movs	r3, #132	@ 0x84
 8004682:	58d3      	ldr	r3, [r2, r3]
 8004684:	693a      	ldr	r2, [r7, #16]
 8004686:	43d2      	mvns	r2, r2
 8004688:	493a      	ldr	r1, [pc, #232]	@ (8004774 <HAL_GPIO_DeInit+0x19c>)
 800468a:	4013      	ands	r3, r2
 800468c:	2284      	movs	r2, #132	@ 0x84
 800468e:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8004690:	4b38      	ldr	r3, [pc, #224]	@ (8004774 <HAL_GPIO_DeInit+0x19c>)
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	43d9      	mvns	r1, r3
 8004698:	4b36      	ldr	r3, [pc, #216]	@ (8004774 <HAL_GPIO_DeInit+0x19c>)
 800469a:	400a      	ands	r2, r1
 800469c:	601a      	str	r2, [r3, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800469e:	4b35      	ldr	r3, [pc, #212]	@ (8004774 <HAL_GPIO_DeInit+0x19c>)
 80046a0:	685a      	ldr	r2, [r3, #4]
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	43d9      	mvns	r1, r3
 80046a6:	4b33      	ldr	r3, [pc, #204]	@ (8004774 <HAL_GPIO_DeInit+0x19c>)
 80046a8:	400a      	ands	r2, r1
 80046aa:	605a      	str	r2, [r3, #4]

        tmp = (0x0FUL) << (8U * (position & 0x03U));
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	2203      	movs	r2, #3
 80046b0:	4013      	ands	r3, r2
 80046b2:	00db      	lsls	r3, r3, #3
 80046b4:	220f      	movs	r2, #15
 80046b6:	409a      	lsls	r2, r3
 80046b8:	0013      	movs	r3, r2
 80046ba:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2U] &= ~tmp;
 80046bc:	4a2d      	ldr	r2, [pc, #180]	@ (8004774 <HAL_GPIO_DeInit+0x19c>)
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	089b      	lsrs	r3, r3, #2
 80046c2:	3318      	adds	r3, #24
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	589a      	ldr	r2, [r3, r2]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	43d9      	mvns	r1, r3
 80046cc:	4829      	ldr	r0, [pc, #164]	@ (8004774 <HAL_GPIO_DeInit+0x19c>)
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	089b      	lsrs	r3, r3, #2
 80046d2:	400a      	ands	r2, r1
 80046d4:	3318      	adds	r3, #24
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	005b      	lsls	r3, r3, #1
 80046e2:	2103      	movs	r1, #3
 80046e4:	4099      	lsls	r1, r3
 80046e6:	000b      	movs	r3, r1
 80046e8:	431a      	orrs	r2, r3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	08da      	lsrs	r2, r3, #3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	3208      	adds	r2, #8
 80046f6:	0092      	lsls	r2, r2, #2
 80046f8:	58d3      	ldr	r3, [r2, r3]
 80046fa:	697a      	ldr	r2, [r7, #20]
 80046fc:	2107      	movs	r1, #7
 80046fe:	400a      	ands	r2, r1
 8004700:	0092      	lsls	r2, r2, #2
 8004702:	210f      	movs	r1, #15
 8004704:	4091      	lsls	r1, r2
 8004706:	000a      	movs	r2, r1
 8004708:	43d1      	mvns	r1, r2
 800470a:	697a      	ldr	r2, [r7, #20]
 800470c:	08d2      	lsrs	r2, r2, #3
 800470e:	4019      	ands	r1, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	3208      	adds	r2, #8
 8004714:	0092      	lsls	r2, r2, #2
 8004716:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	697a      	ldr	r2, [r7, #20]
 800471e:	0052      	lsls	r2, r2, #1
 8004720:	2103      	movs	r1, #3
 8004722:	4091      	lsls	r1, r2
 8004724:	000a      	movs	r2, r1
 8004726:	43d2      	mvns	r2, r2
 8004728:	401a      	ands	r2, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	2101      	movs	r1, #1
 8004734:	697a      	ldr	r2, [r7, #20]
 8004736:	4091      	lsls	r1, r2
 8004738:	000a      	movs	r2, r1
 800473a:	43d2      	mvns	r2, r2
 800473c:	401a      	ands	r2, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	697a      	ldr	r2, [r7, #20]
 8004748:	0052      	lsls	r2, r2, #1
 800474a:	2103      	movs	r1, #3
 800474c:	4091      	lsls	r1, r2
 800474e:	000a      	movs	r2, r1
 8004750:	43d2      	mvns	r2, r2
 8004752:	401a      	ands	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	60da      	str	r2, [r3, #12]
    }

    position++;
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	3301      	adds	r3, #1
 800475c:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 800475e:	683a      	ldr	r2, [r7, #0]
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	40da      	lsrs	r2, r3
 8004764:	1e13      	subs	r3, r2, #0
 8004766:	d000      	beq.n	800476a <HAL_GPIO_DeInit+0x192>
 8004768:	e73e      	b.n	80045e8 <HAL_GPIO_DeInit+0x10>
  }
}
 800476a:	46c0      	nop			@ (mov r8, r8)
 800476c:	46c0      	nop			@ (mov r8, r8)
 800476e:	46bd      	mov	sp, r7
 8004770:	b006      	add	sp, #24
 8004772:	bd80      	pop	{r7, pc}
 8004774:	40021800 	.word	0x40021800
 8004778:	50000400 	.word	0x50000400
 800477c:	50000800 	.word	0x50000800
 8004780:	50000c00 	.word	0x50000c00
 8004784:	50001400 	.word	0x50001400

08004788 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	0008      	movs	r0, r1
 8004792:	0011      	movs	r1, r2
 8004794:	1cbb      	adds	r3, r7, #2
 8004796:	1c02      	adds	r2, r0, #0
 8004798:	801a      	strh	r2, [r3, #0]
 800479a:	1c7b      	adds	r3, r7, #1
 800479c:	1c0a      	adds	r2, r1, #0
 800479e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80047a0:	1c7b      	adds	r3, r7, #1
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d004      	beq.n	80047b2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80047a8:	1cbb      	adds	r3, r7, #2
 80047aa:	881a      	ldrh	r2, [r3, #0]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80047b0:	e003      	b.n	80047ba <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80047b2:	1cbb      	adds	r3, r7, #2
 80047b4:	881a      	ldrh	r2, [r3, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80047ba:	46c0      	nop			@ (mov r8, r8)
 80047bc:	46bd      	mov	sp, r7
 80047be:	b002      	add	sp, #8
 80047c0:	bd80      	pop	{r7, pc}
	...

080047c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d101      	bne.n	80047d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e08f      	b.n	80048f6 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2241      	movs	r2, #65	@ 0x41
 80047da:	5c9b      	ldrb	r3, [r3, r2]
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d107      	bne.n	80047f2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2240      	movs	r2, #64	@ 0x40
 80047e6:	2100      	movs	r1, #0
 80047e8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	0018      	movs	r0, r3
 80047ee:	f7fd ffa5 	bl	800273c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2241      	movs	r2, #65	@ 0x41
 80047f6:	2124      	movs	r1, #36	@ 0x24
 80047f8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2101      	movs	r1, #1
 8004806:	438a      	bics	r2, r1
 8004808:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685a      	ldr	r2, [r3, #4]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	493b      	ldr	r1, [pc, #236]	@ (8004900 <HAL_I2C_Init+0x13c>)
 8004814:	400a      	ands	r2, r1
 8004816:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	689a      	ldr	r2, [r3, #8]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4938      	ldr	r1, [pc, #224]	@ (8004904 <HAL_I2C_Init+0x140>)
 8004824:	400a      	ands	r2, r1
 8004826:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d108      	bne.n	8004842 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	689a      	ldr	r2, [r3, #8]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2180      	movs	r1, #128	@ 0x80
 800483a:	0209      	lsls	r1, r1, #8
 800483c:	430a      	orrs	r2, r1
 800483e:	609a      	str	r2, [r3, #8]
 8004840:	e007      	b.n	8004852 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	689a      	ldr	r2, [r3, #8]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2184      	movs	r1, #132	@ 0x84
 800484c:	0209      	lsls	r1, r1, #8
 800484e:	430a      	orrs	r2, r1
 8004850:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	2b02      	cmp	r3, #2
 8004858:	d109      	bne.n	800486e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	685a      	ldr	r2, [r3, #4]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2180      	movs	r1, #128	@ 0x80
 8004866:	0109      	lsls	r1, r1, #4
 8004868:	430a      	orrs	r2, r1
 800486a:	605a      	str	r2, [r3, #4]
 800486c:	e007      	b.n	800487e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	685a      	ldr	r2, [r3, #4]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4923      	ldr	r1, [pc, #140]	@ (8004908 <HAL_I2C_Init+0x144>)
 800487a:	400a      	ands	r2, r1
 800487c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	685a      	ldr	r2, [r3, #4]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4920      	ldr	r1, [pc, #128]	@ (800490c <HAL_I2C_Init+0x148>)
 800488a:	430a      	orrs	r2, r1
 800488c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68da      	ldr	r2, [r3, #12]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	491a      	ldr	r1, [pc, #104]	@ (8004904 <HAL_I2C_Init+0x140>)
 800489a:	400a      	ands	r2, r1
 800489c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	691a      	ldr	r2, [r3, #16]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	431a      	orrs	r2, r3
 80048a8:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	430a      	orrs	r2, r1
 80048b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	69d9      	ldr	r1, [r3, #28]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a1a      	ldr	r2, [r3, #32]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	430a      	orrs	r2, r1
 80048c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2101      	movs	r1, #1
 80048d4:	430a      	orrs	r2, r1
 80048d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2241      	movs	r2, #65	@ 0x41
 80048e2:	2120      	movs	r1, #32
 80048e4:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2242      	movs	r2, #66	@ 0x42
 80048f0:	2100      	movs	r1, #0
 80048f2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	0018      	movs	r0, r3
 80048f8:	46bd      	mov	sp, r7
 80048fa:	b002      	add	sp, #8
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	46c0      	nop			@ (mov r8, r8)
 8004900:	f0ffffff 	.word	0xf0ffffff
 8004904:	ffff7fff 	.word	0xffff7fff
 8004908:	fffff7ff 	.word	0xfffff7ff
 800490c:	02008000 	.word	0x02008000

08004910 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d101      	bne.n	8004922 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e022      	b.n	8004968 <HAL_I2C_DeInit+0x58>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2241      	movs	r2, #65	@ 0x41
 8004926:	2124      	movs	r1, #36	@ 0x24
 8004928:	5499      	strb	r1, [r3, r2]

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2101      	movs	r1, #1
 8004936:	438a      	bics	r2, r1
 8004938:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	0018      	movs	r0, r3
 800493e:	f7fd ffc3 	bl	80028c8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2241      	movs	r2, #65	@ 0x41
 800494c:	2100      	movs	r1, #0
 800494e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2242      	movs	r2, #66	@ 0x42
 800495a:	2100      	movs	r1, #0
 800495c:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2240      	movs	r2, #64	@ 0x40
 8004962:	2100      	movs	r1, #0
 8004964:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004966:	2300      	movs	r3, #0
}
 8004968:	0018      	movs	r0, r3
 800496a:	46bd      	mov	sp, r7
 800496c:	b002      	add	sp, #8
 800496e:	bd80      	pop	{r7, pc}

08004970 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004970:	b590      	push	{r4, r7, lr}
 8004972:	b089      	sub	sp, #36	@ 0x24
 8004974:	af02      	add	r7, sp, #8
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	0008      	movs	r0, r1
 800497a:	607a      	str	r2, [r7, #4]
 800497c:	0019      	movs	r1, r3
 800497e:	230a      	movs	r3, #10
 8004980:	18fb      	adds	r3, r7, r3
 8004982:	1c02      	adds	r2, r0, #0
 8004984:	801a      	strh	r2, [r3, #0]
 8004986:	2308      	movs	r3, #8
 8004988:	18fb      	adds	r3, r7, r3
 800498a:	1c0a      	adds	r2, r1, #0
 800498c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2241      	movs	r2, #65	@ 0x41
 8004992:	5c9b      	ldrb	r3, [r3, r2]
 8004994:	b2db      	uxtb	r3, r3
 8004996:	2b20      	cmp	r3, #32
 8004998:	d000      	beq.n	800499c <HAL_I2C_Master_Transmit+0x2c>
 800499a:	e10a      	b.n	8004bb2 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2240      	movs	r2, #64	@ 0x40
 80049a0:	5c9b      	ldrb	r3, [r3, r2]
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d101      	bne.n	80049aa <HAL_I2C_Master_Transmit+0x3a>
 80049a6:	2302      	movs	r3, #2
 80049a8:	e104      	b.n	8004bb4 <HAL_I2C_Master_Transmit+0x244>
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2240      	movs	r2, #64	@ 0x40
 80049ae:	2101      	movs	r1, #1
 80049b0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80049b2:	f7fe fb29 	bl	8003008 <HAL_GetTick>
 80049b6:	0003      	movs	r3, r0
 80049b8:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80049ba:	2380      	movs	r3, #128	@ 0x80
 80049bc:	0219      	lsls	r1, r3, #8
 80049be:	68f8      	ldr	r0, [r7, #12]
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	9300      	str	r3, [sp, #0]
 80049c4:	2319      	movs	r3, #25
 80049c6:	2201      	movs	r2, #1
 80049c8:	f001 fde6 	bl	8006598 <I2C_WaitOnFlagUntilTimeout>
 80049cc:	1e03      	subs	r3, r0, #0
 80049ce:	d001      	beq.n	80049d4 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e0ef      	b.n	8004bb4 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2241      	movs	r2, #65	@ 0x41
 80049d8:	2121      	movs	r1, #33	@ 0x21
 80049da:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2242      	movs	r2, #66	@ 0x42
 80049e0:	2110      	movs	r1, #16
 80049e2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2200      	movs	r2, #0
 80049e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2208      	movs	r2, #8
 80049f4:	18ba      	adds	r2, r7, r2
 80049f6:	8812      	ldrh	r2, [r2, #0]
 80049f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2200      	movs	r2, #0
 80049fe:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	2bff      	cmp	r3, #255	@ 0xff
 8004a08:	d906      	bls.n	8004a18 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	22ff      	movs	r2, #255	@ 0xff
 8004a0e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004a10:	2380      	movs	r3, #128	@ 0x80
 8004a12:	045b      	lsls	r3, r3, #17
 8004a14:	617b      	str	r3, [r7, #20]
 8004a16:	e007      	b.n	8004a28 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a1c:	b29a      	uxth	r2, r3
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004a22:	2380      	movs	r3, #128	@ 0x80
 8004a24:	049b      	lsls	r3, r3, #18
 8004a26:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d027      	beq.n	8004a80 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a34:	781a      	ldrb	r2, [r3, #0]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a40:	1c5a      	adds	r2, r3, #1
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	b29a      	uxth	r2, r3
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a58:	3b01      	subs	r3, #1
 8004a5a:	b29a      	uxth	r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	3301      	adds	r3, #1
 8004a68:	b2da      	uxtb	r2, r3
 8004a6a:	697c      	ldr	r4, [r7, #20]
 8004a6c:	230a      	movs	r3, #10
 8004a6e:	18fb      	adds	r3, r7, r3
 8004a70:	8819      	ldrh	r1, [r3, #0]
 8004a72:	68f8      	ldr	r0, [r7, #12]
 8004a74:	4b51      	ldr	r3, [pc, #324]	@ (8004bbc <HAL_I2C_Master_Transmit+0x24c>)
 8004a76:	9300      	str	r3, [sp, #0]
 8004a78:	0023      	movs	r3, r4
 8004a7a:	f002 f805 	bl	8006a88 <I2C_TransferConfig>
 8004a7e:	e06f      	b.n	8004b60 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a84:	b2da      	uxtb	r2, r3
 8004a86:	697c      	ldr	r4, [r7, #20]
 8004a88:	230a      	movs	r3, #10
 8004a8a:	18fb      	adds	r3, r7, r3
 8004a8c:	8819      	ldrh	r1, [r3, #0]
 8004a8e:	68f8      	ldr	r0, [r7, #12]
 8004a90:	4b4a      	ldr	r3, [pc, #296]	@ (8004bbc <HAL_I2C_Master_Transmit+0x24c>)
 8004a92:	9300      	str	r3, [sp, #0]
 8004a94:	0023      	movs	r3, r4
 8004a96:	f001 fff7 	bl	8006a88 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004a9a:	e061      	b.n	8004b60 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a9c:	693a      	ldr	r2, [r7, #16]
 8004a9e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	0018      	movs	r0, r3
 8004aa4:	f001 fdd0 	bl	8006648 <I2C_WaitOnTXISFlagUntilTimeout>
 8004aa8:	1e03      	subs	r3, r0, #0
 8004aaa:	d001      	beq.n	8004ab0 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e081      	b.n	8004bb4 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab4:	781a      	ldrb	r2, [r3, #0]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac0:	1c5a      	adds	r2, r3, #1
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	3b01      	subs	r3, #1
 8004ace:	b29a      	uxth	r2, r3
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	b29a      	uxth	r2, r3
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d03a      	beq.n	8004b60 <HAL_I2C_Master_Transmit+0x1f0>
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d136      	bne.n	8004b60 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004af2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004af4:	68f8      	ldr	r0, [r7, #12]
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	9300      	str	r3, [sp, #0]
 8004afa:	0013      	movs	r3, r2
 8004afc:	2200      	movs	r2, #0
 8004afe:	2180      	movs	r1, #128	@ 0x80
 8004b00:	f001 fd4a 	bl	8006598 <I2C_WaitOnFlagUntilTimeout>
 8004b04:	1e03      	subs	r3, r0, #0
 8004b06:	d001      	beq.n	8004b0c <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e053      	b.n	8004bb4 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	2bff      	cmp	r3, #255	@ 0xff
 8004b14:	d911      	bls.n	8004b3a <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	22ff      	movs	r2, #255	@ 0xff
 8004b1a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b20:	b2da      	uxtb	r2, r3
 8004b22:	2380      	movs	r3, #128	@ 0x80
 8004b24:	045c      	lsls	r4, r3, #17
 8004b26:	230a      	movs	r3, #10
 8004b28:	18fb      	adds	r3, r7, r3
 8004b2a:	8819      	ldrh	r1, [r3, #0]
 8004b2c:	68f8      	ldr	r0, [r7, #12]
 8004b2e:	2300      	movs	r3, #0
 8004b30:	9300      	str	r3, [sp, #0]
 8004b32:	0023      	movs	r3, r4
 8004b34:	f001 ffa8 	bl	8006a88 <I2C_TransferConfig>
 8004b38:	e012      	b.n	8004b60 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b3e:	b29a      	uxth	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b48:	b2da      	uxtb	r2, r3
 8004b4a:	2380      	movs	r3, #128	@ 0x80
 8004b4c:	049c      	lsls	r4, r3, #18
 8004b4e:	230a      	movs	r3, #10
 8004b50:	18fb      	adds	r3, r7, r3
 8004b52:	8819      	ldrh	r1, [r3, #0]
 8004b54:	68f8      	ldr	r0, [r7, #12]
 8004b56:	2300      	movs	r3, #0
 8004b58:	9300      	str	r3, [sp, #0]
 8004b5a:	0023      	movs	r3, r4
 8004b5c:	f001 ff94 	bl	8006a88 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d198      	bne.n	8004a9c <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b6a:	693a      	ldr	r2, [r7, #16]
 8004b6c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	0018      	movs	r0, r3
 8004b72:	f001 fdaf 	bl	80066d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004b76:	1e03      	subs	r3, r0, #0
 8004b78:	d001      	beq.n	8004b7e <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e01a      	b.n	8004bb4 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2220      	movs	r2, #32
 8004b84:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	685a      	ldr	r2, [r3, #4]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	490b      	ldr	r1, [pc, #44]	@ (8004bc0 <HAL_I2C_Master_Transmit+0x250>)
 8004b92:	400a      	ands	r2, r1
 8004b94:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2241      	movs	r2, #65	@ 0x41
 8004b9a:	2120      	movs	r1, #32
 8004b9c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2242      	movs	r2, #66	@ 0x42
 8004ba2:	2100      	movs	r1, #0
 8004ba4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2240      	movs	r2, #64	@ 0x40
 8004baa:	2100      	movs	r1, #0
 8004bac:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	e000      	b.n	8004bb4 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8004bb2:	2302      	movs	r3, #2
  }
}
 8004bb4:	0018      	movs	r0, r3
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	b007      	add	sp, #28
 8004bba:	bd90      	pop	{r4, r7, pc}
 8004bbc:	80002000 	.word	0x80002000
 8004bc0:	fe00e800 	.word	0xfe00e800

08004bc4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004bc4:	b590      	push	{r4, r7, lr}
 8004bc6:	b089      	sub	sp, #36	@ 0x24
 8004bc8:	af02      	add	r7, sp, #8
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	0008      	movs	r0, r1
 8004bce:	607a      	str	r2, [r7, #4]
 8004bd0:	0019      	movs	r1, r3
 8004bd2:	230a      	movs	r3, #10
 8004bd4:	18fb      	adds	r3, r7, r3
 8004bd6:	1c02      	adds	r2, r0, #0
 8004bd8:	801a      	strh	r2, [r3, #0]
 8004bda:	2308      	movs	r3, #8
 8004bdc:	18fb      	adds	r3, r7, r3
 8004bde:	1c0a      	adds	r2, r1, #0
 8004be0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2241      	movs	r2, #65	@ 0x41
 8004be6:	5c9b      	ldrb	r3, [r3, r2]
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	2b20      	cmp	r3, #32
 8004bec:	d000      	beq.n	8004bf0 <HAL_I2C_Master_Receive+0x2c>
 8004bee:	e0e8      	b.n	8004dc2 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2240      	movs	r2, #64	@ 0x40
 8004bf4:	5c9b      	ldrb	r3, [r3, r2]
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d101      	bne.n	8004bfe <HAL_I2C_Master_Receive+0x3a>
 8004bfa:	2302      	movs	r3, #2
 8004bfc:	e0e2      	b.n	8004dc4 <HAL_I2C_Master_Receive+0x200>
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2240      	movs	r2, #64	@ 0x40
 8004c02:	2101      	movs	r1, #1
 8004c04:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004c06:	f7fe f9ff 	bl	8003008 <HAL_GetTick>
 8004c0a:	0003      	movs	r3, r0
 8004c0c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004c0e:	2380      	movs	r3, #128	@ 0x80
 8004c10:	0219      	lsls	r1, r3, #8
 8004c12:	68f8      	ldr	r0, [r7, #12]
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	9300      	str	r3, [sp, #0]
 8004c18:	2319      	movs	r3, #25
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f001 fcbc 	bl	8006598 <I2C_WaitOnFlagUntilTimeout>
 8004c20:	1e03      	subs	r3, r0, #0
 8004c22:	d001      	beq.n	8004c28 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e0cd      	b.n	8004dc4 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2241      	movs	r2, #65	@ 0x41
 8004c2c:	2122      	movs	r1, #34	@ 0x22
 8004c2e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2242      	movs	r2, #66	@ 0x42
 8004c34:	2110      	movs	r1, #16
 8004c36:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2208      	movs	r2, #8
 8004c48:	18ba      	adds	r2, r7, r2
 8004c4a:	8812      	ldrh	r2, [r2, #0]
 8004c4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2200      	movs	r2, #0
 8004c52:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	2bff      	cmp	r3, #255	@ 0xff
 8004c5c:	d911      	bls.n	8004c82 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	22ff      	movs	r2, #255	@ 0xff
 8004c62:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c68:	b2da      	uxtb	r2, r3
 8004c6a:	2380      	movs	r3, #128	@ 0x80
 8004c6c:	045c      	lsls	r4, r3, #17
 8004c6e:	230a      	movs	r3, #10
 8004c70:	18fb      	adds	r3, r7, r3
 8004c72:	8819      	ldrh	r1, [r3, #0]
 8004c74:	68f8      	ldr	r0, [r7, #12]
 8004c76:	4b55      	ldr	r3, [pc, #340]	@ (8004dcc <HAL_I2C_Master_Receive+0x208>)
 8004c78:	9300      	str	r3, [sp, #0]
 8004c7a:	0023      	movs	r3, r4
 8004c7c:	f001 ff04 	bl	8006a88 <I2C_TransferConfig>
 8004c80:	e076      	b.n	8004d70 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c86:	b29a      	uxth	r2, r3
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c90:	b2da      	uxtb	r2, r3
 8004c92:	2380      	movs	r3, #128	@ 0x80
 8004c94:	049c      	lsls	r4, r3, #18
 8004c96:	230a      	movs	r3, #10
 8004c98:	18fb      	adds	r3, r7, r3
 8004c9a:	8819      	ldrh	r1, [r3, #0]
 8004c9c:	68f8      	ldr	r0, [r7, #12]
 8004c9e:	4b4b      	ldr	r3, [pc, #300]	@ (8004dcc <HAL_I2C_Master_Receive+0x208>)
 8004ca0:	9300      	str	r3, [sp, #0]
 8004ca2:	0023      	movs	r3, r4
 8004ca4:	f001 fef0 	bl	8006a88 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004ca8:	e062      	b.n	8004d70 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004caa:	697a      	ldr	r2, [r7, #20]
 8004cac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	0018      	movs	r0, r3
 8004cb2:	f001 fd53 	bl	800675c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004cb6:	1e03      	subs	r3, r0, #0
 8004cb8:	d001      	beq.n	8004cbe <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e082      	b.n	8004dc4 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cc8:	b2d2      	uxtb	r2, r2
 8004cca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd0:	1c5a      	adds	r2, r3, #1
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	b29a      	uxth	r2, r3
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	b29a      	uxth	r2, r3
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d03a      	beq.n	8004d70 <HAL_I2C_Master_Receive+0x1ac>
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d136      	bne.n	8004d70 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004d02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d04:	68f8      	ldr	r0, [r7, #12]
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	9300      	str	r3, [sp, #0]
 8004d0a:	0013      	movs	r3, r2
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	2180      	movs	r1, #128	@ 0x80
 8004d10:	f001 fc42 	bl	8006598 <I2C_WaitOnFlagUntilTimeout>
 8004d14:	1e03      	subs	r3, r0, #0
 8004d16:	d001      	beq.n	8004d1c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e053      	b.n	8004dc4 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	2bff      	cmp	r3, #255	@ 0xff
 8004d24:	d911      	bls.n	8004d4a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	22ff      	movs	r2, #255	@ 0xff
 8004d2a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d30:	b2da      	uxtb	r2, r3
 8004d32:	2380      	movs	r3, #128	@ 0x80
 8004d34:	045c      	lsls	r4, r3, #17
 8004d36:	230a      	movs	r3, #10
 8004d38:	18fb      	adds	r3, r7, r3
 8004d3a:	8819      	ldrh	r1, [r3, #0]
 8004d3c:	68f8      	ldr	r0, [r7, #12]
 8004d3e:	2300      	movs	r3, #0
 8004d40:	9300      	str	r3, [sp, #0]
 8004d42:	0023      	movs	r3, r4
 8004d44:	f001 fea0 	bl	8006a88 <I2C_TransferConfig>
 8004d48:	e012      	b.n	8004d70 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d4e:	b29a      	uxth	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d58:	b2da      	uxtb	r2, r3
 8004d5a:	2380      	movs	r3, #128	@ 0x80
 8004d5c:	049c      	lsls	r4, r3, #18
 8004d5e:	230a      	movs	r3, #10
 8004d60:	18fb      	adds	r3, r7, r3
 8004d62:	8819      	ldrh	r1, [r3, #0]
 8004d64:	68f8      	ldr	r0, [r7, #12]
 8004d66:	2300      	movs	r3, #0
 8004d68:	9300      	str	r3, [sp, #0]
 8004d6a:	0023      	movs	r3, r4
 8004d6c:	f001 fe8c 	bl	8006a88 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d197      	bne.n	8004caa <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d7a:	697a      	ldr	r2, [r7, #20]
 8004d7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	0018      	movs	r0, r3
 8004d82:	f001 fca7 	bl	80066d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004d86:	1e03      	subs	r3, r0, #0
 8004d88:	d001      	beq.n	8004d8e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e01a      	b.n	8004dc4 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2220      	movs	r2, #32
 8004d94:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	685a      	ldr	r2, [r3, #4]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	490b      	ldr	r1, [pc, #44]	@ (8004dd0 <HAL_I2C_Master_Receive+0x20c>)
 8004da2:	400a      	ands	r2, r1
 8004da4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2241      	movs	r2, #65	@ 0x41
 8004daa:	2120      	movs	r1, #32
 8004dac:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2242      	movs	r2, #66	@ 0x42
 8004db2:	2100      	movs	r1, #0
 8004db4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2240      	movs	r2, #64	@ 0x40
 8004dba:	2100      	movs	r1, #0
 8004dbc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	e000      	b.n	8004dc4 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8004dc2:	2302      	movs	r3, #2
  }
}
 8004dc4:	0018      	movs	r0, r3
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	b007      	add	sp, #28
 8004dca:	bd90      	pop	{r4, r7, pc}
 8004dcc:	80002400 	.word	0x80002400
 8004dd0:	fe00e800 	.word	0xfe00e800

08004dd4 <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004dd4:	b5b0      	push	{r4, r5, r7, lr}
 8004dd6:	b088      	sub	sp, #32
 8004dd8:	af02      	add	r7, sp, #8
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	000c      	movs	r4, r1
 8004dde:	0010      	movs	r0, r2
 8004de0:	0019      	movs	r1, r3
 8004de2:	230a      	movs	r3, #10
 8004de4:	18fb      	adds	r3, r7, r3
 8004de6:	1c22      	adds	r2, r4, #0
 8004de8:	801a      	strh	r2, [r3, #0]
 8004dea:	2308      	movs	r3, #8
 8004dec:	18fb      	adds	r3, r7, r3
 8004dee:	1c02      	adds	r2, r0, #0
 8004df0:	801a      	strh	r2, [r3, #0]
 8004df2:	1dbb      	adds	r3, r7, #6
 8004df4:	1c0a      	adds	r2, r1, #0
 8004df6:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2241      	movs	r2, #65	@ 0x41
 8004dfc:	5c9b      	ldrb	r3, [r3, r2]
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	2b20      	cmp	r3, #32
 8004e02:	d000      	beq.n	8004e06 <HAL_I2C_Mem_Read_DMA+0x32>
 8004e04:	e0d6      	b.n	8004fb4 <HAL_I2C_Mem_Read_DMA+0x1e0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d004      	beq.n	8004e16 <HAL_I2C_Mem_Read_DMA+0x42>
 8004e0c:	232c      	movs	r3, #44	@ 0x2c
 8004e0e:	18fb      	adds	r3, r7, r3
 8004e10:	881b      	ldrh	r3, [r3, #0]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d105      	bne.n	8004e22 <HAL_I2C_Mem_Read_DMA+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2280      	movs	r2, #128	@ 0x80
 8004e1a:	0092      	lsls	r2, r2, #2
 8004e1c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e0c9      	b.n	8004fb6 <HAL_I2C_Mem_Read_DMA+0x1e2>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	699a      	ldr	r2, [r3, #24]
 8004e28:	2380      	movs	r3, #128	@ 0x80
 8004e2a:	021b      	lsls	r3, r3, #8
 8004e2c:	401a      	ands	r2, r3
 8004e2e:	2380      	movs	r3, #128	@ 0x80
 8004e30:	021b      	lsls	r3, r3, #8
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d101      	bne.n	8004e3a <HAL_I2C_Mem_Read_DMA+0x66>
    {
      return HAL_BUSY;
 8004e36:	2302      	movs	r3, #2
 8004e38:	e0bd      	b.n	8004fb6 <HAL_I2C_Mem_Read_DMA+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2240      	movs	r2, #64	@ 0x40
 8004e3e:	5c9b      	ldrb	r3, [r3, r2]
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d101      	bne.n	8004e48 <HAL_I2C_Mem_Read_DMA+0x74>
 8004e44:	2302      	movs	r3, #2
 8004e46:	e0b6      	b.n	8004fb6 <HAL_I2C_Mem_Read_DMA+0x1e2>
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2240      	movs	r2, #64	@ 0x40
 8004e4c:	2101      	movs	r1, #1
 8004e4e:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2241      	movs	r2, #65	@ 0x41
 8004e54:	2122      	movs	r1, #34	@ 0x22
 8004e56:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2242      	movs	r2, #66	@ 0x42
 8004e5c:	2140      	movs	r1, #64	@ 0x40
 8004e5e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2200      	movs	r2, #0
 8004e64:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e6a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	222c      	movs	r2, #44	@ 0x2c
 8004e70:	18ba      	adds	r2, r7, r2
 8004e72:	8812      	ldrh	r2, [r2, #0]
 8004e74:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	4a51      	ldr	r2, [pc, #324]	@ (8004fc0 <HAL_I2C_Mem_Read_DMA+0x1ec>)
 8004e7a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	4a51      	ldr	r2, [pc, #324]	@ (8004fc4 <HAL_I2C_Mem_Read_DMA+0x1f0>)
 8004e80:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 8004e82:	230a      	movs	r3, #10
 8004e84:	18fb      	adds	r3, r7, r3
 8004e86:	881a      	ldrh	r2, [r3, #0]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	64da      	str	r2, [r3, #76]	@ 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	2bff      	cmp	r3, #255	@ 0xff
 8004e94:	d903      	bls.n	8004e9e <HAL_I2C_Mem_Read_DMA+0xca>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	22ff      	movs	r2, #255	@ 0xff
 8004e9a:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004e9c:	e004      	b.n	8004ea8 <HAL_I2C_Mem_Read_DMA+0xd4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ea2:	b29a      	uxth	r2, r3
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ea8:	1dbb      	adds	r3, r7, #6
 8004eaa:	881b      	ldrh	r3, [r3, #0]
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d10b      	bne.n	8004ec8 <HAL_I2C_Mem_Read_DMA+0xf4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004eb0:	2308      	movs	r3, #8
 8004eb2:	18fb      	adds	r3, r7, r3
 8004eb4:	881b      	ldrh	r3, [r3, #0]
 8004eb6:	b2da      	uxtb	r2, r3
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	4252      	negs	r2, r2
 8004ec4:	651a      	str	r2, [r3, #80]	@ 0x50
 8004ec6:	e00e      	b.n	8004ee6 <HAL_I2C_Mem_Read_DMA+0x112>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004ec8:	2108      	movs	r1, #8
 8004eca:	187b      	adds	r3, r7, r1
 8004ecc:	881b      	ldrh	r3, [r3, #0]
 8004ece:	0a1b      	lsrs	r3, r3, #8
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	b2da      	uxtb	r2, r3
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8004eda:	187b      	adds	r3, r7, r1
 8004edc:	881b      	ldrh	r3, [r3, #0]
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	001a      	movs	r2, r3
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if (hi2c->hdmarx != NULL)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d023      	beq.n	8004f36 <HAL_I2C_Mem_Read_DMA+0x162>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ef2:	4a35      	ldr	r2, [pc, #212]	@ (8004fc8 <HAL_I2C_Mem_Read_DMA+0x1f4>)
 8004ef4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004efa:	4a34      	ldr	r2, [pc, #208]	@ (8004fcc <HAL_I2C_Mem_Read_DMA+0x1f8>)
 8004efc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f02:	2200      	movs	r2, #0
 8004f04:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->hdmarx->XferAbortCallback = NULL;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	3324      	adds	r3, #36	@ 0x24
 8004f18:	0019      	movs	r1, r3
 8004f1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
                                       hi2c->XferSize);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8004f20:	2517      	movs	r5, #23
 8004f22:	197c      	adds	r4, r7, r5
 8004f24:	f7fe ff2a 	bl	8003d7c <HAL_DMA_Start_IT>
 8004f28:	0003      	movs	r3, r0
 8004f2a:	7023      	strb	r3, [r4, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8004f2c:	197b      	adds	r3, r7, r5
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d12b      	bne.n	8004f8c <HAL_I2C_Mem_Read_DMA+0x1b8>
 8004f34:	e013      	b.n	8004f5e <HAL_I2C_Mem_Read_DMA+0x18a>
      hi2c->State     = HAL_I2C_STATE_READY;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2241      	movs	r2, #65	@ 0x41
 8004f3a:	2120      	movs	r1, #32
 8004f3c:	5499      	strb	r1, [r3, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2242      	movs	r2, #66	@ 0x42
 8004f42:	2100      	movs	r1, #0
 8004f44:	5499      	strb	r1, [r3, r2]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f4a:	2280      	movs	r2, #128	@ 0x80
 8004f4c:	431a      	orrs	r2, r3
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2240      	movs	r2, #64	@ 0x40
 8004f56:	2100      	movs	r1, #0
 8004f58:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e02b      	b.n	8004fb6 <HAL_I2C_Mem_Read_DMA+0x1e2>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004f5e:	1dbb      	adds	r3, r7, #6
 8004f60:	881b      	ldrh	r3, [r3, #0]
 8004f62:	b2da      	uxtb	r2, r3
 8004f64:	230a      	movs	r3, #10
 8004f66:	18fb      	adds	r3, r7, r3
 8004f68:	8819      	ldrh	r1, [r3, #0]
 8004f6a:	68f8      	ldr	r0, [r7, #12]
 8004f6c:	4b18      	ldr	r3, [pc, #96]	@ (8004fd0 <HAL_I2C_Mem_Read_DMA+0x1fc>)
 8004f6e:	9300      	str	r3, [sp, #0]
 8004f70:	2300      	movs	r3, #0
 8004f72:	f001 fd89 	bl	8006a88 <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2240      	movs	r2, #64	@ 0x40
 8004f7a:	2100      	movs	r1, #0
 8004f7c:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2101      	movs	r1, #1
 8004f82:	0018      	movs	r0, r3
 8004f84:	f001 fdba 	bl	8006afc <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	e014      	b.n	8004fb6 <HAL_I2C_Mem_Read_DMA+0x1e2>
      hi2c->State     = HAL_I2C_STATE_READY;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2241      	movs	r2, #65	@ 0x41
 8004f90:	2120      	movs	r1, #32
 8004f92:	5499      	strb	r1, [r3, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2242      	movs	r2, #66	@ 0x42
 8004f98:	2100      	movs	r1, #0
 8004f9a:	5499      	strb	r1, [r3, r2]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fa0:	2210      	movs	r2, #16
 8004fa2:	431a      	orrs	r2, r3
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2240      	movs	r2, #64	@ 0x40
 8004fac:	2100      	movs	r1, #0
 8004fae:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e000      	b.n	8004fb6 <HAL_I2C_Mem_Read_DMA+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004fb4:	2302      	movs	r3, #2
  }
}
 8004fb6:	0018      	movs	r0, r3
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	b006      	add	sp, #24
 8004fbc:	bdb0      	pop	{r4, r5, r7, pc}
 8004fbe:	46c0      	nop			@ (mov r8, r8)
 8004fc0:	ffff0000 	.word	0xffff0000
 8004fc4:	080055d5 	.word	0x080055d5
 8004fc8:	08006489 	.word	0x08006489
 8004fcc:	08006529 	.word	0x08006529
 8004fd0:	80002000 	.word	0x80002000

08004fd4 <HAL_I2C_Master_Abort_IT>:
  * @param  DevAddress Target device address: The device 7 bits address value
  *         in datasheet must be shifted to the left before calling the interface
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Abort_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b086      	sub	sp, #24
 8004fd8:	af02      	add	r7, sp, #8
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	000a      	movs	r2, r1
 8004fde:	1cbb      	adds	r3, r7, #2
 8004fe0:	801a      	strh	r2, [r3, #0]
  HAL_I2C_ModeTypeDef tmp_mode = hi2c->Mode;
 8004fe2:	200f      	movs	r0, #15
 8004fe4:	183b      	adds	r3, r7, r0
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	2142      	movs	r1, #66	@ 0x42
 8004fea:	5c52      	ldrb	r2, [r2, r1]
 8004fec:	701a      	strb	r2, [r3, #0]

  if ((tmp_mode == HAL_I2C_MODE_MASTER) || (tmp_mode == HAL_I2C_MODE_MEM))
 8004fee:	0002      	movs	r2, r0
 8004ff0:	18bb      	adds	r3, r7, r2
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	2b10      	cmp	r3, #16
 8004ff6:	d003      	beq.n	8005000 <HAL_I2C_Master_Abort_IT+0x2c>
 8004ff8:	18bb      	adds	r3, r7, r2
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	2b40      	cmp	r3, #64	@ 0x40
 8004ffe:	d141      	bne.n	8005084 <HAL_I2C_Master_Abort_IT+0xb0>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2240      	movs	r2, #64	@ 0x40
 8005004:	5c9b      	ldrb	r3, [r3, r2]
 8005006:	2b01      	cmp	r3, #1
 8005008:	d101      	bne.n	800500e <HAL_I2C_Master_Abort_IT+0x3a>
 800500a:	2302      	movs	r3, #2
 800500c:	e03b      	b.n	8005086 <HAL_I2C_Master_Abort_IT+0xb2>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2240      	movs	r2, #64	@ 0x40
 8005012:	2101      	movs	r1, #1
 8005014:	5499      	strb	r1, [r3, r2]

    /* Disable Interrupts and Store Previous state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2241      	movs	r2, #65	@ 0x41
 800501a:	5c9b      	ldrb	r3, [r3, r2]
 800501c:	b2db      	uxtb	r3, r3
 800501e:	2b21      	cmp	r3, #33	@ 0x21
 8005020:	d108      	bne.n	8005034 <HAL_I2C_Master_Abort_IT+0x60>
    {
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2101      	movs	r1, #1
 8005026:	0018      	movs	r0, r3
 8005028:	f001 fdf2 	bl	8006c10 <I2C_Disable_IRQ>
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2211      	movs	r2, #17
 8005030:	631a      	str	r2, [r3, #48]	@ 0x30
 8005032:	e00d      	b.n	8005050 <HAL_I2C_Master_Abort_IT+0x7c>
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2241      	movs	r2, #65	@ 0x41
 8005038:	5c9b      	ldrb	r3, [r3, r2]
 800503a:	b2db      	uxtb	r3, r3
 800503c:	2b22      	cmp	r3, #34	@ 0x22
 800503e:	d107      	bne.n	8005050 <HAL_I2C_Master_Abort_IT+0x7c>
    {
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2102      	movs	r1, #2
 8005044:	0018      	movs	r0, r3
 8005046:	f001 fde3 	bl	8006c10 <I2C_Disable_IRQ>
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2212      	movs	r2, #18
 800504e:	631a      	str	r2, [r3, #48]	@ 0x30
    {
      /* Do nothing */
    }

    /* Set State at HAL_I2C_STATE_ABORT */
    hi2c->State = HAL_I2C_STATE_ABORT;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2241      	movs	r2, #65	@ 0x41
 8005054:	2160      	movs	r1, #96	@ 0x60
 8005056:	5499      	strb	r1, [r3, r2]

    /* Set NBYTES to 1 to generate a dummy read on I2C peripheral */
    /* Set AUTOEND mode, this will generate a NACK then STOP condition to abort the current transfer */
    I2C_TransferConfig(hi2c, DevAddress, 1, I2C_AUTOEND_MODE, I2C_GENERATE_STOP);
 8005058:	2380      	movs	r3, #128	@ 0x80
 800505a:	049a      	lsls	r2, r3, #18
 800505c:	1cbb      	adds	r3, r7, #2
 800505e:	8819      	ldrh	r1, [r3, #0]
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	4b0b      	ldr	r3, [pc, #44]	@ (8005090 <HAL_I2C_Master_Abort_IT+0xbc>)
 8005064:	9300      	str	r3, [sp, #0]
 8005066:	0013      	movs	r3, r2
 8005068:	2201      	movs	r2, #1
 800506a:	f001 fd0d 	bl	8006a88 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2240      	movs	r2, #64	@ 0x40
 8005072:	2100      	movs	r1, #0
 8005074:	5499      	strb	r1, [r3, r2]

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2120      	movs	r1, #32
 800507a:	0018      	movs	r0, r3
 800507c:	f001 fd3e 	bl	8006afc <I2C_Enable_IRQ>

    return HAL_OK;
 8005080:	2300      	movs	r3, #0
 8005082:	e000      	b.n	8005086 <HAL_I2C_Master_Abort_IT+0xb2>
  }
  else
  {
    /* Wrong usage of abort function */
    /* This function should be used only in case of abort monitored by master device */
    return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
  }
}
 8005086:	0018      	movs	r0, r3
 8005088:	46bd      	mov	sp, r7
 800508a:	b004      	add	sp, #16
 800508c:	bd80      	pop	{r7, pc}
 800508e:	46c0      	nop			@ (mov r8, r8)
 8005090:	80004000 	.word	0x80004000

08005094 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d005      	beq.n	80050c0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050b8:	68ba      	ldr	r2, [r7, #8]
 80050ba:	68f9      	ldr	r1, [r7, #12]
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	4798      	blx	r3
  }
}
 80050c0:	46c0      	nop			@ (mov r8, r8)
 80050c2:	46bd      	mov	sp, r7
 80050c4:	b004      	add	sp, #16
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b086      	sub	sp, #24
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80050e0:	697a      	ldr	r2, [r7, #20]
 80050e2:	2380      	movs	r3, #128	@ 0x80
 80050e4:	005b      	lsls	r3, r3, #1
 80050e6:	4013      	ands	r3, r2
 80050e8:	d00e      	beq.n	8005108 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	2280      	movs	r2, #128	@ 0x80
 80050ee:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80050f0:	d00a      	beq.n	8005108 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050f6:	2201      	movs	r2, #1
 80050f8:	431a      	orrs	r2, r3
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2280      	movs	r2, #128	@ 0x80
 8005104:	0052      	lsls	r2, r2, #1
 8005106:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005108:	697a      	ldr	r2, [r7, #20]
 800510a:	2380      	movs	r3, #128	@ 0x80
 800510c:	00db      	lsls	r3, r3, #3
 800510e:	4013      	ands	r3, r2
 8005110:	d00e      	beq.n	8005130 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	2280      	movs	r2, #128	@ 0x80
 8005116:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005118:	d00a      	beq.n	8005130 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800511e:	2208      	movs	r2, #8
 8005120:	431a      	orrs	r2, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	2280      	movs	r2, #128	@ 0x80
 800512c:	00d2      	lsls	r2, r2, #3
 800512e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005130:	697a      	ldr	r2, [r7, #20]
 8005132:	2380      	movs	r3, #128	@ 0x80
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	4013      	ands	r3, r2
 8005138:	d00e      	beq.n	8005158 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	2280      	movs	r2, #128	@ 0x80
 800513e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005140:	d00a      	beq.n	8005158 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005146:	2202      	movs	r2, #2
 8005148:	431a      	orrs	r2, r3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	2280      	movs	r2, #128	@ 0x80
 8005154:	0092      	lsls	r2, r2, #2
 8005156:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800515c:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	220b      	movs	r2, #11
 8005162:	4013      	ands	r3, r2
 8005164:	d005      	beq.n	8005172 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	0011      	movs	r1, r2
 800516c:	0018      	movs	r0, r3
 800516e:	f001 f83d 	bl	80061ec <I2C_ITError>
  }
}
 8005172:	46c0      	nop			@ (mov r8, r8)
 8005174:	46bd      	mov	sp, r7
 8005176:	b006      	add	sp, #24
 8005178:	bd80      	pop	{r7, pc}

0800517a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800517a:	b580      	push	{r7, lr}
 800517c:	b082      	sub	sp, #8
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005182:	46c0      	nop			@ (mov r8, r8)
 8005184:	46bd      	mov	sp, r7
 8005186:	b002      	add	sp, #8
 8005188:	bd80      	pop	{r7, pc}

0800518a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800518a:	b580      	push	{r7, lr}
 800518c:	b082      	sub	sp, #8
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005192:	46c0      	nop			@ (mov r8, r8)
 8005194:	46bd      	mov	sp, r7
 8005196:	b002      	add	sp, #8
 8005198:	bd80      	pop	{r7, pc}

0800519a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800519a:	b580      	push	{r7, lr}
 800519c:	b082      	sub	sp, #8
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
 80051a2:	0008      	movs	r0, r1
 80051a4:	0011      	movs	r1, r2
 80051a6:	1cfb      	adds	r3, r7, #3
 80051a8:	1c02      	adds	r2, r0, #0
 80051aa:	701a      	strb	r2, [r3, #0]
 80051ac:	003b      	movs	r3, r7
 80051ae:	1c0a      	adds	r2, r1, #0
 80051b0:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80051b2:	46c0      	nop			@ (mov r8, r8)
 80051b4:	46bd      	mov	sp, r7
 80051b6:	b002      	add	sp, #8
 80051b8:	bd80      	pop	{r7, pc}

080051ba <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80051ba:	b580      	push	{r7, lr}
 80051bc:	b082      	sub	sp, #8
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80051c2:	46c0      	nop			@ (mov r8, r8)
 80051c4:	46bd      	mov	sp, r7
 80051c6:	b002      	add	sp, #8
 80051c8:	bd80      	pop	{r7, pc}

080051ca <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80051ca:	b580      	push	{r7, lr}
 80051cc:	b082      	sub	sp, #8
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80051d2:	46c0      	nop			@ (mov r8, r8)
 80051d4:	46bd      	mov	sp, r7
 80051d6:	b002      	add	sp, #8
 80051d8:	bd80      	pop	{r7, pc}
	...

080051dc <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b086      	sub	sp, #24
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ec:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2240      	movs	r2, #64	@ 0x40
 80051f6:	5c9b      	ldrb	r3, [r3, r2]
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d101      	bne.n	8005200 <I2C_Slave_ISR_IT+0x24>
 80051fc:	2302      	movs	r3, #2
 80051fe:	e0e7      	b.n	80053d0 <I2C_Slave_ISR_IT+0x1f4>
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2240      	movs	r2, #64	@ 0x40
 8005204:	2101      	movs	r1, #1
 8005206:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	2220      	movs	r2, #32
 800520c:	4013      	ands	r3, r2
 800520e:	d00a      	beq.n	8005226 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2220      	movs	r2, #32
 8005214:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005216:	d006      	beq.n	8005226 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005218:	693a      	ldr	r2, [r7, #16]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	0011      	movs	r1, r2
 800521e:	0018      	movs	r0, r3
 8005220:	f000 fe04 	bl	8005e2c <I2C_ITSlaveCplt>
 8005224:	e0cf      	b.n	80053c6 <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	2210      	movs	r2, #16
 800522a:	4013      	ands	r3, r2
 800522c:	d052      	beq.n	80052d4 <I2C_Slave_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2210      	movs	r2, #16
 8005232:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005234:	d04e      	beq.n	80052d4 <I2C_Slave_ISR_IT+0xf8>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800523a:	b29b      	uxth	r3, r3
 800523c:	2b00      	cmp	r3, #0
 800523e:	d12d      	bne.n	800529c <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2241      	movs	r2, #65	@ 0x41
 8005244:	5c9b      	ldrb	r3, [r3, r2]
 8005246:	b2db      	uxtb	r3, r3
 8005248:	2b28      	cmp	r3, #40	@ 0x28
 800524a:	d10b      	bne.n	8005264 <I2C_Slave_ISR_IT+0x88>
 800524c:	697a      	ldr	r2, [r7, #20]
 800524e:	2380      	movs	r3, #128	@ 0x80
 8005250:	049b      	lsls	r3, r3, #18
 8005252:	429a      	cmp	r2, r3
 8005254:	d106      	bne.n	8005264 <I2C_Slave_ISR_IT+0x88>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005256:	693a      	ldr	r2, [r7, #16]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	0011      	movs	r1, r2
 800525c:	0018      	movs	r0, r3
 800525e:	f000 ff6d 	bl	800613c <I2C_ITListenCplt>
 8005262:	e036      	b.n	80052d2 <I2C_Slave_ISR_IT+0xf6>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2241      	movs	r2, #65	@ 0x41
 8005268:	5c9b      	ldrb	r3, [r3, r2]
 800526a:	b2db      	uxtb	r3, r3
 800526c:	2b29      	cmp	r3, #41	@ 0x29
 800526e:	d110      	bne.n	8005292 <I2C_Slave_ISR_IT+0xb6>
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	4a59      	ldr	r2, [pc, #356]	@ (80053d8 <I2C_Slave_ISR_IT+0x1fc>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d00c      	beq.n	8005292 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2210      	movs	r2, #16
 800527e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	0018      	movs	r0, r3
 8005284:	f001 f8dd 	bl	8006442 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	0018      	movs	r0, r3
 800528c:	f000 fc9c 	bl	8005bc8 <I2C_ITSlaveSeqCplt>
 8005290:	e01f      	b.n	80052d2 <I2C_Slave_ISR_IT+0xf6>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	2210      	movs	r2, #16
 8005298:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800529a:	e091      	b.n	80053c0 <I2C_Slave_ISR_IT+0x1e4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2210      	movs	r2, #16
 80052a2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052a8:	2204      	movs	r2, #4
 80052aa:	431a      	orrs	r2, r3
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d005      	beq.n	80052c2 <I2C_Slave_ISR_IT+0xe6>
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	2380      	movs	r3, #128	@ 0x80
 80052ba:	045b      	lsls	r3, r3, #17
 80052bc:	429a      	cmp	r2, r3
 80052be:	d000      	beq.n	80052c2 <I2C_Slave_ISR_IT+0xe6>
 80052c0:	e07e      	b.n	80053c0 <I2C_Slave_ISR_IT+0x1e4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	0011      	movs	r1, r2
 80052ca:	0018      	movs	r0, r3
 80052cc:	f000 ff8e 	bl	80061ec <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80052d0:	e076      	b.n	80053c0 <I2C_Slave_ISR_IT+0x1e4>
 80052d2:	e075      	b.n	80053c0 <I2C_Slave_ISR_IT+0x1e4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	2204      	movs	r2, #4
 80052d8:	4013      	ands	r3, r2
 80052da:	d02f      	beq.n	800533c <I2C_Slave_ISR_IT+0x160>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2204      	movs	r2, #4
 80052e0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80052e2:	d02b      	beq.n	800533c <I2C_Slave_ISR_IT+0x160>
  {
    if (hi2c->XferCount > 0U)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d018      	beq.n	8005320 <I2C_Slave_ISR_IT+0x144>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052f8:	b2d2      	uxtb	r2, r2
 80052fa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005300:	1c5a      	adds	r2, r3, #1
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800530a:	3b01      	subs	r3, #1
 800530c:	b29a      	uxth	r2, r3
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005316:	b29b      	uxth	r3, r3
 8005318:	3b01      	subs	r3, #1
 800531a:	b29a      	uxth	r2, r3
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005324:	b29b      	uxth	r3, r3
 8005326:	2b00      	cmp	r3, #0
 8005328:	d14c      	bne.n	80053c4 <I2C_Slave_ISR_IT+0x1e8>
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	4a2a      	ldr	r2, [pc, #168]	@ (80053d8 <I2C_Slave_ISR_IT+0x1fc>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d048      	beq.n	80053c4 <I2C_Slave_ISR_IT+0x1e8>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	0018      	movs	r0, r3
 8005336:	f000 fc47 	bl	8005bc8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800533a:	e043      	b.n	80053c4 <I2C_Slave_ISR_IT+0x1e8>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	2208      	movs	r2, #8
 8005340:	4013      	ands	r3, r2
 8005342:	d00a      	beq.n	800535a <I2C_Slave_ISR_IT+0x17e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2208      	movs	r2, #8
 8005348:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800534a:	d006      	beq.n	800535a <I2C_Slave_ISR_IT+0x17e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800534c:	693a      	ldr	r2, [r7, #16]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	0011      	movs	r1, r2
 8005352:	0018      	movs	r0, r3
 8005354:	f000 fb52 	bl	80059fc <I2C_ITAddrCplt>
 8005358:	e035      	b.n	80053c6 <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	2202      	movs	r2, #2
 800535e:	4013      	ands	r3, r2
 8005360:	d031      	beq.n	80053c6 <I2C_Slave_ISR_IT+0x1ea>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2202      	movs	r2, #2
 8005366:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005368:	d02d      	beq.n	80053c6 <I2C_Slave_ISR_IT+0x1ea>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800536e:	b29b      	uxth	r3, r3
 8005370:	2b00      	cmp	r3, #0
 8005372:	d018      	beq.n	80053a6 <I2C_Slave_ISR_IT+0x1ca>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005378:	781a      	ldrb	r2, [r3, #0]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005384:	1c5a      	adds	r2, r3, #1
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800538e:	b29b      	uxth	r3, r3
 8005390:	3b01      	subs	r3, #1
 8005392:	b29a      	uxth	r2, r3
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800539c:	3b01      	subs	r3, #1
 800539e:	b29a      	uxth	r2, r3
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	851a      	strh	r2, [r3, #40]	@ 0x28
 80053a4:	e00f      	b.n	80053c6 <I2C_Slave_ISR_IT+0x1ea>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80053a6:	697a      	ldr	r2, [r7, #20]
 80053a8:	2380      	movs	r3, #128	@ 0x80
 80053aa:	045b      	lsls	r3, r3, #17
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d002      	beq.n	80053b6 <I2C_Slave_ISR_IT+0x1da>
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d107      	bne.n	80053c6 <I2C_Slave_ISR_IT+0x1ea>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	0018      	movs	r0, r3
 80053ba:	f000 fc05 	bl	8005bc8 <I2C_ITSlaveSeqCplt>
 80053be:	e002      	b.n	80053c6 <I2C_Slave_ISR_IT+0x1ea>
    if (hi2c->XferCount == 0U)
 80053c0:	46c0      	nop			@ (mov r8, r8)
 80053c2:	e000      	b.n	80053c6 <I2C_Slave_ISR_IT+0x1ea>
    if ((hi2c->XferCount == 0U) && \
 80053c4:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2240      	movs	r2, #64	@ 0x40
 80053ca:	2100      	movs	r1, #0
 80053cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	0018      	movs	r0, r3
 80053d2:	46bd      	mov	sp, r7
 80053d4:	b006      	add	sp, #24
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	ffff0000 	.word	0xffff0000

080053dc <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80053dc:	b590      	push	{r4, r7, lr}
 80053de:	b089      	sub	sp, #36	@ 0x24
 80053e0:	af02      	add	r7, sp, #8
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2240      	movs	r2, #64	@ 0x40
 80053ec:	5c9b      	ldrb	r3, [r3, r2]
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d101      	bne.n	80053f6 <I2C_Master_ISR_DMA+0x1a>
 80053f2:	2302      	movs	r3, #2
 80053f4:	e0e7      	b.n	80055c6 <I2C_Master_ISR_DMA+0x1ea>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2240      	movs	r2, #64	@ 0x40
 80053fa:	2101      	movs	r1, #1
 80053fc:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	2210      	movs	r2, #16
 8005402:	4013      	ands	r3, r2
 8005404:	d017      	beq.n	8005436 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2210      	movs	r2, #16
 800540a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800540c:	d013      	beq.n	8005436 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2210      	movs	r2, #16
 8005414:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800541a:	2204      	movs	r2, #4
 800541c:	431a      	orrs	r2, r3
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2120      	movs	r1, #32
 8005426:	0018      	movs	r0, r3
 8005428:	f001 fb68 	bl	8006afc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	0018      	movs	r0, r3
 8005430:	f001 f807 	bl	8006442 <I2C_Flush_TXDR>
 8005434:	e0c2      	b.n	80055bc <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	2280      	movs	r2, #128	@ 0x80
 800543a:	4013      	ands	r3, r2
 800543c:	d100      	bne.n	8005440 <I2C_Master_ISR_DMA+0x64>
 800543e:	e07c      	b.n	800553a <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2240      	movs	r2, #64	@ 0x40
 8005444:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005446:	d100      	bne.n	800544a <I2C_Master_ISR_DMA+0x6e>
 8005448:	e077      	b.n	800553a <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2140      	movs	r1, #64	@ 0x40
 8005456:	438a      	bics	r2, r1
 8005458:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800545e:	b29b      	uxth	r3, r3
 8005460:	2b00      	cmp	r3, #0
 8005462:	d055      	beq.n	8005510 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	b29a      	uxth	r2, r3
 800546c:	2312      	movs	r3, #18
 800546e:	18fb      	adds	r3, r7, r3
 8005470:	0592      	lsls	r2, r2, #22
 8005472:	0d92      	lsrs	r2, r2, #22
 8005474:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800547a:	b29b      	uxth	r3, r3
 800547c:	2bff      	cmp	r3, #255	@ 0xff
 800547e:	d906      	bls.n	800548e <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	22ff      	movs	r2, #255	@ 0xff
 8005484:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8005486:	2380      	movs	r3, #128	@ 0x80
 8005488:	045b      	lsls	r3, r3, #17
 800548a:	617b      	str	r3, [r7, #20]
 800548c:	e010      	b.n	80054b0 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005492:	b29a      	uxth	r2, r3
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800549c:	4a4c      	ldr	r2, [pc, #304]	@ (80055d0 <I2C_Master_ISR_DMA+0x1f4>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d003      	beq.n	80054aa <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054a6:	617b      	str	r3, [r7, #20]
 80054a8:	e002      	b.n	80054b0 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80054aa:	2380      	movs	r3, #128	@ 0x80
 80054ac:	049b      	lsls	r3, r3, #18
 80054ae:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054b4:	b2da      	uxtb	r2, r3
 80054b6:	697c      	ldr	r4, [r7, #20]
 80054b8:	2312      	movs	r3, #18
 80054ba:	18fb      	adds	r3, r7, r3
 80054bc:	8819      	ldrh	r1, [r3, #0]
 80054be:	68f8      	ldr	r0, [r7, #12]
 80054c0:	2300      	movs	r3, #0
 80054c2:	9300      	str	r3, [sp, #0]
 80054c4:	0023      	movs	r3, r4
 80054c6:	f001 fadf 	bl	8006a88 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054ce:	b29a      	uxth	r2, r3
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	b29a      	uxth	r2, r3
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2241      	movs	r2, #65	@ 0x41
 80054e0:	5c9b      	ldrb	r3, [r3, r2]
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	2b22      	cmp	r3, #34	@ 0x22
 80054e6:	d109      	bne.n	80054fc <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2180      	movs	r1, #128	@ 0x80
 80054f4:	0209      	lsls	r1, r1, #8
 80054f6:	430a      	orrs	r2, r1
 80054f8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80054fa:	e05f      	b.n	80055bc <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2180      	movs	r1, #128	@ 0x80
 8005508:	01c9      	lsls	r1, r1, #7
 800550a:	430a      	orrs	r2, r1
 800550c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800550e:	e055      	b.n	80055bc <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	685a      	ldr	r2, [r3, #4]
 8005516:	2380      	movs	r3, #128	@ 0x80
 8005518:	049b      	lsls	r3, r3, #18
 800551a:	401a      	ands	r2, r3
 800551c:	2380      	movs	r3, #128	@ 0x80
 800551e:	049b      	lsls	r3, r3, #18
 8005520:	429a      	cmp	r2, r3
 8005522:	d004      	beq.n	800552e <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	0018      	movs	r0, r3
 8005528:	f000 fb0c 	bl	8005b44 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800552c:	e046      	b.n	80055bc <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2140      	movs	r1, #64	@ 0x40
 8005532:	0018      	movs	r0, r3
 8005534:	f000 fe5a 	bl	80061ec <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8005538:	e040      	b.n	80055bc <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	2240      	movs	r2, #64	@ 0x40
 800553e:	4013      	ands	r3, r2
 8005540:	d02c      	beq.n	800559c <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2240      	movs	r2, #64	@ 0x40
 8005546:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005548:	d028      	beq.n	800559c <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800554e:	b29b      	uxth	r3, r3
 8005550:	2b00      	cmp	r3, #0
 8005552:	d11d      	bne.n	8005590 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	685a      	ldr	r2, [r3, #4]
 800555a:	2380      	movs	r3, #128	@ 0x80
 800555c:	049b      	lsls	r3, r3, #18
 800555e:	401a      	ands	r2, r3
 8005560:	2380      	movs	r3, #128	@ 0x80
 8005562:	049b      	lsls	r3, r3, #18
 8005564:	429a      	cmp	r2, r3
 8005566:	d028      	beq.n	80055ba <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800556c:	4a18      	ldr	r2, [pc, #96]	@ (80055d0 <I2C_Master_ISR_DMA+0x1f4>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d109      	bne.n	8005586 <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	685a      	ldr	r2, [r3, #4]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2180      	movs	r1, #128	@ 0x80
 800557e:	01c9      	lsls	r1, r1, #7
 8005580:	430a      	orrs	r2, r1
 8005582:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8005584:	e019      	b.n	80055ba <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	0018      	movs	r0, r3
 800558a:	f000 fadb 	bl	8005b44 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800558e:	e014      	b.n	80055ba <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2140      	movs	r1, #64	@ 0x40
 8005594:	0018      	movs	r0, r3
 8005596:	f000 fe29 	bl	80061ec <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800559a:	e00e      	b.n	80055ba <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	2220      	movs	r2, #32
 80055a0:	4013      	ands	r3, r2
 80055a2:	d00b      	beq.n	80055bc <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2220      	movs	r2, #32
 80055a8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80055aa:	d007      	beq.n	80055bc <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80055ac:	68ba      	ldr	r2, [r7, #8]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	0011      	movs	r1, r2
 80055b2:	0018      	movs	r0, r3
 80055b4:	f000 fb6c 	bl	8005c90 <I2C_ITMasterCplt>
 80055b8:	e000      	b.n	80055bc <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 80055ba:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2240      	movs	r2, #64	@ 0x40
 80055c0:	2100      	movs	r1, #0
 80055c2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	0018      	movs	r0, r3
 80055c8:	46bd      	mov	sp, r7
 80055ca:	b007      	add	sp, #28
 80055cc:	bd90      	pop	{r4, r7, pc}
 80055ce:	46c0      	nop			@ (mov r8, r8)
 80055d0:	ffff0000 	.word	0xffff0000

080055d4 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80055d4:	b590      	push	{r4, r7, lr}
 80055d6:	b089      	sub	sp, #36	@ 0x24
 80055d8:	af02      	add	r7, sp, #8
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	60b9      	str	r1, [r7, #8]
 80055de:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80055e0:	4b90      	ldr	r3, [pc, #576]	@ (8005824 <I2C_Mem_ISR_DMA+0x250>)
 80055e2:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2240      	movs	r2, #64	@ 0x40
 80055e8:	5c9b      	ldrb	r3, [r3, r2]
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d101      	bne.n	80055f2 <I2C_Mem_ISR_DMA+0x1e>
 80055ee:	2302      	movs	r3, #2
 80055f0:	e113      	b.n	800581a <I2C_Mem_ISR_DMA+0x246>
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2240      	movs	r2, #64	@ 0x40
 80055f6:	2101      	movs	r1, #1
 80055f8:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	2210      	movs	r2, #16
 80055fe:	4013      	ands	r3, r2
 8005600:	d017      	beq.n	8005632 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2210      	movs	r2, #16
 8005606:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005608:	d013      	beq.n	8005632 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2210      	movs	r2, #16
 8005610:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005616:	2204      	movs	r2, #4
 8005618:	431a      	orrs	r2, r3
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2120      	movs	r1, #32
 8005622:	0018      	movs	r0, r3
 8005624:	f001 fa6a 	bl	8006afc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	0018      	movs	r0, r3
 800562c:	f000 ff09 	bl	8006442 <I2C_Flush_TXDR>
 8005630:	e0ee      	b.n	8005810 <I2C_Mem_ISR_DMA+0x23c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	2202      	movs	r2, #2
 8005636:	4013      	ands	r3, r2
 8005638:	d00d      	beq.n	8005656 <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2202      	movs	r2, #2
 800563e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005640:	d009      	beq.n	8005656 <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	68fa      	ldr	r2, [r7, #12]
 8005648:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800564a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2201      	movs	r2, #1
 8005650:	4252      	negs	r2, r2
 8005652:	651a      	str	r2, [r3, #80]	@ 0x50
 8005654:	e0dc      	b.n	8005810 <I2C_Mem_ISR_DMA+0x23c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	2280      	movs	r2, #128	@ 0x80
 800565a:	4013      	ands	r3, r2
 800565c:	d063      	beq.n	8005726 <I2C_Mem_ISR_DMA+0x152>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2240      	movs	r2, #64	@ 0x40
 8005662:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005664:	d05f      	beq.n	8005726 <I2C_Mem_ISR_DMA+0x152>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2101      	movs	r1, #1
 800566a:	0018      	movs	r0, r3
 800566c:	f001 fad0 	bl	8006c10 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2110      	movs	r1, #16
 8005674:	0018      	movs	r0, r3
 8005676:	f001 fa41 	bl	8006afc <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800567e:	b29b      	uxth	r3, r3
 8005680:	2b00      	cmp	r3, #0
 8005682:	d04a      	beq.n	800571a <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005688:	b29b      	uxth	r3, r3
 800568a:	2bff      	cmp	r3, #255	@ 0xff
 800568c:	d910      	bls.n	80056b0 <I2C_Mem_ISR_DMA+0xdc>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	22ff      	movs	r2, #255	@ 0xff
 8005692:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005698:	b299      	uxth	r1, r3
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800569e:	b2da      	uxtb	r2, r3
 80056a0:	2380      	movs	r3, #128	@ 0x80
 80056a2:	045b      	lsls	r3, r3, #17
 80056a4:	68f8      	ldr	r0, [r7, #12]
 80056a6:	2400      	movs	r4, #0
 80056a8:	9400      	str	r4, [sp, #0]
 80056aa:	f001 f9ed 	bl	8006a88 <I2C_TransferConfig>
 80056ae:	e011      	b.n	80056d4 <I2C_Mem_ISR_DMA+0x100>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056b4:	b29a      	uxth	r2, r3
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056be:	b299      	uxth	r1, r3
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056c4:	b2da      	uxtb	r2, r3
 80056c6:	2380      	movs	r3, #128	@ 0x80
 80056c8:	049b      	lsls	r3, r3, #18
 80056ca:	68f8      	ldr	r0, [r7, #12]
 80056cc:	2400      	movs	r4, #0
 80056ce:	9400      	str	r4, [sp, #0]
 80056d0:	f001 f9da 	bl	8006a88 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056d8:	b29a      	uxth	r2, r3
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	b29a      	uxth	r2, r3
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2241      	movs	r2, #65	@ 0x41
 80056ea:	5c9b      	ldrb	r3, [r3, r2]
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	2b22      	cmp	r3, #34	@ 0x22
 80056f0:	d109      	bne.n	8005706 <I2C_Mem_ISR_DMA+0x132>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2180      	movs	r1, #128	@ 0x80
 80056fe:	0209      	lsls	r1, r1, #8
 8005700:	430a      	orrs	r2, r1
 8005702:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005704:	e084      	b.n	8005810 <I2C_Mem_ISR_DMA+0x23c>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2180      	movs	r1, #128	@ 0x80
 8005712:	01c9      	lsls	r1, r1, #7
 8005714:	430a      	orrs	r2, r1
 8005716:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005718:	e07a      	b.n	8005810 <I2C_Mem_ISR_DMA+0x23c>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2140      	movs	r1, #64	@ 0x40
 800571e:	0018      	movs	r0, r3
 8005720:	f000 fd64 	bl	80061ec <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8005724:	e074      	b.n	8005810 <I2C_Mem_ISR_DMA+0x23c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	2240      	movs	r2, #64	@ 0x40
 800572a:	4013      	ands	r3, r2
 800572c:	d062      	beq.n	80057f4 <I2C_Mem_ISR_DMA+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2240      	movs	r2, #64	@ 0x40
 8005732:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005734:	d05e      	beq.n	80057f4 <I2C_Mem_ISR_DMA+0x220>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2101      	movs	r1, #1
 800573a:	0018      	movs	r0, r3
 800573c:	f001 fa68 	bl	8006c10 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2110      	movs	r1, #16
 8005744:	0018      	movs	r0, r3
 8005746:	f001 f9d9 	bl	8006afc <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2241      	movs	r2, #65	@ 0x41
 800574e:	5c9b      	ldrb	r3, [r3, r2]
 8005750:	b2db      	uxtb	r3, r3
 8005752:	2b22      	cmp	r3, #34	@ 0x22
 8005754:	d101      	bne.n	800575a <I2C_Mem_ISR_DMA+0x186>
    {
      direction = I2C_GENERATE_START_READ;
 8005756:	4b34      	ldr	r3, [pc, #208]	@ (8005828 <I2C_Mem_ISR_DMA+0x254>)
 8005758:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800575e:	b29b      	uxth	r3, r3
 8005760:	2bff      	cmp	r3, #255	@ 0xff
 8005762:	d911      	bls.n	8005788 <I2C_Mem_ISR_DMA+0x1b4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	22ff      	movs	r2, #255	@ 0xff
 8005768:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800576e:	b299      	uxth	r1, r3
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005774:	b2da      	uxtb	r2, r3
 8005776:	2380      	movs	r3, #128	@ 0x80
 8005778:	045c      	lsls	r4, r3, #17
 800577a:	68f8      	ldr	r0, [r7, #12]
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	9300      	str	r3, [sp, #0]
 8005780:	0023      	movs	r3, r4
 8005782:	f001 f981 	bl	8006a88 <I2C_TransferConfig>
 8005786:	e012      	b.n	80057ae <I2C_Mem_ISR_DMA+0x1da>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800578c:	b29a      	uxth	r2, r3
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005796:	b299      	uxth	r1, r3
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800579c:	b2da      	uxtb	r2, r3
 800579e:	2380      	movs	r3, #128	@ 0x80
 80057a0:	049c      	lsls	r4, r3, #18
 80057a2:	68f8      	ldr	r0, [r7, #12]
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	9300      	str	r3, [sp, #0]
 80057a8:	0023      	movs	r3, r4
 80057aa:	f001 f96d 	bl	8006a88 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057b2:	b29a      	uxth	r2, r3
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	b29a      	uxth	r2, r3
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2241      	movs	r2, #65	@ 0x41
 80057c4:	5c9b      	ldrb	r3, [r3, r2]
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	2b22      	cmp	r3, #34	@ 0x22
 80057ca:	d109      	bne.n	80057e0 <I2C_Mem_ISR_DMA+0x20c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	2180      	movs	r1, #128	@ 0x80
 80057d8:	0209      	lsls	r1, r1, #8
 80057da:	430a      	orrs	r2, r1
 80057dc:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80057de:	e017      	b.n	8005810 <I2C_Mem_ISR_DMA+0x23c>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	2180      	movs	r1, #128	@ 0x80
 80057ec:	01c9      	lsls	r1, r1, #7
 80057ee:	430a      	orrs	r2, r1
 80057f0:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80057f2:	e00d      	b.n	8005810 <I2C_Mem_ISR_DMA+0x23c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	2220      	movs	r2, #32
 80057f8:	4013      	ands	r3, r2
 80057fa:	d009      	beq.n	8005810 <I2C_Mem_ISR_DMA+0x23c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2220      	movs	r2, #32
 8005800:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005802:	d005      	beq.n	8005810 <I2C_Mem_ISR_DMA+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8005804:	68ba      	ldr	r2, [r7, #8]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	0011      	movs	r1, r2
 800580a:	0018      	movs	r0, r3
 800580c:	f000 fa40 	bl	8005c90 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2240      	movs	r2, #64	@ 0x40
 8005814:	2100      	movs	r1, #0
 8005816:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	0018      	movs	r0, r3
 800581c:	46bd      	mov	sp, r7
 800581e:	b007      	add	sp, #28
 8005820:	bd90      	pop	{r4, r7, pc}
 8005822:	46c0      	nop			@ (mov r8, r8)
 8005824:	80002000 	.word	0x80002000
 8005828:	80002400 	.word	0x80002400

0800582c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b088      	sub	sp, #32
 8005830:	af00      	add	r7, sp, #0
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	60b9      	str	r1, [r7, #8]
 8005836:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800583c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800583e:	2300      	movs	r3, #0
 8005840:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2240      	movs	r2, #64	@ 0x40
 8005846:	5c9b      	ldrb	r3, [r3, r2]
 8005848:	2b01      	cmp	r3, #1
 800584a:	d101      	bne.n	8005850 <I2C_Slave_ISR_DMA+0x24>
 800584c:	2302      	movs	r3, #2
 800584e:	e0ce      	b.n	80059ee <I2C_Slave_ISR_DMA+0x1c2>
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2240      	movs	r2, #64	@ 0x40
 8005854:	2101      	movs	r1, #1
 8005856:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	2220      	movs	r2, #32
 800585c:	4013      	ands	r3, r2
 800585e:	d00a      	beq.n	8005876 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2220      	movs	r2, #32
 8005864:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005866:	d006      	beq.n	8005876 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8005868:	68ba      	ldr	r2, [r7, #8]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	0011      	movs	r1, r2
 800586e:	0018      	movs	r0, r3
 8005870:	f000 fadc 	bl	8005e2c <I2C_ITSlaveCplt>
 8005874:	e0b6      	b.n	80059e4 <I2C_Slave_ISR_DMA+0x1b8>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	2210      	movs	r2, #16
 800587a:	4013      	ands	r3, r2
 800587c:	d100      	bne.n	8005880 <I2C_Slave_ISR_DMA+0x54>
 800587e:	e0a3      	b.n	80059c8 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2210      	movs	r2, #16
 8005884:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005886:	d100      	bne.n	800588a <I2C_Slave_ISR_DMA+0x5e>
 8005888:	e09e      	b.n	80059c8 <I2C_Slave_ISR_DMA+0x19c>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	2380      	movs	r3, #128	@ 0x80
 800588e:	01db      	lsls	r3, r3, #7
 8005890:	4013      	ands	r3, r2
 8005892:	d105      	bne.n	80058a0 <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	2380      	movs	r3, #128	@ 0x80
 8005898:	021b      	lsls	r3, r3, #8
 800589a:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800589c:	d100      	bne.n	80058a0 <I2C_Slave_ISR_DMA+0x74>
 800589e:	e08c      	b.n	80059ba <I2C_Slave_ISR_DMA+0x18e>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d00c      	beq.n	80058c2 <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	2380      	movs	r3, #128	@ 0x80
 80058ac:	021b      	lsls	r3, r3, #8
 80058ae:	4013      	ands	r3, r2
 80058b0:	d007      	beq.n	80058c2 <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d101      	bne.n	80058c2 <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 80058be:	2301      	movs	r3, #1
 80058c0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d00c      	beq.n	80058e4 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	2380      	movs	r3, #128	@ 0x80
 80058ce:	01db      	lsls	r3, r3, #7
 80058d0:	4013      	ands	r3, r2
 80058d2:	d007      	beq.n	80058e4 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d101      	bne.n	80058e4 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 80058e0:	2301      	movs	r3, #1
 80058e2:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d12d      	bne.n	8005946 <I2C_Slave_ISR_DMA+0x11a>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2241      	movs	r2, #65	@ 0x41
 80058ee:	5c9b      	ldrb	r3, [r3, r2]
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	2b28      	cmp	r3, #40	@ 0x28
 80058f4:	d10b      	bne.n	800590e <I2C_Slave_ISR_DMA+0xe2>
 80058f6:	69ba      	ldr	r2, [r7, #24]
 80058f8:	2380      	movs	r3, #128	@ 0x80
 80058fa:	049b      	lsls	r3, r3, #18
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d106      	bne.n	800590e <I2C_Slave_ISR_DMA+0xe2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8005900:	68ba      	ldr	r2, [r7, #8]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	0011      	movs	r1, r2
 8005906:	0018      	movs	r0, r3
 8005908:	f000 fc18 	bl	800613c <I2C_ITListenCplt>
 800590c:	e054      	b.n	80059b8 <I2C_Slave_ISR_DMA+0x18c>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2241      	movs	r2, #65	@ 0x41
 8005912:	5c9b      	ldrb	r3, [r3, r2]
 8005914:	b2db      	uxtb	r3, r3
 8005916:	2b29      	cmp	r3, #41	@ 0x29
 8005918:	d110      	bne.n	800593c <I2C_Slave_ISR_DMA+0x110>
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	4a36      	ldr	r2, [pc, #216]	@ (80059f8 <I2C_Slave_ISR_DMA+0x1cc>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d00c      	beq.n	800593c <I2C_Slave_ISR_DMA+0x110>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2210      	movs	r2, #16
 8005928:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	0018      	movs	r0, r3
 800592e:	f000 fd88 	bl	8006442 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	0018      	movs	r0, r3
 8005936:	f000 f947 	bl	8005bc8 <I2C_ITSlaveSeqCplt>
 800593a:	e03d      	b.n	80059b8 <I2C_Slave_ISR_DMA+0x18c>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2210      	movs	r2, #16
 8005942:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8005944:	e03e      	b.n	80059c4 <I2C_Slave_ISR_DMA+0x198>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2210      	movs	r2, #16
 800594c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005952:	2204      	movs	r2, #4
 8005954:	431a      	orrs	r2, r3
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800595a:	2317      	movs	r3, #23
 800595c:	18fb      	adds	r3, r7, r3
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	2141      	movs	r1, #65	@ 0x41
 8005962:	5c52      	ldrb	r2, [r2, r1]
 8005964:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d004      	beq.n	8005976 <I2C_Slave_ISR_DMA+0x14a>
 800596c:	69ba      	ldr	r2, [r7, #24]
 800596e:	2380      	movs	r3, #128	@ 0x80
 8005970:	045b      	lsls	r3, r3, #17
 8005972:	429a      	cmp	r2, r3
 8005974:	d126      	bne.n	80059c4 <I2C_Slave_ISR_DMA+0x198>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005976:	2217      	movs	r2, #23
 8005978:	18bb      	adds	r3, r7, r2
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	2b21      	cmp	r3, #33	@ 0x21
 800597e:	d003      	beq.n	8005988 <I2C_Slave_ISR_DMA+0x15c>
 8005980:	18bb      	adds	r3, r7, r2
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	2b29      	cmp	r3, #41	@ 0x29
 8005986:	d103      	bne.n	8005990 <I2C_Slave_ISR_DMA+0x164>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2221      	movs	r2, #33	@ 0x21
 800598c:	631a      	str	r2, [r3, #48]	@ 0x30
 800598e:	e00b      	b.n	80059a8 <I2C_Slave_ISR_DMA+0x17c>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005990:	2217      	movs	r2, #23
 8005992:	18bb      	adds	r3, r7, r2
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	2b22      	cmp	r3, #34	@ 0x22
 8005998:	d003      	beq.n	80059a2 <I2C_Slave_ISR_DMA+0x176>
 800599a:	18bb      	adds	r3, r7, r2
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	2b2a      	cmp	r3, #42	@ 0x2a
 80059a0:	d102      	bne.n	80059a8 <I2C_Slave_ISR_DMA+0x17c>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2222      	movs	r2, #34	@ 0x22
 80059a6:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	0011      	movs	r1, r2
 80059b0:	0018      	movs	r0, r3
 80059b2:	f000 fc1b 	bl	80061ec <I2C_ITError>
      if (treatdmanack == 1U)
 80059b6:	e005      	b.n	80059c4 <I2C_Slave_ISR_DMA+0x198>
 80059b8:	e004      	b.n	80059c4 <I2C_Slave_ISR_DMA+0x198>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2210      	movs	r2, #16
 80059c0:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80059c2:	e00f      	b.n	80059e4 <I2C_Slave_ISR_DMA+0x1b8>
      if (treatdmanack == 1U)
 80059c4:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80059c6:	e00d      	b.n	80059e4 <I2C_Slave_ISR_DMA+0x1b8>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	2208      	movs	r2, #8
 80059cc:	4013      	ands	r3, r2
 80059ce:	d009      	beq.n	80059e4 <I2C_Slave_ISR_DMA+0x1b8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2208      	movs	r2, #8
 80059d4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80059d6:	d005      	beq.n	80059e4 <I2C_Slave_ISR_DMA+0x1b8>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80059d8:	68ba      	ldr	r2, [r7, #8]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	0011      	movs	r1, r2
 80059de:	0018      	movs	r0, r3
 80059e0:	f000 f80c 	bl	80059fc <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2240      	movs	r2, #64	@ 0x40
 80059e8:	2100      	movs	r1, #0
 80059ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80059ec:	2300      	movs	r3, #0
}
 80059ee:	0018      	movs	r0, r3
 80059f0:	46bd      	mov	sp, r7
 80059f2:	b008      	add	sp, #32
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	46c0      	nop			@ (mov r8, r8)
 80059f8:	ffff0000 	.word	0xffff0000

080059fc <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80059fc:	b5b0      	push	{r4, r5, r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2241      	movs	r2, #65	@ 0x41
 8005a0a:	5c9b      	ldrb	r3, [r3, r2]
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	001a      	movs	r2, r3
 8005a10:	2328      	movs	r3, #40	@ 0x28
 8005a12:	4013      	ands	r3, r2
 8005a14:	2b28      	cmp	r3, #40	@ 0x28
 8005a16:	d000      	beq.n	8005a1a <I2C_ITAddrCplt+0x1e>
 8005a18:	e088      	b.n	8005b2c <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	699b      	ldr	r3, [r3, #24]
 8005a20:	0c1b      	lsrs	r3, r3, #16
 8005a22:	b2da      	uxtb	r2, r3
 8005a24:	250f      	movs	r5, #15
 8005a26:	197b      	adds	r3, r7, r5
 8005a28:	2101      	movs	r1, #1
 8005a2a:	400a      	ands	r2, r1
 8005a2c:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	699b      	ldr	r3, [r3, #24]
 8005a34:	0c1b      	lsrs	r3, r3, #16
 8005a36:	b29a      	uxth	r2, r3
 8005a38:	200c      	movs	r0, #12
 8005a3a:	183b      	adds	r3, r7, r0
 8005a3c:	21fe      	movs	r1, #254	@ 0xfe
 8005a3e:	400a      	ands	r2, r1
 8005a40:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	b29a      	uxth	r2, r3
 8005a4a:	240a      	movs	r4, #10
 8005a4c:	193b      	adds	r3, r7, r4
 8005a4e:	0592      	lsls	r2, r2, #22
 8005a50:	0d92      	lsrs	r2, r2, #22
 8005a52:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	b29a      	uxth	r2, r3
 8005a5c:	2308      	movs	r3, #8
 8005a5e:	18fb      	adds	r3, r7, r3
 8005a60:	21fe      	movs	r1, #254	@ 0xfe
 8005a62:	400a      	ands	r2, r1
 8005a64:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	2b02      	cmp	r3, #2
 8005a6c:	d148      	bne.n	8005b00 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005a6e:	0021      	movs	r1, r4
 8005a70:	187b      	adds	r3, r7, r1
 8005a72:	881b      	ldrh	r3, [r3, #0]
 8005a74:	09db      	lsrs	r3, r3, #7
 8005a76:	b29a      	uxth	r2, r3
 8005a78:	183b      	adds	r3, r7, r0
 8005a7a:	881b      	ldrh	r3, [r3, #0]
 8005a7c:	4053      	eors	r3, r2
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	001a      	movs	r2, r3
 8005a82:	2306      	movs	r3, #6
 8005a84:	4013      	ands	r3, r2
 8005a86:	d120      	bne.n	8005aca <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8005a88:	183b      	adds	r3, r7, r0
 8005a8a:	187a      	adds	r2, r7, r1
 8005a8c:	8812      	ldrh	r2, [r2, #0]
 8005a8e:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a94:	1c5a      	adds	r2, r3, #1
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a9e:	2b02      	cmp	r3, #2
 8005aa0:	d14c      	bne.n	8005b3c <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2208      	movs	r2, #8
 8005aae:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2240      	movs	r2, #64	@ 0x40
 8005ab4:	2100      	movs	r1, #0
 8005ab6:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005ab8:	183b      	adds	r3, r7, r0
 8005aba:	881a      	ldrh	r2, [r3, #0]
 8005abc:	197b      	adds	r3, r7, r5
 8005abe:	7819      	ldrb	r1, [r3, #0]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	0018      	movs	r0, r3
 8005ac4:	f7ff fb69 	bl	800519a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005ac8:	e038      	b.n	8005b3c <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8005aca:	240c      	movs	r4, #12
 8005acc:	193b      	adds	r3, r7, r4
 8005ace:	2208      	movs	r2, #8
 8005ad0:	18ba      	adds	r2, r7, r2
 8005ad2:	8812      	ldrh	r2, [r2, #0]
 8005ad4:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005ad6:	2380      	movs	r3, #128	@ 0x80
 8005ad8:	021a      	lsls	r2, r3, #8
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	0011      	movs	r1, r2
 8005ade:	0018      	movs	r0, r3
 8005ae0:	f001 f896 	bl	8006c10 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2240      	movs	r2, #64	@ 0x40
 8005ae8:	2100      	movs	r1, #0
 8005aea:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005aec:	193b      	adds	r3, r7, r4
 8005aee:	881a      	ldrh	r2, [r3, #0]
 8005af0:	230f      	movs	r3, #15
 8005af2:	18fb      	adds	r3, r7, r3
 8005af4:	7819      	ldrb	r1, [r3, #0]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	0018      	movs	r0, r3
 8005afa:	f7ff fb4e 	bl	800519a <HAL_I2C_AddrCallback>
}
 8005afe:	e01d      	b.n	8005b3c <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005b00:	2380      	movs	r3, #128	@ 0x80
 8005b02:	021a      	lsls	r2, r3, #8
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	0011      	movs	r1, r2
 8005b08:	0018      	movs	r0, r3
 8005b0a:	f001 f881 	bl	8006c10 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2240      	movs	r2, #64	@ 0x40
 8005b12:	2100      	movs	r1, #0
 8005b14:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005b16:	230c      	movs	r3, #12
 8005b18:	18fb      	adds	r3, r7, r3
 8005b1a:	881a      	ldrh	r2, [r3, #0]
 8005b1c:	230f      	movs	r3, #15
 8005b1e:	18fb      	adds	r3, r7, r3
 8005b20:	7819      	ldrb	r1, [r3, #0]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	0018      	movs	r0, r3
 8005b26:	f7ff fb38 	bl	800519a <HAL_I2C_AddrCallback>
}
 8005b2a:	e007      	b.n	8005b3c <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	2208      	movs	r2, #8
 8005b32:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2240      	movs	r2, #64	@ 0x40
 8005b38:	2100      	movs	r1, #0
 8005b3a:	5499      	strb	r1, [r3, r2]
}
 8005b3c:	46c0      	nop			@ (mov r8, r8)
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	b004      	add	sp, #16
 8005b42:	bdb0      	pop	{r4, r5, r7, pc}

08005b44 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b082      	sub	sp, #8
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2242      	movs	r2, #66	@ 0x42
 8005b50:	2100      	movs	r1, #0
 8005b52:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2241      	movs	r2, #65	@ 0x41
 8005b58:	5c9b      	ldrb	r3, [r3, r2]
 8005b5a:	b2db      	uxtb	r3, r3
 8005b5c:	2b21      	cmp	r3, #33	@ 0x21
 8005b5e:	d117      	bne.n	8005b90 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2241      	movs	r2, #65	@ 0x41
 8005b64:	2120      	movs	r1, #32
 8005b66:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2211      	movs	r2, #17
 8005b6c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2101      	movs	r1, #1
 8005b78:	0018      	movs	r0, r3
 8005b7a:	f001 f849 	bl	8006c10 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2240      	movs	r2, #64	@ 0x40
 8005b82:	2100      	movs	r1, #0
 8005b84:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	0018      	movs	r0, r3
 8005b8a:	f7fa fc4f 	bl	800042c <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005b8e:	e016      	b.n	8005bbe <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2241      	movs	r2, #65	@ 0x41
 8005b94:	2120      	movs	r1, #32
 8005b96:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2212      	movs	r2, #18
 8005b9c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2102      	movs	r1, #2
 8005ba8:	0018      	movs	r0, r3
 8005baa:	f001 f831 	bl	8006c10 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2240      	movs	r2, #64	@ 0x40
 8005bb2:	2100      	movs	r1, #0
 8005bb4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	0018      	movs	r0, r3
 8005bba:	f7fa fc45 	bl	8000448 <HAL_I2C_MasterRxCpltCallback>
}
 8005bbe:	46c0      	nop			@ (mov r8, r8)
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	b002      	add	sp, #8
 8005bc4:	bd80      	pop	{r7, pc}
	...

08005bc8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2242      	movs	r2, #66	@ 0x42
 8005bdc:	2100      	movs	r1, #0
 8005bde:	5499      	strb	r1, [r3, r2]

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	2380      	movs	r3, #128	@ 0x80
 8005be4:	01db      	lsls	r3, r3, #7
 8005be6:	4013      	ands	r3, r2
 8005be8:	d008      	beq.n	8005bfc <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4924      	ldr	r1, [pc, #144]	@ (8005c88 <I2C_ITSlaveSeqCplt+0xc0>)
 8005bf6:	400a      	ands	r2, r1
 8005bf8:	601a      	str	r2, [r3, #0]
 8005bfa:	e00c      	b.n	8005c16 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005bfc:	68fa      	ldr	r2, [r7, #12]
 8005bfe:	2380      	movs	r3, #128	@ 0x80
 8005c00:	021b      	lsls	r3, r3, #8
 8005c02:	4013      	ands	r3, r2
 8005c04:	d007      	beq.n	8005c16 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	491e      	ldr	r1, [pc, #120]	@ (8005c8c <I2C_ITSlaveSeqCplt+0xc4>)
 8005c12:	400a      	ands	r2, r1
 8005c14:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2241      	movs	r2, #65	@ 0x41
 8005c1a:	5c9b      	ldrb	r3, [r3, r2]
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	2b29      	cmp	r3, #41	@ 0x29
 8005c20:	d114      	bne.n	8005c4c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2241      	movs	r2, #65	@ 0x41
 8005c26:	2128      	movs	r1, #40	@ 0x28
 8005c28:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2221      	movs	r2, #33	@ 0x21
 8005c2e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2101      	movs	r1, #1
 8005c34:	0018      	movs	r0, r3
 8005c36:	f000 ffeb 	bl	8006c10 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2240      	movs	r2, #64	@ 0x40
 8005c3e:	2100      	movs	r1, #0
 8005c40:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	0018      	movs	r0, r3
 8005c46:	f7ff fa98 	bl	800517a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005c4a:	e019      	b.n	8005c80 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2241      	movs	r2, #65	@ 0x41
 8005c50:	5c9b      	ldrb	r3, [r3, r2]
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c56:	d113      	bne.n	8005c80 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2241      	movs	r2, #65	@ 0x41
 8005c5c:	2128      	movs	r1, #40	@ 0x28
 8005c5e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2222      	movs	r2, #34	@ 0x22
 8005c64:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2102      	movs	r1, #2
 8005c6a:	0018      	movs	r0, r3
 8005c6c:	f000 ffd0 	bl	8006c10 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2240      	movs	r2, #64	@ 0x40
 8005c74:	2100      	movs	r1, #0
 8005c76:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	0018      	movs	r0, r3
 8005c7c:	f7ff fa85 	bl	800518a <HAL_I2C_SlaveRxCpltCallback>
}
 8005c80:	46c0      	nop			@ (mov r8, r8)
 8005c82:	46bd      	mov	sp, r7
 8005c84:	b004      	add	sp, #16
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	ffffbfff 	.word	0xffffbfff
 8005c8c:	ffff7fff 	.word	0xffff7fff

08005c90 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b086      	sub	sp, #24
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	2220      	movs	r2, #32
 8005ca4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2241      	movs	r2, #65	@ 0x41
 8005caa:	5c9b      	ldrb	r3, [r3, r2]
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	2b21      	cmp	r3, #33	@ 0x21
 8005cb0:	d108      	bne.n	8005cc4 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2101      	movs	r1, #1
 8005cb6:	0018      	movs	r0, r3
 8005cb8:	f000 ffaa 	bl	8006c10 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2211      	movs	r2, #17
 8005cc0:	631a      	str	r2, [r3, #48]	@ 0x30
 8005cc2:	e00d      	b.n	8005ce0 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2241      	movs	r2, #65	@ 0x41
 8005cc8:	5c9b      	ldrb	r3, [r3, r2]
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	2b22      	cmp	r3, #34	@ 0x22
 8005cce:	d107      	bne.n	8005ce0 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2102      	movs	r1, #2
 8005cd4:	0018      	movs	r0, r3
 8005cd6:	f000 ff9b 	bl	8006c10 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2212      	movs	r2, #18
 8005cde:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	685a      	ldr	r2, [r3, #4]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	494e      	ldr	r1, [pc, #312]	@ (8005e24 <I2C_ITMasterCplt+0x194>)
 8005cec:	400a      	ands	r2, r1
 8005cee:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a4b      	ldr	r2, [pc, #300]	@ (8005e28 <I2C_ITMasterCplt+0x198>)
 8005cfa:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	2210      	movs	r2, #16
 8005d00:	4013      	ands	r3, r2
 8005d02:	d009      	beq.n	8005d18 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2210      	movs	r2, #16
 8005d0a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d10:	2204      	movs	r2, #4
 8005d12:	431a      	orrs	r2, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2241      	movs	r2, #65	@ 0x41
 8005d1c:	5c9b      	ldrb	r3, [r3, r2]
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	2b60      	cmp	r3, #96	@ 0x60
 8005d22:	d109      	bne.n	8005d38 <I2C_ITMasterCplt+0xa8>
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	2204      	movs	r2, #4
 8005d28:	4013      	ands	r3, r2
 8005d2a:	d005      	beq.n	8005d38 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8005d36:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	0018      	movs	r0, r3
 8005d3c:	f000 fb81 	bl	8006442 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d44:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2241      	movs	r2, #65	@ 0x41
 8005d4a:	5c9b      	ldrb	r3, [r3, r2]
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	2b60      	cmp	r3, #96	@ 0x60
 8005d50:	d002      	beq.n	8005d58 <I2C_ITMasterCplt+0xc8>
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d007      	beq.n	8005d68 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	0011      	movs	r1, r2
 8005d60:	0018      	movs	r0, r3
 8005d62:	f000 fa43 	bl	80061ec <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005d66:	e058      	b.n	8005e1a <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2241      	movs	r2, #65	@ 0x41
 8005d6c:	5c9b      	ldrb	r3, [r3, r2]
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	2b21      	cmp	r3, #33	@ 0x21
 8005d72:	d126      	bne.n	8005dc2 <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2241      	movs	r2, #65	@ 0x41
 8005d78:	2120      	movs	r1, #32
 8005d7a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2242      	movs	r2, #66	@ 0x42
 8005d86:	5c9b      	ldrb	r3, [r3, r2]
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	2b40      	cmp	r3, #64	@ 0x40
 8005d8c:	d10c      	bne.n	8005da8 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2242      	movs	r2, #66	@ 0x42
 8005d92:	2100      	movs	r1, #0
 8005d94:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2240      	movs	r2, #64	@ 0x40
 8005d9a:	2100      	movs	r1, #0
 8005d9c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	0018      	movs	r0, r3
 8005da2:	f7fa fb27 	bl	80003f4 <HAL_I2C_MemTxCpltCallback>
}
 8005da6:	e038      	b.n	8005e1a <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2242      	movs	r2, #66	@ 0x42
 8005dac:	2100      	movs	r1, #0
 8005dae:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2240      	movs	r2, #64	@ 0x40
 8005db4:	2100      	movs	r1, #0
 8005db6:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	0018      	movs	r0, r3
 8005dbc:	f7fa fb36 	bl	800042c <HAL_I2C_MasterTxCpltCallback>
}
 8005dc0:	e02b      	b.n	8005e1a <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2241      	movs	r2, #65	@ 0x41
 8005dc6:	5c9b      	ldrb	r3, [r3, r2]
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	2b22      	cmp	r3, #34	@ 0x22
 8005dcc:	d125      	bne.n	8005e1a <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2241      	movs	r2, #65	@ 0x41
 8005dd2:	2120      	movs	r1, #32
 8005dd4:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2242      	movs	r2, #66	@ 0x42
 8005de0:	5c9b      	ldrb	r3, [r3, r2]
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	2b40      	cmp	r3, #64	@ 0x40
 8005de6:	d10c      	bne.n	8005e02 <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2242      	movs	r2, #66	@ 0x42
 8005dec:	2100      	movs	r1, #0
 8005dee:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2240      	movs	r2, #64	@ 0x40
 8005df4:	2100      	movs	r1, #0
 8005df6:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	0018      	movs	r0, r3
 8005dfc:	f7fa fb08 	bl	8000410 <HAL_I2C_MemRxCpltCallback>
}
 8005e00:	e00b      	b.n	8005e1a <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2242      	movs	r2, #66	@ 0x42
 8005e06:	2100      	movs	r1, #0
 8005e08:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2240      	movs	r2, #64	@ 0x40
 8005e0e:	2100      	movs	r1, #0
 8005e10:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	0018      	movs	r0, r3
 8005e16:	f7fa fb17 	bl	8000448 <HAL_I2C_MasterRxCpltCallback>
}
 8005e1a:	46c0      	nop			@ (mov r8, r8)
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	b006      	add	sp, #24
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	46c0      	nop			@ (mov r8, r8)
 8005e24:	fe00e800 	.word	0xfe00e800
 8005e28:	ffff0000 	.word	0xffff0000

08005e2c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b086      	sub	sp, #24
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e46:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005e48:	200b      	movs	r0, #11
 8005e4a:	183b      	adds	r3, r7, r0
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	2141      	movs	r1, #65	@ 0x41
 8005e50:	5c52      	ldrb	r2, [r2, r1]
 8005e52:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	2220      	movs	r2, #32
 8005e5a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005e5c:	183b      	adds	r3, r7, r0
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	2b21      	cmp	r3, #33	@ 0x21
 8005e62:	d003      	beq.n	8005e6c <I2C_ITSlaveCplt+0x40>
 8005e64:	183b      	adds	r3, r7, r0
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	2b29      	cmp	r3, #41	@ 0x29
 8005e6a:	d109      	bne.n	8005e80 <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005e6c:	4aac      	ldr	r2, [pc, #688]	@ (8006120 <I2C_ITSlaveCplt+0x2f4>)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	0011      	movs	r1, r2
 8005e72:	0018      	movs	r0, r3
 8005e74:	f000 fecc 	bl	8006c10 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2221      	movs	r2, #33	@ 0x21
 8005e7c:	631a      	str	r2, [r3, #48]	@ 0x30
 8005e7e:	e020      	b.n	8005ec2 <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005e80:	220b      	movs	r2, #11
 8005e82:	18bb      	adds	r3, r7, r2
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	2b22      	cmp	r3, #34	@ 0x22
 8005e88:	d003      	beq.n	8005e92 <I2C_ITSlaveCplt+0x66>
 8005e8a:	18bb      	adds	r3, r7, r2
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e90:	d109      	bne.n	8005ea6 <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005e92:	4aa4      	ldr	r2, [pc, #656]	@ (8006124 <I2C_ITSlaveCplt+0x2f8>)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	0011      	movs	r1, r2
 8005e98:	0018      	movs	r0, r3
 8005e9a:	f000 feb9 	bl	8006c10 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2222      	movs	r2, #34	@ 0x22
 8005ea2:	631a      	str	r2, [r3, #48]	@ 0x30
 8005ea4:	e00d      	b.n	8005ec2 <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8005ea6:	230b      	movs	r3, #11
 8005ea8:	18fb      	adds	r3, r7, r3
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	2b28      	cmp	r3, #40	@ 0x28
 8005eae:	d108      	bne.n	8005ec2 <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8005eb0:	4a9d      	ldr	r2, [pc, #628]	@ (8006128 <I2C_ITSlaveCplt+0x2fc>)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	0011      	movs	r1, r2
 8005eb6:	0018      	movs	r0, r3
 8005eb8:	f000 feaa 	bl	8006c10 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	685a      	ldr	r2, [r3, #4]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	2180      	movs	r1, #128	@ 0x80
 8005ece:	0209      	lsls	r1, r1, #8
 8005ed0:	430a      	orrs	r2, r1
 8005ed2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	685a      	ldr	r2, [r3, #4]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4993      	ldr	r1, [pc, #588]	@ (800612c <I2C_ITSlaveCplt+0x300>)
 8005ee0:	400a      	ands	r2, r1
 8005ee2:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	0018      	movs	r0, r3
 8005ee8:	f000 faab 	bl	8006442 <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005eec:	693a      	ldr	r2, [r7, #16]
 8005eee:	2380      	movs	r3, #128	@ 0x80
 8005ef0:	01db      	lsls	r3, r3, #7
 8005ef2:	4013      	ands	r3, r2
 8005ef4:	d013      	beq.n	8005f1e <I2C_ITSlaveCplt+0xf2>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	498b      	ldr	r1, [pc, #556]	@ (8006130 <I2C_ITSlaveCplt+0x304>)
 8005f02:	400a      	ands	r2, r1
 8005f04:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d01f      	beq.n	8005f4e <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	b29a      	uxth	r2, r3
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005f1c:	e017      	b.n	8005f4e <I2C_ITSlaveCplt+0x122>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005f1e:	693a      	ldr	r2, [r7, #16]
 8005f20:	2380      	movs	r3, #128	@ 0x80
 8005f22:	021b      	lsls	r3, r3, #8
 8005f24:	4013      	ands	r3, r2
 8005f26:	d012      	beq.n	8005f4e <I2C_ITSlaveCplt+0x122>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4980      	ldr	r1, [pc, #512]	@ (8006134 <I2C_ITSlaveCplt+0x308>)
 8005f34:	400a      	ands	r2, r1
 8005f36:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d006      	beq.n	8005f4e <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	b29a      	uxth	r2, r3
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	2204      	movs	r2, #4
 8005f52:	4013      	ands	r3, r2
 8005f54:	d020      	beq.n	8005f98 <I2C_ITSlaveCplt+0x16c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	2204      	movs	r2, #4
 8005f5a:	4393      	bics	r3, r2
 8005f5c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f68:	b2d2      	uxtb	r2, r2
 8005f6a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f70:	1c5a      	adds	r2, r3, #1
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d00c      	beq.n	8005f98 <I2C_ITSlaveCplt+0x16c>
    {
      hi2c->XferSize--;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f82:	3b01      	subs	r3, #1
 8005f84:	b29a      	uxth	r2, r3
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	3b01      	subs	r3, #1
 8005f92:	b29a      	uxth	r2, r3
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d005      	beq.n	8005fae <I2C_ITSlaveCplt+0x182>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fa6:	2204      	movs	r2, #4
 8005fa8:	431a      	orrs	r2, r3
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	2210      	movs	r2, #16
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	d04f      	beq.n	8006056 <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	2210      	movs	r2, #16
 8005fba:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005fbc:	d04b      	beq.n	8006056 <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d12d      	bne.n	8006024 <I2C_ITSlaveCplt+0x1f8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2241      	movs	r2, #65	@ 0x41
 8005fcc:	5c9b      	ldrb	r3, [r3, r2]
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	2b28      	cmp	r3, #40	@ 0x28
 8005fd2:	d10b      	bne.n	8005fec <I2C_ITSlaveCplt+0x1c0>
 8005fd4:	68fa      	ldr	r2, [r7, #12]
 8005fd6:	2380      	movs	r3, #128	@ 0x80
 8005fd8:	049b      	lsls	r3, r3, #18
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d106      	bne.n	8005fec <I2C_ITSlaveCplt+0x1c0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005fde:	697a      	ldr	r2, [r7, #20]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	0011      	movs	r1, r2
 8005fe4:	0018      	movs	r0, r3
 8005fe6:	f000 f8a9 	bl	800613c <I2C_ITListenCplt>
 8005fea:	e034      	b.n	8006056 <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2241      	movs	r2, #65	@ 0x41
 8005ff0:	5c9b      	ldrb	r3, [r3, r2]
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	2b29      	cmp	r3, #41	@ 0x29
 8005ff6:	d110      	bne.n	800601a <I2C_ITSlaveCplt+0x1ee>
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	4a4f      	ldr	r2, [pc, #316]	@ (8006138 <I2C_ITSlaveCplt+0x30c>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d00c      	beq.n	800601a <I2C_ITSlaveCplt+0x1ee>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	2210      	movs	r2, #16
 8006006:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	0018      	movs	r0, r3
 800600c:	f000 fa19 	bl	8006442 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	0018      	movs	r0, r3
 8006014:	f7ff fdd8 	bl	8005bc8 <I2C_ITSlaveSeqCplt>
 8006018:	e01d      	b.n	8006056 <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	2210      	movs	r2, #16
 8006020:	61da      	str	r2, [r3, #28]
 8006022:	e018      	b.n	8006056 <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	2210      	movs	r2, #16
 800602a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006030:	2204      	movs	r2, #4
 8006032:	431a      	orrs	r2, r3
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d004      	beq.n	8006048 <I2C_ITSlaveCplt+0x21c>
 800603e:	68fa      	ldr	r2, [r7, #12]
 8006040:	2380      	movs	r3, #128	@ 0x80
 8006042:	045b      	lsls	r3, r3, #17
 8006044:	429a      	cmp	r2, r3
 8006046:	d106      	bne.n	8006056 <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	0011      	movs	r1, r2
 8006050:	0018      	movs	r0, r3
 8006052:	f000 f8cb 	bl	80061ec <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2242      	movs	r2, #66	@ 0x42
 800605a:	2100      	movs	r1, #0
 800605c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006068:	2b00      	cmp	r3, #0
 800606a:	d013      	beq.n	8006094 <I2C_ITSlaveCplt+0x268>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	0011      	movs	r1, r2
 8006074:	0018      	movs	r0, r3
 8006076:	f000 f8b9 	bl	80061ec <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2241      	movs	r2, #65	@ 0x41
 800607e:	5c9b      	ldrb	r3, [r3, r2]
 8006080:	b2db      	uxtb	r3, r3
 8006082:	2b28      	cmp	r3, #40	@ 0x28
 8006084:	d147      	bne.n	8006116 <I2C_ITSlaveCplt+0x2ea>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006086:	697a      	ldr	r2, [r7, #20]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	0011      	movs	r1, r2
 800608c:	0018      	movs	r0, r3
 800608e:	f000 f855 	bl	800613c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006092:	e040      	b.n	8006116 <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006098:	4a27      	ldr	r2, [pc, #156]	@ (8006138 <I2C_ITSlaveCplt+0x30c>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d016      	beq.n	80060cc <I2C_ITSlaveCplt+0x2a0>
    I2C_ITSlaveSeqCplt(hi2c);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	0018      	movs	r0, r3
 80060a2:	f7ff fd91 	bl	8005bc8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a23      	ldr	r2, [pc, #140]	@ (8006138 <I2C_ITSlaveCplt+0x30c>)
 80060aa:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2241      	movs	r2, #65	@ 0x41
 80060b0:	2120      	movs	r1, #32
 80060b2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2240      	movs	r2, #64	@ 0x40
 80060be:	2100      	movs	r1, #0
 80060c0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	0018      	movs	r0, r3
 80060c6:	f7ff f878 	bl	80051ba <HAL_I2C_ListenCpltCallback>
}
 80060ca:	e024      	b.n	8006116 <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2241      	movs	r2, #65	@ 0x41
 80060d0:	5c9b      	ldrb	r3, [r3, r2]
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	2b22      	cmp	r3, #34	@ 0x22
 80060d6:	d10f      	bne.n	80060f8 <I2C_ITSlaveCplt+0x2cc>
    hi2c->State = HAL_I2C_STATE_READY;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2241      	movs	r2, #65	@ 0x41
 80060dc:	2120      	movs	r1, #32
 80060de:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2200      	movs	r2, #0
 80060e4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2240      	movs	r2, #64	@ 0x40
 80060ea:	2100      	movs	r1, #0
 80060ec:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	0018      	movs	r0, r3
 80060f2:	f7ff f84a 	bl	800518a <HAL_I2C_SlaveRxCpltCallback>
}
 80060f6:	e00e      	b.n	8006116 <I2C_ITSlaveCplt+0x2ea>
    hi2c->State = HAL_I2C_STATE_READY;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2241      	movs	r2, #65	@ 0x41
 80060fc:	2120      	movs	r1, #32
 80060fe:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2240      	movs	r2, #64	@ 0x40
 800610a:	2100      	movs	r1, #0
 800610c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	0018      	movs	r0, r3
 8006112:	f7ff f832 	bl	800517a <HAL_I2C_SlaveTxCpltCallback>
}
 8006116:	46c0      	nop			@ (mov r8, r8)
 8006118:	46bd      	mov	sp, r7
 800611a:	b006      	add	sp, #24
 800611c:	bd80      	pop	{r7, pc}
 800611e:	46c0      	nop			@ (mov r8, r8)
 8006120:	00008001 	.word	0x00008001
 8006124:	00008002 	.word	0x00008002
 8006128:	00008003 	.word	0x00008003
 800612c:	fe00e800 	.word	0xfe00e800
 8006130:	ffffbfff 	.word	0xffffbfff
 8006134:	ffff7fff 	.word	0xffff7fff
 8006138:	ffff0000 	.word	0xffff0000

0800613c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b082      	sub	sp, #8
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4a26      	ldr	r2, [pc, #152]	@ (80061e4 <I2C_ITListenCplt+0xa8>)
 800614a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2241      	movs	r2, #65	@ 0x41
 8006156:	2120      	movs	r1, #32
 8006158:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2242      	movs	r2, #66	@ 0x42
 800615e:	2100      	movs	r1, #0
 8006160:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	2204      	movs	r2, #4
 800616c:	4013      	ands	r3, r2
 800616e:	d022      	beq.n	80061b6 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800617a:	b2d2      	uxtb	r2, r2
 800617c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006182:	1c5a      	adds	r2, r3, #1
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800618c:	2b00      	cmp	r3, #0
 800618e:	d012      	beq.n	80061b6 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006194:	3b01      	subs	r3, #1
 8006196:	b29a      	uxth	r2, r3
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	3b01      	subs	r3, #1
 80061a4:	b29a      	uxth	r2, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061ae:	2204      	movs	r2, #4
 80061b0:	431a      	orrs	r2, r3
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80061b6:	4a0c      	ldr	r2, [pc, #48]	@ (80061e8 <I2C_ITListenCplt+0xac>)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	0011      	movs	r1, r2
 80061bc:	0018      	movs	r0, r3
 80061be:	f000 fd27 	bl	8006c10 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	2210      	movs	r2, #16
 80061c8:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2240      	movs	r2, #64	@ 0x40
 80061ce:	2100      	movs	r1, #0
 80061d0:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	0018      	movs	r0, r3
 80061d6:	f7fe fff0 	bl	80051ba <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80061da:	46c0      	nop			@ (mov r8, r8)
 80061dc:	46bd      	mov	sp, r7
 80061de:	b002      	add	sp, #8
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	46c0      	nop			@ (mov r8, r8)
 80061e4:	ffff0000 	.word	0xffff0000
 80061e8:	00008003 	.word	0x00008003

080061ec <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80061f6:	200f      	movs	r0, #15
 80061f8:	183b      	adds	r3, r7, r0
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	2141      	movs	r1, #65	@ 0x41
 80061fe:	5c52      	ldrb	r2, [r2, r1]
 8006200:	701a      	strb	r2, [r3, #0]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2242      	movs	r2, #66	@ 0x42
 8006206:	2100      	movs	r1, #0
 8006208:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4a72      	ldr	r2, [pc, #456]	@ (80063d8 <I2C_ITError+0x1ec>)
 800620e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	431a      	orrs	r2, r3
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006222:	183b      	adds	r3, r7, r0
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	2b28      	cmp	r3, #40	@ 0x28
 8006228:	d007      	beq.n	800623a <I2C_ITError+0x4e>
 800622a:	183b      	adds	r3, r7, r0
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	2b29      	cmp	r3, #41	@ 0x29
 8006230:	d003      	beq.n	800623a <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8006232:	183b      	adds	r3, r7, r0
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	2b2a      	cmp	r3, #42	@ 0x2a
 8006238:	d10c      	bne.n	8006254 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2103      	movs	r1, #3
 800623e:	0018      	movs	r0, r3
 8006240:	f000 fce6 	bl	8006c10 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2241      	movs	r2, #65	@ 0x41
 8006248:	2128      	movs	r1, #40	@ 0x28
 800624a:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4a63      	ldr	r2, [pc, #396]	@ (80063dc <I2C_ITError+0x1f0>)
 8006250:	635a      	str	r2, [r3, #52]	@ 0x34
 8006252:	e032      	b.n	80062ba <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006254:	4a62      	ldr	r2, [pc, #392]	@ (80063e0 <I2C_ITError+0x1f4>)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	0011      	movs	r1, r2
 800625a:	0018      	movs	r0, r3
 800625c:	f000 fcd8 	bl	8006c10 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	0018      	movs	r0, r3
 8006264:	f000 f8ed 	bl	8006442 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2241      	movs	r2, #65	@ 0x41
 800626c:	5c9b      	ldrb	r3, [r3, r2]
 800626e:	b2db      	uxtb	r3, r3
 8006270:	2b60      	cmp	r3, #96	@ 0x60
 8006272:	d01f      	beq.n	80062b4 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2241      	movs	r2, #65	@ 0x41
 8006278:	2120      	movs	r1, #32
 800627a:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	699b      	ldr	r3, [r3, #24]
 8006282:	2220      	movs	r2, #32
 8006284:	4013      	ands	r3, r2
 8006286:	2b20      	cmp	r3, #32
 8006288:	d114      	bne.n	80062b4 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	699b      	ldr	r3, [r3, #24]
 8006290:	2210      	movs	r2, #16
 8006292:	4013      	ands	r3, r2
 8006294:	2b10      	cmp	r3, #16
 8006296:	d109      	bne.n	80062ac <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2210      	movs	r2, #16
 800629e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062a4:	2204      	movs	r2, #4
 80062a6:	431a      	orrs	r2, r3
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	2220      	movs	r2, #32
 80062b2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062be:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d03b      	beq.n	8006340 <I2C_ITError+0x154>
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	2b11      	cmp	r3, #17
 80062cc:	d002      	beq.n	80062d4 <I2C_ITError+0xe8>
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	2b21      	cmp	r3, #33	@ 0x21
 80062d2:	d135      	bne.n	8006340 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	2380      	movs	r3, #128	@ 0x80
 80062dc:	01db      	lsls	r3, r3, #7
 80062de:	401a      	ands	r2, r3
 80062e0:	2380      	movs	r3, #128	@ 0x80
 80062e2:	01db      	lsls	r3, r3, #7
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d107      	bne.n	80062f8 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	493c      	ldr	r1, [pc, #240]	@ (80063e4 <I2C_ITError+0x1f8>)
 80062f4:	400a      	ands	r2, r1
 80062f6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062fc:	0018      	movs	r0, r3
 80062fe:	f7fd ff53 	bl	80041a8 <HAL_DMA_GetState>
 8006302:	0003      	movs	r3, r0
 8006304:	2b01      	cmp	r3, #1
 8006306:	d016      	beq.n	8006336 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800630c:	4a36      	ldr	r2, [pc, #216]	@ (80063e8 <I2C_ITError+0x1fc>)
 800630e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2240      	movs	r2, #64	@ 0x40
 8006314:	2100      	movs	r1, #0
 8006316:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800631c:	0018      	movs	r0, r3
 800631e:	f7fd fe17 	bl	8003f50 <HAL_DMA_Abort_IT>
 8006322:	1e03      	subs	r3, r0, #0
 8006324:	d051      	beq.n	80063ca <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800632a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006330:	0018      	movs	r0, r3
 8006332:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006334:	e049      	b.n	80063ca <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	0018      	movs	r0, r3
 800633a:	f000 f859 	bl	80063f0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800633e:	e044      	b.n	80063ca <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006344:	2b00      	cmp	r3, #0
 8006346:	d03b      	beq.n	80063c0 <I2C_ITError+0x1d4>
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	2b12      	cmp	r3, #18
 800634c:	d002      	beq.n	8006354 <I2C_ITError+0x168>
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	2b22      	cmp	r3, #34	@ 0x22
 8006352:	d135      	bne.n	80063c0 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	2380      	movs	r3, #128	@ 0x80
 800635c:	021b      	lsls	r3, r3, #8
 800635e:	401a      	ands	r2, r3
 8006360:	2380      	movs	r3, #128	@ 0x80
 8006362:	021b      	lsls	r3, r3, #8
 8006364:	429a      	cmp	r2, r3
 8006366:	d107      	bne.n	8006378 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	491e      	ldr	r1, [pc, #120]	@ (80063ec <I2C_ITError+0x200>)
 8006374:	400a      	ands	r2, r1
 8006376:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800637c:	0018      	movs	r0, r3
 800637e:	f7fd ff13 	bl	80041a8 <HAL_DMA_GetState>
 8006382:	0003      	movs	r3, r0
 8006384:	2b01      	cmp	r3, #1
 8006386:	d016      	beq.n	80063b6 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800638c:	4a16      	ldr	r2, [pc, #88]	@ (80063e8 <I2C_ITError+0x1fc>)
 800638e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2240      	movs	r2, #64	@ 0x40
 8006394:	2100      	movs	r1, #0
 8006396:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800639c:	0018      	movs	r0, r3
 800639e:	f7fd fdd7 	bl	8003f50 <HAL_DMA_Abort_IT>
 80063a2:	1e03      	subs	r3, r0, #0
 80063a4:	d013      	beq.n	80063ce <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063b0:	0018      	movs	r0, r3
 80063b2:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80063b4:	e00b      	b.n	80063ce <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	0018      	movs	r0, r3
 80063ba:	f000 f819 	bl	80063f0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80063be:	e006      	b.n	80063ce <I2C_ITError+0x1e2>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	0018      	movs	r0, r3
 80063c4:	f000 f814 	bl	80063f0 <I2C_TreatErrorCallback>
  }
}
 80063c8:	e002      	b.n	80063d0 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80063ca:	46c0      	nop			@ (mov r8, r8)
 80063cc:	e000      	b.n	80063d0 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80063ce:	46c0      	nop			@ (mov r8, r8)
}
 80063d0:	46c0      	nop			@ (mov r8, r8)
 80063d2:	46bd      	mov	sp, r7
 80063d4:	b004      	add	sp, #16
 80063d6:	bd80      	pop	{r7, pc}
 80063d8:	ffff0000 	.word	0xffff0000
 80063dc:	080051dd 	.word	0x080051dd
 80063e0:	00008003 	.word	0x00008003
 80063e4:	ffffbfff 	.word	0xffffbfff
 80063e8:	0800655b 	.word	0x0800655b
 80063ec:	ffff7fff 	.word	0xffff7fff

080063f0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b082      	sub	sp, #8
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2241      	movs	r2, #65	@ 0x41
 80063fc:	5c9b      	ldrb	r3, [r3, r2]
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	2b60      	cmp	r3, #96	@ 0x60
 8006402:	d10f      	bne.n	8006424 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2241      	movs	r2, #65	@ 0x41
 8006408:	2120      	movs	r1, #32
 800640a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2240      	movs	r2, #64	@ 0x40
 8006416:	2100      	movs	r1, #0
 8006418:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	0018      	movs	r0, r3
 800641e:	f7fe fed4 	bl	80051ca <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006422:	e00a      	b.n	800643a <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2240      	movs	r2, #64	@ 0x40
 800642e:	2100      	movs	r1, #0
 8006430:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	0018      	movs	r0, r3
 8006436:	f7fa f815 	bl	8000464 <HAL_I2C_ErrorCallback>
}
 800643a:	46c0      	nop			@ (mov r8, r8)
 800643c:	46bd      	mov	sp, r7
 800643e:	b002      	add	sp, #8
 8006440:	bd80      	pop	{r7, pc}

08006442 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006442:	b580      	push	{r7, lr}
 8006444:	b082      	sub	sp, #8
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	699b      	ldr	r3, [r3, #24]
 8006450:	2202      	movs	r2, #2
 8006452:	4013      	ands	r3, r2
 8006454:	2b02      	cmp	r3, #2
 8006456:	d103      	bne.n	8006460 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2200      	movs	r2, #0
 800645e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	699b      	ldr	r3, [r3, #24]
 8006466:	2201      	movs	r2, #1
 8006468:	4013      	ands	r3, r2
 800646a:	2b01      	cmp	r3, #1
 800646c:	d007      	beq.n	800647e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	699a      	ldr	r2, [r3, #24]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	2101      	movs	r1, #1
 800647a:	430a      	orrs	r2, r1
 800647c:	619a      	str	r2, [r3, #24]
  }
}
 800647e:	46c0      	nop			@ (mov r8, r8)
 8006480:	46bd      	mov	sp, r7
 8006482:	b002      	add	sp, #8
 8006484:	bd80      	pop	{r7, pc}
	...

08006488 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b084      	sub	sp, #16
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006494:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4920      	ldr	r1, [pc, #128]	@ (8006524 <I2C_DMAMasterReceiveCplt+0x9c>)
 80064a2:	400a      	ands	r2, r1
 80064a4:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d105      	bne.n	80064bc <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2120      	movs	r1, #32
 80064b4:	0018      	movs	r0, r3
 80064b6:	f000 fb21 	bl	8006afc <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80064ba:	e02e      	b.n	800651a <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064c0:	68fa      	ldr	r2, [r7, #12]
 80064c2:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80064c4:	189a      	adds	r2, r3, r2
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	2bff      	cmp	r3, #255	@ 0xff
 80064d2:	d903      	bls.n	80064dc <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	22ff      	movs	r2, #255	@ 0xff
 80064d8:	851a      	strh	r2, [r3, #40]	@ 0x28
 80064da:	e004      	b.n	80064e6 <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064e0:	b29a      	uxth	r2, r3
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	3324      	adds	r3, #36	@ 0x24
 80064f0:	0019      	movs	r1, r3
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064f6:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80064fc:	f7fd fc3e 	bl	8003d7c <HAL_DMA_Start_IT>
 8006500:	1e03      	subs	r3, r0, #0
 8006502:	d005      	beq.n	8006510 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2110      	movs	r1, #16
 8006508:	0018      	movs	r0, r3
 800650a:	f7ff fe6f 	bl	80061ec <I2C_ITError>
}
 800650e:	e004      	b.n	800651a <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2140      	movs	r1, #64	@ 0x40
 8006514:	0018      	movs	r0, r3
 8006516:	f000 faf1 	bl	8006afc <I2C_Enable_IRQ>
}
 800651a:	46c0      	nop			@ (mov r8, r8)
 800651c:	46bd      	mov	sp, r7
 800651e:	b004      	add	sp, #16
 8006520:	bd80      	pop	{r7, pc}
 8006522:	46c0      	nop			@ (mov r8, r8)
 8006524:	ffff7fff 	.word	0xffff7fff

08006528 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006534:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	685a      	ldr	r2, [r3, #4]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	2180      	movs	r1, #128	@ 0x80
 8006542:	0209      	lsls	r1, r1, #8
 8006544:	430a      	orrs	r2, r1
 8006546:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2110      	movs	r1, #16
 800654c:	0018      	movs	r0, r3
 800654e:	f7ff fe4d 	bl	80061ec <I2C_ITError>
}
 8006552:	46c0      	nop			@ (mov r8, r8)
 8006554:	46bd      	mov	sp, r7
 8006556:	b004      	add	sp, #16
 8006558:	bd80      	pop	{r7, pc}

0800655a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800655a:	b580      	push	{r7, lr}
 800655c:	b084      	sub	sp, #16
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006566:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800656c:	2b00      	cmp	r3, #0
 800656e:	d003      	beq.n	8006578 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006574:	2200      	movs	r2, #0
 8006576:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800657c:	2b00      	cmp	r3, #0
 800657e:	d003      	beq.n	8006588 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006584:	2200      	movs	r2, #0
 8006586:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	0018      	movs	r0, r3
 800658c:	f7ff ff30 	bl	80063f0 <I2C_TreatErrorCallback>
}
 8006590:	46c0      	nop			@ (mov r8, r8)
 8006592:	46bd      	mov	sp, r7
 8006594:	b004      	add	sp, #16
 8006596:	bd80      	pop	{r7, pc}

08006598 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	60b9      	str	r1, [r7, #8]
 80065a2:	603b      	str	r3, [r7, #0]
 80065a4:	1dfb      	adds	r3, r7, #7
 80065a6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80065a8:	e03a      	b.n	8006620 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80065aa:	69ba      	ldr	r2, [r7, #24]
 80065ac:	6839      	ldr	r1, [r7, #0]
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	0018      	movs	r0, r3
 80065b2:	f000 f971 	bl	8006898 <I2C_IsErrorOccurred>
 80065b6:	1e03      	subs	r3, r0, #0
 80065b8:	d001      	beq.n	80065be <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	e040      	b.n	8006640 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	3301      	adds	r3, #1
 80065c2:	d02d      	beq.n	8006620 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065c4:	f7fc fd20 	bl	8003008 <HAL_GetTick>
 80065c8:	0002      	movs	r2, r0
 80065ca:	69bb      	ldr	r3, [r7, #24]
 80065cc:	1ad3      	subs	r3, r2, r3
 80065ce:	683a      	ldr	r2, [r7, #0]
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d302      	bcc.n	80065da <I2C_WaitOnFlagUntilTimeout+0x42>
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d122      	bne.n	8006620 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	699b      	ldr	r3, [r3, #24]
 80065e0:	68ba      	ldr	r2, [r7, #8]
 80065e2:	4013      	ands	r3, r2
 80065e4:	68ba      	ldr	r2, [r7, #8]
 80065e6:	1ad3      	subs	r3, r2, r3
 80065e8:	425a      	negs	r2, r3
 80065ea:	4153      	adcs	r3, r2
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	001a      	movs	r2, r3
 80065f0:	1dfb      	adds	r3, r7, #7
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d113      	bne.n	8006620 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065fc:	2220      	movs	r2, #32
 80065fe:	431a      	orrs	r2, r3
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2241      	movs	r2, #65	@ 0x41
 8006608:	2120      	movs	r1, #32
 800660a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2242      	movs	r2, #66	@ 0x42
 8006610:	2100      	movs	r1, #0
 8006612:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2240      	movs	r2, #64	@ 0x40
 8006618:	2100      	movs	r1, #0
 800661a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	e00f      	b.n	8006640 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	699b      	ldr	r3, [r3, #24]
 8006626:	68ba      	ldr	r2, [r7, #8]
 8006628:	4013      	ands	r3, r2
 800662a:	68ba      	ldr	r2, [r7, #8]
 800662c:	1ad3      	subs	r3, r2, r3
 800662e:	425a      	negs	r2, r3
 8006630:	4153      	adcs	r3, r2
 8006632:	b2db      	uxtb	r3, r3
 8006634:	001a      	movs	r2, r3
 8006636:	1dfb      	adds	r3, r7, #7
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	429a      	cmp	r2, r3
 800663c:	d0b5      	beq.n	80065aa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800663e:	2300      	movs	r3, #0
}
 8006640:	0018      	movs	r0, r3
 8006642:	46bd      	mov	sp, r7
 8006644:	b004      	add	sp, #16
 8006646:	bd80      	pop	{r7, pc}

08006648 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006654:	e032      	b.n	80066bc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	68b9      	ldr	r1, [r7, #8]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	0018      	movs	r0, r3
 800665e:	f000 f91b 	bl	8006898 <I2C_IsErrorOccurred>
 8006662:	1e03      	subs	r3, r0, #0
 8006664:	d001      	beq.n	800666a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	e030      	b.n	80066cc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	3301      	adds	r3, #1
 800666e:	d025      	beq.n	80066bc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006670:	f7fc fcca 	bl	8003008 <HAL_GetTick>
 8006674:	0002      	movs	r2, r0
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	1ad3      	subs	r3, r2, r3
 800667a:	68ba      	ldr	r2, [r7, #8]
 800667c:	429a      	cmp	r2, r3
 800667e:	d302      	bcc.n	8006686 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d11a      	bne.n	80066bc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	699b      	ldr	r3, [r3, #24]
 800668c:	2202      	movs	r2, #2
 800668e:	4013      	ands	r3, r2
 8006690:	2b02      	cmp	r3, #2
 8006692:	d013      	beq.n	80066bc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006698:	2220      	movs	r2, #32
 800669a:	431a      	orrs	r2, r3
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2241      	movs	r2, #65	@ 0x41
 80066a4:	2120      	movs	r1, #32
 80066a6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2242      	movs	r2, #66	@ 0x42
 80066ac:	2100      	movs	r1, #0
 80066ae:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2240      	movs	r2, #64	@ 0x40
 80066b4:	2100      	movs	r1, #0
 80066b6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	e007      	b.n	80066cc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	699b      	ldr	r3, [r3, #24]
 80066c2:	2202      	movs	r2, #2
 80066c4:	4013      	ands	r3, r2
 80066c6:	2b02      	cmp	r3, #2
 80066c8:	d1c5      	bne.n	8006656 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80066ca:	2300      	movs	r3, #0
}
 80066cc:	0018      	movs	r0, r3
 80066ce:	46bd      	mov	sp, r7
 80066d0:	b004      	add	sp, #16
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80066e0:	e02f      	b.n	8006742 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	68b9      	ldr	r1, [r7, #8]
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	0018      	movs	r0, r3
 80066ea:	f000 f8d5 	bl	8006898 <I2C_IsErrorOccurred>
 80066ee:	1e03      	subs	r3, r0, #0
 80066f0:	d001      	beq.n	80066f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	e02d      	b.n	8006752 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066f6:	f7fc fc87 	bl	8003008 <HAL_GetTick>
 80066fa:	0002      	movs	r2, r0
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	1ad3      	subs	r3, r2, r3
 8006700:	68ba      	ldr	r2, [r7, #8]
 8006702:	429a      	cmp	r2, r3
 8006704:	d302      	bcc.n	800670c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d11a      	bne.n	8006742 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	699b      	ldr	r3, [r3, #24]
 8006712:	2220      	movs	r2, #32
 8006714:	4013      	ands	r3, r2
 8006716:	2b20      	cmp	r3, #32
 8006718:	d013      	beq.n	8006742 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800671e:	2220      	movs	r2, #32
 8006720:	431a      	orrs	r2, r3
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2241      	movs	r2, #65	@ 0x41
 800672a:	2120      	movs	r1, #32
 800672c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2242      	movs	r2, #66	@ 0x42
 8006732:	2100      	movs	r1, #0
 8006734:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2240      	movs	r2, #64	@ 0x40
 800673a:	2100      	movs	r1, #0
 800673c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	e007      	b.n	8006752 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	699b      	ldr	r3, [r3, #24]
 8006748:	2220      	movs	r2, #32
 800674a:	4013      	ands	r3, r2
 800674c:	2b20      	cmp	r3, #32
 800674e:	d1c8      	bne.n	80066e2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006750:	2300      	movs	r3, #0
}
 8006752:	0018      	movs	r0, r3
 8006754:	46bd      	mov	sp, r7
 8006756:	b004      	add	sp, #16
 8006758:	bd80      	pop	{r7, pc}
	...

0800675c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b086      	sub	sp, #24
 8006760:	af00      	add	r7, sp, #0
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	60b9      	str	r1, [r7, #8]
 8006766:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006768:	2317      	movs	r3, #23
 800676a:	18fb      	adds	r3, r7, r3
 800676c:	2200      	movs	r2, #0
 800676e:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8006770:	e07b      	b.n	800686a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	68b9      	ldr	r1, [r7, #8]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	0018      	movs	r0, r3
 800677a:	f000 f88d 	bl	8006898 <I2C_IsErrorOccurred>
 800677e:	1e03      	subs	r3, r0, #0
 8006780:	d003      	beq.n	800678a <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8006782:	2317      	movs	r3, #23
 8006784:	18fb      	adds	r3, r7, r3
 8006786:	2201      	movs	r2, #1
 8006788:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	699b      	ldr	r3, [r3, #24]
 8006790:	2220      	movs	r2, #32
 8006792:	4013      	ands	r3, r2
 8006794:	2b20      	cmp	r3, #32
 8006796:	d140      	bne.n	800681a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8006798:	2117      	movs	r1, #23
 800679a:	187b      	adds	r3, r7, r1
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d13b      	bne.n	800681a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	699b      	ldr	r3, [r3, #24]
 80067a8:	2204      	movs	r2, #4
 80067aa:	4013      	ands	r3, r2
 80067ac:	2b04      	cmp	r3, #4
 80067ae:	d106      	bne.n	80067be <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d002      	beq.n	80067be <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80067b8:	187b      	adds	r3, r7, r1
 80067ba:	2200      	movs	r2, #0
 80067bc:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	699b      	ldr	r3, [r3, #24]
 80067c4:	2210      	movs	r2, #16
 80067c6:	4013      	ands	r3, r2
 80067c8:	2b10      	cmp	r3, #16
 80067ca:	d123      	bne.n	8006814 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	2210      	movs	r2, #16
 80067d2:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2204      	movs	r2, #4
 80067d8:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	2220      	movs	r2, #32
 80067e0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	685a      	ldr	r2, [r3, #4]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4929      	ldr	r1, [pc, #164]	@ (8006894 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 80067ee:	400a      	ands	r2, r1
 80067f0:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2241      	movs	r2, #65	@ 0x41
 80067f6:	2120      	movs	r1, #32
 80067f8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2242      	movs	r2, #66	@ 0x42
 80067fe:	2100      	movs	r1, #0
 8006800:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2240      	movs	r2, #64	@ 0x40
 8006806:	2100      	movs	r1, #0
 8006808:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 800680a:	2317      	movs	r3, #23
 800680c:	18fb      	adds	r3, r7, r3
 800680e:	2201      	movs	r2, #1
 8006810:	701a      	strb	r2, [r3, #0]
 8006812:	e002      	b.n	800681a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2200      	movs	r2, #0
 8006818:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800681a:	f7fc fbf5 	bl	8003008 <HAL_GetTick>
 800681e:	0002      	movs	r2, r0
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	1ad3      	subs	r3, r2, r3
 8006824:	68ba      	ldr	r2, [r7, #8]
 8006826:	429a      	cmp	r2, r3
 8006828:	d302      	bcc.n	8006830 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d11c      	bne.n	800686a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8006830:	2017      	movs	r0, #23
 8006832:	183b      	adds	r3, r7, r0
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d117      	bne.n	800686a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	699b      	ldr	r3, [r3, #24]
 8006840:	2204      	movs	r2, #4
 8006842:	4013      	ands	r3, r2
 8006844:	2b04      	cmp	r3, #4
 8006846:	d010      	beq.n	800686a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800684c:	2220      	movs	r2, #32
 800684e:	431a      	orrs	r2, r3
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2241      	movs	r2, #65	@ 0x41
 8006858:	2120      	movs	r1, #32
 800685a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2240      	movs	r2, #64	@ 0x40
 8006860:	2100      	movs	r1, #0
 8006862:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8006864:	183b      	adds	r3, r7, r0
 8006866:	2201      	movs	r2, #1
 8006868:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	699b      	ldr	r3, [r3, #24]
 8006870:	2204      	movs	r2, #4
 8006872:	4013      	ands	r3, r2
 8006874:	2b04      	cmp	r3, #4
 8006876:	d005      	beq.n	8006884 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8006878:	2317      	movs	r3, #23
 800687a:	18fb      	adds	r3, r7, r3
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d100      	bne.n	8006884 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8006882:	e776      	b.n	8006772 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8006884:	2317      	movs	r3, #23
 8006886:	18fb      	adds	r3, r7, r3
 8006888:	781b      	ldrb	r3, [r3, #0]
}
 800688a:	0018      	movs	r0, r3
 800688c:	46bd      	mov	sp, r7
 800688e:	b006      	add	sp, #24
 8006890:	bd80      	pop	{r7, pc}
 8006892:	46c0      	nop			@ (mov r8, r8)
 8006894:	fe00e800 	.word	0xfe00e800

08006898 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b08a      	sub	sp, #40	@ 0x28
 800689c:	af00      	add	r7, sp, #0
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	60b9      	str	r1, [r7, #8]
 80068a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068a4:	2327      	movs	r3, #39	@ 0x27
 80068a6:	18fb      	adds	r3, r7, r3
 80068a8:	2200      	movs	r2, #0
 80068aa:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	699b      	ldr	r3, [r3, #24]
 80068b2:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80068b4:	2300      	movs	r3, #0
 80068b6:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80068bc:	69bb      	ldr	r3, [r7, #24]
 80068be:	2210      	movs	r2, #16
 80068c0:	4013      	ands	r3, r2
 80068c2:	d100      	bne.n	80068c6 <I2C_IsErrorOccurred+0x2e>
 80068c4:	e079      	b.n	80069ba <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	2210      	movs	r2, #16
 80068cc:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80068ce:	e057      	b.n	8006980 <I2C_IsErrorOccurred+0xe8>
 80068d0:	2227      	movs	r2, #39	@ 0x27
 80068d2:	18bb      	adds	r3, r7, r2
 80068d4:	18ba      	adds	r2, r7, r2
 80068d6:	7812      	ldrb	r2, [r2, #0]
 80068d8:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	3301      	adds	r3, #1
 80068de:	d04f      	beq.n	8006980 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80068e0:	f7fc fb92 	bl	8003008 <HAL_GetTick>
 80068e4:	0002      	movs	r2, r0
 80068e6:	69fb      	ldr	r3, [r7, #28]
 80068e8:	1ad3      	subs	r3, r2, r3
 80068ea:	68ba      	ldr	r2, [r7, #8]
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d302      	bcc.n	80068f6 <I2C_IsErrorOccurred+0x5e>
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d144      	bne.n	8006980 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	685a      	ldr	r2, [r3, #4]
 80068fc:	2380      	movs	r3, #128	@ 0x80
 80068fe:	01db      	lsls	r3, r3, #7
 8006900:	4013      	ands	r3, r2
 8006902:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006904:	2013      	movs	r0, #19
 8006906:	183b      	adds	r3, r7, r0
 8006908:	68fa      	ldr	r2, [r7, #12]
 800690a:	2142      	movs	r1, #66	@ 0x42
 800690c:	5c52      	ldrb	r2, [r2, r1]
 800690e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	699a      	ldr	r2, [r3, #24]
 8006916:	2380      	movs	r3, #128	@ 0x80
 8006918:	021b      	lsls	r3, r3, #8
 800691a:	401a      	ands	r2, r3
 800691c:	2380      	movs	r3, #128	@ 0x80
 800691e:	021b      	lsls	r3, r3, #8
 8006920:	429a      	cmp	r2, r3
 8006922:	d126      	bne.n	8006972 <I2C_IsErrorOccurred+0xda>
 8006924:	697a      	ldr	r2, [r7, #20]
 8006926:	2380      	movs	r3, #128	@ 0x80
 8006928:	01db      	lsls	r3, r3, #7
 800692a:	429a      	cmp	r2, r3
 800692c:	d021      	beq.n	8006972 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 800692e:	183b      	adds	r3, r7, r0
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	2b20      	cmp	r3, #32
 8006934:	d01d      	beq.n	8006972 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	685a      	ldr	r2, [r3, #4]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	2180      	movs	r1, #128	@ 0x80
 8006942:	01c9      	lsls	r1, r1, #7
 8006944:	430a      	orrs	r2, r1
 8006946:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006948:	f7fc fb5e 	bl	8003008 <HAL_GetTick>
 800694c:	0003      	movs	r3, r0
 800694e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006950:	e00f      	b.n	8006972 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006952:	f7fc fb59 	bl	8003008 <HAL_GetTick>
 8006956:	0002      	movs	r2, r0
 8006958:	69fb      	ldr	r3, [r7, #28]
 800695a:	1ad3      	subs	r3, r2, r3
 800695c:	2b19      	cmp	r3, #25
 800695e:	d908      	bls.n	8006972 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006960:	6a3b      	ldr	r3, [r7, #32]
 8006962:	2220      	movs	r2, #32
 8006964:	4313      	orrs	r3, r2
 8006966:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006968:	2327      	movs	r3, #39	@ 0x27
 800696a:	18fb      	adds	r3, r7, r3
 800696c:	2201      	movs	r2, #1
 800696e:	701a      	strb	r2, [r3, #0]

              break;
 8006970:	e006      	b.n	8006980 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	699b      	ldr	r3, [r3, #24]
 8006978:	2220      	movs	r2, #32
 800697a:	4013      	ands	r3, r2
 800697c:	2b20      	cmp	r3, #32
 800697e:	d1e8      	bne.n	8006952 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	699b      	ldr	r3, [r3, #24]
 8006986:	2220      	movs	r2, #32
 8006988:	4013      	ands	r3, r2
 800698a:	2b20      	cmp	r3, #32
 800698c:	d004      	beq.n	8006998 <I2C_IsErrorOccurred+0x100>
 800698e:	2327      	movs	r3, #39	@ 0x27
 8006990:	18fb      	adds	r3, r7, r3
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d09b      	beq.n	80068d0 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006998:	2327      	movs	r3, #39	@ 0x27
 800699a:	18fb      	adds	r3, r7, r3
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d103      	bne.n	80069aa <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	2220      	movs	r2, #32
 80069a8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80069aa:	6a3b      	ldr	r3, [r7, #32]
 80069ac:	2204      	movs	r2, #4
 80069ae:	4313      	orrs	r3, r2
 80069b0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80069b2:	2327      	movs	r3, #39	@ 0x27
 80069b4:	18fb      	adds	r3, r7, r3
 80069b6:	2201      	movs	r2, #1
 80069b8:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	699b      	ldr	r3, [r3, #24]
 80069c0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80069c2:	69ba      	ldr	r2, [r7, #24]
 80069c4:	2380      	movs	r3, #128	@ 0x80
 80069c6:	005b      	lsls	r3, r3, #1
 80069c8:	4013      	ands	r3, r2
 80069ca:	d00c      	beq.n	80069e6 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80069cc:	6a3b      	ldr	r3, [r7, #32]
 80069ce:	2201      	movs	r2, #1
 80069d0:	4313      	orrs	r3, r2
 80069d2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2280      	movs	r2, #128	@ 0x80
 80069da:	0052      	lsls	r2, r2, #1
 80069dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80069de:	2327      	movs	r3, #39	@ 0x27
 80069e0:	18fb      	adds	r3, r7, r3
 80069e2:	2201      	movs	r2, #1
 80069e4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80069e6:	69ba      	ldr	r2, [r7, #24]
 80069e8:	2380      	movs	r3, #128	@ 0x80
 80069ea:	00db      	lsls	r3, r3, #3
 80069ec:	4013      	ands	r3, r2
 80069ee:	d00c      	beq.n	8006a0a <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80069f0:	6a3b      	ldr	r3, [r7, #32]
 80069f2:	2208      	movs	r2, #8
 80069f4:	4313      	orrs	r3, r2
 80069f6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	2280      	movs	r2, #128	@ 0x80
 80069fe:	00d2      	lsls	r2, r2, #3
 8006a00:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006a02:	2327      	movs	r3, #39	@ 0x27
 8006a04:	18fb      	adds	r3, r7, r3
 8006a06:	2201      	movs	r2, #1
 8006a08:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006a0a:	69ba      	ldr	r2, [r7, #24]
 8006a0c:	2380      	movs	r3, #128	@ 0x80
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	4013      	ands	r3, r2
 8006a12:	d00c      	beq.n	8006a2e <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006a14:	6a3b      	ldr	r3, [r7, #32]
 8006a16:	2202      	movs	r2, #2
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	2280      	movs	r2, #128	@ 0x80
 8006a22:	0092      	lsls	r2, r2, #2
 8006a24:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006a26:	2327      	movs	r3, #39	@ 0x27
 8006a28:	18fb      	adds	r3, r7, r3
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8006a2e:	2327      	movs	r3, #39	@ 0x27
 8006a30:	18fb      	adds	r3, r7, r3
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d01d      	beq.n	8006a74 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	0018      	movs	r0, r3
 8006a3c:	f7ff fd01 	bl	8006442 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	685a      	ldr	r2, [r3, #4]
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	490e      	ldr	r1, [pc, #56]	@ (8006a84 <I2C_IsErrorOccurred+0x1ec>)
 8006a4c:	400a      	ands	r2, r1
 8006a4e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a54:	6a3b      	ldr	r3, [r7, #32]
 8006a56:	431a      	orrs	r2, r3
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2241      	movs	r2, #65	@ 0x41
 8006a60:	2120      	movs	r1, #32
 8006a62:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2242      	movs	r2, #66	@ 0x42
 8006a68:	2100      	movs	r1, #0
 8006a6a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2240      	movs	r2, #64	@ 0x40
 8006a70:	2100      	movs	r1, #0
 8006a72:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8006a74:	2327      	movs	r3, #39	@ 0x27
 8006a76:	18fb      	adds	r3, r7, r3
 8006a78:	781b      	ldrb	r3, [r3, #0]
}
 8006a7a:	0018      	movs	r0, r3
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	b00a      	add	sp, #40	@ 0x28
 8006a80:	bd80      	pop	{r7, pc}
 8006a82:	46c0      	nop			@ (mov r8, r8)
 8006a84:	fe00e800 	.word	0xfe00e800

08006a88 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006a88:	b590      	push	{r4, r7, lr}
 8006a8a:	b087      	sub	sp, #28
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	60f8      	str	r0, [r7, #12]
 8006a90:	0008      	movs	r0, r1
 8006a92:	0011      	movs	r1, r2
 8006a94:	607b      	str	r3, [r7, #4]
 8006a96:	240a      	movs	r4, #10
 8006a98:	193b      	adds	r3, r7, r4
 8006a9a:	1c02      	adds	r2, r0, #0
 8006a9c:	801a      	strh	r2, [r3, #0]
 8006a9e:	2009      	movs	r0, #9
 8006aa0:	183b      	adds	r3, r7, r0
 8006aa2:	1c0a      	adds	r2, r1, #0
 8006aa4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006aa6:	193b      	adds	r3, r7, r4
 8006aa8:	881b      	ldrh	r3, [r3, #0]
 8006aaa:	059b      	lsls	r3, r3, #22
 8006aac:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006aae:	183b      	adds	r3, r7, r0
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	0419      	lsls	r1, r3, #16
 8006ab4:	23ff      	movs	r3, #255	@ 0xff
 8006ab6:	041b      	lsls	r3, r3, #16
 8006ab8:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006aba:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	005b      	lsls	r3, r3, #1
 8006ac6:	085b      	lsrs	r3, r3, #1
 8006ac8:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ad2:	0d51      	lsrs	r1, r2, #21
 8006ad4:	2280      	movs	r2, #128	@ 0x80
 8006ad6:	00d2      	lsls	r2, r2, #3
 8006ad8:	400a      	ands	r2, r1
 8006ada:	4907      	ldr	r1, [pc, #28]	@ (8006af8 <I2C_TransferConfig+0x70>)
 8006adc:	430a      	orrs	r2, r1
 8006ade:	43d2      	mvns	r2, r2
 8006ae0:	401a      	ands	r2, r3
 8006ae2:	0011      	movs	r1, r2
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	697a      	ldr	r2, [r7, #20]
 8006aea:	430a      	orrs	r2, r1
 8006aec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006aee:	46c0      	nop			@ (mov r8, r8)
 8006af0:	46bd      	mov	sp, r7
 8006af2:	b007      	add	sp, #28
 8006af4:	bd90      	pop	{r4, r7, pc}
 8006af6:	46c0      	nop			@ (mov r8, r8)
 8006af8:	03ff63ff 	.word	0x03ff63ff

08006afc <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b084      	sub	sp, #16
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	000a      	movs	r2, r1
 8006b06:	1cbb      	adds	r3, r7, #2
 8006b08:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	60fb      	str	r3, [r7, #12]

#if defined(HAL_DMA_MODULE_ENABLED)
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b12:	4b3c      	ldr	r3, [pc, #240]	@ (8006c04 <I2C_Enable_IRQ+0x108>)
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d035      	beq.n	8006b84 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8006b1c:	4b3a      	ldr	r3, [pc, #232]	@ (8006c08 <I2C_Enable_IRQ+0x10c>)
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d030      	beq.n	8006b84 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8006b26:	4b39      	ldr	r3, [pc, #228]	@ (8006c0c <I2C_Enable_IRQ+0x110>)
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d02b      	beq.n	8006b84 <I2C_Enable_IRQ+0x88>
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006b2c:	1cbb      	adds	r3, r7, #2
 8006b2e:	2200      	movs	r2, #0
 8006b30:	5e9b      	ldrsh	r3, [r3, r2]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	da03      	bge.n	8006b3e <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	22b8      	movs	r2, #184	@ 0xb8
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006b3e:	1cbb      	adds	r3, r7, #2
 8006b40:	881b      	ldrh	r3, [r3, #0]
 8006b42:	2201      	movs	r2, #1
 8006b44:	4013      	ands	r3, r2
 8006b46:	d003      	beq.n	8006b50 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	22f2      	movs	r2, #242	@ 0xf2
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006b50:	1cbb      	adds	r3, r7, #2
 8006b52:	881b      	ldrh	r3, [r3, #0]
 8006b54:	2202      	movs	r2, #2
 8006b56:	4013      	ands	r3, r2
 8006b58:	d003      	beq.n	8006b62 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	22f4      	movs	r2, #244	@ 0xf4
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006b62:	1cbb      	adds	r3, r7, #2
 8006b64:	881b      	ldrh	r3, [r3, #0]
 8006b66:	2b10      	cmp	r3, #16
 8006b68:	d103      	bne.n	8006b72 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2290      	movs	r2, #144	@ 0x90
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006b72:	1cbb      	adds	r3, r7, #2
 8006b74:	881b      	ldrh	r3, [r3, #0]
 8006b76:	2b20      	cmp	r3, #32
 8006b78:	d137      	bne.n	8006bea <I2C_Enable_IRQ+0xee>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2220      	movs	r2, #32
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006b82:	e032      	b.n	8006bea <I2C_Enable_IRQ+0xee>
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006b84:	1cbb      	adds	r3, r7, #2
 8006b86:	2200      	movs	r2, #0
 8006b88:	5e9b      	ldrsh	r3, [r3, r2]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	da03      	bge.n	8006b96 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	22b8      	movs	r2, #184	@ 0xb8
 8006b92:	4313      	orrs	r3, r2
 8006b94:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006b96:	1cbb      	adds	r3, r7, #2
 8006b98:	881b      	ldrh	r3, [r3, #0]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	4013      	ands	r3, r2
 8006b9e:	d003      	beq.n	8006ba8 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	22f2      	movs	r2, #242	@ 0xf2
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006ba8:	1cbb      	adds	r3, r7, #2
 8006baa:	881b      	ldrh	r3, [r3, #0]
 8006bac:	2202      	movs	r2, #2
 8006bae:	4013      	ands	r3, r2
 8006bb0:	d003      	beq.n	8006bba <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	22f4      	movs	r2, #244	@ 0xf4
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006bba:	1cbb      	adds	r3, r7, #2
 8006bbc:	881b      	ldrh	r3, [r3, #0]
 8006bbe:	2b10      	cmp	r3, #16
 8006bc0:	d103      	bne.n	8006bca <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2290      	movs	r2, #144	@ 0x90
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006bca:	1cbb      	adds	r3, r7, #2
 8006bcc:	881b      	ldrh	r3, [r3, #0]
 8006bce:	2b20      	cmp	r3, #32
 8006bd0:	d103      	bne.n	8006bda <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2260      	movs	r2, #96	@ 0x60
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006bda:	1cbb      	adds	r3, r7, #2
 8006bdc:	881b      	ldrh	r3, [r3, #0]
 8006bde:	2b40      	cmp	r3, #64	@ 0x40
 8006be0:	d103      	bne.n	8006bea <I2C_Enable_IRQ+0xee>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2240      	movs	r2, #64	@ 0x40
 8006be6:	4313      	orrs	r3, r2
 8006be8:	60fb      	str	r3, [r7, #12]
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	6819      	ldr	r1, [r3, #0]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	68fa      	ldr	r2, [r7, #12]
 8006bf6:	430a      	orrs	r2, r1
 8006bf8:	601a      	str	r2, [r3, #0]
}
 8006bfa:	46c0      	nop			@ (mov r8, r8)
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	b004      	add	sp, #16
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	46c0      	nop			@ (mov r8, r8)
 8006c04:	080053dd 	.word	0x080053dd
 8006c08:	0800582d 	.word	0x0800582d
 8006c0c:	080055d5 	.word	0x080055d5

08006c10 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	000a      	movs	r2, r1
 8006c1a:	1cbb      	adds	r3, r7, #2
 8006c1c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006c22:	1cbb      	adds	r3, r7, #2
 8006c24:	881b      	ldrh	r3, [r3, #0]
 8006c26:	2201      	movs	r2, #1
 8006c28:	4013      	ands	r3, r2
 8006c2a:	d010      	beq.n	8006c4e <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2242      	movs	r2, #66	@ 0x42
 8006c30:	4313      	orrs	r3, r2
 8006c32:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2241      	movs	r2, #65	@ 0x41
 8006c38:	5c9b      	ldrb	r3, [r3, r2]
 8006c3a:	b2db      	uxtb	r3, r3
 8006c3c:	001a      	movs	r2, r3
 8006c3e:	2328      	movs	r3, #40	@ 0x28
 8006c40:	4013      	ands	r3, r2
 8006c42:	2b28      	cmp	r3, #40	@ 0x28
 8006c44:	d003      	beq.n	8006c4e <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	22b0      	movs	r2, #176	@ 0xb0
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006c4e:	1cbb      	adds	r3, r7, #2
 8006c50:	881b      	ldrh	r3, [r3, #0]
 8006c52:	2202      	movs	r2, #2
 8006c54:	4013      	ands	r3, r2
 8006c56:	d010      	beq.n	8006c7a <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2244      	movs	r2, #68	@ 0x44
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2241      	movs	r2, #65	@ 0x41
 8006c64:	5c9b      	ldrb	r3, [r3, r2]
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	001a      	movs	r2, r3
 8006c6a:	2328      	movs	r3, #40	@ 0x28
 8006c6c:	4013      	ands	r3, r2
 8006c6e:	2b28      	cmp	r3, #40	@ 0x28
 8006c70:	d003      	beq.n	8006c7a <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	22b0      	movs	r2, #176	@ 0xb0
 8006c76:	4313      	orrs	r3, r2
 8006c78:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006c7a:	1cbb      	adds	r3, r7, #2
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	5e9b      	ldrsh	r3, [r3, r2]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	da03      	bge.n	8006c8c <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	22b8      	movs	r2, #184	@ 0xb8
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006c8c:	1cbb      	adds	r3, r7, #2
 8006c8e:	881b      	ldrh	r3, [r3, #0]
 8006c90:	2b10      	cmp	r3, #16
 8006c92:	d103      	bne.n	8006c9c <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2290      	movs	r2, #144	@ 0x90
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006c9c:	1cbb      	adds	r3, r7, #2
 8006c9e:	881b      	ldrh	r3, [r3, #0]
 8006ca0:	2b20      	cmp	r3, #32
 8006ca2:	d103      	bne.n	8006cac <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2220      	movs	r2, #32
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006cac:	1cbb      	adds	r3, r7, #2
 8006cae:	881b      	ldrh	r3, [r3, #0]
 8006cb0:	2b40      	cmp	r3, #64	@ 0x40
 8006cb2:	d103      	bne.n	8006cbc <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2240      	movs	r2, #64	@ 0x40
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	43d9      	mvns	r1, r3
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	400a      	ands	r2, r1
 8006ccc:	601a      	str	r2, [r3, #0]
}
 8006cce:	46c0      	nop			@ (mov r8, r8)
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	b004      	add	sp, #16
 8006cd4:	bd80      	pop	{r7, pc}
	...

08006cd8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b082      	sub	sp, #8
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2241      	movs	r2, #65	@ 0x41
 8006ce6:	5c9b      	ldrb	r3, [r3, r2]
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	2b20      	cmp	r3, #32
 8006cec:	d138      	bne.n	8006d60 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2240      	movs	r2, #64	@ 0x40
 8006cf2:	5c9b      	ldrb	r3, [r3, r2]
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d101      	bne.n	8006cfc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006cf8:	2302      	movs	r3, #2
 8006cfa:	e032      	b.n	8006d62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2240      	movs	r2, #64	@ 0x40
 8006d00:	2101      	movs	r1, #1
 8006d02:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2241      	movs	r2, #65	@ 0x41
 8006d08:	2124      	movs	r1, #36	@ 0x24
 8006d0a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	2101      	movs	r1, #1
 8006d18:	438a      	bics	r2, r1
 8006d1a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4911      	ldr	r1, [pc, #68]	@ (8006d6c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8006d28:	400a      	ands	r2, r1
 8006d2a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	6819      	ldr	r1, [r3, #0]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	683a      	ldr	r2, [r7, #0]
 8006d38:	430a      	orrs	r2, r1
 8006d3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	2101      	movs	r1, #1
 8006d48:	430a      	orrs	r2, r1
 8006d4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2241      	movs	r2, #65	@ 0x41
 8006d50:	2120      	movs	r1, #32
 8006d52:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2240      	movs	r2, #64	@ 0x40
 8006d58:	2100      	movs	r1, #0
 8006d5a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	e000      	b.n	8006d62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006d60:	2302      	movs	r3, #2
  }
}
 8006d62:	0018      	movs	r0, r3
 8006d64:	46bd      	mov	sp, r7
 8006d66:	b002      	add	sp, #8
 8006d68:	bd80      	pop	{r7, pc}
 8006d6a:	46c0      	nop			@ (mov r8, r8)
 8006d6c:	ffffefff 	.word	0xffffefff

08006d70 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2241      	movs	r2, #65	@ 0x41
 8006d7e:	5c9b      	ldrb	r3, [r3, r2]
 8006d80:	b2db      	uxtb	r3, r3
 8006d82:	2b20      	cmp	r3, #32
 8006d84:	d139      	bne.n	8006dfa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2240      	movs	r2, #64	@ 0x40
 8006d8a:	5c9b      	ldrb	r3, [r3, r2]
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d101      	bne.n	8006d94 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006d90:	2302      	movs	r3, #2
 8006d92:	e033      	b.n	8006dfc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2240      	movs	r2, #64	@ 0x40
 8006d98:	2101      	movs	r1, #1
 8006d9a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2241      	movs	r2, #65	@ 0x41
 8006da0:	2124      	movs	r1, #36	@ 0x24
 8006da2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	2101      	movs	r1, #1
 8006db0:	438a      	bics	r2, r1
 8006db2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	4a11      	ldr	r2, [pc, #68]	@ (8006e04 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8006dc0:	4013      	ands	r3, r2
 8006dc2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	021b      	lsls	r3, r3, #8
 8006dc8:	68fa      	ldr	r2, [r7, #12]
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	68fa      	ldr	r2, [r7, #12]
 8006dd4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	2101      	movs	r1, #1
 8006de2:	430a      	orrs	r2, r1
 8006de4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2241      	movs	r2, #65	@ 0x41
 8006dea:	2120      	movs	r1, #32
 8006dec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2240      	movs	r2, #64	@ 0x40
 8006df2:	2100      	movs	r1, #0
 8006df4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006df6:	2300      	movs	r3, #0
 8006df8:	e000      	b.n	8006dfc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006dfa:	2302      	movs	r3, #2
  }
}
 8006dfc:	0018      	movs	r0, r3
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	b004      	add	sp, #16
 8006e02:	bd80      	pop	{r7, pc}
 8006e04:	fffff0ff 	.word	0xfffff0ff

08006e08 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b086      	sub	sp, #24
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d101      	bne.n	8006e1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	e20f      	b.n	800723a <HAL_RCC_OscConfig+0x432>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	4013      	ands	r3, r2
 8006e22:	d100      	bne.n	8006e26 <HAL_RCC_OscConfig+0x1e>
 8006e24:	e069      	b.n	8006efa <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e26:	4bc8      	ldr	r3, [pc, #800]	@ (8007148 <HAL_RCC_OscConfig+0x340>)
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	2238      	movs	r2, #56	@ 0x38
 8006e2c:	4013      	ands	r3, r2
 8006e2e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	2b08      	cmp	r3, #8
 8006e34:	d105      	bne.n	8006e42 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d15d      	bne.n	8006efa <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	e1fb      	b.n	800723a <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	685a      	ldr	r2, [r3, #4]
 8006e46:	2380      	movs	r3, #128	@ 0x80
 8006e48:	025b      	lsls	r3, r3, #9
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d107      	bne.n	8006e5e <HAL_RCC_OscConfig+0x56>
 8006e4e:	4bbe      	ldr	r3, [pc, #760]	@ (8007148 <HAL_RCC_OscConfig+0x340>)
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	4bbd      	ldr	r3, [pc, #756]	@ (8007148 <HAL_RCC_OscConfig+0x340>)
 8006e54:	2180      	movs	r1, #128	@ 0x80
 8006e56:	0249      	lsls	r1, r1, #9
 8006e58:	430a      	orrs	r2, r1
 8006e5a:	601a      	str	r2, [r3, #0]
 8006e5c:	e020      	b.n	8006ea0 <HAL_RCC_OscConfig+0x98>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	685a      	ldr	r2, [r3, #4]
 8006e62:	23a0      	movs	r3, #160	@ 0xa0
 8006e64:	02db      	lsls	r3, r3, #11
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d10e      	bne.n	8006e88 <HAL_RCC_OscConfig+0x80>
 8006e6a:	4bb7      	ldr	r3, [pc, #732]	@ (8007148 <HAL_RCC_OscConfig+0x340>)
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	4bb6      	ldr	r3, [pc, #728]	@ (8007148 <HAL_RCC_OscConfig+0x340>)
 8006e70:	2180      	movs	r1, #128	@ 0x80
 8006e72:	02c9      	lsls	r1, r1, #11
 8006e74:	430a      	orrs	r2, r1
 8006e76:	601a      	str	r2, [r3, #0]
 8006e78:	4bb3      	ldr	r3, [pc, #716]	@ (8007148 <HAL_RCC_OscConfig+0x340>)
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	4bb2      	ldr	r3, [pc, #712]	@ (8007148 <HAL_RCC_OscConfig+0x340>)
 8006e7e:	2180      	movs	r1, #128	@ 0x80
 8006e80:	0249      	lsls	r1, r1, #9
 8006e82:	430a      	orrs	r2, r1
 8006e84:	601a      	str	r2, [r3, #0]
 8006e86:	e00b      	b.n	8006ea0 <HAL_RCC_OscConfig+0x98>
 8006e88:	4baf      	ldr	r3, [pc, #700]	@ (8007148 <HAL_RCC_OscConfig+0x340>)
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	4bae      	ldr	r3, [pc, #696]	@ (8007148 <HAL_RCC_OscConfig+0x340>)
 8006e8e:	49af      	ldr	r1, [pc, #700]	@ (800714c <HAL_RCC_OscConfig+0x344>)
 8006e90:	400a      	ands	r2, r1
 8006e92:	601a      	str	r2, [r3, #0]
 8006e94:	4bac      	ldr	r3, [pc, #688]	@ (8007148 <HAL_RCC_OscConfig+0x340>)
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	4bab      	ldr	r3, [pc, #684]	@ (8007148 <HAL_RCC_OscConfig+0x340>)
 8006e9a:	49ad      	ldr	r1, [pc, #692]	@ (8007150 <HAL_RCC_OscConfig+0x348>)
 8006e9c:	400a      	ands	r2, r1
 8006e9e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d014      	beq.n	8006ed2 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ea8:	f7fc f8ae 	bl	8003008 <HAL_GetTick>
 8006eac:	0003      	movs	r3, r0
 8006eae:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006eb0:	e008      	b.n	8006ec4 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8006eb2:	f7fc f8a9 	bl	8003008 <HAL_GetTick>
 8006eb6:	0002      	movs	r2, r0
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	1ad3      	subs	r3, r2, r3
 8006ebc:	2b64      	cmp	r3, #100	@ 0x64
 8006ebe:	d901      	bls.n	8006ec4 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8006ec0:	2303      	movs	r3, #3
 8006ec2:	e1ba      	b.n	800723a <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006ec4:	4ba0      	ldr	r3, [pc, #640]	@ (8007148 <HAL_RCC_OscConfig+0x340>)
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	2380      	movs	r3, #128	@ 0x80
 8006eca:	029b      	lsls	r3, r3, #10
 8006ecc:	4013      	ands	r3, r2
 8006ece:	d0f0      	beq.n	8006eb2 <HAL_RCC_OscConfig+0xaa>
 8006ed0:	e013      	b.n	8006efa <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ed2:	f7fc f899 	bl	8003008 <HAL_GetTick>
 8006ed6:	0003      	movs	r3, r0
 8006ed8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006eda:	e008      	b.n	8006eee <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8006edc:	f7fc f894 	bl	8003008 <HAL_GetTick>
 8006ee0:	0002      	movs	r2, r0
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	1ad3      	subs	r3, r2, r3
 8006ee6:	2b64      	cmp	r3, #100	@ 0x64
 8006ee8:	d901      	bls.n	8006eee <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8006eea:	2303      	movs	r3, #3
 8006eec:	e1a5      	b.n	800723a <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006eee:	4b96      	ldr	r3, [pc, #600]	@ (8007148 <HAL_RCC_OscConfig+0x340>)
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	2380      	movs	r3, #128	@ 0x80
 8006ef4:	029b      	lsls	r3, r3, #10
 8006ef6:	4013      	ands	r3, r2
 8006ef8:	d1f0      	bne.n	8006edc <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	2202      	movs	r2, #2
 8006f00:	4013      	ands	r3, r2
 8006f02:	d100      	bne.n	8006f06 <HAL_RCC_OscConfig+0xfe>
 8006f04:	e086      	b.n	8007014 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f06:	4b90      	ldr	r3, [pc, #576]	@ (8007148 <HAL_RCC_OscConfig+0x340>)
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	2238      	movs	r2, #56	@ 0x38
 8006f0c:	4013      	ands	r3, r2
 8006f0e:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d12f      	bne.n	8006f76 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	68db      	ldr	r3, [r3, #12]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d101      	bne.n	8006f22 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	e18b      	b.n	800723a <HAL_RCC_OscConfig+0x432>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f22:	4b89      	ldr	r3, [pc, #548]	@ (8007148 <HAL_RCC_OscConfig+0x340>)
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	4a8b      	ldr	r2, [pc, #556]	@ (8007154 <HAL_RCC_OscConfig+0x34c>)
 8006f28:	4013      	ands	r3, r2
 8006f2a:	0019      	movs	r1, r3
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	695b      	ldr	r3, [r3, #20]
 8006f30:	021a      	lsls	r2, r3, #8
 8006f32:	4b85      	ldr	r3, [pc, #532]	@ (8007148 <HAL_RCC_OscConfig+0x340>)
 8006f34:	430a      	orrs	r2, r1
 8006f36:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d112      	bne.n	8006f64 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8006f3e:	4b82      	ldr	r3, [pc, #520]	@ (8007148 <HAL_RCC_OscConfig+0x340>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a85      	ldr	r2, [pc, #532]	@ (8007158 <HAL_RCC_OscConfig+0x350>)
 8006f44:	4013      	ands	r3, r2
 8006f46:	0019      	movs	r1, r3
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	691a      	ldr	r2, [r3, #16]
 8006f4c:	4b7e      	ldr	r3, [pc, #504]	@ (8007148 <HAL_RCC_OscConfig+0x340>)
 8006f4e:	430a      	orrs	r2, r1
 8006f50:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8006f52:	4b7d      	ldr	r3, [pc, #500]	@ (8007148 <HAL_RCC_OscConfig+0x340>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	0adb      	lsrs	r3, r3, #11
 8006f58:	2207      	movs	r2, #7
 8006f5a:	4013      	ands	r3, r2
 8006f5c:	4a7f      	ldr	r2, [pc, #508]	@ (800715c <HAL_RCC_OscConfig+0x354>)
 8006f5e:	40da      	lsrs	r2, r3
 8006f60:	4b7f      	ldr	r3, [pc, #508]	@ (8007160 <HAL_RCC_OscConfig+0x358>)
 8006f62:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006f64:	4b7f      	ldr	r3, [pc, #508]	@ (8007164 <HAL_RCC_OscConfig+0x35c>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	0018      	movs	r0, r3
 8006f6a:	f7fb fff1 	bl	8002f50 <HAL_InitTick>
 8006f6e:	1e03      	subs	r3, r0, #0
 8006f70:	d050      	beq.n	8007014 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	e161      	b.n	800723a <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	68db      	ldr	r3, [r3, #12]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d030      	beq.n	8006fe0 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8006f7e:	4b72      	ldr	r3, [pc, #456]	@ (8007148 <HAL_RCC_OscConfig+0x340>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a75      	ldr	r2, [pc, #468]	@ (8007158 <HAL_RCC_OscConfig+0x350>)
 8006f84:	4013      	ands	r3, r2
 8006f86:	0019      	movs	r1, r3
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	691a      	ldr	r2, [r3, #16]
 8006f8c:	4b6e      	ldr	r3, [pc, #440]	@ (8007148 <HAL_RCC_OscConfig+0x340>)
 8006f8e:	430a      	orrs	r2, r1
 8006f90:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8006f92:	4b6d      	ldr	r3, [pc, #436]	@ (8007148 <HAL_RCC_OscConfig+0x340>)
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	4b6c      	ldr	r3, [pc, #432]	@ (8007148 <HAL_RCC_OscConfig+0x340>)
 8006f98:	2180      	movs	r1, #128	@ 0x80
 8006f9a:	0049      	lsls	r1, r1, #1
 8006f9c:	430a      	orrs	r2, r1
 8006f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fa0:	f7fc f832 	bl	8003008 <HAL_GetTick>
 8006fa4:	0003      	movs	r3, r0
 8006fa6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006fa8:	e008      	b.n	8006fbc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8006faa:	f7fc f82d 	bl	8003008 <HAL_GetTick>
 8006fae:	0002      	movs	r2, r0
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	1ad3      	subs	r3, r2, r3
 8006fb4:	2b02      	cmp	r3, #2
 8006fb6:	d901      	bls.n	8006fbc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006fb8:	2303      	movs	r3, #3
 8006fba:	e13e      	b.n	800723a <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006fbc:	4b62      	ldr	r3, [pc, #392]	@ (8007148 <HAL_RCC_OscConfig+0x340>)
 8006fbe:	681a      	ldr	r2, [r3, #0]
 8006fc0:	2380      	movs	r3, #128	@ 0x80
 8006fc2:	00db      	lsls	r3, r3, #3
 8006fc4:	4013      	ands	r3, r2
 8006fc6:	d0f0      	beq.n	8006faa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fc8:	4b5f      	ldr	r3, [pc, #380]	@ (8007148 <HAL_RCC_OscConfig+0x340>)
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	4a61      	ldr	r2, [pc, #388]	@ (8007154 <HAL_RCC_OscConfig+0x34c>)
 8006fce:	4013      	ands	r3, r2
 8006fd0:	0019      	movs	r1, r3
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	695b      	ldr	r3, [r3, #20]
 8006fd6:	021a      	lsls	r2, r3, #8
 8006fd8:	4b5b      	ldr	r3, [pc, #364]	@ (8007148 <HAL_RCC_OscConfig+0x340>)
 8006fda:	430a      	orrs	r2, r1
 8006fdc:	605a      	str	r2, [r3, #4]
 8006fde:	e019      	b.n	8007014 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8006fe0:	4b59      	ldr	r3, [pc, #356]	@ (8007148 <HAL_RCC_OscConfig+0x340>)
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	4b58      	ldr	r3, [pc, #352]	@ (8007148 <HAL_RCC_OscConfig+0x340>)
 8006fe6:	4960      	ldr	r1, [pc, #384]	@ (8007168 <HAL_RCC_OscConfig+0x360>)
 8006fe8:	400a      	ands	r2, r1
 8006fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fec:	f7fc f80c 	bl	8003008 <HAL_GetTick>
 8006ff0:	0003      	movs	r3, r0
 8006ff2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006ff4:	e008      	b.n	8007008 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8006ff6:	f7fc f807 	bl	8003008 <HAL_GetTick>
 8006ffa:	0002      	movs	r2, r0
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	1ad3      	subs	r3, r2, r3
 8007000:	2b02      	cmp	r3, #2
 8007002:	d901      	bls.n	8007008 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8007004:	2303      	movs	r3, #3
 8007006:	e118      	b.n	800723a <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007008:	4b4f      	ldr	r3, [pc, #316]	@ (8007148 <HAL_RCC_OscConfig+0x340>)
 800700a:	681a      	ldr	r2, [r3, #0]
 800700c:	2380      	movs	r3, #128	@ 0x80
 800700e:	00db      	lsls	r3, r3, #3
 8007010:	4013      	ands	r3, r2
 8007012:	d1f0      	bne.n	8006ff6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	2208      	movs	r2, #8
 800701a:	4013      	ands	r3, r2
 800701c:	d042      	beq.n	80070a4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800701e:	4b4a      	ldr	r3, [pc, #296]	@ (8007148 <HAL_RCC_OscConfig+0x340>)
 8007020:	689b      	ldr	r3, [r3, #8]
 8007022:	2238      	movs	r2, #56	@ 0x38
 8007024:	4013      	ands	r3, r2
 8007026:	2b18      	cmp	r3, #24
 8007028:	d105      	bne.n	8007036 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	699b      	ldr	r3, [r3, #24]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d138      	bne.n	80070a4 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8007032:	2301      	movs	r3, #1
 8007034:	e101      	b.n	800723a <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	699b      	ldr	r3, [r3, #24]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d019      	beq.n	8007072 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800703e:	4b42      	ldr	r3, [pc, #264]	@ (8007148 <HAL_RCC_OscConfig+0x340>)
 8007040:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007042:	4b41      	ldr	r3, [pc, #260]	@ (8007148 <HAL_RCC_OscConfig+0x340>)
 8007044:	2101      	movs	r1, #1
 8007046:	430a      	orrs	r2, r1
 8007048:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800704a:	f7fb ffdd 	bl	8003008 <HAL_GetTick>
 800704e:	0003      	movs	r3, r0
 8007050:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8007052:	e008      	b.n	8007066 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8007054:	f7fb ffd8 	bl	8003008 <HAL_GetTick>
 8007058:	0002      	movs	r2, r0
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	1ad3      	subs	r3, r2, r3
 800705e:	2b02      	cmp	r3, #2
 8007060:	d901      	bls.n	8007066 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8007062:	2303      	movs	r3, #3
 8007064:	e0e9      	b.n	800723a <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8007066:	4b38      	ldr	r3, [pc, #224]	@ (8007148 <HAL_RCC_OscConfig+0x340>)
 8007068:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800706a:	2202      	movs	r2, #2
 800706c:	4013      	ands	r3, r2
 800706e:	d0f1      	beq.n	8007054 <HAL_RCC_OscConfig+0x24c>
 8007070:	e018      	b.n	80070a4 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8007072:	4b35      	ldr	r3, [pc, #212]	@ (8007148 <HAL_RCC_OscConfig+0x340>)
 8007074:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007076:	4b34      	ldr	r3, [pc, #208]	@ (8007148 <HAL_RCC_OscConfig+0x340>)
 8007078:	2101      	movs	r1, #1
 800707a:	438a      	bics	r2, r1
 800707c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800707e:	f7fb ffc3 	bl	8003008 <HAL_GetTick>
 8007082:	0003      	movs	r3, r0
 8007084:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8007086:	e008      	b.n	800709a <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8007088:	f7fb ffbe 	bl	8003008 <HAL_GetTick>
 800708c:	0002      	movs	r2, r0
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	1ad3      	subs	r3, r2, r3
 8007092:	2b02      	cmp	r3, #2
 8007094:	d901      	bls.n	800709a <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8007096:	2303      	movs	r3, #3
 8007098:	e0cf      	b.n	800723a <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800709a:	4b2b      	ldr	r3, [pc, #172]	@ (8007148 <HAL_RCC_OscConfig+0x340>)
 800709c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800709e:	2202      	movs	r2, #2
 80070a0:	4013      	ands	r3, r2
 80070a2:	d1f1      	bne.n	8007088 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	2204      	movs	r2, #4
 80070aa:	4013      	ands	r3, r2
 80070ac:	d100      	bne.n	80070b0 <HAL_RCC_OscConfig+0x2a8>
 80070ae:	e084      	b.n	80071ba <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80070b0:	230f      	movs	r3, #15
 80070b2:	18fb      	adds	r3, r7, r3
 80070b4:	2200      	movs	r2, #0
 80070b6:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80070b8:	4b23      	ldr	r3, [pc, #140]	@ (8007148 <HAL_RCC_OscConfig+0x340>)
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	2238      	movs	r2, #56	@ 0x38
 80070be:	4013      	ands	r3, r2
 80070c0:	2b20      	cmp	r3, #32
 80070c2:	d106      	bne.n	80070d2 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d000      	beq.n	80070ce <HAL_RCC_OscConfig+0x2c6>
 80070cc:	e075      	b.n	80071ba <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	e0b3      	b.n	800723a <HAL_RCC_OscConfig+0x432>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	2b01      	cmp	r3, #1
 80070d8:	d106      	bne.n	80070e8 <HAL_RCC_OscConfig+0x2e0>
 80070da:	4b1b      	ldr	r3, [pc, #108]	@ (8007148 <HAL_RCC_OscConfig+0x340>)
 80070dc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80070de:	4b1a      	ldr	r3, [pc, #104]	@ (8007148 <HAL_RCC_OscConfig+0x340>)
 80070e0:	2101      	movs	r1, #1
 80070e2:	430a      	orrs	r2, r1
 80070e4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80070e6:	e01c      	b.n	8007122 <HAL_RCC_OscConfig+0x31a>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	2b05      	cmp	r3, #5
 80070ee:	d10c      	bne.n	800710a <HAL_RCC_OscConfig+0x302>
 80070f0:	4b15      	ldr	r3, [pc, #84]	@ (8007148 <HAL_RCC_OscConfig+0x340>)
 80070f2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80070f4:	4b14      	ldr	r3, [pc, #80]	@ (8007148 <HAL_RCC_OscConfig+0x340>)
 80070f6:	2104      	movs	r1, #4
 80070f8:	430a      	orrs	r2, r1
 80070fa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80070fc:	4b12      	ldr	r3, [pc, #72]	@ (8007148 <HAL_RCC_OscConfig+0x340>)
 80070fe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007100:	4b11      	ldr	r3, [pc, #68]	@ (8007148 <HAL_RCC_OscConfig+0x340>)
 8007102:	2101      	movs	r1, #1
 8007104:	430a      	orrs	r2, r1
 8007106:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007108:	e00b      	b.n	8007122 <HAL_RCC_OscConfig+0x31a>
 800710a:	4b0f      	ldr	r3, [pc, #60]	@ (8007148 <HAL_RCC_OscConfig+0x340>)
 800710c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800710e:	4b0e      	ldr	r3, [pc, #56]	@ (8007148 <HAL_RCC_OscConfig+0x340>)
 8007110:	2101      	movs	r1, #1
 8007112:	438a      	bics	r2, r1
 8007114:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007116:	4b0c      	ldr	r3, [pc, #48]	@ (8007148 <HAL_RCC_OscConfig+0x340>)
 8007118:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800711a:	4b0b      	ldr	r3, [pc, #44]	@ (8007148 <HAL_RCC_OscConfig+0x340>)
 800711c:	2104      	movs	r1, #4
 800711e:	438a      	bics	r2, r1
 8007120:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	689b      	ldr	r3, [r3, #8]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d028      	beq.n	800717c <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800712a:	f7fb ff6d 	bl	8003008 <HAL_GetTick>
 800712e:	0003      	movs	r3, r0
 8007130:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8007132:	e01d      	b.n	8007170 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007134:	f7fb ff68 	bl	8003008 <HAL_GetTick>
 8007138:	0002      	movs	r2, r0
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	1ad3      	subs	r3, r2, r3
 800713e:	4a0b      	ldr	r2, [pc, #44]	@ (800716c <HAL_RCC_OscConfig+0x364>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d915      	bls.n	8007170 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8007144:	2303      	movs	r3, #3
 8007146:	e078      	b.n	800723a <HAL_RCC_OscConfig+0x432>
 8007148:	40021000 	.word	0x40021000
 800714c:	fffeffff 	.word	0xfffeffff
 8007150:	fffbffff 	.word	0xfffbffff
 8007154:	ffff80ff 	.word	0xffff80ff
 8007158:	ffffc7ff 	.word	0xffffc7ff
 800715c:	02dc6c00 	.word	0x02dc6c00
 8007160:	200000b0 	.word	0x200000b0
 8007164:	200000b4 	.word	0x200000b4
 8007168:	fffffeff 	.word	0xfffffeff
 800716c:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8007170:	4b34      	ldr	r3, [pc, #208]	@ (8007244 <HAL_RCC_OscConfig+0x43c>)
 8007172:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007174:	2202      	movs	r2, #2
 8007176:	4013      	ands	r3, r2
 8007178:	d0dc      	beq.n	8007134 <HAL_RCC_OscConfig+0x32c>
 800717a:	e013      	b.n	80071a4 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800717c:	f7fb ff44 	bl	8003008 <HAL_GetTick>
 8007180:	0003      	movs	r3, r0
 8007182:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8007184:	e009      	b.n	800719a <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007186:	f7fb ff3f 	bl	8003008 <HAL_GetTick>
 800718a:	0002      	movs	r2, r0
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	1ad3      	subs	r3, r2, r3
 8007190:	4a2d      	ldr	r2, [pc, #180]	@ (8007248 <HAL_RCC_OscConfig+0x440>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d901      	bls.n	800719a <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8007196:	2303      	movs	r3, #3
 8007198:	e04f      	b.n	800723a <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800719a:	4b2a      	ldr	r3, [pc, #168]	@ (8007244 <HAL_RCC_OscConfig+0x43c>)
 800719c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800719e:	2202      	movs	r2, #2
 80071a0:	4013      	ands	r3, r2
 80071a2:	d1f0      	bne.n	8007186 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80071a4:	230f      	movs	r3, #15
 80071a6:	18fb      	adds	r3, r7, r3
 80071a8:	781b      	ldrb	r3, [r3, #0]
 80071aa:	2b01      	cmp	r3, #1
 80071ac:	d105      	bne.n	80071ba <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80071ae:	4b25      	ldr	r3, [pc, #148]	@ (8007244 <HAL_RCC_OscConfig+0x43c>)
 80071b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80071b2:	4b24      	ldr	r3, [pc, #144]	@ (8007244 <HAL_RCC_OscConfig+0x43c>)
 80071b4:	4925      	ldr	r1, [pc, #148]	@ (800724c <HAL_RCC_OscConfig+0x444>)
 80071b6:	400a      	ands	r2, r1
 80071b8:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_CR_HSIUSB48ON)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	2210      	movs	r2, #16
 80071c0:	4013      	ands	r3, r2
 80071c2:	d039      	beq.n	8007238 <HAL_RCC_OscConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	69db      	ldr	r3, [r3, #28]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d01b      	beq.n	8007204 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80071cc:	4b1d      	ldr	r3, [pc, #116]	@ (8007244 <HAL_RCC_OscConfig+0x43c>)
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	4b1c      	ldr	r3, [pc, #112]	@ (8007244 <HAL_RCC_OscConfig+0x43c>)
 80071d2:	2180      	movs	r1, #128	@ 0x80
 80071d4:	03c9      	lsls	r1, r1, #15
 80071d6:	430a      	orrs	r2, r1
 80071d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071da:	f7fb ff15 	bl	8003008 <HAL_GetTick>
 80071de:	0003      	movs	r3, r0
 80071e0:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 80071e2:	e008      	b.n	80071f6 <HAL_RCC_OscConfig+0x3ee>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80071e4:	f7fb ff10 	bl	8003008 <HAL_GetTick>
 80071e8:	0002      	movs	r2, r0
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	1ad3      	subs	r3, r2, r3
 80071ee:	2b02      	cmp	r3, #2
 80071f0:	d901      	bls.n	80071f6 <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 80071f2:	2303      	movs	r3, #3
 80071f4:	e021      	b.n	800723a <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 80071f6:	4b13      	ldr	r3, [pc, #76]	@ (8007244 <HAL_RCC_OscConfig+0x43c>)
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	2380      	movs	r3, #128	@ 0x80
 80071fc:	041b      	lsls	r3, r3, #16
 80071fe:	4013      	ands	r3, r2
 8007200:	d0f0      	beq.n	80071e4 <HAL_RCC_OscConfig+0x3dc>
 8007202:	e019      	b.n	8007238 <HAL_RCC_OscConfig+0x430>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007204:	4b0f      	ldr	r3, [pc, #60]	@ (8007244 <HAL_RCC_OscConfig+0x43c>)
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	4b0e      	ldr	r3, [pc, #56]	@ (8007244 <HAL_RCC_OscConfig+0x43c>)
 800720a:	4911      	ldr	r1, [pc, #68]	@ (8007250 <HAL_RCC_OscConfig+0x448>)
 800720c:	400a      	ands	r2, r1
 800720e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007210:	f7fb fefa 	bl	8003008 <HAL_GetTick>
 8007214:	0003      	movs	r3, r0
 8007216:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 8007218:	e008      	b.n	800722c <HAL_RCC_OscConfig+0x424>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800721a:	f7fb fef5 	bl	8003008 <HAL_GetTick>
 800721e:	0002      	movs	r2, r0
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	1ad3      	subs	r3, r2, r3
 8007224:	2b02      	cmp	r3, #2
 8007226:	d901      	bls.n	800722c <HAL_RCC_OscConfig+0x424>
        {
          return HAL_TIMEOUT;
 8007228:	2303      	movs	r3, #3
 800722a:	e006      	b.n	800723a <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 800722c:	4b05      	ldr	r3, [pc, #20]	@ (8007244 <HAL_RCC_OscConfig+0x43c>)
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	2380      	movs	r3, #128	@ 0x80
 8007232:	041b      	lsls	r3, r3, #16
 8007234:	4013      	ands	r3, r2
 8007236:	d1f0      	bne.n	800721a <HAL_RCC_OscConfig+0x412>
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8007238:	2300      	movs	r3, #0
}
 800723a:	0018      	movs	r0, r3
 800723c:	46bd      	mov	sp, r7
 800723e:	b006      	add	sp, #24
 8007240:	bd80      	pop	{r7, pc}
 8007242:	46c0      	nop			@ (mov r8, r8)
 8007244:	40021000 	.word	0x40021000
 8007248:	00001388 	.word	0x00001388
 800724c:	efffffff 	.word	0xefffffff
 8007250:	ffbfffff 	.word	0xffbfffff

08007254 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b084      	sub	sp, #16
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d101      	bne.n	8007268 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007264:	2301      	movs	r3, #1
 8007266:	e0f6      	b.n	8007456 <HAL_RCC_ClockConfig+0x202>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007268:	4b7d      	ldr	r3, [pc, #500]	@ (8007460 <HAL_RCC_ClockConfig+0x20c>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	2207      	movs	r2, #7
 800726e:	4013      	ands	r3, r2
 8007270:	683a      	ldr	r2, [r7, #0]
 8007272:	429a      	cmp	r2, r3
 8007274:	d91e      	bls.n	80072b4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007276:	4b7a      	ldr	r3, [pc, #488]	@ (8007460 <HAL_RCC_ClockConfig+0x20c>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	2207      	movs	r2, #7
 800727c:	4393      	bics	r3, r2
 800727e:	0019      	movs	r1, r3
 8007280:	4b77      	ldr	r3, [pc, #476]	@ (8007460 <HAL_RCC_ClockConfig+0x20c>)
 8007282:	683a      	ldr	r2, [r7, #0]
 8007284:	430a      	orrs	r2, r1
 8007286:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007288:	f7fb febe 	bl	8003008 <HAL_GetTick>
 800728c:	0003      	movs	r3, r0
 800728e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007290:	e009      	b.n	80072a6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8007292:	f7fb feb9 	bl	8003008 <HAL_GetTick>
 8007296:	0002      	movs	r2, r0
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	1ad3      	subs	r3, r2, r3
 800729c:	4a71      	ldr	r2, [pc, #452]	@ (8007464 <HAL_RCC_ClockConfig+0x210>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d901      	bls.n	80072a6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80072a2:	2303      	movs	r3, #3
 80072a4:	e0d7      	b.n	8007456 <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80072a6:	4b6e      	ldr	r3, [pc, #440]	@ (8007460 <HAL_RCC_ClockConfig+0x20c>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	2207      	movs	r2, #7
 80072ac:	4013      	ands	r3, r2
 80072ae:	683a      	ldr	r2, [r7, #0]
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d1ee      	bne.n	8007292 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	2202      	movs	r2, #2
 80072ba:	4013      	ands	r3, r2
 80072bc:	d017      	beq.n	80072ee <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	2204      	movs	r2, #4
 80072c4:	4013      	ands	r3, r2
 80072c6:	d008      	beq.n	80072da <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80072c8:	4b67      	ldr	r3, [pc, #412]	@ (8007468 <HAL_RCC_ClockConfig+0x214>)
 80072ca:	689b      	ldr	r3, [r3, #8]
 80072cc:	4a67      	ldr	r2, [pc, #412]	@ (800746c <HAL_RCC_ClockConfig+0x218>)
 80072ce:	401a      	ands	r2, r3
 80072d0:	4b65      	ldr	r3, [pc, #404]	@ (8007468 <HAL_RCC_ClockConfig+0x214>)
 80072d2:	21b0      	movs	r1, #176	@ 0xb0
 80072d4:	0109      	lsls	r1, r1, #4
 80072d6:	430a      	orrs	r2, r1
 80072d8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80072da:	4b63      	ldr	r3, [pc, #396]	@ (8007468 <HAL_RCC_ClockConfig+0x214>)
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	4a64      	ldr	r2, [pc, #400]	@ (8007470 <HAL_RCC_ClockConfig+0x21c>)
 80072e0:	4013      	ands	r3, r2
 80072e2:	0019      	movs	r1, r3
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	68da      	ldr	r2, [r3, #12]
 80072e8:	4b5f      	ldr	r3, [pc, #380]	@ (8007468 <HAL_RCC_ClockConfig+0x214>)
 80072ea:	430a      	orrs	r2, r1
 80072ec:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	2201      	movs	r2, #1
 80072f4:	4013      	ands	r3, r2
 80072f6:	d100      	bne.n	80072fa <HAL_RCC_ClockConfig+0xa6>
 80072f8:	e061      	b.n	80073be <HAL_RCC_ClockConfig+0x16a>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 80072fa:	4b5b      	ldr	r3, [pc, #364]	@ (8007468 <HAL_RCC_ClockConfig+0x214>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	221c      	movs	r2, #28
 8007300:	4393      	bics	r3, r2
 8007302:	0019      	movs	r1, r3
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	689a      	ldr	r2, [r3, #8]
 8007308:	4b57      	ldr	r3, [pc, #348]	@ (8007468 <HAL_RCC_ClockConfig+0x214>)
 800730a:	430a      	orrs	r2, r1
 800730c:	601a      	str	r2, [r3, #0]
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	2b01      	cmp	r3, #1
 8007314:	d107      	bne.n	8007326 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007316:	4b54      	ldr	r3, [pc, #336]	@ (8007468 <HAL_RCC_ClockConfig+0x214>)
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	2380      	movs	r3, #128	@ 0x80
 800731c:	029b      	lsls	r3, r3, #10
 800731e:	4013      	ands	r3, r2
 8007320:	d12b      	bne.n	800737a <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8007322:	2301      	movs	r3, #1
 8007324:	e097      	b.n	8007456 <HAL_RCC_ClockConfig+0x202>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d107      	bne.n	800733e <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800732e:	4b4e      	ldr	r3, [pc, #312]	@ (8007468 <HAL_RCC_ClockConfig+0x214>)
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	2380      	movs	r3, #128	@ 0x80
 8007334:	00db      	lsls	r3, r3, #3
 8007336:	4013      	ands	r3, r2
 8007338:	d11f      	bne.n	800737a <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 800733a:	2301      	movs	r3, #1
 800733c:	e08b      	b.n	8007456 <HAL_RCC_ClockConfig+0x202>
      }
    }
#if defined(RCC_HSI48_SUPPORT)
    /* HSIUSB48 is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSIUSB48)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	2b02      	cmp	r3, #2
 8007344:	d107      	bne.n	8007356 <HAL_RCC_ClockConfig+0x102>
    {
      /* Check the HSIUSB48 ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 8007346:	4b48      	ldr	r3, [pc, #288]	@ (8007468 <HAL_RCC_ClockConfig+0x214>)
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	2380      	movs	r3, #128	@ 0x80
 800734c:	041b      	lsls	r3, r3, #16
 800734e:	4013      	ands	r3, r2
 8007350:	d113      	bne.n	800737a <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8007352:	2301      	movs	r3, #1
 8007354:	e07f      	b.n	8007456 <HAL_RCC_ClockConfig+0x202>
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	2b03      	cmp	r3, #3
 800735c:	d106      	bne.n	800736c <HAL_RCC_ClockConfig+0x118>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800735e:	4b42      	ldr	r3, [pc, #264]	@ (8007468 <HAL_RCC_ClockConfig+0x214>)
 8007360:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007362:	2202      	movs	r2, #2
 8007364:	4013      	ands	r3, r2
 8007366:	d108      	bne.n	800737a <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8007368:	2301      	movs	r3, #1
 800736a:	e074      	b.n	8007456 <HAL_RCC_ClockConfig+0x202>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800736c:	4b3e      	ldr	r3, [pc, #248]	@ (8007468 <HAL_RCC_ClockConfig+0x214>)
 800736e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007370:	2202      	movs	r2, #2
 8007372:	4013      	ands	r3, r2
 8007374:	d101      	bne.n	800737a <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8007376:	2301      	movs	r3, #1
 8007378:	e06d      	b.n	8007456 <HAL_RCC_ClockConfig+0x202>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800737a:	4b3b      	ldr	r3, [pc, #236]	@ (8007468 <HAL_RCC_ClockConfig+0x214>)
 800737c:	689b      	ldr	r3, [r3, #8]
 800737e:	2207      	movs	r2, #7
 8007380:	4393      	bics	r3, r2
 8007382:	0019      	movs	r1, r3
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	685a      	ldr	r2, [r3, #4]
 8007388:	4b37      	ldr	r3, [pc, #220]	@ (8007468 <HAL_RCC_ClockConfig+0x214>)
 800738a:	430a      	orrs	r2, r1
 800738c:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800738e:	f7fb fe3b 	bl	8003008 <HAL_GetTick>
 8007392:	0003      	movs	r3, r0
 8007394:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007396:	e009      	b.n	80073ac <HAL_RCC_ClockConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8007398:	f7fb fe36 	bl	8003008 <HAL_GetTick>
 800739c:	0002      	movs	r2, r0
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	1ad3      	subs	r3, r2, r3
 80073a2:	4a30      	ldr	r2, [pc, #192]	@ (8007464 <HAL_RCC_ClockConfig+0x210>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d901      	bls.n	80073ac <HAL_RCC_ClockConfig+0x158>
      {
        return HAL_TIMEOUT;
 80073a8:	2303      	movs	r3, #3
 80073aa:	e054      	b.n	8007456 <HAL_RCC_ClockConfig+0x202>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073ac:	4b2e      	ldr	r3, [pc, #184]	@ (8007468 <HAL_RCC_ClockConfig+0x214>)
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	2238      	movs	r2, #56	@ 0x38
 80073b2:	401a      	ands	r2, r3
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	00db      	lsls	r3, r3, #3
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d1ec      	bne.n	8007398 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80073be:	4b28      	ldr	r3, [pc, #160]	@ (8007460 <HAL_RCC_ClockConfig+0x20c>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	2207      	movs	r2, #7
 80073c4:	4013      	ands	r3, r2
 80073c6:	683a      	ldr	r2, [r7, #0]
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d21e      	bcs.n	800740a <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073cc:	4b24      	ldr	r3, [pc, #144]	@ (8007460 <HAL_RCC_ClockConfig+0x20c>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	2207      	movs	r2, #7
 80073d2:	4393      	bics	r3, r2
 80073d4:	0019      	movs	r1, r3
 80073d6:	4b22      	ldr	r3, [pc, #136]	@ (8007460 <HAL_RCC_ClockConfig+0x20c>)
 80073d8:	683a      	ldr	r2, [r7, #0]
 80073da:	430a      	orrs	r2, r1
 80073dc:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80073de:	f7fb fe13 	bl	8003008 <HAL_GetTick>
 80073e2:	0003      	movs	r3, r0
 80073e4:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80073e6:	e009      	b.n	80073fc <HAL_RCC_ClockConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80073e8:	f7fb fe0e 	bl	8003008 <HAL_GetTick>
 80073ec:	0002      	movs	r2, r0
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	1ad3      	subs	r3, r2, r3
 80073f2:	4a1c      	ldr	r2, [pc, #112]	@ (8007464 <HAL_RCC_ClockConfig+0x210>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d901      	bls.n	80073fc <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_TIMEOUT;
 80073f8:	2303      	movs	r3, #3
 80073fa:	e02c      	b.n	8007456 <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80073fc:	4b18      	ldr	r3, [pc, #96]	@ (8007460 <HAL_RCC_ClockConfig+0x20c>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	2207      	movs	r2, #7
 8007402:	4013      	ands	r3, r2
 8007404:	683a      	ldr	r2, [r7, #0]
 8007406:	429a      	cmp	r2, r3
 8007408:	d1ee      	bne.n	80073e8 <HAL_RCC_ClockConfig+0x194>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	2204      	movs	r2, #4
 8007410:	4013      	ands	r3, r2
 8007412:	d009      	beq.n	8007428 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8007414:	4b14      	ldr	r3, [pc, #80]	@ (8007468 <HAL_RCC_ClockConfig+0x214>)
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	4a16      	ldr	r2, [pc, #88]	@ (8007474 <HAL_RCC_ClockConfig+0x220>)
 800741a:	4013      	ands	r3, r2
 800741c:	0019      	movs	r1, r3
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	691a      	ldr	r2, [r3, #16]
 8007422:	4b11      	ldr	r3, [pc, #68]	@ (8007468 <HAL_RCC_ClockConfig+0x214>)
 8007424:	430a      	orrs	r2, r1
 8007426:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8007428:	f000 f82c 	bl	8007484 <HAL_RCC_GetSysClockFreq>
 800742c:	0001      	movs	r1, r0
 800742e:	4b0e      	ldr	r3, [pc, #56]	@ (8007468 <HAL_RCC_ClockConfig+0x214>)
 8007430:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8007432:	0a1b      	lsrs	r3, r3, #8
 8007434:	220f      	movs	r2, #15
 8007436:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8007438:	4b0f      	ldr	r3, [pc, #60]	@ (8007478 <HAL_RCC_ClockConfig+0x224>)
 800743a:	0092      	lsls	r2, r2, #2
 800743c:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800743e:	221f      	movs	r2, #31
 8007440:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8007442:	000a      	movs	r2, r1
 8007444:	40da      	lsrs	r2, r3
 8007446:	4b0d      	ldr	r3, [pc, #52]	@ (800747c <HAL_RCC_ClockConfig+0x228>)
 8007448:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800744a:	4b0d      	ldr	r3, [pc, #52]	@ (8007480 <HAL_RCC_ClockConfig+0x22c>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	0018      	movs	r0, r3
 8007450:	f7fb fd7e 	bl	8002f50 <HAL_InitTick>
 8007454:	0003      	movs	r3, r0
}
 8007456:	0018      	movs	r0, r3
 8007458:	46bd      	mov	sp, r7
 800745a:	b004      	add	sp, #16
 800745c:	bd80      	pop	{r7, pc}
 800745e:	46c0      	nop			@ (mov r8, r8)
 8007460:	40022000 	.word	0x40022000
 8007464:	00001388 	.word	0x00001388
 8007468:	40021000 	.word	0x40021000
 800746c:	ffff84ff 	.word	0xffff84ff
 8007470:	fffff0ff 	.word	0xfffff0ff
 8007474:	ffff8fff 	.word	0xffff8fff
 8007478:	0800a354 	.word	0x0800a354
 800747c:	200000b0 	.word	0x200000b0
 8007480:	200000b4 	.word	0x200000b4

08007484 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b084      	sub	sp, #16
 8007488:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 800748a:	4b27      	ldr	r3, [pc, #156]	@ (8007528 <HAL_RCC_GetSysClockFreq+0xa4>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	089b      	lsrs	r3, r3, #2
 8007490:	2207      	movs	r2, #7
 8007492:	4013      	ands	r3, r2
 8007494:	3301      	adds	r3, #1
 8007496:	60bb      	str	r3, [r7, #8]
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007498:	4b23      	ldr	r3, [pc, #140]	@ (8007528 <HAL_RCC_GetSysClockFreq+0xa4>)
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	2238      	movs	r2, #56	@ 0x38
 800749e:	4013      	ands	r3, r2
 80074a0:	d10f      	bne.n	80074c2 <HAL_RCC_GetSysClockFreq+0x3e>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80074a2:	4b21      	ldr	r3, [pc, #132]	@ (8007528 <HAL_RCC_GetSysClockFreq+0xa4>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	0adb      	lsrs	r3, r3, #11
 80074a8:	2207      	movs	r2, #7
 80074aa:	4013      	ands	r3, r2
 80074ac:	2201      	movs	r2, #1
 80074ae:	409a      	lsls	r2, r3
 80074b0:	0013      	movs	r3, r2
 80074b2:	607b      	str	r3, [r7, #4]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80074b4:	6879      	ldr	r1, [r7, #4]
 80074b6:	481d      	ldr	r0, [pc, #116]	@ (800752c <HAL_RCC_GetSysClockFreq+0xa8>)
 80074b8:	f7f8 fe26 	bl	8000108 <__udivsi3>
 80074bc:	0003      	movs	r3, r0
 80074be:	60fb      	str	r3, [r7, #12]
 80074c0:	e027      	b.n	8007512 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80074c2:	4b19      	ldr	r3, [pc, #100]	@ (8007528 <HAL_RCC_GetSysClockFreq+0xa4>)
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	2238      	movs	r2, #56	@ 0x38
 80074c8:	4013      	ands	r3, r2
 80074ca:	2b08      	cmp	r3, #8
 80074cc:	d102      	bne.n	80074d4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80074ce:	4b18      	ldr	r3, [pc, #96]	@ (8007530 <HAL_RCC_GetSysClockFreq+0xac>)
 80074d0:	60fb      	str	r3, [r7, #12]
 80074d2:	e01e      	b.n	8007512 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80074d4:	4b14      	ldr	r3, [pc, #80]	@ (8007528 <HAL_RCC_GetSysClockFreq+0xa4>)
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	2238      	movs	r2, #56	@ 0x38
 80074da:	4013      	ands	r3, r2
 80074dc:	2b20      	cmp	r3, #32
 80074de:	d103      	bne.n	80074e8 <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80074e0:	2380      	movs	r3, #128	@ 0x80
 80074e2:	021b      	lsls	r3, r3, #8
 80074e4:	60fb      	str	r3, [r7, #12]
 80074e6:	e014      	b.n	8007512 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80074e8:	4b0f      	ldr	r3, [pc, #60]	@ (8007528 <HAL_RCC_GetSysClockFreq+0xa4>)
 80074ea:	689b      	ldr	r3, [r3, #8]
 80074ec:	2238      	movs	r2, #56	@ 0x38
 80074ee:	4013      	ands	r3, r2
 80074f0:	2b18      	cmp	r3, #24
 80074f2:	d103      	bne.n	80074fc <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80074f4:	23fa      	movs	r3, #250	@ 0xfa
 80074f6:	01db      	lsls	r3, r3, #7
 80074f8:	60fb      	str	r3, [r7, #12]
 80074fa:	e00a      	b.n	8007512 <HAL_RCC_GetSysClockFreq+0x8e>
  }
#if defined(RCC_HSI48_SUPPORT)
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI48)
 80074fc:	4b0a      	ldr	r3, [pc, #40]	@ (8007528 <HAL_RCC_GetSysClockFreq+0xa4>)
 80074fe:	689b      	ldr	r3, [r3, #8]
 8007500:	2238      	movs	r2, #56	@ 0x38
 8007502:	4013      	ands	r3, r2
 8007504:	2b10      	cmp	r3, #16
 8007506:	d102      	bne.n	800750e <HAL_RCC_GetSysClockFreq+0x8a>
  {
    /* HSI48 used as system clock source */
    sysclockfreq = HSI48_VALUE;
 8007508:	4b08      	ldr	r3, [pc, #32]	@ (800752c <HAL_RCC_GetSysClockFreq+0xa8>)
 800750a:	60fb      	str	r3, [r7, #12]
 800750c:	e001      	b.n	8007512 <HAL_RCC_GetSysClockFreq+0x8e>
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 800750e:	2300      	movs	r3, #0
 8007510:	60fb      	str	r3, [r7, #12]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 8007512:	68b9      	ldr	r1, [r7, #8]
 8007514:	68f8      	ldr	r0, [r7, #12]
 8007516:	f7f8 fdf7 	bl	8000108 <__udivsi3>
 800751a:	0003      	movs	r3, r0
 800751c:	60fb      	str	r3, [r7, #12]
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 800751e:	68fb      	ldr	r3, [r7, #12]
}
 8007520:	0018      	movs	r0, r3
 8007522:	46bd      	mov	sp, r7
 8007524:	b004      	add	sp, #16
 8007526:	bd80      	pop	{r7, pc}
 8007528:	40021000 	.word	0x40021000
 800752c:	02dc6c00 	.word	0x02dc6c00
 8007530:	007a1200 	.word	0x007a1200

08007534 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8007538:	f7ff ffa4 	bl	8007484 <HAL_RCC_GetSysClockFreq>
 800753c:	0001      	movs	r1, r0
 800753e:	4b09      	ldr	r3, [pc, #36]	@ (8007564 <HAL_RCC_GetHCLKFreq+0x30>)
 8007540:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8007542:	0a1b      	lsrs	r3, r3, #8
 8007544:	220f      	movs	r2, #15
 8007546:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8007548:	4b07      	ldr	r3, [pc, #28]	@ (8007568 <HAL_RCC_GetHCLKFreq+0x34>)
 800754a:	0092      	lsls	r2, r2, #2
 800754c:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800754e:	221f      	movs	r2, #31
 8007550:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8007552:	000a      	movs	r2, r1
 8007554:	40da      	lsrs	r2, r3
 8007556:	4b05      	ldr	r3, [pc, #20]	@ (800756c <HAL_RCC_GetHCLKFreq+0x38>)
 8007558:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 800755a:	4b04      	ldr	r3, [pc, #16]	@ (800756c <HAL_RCC_GetHCLKFreq+0x38>)
 800755c:	681b      	ldr	r3, [r3, #0]
}
 800755e:	0018      	movs	r0, r3
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}
 8007564:	40021000 	.word	0x40021000
 8007568:	0800a354 	.word	0x0800a354
 800756c:	200000b0 	.word	0x200000b0

08007570 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8007574:	f7ff ffde 	bl	8007534 <HAL_RCC_GetHCLKFreq>
 8007578:	0001      	movs	r1, r0
 800757a:	4b07      	ldr	r3, [pc, #28]	@ (8007598 <HAL_RCC_GetPCLK1Freq+0x28>)
 800757c:	689b      	ldr	r3, [r3, #8]
 800757e:	0b1b      	lsrs	r3, r3, #12
 8007580:	2207      	movs	r2, #7
 8007582:	401a      	ands	r2, r3
 8007584:	4b05      	ldr	r3, [pc, #20]	@ (800759c <HAL_RCC_GetPCLK1Freq+0x2c>)
 8007586:	0092      	lsls	r2, r2, #2
 8007588:	58d3      	ldr	r3, [r2, r3]
 800758a:	221f      	movs	r2, #31
 800758c:	4013      	ands	r3, r2
 800758e:	40d9      	lsrs	r1, r3
 8007590:	000b      	movs	r3, r1
}
 8007592:	0018      	movs	r0, r3
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}
 8007598:	40021000 	.word	0x40021000
 800759c:	0800a394 	.word	0x0800a394

080075a0 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b086      	sub	sp, #24
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80075a8:	2313      	movs	r3, #19
 80075aa:	18fb      	adds	r3, r7, r3
 80075ac:	2200      	movs	r2, #0
 80075ae:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80075b0:	2312      	movs	r3, #18
 80075b2:	18fb      	adds	r3, r7, r3
 80075b4:	2200      	movs	r2, #0
 80075b6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	2240      	movs	r2, #64	@ 0x40
 80075be:	4013      	ands	r3, r2
 80075c0:	d100      	bne.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x24>
 80075c2:	e079      	b.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 80075c4:	2011      	movs	r0, #17
 80075c6:	183b      	adds	r3, r7, r0
 80075c8:	2200      	movs	r2, #0
 80075ca:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80075cc:	4b6a      	ldr	r3, [pc, #424]	@ (8007778 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80075ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80075d0:	2380      	movs	r3, #128	@ 0x80
 80075d2:	055b      	lsls	r3, r3, #21
 80075d4:	4013      	ands	r3, r2
 80075d6:	d110      	bne.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80075d8:	4b67      	ldr	r3, [pc, #412]	@ (8007778 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80075da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80075dc:	4b66      	ldr	r3, [pc, #408]	@ (8007778 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80075de:	2180      	movs	r1, #128	@ 0x80
 80075e0:	0549      	lsls	r1, r1, #21
 80075e2:	430a      	orrs	r2, r1
 80075e4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80075e6:	4b64      	ldr	r3, [pc, #400]	@ (8007778 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80075e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80075ea:	2380      	movs	r3, #128	@ 0x80
 80075ec:	055b      	lsls	r3, r3, #21
 80075ee:	4013      	ands	r3, r2
 80075f0:	60bb      	str	r3, [r7, #8]
 80075f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80075f4:	183b      	adds	r3, r7, r0
 80075f6:	2201      	movs	r2, #1
 80075f8:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 80075fa:	4b5f      	ldr	r3, [pc, #380]	@ (8007778 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80075fc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80075fe:	23c0      	movs	r3, #192	@ 0xc0
 8007600:	009b      	lsls	r3, r3, #2
 8007602:	4013      	ands	r3, r2
 8007604:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d019      	beq.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	69db      	ldr	r3, [r3, #28]
 8007610:	697a      	ldr	r2, [r7, #20]
 8007612:	429a      	cmp	r2, r3
 8007614:	d014      	beq.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8007616:	4b58      	ldr	r3, [pc, #352]	@ (8007778 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007618:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800761a:	4a58      	ldr	r2, [pc, #352]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800761c:	4013      	ands	r3, r2
 800761e:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007620:	4b55      	ldr	r3, [pc, #340]	@ (8007778 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007622:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007624:	4b54      	ldr	r3, [pc, #336]	@ (8007778 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007626:	2180      	movs	r1, #128	@ 0x80
 8007628:	0249      	lsls	r1, r1, #9
 800762a:	430a      	orrs	r2, r1
 800762c:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 800762e:	4b52      	ldr	r3, [pc, #328]	@ (8007778 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007630:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007632:	4b51      	ldr	r3, [pc, #324]	@ (8007778 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007634:	4952      	ldr	r1, [pc, #328]	@ (8007780 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8007636:	400a      	ands	r2, r1
 8007638:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 800763a:	4b4f      	ldr	r3, [pc, #316]	@ (8007778 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800763c:	697a      	ldr	r2, [r7, #20]
 800763e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	2201      	movs	r2, #1
 8007644:	4013      	ands	r3, r2
 8007646:	d016      	beq.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007648:	f7fb fcde 	bl	8003008 <HAL_GetTick>
 800764c:	0003      	movs	r3, r0
 800764e:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8007650:	e00c      	b.n	800766c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007652:	f7fb fcd9 	bl	8003008 <HAL_GetTick>
 8007656:	0002      	movs	r2, r0
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	1ad3      	subs	r3, r2, r3
 800765c:	4a49      	ldr	r2, [pc, #292]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d904      	bls.n	800766c <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 8007662:	2313      	movs	r3, #19
 8007664:	18fb      	adds	r3, r7, r3
 8007666:	2203      	movs	r2, #3
 8007668:	701a      	strb	r2, [r3, #0]
          break;
 800766a:	e004      	b.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800766c:	4b42      	ldr	r3, [pc, #264]	@ (8007778 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800766e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007670:	2202      	movs	r2, #2
 8007672:	4013      	ands	r3, r2
 8007674:	d0ed      	beq.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 8007676:	2313      	movs	r3, #19
 8007678:	18fb      	adds	r3, r7, r3
 800767a:	781b      	ldrb	r3, [r3, #0]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d10a      	bne.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007680:	4b3d      	ldr	r3, [pc, #244]	@ (8007778 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007682:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007684:	4a3d      	ldr	r2, [pc, #244]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8007686:	4013      	ands	r3, r2
 8007688:	0019      	movs	r1, r3
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	69da      	ldr	r2, [r3, #28]
 800768e:	4b3a      	ldr	r3, [pc, #232]	@ (8007778 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007690:	430a      	orrs	r2, r1
 8007692:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007694:	e005      	b.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007696:	2312      	movs	r3, #18
 8007698:	18fb      	adds	r3, r7, r3
 800769a:	2213      	movs	r2, #19
 800769c:	18ba      	adds	r2, r7, r2
 800769e:	7812      	ldrb	r2, [r2, #0]
 80076a0:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80076a2:	2311      	movs	r3, #17
 80076a4:	18fb      	adds	r3, r7, r3
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d105      	bne.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80076ac:	4b32      	ldr	r3, [pc, #200]	@ (8007778 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80076ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80076b0:	4b31      	ldr	r3, [pc, #196]	@ (8007778 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80076b2:	4935      	ldr	r1, [pc, #212]	@ (8007788 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80076b4:	400a      	ands	r2, r1
 80076b6:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	2201      	movs	r2, #1
 80076be:	4013      	ands	r3, r2
 80076c0:	d009      	beq.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80076c2:	4b2d      	ldr	r3, [pc, #180]	@ (8007778 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80076c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076c6:	2203      	movs	r2, #3
 80076c8:	4393      	bics	r3, r2
 80076ca:	0019      	movs	r1, r3
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	689a      	ldr	r2, [r3, #8]
 80076d0:	4b29      	ldr	r3, [pc, #164]	@ (8007778 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80076d2:	430a      	orrs	r2, r1
 80076d4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	2202      	movs	r2, #2
 80076dc:	4013      	ands	r3, r2
 80076de:	d009      	beq.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80076e0:	4b25      	ldr	r3, [pc, #148]	@ (8007778 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80076e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076e4:	4a29      	ldr	r2, [pc, #164]	@ (800778c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80076e6:	4013      	ands	r3, r2
 80076e8:	0019      	movs	r1, r3
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	68da      	ldr	r2, [r3, #12]
 80076ee:	4b22      	ldr	r3, [pc, #136]	@ (8007778 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80076f0:	430a      	orrs	r2, r1
 80076f2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	2220      	movs	r2, #32
 80076fa:	4013      	ands	r3, r2
 80076fc:	d008      	beq.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80076fe:	4b1e      	ldr	r3, [pc, #120]	@ (8007778 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007700:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007702:	009b      	lsls	r3, r3, #2
 8007704:	0899      	lsrs	r1, r3, #2
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	699a      	ldr	r2, [r3, #24]
 800770a:	4b1b      	ldr	r3, [pc, #108]	@ (8007778 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800770c:	430a      	orrs	r2, r1
 800770e:	655a      	str	r2, [r3, #84]	@ 0x54

  }
#if defined (USB_DRD_FS)
  /*-------------------------- USB clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	2208      	movs	r2, #8
 8007716:	4013      	ands	r3, r2
 8007718:	d009      	beq.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800771a:	4b17      	ldr	r3, [pc, #92]	@ (8007778 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800771c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800771e:	4a1c      	ldr	r2, [pc, #112]	@ (8007790 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8007720:	4013      	ands	r3, r2
 8007722:	0019      	movs	r1, r3
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	695a      	ldr	r2, [r3, #20]
 8007728:	4b13      	ldr	r3, [pc, #76]	@ (8007778 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800772a:	430a      	orrs	r2, r1
 800772c:	659a      	str	r2, [r3, #88]	@ 0x58

  }
#endif /* USB_DRD_FS */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	2204      	movs	r2, #4
 8007734:	4013      	ands	r3, r2
 8007736:	d009      	beq.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8007738:	4b0f      	ldr	r3, [pc, #60]	@ (8007778 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800773a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800773c:	4a15      	ldr	r2, [pc, #84]	@ (8007794 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 800773e:	4013      	ands	r3, r2
 8007740:	0019      	movs	r1, r3
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	691a      	ldr	r2, [r3, #16]
 8007746:	4b0c      	ldr	r3, [pc, #48]	@ (8007778 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007748:	430a      	orrs	r2, r1
 800774a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	2280      	movs	r2, #128	@ 0x80
 8007752:	4013      	ands	r3, r2
 8007754:	d009      	beq.n	800776a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8007756:	4b08      	ldr	r3, [pc, #32]	@ (8007778 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	22e0      	movs	r2, #224	@ 0xe0
 800775c:	4393      	bics	r3, r2
 800775e:	0019      	movs	r1, r3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	685a      	ldr	r2, [r3, #4]
 8007764:	4b04      	ldr	r3, [pc, #16]	@ (8007778 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007766:	430a      	orrs	r2, r1
 8007768:	601a      	str	r2, [r3, #0]
  }
  return status;
 800776a:	2312      	movs	r3, #18
 800776c:	18fb      	adds	r3, r7, r3
 800776e:	781b      	ldrb	r3, [r3, #0]
}
 8007770:	0018      	movs	r0, r3
 8007772:	46bd      	mov	sp, r7
 8007774:	b006      	add	sp, #24
 8007776:	bd80      	pop	{r7, pc}
 8007778:	40021000 	.word	0x40021000
 800777c:	fffffcff 	.word	0xfffffcff
 8007780:	fffeffff 	.word	0xfffeffff
 8007784:	00001388 	.word	0x00001388
 8007788:	efffffff 	.word	0xefffffff
 800778c:	ffffcfff 	.word	0xffffcfff
 8007790:	ffffefff 	.word	0xffffefff
 8007794:	ffff3fff 	.word	0xffff3fff

08007798 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b084      	sub	sp, #16
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d101      	bne.n	80077aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	e0a8      	b.n	80078fc <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d109      	bne.n	80077c6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	685a      	ldr	r2, [r3, #4]
 80077b6:	2382      	movs	r3, #130	@ 0x82
 80077b8:	005b      	lsls	r3, r3, #1
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d009      	beq.n	80077d2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2200      	movs	r2, #0
 80077c2:	61da      	str	r2, [r3, #28]
 80077c4:	e005      	b.n	80077d2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2200      	movs	r2, #0
 80077ca:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2200      	movs	r2, #0
 80077d0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	225d      	movs	r2, #93	@ 0x5d
 80077dc:	5c9b      	ldrb	r3, [r3, r2]
 80077de:	b2db      	uxtb	r3, r3
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d107      	bne.n	80077f4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	225c      	movs	r2, #92	@ 0x5c
 80077e8:	2100      	movs	r1, #0
 80077ea:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	0018      	movs	r0, r3
 80077f0:	f7fb f8a0 	bl	8002934 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	225d      	movs	r2, #93	@ 0x5d
 80077f8:	2102      	movs	r1, #2
 80077fa:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	2140      	movs	r1, #64	@ 0x40
 8007808:	438a      	bics	r2, r1
 800780a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	68da      	ldr	r2, [r3, #12]
 8007810:	23e0      	movs	r3, #224	@ 0xe0
 8007812:	00db      	lsls	r3, r3, #3
 8007814:	429a      	cmp	r2, r3
 8007816:	d902      	bls.n	800781e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007818:	2300      	movs	r3, #0
 800781a:	60fb      	str	r3, [r7, #12]
 800781c:	e002      	b.n	8007824 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800781e:	2380      	movs	r3, #128	@ 0x80
 8007820:	015b      	lsls	r3, r3, #5
 8007822:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	68da      	ldr	r2, [r3, #12]
 8007828:	23f0      	movs	r3, #240	@ 0xf0
 800782a:	011b      	lsls	r3, r3, #4
 800782c:	429a      	cmp	r2, r3
 800782e:	d008      	beq.n	8007842 <HAL_SPI_Init+0xaa>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	68da      	ldr	r2, [r3, #12]
 8007834:	23e0      	movs	r3, #224	@ 0xe0
 8007836:	00db      	lsls	r3, r3, #3
 8007838:	429a      	cmp	r2, r3
 800783a:	d002      	beq.n	8007842 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2200      	movs	r2, #0
 8007840:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	685a      	ldr	r2, [r3, #4]
 8007846:	2382      	movs	r3, #130	@ 0x82
 8007848:	005b      	lsls	r3, r3, #1
 800784a:	401a      	ands	r2, r3
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6899      	ldr	r1, [r3, #8]
 8007850:	2384      	movs	r3, #132	@ 0x84
 8007852:	021b      	lsls	r3, r3, #8
 8007854:	400b      	ands	r3, r1
 8007856:	431a      	orrs	r2, r3
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	691b      	ldr	r3, [r3, #16]
 800785c:	2102      	movs	r1, #2
 800785e:	400b      	ands	r3, r1
 8007860:	431a      	orrs	r2, r3
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	695b      	ldr	r3, [r3, #20]
 8007866:	2101      	movs	r1, #1
 8007868:	400b      	ands	r3, r1
 800786a:	431a      	orrs	r2, r3
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6999      	ldr	r1, [r3, #24]
 8007870:	2380      	movs	r3, #128	@ 0x80
 8007872:	009b      	lsls	r3, r3, #2
 8007874:	400b      	ands	r3, r1
 8007876:	431a      	orrs	r2, r3
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	69db      	ldr	r3, [r3, #28]
 800787c:	2138      	movs	r1, #56	@ 0x38
 800787e:	400b      	ands	r3, r1
 8007880:	431a      	orrs	r2, r3
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6a1b      	ldr	r3, [r3, #32]
 8007886:	2180      	movs	r1, #128	@ 0x80
 8007888:	400b      	ands	r3, r1
 800788a:	431a      	orrs	r2, r3
 800788c:	0011      	movs	r1, r2
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007892:	2380      	movs	r3, #128	@ 0x80
 8007894:	019b      	lsls	r3, r3, #6
 8007896:	401a      	ands	r2, r3
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	430a      	orrs	r2, r1
 800789e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	699b      	ldr	r3, [r3, #24]
 80078a4:	0c1b      	lsrs	r3, r3, #16
 80078a6:	2204      	movs	r2, #4
 80078a8:	401a      	ands	r2, r3
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078ae:	2110      	movs	r1, #16
 80078b0:	400b      	ands	r3, r1
 80078b2:	431a      	orrs	r2, r3
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078b8:	2108      	movs	r1, #8
 80078ba:	400b      	ands	r3, r1
 80078bc:	431a      	orrs	r2, r3
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	68d9      	ldr	r1, [r3, #12]
 80078c2:	23f0      	movs	r3, #240	@ 0xf0
 80078c4:	011b      	lsls	r3, r3, #4
 80078c6:	400b      	ands	r3, r1
 80078c8:	431a      	orrs	r2, r3
 80078ca:	0011      	movs	r1, r2
 80078cc:	68fa      	ldr	r2, [r7, #12]
 80078ce:	2380      	movs	r3, #128	@ 0x80
 80078d0:	015b      	lsls	r3, r3, #5
 80078d2:	401a      	ands	r2, r3
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	430a      	orrs	r2, r1
 80078da:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	69da      	ldr	r2, [r3, #28]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4907      	ldr	r1, [pc, #28]	@ (8007904 <HAL_SPI_Init+0x16c>)
 80078e8:	400a      	ands	r2, r1
 80078ea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2200      	movs	r2, #0
 80078f0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	225d      	movs	r2, #93	@ 0x5d
 80078f6:	2101      	movs	r1, #1
 80078f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80078fa:	2300      	movs	r3, #0
}
 80078fc:	0018      	movs	r0, r3
 80078fe:	46bd      	mov	sp, r7
 8007900:	b004      	add	sp, #16
 8007902:	bd80      	pop	{r7, pc}
 8007904:	fffff7ff 	.word	0xfffff7ff

08007908 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b082      	sub	sp, #8
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d101      	bne.n	800791a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	e04a      	b.n	80079b0 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	223d      	movs	r2, #61	@ 0x3d
 800791e:	5c9b      	ldrb	r3, [r3, r2]
 8007920:	b2db      	uxtb	r3, r3
 8007922:	2b00      	cmp	r3, #0
 8007924:	d107      	bne.n	8007936 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	223c      	movs	r2, #60	@ 0x3c
 800792a:	2100      	movs	r1, #0
 800792c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	0018      	movs	r0, r3
 8007932:	f7fb f8a5 	bl	8002a80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	223d      	movs	r2, #61	@ 0x3d
 800793a:	2102      	movs	r1, #2
 800793c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681a      	ldr	r2, [r3, #0]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	3304      	adds	r3, #4
 8007946:	0019      	movs	r1, r3
 8007948:	0010      	movs	r0, r2
 800794a:	f000 f98d 	bl	8007c68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2248      	movs	r2, #72	@ 0x48
 8007952:	2101      	movs	r1, #1
 8007954:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	223e      	movs	r2, #62	@ 0x3e
 800795a:	2101      	movs	r1, #1
 800795c:	5499      	strb	r1, [r3, r2]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	223f      	movs	r2, #63	@ 0x3f
 8007962:	2101      	movs	r1, #1
 8007964:	5499      	strb	r1, [r3, r2]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2240      	movs	r2, #64	@ 0x40
 800796a:	2101      	movs	r1, #1
 800796c:	5499      	strb	r1, [r3, r2]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2241      	movs	r2, #65	@ 0x41
 8007972:	2101      	movs	r1, #1
 8007974:	5499      	strb	r1, [r3, r2]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2242      	movs	r2, #66	@ 0x42
 800797a:	2101      	movs	r1, #1
 800797c:	5499      	strb	r1, [r3, r2]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2243      	movs	r2, #67	@ 0x43
 8007982:	2101      	movs	r1, #1
 8007984:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2244      	movs	r2, #68	@ 0x44
 800798a:	2101      	movs	r1, #1
 800798c:	5499      	strb	r1, [r3, r2]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2245      	movs	r2, #69	@ 0x45
 8007992:	2101      	movs	r1, #1
 8007994:	5499      	strb	r1, [r3, r2]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2246      	movs	r2, #70	@ 0x46
 800799a:	2101      	movs	r1, #1
 800799c:	5499      	strb	r1, [r3, r2]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2247      	movs	r2, #71	@ 0x47
 80079a2:	2101      	movs	r1, #1
 80079a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	223d      	movs	r2, #61	@ 0x3d
 80079aa:	2101      	movs	r1, #1
 80079ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80079ae:	2300      	movs	r3, #0
}
 80079b0:	0018      	movs	r0, r3
 80079b2:	46bd      	mov	sp, r7
 80079b4:	b002      	add	sp, #8
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b082      	sub	sp, #8
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d101      	bne.n	80079ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80079c6:	2301      	movs	r3, #1
 80079c8:	e04a      	b.n	8007a60 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	223d      	movs	r2, #61	@ 0x3d
 80079ce:	5c9b      	ldrb	r3, [r3, r2]
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d107      	bne.n	80079e6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	223c      	movs	r2, #60	@ 0x3c
 80079da:	2100      	movs	r1, #0
 80079dc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	0018      	movs	r0, r3
 80079e2:	f7fb f82d 	bl	8002a40 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	223d      	movs	r2, #61	@ 0x3d
 80079ea:	2102      	movs	r1, #2
 80079ec:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681a      	ldr	r2, [r3, #0]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	3304      	adds	r3, #4
 80079f6:	0019      	movs	r1, r3
 80079f8:	0010      	movs	r0, r2
 80079fa:	f000 f935 	bl	8007c68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2248      	movs	r2, #72	@ 0x48
 8007a02:	2101      	movs	r1, #1
 8007a04:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	223e      	movs	r2, #62	@ 0x3e
 8007a0a:	2101      	movs	r1, #1
 8007a0c:	5499      	strb	r1, [r3, r2]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	223f      	movs	r2, #63	@ 0x3f
 8007a12:	2101      	movs	r1, #1
 8007a14:	5499      	strb	r1, [r3, r2]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2240      	movs	r2, #64	@ 0x40
 8007a1a:	2101      	movs	r1, #1
 8007a1c:	5499      	strb	r1, [r3, r2]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2241      	movs	r2, #65	@ 0x41
 8007a22:	2101      	movs	r1, #1
 8007a24:	5499      	strb	r1, [r3, r2]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2242      	movs	r2, #66	@ 0x42
 8007a2a:	2101      	movs	r1, #1
 8007a2c:	5499      	strb	r1, [r3, r2]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2243      	movs	r2, #67	@ 0x43
 8007a32:	2101      	movs	r1, #1
 8007a34:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2244      	movs	r2, #68	@ 0x44
 8007a3a:	2101      	movs	r1, #1
 8007a3c:	5499      	strb	r1, [r3, r2]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2245      	movs	r2, #69	@ 0x45
 8007a42:	2101      	movs	r1, #1
 8007a44:	5499      	strb	r1, [r3, r2]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2246      	movs	r2, #70	@ 0x46
 8007a4a:	2101      	movs	r1, #1
 8007a4c:	5499      	strb	r1, [r3, r2]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2247      	movs	r2, #71	@ 0x47
 8007a52:	2101      	movs	r1, #1
 8007a54:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	223d      	movs	r2, #61	@ 0x3d
 8007a5a:	2101      	movs	r1, #1
 8007a5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007a5e:	2300      	movs	r3, #0
}
 8007a60:	0018      	movs	r0, r3
 8007a62:	46bd      	mov	sp, r7
 8007a64:	b002      	add	sp, #8
 8007a66:	bd80      	pop	{r7, pc}

08007a68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b086      	sub	sp, #24
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	60f8      	str	r0, [r7, #12]
 8007a70:	60b9      	str	r1, [r7, #8]
 8007a72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a74:	2317      	movs	r3, #23
 8007a76:	18fb      	adds	r3, r7, r3
 8007a78:	2200      	movs	r2, #0
 8007a7a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	223c      	movs	r2, #60	@ 0x3c
 8007a80:	5c9b      	ldrb	r3, [r3, r2]
 8007a82:	2b01      	cmp	r3, #1
 8007a84:	d101      	bne.n	8007a8a <HAL_TIM_PWM_ConfigChannel+0x22>
 8007a86:	2302      	movs	r3, #2
 8007a88:	e0e5      	b.n	8007c56 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	223c      	movs	r2, #60	@ 0x3c
 8007a8e:	2101      	movs	r1, #1
 8007a90:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2b14      	cmp	r3, #20
 8007a96:	d900      	bls.n	8007a9a <HAL_TIM_PWM_ConfigChannel+0x32>
 8007a98:	e0d1      	b.n	8007c3e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	009a      	lsls	r2, r3, #2
 8007a9e:	4b70      	ldr	r3, [pc, #448]	@ (8007c60 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8007aa0:	18d3      	adds	r3, r2, r3
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	68ba      	ldr	r2, [r7, #8]
 8007aac:	0011      	movs	r1, r2
 8007aae:	0018      	movs	r0, r3
 8007ab0:	f000 f95e 	bl	8007d70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	699a      	ldr	r2, [r3, #24]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	2108      	movs	r1, #8
 8007ac0:	430a      	orrs	r2, r1
 8007ac2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	699a      	ldr	r2, [r3, #24]
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	2104      	movs	r1, #4
 8007ad0:	438a      	bics	r2, r1
 8007ad2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	6999      	ldr	r1, [r3, #24]
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	691a      	ldr	r2, [r3, #16]
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	430a      	orrs	r2, r1
 8007ae4:	619a      	str	r2, [r3, #24]
      break;
 8007ae6:	e0af      	b.n	8007c48 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	68ba      	ldr	r2, [r7, #8]
 8007aee:	0011      	movs	r1, r2
 8007af0:	0018      	movs	r0, r3
 8007af2:	f000 f9bd 	bl	8007e70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	699a      	ldr	r2, [r3, #24]
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	2180      	movs	r1, #128	@ 0x80
 8007b02:	0109      	lsls	r1, r1, #4
 8007b04:	430a      	orrs	r2, r1
 8007b06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	699a      	ldr	r2, [r3, #24]
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4954      	ldr	r1, [pc, #336]	@ (8007c64 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8007b14:	400a      	ands	r2, r1
 8007b16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	6999      	ldr	r1, [r3, #24]
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	691b      	ldr	r3, [r3, #16]
 8007b22:	021a      	lsls	r2, r3, #8
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	430a      	orrs	r2, r1
 8007b2a:	619a      	str	r2, [r3, #24]
      break;
 8007b2c:	e08c      	b.n	8007c48 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	68ba      	ldr	r2, [r7, #8]
 8007b34:	0011      	movs	r1, r2
 8007b36:	0018      	movs	r0, r3
 8007b38:	f000 fa18 	bl	8007f6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	69da      	ldr	r2, [r3, #28]
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	2108      	movs	r1, #8
 8007b48:	430a      	orrs	r2, r1
 8007b4a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	69da      	ldr	r2, [r3, #28]
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	2104      	movs	r1, #4
 8007b58:	438a      	bics	r2, r1
 8007b5a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	69d9      	ldr	r1, [r3, #28]
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	691a      	ldr	r2, [r3, #16]
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	430a      	orrs	r2, r1
 8007b6c:	61da      	str	r2, [r3, #28]
      break;
 8007b6e:	e06b      	b.n	8007c48 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	68ba      	ldr	r2, [r7, #8]
 8007b76:	0011      	movs	r1, r2
 8007b78:	0018      	movs	r0, r3
 8007b7a:	f000 fa79 	bl	8008070 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	69da      	ldr	r2, [r3, #28]
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	2180      	movs	r1, #128	@ 0x80
 8007b8a:	0109      	lsls	r1, r1, #4
 8007b8c:	430a      	orrs	r2, r1
 8007b8e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	69da      	ldr	r2, [r3, #28]
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4932      	ldr	r1, [pc, #200]	@ (8007c64 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8007b9c:	400a      	ands	r2, r1
 8007b9e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	69d9      	ldr	r1, [r3, #28]
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	691b      	ldr	r3, [r3, #16]
 8007baa:	021a      	lsls	r2, r3, #8
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	430a      	orrs	r2, r1
 8007bb2:	61da      	str	r2, [r3, #28]
      break;
 8007bb4:	e048      	b.n	8007c48 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	68ba      	ldr	r2, [r7, #8]
 8007bbc:	0011      	movs	r1, r2
 8007bbe:	0018      	movs	r0, r3
 8007bc0:	f000 faba 	bl	8008138 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	2108      	movs	r1, #8
 8007bd0:	430a      	orrs	r2, r1
 8007bd2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	2104      	movs	r1, #4
 8007be0:	438a      	bics	r2, r1
 8007be2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	691a      	ldr	r2, [r3, #16]
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	430a      	orrs	r2, r1
 8007bf4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007bf6:	e027      	b.n	8007c48 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	68ba      	ldr	r2, [r7, #8]
 8007bfe:	0011      	movs	r1, r2
 8007c00:	0018      	movs	r0, r3
 8007c02:	f000 faf3 	bl	80081ec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	2180      	movs	r1, #128	@ 0x80
 8007c12:	0109      	lsls	r1, r1, #4
 8007c14:	430a      	orrs	r2, r1
 8007c16:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4910      	ldr	r1, [pc, #64]	@ (8007c64 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8007c24:	400a      	ands	r2, r1
 8007c26:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	691b      	ldr	r3, [r3, #16]
 8007c32:	021a      	lsls	r2, r3, #8
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	430a      	orrs	r2, r1
 8007c3a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007c3c:	e004      	b.n	8007c48 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8007c3e:	2317      	movs	r3, #23
 8007c40:	18fb      	adds	r3, r7, r3
 8007c42:	2201      	movs	r2, #1
 8007c44:	701a      	strb	r2, [r3, #0]
      break;
 8007c46:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	223c      	movs	r2, #60	@ 0x3c
 8007c4c:	2100      	movs	r1, #0
 8007c4e:	5499      	strb	r1, [r3, r2]

  return status;
 8007c50:	2317      	movs	r3, #23
 8007c52:	18fb      	adds	r3, r7, r3
 8007c54:	781b      	ldrb	r3, [r3, #0]
}
 8007c56:	0018      	movs	r0, r3
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	b006      	add	sp, #24
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	46c0      	nop			@ (mov r8, r8)
 8007c60:	0800a3b4 	.word	0x0800a3b4
 8007c64:	fffffbff 	.word	0xfffffbff

08007c68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b084      	sub	sp, #16
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	4a37      	ldr	r2, [pc, #220]	@ (8007d58 <TIM_Base_SetConfig+0xf0>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d008      	beq.n	8007c92 <TIM_Base_SetConfig+0x2a>
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	2380      	movs	r3, #128	@ 0x80
 8007c84:	05db      	lsls	r3, r3, #23
 8007c86:	429a      	cmp	r2, r3
 8007c88:	d003      	beq.n	8007c92 <TIM_Base_SetConfig+0x2a>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	4a33      	ldr	r2, [pc, #204]	@ (8007d5c <TIM_Base_SetConfig+0xf4>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d108      	bne.n	8007ca4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2270      	movs	r2, #112	@ 0x70
 8007c96:	4393      	bics	r3, r2
 8007c98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	68fa      	ldr	r2, [r7, #12]
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	4a2c      	ldr	r2, [pc, #176]	@ (8007d58 <TIM_Base_SetConfig+0xf0>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d014      	beq.n	8007cd6 <TIM_Base_SetConfig+0x6e>
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	2380      	movs	r3, #128	@ 0x80
 8007cb0:	05db      	lsls	r3, r3, #23
 8007cb2:	429a      	cmp	r2, r3
 8007cb4:	d00f      	beq.n	8007cd6 <TIM_Base_SetConfig+0x6e>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	4a28      	ldr	r2, [pc, #160]	@ (8007d5c <TIM_Base_SetConfig+0xf4>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d00b      	beq.n	8007cd6 <TIM_Base_SetConfig+0x6e>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	4a27      	ldr	r2, [pc, #156]	@ (8007d60 <TIM_Base_SetConfig+0xf8>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d007      	beq.n	8007cd6 <TIM_Base_SetConfig+0x6e>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	4a26      	ldr	r2, [pc, #152]	@ (8007d64 <TIM_Base_SetConfig+0xfc>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d003      	beq.n	8007cd6 <TIM_Base_SetConfig+0x6e>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	4a25      	ldr	r2, [pc, #148]	@ (8007d68 <TIM_Base_SetConfig+0x100>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d108      	bne.n	8007ce8 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	4a24      	ldr	r2, [pc, #144]	@ (8007d6c <TIM_Base_SetConfig+0x104>)
 8007cda:	4013      	ands	r3, r2
 8007cdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	68db      	ldr	r3, [r3, #12]
 8007ce2:	68fa      	ldr	r2, [r7, #12]
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2280      	movs	r2, #128	@ 0x80
 8007cec:	4393      	bics	r3, r2
 8007cee:	001a      	movs	r2, r3
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	695b      	ldr	r3, [r3, #20]
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	68fa      	ldr	r2, [r7, #12]
 8007cfc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	689a      	ldr	r2, [r3, #8]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	681a      	ldr	r2, [r3, #0]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	4a11      	ldr	r2, [pc, #68]	@ (8007d58 <TIM_Base_SetConfig+0xf0>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d007      	beq.n	8007d26 <TIM_Base_SetConfig+0xbe>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	4a12      	ldr	r2, [pc, #72]	@ (8007d64 <TIM_Base_SetConfig+0xfc>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d003      	beq.n	8007d26 <TIM_Base_SetConfig+0xbe>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	4a11      	ldr	r2, [pc, #68]	@ (8007d68 <TIM_Base_SetConfig+0x100>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d103      	bne.n	8007d2e <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	691a      	ldr	r2, [r3, #16]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2201      	movs	r2, #1
 8007d32:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	691b      	ldr	r3, [r3, #16]
 8007d38:	2201      	movs	r2, #1
 8007d3a:	4013      	ands	r3, r2
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	d106      	bne.n	8007d4e <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	691b      	ldr	r3, [r3, #16]
 8007d44:	2201      	movs	r2, #1
 8007d46:	4393      	bics	r3, r2
 8007d48:	001a      	movs	r2, r3
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	611a      	str	r2, [r3, #16]
  }
}
 8007d4e:	46c0      	nop			@ (mov r8, r8)
 8007d50:	46bd      	mov	sp, r7
 8007d52:	b004      	add	sp, #16
 8007d54:	bd80      	pop	{r7, pc}
 8007d56:	46c0      	nop			@ (mov r8, r8)
 8007d58:	40012c00 	.word	0x40012c00
 8007d5c:	40000400 	.word	0x40000400
 8007d60:	40002000 	.word	0x40002000
 8007d64:	40014400 	.word	0x40014400
 8007d68:	40014800 	.word	0x40014800
 8007d6c:	fffffcff 	.word	0xfffffcff

08007d70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b086      	sub	sp, #24
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6a1b      	ldr	r3, [r3, #32]
 8007d7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6a1b      	ldr	r3, [r3, #32]
 8007d84:	2201      	movs	r2, #1
 8007d86:	4393      	bics	r3, r2
 8007d88:	001a      	movs	r2, r3
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	699b      	ldr	r3, [r3, #24]
 8007d98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	4a2e      	ldr	r2, [pc, #184]	@ (8007e58 <TIM_OC1_SetConfig+0xe8>)
 8007d9e:	4013      	ands	r3, r2
 8007da0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2203      	movs	r2, #3
 8007da6:	4393      	bics	r3, r2
 8007da8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	68fa      	ldr	r2, [r7, #12]
 8007db0:	4313      	orrs	r3, r2
 8007db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	2202      	movs	r2, #2
 8007db8:	4393      	bics	r3, r2
 8007dba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	689b      	ldr	r3, [r3, #8]
 8007dc0:	697a      	ldr	r2, [r7, #20]
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	4a24      	ldr	r2, [pc, #144]	@ (8007e5c <TIM_OC1_SetConfig+0xec>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d007      	beq.n	8007dde <TIM_OC1_SetConfig+0x6e>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	4a23      	ldr	r2, [pc, #140]	@ (8007e60 <TIM_OC1_SetConfig+0xf0>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d003      	beq.n	8007dde <TIM_OC1_SetConfig+0x6e>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	4a22      	ldr	r2, [pc, #136]	@ (8007e64 <TIM_OC1_SetConfig+0xf4>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d10c      	bne.n	8007df8 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	2208      	movs	r2, #8
 8007de2:	4393      	bics	r3, r2
 8007de4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	68db      	ldr	r3, [r3, #12]
 8007dea:	697a      	ldr	r2, [r7, #20]
 8007dec:	4313      	orrs	r3, r2
 8007dee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	2204      	movs	r2, #4
 8007df4:	4393      	bics	r3, r2
 8007df6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	4a18      	ldr	r2, [pc, #96]	@ (8007e5c <TIM_OC1_SetConfig+0xec>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d007      	beq.n	8007e10 <TIM_OC1_SetConfig+0xa0>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	4a17      	ldr	r2, [pc, #92]	@ (8007e60 <TIM_OC1_SetConfig+0xf0>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d003      	beq.n	8007e10 <TIM_OC1_SetConfig+0xa0>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	4a16      	ldr	r2, [pc, #88]	@ (8007e64 <TIM_OC1_SetConfig+0xf4>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d111      	bne.n	8007e34 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	4a15      	ldr	r2, [pc, #84]	@ (8007e68 <TIM_OC1_SetConfig+0xf8>)
 8007e14:	4013      	ands	r3, r2
 8007e16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	4a14      	ldr	r2, [pc, #80]	@ (8007e6c <TIM_OC1_SetConfig+0xfc>)
 8007e1c:	4013      	ands	r3, r2
 8007e1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	695b      	ldr	r3, [r3, #20]
 8007e24:	693a      	ldr	r2, [r7, #16]
 8007e26:	4313      	orrs	r3, r2
 8007e28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	699b      	ldr	r3, [r3, #24]
 8007e2e:	693a      	ldr	r2, [r7, #16]
 8007e30:	4313      	orrs	r3, r2
 8007e32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	693a      	ldr	r2, [r7, #16]
 8007e38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	68fa      	ldr	r2, [r7, #12]
 8007e3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	685a      	ldr	r2, [r3, #4]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	697a      	ldr	r2, [r7, #20]
 8007e4c:	621a      	str	r2, [r3, #32]
}
 8007e4e:	46c0      	nop			@ (mov r8, r8)
 8007e50:	46bd      	mov	sp, r7
 8007e52:	b006      	add	sp, #24
 8007e54:	bd80      	pop	{r7, pc}
 8007e56:	46c0      	nop			@ (mov r8, r8)
 8007e58:	fffeff8f 	.word	0xfffeff8f
 8007e5c:	40012c00 	.word	0x40012c00
 8007e60:	40014400 	.word	0x40014400
 8007e64:	40014800 	.word	0x40014800
 8007e68:	fffffeff 	.word	0xfffffeff
 8007e6c:	fffffdff 	.word	0xfffffdff

08007e70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b086      	sub	sp, #24
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
 8007e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6a1b      	ldr	r3, [r3, #32]
 8007e7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6a1b      	ldr	r3, [r3, #32]
 8007e84:	2210      	movs	r2, #16
 8007e86:	4393      	bics	r3, r2
 8007e88:	001a      	movs	r2, r3
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	685b      	ldr	r3, [r3, #4]
 8007e92:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	699b      	ldr	r3, [r3, #24]
 8007e98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	4a2c      	ldr	r2, [pc, #176]	@ (8007f50 <TIM_OC2_SetConfig+0xe0>)
 8007e9e:	4013      	ands	r3, r2
 8007ea0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	4a2b      	ldr	r2, [pc, #172]	@ (8007f54 <TIM_OC2_SetConfig+0xe4>)
 8007ea6:	4013      	ands	r3, r2
 8007ea8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	021b      	lsls	r3, r3, #8
 8007eb0:	68fa      	ldr	r2, [r7, #12]
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	2220      	movs	r2, #32
 8007eba:	4393      	bics	r3, r2
 8007ebc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	689b      	ldr	r3, [r3, #8]
 8007ec2:	011b      	lsls	r3, r3, #4
 8007ec4:	697a      	ldr	r2, [r7, #20]
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	4a22      	ldr	r2, [pc, #136]	@ (8007f58 <TIM_OC2_SetConfig+0xe8>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d10d      	bne.n	8007eee <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	2280      	movs	r2, #128	@ 0x80
 8007ed6:	4393      	bics	r3, r2
 8007ed8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	68db      	ldr	r3, [r3, #12]
 8007ede:	011b      	lsls	r3, r3, #4
 8007ee0:	697a      	ldr	r2, [r7, #20]
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	2240      	movs	r2, #64	@ 0x40
 8007eea:	4393      	bics	r3, r2
 8007eec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	4a19      	ldr	r2, [pc, #100]	@ (8007f58 <TIM_OC2_SetConfig+0xe8>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d007      	beq.n	8007f06 <TIM_OC2_SetConfig+0x96>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	4a18      	ldr	r2, [pc, #96]	@ (8007f5c <TIM_OC2_SetConfig+0xec>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d003      	beq.n	8007f06 <TIM_OC2_SetConfig+0x96>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	4a17      	ldr	r2, [pc, #92]	@ (8007f60 <TIM_OC2_SetConfig+0xf0>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d113      	bne.n	8007f2e <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	4a16      	ldr	r2, [pc, #88]	@ (8007f64 <TIM_OC2_SetConfig+0xf4>)
 8007f0a:	4013      	ands	r3, r2
 8007f0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	4a15      	ldr	r2, [pc, #84]	@ (8007f68 <TIM_OC2_SetConfig+0xf8>)
 8007f12:	4013      	ands	r3, r2
 8007f14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	695b      	ldr	r3, [r3, #20]
 8007f1a:	009b      	lsls	r3, r3, #2
 8007f1c:	693a      	ldr	r2, [r7, #16]
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	699b      	ldr	r3, [r3, #24]
 8007f26:	009b      	lsls	r3, r3, #2
 8007f28:	693a      	ldr	r2, [r7, #16]
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	693a      	ldr	r2, [r7, #16]
 8007f32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	68fa      	ldr	r2, [r7, #12]
 8007f38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	685a      	ldr	r2, [r3, #4]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	697a      	ldr	r2, [r7, #20]
 8007f46:	621a      	str	r2, [r3, #32]
}
 8007f48:	46c0      	nop			@ (mov r8, r8)
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	b006      	add	sp, #24
 8007f4e:	bd80      	pop	{r7, pc}
 8007f50:	feff8fff 	.word	0xfeff8fff
 8007f54:	fffffcff 	.word	0xfffffcff
 8007f58:	40012c00 	.word	0x40012c00
 8007f5c:	40014400 	.word	0x40014400
 8007f60:	40014800 	.word	0x40014800
 8007f64:	fffffbff 	.word	0xfffffbff
 8007f68:	fffff7ff 	.word	0xfffff7ff

08007f6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b086      	sub	sp, #24
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6a1b      	ldr	r3, [r3, #32]
 8007f7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6a1b      	ldr	r3, [r3, #32]
 8007f80:	4a31      	ldr	r2, [pc, #196]	@ (8008048 <TIM_OC3_SetConfig+0xdc>)
 8007f82:	401a      	ands	r2, r3
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	69db      	ldr	r3, [r3, #28]
 8007f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	4a2d      	ldr	r2, [pc, #180]	@ (800804c <TIM_OC3_SetConfig+0xe0>)
 8007f98:	4013      	ands	r3, r2
 8007f9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2203      	movs	r2, #3
 8007fa0:	4393      	bics	r3, r2
 8007fa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	68fa      	ldr	r2, [r7, #12]
 8007faa:	4313      	orrs	r3, r2
 8007fac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	4a27      	ldr	r2, [pc, #156]	@ (8008050 <TIM_OC3_SetConfig+0xe4>)
 8007fb2:	4013      	ands	r3, r2
 8007fb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	021b      	lsls	r3, r3, #8
 8007fbc:	697a      	ldr	r2, [r7, #20]
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	4a23      	ldr	r2, [pc, #140]	@ (8008054 <TIM_OC3_SetConfig+0xe8>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d10d      	bne.n	8007fe6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	4a22      	ldr	r2, [pc, #136]	@ (8008058 <TIM_OC3_SetConfig+0xec>)
 8007fce:	4013      	ands	r3, r2
 8007fd0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	68db      	ldr	r3, [r3, #12]
 8007fd6:	021b      	lsls	r3, r3, #8
 8007fd8:	697a      	ldr	r2, [r7, #20]
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	4a1e      	ldr	r2, [pc, #120]	@ (800805c <TIM_OC3_SetConfig+0xf0>)
 8007fe2:	4013      	ands	r3, r2
 8007fe4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	4a1a      	ldr	r2, [pc, #104]	@ (8008054 <TIM_OC3_SetConfig+0xe8>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d007      	beq.n	8007ffe <TIM_OC3_SetConfig+0x92>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	4a1b      	ldr	r2, [pc, #108]	@ (8008060 <TIM_OC3_SetConfig+0xf4>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d003      	beq.n	8007ffe <TIM_OC3_SetConfig+0x92>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	4a1a      	ldr	r2, [pc, #104]	@ (8008064 <TIM_OC3_SetConfig+0xf8>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d113      	bne.n	8008026 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	4a19      	ldr	r2, [pc, #100]	@ (8008068 <TIM_OC3_SetConfig+0xfc>)
 8008002:	4013      	ands	r3, r2
 8008004:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	4a18      	ldr	r2, [pc, #96]	@ (800806c <TIM_OC3_SetConfig+0x100>)
 800800a:	4013      	ands	r3, r2
 800800c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	695b      	ldr	r3, [r3, #20]
 8008012:	011b      	lsls	r3, r3, #4
 8008014:	693a      	ldr	r2, [r7, #16]
 8008016:	4313      	orrs	r3, r2
 8008018:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	699b      	ldr	r3, [r3, #24]
 800801e:	011b      	lsls	r3, r3, #4
 8008020:	693a      	ldr	r2, [r7, #16]
 8008022:	4313      	orrs	r3, r2
 8008024:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	693a      	ldr	r2, [r7, #16]
 800802a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	68fa      	ldr	r2, [r7, #12]
 8008030:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	685a      	ldr	r2, [r3, #4]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	697a      	ldr	r2, [r7, #20]
 800803e:	621a      	str	r2, [r3, #32]
}
 8008040:	46c0      	nop			@ (mov r8, r8)
 8008042:	46bd      	mov	sp, r7
 8008044:	b006      	add	sp, #24
 8008046:	bd80      	pop	{r7, pc}
 8008048:	fffffeff 	.word	0xfffffeff
 800804c:	fffeff8f 	.word	0xfffeff8f
 8008050:	fffffdff 	.word	0xfffffdff
 8008054:	40012c00 	.word	0x40012c00
 8008058:	fffff7ff 	.word	0xfffff7ff
 800805c:	fffffbff 	.word	0xfffffbff
 8008060:	40014400 	.word	0x40014400
 8008064:	40014800 	.word	0x40014800
 8008068:	ffffefff 	.word	0xffffefff
 800806c:	ffffdfff 	.word	0xffffdfff

08008070 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b086      	sub	sp, #24
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6a1b      	ldr	r3, [r3, #32]
 800807e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6a1b      	ldr	r3, [r3, #32]
 8008084:	4a24      	ldr	r2, [pc, #144]	@ (8008118 <TIM_OC4_SetConfig+0xa8>)
 8008086:	401a      	ands	r2, r3
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	69db      	ldr	r3, [r3, #28]
 8008096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	4a20      	ldr	r2, [pc, #128]	@ (800811c <TIM_OC4_SetConfig+0xac>)
 800809c:	4013      	ands	r3, r2
 800809e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	4a1f      	ldr	r2, [pc, #124]	@ (8008120 <TIM_OC4_SetConfig+0xb0>)
 80080a4:	4013      	ands	r3, r2
 80080a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	021b      	lsls	r3, r3, #8
 80080ae:	68fa      	ldr	r2, [r7, #12]
 80080b0:	4313      	orrs	r3, r2
 80080b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	4a1b      	ldr	r2, [pc, #108]	@ (8008124 <TIM_OC4_SetConfig+0xb4>)
 80080b8:	4013      	ands	r3, r2
 80080ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	689b      	ldr	r3, [r3, #8]
 80080c0:	031b      	lsls	r3, r3, #12
 80080c2:	693a      	ldr	r2, [r7, #16]
 80080c4:	4313      	orrs	r3, r2
 80080c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	4a17      	ldr	r2, [pc, #92]	@ (8008128 <TIM_OC4_SetConfig+0xb8>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d007      	beq.n	80080e0 <TIM_OC4_SetConfig+0x70>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	4a16      	ldr	r2, [pc, #88]	@ (800812c <TIM_OC4_SetConfig+0xbc>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d003      	beq.n	80080e0 <TIM_OC4_SetConfig+0x70>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	4a15      	ldr	r2, [pc, #84]	@ (8008130 <TIM_OC4_SetConfig+0xc0>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d109      	bne.n	80080f4 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	4a14      	ldr	r2, [pc, #80]	@ (8008134 <TIM_OC4_SetConfig+0xc4>)
 80080e4:	4013      	ands	r3, r2
 80080e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	695b      	ldr	r3, [r3, #20]
 80080ec:	019b      	lsls	r3, r3, #6
 80080ee:	697a      	ldr	r2, [r7, #20]
 80080f0:	4313      	orrs	r3, r2
 80080f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	697a      	ldr	r2, [r7, #20]
 80080f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	68fa      	ldr	r2, [r7, #12]
 80080fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	685a      	ldr	r2, [r3, #4]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	693a      	ldr	r2, [r7, #16]
 800810c:	621a      	str	r2, [r3, #32]
}
 800810e:	46c0      	nop			@ (mov r8, r8)
 8008110:	46bd      	mov	sp, r7
 8008112:	b006      	add	sp, #24
 8008114:	bd80      	pop	{r7, pc}
 8008116:	46c0      	nop			@ (mov r8, r8)
 8008118:	ffffefff 	.word	0xffffefff
 800811c:	feff8fff 	.word	0xfeff8fff
 8008120:	fffffcff 	.word	0xfffffcff
 8008124:	ffffdfff 	.word	0xffffdfff
 8008128:	40012c00 	.word	0x40012c00
 800812c:	40014400 	.word	0x40014400
 8008130:	40014800 	.word	0x40014800
 8008134:	ffffbfff 	.word	0xffffbfff

08008138 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b086      	sub	sp, #24
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6a1b      	ldr	r3, [r3, #32]
 8008146:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6a1b      	ldr	r3, [r3, #32]
 800814c:	4a21      	ldr	r2, [pc, #132]	@ (80081d4 <TIM_OC5_SetConfig+0x9c>)
 800814e:	401a      	ands	r2, r3
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800815e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	4a1d      	ldr	r2, [pc, #116]	@ (80081d8 <TIM_OC5_SetConfig+0xa0>)
 8008164:	4013      	ands	r3, r2
 8008166:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	68fa      	ldr	r2, [r7, #12]
 800816e:	4313      	orrs	r3, r2
 8008170:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	4a19      	ldr	r2, [pc, #100]	@ (80081dc <TIM_OC5_SetConfig+0xa4>)
 8008176:	4013      	ands	r3, r2
 8008178:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	689b      	ldr	r3, [r3, #8]
 800817e:	041b      	lsls	r3, r3, #16
 8008180:	693a      	ldr	r2, [r7, #16]
 8008182:	4313      	orrs	r3, r2
 8008184:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	4a15      	ldr	r2, [pc, #84]	@ (80081e0 <TIM_OC5_SetConfig+0xa8>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d007      	beq.n	800819e <TIM_OC5_SetConfig+0x66>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	4a14      	ldr	r2, [pc, #80]	@ (80081e4 <TIM_OC5_SetConfig+0xac>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d003      	beq.n	800819e <TIM_OC5_SetConfig+0x66>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	4a13      	ldr	r2, [pc, #76]	@ (80081e8 <TIM_OC5_SetConfig+0xb0>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d109      	bne.n	80081b2 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	4a0c      	ldr	r2, [pc, #48]	@ (80081d4 <TIM_OC5_SetConfig+0x9c>)
 80081a2:	4013      	ands	r3, r2
 80081a4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	695b      	ldr	r3, [r3, #20]
 80081aa:	021b      	lsls	r3, r3, #8
 80081ac:	697a      	ldr	r2, [r7, #20]
 80081ae:	4313      	orrs	r3, r2
 80081b0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	697a      	ldr	r2, [r7, #20]
 80081b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	68fa      	ldr	r2, [r7, #12]
 80081bc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	685a      	ldr	r2, [r3, #4]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	693a      	ldr	r2, [r7, #16]
 80081ca:	621a      	str	r2, [r3, #32]
}
 80081cc:	46c0      	nop			@ (mov r8, r8)
 80081ce:	46bd      	mov	sp, r7
 80081d0:	b006      	add	sp, #24
 80081d2:	bd80      	pop	{r7, pc}
 80081d4:	fffeffff 	.word	0xfffeffff
 80081d8:	fffeff8f 	.word	0xfffeff8f
 80081dc:	fffdffff 	.word	0xfffdffff
 80081e0:	40012c00 	.word	0x40012c00
 80081e4:	40014400 	.word	0x40014400
 80081e8:	40014800 	.word	0x40014800

080081ec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b086      	sub	sp, #24
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6a1b      	ldr	r3, [r3, #32]
 80081fa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6a1b      	ldr	r3, [r3, #32]
 8008200:	4a22      	ldr	r2, [pc, #136]	@ (800828c <TIM_OC6_SetConfig+0xa0>)
 8008202:	401a      	ands	r2, r3
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	4a1e      	ldr	r2, [pc, #120]	@ (8008290 <TIM_OC6_SetConfig+0xa4>)
 8008218:	4013      	ands	r3, r2
 800821a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	021b      	lsls	r3, r3, #8
 8008222:	68fa      	ldr	r2, [r7, #12]
 8008224:	4313      	orrs	r3, r2
 8008226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	4a1a      	ldr	r2, [pc, #104]	@ (8008294 <TIM_OC6_SetConfig+0xa8>)
 800822c:	4013      	ands	r3, r2
 800822e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	689b      	ldr	r3, [r3, #8]
 8008234:	051b      	lsls	r3, r3, #20
 8008236:	693a      	ldr	r2, [r7, #16]
 8008238:	4313      	orrs	r3, r2
 800823a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	4a16      	ldr	r2, [pc, #88]	@ (8008298 <TIM_OC6_SetConfig+0xac>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d007      	beq.n	8008254 <TIM_OC6_SetConfig+0x68>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	4a15      	ldr	r2, [pc, #84]	@ (800829c <TIM_OC6_SetConfig+0xb0>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d003      	beq.n	8008254 <TIM_OC6_SetConfig+0x68>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	4a14      	ldr	r2, [pc, #80]	@ (80082a0 <TIM_OC6_SetConfig+0xb4>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d109      	bne.n	8008268 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	4a13      	ldr	r2, [pc, #76]	@ (80082a4 <TIM_OC6_SetConfig+0xb8>)
 8008258:	4013      	ands	r3, r2
 800825a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	695b      	ldr	r3, [r3, #20]
 8008260:	029b      	lsls	r3, r3, #10
 8008262:	697a      	ldr	r2, [r7, #20]
 8008264:	4313      	orrs	r3, r2
 8008266:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	697a      	ldr	r2, [r7, #20]
 800826c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	68fa      	ldr	r2, [r7, #12]
 8008272:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	685a      	ldr	r2, [r3, #4]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	693a      	ldr	r2, [r7, #16]
 8008280:	621a      	str	r2, [r3, #32]
}
 8008282:	46c0      	nop			@ (mov r8, r8)
 8008284:	46bd      	mov	sp, r7
 8008286:	b006      	add	sp, #24
 8008288:	bd80      	pop	{r7, pc}
 800828a:	46c0      	nop			@ (mov r8, r8)
 800828c:	ffefffff 	.word	0xffefffff
 8008290:	feff8fff 	.word	0xfeff8fff
 8008294:	ffdfffff 	.word	0xffdfffff
 8008298:	40012c00 	.word	0x40012c00
 800829c:	40014400 	.word	0x40014400
 80082a0:	40014800 	.word	0x40014800
 80082a4:	fffbffff 	.word	0xfffbffff

080082a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b084      	sub	sp, #16
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
 80082b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	223c      	movs	r2, #60	@ 0x3c
 80082b6:	5c9b      	ldrb	r3, [r3, r2]
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d101      	bne.n	80082c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80082bc:	2302      	movs	r3, #2
 80082be:	e050      	b.n	8008362 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	223c      	movs	r2, #60	@ 0x3c
 80082c4:	2101      	movs	r1, #1
 80082c6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	223d      	movs	r2, #61	@ 0x3d
 80082cc:	2102      	movs	r1, #2
 80082ce:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	685b      	ldr	r3, [r3, #4]
 80082d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	689b      	ldr	r3, [r3, #8]
 80082de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a21      	ldr	r2, [pc, #132]	@ (800836c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d108      	bne.n	80082fc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	4a20      	ldr	r2, [pc, #128]	@ (8008370 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80082ee:	4013      	ands	r3, r2
 80082f0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	68fa      	ldr	r2, [r7, #12]
 80082f8:	4313      	orrs	r3, r2
 80082fa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	2270      	movs	r2, #112	@ 0x70
 8008300:	4393      	bics	r3, r2
 8008302:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	68fa      	ldr	r2, [r7, #12]
 800830a:	4313      	orrs	r3, r2
 800830c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	68fa      	ldr	r2, [r7, #12]
 8008314:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a14      	ldr	r2, [pc, #80]	@ (800836c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d00a      	beq.n	8008336 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681a      	ldr	r2, [r3, #0]
 8008324:	2380      	movs	r3, #128	@ 0x80
 8008326:	05db      	lsls	r3, r3, #23
 8008328:	429a      	cmp	r2, r3
 800832a:	d004      	beq.n	8008336 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a10      	ldr	r2, [pc, #64]	@ (8008374 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d10c      	bne.n	8008350 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	2280      	movs	r2, #128	@ 0x80
 800833a:	4393      	bics	r3, r2
 800833c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	689b      	ldr	r3, [r3, #8]
 8008342:	68ba      	ldr	r2, [r7, #8]
 8008344:	4313      	orrs	r3, r2
 8008346:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	68ba      	ldr	r2, [r7, #8]
 800834e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	223d      	movs	r2, #61	@ 0x3d
 8008354:	2101      	movs	r1, #1
 8008356:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	223c      	movs	r2, #60	@ 0x3c
 800835c:	2100      	movs	r1, #0
 800835e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008360:	2300      	movs	r3, #0
}
 8008362:	0018      	movs	r0, r3
 8008364:	46bd      	mov	sp, r7
 8008366:	b004      	add	sp, #16
 8008368:	bd80      	pop	{r7, pc}
 800836a:	46c0      	nop			@ (mov r8, r8)
 800836c:	40012c00 	.word	0x40012c00
 8008370:	ff0fffff 	.word	0xff0fffff
 8008374:	40000400 	.word	0x40000400

08008378 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b084      	sub	sp, #16
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008382:	2300      	movs	r3, #0
 8008384:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	223c      	movs	r2, #60	@ 0x3c
 800838a:	5c9b      	ldrb	r3, [r3, r2]
 800838c:	2b01      	cmp	r3, #1
 800838e:	d101      	bne.n	8008394 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008390:	2302      	movs	r3, #2
 8008392:	e06f      	b.n	8008474 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	223c      	movs	r2, #60	@ 0x3c
 8008398:	2101      	movs	r1, #1
 800839a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	22ff      	movs	r2, #255	@ 0xff
 80083a0:	4393      	bics	r3, r2
 80083a2:	001a      	movs	r2, r3
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	68db      	ldr	r3, [r3, #12]
 80083a8:	4313      	orrs	r3, r2
 80083aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	4a33      	ldr	r2, [pc, #204]	@ (800847c <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 80083b0:	401a      	ands	r2, r3
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	689b      	ldr	r3, [r3, #8]
 80083b6:	4313      	orrs	r3, r2
 80083b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	4a30      	ldr	r2, [pc, #192]	@ (8008480 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 80083be:	401a      	ands	r2, r3
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	4313      	orrs	r3, r2
 80083c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	4a2e      	ldr	r2, [pc, #184]	@ (8008484 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 80083cc:	401a      	ands	r2, r3
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4313      	orrs	r3, r2
 80083d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	4a2b      	ldr	r2, [pc, #172]	@ (8008488 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80083da:	401a      	ands	r2, r3
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	691b      	ldr	r3, [r3, #16]
 80083e0:	4313      	orrs	r3, r2
 80083e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	4a29      	ldr	r2, [pc, #164]	@ (800848c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80083e8:	401a      	ands	r2, r3
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	695b      	ldr	r3, [r3, #20]
 80083ee:	4313      	orrs	r3, r2
 80083f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	4a26      	ldr	r2, [pc, #152]	@ (8008490 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80083f6:	401a      	ands	r2, r3
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083fc:	4313      	orrs	r3, r2
 80083fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	4a24      	ldr	r2, [pc, #144]	@ (8008494 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8008404:	401a      	ands	r2, r3
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	699b      	ldr	r3, [r3, #24]
 800840a:	041b      	lsls	r3, r3, #16
 800840c:	4313      	orrs	r3, r2
 800840e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	4a21      	ldr	r2, [pc, #132]	@ (8008498 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8008414:	401a      	ands	r2, r3
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	69db      	ldr	r3, [r3, #28]
 800841a:	4313      	orrs	r3, r2
 800841c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a1e      	ldr	r2, [pc, #120]	@ (800849c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d11c      	bne.n	8008462 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	4a1d      	ldr	r2, [pc, #116]	@ (80084a0 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800842c:	401a      	ands	r2, r3
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008432:	051b      	lsls	r3, r3, #20
 8008434:	4313      	orrs	r3, r2
 8008436:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	4a1a      	ldr	r2, [pc, #104]	@ (80084a4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800843c:	401a      	ands	r2, r3
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	6a1b      	ldr	r3, [r3, #32]
 8008442:	4313      	orrs	r3, r2
 8008444:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	4a17      	ldr	r2, [pc, #92]	@ (80084a8 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800844a:	401a      	ands	r2, r3
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008450:	4313      	orrs	r3, r2
 8008452:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	4a15      	ldr	r2, [pc, #84]	@ (80084ac <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8008458:	401a      	ands	r2, r3
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800845e:	4313      	orrs	r3, r2
 8008460:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	68fa      	ldr	r2, [r7, #12]
 8008468:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	223c      	movs	r2, #60	@ 0x3c
 800846e:	2100      	movs	r1, #0
 8008470:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008472:	2300      	movs	r3, #0
}
 8008474:	0018      	movs	r0, r3
 8008476:	46bd      	mov	sp, r7
 8008478:	b004      	add	sp, #16
 800847a:	bd80      	pop	{r7, pc}
 800847c:	fffffcff 	.word	0xfffffcff
 8008480:	fffffbff 	.word	0xfffffbff
 8008484:	fffff7ff 	.word	0xfffff7ff
 8008488:	ffffefff 	.word	0xffffefff
 800848c:	ffffdfff 	.word	0xffffdfff
 8008490:	ffffbfff 	.word	0xffffbfff
 8008494:	fff0ffff 	.word	0xfff0ffff
 8008498:	efffffff 	.word	0xefffffff
 800849c:	40012c00 	.word	0x40012c00
 80084a0:	ff0fffff 	.word	0xff0fffff
 80084a4:	feffffff 	.word	0xfeffffff
 80084a8:	fdffffff 	.word	0xfdffffff
 80084ac:	dfffffff 	.word	0xdfffffff

080084b0 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b082      	sub	sp, #8
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d101      	bne.n	80084c2 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80084be:	2301      	movs	r3, #1
 80084c0:	e032      	b.n	8008528 <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2288      	movs	r2, #136	@ 0x88
 80084c6:	2124      	movs	r1, #36	@ 0x24
 80084c8:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	681a      	ldr	r2, [r3, #0]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	2101      	movs	r1, #1
 80084d6:	438a      	bics	r2, r1
 80084d8:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	2200      	movs	r2, #0
 80084e0:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	2200      	movs	r2, #0
 80084e8:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	2200      	movs	r2, #0
 80084f0:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	0018      	movs	r0, r3
 80084f6:	f7fa fc31 	bl	8002d5c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2290      	movs	r2, #144	@ 0x90
 80084fe:	2100      	movs	r1, #0
 8008500:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2288      	movs	r2, #136	@ 0x88
 8008506:	2100      	movs	r1, #0
 8008508:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	228c      	movs	r2, #140	@ 0x8c
 800850e:	2100      	movs	r1, #0
 8008510:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2200      	movs	r2, #0
 8008516:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2200      	movs	r2, #0
 800851c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2284      	movs	r2, #132	@ 0x84
 8008522:	2100      	movs	r1, #0
 8008524:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008526:	2300      	movs	r3, #0
}
 8008528:	0018      	movs	r0, r3
 800852a:	46bd      	mov	sp, r7
 800852c:	b002      	add	sp, #8
 800852e:	bd80      	pop	{r7, pc}

08008530 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b088      	sub	sp, #32
 8008534:	af00      	add	r7, sp, #0
 8008536:	60f8      	str	r0, [r7, #12]
 8008538:	60b9      	str	r1, [r7, #8]
 800853a:	1dbb      	adds	r3, r7, #6
 800853c:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2288      	movs	r2, #136	@ 0x88
 8008542:	589b      	ldr	r3, [r3, r2]
 8008544:	2b20      	cmp	r3, #32
 8008546:	d000      	beq.n	800854a <HAL_UART_Transmit_DMA+0x1a>
 8008548:	e079      	b.n	800863e <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d003      	beq.n	8008558 <HAL_UART_Transmit_DMA+0x28>
 8008550:	1dbb      	adds	r3, r7, #6
 8008552:	881b      	ldrh	r3, [r3, #0]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d101      	bne.n	800855c <HAL_UART_Transmit_DMA+0x2c>
    {
      return HAL_ERROR;
 8008558:	2301      	movs	r3, #1
 800855a:	e071      	b.n	8008640 <HAL_UART_Transmit_DMA+0x110>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	689a      	ldr	r2, [r3, #8]
 8008560:	2380      	movs	r3, #128	@ 0x80
 8008562:	015b      	lsls	r3, r3, #5
 8008564:	429a      	cmp	r2, r3
 8008566:	d109      	bne.n	800857c <HAL_UART_Transmit_DMA+0x4c>
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	691b      	ldr	r3, [r3, #16]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d105      	bne.n	800857c <HAL_UART_Transmit_DMA+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	2201      	movs	r2, #1
 8008574:	4013      	ands	r3, r2
 8008576:	d001      	beq.n	800857c <HAL_UART_Transmit_DMA+0x4c>
      {
        return  HAL_ERROR;
 8008578:	2301      	movs	r3, #1
 800857a:	e061      	b.n	8008640 <HAL_UART_Transmit_DMA+0x110>
      }
    }

    huart->pTxBuffPtr  = pData;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	68ba      	ldr	r2, [r7, #8]
 8008580:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	1dba      	adds	r2, r7, #6
 8008586:	2154      	movs	r1, #84	@ 0x54
 8008588:	8812      	ldrh	r2, [r2, #0]
 800858a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	1dba      	adds	r2, r7, #6
 8008590:	2156      	movs	r1, #86	@ 0x56
 8008592:	8812      	ldrh	r2, [r2, #0]
 8008594:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2290      	movs	r2, #144	@ 0x90
 800859a:	2100      	movs	r1, #0
 800859c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	2288      	movs	r2, #136	@ 0x88
 80085a2:	2121      	movs	r1, #33	@ 0x21
 80085a4:	5099      	str	r1, [r3, r2]

    if (huart->hdmatx != NULL)
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d028      	beq.n	8008600 <HAL_UART_Transmit_DMA+0xd0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80085b2:	4a25      	ldr	r2, [pc, #148]	@ (8008648 <HAL_UART_Transmit_DMA+0x118>)
 80085b4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80085ba:	4a24      	ldr	r2, [pc, #144]	@ (800864c <HAL_UART_Transmit_DMA+0x11c>)
 80085bc:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80085c2:	4a23      	ldr	r2, [pc, #140]	@ (8008650 <HAL_UART_Transmit_DMA+0x120>)
 80085c4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80085ca:	2200      	movs	r2, #0
 80085cc:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085d6:	0019      	movs	r1, r3
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	3328      	adds	r3, #40	@ 0x28
 80085de:	001a      	movs	r2, r3
 80085e0:	1dbb      	adds	r3, r7, #6
 80085e2:	881b      	ldrh	r3, [r3, #0]
 80085e4:	f7fb fbca 	bl	8003d7c <HAL_DMA_Start_IT>
 80085e8:	1e03      	subs	r3, r0, #0
 80085ea:	d009      	beq.n	8008600 <HAL_UART_Transmit_DMA+0xd0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	2290      	movs	r2, #144	@ 0x90
 80085f0:	2110      	movs	r1, #16
 80085f2:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	2288      	movs	r2, #136	@ 0x88
 80085f8:	2120      	movs	r1, #32
 80085fa:	5099      	str	r1, [r3, r2]

        return HAL_ERROR;
 80085fc:	2301      	movs	r3, #1
 80085fe:	e01f      	b.n	8008640 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	2240      	movs	r2, #64	@ 0x40
 8008606:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008608:	f3ef 8310 	mrs	r3, PRIMASK
 800860c:	613b      	str	r3, [r7, #16]
  return(result);
 800860e:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008610:	61fb      	str	r3, [r7, #28]
 8008612:	2301      	movs	r3, #1
 8008614:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	f383 8810 	msr	PRIMASK, r3
}
 800861c:	46c0      	nop			@ (mov r8, r8)
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	689a      	ldr	r2, [r3, #8]
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	2180      	movs	r1, #128	@ 0x80
 800862a:	430a      	orrs	r2, r1
 800862c:	609a      	str	r2, [r3, #8]
 800862e:	69fb      	ldr	r3, [r7, #28]
 8008630:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008632:	69bb      	ldr	r3, [r7, #24]
 8008634:	f383 8810 	msr	PRIMASK, r3
}
 8008638:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 800863a:	2300      	movs	r3, #0
 800863c:	e000      	b.n	8008640 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800863e:	2302      	movs	r3, #2
  }
}
 8008640:	0018      	movs	r0, r3
 8008642:	46bd      	mov	sp, r7
 8008644:	b008      	add	sp, #32
 8008646:	bd80      	pop	{r7, pc}
 8008648:	08009859 	.word	0x08009859
 800864c:	080098f1 	.word	0x080098f1
 8008650:	08009a83 	.word	0x08009a83

08008654 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b096      	sub	sp, #88	@ 0x58
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800865c:	f3ef 8310 	mrs	r3, PRIMASK
 8008660:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8008662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008664:	657b      	str	r3, [r7, #84]	@ 0x54
 8008666:	2301      	movs	r3, #1
 8008668:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800866a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800866c:	f383 8810 	msr	PRIMASK, r3
}
 8008670:	46c0      	nop			@ (mov r8, r8)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	681a      	ldr	r2, [r3, #0]
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4979      	ldr	r1, [pc, #484]	@ (8008864 <HAL_UART_Abort+0x210>)
 800867e:	400a      	ands	r2, r1
 8008680:	601a      	str	r2, [r3, #0]
 8008682:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008684:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008686:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008688:	f383 8810 	msr	PRIMASK, r3
}
 800868c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800868e:	f3ef 8310 	mrs	r3, PRIMASK
 8008692:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 8008694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 8008696:	653b      	str	r3, [r7, #80]	@ 0x50
 8008698:	2301      	movs	r3, #1
 800869a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800869c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800869e:	f383 8810 	msr	PRIMASK, r3
}
 80086a2:	46c0      	nop			@ (mov r8, r8)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	689a      	ldr	r2, [r3, #8]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	496e      	ldr	r1, [pc, #440]	@ (8008868 <HAL_UART_Abort+0x214>)
 80086b0:	400a      	ands	r2, r1
 80086b2:	609a      	str	r2, [r3, #8]
 80086b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80086b6:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80086ba:	f383 8810 	msr	PRIMASK, r3
}
 80086be:	46c0      	nop			@ (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086c4:	2b01      	cmp	r3, #1
 80086c6:	d118      	bne.n	80086fa <HAL_UART_Abort+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80086c8:	f3ef 8310 	mrs	r3, PRIMASK
 80086cc:	623b      	str	r3, [r7, #32]
  return(result);
 80086ce:	6a3b      	ldr	r3, [r7, #32]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80086d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80086d2:	2301      	movs	r3, #1
 80086d4:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086d8:	f383 8810 	msr	PRIMASK, r3
}
 80086dc:	46c0      	nop			@ (mov r8, r8)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	681a      	ldr	r2, [r3, #0]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	2110      	movs	r1, #16
 80086ea:	438a      	bics	r2, r1
 80086ec:	601a      	str	r2, [r3, #0]
 80086ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086f4:	f383 8810 	msr	PRIMASK, r3
}
 80086f8:	46c0      	nop			@ (mov r8, r8)
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	2280      	movs	r2, #128	@ 0x80
 8008702:	4013      	ands	r3, r2
 8008704:	2b80      	cmp	r3, #128	@ 0x80
 8008706:	d135      	bne.n	8008774 <HAL_UART_Abort+0x120>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008708:	f3ef 8310 	mrs	r3, PRIMASK
 800870c:	617b      	str	r3, [r7, #20]
  return(result);
 800870e:	697b      	ldr	r3, [r7, #20]
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008710:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008712:	2301      	movs	r3, #1
 8008714:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008716:	69bb      	ldr	r3, [r7, #24]
 8008718:	f383 8810 	msr	PRIMASK, r3
}
 800871c:	46c0      	nop			@ (mov r8, r8)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	689a      	ldr	r2, [r3, #8]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	2180      	movs	r1, #128	@ 0x80
 800872a:	438a      	bics	r2, r1
 800872c:	609a      	str	r2, [r3, #8]
 800872e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008730:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008732:	69fb      	ldr	r3, [r7, #28]
 8008734:	f383 8810 	msr	PRIMASK, r3
}
 8008738:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800873e:	2b00      	cmp	r3, #0
 8008740:	d018      	beq.n	8008774 <HAL_UART_Abort+0x120>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008746:	2200      	movs	r2, #0
 8008748:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800874e:	0018      	movs	r0, r3
 8008750:	f7fb fb9c 	bl	8003e8c <HAL_DMA_Abort>
 8008754:	1e03      	subs	r3, r0, #0
 8008756:	d00d      	beq.n	8008774 <HAL_UART_Abort+0x120>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800875c:	0018      	movs	r0, r3
 800875e:	f7fb fd2f 	bl	80041c0 <HAL_DMA_GetError>
 8008762:	0003      	movs	r3, r0
 8008764:	2b20      	cmp	r3, #32
 8008766:	d105      	bne.n	8008774 <HAL_UART_Abort+0x120>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2290      	movs	r2, #144	@ 0x90
 800876c:	2110      	movs	r1, #16
 800876e:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008770:	2303      	movs	r3, #3
 8008772:	e072      	b.n	800885a <HAL_UART_Abort+0x206>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	689b      	ldr	r3, [r3, #8]
 800877a:	2240      	movs	r2, #64	@ 0x40
 800877c:	4013      	ands	r3, r2
 800877e:	2b40      	cmp	r3, #64	@ 0x40
 8008780:	d139      	bne.n	80087f6 <HAL_UART_Abort+0x1a2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008782:	f3ef 8310 	mrs	r3, PRIMASK
 8008786:	60bb      	str	r3, [r7, #8]
  return(result);
 8008788:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800878a:	647b      	str	r3, [r7, #68]	@ 0x44
 800878c:	2301      	movs	r3, #1
 800878e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	f383 8810 	msr	PRIMASK, r3
}
 8008796:	46c0      	nop			@ (mov r8, r8)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	689a      	ldr	r2, [r3, #8]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	2140      	movs	r1, #64	@ 0x40
 80087a4:	438a      	bics	r2, r1
 80087a6:	609a      	str	r2, [r3, #8]
 80087a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80087aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	f383 8810 	msr	PRIMASK, r3
}
 80087b2:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2280      	movs	r2, #128	@ 0x80
 80087b8:	589b      	ldr	r3, [r3, r2]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d01b      	beq.n	80087f6 <HAL_UART_Abort+0x1a2>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2280      	movs	r2, #128	@ 0x80
 80087c2:	589b      	ldr	r3, [r3, r2]
 80087c4:	2200      	movs	r2, #0
 80087c6:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2280      	movs	r2, #128	@ 0x80
 80087cc:	589b      	ldr	r3, [r3, r2]
 80087ce:	0018      	movs	r0, r3
 80087d0:	f7fb fb5c 	bl	8003e8c <HAL_DMA_Abort>
 80087d4:	1e03      	subs	r3, r0, #0
 80087d6:	d00e      	beq.n	80087f6 <HAL_UART_Abort+0x1a2>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2280      	movs	r2, #128	@ 0x80
 80087dc:	589b      	ldr	r3, [r3, r2]
 80087de:	0018      	movs	r0, r3
 80087e0:	f7fb fcee 	bl	80041c0 <HAL_DMA_GetError>
 80087e4:	0003      	movs	r3, r0
 80087e6:	2b20      	cmp	r3, #32
 80087e8:	d105      	bne.n	80087f6 <HAL_UART_Abort+0x1a2>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2290      	movs	r2, #144	@ 0x90
 80087ee:	2110      	movs	r1, #16
 80087f0:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 80087f2:	2303      	movs	r3, #3
 80087f4:	e031      	b.n	800885a <HAL_UART_Abort+0x206>
    }
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2256      	movs	r2, #86	@ 0x56
 80087fa:	2100      	movs	r1, #0
 80087fc:	5299      	strh	r1, [r3, r2]
  huart->RxXferCount = 0U;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	225e      	movs	r2, #94	@ 0x5e
 8008802:	2100      	movs	r1, #0
 8008804:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	220f      	movs	r2, #15
 800880c:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008812:	2380      	movs	r3, #128	@ 0x80
 8008814:	059b      	lsls	r3, r3, #22
 8008816:	429a      	cmp	r2, r3
 8008818:	d107      	bne.n	800882a <HAL_UART_Abort+0x1d6>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	699a      	ldr	r2, [r3, #24]
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	2110      	movs	r1, #16
 8008826:	430a      	orrs	r2, r1
 8008828:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	699a      	ldr	r2, [r3, #24]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	2108      	movs	r1, #8
 8008836:	430a      	orrs	r2, r1
 8008838:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2288      	movs	r2, #136	@ 0x88
 800883e:	2120      	movs	r1, #32
 8008840:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	228c      	movs	r2, #140	@ 0x8c
 8008846:	2120      	movs	r1, #32
 8008848:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2200      	movs	r2, #0
 800884e:	66da      	str	r2, [r3, #108]	@ 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2290      	movs	r2, #144	@ 0x90
 8008854:	2100      	movs	r1, #0
 8008856:	5099      	str	r1, [r3, r2]

  return HAL_OK;
 8008858:	2300      	movs	r3, #0
}
 800885a:	0018      	movs	r0, r3
 800885c:	46bd      	mov	sp, r7
 800885e:	b016      	add	sp, #88	@ 0x58
 8008860:	bd80      	pop	{r7, pc}
 8008862:	46c0      	nop			@ (mov r8, r8)
 8008864:	fffffe1f 	.word	0xfffffe1f
 8008868:	ef7ffffe 	.word	0xef7ffffe

0800886c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800886c:	b5b0      	push	{r4, r5, r7, lr}
 800886e:	b0aa      	sub	sp, #168	@ 0xa8
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	69db      	ldr	r3, [r3, #28]
 800887a:	22a4      	movs	r2, #164	@ 0xa4
 800887c:	18b9      	adds	r1, r7, r2
 800887e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	20a0      	movs	r0, #160	@ 0xa0
 8008888:	1839      	adds	r1, r7, r0
 800888a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	689b      	ldr	r3, [r3, #8]
 8008892:	249c      	movs	r4, #156	@ 0x9c
 8008894:	1939      	adds	r1, r7, r4
 8008896:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008898:	0011      	movs	r1, r2
 800889a:	18bb      	adds	r3, r7, r2
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4aa2      	ldr	r2, [pc, #648]	@ (8008b28 <HAL_UART_IRQHandler+0x2bc>)
 80088a0:	4013      	ands	r3, r2
 80088a2:	2298      	movs	r2, #152	@ 0x98
 80088a4:	18bd      	adds	r5, r7, r2
 80088a6:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80088a8:	18bb      	adds	r3, r7, r2
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d11a      	bne.n	80088e6 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80088b0:	187b      	adds	r3, r7, r1
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	2220      	movs	r2, #32
 80088b6:	4013      	ands	r3, r2
 80088b8:	d015      	beq.n	80088e6 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80088ba:	183b      	adds	r3, r7, r0
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	2220      	movs	r2, #32
 80088c0:	4013      	ands	r3, r2
 80088c2:	d105      	bne.n	80088d0 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80088c4:	193b      	adds	r3, r7, r4
 80088c6:	681a      	ldr	r2, [r3, #0]
 80088c8:	2380      	movs	r3, #128	@ 0x80
 80088ca:	055b      	lsls	r3, r3, #21
 80088cc:	4013      	ands	r3, r2
 80088ce:	d00a      	beq.n	80088e6 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d100      	bne.n	80088da <HAL_UART_IRQHandler+0x6e>
 80088d8:	e2fb      	b.n	8008ed2 <HAL_UART_IRQHandler+0x666>
      {
        huart->RxISR(huart);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088de:	687a      	ldr	r2, [r7, #4]
 80088e0:	0010      	movs	r0, r2
 80088e2:	4798      	blx	r3
      }
      return;
 80088e4:	e2f5      	b.n	8008ed2 <HAL_UART_IRQHandler+0x666>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80088e6:	2398      	movs	r3, #152	@ 0x98
 80088e8:	18fb      	adds	r3, r7, r3
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d100      	bne.n	80088f2 <HAL_UART_IRQHandler+0x86>
 80088f0:	e122      	b.n	8008b38 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80088f2:	239c      	movs	r3, #156	@ 0x9c
 80088f4:	18fb      	adds	r3, r7, r3
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4a8c      	ldr	r2, [pc, #560]	@ (8008b2c <HAL_UART_IRQHandler+0x2c0>)
 80088fa:	4013      	ands	r3, r2
 80088fc:	d106      	bne.n	800890c <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80088fe:	23a0      	movs	r3, #160	@ 0xa0
 8008900:	18fb      	adds	r3, r7, r3
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4a8a      	ldr	r2, [pc, #552]	@ (8008b30 <HAL_UART_IRQHandler+0x2c4>)
 8008906:	4013      	ands	r3, r2
 8008908:	d100      	bne.n	800890c <HAL_UART_IRQHandler+0xa0>
 800890a:	e115      	b.n	8008b38 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800890c:	23a4      	movs	r3, #164	@ 0xa4
 800890e:	18fb      	adds	r3, r7, r3
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	2201      	movs	r2, #1
 8008914:	4013      	ands	r3, r2
 8008916:	d012      	beq.n	800893e <HAL_UART_IRQHandler+0xd2>
 8008918:	23a0      	movs	r3, #160	@ 0xa0
 800891a:	18fb      	adds	r3, r7, r3
 800891c:	681a      	ldr	r2, [r3, #0]
 800891e:	2380      	movs	r3, #128	@ 0x80
 8008920:	005b      	lsls	r3, r3, #1
 8008922:	4013      	ands	r3, r2
 8008924:	d00b      	beq.n	800893e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	2201      	movs	r2, #1
 800892c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2290      	movs	r2, #144	@ 0x90
 8008932:	589b      	ldr	r3, [r3, r2]
 8008934:	2201      	movs	r2, #1
 8008936:	431a      	orrs	r2, r3
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2190      	movs	r1, #144	@ 0x90
 800893c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800893e:	23a4      	movs	r3, #164	@ 0xa4
 8008940:	18fb      	adds	r3, r7, r3
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	2202      	movs	r2, #2
 8008946:	4013      	ands	r3, r2
 8008948:	d011      	beq.n	800896e <HAL_UART_IRQHandler+0x102>
 800894a:	239c      	movs	r3, #156	@ 0x9c
 800894c:	18fb      	adds	r3, r7, r3
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	2201      	movs	r2, #1
 8008952:	4013      	ands	r3, r2
 8008954:	d00b      	beq.n	800896e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	2202      	movs	r2, #2
 800895c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2290      	movs	r2, #144	@ 0x90
 8008962:	589b      	ldr	r3, [r3, r2]
 8008964:	2204      	movs	r2, #4
 8008966:	431a      	orrs	r2, r3
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2190      	movs	r1, #144	@ 0x90
 800896c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800896e:	23a4      	movs	r3, #164	@ 0xa4
 8008970:	18fb      	adds	r3, r7, r3
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	2204      	movs	r2, #4
 8008976:	4013      	ands	r3, r2
 8008978:	d011      	beq.n	800899e <HAL_UART_IRQHandler+0x132>
 800897a:	239c      	movs	r3, #156	@ 0x9c
 800897c:	18fb      	adds	r3, r7, r3
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	2201      	movs	r2, #1
 8008982:	4013      	ands	r3, r2
 8008984:	d00b      	beq.n	800899e <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	2204      	movs	r2, #4
 800898c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2290      	movs	r2, #144	@ 0x90
 8008992:	589b      	ldr	r3, [r3, r2]
 8008994:	2202      	movs	r2, #2
 8008996:	431a      	orrs	r2, r3
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2190      	movs	r1, #144	@ 0x90
 800899c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800899e:	23a4      	movs	r3, #164	@ 0xa4
 80089a0:	18fb      	adds	r3, r7, r3
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	2208      	movs	r2, #8
 80089a6:	4013      	ands	r3, r2
 80089a8:	d017      	beq.n	80089da <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80089aa:	23a0      	movs	r3, #160	@ 0xa0
 80089ac:	18fb      	adds	r3, r7, r3
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	2220      	movs	r2, #32
 80089b2:	4013      	ands	r3, r2
 80089b4:	d105      	bne.n	80089c2 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80089b6:	239c      	movs	r3, #156	@ 0x9c
 80089b8:	18fb      	adds	r3, r7, r3
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a5b      	ldr	r2, [pc, #364]	@ (8008b2c <HAL_UART_IRQHandler+0x2c0>)
 80089be:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80089c0:	d00b      	beq.n	80089da <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	2208      	movs	r2, #8
 80089c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2290      	movs	r2, #144	@ 0x90
 80089ce:	589b      	ldr	r3, [r3, r2]
 80089d0:	2208      	movs	r2, #8
 80089d2:	431a      	orrs	r2, r3
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2190      	movs	r1, #144	@ 0x90
 80089d8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80089da:	23a4      	movs	r3, #164	@ 0xa4
 80089dc:	18fb      	adds	r3, r7, r3
 80089de:	681a      	ldr	r2, [r3, #0]
 80089e0:	2380      	movs	r3, #128	@ 0x80
 80089e2:	011b      	lsls	r3, r3, #4
 80089e4:	4013      	ands	r3, r2
 80089e6:	d013      	beq.n	8008a10 <HAL_UART_IRQHandler+0x1a4>
 80089e8:	23a0      	movs	r3, #160	@ 0xa0
 80089ea:	18fb      	adds	r3, r7, r3
 80089ec:	681a      	ldr	r2, [r3, #0]
 80089ee:	2380      	movs	r3, #128	@ 0x80
 80089f0:	04db      	lsls	r3, r3, #19
 80089f2:	4013      	ands	r3, r2
 80089f4:	d00c      	beq.n	8008a10 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	2280      	movs	r2, #128	@ 0x80
 80089fc:	0112      	lsls	r2, r2, #4
 80089fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2290      	movs	r2, #144	@ 0x90
 8008a04:	589b      	ldr	r3, [r3, r2]
 8008a06:	2220      	movs	r2, #32
 8008a08:	431a      	orrs	r2, r3
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2190      	movs	r1, #144	@ 0x90
 8008a0e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2290      	movs	r2, #144	@ 0x90
 8008a14:	589b      	ldr	r3, [r3, r2]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d100      	bne.n	8008a1c <HAL_UART_IRQHandler+0x1b0>
 8008a1a:	e25c      	b.n	8008ed6 <HAL_UART_IRQHandler+0x66a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008a1c:	23a4      	movs	r3, #164	@ 0xa4
 8008a1e:	18fb      	adds	r3, r7, r3
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	2220      	movs	r2, #32
 8008a24:	4013      	ands	r3, r2
 8008a26:	d015      	beq.n	8008a54 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008a28:	23a0      	movs	r3, #160	@ 0xa0
 8008a2a:	18fb      	adds	r3, r7, r3
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	2220      	movs	r2, #32
 8008a30:	4013      	ands	r3, r2
 8008a32:	d106      	bne.n	8008a42 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008a34:	239c      	movs	r3, #156	@ 0x9c
 8008a36:	18fb      	adds	r3, r7, r3
 8008a38:	681a      	ldr	r2, [r3, #0]
 8008a3a:	2380      	movs	r3, #128	@ 0x80
 8008a3c:	055b      	lsls	r3, r3, #21
 8008a3e:	4013      	ands	r3, r2
 8008a40:	d008      	beq.n	8008a54 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d004      	beq.n	8008a54 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a4e:	687a      	ldr	r2, [r7, #4]
 8008a50:	0010      	movs	r0, r2
 8008a52:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2290      	movs	r2, #144	@ 0x90
 8008a58:	589b      	ldr	r3, [r3, r2]
 8008a5a:	2194      	movs	r1, #148	@ 0x94
 8008a5c:	187a      	adds	r2, r7, r1
 8008a5e:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	689b      	ldr	r3, [r3, #8]
 8008a66:	2240      	movs	r2, #64	@ 0x40
 8008a68:	4013      	ands	r3, r2
 8008a6a:	2b40      	cmp	r3, #64	@ 0x40
 8008a6c:	d004      	beq.n	8008a78 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008a6e:	187b      	adds	r3, r7, r1
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	2228      	movs	r2, #40	@ 0x28
 8008a74:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008a76:	d04c      	beq.n	8008b12 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	0018      	movs	r0, r3
 8008a7c:	f000 fe86 	bl	800978c <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	2240      	movs	r2, #64	@ 0x40
 8008a88:	4013      	ands	r3, r2
 8008a8a:	2b40      	cmp	r3, #64	@ 0x40
 8008a8c:	d13c      	bne.n	8008b08 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008a8e:	f3ef 8310 	mrs	r3, PRIMASK
 8008a92:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8008a94:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a96:	2090      	movs	r0, #144	@ 0x90
 8008a98:	183a      	adds	r2, r7, r0
 8008a9a:	6013      	str	r3, [r2, #0]
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008aa0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008aa2:	f383 8810 	msr	PRIMASK, r3
}
 8008aa6:	46c0      	nop			@ (mov r8, r8)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	689a      	ldr	r2, [r3, #8]
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	2140      	movs	r1, #64	@ 0x40
 8008ab4:	438a      	bics	r2, r1
 8008ab6:	609a      	str	r2, [r3, #8]
 8008ab8:	183b      	adds	r3, r7, r0
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008abe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008ac0:	f383 8810 	msr	PRIMASK, r3
}
 8008ac4:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2280      	movs	r2, #128	@ 0x80
 8008aca:	589b      	ldr	r3, [r3, r2]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d016      	beq.n	8008afe <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2280      	movs	r2, #128	@ 0x80
 8008ad4:	589b      	ldr	r3, [r3, r2]
 8008ad6:	4a17      	ldr	r2, [pc, #92]	@ (8008b34 <HAL_UART_IRQHandler+0x2c8>)
 8008ad8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2280      	movs	r2, #128	@ 0x80
 8008ade:	589b      	ldr	r3, [r3, r2]
 8008ae0:	0018      	movs	r0, r3
 8008ae2:	f7fb fa35 	bl	8003f50 <HAL_DMA_Abort_IT>
 8008ae6:	1e03      	subs	r3, r0, #0
 8008ae8:	d01c      	beq.n	8008b24 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2280      	movs	r2, #128	@ 0x80
 8008aee:	589b      	ldr	r3, [r3, r2]
 8008af0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008af2:	687a      	ldr	r2, [r7, #4]
 8008af4:	2180      	movs	r1, #128	@ 0x80
 8008af6:	5852      	ldr	r2, [r2, r1]
 8008af8:	0010      	movs	r0, r2
 8008afa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008afc:	e012      	b.n	8008b24 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	0018      	movs	r0, r3
 8008b02:	f7f8 ff2b 	bl	800195c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b06:	e00d      	b.n	8008b24 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	0018      	movs	r0, r3
 8008b0c:	f7f8 ff26 	bl	800195c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b10:	e008      	b.n	8008b24 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	0018      	movs	r0, r3
 8008b16:	f7f8 ff21 	bl	800195c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2290      	movs	r2, #144	@ 0x90
 8008b1e:	2100      	movs	r1, #0
 8008b20:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8008b22:	e1d8      	b.n	8008ed6 <HAL_UART_IRQHandler+0x66a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b24:	46c0      	nop			@ (mov r8, r8)
    return;
 8008b26:	e1d6      	b.n	8008ed6 <HAL_UART_IRQHandler+0x66a>
 8008b28:	0000080f 	.word	0x0000080f
 8008b2c:	10000001 	.word	0x10000001
 8008b30:	04000120 	.word	0x04000120
 8008b34:	08009b09 	.word	0x08009b09

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	d000      	beq.n	8008b42 <HAL_UART_IRQHandler+0x2d6>
 8008b40:	e15d      	b.n	8008dfe <HAL_UART_IRQHandler+0x592>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008b42:	23a4      	movs	r3, #164	@ 0xa4
 8008b44:	18fb      	adds	r3, r7, r3
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	2210      	movs	r2, #16
 8008b4a:	4013      	ands	r3, r2
 8008b4c:	d100      	bne.n	8008b50 <HAL_UART_IRQHandler+0x2e4>
 8008b4e:	e156      	b.n	8008dfe <HAL_UART_IRQHandler+0x592>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008b50:	23a0      	movs	r3, #160	@ 0xa0
 8008b52:	18fb      	adds	r3, r7, r3
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	2210      	movs	r2, #16
 8008b58:	4013      	ands	r3, r2
 8008b5a:	d100      	bne.n	8008b5e <HAL_UART_IRQHandler+0x2f2>
 8008b5c:	e14f      	b.n	8008dfe <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	2210      	movs	r2, #16
 8008b64:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	689b      	ldr	r3, [r3, #8]
 8008b6c:	2240      	movs	r2, #64	@ 0x40
 8008b6e:	4013      	ands	r3, r2
 8008b70:	2b40      	cmp	r3, #64	@ 0x40
 8008b72:	d000      	beq.n	8008b76 <HAL_UART_IRQHandler+0x30a>
 8008b74:	e0c3      	b.n	8008cfe <HAL_UART_IRQHandler+0x492>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2280      	movs	r2, #128	@ 0x80
 8008b7a:	589b      	ldr	r3, [r3, r2]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	685a      	ldr	r2, [r3, #4]
 8008b80:	217e      	movs	r1, #126	@ 0x7e
 8008b82:	187b      	adds	r3, r7, r1
 8008b84:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8008b86:	187b      	adds	r3, r7, r1
 8008b88:	881b      	ldrh	r3, [r3, #0]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d100      	bne.n	8008b90 <HAL_UART_IRQHandler+0x324>
 8008b8e:	e097      	b.n	8008cc0 <HAL_UART_IRQHandler+0x454>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	225c      	movs	r2, #92	@ 0x5c
 8008b94:	5a9b      	ldrh	r3, [r3, r2]
 8008b96:	187a      	adds	r2, r7, r1
 8008b98:	8812      	ldrh	r2, [r2, #0]
 8008b9a:	429a      	cmp	r2, r3
 8008b9c:	d300      	bcc.n	8008ba0 <HAL_UART_IRQHandler+0x334>
 8008b9e:	e08f      	b.n	8008cc0 <HAL_UART_IRQHandler+0x454>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	187a      	adds	r2, r7, r1
 8008ba4:	215e      	movs	r1, #94	@ 0x5e
 8008ba6:	8812      	ldrh	r2, [r2, #0]
 8008ba8:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2280      	movs	r2, #128	@ 0x80
 8008bae:	589b      	ldr	r3, [r3, r2]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	2220      	movs	r2, #32
 8008bb6:	4013      	ands	r3, r2
 8008bb8:	d170      	bne.n	8008c9c <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008bba:	f3ef 8310 	mrs	r3, PRIMASK
 8008bbe:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8008bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008bc2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008bc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bca:	f383 8810 	msr	PRIMASK, r3
}
 8008bce:	46c0      	nop			@ (mov r8, r8)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	681a      	ldr	r2, [r3, #0]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	49c4      	ldr	r1, [pc, #784]	@ (8008eec <HAL_UART_IRQHandler+0x680>)
 8008bdc:	400a      	ands	r2, r1
 8008bde:	601a      	str	r2, [r3, #0]
 8008be0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008be2:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008be4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008be6:	f383 8810 	msr	PRIMASK, r3
}
 8008bea:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008bec:	f3ef 8310 	mrs	r3, PRIMASK
 8008bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8008bf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bf4:	677b      	str	r3, [r7, #116]	@ 0x74
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008bfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008bfc:	f383 8810 	msr	PRIMASK, r3
}
 8008c00:	46c0      	nop			@ (mov r8, r8)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	689a      	ldr	r2, [r3, #8]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	2101      	movs	r1, #1
 8008c0e:	438a      	bics	r2, r1
 8008c10:	609a      	str	r2, [r3, #8]
 8008c12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008c14:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c18:	f383 8810 	msr	PRIMASK, r3
}
 8008c1c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008c1e:	f3ef 8310 	mrs	r3, PRIMASK
 8008c22:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8008c24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c26:	673b      	str	r3, [r7, #112]	@ 0x70
 8008c28:	2301      	movs	r3, #1
 8008c2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c2e:	f383 8810 	msr	PRIMASK, r3
}
 8008c32:	46c0      	nop			@ (mov r8, r8)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	689a      	ldr	r2, [r3, #8]
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	2140      	movs	r1, #64	@ 0x40
 8008c40:	438a      	bics	r2, r1
 8008c42:	609a      	str	r2, [r3, #8]
 8008c44:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008c46:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c4a:	f383 8810 	msr	PRIMASK, r3
}
 8008c4e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	228c      	movs	r2, #140	@ 0x8c
 8008c54:	2120      	movs	r1, #32
 8008c56:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008c5e:	f3ef 8310 	mrs	r3, PRIMASK
 8008c62:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8008c64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c66:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008c68:	2301      	movs	r3, #1
 8008c6a:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c6c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008c6e:	f383 8810 	msr	PRIMASK, r3
}
 8008c72:	46c0      	nop			@ (mov r8, r8)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	681a      	ldr	r2, [r3, #0]
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	2110      	movs	r1, #16
 8008c80:	438a      	bics	r2, r1
 8008c82:	601a      	str	r2, [r3, #0]
 8008c84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c86:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c88:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008c8a:	f383 8810 	msr	PRIMASK, r3
}
 8008c8e:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2280      	movs	r2, #128	@ 0x80
 8008c94:	589b      	ldr	r3, [r3, r2]
 8008c96:	0018      	movs	r0, r3
 8008c98:	f7fb f8f8 	bl	8003e8c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2202      	movs	r2, #2
 8008ca0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	225c      	movs	r2, #92	@ 0x5c
 8008ca6:	5a9a      	ldrh	r2, [r3, r2]
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	215e      	movs	r1, #94	@ 0x5e
 8008cac:	5a5b      	ldrh	r3, [r3, r1]
 8008cae:	b29b      	uxth	r3, r3
 8008cb0:	1ad3      	subs	r3, r2, r3
 8008cb2:	b29a      	uxth	r2, r3
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	0011      	movs	r1, r2
 8008cb8:	0018      	movs	r0, r3
 8008cba:	f7f8 fd97 	bl	80017ec <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008cbe:	e10c      	b.n	8008eda <HAL_UART_IRQHandler+0x66e>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	225c      	movs	r2, #92	@ 0x5c
 8008cc4:	5a9b      	ldrh	r3, [r3, r2]
 8008cc6:	227e      	movs	r2, #126	@ 0x7e
 8008cc8:	18ba      	adds	r2, r7, r2
 8008cca:	8812      	ldrh	r2, [r2, #0]
 8008ccc:	429a      	cmp	r2, r3
 8008cce:	d000      	beq.n	8008cd2 <HAL_UART_IRQHandler+0x466>
 8008cd0:	e103      	b.n	8008eda <HAL_UART_IRQHandler+0x66e>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2280      	movs	r2, #128	@ 0x80
 8008cd6:	589b      	ldr	r3, [r3, r2]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	2220      	movs	r2, #32
 8008cde:	4013      	ands	r3, r2
 8008ce0:	2b20      	cmp	r3, #32
 8008ce2:	d000      	beq.n	8008ce6 <HAL_UART_IRQHandler+0x47a>
 8008ce4:	e0f9      	b.n	8008eda <HAL_UART_IRQHandler+0x66e>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2202      	movs	r2, #2
 8008cea:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	225c      	movs	r2, #92	@ 0x5c
 8008cf0:	5a9a      	ldrh	r2, [r3, r2]
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	0011      	movs	r1, r2
 8008cf6:	0018      	movs	r0, r3
 8008cf8:	f7f8 fd78 	bl	80017ec <HAL_UARTEx_RxEventCallback>
      return;
 8008cfc:	e0ed      	b.n	8008eda <HAL_UART_IRQHandler+0x66e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	225c      	movs	r2, #92	@ 0x5c
 8008d02:	5a99      	ldrh	r1, [r3, r2]
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	225e      	movs	r2, #94	@ 0x5e
 8008d08:	5a9b      	ldrh	r3, [r3, r2]
 8008d0a:	b29a      	uxth	r2, r3
 8008d0c:	208e      	movs	r0, #142	@ 0x8e
 8008d0e:	183b      	adds	r3, r7, r0
 8008d10:	1a8a      	subs	r2, r1, r2
 8008d12:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	225e      	movs	r2, #94	@ 0x5e
 8008d18:	5a9b      	ldrh	r3, [r3, r2]
 8008d1a:	b29b      	uxth	r3, r3
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d100      	bne.n	8008d22 <HAL_UART_IRQHandler+0x4b6>
 8008d20:	e0dd      	b.n	8008ede <HAL_UART_IRQHandler+0x672>
          && (nb_rx_data > 0U))
 8008d22:	183b      	adds	r3, r7, r0
 8008d24:	881b      	ldrh	r3, [r3, #0]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d100      	bne.n	8008d2c <HAL_UART_IRQHandler+0x4c0>
 8008d2a:	e0d8      	b.n	8008ede <HAL_UART_IRQHandler+0x672>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008d2c:	f3ef 8310 	mrs	r3, PRIMASK
 8008d30:	60fb      	str	r3, [r7, #12]
  return(result);
 8008d32:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d34:	2488      	movs	r4, #136	@ 0x88
 8008d36:	193a      	adds	r2, r7, r4
 8008d38:	6013      	str	r3, [r2, #0]
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	f383 8810 	msr	PRIMASK, r3
}
 8008d44:	46c0      	nop			@ (mov r8, r8)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	681a      	ldr	r2, [r3, #0]
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4967      	ldr	r1, [pc, #412]	@ (8008ef0 <HAL_UART_IRQHandler+0x684>)
 8008d52:	400a      	ands	r2, r1
 8008d54:	601a      	str	r2, [r3, #0]
 8008d56:	193b      	adds	r3, r7, r4
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	f383 8810 	msr	PRIMASK, r3
}
 8008d62:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008d64:	f3ef 8310 	mrs	r3, PRIMASK
 8008d68:	61bb      	str	r3, [r7, #24]
  return(result);
 8008d6a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008d6c:	2484      	movs	r4, #132	@ 0x84
 8008d6e:	193a      	adds	r2, r7, r4
 8008d70:	6013      	str	r3, [r2, #0]
 8008d72:	2301      	movs	r3, #1
 8008d74:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d76:	69fb      	ldr	r3, [r7, #28]
 8008d78:	f383 8810 	msr	PRIMASK, r3
}
 8008d7c:	46c0      	nop			@ (mov r8, r8)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	689a      	ldr	r2, [r3, #8]
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	495a      	ldr	r1, [pc, #360]	@ (8008ef4 <HAL_UART_IRQHandler+0x688>)
 8008d8a:	400a      	ands	r2, r1
 8008d8c:	609a      	str	r2, [r3, #8]
 8008d8e:	193b      	adds	r3, r7, r4
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d94:	6a3b      	ldr	r3, [r7, #32]
 8008d96:	f383 8810 	msr	PRIMASK, r3
}
 8008d9a:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	228c      	movs	r2, #140	@ 0x8c
 8008da0:	2120      	movs	r1, #32
 8008da2:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2200      	movs	r2, #0
 8008da8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2200      	movs	r2, #0
 8008dae:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008db0:	f3ef 8310 	mrs	r3, PRIMASK
 8008db4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8008db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008db8:	2480      	movs	r4, #128	@ 0x80
 8008dba:	193a      	adds	r2, r7, r4
 8008dbc:	6013      	str	r3, [r2, #0]
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dc4:	f383 8810 	msr	PRIMASK, r3
}
 8008dc8:	46c0      	nop			@ (mov r8, r8)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	681a      	ldr	r2, [r3, #0]
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	2110      	movs	r1, #16
 8008dd6:	438a      	bics	r2, r1
 8008dd8:	601a      	str	r2, [r3, #0]
 8008dda:	193b      	adds	r3, r7, r4
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008de2:	f383 8810 	msr	PRIMASK, r3
}
 8008de6:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2202      	movs	r2, #2
 8008dec:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008dee:	183b      	adds	r3, r7, r0
 8008df0:	881a      	ldrh	r2, [r3, #0]
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	0011      	movs	r1, r2
 8008df6:	0018      	movs	r0, r3
 8008df8:	f7f8 fcf8 	bl	80017ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008dfc:	e06f      	b.n	8008ede <HAL_UART_IRQHandler+0x672>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008dfe:	23a4      	movs	r3, #164	@ 0xa4
 8008e00:	18fb      	adds	r3, r7, r3
 8008e02:	681a      	ldr	r2, [r3, #0]
 8008e04:	2380      	movs	r3, #128	@ 0x80
 8008e06:	035b      	lsls	r3, r3, #13
 8008e08:	4013      	ands	r3, r2
 8008e0a:	d010      	beq.n	8008e2e <HAL_UART_IRQHandler+0x5c2>
 8008e0c:	239c      	movs	r3, #156	@ 0x9c
 8008e0e:	18fb      	adds	r3, r7, r3
 8008e10:	681a      	ldr	r2, [r3, #0]
 8008e12:	2380      	movs	r3, #128	@ 0x80
 8008e14:	03db      	lsls	r3, r3, #15
 8008e16:	4013      	ands	r3, r2
 8008e18:	d009      	beq.n	8008e2e <HAL_UART_IRQHandler+0x5c2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	2280      	movs	r2, #128	@ 0x80
 8008e20:	0352      	lsls	r2, r2, #13
 8008e22:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	0018      	movs	r0, r3
 8008e28:	f000 ff24 	bl	8009c74 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008e2c:	e05a      	b.n	8008ee4 <HAL_UART_IRQHandler+0x678>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008e2e:	23a4      	movs	r3, #164	@ 0xa4
 8008e30:	18fb      	adds	r3, r7, r3
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	2280      	movs	r2, #128	@ 0x80
 8008e36:	4013      	ands	r3, r2
 8008e38:	d016      	beq.n	8008e68 <HAL_UART_IRQHandler+0x5fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008e3a:	23a0      	movs	r3, #160	@ 0xa0
 8008e3c:	18fb      	adds	r3, r7, r3
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	2280      	movs	r2, #128	@ 0x80
 8008e42:	4013      	ands	r3, r2
 8008e44:	d106      	bne.n	8008e54 <HAL_UART_IRQHandler+0x5e8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008e46:	239c      	movs	r3, #156	@ 0x9c
 8008e48:	18fb      	adds	r3, r7, r3
 8008e4a:	681a      	ldr	r2, [r3, #0]
 8008e4c:	2380      	movs	r3, #128	@ 0x80
 8008e4e:	041b      	lsls	r3, r3, #16
 8008e50:	4013      	ands	r3, r2
 8008e52:	d009      	beq.n	8008e68 <HAL_UART_IRQHandler+0x5fc>
  {
    if (huart->TxISR != NULL)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d042      	beq.n	8008ee2 <HAL_UART_IRQHandler+0x676>
    {
      huart->TxISR(huart);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008e60:	687a      	ldr	r2, [r7, #4]
 8008e62:	0010      	movs	r0, r2
 8008e64:	4798      	blx	r3
    }
    return;
 8008e66:	e03c      	b.n	8008ee2 <HAL_UART_IRQHandler+0x676>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008e68:	23a4      	movs	r3, #164	@ 0xa4
 8008e6a:	18fb      	adds	r3, r7, r3
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	2240      	movs	r2, #64	@ 0x40
 8008e70:	4013      	ands	r3, r2
 8008e72:	d00a      	beq.n	8008e8a <HAL_UART_IRQHandler+0x61e>
 8008e74:	23a0      	movs	r3, #160	@ 0xa0
 8008e76:	18fb      	adds	r3, r7, r3
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	2240      	movs	r2, #64	@ 0x40
 8008e7c:	4013      	ands	r3, r2
 8008e7e:	d004      	beq.n	8008e8a <HAL_UART_IRQHandler+0x61e>
  {
    UART_EndTransmit_IT(huart);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	0018      	movs	r0, r3
 8008e84:	f000 fe57 	bl	8009b36 <UART_EndTransmit_IT>
    return;
 8008e88:	e02c      	b.n	8008ee4 <HAL_UART_IRQHandler+0x678>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008e8a:	23a4      	movs	r3, #164	@ 0xa4
 8008e8c:	18fb      	adds	r3, r7, r3
 8008e8e:	681a      	ldr	r2, [r3, #0]
 8008e90:	2380      	movs	r3, #128	@ 0x80
 8008e92:	041b      	lsls	r3, r3, #16
 8008e94:	4013      	ands	r3, r2
 8008e96:	d00b      	beq.n	8008eb0 <HAL_UART_IRQHandler+0x644>
 8008e98:	23a0      	movs	r3, #160	@ 0xa0
 8008e9a:	18fb      	adds	r3, r7, r3
 8008e9c:	681a      	ldr	r2, [r3, #0]
 8008e9e:	2380      	movs	r3, #128	@ 0x80
 8008ea0:	05db      	lsls	r3, r3, #23
 8008ea2:	4013      	ands	r3, r2
 8008ea4:	d004      	beq.n	8008eb0 <HAL_UART_IRQHandler+0x644>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	0018      	movs	r0, r3
 8008eaa:	f000 fef3 	bl	8009c94 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008eae:	e019      	b.n	8008ee4 <HAL_UART_IRQHandler+0x678>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008eb0:	23a4      	movs	r3, #164	@ 0xa4
 8008eb2:	18fb      	adds	r3, r7, r3
 8008eb4:	681a      	ldr	r2, [r3, #0]
 8008eb6:	2380      	movs	r3, #128	@ 0x80
 8008eb8:	045b      	lsls	r3, r3, #17
 8008eba:	4013      	ands	r3, r2
 8008ebc:	d012      	beq.n	8008ee4 <HAL_UART_IRQHandler+0x678>
 8008ebe:	23a0      	movs	r3, #160	@ 0xa0
 8008ec0:	18fb      	adds	r3, r7, r3
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	da0d      	bge.n	8008ee4 <HAL_UART_IRQHandler+0x678>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	0018      	movs	r0, r3
 8008ecc:	f000 feda 	bl	8009c84 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008ed0:	e008      	b.n	8008ee4 <HAL_UART_IRQHandler+0x678>
      return;
 8008ed2:	46c0      	nop			@ (mov r8, r8)
 8008ed4:	e006      	b.n	8008ee4 <HAL_UART_IRQHandler+0x678>
    return;
 8008ed6:	46c0      	nop			@ (mov r8, r8)
 8008ed8:	e004      	b.n	8008ee4 <HAL_UART_IRQHandler+0x678>
      return;
 8008eda:	46c0      	nop			@ (mov r8, r8)
 8008edc:	e002      	b.n	8008ee4 <HAL_UART_IRQHandler+0x678>
      return;
 8008ede:	46c0      	nop			@ (mov r8, r8)
 8008ee0:	e000      	b.n	8008ee4 <HAL_UART_IRQHandler+0x678>
    return;
 8008ee2:	46c0      	nop			@ (mov r8, r8)
  }
}
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	b02a      	add	sp, #168	@ 0xa8
 8008ee8:	bdb0      	pop	{r4, r5, r7, pc}
 8008eea:	46c0      	nop			@ (mov r8, r8)
 8008eec:	fffffeff 	.word	0xfffffeff
 8008ef0:	fffffedf 	.word	0xfffffedf
 8008ef4:	effffffe 	.word	0xeffffffe

08008ef8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b082      	sub	sp, #8
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008f00:	46c0      	nop			@ (mov r8, r8)
 8008f02:	46bd      	mov	sp, r7
 8008f04:	b002      	add	sp, #8
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b082      	sub	sp, #8
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8008f10:	46c0      	nop			@ (mov r8, r8)
 8008f12:	46bd      	mov	sp, r7
 8008f14:	b002      	add	sp, #8
 8008f16:	bd80      	pop	{r7, pc}

08008f18 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b082      	sub	sp, #8
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008f20:	46c0      	nop			@ (mov r8, r8)
 8008f22:	46bd      	mov	sp, r7
 8008f24:	b002      	add	sp, #8
 8008f26:	bd80      	pop	{r7, pc}

08008f28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b088      	sub	sp, #32
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008f30:	231e      	movs	r3, #30
 8008f32:	18fb      	adds	r3, r7, r3
 8008f34:	2200      	movs	r2, #0
 8008f36:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	689a      	ldr	r2, [r3, #8]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	691b      	ldr	r3, [r3, #16]
 8008f40:	431a      	orrs	r2, r3
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	695b      	ldr	r3, [r3, #20]
 8008f46:	431a      	orrs	r2, r3
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	69db      	ldr	r3, [r3, #28]
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4aab      	ldr	r2, [pc, #684]	@ (8009204 <UART_SetConfig+0x2dc>)
 8008f58:	4013      	ands	r3, r2
 8008f5a:	0019      	movs	r1, r3
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	697a      	ldr	r2, [r7, #20]
 8008f62:	430a      	orrs	r2, r1
 8008f64:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	685b      	ldr	r3, [r3, #4]
 8008f6c:	4aa6      	ldr	r2, [pc, #664]	@ (8009208 <UART_SetConfig+0x2e0>)
 8008f6e:	4013      	ands	r3, r2
 8008f70:	0019      	movs	r1, r3
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	68da      	ldr	r2, [r3, #12]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	430a      	orrs	r2, r1
 8008f7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	699b      	ldr	r3, [r3, #24]
 8008f82:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6a1b      	ldr	r3, [r3, #32]
 8008f88:	697a      	ldr	r2, [r7, #20]
 8008f8a:	4313      	orrs	r3, r2
 8008f8c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	689b      	ldr	r3, [r3, #8]
 8008f94:	4a9d      	ldr	r2, [pc, #628]	@ (800920c <UART_SetConfig+0x2e4>)
 8008f96:	4013      	ands	r3, r2
 8008f98:	0019      	movs	r1, r3
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	697a      	ldr	r2, [r7, #20]
 8008fa0:	430a      	orrs	r2, r1
 8008fa2:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008faa:	220f      	movs	r2, #15
 8008fac:	4393      	bics	r3, r2
 8008fae:	0019      	movs	r1, r3
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	430a      	orrs	r2, r1
 8008fba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a93      	ldr	r2, [pc, #588]	@ (8009210 <UART_SetConfig+0x2e8>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d127      	bne.n	8009016 <UART_SetConfig+0xee>
 8008fc6:	4b93      	ldr	r3, [pc, #588]	@ (8009214 <UART_SetConfig+0x2ec>)
 8008fc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fca:	2203      	movs	r2, #3
 8008fcc:	4013      	ands	r3, r2
 8008fce:	2b03      	cmp	r3, #3
 8008fd0:	d017      	beq.n	8009002 <UART_SetConfig+0xda>
 8008fd2:	d81b      	bhi.n	800900c <UART_SetConfig+0xe4>
 8008fd4:	2b02      	cmp	r3, #2
 8008fd6:	d00a      	beq.n	8008fee <UART_SetConfig+0xc6>
 8008fd8:	d818      	bhi.n	800900c <UART_SetConfig+0xe4>
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d002      	beq.n	8008fe4 <UART_SetConfig+0xbc>
 8008fde:	2b01      	cmp	r3, #1
 8008fe0:	d00a      	beq.n	8008ff8 <UART_SetConfig+0xd0>
 8008fe2:	e013      	b.n	800900c <UART_SetConfig+0xe4>
 8008fe4:	231f      	movs	r3, #31
 8008fe6:	18fb      	adds	r3, r7, r3
 8008fe8:	2200      	movs	r2, #0
 8008fea:	701a      	strb	r2, [r3, #0]
 8008fec:	e021      	b.n	8009032 <UART_SetConfig+0x10a>
 8008fee:	231f      	movs	r3, #31
 8008ff0:	18fb      	adds	r3, r7, r3
 8008ff2:	2202      	movs	r2, #2
 8008ff4:	701a      	strb	r2, [r3, #0]
 8008ff6:	e01c      	b.n	8009032 <UART_SetConfig+0x10a>
 8008ff8:	231f      	movs	r3, #31
 8008ffa:	18fb      	adds	r3, r7, r3
 8008ffc:	2204      	movs	r2, #4
 8008ffe:	701a      	strb	r2, [r3, #0]
 8009000:	e017      	b.n	8009032 <UART_SetConfig+0x10a>
 8009002:	231f      	movs	r3, #31
 8009004:	18fb      	adds	r3, r7, r3
 8009006:	2208      	movs	r2, #8
 8009008:	701a      	strb	r2, [r3, #0]
 800900a:	e012      	b.n	8009032 <UART_SetConfig+0x10a>
 800900c:	231f      	movs	r3, #31
 800900e:	18fb      	adds	r3, r7, r3
 8009010:	2210      	movs	r2, #16
 8009012:	701a      	strb	r2, [r3, #0]
 8009014:	e00d      	b.n	8009032 <UART_SetConfig+0x10a>
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	4a7f      	ldr	r2, [pc, #508]	@ (8009218 <UART_SetConfig+0x2f0>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d104      	bne.n	800902a <UART_SetConfig+0x102>
 8009020:	231f      	movs	r3, #31
 8009022:	18fb      	adds	r3, r7, r3
 8009024:	2200      	movs	r2, #0
 8009026:	701a      	strb	r2, [r3, #0]
 8009028:	e003      	b.n	8009032 <UART_SetConfig+0x10a>
 800902a:	231f      	movs	r3, #31
 800902c:	18fb      	adds	r3, r7, r3
 800902e:	2210      	movs	r2, #16
 8009030:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	69da      	ldr	r2, [r3, #28]
 8009036:	2380      	movs	r3, #128	@ 0x80
 8009038:	021b      	lsls	r3, r3, #8
 800903a:	429a      	cmp	r2, r3
 800903c:	d000      	beq.n	8009040 <UART_SetConfig+0x118>
 800903e:	e06f      	b.n	8009120 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8009040:	231f      	movs	r3, #31
 8009042:	18fb      	adds	r3, r7, r3
 8009044:	781b      	ldrb	r3, [r3, #0]
 8009046:	2b08      	cmp	r3, #8
 8009048:	d01f      	beq.n	800908a <UART_SetConfig+0x162>
 800904a:	dc22      	bgt.n	8009092 <UART_SetConfig+0x16a>
 800904c:	2b04      	cmp	r3, #4
 800904e:	d017      	beq.n	8009080 <UART_SetConfig+0x158>
 8009050:	dc1f      	bgt.n	8009092 <UART_SetConfig+0x16a>
 8009052:	2b00      	cmp	r3, #0
 8009054:	d002      	beq.n	800905c <UART_SetConfig+0x134>
 8009056:	2b02      	cmp	r3, #2
 8009058:	d005      	beq.n	8009066 <UART_SetConfig+0x13e>
 800905a:	e01a      	b.n	8009092 <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800905c:	f7fe fa88 	bl	8007570 <HAL_RCC_GetPCLK1Freq>
 8009060:	0003      	movs	r3, r0
 8009062:	61bb      	str	r3, [r7, #24]
        break;
 8009064:	e01c      	b.n	80090a0 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8009066:	4b6b      	ldr	r3, [pc, #428]	@ (8009214 <UART_SetConfig+0x2ec>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	095b      	lsrs	r3, r3, #5
 800906c:	2207      	movs	r2, #7
 800906e:	4013      	ands	r3, r2
 8009070:	3301      	adds	r3, #1
 8009072:	0019      	movs	r1, r3
 8009074:	4869      	ldr	r0, [pc, #420]	@ (800921c <UART_SetConfig+0x2f4>)
 8009076:	f7f7 f847 	bl	8000108 <__udivsi3>
 800907a:	0003      	movs	r3, r0
 800907c:	61bb      	str	r3, [r7, #24]
        break;
 800907e:	e00f      	b.n	80090a0 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009080:	f7fe fa00 	bl	8007484 <HAL_RCC_GetSysClockFreq>
 8009084:	0003      	movs	r3, r0
 8009086:	61bb      	str	r3, [r7, #24]
        break;
 8009088:	e00a      	b.n	80090a0 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800908a:	2380      	movs	r3, #128	@ 0x80
 800908c:	021b      	lsls	r3, r3, #8
 800908e:	61bb      	str	r3, [r7, #24]
        break;
 8009090:	e006      	b.n	80090a0 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8009092:	2300      	movs	r3, #0
 8009094:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009096:	231e      	movs	r3, #30
 8009098:	18fb      	adds	r3, r7, r3
 800909a:	2201      	movs	r2, #1
 800909c:	701a      	strb	r2, [r3, #0]
        break;
 800909e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80090a0:	69bb      	ldr	r3, [r7, #24]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d100      	bne.n	80090a8 <UART_SetConfig+0x180>
 80090a6:	e097      	b.n	80091d8 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80090ac:	4b5c      	ldr	r3, [pc, #368]	@ (8009220 <UART_SetConfig+0x2f8>)
 80090ae:	0052      	lsls	r2, r2, #1
 80090b0:	5ad3      	ldrh	r3, [r2, r3]
 80090b2:	0019      	movs	r1, r3
 80090b4:	69b8      	ldr	r0, [r7, #24]
 80090b6:	f7f7 f827 	bl	8000108 <__udivsi3>
 80090ba:	0003      	movs	r3, r0
 80090bc:	005a      	lsls	r2, r3, #1
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	685b      	ldr	r3, [r3, #4]
 80090c2:	085b      	lsrs	r3, r3, #1
 80090c4:	18d2      	adds	r2, r2, r3
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	685b      	ldr	r3, [r3, #4]
 80090ca:	0019      	movs	r1, r3
 80090cc:	0010      	movs	r0, r2
 80090ce:	f7f7 f81b 	bl	8000108 <__udivsi3>
 80090d2:	0003      	movs	r3, r0
 80090d4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	2b0f      	cmp	r3, #15
 80090da:	d91c      	bls.n	8009116 <UART_SetConfig+0x1ee>
 80090dc:	693a      	ldr	r2, [r7, #16]
 80090de:	2380      	movs	r3, #128	@ 0x80
 80090e0:	025b      	lsls	r3, r3, #9
 80090e2:	429a      	cmp	r2, r3
 80090e4:	d217      	bcs.n	8009116 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	b29a      	uxth	r2, r3
 80090ea:	200e      	movs	r0, #14
 80090ec:	183b      	adds	r3, r7, r0
 80090ee:	210f      	movs	r1, #15
 80090f0:	438a      	bics	r2, r1
 80090f2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	085b      	lsrs	r3, r3, #1
 80090f8:	b29b      	uxth	r3, r3
 80090fa:	2207      	movs	r2, #7
 80090fc:	4013      	ands	r3, r2
 80090fe:	b299      	uxth	r1, r3
 8009100:	183b      	adds	r3, r7, r0
 8009102:	183a      	adds	r2, r7, r0
 8009104:	8812      	ldrh	r2, [r2, #0]
 8009106:	430a      	orrs	r2, r1
 8009108:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	183a      	adds	r2, r7, r0
 8009110:	8812      	ldrh	r2, [r2, #0]
 8009112:	60da      	str	r2, [r3, #12]
 8009114:	e060      	b.n	80091d8 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8009116:	231e      	movs	r3, #30
 8009118:	18fb      	adds	r3, r7, r3
 800911a:	2201      	movs	r2, #1
 800911c:	701a      	strb	r2, [r3, #0]
 800911e:	e05b      	b.n	80091d8 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009120:	231f      	movs	r3, #31
 8009122:	18fb      	adds	r3, r7, r3
 8009124:	781b      	ldrb	r3, [r3, #0]
 8009126:	2b08      	cmp	r3, #8
 8009128:	d01f      	beq.n	800916a <UART_SetConfig+0x242>
 800912a:	dc22      	bgt.n	8009172 <UART_SetConfig+0x24a>
 800912c:	2b04      	cmp	r3, #4
 800912e:	d017      	beq.n	8009160 <UART_SetConfig+0x238>
 8009130:	dc1f      	bgt.n	8009172 <UART_SetConfig+0x24a>
 8009132:	2b00      	cmp	r3, #0
 8009134:	d002      	beq.n	800913c <UART_SetConfig+0x214>
 8009136:	2b02      	cmp	r3, #2
 8009138:	d005      	beq.n	8009146 <UART_SetConfig+0x21e>
 800913a:	e01a      	b.n	8009172 <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800913c:	f7fe fa18 	bl	8007570 <HAL_RCC_GetPCLK1Freq>
 8009140:	0003      	movs	r3, r0
 8009142:	61bb      	str	r3, [r7, #24]
        break;
 8009144:	e01c      	b.n	8009180 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8009146:	4b33      	ldr	r3, [pc, #204]	@ (8009214 <UART_SetConfig+0x2ec>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	095b      	lsrs	r3, r3, #5
 800914c:	2207      	movs	r2, #7
 800914e:	4013      	ands	r3, r2
 8009150:	3301      	adds	r3, #1
 8009152:	0019      	movs	r1, r3
 8009154:	4831      	ldr	r0, [pc, #196]	@ (800921c <UART_SetConfig+0x2f4>)
 8009156:	f7f6 ffd7 	bl	8000108 <__udivsi3>
 800915a:	0003      	movs	r3, r0
 800915c:	61bb      	str	r3, [r7, #24]
        break;
 800915e:	e00f      	b.n	8009180 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009160:	f7fe f990 	bl	8007484 <HAL_RCC_GetSysClockFreq>
 8009164:	0003      	movs	r3, r0
 8009166:	61bb      	str	r3, [r7, #24]
        break;
 8009168:	e00a      	b.n	8009180 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800916a:	2380      	movs	r3, #128	@ 0x80
 800916c:	021b      	lsls	r3, r3, #8
 800916e:	61bb      	str	r3, [r7, #24]
        break;
 8009170:	e006      	b.n	8009180 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8009172:	2300      	movs	r3, #0
 8009174:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009176:	231e      	movs	r3, #30
 8009178:	18fb      	adds	r3, r7, r3
 800917a:	2201      	movs	r2, #1
 800917c:	701a      	strb	r2, [r3, #0]
        break;
 800917e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8009180:	69bb      	ldr	r3, [r7, #24]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d028      	beq.n	80091d8 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800918a:	4b25      	ldr	r3, [pc, #148]	@ (8009220 <UART_SetConfig+0x2f8>)
 800918c:	0052      	lsls	r2, r2, #1
 800918e:	5ad3      	ldrh	r3, [r2, r3]
 8009190:	0019      	movs	r1, r3
 8009192:	69b8      	ldr	r0, [r7, #24]
 8009194:	f7f6 ffb8 	bl	8000108 <__udivsi3>
 8009198:	0003      	movs	r3, r0
 800919a:	001a      	movs	r2, r3
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	685b      	ldr	r3, [r3, #4]
 80091a0:	085b      	lsrs	r3, r3, #1
 80091a2:	18d2      	adds	r2, r2, r3
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	685b      	ldr	r3, [r3, #4]
 80091a8:	0019      	movs	r1, r3
 80091aa:	0010      	movs	r0, r2
 80091ac:	f7f6 ffac 	bl	8000108 <__udivsi3>
 80091b0:	0003      	movs	r3, r0
 80091b2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	2b0f      	cmp	r3, #15
 80091b8:	d90a      	bls.n	80091d0 <UART_SetConfig+0x2a8>
 80091ba:	693a      	ldr	r2, [r7, #16]
 80091bc:	2380      	movs	r3, #128	@ 0x80
 80091be:	025b      	lsls	r3, r3, #9
 80091c0:	429a      	cmp	r2, r3
 80091c2:	d205      	bcs.n	80091d0 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	b29a      	uxth	r2, r3
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	60da      	str	r2, [r3, #12]
 80091ce:	e003      	b.n	80091d8 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 80091d0:	231e      	movs	r3, #30
 80091d2:	18fb      	adds	r3, r7, r3
 80091d4:	2201      	movs	r2, #1
 80091d6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	226a      	movs	r2, #106	@ 0x6a
 80091dc:	2101      	movs	r1, #1
 80091de:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2268      	movs	r2, #104	@ 0x68
 80091e4:	2101      	movs	r1, #1
 80091e6:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2200      	movs	r2, #0
 80091ec:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2200      	movs	r2, #0
 80091f2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80091f4:	231e      	movs	r3, #30
 80091f6:	18fb      	adds	r3, r7, r3
 80091f8:	781b      	ldrb	r3, [r3, #0]
}
 80091fa:	0018      	movs	r0, r3
 80091fc:	46bd      	mov	sp, r7
 80091fe:	b008      	add	sp, #32
 8009200:	bd80      	pop	{r7, pc}
 8009202:	46c0      	nop			@ (mov r8, r8)
 8009204:	cfff69f3 	.word	0xcfff69f3
 8009208:	ffffcfff 	.word	0xffffcfff
 800920c:	11fff4ff 	.word	0x11fff4ff
 8009210:	40013800 	.word	0x40013800
 8009214:	40021000 	.word	0x40021000
 8009218:	40004400 	.word	0x40004400
 800921c:	02dc6c00 	.word	0x02dc6c00
 8009220:	0800a408 	.word	0x0800a408

08009224 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b082      	sub	sp, #8
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009230:	2208      	movs	r2, #8
 8009232:	4013      	ands	r3, r2
 8009234:	d00b      	beq.n	800924e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	685b      	ldr	r3, [r3, #4]
 800923c:	4a4a      	ldr	r2, [pc, #296]	@ (8009368 <UART_AdvFeatureConfig+0x144>)
 800923e:	4013      	ands	r3, r2
 8009240:	0019      	movs	r1, r3
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	430a      	orrs	r2, r1
 800924c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009252:	2201      	movs	r2, #1
 8009254:	4013      	ands	r3, r2
 8009256:	d00b      	beq.n	8009270 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	4a43      	ldr	r2, [pc, #268]	@ (800936c <UART_AdvFeatureConfig+0x148>)
 8009260:	4013      	ands	r3, r2
 8009262:	0019      	movs	r1, r3
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	430a      	orrs	r2, r1
 800926e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009274:	2202      	movs	r2, #2
 8009276:	4013      	ands	r3, r2
 8009278:	d00b      	beq.n	8009292 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	4a3b      	ldr	r2, [pc, #236]	@ (8009370 <UART_AdvFeatureConfig+0x14c>)
 8009282:	4013      	ands	r3, r2
 8009284:	0019      	movs	r1, r3
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	430a      	orrs	r2, r1
 8009290:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009296:	2204      	movs	r2, #4
 8009298:	4013      	ands	r3, r2
 800929a:	d00b      	beq.n	80092b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	685b      	ldr	r3, [r3, #4]
 80092a2:	4a34      	ldr	r2, [pc, #208]	@ (8009374 <UART_AdvFeatureConfig+0x150>)
 80092a4:	4013      	ands	r3, r2
 80092a6:	0019      	movs	r1, r3
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	430a      	orrs	r2, r1
 80092b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092b8:	2210      	movs	r2, #16
 80092ba:	4013      	ands	r3, r2
 80092bc:	d00b      	beq.n	80092d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	689b      	ldr	r3, [r3, #8]
 80092c4:	4a2c      	ldr	r2, [pc, #176]	@ (8009378 <UART_AdvFeatureConfig+0x154>)
 80092c6:	4013      	ands	r3, r2
 80092c8:	0019      	movs	r1, r3
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	430a      	orrs	r2, r1
 80092d4:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092da:	2220      	movs	r2, #32
 80092dc:	4013      	ands	r3, r2
 80092de:	d00b      	beq.n	80092f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	689b      	ldr	r3, [r3, #8]
 80092e6:	4a25      	ldr	r2, [pc, #148]	@ (800937c <UART_AdvFeatureConfig+0x158>)
 80092e8:	4013      	ands	r3, r2
 80092ea:	0019      	movs	r1, r3
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	430a      	orrs	r2, r1
 80092f6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092fc:	2240      	movs	r2, #64	@ 0x40
 80092fe:	4013      	ands	r3, r2
 8009300:	d01d      	beq.n	800933e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	685b      	ldr	r3, [r3, #4]
 8009308:	4a1d      	ldr	r2, [pc, #116]	@ (8009380 <UART_AdvFeatureConfig+0x15c>)
 800930a:	4013      	ands	r3, r2
 800930c:	0019      	movs	r1, r3
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	430a      	orrs	r2, r1
 8009318:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800931e:	2380      	movs	r3, #128	@ 0x80
 8009320:	035b      	lsls	r3, r3, #13
 8009322:	429a      	cmp	r2, r3
 8009324:	d10b      	bne.n	800933e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	685b      	ldr	r3, [r3, #4]
 800932c:	4a15      	ldr	r2, [pc, #84]	@ (8009384 <UART_AdvFeatureConfig+0x160>)
 800932e:	4013      	ands	r3, r2
 8009330:	0019      	movs	r1, r3
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	430a      	orrs	r2, r1
 800933c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009342:	2280      	movs	r2, #128	@ 0x80
 8009344:	4013      	ands	r3, r2
 8009346:	d00b      	beq.n	8009360 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	685b      	ldr	r3, [r3, #4]
 800934e:	4a0e      	ldr	r2, [pc, #56]	@ (8009388 <UART_AdvFeatureConfig+0x164>)
 8009350:	4013      	ands	r3, r2
 8009352:	0019      	movs	r1, r3
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	430a      	orrs	r2, r1
 800935e:	605a      	str	r2, [r3, #4]
  }
}
 8009360:	46c0      	nop			@ (mov r8, r8)
 8009362:	46bd      	mov	sp, r7
 8009364:	b002      	add	sp, #8
 8009366:	bd80      	pop	{r7, pc}
 8009368:	ffff7fff 	.word	0xffff7fff
 800936c:	fffdffff 	.word	0xfffdffff
 8009370:	fffeffff 	.word	0xfffeffff
 8009374:	fffbffff 	.word	0xfffbffff
 8009378:	ffffefff 	.word	0xffffefff
 800937c:	ffffdfff 	.word	0xffffdfff
 8009380:	ffefffff 	.word	0xffefffff
 8009384:	ff9fffff 	.word	0xff9fffff
 8009388:	fff7ffff 	.word	0xfff7ffff

0800938c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b092      	sub	sp, #72	@ 0x48
 8009390:	af02      	add	r7, sp, #8
 8009392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2290      	movs	r2, #144	@ 0x90
 8009398:	2100      	movs	r1, #0
 800939a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800939c:	f7f9 fe34 	bl	8003008 <HAL_GetTick>
 80093a0:	0003      	movs	r3, r0
 80093a2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	2208      	movs	r2, #8
 80093ac:	4013      	ands	r3, r2
 80093ae:	2b08      	cmp	r3, #8
 80093b0:	d12d      	bne.n	800940e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80093b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093b4:	2280      	movs	r2, #128	@ 0x80
 80093b6:	0391      	lsls	r1, r2, #14
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	4a47      	ldr	r2, [pc, #284]	@ (80094d8 <UART_CheckIdleState+0x14c>)
 80093bc:	9200      	str	r2, [sp, #0]
 80093be:	2200      	movs	r2, #0
 80093c0:	f000 f88e 	bl	80094e0 <UART_WaitOnFlagUntilTimeout>
 80093c4:	1e03      	subs	r3, r0, #0
 80093c6:	d022      	beq.n	800940e <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80093c8:	f3ef 8310 	mrs	r3, PRIMASK
 80093cc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80093ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80093d0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80093d2:	2301      	movs	r3, #1
 80093d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093d8:	f383 8810 	msr	PRIMASK, r3
}
 80093dc:	46c0      	nop			@ (mov r8, r8)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	681a      	ldr	r2, [r3, #0]
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	2180      	movs	r1, #128	@ 0x80
 80093ea:	438a      	bics	r2, r1
 80093ec:	601a      	str	r2, [r3, #0]
 80093ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093f4:	f383 8810 	msr	PRIMASK, r3
}
 80093f8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2288      	movs	r2, #136	@ 0x88
 80093fe:	2120      	movs	r1, #32
 8009400:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2284      	movs	r2, #132	@ 0x84
 8009406:	2100      	movs	r1, #0
 8009408:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800940a:	2303      	movs	r3, #3
 800940c:	e060      	b.n	80094d0 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	2204      	movs	r2, #4
 8009416:	4013      	ands	r3, r2
 8009418:	2b04      	cmp	r3, #4
 800941a:	d146      	bne.n	80094aa <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800941c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800941e:	2280      	movs	r2, #128	@ 0x80
 8009420:	03d1      	lsls	r1, r2, #15
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	4a2c      	ldr	r2, [pc, #176]	@ (80094d8 <UART_CheckIdleState+0x14c>)
 8009426:	9200      	str	r2, [sp, #0]
 8009428:	2200      	movs	r2, #0
 800942a:	f000 f859 	bl	80094e0 <UART_WaitOnFlagUntilTimeout>
 800942e:	1e03      	subs	r3, r0, #0
 8009430:	d03b      	beq.n	80094aa <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009432:	f3ef 8310 	mrs	r3, PRIMASK
 8009436:	60fb      	str	r3, [r7, #12]
  return(result);
 8009438:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800943a:	637b      	str	r3, [r7, #52]	@ 0x34
 800943c:	2301      	movs	r3, #1
 800943e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	f383 8810 	msr	PRIMASK, r3
}
 8009446:	46c0      	nop			@ (mov r8, r8)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	681a      	ldr	r2, [r3, #0]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	4922      	ldr	r1, [pc, #136]	@ (80094dc <UART_CheckIdleState+0x150>)
 8009454:	400a      	ands	r2, r1
 8009456:	601a      	str	r2, [r3, #0]
 8009458:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800945a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	f383 8810 	msr	PRIMASK, r3
}
 8009462:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009464:	f3ef 8310 	mrs	r3, PRIMASK
 8009468:	61bb      	str	r3, [r7, #24]
  return(result);
 800946a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800946c:	633b      	str	r3, [r7, #48]	@ 0x30
 800946e:	2301      	movs	r3, #1
 8009470:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009472:	69fb      	ldr	r3, [r7, #28]
 8009474:	f383 8810 	msr	PRIMASK, r3
}
 8009478:	46c0      	nop			@ (mov r8, r8)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	689a      	ldr	r2, [r3, #8]
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	2101      	movs	r1, #1
 8009486:	438a      	bics	r2, r1
 8009488:	609a      	str	r2, [r3, #8]
 800948a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800948c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800948e:	6a3b      	ldr	r3, [r7, #32]
 8009490:	f383 8810 	msr	PRIMASK, r3
}
 8009494:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	228c      	movs	r2, #140	@ 0x8c
 800949a:	2120      	movs	r1, #32
 800949c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2284      	movs	r2, #132	@ 0x84
 80094a2:	2100      	movs	r1, #0
 80094a4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80094a6:	2303      	movs	r3, #3
 80094a8:	e012      	b.n	80094d0 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2288      	movs	r2, #136	@ 0x88
 80094ae:	2120      	movs	r1, #32
 80094b0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	228c      	movs	r2, #140	@ 0x8c
 80094b6:	2120      	movs	r1, #32
 80094b8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2200      	movs	r2, #0
 80094be:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2200      	movs	r2, #0
 80094c4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2284      	movs	r2, #132	@ 0x84
 80094ca:	2100      	movs	r1, #0
 80094cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80094ce:	2300      	movs	r3, #0
}
 80094d0:	0018      	movs	r0, r3
 80094d2:	46bd      	mov	sp, r7
 80094d4:	b010      	add	sp, #64	@ 0x40
 80094d6:	bd80      	pop	{r7, pc}
 80094d8:	01ffffff 	.word	0x01ffffff
 80094dc:	fffffedf 	.word	0xfffffedf

080094e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b084      	sub	sp, #16
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	60f8      	str	r0, [r7, #12]
 80094e8:	60b9      	str	r1, [r7, #8]
 80094ea:	603b      	str	r3, [r7, #0]
 80094ec:	1dfb      	adds	r3, r7, #7
 80094ee:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094f0:	e051      	b.n	8009596 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80094f2:	69bb      	ldr	r3, [r7, #24]
 80094f4:	3301      	adds	r3, #1
 80094f6:	d04e      	beq.n	8009596 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094f8:	f7f9 fd86 	bl	8003008 <HAL_GetTick>
 80094fc:	0002      	movs	r2, r0
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	1ad3      	subs	r3, r2, r3
 8009502:	69ba      	ldr	r2, [r7, #24]
 8009504:	429a      	cmp	r2, r3
 8009506:	d302      	bcc.n	800950e <UART_WaitOnFlagUntilTimeout+0x2e>
 8009508:	69bb      	ldr	r3, [r7, #24]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d101      	bne.n	8009512 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800950e:	2303      	movs	r3, #3
 8009510:	e051      	b.n	80095b6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	2204      	movs	r2, #4
 800951a:	4013      	ands	r3, r2
 800951c:	d03b      	beq.n	8009596 <UART_WaitOnFlagUntilTimeout+0xb6>
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	2b80      	cmp	r3, #128	@ 0x80
 8009522:	d038      	beq.n	8009596 <UART_WaitOnFlagUntilTimeout+0xb6>
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	2b40      	cmp	r3, #64	@ 0x40
 8009528:	d035      	beq.n	8009596 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	69db      	ldr	r3, [r3, #28]
 8009530:	2208      	movs	r2, #8
 8009532:	4013      	ands	r3, r2
 8009534:	2b08      	cmp	r3, #8
 8009536:	d111      	bne.n	800955c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	2208      	movs	r2, #8
 800953e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	0018      	movs	r0, r3
 8009544:	f000 f922 	bl	800978c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	2290      	movs	r2, #144	@ 0x90
 800954c:	2108      	movs	r1, #8
 800954e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	2284      	movs	r2, #132	@ 0x84
 8009554:	2100      	movs	r1, #0
 8009556:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8009558:	2301      	movs	r3, #1
 800955a:	e02c      	b.n	80095b6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	69da      	ldr	r2, [r3, #28]
 8009562:	2380      	movs	r3, #128	@ 0x80
 8009564:	011b      	lsls	r3, r3, #4
 8009566:	401a      	ands	r2, r3
 8009568:	2380      	movs	r3, #128	@ 0x80
 800956a:	011b      	lsls	r3, r3, #4
 800956c:	429a      	cmp	r2, r3
 800956e:	d112      	bne.n	8009596 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	2280      	movs	r2, #128	@ 0x80
 8009576:	0112      	lsls	r2, r2, #4
 8009578:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	0018      	movs	r0, r3
 800957e:	f000 f905 	bl	800978c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	2290      	movs	r2, #144	@ 0x90
 8009586:	2120      	movs	r1, #32
 8009588:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	2284      	movs	r2, #132	@ 0x84
 800958e:	2100      	movs	r1, #0
 8009590:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8009592:	2303      	movs	r3, #3
 8009594:	e00f      	b.n	80095b6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	69db      	ldr	r3, [r3, #28]
 800959c:	68ba      	ldr	r2, [r7, #8]
 800959e:	4013      	ands	r3, r2
 80095a0:	68ba      	ldr	r2, [r7, #8]
 80095a2:	1ad3      	subs	r3, r2, r3
 80095a4:	425a      	negs	r2, r3
 80095a6:	4153      	adcs	r3, r2
 80095a8:	b2db      	uxtb	r3, r3
 80095aa:	001a      	movs	r2, r3
 80095ac:	1dfb      	adds	r3, r7, #7
 80095ae:	781b      	ldrb	r3, [r3, #0]
 80095b0:	429a      	cmp	r2, r3
 80095b2:	d09e      	beq.n	80094f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80095b4:	2300      	movs	r3, #0
}
 80095b6:	0018      	movs	r0, r3
 80095b8:	46bd      	mov	sp, r7
 80095ba:	b004      	add	sp, #16
 80095bc:	bd80      	pop	{r7, pc}
	...

080095c0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b090      	sub	sp, #64	@ 0x40
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	60f8      	str	r0, [r7, #12]
 80095c8:	60b9      	str	r1, [r7, #8]
 80095ca:	1dbb      	adds	r3, r7, #6
 80095cc:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	68ba      	ldr	r2, [r7, #8]
 80095d2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	1dba      	adds	r2, r7, #6
 80095d8:	215c      	movs	r1, #92	@ 0x5c
 80095da:	8812      	ldrh	r2, [r2, #0]
 80095dc:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	2290      	movs	r2, #144	@ 0x90
 80095e2:	2100      	movs	r1, #0
 80095e4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	228c      	movs	r2, #140	@ 0x8c
 80095ea:	2122      	movs	r1, #34	@ 0x22
 80095ec:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	2280      	movs	r2, #128	@ 0x80
 80095f2:	589b      	ldr	r3, [r3, r2]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d02d      	beq.n	8009654 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	2280      	movs	r2, #128	@ 0x80
 80095fc:	589b      	ldr	r3, [r3, r2]
 80095fe:	4a40      	ldr	r2, [pc, #256]	@ (8009700 <UART_Start_Receive_DMA+0x140>)
 8009600:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	2280      	movs	r2, #128	@ 0x80
 8009606:	589b      	ldr	r3, [r3, r2]
 8009608:	4a3e      	ldr	r2, [pc, #248]	@ (8009704 <UART_Start_Receive_DMA+0x144>)
 800960a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	2280      	movs	r2, #128	@ 0x80
 8009610:	589b      	ldr	r3, [r3, r2]
 8009612:	4a3d      	ldr	r2, [pc, #244]	@ (8009708 <UART_Start_Receive_DMA+0x148>)
 8009614:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	2280      	movs	r2, #128	@ 0x80
 800961a:	589b      	ldr	r3, [r3, r2]
 800961c:	2200      	movs	r2, #0
 800961e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	2280      	movs	r2, #128	@ 0x80
 8009624:	5898      	ldr	r0, [r3, r2]
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	3324      	adds	r3, #36	@ 0x24
 800962c:	0019      	movs	r1, r3
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009632:	001a      	movs	r2, r3
 8009634:	1dbb      	adds	r3, r7, #6
 8009636:	881b      	ldrh	r3, [r3, #0]
 8009638:	f7fa fba0 	bl	8003d7c <HAL_DMA_Start_IT>
 800963c:	1e03      	subs	r3, r0, #0
 800963e:	d009      	beq.n	8009654 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	2290      	movs	r2, #144	@ 0x90
 8009644:	2110      	movs	r1, #16
 8009646:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	228c      	movs	r2, #140	@ 0x8c
 800964c:	2120      	movs	r1, #32
 800964e:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8009650:	2301      	movs	r3, #1
 8009652:	e050      	b.n	80096f6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	691b      	ldr	r3, [r3, #16]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d019      	beq.n	8009690 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800965c:	f3ef 8310 	mrs	r3, PRIMASK
 8009660:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8009662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009664:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009666:	2301      	movs	r3, #1
 8009668:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800966a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800966c:	f383 8810 	msr	PRIMASK, r3
}
 8009670:	46c0      	nop			@ (mov r8, r8)
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	681a      	ldr	r2, [r3, #0]
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	2180      	movs	r1, #128	@ 0x80
 800967e:	0049      	lsls	r1, r1, #1
 8009680:	430a      	orrs	r2, r1
 8009682:	601a      	str	r2, [r3, #0]
 8009684:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009686:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800968a:	f383 8810 	msr	PRIMASK, r3
}
 800968e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009690:	f3ef 8310 	mrs	r3, PRIMASK
 8009694:	613b      	str	r3, [r7, #16]
  return(result);
 8009696:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009698:	63bb      	str	r3, [r7, #56]	@ 0x38
 800969a:	2301      	movs	r3, #1
 800969c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800969e:	697b      	ldr	r3, [r7, #20]
 80096a0:	f383 8810 	msr	PRIMASK, r3
}
 80096a4:	46c0      	nop			@ (mov r8, r8)
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	689a      	ldr	r2, [r3, #8]
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	2101      	movs	r1, #1
 80096b2:	430a      	orrs	r2, r1
 80096b4:	609a      	str	r2, [r3, #8]
 80096b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096b8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096ba:	69bb      	ldr	r3, [r7, #24]
 80096bc:	f383 8810 	msr	PRIMASK, r3
}
 80096c0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80096c2:	f3ef 8310 	mrs	r3, PRIMASK
 80096c6:	61fb      	str	r3, [r7, #28]
  return(result);
 80096c8:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80096ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80096cc:	2301      	movs	r3, #1
 80096ce:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096d0:	6a3b      	ldr	r3, [r7, #32]
 80096d2:	f383 8810 	msr	PRIMASK, r3
}
 80096d6:	46c0      	nop			@ (mov r8, r8)
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	689a      	ldr	r2, [r3, #8]
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	2140      	movs	r1, #64	@ 0x40
 80096e4:	430a      	orrs	r2, r1
 80096e6:	609a      	str	r2, [r3, #8]
 80096e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096ea:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096ee:	f383 8810 	msr	PRIMASK, r3
}
 80096f2:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 80096f4:	2300      	movs	r3, #0
}
 80096f6:	0018      	movs	r0, r3
 80096f8:	46bd      	mov	sp, r7
 80096fa:	b010      	add	sp, #64	@ 0x40
 80096fc:	bd80      	pop	{r7, pc}
 80096fe:	46c0      	nop			@ (mov r8, r8)
 8009700:	08009911 	.word	0x08009911
 8009704:	08009a41 	.word	0x08009a41
 8009708:	08009a83 	.word	0x08009a83

0800970c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b08a      	sub	sp, #40	@ 0x28
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009714:	f3ef 8310 	mrs	r3, PRIMASK
 8009718:	60bb      	str	r3, [r7, #8]
  return(result);
 800971a:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800971c:	627b      	str	r3, [r7, #36]	@ 0x24
 800971e:	2301      	movs	r3, #1
 8009720:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	f383 8810 	msr	PRIMASK, r3
}
 8009728:	46c0      	nop			@ (mov r8, r8)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	681a      	ldr	r2, [r3, #0]
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	21c0      	movs	r1, #192	@ 0xc0
 8009736:	438a      	bics	r2, r1
 8009738:	601a      	str	r2, [r3, #0]
 800973a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800973c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	f383 8810 	msr	PRIMASK, r3
}
 8009744:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009746:	f3ef 8310 	mrs	r3, PRIMASK
 800974a:	617b      	str	r3, [r7, #20]
  return(result);
 800974c:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800974e:	623b      	str	r3, [r7, #32]
 8009750:	2301      	movs	r3, #1
 8009752:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009754:	69bb      	ldr	r3, [r7, #24]
 8009756:	f383 8810 	msr	PRIMASK, r3
}
 800975a:	46c0      	nop			@ (mov r8, r8)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	689a      	ldr	r2, [r3, #8]
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	4908      	ldr	r1, [pc, #32]	@ (8009788 <UART_EndTxTransfer+0x7c>)
 8009768:	400a      	ands	r2, r1
 800976a:	609a      	str	r2, [r3, #8]
 800976c:	6a3b      	ldr	r3, [r7, #32]
 800976e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009770:	69fb      	ldr	r3, [r7, #28]
 8009772:	f383 8810 	msr	PRIMASK, r3
}
 8009776:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2288      	movs	r2, #136	@ 0x88
 800977c:	2120      	movs	r1, #32
 800977e:	5099      	str	r1, [r3, r2]
}
 8009780:	46c0      	nop			@ (mov r8, r8)
 8009782:	46bd      	mov	sp, r7
 8009784:	b00a      	add	sp, #40	@ 0x28
 8009786:	bd80      	pop	{r7, pc}
 8009788:	ff7fffff 	.word	0xff7fffff

0800978c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b08e      	sub	sp, #56	@ 0x38
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009794:	f3ef 8310 	mrs	r3, PRIMASK
 8009798:	617b      	str	r3, [r7, #20]
  return(result);
 800979a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800979c:	637b      	str	r3, [r7, #52]	@ 0x34
 800979e:	2301      	movs	r3, #1
 80097a0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097a2:	69bb      	ldr	r3, [r7, #24]
 80097a4:	f383 8810 	msr	PRIMASK, r3
}
 80097a8:	46c0      	nop			@ (mov r8, r8)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	681a      	ldr	r2, [r3, #0]
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	4926      	ldr	r1, [pc, #152]	@ (8009850 <UART_EndRxTransfer+0xc4>)
 80097b6:	400a      	ands	r2, r1
 80097b8:	601a      	str	r2, [r3, #0]
 80097ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097be:	69fb      	ldr	r3, [r7, #28]
 80097c0:	f383 8810 	msr	PRIMASK, r3
}
 80097c4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80097c6:	f3ef 8310 	mrs	r3, PRIMASK
 80097ca:	623b      	str	r3, [r7, #32]
  return(result);
 80097cc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80097ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80097d0:	2301      	movs	r3, #1
 80097d2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097d6:	f383 8810 	msr	PRIMASK, r3
}
 80097da:	46c0      	nop			@ (mov r8, r8)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	689a      	ldr	r2, [r3, #8]
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	491b      	ldr	r1, [pc, #108]	@ (8009854 <UART_EndRxTransfer+0xc8>)
 80097e8:	400a      	ands	r2, r1
 80097ea:	609a      	str	r2, [r3, #8]
 80097ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097f2:	f383 8810 	msr	PRIMASK, r3
}
 80097f6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80097fc:	2b01      	cmp	r3, #1
 80097fe:	d118      	bne.n	8009832 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009800:	f3ef 8310 	mrs	r3, PRIMASK
 8009804:	60bb      	str	r3, [r7, #8]
  return(result);
 8009806:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009808:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800980a:	2301      	movs	r3, #1
 800980c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	f383 8810 	msr	PRIMASK, r3
}
 8009814:	46c0      	nop			@ (mov r8, r8)
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	681a      	ldr	r2, [r3, #0]
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	2110      	movs	r1, #16
 8009822:	438a      	bics	r2, r1
 8009824:	601a      	str	r2, [r3, #0]
 8009826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009828:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800982a:	693b      	ldr	r3, [r7, #16]
 800982c:	f383 8810 	msr	PRIMASK, r3
}
 8009830:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	228c      	movs	r2, #140	@ 0x8c
 8009836:	2120      	movs	r1, #32
 8009838:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2200      	movs	r2, #0
 800983e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2200      	movs	r2, #0
 8009844:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009846:	46c0      	nop			@ (mov r8, r8)
 8009848:	46bd      	mov	sp, r7
 800984a:	b00e      	add	sp, #56	@ 0x38
 800984c:	bd80      	pop	{r7, pc}
 800984e:	46c0      	nop			@ (mov r8, r8)
 8009850:	fffffedf 	.word	0xfffffedf
 8009854:	effffffe 	.word	0xeffffffe

08009858 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b08c      	sub	sp, #48	@ 0x30
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009864:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	2220      	movs	r2, #32
 800986e:	4013      	ands	r3, r2
 8009870:	d135      	bne.n	80098de <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8009872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009874:	2256      	movs	r2, #86	@ 0x56
 8009876:	2100      	movs	r1, #0
 8009878:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800987a:	f3ef 8310 	mrs	r3, PRIMASK
 800987e:	60fb      	str	r3, [r7, #12]
  return(result);
 8009880:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009882:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009884:	2301      	movs	r3, #1
 8009886:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009888:	693b      	ldr	r3, [r7, #16]
 800988a:	f383 8810 	msr	PRIMASK, r3
}
 800988e:	46c0      	nop			@ (mov r8, r8)
 8009890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	689a      	ldr	r2, [r3, #8]
 8009896:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	2180      	movs	r1, #128	@ 0x80
 800989c:	438a      	bics	r2, r1
 800989e:	609a      	str	r2, [r3, #8]
 80098a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	f383 8810 	msr	PRIMASK, r3
}
 80098aa:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80098ac:	f3ef 8310 	mrs	r3, PRIMASK
 80098b0:	61bb      	str	r3, [r7, #24]
  return(result);
 80098b2:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80098b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80098b6:	2301      	movs	r3, #1
 80098b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098ba:	69fb      	ldr	r3, [r7, #28]
 80098bc:	f383 8810 	msr	PRIMASK, r3
}
 80098c0:	46c0      	nop			@ (mov r8, r8)
 80098c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	681a      	ldr	r2, [r3, #0]
 80098c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	2140      	movs	r1, #64	@ 0x40
 80098ce:	430a      	orrs	r2, r1
 80098d0:	601a      	str	r2, [r3, #0]
 80098d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098d4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098d6:	6a3b      	ldr	r3, [r7, #32]
 80098d8:	f383 8810 	msr	PRIMASK, r3
}
 80098dc:	e004      	b.n	80098e8 <UART_DMATransmitCplt+0x90>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 80098de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098e0:	0018      	movs	r0, r3
 80098e2:	f7f8 f82d 	bl	8001940 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80098e6:	46c0      	nop			@ (mov r8, r8)
 80098e8:	46c0      	nop			@ (mov r8, r8)
 80098ea:	46bd      	mov	sp, r7
 80098ec:	b00c      	add	sp, #48	@ 0x30
 80098ee:	bd80      	pop	{r7, pc}

080098f0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b084      	sub	sp, #16
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098fc:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	0018      	movs	r0, r3
 8009902:	f7ff faf9 	bl	8008ef8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009906:	46c0      	nop			@ (mov r8, r8)
 8009908:	46bd      	mov	sp, r7
 800990a:	b004      	add	sp, #16
 800990c:	bd80      	pop	{r7, pc}
	...

08009910 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b094      	sub	sp, #80	@ 0x50
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800991c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	2220      	movs	r2, #32
 8009926:	4013      	ands	r3, r2
 8009928:	d16f      	bne.n	8009a0a <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800992a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800992c:	225e      	movs	r2, #94	@ 0x5e
 800992e:	2100      	movs	r1, #0
 8009930:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009932:	f3ef 8310 	mrs	r3, PRIMASK
 8009936:	61bb      	str	r3, [r7, #24]
  return(result);
 8009938:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800993a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800993c:	2301      	movs	r3, #1
 800993e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009940:	69fb      	ldr	r3, [r7, #28]
 8009942:	f383 8810 	msr	PRIMASK, r3
}
 8009946:	46c0      	nop			@ (mov r8, r8)
 8009948:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	681a      	ldr	r2, [r3, #0]
 800994e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	493a      	ldr	r1, [pc, #232]	@ (8009a3c <UART_DMAReceiveCplt+0x12c>)
 8009954:	400a      	ands	r2, r1
 8009956:	601a      	str	r2, [r3, #0]
 8009958:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800995a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800995c:	6a3b      	ldr	r3, [r7, #32]
 800995e:	f383 8810 	msr	PRIMASK, r3
}
 8009962:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009964:	f3ef 8310 	mrs	r3, PRIMASK
 8009968:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800996a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800996c:	647b      	str	r3, [r7, #68]	@ 0x44
 800996e:	2301      	movs	r3, #1
 8009970:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009974:	f383 8810 	msr	PRIMASK, r3
}
 8009978:	46c0      	nop			@ (mov r8, r8)
 800997a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	689a      	ldr	r2, [r3, #8]
 8009980:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	2101      	movs	r1, #1
 8009986:	438a      	bics	r2, r1
 8009988:	609a      	str	r2, [r3, #8]
 800998a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800998c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800998e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009990:	f383 8810 	msr	PRIMASK, r3
}
 8009994:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009996:	f3ef 8310 	mrs	r3, PRIMASK
 800999a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800999c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800999e:	643b      	str	r3, [r7, #64]	@ 0x40
 80099a0:	2301      	movs	r3, #1
 80099a2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80099a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099a6:	f383 8810 	msr	PRIMASK, r3
}
 80099aa:	46c0      	nop			@ (mov r8, r8)
 80099ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	689a      	ldr	r2, [r3, #8]
 80099b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	2140      	movs	r1, #64	@ 0x40
 80099b8:	438a      	bics	r2, r1
 80099ba:	609a      	str	r2, [r3, #8]
 80099bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80099be:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80099c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099c2:	f383 8810 	msr	PRIMASK, r3
}
 80099c6:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80099c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099ca:	228c      	movs	r2, #140	@ 0x8c
 80099cc:	2120      	movs	r1, #32
 80099ce:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80099d4:	2b01      	cmp	r3, #1
 80099d6:	d118      	bne.n	8009a0a <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80099d8:	f3ef 8310 	mrs	r3, PRIMASK
 80099dc:	60fb      	str	r3, [r7, #12]
  return(result);
 80099de:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80099e2:	2301      	movs	r3, #1
 80099e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80099e6:	693b      	ldr	r3, [r7, #16]
 80099e8:	f383 8810 	msr	PRIMASK, r3
}
 80099ec:	46c0      	nop			@ (mov r8, r8)
 80099ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	681a      	ldr	r2, [r3, #0]
 80099f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	2110      	movs	r1, #16
 80099fa:	438a      	bics	r2, r1
 80099fc:	601a      	str	r2, [r3, #0]
 80099fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a00:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	f383 8810 	msr	PRIMASK, r3
}
 8009a08:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009a0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a14:	2b01      	cmp	r3, #1
 8009a16:	d108      	bne.n	8009a2a <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009a18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a1a:	225c      	movs	r2, #92	@ 0x5c
 8009a1c:	5a9a      	ldrh	r2, [r3, r2]
 8009a1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a20:	0011      	movs	r1, r2
 8009a22:	0018      	movs	r0, r3
 8009a24:	f7f7 fee2 	bl	80017ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009a28:	e003      	b.n	8009a32 <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8009a2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a2c:	0018      	movs	r0, r3
 8009a2e:	f7ff fa6b 	bl	8008f08 <HAL_UART_RxCpltCallback>
}
 8009a32:	46c0      	nop			@ (mov r8, r8)
 8009a34:	46bd      	mov	sp, r7
 8009a36:	b014      	add	sp, #80	@ 0x50
 8009a38:	bd80      	pop	{r7, pc}
 8009a3a:	46c0      	nop			@ (mov r8, r8)
 8009a3c:	fffffeff 	.word	0xfffffeff

08009a40 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b084      	sub	sp, #16
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a4c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	2201      	movs	r2, #1
 8009a52:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a58:	2b01      	cmp	r3, #1
 8009a5a:	d10a      	bne.n	8009a72 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	225c      	movs	r2, #92	@ 0x5c
 8009a60:	5a9b      	ldrh	r3, [r3, r2]
 8009a62:	085b      	lsrs	r3, r3, #1
 8009a64:	b29a      	uxth	r2, r3
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	0011      	movs	r1, r2
 8009a6a:	0018      	movs	r0, r3
 8009a6c:	f7f7 febe 	bl	80017ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009a70:	e003      	b.n	8009a7a <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	0018      	movs	r0, r3
 8009a76:	f7ff fa4f 	bl	8008f18 <HAL_UART_RxHalfCpltCallback>
}
 8009a7a:	46c0      	nop			@ (mov r8, r8)
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	b004      	add	sp, #16
 8009a80:	bd80      	pop	{r7, pc}

08009a82 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009a82:	b580      	push	{r7, lr}
 8009a84:	b086      	sub	sp, #24
 8009a86:	af00      	add	r7, sp, #0
 8009a88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a8e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009a90:	697b      	ldr	r3, [r7, #20]
 8009a92:	2288      	movs	r2, #136	@ 0x88
 8009a94:	589b      	ldr	r3, [r3, r2]
 8009a96:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009a98:	697b      	ldr	r3, [r7, #20]
 8009a9a:	228c      	movs	r2, #140	@ 0x8c
 8009a9c:	589b      	ldr	r3, [r3, r2]
 8009a9e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009aa0:	697b      	ldr	r3, [r7, #20]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	689b      	ldr	r3, [r3, #8]
 8009aa6:	2280      	movs	r2, #128	@ 0x80
 8009aa8:	4013      	ands	r3, r2
 8009aaa:	2b80      	cmp	r3, #128	@ 0x80
 8009aac:	d10a      	bne.n	8009ac4 <UART_DMAError+0x42>
 8009aae:	693b      	ldr	r3, [r7, #16]
 8009ab0:	2b21      	cmp	r3, #33	@ 0x21
 8009ab2:	d107      	bne.n	8009ac4 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009ab4:	697b      	ldr	r3, [r7, #20]
 8009ab6:	2256      	movs	r2, #86	@ 0x56
 8009ab8:	2100      	movs	r1, #0
 8009aba:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	0018      	movs	r0, r3
 8009ac0:	f7ff fe24 	bl	800970c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009ac4:	697b      	ldr	r3, [r7, #20]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	689b      	ldr	r3, [r3, #8]
 8009aca:	2240      	movs	r2, #64	@ 0x40
 8009acc:	4013      	ands	r3, r2
 8009ace:	2b40      	cmp	r3, #64	@ 0x40
 8009ad0:	d10a      	bne.n	8009ae8 <UART_DMAError+0x66>
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	2b22      	cmp	r3, #34	@ 0x22
 8009ad6:	d107      	bne.n	8009ae8 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	225e      	movs	r2, #94	@ 0x5e
 8009adc:	2100      	movs	r1, #0
 8009ade:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8009ae0:	697b      	ldr	r3, [r7, #20]
 8009ae2:	0018      	movs	r0, r3
 8009ae4:	f7ff fe52 	bl	800978c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009ae8:	697b      	ldr	r3, [r7, #20]
 8009aea:	2290      	movs	r2, #144	@ 0x90
 8009aec:	589b      	ldr	r3, [r3, r2]
 8009aee:	2210      	movs	r2, #16
 8009af0:	431a      	orrs	r2, r3
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	2190      	movs	r1, #144	@ 0x90
 8009af6:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009af8:	697b      	ldr	r3, [r7, #20]
 8009afa:	0018      	movs	r0, r3
 8009afc:	f7f7 ff2e 	bl	800195c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b00:	46c0      	nop			@ (mov r8, r8)
 8009b02:	46bd      	mov	sp, r7
 8009b04:	b006      	add	sp, #24
 8009b06:	bd80      	pop	{r7, pc}

08009b08 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b084      	sub	sp, #16
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b14:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	225e      	movs	r2, #94	@ 0x5e
 8009b1a:	2100      	movs	r1, #0
 8009b1c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	2256      	movs	r2, #86	@ 0x56
 8009b22:	2100      	movs	r1, #0
 8009b24:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	0018      	movs	r0, r3
 8009b2a:	f7f7 ff17 	bl	800195c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b2e:	46c0      	nop			@ (mov r8, r8)
 8009b30:	46bd      	mov	sp, r7
 8009b32:	b004      	add	sp, #16
 8009b34:	bd80      	pop	{r7, pc}

08009b36 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009b36:	b580      	push	{r7, lr}
 8009b38:	b086      	sub	sp, #24
 8009b3a:	af00      	add	r7, sp, #0
 8009b3c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009b3e:	f3ef 8310 	mrs	r3, PRIMASK
 8009b42:	60bb      	str	r3, [r7, #8]
  return(result);
 8009b44:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009b46:	617b      	str	r3, [r7, #20]
 8009b48:	2301      	movs	r3, #1
 8009b4a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	f383 8810 	msr	PRIMASK, r3
}
 8009b52:	46c0      	nop			@ (mov r8, r8)
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	681a      	ldr	r2, [r3, #0]
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	2140      	movs	r1, #64	@ 0x40
 8009b60:	438a      	bics	r2, r1
 8009b62:	601a      	str	r2, [r3, #0]
 8009b64:	697b      	ldr	r3, [r7, #20]
 8009b66:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	f383 8810 	msr	PRIMASK, r3
}
 8009b6e:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2288      	movs	r2, #136	@ 0x88
 8009b74:	2120      	movs	r1, #32
 8009b76:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	0018      	movs	r0, r3
 8009b82:	f7f7 fedd 	bl	8001940 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b86:	46c0      	nop			@ (mov r8, r8)
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	b006      	add	sp, #24
 8009b8c:	bd80      	pop	{r7, pc}
	...

08009b90 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b086      	sub	sp, #24
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	60f8      	str	r0, [r7, #12]
 8009b98:	60b9      	str	r1, [r7, #8]
 8009b9a:	607a      	str	r2, [r7, #4]
 8009b9c:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d101      	bne.n	8009ba8 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	e05d      	b.n	8009c64 <HAL_RS485Ex_Init+0xd4>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	2288      	movs	r2, #136	@ 0x88
 8009bac:	589b      	ldr	r3, [r3, r2]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d107      	bne.n	8009bc2 <HAL_RS485Ex_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	2284      	movs	r2, #132	@ 0x84
 8009bb6:	2100      	movs	r1, #0
 8009bb8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	0018      	movs	r0, r3
 8009bbe:	f7f8 ffbd 	bl	8002b3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	2288      	movs	r2, #136	@ 0x88
 8009bc6:	2124      	movs	r1, #36	@ 0x24
 8009bc8:	5099      	str	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	681a      	ldr	r2, [r3, #0]
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	2101      	movs	r1, #1
 8009bd6:	438a      	bics	r2, r1
 8009bd8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d003      	beq.n	8009bea <HAL_RS485Ex_Init+0x5a>
  {
    UART_AdvFeatureConfig(huart);
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	0018      	movs	r0, r3
 8009be6:	f7ff fb1d 	bl	8009224 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	0018      	movs	r0, r3
 8009bee:	f7ff f99b 	bl	8008f28 <UART_SetConfig>
 8009bf2:	0003      	movs	r3, r0
 8009bf4:	2b01      	cmp	r3, #1
 8009bf6:	d101      	bne.n	8009bfc <HAL_RS485Ex_Init+0x6c>
  {
    return HAL_ERROR;
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	e033      	b.n	8009c64 <HAL_RS485Ex_Init+0xd4>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	689a      	ldr	r2, [r3, #8]
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	2180      	movs	r1, #128	@ 0x80
 8009c08:	01c9      	lsls	r1, r1, #7
 8009c0a:	430a      	orrs	r2, r1
 8009c0c:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	689b      	ldr	r3, [r3, #8]
 8009c14:	4a15      	ldr	r2, [pc, #84]	@ (8009c6c <HAL_RS485Ex_Init+0xdc>)
 8009c16:	4013      	ands	r3, r2
 8009c18:	0019      	movs	r1, r3
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	68ba      	ldr	r2, [r7, #8]
 8009c20:	430a      	orrs	r2, r1
 8009c22:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	055b      	lsls	r3, r3, #21
 8009c28:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	041b      	lsls	r3, r3, #16
 8009c2e:	697a      	ldr	r2, [r7, #20]
 8009c30:	4313      	orrs	r3, r2
 8009c32:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	4a0d      	ldr	r2, [pc, #52]	@ (8009c70 <HAL_RS485Ex_Init+0xe0>)
 8009c3c:	4013      	ands	r3, r2
 8009c3e:	0019      	movs	r1, r3
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	697a      	ldr	r2, [r7, #20]
 8009c46:	430a      	orrs	r2, r1
 8009c48:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	681a      	ldr	r2, [r3, #0]
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	2101      	movs	r1, #1
 8009c56:	430a      	orrs	r2, r1
 8009c58:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	0018      	movs	r0, r3
 8009c5e:	f7ff fb95 	bl	800938c <UART_CheckIdleState>
 8009c62:	0003      	movs	r3, r0
}
 8009c64:	0018      	movs	r0, r3
 8009c66:	46bd      	mov	sp, r7
 8009c68:	b006      	add	sp, #24
 8009c6a:	bd80      	pop	{r7, pc}
 8009c6c:	ffff7fff 	.word	0xffff7fff
 8009c70:	fc00ffff 	.word	0xfc00ffff

08009c74 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b082      	sub	sp, #8
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009c7c:	46c0      	nop			@ (mov r8, r8)
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	b002      	add	sp, #8
 8009c82:	bd80      	pop	{r7, pc}

08009c84 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b082      	sub	sp, #8
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009c8c:	46c0      	nop			@ (mov r8, r8)
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	b002      	add	sp, #8
 8009c92:	bd80      	pop	{r7, pc}

08009c94 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b082      	sub	sp, #8
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009c9c:	46c0      	nop			@ (mov r8, r8)
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	b002      	add	sp, #8
 8009ca2:	bd80      	pop	{r7, pc}

08009ca4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b084      	sub	sp, #16
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2284      	movs	r2, #132	@ 0x84
 8009cb0:	5c9b      	ldrb	r3, [r3, r2]
 8009cb2:	2b01      	cmp	r3, #1
 8009cb4:	d101      	bne.n	8009cba <HAL_UARTEx_DisableFifoMode+0x16>
 8009cb6:	2302      	movs	r3, #2
 8009cb8:	e027      	b.n	8009d0a <HAL_UARTEx_DisableFifoMode+0x66>
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2284      	movs	r2, #132	@ 0x84
 8009cbe:	2101      	movs	r1, #1
 8009cc0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2288      	movs	r2, #136	@ 0x88
 8009cc6:	2124      	movs	r1, #36	@ 0x24
 8009cc8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	681a      	ldr	r2, [r3, #0]
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	2101      	movs	r1, #1
 8009cde:	438a      	bics	r2, r1
 8009ce0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	4a0b      	ldr	r2, [pc, #44]	@ (8009d14 <HAL_UARTEx_DisableFifoMode+0x70>)
 8009ce6:	4013      	ands	r3, r2
 8009ce8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2200      	movs	r2, #0
 8009cee:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	68fa      	ldr	r2, [r7, #12]
 8009cf6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2288      	movs	r2, #136	@ 0x88
 8009cfc:	2120      	movs	r1, #32
 8009cfe:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2284      	movs	r2, #132	@ 0x84
 8009d04:	2100      	movs	r1, #0
 8009d06:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009d08:	2300      	movs	r3, #0
}
 8009d0a:	0018      	movs	r0, r3
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	b004      	add	sp, #16
 8009d10:	bd80      	pop	{r7, pc}
 8009d12:	46c0      	nop			@ (mov r8, r8)
 8009d14:	dfffffff 	.word	0xdfffffff

08009d18 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b084      	sub	sp, #16
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
 8009d20:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2284      	movs	r2, #132	@ 0x84
 8009d26:	5c9b      	ldrb	r3, [r3, r2]
 8009d28:	2b01      	cmp	r3, #1
 8009d2a:	d101      	bne.n	8009d30 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009d2c:	2302      	movs	r3, #2
 8009d2e:	e02e      	b.n	8009d8e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2284      	movs	r2, #132	@ 0x84
 8009d34:	2101      	movs	r1, #1
 8009d36:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2288      	movs	r2, #136	@ 0x88
 8009d3c:	2124      	movs	r1, #36	@ 0x24
 8009d3e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	681a      	ldr	r2, [r3, #0]
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	2101      	movs	r1, #1
 8009d54:	438a      	bics	r2, r1
 8009d56:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	689b      	ldr	r3, [r3, #8]
 8009d5e:	00db      	lsls	r3, r3, #3
 8009d60:	08d9      	lsrs	r1, r3, #3
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	683a      	ldr	r2, [r7, #0]
 8009d68:	430a      	orrs	r2, r1
 8009d6a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	0018      	movs	r0, r3
 8009d70:	f000 f8bc 	bl	8009eec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	68fa      	ldr	r2, [r7, #12]
 8009d7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2288      	movs	r2, #136	@ 0x88
 8009d80:	2120      	movs	r1, #32
 8009d82:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2284      	movs	r2, #132	@ 0x84
 8009d88:	2100      	movs	r1, #0
 8009d8a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009d8c:	2300      	movs	r3, #0
}
 8009d8e:	0018      	movs	r0, r3
 8009d90:	46bd      	mov	sp, r7
 8009d92:	b004      	add	sp, #16
 8009d94:	bd80      	pop	{r7, pc}
	...

08009d98 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b084      	sub	sp, #16
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
 8009da0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2284      	movs	r2, #132	@ 0x84
 8009da6:	5c9b      	ldrb	r3, [r3, r2]
 8009da8:	2b01      	cmp	r3, #1
 8009daa:	d101      	bne.n	8009db0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009dac:	2302      	movs	r3, #2
 8009dae:	e02f      	b.n	8009e10 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2284      	movs	r2, #132	@ 0x84
 8009db4:	2101      	movs	r1, #1
 8009db6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2288      	movs	r2, #136	@ 0x88
 8009dbc:	2124      	movs	r1, #36	@ 0x24
 8009dbe:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	681a      	ldr	r2, [r3, #0]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	2101      	movs	r1, #1
 8009dd4:	438a      	bics	r2, r1
 8009dd6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	689b      	ldr	r3, [r3, #8]
 8009dde:	4a0e      	ldr	r2, [pc, #56]	@ (8009e18 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8009de0:	4013      	ands	r3, r2
 8009de2:	0019      	movs	r1, r3
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	683a      	ldr	r2, [r7, #0]
 8009dea:	430a      	orrs	r2, r1
 8009dec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	0018      	movs	r0, r3
 8009df2:	f000 f87b 	bl	8009eec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	68fa      	ldr	r2, [r7, #12]
 8009dfc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2288      	movs	r2, #136	@ 0x88
 8009e02:	2120      	movs	r1, #32
 8009e04:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2284      	movs	r2, #132	@ 0x84
 8009e0a:	2100      	movs	r1, #0
 8009e0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009e0e:	2300      	movs	r3, #0
}
 8009e10:	0018      	movs	r0, r3
 8009e12:	46bd      	mov	sp, r7
 8009e14:	b004      	add	sp, #16
 8009e16:	bd80      	pop	{r7, pc}
 8009e18:	f1ffffff 	.word	0xf1ffffff

08009e1c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009e1c:	b5b0      	push	{r4, r5, r7, lr}
 8009e1e:	b08a      	sub	sp, #40	@ 0x28
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	60f8      	str	r0, [r7, #12]
 8009e24:	60b9      	str	r1, [r7, #8]
 8009e26:	1dbb      	adds	r3, r7, #6
 8009e28:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	228c      	movs	r2, #140	@ 0x8c
 8009e2e:	589b      	ldr	r3, [r3, r2]
 8009e30:	2b20      	cmp	r3, #32
 8009e32:	d156      	bne.n	8009ee2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d003      	beq.n	8009e42 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8009e3a:	1dbb      	adds	r3, r7, #6
 8009e3c:	881b      	ldrh	r3, [r3, #0]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d101      	bne.n	8009e46 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8009e42:	2301      	movs	r3, #1
 8009e44:	e04e      	b.n	8009ee4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	689a      	ldr	r2, [r3, #8]
 8009e4a:	2380      	movs	r3, #128	@ 0x80
 8009e4c:	015b      	lsls	r3, r3, #5
 8009e4e:	429a      	cmp	r2, r3
 8009e50:	d109      	bne.n	8009e66 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	691b      	ldr	r3, [r3, #16]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d105      	bne.n	8009e66 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	2201      	movs	r2, #1
 8009e5e:	4013      	ands	r3, r2
 8009e60:	d001      	beq.n	8009e66 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 8009e62:	2301      	movs	r3, #1
 8009e64:	e03e      	b.n	8009ee4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	2201      	movs	r2, #1
 8009e6a:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	2200      	movs	r2, #0
 8009e70:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8009e72:	2527      	movs	r5, #39	@ 0x27
 8009e74:	197c      	adds	r4, r7, r5
 8009e76:	1dbb      	adds	r3, r7, #6
 8009e78:	881a      	ldrh	r2, [r3, #0]
 8009e7a:	68b9      	ldr	r1, [r7, #8]
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	0018      	movs	r0, r3
 8009e80:	f7ff fb9e 	bl	80095c0 <UART_Start_Receive_DMA>
 8009e84:	0003      	movs	r3, r0
 8009e86:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8009e88:	197b      	adds	r3, r7, r5
 8009e8a:	781b      	ldrb	r3, [r3, #0]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d124      	bne.n	8009eda <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e94:	2b01      	cmp	r3, #1
 8009e96:	d11c      	bne.n	8009ed2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	2210      	movs	r2, #16
 8009e9e:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009ea0:	f3ef 8310 	mrs	r3, PRIMASK
 8009ea4:	617b      	str	r3, [r7, #20]
  return(result);
 8009ea6:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ea8:	623b      	str	r3, [r7, #32]
 8009eaa:	2301      	movs	r3, #1
 8009eac:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009eae:	69bb      	ldr	r3, [r7, #24]
 8009eb0:	f383 8810 	msr	PRIMASK, r3
}
 8009eb4:	46c0      	nop			@ (mov r8, r8)
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	681a      	ldr	r2, [r3, #0]
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	2110      	movs	r1, #16
 8009ec2:	430a      	orrs	r2, r1
 8009ec4:	601a      	str	r2, [r3, #0]
 8009ec6:	6a3b      	ldr	r3, [r7, #32]
 8009ec8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009eca:	69fb      	ldr	r3, [r7, #28]
 8009ecc:	f383 8810 	msr	PRIMASK, r3
}
 8009ed0:	e003      	b.n	8009eda <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8009ed2:	2327      	movs	r3, #39	@ 0x27
 8009ed4:	18fb      	adds	r3, r7, r3
 8009ed6:	2201      	movs	r2, #1
 8009ed8:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 8009eda:	2327      	movs	r3, #39	@ 0x27
 8009edc:	18fb      	adds	r3, r7, r3
 8009ede:	781b      	ldrb	r3, [r3, #0]
 8009ee0:	e000      	b.n	8009ee4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8009ee2:	2302      	movs	r3, #2
  }
}
 8009ee4:	0018      	movs	r0, r3
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	b00a      	add	sp, #40	@ 0x28
 8009eea:	bdb0      	pop	{r4, r5, r7, pc}

08009eec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009eec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009eee:	b085      	sub	sp, #20
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d108      	bne.n	8009f0e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	226a      	movs	r2, #106	@ 0x6a
 8009f00:	2101      	movs	r1, #1
 8009f02:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2268      	movs	r2, #104	@ 0x68
 8009f08:	2101      	movs	r1, #1
 8009f0a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009f0c:	e043      	b.n	8009f96 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009f0e:	260f      	movs	r6, #15
 8009f10:	19bb      	adds	r3, r7, r6
 8009f12:	2208      	movs	r2, #8
 8009f14:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009f16:	200e      	movs	r0, #14
 8009f18:	183b      	adds	r3, r7, r0
 8009f1a:	2208      	movs	r2, #8
 8009f1c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	689b      	ldr	r3, [r3, #8]
 8009f24:	0e5b      	lsrs	r3, r3, #25
 8009f26:	b2da      	uxtb	r2, r3
 8009f28:	240d      	movs	r4, #13
 8009f2a:	193b      	adds	r3, r7, r4
 8009f2c:	2107      	movs	r1, #7
 8009f2e:	400a      	ands	r2, r1
 8009f30:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	689b      	ldr	r3, [r3, #8]
 8009f38:	0f5b      	lsrs	r3, r3, #29
 8009f3a:	b2da      	uxtb	r2, r3
 8009f3c:	250c      	movs	r5, #12
 8009f3e:	197b      	adds	r3, r7, r5
 8009f40:	2107      	movs	r1, #7
 8009f42:	400a      	ands	r2, r1
 8009f44:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009f46:	183b      	adds	r3, r7, r0
 8009f48:	781b      	ldrb	r3, [r3, #0]
 8009f4a:	197a      	adds	r2, r7, r5
 8009f4c:	7812      	ldrb	r2, [r2, #0]
 8009f4e:	4914      	ldr	r1, [pc, #80]	@ (8009fa0 <UARTEx_SetNbDataToProcess+0xb4>)
 8009f50:	5c8a      	ldrb	r2, [r1, r2]
 8009f52:	435a      	muls	r2, r3
 8009f54:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8009f56:	197b      	adds	r3, r7, r5
 8009f58:	781b      	ldrb	r3, [r3, #0]
 8009f5a:	4a12      	ldr	r2, [pc, #72]	@ (8009fa4 <UARTEx_SetNbDataToProcess+0xb8>)
 8009f5c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009f5e:	0019      	movs	r1, r3
 8009f60:	f7f6 f95c 	bl	800021c <__divsi3>
 8009f64:	0003      	movs	r3, r0
 8009f66:	b299      	uxth	r1, r3
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	226a      	movs	r2, #106	@ 0x6a
 8009f6c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009f6e:	19bb      	adds	r3, r7, r6
 8009f70:	781b      	ldrb	r3, [r3, #0]
 8009f72:	193a      	adds	r2, r7, r4
 8009f74:	7812      	ldrb	r2, [r2, #0]
 8009f76:	490a      	ldr	r1, [pc, #40]	@ (8009fa0 <UARTEx_SetNbDataToProcess+0xb4>)
 8009f78:	5c8a      	ldrb	r2, [r1, r2]
 8009f7a:	435a      	muls	r2, r3
 8009f7c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8009f7e:	193b      	adds	r3, r7, r4
 8009f80:	781b      	ldrb	r3, [r3, #0]
 8009f82:	4a08      	ldr	r2, [pc, #32]	@ (8009fa4 <UARTEx_SetNbDataToProcess+0xb8>)
 8009f84:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009f86:	0019      	movs	r1, r3
 8009f88:	f7f6 f948 	bl	800021c <__divsi3>
 8009f8c:	0003      	movs	r3, r0
 8009f8e:	b299      	uxth	r1, r3
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2268      	movs	r2, #104	@ 0x68
 8009f94:	5299      	strh	r1, [r3, r2]
}
 8009f96:	46c0      	nop			@ (mov r8, r8)
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	b005      	add	sp, #20
 8009f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f9e:	46c0      	nop			@ (mov r8, r8)
 8009fa0:	0800a420 	.word	0x0800a420
 8009fa4:	0800a428 	.word	0x0800a428

08009fa8 <memset>:
 8009fa8:	0003      	movs	r3, r0
 8009faa:	1882      	adds	r2, r0, r2
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d100      	bne.n	8009fb2 <memset+0xa>
 8009fb0:	4770      	bx	lr
 8009fb2:	7019      	strb	r1, [r3, #0]
 8009fb4:	3301      	adds	r3, #1
 8009fb6:	e7f9      	b.n	8009fac <memset+0x4>

08009fb8 <__libc_init_array>:
 8009fb8:	b570      	push	{r4, r5, r6, lr}
 8009fba:	2600      	movs	r6, #0
 8009fbc:	4c0c      	ldr	r4, [pc, #48]	@ (8009ff0 <__libc_init_array+0x38>)
 8009fbe:	4d0d      	ldr	r5, [pc, #52]	@ (8009ff4 <__libc_init_array+0x3c>)
 8009fc0:	1b64      	subs	r4, r4, r5
 8009fc2:	10a4      	asrs	r4, r4, #2
 8009fc4:	42a6      	cmp	r6, r4
 8009fc6:	d109      	bne.n	8009fdc <__libc_init_array+0x24>
 8009fc8:	2600      	movs	r6, #0
 8009fca:	f000 f823 	bl	800a014 <_init>
 8009fce:	4c0a      	ldr	r4, [pc, #40]	@ (8009ff8 <__libc_init_array+0x40>)
 8009fd0:	4d0a      	ldr	r5, [pc, #40]	@ (8009ffc <__libc_init_array+0x44>)
 8009fd2:	1b64      	subs	r4, r4, r5
 8009fd4:	10a4      	asrs	r4, r4, #2
 8009fd6:	42a6      	cmp	r6, r4
 8009fd8:	d105      	bne.n	8009fe6 <__libc_init_array+0x2e>
 8009fda:	bd70      	pop	{r4, r5, r6, pc}
 8009fdc:	00b3      	lsls	r3, r6, #2
 8009fde:	58eb      	ldr	r3, [r5, r3]
 8009fe0:	4798      	blx	r3
 8009fe2:	3601      	adds	r6, #1
 8009fe4:	e7ee      	b.n	8009fc4 <__libc_init_array+0xc>
 8009fe6:	00b3      	lsls	r3, r6, #2
 8009fe8:	58eb      	ldr	r3, [r5, r3]
 8009fea:	4798      	blx	r3
 8009fec:	3601      	adds	r6, #1
 8009fee:	e7f2      	b.n	8009fd6 <__libc_init_array+0x1e>
 8009ff0:	0800a430 	.word	0x0800a430
 8009ff4:	0800a430 	.word	0x0800a430
 8009ff8:	0800a434 	.word	0x0800a434
 8009ffc:	0800a430 	.word	0x0800a430

0800a000 <memcpy>:
 800a000:	2300      	movs	r3, #0
 800a002:	b510      	push	{r4, lr}
 800a004:	429a      	cmp	r2, r3
 800a006:	d100      	bne.n	800a00a <memcpy+0xa>
 800a008:	bd10      	pop	{r4, pc}
 800a00a:	5ccc      	ldrb	r4, [r1, r3]
 800a00c:	54c4      	strb	r4, [r0, r3]
 800a00e:	3301      	adds	r3, #1
 800a010:	e7f8      	b.n	800a004 <memcpy+0x4>
	...

0800a014 <_init>:
 800a014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a016:	46c0      	nop			@ (mov r8, r8)
 800a018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a01a:	bc08      	pop	{r3}
 800a01c:	469e      	mov	lr, r3
 800a01e:	4770      	bx	lr

0800a020 <_fini>:
 800a020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a022:	46c0      	nop			@ (mov r8, r8)
 800a024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a026:	bc08      	pop	{r3}
 800a028:	469e      	mov	lr, r3
 800a02a:	4770      	bx	lr
